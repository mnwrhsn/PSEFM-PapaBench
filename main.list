
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 05 20 71 89 01 00 b5 89 01 00 b5 89 01 00     .P. q...........
      10:	b5 89 01 00 b5 89 01 00 b5 89 01 00 00 00 00 00     ................
	...
      2c:	6d 5d 00 00 b5 89 01 00 00 00 00 00 79 5e 00 00     m]..........y^..
      3c:	b5 5e 00 00 b5 89 01 00 b5 89 01 00 b5 89 01 00     .^..............
      4c:	b5 89 01 00 b5 89 01 00 b5 89 01 00 b5 89 01 00     ................
      5c:	b5 89 01 00 b5 89 01 00 b5 89 01 00 b5 89 01 00     ................
      6c:	b5 89 01 00 b5 89 01 00 b5 89 01 00 b5 89 01 00     ................
      7c:	b5 89 01 00 b5 89 01 00 b5 89 01 00 b5 89 01 00     ................
      8c:	b5 89 01 00 b5 89 01 00 b5 89 01 00 b5 89 01 00     ................
      9c:	b5 89 01 00 b5 89 01 00 b5 89 01 00 b5 89 01 00     ................
      ac:	b5 89 01 00 b5 89 01 00 b5 89 01 00 b5 89 01 00     ................
      bc:	b5 89 01 00 b5 89 01 00 b5 89 01 00 b5 89 01 00     ................
      cc:	b5 89 01 00 b5 89 01 00 b5 89 01 00 b5 89 01 00     ................
      dc:	b5 89 01 00 b5 89 01 00 b5 89 01 00 b5 89 01 00     ................
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00018aa0 	.word	0x00018aa0
     6d0:	20000000 	.word	0x20000000
     6d4:	200005d8 	.word	0x200005d8
     6d8:	200005d8 	.word	0x200005d8
     6dc:	2004cba4 	.word	0x2004cba4

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fd83 	bl	5f04 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 6344 	movw	r3, #1604	; 0x644
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 6344 	movw	r3, #1604	; 0x644
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fec4 	bl	41d8 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 febf 	bl	41d8 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0205 	rsb	r2, r3, #5
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 6348 	movw	r3, #1608	; 0x648
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 6348 	movw	r3, #1608	; 0x648
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fe9f 	bl	41f0 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 634c 	movw	r3, #1612	; 0x64c
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 6344 	movw	r3, #1604	; 0x644
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fede 	bl	42b0 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 6344 	movw	r3, #1604	; 0x644
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 634c 	movw	r3, #1612	; 0x64c
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 632c 	movw	r3, #1580	; 0x62c
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 6344 	movw	r3, #1604	; 0x644
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fe88 	bl	4240 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 6328 	movw	r3, #1576	; 0x628
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 6344 	movw	r3, #1604	; 0x644
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fe78 	bl	4240 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 6344 	movw	r3, #1604	; 0x644
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fe6b 	bl	4240 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 6330 	movw	r3, #1584	; 0x630
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fe8c 	bl	42b0 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fe83 	bl	42b0 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 6348 	movw	r3, #1608	; 0x648
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 6348 	movw	r3, #1608	; 0x648
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fe02 	bl	41f0 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 6330 	movw	r3, #1584	; 0x630
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fed1 	bl	53ac <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 6350 	movw	r3, #1616	; 0x650
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 6354 	movw	r3, #1620	; 0x654
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 634c 	movw	r3, #1612	; 0x64c
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 634c 	movw	r3, #1612	; 0x64c
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 6354 	movw	r3, #1620	; 0x654
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 6354 	movw	r3, #1620	; 0x654
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 634c 	movw	r3, #1612	; 0x64c
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 6328 	movw	r3, #1576	; 0x628
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 632c 	movw	r3, #1580	; 0x62c
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 6328 	movw	r3, #1576	; 0x628
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 632c 	movw	r3, #1580	; 0x62c
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 6328 	movw	r3, #1576	; 0x628
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 634c 	movw	r3, #1612	; 0x64c
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fdf6 	bl	42b0 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fded 	bl	42b0 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 6348 	movw	r3, #1608	; 0x648
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 6348 	movw	r3, #1608	; 0x648
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fd68 	bl	41f0 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 6328 	movw	r3, #1576	; 0x628
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 6354 	movw	r3, #1620	; 0x654
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 634c 	movw	r3, #1612	; 0x64c
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 6350 	movw	r3, #1616	; 0x650
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 6348 	movw	r3, #1608	; 0x648
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 6348 	movw	r3, #1608	; 0x648
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 6348 	movw	r3, #1608	; 0x648
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 6348 	movw	r3, #1608	; 0x648
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 6348 	movw	r3, #1608	; 0x648
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 6344 	movw	r3, #1604	; 0x644
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 6344 	movw	r3, #1604	; 0x644
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 6344 	movw	r3, #1604	; 0x644
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 6344 	movw	r3, #1604	; 0x644
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 fc9f 	bl	4198 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 6000 	movw	r0, #1536	; 0x600
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 fc93 	bl	4198 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 6014 	movw	r0, #1556	; 0x614
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 fc8d 	bl	4198 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 6030 	movw	r0, #1584	; 0x630
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 fc87 	bl	4198 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 6328 	movw	r3, #1576	; 0x628
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 6200 	movw	r2, #1536	; 0x600
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 632c 	movw	r3, #1580	; 0x62c
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 6214 	movw	r2, #1556	; 0x614
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 fcf1 	bl	42b0 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 6030 	movw	r0, #1584	; 0x630
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 fc88 	bl	41f0 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 6344 	movw	r3, #1604	; 0x644
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <xIsERLNull>:
static void vEventSetxTag(portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent );

// if xEventReadyList is not null,
// then return the type of destination servant of the first event
portBASE_TYPE xIsERLNull()
{
    2908:	b580      	push	{r7, lr}
    290a:	b086      	sub	sp, #24
    290c:	af00      	add	r7, sp, #0
    portBASE_TYPE pxDestination;
    struct tag xTag;
    if(listCURRENT_LIST_LENGTH(&xEventReadyList) > 0)
    290e:	f240 63c4 	movw	r3, #1732	; 0x6c4
    2912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2916:	681b      	ldr	r3, [r3, #0]
    2918:	2b00      	cmp	r3, #0
    291a:	d029      	beq.n	2970 <xIsERLNull+0x68>
    {
        pxDestination = xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); 
    291c:	f240 63c4 	movw	r3, #1732	; 0x6c4
    2920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2924:	68db      	ldr	r3, [r3, #12]
    2926:	68db      	ldr	r3, [r3, #12]
    2928:	4618      	mov	r0, r3
    292a:	f000 f833 	bl	2994 <xEventGetpxDestination>
    292e:	6178      	str	r0, [r7, #20]
        xTag = xEventGetxTag(xEventReadyList.xListEnd.pxNext->pvOwner);
    2930:	f240 63c4 	movw	r3, #1732	; 0x6c4
    2934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2938:	68db      	ldr	r3, [r3, #12]
    293a:	68db      	ldr	r3, [r3, #12]
    293c:	1d3a      	adds	r2, r7, #4
    293e:	4610      	mov	r0, r2
    2940:	4619      	mov	r1, r3
    2942:	f000 f833 	bl	29ac <xEventGetxTag>
        if( xTaskGetTickCount() >= xTag.xTimestamp )
    2946:	f002 fd31 	bl	53ac <xTaskGetTickCount>
    294a:	4602      	mov	r2, r0
    294c:	68bb      	ldr	r3, [r7, #8]
    294e:	429a      	cmp	r2, r3
    2950:	d30c      	bcc.n	296c <xIsERLNull+0x64>
            return xContexts[pxDestination].xType; 
    2952:	f240 62dc 	movw	r2, #1756	; 0x6dc
    2956:	f2c2 0200 	movt	r2, #8192	; 0x2000
    295a:	6979      	ldr	r1, [r7, #20]
    295c:	460b      	mov	r3, r1
    295e:	00db      	lsls	r3, r3, #3
    2960:	1a5b      	subs	r3, r3, r1
    2962:	00db      	lsls	r3, r3, #3
    2964:	4413      	add	r3, r2
    2966:	3304      	adds	r3, #4
    2968:	681b      	ldr	r3, [r3, #0]
    296a:	e003      	b.n	2974 <xIsERLNull+0x6c>
        else
            return 0;
    296c:	2300      	movs	r3, #0
    296e:	e001      	b.n	2974 <xIsERLNull+0x6c>
    }
    return -1;
    2970:	f04f 33ff 	mov.w	r3, #4294967295
}
    2974:	4618      	mov	r0, r3
    2976:	3718      	adds	r7, #24
    2978:	46bd      	mov	sp, r7
    297a:	bd80      	pop	{r7, pc}

0000297c <xEventGetpxSource>:

portBASE_TYPE xEventGetpxSource( xEventHandle pxEvent )
{
    297c:	b480      	push	{r7}
    297e:	b083      	sub	sp, #12
    2980:	af00      	add	r7, sp, #0
    2982:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	681b      	ldr	r3, [r3, #0]
}
    2988:	4618      	mov	r0, r3
    298a:	370c      	adds	r7, #12
    298c:	46bd      	mov	sp, r7
    298e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2992:	4770      	bx	lr

00002994 <xEventGetpxDestination>:

portBASE_TYPE xEventGetpxDestination( xEventHandle pxEvent)
{
    2994:	b480      	push	{r7}
    2996:	b083      	sub	sp, #12
    2998:	af00      	add	r7, sp, #0
    299a:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    299c:	687b      	ldr	r3, [r7, #4]
    299e:	685b      	ldr	r3, [r3, #4]
}
    29a0:	4618      	mov	r0, r3
    29a2:	370c      	adds	r7, #12
    29a4:	46bd      	mov	sp, r7
    29a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29aa:	4770      	bx	lr

000029ac <xEventGetxTag>:

struct tag xEventGetxTag( xEventHandle pxEvent)
{
    29ac:	b490      	push	{r4, r7}
    29ae:	b082      	sub	sp, #8
    29b0:	af00      	add	r7, sp, #0
    29b2:	6078      	str	r0, [r7, #4]
    29b4:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xTag;
    29b6:	687a      	ldr	r2, [r7, #4]
    29b8:	683b      	ldr	r3, [r7, #0]
    29ba:	4614      	mov	r4, r2
    29bc:	3308      	adds	r3, #8
    29be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    29c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    29c4:	6878      	ldr	r0, [r7, #4]
    29c6:	3708      	adds	r7, #8
    29c8:	46bd      	mov	sp, r7
    29ca:	bc90      	pop	{r4, r7}
    29cc:	4770      	bx	lr
    29ce:	bf00      	nop

000029d0 <xEventGetxData>:

struct eventData xEventGetxData( xEventHandle pxEvent)
{
    29d0:	b480      	push	{r7}
    29d2:	b083      	sub	sp, #12
    29d4:	af00      	add	r7, sp, #0
    29d6:	6078      	str	r0, [r7, #4]
    29d8:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xData;
    29da:	687b      	ldr	r3, [r7, #4]
    29dc:	683a      	ldr	r2, [r7, #0]
    29de:	3218      	adds	r2, #24
    29e0:	e892 0003 	ldmia.w	r2, {r0, r1}
    29e4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    29e8:	6878      	ldr	r0, [r7, #4]
    29ea:	370c      	adds	r7, #12
    29ec:	46bd      	mov	sp, r7
    29ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    29f2:	4770      	bx	lr

000029f4 <getGCD>:

static portBASE_TYPE getGCD(portTickType t1, portTickType t2)
{
    29f4:	b580      	push	{r7, lr}
    29f6:	b082      	sub	sp, #8
    29f8:	af00      	add	r7, sp, #0
    29fa:	6078      	str	r0, [r7, #4]
    29fc:	6039      	str	r1, [r7, #0]
    return t1%t2==0 ? t2 : getGCD(t2, t1 % t2);
    29fe:	687b      	ldr	r3, [r7, #4]
    2a00:	683a      	ldr	r2, [r7, #0]
    2a02:	fbb3 f2f2 	udiv	r2, r3, r2
    2a06:	6839      	ldr	r1, [r7, #0]
    2a08:	fb01 f202 	mul.w	r2, r1, r2
    2a0c:	1a9b      	subs	r3, r3, r2
    2a0e:	2b00      	cmp	r3, #0
    2a10:	d00d      	beq.n	2a2e <getGCD+0x3a>
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	683a      	ldr	r2, [r7, #0]
    2a16:	fbb3 f2f2 	udiv	r2, r3, r2
    2a1a:	6839      	ldr	r1, [r7, #0]
    2a1c:	fb01 f202 	mul.w	r2, r1, r2
    2a20:	1a9b      	subs	r3, r3, r2
    2a22:	6838      	ldr	r0, [r7, #0]
    2a24:	4619      	mov	r1, r3
    2a26:	f7ff ffe5 	bl	29f4 <getGCD>
    2a2a:	4603      	mov	r3, r0
    2a2c:	e000      	b.n	2a30 <getGCD+0x3c>
    2a2e:	683b      	ldr	r3, [r7, #0]
}
    2a30:	4618      	mov	r0, r3
    2a32:	3708      	adds	r7, #8
    2a34:	46bd      	mov	sp, r7
    2a36:	bd80      	pop	{r7, pc}

00002a38 <GCDOfTaskPeriod>:

inline static portTickType GCDOfTaskPeriod()
{
    2a38:	b580      	push	{r7, lr}
    2a3a:	b082      	sub	sp, #8
    2a3c:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];
    2a3e:	f240 0328 	movw	r3, #40	; 0x28
    2a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a46:	681b      	ldr	r3, [r3, #0]
    2a48:	603b      	str	r3, [r7, #0]

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a4a:	2301      	movs	r3, #1
    2a4c:	607b      	str	r3, [r7, #4]
    2a4e:	e00f      	b.n	2a70 <GCDOfTaskPeriod+0x38>
    {
        result = getGCD(result , xPeriodOfTask[i]); 
    2a50:	f240 0328 	movw	r3, #40	; 0x28
    2a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a58:	687a      	ldr	r2, [r7, #4]
    2a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2a5e:	6838      	ldr	r0, [r7, #0]
    2a60:	4619      	mov	r1, r3
    2a62:	f7ff ffc7 	bl	29f4 <getGCD>
    2a66:	4603      	mov	r3, r0
    2a68:	603b      	str	r3, [r7, #0]
inline static portTickType GCDOfTaskPeriod()
{
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a6a:	687b      	ldr	r3, [r7, #4]
    2a6c:	3301      	adds	r3, #1
    2a6e:	607b      	str	r3, [r7, #4]
    2a70:	687b      	ldr	r3, [r7, #4]
    2a72:	2b0c      	cmp	r3, #12
    2a74:	ddec      	ble.n	2a50 <GCDOfTaskPeriod+0x18>
    {
        result = getGCD(result , xPeriodOfTask[i]); 
    }
    return result;
    2a76:	683b      	ldr	r3, [r7, #0]
}
    2a78:	4618      	mov	r0, r3
    2a7a:	3708      	adds	r7, #8
    2a7c:	46bd      	mov	sp, r7
    2a7e:	bd80      	pop	{r7, pc}

00002a80 <vInitialiseEventLists>:

void vInitialiseEventLists() 
{
    2a80:	b590      	push	{r4, r7, lr}
    2a82:	b091      	sub	sp, #68	; 0x44
    2a84:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU, i;
    eveECB * pxIdleEvents[NUMBEROFEVENTS];
    eveECB * pxEndFlagEvent;

    // init the GCD of Task period;
    GCDPeriod = GCDOfTaskPeriod();
    2a86:	f7ff ffd7 	bl	2a38 <GCDOfTaskPeriod>
    2a8a:	4602      	mov	r2, r0
    2a8c:	f240 6358 	movw	r3, #1624	; 0x658
    2a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a94:	601a      	str	r2, [r3, #0]

    vListInitialise( ( xList * ) &xEventIdleList);
    2a96:	f240 6060 	movw	r0, #1632	; 0x660
    2a9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a9e:	f001 fb7b 	bl	4198 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutablePool );
    2aa2:	f240 6074 	movw	r0, #1652	; 0x674
    2aa6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2aaa:	f001 fb75 	bl	4198 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    2aae:	f240 6088 	movw	r0, #1672	; 0x688
    2ab2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ab6:	f001 fb6f 	bl	4198 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutablePool );
    2aba:	f240 609c 	movw	r0, #1692	; 0x69c
    2abe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ac2:	f001 fb69 	bl	4198 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutableList );
    2ac6:	f240 60b0 	movw	r0, #1712	; 0x6b0
    2aca:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ace:	f001 fb63 	bl	4198 <vListInitialise>
    vListInitialise( (xList * ) & xEventReadyList);
    2ad2:	f240 60c4 	movw	r0, #1732	; 0x6c4
    2ad6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ada:	f001 fb5d 	bl	4198 <vListInitialise>

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2ade:	2300      	movs	r3, #0
    2ae0:	637b      	str	r3, [r7, #52]	; 0x34
    2ae2:	e02f      	b.n	2b44 <vInitialiseEventLists+0xc4>
    {
        pxIdleEvents[i] = (eveECB *) pvPortMalloc(sizeof(eveECB)); 
    2ae4:	6b7c      	ldr	r4, [r7, #52]	; 0x34
    2ae6:	2034      	movs	r0, #52	; 0x34
    2ae8:	f003 fa0c 	bl	5f04 <pvPortMalloc>
    2aec:	4602      	mov	r2, r0
    2aee:	00a3      	lsls	r3, r4, #2
    2af0:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2af4:	440b      	add	r3, r1
    2af6:	f843 2c40 	str.w	r2, [r3, #-64]
        vListIntialiseEventItem( pxIdleEvents[i], (xListItem *) & pxIdleEvents[i]->xEventListItem );
    2afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2afc:	009b      	lsls	r3, r3, #2
    2afe:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2b02:	4413      	add	r3, r2
    2b04:	f853 2c40 	ldr.w	r2, [r3, #-64]
    2b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2b0a:	009b      	lsls	r3, r3, #2
    2b0c:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2b10:	440b      	add	r3, r1
    2b12:	f853 3c40 	ldr.w	r3, [r3, #-64]
    2b16:	3320      	adds	r3, #32
    2b18:	4610      	mov	r0, r2
    2b1a:	4619      	mov	r1, r3
    2b1c:	f000 f98e 	bl	2e3c <vListIntialiseEventItem>
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    2b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2b22:	009b      	lsls	r3, r3, #2
    2b24:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2b28:	4413      	add	r3, r2
    2b2a:	f853 3c40 	ldr.w	r3, [r3, #-64]
    2b2e:	3320      	adds	r3, #32
    2b30:	f240 6060 	movw	r0, #1632	; 0x660
    2b34:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b38:	4619      	mov	r1, r3
    2b3a:	f001 fb59 	bl	41f0 <vListInsertEnd>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    vListInitialise( ( xList * ) &xEventExecutablePool );
    vListInitialise( ( xList * ) &xEventExecutableList );
    vListInitialise( (xList * ) & xEventReadyList);

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2b40:	3301      	adds	r3, #1
    2b42:	637b      	str	r3, [r7, #52]	; 0x34
    2b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2b46:	2b0c      	cmp	r3, #12
    2b48:	ddcc      	ble.n	2ae4 <vInitialiseEventLists+0x64>
        vListIntialiseEventItem( pxIdleEvents[i], (xListItem *) & pxIdleEvents[i]->xEventListItem );
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    }

    // Creating an End FLag Event and insert into the end of xEventList, which needs sorted events
    pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2b4a:	2034      	movs	r0, #52	; 0x34
    2b4c:	f003 f9da 	bl	5f04 <pvPortMalloc>
    2b50:	63f8      	str	r0, [r7, #60]	; 0x3c
    if( pxEndFlagEvent != NULL )
    2b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b54:	2b00      	cmp	r3, #0
    2b56:	d01e      	beq.n	2b96 <vInitialiseEventLists+0x116>
    {
       // pxEndFlagEvent->pxSource = pxEndFlagEvent->pxDestination = NULL;
        // there may be some problem here because of this assignment way
        pxEndFlagEvent->xTag.xDeadline= portMAX_DELAY;
    2b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b5a:	f04f 32ff 	mov.w	r2, #4294967295
    2b5e:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent->xTag.xTimestamp = portMAX_DELAY;
    2b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b62:	f04f 32ff 	mov.w	r2, #4294967295
    2b66:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent->xTag.xMicroStep = portMAX_DELAY;
    2b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b6a:	f04f 32ff 	mov.w	r2, #4294967295
    2b6e:	615a      	str	r2, [r3, #20]
        pxEndFlagEvent->xTag.xLevel = portMAX_DELAY;
    2b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b72:	f04f 32ff 	mov.w	r2, #4294967295
    2b76:	611a      	str	r2, [r3, #16]
        vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b7a:	3320      	adds	r3, #32
    2b7c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    2b7e:	4619      	mov	r1, r3
    2b80:	f000 f95c 	bl	2e3c <vListIntialiseEventItem>
        vListInsertEnd(&xEventNonExecutableList, &pxEndFlagEvent->xEventListItem); 
    2b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b86:	3320      	adds	r3, #32
    2b88:	f240 6088 	movw	r0, #1672	; 0x688
    2b8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b90:	4619      	mov	r1, r3
    2b92:	f001 fb2d 	bl	41f0 <vListInsertEnd>
    }

    // Creating an End FLag Event and insert into the end of xEventExecutableList, which needs sorted events
    pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2b96:	2034      	movs	r0, #52	; 0x34
    2b98:	f003 f9b4 	bl	5f04 <pvPortMalloc>
    2b9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if( pxEndFlagEvent != NULL )
    2b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d01e      	beq.n	2be2 <vInitialiseEventLists+0x162>
    {
        // there may be some problem here because of this assignment way
        pxEndFlagEvent->xTag.xDeadline= portMAX_DELAY;
    2ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2ba6:	f04f 32ff 	mov.w	r2, #4294967295
    2baa:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent->xTag.xTimestamp = portMAX_DELAY;
    2bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bae:	f04f 32ff 	mov.w	r2, #4294967295
    2bb2:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent->xTag.xMicroStep = portMAX_DELAY;
    2bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bb6:	f04f 32ff 	mov.w	r2, #4294967295
    2bba:	615a      	str	r2, [r3, #20]
        pxEndFlagEvent->xTag.xLevel = portMAX_DELAY;
    2bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bbe:	f04f 32ff 	mov.w	r2, #4294967295
    2bc2:	611a      	str	r2, [r3, #16]
        vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bc6:	3320      	adds	r3, #32
    2bc8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    2bca:	4619      	mov	r1, r3
    2bcc:	f000 f936 	bl	2e3c <vListIntialiseEventItem>
        vListInsertEnd(&xEventExecutableList, &pxEndFlagEvent->xEventListItem); 
    2bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bd2:	3320      	adds	r3, #32
    2bd4:	f240 60b0 	movw	r0, #1712	; 0x6b0
    2bd8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2bdc:	4619      	mov	r1, r3
    2bde:	f001 fb07 	bl	41f0 <vListInsertEnd>
    }
}
    2be2:	3744      	adds	r7, #68	; 0x44
    2be4:	46bd      	mov	sp, r7
    2be6:	bd90      	pop	{r4, r7, pc}

00002be8 <xIsExecutableEventArrive>:

portBASE_TYPE xIsExecutableEventArrive()
{
    2be8:	b580      	push	{r7, lr}
    2bea:	b086      	sub	sp, #24
    2bec:	af00      	add	r7, sp, #0
    xListItem * temp_pxEventListItem;
    portTickType xCurrentTime;
    struct tag xTag;
    
    if(listCURRENT_LIST_LENGTH(&xEventNonExecutableList) > 1)
    2bee:	f240 6388 	movw	r3, #1672	; 0x688
    2bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bf6:	681b      	ldr	r3, [r3, #0]
    2bf8:	2b01      	cmp	r3, #1
    2bfa:	d917      	bls.n	2c2c <xIsExecutableEventArrive+0x44>
    {
        temp_pxEventListItem = (xListItem *)xEventNonExecutableList.xListEnd.pxNext;
    2bfc:	f240 6388 	movw	r3, #1672	; 0x688
    2c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c04:	68db      	ldr	r3, [r3, #12]
    2c06:	617b      	str	r3, [r7, #20]
        xTag= xEventGetxTag( (xEventHandle) (temp_pxEventListItem)->pvOwner );
    2c08:	697b      	ldr	r3, [r7, #20]
    2c0a:	68db      	ldr	r3, [r3, #12]
    2c0c:	463a      	mov	r2, r7
    2c0e:	4610      	mov	r0, r2
    2c10:	4619      	mov	r1, r3
    2c12:	f7ff fecb 	bl	29ac <xEventGetxTag>
        xCurrentTime = xTaskGetTickCount();
    2c16:	f002 fbc9 	bl	53ac <xTaskGetTickCount>
    2c1a:	6138      	str	r0, [r7, #16]
        return xTag.xTimestamp <= xCurrentTime? pdTRUE : pdFALSE;
    2c1c:	687a      	ldr	r2, [r7, #4]
    2c1e:	693b      	ldr	r3, [r7, #16]
    2c20:	429a      	cmp	r2, r3
    2c22:	bf8c      	ite	hi
    2c24:	2300      	movhi	r3, #0
    2c26:	2301      	movls	r3, #1
    2c28:	b2db      	uxtb	r3, r3
    2c2a:	e000      	b.n	2c2e <xIsExecutableEventArrive+0x46>
    }
    return 0;
    2c2c:	2300      	movs	r3, #0
}
    2c2e:	4618      	mov	r0, r3
    2c30:	3718      	adds	r7, #24
    2c32:	46bd      	mov	sp, r7
    2c34:	bd80      	pop	{r7, pc}
    2c36:	bf00      	nop

00002c38 <xCompareFunction1>:

/* unexecutable event comparison function is used in xEventList. 
 * The event with earlist timestamp will be proceeded first*/
static portBASE_TYPE xCompareFunction1( const struct tag t1, const struct tag t2 )
{
    2c38:	b490      	push	{r4, r7}
    2c3a:	b084      	sub	sp, #16
    2c3c:	af00      	add	r7, sp, #0
    2c3e:	463c      	mov	r4, r7
    2c40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xTimestamp < t2.xTimestamp)
    2c44:	687a      	ldr	r2, [r7, #4]
    2c46:	69fb      	ldr	r3, [r7, #28]
    2c48:	429a      	cmp	r2, r3
    2c4a:	d201      	bcs.n	2c50 <xCompareFunction1+0x18>
    {
        return pdTRUE;
    2c4c:	2301      	movs	r3, #1
    2c4e:	e01e      	b.n	2c8e <xCompareFunction1+0x56>
    }
    else if( t1.xTimestamp == t2.xTimestamp)
    2c50:	687a      	ldr	r2, [r7, #4]
    2c52:	69fb      	ldr	r3, [r7, #28]
    2c54:	429a      	cmp	r2, r3
    2c56:	d119      	bne.n	2c8c <xCompareFunction1+0x54>
    {
        if( t1.xDeadline < t2.xDeadline )
    2c58:	683a      	ldr	r2, [r7, #0]
    2c5a:	69bb      	ldr	r3, [r7, #24]
    2c5c:	429a      	cmp	r2, r3
    2c5e:	d201      	bcs.n	2c64 <xCompareFunction1+0x2c>
        {
            return pdTRUE;
    2c60:	2301      	movs	r3, #1
    2c62:	e014      	b.n	2c8e <xCompareFunction1+0x56>
        }
        else if( t1.xDeadline == t2.xDeadline )
    2c64:	683a      	ldr	r2, [r7, #0]
    2c66:	69bb      	ldr	r3, [r7, #24]
    2c68:	429a      	cmp	r2, r3
    2c6a:	d10f      	bne.n	2c8c <xCompareFunction1+0x54>
        {
            if( t1.xLevel < t2.xLevel )
    2c6c:	68ba      	ldr	r2, [r7, #8]
    2c6e:	6a3b      	ldr	r3, [r7, #32]
    2c70:	429a      	cmp	r2, r3
    2c72:	da01      	bge.n	2c78 <xCompareFunction1+0x40>
            {
                return pdTRUE;
    2c74:	2301      	movs	r3, #1
    2c76:	e00a      	b.n	2c8e <xCompareFunction1+0x56>
            }
            else if( t1.xLevel == t2.xLevel && t1.xMicroStep < t2.xMicroStep )
    2c78:	68ba      	ldr	r2, [r7, #8]
    2c7a:	6a3b      	ldr	r3, [r7, #32]
    2c7c:	429a      	cmp	r2, r3
    2c7e:	d105      	bne.n	2c8c <xCompareFunction1+0x54>
    2c80:	68fa      	ldr	r2, [r7, #12]
    2c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c84:	429a      	cmp	r2, r3
    2c86:	da01      	bge.n	2c8c <xCompareFunction1+0x54>
            {
                return pdTRUE;
    2c88:	2301      	movs	r3, #1
    2c8a:	e000      	b.n	2c8e <xCompareFunction1+0x56>
            }
        }
    }
    return pdFALSE;
    2c8c:	2300      	movs	r3, #0
}
    2c8e:	4618      	mov	r0, r3
    2c90:	3710      	adds	r7, #16
    2c92:	46bd      	mov	sp, r7
    2c94:	bc90      	pop	{r4, r7}
    2c96:	4770      	bx	lr

00002c98 <xCompareFunction2>:

/* executable event comparison function is used in xEventExecutableList. 
 * The event with earlist deadline will be scheduled to execute first */
static portBASE_TYPE xCompareFunction2( const struct tag t1, const struct tag t2 )
{
    2c98:	b490      	push	{r4, r7}
    2c9a:	b084      	sub	sp, #16
    2c9c:	af00      	add	r7, sp, #0
    2c9e:	463c      	mov	r4, r7
    2ca0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xDeadline < t2.xDeadline)
    2ca4:	683a      	ldr	r2, [r7, #0]
    2ca6:	69bb      	ldr	r3, [r7, #24]
    2ca8:	429a      	cmp	r2, r3
    2caa:	d201      	bcs.n	2cb0 <xCompareFunction2+0x18>
    {
        return pdTRUE;
    2cac:	2301      	movs	r3, #1
    2cae:	e01e      	b.n	2cee <xCompareFunction2+0x56>
    }
    else if( t1.xDeadline == t2.xDeadline)
    2cb0:	683a      	ldr	r2, [r7, #0]
    2cb2:	69bb      	ldr	r3, [r7, #24]
    2cb4:	429a      	cmp	r2, r3
    2cb6:	d119      	bne.n	2cec <xCompareFunction2+0x54>
    {
        if( t1.xTimestamp < t2.xTimestamp)
    2cb8:	687a      	ldr	r2, [r7, #4]
    2cba:	69fb      	ldr	r3, [r7, #28]
    2cbc:	429a      	cmp	r2, r3
    2cbe:	d201      	bcs.n	2cc4 <xCompareFunction2+0x2c>
        {
            return pdTRUE;
    2cc0:	2301      	movs	r3, #1
    2cc2:	e014      	b.n	2cee <xCompareFunction2+0x56>
        }
        else if( t1.xTimestamp == t2.xTimestamp )
    2cc4:	687a      	ldr	r2, [r7, #4]
    2cc6:	69fb      	ldr	r3, [r7, #28]
    2cc8:	429a      	cmp	r2, r3
    2cca:	d10f      	bne.n	2cec <xCompareFunction2+0x54>
        {
            if( t1.xLevel < t2.xLevel )
    2ccc:	68ba      	ldr	r2, [r7, #8]
    2cce:	6a3b      	ldr	r3, [r7, #32]
    2cd0:	429a      	cmp	r2, r3
    2cd2:	da01      	bge.n	2cd8 <xCompareFunction2+0x40>
            {
                return pdTRUE;
    2cd4:	2301      	movs	r3, #1
    2cd6:	e00a      	b.n	2cee <xCompareFunction2+0x56>
            }
            else if( t1.xLevel == t2.xLevel && t1.xMicroStep < t2.xMicroStep )
    2cd8:	68ba      	ldr	r2, [r7, #8]
    2cda:	6a3b      	ldr	r3, [r7, #32]
    2cdc:	429a      	cmp	r2, r3
    2cde:	d105      	bne.n	2cec <xCompareFunction2+0x54>
    2ce0:	68fa      	ldr	r2, [r7, #12]
    2ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ce4:	429a      	cmp	r2, r3
    2ce6:	da01      	bge.n	2cec <xCompareFunction2+0x54>
            {
                return pdTRUE;
    2ce8:	2301      	movs	r3, #1
    2cea:	e000      	b.n	2cee <xCompareFunction2+0x56>
            }
        }
    }

    return pdFALSE;
    2cec:	2300      	movs	r3, #0
}
    2cee:	4618      	mov	r0, r3
    2cf0:	3710      	adds	r7, #16
    2cf2:	46bd      	mov	sp, r7
    2cf4:	bc90      	pop	{r4, r7}
    2cf6:	4770      	bx	lr

00002cf8 <vEventSetxTag>:

static void vEventSetxTag( portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent )
{
    2cf8:	b480      	push	{r7}
    2cfa:	b087      	sub	sp, #28
    2cfc:	af00      	add	r7, sp, #0
    2cfe:	60f8      	str	r0, [r7, #12]
    2d00:	60b9      	str	r1, [r7, #8]
    2d02:	607a      	str	r2, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2d04:	687b      	ldr	r3, [r7, #4]
    2d06:	617b      	str	r3, [r7, #20]

    /* EDF scheduling algorithm */
    pxEvent->xTag.xDeadline = xDeadline ;
    2d08:	697b      	ldr	r3, [r7, #20]
    2d0a:	68fa      	ldr	r2, [r7, #12]
    2d0c:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp;
    2d0e:	697b      	ldr	r3, [r7, #20]
    2d10:	68ba      	ldr	r2, [r7, #8]
    2d12:	60da      	str	r2, [r3, #12]

    /*the microstep is not used now*/
    pxEvent->xTag.xMicroStep = 0;
    2d14:	697b      	ldr	r3, [r7, #20]
    2d16:	2200      	movs	r2, #0
    2d18:	615a      	str	r2, [r3, #20]

    /* set the level of timestamp according to the topology sort result*/
    pxEvent->xTag.xLevel = xEventSerialNumber;
    2d1a:	f240 63d8 	movw	r3, #1752	; 0x6d8
    2d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d22:	681b      	ldr	r3, [r3, #0]
    2d24:	461a      	mov	r2, r3
    2d26:	697b      	ldr	r3, [r7, #20]
    2d28:	611a      	str	r2, [r3, #16]

    xEventSerialNumber++;
    2d2a:	f240 63d8 	movw	r3, #1752	; 0x6d8
    2d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d32:	681b      	ldr	r3, [r3, #0]
    2d34:	1c5a      	adds	r2, r3, #1
    2d36:	f240 63d8 	movw	r3, #1752	; 0x6d8
    2d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d3e:	601a      	str	r2, [r3, #0]
}
    2d40:	371c      	adds	r7, #28
    2d42:	46bd      	mov	sp, r7
    2d44:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d48:	4770      	bx	lr
    2d4a:	bf00      	nop

00002d4c <prvEventListGenericInsert>:

/* insert event to xEventNonExecutableList in terms of comparison function 1 */
static void prvEventListGenericInsert( xListItem *pxNewListItem, portBASE_TYPE comp)
{
    2d4c:	b590      	push	{r4, r7, lr}
    2d4e:	b095      	sub	sp, #84	; 0x54
    2d50:	af04      	add	r7, sp, #16
    2d52:	6078      	str	r0, [r7, #4]
    2d54:	6039      	str	r1, [r7, #0]
    volatile xListItem *pxIterator;
    struct tag xTagOfInsertion;
    xList * pxList; 

    xTagOfInsertion = xEventGetxTag(pxNewListItem->pvOwner);
    2d56:	687b      	ldr	r3, [r7, #4]
    2d58:	68db      	ldr	r3, [r3, #12]
    2d5a:	f107 0208 	add.w	r2, r7, #8
    2d5e:	4610      	mov	r0, r2
    2d60:	4619      	mov	r1, r3
    2d62:	f7ff fe23 	bl	29ac <xEventGetxTag>

    if(comp == 1)
    2d66:	683b      	ldr	r3, [r7, #0]
    2d68:	2b01      	cmp	r3, #1
    2d6a:	d127      	bne.n	2dbc <prvEventListGenericInsert+0x70>
    {
        pxList = &xEventNonExecutableList;
    2d6c:	f240 6388 	movw	r3, #1672	; 0x688
    2d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d74:	63bb      	str	r3, [r7, #56]	; 0x38
        taskENTER_CRITICAL();
    2d76:	f003 f84d 	bl	5e14 <vPortEnterCritical>
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
    2d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2d7c:	3308      	adds	r3, #8
    2d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    2d80:	e002      	b.n	2d88 <prvEventListGenericInsert+0x3c>
             xCompareFunction1( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
             pxIterator = pxIterator->pxNext ) {}
    2d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2d84:	685b      	ldr	r3, [r3, #4]
    2d86:	63fb      	str	r3, [r7, #60]	; 0x3c
    if(comp == 1)
    {
        pxList = &xEventNonExecutableList;
        taskENTER_CRITICAL();
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
             xCompareFunction1( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
    2d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2d8a:	685b      	ldr	r3, [r3, #4]
    2d8c:	68db      	ldr	r3, [r3, #12]
    2d8e:	f107 0218 	add.w	r2, r7, #24
    2d92:	4610      	mov	r0, r2
    2d94:	4619      	mov	r1, r3
    2d96:	f7ff fe09 	bl	29ac <xEventGetxTag>
    2d9a:	466c      	mov	r4, sp
    2d9c:	f107 0308 	add.w	r3, r7, #8
    2da0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2da2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2da6:	f107 0318 	add.w	r3, r7, #24
    2daa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2dac:	f7ff ff44 	bl	2c38 <xCompareFunction1>
    2db0:	4603      	mov	r3, r0

    if(comp == 1)
    {
        pxList = &xEventNonExecutableList;
        taskENTER_CRITICAL();
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
    2db2:	2b00      	cmp	r3, #0
    2db4:	d1e5      	bne.n	2d82 <prvEventListGenericInsert+0x36>
             xCompareFunction1( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
             pxIterator = pxIterator->pxNext ) {}
        taskEXIT_CRITICAL();
    2db6:	f003 f843 	bl	5e40 <vPortExitCritical>
    2dba:	e026      	b.n	2e0a <prvEventListGenericInsert+0xbe>
    }
    else 
    {
        pxList = &xEventExecutableList;
    2dbc:	f240 63b0 	movw	r3, #1712	; 0x6b0
    2dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2dc4:	63bb      	str	r3, [r7, #56]	; 0x38
        taskENTER_CRITICAL();
    2dc6:	f003 f825 	bl	5e14 <vPortEnterCritical>
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
    2dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2dcc:	3308      	adds	r3, #8
    2dce:	63fb      	str	r3, [r7, #60]	; 0x3c
    2dd0:	e002      	b.n	2dd8 <prvEventListGenericInsert+0x8c>
             xCompareFunction2( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
             pxIterator = pxIterator->pxNext ) {}
    2dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2dd4:	685b      	ldr	r3, [r3, #4]
    2dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    else 
    {
        pxList = &xEventExecutableList;
        taskENTER_CRITICAL();
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
             xCompareFunction2( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
    2dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2dda:	685b      	ldr	r3, [r3, #4]
    2ddc:	68db      	ldr	r3, [r3, #12]
    2dde:	f107 0228 	add.w	r2, r7, #40	; 0x28
    2de2:	4610      	mov	r0, r2
    2de4:	4619      	mov	r1, r3
    2de6:	f7ff fde1 	bl	29ac <xEventGetxTag>
    2dea:	466c      	mov	r4, sp
    2dec:	f107 0308 	add.w	r3, r7, #8
    2df0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2df2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2df6:	f107 0328 	add.w	r3, r7, #40	; 0x28
    2dfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2dfc:	f7ff ff4c 	bl	2c98 <xCompareFunction2>
    2e00:	4603      	mov	r3, r0
    }
    else 
    {
        pxList = &xEventExecutableList;
        taskENTER_CRITICAL();
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
    2e02:	2b00      	cmp	r3, #0
    2e04:	d1e5      	bne.n	2dd2 <prvEventListGenericInsert+0x86>
             xCompareFunction2( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
             pxIterator = pxIterator->pxNext ) {}
        taskEXIT_CRITICAL();
    2e06:	f003 f81b 	bl	5e40 <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2e0c:	685a      	ldr	r2, [r3, #4]
    2e0e:	687b      	ldr	r3, [r7, #4]
    2e10:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2e12:	687b      	ldr	r3, [r7, #4]
    2e14:	685b      	ldr	r3, [r3, #4]
    2e16:	687a      	ldr	r2, [r7, #4]
    2e18:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2e1a:	687b      	ldr	r3, [r7, #4]
    2e1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2e1e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2e22:	687a      	ldr	r2, [r7, #4]
    2e24:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2e26:	687b      	ldr	r3, [r7, #4]
    2e28:	6bba      	ldr	r2, [r7, #56]	; 0x38
    2e2a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2e2e:	681b      	ldr	r3, [r3, #0]
    2e30:	1c5a      	adds	r2, r3, #1
    2e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2e34:	601a      	str	r2, [r3, #0]
}
    2e36:	3744      	adds	r7, #68	; 0x44
    2e38:	46bd      	mov	sp, r7
    2e3a:	bd90      	pop	{r4, r7, pc}

00002e3c <vListIntialiseEventItem>:


static void vListIntialiseEventItem( xEventHandle pvOwner, xListItem * pxNewEventItem)
{
    2e3c:	b480      	push	{r7}
    2e3e:	b083      	sub	sp, #12
    2e40:	af00      	add	r7, sp, #0
    2e42:	6078      	str	r0, [r7, #4]
    2e44:	6039      	str	r1, [r7, #0]
    /* set the pvOwner of the EventItem as a event*/
    listSET_LIST_ITEM_OWNER( pxNewEventItem, pvOwner );
    2e46:	683b      	ldr	r3, [r7, #0]
    2e48:	687a      	ldr	r2, [r7, #4]
    2e4a:	60da      	str	r2, [r3, #12]
}
    2e4c:	370c      	adds	r7, #12
    2e4e:	46bd      	mov	sp, r7
    2e50:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e54:	4770      	bx	lr
    2e56:	bf00      	nop

00002e58 <pxEventGenericCreate>:


xEventHandle pxEventGenericCreate( portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData pdData)
{
    2e58:	b082      	sub	sp, #8
    2e5a:	b580      	push	{r7, lr}
    2e5c:	b086      	sub	sp, #24
    2e5e:	af00      	add	r7, sp, #0
    2e60:	60f8      	str	r0, [r7, #12]
    2e62:	60b9      	str	r1, [r7, #8]
    2e64:	607a      	str	r2, [r7, #4]
    2e66:	627b      	str	r3, [r7, #36]	; 0x24
    eveECB * pxNewEvent = NULL;
    2e68:	2300      	movs	r3, #0
    2e6a:	617b      	str	r3, [r7, #20]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2e6c:	f002 ffd2 	bl	5e14 <vPortEnterCritical>

    pxNewEvent = (eveECB *)xEventIdleList.xListEnd.pxNext->pvOwner;
    2e70:	f240 6360 	movw	r3, #1632	; 0x660
    2e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e78:	68db      	ldr	r3, [r3, #12]
    2e7a:	68db      	ldr	r3, [r3, #12]
    2e7c:	617b      	str	r3, [r7, #20]
    vListRemove( (xListItem *)&pxNewEvent->xEventListItem );
    2e7e:	697b      	ldr	r3, [r7, #20]
    2e80:	3320      	adds	r3, #32
    2e82:	4618      	mov	r0, r3
    2e84:	f001 fa14 	bl	42b0 <vListRemove>

    pxNewEvent->pxSource = pxSource;
    2e88:	697b      	ldr	r3, [r7, #20]
    2e8a:	68fa      	ldr	r2, [r7, #12]
    2e8c:	601a      	str	r2, [r3, #0]
    vEventSetxTag( xDeadline, xTimestamp, pxNewEvent );
    2e8e:	68b8      	ldr	r0, [r7, #8]
    2e90:	6879      	ldr	r1, [r7, #4]
    2e92:	697a      	ldr	r2, [r7, #20]
    2e94:	f7ff ff30 	bl	2cf8 <vEventSetxTag>
    ((eveECB *) pxNewEvent)->xData = pdData;
    2e98:	697b      	ldr	r3, [r7, #20]
    2e9a:	3318      	adds	r3, #24
    2e9c:	f107 0224 	add.w	r2, r7, #36	; 0x24
    2ea0:	e892 0003 	ldmia.w	r2, {r0, r1}
    2ea4:	e883 0003 	stmia.w	r3, {r0, r1}
    vListIntialiseEventItem( pxNewEvent, (xListItem *) &pxNewEvent->xEventListItem );
    2ea8:	697b      	ldr	r3, [r7, #20]
    2eaa:	3320      	adds	r3, #32
    2eac:	6978      	ldr	r0, [r7, #20]
    2eae:	4619      	mov	r1, r3
    2eb0:	f7ff ffc4 	bl	2e3c <vListIntialiseEventItem>

    taskEXIT_CRITICAL();
    2eb4:	f002 ffc4 	bl	5e40 <vPortExitCritical>

    return pxNewEvent;
    2eb8:	697b      	ldr	r3, [r7, #20]
}
    2eba:	4618      	mov	r0, r3
    2ebc:	3718      	adds	r7, #24
    2ebe:	46bd      	mov	sp, r7
    2ec0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2ec4:	b002      	add	sp, #8
    2ec6:	4770      	bx	lr

00002ec8 <vEventListGenericTransit>:


// An API to transfer all executable Event Items from xEventNonExecutableList to xEventExecutablePool.
// function : transit the nonexecutable event to executable event, and update the inBoolCount of every event 
void vEventListGenericTransit() 
{
    2ec8:	b580      	push	{r7, lr}
    2eca:	b088      	sub	sp, #32
    2ecc:	af00      	add	r7, sp, #0
    struct tag xTag;
    portBASE_TYPE pxDestination;
    portTickType xCurrentTime;

    // transmit the executable event from xEventNonExecutableList to xEventExecutablePool 
    while( listCURRENT_LIST_LENGTH( &xEventNonExecutableList) > 1 )
    2ece:	e040      	b.n	2f52 <vEventListGenericTransit+0x8a>
    {
        temp_pxEventListItem = (xListItem *)xEventNonExecutableList.xListEnd.pxNext;
    2ed0:	f240 6388 	movw	r3, #1672	; 0x688
    2ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ed8:	68db      	ldr	r3, [r3, #12]
    2eda:	61fb      	str	r3, [r7, #28]
        xTag= xEventGetxTag( temp_pxEventListItem->pvOwner );
    2edc:	69fb      	ldr	r3, [r7, #28]
    2ede:	68db      	ldr	r3, [r3, #12]
    2ee0:	1d3a      	adds	r2, r7, #4
    2ee2:	4610      	mov	r0, r2
    2ee4:	4619      	mov	r1, r3
    2ee6:	f7ff fd61 	bl	29ac <xEventGetxTag>
        xCurrentTime = xTaskGetTickCount();
    2eea:	f002 fa5f 	bl	53ac <xTaskGetTickCount>
    2eee:	61b8      	str	r0, [r7, #24]

        // the event is executable
        if( xTag.xTimestamp <= xCurrentTime )
    2ef0:	68ba      	ldr	r2, [r7, #8]
    2ef2:	69bb      	ldr	r3, [r7, #24]
    2ef4:	429a      	cmp	r2, r3
    2ef6:	d82b      	bhi.n	2f50 <vEventListGenericTransit+0x88>
        {
            // update the xInBoolCount of pxDestination
            pxDestination = ((eveECB *) temp_pxEventListItem->pvOwner)->pxDestination;
    2ef8:	69fb      	ldr	r3, [r7, #28]
    2efa:	68db      	ldr	r3, [r3, #12]
    2efc:	685b      	ldr	r3, [r3, #4]
    2efe:	617b      	str	r3, [r7, #20]
            xContexts[pxDestination].xInBoolCount ++ ;
    2f00:	f240 62dc 	movw	r2, #1756	; 0x6dc
    2f04:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f08:	6979      	ldr	r1, [r7, #20]
    2f0a:	460b      	mov	r3, r1
    2f0c:	00db      	lsls	r3, r3, #3
    2f0e:	1a5b      	subs	r3, r3, r1
    2f10:	00db      	lsls	r3, r3, #3
    2f12:	4413      	add	r3, r2
    2f14:	3334      	adds	r3, #52	; 0x34
    2f16:	681b      	ldr	r3, [r3, #0]
    2f18:	1c58      	adds	r0, r3, #1
    2f1a:	f240 62dc 	movw	r2, #1756	; 0x6dc
    2f1e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f22:	6979      	ldr	r1, [r7, #20]
    2f24:	460b      	mov	r3, r1
    2f26:	00db      	lsls	r3, r3, #3
    2f28:	1a5b      	subs	r3, r3, r1
    2f2a:	00db      	lsls	r3, r3, #3
    2f2c:	4413      	add	r3, r2
    2f2e:	3334      	adds	r3, #52	; 0x34
    2f30:	6018      	str	r0, [r3, #0]

            taskENTER_CRITICAL();
    2f32:	f002 ff6f 	bl	5e14 <vPortEnterCritical>
            /* remove pxListItem from xEventNonExecutableList */ 
            vListRemove(temp_pxEventListItem);
    2f36:	69f8      	ldr	r0, [r7, #28]
    2f38:	f001 f9ba 	bl	42b0 <vListRemove>
            /* insert the executable event into the xEventExecutablePool*/
            vListInsertEnd(&xEventExecutablePool, temp_pxEventListItem);
    2f3c:	f240 609c 	movw	r0, #1692	; 0x69c
    2f40:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2f44:	69f9      	ldr	r1, [r7, #28]
    2f46:	f001 f953 	bl	41f0 <vListInsertEnd>
            taskEXIT_CRITICAL();
    2f4a:	f002 ff79 	bl	5e40 <vPortExitCritical>
    2f4e:	e000      	b.n	2f52 <vEventListGenericTransit+0x8a>
#endif
        }
        else
        {
          // no executable event
           break; 
    2f50:	e006      	b.n	2f60 <vEventListGenericTransit+0x98>
    struct tag xTag;
    portBASE_TYPE pxDestination;
    portTickType xCurrentTime;

    // transmit the executable event from xEventNonExecutableList to xEventExecutablePool 
    while( listCURRENT_LIST_LENGTH( &xEventNonExecutableList) > 1 )
    2f52:	f240 6388 	movw	r3, #1672	; 0x688
    2f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f5a:	681b      	ldr	r3, [r3, #0]
    2f5c:	2b01      	cmp	r3, #1
    2f5e:	d8b7      	bhi.n	2ed0 <vEventListGenericTransit+0x8>
        {
          // no executable event
           break; 
        }
    }
}
    2f60:	3720      	adds	r7, #32
    2f62:	46bd      	mov	sp, r7
    2f64:	bd80      	pop	{r7, pc}
    2f66:	bf00      	nop

00002f68 <vEventGenericMap>:

void vEventGenericMap()
{
    2f68:	b580      	push	{r7, lr}
    2f6a:	b088      	sub	sp, #32
    2f6c:	af02      	add	r7, sp, #8
    eveECB * pxEvent; 
    eveECB * pxCopyEvent;
    xListItem * temp_pxEventListItem;

    // event map
    while(listCURRENT_LIST_LENGTH( &xEventNonExecutablePool ) != 0)
    2f6e:	e065      	b.n	303c <vEventGenericMap+0xd4>
    {
        temp_pxEventListItem = (xListItem *) xEventNonExecutablePool.xListEnd.pxNext;    
    2f70:	f240 6374 	movw	r3, #1652	; 0x674
    2f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f78:	68db      	ldr	r3, [r3, #12]
    2f7a:	613b      	str	r3, [r7, #16]
        pxEvent = (eveECB *) temp_pxEventListItem->pvOwner;
    2f7c:	693b      	ldr	r3, [r7, #16]
    2f7e:	68db      	ldr	r3, [r3, #12]
    2f80:	60fb      	str	r3, [r7, #12]
        pxSource = pxEvent->pxSource;
    2f82:	68fb      	ldr	r3, [r7, #12]
    2f84:	681b      	ldr	r3, [r3, #0]
    2f86:	60bb      	str	r3, [r7, #8]
        outs = xContexts[pxSource].xNumOfOut;
    2f88:	f240 62dc 	movw	r2, #1756	; 0x6dc
    2f8c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f90:	68b9      	ldr	r1, [r7, #8]
    2f92:	460b      	mov	r3, r1
    2f94:	00db      	lsls	r3, r3, #3
    2f96:	1a5b      	subs	r3, r3, r1
    2f98:	00db      	lsls	r3, r3, #3
    2f9a:	4413      	add	r3, r2
    2f9c:	3310      	adds	r3, #16
    2f9e:	681b      	ldr	r3, [r3, #0]
    2fa0:	607b      	str	r3, [r7, #4]

        taskENTER_CRITICAL();
    2fa2:	f002 ff37 	bl	5e14 <vPortEnterCritical>
        vListRemove(temp_pxEventListItem);
    2fa6:	6938      	ldr	r0, [r7, #16]
    2fa8:	f001 f982 	bl	42b0 <vListRemove>
        // complete the information of the origin event.
        pxEvent->pxDestination = xContexts[pxSource].xOutFlag[0];
    2fac:	f240 62dc 	movw	r2, #1756	; 0x6dc
    2fb0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fb4:	68b9      	ldr	r1, [r7, #8]
    2fb6:	460b      	mov	r3, r1
    2fb8:	00db      	lsls	r3, r3, #3
    2fba:	1a5b      	subs	r3, r3, r1
    2fbc:	00db      	lsls	r3, r3, #3
    2fbe:	4413      	add	r3, r2
    2fc0:	331c      	adds	r3, #28
    2fc2:	681a      	ldr	r2, [r3, #0]
    2fc4:	68fb      	ldr	r3, [r7, #12]
    2fc6:	605a      	str	r2, [r3, #4]
        prvEventListGenericInsert(temp_pxEventListItem,1); 
    2fc8:	6938      	ldr	r0, [r7, #16]
    2fca:	2101      	movs	r1, #1
    2fcc:	f7ff febe 	bl	2d4c <prvEventListGenericInsert>

        // copy one event to multiples
        for(i = 1; i < outs; ++ i)
    2fd0:	2301      	movs	r3, #1
    2fd2:	617b      	str	r3, [r7, #20]
    2fd4:	e02c      	b.n	3030 <vEventGenericMap+0xc8>
        {
            pxCopyEvent = (eveECB *)pxEventGenericCreate(pxSource, pxEvent->xTag.xDeadline, pxEvent->xTag.xTimestamp, pxEvent->xData);
    2fd6:	68fb      	ldr	r3, [r7, #12]
    2fd8:	6899      	ldr	r1, [r3, #8]
    2fda:	68fb      	ldr	r3, [r7, #12]
    2fdc:	68da      	ldr	r2, [r3, #12]
    2fde:	68fb      	ldr	r3, [r7, #12]
    2fe0:	69d8      	ldr	r0, [r3, #28]
    2fe2:	9000      	str	r0, [sp, #0]
    2fe4:	699b      	ldr	r3, [r3, #24]
    2fe6:	68b8      	ldr	r0, [r7, #8]
    2fe8:	f7ff ff36 	bl	2e58 <pxEventGenericCreate>
    2fec:	6038      	str	r0, [r7, #0]
            // complete the information of the copied event.
            pxCopyEvent->xTag.xMicroStep = i;
    2fee:	683b      	ldr	r3, [r7, #0]
    2ff0:	697a      	ldr	r2, [r7, #20]
    2ff2:	615a      	str	r2, [r3, #20]
            pxCopyEvent->xTag.xLevel = pxEvent->xTag.xLevel;   // copy events have all the same xLevel
    2ff4:	68fb      	ldr	r3, [r7, #12]
    2ff6:	691a      	ldr	r2, [r3, #16]
    2ff8:	683b      	ldr	r3, [r7, #0]
    2ffa:	611a      	str	r2, [r3, #16]
            pxCopyEvent->pxDestination = xContexts[pxSource].xOutFlag[i];
    2ffc:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3000:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3004:	68b9      	ldr	r1, [r7, #8]
    3006:	460b      	mov	r3, r1
    3008:	00db      	lsls	r3, r3, #3
    300a:	1a5b      	subs	r3, r3, r1
    300c:	005b      	lsls	r3, r3, #1
    300e:	6979      	ldr	r1, [r7, #20]
    3010:	440b      	add	r3, r1
    3012:	3306      	adds	r3, #6
    3014:	009b      	lsls	r3, r3, #2
    3016:	4413      	add	r3, r2
    3018:	685a      	ldr	r2, [r3, #4]
    301a:	683b      	ldr	r3, [r7, #0]
    301c:	605a      	str	r2, [r3, #4]
            prvEventListGenericInsert( &pxCopyEvent->xEventListItem , 1); 
    301e:	683b      	ldr	r3, [r7, #0]
    3020:	3320      	adds	r3, #32
    3022:	4618      	mov	r0, r3
    3024:	2101      	movs	r1, #1
    3026:	f7ff fe91 	bl	2d4c <prvEventListGenericInsert>
        // complete the information of the origin event.
        pxEvent->pxDestination = xContexts[pxSource].xOutFlag[0];
        prvEventListGenericInsert(temp_pxEventListItem,1); 

        // copy one event to multiples
        for(i = 1; i < outs; ++ i)
    302a:	697b      	ldr	r3, [r7, #20]
    302c:	3301      	adds	r3, #1
    302e:	617b      	str	r3, [r7, #20]
    3030:	697a      	ldr	r2, [r7, #20]
    3032:	687b      	ldr	r3, [r7, #4]
    3034:	429a      	cmp	r2, r3
    3036:	dbce      	blt.n	2fd6 <vEventGenericMap+0x6e>
            pxCopyEvent->xTag.xMicroStep = i;
            pxCopyEvent->xTag.xLevel = pxEvent->xTag.xLevel;   // copy events have all the same xLevel
            pxCopyEvent->pxDestination = xContexts[pxSource].xOutFlag[i];
            prvEventListGenericInsert( &pxCopyEvent->xEventListItem , 1); 
        }
        taskEXIT_CRITICAL();
    3038:	f002 ff02 	bl	5e40 <vPortExitCritical>
    eveECB * pxEvent; 
    eveECB * pxCopyEvent;
    xListItem * temp_pxEventListItem;

    // event map
    while(listCURRENT_LIST_LENGTH( &xEventNonExecutablePool ) != 0)
    303c:	f240 6374 	movw	r3, #1652	; 0x674
    3040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3044:	681b      	ldr	r3, [r3, #0]
    3046:	2b00      	cmp	r3, #0
    3048:	d192      	bne.n	2f70 <vEventGenericMap+0x8>
            pxCopyEvent->pxDestination = xContexts[pxSource].xOutFlag[i];
            prvEventListGenericInsert( &pxCopyEvent->xEventListItem , 1); 
        }
        taskEXIT_CRITICAL();
    }
}
    304a:	3718      	adds	r7, #24
    304c:	46bd      	mov	sp, r7
    304e:	bd80      	pop	{r7, pc}

00003050 <vEventGenericReduce>:

void vEventGenericReduce()
{
    3050:	b580      	push	{r7, lr}
    3052:	b08c      	sub	sp, #48	; 0x30
    3054:	af00      	add	r7, sp, #0
    portBASE_TYPE i, pxDestination;
    struct tag temp_tag;
    struct eventData temp_data;
    volatile xListItem * pxIterator1, *pxIterator2;
    // event reduce 
    if( listCURRENT_LIST_LENGTH(& xEventExecutablePool) > 1 )
    3056:	f240 639c 	movw	r3, #1692	; 0x69c
    305a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    305e:	681b      	ldr	r3, [r3, #0]
    3060:	2b01      	cmp	r3, #1
    3062:	f240 80ad 	bls.w	31c0 <vEventGenericReduce+0x170>
    {
        // find at least all the ready event and move it to ready event list
        // ready event has the smallest timestamp and period.
        // if multi ready event exists, then they all have the same timestamp
        for( pxIterator1 = ( xListItem * ) ( xEventExecutablePool.xListEnd.pxNext ); 
    3066:	f240 639c 	movw	r3, #1692	; 0x69c
    306a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    306e:	68db      	ldr	r3, [r3, #12]
    3070:	62bb      	str	r3, [r7, #40]	; 0x28
    3072:	e0a0      	b.n	31b6 <vEventGenericReduce+0x166>
                pxIterator1 != (xListItem *)&xEventExecutablePool.xListEnd; ) 
        {
            reduce_pxEventListItem = (xListItem *) pxIterator1; 
    3074:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3076:	623b      	str	r3, [r7, #32]
            pxDestination = xEventGetpxDestination(reduce_pxEventListItem->pvOwner); 
    3078:	6a3b      	ldr	r3, [r7, #32]
    307a:	68db      	ldr	r3, [r3, #12]
    307c:	4618      	mov	r0, r3
    307e:	f7ff fc89 	bl	2994 <xEventGetpxDestination>
    3082:	61f8      	str	r0, [r7, #28]

            // if the communication between servant is multiple to one,
            // then other events for the same servant need to be found
            if( xContexts[pxDestination].xInBoolCount == xContexts[pxDestination].xNumOfIn )
    3084:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3088:	f2c2 0200 	movt	r2, #8192	; 0x2000
    308c:	69f9      	ldr	r1, [r7, #28]
    308e:	460b      	mov	r3, r1
    3090:	00db      	lsls	r3, r3, #3
    3092:	1a5b      	subs	r3, r3, r1
    3094:	00db      	lsls	r3, r3, #3
    3096:	4413      	add	r3, r2
    3098:	3334      	adds	r3, #52	; 0x34
    309a:	6818      	ldr	r0, [r3, #0]
    309c:	f240 62dc 	movw	r2, #1756	; 0x6dc
    30a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    30a4:	69f9      	ldr	r1, [r7, #28]
    30a6:	460b      	mov	r3, r1
    30a8:	00db      	lsls	r3, r3, #3
    30aa:	1a5b      	subs	r3, r3, r1
    30ac:	00db      	lsls	r3, r3, #3
    30ae:	4413      	add	r3, r2
    30b0:	330c      	adds	r3, #12
    30b2:	681b      	ldr	r3, [r3, #0]
    30b4:	4298      	cmp	r0, r3
    30b6:	d17b      	bne.n	31b0 <vEventGenericReduce+0x160>
            {
                taskENTER_CRITICAL();
    30b8:	f002 feac 	bl	5e14 <vPortEnterCritical>
                if(xContexts[pxDestination].xInBoolCount > 1)
    30bc:	f240 62dc 	movw	r2, #1756	; 0x6dc
    30c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    30c4:	69f9      	ldr	r1, [r7, #28]
    30c6:	460b      	mov	r3, r1
    30c8:	00db      	lsls	r3, r3, #3
    30ca:	1a5b      	subs	r3, r3, r1
    30cc:	00db      	lsls	r3, r3, #3
    30ce:	4413      	add	r3, r2
    30d0:	3334      	adds	r3, #52	; 0x34
    30d2:	681b      	ldr	r3, [r3, #0]
    30d4:	2b01      	cmp	r3, #1
    30d6:	dd51      	ble.n	317c <vEventGenericReduce+0x12c>
                {
                    i = 1;
    30d8:	2301      	movs	r3, #1
    30da:	62fb      	str	r3, [r7, #44]	; 0x2c
                    for( pxIterator2 = pxIterator1->pxNext;  pxIterator2 != (xListItem *)&xEventExecutablePool.xListEnd; ) 
    30dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    30de:	685b      	ldr	r3, [r3, #4]
    30e0:	627b      	str	r3, [r7, #36]	; 0x24
    30e2:	e047      	b.n	3174 <vEventGenericReduce+0x124>
                    {
                        // find another event for the same destinate servant, copy the data to the first one
                        if( xEventGetpxDestination(pxIterator2->pvOwner) == pxDestination ) 
    30e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    30e6:	68db      	ldr	r3, [r3, #12]
    30e8:	4618      	mov	r0, r3
    30ea:	f7ff fc53 	bl	2994 <xEventGetpxDestination>
    30ee:	4602      	mov	r2, r0
    30f0:	69fb      	ldr	r3, [r7, #28]
    30f2:	429a      	cmp	r2, r3
    30f4:	d13b      	bne.n	316e <vEventGenericReduce+0x11e>
                        {
                            // collecting data into the first event
                            temp_data = xEventGetxData(pxIterator2->pvOwner); 
    30f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    30f8:	68db      	ldr	r3, [r3, #12]
    30fa:	463a      	mov	r2, r7
    30fc:	4610      	mov	r0, r2
    30fe:	4619      	mov	r1, r3
    3100:	f7ff fc66 	bl	29d0 <xEventGetxData>
                            ((eveECB *)reduce_pxEventListItem->pvOwner)->xData.xDataArray[i++] = temp_data.xDataArray[0];
    3104:	6a3b      	ldr	r3, [r7, #32]
    3106:	68da      	ldr	r2, [r3, #12]
    3108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    310a:	1c59      	adds	r1, r3, #1
    310c:	62f9      	str	r1, [r7, #44]	; 0x2c
    310e:	6839      	ldr	r1, [r7, #0]
    3110:	3306      	adds	r3, #6
    3112:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                            // set the timestamp to the biggest one
                            temp_tag = xEventGetxTag(pxIterator2->pvOwner);
    3116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3118:	68db      	ldr	r3, [r3, #12]
    311a:	f107 0208 	add.w	r2, r7, #8
    311e:	4610      	mov	r0, r2
    3120:	4619      	mov	r1, r3
    3122:	f7ff fc43 	bl	29ac <xEventGetxTag>
                            if(((eveECB *)reduce_pxEventListItem->pvOwner)->xTag.xTimestamp < temp_tag.xTimestamp)
    3126:	6a3b      	ldr	r3, [r7, #32]
    3128:	68db      	ldr	r3, [r3, #12]
    312a:	68da      	ldr	r2, [r3, #12]
    312c:	68fb      	ldr	r3, [r7, #12]
    312e:	429a      	cmp	r2, r3
    3130:	d203      	bcs.n	313a <vEventGenericReduce+0xea>
                            {
                                ((eveECB *)reduce_pxEventListItem->pvOwner)->xTag.xTimestamp = temp_tag.xTimestamp;
    3132:	6a3b      	ldr	r3, [r7, #32]
    3134:	68db      	ldr	r3, [r3, #12]
    3136:	68fa      	ldr	r2, [r7, #12]
    3138:	60da      	str	r2, [r3, #12]
                            }
                            // delete the useless event, and return it back to event idle list
                            temp_pxEventListItem = (xListItem *) pxIterator2; 
    313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    313c:	61bb      	str	r3, [r7, #24]
                            pxIterator2 = pxIterator2->pxNext;
    313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3140:	685b      	ldr	r3, [r3, #4]
    3142:	627b      	str	r3, [r7, #36]	; 0x24
                            vEventGenericDelete(temp_pxEventListItem->pvOwner); 
    3144:	69bb      	ldr	r3, [r7, #24]
    3146:	68db      	ldr	r3, [r3, #12]
    3148:	4618      	mov	r0, r3
    314a:	f000 fa65 	bl	3618 <vEventGenericDelete>
                            if( i == xContexts[pxDestination].xInBoolCount )
    314e:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3152:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3156:	69f9      	ldr	r1, [r7, #28]
    3158:	460b      	mov	r3, r1
    315a:	00db      	lsls	r3, r3, #3
    315c:	1a5b      	subs	r3, r3, r1
    315e:	00db      	lsls	r3, r3, #3
    3160:	4413      	add	r3, r2
    3162:	3334      	adds	r3, #52	; 0x34
    3164:	681a      	ldr	r2, [r3, #0]
    3166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3168:	429a      	cmp	r2, r3
    316a:	d103      	bne.n	3174 <vEventGenericReduce+0x124>
                            {
                                break;   // find all event for the same servant 
    316c:	e006      	b.n	317c <vEventGenericReduce+0x12c>
                            }
                        }
                        else
                        {
                            pxIterator2 = pxIterator2->pxNext;
    316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3170:	685b      	ldr	r3, [r3, #4]
    3172:	627b      	str	r3, [r7, #36]	; 0x24
            {
                taskENTER_CRITICAL();
                if(xContexts[pxDestination].xInBoolCount > 1)
                {
                    i = 1;
                    for( pxIterator2 = pxIterator1->pxNext;  pxIterator2 != (xListItem *)&xEventExecutablePool.xListEnd; ) 
    3174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3176:	4b14      	ldr	r3, [pc, #80]	; (31c8 <vEventGenericReduce+0x178>)
    3178:	429a      	cmp	r2, r3
    317a:	d1b3      	bne.n	30e4 <vEventGenericReduce+0x94>
                        {
                            pxIterator2 = pxIterator2->pxNext;
                        }
                    }
                }
                xContexts[pxDestination].xInBoolCount = 0; 
    317c:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3180:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3184:	69f9      	ldr	r1, [r7, #28]
    3186:	460b      	mov	r3, r1
    3188:	00db      	lsls	r3, r3, #3
    318a:	1a5b      	subs	r3, r3, r1
    318c:	00db      	lsls	r3, r3, #3
    318e:	4413      	add	r3, r2
    3190:	3334      	adds	r3, #52	; 0x34
    3192:	2200      	movs	r2, #0
    3194:	601a      	str	r2, [r3, #0]
                pxIterator1 = pxIterator1->pxNext; 
    3196:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3198:	685b      	ldr	r3, [r3, #4]
    319a:	62bb      	str	r3, [r7, #40]	; 0x28
                vListRemove(reduce_pxEventListItem);
    319c:	6a38      	ldr	r0, [r7, #32]
    319e:	f001 f887 	bl	42b0 <vListRemove>
                prvEventListGenericInsert(reduce_pxEventListItem, 2);
    31a2:	6a38      	ldr	r0, [r7, #32]
    31a4:	2102      	movs	r1, #2
    31a6:	f7ff fdd1 	bl	2d4c <prvEventListGenericInsert>
                taskEXIT_CRITICAL();
    31aa:	f002 fe49 	bl	5e40 <vPortExitCritical>
    31ae:	e002      	b.n	31b6 <vEventGenericReduce+0x166>
            }
            else
            {
                pxIterator1 = pxIterator1->pxNext;
    31b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    31b2:	685b      	ldr	r3, [r3, #4]
    31b4:	62bb      	str	r3, [r7, #40]	; 0x28
    if( listCURRENT_LIST_LENGTH(& xEventExecutablePool) > 1 )
    {
        // find at least all the ready event and move it to ready event list
        // ready event has the smallest timestamp and period.
        // if multi ready event exists, then they all have the same timestamp
        for( pxIterator1 = ( xListItem * ) ( xEventExecutablePool.xListEnd.pxNext ); 
    31b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    31b8:	4b03      	ldr	r3, [pc, #12]	; (31c8 <vEventGenericReduce+0x178>)
    31ba:	429a      	cmp	r2, r3
    31bc:	f47f af5a 	bne.w	3074 <vEventGenericReduce+0x24>
                pxIterator1 = pxIterator1->pxNext;
            }

        }
    }
}
    31c0:	3730      	adds	r7, #48	; 0x30
    31c2:	46bd      	mov	sp, r7
    31c4:	bd80      	pop	{r7, pc}
    31c6:	bf00      	nop
    31c8:	200006a4 	.word	0x200006a4

000031cc <pOverLap>:



static portBASE_TYPE pOverLap( xListItem * pxEventListItem)
{
    31cc:	b480      	push	{r7}
    31ce:	b087      	sub	sp, #28
    31d0:	af00      	add	r7, sp, #0
    31d2:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent = (eveECB *)pxEventListItem->pvOwner;
    31d4:	687b      	ldr	r3, [r7, #4]
    31d6:	68db      	ldr	r3, [r3, #12]
    31d8:	617b      	str	r3, [r7, #20]
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    31da:	697b      	ldr	r3, [r7, #20]
    31dc:	685b      	ldr	r3, [r3, #4]
    31de:	613b      	str	r3, [r7, #16]
    portTickType start = pxEvent->xTag.xTimestamp;
    31e0:	697b      	ldr	r3, [r7, #20]
    31e2:	68db      	ldr	r3, [r3, #12]
    31e4:	60fb      	str	r3, [r7, #12]
    portTickType end   = start + xContexts[pxDestination].xLet;
    31e6:	f240 62dc 	movw	r2, #1756	; 0x6dc
    31ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    31ee:	6939      	ldr	r1, [r7, #16]
    31f0:	460b      	mov	r3, r1
    31f2:	00db      	lsls	r3, r3, #3
    31f4:	1a5b      	subs	r3, r3, r1
    31f6:	00db      	lsls	r3, r3, #3
    31f8:	4413      	add	r3, r2
    31fa:	3324      	adds	r3, #36	; 0x24
    31fc:	681a      	ldr	r2, [r3, #0]
    31fe:	68fb      	ldr	r3, [r7, #12]
    3200:	4413      	add	r3, r2
    3202:	60bb      	str	r3, [r7, #8]

    // different execution time overlaped
    if( start % GCDPeriod < INPUT || start % GCDPeriod > (GCDPeriod - OUTPUT) || 
    3204:	f240 6358 	movw	r3, #1624	; 0x658
    3208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    320c:	681a      	ldr	r2, [r3, #0]
    320e:	68fb      	ldr	r3, [r7, #12]
    3210:	fbb3 f1f2 	udiv	r1, r3, r2
    3214:	fb02 f201 	mul.w	r2, r2, r1
    3218:	1a9b      	subs	r3, r3, r2
    321a:	2b1d      	cmp	r3, #29
    321c:	d932      	bls.n	3284 <pOverLap+0xb8>
    321e:	f240 6358 	movw	r3, #1624	; 0x658
    3222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3226:	681a      	ldr	r2, [r3, #0]
    3228:	68fb      	ldr	r3, [r7, #12]
    322a:	fbb3 f1f2 	udiv	r1, r3, r2
    322e:	fb02 f201 	mul.w	r2, r2, r1
    3232:	1a9a      	subs	r2, r3, r2
    3234:	f240 6358 	movw	r3, #1624	; 0x658
    3238:	f2c2 0300 	movt	r3, #8192	; 0x2000
    323c:	681b      	ldr	r3, [r3, #0]
    323e:	3b1e      	subs	r3, #30
    3240:	429a      	cmp	r2, r3
    3242:	d81f      	bhi.n	3284 <pOverLap+0xb8>
            end % GCDPeriod < INPUT || end % GCDPeriod > (GCDPeriod - OUTPUT))
    3244:	f240 6358 	movw	r3, #1624	; 0x658
    3248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    324c:	681a      	ldr	r2, [r3, #0]
    324e:	68bb      	ldr	r3, [r7, #8]
    3250:	fbb3 f1f2 	udiv	r1, r3, r2
    3254:	fb02 f201 	mul.w	r2, r2, r1
    3258:	1a9b      	subs	r3, r3, r2
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    portTickType start = pxEvent->xTag.xTimestamp;
    portTickType end   = start + xContexts[pxDestination].xLet;

    // different execution time overlaped
    if( start % GCDPeriod < INPUT || start % GCDPeriod > (GCDPeriod - OUTPUT) || 
    325a:	2b1d      	cmp	r3, #29
    325c:	d912      	bls.n	3284 <pOverLap+0xb8>
            end % GCDPeriod < INPUT || end % GCDPeriod > (GCDPeriod - OUTPUT))
    325e:	f240 6358 	movw	r3, #1624	; 0x658
    3262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3266:	681a      	ldr	r2, [r3, #0]
    3268:	68bb      	ldr	r3, [r7, #8]
    326a:	fbb3 f1f2 	udiv	r1, r3, r2
    326e:	fb02 f201 	mul.w	r2, r2, r1
    3272:	1a9a      	subs	r2, r3, r2
    3274:	f240 6358 	movw	r3, #1624	; 0x658
    3278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    327c:	681b      	ldr	r3, [r3, #0]
    327e:	3b1e      	subs	r3, #30
    3280:	429a      	cmp	r2, r3
    3282:	d901      	bls.n	3288 <pOverLap+0xbc>
    {
        return 1;
    3284:	2301      	movs	r3, #1
    3286:	e000      	b.n	328a <pOverLap+0xbe>
    }
    return 0;
    3288:	2300      	movs	r3, #0
}
    328a:	4618      	mov	r0, r3
    328c:	371c      	adds	r7, #28
    328e:	46bd      	mov	sp, r7
    3290:	f85d 7b04 	ldr.w	r7, [sp], #4
    3294:	4770      	bx	lr
    3296:	bf00      	nop

00003298 <xSetTimestamp>:

static void xSetTimestamp( portBASE_TYPE count)
{
    3298:	b580      	push	{r7, lr}
    329a:	b086      	sub	sp, #24
    329c:	af00      	add	r7, sp, #0
    329e:	6078      	str	r0, [r7, #4]
    eveECB *pxEvent;
    volatile xListItem * pxIterator;
    xListItem * temp_pxEventListItem;
    portBASE_TYPE pxDestination;
    
    for( i = 0, pxIterator = xEventReadyList.xListEnd.pxNext; 
    32a0:	2300      	movs	r3, #0
    32a2:	617b      	str	r3, [r7, #20]
    32a4:	f240 63c4 	movw	r3, #1732	; 0x6c4
    32a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32ac:	68db      	ldr	r3, [r3, #12]
    32ae:	613b      	str	r3, [r7, #16]
    32b0:	e078      	b.n	33a4 <xSetTimestamp+0x10c>
         i < count; 
         ++ i, pxIterator = pxIterator->pxNext )
    {
        pxEvent = (eveECB *) pxIterator->pvOwner;
    32b2:	693b      	ldr	r3, [r7, #16]
    32b4:	68db      	ldr	r3, [r3, #12]
    32b6:	60fb      	str	r3, [r7, #12]
        pxEvent->xTag.xTimestamp = xFutureModelTime;
    32b8:	f240 635c 	movw	r3, #1628	; 0x65c
    32bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32c0:	681a      	ldr	r2, [r3, #0]
    32c2:	68fb      	ldr	r3, [r7, #12]
    32c4:	60da      	str	r2, [r3, #12]
        if( pOverLap( (xListItem *)pxIterator ) == 0 ) // not overlaped
    32c6:	6938      	ldr	r0, [r7, #16]
    32c8:	f7ff ff80 	bl	31cc <pOverLap>
    32cc:	4603      	mov	r3, r0
    32ce:	2b00      	cmp	r3, #0
    32d0:	d11e      	bne.n	3310 <xSetTimestamp+0x78>
        {
            xFutureModelTime += xContexts[pxEvent->pxDestination].xLet; // update future model time
    32d2:	68fb      	ldr	r3, [r7, #12]
    32d4:	6859      	ldr	r1, [r3, #4]
    32d6:	f240 62dc 	movw	r2, #1756	; 0x6dc
    32da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    32de:	460b      	mov	r3, r1
    32e0:	00db      	lsls	r3, r3, #3
    32e2:	1a5b      	subs	r3, r3, r1
    32e4:	00db      	lsls	r3, r3, #3
    32e6:	4413      	add	r3, r2
    32e8:	3324      	adds	r3, #36	; 0x24
    32ea:	681a      	ldr	r2, [r3, #0]
    32ec:	f240 635c 	movw	r3, #1628	; 0x65c
    32f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32f4:	681b      	ldr	r3, [r3, #0]
    32f6:	441a      	add	r2, r3
    32f8:	f240 635c 	movw	r3, #1628	; 0x65c
    32fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3300:	601a      	str	r2, [r3, #0]
    xListItem * temp_pxEventListItem;
    portBASE_TYPE pxDestination;
    
    for( i = 0, pxIterator = xEventReadyList.xListEnd.pxNext; 
         i < count; 
         ++ i, pxIterator = pxIterator->pxNext )
    3302:	697b      	ldr	r3, [r7, #20]
    3304:	3301      	adds	r3, #1
    3306:	617b      	str	r3, [r7, #20]
    3308:	693b      	ldr	r3, [r7, #16]
    330a:	685b      	ldr	r3, [r3, #4]
    330c:	613b      	str	r3, [r7, #16]
    330e:	e049      	b.n	33a4 <xSetTimestamp+0x10c>
            xFutureModelTime += xContexts[pxEvent->pxDestination].xLet; // update future model time
        }
        else  // overlaped
        {
            // set the future model time to start time of next LET
            xFutureModelTime = (xFutureModelTime/GCDPeriod) * GCDPeriod + GCDPeriod + INPUT;  
    3310:	f240 635c 	movw	r3, #1628	; 0x65c
    3314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3318:	681a      	ldr	r2, [r3, #0]
    331a:	f240 6358 	movw	r3, #1624	; 0x658
    331e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3322:	681b      	ldr	r3, [r3, #0]
    3324:	fbb2 f3f3 	udiv	r3, r2, r3
    3328:	1c5a      	adds	r2, r3, #1
    332a:	f240 6358 	movw	r3, #1624	; 0x658
    332e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3332:	681b      	ldr	r3, [r3, #0]
    3334:	fb03 f302 	mul.w	r3, r3, r2
    3338:	f103 021e 	add.w	r2, r3, #30
    333c:	f240 635c 	movw	r3, #1628	; 0x65c
    3340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3344:	601a      	str	r2, [r3, #0]
            pxEvent->xTag.xTimestamp = xFutureModelTime;
    3346:	f240 635c 	movw	r3, #1628	; 0x65c
    334a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    334e:	681a      	ldr	r2, [r3, #0]
    3350:	68fb      	ldr	r3, [r7, #12]
    3352:	60da      	str	r2, [r3, #12]
            xFutureModelTime += xContexts[pxEvent->pxDestination].xLet;
    3354:	68fb      	ldr	r3, [r7, #12]
    3356:	6859      	ldr	r1, [r3, #4]
    3358:	f240 62dc 	movw	r2, #1756	; 0x6dc
    335c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3360:	460b      	mov	r3, r1
    3362:	00db      	lsls	r3, r3, #3
    3364:	1a5b      	subs	r3, r3, r1
    3366:	00db      	lsls	r3, r3, #3
    3368:	4413      	add	r3, r2
    336a:	3324      	adds	r3, #36	; 0x24
    336c:	681a      	ldr	r2, [r3, #0]
    336e:	f240 635c 	movw	r3, #1628	; 0x65c
    3372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3376:	681b      	ldr	r3, [r3, #0]
    3378:	441a      	add	r2, r3
    337a:	f240 635c 	movw	r3, #1628	; 0x65c
    337e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3382:	601a      	str	r2, [r3, #0]

            temp_pxEventListItem = (xListItem *)pxIterator;
    3384:	693b      	ldr	r3, [r7, #16]
    3386:	60bb      	str	r3, [r7, #8]
            pxIterator = pxIterator->pxNext;
    3388:	693b      	ldr	r3, [r7, #16]
    338a:	685b      	ldr	r3, [r3, #4]
    338c:	613b      	str	r3, [r7, #16]
            vListRemove( temp_pxEventListItem ); 
    338e:	68b8      	ldr	r0, [r7, #8]
    3390:	f000 ff8e 	bl	42b0 <vListRemove>
            vListInsertEnd(&xEventNonExecutablePool, temp_pxEventListItem);
    3394:	f240 6074 	movw	r0, #1652	; 0x674
    3398:	f2c2 0000 	movt	r0, #8192	; 0x2000
    339c:	68b9      	ldr	r1, [r7, #8]
    339e:	f000 ff27 	bl	41f0 <vListInsertEnd>
            break;
    33a2:	e003      	b.n	33ac <xSetTimestamp+0x114>
    eveECB *pxEvent;
    volatile xListItem * pxIterator;
    xListItem * temp_pxEventListItem;
    portBASE_TYPE pxDestination;
    
    for( i = 0, pxIterator = xEventReadyList.xListEnd.pxNext; 
    33a4:	697a      	ldr	r2, [r7, #20]
    33a6:	687b      	ldr	r3, [r7, #4]
    33a8:	429a      	cmp	r2, r3
    33aa:	db82      	blt.n	32b2 <xSetTimestamp+0x1a>
            vListRemove( temp_pxEventListItem ); 
            vListInsertEnd(&xEventNonExecutablePool, temp_pxEventListItem);
            break;
        }
    }
    for( ; i < count; ++i)  // update the left simultaneous events and send them to event pool
    33ac:	e033      	b.n	3416 <xSetTimestamp+0x17e>
    {
        pxEvent = (eveECB *) pxIterator->pvOwner;
    33ae:	693b      	ldr	r3, [r7, #16]
    33b0:	68db      	ldr	r3, [r3, #12]
    33b2:	60fb      	str	r3, [r7, #12]
        pxEvent->xTag.xTimestamp = xFutureModelTime;
    33b4:	f240 635c 	movw	r3, #1628	; 0x65c
    33b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33bc:	681a      	ldr	r2, [r3, #0]
    33be:	68fb      	ldr	r3, [r7, #12]
    33c0:	60da      	str	r2, [r3, #12]
        xFutureModelTime += xContexts[pxEvent->pxDestination].xLet;
    33c2:	68fb      	ldr	r3, [r7, #12]
    33c4:	6859      	ldr	r1, [r3, #4]
    33c6:	f240 62dc 	movw	r2, #1756	; 0x6dc
    33ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    33ce:	460b      	mov	r3, r1
    33d0:	00db      	lsls	r3, r3, #3
    33d2:	1a5b      	subs	r3, r3, r1
    33d4:	00db      	lsls	r3, r3, #3
    33d6:	4413      	add	r3, r2
    33d8:	3324      	adds	r3, #36	; 0x24
    33da:	681a      	ldr	r2, [r3, #0]
    33dc:	f240 635c 	movw	r3, #1628	; 0x65c
    33e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33e4:	681b      	ldr	r3, [r3, #0]
    33e6:	441a      	add	r2, r3
    33e8:	f240 635c 	movw	r3, #1628	; 0x65c
    33ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33f0:	601a      	str	r2, [r3, #0]

        temp_pxEventListItem = (xListItem *)pxIterator;
    33f2:	693b      	ldr	r3, [r7, #16]
    33f4:	60bb      	str	r3, [r7, #8]
        pxIterator = pxIterator->pxNext;
    33f6:	693b      	ldr	r3, [r7, #16]
    33f8:	685b      	ldr	r3, [r3, #4]
    33fa:	613b      	str	r3, [r7, #16]
        vListRemove( temp_pxEventListItem ); 
    33fc:	68b8      	ldr	r0, [r7, #8]
    33fe:	f000 ff57 	bl	42b0 <vListRemove>
        vListInsertEnd(&xEventNonExecutablePool, temp_pxEventListItem);
    3402:	f240 6074 	movw	r0, #1652	; 0x674
    3406:	f2c2 0000 	movt	r0, #8192	; 0x2000
    340a:	68b9      	ldr	r1, [r7, #8]
    340c:	f000 fef0 	bl	41f0 <vListInsertEnd>
            vListRemove( temp_pxEventListItem ); 
            vListInsertEnd(&xEventNonExecutablePool, temp_pxEventListItem);
            break;
        }
    }
    for( ; i < count; ++i)  // update the left simultaneous events and send them to event pool
    3410:	697b      	ldr	r3, [r7, #20]
    3412:	3301      	adds	r3, #1
    3414:	617b      	str	r3, [r7, #20]
    3416:	697a      	ldr	r2, [r7, #20]
    3418:	687b      	ldr	r3, [r7, #4]
    341a:	429a      	cmp	r2, r3
    341c:	dbc7      	blt.n	33ae <xSetTimestamp+0x116>
        temp_pxEventListItem = (xListItem *)pxIterator;
        pxIterator = pxIterator->pxNext;
        vListRemove( temp_pxEventListItem ); 
        vListInsertEnd(&xEventNonExecutablePool, temp_pxEventListItem);
    }
}
    341e:	3718      	adds	r7, #24
    3420:	46bd      	mov	sp, r7
    3422:	bd80      	pop	{r7, pc}

00003424 <pTagEqual>:

inline static portBASE_TYPE pTagEqual(struct tag xTag1, struct tag xTag2)
{
    3424:	b490      	push	{r4, r7}
    3426:	b084      	sub	sp, #16
    3428:	af00      	add	r7, sp, #0
    342a:	463c      	mov	r4, r7
    342c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(xTag1.xDeadline == xTag2.xDeadline && xTag1.xTimestamp == xTag2.xTimestamp)
    3430:	683a      	ldr	r2, [r7, #0]
    3432:	69bb      	ldr	r3, [r7, #24]
    3434:	429a      	cmp	r2, r3
    3436:	d105      	bne.n	3444 <pTagEqual+0x20>
    3438:	687a      	ldr	r2, [r7, #4]
    343a:	69fb      	ldr	r3, [r7, #28]
    343c:	429a      	cmp	r2, r3
    343e:	d101      	bne.n	3444 <pTagEqual+0x20>
    {
        return 1;
    3440:	2301      	movs	r3, #1
    3442:	e000      	b.n	3446 <pTagEqual+0x22>
    }
    else
    {
        return 0;
    3444:	2300      	movs	r3, #0
    }
}
    3446:	4618      	mov	r0, r3
    3448:	3710      	adds	r7, #16
    344a:	46bd      	mov	sp, r7
    344c:	bc90      	pop	{r4, r7}
    344e:	4770      	bx	lr

00003450 <xEventGenericSerialize>:

// serialise the simultaneous events
portBASE_TYPE xEventGenericSerialize()
{
    3450:	b590      	push	{r4, r7, lr}
    3452:	b091      	sub	sp, #68	; 0x44
    3454:	af04      	add	r7, sp, #16
    xListItem * flag_pxEventListItem, * temp_pxEventListItem;
    portBASE_TYPE count = 0;
    3456:	2300      	movs	r3, #0
    3458:	62fb      	str	r3, [r7, #44]	; 0x2c

    if(listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 1)
    345a:	f240 63b0 	movw	r3, #1712	; 0x6b0
    345e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3462:	681b      	ldr	r3, [r3, #0]
    3464:	2b01      	cmp	r3, #1
    3466:	d96c      	bls.n	3542 <xEventGenericSerialize+0xf2>
    {
        flag_pxEventListItem = (xListItem *) xEventExecutableList.xListEnd.pxNext;
    3468:	f240 63b0 	movw	r3, #1712	; 0x6b0
    346c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3470:	68db      	ldr	r3, [r3, #12]
    3472:	62bb      	str	r3, [r7, #40]	; 0x28
        vListRemove( flag_pxEventListItem );
    3474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3476:	f000 ff1b 	bl	42b0 <vListRemove>
        vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
    347a:	f240 60c4 	movw	r0, #1732	; 0x6c4
    347e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3482:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3484:	f000 feb4 	bl	41f0 <vListInsertEnd>
        while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 1 )
    3488:	e030      	b.n	34ec <xEventGenericSerialize+0x9c>
        {
            temp_pxEventListItem = (xListItem *) xEventExecutableList.xListEnd.pxNext;
    348a:	f240 63b0 	movw	r3, #1712	; 0x6b0
    348e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3492:	68db      	ldr	r3, [r3, #12]
    3494:	627b      	str	r3, [r7, #36]	; 0x24
            // transit the simultaneous event to ready list
            if( pTagEqual( xEventGetxTag(flag_pxEventListItem->pvOwner), xEventGetxTag(temp_pxEventListItem->pvOwner)) == 1)
    3496:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3498:	68db      	ldr	r3, [r3, #12]
    349a:	1d3a      	adds	r2, r7, #4
    349c:	4610      	mov	r0, r2
    349e:	4619      	mov	r1, r3
    34a0:	f7ff fa84 	bl	29ac <xEventGetxTag>
    34a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    34a6:	68db      	ldr	r3, [r3, #12]
    34a8:	f107 0214 	add.w	r2, r7, #20
    34ac:	4610      	mov	r0, r2
    34ae:	4619      	mov	r1, r3
    34b0:	f7ff fa7c 	bl	29ac <xEventGetxTag>
    34b4:	466c      	mov	r4, sp
    34b6:	f107 0314 	add.w	r3, r7, #20
    34ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    34bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    34c0:	1d3b      	adds	r3, r7, #4
    34c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    34c4:	f7ff ffae 	bl	3424 <pTagEqual>
    34c8:	4603      	mov	r3, r0
    34ca:	2b01      	cmp	r3, #1
    34cc:	d10d      	bne.n	34ea <xEventGenericSerialize+0x9a>
            {
                vListRemove( temp_pxEventListItem );
    34ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
    34d0:	f000 feee 	bl	42b0 <vListRemove>
                vListInsertEnd( &xEventReadyList, temp_pxEventListItem );
    34d4:	f240 60c4 	movw	r0, #1732	; 0x6c4
    34d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    34dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
    34de:	f000 fe87 	bl	41f0 <vListInsertEnd>
                count ++;
    34e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    34e4:	3301      	adds	r3, #1
    34e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    34e8:	e000      	b.n	34ec <xEventGenericSerialize+0x9c>
            }
            else
            {
                break;
    34ea:	e006      	b.n	34fa <xEventGenericSerialize+0xaa>
    if(listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 1)
    {
        flag_pxEventListItem = (xListItem *) xEventExecutableList.xListEnd.pxNext;
        vListRemove( flag_pxEventListItem );
        vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
        while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 1 )
    34ec:	f240 63b0 	movw	r3, #1712	; 0x6b0
    34f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34f4:	681b      	ldr	r3, [r3, #0]
    34f6:	2b01      	cmp	r3, #1
    34f8:	d8c7      	bhi.n	348a <xEventGenericSerialize+0x3a>
                break;
            }
        }
        // update timestamp of ready event in terms of future model time, 
        // which is only work for events that trigger C-Servant
        if( xContexts[xEventGetpxDestination(flag_pxEventListItem->pvOwner)].xType == 2 )
    34fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    34fc:	68db      	ldr	r3, [r3, #12]
    34fe:	4618      	mov	r0, r3
    3500:	f7ff fa48 	bl	2994 <xEventGetpxDestination>
    3504:	4601      	mov	r1, r0
    3506:	f240 62dc 	movw	r2, #1756	; 0x6dc
    350a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    350e:	460b      	mov	r3, r1
    3510:	00db      	lsls	r3, r3, #3
    3512:	1a5b      	subs	r3, r3, r1
    3514:	00db      	lsls	r3, r3, #3
    3516:	4413      	add	r3, r2
    3518:	3304      	adds	r3, #4
    351a:	681b      	ldr	r3, [r3, #0]
    351c:	2b02      	cmp	r3, #2
    351e:	d102      	bne.n	3526 <xEventGenericSerialize+0xd6>
        {
            xSetTimestamp( count );
    3520:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3522:	f7ff feb9 	bl	3298 <xSetTimestamp>
        }

        if( listCURRENT_LIST_LENGTH( &xEventReadyList ) > 0 )
    3526:	f240 63c4 	movw	r3, #1732	; 0x6c4
    352a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    352e:	681b      	ldr	r3, [r3, #0]
    3530:	2b00      	cmp	r3, #0
    3532:	d006      	beq.n	3542 <xEventGenericSerialize+0xf2>
        {
            return xEventGetpxDestination(flag_pxEventListItem->pvOwner); //  the first one repsenting the type of events
    3534:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3536:	68db      	ldr	r3, [r3, #12]
    3538:	4618      	mov	r0, r3
    353a:	f7ff fa2b 	bl	2994 <xEventGetpxDestination>
    353e:	4603      	mov	r3, r0
    3540:	e001      	b.n	3546 <xEventGenericSerialize+0xf6>
        }
    }
    return -1; // no event avaliable
    3542:	f04f 33ff 	mov.w	r3, #4294967295
}
    3546:	4618      	mov	r0, r3
    3548:	3734      	adds	r7, #52	; 0x34
    354a:	46bd      	mov	sp, r7
    354c:	bd90      	pop	{r4, r7, pc}
    354e:	bf00      	nop

00003550 <vEventGenericSend>:

void vEventGenericSend( xEventHandle pxEvent )
{
    3550:	b580      	push	{r7, lr}
    3552:	b082      	sub	sp, #8
    3554:	af00      	add	r7, sp, #0
    3556:	6078      	str	r0, [r7, #4]
    vListInsertEnd(&xEventNonExecutablePool, (xListItem *)&((eveECB *)pxEvent)->xEventListItem);
    3558:	687b      	ldr	r3, [r7, #4]
    355a:	3320      	adds	r3, #32
    355c:	f240 6074 	movw	r0, #1652	; 0x674
    3560:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3564:	4619      	mov	r1, r3
    3566:	f000 fe43 	bl	41f0 <vListInsertEnd>
}
    356a:	3708      	adds	r7, #8
    356c:	46bd      	mov	sp, r7
    356e:	bd80      	pop	{r7, pc}

00003570 <pxEventGenericReceive>:

xEventHandle pxEventGenericReceive()
{
    3570:	b580      	push	{r7, lr}
    3572:	b082      	sub	sp, #8
    3574:	af00      	add	r7, sp, #0
    // xEventReadyList must not be null, which is ensured by servant

    taskENTER_CRITICAL();
    3576:	f002 fc4d 	bl	5e14 <vPortEnterCritical>
    xListItem * pxFlag = (xListItem *)xEventReadyList.xListEnd.pxNext;
    357a:	f240 63c4 	movw	r3, #1732	; 0x6c4
    357e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3582:	68db      	ldr	r3, [r3, #12]
    3584:	607b      	str	r3, [r7, #4]
    vListRemove(pxFlag);
    3586:	6878      	ldr	r0, [r7, #4]
    3588:	f000 fe92 	bl	42b0 <vListRemove>
    vListInsertEnd(&xEventNonExecutablePool, pxFlag);  // reuse event, which will be update by servant 
    358c:	f240 6074 	movw	r0, #1652	; 0x674
    3590:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3594:	6879      	ldr	r1, [r7, #4]
    3596:	f000 fe2b 	bl	41f0 <vListInsertEnd>
    taskEXIT_CRITICAL();
    359a:	f002 fc51 	bl	5e40 <vPortExitCritical>

    return (xEventHandle) pxFlag->pvOwner;
    359e:	687b      	ldr	r3, [r7, #4]
    35a0:	68db      	ldr	r3, [r3, #12]
}
    35a2:	4618      	mov	r0, r3
    35a4:	3708      	adds	r7, #8
    35a6:	46bd      	mov	sp, r7
    35a8:	bd80      	pop	{r7, pc}
    35aa:	bf00      	nop

000035ac <vEventGenericUpdate>:

void vEventGenericUpdate( xEventHandle xEvent, portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData xData)
{
    35ac:	b480      	push	{r7}
    35ae:	b087      	sub	sp, #28
    35b0:	af00      	add	r7, sp, #0
    35b2:	60f8      	str	r0, [r7, #12]
    35b4:	60b9      	str	r1, [r7, #8]
    35b6:	607a      	str	r2, [r7, #4]
    35b8:	603b      	str	r3, [r7, #0]
    eveECB * pxEvent = (eveECB *)xEvent;
    35ba:	68fb      	ldr	r3, [r7, #12]
    35bc:	617b      	str	r3, [r7, #20]
    pxEvent->pxSource = pxSource;
    35be:	697b      	ldr	r3, [r7, #20]
    35c0:	68ba      	ldr	r2, [r7, #8]
    35c2:	601a      	str	r2, [r3, #0]
    pxEvent->xTag.xDeadline = xDeadline;
    35c4:	697b      	ldr	r3, [r7, #20]
    35c6:	687a      	ldr	r2, [r7, #4]
    35c8:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp; 
    35ca:	697b      	ldr	r3, [r7, #20]
    35cc:	683a      	ldr	r2, [r7, #0]
    35ce:	60da      	str	r2, [r3, #12]
    pxEvent->xTag.xLevel = xEventSerialNumber;
    35d0:	f240 63d8 	movw	r3, #1752	; 0x6d8
    35d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35d8:	681b      	ldr	r3, [r3, #0]
    35da:	461a      	mov	r2, r3
    35dc:	697b      	ldr	r3, [r7, #20]
    35de:	611a      	str	r2, [r3, #16]
    pxEvent->xTag.xMicroStep = 0;
    35e0:	697b      	ldr	r3, [r7, #20]
    35e2:	2200      	movs	r2, #0
    35e4:	615a      	str	r2, [r3, #20]
    pxEvent->xData = xData;
    35e6:	697b      	ldr	r3, [r7, #20]
    35e8:	3318      	adds	r3, #24
    35ea:	f107 0220 	add.w	r2, r7, #32
    35ee:	e892 0003 	ldmia.w	r2, {r0, r1}
    35f2:	e883 0003 	stmia.w	r3, {r0, r1}
    xEventSerialNumber++;
    35f6:	f240 63d8 	movw	r3, #1752	; 0x6d8
    35fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35fe:	681b      	ldr	r3, [r3, #0]
    3600:	1c5a      	adds	r2, r3, #1
    3602:	f240 63d8 	movw	r3, #1752	; 0x6d8
    3606:	f2c2 0300 	movt	r3, #8192	; 0x2000
    360a:	601a      	str	r2, [r3, #0]
}
    360c:	371c      	adds	r7, #28
    360e:	46bd      	mov	sp, r7
    3610:	f85d 7b04 	ldr.w	r7, [sp], #4
    3614:	4770      	bx	lr
    3616:	bf00      	nop

00003618 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    3618:	b580      	push	{r7, lr}
    361a:	b084      	sub	sp, #16
    361c:	af00      	add	r7, sp, #0
    361e:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
    3620:	f002 fbf8 	bl	5e14 <vPortEnterCritical>

    xListItem * pxEventItem = &((eveECB *)xEvent)->xEventListItem;
    3624:	687b      	ldr	r3, [r7, #4]
    3626:	3320      	adds	r3, #32
    3628:	60fb      	str	r3, [r7, #12]
    vListRemove (pxEventItem);
    362a:	68f8      	ldr	r0, [r7, #12]
    362c:	f000 fe40 	bl	42b0 <vListRemove>
    vListInsertEnd( &xEventIdleList, pxEventItem );
    3630:	f240 6060 	movw	r0, #1632	; 0x660
    3634:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3638:	68f9      	ldr	r1, [r7, #12]
    363a:	f000 fdd9 	bl	41f0 <vListInsertEnd>

    taskEXIT_CRITICAL();
    363e:	f002 fbff 	bl	5e40 <vPortExitCritical>
}
    3642:	3710      	adds	r7, #16
    3644:	46bd      	mov	sp, r7
    3646:	bd80      	pop	{r7, pc}

00003648 <vSemaphoreInitialise>:

extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    3648:	b580      	push	{r7, lr}
    364a:	b082      	sub	sp, #8
    364c:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    364e:	2300      	movs	r3, #0
    3650:	607b      	str	r3, [r7, #4]
    3652:	e033      	b.n	36bc <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    3654:	2001      	movs	r0, #1
    3656:	2100      	movs	r1, #0
    3658:	2203      	movs	r2, #3
    365a:	f000 fe9f 	bl	439c <xQueueGenericCreate>
    365e:	4601      	mov	r1, r0
    3660:	f241 1324 	movw	r3, #4388	; 0x1124
    3664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3668:	687a      	ldr	r2, [r7, #4]
    366a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    366e:	f241 1324 	movw	r3, #4388	; 0x1124
    3672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3676:	687a      	ldr	r2, [r7, #4]
    3678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    367c:	2b00      	cmp	r3, #0
    367e:	d00c      	beq.n	369a <vSemaphoreInitialise+0x52>
    3680:	f241 1324 	movw	r3, #4388	; 0x1124
    3684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3688:	687a      	ldr	r2, [r7, #4]
    368a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    368e:	4618      	mov	r0, r3
    3690:	2100      	movs	r1, #0
    3692:	2200      	movs	r2, #0
    3694:	2300      	movs	r3, #0
    3696:	f000 ff0f 	bl	44b8 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    369a:	f241 1324 	movw	r3, #4388	; 0x1124
    369e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36a2:	687a      	ldr	r2, [r7, #4]
    36a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    36a8:	4618      	mov	r0, r3
    36aa:	2100      	movs	r1, #0
    36ac:	f04f 32ff 	mov.w	r2, #4294967295
    36b0:	2300      	movs	r3, #0
    36b2:	f000 ffc7 	bl	4644 <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    36b6:	687b      	ldr	r3, [r7, #4]
    36b8:	3301      	adds	r3, #1
    36ba:	607b      	str	r3, [r7, #4]
    36bc:	687b      	ldr	r3, [r7, #4]
    36be:	2b03      	cmp	r3, #3
    36c0:	ddc8      	ble.n	3654 <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    36c2:	3708      	adds	r7, #8
    36c4:	46bd      	mov	sp, r7
    36c6:	bd80      	pop	{r7, pc}

000036c8 <vContextInit>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vContextInit()
{
    36c8:	b480      	push	{r7}
    36ca:	b085      	sub	sp, #20
    36cc:	af00      	add	r7, sp, #0
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    36ce:	2300      	movs	r3, #0
    36d0:	60fb      	str	r3, [r7, #12]
    36d2:	e0a1      	b.n	3818 <vContextInit+0x150>
    {
        xContexts[i].xMyFlag = i;
    36d4:	f240 62dc 	movw	r2, #1756	; 0x6dc
    36d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36dc:	68f9      	ldr	r1, [r7, #12]
    36de:	460b      	mov	r3, r1
    36e0:	00db      	lsls	r3, r3, #3
    36e2:	1a5b      	subs	r3, r3, r1
    36e4:	00db      	lsls	r3, r3, #3
    36e6:	4413      	add	r3, r2
    36e8:	68fa      	ldr	r2, [r7, #12]
    36ea:	601a      	str	r2, [r3, #0]
        xContexts[i].xType = 2;
    36ec:	f240 62dc 	movw	r2, #1756	; 0x6dc
    36f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36f4:	68f9      	ldr	r1, [r7, #12]
    36f6:	460b      	mov	r3, r1
    36f8:	00db      	lsls	r3, r3, #3
    36fa:	1a5b      	subs	r3, r3, r1
    36fc:	00db      	lsls	r3, r3, #3
    36fe:	4413      	add	r3, r2
    3700:	3304      	adds	r3, #4
    3702:	2202      	movs	r2, #2
    3704:	601a      	str	r2, [r3, #0]
        xContexts[i].xCount = 1; // the first period of task is used to init system
    3706:	f240 62dc 	movw	r2, #1756	; 0x6dc
    370a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    370e:	68f9      	ldr	r1, [r7, #12]
    3710:	460b      	mov	r3, r1
    3712:	00db      	lsls	r3, r3, #3
    3714:	1a5b      	subs	r3, r3, r1
    3716:	00db      	lsls	r3, r3, #3
    3718:	4413      	add	r3, r2
    371a:	3308      	adds	r3, #8
    371c:	2201      	movs	r2, #1
    371e:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfIn = 0;
    3720:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3724:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3728:	68f9      	ldr	r1, [r7, #12]
    372a:	460b      	mov	r3, r1
    372c:	00db      	lsls	r3, r3, #3
    372e:	1a5b      	subs	r3, r3, r1
    3730:	00db      	lsls	r3, r3, #3
    3732:	4413      	add	r3, r2
    3734:	330c      	adds	r3, #12
    3736:	2200      	movs	r2, #0
    3738:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfOut = 0;
    373a:	f240 62dc 	movw	r2, #1756	; 0x6dc
    373e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3742:	68f9      	ldr	r1, [r7, #12]
    3744:	460b      	mov	r3, r1
    3746:	00db      	lsls	r3, r3, #3
    3748:	1a5b      	subs	r3, r3, r1
    374a:	00db      	lsls	r3, r3, #3
    374c:	4413      	add	r3, r2
    374e:	3310      	adds	r3, #16
    3750:	2200      	movs	r2, #0
    3752:	601a      	str	r2, [r3, #0]
        xContexts[i].xLet = xLetOfServant[i];
    3754:	f240 03c4 	movw	r3, #196	; 0xc4
    3758:	f2c2 0300 	movt	r3, #8192	; 0x2000
    375c:	68fa      	ldr	r2, [r7, #12]
    375e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3762:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3766:	f2c2 0200 	movt	r2, #8192	; 0x2000
    376a:	68f9      	ldr	r1, [r7, #12]
    376c:	460b      	mov	r3, r1
    376e:	00db      	lsls	r3, r3, #3
    3770:	1a5b      	subs	r3, r3, r1
    3772:	00db      	lsls	r3, r3, #3
    3774:	4413      	add	r3, r2
    3776:	3324      	adds	r3, #36	; 0x24
    3778:	6018      	str	r0, [r3, #0]
        xContexts[i].xFp = xServantTable[i];
    377a:	f240 4374 	movw	r3, #1140	; 0x474
    377e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3782:	68fa      	ldr	r2, [r7, #12]
    3784:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3788:	f240 62dc 	movw	r2, #1756	; 0x6dc
    378c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3790:	68f9      	ldr	r1, [r7, #12]
    3792:	460b      	mov	r3, r1
    3794:	00db      	lsls	r3, r3, #3
    3796:	1a5b      	subs	r3, r3, r1
    3798:	00db      	lsls	r3, r3, #3
    379a:	4413      	add	r3, r2
    379c:	3328      	adds	r3, #40	; 0x28
    379e:	6018      	str	r0, [r3, #0]
        xContexts[i].xTaskId = xTaskOfServant[i];
    37a0:	f240 1380 	movw	r3, #384	; 0x180
    37a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37a8:	68fa      	ldr	r2, [r7, #12]
    37aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    37ae:	f240 62dc 	movw	r2, #1756	; 0x6dc
    37b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37b6:	68f9      	ldr	r1, [r7, #12]
    37b8:	460b      	mov	r3, r1
    37ba:	00db      	lsls	r3, r3, #3
    37bc:	1a5b      	subs	r3, r3, r1
    37be:	00db      	lsls	r3, r3, #3
    37c0:	4413      	add	r3, r2
    37c2:	3330      	adds	r3, #48	; 0x30
    37c4:	6018      	str	r0, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
    37c6:	f240 1380 	movw	r3, #384	; 0x180
    37ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37ce:	68fa      	ldr	r2, [r7, #12]
    37d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    37d4:	f240 0328 	movw	r3, #40	; 0x28
    37d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37dc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    37e0:	f240 62dc 	movw	r2, #1756	; 0x6dc
    37e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37e8:	68f9      	ldr	r1, [r7, #12]
    37ea:	460b      	mov	r3, r1
    37ec:	00db      	lsls	r3, r3, #3
    37ee:	1a5b      	subs	r3, r3, r1
    37f0:	00db      	lsls	r3, r3, #3
    37f2:	4413      	add	r3, r2
    37f4:	332c      	adds	r3, #44	; 0x2c
    37f6:	6018      	str	r0, [r3, #0]
        xContexts[i].xInBoolCount = 0;
    37f8:	f240 62dc 	movw	r2, #1756	; 0x6dc
    37fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3800:	68f9      	ldr	r1, [r7, #12]
    3802:	460b      	mov	r3, r1
    3804:	00db      	lsls	r3, r3, #3
    3806:	1a5b      	subs	r3, r3, r1
    3808:	00db      	lsls	r3, r3, #3
    380a:	4413      	add	r3, r2
    380c:	3334      	adds	r3, #52	; 0x34
    380e:	2200      	movs	r2, #0
    3810:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    3812:	68fb      	ldr	r3, [r7, #12]
    3814:	3301      	adds	r3, #1
    3816:	60fb      	str	r3, [r7, #12]
    3818:	68fb      	ldr	r3, [r7, #12]
    381a:	2b2e      	cmp	r3, #46	; 0x2e
    381c:	f77f af5a 	ble.w	36d4 <vContextInit+0xc>
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    3820:	2300      	movs	r3, #0
    3822:	60fb      	str	r3, [r7, #12]
    3824:	e028      	b.n	3878 <vContextInit+0x1b0>
    {
        xContexts[xSensorOfTask[i]].xType = 1;
    3826:	f240 035c 	movw	r3, #92	; 0x5c
    382a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    382e:	68fa      	ldr	r2, [r7, #12]
    3830:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3834:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3838:	f2c2 0200 	movt	r2, #8192	; 0x2000
    383c:	460b      	mov	r3, r1
    383e:	00db      	lsls	r3, r3, #3
    3840:	1a5b      	subs	r3, r3, r1
    3842:	00db      	lsls	r3, r3, #3
    3844:	4413      	add	r3, r2
    3846:	3304      	adds	r3, #4
    3848:	2201      	movs	r2, #1
    384a:	601a      	str	r2, [r3, #0]
        xContexts[xActuatorOfTask[i]].xType = 3;
    384c:	f240 0390 	movw	r3, #144	; 0x90
    3850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3854:	68fa      	ldr	r2, [r7, #12]
    3856:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    385a:	f240 62dc 	movw	r2, #1756	; 0x6dc
    385e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3862:	460b      	mov	r3, r1
    3864:	00db      	lsls	r3, r3, #3
    3866:	1a5b      	subs	r3, r3, r1
    3868:	00db      	lsls	r3, r3, #3
    386a:	4413      	add	r3, r2
    386c:	3304      	adds	r3, #4
    386e:	2203      	movs	r2, #3
    3870:	601a      	str	r2, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    3872:	68fb      	ldr	r3, [r7, #12]
    3874:	3301      	adds	r3, #1
    3876:	60fb      	str	r3, [r7, #12]
    3878:	68fb      	ldr	r3, [r7, #12]
    387a:	2b0c      	cmp	r3, #12
    387c:	ddd3      	ble.n	3826 <vContextInit+0x15e>
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    387e:	2300      	movs	r3, #0
    3880:	60fb      	str	r3, [r7, #12]
    3882:	e084      	b.n	398e <vContextInit+0x2c6>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    3884:	f240 223c 	movw	r2, #572	; 0x23c
    3888:	f2c2 0200 	movt	r2, #8192	; 0x2000
    388c:	68f9      	ldr	r1, [r7, #12]
    388e:	460b      	mov	r3, r1
    3890:	005b      	lsls	r3, r3, #1
    3892:	440b      	add	r3, r1
    3894:	009b      	lsls	r3, r3, #2
    3896:	4413      	add	r3, r2
    3898:	3304      	adds	r3, #4
    389a:	681b      	ldr	r3, [r3, #0]
    389c:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    389e:	f240 223c 	movw	r2, #572	; 0x23c
    38a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38a6:	68f9      	ldr	r1, [r7, #12]
    38a8:	460b      	mov	r3, r1
    38aa:	005b      	lsls	r3, r3, #1
    38ac:	440b      	add	r3, r1
    38ae:	009b      	lsls	r3, r3, #2
    38b0:	4413      	add	r3, r2
    38b2:	3308      	adds	r3, #8
    38b4:	681b      	ldr	r3, [r3, #0]
    38b6:	607b      	str	r3, [r7, #4]

        xContexts[xSource].xOutFlag[xContexts[xSource].xNumOfOut] = xDest;
    38b8:	f240 62dc 	movw	r2, #1756	; 0x6dc
    38bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38c0:	68b9      	ldr	r1, [r7, #8]
    38c2:	460b      	mov	r3, r1
    38c4:	00db      	lsls	r3, r3, #3
    38c6:	1a5b      	subs	r3, r3, r1
    38c8:	00db      	lsls	r3, r3, #3
    38ca:	4413      	add	r3, r2
    38cc:	3310      	adds	r3, #16
    38ce:	6818      	ldr	r0, [r3, #0]
    38d0:	f240 62dc 	movw	r2, #1756	; 0x6dc
    38d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38d8:	68b9      	ldr	r1, [r7, #8]
    38da:	460b      	mov	r3, r1
    38dc:	00db      	lsls	r3, r3, #3
    38de:	1a5b      	subs	r3, r3, r1
    38e0:	005b      	lsls	r3, r3, #1
    38e2:	4403      	add	r3, r0
    38e4:	3306      	adds	r3, #6
    38e6:	009b      	lsls	r3, r3, #2
    38e8:	4413      	add	r3, r2
    38ea:	687a      	ldr	r2, [r7, #4]
    38ec:	605a      	str	r2, [r3, #4]
        xContexts[xSource].xNumOfOut ++;
    38ee:	f240 62dc 	movw	r2, #1756	; 0x6dc
    38f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38f6:	68b9      	ldr	r1, [r7, #8]
    38f8:	460b      	mov	r3, r1
    38fa:	00db      	lsls	r3, r3, #3
    38fc:	1a5b      	subs	r3, r3, r1
    38fe:	00db      	lsls	r3, r3, #3
    3900:	4413      	add	r3, r2
    3902:	3310      	adds	r3, #16
    3904:	681b      	ldr	r3, [r3, #0]
    3906:	1c58      	adds	r0, r3, #1
    3908:	f240 62dc 	movw	r2, #1756	; 0x6dc
    390c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3910:	68b9      	ldr	r1, [r7, #8]
    3912:	460b      	mov	r3, r1
    3914:	00db      	lsls	r3, r3, #3
    3916:	1a5b      	subs	r3, r3, r1
    3918:	00db      	lsls	r3, r3, #3
    391a:	4413      	add	r3, r2
    391c:	3310      	adds	r3, #16
    391e:	6018      	str	r0, [r3, #0]

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
    3920:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3924:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3928:	6879      	ldr	r1, [r7, #4]
    392a:	460b      	mov	r3, r1
    392c:	00db      	lsls	r3, r3, #3
    392e:	1a5b      	subs	r3, r3, r1
    3930:	00db      	lsls	r3, r3, #3
    3932:	4413      	add	r3, r2
    3934:	330c      	adds	r3, #12
    3936:	6818      	ldr	r0, [r3, #0]
    3938:	f240 62dc 	movw	r2, #1756	; 0x6dc
    393c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3940:	6879      	ldr	r1, [r7, #4]
    3942:	460b      	mov	r3, r1
    3944:	00db      	lsls	r3, r3, #3
    3946:	1a5b      	subs	r3, r3, r1
    3948:	005b      	lsls	r3, r3, #1
    394a:	4403      	add	r3, r0
    394c:	3304      	adds	r3, #4
    394e:	009b      	lsls	r3, r3, #2
    3950:	4413      	add	r3, r2
    3952:	68ba      	ldr	r2, [r7, #8]
    3954:	605a      	str	r2, [r3, #4]
        xContexts[xDest].xNumOfIn ++;
    3956:	f240 62dc 	movw	r2, #1756	; 0x6dc
    395a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    395e:	6879      	ldr	r1, [r7, #4]
    3960:	460b      	mov	r3, r1
    3962:	00db      	lsls	r3, r3, #3
    3964:	1a5b      	subs	r3, r3, r1
    3966:	00db      	lsls	r3, r3, #3
    3968:	4413      	add	r3, r2
    396a:	330c      	adds	r3, #12
    396c:	681b      	ldr	r3, [r3, #0]
    396e:	1c58      	adds	r0, r3, #1
    3970:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3974:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3978:	6879      	ldr	r1, [r7, #4]
    397a:	460b      	mov	r3, r1
    397c:	00db      	lsls	r3, r3, #3
    397e:	1a5b      	subs	r3, r3, r1
    3980:	00db      	lsls	r3, r3, #3
    3982:	4413      	add	r3, r2
    3984:	330c      	adds	r3, #12
    3986:	6018      	str	r0, [r3, #0]
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3988:	68fb      	ldr	r3, [r7, #12]
    398a:	3301      	adds	r3, #1
    398c:	60fb      	str	r3, [r7, #12]
    398e:	f240 233c 	movw	r3, #572	; 0x23c
    3992:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3996:	681a      	ldr	r2, [r3, #0]
    3998:	68fb      	ldr	r3, [r7, #12]
    399a:	429a      	cmp	r2, r3
    399c:	f73f af72 	bgt.w	3884 <vContextInit+0x1bc>
        xContexts[xSource].xNumOfOut ++;

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
        xContexts[xDest].xNumOfIn ++;
    }
}
    39a0:	3714      	adds	r7, #20
    39a2:	46bd      	mov	sp, r7
    39a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    39a8:	4770      	bx	lr
    39aa:	bf00      	nop

000039ac <vSensor>:

void vSensor( void * pvParameter )
{
    39ac:	b580      	push	{r7, lr}
    39ae:	b092      	sub	sp, #72	; 0x48
    39b0:	af02      	add	r7, sp, #8
    39b2:	60f8      	str	r0, [r7, #12]
    struct tag xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );
    39b4:	f241 1324 	movw	r3, #4388	; 0x1124
    39b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39bc:	685b      	ldr	r3, [r3, #4]
    39be:	4618      	mov	r0, r3
    39c0:	2100      	movs	r1, #0
    39c2:	f04f 32ff 	mov.w	r2, #4294967295
    39c6:	2300      	movs	r3, #0
    39c8:	f000 fe3c 	bl	4644 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    39cc:	e06b      	b.n	3aa6 <vSensor+0xfa>
        {
            if(boolFlag == 0)
    39ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    39d0:	2b00      	cmp	r3, #0
    39d2:	d100      	bne.n	39d6 <vSensor+0x2a>
                continue;
    39d4:	e067      	b.n	3aa6 <vSensor+0xfa>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    39d6:	f7ff fdcb 	bl	3570 <pxEventGenericReceive>
    39da:	63b8      	str	r0, [r7, #56]	; 0x38
            xMyFlag = xEventGetpxDestination( pxEvent );
    39dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    39de:	f7fe ffd9 	bl	2994 <xEventGetpxDestination>
    39e2:	6378      	str	r0, [r7, #52]	; 0x34
            xMyData = xEventGetxData( pxEvent );
    39e4:	463b      	mov	r3, r7
    39e6:	4618      	mov	r0, r3
    39e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    39ea:	f7fe fff1 	bl	29d0 <xEventGetxData>
    39ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
    39f2:	463a      	mov	r2, r7
    39f4:	e892 0003 	ldmia.w	r2, {r0, r1}
    39f8:	e883 0003 	stmia.w	r3, {r0, r1}
            xMyTag = xEventGetxTag( pxEvent );
    39fc:	f107 0314 	add.w	r3, r7, #20
    3a00:	4618      	mov	r0, r3
    3a02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    3a04:	f7fe ffd2 	bl	29ac <xEventGetxTag>
            xPeriod= xContexts[xMyFlag].xPeriod;
    3a08:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3a0c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a10:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3a12:	460b      	mov	r3, r1
    3a14:	00db      	lsls	r3, r3, #3
    3a16:	1a5b      	subs	r3, r3, r1
    3a18:	00db      	lsls	r3, r3, #3
    3a1a:	4413      	add	r3, r2
    3a1c:	332c      	adds	r3, #44	; 0x2c
    3a1e:	681b      	ldr	r3, [r3, #0]
    3a20:	633b      	str	r3, [r7, #48]	; 0x30
            xContexts[xMyFlag].xCount ++;
    3a22:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3a26:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3a2c:	460b      	mov	r3, r1
    3a2e:	00db      	lsls	r3, r3, #3
    3a30:	1a5b      	subs	r3, r3, r1
    3a32:	00db      	lsls	r3, r3, #3
    3a34:	4413      	add	r3, r2
    3a36:	3308      	adds	r3, #8
    3a38:	681b      	ldr	r3, [r3, #0]
    3a3a:	1c58      	adds	r0, r3, #1
    3a3c:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3a40:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a44:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3a46:	460b      	mov	r3, r1
    3a48:	00db      	lsls	r3, r3, #3
    3a4a:	1a5b      	subs	r3, r3, r1
    3a4c:	00db      	lsls	r3, r3, #3
    3a4e:	4413      	add	r3, r2
    3a50:	3308      	adds	r3, #8
    3a52:	6018      	str	r0, [r3, #0]
            xTimestamp = xMyTag.xTimestamp + INPUT;   
    3a54:	69bb      	ldr	r3, [r7, #24]
    3a56:	331e      	adds	r3, #30
    3a58:	62fb      	str	r3, [r7, #44]	; 0x2c
            xFutureModelTime = xTimestamp;  // init the future model time to the start of LET execution duration.
    3a5a:	f240 635c 	movw	r3, #1628	; 0x65c
    3a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3a64:	601a      	str	r2, [r3, #0]
            vPrintNumber(xMyFlag);
    3a66:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3a68:	f013 fd7a 	bl	17560 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
    3a6c:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3a70:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a74:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3a76:	460b      	mov	r3, r1
    3a78:	00db      	lsls	r3, r3, #3
    3a7a:	1a5b      	subs	r3, r3, r1
    3a7c:	00db      	lsls	r3, r3, #3
    3a7e:	4413      	add	r3, r2
    3a80:	3328      	adds	r3, #40	; 0x28
    3a82:	681b      	ldr	r3, [r3, #0]
    3a84:	f107 0224 	add.w	r2, r7, #36	; 0x24
    3a88:	4610      	mov	r0, r2
    3a8a:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );  // reuse event
    3a8c:	466b      	mov	r3, sp
    3a8e:	f107 0224 	add.w	r2, r7, #36	; 0x24
    3a92:	e892 0003 	ldmia.w	r2, {r0, r1}
    3a96:	e883 0003 	stmia.w	r3, {r0, r1}
    3a9a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3a9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3aa2:	f7ff fd83 	bl	35ac <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3aa6:	f7fe ff2f 	bl	2908 <xIsERLNull>
    3aaa:	63f8      	str	r0, [r7, #60]	; 0x3c
    3aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3aae:	f1b3 3fff 	cmp.w	r3, #4294967295
    3ab2:	d18c      	bne.n	39ce <vSensor+0x22>
        
            xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );  // reuse event
        }

        xSemaphoreGive( xBinarySemaphore[0] );
    3ab4:	f241 1324 	movw	r3, #4388	; 0x1124
    3ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3abc:	681b      	ldr	r3, [r3, #0]
    3abe:	4618      	mov	r0, r3
    3ac0:	2100      	movs	r1, #0
    3ac2:	2200      	movs	r2, #0
    3ac4:	2300      	movs	r3, #0
    3ac6:	f000 fcf7 	bl	44b8 <xQueueGenericSend>
    }
    3aca:	e773      	b.n	39b4 <vSensor+0x8>

00003acc <vServant>:
}

void vServant( void * pvParameter )
{
    3acc:	b580      	push	{r7, lr}
    3ace:	b092      	sub	sp, #72	; 0x48
    3ad0:	af02      	add	r7, sp, #8
    3ad2:	60f8      	str	r0, [r7, #12]
    struct eventData xMyData;
    struct tag xMyTag;
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );
    3ad4:	f241 1324 	movw	r3, #4388	; 0x1124
    3ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3adc:	689b      	ldr	r3, [r3, #8]
    3ade:	4618      	mov	r0, r3
    3ae0:	2100      	movs	r1, #0
    3ae2:	f04f 32ff 	mov.w	r2, #4294967295
    3ae6:	2300      	movs	r3, #0
    3ae8:	f000 fdac 	bl	4644 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3aec:	e089      	b.n	3c02 <vServant+0x136>
        {
            if(boolFlag == 0)
    3aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3af0:	2b00      	cmp	r3, #0
    3af2:	d100      	bne.n	3af6 <vServant+0x2a>
                continue;
    3af4:	e085      	b.n	3c02 <vServant+0x136>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    3af6:	f7ff fd3b 	bl	3570 <pxEventGenericReceive>
    3afa:	6378      	str	r0, [r7, #52]	; 0x34
            xMyFlag = xEventGetpxDestination( pxEvent );
    3afc:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3afe:	f7fe ff49 	bl	2994 <xEventGetpxDestination>
    3b02:	6338      	str	r0, [r7, #48]	; 0x30
            xMyData = xEventGetxData( pxEvent );
    3b04:	463b      	mov	r3, r7
    3b06:	4618      	mov	r0, r3
    3b08:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3b0a:	f7fe ff61 	bl	29d0 <xEventGetxData>
    3b0e:	f107 0320 	add.w	r3, r7, #32
    3b12:	463a      	mov	r2, r7
    3b14:	e892 0003 	ldmia.w	r2, {r0, r1}
    3b18:	e883 0003 	stmia.w	r3, {r0, r1}
            xMyTag = xEventGetxTag( pxEvent );
    3b1c:	f107 0310 	add.w	r3, r7, #16
    3b20:	4618      	mov	r0, r3
    3b22:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3b24:	f7fe ff42 	bl	29ac <xEventGetxTag>
            xPeriod= xContexts[xMyFlag].xPeriod;
    3b28:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3b2c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b30:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3b32:	460b      	mov	r3, r1
    3b34:	00db      	lsls	r3, r3, #3
    3b36:	1a5b      	subs	r3, r3, r1
    3b38:	00db      	lsls	r3, r3, #3
    3b3a:	4413      	add	r3, r2
    3b3c:	332c      	adds	r3, #44	; 0x2c
    3b3e:	681b      	ldr	r3, [r3, #0]
    3b40:	62fb      	str	r3, [r7, #44]	; 0x2c
            // set the timestamp of event in terms of destination servant
            // if destination is actuator, then set as the EndOfLET
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
    3b42:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3b46:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3b4c:	460b      	mov	r3, r1
    3b4e:	00db      	lsls	r3, r3, #3
    3b50:	1a5b      	subs	r3, r3, r1
    3b52:	00db      	lsls	r3, r3, #3
    3b54:	4413      	add	r3, r2
    3b56:	331c      	adds	r3, #28
    3b58:	681b      	ldr	r3, [r3, #0]
    3b5a:	62bb      	str	r3, [r7, #40]	; 0x28
            switch(xContexts[pxDestination].xType)
    3b5c:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3b60:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3b66:	460b      	mov	r3, r1
    3b68:	00db      	lsls	r3, r3, #3
    3b6a:	1a5b      	subs	r3, r3, r1
    3b6c:	00db      	lsls	r3, r3, #3
    3b6e:	4413      	add	r3, r2
    3b70:	3304      	adds	r3, #4
    3b72:	681b      	ldr	r3, [r3, #0]
    3b74:	2b02      	cmp	r3, #2
    3b76:	d002      	beq.n	3b7e <vServant+0xb2>
    3b78:	2b03      	cmp	r3, #3
    3b7a:	d010      	beq.n	3b9e <vServant+0xd2>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xPeriod * xContexts[xMyFlag].xCount - OUTPUT; 
                    break;
                default:
                    break;
    3b7c:	e021      	b.n	3bc2 <vServant+0xf6>
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
            switch(xContexts[pxDestination].xType)
            {
                case 2:
                    xTimestamp = xMyTag.xTimestamp + xContexts[xMyFlag].xLet;
    3b7e:	6978      	ldr	r0, [r7, #20]
    3b80:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3b84:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b88:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3b8a:	460b      	mov	r3, r1
    3b8c:	00db      	lsls	r3, r3, #3
    3b8e:	1a5b      	subs	r3, r3, r1
    3b90:	00db      	lsls	r3, r3, #3
    3b92:	4413      	add	r3, r2
    3b94:	3324      	adds	r3, #36	; 0x24
    3b96:	681b      	ldr	r3, [r3, #0]
    3b98:	4403      	add	r3, r0
    3b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
    3b9c:	e011      	b.n	3bc2 <vServant+0xf6>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xPeriod * xContexts[xMyFlag].xCount - OUTPUT; 
    3b9e:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3ba2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ba6:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3ba8:	460b      	mov	r3, r1
    3baa:	00db      	lsls	r3, r3, #3
    3bac:	1a5b      	subs	r3, r3, r1
    3bae:	00db      	lsls	r3, r3, #3
    3bb0:	4413      	add	r3, r2
    3bb2:	3308      	adds	r3, #8
    3bb4:	681b      	ldr	r3, [r3, #0]
    3bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3bb8:	fb02 f303 	mul.w	r3, r2, r3
    3bbc:	3b1e      	subs	r3, #30
    3bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
    3bc0:	bf00      	nop
                default:
                    break;
                    // wrong events type
            }
            vPrintNumber(xMyFlag);
    3bc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3bc4:	f013 fccc 	bl	17560 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
    3bc8:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3bcc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3bd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3bd2:	460b      	mov	r3, r1
    3bd4:	00db      	lsls	r3, r3, #3
    3bd6:	1a5b      	subs	r3, r3, r1
    3bd8:	00db      	lsls	r3, r3, #3
    3bda:	4413      	add	r3, r2
    3bdc:	3328      	adds	r3, #40	; 0x28
    3bde:	681b      	ldr	r3, [r3, #0]
    3be0:	f107 0220 	add.w	r2, r7, #32
    3be4:	4610      	mov	r0, r2
    3be6:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );
    3be8:	466b      	mov	r3, sp
    3bea:	f107 0220 	add.w	r2, r7, #32
    3bee:	e892 0003 	ldmia.w	r2, {r0, r1}
    3bf2:	e883 0003 	stmia.w	r3, {r0, r1}
    3bf6:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3bf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3bfe:	f7ff fcd5 	bl	35ac <vEventGenericUpdate>
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3c02:	f7fe fe81 	bl	2908 <xIsERLNull>
    3c06:	63b8      	str	r0, [r7, #56]	; 0x38
    3c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
    3c0e:	f47f af6e 	bne.w	3aee <vServant+0x22>
            vPrintNumber(xMyFlag);
        
            xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3c12:	f241 1324 	movw	r3, #4388	; 0x1124
    3c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c1a:	681b      	ldr	r3, [r3, #0]
    3c1c:	4618      	mov	r0, r3
    3c1e:	2100      	movs	r1, #0
    3c20:	2200      	movs	r2, #0
    3c22:	2300      	movs	r3, #0
    3c24:	f000 fc48 	bl	44b8 <xQueueGenericSend>
    }
    3c28:	e754      	b.n	3ad4 <vServant+0x8>
    3c2a:	bf00      	nop

00003c2c <vActuator>:
}

void vActuator( void * pvParameter )
{
    3c2c:	b580      	push	{r7, lr}
    3c2e:	b092      	sub	sp, #72	; 0x48
    3c30:	af02      	add	r7, sp, #8
    3c32:	60f8      	str	r0, [r7, #12]
    struct tag xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );
    3c34:	f241 1324 	movw	r3, #4388	; 0x1124
    3c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c3c:	68db      	ldr	r3, [r3, #12]
    3c3e:	4618      	mov	r0, r3
    3c40:	2100      	movs	r1, #0
    3c42:	f04f 32ff 	mov.w	r2, #4294967295
    3c46:	2300      	movs	r3, #0
    3c48:	f000 fcfc 	bl	4644 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3c4c:	e04c      	b.n	3ce8 <vActuator+0xbc>
        {
            if(boolFlag == 0)
    3c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3c50:	2b00      	cmp	r3, #0
    3c52:	d100      	bne.n	3c56 <vActuator+0x2a>
                continue;
    3c54:	e048      	b.n	3ce8 <vActuator+0xbc>

            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    3c56:	f7ff fc8b 	bl	3570 <pxEventGenericReceive>
    3c5a:	63b8      	str	r0, [r7, #56]	; 0x38
            xMyFlag = xEventGetpxDestination( pxEvent );
    3c5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3c5e:	f7fe fe99 	bl	2994 <xEventGetpxDestination>
    3c62:	6378      	str	r0, [r7, #52]	; 0x34
            xMyData = xEventGetxData( pxEvent );
    3c64:	463b      	mov	r3, r7
    3c66:	4618      	mov	r0, r3
    3c68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    3c6a:	f7fe feb1 	bl	29d0 <xEventGetxData>
    3c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
    3c72:	463a      	mov	r2, r7
    3c74:	e892 0003 	ldmia.w	r2, {r0, r1}
    3c78:	e883 0003 	stmia.w	r3, {r0, r1}
            xMyTag = xEventGetxTag( pxEvent );
    3c7c:	f107 0314 	add.w	r3, r7, #20
    3c80:	4618      	mov	r0, r3
    3c82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    3c84:	f7fe fe92 	bl	29ac <xEventGetxTag>
            xPeriod = xContexts[xMyFlag].xPeriod;
    3c88:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3c8c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3c90:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3c92:	460b      	mov	r3, r1
    3c94:	00db      	lsls	r3, r3, #3
    3c96:	1a5b      	subs	r3, r3, r1
    3c98:	00db      	lsls	r3, r3, #3
    3c9a:	4413      	add	r3, r2
    3c9c:	332c      	adds	r3, #44	; 0x2c
    3c9e:	681b      	ldr	r3, [r3, #0]
    3ca0:	633b      	str	r3, [r7, #48]	; 0x30
            xTimestamp = xMyTag.xTimestamp + OUTPUT;  // all sensor are scheduled to execute start from 0 to 4 ms of every period
    3ca2:	69bb      	ldr	r3, [r7, #24]
    3ca4:	331e      	adds	r3, #30
    3ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
            vPrintNumber(xMyFlag);
    3ca8:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3caa:	f013 fc59 	bl	17560 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
    3cae:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3cb2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3cb6:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3cb8:	460b      	mov	r3, r1
    3cba:	00db      	lsls	r3, r3, #3
    3cbc:	1a5b      	subs	r3, r3, r1
    3cbe:	00db      	lsls	r3, r3, #3
    3cc0:	4413      	add	r3, r2
    3cc2:	3328      	adds	r3, #40	; 0x28
    3cc4:	681b      	ldr	r3, [r3, #0]
    3cc6:	f107 0224 	add.w	r2, r7, #36	; 0x24
    3cca:	4610      	mov	r0, r2
    3ccc:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData ); // update the information of output event 
    3cce:	466b      	mov	r3, sp
    3cd0:	f107 0224 	add.w	r2, r7, #36	; 0x24
    3cd4:	e892 0003 	ldmia.w	r2, {r0, r1}
    3cd8:	e883 0003 	stmia.w	r3, {r0, r1}
    3cdc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3cde:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3ce4:	f7ff fc62 	bl	35ac <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3ce8:	f7fe fe0e 	bl	2908 <xIsERLNull>
    3cec:	63f8      	str	r0, [r7, #60]	; 0x3c
    3cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
    3cf4:	d1ab      	bne.n	3c4e <vActuator+0x22>
        
            xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData ); // update the information of output event 
        }

        xSemaphoreGive( xBinarySemaphore[0] );
    3cf6:	f241 1324 	movw	r3, #4388	; 0x1124
    3cfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cfe:	681b      	ldr	r3, [r3, #0]
    3d00:	4618      	mov	r0, r3
    3d02:	2100      	movs	r1, #0
    3d04:	2200      	movs	r2, #0
    3d06:	2300      	movs	r3, #0
    3d08:	f000 fbd6 	bl	44b8 <xQueueGenericSend>
    }
    3d0c:	e792      	b.n	3c34 <vActuator+0x8>
    3d0e:	bf00      	nop

00003d10 <vR_Servant>:
}


void vR_Servant( void * pvParameter)
{
    3d10:	b580      	push	{r7, lr}
    3d12:	b084      	sub	sp, #16
    3d14:	af00      	add	r7, sp, #0
    3d16:	6078      	str	r0, [r7, #4]
    portBASE_TYPE pxDestination;
    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[0], portMAX_DELAY );
    3d18:	f241 1324 	movw	r3, #4388	; 0x1124
    3d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d20:	681b      	ldr	r3, [r3, #0]
    3d22:	4618      	mov	r0, r3
    3d24:	2100      	movs	r1, #0
    3d26:	f04f 32ff 	mov.w	r2, #4294967295
    3d2a:	2300      	movs	r3, #0
    3d2c:	f000 fc8a 	bl	4644 <xQueueGenericReceive>

        vPrintString("R_Servant\n\r");
    3d30:	f648 10b8 	movw	r0, #35256	; 0x89b8
    3d34:	f2c0 0001 	movt	r0, #1
    3d38:	f013 fbf8 	bl	1752c <vPrintString>
        
        // transit the events from events pool to nonexecutable event list
        // Copy one event to multiple when communication mode is 1 to N
        vEventMap();
    3d3c:	f7ff f914 	bl	2f68 <vEventGenericMap>

        // transit the events from nonexecutable event list to executable event list
        vEventListTransit();
    3d40:	f7ff f8c2 	bl	2ec8 <vEventListGenericTransit>
 
        // reduce multiple event for destination to one when communication mode is N to 1,
        // and transit the event from executable event pool to executable event list
        vEventReduce(); 
    3d44:	f7ff f984 	bl	3050 <vEventGenericReduce>

        // serialize the timestamp of simulataneous events,
        // and transit the ready events to ready list
        // return the pxDestination of the first ready event in ready list
        pxDestination = xEventSerialize(); 
    3d48:	f7ff fb82 	bl	3450 <xEventGenericSerialize>
    3d4c:	60f8      	str	r0, [r7, #12]

        switch(xContexts[pxDestination].xType)
    3d4e:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3d52:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3d56:	68f9      	ldr	r1, [r7, #12]
    3d58:	460b      	mov	r3, r1
    3d5a:	00db      	lsls	r3, r3, #3
    3d5c:	1a5b      	subs	r3, r3, r1
    3d5e:	00db      	lsls	r3, r3, #3
    3d60:	4413      	add	r3, r2
    3d62:	3304      	adds	r3, #4
    3d64:	681b      	ldr	r3, [r3, #0]
    3d66:	2b02      	cmp	r3, #2
    3d68:	d010      	beq.n	3d8c <vR_Servant+0x7c>
    3d6a:	2b03      	cmp	r3, #3
    3d6c:	d01a      	beq.n	3da4 <vR_Servant+0x94>
    3d6e:	2b01      	cmp	r3, #1
    3d70:	d000      	beq.n	3d74 <vR_Servant+0x64>
                break;
            case 3:
                xSemaphoreGive( xBinarySemaphore[3] );
                break;
            default:
                break;
    3d72:	e023      	b.n	3dbc <vR_Servant+0xac>
        pxDestination = xEventSerialize(); 

        switch(xContexts[pxDestination].xType)
        {
            case 1:
                xSemaphoreGive( xBinarySemaphore[1] );
    3d74:	f241 1324 	movw	r3, #4388	; 0x1124
    3d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d7c:	685b      	ldr	r3, [r3, #4]
    3d7e:	4618      	mov	r0, r3
    3d80:	2100      	movs	r1, #0
    3d82:	2200      	movs	r2, #0
    3d84:	2300      	movs	r3, #0
    3d86:	f000 fb97 	bl	44b8 <xQueueGenericSend>
                break;
    3d8a:	e017      	b.n	3dbc <vR_Servant+0xac>
            case 2:
                xSemaphoreGive( xBinarySemaphore[2] );
    3d8c:	f241 1324 	movw	r3, #4388	; 0x1124
    3d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d94:	689b      	ldr	r3, [r3, #8]
    3d96:	4618      	mov	r0, r3
    3d98:	2100      	movs	r1, #0
    3d9a:	2200      	movs	r2, #0
    3d9c:	2300      	movs	r3, #0
    3d9e:	f000 fb8b 	bl	44b8 <xQueueGenericSend>
                break;
    3da2:	e00b      	b.n	3dbc <vR_Servant+0xac>
            case 3:
                xSemaphoreGive( xBinarySemaphore[3] );
    3da4:	f241 1324 	movw	r3, #4388	; 0x1124
    3da8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dac:	68db      	ldr	r3, [r3, #12]
    3dae:	4618      	mov	r0, r3
    3db0:	2100      	movs	r1, #0
    3db2:	2200      	movs	r2, #0
    3db4:	2300      	movs	r3, #0
    3db6:	f000 fb7f 	bl	44b8 <xQueueGenericSend>
                break;
    3dba:	bf00      	nop
            default:
                break;
                // no event available 
        }
    }
    3dbc:	e7ac      	b.n	3d18 <vR_Servant+0x8>
    3dbe:	bf00      	nop

00003dc0 <s_0>:
#define SUNNYBEIKE 1
#ifdef SUNNYBEIKE

/*task0*/
void s_0(struct eventData * pxDataArray) 
{
    3dc0:	b480      	push	{r7}
    3dc2:	b083      	sub	sp, #12
    3dc4:	af00      	add	r7, sp, #0
    3dc6:	6078      	str	r0, [r7, #4]
    // do actuator
    // do sensor
}
    3dc8:	370c      	adds	r7, #12
    3dca:	46bd      	mov	sp, r7
    3dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dd0:	4770      	bx	lr
    3dd2:	bf00      	nop

00003dd4 <s_1>:
void s_1(struct eventData * pxDataArray) 
{
    3dd4:	b580      	push	{r7, lr}
    3dd6:	b082      	sub	sp, #8
    3dd8:	af00      	add	r7, sp, #0
    3dda:	6078      	str	r0, [r7, #4]
    last_radio_from_ppm(); // ppm.h
    3ddc:	f012 f9e4 	bl	161a8 <last_radio_from_ppm>
}
    3de0:	3708      	adds	r7, #8
    3de2:	46bd      	mov	sp, r7
    3de4:	bd80      	pop	{r7, pc}
    3de6:	bf00      	nop

00003de8 <s_2>:
void s_2(struct eventData * pxDataArray) 
{
    3de8:	b480      	push	{r7}
    3dea:	b083      	sub	sp, #12
    3dec:	af00      	add	r7, sp, #0
    3dee:	6078      	str	r0, [r7, #4]
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    3df0:	370c      	adds	r7, #12
    3df2:	46bd      	mov	sp, r7
    3df4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3df8:	4770      	bx	lr
    3dfa:	bf00      	nop

00003dfc <s_3>:
void s_3(struct eventData * pxDataArray) 
{
    3dfc:	b480      	push	{r7}
    3dfe:	b083      	sub	sp, #12
    3e00:	af00      	add	r7, sp, #0
    3e02:	6078      	str	r0, [r7, #4]
}
    3e04:	370c      	adds	r7, #12
    3e06:	46bd      	mov	sp, r7
    3e08:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e0c:	4770      	bx	lr
    3e0e:	bf00      	nop

00003e10 <s_4>:

/*task1*/
void s_4(struct eventData * pxDataArray) 
{
    3e10:	b480      	push	{r7}
    3e12:	b083      	sub	sp, #12
    3e14:	af00      	add	r7, sp, #0
    3e16:	6078      	str	r0, [r7, #4]
}
    3e18:	370c      	adds	r7, #12
    3e1a:	46bd      	mov	sp, r7
    3e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e20:	4770      	bx	lr
    3e22:	bf00      	nop

00003e24 <s_5>:
void s_5(struct eventData * pxDataArray) 
{
    3e24:	b580      	push	{r7, lr}
    3e26:	b082      	sub	sp, #8
    3e28:	af00      	add	r7, sp, #0
    3e2a:	6078      	str	r0, [r7, #4]
    to_autopilot_from_last_radio(); // main.c
    3e2c:	f012 fd76 	bl	1691c <to_autopilot_from_last_radio>
}
    3e30:	3708      	adds	r7, #8
    3e32:	46bd      	mov	sp, r7
    3e34:	bd80      	pop	{r7, pc}
    3e36:	bf00      	nop

00003e38 <s_6>:
void s_6(struct eventData * pxDataArray) 
{
    3e38:	b580      	push	{r7, lr}
    3e3a:	b082      	sub	sp, #8
    3e3c:	af00      	add	r7, sp, #0
    3e3e:	6078      	str	r0, [r7, #4]
    spi_reset(); // spi_fbw.h
    3e40:	f012 fcaa 	bl	16798 <spi_reset>
}
    3e44:	3708      	adds	r7, #8
    3e46:	46bd      	mov	sp, r7
    3e48:	bd80      	pop	{r7, pc}
    3e4a:	bf00      	nop

00003e4c <s_7>:
void s_7(struct eventData * pxDataArray) 
{
    3e4c:	b480      	push	{r7}
    3e4e:	b083      	sub	sp, #12
    3e50:	af00      	add	r7, sp, #0
    3e52:	6078      	str	r0, [r7, #4]
}
    3e54:	370c      	adds	r7, #12
    3e56:	46bd      	mov	sp, r7
    3e58:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e5c:	4770      	bx	lr
    3e5e:	bf00      	nop

00003e60 <s_8>:

/*task 2*/ 
void s_8(struct eventData * pxDataArray) 
{
    3e60:	b480      	push	{r7}
    3e62:	b083      	sub	sp, #12
    3e64:	af00      	add	r7, sp, #0
    3e66:	6078      	str	r0, [r7, #4]
}
    3e68:	370c      	adds	r7, #12
    3e6a:	46bd      	mov	sp, r7
    3e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e70:	4770      	bx	lr
    3e72:	bf00      	nop

00003e74 <s_9>:
void s_9(struct eventData * pxDataArray) 
{
    3e74:	b580      	push	{r7, lr}
    3e76:	b082      	sub	sp, #8
    3e78:	af00      	add	r7, sp, #0
    3e7a:	6078      	str	r0, [r7, #4]
    check_mega128_values_task(); // main.c
    3e7c:	f012 fe96 	bl	16bac <check_mega128_values_task>
}
    3e80:	3708      	adds	r7, #8
    3e82:	46bd      	mov	sp, r7
    3e84:	bd80      	pop	{r7, pc}
    3e86:	bf00      	nop

00003e88 <s_10>:
void s_10(struct eventData * pxDataArray) 
{
    3e88:	b480      	push	{r7}
    3e8a:	b083      	sub	sp, #12
    3e8c:	af00      	add	r7, sp, #0
    3e8e:	6078      	str	r0, [r7, #4]
}
    3e90:	370c      	adds	r7, #12
    3e92:	46bd      	mov	sp, r7
    3e94:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e98:	4770      	bx	lr
    3e9a:	bf00      	nop

00003e9c <s_11>:

/*task 3, servant 8, 9*/ 
void s_11(struct eventData * pxDataArray) 
{
    3e9c:	b480      	push	{r7}
    3e9e:	b083      	sub	sp, #12
    3ea0:	af00      	add	r7, sp, #0
    3ea2:	6078      	str	r0, [r7, #4]
}
    3ea4:	370c      	adds	r7, #12
    3ea6:	46bd      	mov	sp, r7
    3ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3eac:	4770      	bx	lr
    3eae:	bf00      	nop

00003eb0 <s_12>:
void s_12(struct eventData * pxDataArray) 
{
    3eb0:	b580      	push	{r7, lr}
    3eb2:	b082      	sub	sp, #8
    3eb4:	af00      	add	r7, sp, #0
    3eb6:	6078      	str	r0, [r7, #4]
    servo_transmit(); //servo.h
    3eb8:	f012 ff50 	bl	16d5c <servo_transmit>
}
    3ebc:	3708      	adds	r7, #8
    3ebe:	46bd      	mov	sp, r7
    3ec0:	bd80      	pop	{r7, pc}
    3ec2:	bf00      	nop

00003ec4 <s_13>:
void s_13(struct eventData * pxDataArray) 
{
    3ec4:	b480      	push	{r7}
    3ec6:	b083      	sub	sp, #12
    3ec8:	af00      	add	r7, sp, #0
    3eca:	6078      	str	r0, [r7, #4]
}
    3ecc:	370c      	adds	r7, #12
    3ece:	46bd      	mov	sp, r7
    3ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ed4:	4770      	bx	lr
    3ed6:	bf00      	nop

00003ed8 <s_14>:

/*task 4, servant 10, 11*/
void s_14(struct eventData * pxDataArray) 
{
    3ed8:	b480      	push	{r7}
    3eda:	b083      	sub	sp, #12
    3edc:	af00      	add	r7, sp, #0
    3ede:	6078      	str	r0, [r7, #4]
}
    3ee0:	370c      	adds	r7, #12
    3ee2:	46bd      	mov	sp, r7
    3ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ee8:	4770      	bx	lr
    3eea:	bf00      	nop

00003eec <s_15>:
void s_15(struct eventData * pxDataArray) 
{
    3eec:	b580      	push	{r7, lr}
    3eee:	b082      	sub	sp, #8
    3ef0:	af00      	add	r7, sp, #0
    3ef2:	6078      	str	r0, [r7, #4]
    check_failsafe_task(); // main.c
    3ef4:	f012 fe50 	bl	16b98 <check_failsafe_task>
}
    3ef8:	3708      	adds	r7, #8
    3efa:	46bd      	mov	sp, r7
    3efc:	bd80      	pop	{r7, pc}
    3efe:	bf00      	nop

00003f00 <s_16>:
void s_16(struct eventData * pxDataArray) 
{
    3f00:	b480      	push	{r7}
    3f02:	b083      	sub	sp, #12
    3f04:	af00      	add	r7, sp, #0
    3f06:	6078      	str	r0, [r7, #4]
}
    3f08:	370c      	adds	r7, #12
    3f0a:	46bd      	mov	sp, r7
    3f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f10:	4770      	bx	lr
    3f12:	bf00      	nop

00003f14 <s_17>:

/*task 5, servant 12, 13, 14*/
void s_17(struct eventData * pxDataArray) 
{
    3f14:	b480      	push	{r7}
    3f16:	b083      	sub	sp, #12
    3f18:	af00      	add	r7, sp, #0
    3f1a:	6078      	str	r0, [r7, #4]
}
    3f1c:	370c      	adds	r7, #12
    3f1e:	46bd      	mov	sp, r7
    3f20:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f24:	4770      	bx	lr
    3f26:	bf00      	nop

00003f28 <s_18>:
void s_18(struct eventData * pxDataArray) 
{
    3f28:	b580      	push	{r7, lr}
    3f2a:	b082      	sub	sp, #8
    3f2c:	af00      	add	r7, sp, #0
    3f2e:	6078      	str	r0, [r7, #4]
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    3f30:	f009 f8cc 	bl	d0cc <radio_control_task>
}
    3f34:	3708      	adds	r7, #8
    3f36:	46bd      	mov	sp, r7
    3f38:	bd80      	pop	{r7, pc}
    3f3a:	bf00      	nop

00003f3c <s_19>:
void s_19(struct eventData * pxDataArray) 
{
    3f3c:	b580      	push	{r7, lr}
    3f3e:	b082      	sub	sp, #8
    3f40:	af00      	add	r7, sp, #0
    3f42:	6078      	str	r0, [r7, #4]
    ir_gain_calib(); //infrared.h
    3f44:	f00d ff74 	bl	11e30 <ir_gain_calib>
}
    3f48:	3708      	adds	r7, #8
    3f4a:	46bd      	mov	sp, r7
    3f4c:	bd80      	pop	{r7, pc}
    3f4e:	bf00      	nop

00003f50 <s_20>:
void s_20(struct eventData * pxDataArray) 
{
    3f50:	b480      	push	{r7}
    3f52:	b083      	sub	sp, #12
    3f54:	af00      	add	r7, sp, #0
    3f56:	6078      	str	r0, [r7, #4]
}
    3f58:	370c      	adds	r7, #12
    3f5a:	46bd      	mov	sp, r7
    3f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f60:	4770      	bx	lr
    3f62:	bf00      	nop

00003f64 <s_21>:

/*task 6, servant 15,16,17,18*/ 
void s_21(struct eventData * pxDataArray) 
{
    3f64:	b480      	push	{r7}
    3f66:	b083      	sub	sp, #12
    3f68:	af00      	add	r7, sp, #0
    3f6a:	6078      	str	r0, [r7, #4]
}
    3f6c:	370c      	adds	r7, #12
    3f6e:	46bd      	mov	sp, r7
    3f70:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f74:	4770      	bx	lr
    3f76:	bf00      	nop

00003f78 <s_22>:
void s_22(struct eventData * pxDataArray) 
{
    3f78:	b580      	push	{r7, lr}
    3f7a:	b082      	sub	sp, #8
    3f7c:	af00      	add	r7, sp, #0
    3f7e:	6078      	str	r0, [r7, #4]
    ir_update(); // infrared.h
    3f80:	f00d ff18 	bl	11db4 <ir_update>
}
    3f84:	3708      	adds	r7, #8
    3f86:	46bd      	mov	sp, r7
    3f88:	bd80      	pop	{r7, pc}
    3f8a:	bf00      	nop

00003f8c <s_23>:
void s_23(struct eventData * pxDataArray) 
{
    3f8c:	b580      	push	{r7, lr}
    3f8e:	b082      	sub	sp, #8
    3f90:	af00      	add	r7, sp, #0
    3f92:	6078      	str	r0, [r7, #4]
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3f94:	f011 f996 	bl	152c4 <estimator_update_state_infrared>
}
    3f98:	3708      	adds	r7, #8
    3f9a:	46bd      	mov	sp, r7
    3f9c:	bd80      	pop	{r7, pc}
    3f9e:	bf00      	nop

00003fa0 <s_24>:
void s_24(struct eventData * pxDataArray) 
{
    3fa0:	b580      	push	{r7, lr}
    3fa2:	b082      	sub	sp, #8
    3fa4:	af00      	add	r7, sp, #0
    3fa6:	6078      	str	r0, [r7, #4]
    roll_pitch_pid_run(); // pid.h
    3fa8:	f00d ff72 	bl	11e90 <roll_pitch_pid_run>
}
    3fac:	3708      	adds	r7, #8
    3fae:	46bd      	mov	sp, r7
    3fb0:	bd80      	pop	{r7, pc}
    3fb2:	bf00      	nop

00003fb4 <s_25>:
void s_25(struct eventData * pxDataArray) 
{
    3fb4:	b480      	push	{r7}
    3fb6:	b083      	sub	sp, #12
    3fb8:	af00      	add	r7, sp, #0
    3fba:	6078      	str	r0, [r7, #4]
}
    3fbc:	370c      	adds	r7, #12
    3fbe:	46bd      	mov	sp, r7
    3fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fc4:	4770      	bx	lr
    3fc6:	bf00      	nop

00003fc8 <s_26>:

/*task 7, servant 19, 20*/
void s_26(struct eventData * pxDataArray) 
{
    3fc8:	b480      	push	{r7}
    3fca:	b083      	sub	sp, #12
    3fcc:	af00      	add	r7, sp, #0
    3fce:	6078      	str	r0, [r7, #4]
}
    3fd0:	370c      	adds	r7, #12
    3fd2:	46bd      	mov	sp, r7
    3fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fd8:	4770      	bx	lr
    3fda:	bf00      	nop

00003fdc <s_27>:
void s_27(struct eventData * pxDataArray) 
{
    3fdc:	b580      	push	{r7, lr}
    3fde:	b082      	sub	sp, #8
    3fe0:	af00      	add	r7, sp, #0
    3fe2:	6078      	str	r0, [r7, #4]
    link_fbw_send(); //link_fbw.h
    3fe4:	f00d f958 	bl	11298 <link_fbw_send>
}
    3fe8:	3708      	adds	r7, #8
    3fea:	46bd      	mov	sp, r7
    3fec:	bd80      	pop	{r7, pc}
    3fee:	bf00      	nop

00003ff0 <s_28>:
void s_28(struct eventData * pxDataArray) 
{}
    3ff0:	b480      	push	{r7}
    3ff2:	b083      	sub	sp, #12
    3ff4:	af00      	add	r7, sp, #0
    3ff6:	6078      	str	r0, [r7, #4]
    3ff8:	370c      	adds	r7, #12
    3ffa:	46bd      	mov	sp, r7
    3ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4000:	4770      	bx	lr
    4002:	bf00      	nop

00004004 <s_29>:

/*task 8, sevrvant 21,22,23*/
void s_29(struct eventData * pxDataArray) 
{
    4004:	b480      	push	{r7}
    4006:	b083      	sub	sp, #12
    4008:	af00      	add	r7, sp, #0
    400a:	6078      	str	r0, [r7, #4]
}
    400c:	370c      	adds	r7, #12
    400e:	46bd      	mov	sp, r7
    4010:	f85d 7b04 	ldr.w	r7, [sp], #4
    4014:	4770      	bx	lr
    4016:	bf00      	nop

00004018 <s_30>:
void s_30(struct eventData * pxDataArray) 
{
    4018:	b580      	push	{r7, lr}
    401a:	b082      	sub	sp, #8
    401c:	af00      	add	r7, sp, #0
    401e:	6078      	str	r0, [r7, #4]
    parse_gps_msg(); //gps.h
    4020:	f00d fc12 	bl	11848 <parse_gps_msg>
}
    4024:	3708      	adds	r7, #8
    4026:	46bd      	mov	sp, r7
    4028:	bd80      	pop	{r7, pc}
    402a:	bf00      	nop

0000402c <s_31>:
void s_31(struct eventData * pxDataArray) 
{
    402c:	b580      	push	{r7, lr}
    402e:	b082      	sub	sp, #8
    4030:	af00      	add	r7, sp, #0
    4032:	6078      	str	r0, [r7, #4]
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    4034:	f00a fe30 	bl	ec98 <send_gps_pos>
    send_radIR();
    4038:	f00b fff4 	bl	10024 <send_radIR>
    send_takeOff();
    403c:	f00c fdec 	bl	10c18 <send_takeOff>
}
    4040:	3708      	adds	r7, #8
    4042:	46bd      	mov	sp, r7
    4044:	bd80      	pop	{r7, pc}
    4046:	bf00      	nop

00004048 <s_32>:
void s_32(struct eventData * pxDataArray) 
{}
    4048:	b480      	push	{r7}
    404a:	b083      	sub	sp, #12
    404c:	af00      	add	r7, sp, #0
    404e:	6078      	str	r0, [r7, #4]
    4050:	370c      	adds	r7, #12
    4052:	46bd      	mov	sp, r7
    4054:	f85d 7b04 	ldr.w	r7, [sp], #4
    4058:	4770      	bx	lr
    405a:	bf00      	nop

0000405c <s_33>:

/*task 9, servant 24, 25, 26, 27*/
void s_33(struct eventData * pxDataArray) 
{
    405c:	b480      	push	{r7}
    405e:	b083      	sub	sp, #12
    4060:	af00      	add	r7, sp, #0
    4062:	6078      	str	r0, [r7, #4]
}
    4064:	370c      	adds	r7, #12
    4066:	46bd      	mov	sp, r7
    4068:	f85d 7b04 	ldr.w	r7, [sp], #4
    406c:	4770      	bx	lr
    406e:	bf00      	nop

00004070 <s_34>:
void s_34(struct eventData * pxDataArray) 
{
    4070:	b580      	push	{r7, lr}
    4072:	b082      	sub	sp, #8
    4074:	af00      	add	r7, sp, #0
    4076:	6078      	str	r0, [r7, #4]
    nav_home(); // nav.h
    4078:	f010 fea6 	bl	14dc8 <nav_home>
}
    407c:	3708      	adds	r7, #8
    407e:	46bd      	mov	sp, r7
    4080:	bd80      	pop	{r7, pc}
    4082:	bf00      	nop

00004084 <s_35>:
void s_35(struct eventData * pxDataArray) 
{
    4084:	b580      	push	{r7, lr}
    4086:	b082      	sub	sp, #8
    4088:	af00      	add	r7, sp, #0
    408a:	6078      	str	r0, [r7, #4]
    nav_update(); // nav.h
    408c:	f010 fec2 	bl	14e14 <nav_update>
}
    4090:	3708      	adds	r7, #8
    4092:	46bd      	mov	sp, r7
    4094:	bd80      	pop	{r7, pc}
    4096:	bf00      	nop

00004098 <s_36>:
void s_36(struct eventData * pxDataArray) 
{
    4098:	b580      	push	{r7, lr}
    409a:	b082      	sub	sp, #8
    409c:	af00      	add	r7, sp, #0
    409e:	6078      	str	r0, [r7, #4]
    course_pid_run(); // pid.h
    40a0:	f00d ffe2 	bl	12068 <course_pid_run>
}
    40a4:	3708      	adds	r7, #8
    40a6:	46bd      	mov	sp, r7
    40a8:	bd80      	pop	{r7, pc}
    40aa:	bf00      	nop

000040ac <s_37>:
void s_37(struct eventData * pxDataArray) 
{}
    40ac:	b480      	push	{r7}
    40ae:	b083      	sub	sp, #12
    40b0:	af00      	add	r7, sp, #0
    40b2:	6078      	str	r0, [r7, #4]
    40b4:	370c      	adds	r7, #12
    40b6:	46bd      	mov	sp, r7
    40b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    40bc:	4770      	bx	lr
    40be:	bf00      	nop

000040c0 <s_38>:

/*task 10, servant 28, 29*/
void s_38(struct eventData * pxDataArray) 
{
    40c0:	b480      	push	{r7}
    40c2:	b083      	sub	sp, #12
    40c4:	af00      	add	r7, sp, #0
    40c6:	6078      	str	r0, [r7, #4]
}
    40c8:	370c      	adds	r7, #12
    40ca:	46bd      	mov	sp, r7
    40cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    40d0:	4770      	bx	lr
    40d2:	bf00      	nop

000040d4 <s_39>:
void s_39(struct eventData * pxDataArray) 
{
    40d4:	b580      	push	{r7, lr}
    40d6:	b082      	sub	sp, #8
    40d8:	af00      	add	r7, sp, #0
    40da:	6078      	str	r0, [r7, #4]
    altitude_pid_run(); // pid.h
    40dc:	f00e fa4c 	bl	12578 <altitude_pid_run>
}
    40e0:	3708      	adds	r7, #8
    40e2:	46bd      	mov	sp, r7
    40e4:	bd80      	pop	{r7, pc}
    40e6:	bf00      	nop

000040e8 <s_40>:
void s_40(struct eventData * pxDataArray) 
{}
    40e8:	b480      	push	{r7}
    40ea:	b083      	sub	sp, #12
    40ec:	af00      	add	r7, sp, #0
    40ee:	6078      	str	r0, [r7, #4]
    40f0:	370c      	adds	r7, #12
    40f2:	46bd      	mov	sp, r7
    40f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    40f8:	4770      	bx	lr
    40fa:	bf00      	nop

000040fc <s_41>:

/*task 11, servant 30, 31*/
void s_41(struct eventData * pxDataArray) 
{
    40fc:	b480      	push	{r7}
    40fe:	b083      	sub	sp, #12
    4100:	af00      	add	r7, sp, #0
    4102:	6078      	str	r0, [r7, #4]
}
    4104:	370c      	adds	r7, #12
    4106:	46bd      	mov	sp, r7
    4108:	f85d 7b04 	ldr.w	r7, [sp], #4
    410c:	4770      	bx	lr
    410e:	bf00      	nop

00004110 <s_42>:
void s_42(struct eventData * pxDataArray) 
{
    4110:	b580      	push	{r7, lr}
    4112:	b082      	sub	sp, #8
    4114:	af00      	add	r7, sp, #0
    4116:	6078      	str	r0, [r7, #4]
    climb_pid_run(); // pid.h
    4118:	f00e f85e 	bl	121d8 <climb_pid_run>
}
    411c:	3708      	adds	r7, #8
    411e:	46bd      	mov	sp, r7
    4120:	bd80      	pop	{r7, pc}
    4122:	bf00      	nop

00004124 <s_43>:
void s_43(struct eventData * pxDataArray) 
{}
    4124:	b480      	push	{r7}
    4126:	b083      	sub	sp, #12
    4128:	af00      	add	r7, sp, #0
    412a:	6078      	str	r0, [r7, #4]
    412c:	370c      	adds	r7, #12
    412e:	46bd      	mov	sp, r7
    4130:	f85d 7b04 	ldr.w	r7, [sp], #4
    4134:	4770      	bx	lr
    4136:	bf00      	nop

00004138 <s_44>:

/*task 12, servant 32, 33*/
void s_44(struct eventData * pxDataArray) 
{
    4138:	b480      	push	{r7}
    413a:	b083      	sub	sp, #12
    413c:	af00      	add	r7, sp, #0
    413e:	6078      	str	r0, [r7, #4]
}
    4140:	370c      	adds	r7, #12
    4142:	46bd      	mov	sp, r7
    4144:	f85d 7b04 	ldr.w	r7, [sp], #4
    4148:	4770      	bx	lr
    414a:	bf00      	nop

0000414c <s_45>:
void s_45(struct eventData * pxDataArray) 
{
    414c:	b580      	push	{r7, lr}
    414e:	b082      	sub	sp, #8
    4150:	af00      	add	r7, sp, #0
    4152:	6078      	str	r0, [r7, #4]
    // main.c
    send_boot();
    4154:	f003 fa82 	bl	765c <send_boot>
    send_attitude();
    4158:	f004 fa50 	bl	85fc <send_attitude>
    send_adc();
    415c:	f004 ff42 	bl	8fe4 <send_adc>
    send_settings();
    4160:	f005 f9c8 	bl	94f4 <send_settings>
    send_desired();
    4164:	f005 fdca 	bl	9cfc <send_desired>
    send_bat();
    4168:	f006 fcf8 	bl	ab5c <send_bat>
    send_climb();
    416c:	f007 f8ac 	bl	b2c8 <send_climb>
    send_mode();
    4170:	f007 fe1c 	bl	bdac <send_mode>
    send_debug();
    4174:	f008 f8ee 	bl	c354 <send_debug>
    send_nav_ref();
    4178:	f008 fbc2 	bl	c900 <send_nav_ref>
}
    417c:	3708      	adds	r7, #8
    417e:	46bd      	mov	sp, r7
    4180:	bd80      	pop	{r7, pc}
    4182:	bf00      	nop

00004184 <s_46>:
void s_46(struct eventData * pxDataArray) 
{}
    4184:	b480      	push	{r7}
    4186:	b083      	sub	sp, #12
    4188:	af00      	add	r7, sp, #0
    418a:	6078      	str	r0, [r7, #4]
    418c:	370c      	adds	r7, #12
    418e:	46bd      	mov	sp, r7
    4190:	f85d 7b04 	ldr.w	r7, [sp], #4
    4194:	4770      	bx	lr
    4196:	bf00      	nop

00004198 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    4198:	b480      	push	{r7}
    419a:	b083      	sub	sp, #12
    419c:	af00      	add	r7, sp, #0
    419e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    41a0:	687b      	ldr	r3, [r7, #4]
    41a2:	f103 0208 	add.w	r2, r3, #8
    41a6:	687b      	ldr	r3, [r7, #4]
    41a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    41aa:	687b      	ldr	r3, [r7, #4]
    41ac:	f04f 32ff 	mov.w	r2, #4294967295
    41b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    41b2:	687b      	ldr	r3, [r7, #4]
    41b4:	f103 0208 	add.w	r2, r3, #8
    41b8:	687b      	ldr	r3, [r7, #4]
    41ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    41bc:	687b      	ldr	r3, [r7, #4]
    41be:	f103 0208 	add.w	r2, r3, #8
    41c2:	687b      	ldr	r3, [r7, #4]
    41c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    41c6:	687b      	ldr	r3, [r7, #4]
    41c8:	2200      	movs	r2, #0
    41ca:	601a      	str	r2, [r3, #0]
}
    41cc:	370c      	adds	r7, #12
    41ce:	46bd      	mov	sp, r7
    41d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    41d4:	4770      	bx	lr
    41d6:	bf00      	nop

000041d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    41d8:	b480      	push	{r7}
    41da:	b083      	sub	sp, #12
    41dc:	af00      	add	r7, sp, #0
    41de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    41e0:	687b      	ldr	r3, [r7, #4]
    41e2:	2200      	movs	r2, #0
    41e4:	611a      	str	r2, [r3, #16]
}
    41e6:	370c      	adds	r7, #12
    41e8:	46bd      	mov	sp, r7
    41ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    41ee:	4770      	bx	lr

000041f0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    41f0:	b480      	push	{r7}
    41f2:	b085      	sub	sp, #20
    41f4:	af00      	add	r7, sp, #0
    41f6:	6078      	str	r0, [r7, #4]
    41f8:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    41fa:	687b      	ldr	r3, [r7, #4]
    41fc:	685b      	ldr	r3, [r3, #4]
    41fe:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    4200:	68fb      	ldr	r3, [r7, #12]
    4202:	685a      	ldr	r2, [r3, #4]
    4204:	683b      	ldr	r3, [r7, #0]
    4206:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    4208:	687b      	ldr	r3, [r7, #4]
    420a:	685a      	ldr	r2, [r3, #4]
    420c:	683b      	ldr	r3, [r7, #0]
    420e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    4210:	68fb      	ldr	r3, [r7, #12]
    4212:	685b      	ldr	r3, [r3, #4]
    4214:	683a      	ldr	r2, [r7, #0]
    4216:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    4218:	68fb      	ldr	r3, [r7, #12]
    421a:	683a      	ldr	r2, [r7, #0]
    421c:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    421e:	687b      	ldr	r3, [r7, #4]
    4220:	683a      	ldr	r2, [r7, #0]
    4222:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    4224:	683b      	ldr	r3, [r7, #0]
    4226:	687a      	ldr	r2, [r7, #4]
    4228:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    422a:	687b      	ldr	r3, [r7, #4]
    422c:	681b      	ldr	r3, [r3, #0]
    422e:	1c5a      	adds	r2, r3, #1
    4230:	687b      	ldr	r3, [r7, #4]
    4232:	601a      	str	r2, [r3, #0]
}
    4234:	3714      	adds	r7, #20
    4236:	46bd      	mov	sp, r7
    4238:	f85d 7b04 	ldr.w	r7, [sp], #4
    423c:	4770      	bx	lr
    423e:	bf00      	nop

00004240 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    4240:	b480      	push	{r7}
    4242:	b085      	sub	sp, #20
    4244:	af00      	add	r7, sp, #0
    4246:	6078      	str	r0, [r7, #4]
    4248:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    424a:	683b      	ldr	r3, [r7, #0]
    424c:	681b      	ldr	r3, [r3, #0]
    424e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    4250:	68bb      	ldr	r3, [r7, #8]
    4252:	f1b3 3fff 	cmp.w	r3, #4294967295
    4256:	d103      	bne.n	4260 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    4258:	687b      	ldr	r3, [r7, #4]
    425a:	691b      	ldr	r3, [r3, #16]
    425c:	60fb      	str	r3, [r7, #12]
    425e:	e00c      	b.n	427a <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    4260:	687b      	ldr	r3, [r7, #4]
    4262:	3308      	adds	r3, #8
    4264:	60fb      	str	r3, [r7, #12]
    4266:	e002      	b.n	426e <vListInsert+0x2e>
    4268:	68fb      	ldr	r3, [r7, #12]
    426a:	685b      	ldr	r3, [r3, #4]
    426c:	60fb      	str	r3, [r7, #12]
    426e:	68fb      	ldr	r3, [r7, #12]
    4270:	685b      	ldr	r3, [r3, #4]
    4272:	681a      	ldr	r2, [r3, #0]
    4274:	68bb      	ldr	r3, [r7, #8]
    4276:	429a      	cmp	r2, r3
    4278:	d9f6      	bls.n	4268 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    427a:	68fb      	ldr	r3, [r7, #12]
    427c:	685a      	ldr	r2, [r3, #4]
    427e:	683b      	ldr	r3, [r7, #0]
    4280:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    4282:	683b      	ldr	r3, [r7, #0]
    4284:	685b      	ldr	r3, [r3, #4]
    4286:	683a      	ldr	r2, [r7, #0]
    4288:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    428a:	683b      	ldr	r3, [r7, #0]
    428c:	68fa      	ldr	r2, [r7, #12]
    428e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    4290:	68fb      	ldr	r3, [r7, #12]
    4292:	683a      	ldr	r2, [r7, #0]
    4294:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    4296:	683b      	ldr	r3, [r7, #0]
    4298:	687a      	ldr	r2, [r7, #4]
    429a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    429c:	687b      	ldr	r3, [r7, #4]
    429e:	681b      	ldr	r3, [r3, #0]
    42a0:	1c5a      	adds	r2, r3, #1
    42a2:	687b      	ldr	r3, [r7, #4]
    42a4:	601a      	str	r2, [r3, #0]
}
    42a6:	3714      	adds	r7, #20
    42a8:	46bd      	mov	sp, r7
    42aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    42ae:	4770      	bx	lr

000042b0 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    42b0:	b480      	push	{r7}
    42b2:	b085      	sub	sp, #20
    42b4:	af00      	add	r7, sp, #0
    42b6:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    42b8:	687b      	ldr	r3, [r7, #4]
    42ba:	685b      	ldr	r3, [r3, #4]
    42bc:	687a      	ldr	r2, [r7, #4]
    42be:	6892      	ldr	r2, [r2, #8]
    42c0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    42c2:	687b      	ldr	r3, [r7, #4]
    42c4:	689b      	ldr	r3, [r3, #8]
    42c6:	687a      	ldr	r2, [r7, #4]
    42c8:	6852      	ldr	r2, [r2, #4]
    42ca:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    42cc:	687b      	ldr	r3, [r7, #4]
    42ce:	691b      	ldr	r3, [r3, #16]
    42d0:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    42d2:	68fb      	ldr	r3, [r7, #12]
    42d4:	685a      	ldr	r2, [r3, #4]
    42d6:	687b      	ldr	r3, [r7, #4]
    42d8:	429a      	cmp	r2, r3
    42da:	d103      	bne.n	42e4 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    42dc:	687b      	ldr	r3, [r7, #4]
    42de:	689a      	ldr	r2, [r3, #8]
    42e0:	68fb      	ldr	r3, [r7, #12]
    42e2:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    42e4:	687b      	ldr	r3, [r7, #4]
    42e6:	2200      	movs	r2, #0
    42e8:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    42ea:	68fb      	ldr	r3, [r7, #12]
    42ec:	681b      	ldr	r3, [r3, #0]
    42ee:	1e5a      	subs	r2, r3, #1
    42f0:	68fb      	ldr	r3, [r7, #12]
    42f2:	601a      	str	r2, [r3, #0]
}
    42f4:	3714      	adds	r7, #20
    42f6:	46bd      	mov	sp, r7
    42f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    42fc:	4770      	bx	lr
    42fe:	bf00      	nop

00004300 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    4300:	b580      	push	{r7, lr}
    4302:	b084      	sub	sp, #16
    4304:	af00      	add	r7, sp, #0
    4306:	6078      	str	r0, [r7, #4]
    4308:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    430a:	2301      	movs	r3, #1
    430c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    430e:	683b      	ldr	r3, [r7, #0]
    4310:	2b01      	cmp	r3, #1
    4312:	d00b      	beq.n	432c <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4314:	687b      	ldr	r3, [r7, #4]
    4316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4318:	2b00      	cmp	r3, #0
    431a:	d001      	beq.n	4320 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    431c:	2300      	movs	r3, #0
    431e:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4320:	687b      	ldr	r3, [r7, #4]
    4322:	691b      	ldr	r3, [r3, #16]
    4324:	2b00      	cmp	r3, #0
    4326:	d001      	beq.n	432c <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    4328:	2300      	movs	r3, #0
    432a:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    432c:	68fb      	ldr	r3, [r7, #12]
    432e:	2b01      	cmp	r3, #1
    4330:	d12f      	bne.n	4392 <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    4332:	687b      	ldr	r3, [r7, #4]
    4334:	681a      	ldr	r2, [r3, #0]
    4336:	687b      	ldr	r3, [r7, #4]
    4338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    433a:	6879      	ldr	r1, [r7, #4]
    433c:	6c09      	ldr	r1, [r1, #64]	; 0x40
    433e:	fb01 f303 	mul.w	r3, r1, r3
    4342:	441a      	add	r2, r3
    4344:	687b      	ldr	r3, [r7, #4]
    4346:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4348:	687b      	ldr	r3, [r7, #4]
    434a:	2200      	movs	r2, #0
    434c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    434e:	687b      	ldr	r3, [r7, #4]
    4350:	681a      	ldr	r2, [r3, #0]
    4352:	687b      	ldr	r3, [r7, #4]
    4354:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    4356:	687b      	ldr	r3, [r7, #4]
    4358:	681a      	ldr	r2, [r3, #0]
    435a:	687b      	ldr	r3, [r7, #4]
    435c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    435e:	3b01      	subs	r3, #1
    4360:	6879      	ldr	r1, [r7, #4]
    4362:	6c09      	ldr	r1, [r1, #64]	; 0x40
    4364:	fb01 f303 	mul.w	r3, r1, r3
    4368:	441a      	add	r2, r3
    436a:	687b      	ldr	r3, [r7, #4]
    436c:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    436e:	687b      	ldr	r3, [r7, #4]
    4370:	f04f 32ff 	mov.w	r2, #4294967295
    4374:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    4376:	687b      	ldr	r3, [r7, #4]
    4378:	f04f 32ff 	mov.w	r2, #4294967295
    437c:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    437e:	687b      	ldr	r3, [r7, #4]
    4380:	3310      	adds	r3, #16
    4382:	4618      	mov	r0, r3
    4384:	f7ff ff08 	bl	4198 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    4388:	687b      	ldr	r3, [r7, #4]
    438a:	3324      	adds	r3, #36	; 0x24
    438c:	4618      	mov	r0, r3
    438e:	f7ff ff03 	bl	4198 <vListInitialise>
	}

	return xReturn;
    4392:	68fb      	ldr	r3, [r7, #12]
}
    4394:	4618      	mov	r0, r3
    4396:	3710      	adds	r7, #16
    4398:	46bd      	mov	sp, r7
    439a:	bd80      	pop	{r7, pc}

0000439c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    439c:	b580      	push	{r7, lr}
    439e:	b088      	sub	sp, #32
    43a0:	af00      	add	r7, sp, #0
    43a2:	60f8      	str	r0, [r7, #12]
    43a4:	60b9      	str	r1, [r7, #8]
    43a6:	4613      	mov	r3, r2
    43a8:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    43aa:	2300      	movs	r3, #0
    43ac:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    43ae:	68fb      	ldr	r3, [r7, #12]
    43b0:	2b00      	cmp	r3, #0
    43b2:	d026      	beq.n	4402 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    43b4:	204c      	movs	r0, #76	; 0x4c
    43b6:	f001 fda5 	bl	5f04 <pvPortMalloc>
    43ba:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    43bc:	69bb      	ldr	r3, [r7, #24]
    43be:	2b00      	cmp	r3, #0
    43c0:	d01f      	beq.n	4402 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    43c2:	68fb      	ldr	r3, [r7, #12]
    43c4:	68ba      	ldr	r2, [r7, #8]
    43c6:	fb02 f303 	mul.w	r3, r2, r3
    43ca:	3301      	adds	r3, #1
    43cc:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    43ce:	6978      	ldr	r0, [r7, #20]
    43d0:	f001 fd98 	bl	5f04 <pvPortMalloc>
    43d4:	4602      	mov	r2, r0
    43d6:	69bb      	ldr	r3, [r7, #24]
    43d8:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    43da:	69bb      	ldr	r3, [r7, #24]
    43dc:	681b      	ldr	r3, [r3, #0]
    43de:	2b00      	cmp	r3, #0
    43e0:	d00c      	beq.n	43fc <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    43e2:	69bb      	ldr	r3, [r7, #24]
    43e4:	68fa      	ldr	r2, [r7, #12]
    43e6:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    43e8:	69bb      	ldr	r3, [r7, #24]
    43ea:	68ba      	ldr	r2, [r7, #8]
    43ec:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    43ee:	69b8      	ldr	r0, [r7, #24]
    43f0:	2101      	movs	r1, #1
    43f2:	f7ff ff85 	bl	4300 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    43f6:	69bb      	ldr	r3, [r7, #24]
    43f8:	61fb      	str	r3, [r7, #28]
    43fa:	e002      	b.n	4402 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    43fc:	69b8      	ldr	r0, [r7, #24]
    43fe:	f001 fe45 	bl	608c <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    4402:	69fb      	ldr	r3, [r7, #28]
}
    4404:	4618      	mov	r0, r3
    4406:	3720      	adds	r7, #32
    4408:	46bd      	mov	sp, r7
    440a:	bd80      	pop	{r7, pc}

0000440c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    440c:	b580      	push	{r7, lr}
    440e:	b084      	sub	sp, #16
    4410:	af00      	add	r7, sp, #0
    4412:	4603      	mov	r3, r0
    4414:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    4416:	204c      	movs	r0, #76	; 0x4c
    4418:	f001 fd74 	bl	5f04 <pvPortMalloc>
    441c:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    441e:	68fb      	ldr	r3, [r7, #12]
    4420:	2b00      	cmp	r3, #0
    4422:	d02c      	beq.n	447e <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    4424:	68fb      	ldr	r3, [r7, #12]
    4426:	2200      	movs	r2, #0
    4428:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    442a:	68fb      	ldr	r3, [r7, #12]
    442c:	2200      	movs	r2, #0
    442e:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    4430:	68fb      	ldr	r3, [r7, #12]
    4432:	2200      	movs	r2, #0
    4434:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    4436:	68fb      	ldr	r3, [r7, #12]
    4438:	2200      	movs	r2, #0
    443a:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    443c:	68fb      	ldr	r3, [r7, #12]
    443e:	2200      	movs	r2, #0
    4440:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    4442:	68fb      	ldr	r3, [r7, #12]
    4444:	2201      	movs	r2, #1
    4446:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    4448:	68fb      	ldr	r3, [r7, #12]
    444a:	2200      	movs	r2, #0
    444c:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    444e:	68fb      	ldr	r3, [r7, #12]
    4450:	f04f 32ff 	mov.w	r2, #4294967295
    4454:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    4456:	68fb      	ldr	r3, [r7, #12]
    4458:	f04f 32ff 	mov.w	r2, #4294967295
    445c:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    445e:	68fb      	ldr	r3, [r7, #12]
    4460:	3310      	adds	r3, #16
    4462:	4618      	mov	r0, r3
    4464:	f7ff fe98 	bl	4198 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    4468:	68fb      	ldr	r3, [r7, #12]
    446a:	3324      	adds	r3, #36	; 0x24
    446c:	4618      	mov	r0, r3
    446e:	f7ff fe93 	bl	4198 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    4472:	68f8      	ldr	r0, [r7, #12]
    4474:	2100      	movs	r1, #0
    4476:	2200      	movs	r2, #0
    4478:	2300      	movs	r3, #0
    447a:	f000 f81d 	bl	44b8 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    447e:	68fb      	ldr	r3, [r7, #12]
	}
    4480:	4618      	mov	r0, r3
    4482:	3710      	adds	r7, #16
    4484:	46bd      	mov	sp, r7
    4486:	bd80      	pop	{r7, pc}

00004488 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    4488:	b580      	push	{r7, lr}
    448a:	b084      	sub	sp, #16
    448c:	af00      	add	r7, sp, #0
    448e:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    4490:	f001 fcc0 	bl	5e14 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    4494:	687b      	ldr	r3, [r7, #4]
    4496:	681b      	ldr	r3, [r3, #0]
    4498:	2b00      	cmp	r3, #0
    449a:	d103      	bne.n	44a4 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    449c:	687b      	ldr	r3, [r7, #4]
    449e:	685b      	ldr	r3, [r3, #4]
    44a0:	60fb      	str	r3, [r7, #12]
    44a2:	e001      	b.n	44a8 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    44a4:	2300      	movs	r3, #0
    44a6:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    44a8:	f001 fcca 	bl	5e40 <vPortExitCritical>
		
		return pxReturn;
    44ac:	68fb      	ldr	r3, [r7, #12]
	}
    44ae:	4618      	mov	r0, r3
    44b0:	3710      	adds	r7, #16
    44b2:	46bd      	mov	sp, r7
    44b4:	bd80      	pop	{r7, pc}
    44b6:	bf00      	nop

000044b8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    44b8:	b580      	push	{r7, lr}
    44ba:	b088      	sub	sp, #32
    44bc:	af00      	add	r7, sp, #0
    44be:	60f8      	str	r0, [r7, #12]
    44c0:	60b9      	str	r1, [r7, #8]
    44c2:	607a      	str	r2, [r7, #4]
    44c4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    44c6:	2300      	movs	r3, #0
    44c8:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    44ca:	f001 fca3 	bl	5e14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    44ce:	68fb      	ldr	r3, [r7, #12]
    44d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    44d2:	68fb      	ldr	r3, [r7, #12]
    44d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    44d6:	429a      	cmp	r2, r3
    44d8:	d216      	bcs.n	4508 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    44da:	68f8      	ldr	r0, [r7, #12]
    44dc:	68b9      	ldr	r1, [r7, #8]
    44de:	683a      	ldr	r2, [r7, #0]
    44e0:	f000 f9d6 	bl	4890 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    44e4:	68fb      	ldr	r3, [r7, #12]
    44e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    44e8:	2b00      	cmp	r3, #0
    44ea:	d009      	beq.n	4500 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    44ec:	68fb      	ldr	r3, [r7, #12]
    44ee:	3324      	adds	r3, #36	; 0x24
    44f0:	4618      	mov	r0, r3
    44f2:	f001 f905 	bl	5700 <xTaskRemoveFromEventList>
    44f6:	4603      	mov	r3, r0
    44f8:	2b01      	cmp	r3, #1
    44fa:	d101      	bne.n	4500 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    44fc:	f001 fc7c 	bl	5df8 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    4500:	f001 fc9e 	bl	5e40 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    4504:	2301      	movs	r3, #1
    4506:	e059      	b.n	45bc <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4508:	687b      	ldr	r3, [r7, #4]
    450a:	2b00      	cmp	r3, #0
    450c:	d103      	bne.n	4516 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    450e:	f001 fc97 	bl	5e40 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    4512:	2300      	movs	r3, #0
    4514:	e052      	b.n	45bc <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    4516:	69fb      	ldr	r3, [r7, #28]
    4518:	2b00      	cmp	r3, #0
    451a:	d106      	bne.n	452a <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    451c:	f107 0314 	add.w	r3, r7, #20
    4520:	4618      	mov	r0, r3
    4522:	f001 f945 	bl	57b0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4526:	2301      	movs	r3, #1
    4528:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    452a:	f001 fc89 	bl	5e40 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    452e:	f000 fe93 	bl	5258 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4532:	f001 fc6f 	bl	5e14 <vPortEnterCritical>
    4536:	68fb      	ldr	r3, [r7, #12]
    4538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    453a:	f1b3 3fff 	cmp.w	r3, #4294967295
    453e:	d102      	bne.n	4546 <xQueueGenericSend+0x8e>
    4540:	68fb      	ldr	r3, [r7, #12]
    4542:	2200      	movs	r2, #0
    4544:	645a      	str	r2, [r3, #68]	; 0x44
    4546:	68fb      	ldr	r3, [r7, #12]
    4548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    454a:	f1b3 3fff 	cmp.w	r3, #4294967295
    454e:	d102      	bne.n	4556 <xQueueGenericSend+0x9e>
    4550:	68fb      	ldr	r3, [r7, #12]
    4552:	2200      	movs	r2, #0
    4554:	649a      	str	r2, [r3, #72]	; 0x48
    4556:	f001 fc73 	bl	5e40 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    455a:	f107 0214 	add.w	r2, r7, #20
    455e:	1d3b      	adds	r3, r7, #4
    4560:	4610      	mov	r0, r2
    4562:	4619      	mov	r1, r3
    4564:	f001 f93c 	bl	57e0 <xTaskCheckForTimeOut>
    4568:	4603      	mov	r3, r0
    456a:	2b00      	cmp	r3, #0
    456c:	d11e      	bne.n	45ac <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    456e:	68f8      	ldr	r0, [r7, #12]
    4570:	f000 fa86 	bl	4a80 <prvIsQueueFull>
    4574:	4603      	mov	r3, r0
    4576:	2b00      	cmp	r3, #0
    4578:	d012      	beq.n	45a0 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    457a:	68fb      	ldr	r3, [r7, #12]
    457c:	f103 0210 	add.w	r2, r3, #16
    4580:	687b      	ldr	r3, [r7, #4]
    4582:	4610      	mov	r0, r2
    4584:	4619      	mov	r1, r3
    4586:	f001 f883 	bl	5690 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    458a:	68f8      	ldr	r0, [r7, #12]
    458c:	f000 fa02 	bl	4994 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    4590:	f000 fe74 	bl	527c <xTaskResumeAll>
    4594:	4603      	mov	r3, r0
    4596:	2b00      	cmp	r3, #0
    4598:	d10f      	bne.n	45ba <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    459a:	f001 fc2d 	bl	5df8 <vPortYieldFromISR>
    459e:	e00c      	b.n	45ba <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    45a0:	68f8      	ldr	r0, [r7, #12]
    45a2:	f000 f9f7 	bl	4994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    45a6:	f000 fe69 	bl	527c <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    45aa:	e78e      	b.n	44ca <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    45ac:	68f8      	ldr	r0, [r7, #12]
    45ae:	f000 f9f1 	bl	4994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    45b2:	f000 fe63 	bl	527c <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    45b6:	2300      	movs	r3, #0
    45b8:	e000      	b.n	45bc <xQueueGenericSend+0x104>
		}
	}
    45ba:	e786      	b.n	44ca <xQueueGenericSend+0x12>
}
    45bc:	4618      	mov	r0, r3
    45be:	3720      	adds	r7, #32
    45c0:	46bd      	mov	sp, r7
    45c2:	bd80      	pop	{r7, pc}

000045c4 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    45c4:	b580      	push	{r7, lr}
    45c6:	b086      	sub	sp, #24
    45c8:	af00      	add	r7, sp, #0
    45ca:	60f8      	str	r0, [r7, #12]
    45cc:	60b9      	str	r1, [r7, #8]
    45ce:	607a      	str	r2, [r7, #4]
    45d0:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    45d2:	2300      	movs	r3, #0
    45d4:	613b      	str	r3, [r7, #16]
    45d6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    45da:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    45de:	68fb      	ldr	r3, [r7, #12]
    45e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    45e2:	68fb      	ldr	r3, [r7, #12]
    45e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    45e6:	429a      	cmp	r2, r3
    45e8:	d221      	bcs.n	462e <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    45ea:	68f8      	ldr	r0, [r7, #12]
    45ec:	68b9      	ldr	r1, [r7, #8]
    45ee:	683a      	ldr	r2, [r7, #0]
    45f0:	f000 f94e 	bl	4890 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    45f4:	68fb      	ldr	r3, [r7, #12]
    45f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    45f8:	f1b3 3fff 	cmp.w	r3, #4294967295
    45fc:	d10f      	bne.n	461e <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    45fe:	68fb      	ldr	r3, [r7, #12]
    4600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4602:	2b00      	cmp	r3, #0
    4604:	d010      	beq.n	4628 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4606:	68fb      	ldr	r3, [r7, #12]
    4608:	3324      	adds	r3, #36	; 0x24
    460a:	4618      	mov	r0, r3
    460c:	f001 f878 	bl	5700 <xTaskRemoveFromEventList>
    4610:	4603      	mov	r3, r0
    4612:	2b00      	cmp	r3, #0
    4614:	d008      	beq.n	4628 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    4616:	687b      	ldr	r3, [r7, #4]
    4618:	2201      	movs	r2, #1
    461a:	601a      	str	r2, [r3, #0]
    461c:	e004      	b.n	4628 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    461e:	68fb      	ldr	r3, [r7, #12]
    4620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4622:	1c5a      	adds	r2, r3, #1
    4624:	68fb      	ldr	r3, [r7, #12]
    4626:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    4628:	2301      	movs	r3, #1
    462a:	617b      	str	r3, [r7, #20]
    462c:	e001      	b.n	4632 <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    462e:	2300      	movs	r3, #0
    4630:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4632:	f04f 0000 	mov.w	r0, #0
    4636:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    463a:	697b      	ldr	r3, [r7, #20]
}
    463c:	4618      	mov	r0, r3
    463e:	3718      	adds	r7, #24
    4640:	46bd      	mov	sp, r7
    4642:	bd80      	pop	{r7, pc}

00004644 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    4644:	b580      	push	{r7, lr}
    4646:	b088      	sub	sp, #32
    4648:	af00      	add	r7, sp, #0
    464a:	60f8      	str	r0, [r7, #12]
    464c:	60b9      	str	r1, [r7, #8]
    464e:	607a      	str	r2, [r7, #4]
    4650:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    4652:	2300      	movs	r3, #0
    4654:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    4656:	f001 fbdd 	bl	5e14 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    465a:	68fb      	ldr	r3, [r7, #12]
    465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    465e:	2b00      	cmp	r3, #0
    4660:	d03b      	beq.n	46da <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    4662:	68fb      	ldr	r3, [r7, #12]
    4664:	68db      	ldr	r3, [r3, #12]
    4666:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    4668:	68f8      	ldr	r0, [r7, #12]
    466a:	68b9      	ldr	r1, [r7, #8]
    466c:	f000 f96c 	bl	4948 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    4670:	683b      	ldr	r3, [r7, #0]
    4672:	2b00      	cmp	r3, #0
    4674:	d11c      	bne.n	46b0 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    4676:	68fb      	ldr	r3, [r7, #12]
    4678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    467a:	1e5a      	subs	r2, r3, #1
    467c:	68fb      	ldr	r3, [r7, #12]
    467e:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4680:	68fb      	ldr	r3, [r7, #12]
    4682:	681b      	ldr	r3, [r3, #0]
    4684:	2b00      	cmp	r3, #0
    4686:	d104      	bne.n	4692 <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    4688:	f001 fa5c 	bl	5b44 <xTaskGetCurrentTaskHandle>
    468c:	4602      	mov	r2, r0
    468e:	68fb      	ldr	r3, [r7, #12]
    4690:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4692:	68fb      	ldr	r3, [r7, #12]
    4694:	691b      	ldr	r3, [r3, #16]
    4696:	2b00      	cmp	r3, #0
    4698:	d01b      	beq.n	46d2 <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    469a:	68fb      	ldr	r3, [r7, #12]
    469c:	3310      	adds	r3, #16
    469e:	4618      	mov	r0, r3
    46a0:	f001 f82e 	bl	5700 <xTaskRemoveFromEventList>
    46a4:	4603      	mov	r3, r0
    46a6:	2b01      	cmp	r3, #1
    46a8:	d113      	bne.n	46d2 <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    46aa:	f001 fba5 	bl	5df8 <vPortYieldFromISR>
    46ae:	e010      	b.n	46d2 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    46b0:	68fb      	ldr	r3, [r7, #12]
    46b2:	69ba      	ldr	r2, [r7, #24]
    46b4:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    46b6:	68fb      	ldr	r3, [r7, #12]
    46b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    46ba:	2b00      	cmp	r3, #0
    46bc:	d009      	beq.n	46d2 <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    46be:	68fb      	ldr	r3, [r7, #12]
    46c0:	3324      	adds	r3, #36	; 0x24
    46c2:	4618      	mov	r0, r3
    46c4:	f001 f81c 	bl	5700 <xTaskRemoveFromEventList>
    46c8:	4603      	mov	r3, r0
    46ca:	2b00      	cmp	r3, #0
    46cc:	d001      	beq.n	46d2 <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    46ce:	f001 fb93 	bl	5df8 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    46d2:	f001 fbb5 	bl	5e40 <vPortExitCritical>
				return pdPASS;
    46d6:	2301      	movs	r3, #1
    46d8:	e066      	b.n	47a8 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    46da:	687b      	ldr	r3, [r7, #4]
    46dc:	2b00      	cmp	r3, #0
    46de:	d103      	bne.n	46e8 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    46e0:	f001 fbae 	bl	5e40 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    46e4:	2300      	movs	r3, #0
    46e6:	e05f      	b.n	47a8 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    46e8:	69fb      	ldr	r3, [r7, #28]
    46ea:	2b00      	cmp	r3, #0
    46ec:	d106      	bne.n	46fc <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    46ee:	f107 0310 	add.w	r3, r7, #16
    46f2:	4618      	mov	r0, r3
    46f4:	f001 f85c 	bl	57b0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    46f8:	2301      	movs	r3, #1
    46fa:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    46fc:	f001 fba0 	bl	5e40 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4700:	f000 fdaa 	bl	5258 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4704:	f001 fb86 	bl	5e14 <vPortEnterCritical>
    4708:	68fb      	ldr	r3, [r7, #12]
    470a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    470c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4710:	d102      	bne.n	4718 <xQueueGenericReceive+0xd4>
    4712:	68fb      	ldr	r3, [r7, #12]
    4714:	2200      	movs	r2, #0
    4716:	645a      	str	r2, [r3, #68]	; 0x44
    4718:	68fb      	ldr	r3, [r7, #12]
    471a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    471c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4720:	d102      	bne.n	4728 <xQueueGenericReceive+0xe4>
    4722:	68fb      	ldr	r3, [r7, #12]
    4724:	2200      	movs	r2, #0
    4726:	649a      	str	r2, [r3, #72]	; 0x48
    4728:	f001 fb8a 	bl	5e40 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    472c:	f107 0210 	add.w	r2, r7, #16
    4730:	1d3b      	adds	r3, r7, #4
    4732:	4610      	mov	r0, r2
    4734:	4619      	mov	r1, r3
    4736:	f001 f853 	bl	57e0 <xTaskCheckForTimeOut>
    473a:	4603      	mov	r3, r0
    473c:	2b00      	cmp	r3, #0
    473e:	d12b      	bne.n	4798 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4740:	68f8      	ldr	r0, [r7, #12]
    4742:	f000 f973 	bl	4a2c <prvIsQueueEmpty>
    4746:	4603      	mov	r3, r0
    4748:	2b00      	cmp	r3, #0
    474a:	d01f      	beq.n	478c <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    474c:	68fb      	ldr	r3, [r7, #12]
    474e:	681b      	ldr	r3, [r3, #0]
    4750:	2b00      	cmp	r3, #0
    4752:	d108      	bne.n	4766 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    4754:	f001 fb5e 	bl	5e14 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    4758:	68fb      	ldr	r3, [r7, #12]
    475a:	685b      	ldr	r3, [r3, #4]
    475c:	4618      	mov	r0, r3
    475e:	f001 fa01 	bl	5b64 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    4762:	f001 fb6d 	bl	5e40 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    4766:	68fb      	ldr	r3, [r7, #12]
    4768:	f103 0224 	add.w	r2, r3, #36	; 0x24
    476c:	687b      	ldr	r3, [r7, #4]
    476e:	4610      	mov	r0, r2
    4770:	4619      	mov	r1, r3
    4772:	f000 ff8d 	bl	5690 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    4776:	68f8      	ldr	r0, [r7, #12]
    4778:	f000 f90c 	bl	4994 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    477c:	f000 fd7e 	bl	527c <xTaskResumeAll>
    4780:	4603      	mov	r3, r0
    4782:	2b00      	cmp	r3, #0
    4784:	d10f      	bne.n	47a6 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    4786:	f001 fb37 	bl	5df8 <vPortYieldFromISR>
    478a:	e00c      	b.n	47a6 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    478c:	68f8      	ldr	r0, [r7, #12]
    478e:	f000 f901 	bl	4994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    4792:	f000 fd73 	bl	527c <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    4796:	e75e      	b.n	4656 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    4798:	68f8      	ldr	r0, [r7, #12]
    479a:	f000 f8fb 	bl	4994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    479e:	f000 fd6d 	bl	527c <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    47a2:	2300      	movs	r3, #0
    47a4:	e000      	b.n	47a8 <xQueueGenericReceive+0x164>
		}
	}
    47a6:	e756      	b.n	4656 <xQueueGenericReceive+0x12>
}
    47a8:	4618      	mov	r0, r3
    47aa:	3720      	adds	r7, #32
    47ac:	46bd      	mov	sp, r7
    47ae:	bd80      	pop	{r7, pc}

000047b0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    47b0:	b580      	push	{r7, lr}
    47b2:	b086      	sub	sp, #24
    47b4:	af00      	add	r7, sp, #0
    47b6:	60f8      	str	r0, [r7, #12]
    47b8:	60b9      	str	r1, [r7, #8]
    47ba:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    47bc:	2300      	movs	r3, #0
    47be:	613b      	str	r3, [r7, #16]
    47c0:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    47c4:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    47c8:	68fb      	ldr	r3, [r7, #12]
    47ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47cc:	2b00      	cmp	r3, #0
    47ce:	d025      	beq.n	481c <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    47d0:	68f8      	ldr	r0, [r7, #12]
    47d2:	68b9      	ldr	r1, [r7, #8]
    47d4:	f000 f8b8 	bl	4948 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    47d8:	68fb      	ldr	r3, [r7, #12]
    47da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47dc:	1e5a      	subs	r2, r3, #1
    47de:	68fb      	ldr	r3, [r7, #12]
    47e0:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    47e2:	68fb      	ldr	r3, [r7, #12]
    47e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    47e6:	f1b3 3fff 	cmp.w	r3, #4294967295
    47ea:	d10f      	bne.n	480c <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    47ec:	68fb      	ldr	r3, [r7, #12]
    47ee:	691b      	ldr	r3, [r3, #16]
    47f0:	2b00      	cmp	r3, #0
    47f2:	d010      	beq.n	4816 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    47f4:	68fb      	ldr	r3, [r7, #12]
    47f6:	3310      	adds	r3, #16
    47f8:	4618      	mov	r0, r3
    47fa:	f000 ff81 	bl	5700 <xTaskRemoveFromEventList>
    47fe:	4603      	mov	r3, r0
    4800:	2b00      	cmp	r3, #0
    4802:	d008      	beq.n	4816 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    4804:	687b      	ldr	r3, [r7, #4]
    4806:	2201      	movs	r2, #1
    4808:	601a      	str	r2, [r3, #0]
    480a:	e004      	b.n	4816 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    480c:	68fb      	ldr	r3, [r7, #12]
    480e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4810:	1c5a      	adds	r2, r3, #1
    4812:	68fb      	ldr	r3, [r7, #12]
    4814:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    4816:	2301      	movs	r3, #1
    4818:	617b      	str	r3, [r7, #20]
    481a:	e001      	b.n	4820 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    481c:	2300      	movs	r3, #0
    481e:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4820:	f04f 0000 	mov.w	r0, #0
    4824:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4828:	697b      	ldr	r3, [r7, #20]
}
    482a:	4618      	mov	r0, r3
    482c:	3718      	adds	r7, #24
    482e:	46bd      	mov	sp, r7
    4830:	bd80      	pop	{r7, pc}
    4832:	bf00      	nop

00004834 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    4834:	b580      	push	{r7, lr}
    4836:	b084      	sub	sp, #16
    4838:	af00      	add	r7, sp, #0
    483a:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    483c:	f001 faea 	bl	5e14 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    4840:	687b      	ldr	r3, [r7, #4]
    4842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4844:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4846:	f001 fafb 	bl	5e40 <vPortExitCritical>

	return uxReturn;
    484a:	68fb      	ldr	r3, [r7, #12]
}
    484c:	4618      	mov	r0, r3
    484e:	3710      	adds	r7, #16
    4850:	46bd      	mov	sp, r7
    4852:	bd80      	pop	{r7, pc}

00004854 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    4854:	b480      	push	{r7}
    4856:	b085      	sub	sp, #20
    4858:	af00      	add	r7, sp, #0
    485a:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    485c:	687b      	ldr	r3, [r7, #4]
    485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4860:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    4862:	68fb      	ldr	r3, [r7, #12]
}
    4864:	4618      	mov	r0, r3
    4866:	3714      	adds	r7, #20
    4868:	46bd      	mov	sp, r7
    486a:	f85d 7b04 	ldr.w	r7, [sp], #4
    486e:	4770      	bx	lr

00004870 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    4870:	b580      	push	{r7, lr}
    4872:	b082      	sub	sp, #8
    4874:	af00      	add	r7, sp, #0
    4876:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    4878:	687b      	ldr	r3, [r7, #4]
    487a:	681b      	ldr	r3, [r3, #0]
    487c:	4618      	mov	r0, r3
    487e:	f001 fc05 	bl	608c <vPortFree>
	vPortFree( pxQueue );
    4882:	6878      	ldr	r0, [r7, #4]
    4884:	f001 fc02 	bl	608c <vPortFree>
}
    4888:	3708      	adds	r7, #8
    488a:	46bd      	mov	sp, r7
    488c:	bd80      	pop	{r7, pc}
    488e:	bf00      	nop

00004890 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    4890:	b580      	push	{r7, lr}
    4892:	b084      	sub	sp, #16
    4894:	af00      	add	r7, sp, #0
    4896:	60f8      	str	r0, [r7, #12]
    4898:	60b9      	str	r1, [r7, #8]
    489a:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    489c:	68fb      	ldr	r3, [r7, #12]
    489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48a0:	2b00      	cmp	r3, #0
    48a2:	d10c      	bne.n	48be <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    48a4:	68fb      	ldr	r3, [r7, #12]
    48a6:	681b      	ldr	r3, [r3, #0]
    48a8:	2b00      	cmp	r3, #0
    48aa:	d145      	bne.n	4938 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    48ac:	68fb      	ldr	r3, [r7, #12]
    48ae:	685b      	ldr	r3, [r3, #4]
    48b0:	4618      	mov	r0, r3
    48b2:	f001 f9bb 	bl	5c2c <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    48b6:	68fb      	ldr	r3, [r7, #12]
    48b8:	2200      	movs	r2, #0
    48ba:	605a      	str	r2, [r3, #4]
    48bc:	e03c      	b.n	4938 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    48be:	687b      	ldr	r3, [r7, #4]
    48c0:	2b00      	cmp	r3, #0
    48c2:	d11a      	bne.n	48fa <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    48c4:	68fb      	ldr	r3, [r7, #12]
    48c6:	689a      	ldr	r2, [r3, #8]
    48c8:	68fb      	ldr	r3, [r7, #12]
    48ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48cc:	4610      	mov	r0, r2
    48ce:	68b9      	ldr	r1, [r7, #8]
    48d0:	461a      	mov	r2, r3
    48d2:	f013 ff75 	bl	187c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    48d6:	68fb      	ldr	r3, [r7, #12]
    48d8:	689a      	ldr	r2, [r3, #8]
    48da:	68fb      	ldr	r3, [r7, #12]
    48dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48de:	441a      	add	r2, r3
    48e0:	68fb      	ldr	r3, [r7, #12]
    48e2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    48e4:	68fb      	ldr	r3, [r7, #12]
    48e6:	689a      	ldr	r2, [r3, #8]
    48e8:	68fb      	ldr	r3, [r7, #12]
    48ea:	685b      	ldr	r3, [r3, #4]
    48ec:	429a      	cmp	r2, r3
    48ee:	d323      	bcc.n	4938 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    48f0:	68fb      	ldr	r3, [r7, #12]
    48f2:	681a      	ldr	r2, [r3, #0]
    48f4:	68fb      	ldr	r3, [r7, #12]
    48f6:	609a      	str	r2, [r3, #8]
    48f8:	e01e      	b.n	4938 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    48fa:	68fb      	ldr	r3, [r7, #12]
    48fc:	68da      	ldr	r2, [r3, #12]
    48fe:	68fb      	ldr	r3, [r7, #12]
    4900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4902:	4610      	mov	r0, r2
    4904:	68b9      	ldr	r1, [r7, #8]
    4906:	461a      	mov	r2, r3
    4908:	f013 ff5a 	bl	187c0 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    490c:	68fb      	ldr	r3, [r7, #12]
    490e:	68da      	ldr	r2, [r3, #12]
    4910:	68fb      	ldr	r3, [r7, #12]
    4912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4914:	425b      	negs	r3, r3
    4916:	441a      	add	r2, r3
    4918:	68fb      	ldr	r3, [r7, #12]
    491a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    491c:	68fb      	ldr	r3, [r7, #12]
    491e:	68da      	ldr	r2, [r3, #12]
    4920:	68fb      	ldr	r3, [r7, #12]
    4922:	681b      	ldr	r3, [r3, #0]
    4924:	429a      	cmp	r2, r3
    4926:	d207      	bcs.n	4938 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4928:	68fb      	ldr	r3, [r7, #12]
    492a:	685a      	ldr	r2, [r3, #4]
    492c:	68fb      	ldr	r3, [r7, #12]
    492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4930:	425b      	negs	r3, r3
    4932:	441a      	add	r2, r3
    4934:	68fb      	ldr	r3, [r7, #12]
    4936:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    4938:	68fb      	ldr	r3, [r7, #12]
    493a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    493c:	1c5a      	adds	r2, r3, #1
    493e:	68fb      	ldr	r3, [r7, #12]
    4940:	639a      	str	r2, [r3, #56]	; 0x38
}
    4942:	3710      	adds	r7, #16
    4944:	46bd      	mov	sp, r7
    4946:	bd80      	pop	{r7, pc}

00004948 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    4948:	b580      	push	{r7, lr}
    494a:	b082      	sub	sp, #8
    494c:	af00      	add	r7, sp, #0
    494e:	6078      	str	r0, [r7, #4]
    4950:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    4952:	687b      	ldr	r3, [r7, #4]
    4954:	681b      	ldr	r3, [r3, #0]
    4956:	2b00      	cmp	r3, #0
    4958:	d019      	beq.n	498e <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    495a:	687b      	ldr	r3, [r7, #4]
    495c:	68da      	ldr	r2, [r3, #12]
    495e:	687b      	ldr	r3, [r7, #4]
    4960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4962:	441a      	add	r2, r3
    4964:	687b      	ldr	r3, [r7, #4]
    4966:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    4968:	687b      	ldr	r3, [r7, #4]
    496a:	68da      	ldr	r2, [r3, #12]
    496c:	687b      	ldr	r3, [r7, #4]
    496e:	685b      	ldr	r3, [r3, #4]
    4970:	429a      	cmp	r2, r3
    4972:	d303      	bcc.n	497c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    4974:	687b      	ldr	r3, [r7, #4]
    4976:	681a      	ldr	r2, [r3, #0]
    4978:	687b      	ldr	r3, [r7, #4]
    497a:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    497c:	687b      	ldr	r3, [r7, #4]
    497e:	68da      	ldr	r2, [r3, #12]
    4980:	687b      	ldr	r3, [r7, #4]
    4982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4984:	6838      	ldr	r0, [r7, #0]
    4986:	4611      	mov	r1, r2
    4988:	461a      	mov	r2, r3
    498a:	f013 ff19 	bl	187c0 <memcpy>
	}
}
    498e:	3708      	adds	r7, #8
    4990:	46bd      	mov	sp, r7
    4992:	bd80      	pop	{r7, pc}

00004994 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    4994:	b580      	push	{r7, lr}
    4996:	b082      	sub	sp, #8
    4998:	af00      	add	r7, sp, #0
    499a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    499c:	f001 fa3a 	bl	5e14 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    49a0:	e014      	b.n	49cc <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    49a2:	687b      	ldr	r3, [r7, #4]
    49a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    49a6:	2b00      	cmp	r3, #0
    49a8:	d00f      	beq.n	49ca <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    49aa:	687b      	ldr	r3, [r7, #4]
    49ac:	3324      	adds	r3, #36	; 0x24
    49ae:	4618      	mov	r0, r3
    49b0:	f000 fea6 	bl	5700 <xTaskRemoveFromEventList>
    49b4:	4603      	mov	r3, r0
    49b6:	2b00      	cmp	r3, #0
    49b8:	d001      	beq.n	49be <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    49ba:	f000 ff5d 	bl	5878 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    49be:	687b      	ldr	r3, [r7, #4]
    49c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    49c2:	1e5a      	subs	r2, r3, #1
    49c4:	687b      	ldr	r3, [r7, #4]
    49c6:	649a      	str	r2, [r3, #72]	; 0x48
    49c8:	e000      	b.n	49cc <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    49ca:	e003      	b.n	49d4 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    49cc:	687b      	ldr	r3, [r7, #4]
    49ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    49d0:	2b00      	cmp	r3, #0
    49d2:	dce6      	bgt.n	49a2 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    49d4:	687b      	ldr	r3, [r7, #4]
    49d6:	f04f 32ff 	mov.w	r2, #4294967295
    49da:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    49dc:	f001 fa30 	bl	5e40 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    49e0:	f001 fa18 	bl	5e14 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    49e4:	e014      	b.n	4a10 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    49e6:	687b      	ldr	r3, [r7, #4]
    49e8:	691b      	ldr	r3, [r3, #16]
    49ea:	2b00      	cmp	r3, #0
    49ec:	d00f      	beq.n	4a0e <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    49ee:	687b      	ldr	r3, [r7, #4]
    49f0:	3310      	adds	r3, #16
    49f2:	4618      	mov	r0, r3
    49f4:	f000 fe84 	bl	5700 <xTaskRemoveFromEventList>
    49f8:	4603      	mov	r3, r0
    49fa:	2b00      	cmp	r3, #0
    49fc:	d001      	beq.n	4a02 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    49fe:	f000 ff3b 	bl	5878 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    4a02:	687b      	ldr	r3, [r7, #4]
    4a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4a06:	1e5a      	subs	r2, r3, #1
    4a08:	687b      	ldr	r3, [r7, #4]
    4a0a:	645a      	str	r2, [r3, #68]	; 0x44
    4a0c:	e000      	b.n	4a10 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    4a0e:	e003      	b.n	4a18 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4a10:	687b      	ldr	r3, [r7, #4]
    4a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4a14:	2b00      	cmp	r3, #0
    4a16:	dce6      	bgt.n	49e6 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4a18:	687b      	ldr	r3, [r7, #4]
    4a1a:	f04f 32ff 	mov.w	r2, #4294967295
    4a1e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    4a20:	f001 fa0e 	bl	5e40 <vPortExitCritical>
}
    4a24:	3708      	adds	r7, #8
    4a26:	46bd      	mov	sp, r7
    4a28:	bd80      	pop	{r7, pc}
    4a2a:	bf00      	nop

00004a2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    4a2c:	b580      	push	{r7, lr}
    4a2e:	b084      	sub	sp, #16
    4a30:	af00      	add	r7, sp, #0
    4a32:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4a34:	f001 f9ee 	bl	5e14 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4a38:	687b      	ldr	r3, [r7, #4]
    4a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4a3c:	2b00      	cmp	r3, #0
    4a3e:	bf14      	ite	ne
    4a40:	2300      	movne	r3, #0
    4a42:	2301      	moveq	r3, #1
    4a44:	b2db      	uxtb	r3, r3
    4a46:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4a48:	f001 f9fa 	bl	5e40 <vPortExitCritical>

	return xReturn;
    4a4c:	68fb      	ldr	r3, [r7, #12]
}
    4a4e:	4618      	mov	r0, r3
    4a50:	3710      	adds	r7, #16
    4a52:	46bd      	mov	sp, r7
    4a54:	bd80      	pop	{r7, pc}
    4a56:	bf00      	nop

00004a58 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    4a58:	b480      	push	{r7}
    4a5a:	b085      	sub	sp, #20
    4a5c:	af00      	add	r7, sp, #0
    4a5e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4a60:	687b      	ldr	r3, [r7, #4]
    4a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4a64:	2b00      	cmp	r3, #0
    4a66:	bf14      	ite	ne
    4a68:	2300      	movne	r3, #0
    4a6a:	2301      	moveq	r3, #1
    4a6c:	b2db      	uxtb	r3, r3
    4a6e:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4a70:	68fb      	ldr	r3, [r7, #12]
}
    4a72:	4618      	mov	r0, r3
    4a74:	3714      	adds	r7, #20
    4a76:	46bd      	mov	sp, r7
    4a78:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a7c:	4770      	bx	lr
    4a7e:	bf00      	nop

00004a80 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    4a80:	b580      	push	{r7, lr}
    4a82:	b084      	sub	sp, #16
    4a84:	af00      	add	r7, sp, #0
    4a86:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4a88:	f001 f9c4 	bl	5e14 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4a8c:	687b      	ldr	r3, [r7, #4]
    4a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4a90:	687b      	ldr	r3, [r7, #4]
    4a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4a94:	429a      	cmp	r2, r3
    4a96:	bf14      	ite	ne
    4a98:	2300      	movne	r3, #0
    4a9a:	2301      	moveq	r3, #1
    4a9c:	b2db      	uxtb	r3, r3
    4a9e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4aa0:	f001 f9ce 	bl	5e40 <vPortExitCritical>

	return xReturn;
    4aa4:	68fb      	ldr	r3, [r7, #12]
}
    4aa6:	4618      	mov	r0, r3
    4aa8:	3710      	adds	r7, #16
    4aaa:	46bd      	mov	sp, r7
    4aac:	bd80      	pop	{r7, pc}
    4aae:	bf00      	nop

00004ab0 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    4ab0:	b480      	push	{r7}
    4ab2:	b085      	sub	sp, #20
    4ab4:	af00      	add	r7, sp, #0
    4ab6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4ab8:	687b      	ldr	r3, [r7, #4]
    4aba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4abc:	687b      	ldr	r3, [r7, #4]
    4abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4ac0:	429a      	cmp	r2, r3
    4ac2:	bf14      	ite	ne
    4ac4:	2300      	movne	r3, #0
    4ac6:	2301      	moveq	r3, #1
    4ac8:	b2db      	uxtb	r3, r3
    4aca:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4acc:	68fb      	ldr	r3, [r7, #12]
}
    4ace:	4618      	mov	r0, r3
    4ad0:	3714      	adds	r7, #20
    4ad2:	46bd      	mov	sp, r7
    4ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ad8:	4770      	bx	lr
    4ada:	bf00      	nop

00004adc <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    4adc:	b580      	push	{r7, lr}
    4ade:	b08a      	sub	sp, #40	; 0x28
    4ae0:	af02      	add	r7, sp, #8
    4ae2:	60f8      	str	r0, [r7, #12]
    4ae4:	60b9      	str	r1, [r7, #8]
    4ae6:	603b      	str	r3, [r7, #0]
    4ae8:	4613      	mov	r3, r2
    4aea:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    4aec:	88fb      	ldrh	r3, [r7, #6]
    4aee:	4618      	mov	r0, r3
    4af0:	6b39      	ldr	r1, [r7, #48]	; 0x30
    4af2:	f000 ffe5 	bl	5ac0 <prvAllocateTCBAndStack>
    4af6:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4af8:	69bb      	ldr	r3, [r7, #24]
    4afa:	2b00      	cmp	r3, #0
    4afc:	f000 80a1 	beq.w	4c42 <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    4b00:	69bb      	ldr	r3, [r7, #24]
    4b02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4b04:	88fb      	ldrh	r3, [r7, #6]
    4b06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4b0a:	3b01      	subs	r3, #1
    4b0c:	009b      	lsls	r3, r3, #2
    4b0e:	4413      	add	r3, r2
    4b10:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    4b12:	697b      	ldr	r3, [r7, #20]
    4b14:	f023 0307 	bic.w	r3, r3, #7
    4b18:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    4b1a:	88fb      	ldrh	r3, [r7, #6]
    4b1c:	9300      	str	r3, [sp, #0]
    4b1e:	69b8      	ldr	r0, [r7, #24]
    4b20:	68b9      	ldr	r1, [r7, #8]
    4b22:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4b26:	f000 febd 	bl	58a4 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4b2a:	6978      	ldr	r0, [r7, #20]
    4b2c:	68f9      	ldr	r1, [r7, #12]
    4b2e:	683a      	ldr	r2, [r7, #0]
    4b30:	f001 f8f2 	bl	5d18 <pxPortInitialiseStack>
    4b34:	4602      	mov	r2, r0
    4b36:	69bb      	ldr	r3, [r7, #24]
    4b38:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    4b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4b3c:	2b00      	cmp	r3, #0
    4b3e:	d002      	beq.n	4b46 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4b42:	69ba      	ldr	r2, [r7, #24]
    4b44:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4b46:	f001 f965 	bl	5e14 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    4b4a:	f241 23b8 	movw	r3, #4792	; 0x12b8
    4b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b52:	681b      	ldr	r3, [r3, #0]
    4b54:	1c5a      	adds	r2, r3, #1
    4b56:	f241 23b8 	movw	r3, #4792	; 0x12b8
    4b5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b5e:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    4b60:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b68:	681b      	ldr	r3, [r3, #0]
    4b6a:	2b00      	cmp	r3, #0
    4b6c:	d10f      	bne.n	4b8e <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    4b6e:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4b72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b76:	69ba      	ldr	r2, [r7, #24]
    4b78:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    4b7a:	f241 23b8 	movw	r3, #4792	; 0x12b8
    4b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b82:	681b      	ldr	r3, [r3, #0]
    4b84:	2b01      	cmp	r3, #1
    4b86:	d118      	bne.n	4bba <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    4b88:	f000 fec2 	bl	5910 <prvInitialiseTaskLists>
    4b8c:	e015      	b.n	4bba <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    4b8e:	f241 23c8 	movw	r3, #4808	; 0x12c8
    4b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b96:	681b      	ldr	r3, [r3, #0]
    4b98:	2b00      	cmp	r3, #0
    4b9a:	d10e      	bne.n	4bba <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    4b9c:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ba4:	681b      	ldr	r3, [r3, #0]
    4ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4baa:	429a      	cmp	r2, r3
    4bac:	d805      	bhi.n	4bba <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    4bae:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bb6:	69ba      	ldr	r2, [r7, #24]
    4bb8:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    4bba:	69bb      	ldr	r3, [r7, #24]
    4bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bbe:	f241 23c0 	movw	r3, #4800	; 0x12c0
    4bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bc6:	681b      	ldr	r3, [r3, #0]
    4bc8:	429a      	cmp	r2, r3
    4bca:	d906      	bls.n	4bda <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    4bcc:	69bb      	ldr	r3, [r7, #24]
    4bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bd0:	f241 23c0 	movw	r3, #4800	; 0x12c0
    4bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bd8:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    4bda:	f241 23dc 	movw	r3, #4828	; 0x12dc
    4bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4be2:	681b      	ldr	r3, [r3, #0]
    4be4:	1c5a      	adds	r2, r3, #1
    4be6:	f241 23dc 	movw	r3, #4828	; 0x12dc
    4bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bee:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    4bf0:	69bb      	ldr	r3, [r7, #24]
    4bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bf4:	f241 23c4 	movw	r3, #4804	; 0x12c4
    4bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bfc:	681b      	ldr	r3, [r3, #0]
    4bfe:	429a      	cmp	r2, r3
    4c00:	d906      	bls.n	4c10 <xTaskGenericCreate+0x134>
    4c02:	69bb      	ldr	r3, [r7, #24]
    4c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c06:	f241 23c4 	movw	r3, #4804	; 0x12c4
    4c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c0e:	601a      	str	r2, [r3, #0]
    4c10:	69bb      	ldr	r3, [r7, #24]
    4c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c14:	4613      	mov	r3, r2
    4c16:	009b      	lsls	r3, r3, #2
    4c18:	4413      	add	r3, r2
    4c1a:	009b      	lsls	r3, r3, #2
    4c1c:	f241 12e4 	movw	r2, #4580	; 0x11e4
    4c20:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4c24:	441a      	add	r2, r3
    4c26:	69bb      	ldr	r3, [r7, #24]
    4c28:	3304      	adds	r3, #4
    4c2a:	4610      	mov	r0, r2
    4c2c:	4619      	mov	r1, r3
    4c2e:	f7ff fadf 	bl	41f0 <vListInsertEnd>

			xReturn = pdPASS;
    4c32:	2301      	movs	r3, #1
    4c34:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    4c36:	69b8      	ldr	r0, [r7, #24]
    4c38:	f012 fdb8 	bl	177ac <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    4c3c:	f001 f900 	bl	5e40 <vPortExitCritical>
    4c40:	e002      	b.n	4c48 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4c42:	f04f 33ff 	mov.w	r3, #4294967295
    4c46:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4c48:	69fb      	ldr	r3, [r7, #28]
    4c4a:	2b01      	cmp	r3, #1
    4c4c:	d111      	bne.n	4c72 <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    4c4e:	f241 23c8 	movw	r3, #4808	; 0x12c8
    4c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c56:	681b      	ldr	r3, [r3, #0]
    4c58:	2b00      	cmp	r3, #0
    4c5a:	d00a      	beq.n	4c72 <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    4c5c:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c64:	681b      	ldr	r3, [r3, #0]
    4c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4c6a:	429a      	cmp	r2, r3
    4c6c:	d201      	bcs.n	4c72 <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    4c6e:	f001 f8c3 	bl	5df8 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    4c72:	69fb      	ldr	r3, [r7, #28]
}
    4c74:	4618      	mov	r0, r3
    4c76:	3720      	adds	r7, #32
    4c78:	46bd      	mov	sp, r7
    4c7a:	bd80      	pop	{r7, pc}

00004c7c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    4c7c:	b580      	push	{r7, lr}
    4c7e:	b084      	sub	sp, #16
    4c80:	af00      	add	r7, sp, #0
    4c82:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4c84:	f001 f8c6 	bl	5e14 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    4c88:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c90:	681b      	ldr	r3, [r3, #0]
    4c92:	687a      	ldr	r2, [r7, #4]
    4c94:	429a      	cmp	r2, r3
    4c96:	d101      	bne.n	4c9c <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    4c98:	2300      	movs	r3, #0
    4c9a:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    4c9c:	687b      	ldr	r3, [r7, #4]
    4c9e:	2b00      	cmp	r3, #0
    4ca0:	d105      	bne.n	4cae <vTaskDelete+0x32>
    4ca2:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4caa:	681b      	ldr	r3, [r3, #0]
    4cac:	e000      	b.n	4cb0 <vTaskDelete+0x34>
    4cae:	687b      	ldr	r3, [r7, #4]
    4cb0:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4cb2:	68fb      	ldr	r3, [r7, #12]
    4cb4:	3304      	adds	r3, #4
    4cb6:	4618      	mov	r0, r3
    4cb8:	f7ff fafa 	bl	42b0 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4cbc:	68fb      	ldr	r3, [r7, #12]
    4cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4cc0:	2b00      	cmp	r3, #0
    4cc2:	d004      	beq.n	4cce <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4cc4:	68fb      	ldr	r3, [r7, #12]
    4cc6:	3318      	adds	r3, #24
    4cc8:	4618      	mov	r0, r3
    4cca:	f7ff faf1 	bl	42b0 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    4cce:	68fb      	ldr	r3, [r7, #12]
    4cd0:	3304      	adds	r3, #4
    4cd2:	f241 208c 	movw	r0, #4748	; 0x128c
    4cd6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4cda:	4619      	mov	r1, r3
    4cdc:	f7ff fa88 	bl	41f0 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4ce0:	f241 23a0 	movw	r3, #4768	; 0x12a0
    4ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ce8:	681b      	ldr	r3, [r3, #0]
    4cea:	1c5a      	adds	r2, r3, #1
    4cec:	f241 23a0 	movw	r3, #4768	; 0x12a0
    4cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cf4:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4cf6:	f241 23dc 	movw	r3, #4828	; 0x12dc
    4cfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cfe:	681b      	ldr	r3, [r3, #0]
    4d00:	1c5a      	adds	r2, r3, #1
    4d02:	f241 23dc 	movw	r3, #4828	; 0x12dc
    4d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d0a:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4d0c:	f001 f898 	bl	5e40 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4d10:	f241 23c8 	movw	r3, #4808	; 0x12c8
    4d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d18:	681b      	ldr	r3, [r3, #0]
    4d1a:	2b00      	cmp	r3, #0
    4d1c:	d004      	beq.n	4d28 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4d1e:	687b      	ldr	r3, [r7, #4]
    4d20:	2b00      	cmp	r3, #0
    4d22:	d101      	bne.n	4d28 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    4d24:	f001 f868 	bl	5df8 <vPortYieldFromISR>
			}
		}
	}
    4d28:	3710      	adds	r7, #16
    4d2a:	46bd      	mov	sp, r7
    4d2c:	bd80      	pop	{r7, pc}
    4d2e:	bf00      	nop

00004d30 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4d30:	b580      	push	{r7, lr}
    4d32:	b086      	sub	sp, #24
    4d34:	af00      	add	r7, sp, #0
    4d36:	6078      	str	r0, [r7, #4]
    4d38:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4d3a:	2300      	movs	r3, #0
    4d3c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    4d3e:	f000 fa8b 	bl	5258 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4d42:	687b      	ldr	r3, [r7, #4]
    4d44:	681a      	ldr	r2, [r3, #0]
    4d46:	683b      	ldr	r3, [r7, #0]
    4d48:	4413      	add	r3, r2
    4d4a:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    4d4c:	687b      	ldr	r3, [r7, #4]
    4d4e:	681a      	ldr	r2, [r3, #0]
    4d50:	f241 23bc 	movw	r3, #4796	; 0x12bc
    4d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d58:	681b      	ldr	r3, [r3, #0]
    4d5a:	429a      	cmp	r2, r3
    4d5c:	d90f      	bls.n	4d7e <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    4d5e:	687b      	ldr	r3, [r7, #4]
    4d60:	681a      	ldr	r2, [r3, #0]
    4d62:	693b      	ldr	r3, [r7, #16]
    4d64:	429a      	cmp	r2, r3
    4d66:	d919      	bls.n	4d9c <vTaskDelayUntil+0x6c>
    4d68:	f241 23bc 	movw	r3, #4796	; 0x12bc
    4d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d70:	681b      	ldr	r3, [r3, #0]
    4d72:	693a      	ldr	r2, [r7, #16]
    4d74:	429a      	cmp	r2, r3
    4d76:	d911      	bls.n	4d9c <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4d78:	2301      	movs	r3, #1
    4d7a:	617b      	str	r3, [r7, #20]
    4d7c:	e00e      	b.n	4d9c <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4d7e:	687b      	ldr	r3, [r7, #4]
    4d80:	681a      	ldr	r2, [r3, #0]
    4d82:	693b      	ldr	r3, [r7, #16]
    4d84:	429a      	cmp	r2, r3
    4d86:	d807      	bhi.n	4d98 <vTaskDelayUntil+0x68>
    4d88:	f241 23bc 	movw	r3, #4796	; 0x12bc
    4d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d90:	681b      	ldr	r3, [r3, #0]
    4d92:	693a      	ldr	r2, [r7, #16]
    4d94:	429a      	cmp	r2, r3
    4d96:	d901      	bls.n	4d9c <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4d98:	2301      	movs	r3, #1
    4d9a:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4d9c:	687b      	ldr	r3, [r7, #4]
    4d9e:	693a      	ldr	r2, [r7, #16]
    4da0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    4da2:	697b      	ldr	r3, [r7, #20]
    4da4:	2b00      	cmp	r3, #0
    4da6:	d00b      	beq.n	4dc0 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4da8:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4db0:	681b      	ldr	r3, [r3, #0]
    4db2:	3304      	adds	r3, #4
    4db4:	4618      	mov	r0, r3
    4db6:	f7ff fa7b 	bl	42b0 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4dba:	6938      	ldr	r0, [r7, #16]
    4dbc:	f000 fe3c 	bl	5a38 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4dc0:	f000 fa5c 	bl	527c <xTaskResumeAll>
    4dc4:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4dc6:	68fb      	ldr	r3, [r7, #12]
    4dc8:	2b00      	cmp	r3, #0
    4dca:	d101      	bne.n	4dd0 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    4dcc:	f001 f814 	bl	5df8 <vPortYieldFromISR>
		}
	}
    4dd0:	3718      	adds	r7, #24
    4dd2:	46bd      	mov	sp, r7
    4dd4:	bd80      	pop	{r7, pc}
    4dd6:	bf00      	nop

00004dd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4dd8:	b580      	push	{r7, lr}
    4dda:	b084      	sub	sp, #16
    4ddc:	af00      	add	r7, sp, #0
    4dde:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4de0:	2300      	movs	r3, #0
    4de2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4de4:	687b      	ldr	r3, [r7, #4]
    4de6:	2b00      	cmp	r3, #0
    4de8:	d018      	beq.n	4e1c <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4dea:	f000 fa35 	bl	5258 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4dee:	f241 23bc 	movw	r3, #4796	; 0x12bc
    4df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4df6:	681a      	ldr	r2, [r3, #0]
    4df8:	687b      	ldr	r3, [r7, #4]
    4dfa:	4413      	add	r3, r2
    4dfc:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4dfe:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e06:	681b      	ldr	r3, [r3, #0]
    4e08:	3304      	adds	r3, #4
    4e0a:	4618      	mov	r0, r3
    4e0c:	f7ff fa50 	bl	42b0 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4e10:	68b8      	ldr	r0, [r7, #8]
    4e12:	f000 fe11 	bl	5a38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4e16:	f000 fa31 	bl	527c <xTaskResumeAll>
    4e1a:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4e1c:	68fb      	ldr	r3, [r7, #12]
    4e1e:	2b00      	cmp	r3, #0
    4e20:	d101      	bne.n	4e26 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    4e22:	f000 ffe9 	bl	5df8 <vPortYieldFromISR>
		}
	}
    4e26:	3710      	adds	r7, #16
    4e28:	46bd      	mov	sp, r7
    4e2a:	bd80      	pop	{r7, pc}

00004e2c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4e2c:	b580      	push	{r7, lr}
    4e2e:	b084      	sub	sp, #16
    4e30:	af00      	add	r7, sp, #0
    4e32:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4e34:	f000 ffee 	bl	5e14 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4e38:	687b      	ldr	r3, [r7, #4]
    4e3a:	2b00      	cmp	r3, #0
    4e3c:	d105      	bne.n	4e4a <uxTaskPriorityGet+0x1e>
    4e3e:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e46:	681b      	ldr	r3, [r3, #0]
    4e48:	e000      	b.n	4e4c <uxTaskPriorityGet+0x20>
    4e4a:	687b      	ldr	r3, [r7, #4]
    4e4c:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    4e4e:	68fb      	ldr	r3, [r7, #12]
    4e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e52:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    4e54:	f000 fff4 	bl	5e40 <vPortExitCritical>

		return uxReturn;
    4e58:	68bb      	ldr	r3, [r7, #8]
	}
    4e5a:	4618      	mov	r0, r3
    4e5c:	3710      	adds	r7, #16
    4e5e:	46bd      	mov	sp, r7
    4e60:	bd80      	pop	{r7, pc}
    4e62:	bf00      	nop

00004e64 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    4e64:	b580      	push	{r7, lr}
    4e66:	b086      	sub	sp, #24
    4e68:	af00      	add	r7, sp, #0
    4e6a:	6078      	str	r0, [r7, #4]
    4e6c:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4e6e:	2300      	movs	r3, #0
    4e70:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    4e72:	683b      	ldr	r3, [r7, #0]
    4e74:	2b04      	cmp	r3, #4
    4e76:	d901      	bls.n	4e7c <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4e78:	2304      	movs	r3, #4
    4e7a:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4e7c:	f000 ffca 	bl	5e14 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4e80:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e88:	681b      	ldr	r3, [r3, #0]
    4e8a:	687a      	ldr	r2, [r7, #4]
    4e8c:	429a      	cmp	r2, r3
    4e8e:	d101      	bne.n	4e94 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4e90:	2300      	movs	r3, #0
    4e92:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4e94:	687b      	ldr	r3, [r7, #4]
    4e96:	2b00      	cmp	r3, #0
    4e98:	d105      	bne.n	4ea6 <vTaskPrioritySet+0x42>
    4e9a:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ea2:	681b      	ldr	r3, [r3, #0]
    4ea4:	e000      	b.n	4ea8 <vTaskPrioritySet+0x44>
    4ea6:	687b      	ldr	r3, [r7, #4]
    4ea8:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    4eaa:	693b      	ldr	r3, [r7, #16]
    4eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4eae:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    4eb0:	68fa      	ldr	r2, [r7, #12]
    4eb2:	683b      	ldr	r3, [r7, #0]
    4eb4:	429a      	cmp	r2, r3
    4eb6:	d058      	beq.n	4f6a <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4eb8:	683a      	ldr	r2, [r7, #0]
    4eba:	68fb      	ldr	r3, [r7, #12]
    4ebc:	429a      	cmp	r2, r3
    4ebe:	d905      	bls.n	4ecc <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4ec0:	687b      	ldr	r3, [r7, #4]
    4ec2:	2b00      	cmp	r3, #0
    4ec4:	d007      	beq.n	4ed6 <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    4ec6:	2301      	movs	r3, #1
    4ec8:	617b      	str	r3, [r7, #20]
    4eca:	e004      	b.n	4ed6 <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4ecc:	687b      	ldr	r3, [r7, #4]
    4ece:	2b00      	cmp	r3, #0
    4ed0:	d101      	bne.n	4ed6 <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    4ed2:	2301      	movs	r3, #1
    4ed4:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4ed6:	693b      	ldr	r3, [r7, #16]
    4ed8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4eda:	693b      	ldr	r3, [r7, #16]
    4edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4ede:	429a      	cmp	r2, r3
    4ee0:	d102      	bne.n	4ee8 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    4ee2:	693b      	ldr	r3, [r7, #16]
    4ee4:	683a      	ldr	r2, [r7, #0]
    4ee6:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4ee8:	693b      	ldr	r3, [r7, #16]
    4eea:	683a      	ldr	r2, [r7, #0]
    4eec:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    4eee:	683b      	ldr	r3, [r7, #0]
    4ef0:	f1c3 0205 	rsb	r2, r3, #5
    4ef4:	693b      	ldr	r3, [r7, #16]
    4ef6:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4ef8:	693b      	ldr	r3, [r7, #16]
    4efa:	6959      	ldr	r1, [r3, #20]
    4efc:	68fa      	ldr	r2, [r7, #12]
    4efe:	4613      	mov	r3, r2
    4f00:	009b      	lsls	r3, r3, #2
    4f02:	4413      	add	r3, r2
    4f04:	009b      	lsls	r3, r3, #2
    4f06:	f241 12e4 	movw	r2, #4580	; 0x11e4
    4f0a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4f0e:	4413      	add	r3, r2
    4f10:	4299      	cmp	r1, r3
    4f12:	d125      	bne.n	4f60 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4f14:	693b      	ldr	r3, [r7, #16]
    4f16:	3304      	adds	r3, #4
    4f18:	4618      	mov	r0, r3
    4f1a:	f7ff f9c9 	bl	42b0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4f1e:	693b      	ldr	r3, [r7, #16]
    4f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f22:	f241 23c4 	movw	r3, #4804	; 0x12c4
    4f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f2a:	681b      	ldr	r3, [r3, #0]
    4f2c:	429a      	cmp	r2, r3
    4f2e:	d906      	bls.n	4f3e <vTaskPrioritySet+0xda>
    4f30:	693b      	ldr	r3, [r7, #16]
    4f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f34:	f241 23c4 	movw	r3, #4804	; 0x12c4
    4f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f3c:	601a      	str	r2, [r3, #0]
    4f3e:	693b      	ldr	r3, [r7, #16]
    4f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f42:	4613      	mov	r3, r2
    4f44:	009b      	lsls	r3, r3, #2
    4f46:	4413      	add	r3, r2
    4f48:	009b      	lsls	r3, r3, #2
    4f4a:	f241 12e4 	movw	r2, #4580	; 0x11e4
    4f4e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4f52:	441a      	add	r2, r3
    4f54:	693b      	ldr	r3, [r7, #16]
    4f56:	3304      	adds	r3, #4
    4f58:	4610      	mov	r0, r2
    4f5a:	4619      	mov	r1, r3
    4f5c:	f7ff f948 	bl	41f0 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4f60:	697b      	ldr	r3, [r7, #20]
    4f62:	2b01      	cmp	r3, #1
    4f64:	d101      	bne.n	4f6a <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    4f66:	f000 ff47 	bl	5df8 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4f6a:	f000 ff69 	bl	5e40 <vPortExitCritical>
	}
    4f6e:	3718      	adds	r7, #24
    4f70:	46bd      	mov	sp, r7
    4f72:	bd80      	pop	{r7, pc}

00004f74 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    4f74:	b580      	push	{r7, lr}
    4f76:	b084      	sub	sp, #16
    4f78:	af00      	add	r7, sp, #0
    4f7a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4f7c:	f000 ff4a 	bl	5e14 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4f80:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f88:	681b      	ldr	r3, [r3, #0]
    4f8a:	687a      	ldr	r2, [r7, #4]
    4f8c:	429a      	cmp	r2, r3
    4f8e:	d101      	bne.n	4f94 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4f90:	2300      	movs	r3, #0
    4f92:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4f94:	687b      	ldr	r3, [r7, #4]
    4f96:	2b00      	cmp	r3, #0
    4f98:	d105      	bne.n	4fa6 <vTaskSuspend+0x32>
    4f9a:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fa2:	681b      	ldr	r3, [r3, #0]
    4fa4:	e000      	b.n	4fa8 <vTaskSuspend+0x34>
    4fa6:	687b      	ldr	r3, [r7, #4]
    4fa8:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4faa:	68fb      	ldr	r3, [r7, #12]
    4fac:	3304      	adds	r3, #4
    4fae:	4618      	mov	r0, r3
    4fb0:	f7ff f97e 	bl	42b0 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4fb4:	68fb      	ldr	r3, [r7, #12]
    4fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4fb8:	2b00      	cmp	r3, #0
    4fba:	d004      	beq.n	4fc6 <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4fbc:	68fb      	ldr	r3, [r7, #12]
    4fbe:	3318      	adds	r3, #24
    4fc0:	4618      	mov	r0, r3
    4fc2:	f7ff f975 	bl	42b0 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4fc6:	68fb      	ldr	r3, [r7, #12]
    4fc8:	3304      	adds	r3, #4
    4fca:	f241 20a4 	movw	r0, #4772	; 0x12a4
    4fce:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4fd2:	4619      	mov	r1, r3
    4fd4:	f7ff f90c 	bl	41f0 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4fd8:	f000 ff32 	bl	5e40 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4fdc:	687b      	ldr	r3, [r7, #4]
    4fde:	2b00      	cmp	r3, #0
    4fe0:	d11e      	bne.n	5020 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4fe2:	f241 23c8 	movw	r3, #4808	; 0x12c8
    4fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fea:	681b      	ldr	r3, [r3, #0]
    4fec:	2b00      	cmp	r3, #0
    4fee:	d002      	beq.n	4ff6 <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4ff0:	f000 ff02 	bl	5df8 <vPortYieldFromISR>
    4ff4:	e014      	b.n	5020 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4ff6:	f241 23a4 	movw	r3, #4772	; 0x12a4
    4ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ffe:	681a      	ldr	r2, [r3, #0]
    5000:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5008:	681b      	ldr	r3, [r3, #0]
    500a:	429a      	cmp	r2, r3
    500c:	d106      	bne.n	501c <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    500e:	f241 13e0 	movw	r3, #4576	; 0x11e0
    5012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5016:	2200      	movs	r2, #0
    5018:	601a      	str	r2, [r3, #0]
    501a:	e001      	b.n	5020 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    501c:	f000 fadc 	bl	55d8 <vTaskSwitchContext>
				}
			}
		}
	}
    5020:	3710      	adds	r7, #16
    5022:	46bd      	mov	sp, r7
    5024:	bd80      	pop	{r7, pc}
    5026:	bf00      	nop

00005028 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    5028:	b480      	push	{r7}
    502a:	b085      	sub	sp, #20
    502c:	af00      	add	r7, sp, #0
    502e:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    5030:	2300      	movs	r3, #0
    5032:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    5034:	687b      	ldr	r3, [r7, #4]
    5036:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    5038:	68bb      	ldr	r3, [r7, #8]
    503a:	695a      	ldr	r2, [r3, #20]
    503c:	f241 23a4 	movw	r3, #4772	; 0x12a4
    5040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5044:	429a      	cmp	r2, r3
    5046:	d10d      	bne.n	5064 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    5048:	68bb      	ldr	r3, [r7, #8]
    504a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    504c:	f241 2378 	movw	r3, #4728	; 0x1278
    5050:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5054:	429a      	cmp	r2, r3
    5056:	d005      	beq.n	5064 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    5058:	68bb      	ldr	r3, [r7, #8]
    505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    505c:	2b00      	cmp	r3, #0
    505e:	d101      	bne.n	5064 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    5060:	2301      	movs	r3, #1
    5062:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    5064:	68fb      	ldr	r3, [r7, #12]
	}
    5066:	4618      	mov	r0, r3
    5068:	3714      	adds	r7, #20
    506a:	46bd      	mov	sp, r7
    506c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5070:	4770      	bx	lr
    5072:	bf00      	nop

00005074 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    5074:	b580      	push	{r7, lr}
    5076:	b084      	sub	sp, #16
    5078:	af00      	add	r7, sp, #0
    507a:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    507c:	687b      	ldr	r3, [r7, #4]
    507e:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    5080:	68fb      	ldr	r3, [r7, #12]
    5082:	2b00      	cmp	r3, #0
    5084:	d043      	beq.n	510e <vTaskResume+0x9a>
    5086:	f241 13e0 	movw	r3, #4576	; 0x11e0
    508a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    508e:	681b      	ldr	r3, [r3, #0]
    5090:	68fa      	ldr	r2, [r7, #12]
    5092:	429a      	cmp	r2, r3
    5094:	d03b      	beq.n	510e <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    5096:	f000 febd 	bl	5e14 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    509a:	68f8      	ldr	r0, [r7, #12]
    509c:	f7ff ffc4 	bl	5028 <xTaskIsTaskSuspended>
    50a0:	4603      	mov	r3, r0
    50a2:	2b01      	cmp	r3, #1
    50a4:	d131      	bne.n	510a <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    50a6:	68fb      	ldr	r3, [r7, #12]
    50a8:	3304      	adds	r3, #4
    50aa:	4618      	mov	r0, r3
    50ac:	f7ff f900 	bl	42b0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    50b0:	68fb      	ldr	r3, [r7, #12]
    50b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50b4:	f241 23c4 	movw	r3, #4804	; 0x12c4
    50b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50bc:	681b      	ldr	r3, [r3, #0]
    50be:	429a      	cmp	r2, r3
    50c0:	d906      	bls.n	50d0 <vTaskResume+0x5c>
    50c2:	68fb      	ldr	r3, [r7, #12]
    50c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50c6:	f241 23c4 	movw	r3, #4804	; 0x12c4
    50ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50ce:	601a      	str	r2, [r3, #0]
    50d0:	68fb      	ldr	r3, [r7, #12]
    50d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50d4:	4613      	mov	r3, r2
    50d6:	009b      	lsls	r3, r3, #2
    50d8:	4413      	add	r3, r2
    50da:	009b      	lsls	r3, r3, #2
    50dc:	f241 12e4 	movw	r2, #4580	; 0x11e4
    50e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    50e4:	441a      	add	r2, r3
    50e6:	68fb      	ldr	r3, [r7, #12]
    50e8:	3304      	adds	r3, #4
    50ea:	4610      	mov	r0, r2
    50ec:	4619      	mov	r1, r3
    50ee:	f7ff f87f 	bl	41f0 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    50f2:	68fb      	ldr	r3, [r7, #12]
    50f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50f6:	f241 13e0 	movw	r3, #4576	; 0x11e0
    50fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50fe:	681b      	ldr	r3, [r3, #0]
    5100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5102:	429a      	cmp	r2, r3
    5104:	d301      	bcc.n	510a <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    5106:	f000 fe77 	bl	5df8 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    510a:	f000 fe99 	bl	5e40 <vPortExitCritical>
		}
	}
    510e:	3710      	adds	r7, #16
    5110:	46bd      	mov	sp, r7
    5112:	bd80      	pop	{r7, pc}

00005114 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    5114:	b580      	push	{r7, lr}
    5116:	b086      	sub	sp, #24
    5118:	af00      	add	r7, sp, #0
    511a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    511c:	2300      	movs	r3, #0
    511e:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    5120:	687b      	ldr	r3, [r7, #4]
    5122:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5124:	2300      	movs	r3, #0
    5126:	60fb      	str	r3, [r7, #12]
    5128:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    512c:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    5130:	6938      	ldr	r0, [r7, #16]
    5132:	f7ff ff79 	bl	5028 <xTaskIsTaskSuspended>
    5136:	4603      	mov	r3, r0
    5138:	2b01      	cmp	r3, #1
    513a:	d144      	bne.n	51c6 <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    513c:	f241 23cc 	movw	r3, #4812	; 0x12cc
    5140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5144:	681b      	ldr	r3, [r3, #0]
    5146:	2b00      	cmp	r3, #0
    5148:	d134      	bne.n	51b4 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    514a:	693b      	ldr	r3, [r7, #16]
    514c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    514e:	f241 13e0 	movw	r3, #4576	; 0x11e0
    5152:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5156:	681b      	ldr	r3, [r3, #0]
    5158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    515a:	429a      	cmp	r2, r3
    515c:	bf34      	ite	cc
    515e:	2300      	movcc	r3, #0
    5160:	2301      	movcs	r3, #1
    5162:	b2db      	uxtb	r3, r3
    5164:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    5166:	693b      	ldr	r3, [r7, #16]
    5168:	3304      	adds	r3, #4
    516a:	4618      	mov	r0, r3
    516c:	f7ff f8a0 	bl	42b0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5170:	693b      	ldr	r3, [r7, #16]
    5172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5174:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    517c:	681b      	ldr	r3, [r3, #0]
    517e:	429a      	cmp	r2, r3
    5180:	d906      	bls.n	5190 <xTaskResumeFromISR+0x7c>
    5182:	693b      	ldr	r3, [r7, #16]
    5184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5186:	f241 23c4 	movw	r3, #4804	; 0x12c4
    518a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    518e:	601a      	str	r2, [r3, #0]
    5190:	693b      	ldr	r3, [r7, #16]
    5192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5194:	4613      	mov	r3, r2
    5196:	009b      	lsls	r3, r3, #2
    5198:	4413      	add	r3, r2
    519a:	009b      	lsls	r3, r3, #2
    519c:	f241 12e4 	movw	r2, #4580	; 0x11e4
    51a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    51a4:	441a      	add	r2, r3
    51a6:	693b      	ldr	r3, [r7, #16]
    51a8:	3304      	adds	r3, #4
    51aa:	4610      	mov	r0, r2
    51ac:	4619      	mov	r1, r3
    51ae:	f7ff f81f 	bl	41f0 <vListInsertEnd>
    51b2:	e008      	b.n	51c6 <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    51b4:	693b      	ldr	r3, [r7, #16]
    51b6:	3318      	adds	r3, #24
    51b8:	f241 2078 	movw	r0, #4728	; 0x1278
    51bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    51c0:	4619      	mov	r1, r3
    51c2:	f7ff f815 	bl	41f0 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    51c6:	f04f 0000 	mov.w	r0, #0
    51ca:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    51ce:	697b      	ldr	r3, [r7, #20]
	}
    51d0:	4618      	mov	r0, r3
    51d2:	3718      	adds	r7, #24
    51d4:	46bd      	mov	sp, r7
    51d6:	bd80      	pop	{r7, pc}

000051d8 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    51d8:	b580      	push	{r7, lr}
    51da:	b086      	sub	sp, #24
    51dc:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    51de:	2300      	movs	r3, #0
    51e0:	9300      	str	r3, [sp, #0]
    51e2:	2300      	movs	r3, #0
    51e4:	9301      	str	r3, [sp, #4]
    51e6:	2300      	movs	r3, #0
    51e8:	9302      	str	r3, [sp, #8]
    51ea:	2300      	movs	r3, #0
    51ec:	9303      	str	r3, [sp, #12]
    51ee:	f645 0091 	movw	r0, #22673	; 0x5891
    51f2:	f2c0 0000 	movt	r0, #0
    51f6:	f648 11c4 	movw	r1, #35268	; 0x89c4
    51fa:	f2c0 0101 	movt	r1, #1
    51fe:	2280      	movs	r2, #128	; 0x80
    5200:	2300      	movs	r3, #0
    5202:	f7ff fc6b 	bl	4adc <xTaskGenericCreate>
    5206:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    5208:	687b      	ldr	r3, [r7, #4]
    520a:	2b01      	cmp	r3, #1
    520c:	d111      	bne.n	5232 <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    520e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5212:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    5216:	f241 23c8 	movw	r3, #4808	; 0x12c8
    521a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    521e:	2201      	movs	r2, #1
    5220:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    5222:	f241 23bc 	movw	r3, #4796	; 0x12bc
    5226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    522a:	2200      	movs	r2, #0
    522c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    522e:	f000 fdb5 	bl	5d9c <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    5232:	3708      	adds	r7, #8
    5234:	46bd      	mov	sp, r7
    5236:	bd80      	pop	{r7, pc}

00005238 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    5238:	b580      	push	{r7, lr}
    523a:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    523c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5240:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    5244:	f241 23c8 	movw	r3, #4808	; 0x12c8
    5248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    524c:	2200      	movs	r2, #0
    524e:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    5250:	f000 fdcc 	bl	5dec <vPortEndScheduler>
}
    5254:	bd80      	pop	{r7, pc}
    5256:	bf00      	nop

00005258 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    5258:	b480      	push	{r7}
    525a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    525c:	f241 23cc 	movw	r3, #4812	; 0x12cc
    5260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5264:	681b      	ldr	r3, [r3, #0]
    5266:	1c5a      	adds	r2, r3, #1
    5268:	f241 23cc 	movw	r3, #4812	; 0x12cc
    526c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5270:	601a      	str	r2, [r3, #0]
}
    5272:	46bd      	mov	sp, r7
    5274:	f85d 7b04 	ldr.w	r7, [sp], #4
    5278:	4770      	bx	lr
    527a:	bf00      	nop

0000527c <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    527c:	b590      	push	{r4, r7, lr}
    527e:	b083      	sub	sp, #12
    5280:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    5282:	2300      	movs	r3, #0
    5284:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    5286:	f000 fdc5 	bl	5e14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    528a:	f241 23cc 	movw	r3, #4812	; 0x12cc
    528e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5292:	681b      	ldr	r3, [r3, #0]
    5294:	1e5a      	subs	r2, r3, #1
    5296:	f241 23cc 	movw	r3, #4812	; 0x12cc
    529a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    529e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    52a0:	f241 23cc 	movw	r3, #4812	; 0x12cc
    52a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52a8:	681b      	ldr	r3, [r3, #0]
    52aa:	2b00      	cmp	r3, #0
    52ac:	d177      	bne.n	539e <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    52ae:	f241 23b8 	movw	r3, #4792	; 0x12b8
    52b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52b6:	681b      	ldr	r3, [r3, #0]
    52b8:	2b00      	cmp	r3, #0
    52ba:	d070      	beq.n	539e <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    52bc:	2300      	movs	r3, #0
    52be:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    52c0:	e036      	b.n	5330 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    52c2:	f241 2378 	movw	r3, #4728	; 0x1278
    52c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52ca:	68db      	ldr	r3, [r3, #12]
    52cc:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    52ce:	f104 0318 	add.w	r3, r4, #24
    52d2:	4618      	mov	r0, r3
    52d4:	f7fe ffec 	bl	42b0 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    52d8:	1d23      	adds	r3, r4, #4
    52da:	4618      	mov	r0, r3
    52dc:	f7fe ffe8 	bl	42b0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    52e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    52e2:	f241 23c4 	movw	r3, #4804	; 0x12c4
    52e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52ea:	681b      	ldr	r3, [r3, #0]
    52ec:	429a      	cmp	r2, r3
    52ee:	d905      	bls.n	52fc <xTaskResumeAll+0x80>
    52f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    52f2:	f241 23c4 	movw	r3, #4804	; 0x12c4
    52f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52fa:	601a      	str	r2, [r3, #0]
    52fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    52fe:	4613      	mov	r3, r2
    5300:	009b      	lsls	r3, r3, #2
    5302:	4413      	add	r3, r2
    5304:	009b      	lsls	r3, r3, #2
    5306:	f241 12e4 	movw	r2, #4580	; 0x11e4
    530a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    530e:	441a      	add	r2, r3
    5310:	1d23      	adds	r3, r4, #4
    5312:	4610      	mov	r0, r2
    5314:	4619      	mov	r1, r3
    5316:	f7fe ff6b 	bl	41f0 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    531a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    531c:	f241 13e0 	movw	r3, #4576	; 0x11e0
    5320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5324:	681b      	ldr	r3, [r3, #0]
    5326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5328:	429a      	cmp	r2, r3
    532a:	d301      	bcc.n	5330 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    532c:	2301      	movs	r3, #1
    532e:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    5330:	f241 2378 	movw	r3, #4728	; 0x1278
    5334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5338:	681b      	ldr	r3, [r3, #0]
    533a:	2b00      	cmp	r3, #0
    533c:	d1c1      	bne.n	52c2 <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    533e:	f241 23d0 	movw	r3, #4816	; 0x12d0
    5342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5346:	681b      	ldr	r3, [r3, #0]
    5348:	2b00      	cmp	r3, #0
    534a:	d014      	beq.n	5376 <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    534c:	e00c      	b.n	5368 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    534e:	f000 f865 	bl	541c <vTaskIncrementTick>
						--uxMissedTicks;
    5352:	f241 23d0 	movw	r3, #4816	; 0x12d0
    5356:	f2c2 0300 	movt	r3, #8192	; 0x2000
    535a:	681b      	ldr	r3, [r3, #0]
    535c:	1e5a      	subs	r2, r3, #1
    535e:	f241 23d0 	movw	r3, #4816	; 0x12d0
    5362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5366:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5368:	f241 23d0 	movw	r3, #4816	; 0x12d0
    536c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5370:	681b      	ldr	r3, [r3, #0]
    5372:	2b00      	cmp	r3, #0
    5374:	d1eb      	bne.n	534e <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    5376:	683b      	ldr	r3, [r7, #0]
    5378:	2b01      	cmp	r3, #1
    537a:	d006      	beq.n	538a <xTaskResumeAll+0x10e>
    537c:	f241 23d4 	movw	r3, #4820	; 0x12d4
    5380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5384:	681b      	ldr	r3, [r3, #0]
    5386:	2b01      	cmp	r3, #1
    5388:	d109      	bne.n	539e <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    538a:	2301      	movs	r3, #1
    538c:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    538e:	f241 23d4 	movw	r3, #4820	; 0x12d4
    5392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5396:	2200      	movs	r2, #0
    5398:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    539a:	f000 fd2d 	bl	5df8 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    539e:	f000 fd4f 	bl	5e40 <vPortExitCritical>

	return xAlreadyYielded;
    53a2:	687b      	ldr	r3, [r7, #4]
}
    53a4:	4618      	mov	r0, r3
    53a6:	370c      	adds	r7, #12
    53a8:	46bd      	mov	sp, r7
    53aa:	bd90      	pop	{r4, r7, pc}

000053ac <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    53ac:	b580      	push	{r7, lr}
    53ae:	b082      	sub	sp, #8
    53b0:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    53b2:	f000 fd2f 	bl	5e14 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    53b6:	f241 23bc 	movw	r3, #4796	; 0x12bc
    53ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53be:	681b      	ldr	r3, [r3, #0]
    53c0:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    53c2:	f000 fd3d 	bl	5e40 <vPortExitCritical>

	return xTicks;
    53c6:	687b      	ldr	r3, [r7, #4]
}
    53c8:	4618      	mov	r0, r3
    53ca:	3708      	adds	r7, #8
    53cc:	46bd      	mov	sp, r7
    53ce:	bd80      	pop	{r7, pc}

000053d0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    53d0:	b480      	push	{r7}
    53d2:	b083      	sub	sp, #12
    53d4:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    53d6:	2300      	movs	r3, #0
    53d8:	607b      	str	r3, [r7, #4]
    53da:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    53de:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    53e2:	f241 23bc 	movw	r3, #4796	; 0x12bc
    53e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ea:	681b      	ldr	r3, [r3, #0]
    53ec:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    53ee:	f04f 0000 	mov.w	r0, #0
    53f2:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    53f6:	683b      	ldr	r3, [r7, #0]
}
    53f8:	4618      	mov	r0, r3
    53fa:	370c      	adds	r7, #12
    53fc:	46bd      	mov	sp, r7
    53fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5402:	4770      	bx	lr

00005404 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    5404:	b480      	push	{r7}
    5406:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    5408:	f241 23b8 	movw	r3, #4792	; 0x12b8
    540c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5410:	681b      	ldr	r3, [r3, #0]
}
    5412:	4618      	mov	r0, r3
    5414:	46bd      	mov	sp, r7
    5416:	f85d 7b04 	ldr.w	r7, [sp], #4
    541a:	4770      	bx	lr

0000541c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    541c:	b580      	push	{r7, lr}
    541e:	b084      	sub	sp, #16
    5420:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5422:	f241 23cc 	movw	r3, #4812	; 0x12cc
    5426:	f2c2 0300 	movt	r3, #8192	; 0x2000
    542a:	681b      	ldr	r3, [r3, #0]
    542c:	2b00      	cmp	r3, #0
    542e:	f040 80b9 	bne.w	55a4 <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    5432:	f241 23bc 	movw	r3, #4796	; 0x12bc
    5436:	f2c2 0300 	movt	r3, #8192	; 0x2000
    543a:	681b      	ldr	r3, [r3, #0]
    543c:	1c5a      	adds	r2, r3, #1
    543e:	f241 23bc 	movw	r3, #4796	; 0x12bc
    5442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5446:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    5448:	f241 23bc 	movw	r3, #4796	; 0x12bc
    544c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5450:	681b      	ldr	r3, [r3, #0]
    5452:	2b00      	cmp	r3, #0
    5454:	d13f      	bne.n	54d6 <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    5456:	f241 2370 	movw	r3, #4720	; 0x1270
    545a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    545e:	681b      	ldr	r3, [r3, #0]
    5460:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    5462:	f241 2374 	movw	r3, #4724	; 0x1274
    5466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    546a:	681a      	ldr	r2, [r3, #0]
    546c:	f241 2370 	movw	r3, #4720	; 0x1270
    5470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5474:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    5476:	f241 2374 	movw	r3, #4724	; 0x1274
    547a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    547e:	68fa      	ldr	r2, [r7, #12]
    5480:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    5482:	f241 23d8 	movw	r3, #4824	; 0x12d8
    5486:	f2c2 0300 	movt	r3, #8192	; 0x2000
    548a:	681b      	ldr	r3, [r3, #0]
    548c:	1c5a      	adds	r2, r3, #1
    548e:	f241 23d8 	movw	r3, #4824	; 0x12d8
    5492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5496:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    5498:	f241 2370 	movw	r3, #4720	; 0x1270
    549c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54a0:	681b      	ldr	r3, [r3, #0]
    54a2:	681b      	ldr	r3, [r3, #0]
    54a4:	2b00      	cmp	r3, #0
    54a6:	d107      	bne.n	54b8 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    54a8:	f240 5330 	movw	r3, #1328	; 0x530
    54ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54b0:	f04f 32ff 	mov.w	r2, #4294967295
    54b4:	601a      	str	r2, [r3, #0]
    54b6:	e00e      	b.n	54d6 <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    54b8:	f241 2370 	movw	r3, #4720	; 0x1270
    54bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54c0:	681b      	ldr	r3, [r3, #0]
    54c2:	68db      	ldr	r3, [r3, #12]
    54c4:	68db      	ldr	r3, [r3, #12]
    54c6:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    54c8:	68bb      	ldr	r3, [r7, #8]
    54ca:	685a      	ldr	r2, [r3, #4]
    54cc:	f240 5330 	movw	r3, #1328	; 0x530
    54d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54d4:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    54d6:	f241 23bc 	movw	r3, #4796	; 0x12bc
    54da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54de:	681a      	ldr	r2, [r3, #0]
    54e0:	f240 5330 	movw	r3, #1328	; 0x530
    54e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54e8:	681b      	ldr	r3, [r3, #0]
    54ea:	429a      	cmp	r2, r3
    54ec:	d359      	bcc.n	55a2 <vTaskIncrementTick+0x186>
    54ee:	f241 2370 	movw	r3, #4720	; 0x1270
    54f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54f6:	681b      	ldr	r3, [r3, #0]
    54f8:	681b      	ldr	r3, [r3, #0]
    54fa:	2b00      	cmp	r3, #0
    54fc:	d107      	bne.n	550e <vTaskIncrementTick+0xf2>
    54fe:	f240 5330 	movw	r3, #1328	; 0x530
    5502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5506:	f04f 32ff 	mov.w	r2, #4294967295
    550a:	601a      	str	r2, [r3, #0]
    550c:	e049      	b.n	55a2 <vTaskIncrementTick+0x186>
    550e:	f241 2370 	movw	r3, #4720	; 0x1270
    5512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5516:	681b      	ldr	r3, [r3, #0]
    5518:	68db      	ldr	r3, [r3, #12]
    551a:	68db      	ldr	r3, [r3, #12]
    551c:	60bb      	str	r3, [r7, #8]
    551e:	68bb      	ldr	r3, [r7, #8]
    5520:	685b      	ldr	r3, [r3, #4]
    5522:	607b      	str	r3, [r7, #4]
    5524:	f241 23bc 	movw	r3, #4796	; 0x12bc
    5528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    552c:	681a      	ldr	r2, [r3, #0]
    552e:	687b      	ldr	r3, [r7, #4]
    5530:	429a      	cmp	r2, r3
    5532:	d206      	bcs.n	5542 <vTaskIncrementTick+0x126>
    5534:	f240 5330 	movw	r3, #1328	; 0x530
    5538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    553c:	687a      	ldr	r2, [r7, #4]
    553e:	601a      	str	r2, [r3, #0]
    5540:	e02f      	b.n	55a2 <vTaskIncrementTick+0x186>
    5542:	68bb      	ldr	r3, [r7, #8]
    5544:	3304      	adds	r3, #4
    5546:	4618      	mov	r0, r3
    5548:	f7fe feb2 	bl	42b0 <vListRemove>
    554c:	68bb      	ldr	r3, [r7, #8]
    554e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5550:	2b00      	cmp	r3, #0
    5552:	d004      	beq.n	555e <vTaskIncrementTick+0x142>
    5554:	68bb      	ldr	r3, [r7, #8]
    5556:	3318      	adds	r3, #24
    5558:	4618      	mov	r0, r3
    555a:	f7fe fea9 	bl	42b0 <vListRemove>
    555e:	68bb      	ldr	r3, [r7, #8]
    5560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5562:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5566:	f2c2 0300 	movt	r3, #8192	; 0x2000
    556a:	681b      	ldr	r3, [r3, #0]
    556c:	429a      	cmp	r2, r3
    556e:	d906      	bls.n	557e <vTaskIncrementTick+0x162>
    5570:	68bb      	ldr	r3, [r7, #8]
    5572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5574:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5578:	f2c2 0300 	movt	r3, #8192	; 0x2000
    557c:	601a      	str	r2, [r3, #0]
    557e:	68bb      	ldr	r3, [r7, #8]
    5580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5582:	4613      	mov	r3, r2
    5584:	009b      	lsls	r3, r3, #2
    5586:	4413      	add	r3, r2
    5588:	009b      	lsls	r3, r3, #2
    558a:	f241 12e4 	movw	r2, #4580	; 0x11e4
    558e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5592:	441a      	add	r2, r3
    5594:	68bb      	ldr	r3, [r7, #8]
    5596:	3304      	adds	r3, #4
    5598:	4610      	mov	r0, r2
    559a:	4619      	mov	r1, r3
    559c:	f7fe fe28 	bl	41f0 <vListInsertEnd>
    55a0:	e7a5      	b.n	54ee <vTaskIncrementTick+0xd2>
    55a2:	e00c      	b.n	55be <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    55a4:	f241 23d0 	movw	r3, #4816	; 0x12d0
    55a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55ac:	681b      	ldr	r3, [r3, #0]
    55ae:	1c5a      	adds	r2, r3, #1
    55b0:	f241 23d0 	movw	r3, #4816	; 0x12d0
    55b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55b8:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    55ba:	f012 f909 	bl	177d0 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    55be:	f241 23d0 	movw	r3, #4816	; 0x12d0
    55c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55c6:	681b      	ldr	r3, [r3, #0]
    55c8:	2b00      	cmp	r3, #0
    55ca:	d101      	bne.n	55d0 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    55cc:	f012 f900 	bl	177d0 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    55d0:	3710      	adds	r7, #16
    55d2:	46bd      	mov	sp, r7
    55d4:	bd80      	pop	{r7, pc}
    55d6:	bf00      	nop

000055d8 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    55d8:	b580      	push	{r7, lr}
    55da:	b082      	sub	sp, #8
    55dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    55de:	f241 23cc 	movw	r3, #4812	; 0x12cc
    55e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55e6:	681b      	ldr	r3, [r3, #0]
    55e8:	2b00      	cmp	r3, #0
    55ea:	d006      	beq.n	55fa <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    55ec:	f241 23d4 	movw	r3, #4820	; 0x12d4
    55f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55f4:	2201      	movs	r2, #1
    55f6:	601a      	str	r2, [r3, #0]
    55f8:	e047      	b.n	568a <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    55fa:	f012 f8e3 	bl	177c4 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    55fe:	e00a      	b.n	5616 <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    5600:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5608:	681b      	ldr	r3, [r3, #0]
    560a:	1e5a      	subs	r2, r3, #1
    560c:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5614:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    5616:	f241 23c4 	movw	r3, #4804	; 0x12c4
    561a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    561e:	6819      	ldr	r1, [r3, #0]
    5620:	f241 12e4 	movw	r2, #4580	; 0x11e4
    5624:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5628:	460b      	mov	r3, r1
    562a:	009b      	lsls	r3, r3, #2
    562c:	440b      	add	r3, r1
    562e:	009b      	lsls	r3, r3, #2
    5630:	4413      	add	r3, r2
    5632:	681b      	ldr	r3, [r3, #0]
    5634:	2b00      	cmp	r3, #0
    5636:	d0e3      	beq.n	5600 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    5638:	f241 23c4 	movw	r3, #4804	; 0x12c4
    563c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5640:	681a      	ldr	r2, [r3, #0]
    5642:	4613      	mov	r3, r2
    5644:	009b      	lsls	r3, r3, #2
    5646:	4413      	add	r3, r2
    5648:	009b      	lsls	r3, r3, #2
    564a:	f241 12e4 	movw	r2, #4580	; 0x11e4
    564e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5652:	4413      	add	r3, r2
    5654:	607b      	str	r3, [r7, #4]
    5656:	687b      	ldr	r3, [r7, #4]
    5658:	685b      	ldr	r3, [r3, #4]
    565a:	685a      	ldr	r2, [r3, #4]
    565c:	687b      	ldr	r3, [r7, #4]
    565e:	605a      	str	r2, [r3, #4]
    5660:	687b      	ldr	r3, [r7, #4]
    5662:	685a      	ldr	r2, [r3, #4]
    5664:	687b      	ldr	r3, [r7, #4]
    5666:	3308      	adds	r3, #8
    5668:	429a      	cmp	r2, r3
    566a:	d104      	bne.n	5676 <vTaskSwitchContext+0x9e>
    566c:	687b      	ldr	r3, [r7, #4]
    566e:	685b      	ldr	r3, [r3, #4]
    5670:	685a      	ldr	r2, [r3, #4]
    5672:	687b      	ldr	r3, [r7, #4]
    5674:	605a      	str	r2, [r3, #4]
    5676:	687b      	ldr	r3, [r7, #4]
    5678:	685b      	ldr	r3, [r3, #4]
    567a:	68da      	ldr	r2, [r3, #12]
    567c:	f241 13e0 	movw	r3, #4576	; 0x11e0
    5680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5684:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    5686:	f012 f897 	bl	177b8 <myTraceSwitchedIn>
	}
}
    568a:	3708      	adds	r7, #8
    568c:	46bd      	mov	sp, r7
    568e:	bd80      	pop	{r7, pc}

00005690 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    5690:	b580      	push	{r7, lr}
    5692:	b084      	sub	sp, #16
    5694:	af00      	add	r7, sp, #0
    5696:	6078      	str	r0, [r7, #4]
    5698:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    569a:	f241 13e0 	movw	r3, #4576	; 0x11e0
    569e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56a2:	681b      	ldr	r3, [r3, #0]
    56a4:	3318      	adds	r3, #24
    56a6:	6878      	ldr	r0, [r7, #4]
    56a8:	4619      	mov	r1, r3
    56aa:	f7fe fdc9 	bl	4240 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    56ae:	f241 13e0 	movw	r3, #4576	; 0x11e0
    56b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56b6:	681b      	ldr	r3, [r3, #0]
    56b8:	3304      	adds	r3, #4
    56ba:	4618      	mov	r0, r3
    56bc:	f7fe fdf8 	bl	42b0 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    56c0:	683b      	ldr	r3, [r7, #0]
    56c2:	f1b3 3fff 	cmp.w	r3, #4294967295
    56c6:	d10d      	bne.n	56e4 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    56c8:	f241 13e0 	movw	r3, #4576	; 0x11e0
    56cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56d0:	681b      	ldr	r3, [r3, #0]
    56d2:	3304      	adds	r3, #4
    56d4:	f241 20a4 	movw	r0, #4772	; 0x12a4
    56d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    56dc:	4619      	mov	r1, r3
    56de:	f7fe fd87 	bl	41f0 <vListInsertEnd>
    56e2:	e00a      	b.n	56fa <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    56e4:	f241 23bc 	movw	r3, #4796	; 0x12bc
    56e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56ec:	681a      	ldr	r2, [r3, #0]
    56ee:	683b      	ldr	r3, [r7, #0]
    56f0:	4413      	add	r3, r2
    56f2:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    56f4:	68f8      	ldr	r0, [r7, #12]
    56f6:	f000 f99f 	bl	5a38 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    56fa:	3710      	adds	r7, #16
    56fc:	46bd      	mov	sp, r7
    56fe:	bd80      	pop	{r7, pc}

00005700 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    5700:	b580      	push	{r7, lr}
    5702:	b084      	sub	sp, #16
    5704:	af00      	add	r7, sp, #0
    5706:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5708:	687b      	ldr	r3, [r7, #4]
    570a:	68db      	ldr	r3, [r3, #12]
    570c:	68db      	ldr	r3, [r3, #12]
    570e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    5710:	68bb      	ldr	r3, [r7, #8]
    5712:	3318      	adds	r3, #24
    5714:	4618      	mov	r0, r3
    5716:	f7fe fdcb 	bl	42b0 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    571a:	f241 23cc 	movw	r3, #4812	; 0x12cc
    571e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5722:	681b      	ldr	r3, [r3, #0]
    5724:	2b00      	cmp	r3, #0
    5726:	d126      	bne.n	5776 <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    5728:	68bb      	ldr	r3, [r7, #8]
    572a:	3304      	adds	r3, #4
    572c:	4618      	mov	r0, r3
    572e:	f7fe fdbf 	bl	42b0 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    5732:	68bb      	ldr	r3, [r7, #8]
    5734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5736:	f241 23c4 	movw	r3, #4804	; 0x12c4
    573a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    573e:	681b      	ldr	r3, [r3, #0]
    5740:	429a      	cmp	r2, r3
    5742:	d906      	bls.n	5752 <xTaskRemoveFromEventList+0x52>
    5744:	68bb      	ldr	r3, [r7, #8]
    5746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5748:	f241 23c4 	movw	r3, #4804	; 0x12c4
    574c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5750:	601a      	str	r2, [r3, #0]
    5752:	68bb      	ldr	r3, [r7, #8]
    5754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5756:	4613      	mov	r3, r2
    5758:	009b      	lsls	r3, r3, #2
    575a:	4413      	add	r3, r2
    575c:	009b      	lsls	r3, r3, #2
    575e:	f241 12e4 	movw	r2, #4580	; 0x11e4
    5762:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5766:	441a      	add	r2, r3
    5768:	68bb      	ldr	r3, [r7, #8]
    576a:	3304      	adds	r3, #4
    576c:	4610      	mov	r0, r2
    576e:	4619      	mov	r1, r3
    5770:	f7fe fd3e 	bl	41f0 <vListInsertEnd>
    5774:	e008      	b.n	5788 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    5776:	68bb      	ldr	r3, [r7, #8]
    5778:	3318      	adds	r3, #24
    577a:	f241 2078 	movw	r0, #4728	; 0x1278
    577e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5782:	4619      	mov	r1, r3
    5784:	f7fe fd34 	bl	41f0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5788:	68bb      	ldr	r3, [r7, #8]
    578a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    578c:	f241 13e0 	movw	r3, #4576	; 0x11e0
    5790:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5794:	681b      	ldr	r3, [r3, #0]
    5796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5798:	429a      	cmp	r2, r3
    579a:	d302      	bcc.n	57a2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    579c:	2301      	movs	r3, #1
    579e:	60fb      	str	r3, [r7, #12]
    57a0:	e001      	b.n	57a6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    57a2:	2300      	movs	r3, #0
    57a4:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    57a6:	68fb      	ldr	r3, [r7, #12]
}
    57a8:	4618      	mov	r0, r3
    57aa:	3710      	adds	r7, #16
    57ac:	46bd      	mov	sp, r7
    57ae:	bd80      	pop	{r7, pc}

000057b0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    57b0:	b480      	push	{r7}
    57b2:	b083      	sub	sp, #12
    57b4:	af00      	add	r7, sp, #0
    57b6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    57b8:	f241 23d8 	movw	r3, #4824	; 0x12d8
    57bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57c0:	681a      	ldr	r2, [r3, #0]
    57c2:	687b      	ldr	r3, [r7, #4]
    57c4:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    57c6:	f241 23bc 	movw	r3, #4796	; 0x12bc
    57ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57ce:	681a      	ldr	r2, [r3, #0]
    57d0:	687b      	ldr	r3, [r7, #4]
    57d2:	605a      	str	r2, [r3, #4]
}
    57d4:	370c      	adds	r7, #12
    57d6:	46bd      	mov	sp, r7
    57d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    57dc:	4770      	bx	lr
    57de:	bf00      	nop

000057e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    57e0:	b580      	push	{r7, lr}
    57e2:	b084      	sub	sp, #16
    57e4:	af00      	add	r7, sp, #0
    57e6:	6078      	str	r0, [r7, #4]
    57e8:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    57ea:	f000 fb13 	bl	5e14 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    57ee:	683b      	ldr	r3, [r7, #0]
    57f0:	681b      	ldr	r3, [r3, #0]
    57f2:	f1b3 3fff 	cmp.w	r3, #4294967295
    57f6:	d102      	bne.n	57fe <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    57f8:	2300      	movs	r3, #0
    57fa:	60fb      	str	r3, [r7, #12]
    57fc:	e035      	b.n	586a <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    57fe:	687b      	ldr	r3, [r7, #4]
    5800:	681a      	ldr	r2, [r3, #0]
    5802:	f241 23d8 	movw	r3, #4824	; 0x12d8
    5806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    580a:	681b      	ldr	r3, [r3, #0]
    580c:	429a      	cmp	r2, r3
    580e:	d00b      	beq.n	5828 <xTaskCheckForTimeOut+0x48>
    5810:	687b      	ldr	r3, [r7, #4]
    5812:	685a      	ldr	r2, [r3, #4]
    5814:	f241 23bc 	movw	r3, #4796	; 0x12bc
    5818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    581c:	681b      	ldr	r3, [r3, #0]
    581e:	429a      	cmp	r2, r3
    5820:	d802      	bhi.n	5828 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    5822:	2301      	movs	r3, #1
    5824:	60fb      	str	r3, [r7, #12]
    5826:	e020      	b.n	586a <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    5828:	f241 23bc 	movw	r3, #4796	; 0x12bc
    582c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5830:	681a      	ldr	r2, [r3, #0]
    5832:	687b      	ldr	r3, [r7, #4]
    5834:	685b      	ldr	r3, [r3, #4]
    5836:	1ad2      	subs	r2, r2, r3
    5838:	683b      	ldr	r3, [r7, #0]
    583a:	681b      	ldr	r3, [r3, #0]
    583c:	429a      	cmp	r2, r3
    583e:	d212      	bcs.n	5866 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    5840:	683b      	ldr	r3, [r7, #0]
    5842:	681a      	ldr	r2, [r3, #0]
    5844:	687b      	ldr	r3, [r7, #4]
    5846:	6859      	ldr	r1, [r3, #4]
    5848:	f241 23bc 	movw	r3, #4796	; 0x12bc
    584c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5850:	681b      	ldr	r3, [r3, #0]
    5852:	1acb      	subs	r3, r1, r3
    5854:	441a      	add	r2, r3
    5856:	683b      	ldr	r3, [r7, #0]
    5858:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    585a:	6878      	ldr	r0, [r7, #4]
    585c:	f7ff ffa8 	bl	57b0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    5860:	2300      	movs	r3, #0
    5862:	60fb      	str	r3, [r7, #12]
    5864:	e001      	b.n	586a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    5866:	2301      	movs	r3, #1
    5868:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    586a:	f000 fae9 	bl	5e40 <vPortExitCritical>

	return xReturn;
    586e:	68fb      	ldr	r3, [r7, #12]
}
    5870:	4618      	mov	r0, r3
    5872:	3710      	adds	r7, #16
    5874:	46bd      	mov	sp, r7
    5876:	bd80      	pop	{r7, pc}

00005878 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    5878:	b480      	push	{r7}
    587a:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    587c:	f241 23d4 	movw	r3, #4820	; 0x12d4
    5880:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5884:	2201      	movs	r2, #1
    5886:	601a      	str	r2, [r3, #0]
}
    5888:	46bd      	mov	sp, r7
    588a:	f85d 7b04 	ldr.w	r7, [sp], #4
    588e:	4770      	bx	lr

00005890 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    5890:	b580      	push	{r7, lr}
    5892:	b082      	sub	sp, #8
    5894:	af00      	add	r7, sp, #0
    5896:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    5898:	f000 f886 	bl	59a8 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    589c:	f000 faac 	bl	5df8 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    58a0:	e7fa      	b.n	5898 <prvIdleTask+0x8>
    58a2:	bf00      	nop

000058a4 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    58a4:	b580      	push	{r7, lr}
    58a6:	b084      	sub	sp, #16
    58a8:	af00      	add	r7, sp, #0
    58aa:	60f8      	str	r0, [r7, #12]
    58ac:	60b9      	str	r1, [r7, #8]
    58ae:	607a      	str	r2, [r7, #4]
    58b0:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    58b2:	68fb      	ldr	r3, [r7, #12]
    58b4:	3334      	adds	r3, #52	; 0x34
    58b6:	4618      	mov	r0, r3
    58b8:	68b9      	ldr	r1, [r7, #8]
    58ba:	2210      	movs	r2, #16
    58bc:	f013 f824 	bl	18908 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    58c0:	68fb      	ldr	r3, [r7, #12]
    58c2:	2200      	movs	r2, #0
    58c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    58c8:	687b      	ldr	r3, [r7, #4]
    58ca:	2b04      	cmp	r3, #4
    58cc:	d901      	bls.n	58d2 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    58ce:	2304      	movs	r3, #4
    58d0:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    58d2:	68fb      	ldr	r3, [r7, #12]
    58d4:	687a      	ldr	r2, [r7, #4]
    58d6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    58d8:	68fb      	ldr	r3, [r7, #12]
    58da:	687a      	ldr	r2, [r7, #4]
    58dc:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    58de:	68fb      	ldr	r3, [r7, #12]
    58e0:	3304      	adds	r3, #4
    58e2:	4618      	mov	r0, r3
    58e4:	f7fe fc78 	bl	41d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    58e8:	68fb      	ldr	r3, [r7, #12]
    58ea:	3318      	adds	r3, #24
    58ec:	4618      	mov	r0, r3
    58ee:	f7fe fc73 	bl	41d8 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    58f2:	68fb      	ldr	r3, [r7, #12]
    58f4:	68fa      	ldr	r2, [r7, #12]
    58f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    58f8:	687b      	ldr	r3, [r7, #4]
    58fa:	f1c3 0205 	rsb	r2, r3, #5
    58fe:	68fb      	ldr	r3, [r7, #12]
    5900:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    5902:	68fb      	ldr	r3, [r7, #12]
    5904:	68fa      	ldr	r2, [r7, #12]
    5906:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    5908:	3710      	adds	r7, #16
    590a:	46bd      	mov	sp, r7
    590c:	bd80      	pop	{r7, pc}
    590e:	bf00      	nop

00005910 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    5910:	b580      	push	{r7, lr}
    5912:	b082      	sub	sp, #8
    5914:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5916:	2300      	movs	r3, #0
    5918:	607b      	str	r3, [r7, #4]
    591a:	e00f      	b.n	593c <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    591c:	687a      	ldr	r2, [r7, #4]
    591e:	4613      	mov	r3, r2
    5920:	009b      	lsls	r3, r3, #2
    5922:	4413      	add	r3, r2
    5924:	009b      	lsls	r3, r3, #2
    5926:	f241 12e4 	movw	r2, #4580	; 0x11e4
    592a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    592e:	4413      	add	r3, r2
    5930:	4618      	mov	r0, r3
    5932:	f7fe fc31 	bl	4198 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5936:	687b      	ldr	r3, [r7, #4]
    5938:	3301      	adds	r3, #1
    593a:	607b      	str	r3, [r7, #4]
    593c:	687b      	ldr	r3, [r7, #4]
    593e:	2b04      	cmp	r3, #4
    5940:	d9ec      	bls.n	591c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    5942:	f241 2048 	movw	r0, #4680	; 0x1248
    5946:	f2c2 0000 	movt	r0, #8192	; 0x2000
    594a:	f7fe fc25 	bl	4198 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    594e:	f241 205c 	movw	r0, #4700	; 0x125c
    5952:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5956:	f7fe fc1f 	bl	4198 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    595a:	f241 2078 	movw	r0, #4728	; 0x1278
    595e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5962:	f7fe fc19 	bl	4198 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    5966:	f241 208c 	movw	r0, #4748	; 0x128c
    596a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    596e:	f7fe fc13 	bl	4198 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    5972:	f241 20a4 	movw	r0, #4772	; 0x12a4
    5976:	f2c2 0000 	movt	r0, #8192	; 0x2000
    597a:	f7fe fc0d 	bl	4198 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    597e:	f241 2370 	movw	r3, #4720	; 0x1270
    5982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5986:	f241 2248 	movw	r2, #4680	; 0x1248
    598a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    598e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    5990:	f241 2374 	movw	r3, #4724	; 0x1274
    5994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5998:	f241 225c 	movw	r2, #4700	; 0x125c
    599c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    59a0:	601a      	str	r2, [r3, #0]
}
    59a2:	3708      	adds	r7, #8
    59a4:	46bd      	mov	sp, r7
    59a6:	bd80      	pop	{r7, pc}

000059a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    59a8:	b580      	push	{r7, lr}
    59aa:	b082      	sub	sp, #8
    59ac:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    59ae:	f241 23a0 	movw	r3, #4768	; 0x12a0
    59b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59b6:	681b      	ldr	r3, [r3, #0]
    59b8:	2b00      	cmp	r3, #0
    59ba:	d03a      	beq.n	5a32 <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    59bc:	f7ff fc4c 	bl	5258 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    59c0:	f241 238c 	movw	r3, #4748	; 0x128c
    59c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59c8:	681b      	ldr	r3, [r3, #0]
    59ca:	2b00      	cmp	r3, #0
    59cc:	bf14      	ite	ne
    59ce:	2300      	movne	r3, #0
    59d0:	2301      	moveq	r3, #1
    59d2:	b2db      	uxtb	r3, r3
    59d4:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    59d6:	f7ff fc51 	bl	527c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    59da:	687b      	ldr	r3, [r7, #4]
    59dc:	2b00      	cmp	r3, #0
    59de:	d128      	bne.n	5a32 <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    59e0:	f000 fa18 	bl	5e14 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    59e4:	f241 238c 	movw	r3, #4748	; 0x128c
    59e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59ec:	68db      	ldr	r3, [r3, #12]
    59ee:	68db      	ldr	r3, [r3, #12]
    59f0:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    59f2:	683b      	ldr	r3, [r7, #0]
    59f4:	3304      	adds	r3, #4
    59f6:	4618      	mov	r0, r3
    59f8:	f7fe fc5a 	bl	42b0 <vListRemove>
					--uxCurrentNumberOfTasks;
    59fc:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a04:	681b      	ldr	r3, [r3, #0]
    5a06:	1e5a      	subs	r2, r3, #1
    5a08:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a10:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    5a12:	f241 23a0 	movw	r3, #4768	; 0x12a0
    5a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a1a:	681b      	ldr	r3, [r3, #0]
    5a1c:	1e5a      	subs	r2, r3, #1
    5a1e:	f241 23a0 	movw	r3, #4768	; 0x12a0
    5a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a26:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    5a28:	f000 fa0a 	bl	5e40 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    5a2c:	6838      	ldr	r0, [r7, #0]
    5a2e:	f000 f879 	bl	5b24 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    5a32:	3708      	adds	r7, #8
    5a34:	46bd      	mov	sp, r7
    5a36:	bd80      	pop	{r7, pc}

00005a38 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    5a38:	b580      	push	{r7, lr}
    5a3a:	b082      	sub	sp, #8
    5a3c:	af00      	add	r7, sp, #0
    5a3e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    5a40:	f241 13e0 	movw	r3, #4576	; 0x11e0
    5a44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a48:	681b      	ldr	r3, [r3, #0]
    5a4a:	687a      	ldr	r2, [r7, #4]
    5a4c:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    5a4e:	f241 23bc 	movw	r3, #4796	; 0x12bc
    5a52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a56:	681b      	ldr	r3, [r3, #0]
    5a58:	687a      	ldr	r2, [r7, #4]
    5a5a:	429a      	cmp	r2, r3
    5a5c:	d20f      	bcs.n	5a7e <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5a5e:	f241 2374 	movw	r3, #4724	; 0x1274
    5a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a66:	681a      	ldr	r2, [r3, #0]
    5a68:	f241 13e0 	movw	r3, #4576	; 0x11e0
    5a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a70:	681b      	ldr	r3, [r3, #0]
    5a72:	3304      	adds	r3, #4
    5a74:	4610      	mov	r0, r2
    5a76:	4619      	mov	r1, r3
    5a78:	f7fe fbe2 	bl	4240 <vListInsert>
    5a7c:	e01c      	b.n	5ab8 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5a7e:	f241 2370 	movw	r3, #4720	; 0x1270
    5a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a86:	681a      	ldr	r2, [r3, #0]
    5a88:	f241 13e0 	movw	r3, #4576	; 0x11e0
    5a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a90:	681b      	ldr	r3, [r3, #0]
    5a92:	3304      	adds	r3, #4
    5a94:	4610      	mov	r0, r2
    5a96:	4619      	mov	r1, r3
    5a98:	f7fe fbd2 	bl	4240 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    5a9c:	f240 5330 	movw	r3, #1328	; 0x530
    5aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aa4:	681b      	ldr	r3, [r3, #0]
    5aa6:	687a      	ldr	r2, [r7, #4]
    5aa8:	429a      	cmp	r2, r3
    5aaa:	d205      	bcs.n	5ab8 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    5aac:	f240 5330 	movw	r3, #1328	; 0x530
    5ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ab4:	687a      	ldr	r2, [r7, #4]
    5ab6:	601a      	str	r2, [r3, #0]
		}
	}
}
    5ab8:	3708      	adds	r7, #8
    5aba:	46bd      	mov	sp, r7
    5abc:	bd80      	pop	{r7, pc}
    5abe:	bf00      	nop

00005ac0 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    5ac0:	b580      	push	{r7, lr}
    5ac2:	b084      	sub	sp, #16
    5ac4:	af00      	add	r7, sp, #0
    5ac6:	4603      	mov	r3, r0
    5ac8:	6039      	str	r1, [r7, #0]
    5aca:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    5acc:	2050      	movs	r0, #80	; 0x50
    5ace:	f000 fa19 	bl	5f04 <pvPortMalloc>
    5ad2:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    5ad4:	68fb      	ldr	r3, [r7, #12]
    5ad6:	2b00      	cmp	r3, #0
    5ad8:	d01f      	beq.n	5b1a <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    5ada:	683b      	ldr	r3, [r7, #0]
    5adc:	2b00      	cmp	r3, #0
    5ade:	d106      	bne.n	5aee <prvAllocateTCBAndStack+0x2e>
    5ae0:	88fb      	ldrh	r3, [r7, #6]
    5ae2:	009b      	lsls	r3, r3, #2
    5ae4:	4618      	mov	r0, r3
    5ae6:	f000 fa0d 	bl	5f04 <pvPortMalloc>
    5aea:	4603      	mov	r3, r0
    5aec:	e000      	b.n	5af0 <prvAllocateTCBAndStack+0x30>
    5aee:	683b      	ldr	r3, [r7, #0]
    5af0:	68fa      	ldr	r2, [r7, #12]
    5af2:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    5af4:	68fb      	ldr	r3, [r7, #12]
    5af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5af8:	2b00      	cmp	r3, #0
    5afa:	d105      	bne.n	5b08 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    5afc:	68f8      	ldr	r0, [r7, #12]
    5afe:	f000 fac5 	bl	608c <vPortFree>
			pxNewTCB = NULL;
    5b02:	2300      	movs	r3, #0
    5b04:	60fb      	str	r3, [r7, #12]
    5b06:	e008      	b.n	5b1a <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5b08:	68fb      	ldr	r3, [r7, #12]
    5b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5b0c:	88fb      	ldrh	r3, [r7, #6]
    5b0e:	009b      	lsls	r3, r3, #2
    5b10:	4610      	mov	r0, r2
    5b12:	21a5      	movs	r1, #165	; 0xa5
    5b14:	461a      	mov	r2, r3
    5b16:	f012 fea7 	bl	18868 <memset>
		}
	}

	return pxNewTCB;
    5b1a:	68fb      	ldr	r3, [r7, #12]
}
    5b1c:	4618      	mov	r0, r3
    5b1e:	3710      	adds	r7, #16
    5b20:	46bd      	mov	sp, r7
    5b22:	bd80      	pop	{r7, pc}

00005b24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    5b24:	b580      	push	{r7, lr}
    5b26:	b082      	sub	sp, #8
    5b28:	af00      	add	r7, sp, #0
    5b2a:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    5b2c:	687b      	ldr	r3, [r7, #4]
    5b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5b30:	4618      	mov	r0, r3
    5b32:	f000 faab 	bl	608c <vPortFree>
		vPortFree( pxTCB );
    5b36:	6878      	ldr	r0, [r7, #4]
    5b38:	f000 faa8 	bl	608c <vPortFree>
	}
    5b3c:	3708      	adds	r7, #8
    5b3e:	46bd      	mov	sp, r7
    5b40:	bd80      	pop	{r7, pc}
    5b42:	bf00      	nop

00005b44 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    5b44:	b480      	push	{r7}
    5b46:	b083      	sub	sp, #12
    5b48:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    5b4a:	f241 13e0 	movw	r3, #4576	; 0x11e0
    5b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b52:	681b      	ldr	r3, [r3, #0]
    5b54:	607b      	str	r3, [r7, #4]

		return xReturn;
    5b56:	687b      	ldr	r3, [r7, #4]
	}
    5b58:	4618      	mov	r0, r3
    5b5a:	370c      	adds	r7, #12
    5b5c:	46bd      	mov	sp, r7
    5b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b62:	4770      	bx	lr

00005b64 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    5b64:	b580      	push	{r7, lr}
    5b66:	b084      	sub	sp, #16
    5b68:	af00      	add	r7, sp, #0
    5b6a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5b6c:	687b      	ldr	r3, [r7, #4]
    5b6e:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    5b70:	68fb      	ldr	r3, [r7, #12]
    5b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b74:	f241 13e0 	movw	r3, #4576	; 0x11e0
    5b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b7c:	681b      	ldr	r3, [r3, #0]
    5b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5b80:	429a      	cmp	r2, r3
    5b82:	d24f      	bcs.n	5c24 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    5b84:	f241 13e0 	movw	r3, #4576	; 0x11e0
    5b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b8c:	681b      	ldr	r3, [r3, #0]
    5b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5b90:	f1c3 0205 	rsb	r2, r3, #5
    5b94:	68fb      	ldr	r3, [r7, #12]
    5b96:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    5b98:	68fb      	ldr	r3, [r7, #12]
    5b9a:	6959      	ldr	r1, [r3, #20]
    5b9c:	68fb      	ldr	r3, [r7, #12]
    5b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5ba0:	4613      	mov	r3, r2
    5ba2:	009b      	lsls	r3, r3, #2
    5ba4:	4413      	add	r3, r2
    5ba6:	009b      	lsls	r3, r3, #2
    5ba8:	f241 12e4 	movw	r2, #4580	; 0x11e4
    5bac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5bb0:	4413      	add	r3, r2
    5bb2:	4299      	cmp	r1, r3
    5bb4:	d12e      	bne.n	5c14 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    5bb6:	68fb      	ldr	r3, [r7, #12]
    5bb8:	3304      	adds	r3, #4
    5bba:	4618      	mov	r0, r3
    5bbc:	f7fe fb78 	bl	42b0 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5bc0:	f241 13e0 	movw	r3, #4576	; 0x11e0
    5bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bc8:	681b      	ldr	r3, [r3, #0]
    5bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5bcc:	68fb      	ldr	r3, [r7, #12]
    5bce:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    5bd0:	68fb      	ldr	r3, [r7, #12]
    5bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5bd4:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bdc:	681b      	ldr	r3, [r3, #0]
    5bde:	429a      	cmp	r2, r3
    5be0:	d906      	bls.n	5bf0 <vTaskPriorityInherit+0x8c>
    5be2:	68fb      	ldr	r3, [r7, #12]
    5be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5be6:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bee:	601a      	str	r2, [r3, #0]
    5bf0:	68fb      	ldr	r3, [r7, #12]
    5bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5bf4:	4613      	mov	r3, r2
    5bf6:	009b      	lsls	r3, r3, #2
    5bf8:	4413      	add	r3, r2
    5bfa:	009b      	lsls	r3, r3, #2
    5bfc:	f241 12e4 	movw	r2, #4580	; 0x11e4
    5c00:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5c04:	441a      	add	r2, r3
    5c06:	68fb      	ldr	r3, [r7, #12]
    5c08:	3304      	adds	r3, #4
    5c0a:	4610      	mov	r0, r2
    5c0c:	4619      	mov	r1, r3
    5c0e:	f7fe faef 	bl	41f0 <vListInsertEnd>
    5c12:	e007      	b.n	5c24 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5c14:	f241 13e0 	movw	r3, #4576	; 0x11e0
    5c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c1c:	681b      	ldr	r3, [r3, #0]
    5c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c20:	68fb      	ldr	r3, [r7, #12]
    5c22:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    5c24:	3710      	adds	r7, #16
    5c26:	46bd      	mov	sp, r7
    5c28:	bd80      	pop	{r7, pc}
    5c2a:	bf00      	nop

00005c2c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    5c2c:	b580      	push	{r7, lr}
    5c2e:	b084      	sub	sp, #16
    5c30:	af00      	add	r7, sp, #0
    5c32:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5c34:	687b      	ldr	r3, [r7, #4]
    5c36:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5c38:	687b      	ldr	r3, [r7, #4]
    5c3a:	2b00      	cmp	r3, #0
    5c3c:	d035      	beq.n	5caa <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    5c3e:	68fb      	ldr	r3, [r7, #12]
    5c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c42:	68fb      	ldr	r3, [r7, #12]
    5c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5c46:	429a      	cmp	r2, r3
    5c48:	d02f      	beq.n	5caa <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    5c4a:	68fb      	ldr	r3, [r7, #12]
    5c4c:	3304      	adds	r3, #4
    5c4e:	4618      	mov	r0, r3
    5c50:	f7fe fb2e 	bl	42b0 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5c54:	68fb      	ldr	r3, [r7, #12]
    5c56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5c58:	68fb      	ldr	r3, [r7, #12]
    5c5a:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    5c5c:	68fb      	ldr	r3, [r7, #12]
    5c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5c60:	f1c3 0205 	rsb	r2, r3, #5
    5c64:	68fb      	ldr	r3, [r7, #12]
    5c66:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    5c68:	68fb      	ldr	r3, [r7, #12]
    5c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c6c:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c74:	681b      	ldr	r3, [r3, #0]
    5c76:	429a      	cmp	r2, r3
    5c78:	d906      	bls.n	5c88 <vTaskPriorityDisinherit+0x5c>
    5c7a:	68fb      	ldr	r3, [r7, #12]
    5c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c7e:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c86:	601a      	str	r2, [r3, #0]
    5c88:	68fb      	ldr	r3, [r7, #12]
    5c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c8c:	4613      	mov	r3, r2
    5c8e:	009b      	lsls	r3, r3, #2
    5c90:	4413      	add	r3, r2
    5c92:	009b      	lsls	r3, r3, #2
    5c94:	f241 12e4 	movw	r2, #4580	; 0x11e4
    5c98:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5c9c:	441a      	add	r2, r3
    5c9e:	68fb      	ldr	r3, [r7, #12]
    5ca0:	3304      	adds	r3, #4
    5ca2:	4610      	mov	r0, r2
    5ca4:	4619      	mov	r1, r3
    5ca6:	f7fe faa3 	bl	41f0 <vListInsertEnd>
			}
		}
	}
    5caa:	3710      	adds	r7, #16
    5cac:	46bd      	mov	sp, r7
    5cae:	bd80      	pop	{r7, pc}

00005cb0 <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    5cb0:	b480      	push	{r7}
    5cb2:	b083      	sub	sp, #12
    5cb4:	af00      	add	r7, sp, #0
    5cb6:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    5cb8:	687b      	ldr	r3, [r7, #4]
    5cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    5cbc:	4618      	mov	r0, r3
    5cbe:	370c      	adds	r7, #12
    5cc0:	46bd      	mov	sp, r7
    5cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cc6:	4770      	bx	lr

00005cc8 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    5cc8:	b480      	push	{r7}
    5cca:	b083      	sub	sp, #12
    5ccc:	af00      	add	r7, sp, #0
    5cce:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    5cd0:	687b      	ldr	r3, [r7, #4]
    5cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    5cd4:	4618      	mov	r0, r3
    5cd6:	370c      	adds	r7, #12
    5cd8:	46bd      	mov	sp, r7
    5cda:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cde:	4770      	bx	lr

00005ce0 <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    5ce0:	b480      	push	{r7}
    5ce2:	b083      	sub	sp, #12
    5ce4:	af00      	add	r7, sp, #0
    5ce6:	6078      	str	r0, [r7, #4]
    5ce8:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    5cea:	687b      	ldr	r3, [r7, #4]
    5cec:	683a      	ldr	r2, [r7, #0]
    5cee:	645a      	str	r2, [r3, #68]	; 0x44
    }
    5cf0:	370c      	adds	r7, #12
    5cf2:	46bd      	mov	sp, r7
    5cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cf8:	4770      	bx	lr
    5cfa:	bf00      	nop

00005cfc <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    5cfc:	b480      	push	{r7}
    5cfe:	b083      	sub	sp, #12
    5d00:	af00      	add	r7, sp, #0
    5d02:	6078      	str	r0, [r7, #4]
    5d04:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    5d06:	687b      	ldr	r3, [r7, #4]
    5d08:	683a      	ldr	r2, [r7, #0]
    5d0a:	649a      	str	r2, [r3, #72]	; 0x48
    }
    5d0c:	370c      	adds	r7, #12
    5d0e:	46bd      	mov	sp, r7
    5d10:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d14:	4770      	bx	lr
    5d16:	bf00      	nop

00005d18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5d18:	b480      	push	{r7}
    5d1a:	b085      	sub	sp, #20
    5d1c:	af00      	add	r7, sp, #0
    5d1e:	60f8      	str	r0, [r7, #12]
    5d20:	60b9      	str	r1, [r7, #8]
    5d22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5d24:	68fb      	ldr	r3, [r7, #12]
    5d26:	3b04      	subs	r3, #4
    5d28:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5d2a:	68fb      	ldr	r3, [r7, #12]
    5d2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5d30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5d32:	68fb      	ldr	r3, [r7, #12]
    5d34:	3b04      	subs	r3, #4
    5d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5d38:	68ba      	ldr	r2, [r7, #8]
    5d3a:	68fb      	ldr	r3, [r7, #12]
    5d3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5d3e:	68fb      	ldr	r3, [r7, #12]
    5d40:	3b04      	subs	r3, #4
    5d42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    5d44:	68fb      	ldr	r3, [r7, #12]
    5d46:	2200      	movs	r2, #0
    5d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5d4a:	68fb      	ldr	r3, [r7, #12]
    5d4c:	3b14      	subs	r3, #20
    5d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    5d50:	687a      	ldr	r2, [r7, #4]
    5d52:	68fb      	ldr	r3, [r7, #12]
    5d54:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5d56:	68fb      	ldr	r3, [r7, #12]
    5d58:	3b20      	subs	r3, #32
    5d5a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5d5c:	68fb      	ldr	r3, [r7, #12]
}
    5d5e:	4618      	mov	r0, r3
    5d60:	3714      	adds	r7, #20
    5d62:	46bd      	mov	sp, r7
    5d64:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d68:	4770      	bx	lr
    5d6a:	bf00      	nop

00005d6c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5d6c:	4b06      	ldr	r3, [pc, #24]	; (5d88 <pxCurrentTCBConst2>)
    5d6e:	6819      	ldr	r1, [r3, #0]
    5d70:	6808      	ldr	r0, [r1, #0]
    5d72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5d76:	f380 8809 	msr	PSP, r0
    5d7a:	f04f 0000 	mov.w	r0, #0
    5d7e:	f380 8811 	msr	BASEPRI, r0
    5d82:	f04e 0e0d 	orr.w	lr, lr, #13
    5d86:	4770      	bx	lr

00005d88 <pxCurrentTCBConst2>:
    5d88:	200011e0 	.word	0x200011e0

00005d8c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    5d8c:	485c      	ldr	r0, [pc, #368]	; (5f00 <prvSetupTimerInterrupt+0x28>)
    5d8e:	6800      	ldr	r0, [r0, #0]
    5d90:	6800      	ldr	r0, [r0, #0]
    5d92:	f380 8808 	msr	MSP, r0
    5d96:	b662      	cpsie	i
    5d98:	df00      	svc	0
    5d9a:	bf00      	nop

00005d9c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    5d9c:	b580      	push	{r7, lr}
    5d9e:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    5da0:	f64e 5320 	movw	r3, #60704	; 0xed20
    5da4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5da8:	f64e 5220 	movw	r2, #60704	; 0xed20
    5dac:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5db0:	6812      	ldr	r2, [r2, #0]
    5db2:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    5db6:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5db8:	f64e 5320 	movw	r3, #60704	; 0xed20
    5dbc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5dc0:	f64e 5220 	movw	r2, #60704	; 0xed20
    5dc4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5dc8:	6812      	ldr	r2, [r2, #0]
    5dca:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    5dce:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5dd0:	f000 f882 	bl	5ed8 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5dd4:	f240 5334 	movw	r3, #1332	; 0x534
    5dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ddc:	2200      	movs	r2, #0
    5dde:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5de0:	f7ff ffd4 	bl	5d8c <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5de4:	2300      	movs	r3, #0
}
    5de6:	4618      	mov	r0, r3
    5de8:	bd80      	pop	{r7, pc}
    5dea:	bf00      	nop

00005dec <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5dec:	b480      	push	{r7}
    5dee:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5df0:	46bd      	mov	sp, r7
    5df2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5df6:	4770      	bx	lr

00005df8 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5df8:	b480      	push	{r7}
    5dfa:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5dfc:	f64e 5304 	movw	r3, #60676	; 0xed04
    5e00:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5e08:	601a      	str	r2, [r3, #0]
}
    5e0a:	46bd      	mov	sp, r7
    5e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e10:	4770      	bx	lr
    5e12:	bf00      	nop

00005e14 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5e14:	b480      	push	{r7}
    5e16:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5e18:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5e1c:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5e20:	f240 5334 	movw	r3, #1332	; 0x534
    5e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e28:	681b      	ldr	r3, [r3, #0]
    5e2a:	1c5a      	adds	r2, r3, #1
    5e2c:	f240 5334 	movw	r3, #1332	; 0x534
    5e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e34:	601a      	str	r2, [r3, #0]
}
    5e36:	46bd      	mov	sp, r7
    5e38:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e3c:	4770      	bx	lr
    5e3e:	bf00      	nop

00005e40 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5e40:	b480      	push	{r7}
    5e42:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5e44:	f240 5334 	movw	r3, #1332	; 0x534
    5e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e4c:	681b      	ldr	r3, [r3, #0]
    5e4e:	1e5a      	subs	r2, r3, #1
    5e50:	f240 5334 	movw	r3, #1332	; 0x534
    5e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e58:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5e5a:	f240 5334 	movw	r3, #1332	; 0x534
    5e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e62:	681b      	ldr	r3, [r3, #0]
    5e64:	2b00      	cmp	r3, #0
    5e66:	d103      	bne.n	5e70 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5e68:	f04f 0000 	mov.w	r0, #0
    5e6c:	f380 8811 	msr	BASEPRI, r0
	}
}
    5e70:	46bd      	mov	sp, r7
    5e72:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e76:	4770      	bx	lr

00005e78 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5e78:	f3ef 8009 	mrs	r0, PSP
    5e7c:	4b0c      	ldr	r3, [pc, #48]	; (5eb0 <pxCurrentTCBConst>)
    5e7e:	681a      	ldr	r2, [r3, #0]
    5e80:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5e84:	6010      	str	r0, [r2, #0]
    5e86:	e92d 4008 	stmdb	sp!, {r3, lr}
    5e8a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5e8e:	f380 8811 	msr	BASEPRI, r0
    5e92:	f7ff fba1 	bl	55d8 <vTaskSwitchContext>
    5e96:	f04f 0000 	mov.w	r0, #0
    5e9a:	f380 8811 	msr	BASEPRI, r0
    5e9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5ea2:	6819      	ldr	r1, [r3, #0]
    5ea4:	6808      	ldr	r0, [r1, #0]
    5ea6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5eaa:	f380 8809 	msr	PSP, r0
    5eae:	4770      	bx	lr

00005eb0 <pxCurrentTCBConst>:
    5eb0:	200011e0 	.word	0x200011e0

00005eb4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5eb4:	b580      	push	{r7, lr}
    5eb6:	b082      	sub	sp, #8
    5eb8:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5eba:	2300      	movs	r3, #0
    5ebc:	607b      	str	r3, [r7, #4]
    5ebe:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5ec2:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    5ec6:	f7ff faa9 	bl	541c <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5eca:	f04f 0000 	mov.w	r0, #0
    5ece:	f380 8811 	msr	BASEPRI, r0
}
    5ed2:	3708      	adds	r7, #8
    5ed4:	46bd      	mov	sp, r7
    5ed6:	bd80      	pop	{r7, pc}

00005ed8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5ed8:	b480      	push	{r7}
    5eda:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5edc:	f24e 0314 	movw	r3, #57364	; 0xe014
    5ee0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5ee4:	f245 425f 	movw	r2, #21599	; 0x545f
    5ee8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5eea:	f24e 0310 	movw	r3, #57360	; 0xe010
    5eee:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5ef2:	2207      	movs	r2, #7
    5ef4:	601a      	str	r2, [r3, #0]
}
    5ef6:	46bd      	mov	sp, r7
    5ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5efc:	4770      	bx	lr
    5efe:	0000      	.short	0x0000
    5f00:	e000ed08 	.word	0xe000ed08

00005f04 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5f04:	b580      	push	{r7, lr}
    5f06:	b08a      	sub	sp, #40	; 0x28
    5f08:	af00      	add	r7, sp, #0
    5f0a:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5f0c:	2300      	movs	r3, #0
    5f0e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5f10:	f7ff f9a2 	bl	5258 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5f14:	f24c 23f0 	movw	r3, #49904	; 0xc2f0
    5f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f1c:	681b      	ldr	r3, [r3, #0]
    5f1e:	2b00      	cmp	r3, #0
    5f20:	d130      	bne.n	5f84 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5f22:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5f26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f2a:	f241 22e0 	movw	r2, #4832	; 0x12e0
    5f2e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5f32:	601a      	str	r2, [r3, #0]
    5f34:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f3c:	2200      	movs	r2, #0
    5f3e:	605a      	str	r2, [r3, #4]
    5f40:	f24c 23e8 	movw	r3, #49896	; 0xc2e8
    5f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f48:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5f4c:	605a      	str	r2, [r3, #4]
    5f4e:	f24c 23e8 	movw	r3, #49896	; 0xc2e8
    5f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f56:	2200      	movs	r2, #0
    5f58:	601a      	str	r2, [r3, #0]
    5f5a:	f241 23e0 	movw	r3, #4832	; 0x12e0
    5f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f62:	617b      	str	r3, [r7, #20]
    5f64:	697b      	ldr	r3, [r7, #20]
    5f66:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5f6a:	605a      	str	r2, [r3, #4]
    5f6c:	697a      	ldr	r2, [r7, #20]
    5f6e:	f24c 23e8 	movw	r3, #49896	; 0xc2e8
    5f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f76:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5f78:	f24c 23f0 	movw	r3, #49904	; 0xc2f0
    5f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f80:	2201      	movs	r2, #1
    5f82:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5f84:	687b      	ldr	r3, [r7, #4]
    5f86:	2b00      	cmp	r3, #0
    5f88:	d00d      	beq.n	5fa6 <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5f8a:	2310      	movs	r3, #16
    5f8c:	687a      	ldr	r2, [r7, #4]
    5f8e:	4413      	add	r3, r2
    5f90:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5f92:	687b      	ldr	r3, [r7, #4]
    5f94:	f003 0307 	and.w	r3, r3, #7
    5f98:	2b00      	cmp	r3, #0
    5f9a:	d004      	beq.n	5fa6 <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5f9c:	687b      	ldr	r3, [r7, #4]
    5f9e:	f023 0307 	bic.w	r3, r3, #7
    5fa2:	3308      	adds	r3, #8
    5fa4:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5fa6:	687b      	ldr	r3, [r7, #4]
    5fa8:	2b00      	cmp	r3, #0
    5faa:	d068      	beq.n	607e <pvPortMalloc+0x17a>
    5fac:	687b      	ldr	r3, [r7, #4]
    5fae:	f5b3 2f96 	cmp.w	r3, #307200	; 0x4b000
    5fb2:	d264      	bcs.n	607e <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5fb4:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5fb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fbc:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5fbe:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fc6:	681b      	ldr	r3, [r3, #0]
    5fc8:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5fca:	e004      	b.n	5fd6 <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fce:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fd2:	681b      	ldr	r3, [r3, #0]
    5fd4:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fd8:	685a      	ldr	r2, [r3, #4]
    5fda:	687b      	ldr	r3, [r7, #4]
    5fdc:	429a      	cmp	r2, r3
    5fde:	d203      	bcs.n	5fe8 <pvPortMalloc+0xe4>
    5fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fe2:	681b      	ldr	r3, [r3, #0]
    5fe4:	2b00      	cmp	r3, #0
    5fe6:	d1f1      	bne.n	5fcc <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5fea:	f24c 23e8 	movw	r3, #49896	; 0xc2e8
    5fee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ff2:	429a      	cmp	r2, r3
    5ff4:	d043      	beq.n	607e <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5ff6:	6a3b      	ldr	r3, [r7, #32]
    5ff8:	681a      	ldr	r2, [r3, #0]
    5ffa:	2310      	movs	r3, #16
    5ffc:	4413      	add	r3, r2
    5ffe:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    6000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6002:	681a      	ldr	r2, [r3, #0]
    6004:	6a3b      	ldr	r3, [r7, #32]
    6006:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    6008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    600a:	685a      	ldr	r2, [r3, #4]
    600c:	687b      	ldr	r3, [r7, #4]
    600e:	1ad2      	subs	r2, r2, r3
    6010:	2310      	movs	r3, #16
    6012:	005b      	lsls	r3, r3, #1
    6014:	429a      	cmp	r2, r3
    6016:	d925      	bls.n	6064 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    6018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    601a:	687b      	ldr	r3, [r7, #4]
    601c:	4413      	add	r3, r2
    601e:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    6020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6022:	685a      	ldr	r2, [r3, #4]
    6024:	687b      	ldr	r3, [r7, #4]
    6026:	1ad2      	subs	r2, r2, r3
    6028:	693b      	ldr	r3, [r7, #16]
    602a:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    602e:	687a      	ldr	r2, [r7, #4]
    6030:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    6032:	693b      	ldr	r3, [r7, #16]
    6034:	685b      	ldr	r3, [r3, #4]
    6036:	60fb      	str	r3, [r7, #12]
    6038:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    603c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6040:	61bb      	str	r3, [r7, #24]
    6042:	e002      	b.n	604a <pvPortMalloc+0x146>
    6044:	69bb      	ldr	r3, [r7, #24]
    6046:	681b      	ldr	r3, [r3, #0]
    6048:	61bb      	str	r3, [r7, #24]
    604a:	69bb      	ldr	r3, [r7, #24]
    604c:	681b      	ldr	r3, [r3, #0]
    604e:	685a      	ldr	r2, [r3, #4]
    6050:	68fb      	ldr	r3, [r7, #12]
    6052:	429a      	cmp	r2, r3
    6054:	d3f6      	bcc.n	6044 <pvPortMalloc+0x140>
    6056:	69bb      	ldr	r3, [r7, #24]
    6058:	681a      	ldr	r2, [r3, #0]
    605a:	693b      	ldr	r3, [r7, #16]
    605c:	601a      	str	r2, [r3, #0]
    605e:	69bb      	ldr	r3, [r7, #24]
    6060:	693a      	ldr	r2, [r7, #16]
    6062:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    6064:	f240 5338 	movw	r3, #1336	; 0x538
    6068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    606c:	681a      	ldr	r2, [r3, #0]
    606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6070:	685b      	ldr	r3, [r3, #4]
    6072:	1ad2      	subs	r2, r2, r3
    6074:	f240 5338 	movw	r3, #1336	; 0x538
    6078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    607c:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    607e:	f7ff f8fd 	bl	527c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    6082:	69fb      	ldr	r3, [r7, #28]
}
    6084:	4618      	mov	r0, r3
    6086:	3728      	adds	r7, #40	; 0x28
    6088:	46bd      	mov	sp, r7
    608a:	bd80      	pop	{r7, pc}

0000608c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    608c:	b580      	push	{r7, lr}
    608e:	b086      	sub	sp, #24
    6090:	af00      	add	r7, sp, #0
    6092:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    6094:	687b      	ldr	r3, [r7, #4]
    6096:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    6098:	687b      	ldr	r3, [r7, #4]
    609a:	2b00      	cmp	r3, #0
    609c:	d030      	beq.n	6100 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    609e:	2310      	movs	r3, #16
    60a0:	425b      	negs	r3, r3
    60a2:	693a      	ldr	r2, [r7, #16]
    60a4:	4413      	add	r3, r2
    60a6:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    60a8:	693b      	ldr	r3, [r7, #16]
    60aa:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    60ac:	f7ff f8d4 	bl	5258 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    60b0:	68fb      	ldr	r3, [r7, #12]
    60b2:	685b      	ldr	r3, [r3, #4]
    60b4:	60bb      	str	r3, [r7, #8]
    60b6:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    60ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60be:	617b      	str	r3, [r7, #20]
    60c0:	e002      	b.n	60c8 <vPortFree+0x3c>
    60c2:	697b      	ldr	r3, [r7, #20]
    60c4:	681b      	ldr	r3, [r3, #0]
    60c6:	617b      	str	r3, [r7, #20]
    60c8:	697b      	ldr	r3, [r7, #20]
    60ca:	681b      	ldr	r3, [r3, #0]
    60cc:	685a      	ldr	r2, [r3, #4]
    60ce:	68bb      	ldr	r3, [r7, #8]
    60d0:	429a      	cmp	r2, r3
    60d2:	d3f6      	bcc.n	60c2 <vPortFree+0x36>
    60d4:	697b      	ldr	r3, [r7, #20]
    60d6:	681a      	ldr	r2, [r3, #0]
    60d8:	68fb      	ldr	r3, [r7, #12]
    60da:	601a      	str	r2, [r3, #0]
    60dc:	697b      	ldr	r3, [r7, #20]
    60de:	68fa      	ldr	r2, [r7, #12]
    60e0:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    60e2:	68fb      	ldr	r3, [r7, #12]
    60e4:	685a      	ldr	r2, [r3, #4]
    60e6:	f240 5338 	movw	r3, #1336	; 0x538
    60ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60ee:	681b      	ldr	r3, [r3, #0]
    60f0:	441a      	add	r2, r3
    60f2:	f240 5338 	movw	r3, #1336	; 0x538
    60f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60fa:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    60fc:	f7ff f8be 	bl	527c <xTaskResumeAll>
	}
}
    6100:	3718      	adds	r7, #24
    6102:	46bd      	mov	sp, r7
    6104:	bd80      	pop	{r7, pc}
    6106:	bf00      	nop

00006108 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    6108:	b480      	push	{r7}
    610a:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    610c:	f240 5338 	movw	r3, #1336	; 0x538
    6110:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6114:	681b      	ldr	r3, [r3, #0]
}
    6116:	4618      	mov	r0, r3
    6118:	46bd      	mov	sp, r7
    611a:	f85d 7b04 	ldr.w	r7, [sp], #4
    611e:	4770      	bx	lr

00006120 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    6120:	b480      	push	{r7}
    6122:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    6124:	46bd      	mov	sp, r7
    6126:	f85d 7b04 	ldr.w	r7, [sp], #4
    612a:	4770      	bx	lr
    612c:	0000      	movs	r0, r0
	...

00006130 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    6130:	b580      	push	{r7, lr}
    6132:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    6134:	f24c 3312 	movw	r3, #49938	; 0xc312
    6138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    613c:	781b      	ldrb	r3, [r3, #0]
    613e:	2b00      	cmp	r3, #0
    6140:	f040 815d 	bne.w	63fe <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    6144:	f24c 23fa 	movw	r3, #49914	; 0xc2fa
    6148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    614c:	881b      	ldrh	r3, [r3, #0]
    614e:	2b09      	cmp	r3, #9
    6150:	f201 8145 	bhi.w	73de <ground_calibrate+0x12ae>
    6154:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    6158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    615c:	781b      	ldrb	r3, [r3, #0]
    615e:	2b01      	cmp	r3, #1
    6160:	f041 813d 	bne.w	73de <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    6164:	f24c 3312 	movw	r3, #49938	; 0xc312
    6168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    616c:	2201      	movs	r2, #1
    616e:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    6170:	f24c 3319 	movw	r3, #49945	; 0xc319
    6174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6178:	781a      	ldrb	r2, [r3, #0]
    617a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    617e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6182:	781b      	ldrb	r3, [r3, #0]
    6184:	b2db      	uxtb	r3, r3
    6186:	429a      	cmp	r2, r3
    6188:	d313      	bcc.n	61b2 <ground_calibrate+0x82>
    618a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    618e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6192:	781b      	ldrb	r3, [r3, #0]
    6194:	b2db      	uxtb	r3, r3
    6196:	461a      	mov	r2, r3
    6198:	f24c 3319 	movw	r3, #49945	; 0xc319
    619c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61a0:	781b      	ldrb	r3, [r3, #0]
    61a2:	1ad3      	subs	r3, r2, r3
    61a4:	33ff      	adds	r3, #255	; 0xff
    61a6:	2b04      	cmp	r3, #4
    61a8:	bfd4      	ite	le
    61aa:	2300      	movle	r3, #0
    61ac:	2301      	movgt	r3, #1
    61ae:	b2db      	uxtb	r3, r3
    61b0:	e011      	b.n	61d6 <ground_calibrate+0xa6>
    61b2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    61b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ba:	781b      	ldrb	r3, [r3, #0]
    61bc:	b2db      	uxtb	r3, r3
    61be:	461a      	mov	r2, r3
    61c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    61c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61c8:	781b      	ldrb	r3, [r3, #0]
    61ca:	1ad3      	subs	r3, r2, r3
    61cc:	2b04      	cmp	r3, #4
    61ce:	bfd4      	ite	le
    61d0:	2300      	movle	r3, #0
    61d2:	2301      	movgt	r3, #1
    61d4:	b2db      	uxtb	r3, r3
    61d6:	2b00      	cmp	r3, #0
    61d8:	f000 8103 	beq.w	63e2 <ground_calibrate+0x2b2>
    61dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    61e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61e4:	781b      	ldrb	r3, [r3, #0]
    61e6:	461a      	mov	r2, r3
    61e8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    61ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61f0:	2105      	movs	r1, #5
    61f2:	5499      	strb	r1, [r3, r2]
    61f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    61f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61fc:	781b      	ldrb	r3, [r3, #0]
    61fe:	3301      	adds	r3, #1
    6200:	b2da      	uxtb	r2, r3
    6202:	f24c 3319 	movw	r3, #49945	; 0xc319
    6206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    620a:	701a      	strb	r2, [r3, #0]
    620c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6214:	781b      	ldrb	r3, [r3, #0]
    6216:	2bff      	cmp	r3, #255	; 0xff
    6218:	d105      	bne.n	6226 <ground_calibrate+0xf6>
    621a:	f24c 3319 	movw	r3, #49945	; 0xc319
    621e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6222:	2200      	movs	r2, #0
    6224:	701a      	strb	r2, [r3, #0]
    6226:	f24c 3319 	movw	r3, #49945	; 0xc319
    622a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    622e:	781b      	ldrb	r3, [r3, #0]
    6230:	461a      	mov	r2, r3
    6232:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    623a:	2102      	movs	r1, #2
    623c:	5499      	strb	r1, [r3, r2]
    623e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6246:	781b      	ldrb	r3, [r3, #0]
    6248:	3301      	adds	r3, #1
    624a:	b2da      	uxtb	r2, r3
    624c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6254:	701a      	strb	r2, [r3, #0]
    6256:	f24c 3319 	movw	r3, #49945	; 0xc319
    625a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    625e:	781b      	ldrb	r3, [r3, #0]
    6260:	2bff      	cmp	r3, #255	; 0xff
    6262:	d105      	bne.n	6270 <ground_calibrate+0x140>
    6264:	f24c 3319 	movw	r3, #49945	; 0xc319
    6268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    626c:	2200      	movs	r2, #0
    626e:	701a      	strb	r2, [r3, #0]
    6270:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6278:	2202      	movs	r2, #2
    627a:	701a      	strb	r2, [r3, #0]
    627c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6284:	2202      	movs	r2, #2
    6286:	701a      	strb	r2, [r3, #0]
    6288:	f24c 3319 	movw	r3, #49945	; 0xc319
    628c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6290:	781b      	ldrb	r3, [r3, #0]
    6292:	461a      	mov	r2, r3
    6294:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    629c:	7819      	ldrb	r1, [r3, #0]
    629e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    62a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62a6:	5499      	strb	r1, [r3, r2]
    62a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    62ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62b0:	781b      	ldrb	r3, [r3, #0]
    62b2:	3301      	adds	r3, #1
    62b4:	b2da      	uxtb	r2, r3
    62b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    62ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62be:	701a      	strb	r2, [r3, #0]
    62c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    62c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62c8:	781b      	ldrb	r3, [r3, #0]
    62ca:	2bff      	cmp	r3, #255	; 0xff
    62cc:	d105      	bne.n	62da <ground_calibrate+0x1aa>
    62ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    62d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62d6:	2200      	movs	r2, #0
    62d8:	701a      	strb	r2, [r3, #0]
    62da:	f24c 3319 	movw	r3, #49945	; 0xc319
    62de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62e2:	781b      	ldrb	r3, [r3, #0]
    62e4:	461a      	mov	r2, r3
    62e6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    62ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ee:	7819      	ldrb	r1, [r3, #0]
    62f0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    62f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62f8:	5499      	strb	r1, [r3, r2]
    62fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    62fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6302:	781b      	ldrb	r3, [r3, #0]
    6304:	3301      	adds	r3, #1
    6306:	b2da      	uxtb	r2, r3
    6308:	f24c 3319 	movw	r3, #49945	; 0xc319
    630c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6310:	701a      	strb	r2, [r3, #0]
    6312:	f24c 3319 	movw	r3, #49945	; 0xc319
    6316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    631a:	781b      	ldrb	r3, [r3, #0]
    631c:	2bff      	cmp	r3, #255	; 0xff
    631e:	d105      	bne.n	632c <ground_calibrate+0x1fc>
    6320:	f24c 3319 	movw	r3, #49945	; 0xc319
    6324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6328:	2200      	movs	r2, #0
    632a:	701a      	strb	r2, [r3, #0]
    632c:	f242 0339 	movw	r3, #8249	; 0x2039
    6330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6334:	781b      	ldrb	r3, [r3, #0]
    6336:	b2db      	uxtb	r3, r3
    6338:	f003 0310 	and.w	r3, r3, #16
    633c:	2b00      	cmp	r3, #0
    633e:	f041 804e 	bne.w	73de <ground_calibrate+0x12ae>
    6342:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6346:	f2c2 0304 	movt	r3, #8196	; 0x2004
    634a:	781b      	ldrb	r3, [r3, #0]
    634c:	b2db      	uxtb	r3, r3
    634e:	461a      	mov	r2, r3
    6350:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6358:	5c9a      	ldrb	r2, [r3, r2]
    635a:	f24c 431b 	movw	r3, #50203	; 0xc41b
    635e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6362:	701a      	strb	r2, [r3, #0]
    6364:	f24c 431c 	movw	r3, #50204	; 0xc41c
    6368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    636c:	2200      	movs	r2, #0
    636e:	701a      	strb	r2, [r3, #0]
    6370:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6378:	781b      	ldrb	r3, [r3, #0]
    637a:	b2db      	uxtb	r3, r3
    637c:	3301      	adds	r3, #1
    637e:	b2da      	uxtb	r2, r3
    6380:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6388:	701a      	strb	r2, [r3, #0]
    638a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    638e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6392:	781b      	ldrb	r3, [r3, #0]
    6394:	b2db      	uxtb	r3, r3
    6396:	2bff      	cmp	r3, #255	; 0xff
    6398:	d105      	bne.n	63a6 <ground_calibrate+0x276>
    639a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    639e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63a2:	2200      	movs	r2, #0
    63a4:	701a      	strb	r2, [r3, #0]
    63a6:	f242 0338 	movw	r3, #8248	; 0x2038
    63aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63ae:	f242 0238 	movw	r2, #8248	; 0x2038
    63b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    63b6:	7812      	ldrb	r2, [r2, #0]
    63b8:	b2d2      	uxtb	r2, r2
    63ba:	f042 0201 	orr.w	r2, r2, #1
    63be:	b2d2      	uxtb	r2, r2
    63c0:	701a      	strb	r2, [r3, #0]
    63c2:	f242 0339 	movw	r3, #8249	; 0x2039
    63c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63ca:	f242 0239 	movw	r2, #8249	; 0x2039
    63ce:	f2c2 0200 	movt	r2, #8192	; 0x2000
    63d2:	7812      	ldrb	r2, [r2, #0]
    63d4:	b2d2      	uxtb	r2, r2
    63d6:	f042 0210 	orr.w	r2, r2, #16
    63da:	b2d2      	uxtb	r2, r2
    63dc:	701a      	strb	r2, [r3, #0]
    63de:	f000 bffe 	b.w	73de <ground_calibrate+0x12ae>
    63e2:	f24c 3318 	movw	r3, #49944	; 0xc318
    63e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ea:	781b      	ldrb	r3, [r3, #0]
    63ec:	3301      	adds	r3, #1
    63ee:	b2da      	uxtb	r2, r3
    63f0:	f24c 3318 	movw	r3, #49944	; 0xc318
    63f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63f8:	701a      	strb	r2, [r3, #0]
    63fa:	f000 bff0 	b.w	73de <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    63fe:	f24c 3312 	movw	r3, #49938	; 0xc312
    6402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6406:	781b      	ldrb	r3, [r3, #0]
    6408:	2b01      	cmp	r3, #1
    640a:	f040 87e8 	bne.w	73de <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    640e:	f24c 4320 	movw	r3, #50208	; 0xc420
    6412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6416:	885b      	ldrh	r3, [r3, #2]
    6418:	b21b      	sxth	r3, r3
    641a:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    641e:	db09      	blt.n	6434 <ground_calibrate+0x304>
    6420:	f24c 4320 	movw	r3, #50208	; 0xc420
    6424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6428:	885b      	ldrh	r3, [r3, #2]
    642a:	b21b      	sxth	r3, r3
    642c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    6430:	f340 87d5 	ble.w	73de <ground_calibrate+0x12ae>
      ir_gain_calib();
    6434:	f00b fcfc 	bl	11e30 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    6438:	f240 5348 	movw	r3, #1352	; 0x548
    643c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6440:	681a      	ldr	r2, [r3, #0]
    6442:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    644a:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    644c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6454:	781a      	ldrb	r2, [r3, #0]
    6456:	f24c 331a 	movw	r3, #49946	; 0xc31a
    645a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    645e:	781b      	ldrb	r3, [r3, #0]
    6460:	b2db      	uxtb	r3, r3
    6462:	429a      	cmp	r2, r3
    6464:	d313      	bcc.n	648e <ground_calibrate+0x35e>
    6466:	f24c 331a 	movw	r3, #49946	; 0xc31a
    646a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    646e:	781b      	ldrb	r3, [r3, #0]
    6470:	b2db      	uxtb	r3, r3
    6472:	461a      	mov	r2, r3
    6474:	f24c 3319 	movw	r3, #49945	; 0xc319
    6478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    647c:	781b      	ldrb	r3, [r3, #0]
    647e:	1ad3      	subs	r3, r2, r3
    6480:	33ff      	adds	r3, #255	; 0xff
    6482:	2b14      	cmp	r3, #20
    6484:	bfd4      	ite	le
    6486:	2300      	movle	r3, #0
    6488:	2301      	movgt	r3, #1
    648a:	b2db      	uxtb	r3, r3
    648c:	e011      	b.n	64b2 <ground_calibrate+0x382>
    648e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6496:	781b      	ldrb	r3, [r3, #0]
    6498:	b2db      	uxtb	r3, r3
    649a:	461a      	mov	r2, r3
    649c:	f24c 3319 	movw	r3, #49945	; 0xc319
    64a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64a4:	781b      	ldrb	r3, [r3, #0]
    64a6:	1ad3      	subs	r3, r2, r3
    64a8:	2b14      	cmp	r3, #20
    64aa:	bfd4      	ite	le
    64ac:	2300      	movle	r3, #0
    64ae:	2301      	movgt	r3, #1
    64b0:	b2db      	uxtb	r3, r3
    64b2:	2b00      	cmp	r3, #0
    64b4:	f000 85a6 	beq.w	7004 <ground_calibrate+0xed4>
    64b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    64bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64c0:	781b      	ldrb	r3, [r3, #0]
    64c2:	461a      	mov	r2, r3
    64c4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    64c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64cc:	2105      	movs	r1, #5
    64ce:	5499      	strb	r1, [r3, r2]
    64d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    64d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64d8:	781b      	ldrb	r3, [r3, #0]
    64da:	3301      	adds	r3, #1
    64dc:	b2da      	uxtb	r2, r3
    64de:	f24c 3319 	movw	r3, #49945	; 0xc319
    64e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64e6:	701a      	strb	r2, [r3, #0]
    64e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    64ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64f0:	781b      	ldrb	r3, [r3, #0]
    64f2:	2bff      	cmp	r3, #255	; 0xff
    64f4:	d105      	bne.n	6502 <ground_calibrate+0x3d2>
    64f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    64fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64fe:	2200      	movs	r2, #0
    6500:	701a      	strb	r2, [r3, #0]
    6502:	f24c 3319 	movw	r3, #49945	; 0xc319
    6506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    650a:	781b      	ldrb	r3, [r3, #0]
    650c:	461a      	mov	r2, r3
    650e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6516:	2105      	movs	r1, #5
    6518:	5499      	strb	r1, [r3, r2]
    651a:	f24c 3319 	movw	r3, #49945	; 0xc319
    651e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6522:	781b      	ldrb	r3, [r3, #0]
    6524:	3301      	adds	r3, #1
    6526:	b2da      	uxtb	r2, r3
    6528:	f24c 3319 	movw	r3, #49945	; 0xc319
    652c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6530:	701a      	strb	r2, [r3, #0]
    6532:	f24c 3319 	movw	r3, #49945	; 0xc319
    6536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    653a:	781b      	ldrb	r3, [r3, #0]
    653c:	2bff      	cmp	r3, #255	; 0xff
    653e:	d105      	bne.n	654c <ground_calibrate+0x41c>
    6540:	f24c 3319 	movw	r3, #49945	; 0xc319
    6544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6548:	2200      	movs	r2, #0
    654a:	701a      	strb	r2, [r3, #0]
    654c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6554:	2205      	movs	r2, #5
    6556:	701a      	strb	r2, [r3, #0]
    6558:	f24c 431e 	movw	r3, #50206	; 0xc41e
    655c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6560:	2205      	movs	r2, #5
    6562:	701a      	strb	r2, [r3, #0]
    6564:	f24c 3319 	movw	r3, #49945	; 0xc319
    6568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    656c:	781b      	ldrb	r3, [r3, #0]
    656e:	461a      	mov	r2, r3
    6570:	f64c 1310 	movw	r3, #51472	; 0xc910
    6574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6578:	7819      	ldrb	r1, [r3, #0]
    657a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    657e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6582:	5499      	strb	r1, [r3, r2]
    6584:	f64c 1310 	movw	r3, #51472	; 0xc910
    6588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    658c:	781a      	ldrb	r2, [r3, #0]
    658e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6596:	781b      	ldrb	r3, [r3, #0]
    6598:	4413      	add	r3, r2
    659a:	b2da      	uxtb	r2, r3
    659c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    65a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65a4:	701a      	strb	r2, [r3, #0]
    65a6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    65aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ae:	781a      	ldrb	r2, [r3, #0]
    65b0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    65b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65b8:	781b      	ldrb	r3, [r3, #0]
    65ba:	4413      	add	r3, r2
    65bc:	b2da      	uxtb	r2, r3
    65be:	f24c 431e 	movw	r3, #50206	; 0xc41e
    65c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65c6:	701a      	strb	r2, [r3, #0]
    65c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    65cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65d0:	781b      	ldrb	r3, [r3, #0]
    65d2:	3301      	adds	r3, #1
    65d4:	b2da      	uxtb	r2, r3
    65d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    65da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65de:	701a      	strb	r2, [r3, #0]
    65e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    65e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65e8:	781b      	ldrb	r3, [r3, #0]
    65ea:	2bff      	cmp	r3, #255	; 0xff
    65ec:	d105      	bne.n	65fa <ground_calibrate+0x4ca>
    65ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    65f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65f6:	2200      	movs	r2, #0
    65f8:	701a      	strb	r2, [r3, #0]
    65fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    65fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6602:	781b      	ldrb	r3, [r3, #0]
    6604:	461a      	mov	r2, r3
    6606:	f64c 1310 	movw	r3, #51472	; 0xc910
    660a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    660e:	7859      	ldrb	r1, [r3, #1]
    6610:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6618:	5499      	strb	r1, [r3, r2]
    661a:	4bd2      	ldr	r3, [pc, #840]	; (6964 <ground_calibrate+0x834>)
    661c:	781a      	ldrb	r2, [r3, #0]
    661e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6626:	781b      	ldrb	r3, [r3, #0]
    6628:	4413      	add	r3, r2
    662a:	b2da      	uxtb	r2, r3
    662c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6630:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6634:	701a      	strb	r2, [r3, #0]
    6636:	f24c 431e 	movw	r3, #50206	; 0xc41e
    663a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    663e:	781a      	ldrb	r2, [r3, #0]
    6640:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6648:	781b      	ldrb	r3, [r3, #0]
    664a:	4413      	add	r3, r2
    664c:	b2da      	uxtb	r2, r3
    664e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6656:	701a      	strb	r2, [r3, #0]
    6658:	f24c 3319 	movw	r3, #49945	; 0xc319
    665c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6660:	781b      	ldrb	r3, [r3, #0]
    6662:	3301      	adds	r3, #1
    6664:	b2da      	uxtb	r2, r3
    6666:	f24c 3319 	movw	r3, #49945	; 0xc319
    666a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    666e:	701a      	strb	r2, [r3, #0]
    6670:	f24c 3319 	movw	r3, #49945	; 0xc319
    6674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6678:	781b      	ldrb	r3, [r3, #0]
    667a:	2bff      	cmp	r3, #255	; 0xff
    667c:	d105      	bne.n	668a <ground_calibrate+0x55a>
    667e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6686:	2200      	movs	r2, #0
    6688:	701a      	strb	r2, [r3, #0]
    668a:	f24c 3319 	movw	r3, #49945	; 0xc319
    668e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6692:	781b      	ldrb	r3, [r3, #0]
    6694:	461a      	mov	r2, r3
    6696:	f64c 1310 	movw	r3, #51472	; 0xc910
    669a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    669e:	7899      	ldrb	r1, [r3, #2]
    66a0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    66a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66a8:	5499      	strb	r1, [r3, r2]
    66aa:	4baf      	ldr	r3, [pc, #700]	; (6968 <ground_calibrate+0x838>)
    66ac:	781a      	ldrb	r2, [r3, #0]
    66ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    66b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66b6:	781b      	ldrb	r3, [r3, #0]
    66b8:	4413      	add	r3, r2
    66ba:	b2da      	uxtb	r2, r3
    66bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    66c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66c4:	701a      	strb	r2, [r3, #0]
    66c6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    66ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ce:	781a      	ldrb	r2, [r3, #0]
    66d0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    66d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66d8:	781b      	ldrb	r3, [r3, #0]
    66da:	4413      	add	r3, r2
    66dc:	b2da      	uxtb	r2, r3
    66de:	f24c 431e 	movw	r3, #50206	; 0xc41e
    66e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66e6:	701a      	strb	r2, [r3, #0]
    66e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    66ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66f0:	781b      	ldrb	r3, [r3, #0]
    66f2:	3301      	adds	r3, #1
    66f4:	b2da      	uxtb	r2, r3
    66f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    66fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66fe:	701a      	strb	r2, [r3, #0]
    6700:	f24c 3319 	movw	r3, #49945	; 0xc319
    6704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6708:	781b      	ldrb	r3, [r3, #0]
    670a:	2bff      	cmp	r3, #255	; 0xff
    670c:	d105      	bne.n	671a <ground_calibrate+0x5ea>
    670e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6716:	2200      	movs	r2, #0
    6718:	701a      	strb	r2, [r3, #0]
    671a:	f24c 3319 	movw	r3, #49945	; 0xc319
    671e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6722:	781b      	ldrb	r3, [r3, #0]
    6724:	461a      	mov	r2, r3
    6726:	f64c 1310 	movw	r3, #51472	; 0xc910
    672a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    672e:	78d9      	ldrb	r1, [r3, #3]
    6730:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6738:	5499      	strb	r1, [r3, r2]
    673a:	4b8c      	ldr	r3, [pc, #560]	; (696c <ground_calibrate+0x83c>)
    673c:	781a      	ldrb	r2, [r3, #0]
    673e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6746:	781b      	ldrb	r3, [r3, #0]
    6748:	4413      	add	r3, r2
    674a:	b2da      	uxtb	r2, r3
    674c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6754:	701a      	strb	r2, [r3, #0]
    6756:	f24c 431e 	movw	r3, #50206	; 0xc41e
    675a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    675e:	781a      	ldrb	r2, [r3, #0]
    6760:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6768:	781b      	ldrb	r3, [r3, #0]
    676a:	4413      	add	r3, r2
    676c:	b2da      	uxtb	r2, r3
    676e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6776:	701a      	strb	r2, [r3, #0]
    6778:	f24c 3319 	movw	r3, #49945	; 0xc319
    677c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6780:	781b      	ldrb	r3, [r3, #0]
    6782:	3301      	adds	r3, #1
    6784:	b2da      	uxtb	r2, r3
    6786:	f24c 3319 	movw	r3, #49945	; 0xc319
    678a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    678e:	701a      	strb	r2, [r3, #0]
    6790:	f24c 3319 	movw	r3, #49945	; 0xc319
    6794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6798:	781b      	ldrb	r3, [r3, #0]
    679a:	2bff      	cmp	r3, #255	; 0xff
    679c:	d105      	bne.n	67aa <ground_calibrate+0x67a>
    679e:	f24c 3319 	movw	r3, #49945	; 0xc319
    67a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67a6:	2200      	movs	r2, #0
    67a8:	701a      	strb	r2, [r3, #0]
    67aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    67ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67b2:	781b      	ldrb	r3, [r3, #0]
    67b4:	461a      	mov	r2, r3
    67b6:	f64c 1314 	movw	r3, #51476	; 0xc914
    67ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67be:	7819      	ldrb	r1, [r3, #0]
    67c0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    67c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67c8:	5499      	strb	r1, [r3, r2]
    67ca:	f64c 1314 	movw	r3, #51476	; 0xc914
    67ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67d2:	781a      	ldrb	r2, [r3, #0]
    67d4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    67d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67dc:	781b      	ldrb	r3, [r3, #0]
    67de:	4413      	add	r3, r2
    67e0:	b2da      	uxtb	r2, r3
    67e2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    67e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ea:	701a      	strb	r2, [r3, #0]
    67ec:	f24c 431e 	movw	r3, #50206	; 0xc41e
    67f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67f4:	781a      	ldrb	r2, [r3, #0]
    67f6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    67fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67fe:	781b      	ldrb	r3, [r3, #0]
    6800:	4413      	add	r3, r2
    6802:	b2da      	uxtb	r2, r3
    6804:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    680c:	701a      	strb	r2, [r3, #0]
    680e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6816:	781b      	ldrb	r3, [r3, #0]
    6818:	3301      	adds	r3, #1
    681a:	b2da      	uxtb	r2, r3
    681c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6824:	701a      	strb	r2, [r3, #0]
    6826:	f24c 3319 	movw	r3, #49945	; 0xc319
    682a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    682e:	781b      	ldrb	r3, [r3, #0]
    6830:	2bff      	cmp	r3, #255	; 0xff
    6832:	d105      	bne.n	6840 <ground_calibrate+0x710>
    6834:	f24c 3319 	movw	r3, #49945	; 0xc319
    6838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    683c:	2200      	movs	r2, #0
    683e:	701a      	strb	r2, [r3, #0]
    6840:	f24c 3319 	movw	r3, #49945	; 0xc319
    6844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6848:	781b      	ldrb	r3, [r3, #0]
    684a:	461a      	mov	r2, r3
    684c:	f64c 1314 	movw	r3, #51476	; 0xc914
    6850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6854:	7859      	ldrb	r1, [r3, #1]
    6856:	f24c 331c 	movw	r3, #49948	; 0xc31c
    685a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    685e:	5499      	strb	r1, [r3, r2]
    6860:	4b43      	ldr	r3, [pc, #268]	; (6970 <ground_calibrate+0x840>)
    6862:	781a      	ldrb	r2, [r3, #0]
    6864:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    686c:	781b      	ldrb	r3, [r3, #0]
    686e:	4413      	add	r3, r2
    6870:	b2da      	uxtb	r2, r3
    6872:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6876:	f2c2 0304 	movt	r3, #8196	; 0x2004
    687a:	701a      	strb	r2, [r3, #0]
    687c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6884:	781a      	ldrb	r2, [r3, #0]
    6886:	f24c 431d 	movw	r3, #50205	; 0xc41d
    688a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    688e:	781b      	ldrb	r3, [r3, #0]
    6890:	4413      	add	r3, r2
    6892:	b2da      	uxtb	r2, r3
    6894:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    689c:	701a      	strb	r2, [r3, #0]
    689e:	f24c 3319 	movw	r3, #49945	; 0xc319
    68a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68a6:	781b      	ldrb	r3, [r3, #0]
    68a8:	3301      	adds	r3, #1
    68aa:	b2da      	uxtb	r2, r3
    68ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    68b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68b4:	701a      	strb	r2, [r3, #0]
    68b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    68ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68be:	781b      	ldrb	r3, [r3, #0]
    68c0:	2bff      	cmp	r3, #255	; 0xff
    68c2:	d105      	bne.n	68d0 <ground_calibrate+0x7a0>
    68c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    68c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68cc:	2200      	movs	r2, #0
    68ce:	701a      	strb	r2, [r3, #0]
    68d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    68d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68d8:	781b      	ldrb	r3, [r3, #0]
    68da:	461a      	mov	r2, r3
    68dc:	f64c 1314 	movw	r3, #51476	; 0xc914
    68e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68e4:	7899      	ldrb	r1, [r3, #2]
    68e6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    68ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ee:	5499      	strb	r1, [r3, r2]
    68f0:	4b20      	ldr	r3, [pc, #128]	; (6974 <ground_calibrate+0x844>)
    68f2:	781a      	ldrb	r2, [r3, #0]
    68f4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    68f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68fc:	781b      	ldrb	r3, [r3, #0]
    68fe:	4413      	add	r3, r2
    6900:	b2da      	uxtb	r2, r3
    6902:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6906:	f2c2 0304 	movt	r3, #8196	; 0x2004
    690a:	701a      	strb	r2, [r3, #0]
    690c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6914:	781a      	ldrb	r2, [r3, #0]
    6916:	f24c 431d 	movw	r3, #50205	; 0xc41d
    691a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    691e:	781b      	ldrb	r3, [r3, #0]
    6920:	4413      	add	r3, r2
    6922:	b2da      	uxtb	r2, r3
    6924:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    692c:	701a      	strb	r2, [r3, #0]
    692e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6936:	781b      	ldrb	r3, [r3, #0]
    6938:	3301      	adds	r3, #1
    693a:	b2da      	uxtb	r2, r3
    693c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6944:	701a      	strb	r2, [r3, #0]
    6946:	f24c 3319 	movw	r3, #49945	; 0xc319
    694a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    694e:	781b      	ldrb	r3, [r3, #0]
    6950:	2bff      	cmp	r3, #255	; 0xff
    6952:	d111      	bne.n	6978 <ground_calibrate+0x848>
    6954:	f24c 3319 	movw	r3, #49945	; 0xc319
    6958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    695c:	2200      	movs	r2, #0
    695e:	701a      	strb	r2, [r3, #0]
    6960:	e00a      	b.n	6978 <ground_calibrate+0x848>
    6962:	bf00      	nop
    6964:	2004c911 	.word	0x2004c911
    6968:	2004c912 	.word	0x2004c912
    696c:	2004c913 	.word	0x2004c913
    6970:	2004c915 	.word	0x2004c915
    6974:	2004c916 	.word	0x2004c916
    6978:	f24c 3319 	movw	r3, #49945	; 0xc319
    697c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6980:	781b      	ldrb	r3, [r3, #0]
    6982:	461a      	mov	r2, r3
    6984:	f64c 1314 	movw	r3, #51476	; 0xc914
    6988:	f2c2 0304 	movt	r3, #8196	; 0x2004
    698c:	78d9      	ldrb	r1, [r3, #3]
    698e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6996:	5499      	strb	r1, [r3, r2]
    6998:	4bd3      	ldr	r3, [pc, #844]	; (6ce8 <ground_calibrate+0xbb8>)
    699a:	781a      	ldrb	r2, [r3, #0]
    699c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    69a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69a4:	781b      	ldrb	r3, [r3, #0]
    69a6:	4413      	add	r3, r2
    69a8:	b2da      	uxtb	r2, r3
    69aa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    69ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69b2:	701a      	strb	r2, [r3, #0]
    69b4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    69b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69bc:	781a      	ldrb	r2, [r3, #0]
    69be:	f24c 431d 	movw	r3, #50205	; 0xc41d
    69c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69c6:	781b      	ldrb	r3, [r3, #0]
    69c8:	4413      	add	r3, r2
    69ca:	b2da      	uxtb	r2, r3
    69cc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    69d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69d4:	701a      	strb	r2, [r3, #0]
    69d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    69da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69de:	781b      	ldrb	r3, [r3, #0]
    69e0:	3301      	adds	r3, #1
    69e2:	b2da      	uxtb	r2, r3
    69e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    69e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ec:	701a      	strb	r2, [r3, #0]
    69ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    69f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69f6:	781b      	ldrb	r3, [r3, #0]
    69f8:	2bff      	cmp	r3, #255	; 0xff
    69fa:	d105      	bne.n	6a08 <ground_calibrate+0x8d8>
    69fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a04:	2200      	movs	r2, #0
    6a06:	701a      	strb	r2, [r3, #0]
    6a08:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a10:	781b      	ldrb	r3, [r3, #0]
    6a12:	461a      	mov	r2, r3
    6a14:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a1c:	7819      	ldrb	r1, [r3, #0]
    6a1e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a26:	5499      	strb	r1, [r3, r2]
    6a28:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a30:	781a      	ldrb	r2, [r3, #0]
    6a32:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a3a:	781b      	ldrb	r3, [r3, #0]
    6a3c:	4413      	add	r3, r2
    6a3e:	b2da      	uxtb	r2, r3
    6a40:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a48:	701a      	strb	r2, [r3, #0]
    6a4a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a52:	781a      	ldrb	r2, [r3, #0]
    6a54:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a5c:	781b      	ldrb	r3, [r3, #0]
    6a5e:	4413      	add	r3, r2
    6a60:	b2da      	uxtb	r2, r3
    6a62:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a6a:	701a      	strb	r2, [r3, #0]
    6a6c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a74:	781b      	ldrb	r3, [r3, #0]
    6a76:	3301      	adds	r3, #1
    6a78:	b2da      	uxtb	r2, r3
    6a7a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a82:	701a      	strb	r2, [r3, #0]
    6a84:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a8c:	781b      	ldrb	r3, [r3, #0]
    6a8e:	2bff      	cmp	r3, #255	; 0xff
    6a90:	d105      	bne.n	6a9e <ground_calibrate+0x96e>
    6a92:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a9a:	2200      	movs	r2, #0
    6a9c:	701a      	strb	r2, [r3, #0]
    6a9e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aa6:	781b      	ldrb	r3, [r3, #0]
    6aa8:	461a      	mov	r2, r3
    6aaa:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ab2:	7859      	ldrb	r1, [r3, #1]
    6ab4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6abc:	5499      	strb	r1, [r3, r2]
    6abe:	4b8b      	ldr	r3, [pc, #556]	; (6cec <ground_calibrate+0xbbc>)
    6ac0:	781a      	ldrb	r2, [r3, #0]
    6ac2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6ac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aca:	781b      	ldrb	r3, [r3, #0]
    6acc:	4413      	add	r3, r2
    6ace:	b2da      	uxtb	r2, r3
    6ad0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ad8:	701a      	strb	r2, [r3, #0]
    6ada:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ae2:	781a      	ldrb	r2, [r3, #0]
    6ae4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aec:	781b      	ldrb	r3, [r3, #0]
    6aee:	4413      	add	r3, r2
    6af0:	b2da      	uxtb	r2, r3
    6af2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6afa:	701a      	strb	r2, [r3, #0]
    6afc:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b04:	781b      	ldrb	r3, [r3, #0]
    6b06:	3301      	adds	r3, #1
    6b08:	b2da      	uxtb	r2, r3
    6b0a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b12:	701a      	strb	r2, [r3, #0]
    6b14:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b1c:	781b      	ldrb	r3, [r3, #0]
    6b1e:	2bff      	cmp	r3, #255	; 0xff
    6b20:	d105      	bne.n	6b2e <ground_calibrate+0x9fe>
    6b22:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b2a:	2200      	movs	r2, #0
    6b2c:	701a      	strb	r2, [r3, #0]
    6b2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b36:	781b      	ldrb	r3, [r3, #0]
    6b38:	461a      	mov	r2, r3
    6b3a:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6b3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b42:	7899      	ldrb	r1, [r3, #2]
    6b44:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b4c:	5499      	strb	r1, [r3, r2]
    6b4e:	4b68      	ldr	r3, [pc, #416]	; (6cf0 <ground_calibrate+0xbc0>)
    6b50:	781a      	ldrb	r2, [r3, #0]
    6b52:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6b56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b5a:	781b      	ldrb	r3, [r3, #0]
    6b5c:	4413      	add	r3, r2
    6b5e:	b2da      	uxtb	r2, r3
    6b60:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b68:	701a      	strb	r2, [r3, #0]
    6b6a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6b6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b72:	781a      	ldrb	r2, [r3, #0]
    6b74:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b7c:	781b      	ldrb	r3, [r3, #0]
    6b7e:	4413      	add	r3, r2
    6b80:	b2da      	uxtb	r2, r3
    6b82:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6b86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b8a:	701a      	strb	r2, [r3, #0]
    6b8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b94:	781b      	ldrb	r3, [r3, #0]
    6b96:	3301      	adds	r3, #1
    6b98:	b2da      	uxtb	r2, r3
    6b9a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ba2:	701a      	strb	r2, [r3, #0]
    6ba4:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bac:	781b      	ldrb	r3, [r3, #0]
    6bae:	2bff      	cmp	r3, #255	; 0xff
    6bb0:	d105      	bne.n	6bbe <ground_calibrate+0xa8e>
    6bb2:	f24c 3319 	movw	r3, #49945	; 0xc319
    6bb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bba:	2200      	movs	r2, #0
    6bbc:	701a      	strb	r2, [r3, #0]
    6bbe:	f24c 3319 	movw	r3, #49945	; 0xc319
    6bc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bc6:	781b      	ldrb	r3, [r3, #0]
    6bc8:	461a      	mov	r2, r3
    6bca:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6bce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bd2:	78d9      	ldrb	r1, [r3, #3]
    6bd4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bdc:	5499      	strb	r1, [r3, r2]
    6bde:	4b45      	ldr	r3, [pc, #276]	; (6cf4 <ground_calibrate+0xbc4>)
    6be0:	781a      	ldrb	r2, [r3, #0]
    6be2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6be6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bea:	781b      	ldrb	r3, [r3, #0]
    6bec:	4413      	add	r3, r2
    6bee:	b2da      	uxtb	r2, r3
    6bf0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6bf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bf8:	701a      	strb	r2, [r3, #0]
    6bfa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6bfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c02:	781a      	ldrb	r2, [r3, #0]
    6c04:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c0c:	781b      	ldrb	r3, [r3, #0]
    6c0e:	4413      	add	r3, r2
    6c10:	b2da      	uxtb	r2, r3
    6c12:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6c16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c1a:	701a      	strb	r2, [r3, #0]
    6c1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c24:	781b      	ldrb	r3, [r3, #0]
    6c26:	3301      	adds	r3, #1
    6c28:	b2da      	uxtb	r2, r3
    6c2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c32:	701a      	strb	r2, [r3, #0]
    6c34:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c3c:	781b      	ldrb	r3, [r3, #0]
    6c3e:	2bff      	cmp	r3, #255	; 0xff
    6c40:	d105      	bne.n	6c4e <ground_calibrate+0xb1e>
    6c42:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c4a:	2200      	movs	r2, #0
    6c4c:	701a      	strb	r2, [r3, #0]
    6c4e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c56:	781b      	ldrb	r3, [r3, #0]
    6c58:	461a      	mov	r2, r3
    6c5a:	f240 5342 	movw	r3, #1346	; 0x542
    6c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c62:	7819      	ldrb	r1, [r3, #0]
    6c64:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6c68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c6c:	5499      	strb	r1, [r3, r2]
    6c6e:	f240 5342 	movw	r3, #1346	; 0x542
    6c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c76:	781a      	ldrb	r2, [r3, #0]
    6c78:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c80:	781b      	ldrb	r3, [r3, #0]
    6c82:	4413      	add	r3, r2
    6c84:	b2da      	uxtb	r2, r3
    6c86:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6c8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c8e:	701a      	strb	r2, [r3, #0]
    6c90:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c98:	781a      	ldrb	r2, [r3, #0]
    6c9a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ca2:	781b      	ldrb	r3, [r3, #0]
    6ca4:	4413      	add	r3, r2
    6ca6:	b2da      	uxtb	r2, r3
    6ca8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cb0:	701a      	strb	r2, [r3, #0]
    6cb2:	f24c 3319 	movw	r3, #49945	; 0xc319
    6cb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cba:	781b      	ldrb	r3, [r3, #0]
    6cbc:	3301      	adds	r3, #1
    6cbe:	b2da      	uxtb	r2, r3
    6cc0:	f24c 3319 	movw	r3, #49945	; 0xc319
    6cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cc8:	701a      	strb	r2, [r3, #0]
    6cca:	f24c 3319 	movw	r3, #49945	; 0xc319
    6cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cd2:	781b      	ldrb	r3, [r3, #0]
    6cd4:	2bff      	cmp	r3, #255	; 0xff
    6cd6:	d10f      	bne.n	6cf8 <ground_calibrate+0xbc8>
    6cd8:	f24c 3319 	movw	r3, #49945	; 0xc319
    6cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ce0:	2200      	movs	r2, #0
    6ce2:	701a      	strb	r2, [r3, #0]
    6ce4:	e008      	b.n	6cf8 <ground_calibrate+0xbc8>
    6ce6:	bf00      	nop
    6ce8:	2004c917 	.word	0x2004c917
    6cec:	2004c90d 	.word	0x2004c90d
    6cf0:	2004c90e 	.word	0x2004c90e
    6cf4:	2004c90f 	.word	0x2004c90f
    6cf8:	f24c 3319 	movw	r3, #49945	; 0xc319
    6cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d00:	781b      	ldrb	r3, [r3, #0]
    6d02:	461a      	mov	r2, r3
    6d04:	f240 5342 	movw	r3, #1346	; 0x542
    6d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d0c:	7859      	ldrb	r1, [r3, #1]
    6d0e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6d12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d16:	5499      	strb	r1, [r3, r2]
    6d18:	4bd4      	ldr	r3, [pc, #848]	; (706c <ground_calibrate+0xf3c>)
    6d1a:	781a      	ldrb	r2, [r3, #0]
    6d1c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d24:	781b      	ldrb	r3, [r3, #0]
    6d26:	4413      	add	r3, r2
    6d28:	b2da      	uxtb	r2, r3
    6d2a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d32:	701a      	strb	r2, [r3, #0]
    6d34:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d3c:	781a      	ldrb	r2, [r3, #0]
    6d3e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d46:	781b      	ldrb	r3, [r3, #0]
    6d48:	4413      	add	r3, r2
    6d4a:	b2da      	uxtb	r2, r3
    6d4c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d54:	701a      	strb	r2, [r3, #0]
    6d56:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d5e:	781b      	ldrb	r3, [r3, #0]
    6d60:	3301      	adds	r3, #1
    6d62:	b2da      	uxtb	r2, r3
    6d64:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d6c:	701a      	strb	r2, [r3, #0]
    6d6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d76:	781b      	ldrb	r3, [r3, #0]
    6d78:	2bff      	cmp	r3, #255	; 0xff
    6d7a:	d105      	bne.n	6d88 <ground_calibrate+0xc58>
    6d7c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d84:	2200      	movs	r2, #0
    6d86:	701a      	strb	r2, [r3, #0]
    6d88:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d90:	781b      	ldrb	r3, [r3, #0]
    6d92:	461a      	mov	r2, r3
    6d94:	f240 5344 	movw	r3, #1348	; 0x544
    6d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d9c:	7819      	ldrb	r1, [r3, #0]
    6d9e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6da2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6da6:	5499      	strb	r1, [r3, r2]
    6da8:	f240 5344 	movw	r3, #1348	; 0x544
    6dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6db0:	781a      	ldrb	r2, [r3, #0]
    6db2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6db6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dba:	781b      	ldrb	r3, [r3, #0]
    6dbc:	4413      	add	r3, r2
    6dbe:	b2da      	uxtb	r2, r3
    6dc0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6dc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dc8:	701a      	strb	r2, [r3, #0]
    6dca:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dd2:	781a      	ldrb	r2, [r3, #0]
    6dd4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ddc:	781b      	ldrb	r3, [r3, #0]
    6dde:	4413      	add	r3, r2
    6de0:	b2da      	uxtb	r2, r3
    6de2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6de6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dea:	701a      	strb	r2, [r3, #0]
    6dec:	f24c 3319 	movw	r3, #49945	; 0xc319
    6df0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6df4:	781b      	ldrb	r3, [r3, #0]
    6df6:	3301      	adds	r3, #1
    6df8:	b2da      	uxtb	r2, r3
    6dfa:	f24c 3319 	movw	r3, #49945	; 0xc319
    6dfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e02:	701a      	strb	r2, [r3, #0]
    6e04:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e0c:	781b      	ldrb	r3, [r3, #0]
    6e0e:	2bff      	cmp	r3, #255	; 0xff
    6e10:	d105      	bne.n	6e1e <ground_calibrate+0xcee>
    6e12:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e1a:	2200      	movs	r2, #0
    6e1c:	701a      	strb	r2, [r3, #0]
    6e1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e26:	781b      	ldrb	r3, [r3, #0]
    6e28:	461a      	mov	r2, r3
    6e2a:	f240 5344 	movw	r3, #1348	; 0x544
    6e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e32:	7859      	ldrb	r1, [r3, #1]
    6e34:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e3c:	5499      	strb	r1, [r3, r2]
    6e3e:	4b8c      	ldr	r3, [pc, #560]	; (7070 <ground_calibrate+0xf40>)
    6e40:	781a      	ldrb	r2, [r3, #0]
    6e42:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6e46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e4a:	781b      	ldrb	r3, [r3, #0]
    6e4c:	4413      	add	r3, r2
    6e4e:	b2da      	uxtb	r2, r3
    6e50:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e58:	701a      	strb	r2, [r3, #0]
    6e5a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e62:	781a      	ldrb	r2, [r3, #0]
    6e64:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e6c:	781b      	ldrb	r3, [r3, #0]
    6e6e:	4413      	add	r3, r2
    6e70:	b2da      	uxtb	r2, r3
    6e72:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6e76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e7a:	701a      	strb	r2, [r3, #0]
    6e7c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e84:	781b      	ldrb	r3, [r3, #0]
    6e86:	3301      	adds	r3, #1
    6e88:	b2da      	uxtb	r2, r3
    6e8a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e92:	701a      	strb	r2, [r3, #0]
    6e94:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e9c:	781b      	ldrb	r3, [r3, #0]
    6e9e:	2bff      	cmp	r3, #255	; 0xff
    6ea0:	d105      	bne.n	6eae <ground_calibrate+0xd7e>
    6ea2:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eaa:	2200      	movs	r2, #0
    6eac:	701a      	strb	r2, [r3, #0]
    6eae:	f24c 3319 	movw	r3, #49945	; 0xc319
    6eb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eb6:	781b      	ldrb	r3, [r3, #0]
    6eb8:	461a      	mov	r2, r3
    6eba:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ec2:	7819      	ldrb	r1, [r3, #0]
    6ec4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ecc:	5499      	strb	r1, [r3, r2]
    6ece:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ed6:	781b      	ldrb	r3, [r3, #0]
    6ed8:	3301      	adds	r3, #1
    6eda:	b2da      	uxtb	r2, r3
    6edc:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ee4:	701a      	strb	r2, [r3, #0]
    6ee6:	f24c 3319 	movw	r3, #49945	; 0xc319
    6eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eee:	781b      	ldrb	r3, [r3, #0]
    6ef0:	2bff      	cmp	r3, #255	; 0xff
    6ef2:	d105      	bne.n	6f00 <ground_calibrate+0xdd0>
    6ef4:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6efc:	2200      	movs	r2, #0
    6efe:	701a      	strb	r2, [r3, #0]
    6f00:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f08:	781b      	ldrb	r3, [r3, #0]
    6f0a:	461a      	mov	r2, r3
    6f0c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6f10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f14:	7819      	ldrb	r1, [r3, #0]
    6f16:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f1e:	5499      	strb	r1, [r3, r2]
    6f20:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f28:	781b      	ldrb	r3, [r3, #0]
    6f2a:	3301      	adds	r3, #1
    6f2c:	b2da      	uxtb	r2, r3
    6f2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f36:	701a      	strb	r2, [r3, #0]
    6f38:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f40:	781b      	ldrb	r3, [r3, #0]
    6f42:	2bff      	cmp	r3, #255	; 0xff
    6f44:	d105      	bne.n	6f52 <ground_calibrate+0xe22>
    6f46:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f4e:	2200      	movs	r2, #0
    6f50:	701a      	strb	r2, [r3, #0]
    6f52:	f242 0339 	movw	r3, #8249	; 0x2039
    6f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f5a:	781b      	ldrb	r3, [r3, #0]
    6f5c:	b2db      	uxtb	r3, r3
    6f5e:	f003 0310 	and.w	r3, r3, #16
    6f62:	2b00      	cmp	r3, #0
    6f64:	d15a      	bne.n	701c <ground_calibrate+0xeec>
    6f66:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f6e:	781b      	ldrb	r3, [r3, #0]
    6f70:	b2db      	uxtb	r3, r3
    6f72:	461a      	mov	r2, r3
    6f74:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f7c:	5c9a      	ldrb	r2, [r3, r2]
    6f7e:	f24c 431b 	movw	r3, #50203	; 0xc41b
    6f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f86:	701a      	strb	r2, [r3, #0]
    6f88:	f24c 431c 	movw	r3, #50204	; 0xc41c
    6f8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f90:	2200      	movs	r2, #0
    6f92:	701a      	strb	r2, [r3, #0]
    6f94:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6f98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f9c:	781b      	ldrb	r3, [r3, #0]
    6f9e:	b2db      	uxtb	r3, r3
    6fa0:	3301      	adds	r3, #1
    6fa2:	b2da      	uxtb	r2, r3
    6fa4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fac:	701a      	strb	r2, [r3, #0]
    6fae:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6fb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fb6:	781b      	ldrb	r3, [r3, #0]
    6fb8:	b2db      	uxtb	r3, r3
    6fba:	2bff      	cmp	r3, #255	; 0xff
    6fbc:	d105      	bne.n	6fca <ground_calibrate+0xe9a>
    6fbe:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fc6:	2200      	movs	r2, #0
    6fc8:	701a      	strb	r2, [r3, #0]
    6fca:	f242 0338 	movw	r3, #8248	; 0x2038
    6fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fd2:	f242 0238 	movw	r2, #8248	; 0x2038
    6fd6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6fda:	7812      	ldrb	r2, [r2, #0]
    6fdc:	b2d2      	uxtb	r2, r2
    6fde:	f042 0201 	orr.w	r2, r2, #1
    6fe2:	b2d2      	uxtb	r2, r2
    6fe4:	701a      	strb	r2, [r3, #0]
    6fe6:	f242 0339 	movw	r3, #8249	; 0x2039
    6fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fee:	f242 0239 	movw	r2, #8249	; 0x2039
    6ff2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6ff6:	7812      	ldrb	r2, [r2, #0]
    6ff8:	b2d2      	uxtb	r2, r2
    6ffa:	f042 0210 	orr.w	r2, r2, #16
    6ffe:	b2d2      	uxtb	r2, r2
    7000:	701a      	strb	r2, [r3, #0]
    7002:	e00b      	b.n	701c <ground_calibrate+0xeec>
    7004:	f24c 3318 	movw	r3, #49944	; 0xc318
    7008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    700c:	781b      	ldrb	r3, [r3, #0]
    700e:	3301      	adds	r3, #1
    7010:	b2da      	uxtb	r2, r3
    7012:	f24c 3318 	movw	r3, #49944	; 0xc318
    7016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    701a:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    701c:	f24c 3312 	movw	r3, #49938	; 0xc312
    7020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7024:	2202      	movs	r2, #2
    7026:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    7028:	f24c 3319 	movw	r3, #49945	; 0xc319
    702c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7030:	781a      	ldrb	r2, [r3, #0]
    7032:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    703a:	781b      	ldrb	r3, [r3, #0]
    703c:	b2db      	uxtb	r3, r3
    703e:	429a      	cmp	r2, r3
    7040:	d318      	bcc.n	7074 <ground_calibrate+0xf44>
    7042:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    704a:	781b      	ldrb	r3, [r3, #0]
    704c:	b2db      	uxtb	r3, r3
    704e:	461a      	mov	r2, r3
    7050:	f24c 3319 	movw	r3, #49945	; 0xc319
    7054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7058:	781b      	ldrb	r3, [r3, #0]
    705a:	1ad3      	subs	r3, r2, r3
    705c:	33ff      	adds	r3, #255	; 0xff
    705e:	2b06      	cmp	r3, #6
    7060:	bfd4      	ite	le
    7062:	2300      	movle	r3, #0
    7064:	2301      	movgt	r3, #1
    7066:	b2db      	uxtb	r3, r3
    7068:	e016      	b.n	7098 <ground_calibrate+0xf68>
    706a:	bf00      	nop
    706c:	20000543 	.word	0x20000543
    7070:	20000545 	.word	0x20000545
    7074:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    707c:	781b      	ldrb	r3, [r3, #0]
    707e:	b2db      	uxtb	r3, r3
    7080:	461a      	mov	r2, r3
    7082:	f24c 3319 	movw	r3, #49945	; 0xc319
    7086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    708a:	781b      	ldrb	r3, [r3, #0]
    708c:	1ad3      	subs	r3, r2, r3
    708e:	2b06      	cmp	r3, #6
    7090:	bfd4      	ite	le
    7092:	2300      	movle	r3, #0
    7094:	2301      	movgt	r3, #1
    7096:	b2db      	uxtb	r3, r3
    7098:	2b00      	cmp	r3, #0
    709a:	f000 8194 	beq.w	73c6 <ground_calibrate+0x1296>
    709e:	f24c 3319 	movw	r3, #49945	; 0xc319
    70a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70a6:	781b      	ldrb	r3, [r3, #0]
    70a8:	461a      	mov	r2, r3
    70aa:	f24c 331c 	movw	r3, #49948	; 0xc31c
    70ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70b2:	2105      	movs	r1, #5
    70b4:	5499      	strb	r1, [r3, r2]
    70b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    70ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70be:	781b      	ldrb	r3, [r3, #0]
    70c0:	3301      	adds	r3, #1
    70c2:	b2da      	uxtb	r2, r3
    70c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    70c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70cc:	701a      	strb	r2, [r3, #0]
    70ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    70d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70d6:	781b      	ldrb	r3, [r3, #0]
    70d8:	2bff      	cmp	r3, #255	; 0xff
    70da:	d105      	bne.n	70e8 <ground_calibrate+0xfb8>
    70dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    70e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70e4:	2200      	movs	r2, #0
    70e6:	701a      	strb	r2, [r3, #0]
    70e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    70ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70f0:	781b      	ldrb	r3, [r3, #0]
    70f2:	461a      	mov	r2, r3
    70f4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    70f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70fc:	2103      	movs	r1, #3
    70fe:	5499      	strb	r1, [r3, r2]
    7100:	f24c 3319 	movw	r3, #49945	; 0xc319
    7104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7108:	781b      	ldrb	r3, [r3, #0]
    710a:	3301      	adds	r3, #1
    710c:	b2da      	uxtb	r2, r3
    710e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7116:	701a      	strb	r2, [r3, #0]
    7118:	f24c 3319 	movw	r3, #49945	; 0xc319
    711c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7120:	781b      	ldrb	r3, [r3, #0]
    7122:	2bff      	cmp	r3, #255	; 0xff
    7124:	d105      	bne.n	7132 <ground_calibrate+0x1002>
    7126:	f24c 3319 	movw	r3, #49945	; 0xc319
    712a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    712e:	2200      	movs	r2, #0
    7130:	701a      	strb	r2, [r3, #0]
    7132:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    713a:	2203      	movs	r2, #3
    713c:	701a      	strb	r2, [r3, #0]
    713e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7146:	2203      	movs	r2, #3
    7148:	701a      	strb	r2, [r3, #0]
    714a:	f24c 3319 	movw	r3, #49945	; 0xc319
    714e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7152:	781b      	ldrb	r3, [r3, #0]
    7154:	461a      	mov	r2, r3
    7156:	f240 5340 	movw	r3, #1344	; 0x540
    715a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    715e:	7819      	ldrb	r1, [r3, #0]
    7160:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7168:	5499      	strb	r1, [r3, r2]
    716a:	f240 5340 	movw	r3, #1344	; 0x540
    716e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7172:	781a      	ldrb	r2, [r3, #0]
    7174:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    717c:	781b      	ldrb	r3, [r3, #0]
    717e:	4413      	add	r3, r2
    7180:	b2da      	uxtb	r2, r3
    7182:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    718a:	701a      	strb	r2, [r3, #0]
    718c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7194:	781a      	ldrb	r2, [r3, #0]
    7196:	f24c 431d 	movw	r3, #50205	; 0xc41d
    719a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    719e:	781b      	ldrb	r3, [r3, #0]
    71a0:	4413      	add	r3, r2
    71a2:	b2da      	uxtb	r2, r3
    71a4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    71a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ac:	701a      	strb	r2, [r3, #0]
    71ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    71b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71b6:	781b      	ldrb	r3, [r3, #0]
    71b8:	3301      	adds	r3, #1
    71ba:	b2da      	uxtb	r2, r3
    71bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    71c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71c4:	701a      	strb	r2, [r3, #0]
    71c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    71ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ce:	781b      	ldrb	r3, [r3, #0]
    71d0:	2bff      	cmp	r3, #255	; 0xff
    71d2:	d105      	bne.n	71e0 <ground_calibrate+0x10b0>
    71d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    71d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71dc:	2200      	movs	r2, #0
    71de:	701a      	strb	r2, [r3, #0]
    71e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    71e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71e8:	781b      	ldrb	r3, [r3, #0]
    71ea:	461a      	mov	r2, r3
    71ec:	f240 5340 	movw	r3, #1344	; 0x540
    71f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71f4:	7859      	ldrb	r1, [r3, #1]
    71f6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    71fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71fe:	5499      	strb	r1, [r3, r2]
    7200:	4b77      	ldr	r3, [pc, #476]	; (73e0 <ground_calibrate+0x12b0>)
    7202:	781a      	ldrb	r2, [r3, #0]
    7204:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    720c:	781b      	ldrb	r3, [r3, #0]
    720e:	4413      	add	r3, r2
    7210:	b2da      	uxtb	r2, r3
    7212:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    721a:	701a      	strb	r2, [r3, #0]
    721c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7224:	781a      	ldrb	r2, [r3, #0]
    7226:	f24c 431d 	movw	r3, #50205	; 0xc41d
    722a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    722e:	781b      	ldrb	r3, [r3, #0]
    7230:	4413      	add	r3, r2
    7232:	b2da      	uxtb	r2, r3
    7234:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    723c:	701a      	strb	r2, [r3, #0]
    723e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7246:	781b      	ldrb	r3, [r3, #0]
    7248:	3301      	adds	r3, #1
    724a:	b2da      	uxtb	r2, r3
    724c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7254:	701a      	strb	r2, [r3, #0]
    7256:	f24c 3319 	movw	r3, #49945	; 0xc319
    725a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    725e:	781b      	ldrb	r3, [r3, #0]
    7260:	2bff      	cmp	r3, #255	; 0xff
    7262:	d105      	bne.n	7270 <ground_calibrate+0x1140>
    7264:	f24c 3319 	movw	r3, #49945	; 0xc319
    7268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    726c:	2200      	movs	r2, #0
    726e:	701a      	strb	r2, [r3, #0]
    7270:	f24c 3319 	movw	r3, #49945	; 0xc319
    7274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7278:	781b      	ldrb	r3, [r3, #0]
    727a:	461a      	mov	r2, r3
    727c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7284:	7819      	ldrb	r1, [r3, #0]
    7286:	f24c 331c 	movw	r3, #49948	; 0xc31c
    728a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    728e:	5499      	strb	r1, [r3, r2]
    7290:	f24c 3319 	movw	r3, #49945	; 0xc319
    7294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7298:	781b      	ldrb	r3, [r3, #0]
    729a:	3301      	adds	r3, #1
    729c:	b2da      	uxtb	r2, r3
    729e:	f24c 3319 	movw	r3, #49945	; 0xc319
    72a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72a6:	701a      	strb	r2, [r3, #0]
    72a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    72ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72b0:	781b      	ldrb	r3, [r3, #0]
    72b2:	2bff      	cmp	r3, #255	; 0xff
    72b4:	d105      	bne.n	72c2 <ground_calibrate+0x1192>
    72b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    72ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72be:	2200      	movs	r2, #0
    72c0:	701a      	strb	r2, [r3, #0]
    72c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    72c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72ca:	781b      	ldrb	r3, [r3, #0]
    72cc:	461a      	mov	r2, r3
    72ce:	f24c 431e 	movw	r3, #50206	; 0xc41e
    72d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72d6:	7819      	ldrb	r1, [r3, #0]
    72d8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    72dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72e0:	5499      	strb	r1, [r3, r2]
    72e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    72e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72ea:	781b      	ldrb	r3, [r3, #0]
    72ec:	3301      	adds	r3, #1
    72ee:	b2da      	uxtb	r2, r3
    72f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    72f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72f8:	701a      	strb	r2, [r3, #0]
    72fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    72fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7302:	781b      	ldrb	r3, [r3, #0]
    7304:	2bff      	cmp	r3, #255	; 0xff
    7306:	d105      	bne.n	7314 <ground_calibrate+0x11e4>
    7308:	f24c 3319 	movw	r3, #49945	; 0xc319
    730c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7310:	2200      	movs	r2, #0
    7312:	701a      	strb	r2, [r3, #0]
    7314:	f242 0339 	movw	r3, #8249	; 0x2039
    7318:	f2c2 0300 	movt	r3, #8192	; 0x2000
    731c:	781b      	ldrb	r3, [r3, #0]
    731e:	b2db      	uxtb	r3, r3
    7320:	f003 0310 	and.w	r3, r3, #16
    7324:	2b00      	cmp	r3, #0
    7326:	d15a      	bne.n	73de <ground_calibrate+0x12ae>
    7328:	f24c 331a 	movw	r3, #49946	; 0xc31a
    732c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7330:	781b      	ldrb	r3, [r3, #0]
    7332:	b2db      	uxtb	r3, r3
    7334:	461a      	mov	r2, r3
    7336:	f24c 331c 	movw	r3, #49948	; 0xc31c
    733a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    733e:	5c9a      	ldrb	r2, [r3, r2]
    7340:	f24c 431b 	movw	r3, #50203	; 0xc41b
    7344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7348:	701a      	strb	r2, [r3, #0]
    734a:	f24c 431c 	movw	r3, #50204	; 0xc41c
    734e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7352:	2200      	movs	r2, #0
    7354:	701a      	strb	r2, [r3, #0]
    7356:	f24c 331a 	movw	r3, #49946	; 0xc31a
    735a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    735e:	781b      	ldrb	r3, [r3, #0]
    7360:	b2db      	uxtb	r3, r3
    7362:	3301      	adds	r3, #1
    7364:	b2da      	uxtb	r2, r3
    7366:	f24c 331a 	movw	r3, #49946	; 0xc31a
    736a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    736e:	701a      	strb	r2, [r3, #0]
    7370:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7378:	781b      	ldrb	r3, [r3, #0]
    737a:	b2db      	uxtb	r3, r3
    737c:	2bff      	cmp	r3, #255	; 0xff
    737e:	d105      	bne.n	738c <ground_calibrate+0x125c>
    7380:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7388:	2200      	movs	r2, #0
    738a:	701a      	strb	r2, [r3, #0]
    738c:	f242 0338 	movw	r3, #8248	; 0x2038
    7390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7394:	f242 0238 	movw	r2, #8248	; 0x2038
    7398:	f2c2 0200 	movt	r2, #8192	; 0x2000
    739c:	7812      	ldrb	r2, [r2, #0]
    739e:	b2d2      	uxtb	r2, r2
    73a0:	f042 0201 	orr.w	r2, r2, #1
    73a4:	b2d2      	uxtb	r2, r2
    73a6:	701a      	strb	r2, [r3, #0]
    73a8:	f242 0339 	movw	r3, #8249	; 0x2039
    73ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73b0:	f242 0239 	movw	r2, #8249	; 0x2039
    73b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    73b8:	7812      	ldrb	r2, [r2, #0]
    73ba:	b2d2      	uxtb	r2, r2
    73bc:	f042 0210 	orr.w	r2, r2, #16
    73c0:	b2d2      	uxtb	r2, r2
    73c2:	701a      	strb	r2, [r3, #0]
    73c4:	e00b      	b.n	73de <ground_calibrate+0x12ae>
    73c6:	f24c 3318 	movw	r3, #49944	; 0xc318
    73ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73ce:	781b      	ldrb	r3, [r3, #0]
    73d0:	3301      	adds	r3, #1
    73d2:	b2da      	uxtb	r2, r3
    73d4:	f24c 3318 	movw	r3, #49944	; 0xc318
    73d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73dc:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    73de:	bd80      	pop	{r7, pc}
    73e0:	20000541 	.word	0x20000541

000073e4 <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    73e4:	b480      	push	{r7}
    73e6:	b083      	sub	sp, #12
    73e8:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    73ea:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    73ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73f2:	781b      	ldrb	r3, [r3, #0]
    73f4:	2b03      	cmp	r3, #3
    73f6:	d10c      	bne.n	7412 <pprz_mode_update+0x2e>
    73f8:	f24c 3300 	movw	r3, #49920	; 0xc300
    73fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7400:	781b      	ldrb	r3, [r3, #0]
    7402:	2b00      	cmp	r3, #0
    7404:	d032      	beq.n	746c <pprz_mode_update+0x88>
    7406:	f24c 3300 	movw	r3, #49920	; 0xc300
    740a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    740e:	2200      	movs	r2, #0
    7410:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    7412:	f24c 4320 	movw	r3, #50208	; 0xc420
    7416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    741a:	891b      	ldrh	r3, [r3, #8]
    741c:	b21b      	sxth	r3, r3
    741e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    7422:	dc0f      	bgt.n	7444 <pprz_mode_update+0x60>
    7424:	f24c 4320 	movw	r3, #50208	; 0xc420
    7428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    742c:	891b      	ldrh	r3, [r3, #8]
    742e:	b21a      	sxth	r2, r3
    7430:	f64e 5341 	movw	r3, #60737	; 0xed41
    7434:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    7438:	429a      	cmp	r2, r3
    743a:	bfb4      	ite	lt
    743c:	2300      	movlt	r3, #0
    743e:	2301      	movge	r3, #1
    7440:	b2db      	uxtb	r3, r3
    7442:	e000      	b.n	7446 <pprz_mode_update+0x62>
    7444:	2302      	movs	r3, #2
    7446:	71fb      	strb	r3, [r7, #7]
    7448:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    744c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7450:	781b      	ldrb	r3, [r3, #0]
    7452:	79fa      	ldrb	r2, [r7, #7]
    7454:	429a      	cmp	r2, r3
    7456:	d007      	beq.n	7468 <pprz_mode_update+0x84>
    7458:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    745c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7460:	79fa      	ldrb	r2, [r7, #7]
    7462:	701a      	strb	r2, [r3, #0]
    7464:	2301      	movs	r3, #1
    7466:	e002      	b.n	746e <pprz_mode_update+0x8a>
    7468:	2300      	movs	r3, #0
    746a:	e000      	b.n	746e <pprz_mode_update+0x8a>
  } else
    return FALSE;
    746c:	2300      	movs	r3, #0
}
    746e:	4618      	mov	r0, r3
    7470:	370c      	adds	r7, #12
    7472:	46bd      	mov	sp, r7
    7474:	f85d 7b04 	ldr.w	r7, [sp], #4
    7478:	4770      	bx	lr
    747a:	bf00      	nop

0000747c <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    747c:	b480      	push	{r7}
    747e:	b083      	sub	sp, #12
    7480:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    7482:	f24c 4320 	movw	r3, #50208	; 0xc420
    7486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    748a:	89db      	ldrh	r3, [r3, #14]
    748c:	b21a      	sxth	r2, r3
    748e:	f640 437f 	movw	r3, #3199	; 0xc7f
    7492:	429a      	cmp	r2, r3
    7494:	bfd4      	ite	le
    7496:	2300      	movle	r3, #0
    7498:	2301      	movgt	r3, #1
    749a:	b2db      	uxtb	r3, r3
    749c:	71fb      	strb	r3, [r7, #7]
    749e:	f240 533c 	movw	r3, #1340	; 0x53c
    74a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74a6:	781b      	ldrb	r3, [r3, #0]
    74a8:	79fa      	ldrb	r2, [r7, #7]
    74aa:	429a      	cmp	r2, r3
    74ac:	d007      	beq.n	74be <ir_estim_mode_update+0x42>
    74ae:	f240 533c 	movw	r3, #1340	; 0x53c
    74b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74b6:	79fa      	ldrb	r2, [r7, #7]
    74b8:	701a      	strb	r2, [r3, #0]
    74ba:	2301      	movs	r3, #1
    74bc:	e000      	b.n	74c0 <ir_estim_mode_update+0x44>
    74be:	2300      	movs	r3, #0
}
    74c0:	4618      	mov	r0, r3
    74c2:	370c      	adds	r7, #12
    74c4:	46bd      	mov	sp, r7
    74c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    74ca:	4770      	bx	lr

000074cc <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    74cc:	b480      	push	{r7}
    74ce:	b083      	sub	sp, #12
    74d0:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    74d2:	f24c 4320 	movw	r3, #50208	; 0xc420
    74d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74da:	7cdb      	ldrb	r3, [r3, #19]
    74dc:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    74de:	f24c 3303 	movw	r3, #49923	; 0xc303
    74e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74e6:	781b      	ldrb	r3, [r3, #0]
    74e8:	79fa      	ldrb	r2, [r7, #7]
    74ea:	429a      	cmp	r2, r3
    74ec:	d017      	beq.n	751e <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    74ee:	f24c 3303 	movw	r3, #49923	; 0xc303
    74f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74f6:	781b      	ldrb	r3, [r3, #0]
    74f8:	461a      	mov	r2, r3
    74fa:	79fb      	ldrb	r3, [r7, #7]
    74fc:	4053      	eors	r3, r2
    74fe:	f003 0303 	and.w	r3, r3, #3
    7502:	2b00      	cmp	r3, #0
    7504:	bf0c      	ite	eq
    7506:	2300      	moveq	r3, #0
    7508:	2301      	movne	r3, #1
    750a:	b2db      	uxtb	r3, r3
    750c:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    750e:	f24c 3303 	movw	r3, #49923	; 0xc303
    7512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7516:	79fa      	ldrb	r2, [r7, #7]
    7518:	701a      	strb	r2, [r3, #0]
    return changed;
    751a:	79bb      	ldrb	r3, [r7, #6]
    751c:	e000      	b.n	7520 <mcu1_status_update+0x54>
  }
  return FALSE;
    751e:	2300      	movs	r3, #0
}
    7520:	4618      	mov	r0, r3
    7522:	370c      	adds	r7, #12
    7524:	46bd      	mov	sp, r7
    7526:	f85d 7b04 	ldr.w	r7, [sp], #4
    752a:	4770      	bx	lr

0000752c <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    752c:	b480      	push	{r7}
    752e:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    7530:	f64c 132c 	movw	r3, #51500	; 0xc92c
    7534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7538:	781b      	ldrb	r3, [r3, #0]
    753a:	2b00      	cmp	r3, #0
    753c:	d12a      	bne.n	7594 <events_update+0x68>
    753e:	f24c 4320 	movw	r3, #50208	; 0xc420
    7542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7546:	895b      	ldrh	r3, [r3, #10]
    7548:	b21b      	sxth	r3, r3
    754a:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    754e:	dd21      	ble.n	7594 <events_update+0x68>
    7550:	f24c 3314 	movw	r3, #49940	; 0xc314
    7554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7558:	881b      	ldrh	r3, [r3, #0]
    755a:	2b13      	cmp	r3, #19
    755c:	d819      	bhi.n	7592 <events_update+0x66>
    755e:	f24c 3314 	movw	r3, #49940	; 0xc314
    7562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7566:	881b      	ldrh	r3, [r3, #0]
    7568:	3301      	adds	r3, #1
    756a:	b29a      	uxth	r2, r3
    756c:	f24c 3314 	movw	r3, #49940	; 0xc314
    7570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7574:	801a      	strh	r2, [r3, #0]
    7576:	f24c 3314 	movw	r3, #49940	; 0xc314
    757a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    757e:	881b      	ldrh	r3, [r3, #0]
    7580:	2b14      	cmp	r3, #20
    7582:	d106      	bne.n	7592 <events_update+0x66>
    7584:	f24c 3300 	movw	r3, #49920	; 0xc300
    7588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    758c:	2201      	movs	r2, #1
    758e:	701a      	strb	r2, [r3, #0]
    7590:	e00c      	b.n	75ac <events_update+0x80>
    7592:	e00b      	b.n	75ac <events_update+0x80>
    7594:	f24c 3314 	movw	r3, #49940	; 0xc314
    7598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    759c:	2200      	movs	r2, #0
    759e:	801a      	strh	r2, [r3, #0]
    75a0:	f24c 3300 	movw	r3, #49920	; 0xc300
    75a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75a8:	2200      	movs	r2, #0
    75aa:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    75ac:	f64c 132c 	movw	r3, #51500	; 0xc92c
    75b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75b4:	781b      	ldrb	r3, [r3, #0]
    75b6:	2b00      	cmp	r3, #0
    75b8:	d12a      	bne.n	7610 <events_update+0xe4>
    75ba:	f24c 4320 	movw	r3, #50208	; 0xc420
    75be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75c2:	895b      	ldrh	r3, [r3, #10]
    75c4:	b21b      	sxth	r3, r3
    75c6:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    75ca:	da21      	bge.n	7610 <events_update+0xe4>
    75cc:	f24c 3316 	movw	r3, #49942	; 0xc316
    75d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75d4:	881b      	ldrh	r3, [r3, #0]
    75d6:	2b13      	cmp	r3, #19
    75d8:	d819      	bhi.n	760e <events_update+0xe2>
    75da:	f24c 3316 	movw	r3, #49942	; 0xc316
    75de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75e2:	881b      	ldrh	r3, [r3, #0]
    75e4:	3301      	adds	r3, #1
    75e6:	b29a      	uxth	r2, r3
    75e8:	f24c 3316 	movw	r3, #49942	; 0xc316
    75ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75f0:	801a      	strh	r2, [r3, #0]
    75f2:	f24c 3316 	movw	r3, #49942	; 0xc316
    75f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75fa:	881b      	ldrh	r3, [r3, #0]
    75fc:	2b14      	cmp	r3, #20
    75fe:	d106      	bne.n	760e <events_update+0xe2>
    7600:	f24c 3301 	movw	r3, #49921	; 0xc301
    7604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7608:	2201      	movs	r2, #1
    760a:	701a      	strb	r2, [r3, #0]
    760c:	e00c      	b.n	7628 <events_update+0xfc>
    760e:	e00b      	b.n	7628 <events_update+0xfc>
    7610:	f24c 3316 	movw	r3, #49942	; 0xc316
    7614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7618:	2200      	movs	r2, #0
    761a:	801a      	strh	r2, [r3, #0]
    761c:	f24c 3301 	movw	r3, #49921	; 0xc301
    7620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7624:	2200      	movs	r2, #0
    7626:	701a      	strb	r2, [r3, #0]
}  
    7628:	46bd      	mov	sp, r7
    762a:	f85d 7b04 	ldr.w	r7, [sp], #4
    762e:	4770      	bx	lr

00007630 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    7630:	b480      	push	{r7}
    7632:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    7634:	f24c 4320 	movw	r3, #50208	; 0xc420
    7638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    763c:	88da      	ldrh	r2, [r3, #6]
    763e:	f24c 4338 	movw	r3, #50232	; 0xc438
    7642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7646:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    7648:	f24c 4338 	movw	r3, #50232	; 0xc438
    764c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7650:	2200      	movs	r2, #0
    7652:	74da      	strb	r2, [r3, #19]
}
    7654:	46bd      	mov	sp, r7
    7656:	f85d 7b04 	ldr.w	r7, [sp], #4
    765a:	4770      	bx	lr

0000765c <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    765c:	b480      	push	{r7}
    765e:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  //if (boot) 
  {
      DOWNLINK_SEND_BOOT(&version);
    7660:	f24c 3319 	movw	r3, #49945	; 0xc319
    7664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7668:	781a      	ldrb	r2, [r3, #0]
    766a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    766e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7672:	781b      	ldrb	r3, [r3, #0]
    7674:	b2db      	uxtb	r3, r3
    7676:	429a      	cmp	r2, r3
    7678:	d313      	bcc.n	76a2 <send_boot+0x46>
    767a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    767e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7682:	781b      	ldrb	r3, [r3, #0]
    7684:	b2db      	uxtb	r3, r3
    7686:	461a      	mov	r2, r3
    7688:	f24c 3319 	movw	r3, #49945	; 0xc319
    768c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7690:	781b      	ldrb	r3, [r3, #0]
    7692:	1ad3      	subs	r3, r2, r3
    7694:	33ff      	adds	r3, #255	; 0xff
    7696:	2b06      	cmp	r3, #6
    7698:	bfd4      	ite	le
    769a:	2300      	movle	r3, #0
    769c:	2301      	movgt	r3, #1
    769e:	b2db      	uxtb	r3, r3
    76a0:	e011      	b.n	76c6 <send_boot+0x6a>
    76a2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    76a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76aa:	781b      	ldrb	r3, [r3, #0]
    76ac:	b2db      	uxtb	r3, r3
    76ae:	461a      	mov	r2, r3
    76b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    76b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76b8:	781b      	ldrb	r3, [r3, #0]
    76ba:	1ad3      	subs	r3, r2, r3
    76bc:	2b06      	cmp	r3, #6
    76be:	bfd4      	ite	le
    76c0:	2300      	movle	r3, #0
    76c2:	2301      	movgt	r3, #1
    76c4:	b2db      	uxtb	r3, r3
    76c6:	2b00      	cmp	r3, #0
    76c8:	f000 8194 	beq.w	79f4 <send_boot+0x398>
    76cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    76d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76d4:	781b      	ldrb	r3, [r3, #0]
    76d6:	461a      	mov	r2, r3
    76d8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    76dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76e0:	2105      	movs	r1, #5
    76e2:	5499      	strb	r1, [r3, r2]
    76e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    76e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ec:	781b      	ldrb	r3, [r3, #0]
    76ee:	3301      	adds	r3, #1
    76f0:	b2da      	uxtb	r2, r3
    76f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    76f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76fa:	701a      	strb	r2, [r3, #0]
    76fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    7700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7704:	781b      	ldrb	r3, [r3, #0]
    7706:	2bff      	cmp	r3, #255	; 0xff
    7708:	d105      	bne.n	7716 <send_boot+0xba>
    770a:	f24c 3319 	movw	r3, #49945	; 0xc319
    770e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7712:	2200      	movs	r2, #0
    7714:	701a      	strb	r2, [r3, #0]
    7716:	f24c 3319 	movw	r3, #49945	; 0xc319
    771a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    771e:	781b      	ldrb	r3, [r3, #0]
    7720:	461a      	mov	r2, r3
    7722:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    772a:	2101      	movs	r1, #1
    772c:	5499      	strb	r1, [r3, r2]
    772e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7736:	781b      	ldrb	r3, [r3, #0]
    7738:	3301      	adds	r3, #1
    773a:	b2da      	uxtb	r2, r3
    773c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7744:	701a      	strb	r2, [r3, #0]
    7746:	f24c 3319 	movw	r3, #49945	; 0xc319
    774a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    774e:	781b      	ldrb	r3, [r3, #0]
    7750:	2bff      	cmp	r3, #255	; 0xff
    7752:	d105      	bne.n	7760 <send_boot+0x104>
    7754:	f24c 3319 	movw	r3, #49945	; 0xc319
    7758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    775c:	2200      	movs	r2, #0
    775e:	701a      	strb	r2, [r3, #0]
    7760:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7768:	2201      	movs	r2, #1
    776a:	701a      	strb	r2, [r3, #0]
    776c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7774:	2201      	movs	r2, #1
    7776:	701a      	strb	r2, [r3, #0]
    7778:	f24c 3319 	movw	r3, #49945	; 0xc319
    777c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7780:	781b      	ldrb	r3, [r3, #0]
    7782:	461a      	mov	r2, r3
    7784:	f648 13d2 	movw	r3, #35282	; 0x89d2
    7788:	f2c0 0301 	movt	r3, #1
    778c:	7819      	ldrb	r1, [r3, #0]
    778e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7796:	5499      	strb	r1, [r3, r2]
    7798:	f648 13d2 	movw	r3, #35282	; 0x89d2
    779c:	f2c0 0301 	movt	r3, #1
    77a0:	781a      	ldrb	r2, [r3, #0]
    77a2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    77a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77aa:	781b      	ldrb	r3, [r3, #0]
    77ac:	4413      	add	r3, r2
    77ae:	b2da      	uxtb	r2, r3
    77b0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    77b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77b8:	701a      	strb	r2, [r3, #0]
    77ba:	f24c 431e 	movw	r3, #50206	; 0xc41e
    77be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77c2:	781a      	ldrb	r2, [r3, #0]
    77c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    77c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77cc:	781b      	ldrb	r3, [r3, #0]
    77ce:	4413      	add	r3, r2
    77d0:	b2da      	uxtb	r2, r3
    77d2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    77d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77da:	701a      	strb	r2, [r3, #0]
    77dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    77e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77e4:	781b      	ldrb	r3, [r3, #0]
    77e6:	3301      	adds	r3, #1
    77e8:	b2da      	uxtb	r2, r3
    77ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    77ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77f2:	701a      	strb	r2, [r3, #0]
    77f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    77f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77fc:	781b      	ldrb	r3, [r3, #0]
    77fe:	2bff      	cmp	r3, #255	; 0xff
    7800:	d105      	bne.n	780e <send_boot+0x1b2>
    7802:	f24c 3319 	movw	r3, #49945	; 0xc319
    7806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    780a:	2200      	movs	r2, #0
    780c:	701a      	strb	r2, [r3, #0]
    780e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7816:	781b      	ldrb	r3, [r3, #0]
    7818:	461a      	mov	r2, r3
    781a:	f648 13d2 	movw	r3, #35282	; 0x89d2
    781e:	f2c0 0301 	movt	r3, #1
    7822:	7859      	ldrb	r1, [r3, #1]
    7824:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    782c:	5499      	strb	r1, [r3, r2]
    782e:	4b88      	ldr	r3, [pc, #544]	; (7a50 <send_boot+0x3f4>)
    7830:	781a      	ldrb	r2, [r3, #0]
    7832:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    783a:	781b      	ldrb	r3, [r3, #0]
    783c:	4413      	add	r3, r2
    783e:	b2da      	uxtb	r2, r3
    7840:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7848:	701a      	strb	r2, [r3, #0]
    784a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    784e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7852:	781a      	ldrb	r2, [r3, #0]
    7854:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    785c:	781b      	ldrb	r3, [r3, #0]
    785e:	4413      	add	r3, r2
    7860:	b2da      	uxtb	r2, r3
    7862:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    786a:	701a      	strb	r2, [r3, #0]
    786c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7874:	781b      	ldrb	r3, [r3, #0]
    7876:	3301      	adds	r3, #1
    7878:	b2da      	uxtb	r2, r3
    787a:	f24c 3319 	movw	r3, #49945	; 0xc319
    787e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7882:	701a      	strb	r2, [r3, #0]
    7884:	f24c 3319 	movw	r3, #49945	; 0xc319
    7888:	f2c2 0304 	movt	r3, #8196	; 0x2004
    788c:	781b      	ldrb	r3, [r3, #0]
    788e:	2bff      	cmp	r3, #255	; 0xff
    7890:	d105      	bne.n	789e <send_boot+0x242>
    7892:	f24c 3319 	movw	r3, #49945	; 0xc319
    7896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    789a:	2200      	movs	r2, #0
    789c:	701a      	strb	r2, [r3, #0]
    789e:	f24c 3319 	movw	r3, #49945	; 0xc319
    78a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78a6:	781b      	ldrb	r3, [r3, #0]
    78a8:	461a      	mov	r2, r3
    78aa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    78ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78b2:	7819      	ldrb	r1, [r3, #0]
    78b4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    78b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78bc:	5499      	strb	r1, [r3, r2]
    78be:	f24c 3319 	movw	r3, #49945	; 0xc319
    78c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78c6:	781b      	ldrb	r3, [r3, #0]
    78c8:	3301      	adds	r3, #1
    78ca:	b2da      	uxtb	r2, r3
    78cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    78d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78d4:	701a      	strb	r2, [r3, #0]
    78d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    78da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78de:	781b      	ldrb	r3, [r3, #0]
    78e0:	2bff      	cmp	r3, #255	; 0xff
    78e2:	d105      	bne.n	78f0 <send_boot+0x294>
    78e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    78e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ec:	2200      	movs	r2, #0
    78ee:	701a      	strb	r2, [r3, #0]
    78f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    78f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78f8:	781b      	ldrb	r3, [r3, #0]
    78fa:	461a      	mov	r2, r3
    78fc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7900:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7904:	7819      	ldrb	r1, [r3, #0]
    7906:	f24c 331c 	movw	r3, #49948	; 0xc31c
    790a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    790e:	5499      	strb	r1, [r3, r2]
    7910:	f24c 3319 	movw	r3, #49945	; 0xc319
    7914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7918:	781b      	ldrb	r3, [r3, #0]
    791a:	3301      	adds	r3, #1
    791c:	b2da      	uxtb	r2, r3
    791e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7926:	701a      	strb	r2, [r3, #0]
    7928:	f24c 3319 	movw	r3, #49945	; 0xc319
    792c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7930:	781b      	ldrb	r3, [r3, #0]
    7932:	2bff      	cmp	r3, #255	; 0xff
    7934:	d105      	bne.n	7942 <send_boot+0x2e6>
    7936:	f24c 3319 	movw	r3, #49945	; 0xc319
    793a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    793e:	2200      	movs	r2, #0
    7940:	701a      	strb	r2, [r3, #0]
    7942:	f242 0339 	movw	r3, #8249	; 0x2039
    7946:	f2c2 0300 	movt	r3, #8192	; 0x2000
    794a:	781b      	ldrb	r3, [r3, #0]
    794c:	b2db      	uxtb	r3, r3
    794e:	f003 0310 	and.w	r3, r3, #16
    7952:	2b00      	cmp	r3, #0
    7954:	d15a      	bne.n	7a0c <send_boot+0x3b0>
    7956:	f24c 331a 	movw	r3, #49946	; 0xc31a
    795a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    795e:	781b      	ldrb	r3, [r3, #0]
    7960:	b2db      	uxtb	r3, r3
    7962:	461a      	mov	r2, r3
    7964:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    796c:	5c9a      	ldrb	r2, [r3, r2]
    796e:	f24c 431b 	movw	r3, #50203	; 0xc41b
    7972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7976:	701a      	strb	r2, [r3, #0]
    7978:	f24c 431c 	movw	r3, #50204	; 0xc41c
    797c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7980:	2200      	movs	r2, #0
    7982:	701a      	strb	r2, [r3, #0]
    7984:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7988:	f2c2 0304 	movt	r3, #8196	; 0x2004
    798c:	781b      	ldrb	r3, [r3, #0]
    798e:	b2db      	uxtb	r3, r3
    7990:	3301      	adds	r3, #1
    7992:	b2da      	uxtb	r2, r3
    7994:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    799c:	701a      	strb	r2, [r3, #0]
    799e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    79a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79a6:	781b      	ldrb	r3, [r3, #0]
    79a8:	b2db      	uxtb	r3, r3
    79aa:	2bff      	cmp	r3, #255	; 0xff
    79ac:	d105      	bne.n	79ba <send_boot+0x35e>
    79ae:	f24c 331a 	movw	r3, #49946	; 0xc31a
    79b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79b6:	2200      	movs	r2, #0
    79b8:	701a      	strb	r2, [r3, #0]
    79ba:	f242 0338 	movw	r3, #8248	; 0x2038
    79be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79c2:	f242 0238 	movw	r2, #8248	; 0x2038
    79c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    79ca:	7812      	ldrb	r2, [r2, #0]
    79cc:	b2d2      	uxtb	r2, r2
    79ce:	f042 0201 	orr.w	r2, r2, #1
    79d2:	b2d2      	uxtb	r2, r2
    79d4:	701a      	strb	r2, [r3, #0]
    79d6:	f242 0339 	movw	r3, #8249	; 0x2039
    79da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79de:	f242 0239 	movw	r2, #8249	; 0x2039
    79e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    79e6:	7812      	ldrb	r2, [r2, #0]
    79e8:	b2d2      	uxtb	r2, r2
    79ea:	f042 0210 	orr.w	r2, r2, #16
    79ee:	b2d2      	uxtb	r2, r2
    79f0:	701a      	strb	r2, [r3, #0]
    79f2:	e00b      	b.n	7a0c <send_boot+0x3b0>
    79f4:	f24c 3318 	movw	r3, #49944	; 0xc318
    79f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79fc:	781b      	ldrb	r3, [r3, #0]
    79fe:	3301      	adds	r3, #1
    7a00:	b2da      	uxtb	r2, r3
    7a02:	f24c 3318 	movw	r3, #49944	; 0xc318
    7a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a0a:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    7a0c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a14:	781a      	ldrb	r2, [r3, #0]
    7a16:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7a1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a1e:	781b      	ldrb	r3, [r3, #0]
    7a20:	b2db      	uxtb	r3, r3
    7a22:	429a      	cmp	r2, r3
    7a24:	d316      	bcc.n	7a54 <send_boot+0x3f8>
    7a26:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a2e:	781b      	ldrb	r3, [r3, #0]
    7a30:	b2db      	uxtb	r3, r3
    7a32:	461a      	mov	r2, r3
    7a34:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a3c:	781b      	ldrb	r3, [r3, #0]
    7a3e:	1ad3      	subs	r3, r2, r3
    7a40:	33ff      	adds	r3, #255	; 0xff
    7a42:	2b14      	cmp	r3, #20
    7a44:	bfd4      	ite	le
    7a46:	2300      	movle	r3, #0
    7a48:	2301      	movgt	r3, #1
    7a4a:	b2db      	uxtb	r3, r3
    7a4c:	e014      	b.n	7a78 <send_boot+0x41c>
    7a4e:	bf00      	nop
    7a50:	000189d3 	.word	0x000189d3
    7a54:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a5c:	781b      	ldrb	r3, [r3, #0]
    7a5e:	b2db      	uxtb	r3, r3
    7a60:	461a      	mov	r2, r3
    7a62:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a6a:	781b      	ldrb	r3, [r3, #0]
    7a6c:	1ad3      	subs	r3, r2, r3
    7a6e:	2b14      	cmp	r3, #20
    7a70:	bfd4      	ite	le
    7a72:	2300      	movle	r3, #0
    7a74:	2301      	movgt	r3, #1
    7a76:	b2db      	uxtb	r3, r3
    7a78:	2b00      	cmp	r3, #0
    7a7a:	f000 85a5 	beq.w	85c8 <send_boot+0xf6c>
    7a7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a86:	781b      	ldrb	r3, [r3, #0]
    7a88:	461a      	mov	r2, r3
    7a8a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a92:	2105      	movs	r1, #5
    7a94:	5499      	strb	r1, [r3, r2]
    7a96:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a9e:	781b      	ldrb	r3, [r3, #0]
    7aa0:	3301      	adds	r3, #1
    7aa2:	b2da      	uxtb	r2, r3
    7aa4:	f24c 3319 	movw	r3, #49945	; 0xc319
    7aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aac:	701a      	strb	r2, [r3, #0]
    7aae:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ab6:	781b      	ldrb	r3, [r3, #0]
    7ab8:	2bff      	cmp	r3, #255	; 0xff
    7aba:	d105      	bne.n	7ac8 <send_boot+0x46c>
    7abc:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ac4:	2200      	movs	r2, #0
    7ac6:	701a      	strb	r2, [r3, #0]
    7ac8:	f24c 3319 	movw	r3, #49945	; 0xc319
    7acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ad0:	781b      	ldrb	r3, [r3, #0]
    7ad2:	461a      	mov	r2, r3
    7ad4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7adc:	2105      	movs	r1, #5
    7ade:	5499      	strb	r1, [r3, r2]
    7ae0:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ae8:	781b      	ldrb	r3, [r3, #0]
    7aea:	3301      	adds	r3, #1
    7aec:	b2da      	uxtb	r2, r3
    7aee:	f24c 3319 	movw	r3, #49945	; 0xc319
    7af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7af6:	701a      	strb	r2, [r3, #0]
    7af8:	f24c 3319 	movw	r3, #49945	; 0xc319
    7afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b00:	781b      	ldrb	r3, [r3, #0]
    7b02:	2bff      	cmp	r3, #255	; 0xff
    7b04:	d105      	bne.n	7b12 <send_boot+0x4b6>
    7b06:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b0e:	2200      	movs	r2, #0
    7b10:	701a      	strb	r2, [r3, #0]
    7b12:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7b16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b1a:	2205      	movs	r2, #5
    7b1c:	701a      	strb	r2, [r3, #0]
    7b1e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7b22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b26:	2205      	movs	r2, #5
    7b28:	701a      	strb	r2, [r3, #0]
    7b2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b32:	781b      	ldrb	r3, [r3, #0]
    7b34:	461a      	mov	r2, r3
    7b36:	f64c 1310 	movw	r3, #51472	; 0xc910
    7b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b3e:	7819      	ldrb	r1, [r3, #0]
    7b40:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b48:	5499      	strb	r1, [r3, r2]
    7b4a:	f64c 1310 	movw	r3, #51472	; 0xc910
    7b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b52:	781a      	ldrb	r2, [r3, #0]
    7b54:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b5c:	781b      	ldrb	r3, [r3, #0]
    7b5e:	4413      	add	r3, r2
    7b60:	b2da      	uxtb	r2, r3
    7b62:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b6a:	701a      	strb	r2, [r3, #0]
    7b6c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b74:	781a      	ldrb	r2, [r3, #0]
    7b76:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b7e:	781b      	ldrb	r3, [r3, #0]
    7b80:	4413      	add	r3, r2
    7b82:	b2da      	uxtb	r2, r3
    7b84:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b8c:	701a      	strb	r2, [r3, #0]
    7b8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b96:	781b      	ldrb	r3, [r3, #0]
    7b98:	3301      	adds	r3, #1
    7b9a:	b2da      	uxtb	r2, r3
    7b9c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ba4:	701a      	strb	r2, [r3, #0]
    7ba6:	f24c 3319 	movw	r3, #49945	; 0xc319
    7baa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bae:	781b      	ldrb	r3, [r3, #0]
    7bb0:	2bff      	cmp	r3, #255	; 0xff
    7bb2:	d105      	bne.n	7bc0 <send_boot+0x564>
    7bb4:	f24c 3319 	movw	r3, #49945	; 0xc319
    7bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bbc:	2200      	movs	r2, #0
    7bbe:	701a      	strb	r2, [r3, #0]
    7bc0:	f24c 3319 	movw	r3, #49945	; 0xc319
    7bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bc8:	781b      	ldrb	r3, [r3, #0]
    7bca:	461a      	mov	r2, r3
    7bcc:	f64c 1310 	movw	r3, #51472	; 0xc910
    7bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bd4:	7859      	ldrb	r1, [r3, #1]
    7bd6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7bda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bde:	5499      	strb	r1, [r3, r2]
    7be0:	4bd1      	ldr	r3, [pc, #836]	; (7f28 <send_boot+0x8cc>)
    7be2:	781a      	ldrb	r2, [r3, #0]
    7be4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7be8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bec:	781b      	ldrb	r3, [r3, #0]
    7bee:	4413      	add	r3, r2
    7bf0:	b2da      	uxtb	r2, r3
    7bf2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7bf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bfa:	701a      	strb	r2, [r3, #0]
    7bfc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7c00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c04:	781a      	ldrb	r2, [r3, #0]
    7c06:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c0e:	781b      	ldrb	r3, [r3, #0]
    7c10:	4413      	add	r3, r2
    7c12:	b2da      	uxtb	r2, r3
    7c14:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c1c:	701a      	strb	r2, [r3, #0]
    7c1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c26:	781b      	ldrb	r3, [r3, #0]
    7c28:	3301      	adds	r3, #1
    7c2a:	b2da      	uxtb	r2, r3
    7c2c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c34:	701a      	strb	r2, [r3, #0]
    7c36:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c3e:	781b      	ldrb	r3, [r3, #0]
    7c40:	2bff      	cmp	r3, #255	; 0xff
    7c42:	d105      	bne.n	7c50 <send_boot+0x5f4>
    7c44:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c4c:	2200      	movs	r2, #0
    7c4e:	701a      	strb	r2, [r3, #0]
    7c50:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c58:	781b      	ldrb	r3, [r3, #0]
    7c5a:	461a      	mov	r2, r3
    7c5c:	f64c 1310 	movw	r3, #51472	; 0xc910
    7c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c64:	7899      	ldrb	r1, [r3, #2]
    7c66:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c6e:	5499      	strb	r1, [r3, r2]
    7c70:	4bae      	ldr	r3, [pc, #696]	; (7f2c <send_boot+0x8d0>)
    7c72:	781a      	ldrb	r2, [r3, #0]
    7c74:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c7c:	781b      	ldrb	r3, [r3, #0]
    7c7e:	4413      	add	r3, r2
    7c80:	b2da      	uxtb	r2, r3
    7c82:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7c86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c8a:	701a      	strb	r2, [r3, #0]
    7c8c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c94:	781a      	ldrb	r2, [r3, #0]
    7c96:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7c9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c9e:	781b      	ldrb	r3, [r3, #0]
    7ca0:	4413      	add	r3, r2
    7ca2:	b2da      	uxtb	r2, r3
    7ca4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7ca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cac:	701a      	strb	r2, [r3, #0]
    7cae:	f24c 3319 	movw	r3, #49945	; 0xc319
    7cb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cb6:	781b      	ldrb	r3, [r3, #0]
    7cb8:	3301      	adds	r3, #1
    7cba:	b2da      	uxtb	r2, r3
    7cbc:	f24c 3319 	movw	r3, #49945	; 0xc319
    7cc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cc4:	701a      	strb	r2, [r3, #0]
    7cc6:	f24c 3319 	movw	r3, #49945	; 0xc319
    7cca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cce:	781b      	ldrb	r3, [r3, #0]
    7cd0:	2bff      	cmp	r3, #255	; 0xff
    7cd2:	d105      	bne.n	7ce0 <send_boot+0x684>
    7cd4:	f24c 3319 	movw	r3, #49945	; 0xc319
    7cd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cdc:	2200      	movs	r2, #0
    7cde:	701a      	strb	r2, [r3, #0]
    7ce0:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ce8:	781b      	ldrb	r3, [r3, #0]
    7cea:	461a      	mov	r2, r3
    7cec:	f64c 1310 	movw	r3, #51472	; 0xc910
    7cf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cf4:	78d9      	ldrb	r1, [r3, #3]
    7cf6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7cfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cfe:	5499      	strb	r1, [r3, r2]
    7d00:	4b8b      	ldr	r3, [pc, #556]	; (7f30 <send_boot+0x8d4>)
    7d02:	781a      	ldrb	r2, [r3, #0]
    7d04:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7d08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d0c:	781b      	ldrb	r3, [r3, #0]
    7d0e:	4413      	add	r3, r2
    7d10:	b2da      	uxtb	r2, r3
    7d12:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7d16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d1a:	701a      	strb	r2, [r3, #0]
    7d1c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d24:	781a      	ldrb	r2, [r3, #0]
    7d26:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7d2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d2e:	781b      	ldrb	r3, [r3, #0]
    7d30:	4413      	add	r3, r2
    7d32:	b2da      	uxtb	r2, r3
    7d34:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d3c:	701a      	strb	r2, [r3, #0]
    7d3e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d46:	781b      	ldrb	r3, [r3, #0]
    7d48:	3301      	adds	r3, #1
    7d4a:	b2da      	uxtb	r2, r3
    7d4c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d54:	701a      	strb	r2, [r3, #0]
    7d56:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d5e:	781b      	ldrb	r3, [r3, #0]
    7d60:	2bff      	cmp	r3, #255	; 0xff
    7d62:	d105      	bne.n	7d70 <send_boot+0x714>
    7d64:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d6c:	2200      	movs	r2, #0
    7d6e:	701a      	strb	r2, [r3, #0]
    7d70:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d78:	781b      	ldrb	r3, [r3, #0]
    7d7a:	461a      	mov	r2, r3
    7d7c:	f64c 1314 	movw	r3, #51476	; 0xc914
    7d80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d84:	7819      	ldrb	r1, [r3, #0]
    7d86:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d8e:	5499      	strb	r1, [r3, r2]
    7d90:	f64c 1314 	movw	r3, #51476	; 0xc914
    7d94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d98:	781a      	ldrb	r2, [r3, #0]
    7d9a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7d9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7da2:	781b      	ldrb	r3, [r3, #0]
    7da4:	4413      	add	r3, r2
    7da6:	b2da      	uxtb	r2, r3
    7da8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7dac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7db0:	701a      	strb	r2, [r3, #0]
    7db2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7db6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dba:	781a      	ldrb	r2, [r3, #0]
    7dbc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dc4:	781b      	ldrb	r3, [r3, #0]
    7dc6:	4413      	add	r3, r2
    7dc8:	b2da      	uxtb	r2, r3
    7dca:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dd2:	701a      	strb	r2, [r3, #0]
    7dd4:	f24c 3319 	movw	r3, #49945	; 0xc319
    7dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ddc:	781b      	ldrb	r3, [r3, #0]
    7dde:	3301      	adds	r3, #1
    7de0:	b2da      	uxtb	r2, r3
    7de2:	f24c 3319 	movw	r3, #49945	; 0xc319
    7de6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dea:	701a      	strb	r2, [r3, #0]
    7dec:	f24c 3319 	movw	r3, #49945	; 0xc319
    7df0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7df4:	781b      	ldrb	r3, [r3, #0]
    7df6:	2bff      	cmp	r3, #255	; 0xff
    7df8:	d105      	bne.n	7e06 <send_boot+0x7aa>
    7dfa:	f24c 3319 	movw	r3, #49945	; 0xc319
    7dfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e02:	2200      	movs	r2, #0
    7e04:	701a      	strb	r2, [r3, #0]
    7e06:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e0e:	781b      	ldrb	r3, [r3, #0]
    7e10:	461a      	mov	r2, r3
    7e12:	f64c 1314 	movw	r3, #51476	; 0xc914
    7e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e1a:	7859      	ldrb	r1, [r3, #1]
    7e1c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7e20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e24:	5499      	strb	r1, [r3, r2]
    7e26:	4b43      	ldr	r3, [pc, #268]	; (7f34 <send_boot+0x8d8>)
    7e28:	781a      	ldrb	r2, [r3, #0]
    7e2a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7e2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e32:	781b      	ldrb	r3, [r3, #0]
    7e34:	4413      	add	r3, r2
    7e36:	b2da      	uxtb	r2, r3
    7e38:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e40:	701a      	strb	r2, [r3, #0]
    7e42:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7e46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e4a:	781a      	ldrb	r2, [r3, #0]
    7e4c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7e50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e54:	781b      	ldrb	r3, [r3, #0]
    7e56:	4413      	add	r3, r2
    7e58:	b2da      	uxtb	r2, r3
    7e5a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e62:	701a      	strb	r2, [r3, #0]
    7e64:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e6c:	781b      	ldrb	r3, [r3, #0]
    7e6e:	3301      	adds	r3, #1
    7e70:	b2da      	uxtb	r2, r3
    7e72:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e7a:	701a      	strb	r2, [r3, #0]
    7e7c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e84:	781b      	ldrb	r3, [r3, #0]
    7e86:	2bff      	cmp	r3, #255	; 0xff
    7e88:	d105      	bne.n	7e96 <send_boot+0x83a>
    7e8a:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e92:	2200      	movs	r2, #0
    7e94:	701a      	strb	r2, [r3, #0]
    7e96:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e9e:	781b      	ldrb	r3, [r3, #0]
    7ea0:	461a      	mov	r2, r3
    7ea2:	f64c 1314 	movw	r3, #51476	; 0xc914
    7ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eaa:	7899      	ldrb	r1, [r3, #2]
    7eac:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eb4:	5499      	strb	r1, [r3, r2]
    7eb6:	4b20      	ldr	r3, [pc, #128]	; (7f38 <send_boot+0x8dc>)
    7eb8:	781a      	ldrb	r2, [r3, #0]
    7eba:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ec2:	781b      	ldrb	r3, [r3, #0]
    7ec4:	4413      	add	r3, r2
    7ec6:	b2da      	uxtb	r2, r3
    7ec8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ed0:	701a      	strb	r2, [r3, #0]
    7ed2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7ed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eda:	781a      	ldrb	r2, [r3, #0]
    7edc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7ee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ee4:	781b      	ldrb	r3, [r3, #0]
    7ee6:	4413      	add	r3, r2
    7ee8:	b2da      	uxtb	r2, r3
    7eea:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ef2:	701a      	strb	r2, [r3, #0]
    7ef4:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7efc:	781b      	ldrb	r3, [r3, #0]
    7efe:	3301      	adds	r3, #1
    7f00:	b2da      	uxtb	r2, r3
    7f02:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f0a:	701a      	strb	r2, [r3, #0]
    7f0c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f14:	781b      	ldrb	r3, [r3, #0]
    7f16:	2bff      	cmp	r3, #255	; 0xff
    7f18:	d110      	bne.n	7f3c <send_boot+0x8e0>
    7f1a:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f22:	2200      	movs	r2, #0
    7f24:	701a      	strb	r2, [r3, #0]
    7f26:	e009      	b.n	7f3c <send_boot+0x8e0>
    7f28:	2004c911 	.word	0x2004c911
    7f2c:	2004c912 	.word	0x2004c912
    7f30:	2004c913 	.word	0x2004c913
    7f34:	2004c915 	.word	0x2004c915
    7f38:	2004c916 	.word	0x2004c916
    7f3c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f44:	781b      	ldrb	r3, [r3, #0]
    7f46:	461a      	mov	r2, r3
    7f48:	f64c 1314 	movw	r3, #51476	; 0xc914
    7f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f50:	78d9      	ldrb	r1, [r3, #3]
    7f52:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7f56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f5a:	5499      	strb	r1, [r3, r2]
    7f5c:	4bd3      	ldr	r3, [pc, #844]	; (82ac <send_boot+0xc50>)
    7f5e:	781a      	ldrb	r2, [r3, #0]
    7f60:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7f64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f68:	781b      	ldrb	r3, [r3, #0]
    7f6a:	4413      	add	r3, r2
    7f6c:	b2da      	uxtb	r2, r3
    7f6e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f76:	701a      	strb	r2, [r3, #0]
    7f78:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f80:	781a      	ldrb	r2, [r3, #0]
    7f82:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f8a:	781b      	ldrb	r3, [r3, #0]
    7f8c:	4413      	add	r3, r2
    7f8e:	b2da      	uxtb	r2, r3
    7f90:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f98:	701a      	strb	r2, [r3, #0]
    7f9a:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fa2:	781b      	ldrb	r3, [r3, #0]
    7fa4:	3301      	adds	r3, #1
    7fa6:	b2da      	uxtb	r2, r3
    7fa8:	f24c 3319 	movw	r3, #49945	; 0xc319
    7fac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fb0:	701a      	strb	r2, [r3, #0]
    7fb2:	f24c 3319 	movw	r3, #49945	; 0xc319
    7fb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fba:	781b      	ldrb	r3, [r3, #0]
    7fbc:	2bff      	cmp	r3, #255	; 0xff
    7fbe:	d105      	bne.n	7fcc <send_boot+0x970>
    7fc0:	f24c 3319 	movw	r3, #49945	; 0xc319
    7fc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fc8:	2200      	movs	r2, #0
    7fca:	701a      	strb	r2, [r3, #0]
    7fcc:	f24c 3319 	movw	r3, #49945	; 0xc319
    7fd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fd4:	781b      	ldrb	r3, [r3, #0]
    7fd6:	461a      	mov	r2, r3
    7fd8:	f64c 130c 	movw	r3, #51468	; 0xc90c
    7fdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fe0:	7819      	ldrb	r1, [r3, #0]
    7fe2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7fe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fea:	5499      	strb	r1, [r3, r2]
    7fec:	f64c 130c 	movw	r3, #51468	; 0xc90c
    7ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ff4:	781a      	ldrb	r2, [r3, #0]
    7ff6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7ffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ffe:	781b      	ldrb	r3, [r3, #0]
    8000:	4413      	add	r3, r2
    8002:	b2da      	uxtb	r2, r3
    8004:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    800c:	701a      	strb	r2, [r3, #0]
    800e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8016:	781a      	ldrb	r2, [r3, #0]
    8018:	f24c 431d 	movw	r3, #50205	; 0xc41d
    801c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8020:	781b      	ldrb	r3, [r3, #0]
    8022:	4413      	add	r3, r2
    8024:	b2da      	uxtb	r2, r3
    8026:	f24c 431e 	movw	r3, #50206	; 0xc41e
    802a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    802e:	701a      	strb	r2, [r3, #0]
    8030:	f24c 3319 	movw	r3, #49945	; 0xc319
    8034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8038:	781b      	ldrb	r3, [r3, #0]
    803a:	3301      	adds	r3, #1
    803c:	b2da      	uxtb	r2, r3
    803e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8046:	701a      	strb	r2, [r3, #0]
    8048:	f24c 3319 	movw	r3, #49945	; 0xc319
    804c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8050:	781b      	ldrb	r3, [r3, #0]
    8052:	2bff      	cmp	r3, #255	; 0xff
    8054:	d105      	bne.n	8062 <send_boot+0xa06>
    8056:	f24c 3319 	movw	r3, #49945	; 0xc319
    805a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    805e:	2200      	movs	r2, #0
    8060:	701a      	strb	r2, [r3, #0]
    8062:	f24c 3319 	movw	r3, #49945	; 0xc319
    8066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    806a:	781b      	ldrb	r3, [r3, #0]
    806c:	461a      	mov	r2, r3
    806e:	f64c 130c 	movw	r3, #51468	; 0xc90c
    8072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8076:	7859      	ldrb	r1, [r3, #1]
    8078:	f24c 331c 	movw	r3, #49948	; 0xc31c
    807c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8080:	5499      	strb	r1, [r3, r2]
    8082:	4b8b      	ldr	r3, [pc, #556]	; (82b0 <send_boot+0xc54>)
    8084:	781a      	ldrb	r2, [r3, #0]
    8086:	f24c 431d 	movw	r3, #50205	; 0xc41d
    808a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    808e:	781b      	ldrb	r3, [r3, #0]
    8090:	4413      	add	r3, r2
    8092:	b2da      	uxtb	r2, r3
    8094:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    809c:	701a      	strb	r2, [r3, #0]
    809e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    80a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80a6:	781a      	ldrb	r2, [r3, #0]
    80a8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    80ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80b0:	781b      	ldrb	r3, [r3, #0]
    80b2:	4413      	add	r3, r2
    80b4:	b2da      	uxtb	r2, r3
    80b6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    80ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80be:	701a      	strb	r2, [r3, #0]
    80c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    80c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80c8:	781b      	ldrb	r3, [r3, #0]
    80ca:	3301      	adds	r3, #1
    80cc:	b2da      	uxtb	r2, r3
    80ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    80d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80d6:	701a      	strb	r2, [r3, #0]
    80d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    80dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80e0:	781b      	ldrb	r3, [r3, #0]
    80e2:	2bff      	cmp	r3, #255	; 0xff
    80e4:	d105      	bne.n	80f2 <send_boot+0xa96>
    80e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    80ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ee:	2200      	movs	r2, #0
    80f0:	701a      	strb	r2, [r3, #0]
    80f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    80f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80fa:	781b      	ldrb	r3, [r3, #0]
    80fc:	461a      	mov	r2, r3
    80fe:	f64c 130c 	movw	r3, #51468	; 0xc90c
    8102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8106:	7899      	ldrb	r1, [r3, #2]
    8108:	f24c 331c 	movw	r3, #49948	; 0xc31c
    810c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8110:	5499      	strb	r1, [r3, r2]
    8112:	4b68      	ldr	r3, [pc, #416]	; (82b4 <send_boot+0xc58>)
    8114:	781a      	ldrb	r2, [r3, #0]
    8116:	f24c 431d 	movw	r3, #50205	; 0xc41d
    811a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    811e:	781b      	ldrb	r3, [r3, #0]
    8120:	4413      	add	r3, r2
    8122:	b2da      	uxtb	r2, r3
    8124:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    812c:	701a      	strb	r2, [r3, #0]
    812e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8136:	781a      	ldrb	r2, [r3, #0]
    8138:	f24c 431d 	movw	r3, #50205	; 0xc41d
    813c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8140:	781b      	ldrb	r3, [r3, #0]
    8142:	4413      	add	r3, r2
    8144:	b2da      	uxtb	r2, r3
    8146:	f24c 431e 	movw	r3, #50206	; 0xc41e
    814a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    814e:	701a      	strb	r2, [r3, #0]
    8150:	f24c 3319 	movw	r3, #49945	; 0xc319
    8154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8158:	781b      	ldrb	r3, [r3, #0]
    815a:	3301      	adds	r3, #1
    815c:	b2da      	uxtb	r2, r3
    815e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8162:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8166:	701a      	strb	r2, [r3, #0]
    8168:	f24c 3319 	movw	r3, #49945	; 0xc319
    816c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8170:	781b      	ldrb	r3, [r3, #0]
    8172:	2bff      	cmp	r3, #255	; 0xff
    8174:	d105      	bne.n	8182 <send_boot+0xb26>
    8176:	f24c 3319 	movw	r3, #49945	; 0xc319
    817a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    817e:	2200      	movs	r2, #0
    8180:	701a      	strb	r2, [r3, #0]
    8182:	f24c 3319 	movw	r3, #49945	; 0xc319
    8186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    818a:	781b      	ldrb	r3, [r3, #0]
    818c:	461a      	mov	r2, r3
    818e:	f64c 130c 	movw	r3, #51468	; 0xc90c
    8192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8196:	78d9      	ldrb	r1, [r3, #3]
    8198:	f24c 331c 	movw	r3, #49948	; 0xc31c
    819c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81a0:	5499      	strb	r1, [r3, r2]
    81a2:	4b45      	ldr	r3, [pc, #276]	; (82b8 <send_boot+0xc5c>)
    81a4:	781a      	ldrb	r2, [r3, #0]
    81a6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    81aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81ae:	781b      	ldrb	r3, [r3, #0]
    81b0:	4413      	add	r3, r2
    81b2:	b2da      	uxtb	r2, r3
    81b4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    81b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81bc:	701a      	strb	r2, [r3, #0]
    81be:	f24c 431e 	movw	r3, #50206	; 0xc41e
    81c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81c6:	781a      	ldrb	r2, [r3, #0]
    81c8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    81cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81d0:	781b      	ldrb	r3, [r3, #0]
    81d2:	4413      	add	r3, r2
    81d4:	b2da      	uxtb	r2, r3
    81d6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    81da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81de:	701a      	strb	r2, [r3, #0]
    81e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    81e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81e8:	781b      	ldrb	r3, [r3, #0]
    81ea:	3301      	adds	r3, #1
    81ec:	b2da      	uxtb	r2, r3
    81ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    81f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81f6:	701a      	strb	r2, [r3, #0]
    81f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    81fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8200:	781b      	ldrb	r3, [r3, #0]
    8202:	2bff      	cmp	r3, #255	; 0xff
    8204:	d105      	bne.n	8212 <send_boot+0xbb6>
    8206:	f24c 3319 	movw	r3, #49945	; 0xc319
    820a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    820e:	2200      	movs	r2, #0
    8210:	701a      	strb	r2, [r3, #0]
    8212:	f24c 3319 	movw	r3, #49945	; 0xc319
    8216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    821a:	781b      	ldrb	r3, [r3, #0]
    821c:	461a      	mov	r2, r3
    821e:	f240 5342 	movw	r3, #1346	; 0x542
    8222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8226:	7819      	ldrb	r1, [r3, #0]
    8228:	f24c 331c 	movw	r3, #49948	; 0xc31c
    822c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8230:	5499      	strb	r1, [r3, r2]
    8232:	f240 5342 	movw	r3, #1346	; 0x542
    8236:	f2c2 0300 	movt	r3, #8192	; 0x2000
    823a:	781a      	ldrb	r2, [r3, #0]
    823c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8244:	781b      	ldrb	r3, [r3, #0]
    8246:	4413      	add	r3, r2
    8248:	b2da      	uxtb	r2, r3
    824a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    824e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8252:	701a      	strb	r2, [r3, #0]
    8254:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    825c:	781a      	ldrb	r2, [r3, #0]
    825e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8266:	781b      	ldrb	r3, [r3, #0]
    8268:	4413      	add	r3, r2
    826a:	b2da      	uxtb	r2, r3
    826c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8274:	701a      	strb	r2, [r3, #0]
    8276:	f24c 3319 	movw	r3, #49945	; 0xc319
    827a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    827e:	781b      	ldrb	r3, [r3, #0]
    8280:	3301      	adds	r3, #1
    8282:	b2da      	uxtb	r2, r3
    8284:	f24c 3319 	movw	r3, #49945	; 0xc319
    8288:	f2c2 0304 	movt	r3, #8196	; 0x2004
    828c:	701a      	strb	r2, [r3, #0]
    828e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2bff      	cmp	r3, #255	; 0xff
    829a:	d10f      	bne.n	82bc <send_boot+0xc60>
    829c:	f24c 3319 	movw	r3, #49945	; 0xc319
    82a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82a4:	2200      	movs	r2, #0
    82a6:	701a      	strb	r2, [r3, #0]
    82a8:	e008      	b.n	82bc <send_boot+0xc60>
    82aa:	bf00      	nop
    82ac:	2004c917 	.word	0x2004c917
    82b0:	2004c90d 	.word	0x2004c90d
    82b4:	2004c90e 	.word	0x2004c90e
    82b8:	2004c90f 	.word	0x2004c90f
    82bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    82c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82c4:	781b      	ldrb	r3, [r3, #0]
    82c6:	461a      	mov	r2, r3
    82c8:	f240 5342 	movw	r3, #1346	; 0x542
    82cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82d0:	7859      	ldrb	r1, [r3, #1]
    82d2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    82d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82da:	5499      	strb	r1, [r3, r2]
    82dc:	4bc5      	ldr	r3, [pc, #788]	; (85f4 <send_boot+0xf98>)
    82de:	781a      	ldrb	r2, [r3, #0]
    82e0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    82e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82e8:	781b      	ldrb	r3, [r3, #0]
    82ea:	4413      	add	r3, r2
    82ec:	b2da      	uxtb	r2, r3
    82ee:	f24c 431d 	movw	r3, #50205	; 0xc41d
    82f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82f6:	701a      	strb	r2, [r3, #0]
    82f8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    82fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8300:	781a      	ldrb	r2, [r3, #0]
    8302:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    830a:	781b      	ldrb	r3, [r3, #0]
    830c:	4413      	add	r3, r2
    830e:	b2da      	uxtb	r2, r3
    8310:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8318:	701a      	strb	r2, [r3, #0]
    831a:	f24c 3319 	movw	r3, #49945	; 0xc319
    831e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8322:	781b      	ldrb	r3, [r3, #0]
    8324:	3301      	adds	r3, #1
    8326:	b2da      	uxtb	r2, r3
    8328:	f24c 3319 	movw	r3, #49945	; 0xc319
    832c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8330:	701a      	strb	r2, [r3, #0]
    8332:	f24c 3319 	movw	r3, #49945	; 0xc319
    8336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    833a:	781b      	ldrb	r3, [r3, #0]
    833c:	2bff      	cmp	r3, #255	; 0xff
    833e:	d105      	bne.n	834c <send_boot+0xcf0>
    8340:	f24c 3319 	movw	r3, #49945	; 0xc319
    8344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8348:	2200      	movs	r2, #0
    834a:	701a      	strb	r2, [r3, #0]
    834c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8354:	781b      	ldrb	r3, [r3, #0]
    8356:	461a      	mov	r2, r3
    8358:	f240 5344 	movw	r3, #1348	; 0x544
    835c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8360:	7819      	ldrb	r1, [r3, #0]
    8362:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    836a:	5499      	strb	r1, [r3, r2]
    836c:	f240 5344 	movw	r3, #1348	; 0x544
    8370:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8374:	781a      	ldrb	r2, [r3, #0]
    8376:	f24c 431d 	movw	r3, #50205	; 0xc41d
    837a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    837e:	781b      	ldrb	r3, [r3, #0]
    8380:	4413      	add	r3, r2
    8382:	b2da      	uxtb	r2, r3
    8384:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    838c:	701a      	strb	r2, [r3, #0]
    838e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8396:	781a      	ldrb	r2, [r3, #0]
    8398:	f24c 431d 	movw	r3, #50205	; 0xc41d
    839c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83a0:	781b      	ldrb	r3, [r3, #0]
    83a2:	4413      	add	r3, r2
    83a4:	b2da      	uxtb	r2, r3
    83a6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    83aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ae:	701a      	strb	r2, [r3, #0]
    83b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    83b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83b8:	781b      	ldrb	r3, [r3, #0]
    83ba:	3301      	adds	r3, #1
    83bc:	b2da      	uxtb	r2, r3
    83be:	f24c 3319 	movw	r3, #49945	; 0xc319
    83c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83c6:	701a      	strb	r2, [r3, #0]
    83c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    83cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83d0:	781b      	ldrb	r3, [r3, #0]
    83d2:	2bff      	cmp	r3, #255	; 0xff
    83d4:	d105      	bne.n	83e2 <send_boot+0xd86>
    83d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    83da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83de:	2200      	movs	r2, #0
    83e0:	701a      	strb	r2, [r3, #0]
    83e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    83e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ea:	781b      	ldrb	r3, [r3, #0]
    83ec:	461a      	mov	r2, r3
    83ee:	f240 5344 	movw	r3, #1348	; 0x544
    83f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83f6:	7859      	ldrb	r1, [r3, #1]
    83f8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    83fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8400:	5499      	strb	r1, [r3, r2]
    8402:	4b7d      	ldr	r3, [pc, #500]	; (85f8 <send_boot+0xf9c>)
    8404:	781a      	ldrb	r2, [r3, #0]
    8406:	f24c 431d 	movw	r3, #50205	; 0xc41d
    840a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    840e:	781b      	ldrb	r3, [r3, #0]
    8410:	4413      	add	r3, r2
    8412:	b2da      	uxtb	r2, r3
    8414:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    841c:	701a      	strb	r2, [r3, #0]
    841e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8426:	781a      	ldrb	r2, [r3, #0]
    8428:	f24c 431d 	movw	r3, #50205	; 0xc41d
    842c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8430:	781b      	ldrb	r3, [r3, #0]
    8432:	4413      	add	r3, r2
    8434:	b2da      	uxtb	r2, r3
    8436:	f24c 431e 	movw	r3, #50206	; 0xc41e
    843a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    843e:	701a      	strb	r2, [r3, #0]
    8440:	f24c 3319 	movw	r3, #49945	; 0xc319
    8444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8448:	781b      	ldrb	r3, [r3, #0]
    844a:	3301      	adds	r3, #1
    844c:	b2da      	uxtb	r2, r3
    844e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8456:	701a      	strb	r2, [r3, #0]
    8458:	f24c 3319 	movw	r3, #49945	; 0xc319
    845c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8460:	781b      	ldrb	r3, [r3, #0]
    8462:	2bff      	cmp	r3, #255	; 0xff
    8464:	d105      	bne.n	8472 <send_boot+0xe16>
    8466:	f24c 3319 	movw	r3, #49945	; 0xc319
    846a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    846e:	2200      	movs	r2, #0
    8470:	701a      	strb	r2, [r3, #0]
    8472:	f24c 3319 	movw	r3, #49945	; 0xc319
    8476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    847a:	781b      	ldrb	r3, [r3, #0]
    847c:	461a      	mov	r2, r3
    847e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8486:	7819      	ldrb	r1, [r3, #0]
    8488:	f24c 331c 	movw	r3, #49948	; 0xc31c
    848c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8490:	5499      	strb	r1, [r3, r2]
    8492:	f24c 3319 	movw	r3, #49945	; 0xc319
    8496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    849a:	781b      	ldrb	r3, [r3, #0]
    849c:	3301      	adds	r3, #1
    849e:	b2da      	uxtb	r2, r3
    84a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    84a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84a8:	701a      	strb	r2, [r3, #0]
    84aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    84ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84b2:	781b      	ldrb	r3, [r3, #0]
    84b4:	2bff      	cmp	r3, #255	; 0xff
    84b6:	d105      	bne.n	84c4 <send_boot+0xe68>
    84b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    84bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84c0:	2200      	movs	r2, #0
    84c2:	701a      	strb	r2, [r3, #0]
    84c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    84c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84cc:	781b      	ldrb	r3, [r3, #0]
    84ce:	461a      	mov	r2, r3
    84d0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    84d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84d8:	7819      	ldrb	r1, [r3, #0]
    84da:	f24c 331c 	movw	r3, #49948	; 0xc31c
    84de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84e2:	5499      	strb	r1, [r3, r2]
    84e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    84e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84ec:	781b      	ldrb	r3, [r3, #0]
    84ee:	3301      	adds	r3, #1
    84f0:	b2da      	uxtb	r2, r3
    84f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    84f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84fa:	701a      	strb	r2, [r3, #0]
    84fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    8500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8504:	781b      	ldrb	r3, [r3, #0]
    8506:	2bff      	cmp	r3, #255	; 0xff
    8508:	d105      	bne.n	8516 <send_boot+0xeba>
    850a:	f24c 3319 	movw	r3, #49945	; 0xc319
    850e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8512:	2200      	movs	r2, #0
    8514:	701a      	strb	r2, [r3, #0]
    8516:	f242 0339 	movw	r3, #8249	; 0x2039
    851a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    851e:	781b      	ldrb	r3, [r3, #0]
    8520:	b2db      	uxtb	r3, r3
    8522:	f003 0310 	and.w	r3, r3, #16
    8526:	2b00      	cmp	r3, #0
    8528:	d15a      	bne.n	85e0 <send_boot+0xf84>
    852a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    852e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8532:	781b      	ldrb	r3, [r3, #0]
    8534:	b2db      	uxtb	r3, r3
    8536:	461a      	mov	r2, r3
    8538:	f24c 331c 	movw	r3, #49948	; 0xc31c
    853c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8540:	5c9a      	ldrb	r2, [r3, r2]
    8542:	f24c 431b 	movw	r3, #50203	; 0xc41b
    8546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    854a:	701a      	strb	r2, [r3, #0]
    854c:	f24c 431c 	movw	r3, #50204	; 0xc41c
    8550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8554:	2200      	movs	r2, #0
    8556:	701a      	strb	r2, [r3, #0]
    8558:	f24c 331a 	movw	r3, #49946	; 0xc31a
    855c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8560:	781b      	ldrb	r3, [r3, #0]
    8562:	b2db      	uxtb	r3, r3
    8564:	3301      	adds	r3, #1
    8566:	b2da      	uxtb	r2, r3
    8568:	f24c 331a 	movw	r3, #49946	; 0xc31a
    856c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8570:	701a      	strb	r2, [r3, #0]
    8572:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    857a:	781b      	ldrb	r3, [r3, #0]
    857c:	b2db      	uxtb	r3, r3
    857e:	2bff      	cmp	r3, #255	; 0xff
    8580:	d105      	bne.n	858e <send_boot+0xf32>
    8582:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    858a:	2200      	movs	r2, #0
    858c:	701a      	strb	r2, [r3, #0]
    858e:	f242 0338 	movw	r3, #8248	; 0x2038
    8592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8596:	f242 0238 	movw	r2, #8248	; 0x2038
    859a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    859e:	7812      	ldrb	r2, [r2, #0]
    85a0:	b2d2      	uxtb	r2, r2
    85a2:	f042 0201 	orr.w	r2, r2, #1
    85a6:	b2d2      	uxtb	r2, r2
    85a8:	701a      	strb	r2, [r3, #0]
    85aa:	f242 0339 	movw	r3, #8249	; 0x2039
    85ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85b2:	f242 0239 	movw	r2, #8249	; 0x2039
    85b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    85ba:	7812      	ldrb	r2, [r2, #0]
    85bc:	b2d2      	uxtb	r2, r2
    85be:	f042 0210 	orr.w	r2, r2, #16
    85c2:	b2d2      	uxtb	r2, r2
    85c4:	701a      	strb	r2, [r3, #0]
    85c6:	e00b      	b.n	85e0 <send_boot+0xf84>
    85c8:	f24c 3318 	movw	r3, #49944	; 0xc318
    85cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85d0:	781b      	ldrb	r3, [r3, #0]
    85d2:	3301      	adds	r3, #1
    85d4:	b2da      	uxtb	r2, r3
    85d6:	f24c 3318 	movw	r3, #49944	; 0xc318
    85da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85de:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    85e0:	f240 533d 	movw	r3, #1341	; 0x53d
    85e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85e8:	2200      	movs	r2, #0
    85ea:	701a      	strb	r2, [r3, #0]
  }
}
    85ec:	46bd      	mov	sp, r7
    85ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    85f2:	4770      	bx	lr
    85f4:	20000543 	.word	0x20000543
    85f8:	20000545 	.word	0x20000545

000085fc <send_attitude>:
void send_attitude(void){ //499ms
    85fc:	b480      	push	{r7}
    85fe:	af00      	add	r7, sp, #0
    // add by wanbo
  //if(!boot)
  {
    count++;
    8600:	f24c 3311 	movw	r3, #49937	; 0xc311
    8604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8608:	781b      	ldrb	r3, [r3, #0]
    860a:	3301      	adds	r3, #1
    860c:	b2da      	uxtb	r2, r3
    860e:	f24c 3311 	movw	r3, #49937	; 0xc311
    8612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8616:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    8618:	f24c 3311 	movw	r3, #49937	; 0xc311
    861c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8620:	781b      	ldrb	r3, [r3, #0]
    8622:	2bfa      	cmp	r3, #250	; 0xfa
    8624:	d105      	bne.n	8632 <send_attitude+0x36>
    8626:	f24c 3311 	movw	r3, #49937	; 0xc311
    862a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    862e:	2200      	movs	r2, #0
    8630:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    8632:	f24c 3311 	movw	r3, #49937	; 0xc311
    8636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    863a:	781a      	ldrb	r2, [r3, #0]
    863c:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8640:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8644:	fba3 1302 	umull	r1, r3, r3, r2
    8648:	0899      	lsrs	r1, r3, #2
    864a:	460b      	mov	r3, r1
    864c:	009b      	lsls	r3, r3, #2
    864e:	440b      	add	r3, r1
    8650:	1ad3      	subs	r3, r2, r3
    8652:	b2db      	uxtb	r3, r3
    8654:	2b00      	cmp	r3, #0
    8656:	f040 84c1 	bne.w	8fdc <send_attitude+0x9e0>
       PERIODIC_SEND_ATTITUDE(); 
    865a:	f24c 3319 	movw	r3, #49945	; 0xc319
    865e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8662:	781a      	ldrb	r2, [r3, #0]
    8664:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    866c:	781b      	ldrb	r3, [r3, #0]
    866e:	b2db      	uxtb	r3, r3
    8670:	429a      	cmp	r2, r3
    8672:	d313      	bcc.n	869c <send_attitude+0xa0>
    8674:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    867c:	781b      	ldrb	r3, [r3, #0]
    867e:	b2db      	uxtb	r3, r3
    8680:	461a      	mov	r2, r3
    8682:	f24c 3319 	movw	r3, #49945	; 0xc319
    8686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    868a:	781b      	ldrb	r3, [r3, #0]
    868c:	1ad3      	subs	r3, r2, r3
    868e:	33ff      	adds	r3, #255	; 0xff
    8690:	2b10      	cmp	r3, #16
    8692:	bfd4      	ite	le
    8694:	2300      	movle	r3, #0
    8696:	2301      	movgt	r3, #1
    8698:	b2db      	uxtb	r3, r3
    869a:	e011      	b.n	86c0 <send_attitude+0xc4>
    869c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    86a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86a4:	781b      	ldrb	r3, [r3, #0]
    86a6:	b2db      	uxtb	r3, r3
    86a8:	461a      	mov	r2, r3
    86aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    86ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86b2:	781b      	ldrb	r3, [r3, #0]
    86b4:	1ad3      	subs	r3, r2, r3
    86b6:	2b10      	cmp	r3, #16
    86b8:	bfd4      	ite	le
    86ba:	2300      	movle	r3, #0
    86bc:	2301      	movgt	r3, #1
    86be:	b2db      	uxtb	r3, r3
    86c0:	2b00      	cmp	r3, #0
    86c2:	f000 847f 	beq.w	8fc4 <send_attitude+0x9c8>
    86c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    86ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ce:	781b      	ldrb	r3, [r3, #0]
    86d0:	461a      	mov	r2, r3
    86d2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    86d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86da:	2105      	movs	r1, #5
    86dc:	5499      	strb	r1, [r3, r2]
    86de:	f24c 3319 	movw	r3, #49945	; 0xc319
    86e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86e6:	781b      	ldrb	r3, [r3, #0]
    86e8:	3301      	adds	r3, #1
    86ea:	b2da      	uxtb	r2, r3
    86ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    86f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86f4:	701a      	strb	r2, [r3, #0]
    86f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    86fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86fe:	781b      	ldrb	r3, [r3, #0]
    8700:	2bff      	cmp	r3, #255	; 0xff
    8702:	d105      	bne.n	8710 <send_attitude+0x114>
    8704:	f24c 3319 	movw	r3, #49945	; 0xc319
    8708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    870c:	2200      	movs	r2, #0
    870e:	701a      	strb	r2, [r3, #0]
    8710:	f24c 3319 	movw	r3, #49945	; 0xc319
    8714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8718:	781b      	ldrb	r3, [r3, #0]
    871a:	461a      	mov	r2, r3
    871c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8724:	2106      	movs	r1, #6
    8726:	5499      	strb	r1, [r3, r2]
    8728:	f24c 3319 	movw	r3, #49945	; 0xc319
    872c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8730:	781b      	ldrb	r3, [r3, #0]
    8732:	3301      	adds	r3, #1
    8734:	b2da      	uxtb	r2, r3
    8736:	f24c 3319 	movw	r3, #49945	; 0xc319
    873a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    873e:	701a      	strb	r2, [r3, #0]
    8740:	f24c 3319 	movw	r3, #49945	; 0xc319
    8744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8748:	781b      	ldrb	r3, [r3, #0]
    874a:	2bff      	cmp	r3, #255	; 0xff
    874c:	d105      	bne.n	875a <send_attitude+0x15e>
    874e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8756:	2200      	movs	r2, #0
    8758:	701a      	strb	r2, [r3, #0]
    875a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    875e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8762:	2206      	movs	r2, #6
    8764:	701a      	strb	r2, [r3, #0]
    8766:	f24c 431e 	movw	r3, #50206	; 0xc41e
    876a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    876e:	2206      	movs	r2, #6
    8770:	701a      	strb	r2, [r3, #0]
    8772:	f24c 3319 	movw	r3, #49945	; 0xc319
    8776:	f2c2 0304 	movt	r3, #8196	; 0x2004
    877a:	781b      	ldrb	r3, [r3, #0]
    877c:	461a      	mov	r2, r3
    877e:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    8782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8786:	7819      	ldrb	r1, [r3, #0]
    8788:	f24c 331c 	movw	r3, #49948	; 0xc31c
    878c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8790:	5499      	strb	r1, [r3, r2]
    8792:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    8796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    879a:	781a      	ldrb	r2, [r3, #0]
    879c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    87a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87a4:	781b      	ldrb	r3, [r3, #0]
    87a6:	4413      	add	r3, r2
    87a8:	b2da      	uxtb	r2, r3
    87aa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    87ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87b2:	701a      	strb	r2, [r3, #0]
    87b4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    87b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87bc:	781a      	ldrb	r2, [r3, #0]
    87be:	f24c 431d 	movw	r3, #50205	; 0xc41d
    87c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87c6:	781b      	ldrb	r3, [r3, #0]
    87c8:	4413      	add	r3, r2
    87ca:	b2da      	uxtb	r2, r3
    87cc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    87d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87d4:	701a      	strb	r2, [r3, #0]
    87d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    87da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87de:	781b      	ldrb	r3, [r3, #0]
    87e0:	3301      	adds	r3, #1
    87e2:	b2da      	uxtb	r2, r3
    87e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    87e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ec:	701a      	strb	r2, [r3, #0]
    87ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    87f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87f6:	781b      	ldrb	r3, [r3, #0]
    87f8:	2bff      	cmp	r3, #255	; 0xff
    87fa:	d105      	bne.n	8808 <send_attitude+0x20c>
    87fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    8800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8804:	2200      	movs	r2, #0
    8806:	701a      	strb	r2, [r3, #0]
    8808:	f24c 3319 	movw	r3, #49945	; 0xc319
    880c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8810:	781b      	ldrb	r3, [r3, #0]
    8812:	461a      	mov	r2, r3
    8814:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    8818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    881c:	7859      	ldrb	r1, [r3, #1]
    881e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8826:	5499      	strb	r1, [r3, r2]
    8828:	4bd1      	ldr	r3, [pc, #836]	; (8b70 <send_attitude+0x574>)
    882a:	781a      	ldrb	r2, [r3, #0]
    882c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8834:	781b      	ldrb	r3, [r3, #0]
    8836:	4413      	add	r3, r2
    8838:	b2da      	uxtb	r2, r3
    883a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    883e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8842:	701a      	strb	r2, [r3, #0]
    8844:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    884c:	781a      	ldrb	r2, [r3, #0]
    884e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8856:	781b      	ldrb	r3, [r3, #0]
    8858:	4413      	add	r3, r2
    885a:	b2da      	uxtb	r2, r3
    885c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8864:	701a      	strb	r2, [r3, #0]
    8866:	f24c 3319 	movw	r3, #49945	; 0xc319
    886a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    886e:	781b      	ldrb	r3, [r3, #0]
    8870:	3301      	adds	r3, #1
    8872:	b2da      	uxtb	r2, r3
    8874:	f24c 3319 	movw	r3, #49945	; 0xc319
    8878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    887c:	701a      	strb	r2, [r3, #0]
    887e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8886:	781b      	ldrb	r3, [r3, #0]
    8888:	2bff      	cmp	r3, #255	; 0xff
    888a:	d105      	bne.n	8898 <send_attitude+0x29c>
    888c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8894:	2200      	movs	r2, #0
    8896:	701a      	strb	r2, [r3, #0]
    8898:	f24c 3319 	movw	r3, #49945	; 0xc319
    889c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88a0:	781b      	ldrb	r3, [r3, #0]
    88a2:	461a      	mov	r2, r3
    88a4:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    88a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ac:	7899      	ldrb	r1, [r3, #2]
    88ae:	f24c 331c 	movw	r3, #49948	; 0xc31c
    88b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88b6:	5499      	strb	r1, [r3, r2]
    88b8:	4bae      	ldr	r3, [pc, #696]	; (8b74 <send_attitude+0x578>)
    88ba:	781a      	ldrb	r2, [r3, #0]
    88bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    88c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88c4:	781b      	ldrb	r3, [r3, #0]
    88c6:	4413      	add	r3, r2
    88c8:	b2da      	uxtb	r2, r3
    88ca:	f24c 431d 	movw	r3, #50205	; 0xc41d
    88ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88d2:	701a      	strb	r2, [r3, #0]
    88d4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    88d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88dc:	781a      	ldrb	r2, [r3, #0]
    88de:	f24c 431d 	movw	r3, #50205	; 0xc41d
    88e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88e6:	781b      	ldrb	r3, [r3, #0]
    88e8:	4413      	add	r3, r2
    88ea:	b2da      	uxtb	r2, r3
    88ec:	f24c 431e 	movw	r3, #50206	; 0xc41e
    88f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88f4:	701a      	strb	r2, [r3, #0]
    88f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    88fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88fe:	781b      	ldrb	r3, [r3, #0]
    8900:	3301      	adds	r3, #1
    8902:	b2da      	uxtb	r2, r3
    8904:	f24c 3319 	movw	r3, #49945	; 0xc319
    8908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    890c:	701a      	strb	r2, [r3, #0]
    890e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8916:	781b      	ldrb	r3, [r3, #0]
    8918:	2bff      	cmp	r3, #255	; 0xff
    891a:	d105      	bne.n	8928 <send_attitude+0x32c>
    891c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8924:	2200      	movs	r2, #0
    8926:	701a      	strb	r2, [r3, #0]
    8928:	f24c 3319 	movw	r3, #49945	; 0xc319
    892c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8930:	781b      	ldrb	r3, [r3, #0]
    8932:	461a      	mov	r2, r3
    8934:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    8938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    893c:	78d9      	ldrb	r1, [r3, #3]
    893e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8946:	5499      	strb	r1, [r3, r2]
    8948:	4b8b      	ldr	r3, [pc, #556]	; (8b78 <send_attitude+0x57c>)
    894a:	781a      	ldrb	r2, [r3, #0]
    894c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8954:	781b      	ldrb	r3, [r3, #0]
    8956:	4413      	add	r3, r2
    8958:	b2da      	uxtb	r2, r3
    895a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    895e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8962:	701a      	strb	r2, [r3, #0]
    8964:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    896c:	781a      	ldrb	r2, [r3, #0]
    896e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8976:	781b      	ldrb	r3, [r3, #0]
    8978:	4413      	add	r3, r2
    897a:	b2da      	uxtb	r2, r3
    897c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8984:	701a      	strb	r2, [r3, #0]
    8986:	f24c 3319 	movw	r3, #49945	; 0xc319
    898a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    898e:	781b      	ldrb	r3, [r3, #0]
    8990:	3301      	adds	r3, #1
    8992:	b2da      	uxtb	r2, r3
    8994:	f24c 3319 	movw	r3, #49945	; 0xc319
    8998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    899c:	701a      	strb	r2, [r3, #0]
    899e:	f24c 3319 	movw	r3, #49945	; 0xc319
    89a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89a6:	781b      	ldrb	r3, [r3, #0]
    89a8:	2bff      	cmp	r3, #255	; 0xff
    89aa:	d105      	bne.n	89b8 <send_attitude+0x3bc>
    89ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    89b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89b4:	2200      	movs	r2, #0
    89b6:	701a      	strb	r2, [r3, #0]
    89b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    89bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89c0:	781b      	ldrb	r3, [r3, #0]
    89c2:	461a      	mov	r2, r3
    89c4:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    89c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89cc:	7819      	ldrb	r1, [r3, #0]
    89ce:	f24c 331c 	movw	r3, #49948	; 0xc31c
    89d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89d6:	5499      	strb	r1, [r3, r2]
    89d8:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    89dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89e0:	781a      	ldrb	r2, [r3, #0]
    89e2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    89e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ea:	781b      	ldrb	r3, [r3, #0]
    89ec:	4413      	add	r3, r2
    89ee:	b2da      	uxtb	r2, r3
    89f0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    89f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89f8:	701a      	strb	r2, [r3, #0]
    89fa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    89fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a02:	781a      	ldrb	r2, [r3, #0]
    8a04:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8a08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a0c:	781b      	ldrb	r3, [r3, #0]
    8a0e:	4413      	add	r3, r2
    8a10:	b2da      	uxtb	r2, r3
    8a12:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a1a:	701a      	strb	r2, [r3, #0]
    8a1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a24:	781b      	ldrb	r3, [r3, #0]
    8a26:	3301      	adds	r3, #1
    8a28:	b2da      	uxtb	r2, r3
    8a2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a32:	701a      	strb	r2, [r3, #0]
    8a34:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a3c:	781b      	ldrb	r3, [r3, #0]
    8a3e:	2bff      	cmp	r3, #255	; 0xff
    8a40:	d105      	bne.n	8a4e <send_attitude+0x452>
    8a42:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a4a:	2200      	movs	r2, #0
    8a4c:	701a      	strb	r2, [r3, #0]
    8a4e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a56:	781b      	ldrb	r3, [r3, #0]
    8a58:	461a      	mov	r2, r3
    8a5a:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    8a5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a62:	7859      	ldrb	r1, [r3, #1]
    8a64:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a6c:	5499      	strb	r1, [r3, r2]
    8a6e:	4b43      	ldr	r3, [pc, #268]	; (8b7c <send_attitude+0x580>)
    8a70:	781a      	ldrb	r2, [r3, #0]
    8a72:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a7a:	781b      	ldrb	r3, [r3, #0]
    8a7c:	4413      	add	r3, r2
    8a7e:	b2da      	uxtb	r2, r3
    8a80:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a88:	701a      	strb	r2, [r3, #0]
    8a8a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a92:	781a      	ldrb	r2, [r3, #0]
    8a94:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a9c:	781b      	ldrb	r3, [r3, #0]
    8a9e:	4413      	add	r3, r2
    8aa0:	b2da      	uxtb	r2, r3
    8aa2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aaa:	701a      	strb	r2, [r3, #0]
    8aac:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ab4:	781b      	ldrb	r3, [r3, #0]
    8ab6:	3301      	adds	r3, #1
    8ab8:	b2da      	uxtb	r2, r3
    8aba:	f24c 3319 	movw	r3, #49945	; 0xc319
    8abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ac2:	701a      	strb	r2, [r3, #0]
    8ac4:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8acc:	781b      	ldrb	r3, [r3, #0]
    8ace:	2bff      	cmp	r3, #255	; 0xff
    8ad0:	d105      	bne.n	8ade <send_attitude+0x4e2>
    8ad2:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ada:	2200      	movs	r2, #0
    8adc:	701a      	strb	r2, [r3, #0]
    8ade:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ae6:	781b      	ldrb	r3, [r3, #0]
    8ae8:	461a      	mov	r2, r3
    8aea:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    8aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8af2:	7899      	ldrb	r1, [r3, #2]
    8af4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8afc:	5499      	strb	r1, [r3, r2]
    8afe:	4b20      	ldr	r3, [pc, #128]	; (8b80 <send_attitude+0x584>)
    8b00:	781a      	ldrb	r2, [r3, #0]
    8b02:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b0a:	781b      	ldrb	r3, [r3, #0]
    8b0c:	4413      	add	r3, r2
    8b0e:	b2da      	uxtb	r2, r3
    8b10:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b18:	701a      	strb	r2, [r3, #0]
    8b1a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b22:	781a      	ldrb	r2, [r3, #0]
    8b24:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b2c:	781b      	ldrb	r3, [r3, #0]
    8b2e:	4413      	add	r3, r2
    8b30:	b2da      	uxtb	r2, r3
    8b32:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b3a:	701a      	strb	r2, [r3, #0]
    8b3c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b44:	781b      	ldrb	r3, [r3, #0]
    8b46:	3301      	adds	r3, #1
    8b48:	b2da      	uxtb	r2, r3
    8b4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b52:	701a      	strb	r2, [r3, #0]
    8b54:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b5c:	781b      	ldrb	r3, [r3, #0]
    8b5e:	2bff      	cmp	r3, #255	; 0xff
    8b60:	d110      	bne.n	8b84 <send_attitude+0x588>
    8b62:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b6a:	2200      	movs	r2, #0
    8b6c:	701a      	strb	r2, [r3, #0]
    8b6e:	e009      	b.n	8b84 <send_attitude+0x588>
    8b70:	2004c8d9 	.word	0x2004c8d9
    8b74:	2004c8da 	.word	0x2004c8da
    8b78:	2004c8db 	.word	0x2004c8db
    8b7c:	2004c8dd 	.word	0x2004c8dd
    8b80:	2004c8de 	.word	0x2004c8de
    8b84:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b8c:	781b      	ldrb	r3, [r3, #0]
    8b8e:	461a      	mov	r2, r3
    8b90:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    8b94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b98:	78d9      	ldrb	r1, [r3, #3]
    8b9a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8b9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ba2:	5499      	strb	r1, [r3, r2]
    8ba4:	4bc2      	ldr	r3, [pc, #776]	; (8eb0 <send_attitude+0x8b4>)
    8ba6:	781a      	ldrb	r2, [r3, #0]
    8ba8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8bac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bb0:	781b      	ldrb	r3, [r3, #0]
    8bb2:	4413      	add	r3, r2
    8bb4:	b2da      	uxtb	r2, r3
    8bb6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bbe:	701a      	strb	r2, [r3, #0]
    8bc0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bc8:	781a      	ldrb	r2, [r3, #0]
    8bca:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8bce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bd2:	781b      	ldrb	r3, [r3, #0]
    8bd4:	4413      	add	r3, r2
    8bd6:	b2da      	uxtb	r2, r3
    8bd8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8bdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8be0:	701a      	strb	r2, [r3, #0]
    8be2:	f24c 3319 	movw	r3, #49945	; 0xc319
    8be6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bea:	781b      	ldrb	r3, [r3, #0]
    8bec:	3301      	adds	r3, #1
    8bee:	b2da      	uxtb	r2, r3
    8bf0:	f24c 3319 	movw	r3, #49945	; 0xc319
    8bf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bf8:	701a      	strb	r2, [r3, #0]
    8bfa:	f24c 3319 	movw	r3, #49945	; 0xc319
    8bfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c02:	781b      	ldrb	r3, [r3, #0]
    8c04:	2bff      	cmp	r3, #255	; 0xff
    8c06:	d105      	bne.n	8c14 <send_attitude+0x618>
    8c08:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c10:	2200      	movs	r2, #0
    8c12:	701a      	strb	r2, [r3, #0]
    8c14:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c1c:	781b      	ldrb	r3, [r3, #0]
    8c1e:	461a      	mov	r2, r3
    8c20:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c28:	7819      	ldrb	r1, [r3, #0]
    8c2a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c32:	5499      	strb	r1, [r3, r2]
    8c34:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8c38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c3c:	781a      	ldrb	r2, [r3, #0]
    8c3e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c46:	781b      	ldrb	r3, [r3, #0]
    8c48:	4413      	add	r3, r2
    8c4a:	b2da      	uxtb	r2, r3
    8c4c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8c50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c54:	701a      	strb	r2, [r3, #0]
    8c56:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c5e:	781a      	ldrb	r2, [r3, #0]
    8c60:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8c64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c68:	781b      	ldrb	r3, [r3, #0]
    8c6a:	4413      	add	r3, r2
    8c6c:	b2da      	uxtb	r2, r3
    8c6e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c76:	701a      	strb	r2, [r3, #0]
    8c78:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c80:	781b      	ldrb	r3, [r3, #0]
    8c82:	3301      	adds	r3, #1
    8c84:	b2da      	uxtb	r2, r3
    8c86:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c8e:	701a      	strb	r2, [r3, #0]
    8c90:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c98:	781b      	ldrb	r3, [r3, #0]
    8c9a:	2bff      	cmp	r3, #255	; 0xff
    8c9c:	d105      	bne.n	8caa <send_attitude+0x6ae>
    8c9e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ca6:	2200      	movs	r2, #0
    8ca8:	701a      	strb	r2, [r3, #0]
    8caa:	f24c 3319 	movw	r3, #49945	; 0xc319
    8cae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cb2:	781b      	ldrb	r3, [r3, #0]
    8cb4:	461a      	mov	r2, r3
    8cb6:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cbe:	7859      	ldrb	r1, [r3, #1]
    8cc0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cc8:	5499      	strb	r1, [r3, r2]
    8cca:	4b7a      	ldr	r3, [pc, #488]	; (8eb4 <send_attitude+0x8b8>)
    8ccc:	781a      	ldrb	r2, [r3, #0]
    8cce:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8cd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cd6:	781b      	ldrb	r3, [r3, #0]
    8cd8:	4413      	add	r3, r2
    8cda:	b2da      	uxtb	r2, r3
    8cdc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8ce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ce4:	701a      	strb	r2, [r3, #0]
    8ce6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cee:	781a      	ldrb	r2, [r3, #0]
    8cf0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cf8:	781b      	ldrb	r3, [r3, #0]
    8cfa:	4413      	add	r3, r2
    8cfc:	b2da      	uxtb	r2, r3
    8cfe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d06:	701a      	strb	r2, [r3, #0]
    8d08:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d10:	781b      	ldrb	r3, [r3, #0]
    8d12:	3301      	adds	r3, #1
    8d14:	b2da      	uxtb	r2, r3
    8d16:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d1e:	701a      	strb	r2, [r3, #0]
    8d20:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d28:	781b      	ldrb	r3, [r3, #0]
    8d2a:	2bff      	cmp	r3, #255	; 0xff
    8d2c:	d105      	bne.n	8d3a <send_attitude+0x73e>
    8d2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d36:	2200      	movs	r2, #0
    8d38:	701a      	strb	r2, [r3, #0]
    8d3a:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d42:	781b      	ldrb	r3, [r3, #0]
    8d44:	461a      	mov	r2, r3
    8d46:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d4e:	7899      	ldrb	r1, [r3, #2]
    8d50:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d58:	5499      	strb	r1, [r3, r2]
    8d5a:	4b57      	ldr	r3, [pc, #348]	; (8eb8 <send_attitude+0x8bc>)
    8d5c:	781a      	ldrb	r2, [r3, #0]
    8d5e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d66:	781b      	ldrb	r3, [r3, #0]
    8d68:	4413      	add	r3, r2
    8d6a:	b2da      	uxtb	r2, r3
    8d6c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d74:	701a      	strb	r2, [r3, #0]
    8d76:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d7e:	781a      	ldrb	r2, [r3, #0]
    8d80:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d88:	781b      	ldrb	r3, [r3, #0]
    8d8a:	4413      	add	r3, r2
    8d8c:	b2da      	uxtb	r2, r3
    8d8e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d96:	701a      	strb	r2, [r3, #0]
    8d98:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8da0:	781b      	ldrb	r3, [r3, #0]
    8da2:	3301      	adds	r3, #1
    8da4:	b2da      	uxtb	r2, r3
    8da6:	f24c 3319 	movw	r3, #49945	; 0xc319
    8daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dae:	701a      	strb	r2, [r3, #0]
    8db0:	f24c 3319 	movw	r3, #49945	; 0xc319
    8db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8db8:	781b      	ldrb	r3, [r3, #0]
    8dba:	2bff      	cmp	r3, #255	; 0xff
    8dbc:	d105      	bne.n	8dca <send_attitude+0x7ce>
    8dbe:	f24c 3319 	movw	r3, #49945	; 0xc319
    8dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dc6:	2200      	movs	r2, #0
    8dc8:	701a      	strb	r2, [r3, #0]
    8dca:	f24c 3319 	movw	r3, #49945	; 0xc319
    8dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dd2:	781b      	ldrb	r3, [r3, #0]
    8dd4:	461a      	mov	r2, r3
    8dd6:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dde:	78d9      	ldrb	r1, [r3, #3]
    8de0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8de8:	5499      	strb	r1, [r3, r2]
    8dea:	4b34      	ldr	r3, [pc, #208]	; (8ebc <send_attitude+0x8c0>)
    8dec:	781a      	ldrb	r2, [r3, #0]
    8dee:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8df2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8df6:	781b      	ldrb	r3, [r3, #0]
    8df8:	4413      	add	r3, r2
    8dfa:	b2da      	uxtb	r2, r3
    8dfc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e04:	701a      	strb	r2, [r3, #0]
    8e06:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e0e:	781a      	ldrb	r2, [r3, #0]
    8e10:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8e14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e18:	781b      	ldrb	r3, [r3, #0]
    8e1a:	4413      	add	r3, r2
    8e1c:	b2da      	uxtb	r2, r3
    8e1e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e26:	701a      	strb	r2, [r3, #0]
    8e28:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e30:	781b      	ldrb	r3, [r3, #0]
    8e32:	3301      	adds	r3, #1
    8e34:	b2da      	uxtb	r2, r3
    8e36:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e3e:	701a      	strb	r2, [r3, #0]
    8e40:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e48:	781b      	ldrb	r3, [r3, #0]
    8e4a:	2bff      	cmp	r3, #255	; 0xff
    8e4c:	d105      	bne.n	8e5a <send_attitude+0x85e>
    8e4e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e56:	2200      	movs	r2, #0
    8e58:	701a      	strb	r2, [r3, #0]
    8e5a:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e62:	781b      	ldrb	r3, [r3, #0]
    8e64:	461a      	mov	r2, r3
    8e66:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e6e:	7819      	ldrb	r1, [r3, #0]
    8e70:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e78:	5499      	strb	r1, [r3, r2]
    8e7a:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e82:	781b      	ldrb	r3, [r3, #0]
    8e84:	3301      	adds	r3, #1
    8e86:	b2da      	uxtb	r2, r3
    8e88:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e90:	701a      	strb	r2, [r3, #0]
    8e92:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e9a:	781b      	ldrb	r3, [r3, #0]
    8e9c:	2bff      	cmp	r3, #255	; 0xff
    8e9e:	d10f      	bne.n	8ec0 <send_attitude+0x8c4>
    8ea0:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ea8:	2200      	movs	r2, #0
    8eaa:	701a      	strb	r2, [r3, #0]
    8eac:	e008      	b.n	8ec0 <send_attitude+0x8c4>
    8eae:	bf00      	nop
    8eb0:	2004c8df 	.word	0x2004c8df
    8eb4:	2004c8e1 	.word	0x2004c8e1
    8eb8:	2004c8e2 	.word	0x2004c8e2
    8ebc:	2004c8e3 	.word	0x2004c8e3
    8ec0:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ec8:	781b      	ldrb	r3, [r3, #0]
    8eca:	461a      	mov	r2, r3
    8ecc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8ed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ed4:	7819      	ldrb	r1, [r3, #0]
    8ed6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ede:	5499      	strb	r1, [r3, r2]
    8ee0:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ee8:	781b      	ldrb	r3, [r3, #0]
    8eea:	3301      	adds	r3, #1
    8eec:	b2da      	uxtb	r2, r3
    8eee:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ef6:	701a      	strb	r2, [r3, #0]
    8ef8:	f24c 3319 	movw	r3, #49945	; 0xc319
    8efc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f00:	781b      	ldrb	r3, [r3, #0]
    8f02:	2bff      	cmp	r3, #255	; 0xff
    8f04:	d105      	bne.n	8f12 <send_attitude+0x916>
    8f06:	f24c 3319 	movw	r3, #49945	; 0xc319
    8f0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f0e:	2200      	movs	r2, #0
    8f10:	701a      	strb	r2, [r3, #0]
    8f12:	f242 0339 	movw	r3, #8249	; 0x2039
    8f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f1a:	781b      	ldrb	r3, [r3, #0]
    8f1c:	b2db      	uxtb	r3, r3
    8f1e:	f003 0310 	and.w	r3, r3, #16
    8f22:	2b00      	cmp	r3, #0
    8f24:	d15a      	bne.n	8fdc <send_attitude+0x9e0>
    8f26:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f2e:	781b      	ldrb	r3, [r3, #0]
    8f30:	b2db      	uxtb	r3, r3
    8f32:	461a      	mov	r2, r3
    8f34:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f3c:	5c9a      	ldrb	r2, [r3, r2]
    8f3e:	f24c 431b 	movw	r3, #50203	; 0xc41b
    8f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f46:	701a      	strb	r2, [r3, #0]
    8f48:	f24c 431c 	movw	r3, #50204	; 0xc41c
    8f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f50:	2200      	movs	r2, #0
    8f52:	701a      	strb	r2, [r3, #0]
    8f54:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f5c:	781b      	ldrb	r3, [r3, #0]
    8f5e:	b2db      	uxtb	r3, r3
    8f60:	3301      	adds	r3, #1
    8f62:	b2da      	uxtb	r2, r3
    8f64:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f6c:	701a      	strb	r2, [r3, #0]
    8f6e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f76:	781b      	ldrb	r3, [r3, #0]
    8f78:	b2db      	uxtb	r3, r3
    8f7a:	2bff      	cmp	r3, #255	; 0xff
    8f7c:	d105      	bne.n	8f8a <send_attitude+0x98e>
    8f7e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f86:	2200      	movs	r2, #0
    8f88:	701a      	strb	r2, [r3, #0]
    8f8a:	f242 0338 	movw	r3, #8248	; 0x2038
    8f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f92:	f242 0238 	movw	r2, #8248	; 0x2038
    8f96:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8f9a:	7812      	ldrb	r2, [r2, #0]
    8f9c:	b2d2      	uxtb	r2, r2
    8f9e:	f042 0201 	orr.w	r2, r2, #1
    8fa2:	b2d2      	uxtb	r2, r2
    8fa4:	701a      	strb	r2, [r3, #0]
    8fa6:	f242 0339 	movw	r3, #8249	; 0x2039
    8faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fae:	f242 0239 	movw	r2, #8249	; 0x2039
    8fb2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8fb6:	7812      	ldrb	r2, [r2, #0]
    8fb8:	b2d2      	uxtb	r2, r2
    8fba:	f042 0210 	orr.w	r2, r2, #16
    8fbe:	b2d2      	uxtb	r2, r2
    8fc0:	701a      	strb	r2, [r3, #0]
    8fc2:	e00b      	b.n	8fdc <send_attitude+0x9e0>
    8fc4:	f24c 3318 	movw	r3, #49944	; 0xc318
    8fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fcc:	781b      	ldrb	r3, [r3, #0]
    8fce:	3301      	adds	r3, #1
    8fd0:	b2da      	uxtb	r2, r3
    8fd2:	f24c 3318 	movw	r3, #49944	; 0xc318
    8fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fda:	701a      	strb	r2, [r3, #0]
  }
}
    8fdc:	46bd      	mov	sp, r7
    8fde:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fe2:	4770      	bx	lr

00008fe4 <send_adc>:
  
void send_adc(void){  //500ms
    8fe4:	b480      	push	{r7}
    8fe6:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    8fe8:	f24c 3311 	movw	r3, #49937	; 0xc311
    8fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ff0:	781a      	ldrb	r2, [r3, #0]
    8ff2:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8ff6:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8ffa:	fba3 1302 	umull	r1, r3, r3, r2
    8ffe:	0899      	lsrs	r1, r3, #2
    9000:	460b      	mov	r3, r1
    9002:	009b      	lsls	r3, r3, #2
    9004:	440b      	add	r3, r1
    9006:	1ad3      	subs	r3, r2, r3
    9008:	b2db      	uxtb	r3, r3
    900a:	2b01      	cmp	r3, #1
    900c:	f040 8269 	bne.w	94e2 <send_adc+0x4fe>
    9010:	f24c 3319 	movw	r3, #49945	; 0xc319
    9014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9018:	781a      	ldrb	r2, [r3, #0]
    901a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    901e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9022:	781b      	ldrb	r3, [r3, #0]
    9024:	b2db      	uxtb	r3, r3
    9026:	429a      	cmp	r2, r3
    9028:	d313      	bcc.n	9052 <send_adc+0x6e>
    902a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    902e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9032:	781b      	ldrb	r3, [r3, #0]
    9034:	b2db      	uxtb	r3, r3
    9036:	461a      	mov	r2, r3
    9038:	f24c 3319 	movw	r3, #49945	; 0xc319
    903c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9040:	781b      	ldrb	r3, [r3, #0]
    9042:	1ad3      	subs	r3, r2, r3
    9044:	33ff      	adds	r3, #255	; 0xff
    9046:	2b08      	cmp	r3, #8
    9048:	bfd4      	ite	le
    904a:	2300      	movle	r3, #0
    904c:	2301      	movgt	r3, #1
    904e:	b2db      	uxtb	r3, r3
    9050:	e011      	b.n	9076 <send_adc+0x92>
    9052:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    905a:	781b      	ldrb	r3, [r3, #0]
    905c:	b2db      	uxtb	r3, r3
    905e:	461a      	mov	r2, r3
    9060:	f24c 3319 	movw	r3, #49945	; 0xc319
    9064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9068:	781b      	ldrb	r3, [r3, #0]
    906a:	1ad3      	subs	r3, r2, r3
    906c:	2b08      	cmp	r3, #8
    906e:	bfd4      	ite	le
    9070:	2300      	movle	r3, #0
    9072:	2301      	movgt	r3, #1
    9074:	b2db      	uxtb	r3, r3
    9076:	2b00      	cmp	r3, #0
    9078:	f000 8227 	beq.w	94ca <send_adc+0x4e6>
    907c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9084:	781b      	ldrb	r3, [r3, #0]
    9086:	461a      	mov	r2, r3
    9088:	f24c 331c 	movw	r3, #49948	; 0xc31c
    908c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9090:	2105      	movs	r1, #5
    9092:	5499      	strb	r1, [r3, r2]
    9094:	f24c 3319 	movw	r3, #49945	; 0xc319
    9098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    909c:	781b      	ldrb	r3, [r3, #0]
    909e:	3301      	adds	r3, #1
    90a0:	b2da      	uxtb	r2, r3
    90a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    90a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90aa:	701a      	strb	r2, [r3, #0]
    90ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    90b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90b4:	781b      	ldrb	r3, [r3, #0]
    90b6:	2bff      	cmp	r3, #255	; 0xff
    90b8:	d105      	bne.n	90c6 <send_adc+0xe2>
    90ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    90be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90c2:	2200      	movs	r2, #0
    90c4:	701a      	strb	r2, [r3, #0]
    90c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    90ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90ce:	781b      	ldrb	r3, [r3, #0]
    90d0:	461a      	mov	r2, r3
    90d2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    90d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90da:	2107      	movs	r1, #7
    90dc:	5499      	strb	r1, [r3, r2]
    90de:	f24c 3319 	movw	r3, #49945	; 0xc319
    90e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90e6:	781b      	ldrb	r3, [r3, #0]
    90e8:	3301      	adds	r3, #1
    90ea:	b2da      	uxtb	r2, r3
    90ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    90f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90f4:	701a      	strb	r2, [r3, #0]
    90f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    90fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90fe:	781b      	ldrb	r3, [r3, #0]
    9100:	2bff      	cmp	r3, #255	; 0xff
    9102:	d105      	bne.n	9110 <send_adc+0x12c>
    9104:	f24c 3319 	movw	r3, #49945	; 0xc319
    9108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    910c:	2200      	movs	r2, #0
    910e:	701a      	strb	r2, [r3, #0]
    9110:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9118:	2207      	movs	r2, #7
    911a:	701a      	strb	r2, [r3, #0]
    911c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9124:	2207      	movs	r2, #7
    9126:	701a      	strb	r2, [r3, #0]
    9128:	f24c 3319 	movw	r3, #49945	; 0xc319
    912c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9130:	781b      	ldrb	r3, [r3, #0]
    9132:	461a      	mov	r2, r3
    9134:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
    9138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    913c:	7819      	ldrb	r1, [r3, #0]
    913e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9146:	5499      	strb	r1, [r3, r2]
    9148:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
    914c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9150:	781a      	ldrb	r2, [r3, #0]
    9152:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    915a:	781b      	ldrb	r3, [r3, #0]
    915c:	4413      	add	r3, r2
    915e:	b2da      	uxtb	r2, r3
    9160:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9168:	701a      	strb	r2, [r3, #0]
    916a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    916e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9172:	781a      	ldrb	r2, [r3, #0]
    9174:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    917c:	781b      	ldrb	r3, [r3, #0]
    917e:	4413      	add	r3, r2
    9180:	b2da      	uxtb	r2, r3
    9182:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    918a:	701a      	strb	r2, [r3, #0]
    918c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9194:	781b      	ldrb	r3, [r3, #0]
    9196:	3301      	adds	r3, #1
    9198:	b2da      	uxtb	r2, r3
    919a:	f24c 3319 	movw	r3, #49945	; 0xc319
    919e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91a2:	701a      	strb	r2, [r3, #0]
    91a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    91a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ac:	781b      	ldrb	r3, [r3, #0]
    91ae:	2bff      	cmp	r3, #255	; 0xff
    91b0:	d105      	bne.n	91be <send_adc+0x1da>
    91b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    91b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ba:	2200      	movs	r2, #0
    91bc:	701a      	strb	r2, [r3, #0]
    91be:	f24c 3319 	movw	r3, #49945	; 0xc319
    91c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91c6:	781b      	ldrb	r3, [r3, #0]
    91c8:	461a      	mov	r2, r3
    91ca:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
    91ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91d2:	7859      	ldrb	r1, [r3, #1]
    91d4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    91d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91dc:	5499      	strb	r1, [r3, r2]
    91de:	4bc3      	ldr	r3, [pc, #780]	; (94ec <send_adc+0x508>)
    91e0:	781a      	ldrb	r2, [r3, #0]
    91e2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    91e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ea:	781b      	ldrb	r3, [r3, #0]
    91ec:	4413      	add	r3, r2
    91ee:	b2da      	uxtb	r2, r3
    91f0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    91f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91f8:	701a      	strb	r2, [r3, #0]
    91fa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    91fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9202:	781a      	ldrb	r2, [r3, #0]
    9204:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    920c:	781b      	ldrb	r3, [r3, #0]
    920e:	4413      	add	r3, r2
    9210:	b2da      	uxtb	r2, r3
    9212:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    921a:	701a      	strb	r2, [r3, #0]
    921c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9224:	781b      	ldrb	r3, [r3, #0]
    9226:	3301      	adds	r3, #1
    9228:	b2da      	uxtb	r2, r3
    922a:	f24c 3319 	movw	r3, #49945	; 0xc319
    922e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9232:	701a      	strb	r2, [r3, #0]
    9234:	f24c 3319 	movw	r3, #49945	; 0xc319
    9238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    923c:	781b      	ldrb	r3, [r3, #0]
    923e:	2bff      	cmp	r3, #255	; 0xff
    9240:	d105      	bne.n	924e <send_adc+0x26a>
    9242:	f24c 3319 	movw	r3, #49945	; 0xc319
    9246:	f2c2 0304 	movt	r3, #8196	; 0x2004
    924a:	2200      	movs	r2, #0
    924c:	701a      	strb	r2, [r3, #0]
    924e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9256:	781b      	ldrb	r3, [r3, #0]
    9258:	461a      	mov	r2, r3
    925a:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
    925e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9262:	7819      	ldrb	r1, [r3, #0]
    9264:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    926c:	5499      	strb	r1, [r3, r2]
    926e:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
    9272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9276:	781a      	ldrb	r2, [r3, #0]
    9278:	f24c 431d 	movw	r3, #50205	; 0xc41d
    927c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9280:	781b      	ldrb	r3, [r3, #0]
    9282:	4413      	add	r3, r2
    9284:	b2da      	uxtb	r2, r3
    9286:	f24c 431d 	movw	r3, #50205	; 0xc41d
    928a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    928e:	701a      	strb	r2, [r3, #0]
    9290:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9298:	781a      	ldrb	r2, [r3, #0]
    929a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    929e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92a2:	781b      	ldrb	r3, [r3, #0]
    92a4:	4413      	add	r3, r2
    92a6:	b2da      	uxtb	r2, r3
    92a8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    92ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92b0:	701a      	strb	r2, [r3, #0]
    92b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    92b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ba:	781b      	ldrb	r3, [r3, #0]
    92bc:	3301      	adds	r3, #1
    92be:	b2da      	uxtb	r2, r3
    92c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    92c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92c8:	701a      	strb	r2, [r3, #0]
    92ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    92ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92d2:	781b      	ldrb	r3, [r3, #0]
    92d4:	2bff      	cmp	r3, #255	; 0xff
    92d6:	d105      	bne.n	92e4 <send_adc+0x300>
    92d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    92dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92e0:	2200      	movs	r2, #0
    92e2:	701a      	strb	r2, [r3, #0]
    92e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    92e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ec:	781b      	ldrb	r3, [r3, #0]
    92ee:	461a      	mov	r2, r3
    92f0:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
    92f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92f8:	7859      	ldrb	r1, [r3, #1]
    92fa:	f24c 331c 	movw	r3, #49948	; 0xc31c
    92fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9302:	5499      	strb	r1, [r3, r2]
    9304:	4b7a      	ldr	r3, [pc, #488]	; (94f0 <send_adc+0x50c>)
    9306:	781a      	ldrb	r2, [r3, #0]
    9308:	f24c 431d 	movw	r3, #50205	; 0xc41d
    930c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9310:	781b      	ldrb	r3, [r3, #0]
    9312:	4413      	add	r3, r2
    9314:	b2da      	uxtb	r2, r3
    9316:	f24c 431d 	movw	r3, #50205	; 0xc41d
    931a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    931e:	701a      	strb	r2, [r3, #0]
    9320:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9328:	781a      	ldrb	r2, [r3, #0]
    932a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    932e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9332:	781b      	ldrb	r3, [r3, #0]
    9334:	4413      	add	r3, r2
    9336:	b2da      	uxtb	r2, r3
    9338:	f24c 431e 	movw	r3, #50206	; 0xc41e
    933c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9340:	701a      	strb	r2, [r3, #0]
    9342:	f24c 3319 	movw	r3, #49945	; 0xc319
    9346:	f2c2 0304 	movt	r3, #8196	; 0x2004
    934a:	781b      	ldrb	r3, [r3, #0]
    934c:	3301      	adds	r3, #1
    934e:	b2da      	uxtb	r2, r3
    9350:	f24c 3319 	movw	r3, #49945	; 0xc319
    9354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9358:	701a      	strb	r2, [r3, #0]
    935a:	f24c 3319 	movw	r3, #49945	; 0xc319
    935e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9362:	781b      	ldrb	r3, [r3, #0]
    9364:	2bff      	cmp	r3, #255	; 0xff
    9366:	d105      	bne.n	9374 <send_adc+0x390>
    9368:	f24c 3319 	movw	r3, #49945	; 0xc319
    936c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9370:	2200      	movs	r2, #0
    9372:	701a      	strb	r2, [r3, #0]
    9374:	f24c 3319 	movw	r3, #49945	; 0xc319
    9378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    937c:	781b      	ldrb	r3, [r3, #0]
    937e:	461a      	mov	r2, r3
    9380:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9388:	7819      	ldrb	r1, [r3, #0]
    938a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    938e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9392:	5499      	strb	r1, [r3, r2]
    9394:	f24c 3319 	movw	r3, #49945	; 0xc319
    9398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    939c:	781b      	ldrb	r3, [r3, #0]
    939e:	3301      	adds	r3, #1
    93a0:	b2da      	uxtb	r2, r3
    93a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    93a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93aa:	701a      	strb	r2, [r3, #0]
    93ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    93b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93b4:	781b      	ldrb	r3, [r3, #0]
    93b6:	2bff      	cmp	r3, #255	; 0xff
    93b8:	d105      	bne.n	93c6 <send_adc+0x3e2>
    93ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    93be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93c2:	2200      	movs	r2, #0
    93c4:	701a      	strb	r2, [r3, #0]
    93c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    93ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93ce:	781b      	ldrb	r3, [r3, #0]
    93d0:	461a      	mov	r2, r3
    93d2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    93d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93da:	7819      	ldrb	r1, [r3, #0]
    93dc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    93e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93e4:	5499      	strb	r1, [r3, r2]
    93e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    93ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93ee:	781b      	ldrb	r3, [r3, #0]
    93f0:	3301      	adds	r3, #1
    93f2:	b2da      	uxtb	r2, r3
    93f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    93f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93fc:	701a      	strb	r2, [r3, #0]
    93fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    9402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9406:	781b      	ldrb	r3, [r3, #0]
    9408:	2bff      	cmp	r3, #255	; 0xff
    940a:	d105      	bne.n	9418 <send_adc+0x434>
    940c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9410:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9414:	2200      	movs	r2, #0
    9416:	701a      	strb	r2, [r3, #0]
    9418:	f242 0339 	movw	r3, #8249	; 0x2039
    941c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9420:	781b      	ldrb	r3, [r3, #0]
    9422:	b2db      	uxtb	r3, r3
    9424:	f003 0310 	and.w	r3, r3, #16
    9428:	2b00      	cmp	r3, #0
    942a:	d15a      	bne.n	94e2 <send_adc+0x4fe>
    942c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9434:	781b      	ldrb	r3, [r3, #0]
    9436:	b2db      	uxtb	r3, r3
    9438:	461a      	mov	r2, r3
    943a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    943e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9442:	5c9a      	ldrb	r2, [r3, r2]
    9444:	f24c 431b 	movw	r3, #50203	; 0xc41b
    9448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    944c:	701a      	strb	r2, [r3, #0]
    944e:	f24c 431c 	movw	r3, #50204	; 0xc41c
    9452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9456:	2200      	movs	r2, #0
    9458:	701a      	strb	r2, [r3, #0]
    945a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    945e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9462:	781b      	ldrb	r3, [r3, #0]
    9464:	b2db      	uxtb	r3, r3
    9466:	3301      	adds	r3, #1
    9468:	b2da      	uxtb	r2, r3
    946a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    946e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9472:	701a      	strb	r2, [r3, #0]
    9474:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    947c:	781b      	ldrb	r3, [r3, #0]
    947e:	b2db      	uxtb	r3, r3
    9480:	2bff      	cmp	r3, #255	; 0xff
    9482:	d105      	bne.n	9490 <send_adc+0x4ac>
    9484:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    948c:	2200      	movs	r2, #0
    948e:	701a      	strb	r2, [r3, #0]
    9490:	f242 0338 	movw	r3, #8248	; 0x2038
    9494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9498:	f242 0238 	movw	r2, #8248	; 0x2038
    949c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    94a0:	7812      	ldrb	r2, [r2, #0]
    94a2:	b2d2      	uxtb	r2, r2
    94a4:	f042 0201 	orr.w	r2, r2, #1
    94a8:	b2d2      	uxtb	r2, r2
    94aa:	701a      	strb	r2, [r3, #0]
    94ac:	f242 0339 	movw	r3, #8249	; 0x2039
    94b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94b4:	f242 0239 	movw	r2, #8249	; 0x2039
    94b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    94bc:	7812      	ldrb	r2, [r2, #0]
    94be:	b2d2      	uxtb	r2, r2
    94c0:	f042 0210 	orr.w	r2, r2, #16
    94c4:	b2d2      	uxtb	r2, r2
    94c6:	701a      	strb	r2, [r3, #0]
    94c8:	e00b      	b.n	94e2 <send_adc+0x4fe>
    94ca:	f24c 3318 	movw	r3, #49944	; 0xc318
    94ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94d2:	781b      	ldrb	r3, [r3, #0]
    94d4:	3301      	adds	r3, #1
    94d6:	b2da      	uxtb	r2, r3
    94d8:	f24c 3318 	movw	r3, #49944	; 0xc318
    94dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94e0:	701a      	strb	r2, [r3, #0]
}
    94e2:	46bd      	mov	sp, r7
    94e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    94e8:	4770      	bx	lr
    94ea:	bf00      	nop
    94ec:	2004c5b9 	.word	0x2004c5b9
    94f0:	2004c5bb 	.word	0x2004c5bb

000094f4 <send_settings>:
void send_settings(void){ //500ms
    94f4:	b480      	push	{r7}
    94f6:	af00      	add	r7, sp, #0
  //if(!boot)
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    94f8:	f24c 3311 	movw	r3, #49937	; 0xc311
    94fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9500:	781a      	ldrb	r2, [r3, #0]
    9502:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9506:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    950a:	fba3 1302 	umull	r1, r3, r3, r2
    950e:	0899      	lsrs	r1, r3, #2
    9510:	460b      	mov	r3, r1
    9512:	009b      	lsls	r3, r3, #2
    9514:	440b      	add	r3, r1
    9516:	1ad3      	subs	r3, r2, r3
    9518:	b2db      	uxtb	r3, r3
    951a:	2b02      	cmp	r3, #2
    951c:	f040 83e7 	bne.w	9cee <send_settings+0x7fa>
    9520:	f64c 132c 	movw	r3, #51500	; 0xc92c
    9524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9528:	781b      	ldrb	r3, [r3, #0]
    952a:	2b00      	cmp	r3, #0
    952c:	f000 83df 	beq.w	9cee <send_settings+0x7fa>
    9530:	f24c 3319 	movw	r3, #49945	; 0xc319
    9534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9538:	781a      	ldrb	r2, [r3, #0]
    953a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    953e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9542:	781b      	ldrb	r3, [r3, #0]
    9544:	b2db      	uxtb	r3, r3
    9546:	429a      	cmp	r2, r3
    9548:	d313      	bcc.n	9572 <send_settings+0x7e>
    954a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    954e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9552:	781b      	ldrb	r3, [r3, #0]
    9554:	b2db      	uxtb	r3, r3
    9556:	461a      	mov	r2, r3
    9558:	f24c 3319 	movw	r3, #49945	; 0xc319
    955c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9560:	781b      	ldrb	r3, [r3, #0]
    9562:	1ad3      	subs	r3, r2, r3
    9564:	33ff      	adds	r3, #255	; 0xff
    9566:	2b0d      	cmp	r3, #13
    9568:	bfd4      	ite	le
    956a:	2300      	movle	r3, #0
    956c:	2301      	movgt	r3, #1
    956e:	b2db      	uxtb	r3, r3
    9570:	e011      	b.n	9596 <send_settings+0xa2>
    9572:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    957a:	781b      	ldrb	r3, [r3, #0]
    957c:	b2db      	uxtb	r3, r3
    957e:	461a      	mov	r2, r3
    9580:	f24c 3319 	movw	r3, #49945	; 0xc319
    9584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9588:	781b      	ldrb	r3, [r3, #0]
    958a:	1ad3      	subs	r3, r2, r3
    958c:	2b0d      	cmp	r3, #13
    958e:	bfd4      	ite	le
    9590:	2300      	movle	r3, #0
    9592:	2301      	movgt	r3, #1
    9594:	b2db      	uxtb	r3, r3
    9596:	2b00      	cmp	r3, #0
    9598:	f000 839d 	beq.w	9cd6 <send_settings+0x7e2>
    959c:	f24c 3319 	movw	r3, #49945	; 0xc319
    95a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95a4:	781b      	ldrb	r3, [r3, #0]
    95a6:	461a      	mov	r2, r3
    95a8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    95ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95b0:	2105      	movs	r1, #5
    95b2:	5499      	strb	r1, [r3, r2]
    95b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    95b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95bc:	781b      	ldrb	r3, [r3, #0]
    95be:	3301      	adds	r3, #1
    95c0:	b2da      	uxtb	r2, r3
    95c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    95c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ca:	701a      	strb	r2, [r3, #0]
    95cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    95d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95d4:	781b      	ldrb	r3, [r3, #0]
    95d6:	2bff      	cmp	r3, #255	; 0xff
    95d8:	d105      	bne.n	95e6 <send_settings+0xf2>
    95da:	f24c 3319 	movw	r3, #49945	; 0xc319
    95de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95e2:	2200      	movs	r2, #0
    95e4:	701a      	strb	r2, [r3, #0]
    95e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    95ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ee:	781b      	ldrb	r3, [r3, #0]
    95f0:	461a      	mov	r2, r3
    95f2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    95f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95fa:	2111      	movs	r1, #17
    95fc:	5499      	strb	r1, [r3, r2]
    95fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    9602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9606:	781b      	ldrb	r3, [r3, #0]
    9608:	3301      	adds	r3, #1
    960a:	b2da      	uxtb	r2, r3
    960c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9614:	701a      	strb	r2, [r3, #0]
    9616:	f24c 3319 	movw	r3, #49945	; 0xc319
    961a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    961e:	781b      	ldrb	r3, [r3, #0]
    9620:	2bff      	cmp	r3, #255	; 0xff
    9622:	d105      	bne.n	9630 <send_settings+0x13c>
    9624:	f24c 3319 	movw	r3, #49945	; 0xc319
    9628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    962c:	2200      	movs	r2, #0
    962e:	701a      	strb	r2, [r3, #0]
    9630:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9638:	2211      	movs	r2, #17
    963a:	701a      	strb	r2, [r3, #0]
    963c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9644:	2211      	movs	r2, #17
    9646:	701a      	strb	r2, [r3, #0]
    9648:	f24c 3319 	movw	r3, #49945	; 0xc319
    964c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9650:	781b      	ldrb	r3, [r3, #0]
    9652:	461a      	mov	r2, r3
    9654:	f64c 132c 	movw	r3, #51500	; 0xc92c
    9658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    965c:	7819      	ldrb	r1, [r3, #0]
    965e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9666:	5499      	strb	r1, [r3, r2]
    9668:	f24c 431d 	movw	r3, #50205	; 0xc41d
    966c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9670:	781a      	ldrb	r2, [r3, #0]
    9672:	f64c 132c 	movw	r3, #51500	; 0xc92c
    9676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    967a:	781b      	ldrb	r3, [r3, #0]
    967c:	4413      	add	r3, r2
    967e:	b2da      	uxtb	r2, r3
    9680:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9688:	701a      	strb	r2, [r3, #0]
    968a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    968e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9692:	781a      	ldrb	r2, [r3, #0]
    9694:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    969c:	781b      	ldrb	r3, [r3, #0]
    969e:	4413      	add	r3, r2
    96a0:	b2da      	uxtb	r2, r3
    96a2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    96a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96aa:	701a      	strb	r2, [r3, #0]
    96ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    96b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96b4:	781b      	ldrb	r3, [r3, #0]
    96b6:	3301      	adds	r3, #1
    96b8:	b2da      	uxtb	r2, r3
    96ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    96be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96c2:	701a      	strb	r2, [r3, #0]
    96c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    96c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96cc:	781b      	ldrb	r3, [r3, #0]
    96ce:	2bff      	cmp	r3, #255	; 0xff
    96d0:	d105      	bne.n	96de <send_settings+0x1ea>
    96d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    96d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96da:	2200      	movs	r2, #0
    96dc:	701a      	strb	r2, [r3, #0]
    96de:	f24c 3319 	movw	r3, #49945	; 0xc319
    96e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96e6:	781b      	ldrb	r3, [r3, #0]
    96e8:	461a      	mov	r2, r3
    96ea:	f24c 3308 	movw	r3, #49928	; 0xc308
    96ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96f2:	7819      	ldrb	r1, [r3, #0]
    96f4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    96f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96fc:	5499      	strb	r1, [r3, r2]
    96fe:	f24c 3308 	movw	r3, #49928	; 0xc308
    9702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9706:	781a      	ldrb	r2, [r3, #0]
    9708:	f24c 431d 	movw	r3, #50205	; 0xc41d
    970c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9710:	781b      	ldrb	r3, [r3, #0]
    9712:	4413      	add	r3, r2
    9714:	b2da      	uxtb	r2, r3
    9716:	f24c 431d 	movw	r3, #50205	; 0xc41d
    971a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    971e:	701a      	strb	r2, [r3, #0]
    9720:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9728:	781a      	ldrb	r2, [r3, #0]
    972a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    972e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9732:	781b      	ldrb	r3, [r3, #0]
    9734:	4413      	add	r3, r2
    9736:	b2da      	uxtb	r2, r3
    9738:	f24c 431e 	movw	r3, #50206	; 0xc41e
    973c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9740:	701a      	strb	r2, [r3, #0]
    9742:	f24c 3319 	movw	r3, #49945	; 0xc319
    9746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    974a:	781b      	ldrb	r3, [r3, #0]
    974c:	3301      	adds	r3, #1
    974e:	b2da      	uxtb	r2, r3
    9750:	f24c 3319 	movw	r3, #49945	; 0xc319
    9754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9758:	701a      	strb	r2, [r3, #0]
    975a:	f24c 3319 	movw	r3, #49945	; 0xc319
    975e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9762:	781b      	ldrb	r3, [r3, #0]
    9764:	2bff      	cmp	r3, #255	; 0xff
    9766:	d105      	bne.n	9774 <send_settings+0x280>
    9768:	f24c 3319 	movw	r3, #49945	; 0xc319
    976c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9770:	2200      	movs	r2, #0
    9772:	701a      	strb	r2, [r3, #0]
    9774:	f24c 3319 	movw	r3, #49945	; 0xc319
    9778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    977c:	781b      	ldrb	r3, [r3, #0]
    977e:	461a      	mov	r2, r3
    9780:	f24c 3308 	movw	r3, #49928	; 0xc308
    9784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9788:	7859      	ldrb	r1, [r3, #1]
    978a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    978e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9792:	5499      	strb	r1, [r3, r2]
    9794:	4bd1      	ldr	r3, [pc, #836]	; (9adc <send_settings+0x5e8>)
    9796:	781a      	ldrb	r2, [r3, #0]
    9798:	f24c 431d 	movw	r3, #50205	; 0xc41d
    979c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97a0:	781b      	ldrb	r3, [r3, #0]
    97a2:	4413      	add	r3, r2
    97a4:	b2da      	uxtb	r2, r3
    97a6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    97aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ae:	701a      	strb	r2, [r3, #0]
    97b0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    97b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97b8:	781a      	ldrb	r2, [r3, #0]
    97ba:	f24c 431d 	movw	r3, #50205	; 0xc41d
    97be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97c2:	781b      	ldrb	r3, [r3, #0]
    97c4:	4413      	add	r3, r2
    97c6:	b2da      	uxtb	r2, r3
    97c8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    97cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97d0:	701a      	strb	r2, [r3, #0]
    97d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    97d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97da:	781b      	ldrb	r3, [r3, #0]
    97dc:	3301      	adds	r3, #1
    97de:	b2da      	uxtb	r2, r3
    97e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    97e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97e8:	701a      	strb	r2, [r3, #0]
    97ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    97ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97f2:	781b      	ldrb	r3, [r3, #0]
    97f4:	2bff      	cmp	r3, #255	; 0xff
    97f6:	d105      	bne.n	9804 <send_settings+0x310>
    97f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    97fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9800:	2200      	movs	r2, #0
    9802:	701a      	strb	r2, [r3, #0]
    9804:	f24c 3319 	movw	r3, #49945	; 0xc319
    9808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    980c:	781b      	ldrb	r3, [r3, #0]
    980e:	461a      	mov	r2, r3
    9810:	f24c 3308 	movw	r3, #49928	; 0xc308
    9814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9818:	7899      	ldrb	r1, [r3, #2]
    981a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    981e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9822:	5499      	strb	r1, [r3, r2]
    9824:	4bae      	ldr	r3, [pc, #696]	; (9ae0 <send_settings+0x5ec>)
    9826:	781a      	ldrb	r2, [r3, #0]
    9828:	f24c 431d 	movw	r3, #50205	; 0xc41d
    982c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9830:	781b      	ldrb	r3, [r3, #0]
    9832:	4413      	add	r3, r2
    9834:	b2da      	uxtb	r2, r3
    9836:	f24c 431d 	movw	r3, #50205	; 0xc41d
    983a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    983e:	701a      	strb	r2, [r3, #0]
    9840:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9848:	781a      	ldrb	r2, [r3, #0]
    984a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    984e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9852:	781b      	ldrb	r3, [r3, #0]
    9854:	4413      	add	r3, r2
    9856:	b2da      	uxtb	r2, r3
    9858:	f24c 431e 	movw	r3, #50206	; 0xc41e
    985c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9860:	701a      	strb	r2, [r3, #0]
    9862:	f24c 3319 	movw	r3, #49945	; 0xc319
    9866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    986a:	781b      	ldrb	r3, [r3, #0]
    986c:	3301      	adds	r3, #1
    986e:	b2da      	uxtb	r2, r3
    9870:	f24c 3319 	movw	r3, #49945	; 0xc319
    9874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9878:	701a      	strb	r2, [r3, #0]
    987a:	f24c 3319 	movw	r3, #49945	; 0xc319
    987e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9882:	781b      	ldrb	r3, [r3, #0]
    9884:	2bff      	cmp	r3, #255	; 0xff
    9886:	d105      	bne.n	9894 <send_settings+0x3a0>
    9888:	f24c 3319 	movw	r3, #49945	; 0xc319
    988c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9890:	2200      	movs	r2, #0
    9892:	701a      	strb	r2, [r3, #0]
    9894:	f24c 3319 	movw	r3, #49945	; 0xc319
    9898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    989c:	781b      	ldrb	r3, [r3, #0]
    989e:	461a      	mov	r2, r3
    98a0:	f24c 3308 	movw	r3, #49928	; 0xc308
    98a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98a8:	78d9      	ldrb	r1, [r3, #3]
    98aa:	f24c 331c 	movw	r3, #49948	; 0xc31c
    98ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98b2:	5499      	strb	r1, [r3, r2]
    98b4:	4b8b      	ldr	r3, [pc, #556]	; (9ae4 <send_settings+0x5f0>)
    98b6:	781a      	ldrb	r2, [r3, #0]
    98b8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    98bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98c0:	781b      	ldrb	r3, [r3, #0]
    98c2:	4413      	add	r3, r2
    98c4:	b2da      	uxtb	r2, r3
    98c6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    98ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ce:	701a      	strb	r2, [r3, #0]
    98d0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    98d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98d8:	781a      	ldrb	r2, [r3, #0]
    98da:	f24c 431d 	movw	r3, #50205	; 0xc41d
    98de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98e2:	781b      	ldrb	r3, [r3, #0]
    98e4:	4413      	add	r3, r2
    98e6:	b2da      	uxtb	r2, r3
    98e8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    98ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98f0:	701a      	strb	r2, [r3, #0]
    98f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    98f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98fa:	781b      	ldrb	r3, [r3, #0]
    98fc:	3301      	adds	r3, #1
    98fe:	b2da      	uxtb	r2, r3
    9900:	f24c 3319 	movw	r3, #49945	; 0xc319
    9904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9908:	701a      	strb	r2, [r3, #0]
    990a:	f24c 3319 	movw	r3, #49945	; 0xc319
    990e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9912:	781b      	ldrb	r3, [r3, #0]
    9914:	2bff      	cmp	r3, #255	; 0xff
    9916:	d105      	bne.n	9924 <send_settings+0x430>
    9918:	f24c 3319 	movw	r3, #49945	; 0xc319
    991c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9920:	2200      	movs	r2, #0
    9922:	701a      	strb	r2, [r3, #0]
    9924:	f24c 3319 	movw	r3, #49945	; 0xc319
    9928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    992c:	781b      	ldrb	r3, [r3, #0]
    992e:	461a      	mov	r2, r3
    9930:	f24c 330c 	movw	r3, #49932	; 0xc30c
    9934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9938:	7819      	ldrb	r1, [r3, #0]
    993a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    993e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9942:	5499      	strb	r1, [r3, r2]
    9944:	f24c 330c 	movw	r3, #49932	; 0xc30c
    9948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    994c:	781a      	ldrb	r2, [r3, #0]
    994e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9956:	781b      	ldrb	r3, [r3, #0]
    9958:	4413      	add	r3, r2
    995a:	b2da      	uxtb	r2, r3
    995c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9964:	701a      	strb	r2, [r3, #0]
    9966:	f24c 431e 	movw	r3, #50206	; 0xc41e
    996a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    996e:	781a      	ldrb	r2, [r3, #0]
    9970:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9978:	781b      	ldrb	r3, [r3, #0]
    997a:	4413      	add	r3, r2
    997c:	b2da      	uxtb	r2, r3
    997e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9986:	701a      	strb	r2, [r3, #0]
    9988:	f24c 3319 	movw	r3, #49945	; 0xc319
    998c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9990:	781b      	ldrb	r3, [r3, #0]
    9992:	3301      	adds	r3, #1
    9994:	b2da      	uxtb	r2, r3
    9996:	f24c 3319 	movw	r3, #49945	; 0xc319
    999a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    999e:	701a      	strb	r2, [r3, #0]
    99a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    99a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99a8:	781b      	ldrb	r3, [r3, #0]
    99aa:	2bff      	cmp	r3, #255	; 0xff
    99ac:	d105      	bne.n	99ba <send_settings+0x4c6>
    99ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    99b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99b6:	2200      	movs	r2, #0
    99b8:	701a      	strb	r2, [r3, #0]
    99ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    99be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99c2:	781b      	ldrb	r3, [r3, #0]
    99c4:	461a      	mov	r2, r3
    99c6:	f24c 330c 	movw	r3, #49932	; 0xc30c
    99ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99ce:	7859      	ldrb	r1, [r3, #1]
    99d0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    99d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99d8:	5499      	strb	r1, [r3, r2]
    99da:	4b43      	ldr	r3, [pc, #268]	; (9ae8 <send_settings+0x5f4>)
    99dc:	781a      	ldrb	r2, [r3, #0]
    99de:	f24c 431d 	movw	r3, #50205	; 0xc41d
    99e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99e6:	781b      	ldrb	r3, [r3, #0]
    99e8:	4413      	add	r3, r2
    99ea:	b2da      	uxtb	r2, r3
    99ec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    99f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99f4:	701a      	strb	r2, [r3, #0]
    99f6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    99fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99fe:	781a      	ldrb	r2, [r3, #0]
    9a00:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a08:	781b      	ldrb	r3, [r3, #0]
    9a0a:	4413      	add	r3, r2
    9a0c:	b2da      	uxtb	r2, r3
    9a0e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a16:	701a      	strb	r2, [r3, #0]
    9a18:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a20:	781b      	ldrb	r3, [r3, #0]
    9a22:	3301      	adds	r3, #1
    9a24:	b2da      	uxtb	r2, r3
    9a26:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a2e:	701a      	strb	r2, [r3, #0]
    9a30:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a38:	781b      	ldrb	r3, [r3, #0]
    9a3a:	2bff      	cmp	r3, #255	; 0xff
    9a3c:	d105      	bne.n	9a4a <send_settings+0x556>
    9a3e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a46:	2200      	movs	r2, #0
    9a48:	701a      	strb	r2, [r3, #0]
    9a4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a52:	781b      	ldrb	r3, [r3, #0]
    9a54:	461a      	mov	r2, r3
    9a56:	f24c 330c 	movw	r3, #49932	; 0xc30c
    9a5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a5e:	7899      	ldrb	r1, [r3, #2]
    9a60:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a68:	5499      	strb	r1, [r3, r2]
    9a6a:	4b20      	ldr	r3, [pc, #128]	; (9aec <send_settings+0x5f8>)
    9a6c:	781a      	ldrb	r2, [r3, #0]
    9a6e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a76:	781b      	ldrb	r3, [r3, #0]
    9a78:	4413      	add	r3, r2
    9a7a:	b2da      	uxtb	r2, r3
    9a7c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a84:	701a      	strb	r2, [r3, #0]
    9a86:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9a8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a8e:	781a      	ldrb	r2, [r3, #0]
    9a90:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9a94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a98:	781b      	ldrb	r3, [r3, #0]
    9a9a:	4413      	add	r3, r2
    9a9c:	b2da      	uxtb	r2, r3
    9a9e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aa6:	701a      	strb	r2, [r3, #0]
    9aa8:	f24c 3319 	movw	r3, #49945	; 0xc319
    9aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ab0:	781b      	ldrb	r3, [r3, #0]
    9ab2:	3301      	adds	r3, #1
    9ab4:	b2da      	uxtb	r2, r3
    9ab6:	f24c 3319 	movw	r3, #49945	; 0xc319
    9aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9abe:	701a      	strb	r2, [r3, #0]
    9ac0:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ac8:	781b      	ldrb	r3, [r3, #0]
    9aca:	2bff      	cmp	r3, #255	; 0xff
    9acc:	d110      	bne.n	9af0 <send_settings+0x5fc>
    9ace:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ad6:	2200      	movs	r2, #0
    9ad8:	701a      	strb	r2, [r3, #0]
    9ada:	e009      	b.n	9af0 <send_settings+0x5fc>
    9adc:	2004c309 	.word	0x2004c309
    9ae0:	2004c30a 	.word	0x2004c30a
    9ae4:	2004c30b 	.word	0x2004c30b
    9ae8:	2004c30d 	.word	0x2004c30d
    9aec:	2004c30e 	.word	0x2004c30e
    9af0:	f24c 3319 	movw	r3, #49945	; 0xc319
    9af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9af8:	781b      	ldrb	r3, [r3, #0]
    9afa:	461a      	mov	r2, r3
    9afc:	f24c 330c 	movw	r3, #49932	; 0xc30c
    9b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b04:	78d9      	ldrb	r1, [r3, #3]
    9b06:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b0e:	5499      	strb	r1, [r3, r2]
    9b10:	4b79      	ldr	r3, [pc, #484]	; (9cf8 <send_settings+0x804>)
    9b12:	781a      	ldrb	r2, [r3, #0]
    9b14:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9b18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b1c:	781b      	ldrb	r3, [r3, #0]
    9b1e:	4413      	add	r3, r2
    9b20:	b2da      	uxtb	r2, r3
    9b22:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b2a:	701a      	strb	r2, [r3, #0]
    9b2c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b34:	781a      	ldrb	r2, [r3, #0]
    9b36:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b3e:	781b      	ldrb	r3, [r3, #0]
    9b40:	4413      	add	r3, r2
    9b42:	b2da      	uxtb	r2, r3
    9b44:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b4c:	701a      	strb	r2, [r3, #0]
    9b4e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b56:	781b      	ldrb	r3, [r3, #0]
    9b58:	3301      	adds	r3, #1
    9b5a:	b2da      	uxtb	r2, r3
    9b5c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b64:	701a      	strb	r2, [r3, #0]
    9b66:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b6e:	781b      	ldrb	r3, [r3, #0]
    9b70:	2bff      	cmp	r3, #255	; 0xff
    9b72:	d105      	bne.n	9b80 <send_settings+0x68c>
    9b74:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b7c:	2200      	movs	r2, #0
    9b7e:	701a      	strb	r2, [r3, #0]
    9b80:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b88:	781b      	ldrb	r3, [r3, #0]
    9b8a:	461a      	mov	r2, r3
    9b8c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b94:	7819      	ldrb	r1, [r3, #0]
    9b96:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b9e:	5499      	strb	r1, [r3, r2]
    9ba0:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ba8:	781b      	ldrb	r3, [r3, #0]
    9baa:	3301      	adds	r3, #1
    9bac:	b2da      	uxtb	r2, r3
    9bae:	f24c 3319 	movw	r3, #49945	; 0xc319
    9bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bb6:	701a      	strb	r2, [r3, #0]
    9bb8:	f24c 3319 	movw	r3, #49945	; 0xc319
    9bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bc0:	781b      	ldrb	r3, [r3, #0]
    9bc2:	2bff      	cmp	r3, #255	; 0xff
    9bc4:	d105      	bne.n	9bd2 <send_settings+0x6de>
    9bc6:	f24c 3319 	movw	r3, #49945	; 0xc319
    9bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bce:	2200      	movs	r2, #0
    9bd0:	701a      	strb	r2, [r3, #0]
    9bd2:	f24c 3319 	movw	r3, #49945	; 0xc319
    9bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bda:	781b      	ldrb	r3, [r3, #0]
    9bdc:	461a      	mov	r2, r3
    9bde:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9be6:	7819      	ldrb	r1, [r3, #0]
    9be8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9bec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bf0:	5499      	strb	r1, [r3, r2]
    9bf2:	f24c 3319 	movw	r3, #49945	; 0xc319
    9bf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bfa:	781b      	ldrb	r3, [r3, #0]
    9bfc:	3301      	adds	r3, #1
    9bfe:	b2da      	uxtb	r2, r3
    9c00:	f24c 3319 	movw	r3, #49945	; 0xc319
    9c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c08:	701a      	strb	r2, [r3, #0]
    9c0a:	f24c 3319 	movw	r3, #49945	; 0xc319
    9c0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c12:	781b      	ldrb	r3, [r3, #0]
    9c14:	2bff      	cmp	r3, #255	; 0xff
    9c16:	d105      	bne.n	9c24 <send_settings+0x730>
    9c18:	f24c 3319 	movw	r3, #49945	; 0xc319
    9c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c20:	2200      	movs	r2, #0
    9c22:	701a      	strb	r2, [r3, #0]
    9c24:	f242 0339 	movw	r3, #8249	; 0x2039
    9c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c2c:	781b      	ldrb	r3, [r3, #0]
    9c2e:	b2db      	uxtb	r3, r3
    9c30:	f003 0310 	and.w	r3, r3, #16
    9c34:	2b00      	cmp	r3, #0
    9c36:	d15a      	bne.n	9cee <send_settings+0x7fa>
    9c38:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9c3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c40:	781b      	ldrb	r3, [r3, #0]
    9c42:	b2db      	uxtb	r3, r3
    9c44:	461a      	mov	r2, r3
    9c46:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9c4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c4e:	5c9a      	ldrb	r2, [r3, r2]
    9c50:	f24c 431b 	movw	r3, #50203	; 0xc41b
    9c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c58:	701a      	strb	r2, [r3, #0]
    9c5a:	f24c 431c 	movw	r3, #50204	; 0xc41c
    9c5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c62:	2200      	movs	r2, #0
    9c64:	701a      	strb	r2, [r3, #0]
    9c66:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c6e:	781b      	ldrb	r3, [r3, #0]
    9c70:	b2db      	uxtb	r3, r3
    9c72:	3301      	adds	r3, #1
    9c74:	b2da      	uxtb	r2, r3
    9c76:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c7e:	701a      	strb	r2, [r3, #0]
    9c80:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c88:	781b      	ldrb	r3, [r3, #0]
    9c8a:	b2db      	uxtb	r3, r3
    9c8c:	2bff      	cmp	r3, #255	; 0xff
    9c8e:	d105      	bne.n	9c9c <send_settings+0x7a8>
    9c90:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c98:	2200      	movs	r2, #0
    9c9a:	701a      	strb	r2, [r3, #0]
    9c9c:	f242 0338 	movw	r3, #8248	; 0x2038
    9ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ca4:	f242 0238 	movw	r2, #8248	; 0x2038
    9ca8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9cac:	7812      	ldrb	r2, [r2, #0]
    9cae:	b2d2      	uxtb	r2, r2
    9cb0:	f042 0201 	orr.w	r2, r2, #1
    9cb4:	b2d2      	uxtb	r2, r2
    9cb6:	701a      	strb	r2, [r3, #0]
    9cb8:	f242 0339 	movw	r3, #8249	; 0x2039
    9cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cc0:	f242 0239 	movw	r2, #8249	; 0x2039
    9cc4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9cc8:	7812      	ldrb	r2, [r2, #0]
    9cca:	b2d2      	uxtb	r2, r2
    9ccc:	f042 0210 	orr.w	r2, r2, #16
    9cd0:	b2d2      	uxtb	r2, r2
    9cd2:	701a      	strb	r2, [r3, #0]
    9cd4:	e00b      	b.n	9cee <send_settings+0x7fa>
    9cd6:	f24c 3318 	movw	r3, #49944	; 0xc318
    9cda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cde:	781b      	ldrb	r3, [r3, #0]
    9ce0:	3301      	adds	r3, #1
    9ce2:	b2da      	uxtb	r2, r3
    9ce4:	f24c 3318 	movw	r3, #49944	; 0xc318
    9ce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cec:	701a      	strb	r2, [r3, #0]
}
    9cee:	46bd      	mov	sp, r7
    9cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9cf4:	4770      	bx	lr
    9cf6:	bf00      	nop
    9cf8:	2004c30f 	.word	0x2004c30f

00009cfc <send_desired>:
void send_desired(void){  //1000ms
    9cfc:	b480      	push	{r7}
    9cfe:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9d00:	f24c 3311 	movw	r3, #49937	; 0xc311
    9d04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d08:	781a      	ldrb	r2, [r3, #0]
    9d0a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9d0e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9d12:	fba3 1302 	umull	r1, r3, r3, r2
    9d16:	08d9      	lsrs	r1, r3, #3
    9d18:	460b      	mov	r3, r1
    9d1a:	009b      	lsls	r3, r3, #2
    9d1c:	440b      	add	r3, r1
    9d1e:	005b      	lsls	r3, r3, #1
    9d20:	1ad3      	subs	r3, r2, r3
    9d22:	b2db      	uxtb	r3, r3
    9d24:	2b03      	cmp	r3, #3
    9d26:	f040 8712 	bne.w	ab4e <send_desired+0xe52>
    9d2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d32:	781a      	ldrb	r2, [r3, #0]
    9d34:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d3c:	781b      	ldrb	r3, [r3, #0]
    9d3e:	b2db      	uxtb	r3, r3
    9d40:	429a      	cmp	r2, r3
    9d42:	d313      	bcc.n	9d6c <send_desired+0x70>
    9d44:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9d48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d4c:	781b      	ldrb	r3, [r3, #0]
    9d4e:	b2db      	uxtb	r3, r3
    9d50:	461a      	mov	r2, r3
    9d52:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d5a:	781b      	ldrb	r3, [r3, #0]
    9d5c:	1ad3      	subs	r3, r2, r3
    9d5e:	33ff      	adds	r3, #255	; 0xff
    9d60:	2b18      	cmp	r3, #24
    9d62:	bfd4      	ite	le
    9d64:	2300      	movle	r3, #0
    9d66:	2301      	movgt	r3, #1
    9d68:	b2db      	uxtb	r3, r3
    9d6a:	e011      	b.n	9d90 <send_desired+0x94>
    9d6c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d74:	781b      	ldrb	r3, [r3, #0]
    9d76:	b2db      	uxtb	r3, r3
    9d78:	461a      	mov	r2, r3
    9d7a:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d82:	781b      	ldrb	r3, [r3, #0]
    9d84:	1ad3      	subs	r3, r2, r3
    9d86:	2b18      	cmp	r3, #24
    9d88:	bfd4      	ite	le
    9d8a:	2300      	movle	r3, #0
    9d8c:	2301      	movgt	r3, #1
    9d8e:	b2db      	uxtb	r3, r3
    9d90:	2b00      	cmp	r3, #0
    9d92:	f000 86d0 	beq.w	ab36 <send_desired+0xe3a>
    9d96:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d9e:	781b      	ldrb	r3, [r3, #0]
    9da0:	461a      	mov	r2, r3
    9da2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9daa:	2105      	movs	r1, #5
    9dac:	5499      	strb	r1, [r3, r2]
    9dae:	f24c 3319 	movw	r3, #49945	; 0xc319
    9db2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9db6:	781b      	ldrb	r3, [r3, #0]
    9db8:	3301      	adds	r3, #1
    9dba:	b2da      	uxtb	r2, r3
    9dbc:	f24c 3319 	movw	r3, #49945	; 0xc319
    9dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dc4:	701a      	strb	r2, [r3, #0]
    9dc6:	f24c 3319 	movw	r3, #49945	; 0xc319
    9dca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dce:	781b      	ldrb	r3, [r3, #0]
    9dd0:	2bff      	cmp	r3, #255	; 0xff
    9dd2:	d105      	bne.n	9de0 <send_desired+0xe4>
    9dd4:	f24c 3319 	movw	r3, #49945	; 0xc319
    9dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ddc:	2200      	movs	r2, #0
    9dde:	701a      	strb	r2, [r3, #0]
    9de0:	f24c 3319 	movw	r3, #49945	; 0xc319
    9de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9de8:	781b      	ldrb	r3, [r3, #0]
    9dea:	461a      	mov	r2, r3
    9dec:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9df0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9df4:	2112      	movs	r1, #18
    9df6:	5499      	strb	r1, [r3, r2]
    9df8:	f24c 3319 	movw	r3, #49945	; 0xc319
    9dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e00:	781b      	ldrb	r3, [r3, #0]
    9e02:	3301      	adds	r3, #1
    9e04:	b2da      	uxtb	r2, r3
    9e06:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e0e:	701a      	strb	r2, [r3, #0]
    9e10:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e18:	781b      	ldrb	r3, [r3, #0]
    9e1a:	2bff      	cmp	r3, #255	; 0xff
    9e1c:	d105      	bne.n	9e2a <send_desired+0x12e>
    9e1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e26:	2200      	movs	r2, #0
    9e28:	701a      	strb	r2, [r3, #0]
    9e2a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9e2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e32:	2212      	movs	r2, #18
    9e34:	701a      	strb	r2, [r3, #0]
    9e36:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e3e:	2212      	movs	r2, #18
    9e40:	701a      	strb	r2, [r3, #0]
    9e42:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e4a:	781b      	ldrb	r3, [r3, #0]
    9e4c:	461a      	mov	r2, r3
    9e4e:	f24c 6344 	movw	r3, #50756	; 0xc644
    9e52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e56:	7819      	ldrb	r1, [r3, #0]
    9e58:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9e5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e60:	5499      	strb	r1, [r3, r2]
    9e62:	f24c 6344 	movw	r3, #50756	; 0xc644
    9e66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e6a:	781a      	ldrb	r2, [r3, #0]
    9e6c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e74:	781b      	ldrb	r3, [r3, #0]
    9e76:	4413      	add	r3, r2
    9e78:	b2da      	uxtb	r2, r3
    9e7a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e82:	701a      	strb	r2, [r3, #0]
    9e84:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e8c:	781a      	ldrb	r2, [r3, #0]
    9e8e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9e92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e96:	781b      	ldrb	r3, [r3, #0]
    9e98:	4413      	add	r3, r2
    9e9a:	b2da      	uxtb	r2, r3
    9e9c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ea4:	701a      	strb	r2, [r3, #0]
    9ea6:	f24c 3319 	movw	r3, #49945	; 0xc319
    9eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eae:	781b      	ldrb	r3, [r3, #0]
    9eb0:	3301      	adds	r3, #1
    9eb2:	b2da      	uxtb	r2, r3
    9eb4:	f24c 3319 	movw	r3, #49945	; 0xc319
    9eb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ebc:	701a      	strb	r2, [r3, #0]
    9ebe:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ec6:	781b      	ldrb	r3, [r3, #0]
    9ec8:	2bff      	cmp	r3, #255	; 0xff
    9eca:	d105      	bne.n	9ed8 <send_desired+0x1dc>
    9ecc:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ed4:	2200      	movs	r2, #0
    9ed6:	701a      	strb	r2, [r3, #0]
    9ed8:	f24c 3319 	movw	r3, #49945	; 0xc319
    9edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ee0:	781b      	ldrb	r3, [r3, #0]
    9ee2:	461a      	mov	r2, r3
    9ee4:	f24c 6344 	movw	r3, #50756	; 0xc644
    9ee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eec:	7859      	ldrb	r1, [r3, #1]
    9eee:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9ef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ef6:	5499      	strb	r1, [r3, r2]
    9ef8:	4bd1      	ldr	r3, [pc, #836]	; (a240 <send_desired+0x544>)
    9efa:	781a      	ldrb	r2, [r3, #0]
    9efc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9f00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f04:	781b      	ldrb	r3, [r3, #0]
    9f06:	4413      	add	r3, r2
    9f08:	b2da      	uxtb	r2, r3
    9f0a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f12:	701a      	strb	r2, [r3, #0]
    9f14:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f1c:	781a      	ldrb	r2, [r3, #0]
    9f1e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9f22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f26:	781b      	ldrb	r3, [r3, #0]
    9f28:	4413      	add	r3, r2
    9f2a:	b2da      	uxtb	r2, r3
    9f2c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f34:	701a      	strb	r2, [r3, #0]
    9f36:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f3e:	781b      	ldrb	r3, [r3, #0]
    9f40:	3301      	adds	r3, #1
    9f42:	b2da      	uxtb	r2, r3
    9f44:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f4c:	701a      	strb	r2, [r3, #0]
    9f4e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f56:	781b      	ldrb	r3, [r3, #0]
    9f58:	2bff      	cmp	r3, #255	; 0xff
    9f5a:	d105      	bne.n	9f68 <send_desired+0x26c>
    9f5c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f64:	2200      	movs	r2, #0
    9f66:	701a      	strb	r2, [r3, #0]
    9f68:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f70:	781b      	ldrb	r3, [r3, #0]
    9f72:	461a      	mov	r2, r3
    9f74:	f24c 6344 	movw	r3, #50756	; 0xc644
    9f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f7c:	7899      	ldrb	r1, [r3, #2]
    9f7e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f86:	5499      	strb	r1, [r3, r2]
    9f88:	4bae      	ldr	r3, [pc, #696]	; (a244 <send_desired+0x548>)
    9f8a:	781a      	ldrb	r2, [r3, #0]
    9f8c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f94:	781b      	ldrb	r3, [r3, #0]
    9f96:	4413      	add	r3, r2
    9f98:	b2da      	uxtb	r2, r3
    9f9a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9f9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fa2:	701a      	strb	r2, [r3, #0]
    9fa4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fac:	781a      	ldrb	r2, [r3, #0]
    9fae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9fb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fb6:	781b      	ldrb	r3, [r3, #0]
    9fb8:	4413      	add	r3, r2
    9fba:	b2da      	uxtb	r2, r3
    9fbc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9fc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fc4:	701a      	strb	r2, [r3, #0]
    9fc6:	f24c 3319 	movw	r3, #49945	; 0xc319
    9fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fce:	781b      	ldrb	r3, [r3, #0]
    9fd0:	3301      	adds	r3, #1
    9fd2:	b2da      	uxtb	r2, r3
    9fd4:	f24c 3319 	movw	r3, #49945	; 0xc319
    9fd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fdc:	701a      	strb	r2, [r3, #0]
    9fde:	f24c 3319 	movw	r3, #49945	; 0xc319
    9fe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fe6:	781b      	ldrb	r3, [r3, #0]
    9fe8:	2bff      	cmp	r3, #255	; 0xff
    9fea:	d105      	bne.n	9ff8 <send_desired+0x2fc>
    9fec:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ff4:	2200      	movs	r2, #0
    9ff6:	701a      	strb	r2, [r3, #0]
    9ff8:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a000:	781b      	ldrb	r3, [r3, #0]
    a002:	461a      	mov	r2, r3
    a004:	f24c 6344 	movw	r3, #50756	; 0xc644
    a008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a00c:	78d9      	ldrb	r1, [r3, #3]
    a00e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a016:	5499      	strb	r1, [r3, r2]
    a018:	4b8b      	ldr	r3, [pc, #556]	; (a248 <send_desired+0x54c>)
    a01a:	781a      	ldrb	r2, [r3, #0]
    a01c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a024:	781b      	ldrb	r3, [r3, #0]
    a026:	4413      	add	r3, r2
    a028:	b2da      	uxtb	r2, r3
    a02a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a02e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a032:	701a      	strb	r2, [r3, #0]
    a034:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a03c:	781a      	ldrb	r2, [r3, #0]
    a03e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a046:	781b      	ldrb	r3, [r3, #0]
    a048:	4413      	add	r3, r2
    a04a:	b2da      	uxtb	r2, r3
    a04c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a054:	701a      	strb	r2, [r3, #0]
    a056:	f24c 3319 	movw	r3, #49945	; 0xc319
    a05a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a05e:	781b      	ldrb	r3, [r3, #0]
    a060:	3301      	adds	r3, #1
    a062:	b2da      	uxtb	r2, r3
    a064:	f24c 3319 	movw	r3, #49945	; 0xc319
    a068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a06c:	701a      	strb	r2, [r3, #0]
    a06e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a076:	781b      	ldrb	r3, [r3, #0]
    a078:	2bff      	cmp	r3, #255	; 0xff
    a07a:	d105      	bne.n	a088 <send_desired+0x38c>
    a07c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a084:	2200      	movs	r2, #0
    a086:	701a      	strb	r2, [r3, #0]
    a088:	f24c 3319 	movw	r3, #49945	; 0xc319
    a08c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a090:	781b      	ldrb	r3, [r3, #0]
    a092:	461a      	mov	r2, r3
    a094:	f24c 6348 	movw	r3, #50760	; 0xc648
    a098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a09c:	7819      	ldrb	r1, [r3, #0]
    a09e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a0a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0a6:	5499      	strb	r1, [r3, r2]
    a0a8:	f24c 6348 	movw	r3, #50760	; 0xc648
    a0ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0b0:	781a      	ldrb	r2, [r3, #0]
    a0b2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ba:	781b      	ldrb	r3, [r3, #0]
    a0bc:	4413      	add	r3, r2
    a0be:	b2da      	uxtb	r2, r3
    a0c0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a0c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0c8:	701a      	strb	r2, [r3, #0]
    a0ca:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a0ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0d2:	781a      	ldrb	r2, [r3, #0]
    a0d4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a0d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0dc:	781b      	ldrb	r3, [r3, #0]
    a0de:	4413      	add	r3, r2
    a0e0:	b2da      	uxtb	r2, r3
    a0e2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a0e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ea:	701a      	strb	r2, [r3, #0]
    a0ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    a0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0f4:	781b      	ldrb	r3, [r3, #0]
    a0f6:	3301      	adds	r3, #1
    a0f8:	b2da      	uxtb	r2, r3
    a0fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    a0fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a102:	701a      	strb	r2, [r3, #0]
    a104:	f24c 3319 	movw	r3, #49945	; 0xc319
    a108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a10c:	781b      	ldrb	r3, [r3, #0]
    a10e:	2bff      	cmp	r3, #255	; 0xff
    a110:	d105      	bne.n	a11e <send_desired+0x422>
    a112:	f24c 3319 	movw	r3, #49945	; 0xc319
    a116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a11a:	2200      	movs	r2, #0
    a11c:	701a      	strb	r2, [r3, #0]
    a11e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a126:	781b      	ldrb	r3, [r3, #0]
    a128:	461a      	mov	r2, r3
    a12a:	f24c 6348 	movw	r3, #50760	; 0xc648
    a12e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a132:	7859      	ldrb	r1, [r3, #1]
    a134:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a13c:	5499      	strb	r1, [r3, r2]
    a13e:	4b43      	ldr	r3, [pc, #268]	; (a24c <send_desired+0x550>)
    a140:	781a      	ldrb	r2, [r3, #0]
    a142:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a14a:	781b      	ldrb	r3, [r3, #0]
    a14c:	4413      	add	r3, r2
    a14e:	b2da      	uxtb	r2, r3
    a150:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a158:	701a      	strb	r2, [r3, #0]
    a15a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a15e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a162:	781a      	ldrb	r2, [r3, #0]
    a164:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a16c:	781b      	ldrb	r3, [r3, #0]
    a16e:	4413      	add	r3, r2
    a170:	b2da      	uxtb	r2, r3
    a172:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a176:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a17a:	701a      	strb	r2, [r3, #0]
    a17c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a184:	781b      	ldrb	r3, [r3, #0]
    a186:	3301      	adds	r3, #1
    a188:	b2da      	uxtb	r2, r3
    a18a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a18e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a192:	701a      	strb	r2, [r3, #0]
    a194:	f24c 3319 	movw	r3, #49945	; 0xc319
    a198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a19c:	781b      	ldrb	r3, [r3, #0]
    a19e:	2bff      	cmp	r3, #255	; 0xff
    a1a0:	d105      	bne.n	a1ae <send_desired+0x4b2>
    a1a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    a1a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1aa:	2200      	movs	r2, #0
    a1ac:	701a      	strb	r2, [r3, #0]
    a1ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    a1b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1b6:	781b      	ldrb	r3, [r3, #0]
    a1b8:	461a      	mov	r2, r3
    a1ba:	f24c 6348 	movw	r3, #50760	; 0xc648
    a1be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1c2:	7899      	ldrb	r1, [r3, #2]
    a1c4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a1c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1cc:	5499      	strb	r1, [r3, r2]
    a1ce:	4b20      	ldr	r3, [pc, #128]	; (a250 <send_desired+0x554>)
    a1d0:	781a      	ldrb	r2, [r3, #0]
    a1d2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a1d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1da:	781b      	ldrb	r3, [r3, #0]
    a1dc:	4413      	add	r3, r2
    a1de:	b2da      	uxtb	r2, r3
    a1e0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a1e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1e8:	701a      	strb	r2, [r3, #0]
    a1ea:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a1ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1f2:	781a      	ldrb	r2, [r3, #0]
    a1f4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a1f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1fc:	781b      	ldrb	r3, [r3, #0]
    a1fe:	4413      	add	r3, r2
    a200:	b2da      	uxtb	r2, r3
    a202:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a20a:	701a      	strb	r2, [r3, #0]
    a20c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a214:	781b      	ldrb	r3, [r3, #0]
    a216:	3301      	adds	r3, #1
    a218:	b2da      	uxtb	r2, r3
    a21a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a21e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a222:	701a      	strb	r2, [r3, #0]
    a224:	f24c 3319 	movw	r3, #49945	; 0xc319
    a228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a22c:	781b      	ldrb	r3, [r3, #0]
    a22e:	2bff      	cmp	r3, #255	; 0xff
    a230:	d110      	bne.n	a254 <send_desired+0x558>
    a232:	f24c 3319 	movw	r3, #49945	; 0xc319
    a236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a23a:	2200      	movs	r2, #0
    a23c:	701a      	strb	r2, [r3, #0]
    a23e:	e009      	b.n	a254 <send_desired+0x558>
    a240:	2004c645 	.word	0x2004c645
    a244:	2004c646 	.word	0x2004c646
    a248:	2004c647 	.word	0x2004c647
    a24c:	2004c649 	.word	0x2004c649
    a250:	2004c64a 	.word	0x2004c64a
    a254:	f24c 3319 	movw	r3, #49945	; 0xc319
    a258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a25c:	781b      	ldrb	r3, [r3, #0]
    a25e:	461a      	mov	r2, r3
    a260:	f24c 6348 	movw	r3, #50760	; 0xc648
    a264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a268:	78d9      	ldrb	r1, [r3, #3]
    a26a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a26e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a272:	5499      	strb	r1, [r3, r2]
    a274:	4bd3      	ldr	r3, [pc, #844]	; (a5c4 <send_desired+0x8c8>)
    a276:	781a      	ldrb	r2, [r3, #0]
    a278:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a27c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a280:	781b      	ldrb	r3, [r3, #0]
    a282:	4413      	add	r3, r2
    a284:	b2da      	uxtb	r2, r3
    a286:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a28a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a28e:	701a      	strb	r2, [r3, #0]
    a290:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a298:	781a      	ldrb	r2, [r3, #0]
    a29a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a29e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2a2:	781b      	ldrb	r3, [r3, #0]
    a2a4:	4413      	add	r3, r2
    a2a6:	b2da      	uxtb	r2, r3
    a2a8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a2ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2b0:	701a      	strb	r2, [r3, #0]
    a2b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    a2b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2ba:	781b      	ldrb	r3, [r3, #0]
    a2bc:	3301      	adds	r3, #1
    a2be:	b2da      	uxtb	r2, r3
    a2c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a2c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2c8:	701a      	strb	r2, [r3, #0]
    a2ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    a2ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2d2:	781b      	ldrb	r3, [r3, #0]
    a2d4:	2bff      	cmp	r3, #255	; 0xff
    a2d6:	d105      	bne.n	a2e4 <send_desired+0x5e8>
    a2d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a2dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2e0:	2200      	movs	r2, #0
    a2e2:	701a      	strb	r2, [r3, #0]
    a2e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    a2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2ec:	781b      	ldrb	r3, [r3, #0]
    a2ee:	461a      	mov	r2, r3
    a2f0:	f24c 6390 	movw	r3, #50832	; 0xc690
    a2f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2f8:	7819      	ldrb	r1, [r3, #0]
    a2fa:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a2fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a302:	5499      	strb	r1, [r3, r2]
    a304:	f24c 6390 	movw	r3, #50832	; 0xc690
    a308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a30c:	781a      	ldrb	r2, [r3, #0]
    a30e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a316:	781b      	ldrb	r3, [r3, #0]
    a318:	4413      	add	r3, r2
    a31a:	b2da      	uxtb	r2, r3
    a31c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a320:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a324:	701a      	strb	r2, [r3, #0]
    a326:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a32a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a32e:	781a      	ldrb	r2, [r3, #0]
    a330:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a334:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a338:	781b      	ldrb	r3, [r3, #0]
    a33a:	4413      	add	r3, r2
    a33c:	b2da      	uxtb	r2, r3
    a33e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a346:	701a      	strb	r2, [r3, #0]
    a348:	f24c 3319 	movw	r3, #49945	; 0xc319
    a34c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a350:	781b      	ldrb	r3, [r3, #0]
    a352:	3301      	adds	r3, #1
    a354:	b2da      	uxtb	r2, r3
    a356:	f24c 3319 	movw	r3, #49945	; 0xc319
    a35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a35e:	701a      	strb	r2, [r3, #0]
    a360:	f24c 3319 	movw	r3, #49945	; 0xc319
    a364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a368:	781b      	ldrb	r3, [r3, #0]
    a36a:	2bff      	cmp	r3, #255	; 0xff
    a36c:	d105      	bne.n	a37a <send_desired+0x67e>
    a36e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a376:	2200      	movs	r2, #0
    a378:	701a      	strb	r2, [r3, #0]
    a37a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a37e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a382:	781b      	ldrb	r3, [r3, #0]
    a384:	461a      	mov	r2, r3
    a386:	f24c 6390 	movw	r3, #50832	; 0xc690
    a38a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a38e:	7859      	ldrb	r1, [r3, #1]
    a390:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a398:	5499      	strb	r1, [r3, r2]
    a39a:	4b8b      	ldr	r3, [pc, #556]	; (a5c8 <send_desired+0x8cc>)
    a39c:	781a      	ldrb	r2, [r3, #0]
    a39e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a3a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3a6:	781b      	ldrb	r3, [r3, #0]
    a3a8:	4413      	add	r3, r2
    a3aa:	b2da      	uxtb	r2, r3
    a3ac:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a3b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3b4:	701a      	strb	r2, [r3, #0]
    a3b6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3be:	781a      	ldrb	r2, [r3, #0]
    a3c0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a3c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3c8:	781b      	ldrb	r3, [r3, #0]
    a3ca:	4413      	add	r3, r2
    a3cc:	b2da      	uxtb	r2, r3
    a3ce:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a3d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3d6:	701a      	strb	r2, [r3, #0]
    a3d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a3dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3e0:	781b      	ldrb	r3, [r3, #0]
    a3e2:	3301      	adds	r3, #1
    a3e4:	b2da      	uxtb	r2, r3
    a3e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a3ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ee:	701a      	strb	r2, [r3, #0]
    a3f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a3f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3f8:	781b      	ldrb	r3, [r3, #0]
    a3fa:	2bff      	cmp	r3, #255	; 0xff
    a3fc:	d105      	bne.n	a40a <send_desired+0x70e>
    a3fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    a402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a406:	2200      	movs	r2, #0
    a408:	701a      	strb	r2, [r3, #0]
    a40a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a40e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a412:	781b      	ldrb	r3, [r3, #0]
    a414:	461a      	mov	r2, r3
    a416:	f24c 6390 	movw	r3, #50832	; 0xc690
    a41a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a41e:	7899      	ldrb	r1, [r3, #2]
    a420:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a428:	5499      	strb	r1, [r3, r2]
    a42a:	4b68      	ldr	r3, [pc, #416]	; (a5cc <send_desired+0x8d0>)
    a42c:	781a      	ldrb	r2, [r3, #0]
    a42e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a436:	781b      	ldrb	r3, [r3, #0]
    a438:	4413      	add	r3, r2
    a43a:	b2da      	uxtb	r2, r3
    a43c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a444:	701a      	strb	r2, [r3, #0]
    a446:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a44a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a44e:	781a      	ldrb	r2, [r3, #0]
    a450:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a458:	781b      	ldrb	r3, [r3, #0]
    a45a:	4413      	add	r3, r2
    a45c:	b2da      	uxtb	r2, r3
    a45e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a466:	701a      	strb	r2, [r3, #0]
    a468:	f24c 3319 	movw	r3, #49945	; 0xc319
    a46c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a470:	781b      	ldrb	r3, [r3, #0]
    a472:	3301      	adds	r3, #1
    a474:	b2da      	uxtb	r2, r3
    a476:	f24c 3319 	movw	r3, #49945	; 0xc319
    a47a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a47e:	701a      	strb	r2, [r3, #0]
    a480:	f24c 3319 	movw	r3, #49945	; 0xc319
    a484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a488:	781b      	ldrb	r3, [r3, #0]
    a48a:	2bff      	cmp	r3, #255	; 0xff
    a48c:	d105      	bne.n	a49a <send_desired+0x79e>
    a48e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a496:	2200      	movs	r2, #0
    a498:	701a      	strb	r2, [r3, #0]
    a49a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4a2:	781b      	ldrb	r3, [r3, #0]
    a4a4:	461a      	mov	r2, r3
    a4a6:	f24c 6390 	movw	r3, #50832	; 0xc690
    a4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4ae:	78d9      	ldrb	r1, [r3, #3]
    a4b0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a4b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4b8:	5499      	strb	r1, [r3, r2]
    a4ba:	4b45      	ldr	r3, [pc, #276]	; (a5d0 <send_desired+0x8d4>)
    a4bc:	781a      	ldrb	r2, [r3, #0]
    a4be:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a4c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4c6:	781b      	ldrb	r3, [r3, #0]
    a4c8:	4413      	add	r3, r2
    a4ca:	b2da      	uxtb	r2, r3
    a4cc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a4d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4d4:	701a      	strb	r2, [r3, #0]
    a4d6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4de:	781a      	ldrb	r2, [r3, #0]
    a4e0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a4e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4e8:	781b      	ldrb	r3, [r3, #0]
    a4ea:	4413      	add	r3, r2
    a4ec:	b2da      	uxtb	r2, r3
    a4ee:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a4f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4f6:	701a      	strb	r2, [r3, #0]
    a4f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a4fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a500:	781b      	ldrb	r3, [r3, #0]
    a502:	3301      	adds	r3, #1
    a504:	b2da      	uxtb	r2, r3
    a506:	f24c 3319 	movw	r3, #49945	; 0xc319
    a50a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a50e:	701a      	strb	r2, [r3, #0]
    a510:	f24c 3319 	movw	r3, #49945	; 0xc319
    a514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a518:	781b      	ldrb	r3, [r3, #0]
    a51a:	2bff      	cmp	r3, #255	; 0xff
    a51c:	d105      	bne.n	a52a <send_desired+0x82e>
    a51e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a526:	2200      	movs	r2, #0
    a528:	701a      	strb	r2, [r3, #0]
    a52a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a52e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a532:	781b      	ldrb	r3, [r3, #0]
    a534:	461a      	mov	r2, r3
    a536:	f24c 6394 	movw	r3, #50836	; 0xc694
    a53a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a53e:	7819      	ldrb	r1, [r3, #0]
    a540:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a548:	5499      	strb	r1, [r3, r2]
    a54a:	f24c 6394 	movw	r3, #50836	; 0xc694
    a54e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a552:	781a      	ldrb	r2, [r3, #0]
    a554:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a55c:	781b      	ldrb	r3, [r3, #0]
    a55e:	4413      	add	r3, r2
    a560:	b2da      	uxtb	r2, r3
    a562:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a56a:	701a      	strb	r2, [r3, #0]
    a56c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a574:	781a      	ldrb	r2, [r3, #0]
    a576:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a57a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a57e:	781b      	ldrb	r3, [r3, #0]
    a580:	4413      	add	r3, r2
    a582:	b2da      	uxtb	r2, r3
    a584:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a58c:	701a      	strb	r2, [r3, #0]
    a58e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a596:	781b      	ldrb	r3, [r3, #0]
    a598:	3301      	adds	r3, #1
    a59a:	b2da      	uxtb	r2, r3
    a59c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a5a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5a4:	701a      	strb	r2, [r3, #0]
    a5a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a5aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ae:	781b      	ldrb	r3, [r3, #0]
    a5b0:	2bff      	cmp	r3, #255	; 0xff
    a5b2:	d10f      	bne.n	a5d4 <send_desired+0x8d8>
    a5b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    a5b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5bc:	2200      	movs	r2, #0
    a5be:	701a      	strb	r2, [r3, #0]
    a5c0:	e008      	b.n	a5d4 <send_desired+0x8d8>
    a5c2:	bf00      	nop
    a5c4:	2004c64b 	.word	0x2004c64b
    a5c8:	2004c691 	.word	0x2004c691
    a5cc:	2004c692 	.word	0x2004c692
    a5d0:	2004c693 	.word	0x2004c693
    a5d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    a5d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5dc:	781b      	ldrb	r3, [r3, #0]
    a5de:	461a      	mov	r2, r3
    a5e0:	f24c 6394 	movw	r3, #50836	; 0xc694
    a5e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5e8:	7859      	ldrb	r1, [r3, #1]
    a5ea:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a5ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5f2:	5499      	strb	r1, [r3, r2]
    a5f4:	4bd1      	ldr	r3, [pc, #836]	; (a93c <send_desired+0xc40>)
    a5f6:	781a      	ldrb	r2, [r3, #0]
    a5f8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a5fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a600:	781b      	ldrb	r3, [r3, #0]
    a602:	4413      	add	r3, r2
    a604:	b2da      	uxtb	r2, r3
    a606:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a60a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a60e:	701a      	strb	r2, [r3, #0]
    a610:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a618:	781a      	ldrb	r2, [r3, #0]
    a61a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a61e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a622:	781b      	ldrb	r3, [r3, #0]
    a624:	4413      	add	r3, r2
    a626:	b2da      	uxtb	r2, r3
    a628:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a630:	701a      	strb	r2, [r3, #0]
    a632:	f24c 3319 	movw	r3, #49945	; 0xc319
    a636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a63a:	781b      	ldrb	r3, [r3, #0]
    a63c:	3301      	adds	r3, #1
    a63e:	b2da      	uxtb	r2, r3
    a640:	f24c 3319 	movw	r3, #49945	; 0xc319
    a644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a648:	701a      	strb	r2, [r3, #0]
    a64a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a64e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a652:	781b      	ldrb	r3, [r3, #0]
    a654:	2bff      	cmp	r3, #255	; 0xff
    a656:	d105      	bne.n	a664 <send_desired+0x968>
    a658:	f24c 3319 	movw	r3, #49945	; 0xc319
    a65c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a660:	2200      	movs	r2, #0
    a662:	701a      	strb	r2, [r3, #0]
    a664:	f24c 3319 	movw	r3, #49945	; 0xc319
    a668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a66c:	781b      	ldrb	r3, [r3, #0]
    a66e:	461a      	mov	r2, r3
    a670:	f24c 6394 	movw	r3, #50836	; 0xc694
    a674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a678:	7899      	ldrb	r1, [r3, #2]
    a67a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a67e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a682:	5499      	strb	r1, [r3, r2]
    a684:	4bae      	ldr	r3, [pc, #696]	; (a940 <send_desired+0xc44>)
    a686:	781a      	ldrb	r2, [r3, #0]
    a688:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a690:	781b      	ldrb	r3, [r3, #0]
    a692:	4413      	add	r3, r2
    a694:	b2da      	uxtb	r2, r3
    a696:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a69a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a69e:	701a      	strb	r2, [r3, #0]
    a6a0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a6a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6a8:	781a      	ldrb	r2, [r3, #0]
    a6aa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a6ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6b2:	781b      	ldrb	r3, [r3, #0]
    a6b4:	4413      	add	r3, r2
    a6b6:	b2da      	uxtb	r2, r3
    a6b8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a6bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6c0:	701a      	strb	r2, [r3, #0]
    a6c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    a6c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ca:	781b      	ldrb	r3, [r3, #0]
    a6cc:	3301      	adds	r3, #1
    a6ce:	b2da      	uxtb	r2, r3
    a6d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a6d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6d8:	701a      	strb	r2, [r3, #0]
    a6da:	f24c 3319 	movw	r3, #49945	; 0xc319
    a6de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6e2:	781b      	ldrb	r3, [r3, #0]
    a6e4:	2bff      	cmp	r3, #255	; 0xff
    a6e6:	d105      	bne.n	a6f4 <send_desired+0x9f8>
    a6e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6f0:	2200      	movs	r2, #0
    a6f2:	701a      	strb	r2, [r3, #0]
    a6f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    a6f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6fc:	781b      	ldrb	r3, [r3, #0]
    a6fe:	461a      	mov	r2, r3
    a700:	f24c 6394 	movw	r3, #50836	; 0xc694
    a704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a708:	78d9      	ldrb	r1, [r3, #3]
    a70a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a70e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a712:	5499      	strb	r1, [r3, r2]
    a714:	4b8b      	ldr	r3, [pc, #556]	; (a944 <send_desired+0xc48>)
    a716:	781a      	ldrb	r2, [r3, #0]
    a718:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a71c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a720:	781b      	ldrb	r3, [r3, #0]
    a722:	4413      	add	r3, r2
    a724:	b2da      	uxtb	r2, r3
    a726:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a72a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a72e:	701a      	strb	r2, [r3, #0]
    a730:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a738:	781a      	ldrb	r2, [r3, #0]
    a73a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a73e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a742:	781b      	ldrb	r3, [r3, #0]
    a744:	4413      	add	r3, r2
    a746:	b2da      	uxtb	r2, r3
    a748:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a74c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a750:	701a      	strb	r2, [r3, #0]
    a752:	f24c 3319 	movw	r3, #49945	; 0xc319
    a756:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a75a:	781b      	ldrb	r3, [r3, #0]
    a75c:	3301      	adds	r3, #1
    a75e:	b2da      	uxtb	r2, r3
    a760:	f24c 3319 	movw	r3, #49945	; 0xc319
    a764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a768:	701a      	strb	r2, [r3, #0]
    a76a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a76e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a772:	781b      	ldrb	r3, [r3, #0]
    a774:	2bff      	cmp	r3, #255	; 0xff
    a776:	d105      	bne.n	a784 <send_desired+0xa88>
    a778:	f24c 3319 	movw	r3, #49945	; 0xc319
    a77c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a780:	2200      	movs	r2, #0
    a782:	701a      	strb	r2, [r3, #0]
    a784:	f24c 3319 	movw	r3, #49945	; 0xc319
    a788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a78c:	781b      	ldrb	r3, [r3, #0]
    a78e:	461a      	mov	r2, r3
    a790:	f240 5374 	movw	r3, #1396	; 0x574
    a794:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a798:	7819      	ldrb	r1, [r3, #0]
    a79a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a79e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7a2:	5499      	strb	r1, [r3, r2]
    a7a4:	f240 5374 	movw	r3, #1396	; 0x574
    a7a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7ac:	781a      	ldrb	r2, [r3, #0]
    a7ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a7b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7b6:	781b      	ldrb	r3, [r3, #0]
    a7b8:	4413      	add	r3, r2
    a7ba:	b2da      	uxtb	r2, r3
    a7bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a7c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7c4:	701a      	strb	r2, [r3, #0]
    a7c6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a7ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7ce:	781a      	ldrb	r2, [r3, #0]
    a7d0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a7d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7d8:	781b      	ldrb	r3, [r3, #0]
    a7da:	4413      	add	r3, r2
    a7dc:	b2da      	uxtb	r2, r3
    a7de:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a7e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7e6:	701a      	strb	r2, [r3, #0]
    a7e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7f0:	781b      	ldrb	r3, [r3, #0]
    a7f2:	3301      	adds	r3, #1
    a7f4:	b2da      	uxtb	r2, r3
    a7f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7fe:	701a      	strb	r2, [r3, #0]
    a800:	f24c 3319 	movw	r3, #49945	; 0xc319
    a804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a808:	781b      	ldrb	r3, [r3, #0]
    a80a:	2bff      	cmp	r3, #255	; 0xff
    a80c:	d105      	bne.n	a81a <send_desired+0xb1e>
    a80e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a816:	2200      	movs	r2, #0
    a818:	701a      	strb	r2, [r3, #0]
    a81a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a81e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a822:	781b      	ldrb	r3, [r3, #0]
    a824:	461a      	mov	r2, r3
    a826:	f240 5374 	movw	r3, #1396	; 0x574
    a82a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a82e:	7859      	ldrb	r1, [r3, #1]
    a830:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a838:	5499      	strb	r1, [r3, r2]
    a83a:	4b43      	ldr	r3, [pc, #268]	; (a948 <send_desired+0xc4c>)
    a83c:	781a      	ldrb	r2, [r3, #0]
    a83e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a846:	781b      	ldrb	r3, [r3, #0]
    a848:	4413      	add	r3, r2
    a84a:	b2da      	uxtb	r2, r3
    a84c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a854:	701a      	strb	r2, [r3, #0]
    a856:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a85a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a85e:	781a      	ldrb	r2, [r3, #0]
    a860:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a868:	781b      	ldrb	r3, [r3, #0]
    a86a:	4413      	add	r3, r2
    a86c:	b2da      	uxtb	r2, r3
    a86e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a876:	701a      	strb	r2, [r3, #0]
    a878:	f24c 3319 	movw	r3, #49945	; 0xc319
    a87c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a880:	781b      	ldrb	r3, [r3, #0]
    a882:	3301      	adds	r3, #1
    a884:	b2da      	uxtb	r2, r3
    a886:	f24c 3319 	movw	r3, #49945	; 0xc319
    a88a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a88e:	701a      	strb	r2, [r3, #0]
    a890:	f24c 3319 	movw	r3, #49945	; 0xc319
    a894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a898:	781b      	ldrb	r3, [r3, #0]
    a89a:	2bff      	cmp	r3, #255	; 0xff
    a89c:	d105      	bne.n	a8aa <send_desired+0xbae>
    a89e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a8a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8a6:	2200      	movs	r2, #0
    a8a8:	701a      	strb	r2, [r3, #0]
    a8aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    a8ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8b2:	781b      	ldrb	r3, [r3, #0]
    a8b4:	461a      	mov	r2, r3
    a8b6:	f240 5374 	movw	r3, #1396	; 0x574
    a8ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8be:	7899      	ldrb	r1, [r3, #2]
    a8c0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a8c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8c8:	5499      	strb	r1, [r3, r2]
    a8ca:	4b20      	ldr	r3, [pc, #128]	; (a94c <send_desired+0xc50>)
    a8cc:	781a      	ldrb	r2, [r3, #0]
    a8ce:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a8d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8d6:	781b      	ldrb	r3, [r3, #0]
    a8d8:	4413      	add	r3, r2
    a8da:	b2da      	uxtb	r2, r3
    a8dc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a8e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8e4:	701a      	strb	r2, [r3, #0]
    a8e6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a8ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8ee:	781a      	ldrb	r2, [r3, #0]
    a8f0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a8f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8f8:	781b      	ldrb	r3, [r3, #0]
    a8fa:	4413      	add	r3, r2
    a8fc:	b2da      	uxtb	r2, r3
    a8fe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a906:	701a      	strb	r2, [r3, #0]
    a908:	f24c 3319 	movw	r3, #49945	; 0xc319
    a90c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a910:	781b      	ldrb	r3, [r3, #0]
    a912:	3301      	adds	r3, #1
    a914:	b2da      	uxtb	r2, r3
    a916:	f24c 3319 	movw	r3, #49945	; 0xc319
    a91a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a91e:	701a      	strb	r2, [r3, #0]
    a920:	f24c 3319 	movw	r3, #49945	; 0xc319
    a924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a928:	781b      	ldrb	r3, [r3, #0]
    a92a:	2bff      	cmp	r3, #255	; 0xff
    a92c:	d110      	bne.n	a950 <send_desired+0xc54>
    a92e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a936:	2200      	movs	r2, #0
    a938:	701a      	strb	r2, [r3, #0]
    a93a:	e009      	b.n	a950 <send_desired+0xc54>
    a93c:	2004c695 	.word	0x2004c695
    a940:	2004c696 	.word	0x2004c696
    a944:	2004c697 	.word	0x2004c697
    a948:	20000575 	.word	0x20000575
    a94c:	20000576 	.word	0x20000576
    a950:	f24c 3319 	movw	r3, #49945	; 0xc319
    a954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a958:	781b      	ldrb	r3, [r3, #0]
    a95a:	461a      	mov	r2, r3
    a95c:	f240 5374 	movw	r3, #1396	; 0x574
    a960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a964:	78d9      	ldrb	r1, [r3, #3]
    a966:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a96e:	5499      	strb	r1, [r3, r2]
    a970:	4b79      	ldr	r3, [pc, #484]	; (ab58 <send_desired+0xe5c>)
    a972:	781a      	ldrb	r2, [r3, #0]
    a974:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a97c:	781b      	ldrb	r3, [r3, #0]
    a97e:	4413      	add	r3, r2
    a980:	b2da      	uxtb	r2, r3
    a982:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a98a:	701a      	strb	r2, [r3, #0]
    a98c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a994:	781a      	ldrb	r2, [r3, #0]
    a996:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a99a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a99e:	781b      	ldrb	r3, [r3, #0]
    a9a0:	4413      	add	r3, r2
    a9a2:	b2da      	uxtb	r2, r3
    a9a4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a9a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9ac:	701a      	strb	r2, [r3, #0]
    a9ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    a9b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9b6:	781b      	ldrb	r3, [r3, #0]
    a9b8:	3301      	adds	r3, #1
    a9ba:	b2da      	uxtb	r2, r3
    a9bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    a9c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9c4:	701a      	strb	r2, [r3, #0]
    a9c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a9ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9ce:	781b      	ldrb	r3, [r3, #0]
    a9d0:	2bff      	cmp	r3, #255	; 0xff
    a9d2:	d105      	bne.n	a9e0 <send_desired+0xce4>
    a9d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    a9d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9dc:	2200      	movs	r2, #0
    a9de:	701a      	strb	r2, [r3, #0]
    a9e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a9e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9e8:	781b      	ldrb	r3, [r3, #0]
    a9ea:	461a      	mov	r2, r3
    a9ec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a9f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9f4:	7819      	ldrb	r1, [r3, #0]
    a9f6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9fe:	5499      	strb	r1, [r3, r2]
    aa00:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa08:	781b      	ldrb	r3, [r3, #0]
    aa0a:	3301      	adds	r3, #1
    aa0c:	b2da      	uxtb	r2, r3
    aa0e:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa16:	701a      	strb	r2, [r3, #0]
    aa18:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa20:	781b      	ldrb	r3, [r3, #0]
    aa22:	2bff      	cmp	r3, #255	; 0xff
    aa24:	d105      	bne.n	aa32 <send_desired+0xd36>
    aa26:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa2e:	2200      	movs	r2, #0
    aa30:	701a      	strb	r2, [r3, #0]
    aa32:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa3a:	781b      	ldrb	r3, [r3, #0]
    aa3c:	461a      	mov	r2, r3
    aa3e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    aa42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa46:	7819      	ldrb	r1, [r3, #0]
    aa48:	f24c 331c 	movw	r3, #49948	; 0xc31c
    aa4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa50:	5499      	strb	r1, [r3, r2]
    aa52:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa5a:	781b      	ldrb	r3, [r3, #0]
    aa5c:	3301      	adds	r3, #1
    aa5e:	b2da      	uxtb	r2, r3
    aa60:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa68:	701a      	strb	r2, [r3, #0]
    aa6a:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa72:	781b      	ldrb	r3, [r3, #0]
    aa74:	2bff      	cmp	r3, #255	; 0xff
    aa76:	d105      	bne.n	aa84 <send_desired+0xd88>
    aa78:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa80:	2200      	movs	r2, #0
    aa82:	701a      	strb	r2, [r3, #0]
    aa84:	f242 0339 	movw	r3, #8249	; 0x2039
    aa88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa8c:	781b      	ldrb	r3, [r3, #0]
    aa8e:	b2db      	uxtb	r3, r3
    aa90:	f003 0310 	and.w	r3, r3, #16
    aa94:	2b00      	cmp	r3, #0
    aa96:	d15a      	bne.n	ab4e <send_desired+0xe52>
    aa98:	f24c 331a 	movw	r3, #49946	; 0xc31a
    aa9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaa0:	781b      	ldrb	r3, [r3, #0]
    aaa2:	b2db      	uxtb	r3, r3
    aaa4:	461a      	mov	r2, r3
    aaa6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    aaaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaae:	5c9a      	ldrb	r2, [r3, r2]
    aab0:	f24c 431b 	movw	r3, #50203	; 0xc41b
    aab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aab8:	701a      	strb	r2, [r3, #0]
    aaba:	f24c 431c 	movw	r3, #50204	; 0xc41c
    aabe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aac2:	2200      	movs	r2, #0
    aac4:	701a      	strb	r2, [r3, #0]
    aac6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    aaca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aace:	781b      	ldrb	r3, [r3, #0]
    aad0:	b2db      	uxtb	r3, r3
    aad2:	3301      	adds	r3, #1
    aad4:	b2da      	uxtb	r2, r3
    aad6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    aada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aade:	701a      	strb	r2, [r3, #0]
    aae0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    aae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aae8:	781b      	ldrb	r3, [r3, #0]
    aaea:	b2db      	uxtb	r3, r3
    aaec:	2bff      	cmp	r3, #255	; 0xff
    aaee:	d105      	bne.n	aafc <send_desired+0xe00>
    aaf0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    aaf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaf8:	2200      	movs	r2, #0
    aafa:	701a      	strb	r2, [r3, #0]
    aafc:	f242 0338 	movw	r3, #8248	; 0x2038
    ab00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab04:	f242 0238 	movw	r2, #8248	; 0x2038
    ab08:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ab0c:	7812      	ldrb	r2, [r2, #0]
    ab0e:	b2d2      	uxtb	r2, r2
    ab10:	f042 0201 	orr.w	r2, r2, #1
    ab14:	b2d2      	uxtb	r2, r2
    ab16:	701a      	strb	r2, [r3, #0]
    ab18:	f242 0339 	movw	r3, #8249	; 0x2039
    ab1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab20:	f242 0239 	movw	r2, #8249	; 0x2039
    ab24:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ab28:	7812      	ldrb	r2, [r2, #0]
    ab2a:	b2d2      	uxtb	r2, r2
    ab2c:	f042 0210 	orr.w	r2, r2, #16
    ab30:	b2d2      	uxtb	r2, r2
    ab32:	701a      	strb	r2, [r3, #0]
    ab34:	e00b      	b.n	ab4e <send_desired+0xe52>
    ab36:	f24c 3318 	movw	r3, #49944	; 0xc318
    ab3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab3e:	781b      	ldrb	r3, [r3, #0]
    ab40:	3301      	adds	r3, #1
    ab42:	b2da      	uxtb	r2, r3
    ab44:	f24c 3318 	movw	r3, #49944	; 0xc318
    ab48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab4c:	701a      	strb	r2, [r3, #0]
}
    ab4e:	46bd      	mov	sp, r7
    ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab54:	4770      	bx	lr
    ab56:	bf00      	nop
    ab58:	20000577 	.word	0x20000577

0000ab5c <send_bat>:
void send_bat(void){  //2000ms
    ab5c:	b480      	push	{r7}
    ab5e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    ab60:	f24c 3311 	movw	r3, #49937	; 0xc311
    ab64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab68:	781a      	ldrb	r2, [r3, #0]
    ab6a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    ab6e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    ab72:	fba3 1302 	umull	r1, r3, r3, r2
    ab76:	0919      	lsrs	r1, r3, #4
    ab78:	460b      	mov	r3, r1
    ab7a:	009b      	lsls	r3, r3, #2
    ab7c:	440b      	add	r3, r1
    ab7e:	009b      	lsls	r3, r3, #2
    ab80:	1ad3      	subs	r3, r2, r3
    ab82:	b2db      	uxtb	r3, r3
    ab84:	2b08      	cmp	r3, #8
    ab86:	f040 839a 	bne.w	b2be <send_bat+0x762>
    ab8a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab92:	781a      	ldrb	r2, [r3, #0]
    ab94:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ab98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab9c:	781b      	ldrb	r3, [r3, #0]
    ab9e:	b2db      	uxtb	r3, r3
    aba0:	429a      	cmp	r2, r3
    aba2:	d313      	bcc.n	abcc <send_bat+0x70>
    aba4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    aba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abac:	781b      	ldrb	r3, [r3, #0]
    abae:	b2db      	uxtb	r3, r3
    abb0:	461a      	mov	r2, r3
    abb2:	f24c 3319 	movw	r3, #49945	; 0xc319
    abb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abba:	781b      	ldrb	r3, [r3, #0]
    abbc:	1ad3      	subs	r3, r2, r3
    abbe:	33ff      	adds	r3, #255	; 0xff
    abc0:	2b0c      	cmp	r3, #12
    abc2:	bfd4      	ite	le
    abc4:	2300      	movle	r3, #0
    abc6:	2301      	movgt	r3, #1
    abc8:	b2db      	uxtb	r3, r3
    abca:	e011      	b.n	abf0 <send_bat+0x94>
    abcc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    abd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abd4:	781b      	ldrb	r3, [r3, #0]
    abd6:	b2db      	uxtb	r3, r3
    abd8:	461a      	mov	r2, r3
    abda:	f24c 3319 	movw	r3, #49945	; 0xc319
    abde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abe2:	781b      	ldrb	r3, [r3, #0]
    abe4:	1ad3      	subs	r3, r2, r3
    abe6:	2b0c      	cmp	r3, #12
    abe8:	bfd4      	ite	le
    abea:	2300      	movle	r3, #0
    abec:	2301      	movgt	r3, #1
    abee:	b2db      	uxtb	r3, r3
    abf0:	2b00      	cmp	r3, #0
    abf2:	f000 8358 	beq.w	b2a6 <send_bat+0x74a>
    abf6:	f24c 3319 	movw	r3, #49945	; 0xc319
    abfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abfe:	781b      	ldrb	r3, [r3, #0]
    ac00:	461a      	mov	r2, r3
    ac02:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ac06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac0a:	2105      	movs	r1, #5
    ac0c:	5499      	strb	r1, [r3, r2]
    ac0e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac16:	781b      	ldrb	r3, [r3, #0]
    ac18:	3301      	adds	r3, #1
    ac1a:	b2da      	uxtb	r2, r3
    ac1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac24:	701a      	strb	r2, [r3, #0]
    ac26:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac2e:	781b      	ldrb	r3, [r3, #0]
    ac30:	2bff      	cmp	r3, #255	; 0xff
    ac32:	d105      	bne.n	ac40 <send_bat+0xe4>
    ac34:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac3c:	2200      	movs	r2, #0
    ac3e:	701a      	strb	r2, [r3, #0]
    ac40:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac48:	781b      	ldrb	r3, [r3, #0]
    ac4a:	461a      	mov	r2, r3
    ac4c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ac50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac54:	210c      	movs	r1, #12
    ac56:	5499      	strb	r1, [r3, r2]
    ac58:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac60:	781b      	ldrb	r3, [r3, #0]
    ac62:	3301      	adds	r3, #1
    ac64:	b2da      	uxtb	r2, r3
    ac66:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac6e:	701a      	strb	r2, [r3, #0]
    ac70:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac78:	781b      	ldrb	r3, [r3, #0]
    ac7a:	2bff      	cmp	r3, #255	; 0xff
    ac7c:	d105      	bne.n	ac8a <send_bat+0x12e>
    ac7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac86:	2200      	movs	r2, #0
    ac88:	701a      	strb	r2, [r3, #0]
    ac8a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ac8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac92:	220c      	movs	r2, #12
    ac94:	701a      	strb	r2, [r3, #0]
    ac96:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ac9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac9e:	220c      	movs	r2, #12
    aca0:	701a      	strb	r2, [r3, #0]
    aca2:	f24c 3319 	movw	r3, #49945	; 0xc319
    aca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acaa:	781b      	ldrb	r3, [r3, #0]
    acac:	461a      	mov	r2, r3
    acae:	f24c 3302 	movw	r3, #49922	; 0xc302
    acb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acb6:	7819      	ldrb	r1, [r3, #0]
    acb8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    acbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acc0:	5499      	strb	r1, [r3, r2]
    acc2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    acc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acca:	781a      	ldrb	r2, [r3, #0]
    accc:	f24c 3302 	movw	r3, #49922	; 0xc302
    acd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acd4:	781b      	ldrb	r3, [r3, #0]
    acd6:	4413      	add	r3, r2
    acd8:	b2da      	uxtb	r2, r3
    acda:	f24c 431d 	movw	r3, #50205	; 0xc41d
    acde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ace2:	701a      	strb	r2, [r3, #0]
    ace4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ace8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acec:	781a      	ldrb	r2, [r3, #0]
    acee:	f24c 431d 	movw	r3, #50205	; 0xc41d
    acf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acf6:	781b      	ldrb	r3, [r3, #0]
    acf8:	4413      	add	r3, r2
    acfa:	b2da      	uxtb	r2, r3
    acfc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ad00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad04:	701a      	strb	r2, [r3, #0]
    ad06:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad0e:	781b      	ldrb	r3, [r3, #0]
    ad10:	3301      	adds	r3, #1
    ad12:	b2da      	uxtb	r2, r3
    ad14:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad1c:	701a      	strb	r2, [r3, #0]
    ad1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad26:	781b      	ldrb	r3, [r3, #0]
    ad28:	2bff      	cmp	r3, #255	; 0xff
    ad2a:	d105      	bne.n	ad38 <send_bat+0x1dc>
    ad2c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad34:	2200      	movs	r2, #0
    ad36:	701a      	strb	r2, [r3, #0]
    ad38:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad40:	781b      	ldrb	r3, [r3, #0]
    ad42:	461a      	mov	r2, r3
    ad44:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    ad48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad4c:	7819      	ldrb	r1, [r3, #0]
    ad4e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ad52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad56:	5499      	strb	r1, [r3, r2]
    ad58:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    ad5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad60:	781a      	ldrb	r2, [r3, #0]
    ad62:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ad66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad6a:	781b      	ldrb	r3, [r3, #0]
    ad6c:	4413      	add	r3, r2
    ad6e:	b2da      	uxtb	r2, r3
    ad70:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ad74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad78:	701a      	strb	r2, [r3, #0]
    ad7a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ad7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad82:	781a      	ldrb	r2, [r3, #0]
    ad84:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ad88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad8c:	781b      	ldrb	r3, [r3, #0]
    ad8e:	4413      	add	r3, r2
    ad90:	b2da      	uxtb	r2, r3
    ad92:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ad96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad9a:	701a      	strb	r2, [r3, #0]
    ad9c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ada0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ada4:	781b      	ldrb	r3, [r3, #0]
    ada6:	3301      	adds	r3, #1
    ada8:	b2da      	uxtb	r2, r3
    adaa:	f24c 3319 	movw	r3, #49945	; 0xc319
    adae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adb2:	701a      	strb	r2, [r3, #0]
    adb4:	f24c 3319 	movw	r3, #49945	; 0xc319
    adb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adbc:	781b      	ldrb	r3, [r3, #0]
    adbe:	2bff      	cmp	r3, #255	; 0xff
    adc0:	d105      	bne.n	adce <send_bat+0x272>
    adc2:	f24c 3319 	movw	r3, #49945	; 0xc319
    adc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adca:	2200      	movs	r2, #0
    adcc:	701a      	strb	r2, [r3, #0]
    adce:	f24c 3319 	movw	r3, #49945	; 0xc319
    add2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    add6:	781b      	ldrb	r3, [r3, #0]
    add8:	461a      	mov	r2, r3
    adda:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    adde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ade2:	7859      	ldrb	r1, [r3, #1]
    ade4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ade8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adec:	5499      	strb	r1, [r3, r2]
    adee:	4bd5      	ldr	r3, [pc, #852]	; (b144 <send_bat+0x5e8>)
    adf0:	781a      	ldrb	r2, [r3, #0]
    adf2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    adf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adfa:	781b      	ldrb	r3, [r3, #0]
    adfc:	4413      	add	r3, r2
    adfe:	b2da      	uxtb	r2, r3
    ae00:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ae04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae08:	701a      	strb	r2, [r3, #0]
    ae0a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ae0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae12:	781a      	ldrb	r2, [r3, #0]
    ae14:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ae18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae1c:	781b      	ldrb	r3, [r3, #0]
    ae1e:	4413      	add	r3, r2
    ae20:	b2da      	uxtb	r2, r3
    ae22:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ae26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae2a:	701a      	strb	r2, [r3, #0]
    ae2c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae34:	781b      	ldrb	r3, [r3, #0]
    ae36:	3301      	adds	r3, #1
    ae38:	b2da      	uxtb	r2, r3
    ae3a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae42:	701a      	strb	r2, [r3, #0]
    ae44:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae4c:	781b      	ldrb	r3, [r3, #0]
    ae4e:	2bff      	cmp	r3, #255	; 0xff
    ae50:	d105      	bne.n	ae5e <send_bat+0x302>
    ae52:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae5a:	2200      	movs	r2, #0
    ae5c:	701a      	strb	r2, [r3, #0]
    ae5e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae66:	781b      	ldrb	r3, [r3, #0]
    ae68:	461a      	mov	r2, r3
    ae6a:	f24c 3305 	movw	r3, #49925	; 0xc305
    ae6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae72:	7819      	ldrb	r1, [r3, #0]
    ae74:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ae78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae7c:	5499      	strb	r1, [r3, r2]
    ae7e:	f24c 3305 	movw	r3, #49925	; 0xc305
    ae82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae86:	781a      	ldrb	r2, [r3, #0]
    ae88:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ae8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae90:	781b      	ldrb	r3, [r3, #0]
    ae92:	4413      	add	r3, r2
    ae94:	b2da      	uxtb	r2, r3
    ae96:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ae9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae9e:	701a      	strb	r2, [r3, #0]
    aea0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    aea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aea8:	781a      	ldrb	r2, [r3, #0]
    aeaa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    aeae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeb2:	781b      	ldrb	r3, [r3, #0]
    aeb4:	4413      	add	r3, r2
    aeb6:	b2da      	uxtb	r2, r3
    aeb8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    aebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aec0:	701a      	strb	r2, [r3, #0]
    aec2:	f24c 3319 	movw	r3, #49945	; 0xc319
    aec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeca:	781b      	ldrb	r3, [r3, #0]
    aecc:	3301      	adds	r3, #1
    aece:	b2da      	uxtb	r2, r3
    aed0:	f24c 3319 	movw	r3, #49945	; 0xc319
    aed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aed8:	701a      	strb	r2, [r3, #0]
    aeda:	f24c 3319 	movw	r3, #49945	; 0xc319
    aede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aee2:	781b      	ldrb	r3, [r3, #0]
    aee4:	2bff      	cmp	r3, #255	; 0xff
    aee6:	d105      	bne.n	aef4 <send_bat+0x398>
    aee8:	f24c 3319 	movw	r3, #49945	; 0xc319
    aeec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aef0:	2200      	movs	r2, #0
    aef2:	701a      	strb	r2, [r3, #0]
    aef4:	f24c 3319 	movw	r3, #49945	; 0xc319
    aef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aefc:	781b      	ldrb	r3, [r3, #0]
    aefe:	461a      	mov	r2, r3
    af00:	f24c 6386 	movw	r3, #50822	; 0xc686
    af04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af08:	7819      	ldrb	r1, [r3, #0]
    af0a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    af0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af12:	5499      	strb	r1, [r3, r2]
    af14:	f24c 6386 	movw	r3, #50822	; 0xc686
    af18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af1c:	781a      	ldrb	r2, [r3, #0]
    af1e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    af22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af26:	781b      	ldrb	r3, [r3, #0]
    af28:	4413      	add	r3, r2
    af2a:	b2da      	uxtb	r2, r3
    af2c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    af30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af34:	701a      	strb	r2, [r3, #0]
    af36:	f24c 431e 	movw	r3, #50206	; 0xc41e
    af3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af3e:	781a      	ldrb	r2, [r3, #0]
    af40:	f24c 431d 	movw	r3, #50205	; 0xc41d
    af44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af48:	781b      	ldrb	r3, [r3, #0]
    af4a:	4413      	add	r3, r2
    af4c:	b2da      	uxtb	r2, r3
    af4e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    af52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af56:	701a      	strb	r2, [r3, #0]
    af58:	f24c 3319 	movw	r3, #49945	; 0xc319
    af5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af60:	781b      	ldrb	r3, [r3, #0]
    af62:	3301      	adds	r3, #1
    af64:	b2da      	uxtb	r2, r3
    af66:	f24c 3319 	movw	r3, #49945	; 0xc319
    af6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af6e:	701a      	strb	r2, [r3, #0]
    af70:	f24c 3319 	movw	r3, #49945	; 0xc319
    af74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af78:	781b      	ldrb	r3, [r3, #0]
    af7a:	2bff      	cmp	r3, #255	; 0xff
    af7c:	d105      	bne.n	af8a <send_bat+0x42e>
    af7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    af82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af86:	2200      	movs	r2, #0
    af88:	701a      	strb	r2, [r3, #0]
    af8a:	f24c 3319 	movw	r3, #49945	; 0xc319
    af8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af92:	781b      	ldrb	r3, [r3, #0]
    af94:	461a      	mov	r2, r3
    af96:	f24c 6386 	movw	r3, #50822	; 0xc686
    af9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af9e:	7859      	ldrb	r1, [r3, #1]
    afa0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    afa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afa8:	5499      	strb	r1, [r3, r2]
    afaa:	4b67      	ldr	r3, [pc, #412]	; (b148 <send_bat+0x5ec>)
    afac:	781a      	ldrb	r2, [r3, #0]
    afae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    afb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afb6:	781b      	ldrb	r3, [r3, #0]
    afb8:	4413      	add	r3, r2
    afba:	b2da      	uxtb	r2, r3
    afbc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    afc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afc4:	701a      	strb	r2, [r3, #0]
    afc6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    afca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afce:	781a      	ldrb	r2, [r3, #0]
    afd0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    afd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afd8:	781b      	ldrb	r3, [r3, #0]
    afda:	4413      	add	r3, r2
    afdc:	b2da      	uxtb	r2, r3
    afde:	f24c 431e 	movw	r3, #50206	; 0xc41e
    afe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afe6:	701a      	strb	r2, [r3, #0]
    afe8:	f24c 3319 	movw	r3, #49945	; 0xc319
    afec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aff0:	781b      	ldrb	r3, [r3, #0]
    aff2:	3301      	adds	r3, #1
    aff4:	b2da      	uxtb	r2, r3
    aff6:	f24c 3319 	movw	r3, #49945	; 0xc319
    affa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    affe:	701a      	strb	r2, [r3, #0]
    b000:	f24c 3319 	movw	r3, #49945	; 0xc319
    b004:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b008:	781b      	ldrb	r3, [r3, #0]
    b00a:	2bff      	cmp	r3, #255	; 0xff
    b00c:	d105      	bne.n	b01a <send_bat+0x4be>
    b00e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b016:	2200      	movs	r2, #0
    b018:	701a      	strb	r2, [r3, #0]
    b01a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b01e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b022:	781b      	ldrb	r3, [r3, #0]
    b024:	461a      	mov	r2, r3
    b026:	f24c 6384 	movw	r3, #50820	; 0xc684
    b02a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b02e:	7819      	ldrb	r1, [r3, #0]
    b030:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b038:	5499      	strb	r1, [r3, r2]
    b03a:	f24c 6384 	movw	r3, #50820	; 0xc684
    b03e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b042:	781a      	ldrb	r2, [r3, #0]
    b044:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b04c:	781b      	ldrb	r3, [r3, #0]
    b04e:	4413      	add	r3, r2
    b050:	b2da      	uxtb	r2, r3
    b052:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b05a:	701a      	strb	r2, [r3, #0]
    b05c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b064:	781a      	ldrb	r2, [r3, #0]
    b066:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b06a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b06e:	781b      	ldrb	r3, [r3, #0]
    b070:	4413      	add	r3, r2
    b072:	b2da      	uxtb	r2, r3
    b074:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b07c:	701a      	strb	r2, [r3, #0]
    b07e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b086:	781b      	ldrb	r3, [r3, #0]
    b088:	3301      	adds	r3, #1
    b08a:	b2da      	uxtb	r2, r3
    b08c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b090:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b094:	701a      	strb	r2, [r3, #0]
    b096:	f24c 3319 	movw	r3, #49945	; 0xc319
    b09a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b09e:	781b      	ldrb	r3, [r3, #0]
    b0a0:	2bff      	cmp	r3, #255	; 0xff
    b0a2:	d105      	bne.n	b0b0 <send_bat+0x554>
    b0a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    b0a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ac:	2200      	movs	r2, #0
    b0ae:	701a      	strb	r2, [r3, #0]
    b0b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b0b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0b8:	781b      	ldrb	r3, [r3, #0]
    b0ba:	461a      	mov	r2, r3
    b0bc:	f24c 6384 	movw	r3, #50820	; 0xc684
    b0c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0c4:	7859      	ldrb	r1, [r3, #1]
    b0c6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b0ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ce:	5499      	strb	r1, [r3, r2]
    b0d0:	4b1e      	ldr	r3, [pc, #120]	; (b14c <send_bat+0x5f0>)
    b0d2:	781a      	ldrb	r2, [r3, #0]
    b0d4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b0d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0dc:	781b      	ldrb	r3, [r3, #0]
    b0de:	4413      	add	r3, r2
    b0e0:	b2da      	uxtb	r2, r3
    b0e2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b0e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ea:	701a      	strb	r2, [r3, #0]
    b0ec:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0f4:	781a      	ldrb	r2, [r3, #0]
    b0f6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b0fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0fe:	781b      	ldrb	r3, [r3, #0]
    b100:	4413      	add	r3, r2
    b102:	b2da      	uxtb	r2, r3
    b104:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b10c:	701a      	strb	r2, [r3, #0]
    b10e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b116:	781b      	ldrb	r3, [r3, #0]
    b118:	3301      	adds	r3, #1
    b11a:	b2da      	uxtb	r2, r3
    b11c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b124:	701a      	strb	r2, [r3, #0]
    b126:	f24c 3319 	movw	r3, #49945	; 0xc319
    b12a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b12e:	781b      	ldrb	r3, [r3, #0]
    b130:	2bff      	cmp	r3, #255	; 0xff
    b132:	d10d      	bne.n	b150 <send_bat+0x5f4>
    b134:	f24c 3319 	movw	r3, #49945	; 0xc319
    b138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b13c:	2200      	movs	r2, #0
    b13e:	701a      	strb	r2, [r3, #0]
    b140:	e006      	b.n	b150 <send_bat+0x5f4>
    b142:	bf00      	nop
    b144:	2004c8fd 	.word	0x2004c8fd
    b148:	2004c687 	.word	0x2004c687
    b14c:	2004c685 	.word	0x2004c685
    b150:	f24c 3319 	movw	r3, #49945	; 0xc319
    b154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b158:	781b      	ldrb	r3, [r3, #0]
    b15a:	461a      	mov	r2, r3
    b15c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b164:	7819      	ldrb	r1, [r3, #0]
    b166:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b16a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b16e:	5499      	strb	r1, [r3, r2]
    b170:	f24c 3319 	movw	r3, #49945	; 0xc319
    b174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b178:	781b      	ldrb	r3, [r3, #0]
    b17a:	3301      	adds	r3, #1
    b17c:	b2da      	uxtb	r2, r3
    b17e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b186:	701a      	strb	r2, [r3, #0]
    b188:	f24c 3319 	movw	r3, #49945	; 0xc319
    b18c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b190:	781b      	ldrb	r3, [r3, #0]
    b192:	2bff      	cmp	r3, #255	; 0xff
    b194:	d105      	bne.n	b1a2 <send_bat+0x646>
    b196:	f24c 3319 	movw	r3, #49945	; 0xc319
    b19a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b19e:	2200      	movs	r2, #0
    b1a0:	701a      	strb	r2, [r3, #0]
    b1a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b1a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1aa:	781b      	ldrb	r3, [r3, #0]
    b1ac:	461a      	mov	r2, r3
    b1ae:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b1b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1b6:	7819      	ldrb	r1, [r3, #0]
    b1b8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1c0:	5499      	strb	r1, [r3, r2]
    b1c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b1c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1ca:	781b      	ldrb	r3, [r3, #0]
    b1cc:	3301      	adds	r3, #1
    b1ce:	b2da      	uxtb	r2, r3
    b1d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b1d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1d8:	701a      	strb	r2, [r3, #0]
    b1da:	f24c 3319 	movw	r3, #49945	; 0xc319
    b1de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1e2:	781b      	ldrb	r3, [r3, #0]
    b1e4:	2bff      	cmp	r3, #255	; 0xff
    b1e6:	d105      	bne.n	b1f4 <send_bat+0x698>
    b1e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b1ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1f0:	2200      	movs	r2, #0
    b1f2:	701a      	strb	r2, [r3, #0]
    b1f4:	f242 0339 	movw	r3, #8249	; 0x2039
    b1f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1fc:	781b      	ldrb	r3, [r3, #0]
    b1fe:	b2db      	uxtb	r3, r3
    b200:	f003 0310 	and.w	r3, r3, #16
    b204:	2b00      	cmp	r3, #0
    b206:	d15a      	bne.n	b2be <send_bat+0x762>
    b208:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b20c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b210:	781b      	ldrb	r3, [r3, #0]
    b212:	b2db      	uxtb	r3, r3
    b214:	461a      	mov	r2, r3
    b216:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b21a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b21e:	5c9a      	ldrb	r2, [r3, r2]
    b220:	f24c 431b 	movw	r3, #50203	; 0xc41b
    b224:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b228:	701a      	strb	r2, [r3, #0]
    b22a:	f24c 431c 	movw	r3, #50204	; 0xc41c
    b22e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b232:	2200      	movs	r2, #0
    b234:	701a      	strb	r2, [r3, #0]
    b236:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b23e:	781b      	ldrb	r3, [r3, #0]
    b240:	b2db      	uxtb	r3, r3
    b242:	3301      	adds	r3, #1
    b244:	b2da      	uxtb	r2, r3
    b246:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b24a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b24e:	701a      	strb	r2, [r3, #0]
    b250:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b258:	781b      	ldrb	r3, [r3, #0]
    b25a:	b2db      	uxtb	r3, r3
    b25c:	2bff      	cmp	r3, #255	; 0xff
    b25e:	d105      	bne.n	b26c <send_bat+0x710>
    b260:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b268:	2200      	movs	r2, #0
    b26a:	701a      	strb	r2, [r3, #0]
    b26c:	f242 0338 	movw	r3, #8248	; 0x2038
    b270:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b274:	f242 0238 	movw	r2, #8248	; 0x2038
    b278:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b27c:	7812      	ldrb	r2, [r2, #0]
    b27e:	b2d2      	uxtb	r2, r2
    b280:	f042 0201 	orr.w	r2, r2, #1
    b284:	b2d2      	uxtb	r2, r2
    b286:	701a      	strb	r2, [r3, #0]
    b288:	f242 0339 	movw	r3, #8249	; 0x2039
    b28c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b290:	f242 0239 	movw	r2, #8249	; 0x2039
    b294:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b298:	7812      	ldrb	r2, [r2, #0]
    b29a:	b2d2      	uxtb	r2, r2
    b29c:	f042 0210 	orr.w	r2, r2, #16
    b2a0:	b2d2      	uxtb	r2, r2
    b2a2:	701a      	strb	r2, [r3, #0]
    b2a4:	e00b      	b.n	b2be <send_bat+0x762>
    b2a6:	f24c 3318 	movw	r3, #49944	; 0xc318
    b2aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2ae:	781b      	ldrb	r3, [r3, #0]
    b2b0:	3301      	adds	r3, #1
    b2b2:	b2da      	uxtb	r2, r3
    b2b4:	f24c 3318 	movw	r3, #49944	; 0xc318
    b2b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2bc:	701a      	strb	r2, [r3, #0]
}
    b2be:	46bd      	mov	sp, r7
    b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2c4:	4770      	bx	lr
    b2c6:	bf00      	nop

0000b2c8 <send_climb>:
void send_climb(void){  //2000ms
    b2c8:	b480      	push	{r7}
    b2ca:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    b2cc:	f24c 3311 	movw	r3, #49937	; 0xc311
    b2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2d4:	781a      	ldrb	r2, [r3, #0]
    b2d6:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    b2da:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    b2de:	fba3 1302 	umull	r1, r3, r3, r2
    b2e2:	0919      	lsrs	r1, r3, #4
    b2e4:	460b      	mov	r3, r1
    b2e6:	009b      	lsls	r3, r3, #2
    b2e8:	440b      	add	r3, r1
    b2ea:	009b      	lsls	r3, r3, #2
    b2ec:	1ad3      	subs	r3, r2, r3
    b2ee:	b2db      	uxtb	r3, r3
    b2f0:	2b12      	cmp	r3, #18
    b2f2:	f040 8554 	bne.w	bd9e <send_climb+0xad6>
    b2f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    b2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2fe:	781a      	ldrb	r2, [r3, #0]
    b300:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b308:	781b      	ldrb	r3, [r3, #0]
    b30a:	b2db      	uxtb	r3, r3
    b30c:	429a      	cmp	r2, r3
    b30e:	d313      	bcc.n	b338 <send_climb+0x70>
    b310:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b318:	781b      	ldrb	r3, [r3, #0]
    b31a:	b2db      	uxtb	r3, r3
    b31c:	461a      	mov	r2, r3
    b31e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b326:	781b      	ldrb	r3, [r3, #0]
    b328:	1ad3      	subs	r3, r2, r3
    b32a:	33ff      	adds	r3, #255	; 0xff
    b32c:	2b12      	cmp	r3, #18
    b32e:	bfd4      	ite	le
    b330:	2300      	movle	r3, #0
    b332:	2301      	movgt	r3, #1
    b334:	b2db      	uxtb	r3, r3
    b336:	e011      	b.n	b35c <send_climb+0x94>
    b338:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b33c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b340:	781b      	ldrb	r3, [r3, #0]
    b342:	b2db      	uxtb	r3, r3
    b344:	461a      	mov	r2, r3
    b346:	f24c 3319 	movw	r3, #49945	; 0xc319
    b34a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b34e:	781b      	ldrb	r3, [r3, #0]
    b350:	1ad3      	subs	r3, r2, r3
    b352:	2b12      	cmp	r3, #18
    b354:	bfd4      	ite	le
    b356:	2300      	movle	r3, #0
    b358:	2301      	movgt	r3, #1
    b35a:	b2db      	uxtb	r3, r3
    b35c:	2b00      	cmp	r3, #0
    b35e:	f000 8512 	beq.w	bd86 <send_climb+0xabe>
    b362:	f24c 3319 	movw	r3, #49945	; 0xc319
    b366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b36a:	781b      	ldrb	r3, [r3, #0]
    b36c:	461a      	mov	r2, r3
    b36e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b376:	2105      	movs	r1, #5
    b378:	5499      	strb	r1, [r3, r2]
    b37a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b37e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b382:	781b      	ldrb	r3, [r3, #0]
    b384:	3301      	adds	r3, #1
    b386:	b2da      	uxtb	r2, r3
    b388:	f24c 3319 	movw	r3, #49945	; 0xc319
    b38c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b390:	701a      	strb	r2, [r3, #0]
    b392:	f24c 3319 	movw	r3, #49945	; 0xc319
    b396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b39a:	781b      	ldrb	r3, [r3, #0]
    b39c:	2bff      	cmp	r3, #255	; 0xff
    b39e:	d105      	bne.n	b3ac <send_climb+0xe4>
    b3a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3a8:	2200      	movs	r2, #0
    b3aa:	701a      	strb	r2, [r3, #0]
    b3ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3b4:	781b      	ldrb	r3, [r3, #0]
    b3b6:	461a      	mov	r2, r3
    b3b8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b3bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3c0:	210e      	movs	r1, #14
    b3c2:	5499      	strb	r1, [r3, r2]
    b3c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3cc:	781b      	ldrb	r3, [r3, #0]
    b3ce:	3301      	adds	r3, #1
    b3d0:	b2da      	uxtb	r2, r3
    b3d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3da:	701a      	strb	r2, [r3, #0]
    b3dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3e4:	781b      	ldrb	r3, [r3, #0]
    b3e6:	2bff      	cmp	r3, #255	; 0xff
    b3e8:	d105      	bne.n	b3f6 <send_climb+0x12e>
    b3ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3f2:	2200      	movs	r2, #0
    b3f4:	701a      	strb	r2, [r3, #0]
    b3f6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b3fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3fe:	220e      	movs	r2, #14
    b400:	701a      	strb	r2, [r3, #0]
    b402:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b406:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b40a:	220e      	movs	r2, #14
    b40c:	701a      	strb	r2, [r3, #0]
    b40e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b416:	781b      	ldrb	r3, [r3, #0]
    b418:	461a      	mov	r2, r3
    b41a:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b41e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b422:	7819      	ldrb	r1, [r3, #0]
    b424:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b42c:	5499      	strb	r1, [r3, r2]
    b42e:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b436:	781a      	ldrb	r2, [r3, #0]
    b438:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b43c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b440:	781b      	ldrb	r3, [r3, #0]
    b442:	4413      	add	r3, r2
    b444:	b2da      	uxtb	r2, r3
    b446:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b44a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b44e:	701a      	strb	r2, [r3, #0]
    b450:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b458:	781a      	ldrb	r2, [r3, #0]
    b45a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b45e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b462:	781b      	ldrb	r3, [r3, #0]
    b464:	4413      	add	r3, r2
    b466:	b2da      	uxtb	r2, r3
    b468:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b46c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b470:	701a      	strb	r2, [r3, #0]
    b472:	f24c 3319 	movw	r3, #49945	; 0xc319
    b476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b47a:	781b      	ldrb	r3, [r3, #0]
    b47c:	3301      	adds	r3, #1
    b47e:	b2da      	uxtb	r2, r3
    b480:	f24c 3319 	movw	r3, #49945	; 0xc319
    b484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b488:	701a      	strb	r2, [r3, #0]
    b48a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b48e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b492:	781b      	ldrb	r3, [r3, #0]
    b494:	2bff      	cmp	r3, #255	; 0xff
    b496:	d105      	bne.n	b4a4 <send_climb+0x1dc>
    b498:	f24c 3319 	movw	r3, #49945	; 0xc319
    b49c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4a0:	2200      	movs	r2, #0
    b4a2:	701a      	strb	r2, [r3, #0]
    b4a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    b4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ac:	781b      	ldrb	r3, [r3, #0]
    b4ae:	461a      	mov	r2, r3
    b4b0:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b4b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4b8:	7859      	ldrb	r1, [r3, #1]
    b4ba:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b4be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4c2:	5499      	strb	r1, [r3, r2]
    b4c4:	4bd3      	ldr	r3, [pc, #844]	; (b814 <send_climb+0x54c>)
    b4c6:	781a      	ldrb	r2, [r3, #0]
    b4c8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b4cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4d0:	781b      	ldrb	r3, [r3, #0]
    b4d2:	4413      	add	r3, r2
    b4d4:	b2da      	uxtb	r2, r3
    b4d6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4de:	701a      	strb	r2, [r3, #0]
    b4e0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b4e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4e8:	781a      	ldrb	r2, [r3, #0]
    b4ea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b4ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4f2:	781b      	ldrb	r3, [r3, #0]
    b4f4:	4413      	add	r3, r2
    b4f6:	b2da      	uxtb	r2, r3
    b4f8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b4fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b500:	701a      	strb	r2, [r3, #0]
    b502:	f24c 3319 	movw	r3, #49945	; 0xc319
    b506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b50a:	781b      	ldrb	r3, [r3, #0]
    b50c:	3301      	adds	r3, #1
    b50e:	b2da      	uxtb	r2, r3
    b510:	f24c 3319 	movw	r3, #49945	; 0xc319
    b514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b518:	701a      	strb	r2, [r3, #0]
    b51a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b51e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b522:	781b      	ldrb	r3, [r3, #0]
    b524:	2bff      	cmp	r3, #255	; 0xff
    b526:	d105      	bne.n	b534 <send_climb+0x26c>
    b528:	f24c 3319 	movw	r3, #49945	; 0xc319
    b52c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b530:	2200      	movs	r2, #0
    b532:	701a      	strb	r2, [r3, #0]
    b534:	f24c 3319 	movw	r3, #49945	; 0xc319
    b538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b53c:	781b      	ldrb	r3, [r3, #0]
    b53e:	461a      	mov	r2, r3
    b540:	f24c 6360 	movw	r3, #50784	; 0xc660
    b544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b548:	7819      	ldrb	r1, [r3, #0]
    b54a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b54e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b552:	5499      	strb	r1, [r3, r2]
    b554:	f24c 6360 	movw	r3, #50784	; 0xc660
    b558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b55c:	781a      	ldrb	r2, [r3, #0]
    b55e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b566:	781b      	ldrb	r3, [r3, #0]
    b568:	4413      	add	r3, r2
    b56a:	b2da      	uxtb	r2, r3
    b56c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b574:	701a      	strb	r2, [r3, #0]
    b576:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b57a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b57e:	781a      	ldrb	r2, [r3, #0]
    b580:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b588:	781b      	ldrb	r3, [r3, #0]
    b58a:	4413      	add	r3, r2
    b58c:	b2da      	uxtb	r2, r3
    b58e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b596:	701a      	strb	r2, [r3, #0]
    b598:	f24c 3319 	movw	r3, #49945	; 0xc319
    b59c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5a0:	781b      	ldrb	r3, [r3, #0]
    b5a2:	3301      	adds	r3, #1
    b5a4:	b2da      	uxtb	r2, r3
    b5a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    b5aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ae:	701a      	strb	r2, [r3, #0]
    b5b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b5b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5b8:	781b      	ldrb	r3, [r3, #0]
    b5ba:	2bff      	cmp	r3, #255	; 0xff
    b5bc:	d105      	bne.n	b5ca <send_climb+0x302>
    b5be:	f24c 3319 	movw	r3, #49945	; 0xc319
    b5c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5c6:	2200      	movs	r2, #0
    b5c8:	701a      	strb	r2, [r3, #0]
    b5ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    b5ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5d2:	781b      	ldrb	r3, [r3, #0]
    b5d4:	461a      	mov	r2, r3
    b5d6:	f24c 6360 	movw	r3, #50784	; 0xc660
    b5da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5de:	7859      	ldrb	r1, [r3, #1]
    b5e0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b5e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5e8:	5499      	strb	r1, [r3, r2]
    b5ea:	4b8b      	ldr	r3, [pc, #556]	; (b818 <send_climb+0x550>)
    b5ec:	781a      	ldrb	r2, [r3, #0]
    b5ee:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b5f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5f6:	781b      	ldrb	r3, [r3, #0]
    b5f8:	4413      	add	r3, r2
    b5fa:	b2da      	uxtb	r2, r3
    b5fc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b604:	701a      	strb	r2, [r3, #0]
    b606:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b60a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b60e:	781a      	ldrb	r2, [r3, #0]
    b610:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b618:	781b      	ldrb	r3, [r3, #0]
    b61a:	4413      	add	r3, r2
    b61c:	b2da      	uxtb	r2, r3
    b61e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b626:	701a      	strb	r2, [r3, #0]
    b628:	f24c 3319 	movw	r3, #49945	; 0xc319
    b62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b630:	781b      	ldrb	r3, [r3, #0]
    b632:	3301      	adds	r3, #1
    b634:	b2da      	uxtb	r2, r3
    b636:	f24c 3319 	movw	r3, #49945	; 0xc319
    b63a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b63e:	701a      	strb	r2, [r3, #0]
    b640:	f24c 3319 	movw	r3, #49945	; 0xc319
    b644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b648:	781b      	ldrb	r3, [r3, #0]
    b64a:	2bff      	cmp	r3, #255	; 0xff
    b64c:	d105      	bne.n	b65a <send_climb+0x392>
    b64e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b656:	2200      	movs	r2, #0
    b658:	701a      	strb	r2, [r3, #0]
    b65a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b65e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b662:	781b      	ldrb	r3, [r3, #0]
    b664:	461a      	mov	r2, r3
    b666:	f24c 6360 	movw	r3, #50784	; 0xc660
    b66a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b66e:	7899      	ldrb	r1, [r3, #2]
    b670:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b678:	5499      	strb	r1, [r3, r2]
    b67a:	4b68      	ldr	r3, [pc, #416]	; (b81c <send_climb+0x554>)
    b67c:	781a      	ldrb	r2, [r3, #0]
    b67e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b686:	781b      	ldrb	r3, [r3, #0]
    b688:	4413      	add	r3, r2
    b68a:	b2da      	uxtb	r2, r3
    b68c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b690:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b694:	701a      	strb	r2, [r3, #0]
    b696:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b69a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b69e:	781a      	ldrb	r2, [r3, #0]
    b6a0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b6a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6a8:	781b      	ldrb	r3, [r3, #0]
    b6aa:	4413      	add	r3, r2
    b6ac:	b2da      	uxtb	r2, r3
    b6ae:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b6b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6b6:	701a      	strb	r2, [r3, #0]
    b6b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b6bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6c0:	781b      	ldrb	r3, [r3, #0]
    b6c2:	3301      	adds	r3, #1
    b6c4:	b2da      	uxtb	r2, r3
    b6c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    b6ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6ce:	701a      	strb	r2, [r3, #0]
    b6d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b6d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6d8:	781b      	ldrb	r3, [r3, #0]
    b6da:	2bff      	cmp	r3, #255	; 0xff
    b6dc:	d105      	bne.n	b6ea <send_climb+0x422>
    b6de:	f24c 3319 	movw	r3, #49945	; 0xc319
    b6e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6e6:	2200      	movs	r2, #0
    b6e8:	701a      	strb	r2, [r3, #0]
    b6ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    b6ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6f2:	781b      	ldrb	r3, [r3, #0]
    b6f4:	461a      	mov	r2, r3
    b6f6:	f24c 6360 	movw	r3, #50784	; 0xc660
    b6fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6fe:	78d9      	ldrb	r1, [r3, #3]
    b700:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b708:	5499      	strb	r1, [r3, r2]
    b70a:	4b45      	ldr	r3, [pc, #276]	; (b820 <send_climb+0x558>)
    b70c:	781a      	ldrb	r2, [r3, #0]
    b70e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b716:	781b      	ldrb	r3, [r3, #0]
    b718:	4413      	add	r3, r2
    b71a:	b2da      	uxtb	r2, r3
    b71c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b724:	701a      	strb	r2, [r3, #0]
    b726:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b72a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b72e:	781a      	ldrb	r2, [r3, #0]
    b730:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b738:	781b      	ldrb	r3, [r3, #0]
    b73a:	4413      	add	r3, r2
    b73c:	b2da      	uxtb	r2, r3
    b73e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b746:	701a      	strb	r2, [r3, #0]
    b748:	f24c 3319 	movw	r3, #49945	; 0xc319
    b74c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b750:	781b      	ldrb	r3, [r3, #0]
    b752:	3301      	adds	r3, #1
    b754:	b2da      	uxtb	r2, r3
    b756:	f24c 3319 	movw	r3, #49945	; 0xc319
    b75a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b75e:	701a      	strb	r2, [r3, #0]
    b760:	f24c 3319 	movw	r3, #49945	; 0xc319
    b764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b768:	781b      	ldrb	r3, [r3, #0]
    b76a:	2bff      	cmp	r3, #255	; 0xff
    b76c:	d105      	bne.n	b77a <send_climb+0x4b2>
    b76e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b776:	2200      	movs	r2, #0
    b778:	701a      	strb	r2, [r3, #0]
    b77a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b77e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b782:	781b      	ldrb	r3, [r3, #0]
    b784:	461a      	mov	r2, r3
    b786:	f24c 6368 	movw	r3, #50792	; 0xc668
    b78a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b78e:	7819      	ldrb	r1, [r3, #0]
    b790:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b798:	5499      	strb	r1, [r3, r2]
    b79a:	f24c 6368 	movw	r3, #50792	; 0xc668
    b79e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7a2:	781a      	ldrb	r2, [r3, #0]
    b7a4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b7a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ac:	781b      	ldrb	r3, [r3, #0]
    b7ae:	4413      	add	r3, r2
    b7b0:	b2da      	uxtb	r2, r3
    b7b2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b7b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ba:	701a      	strb	r2, [r3, #0]
    b7bc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b7c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7c4:	781a      	ldrb	r2, [r3, #0]
    b7c6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b7ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ce:	781b      	ldrb	r3, [r3, #0]
    b7d0:	4413      	add	r3, r2
    b7d2:	b2da      	uxtb	r2, r3
    b7d4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b7d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7dc:	701a      	strb	r2, [r3, #0]
    b7de:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7e6:	781b      	ldrb	r3, [r3, #0]
    b7e8:	3301      	adds	r3, #1
    b7ea:	b2da      	uxtb	r2, r3
    b7ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7f4:	701a      	strb	r2, [r3, #0]
    b7f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7fe:	781b      	ldrb	r3, [r3, #0]
    b800:	2bff      	cmp	r3, #255	; 0xff
    b802:	d10f      	bne.n	b824 <send_climb+0x55c>
    b804:	f24c 3319 	movw	r3, #49945	; 0xc319
    b808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b80c:	2200      	movs	r2, #0
    b80e:	701a      	strb	r2, [r3, #0]
    b810:	e008      	b.n	b824 <send_climb+0x55c>
    b812:	bf00      	nop
    b814:	2004c64d 	.word	0x2004c64d
    b818:	2004c661 	.word	0x2004c661
    b81c:	2004c662 	.word	0x2004c662
    b820:	2004c663 	.word	0x2004c663
    b824:	f24c 3319 	movw	r3, #49945	; 0xc319
    b828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b82c:	781b      	ldrb	r3, [r3, #0]
    b82e:	461a      	mov	r2, r3
    b830:	f24c 6368 	movw	r3, #50792	; 0xc668
    b834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b838:	7859      	ldrb	r1, [r3, #1]
    b83a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b83e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b842:	5499      	strb	r1, [r3, r2]
    b844:	4bd1      	ldr	r3, [pc, #836]	; (bb8c <send_climb+0x8c4>)
    b846:	781a      	ldrb	r2, [r3, #0]
    b848:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b84c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b850:	781b      	ldrb	r3, [r3, #0]
    b852:	4413      	add	r3, r2
    b854:	b2da      	uxtb	r2, r3
    b856:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b85a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b85e:	701a      	strb	r2, [r3, #0]
    b860:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b868:	781a      	ldrb	r2, [r3, #0]
    b86a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b86e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b872:	781b      	ldrb	r3, [r3, #0]
    b874:	4413      	add	r3, r2
    b876:	b2da      	uxtb	r2, r3
    b878:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b87c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b880:	701a      	strb	r2, [r3, #0]
    b882:	f24c 3319 	movw	r3, #49945	; 0xc319
    b886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b88a:	781b      	ldrb	r3, [r3, #0]
    b88c:	3301      	adds	r3, #1
    b88e:	b2da      	uxtb	r2, r3
    b890:	f24c 3319 	movw	r3, #49945	; 0xc319
    b894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b898:	701a      	strb	r2, [r3, #0]
    b89a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b89e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8a2:	781b      	ldrb	r3, [r3, #0]
    b8a4:	2bff      	cmp	r3, #255	; 0xff
    b8a6:	d105      	bne.n	b8b4 <send_climb+0x5ec>
    b8a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b8ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8b0:	2200      	movs	r2, #0
    b8b2:	701a      	strb	r2, [r3, #0]
    b8b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    b8b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8bc:	781b      	ldrb	r3, [r3, #0]
    b8be:	461a      	mov	r2, r3
    b8c0:	f24c 6368 	movw	r3, #50792	; 0xc668
    b8c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8c8:	7899      	ldrb	r1, [r3, #2]
    b8ca:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b8ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8d2:	5499      	strb	r1, [r3, r2]
    b8d4:	4bae      	ldr	r3, [pc, #696]	; (bb90 <send_climb+0x8c8>)
    b8d6:	781a      	ldrb	r2, [r3, #0]
    b8d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b8dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8e0:	781b      	ldrb	r3, [r3, #0]
    b8e2:	4413      	add	r3, r2
    b8e4:	b2da      	uxtb	r2, r3
    b8e6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b8ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8ee:	701a      	strb	r2, [r3, #0]
    b8f0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b8f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8f8:	781a      	ldrb	r2, [r3, #0]
    b8fa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b8fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b902:	781b      	ldrb	r3, [r3, #0]
    b904:	4413      	add	r3, r2
    b906:	b2da      	uxtb	r2, r3
    b908:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b90c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b910:	701a      	strb	r2, [r3, #0]
    b912:	f24c 3319 	movw	r3, #49945	; 0xc319
    b916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b91a:	781b      	ldrb	r3, [r3, #0]
    b91c:	3301      	adds	r3, #1
    b91e:	b2da      	uxtb	r2, r3
    b920:	f24c 3319 	movw	r3, #49945	; 0xc319
    b924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b928:	701a      	strb	r2, [r3, #0]
    b92a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b92e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b932:	781b      	ldrb	r3, [r3, #0]
    b934:	2bff      	cmp	r3, #255	; 0xff
    b936:	d105      	bne.n	b944 <send_climb+0x67c>
    b938:	f24c 3319 	movw	r3, #49945	; 0xc319
    b93c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b940:	2200      	movs	r2, #0
    b942:	701a      	strb	r2, [r3, #0]
    b944:	f24c 3319 	movw	r3, #49945	; 0xc319
    b948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b94c:	781b      	ldrb	r3, [r3, #0]
    b94e:	461a      	mov	r2, r3
    b950:	f24c 6368 	movw	r3, #50792	; 0xc668
    b954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b958:	78d9      	ldrb	r1, [r3, #3]
    b95a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b95e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b962:	5499      	strb	r1, [r3, r2]
    b964:	4b8b      	ldr	r3, [pc, #556]	; (bb94 <send_climb+0x8cc>)
    b966:	781a      	ldrb	r2, [r3, #0]
    b968:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b970:	781b      	ldrb	r3, [r3, #0]
    b972:	4413      	add	r3, r2
    b974:	b2da      	uxtb	r2, r3
    b976:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b97a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b97e:	701a      	strb	r2, [r3, #0]
    b980:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b988:	781a      	ldrb	r2, [r3, #0]
    b98a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b98e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b992:	781b      	ldrb	r3, [r3, #0]
    b994:	4413      	add	r3, r2
    b996:	b2da      	uxtb	r2, r3
    b998:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b99c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9a0:	701a      	strb	r2, [r3, #0]
    b9a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b9a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9aa:	781b      	ldrb	r3, [r3, #0]
    b9ac:	3301      	adds	r3, #1
    b9ae:	b2da      	uxtb	r2, r3
    b9b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b9b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9b8:	701a      	strb	r2, [r3, #0]
    b9ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    b9be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9c2:	781b      	ldrb	r3, [r3, #0]
    b9c4:	2bff      	cmp	r3, #255	; 0xff
    b9c6:	d105      	bne.n	b9d4 <send_climb+0x70c>
    b9c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b9cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9d0:	2200      	movs	r2, #0
    b9d2:	701a      	strb	r2, [r3, #0]
    b9d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    b9d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9dc:	781b      	ldrb	r3, [r3, #0]
    b9de:	461a      	mov	r2, r3
    b9e0:	f648 13dc 	movw	r3, #35292	; 0x89dc
    b9e4:	f2c0 0301 	movt	r3, #1
    b9e8:	7819      	ldrb	r1, [r3, #0]
    b9ea:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b9ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9f2:	5499      	strb	r1, [r3, r2]
    b9f4:	f648 13dc 	movw	r3, #35292	; 0x89dc
    b9f8:	f2c0 0301 	movt	r3, #1
    b9fc:	781a      	ldrb	r2, [r3, #0]
    b9fe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ba02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba06:	781b      	ldrb	r3, [r3, #0]
    ba08:	4413      	add	r3, r2
    ba0a:	b2da      	uxtb	r2, r3
    ba0c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ba10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba14:	701a      	strb	r2, [r3, #0]
    ba16:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ba1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba1e:	781a      	ldrb	r2, [r3, #0]
    ba20:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ba24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba28:	781b      	ldrb	r3, [r3, #0]
    ba2a:	4413      	add	r3, r2
    ba2c:	b2da      	uxtb	r2, r3
    ba2e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ba32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba36:	701a      	strb	r2, [r3, #0]
    ba38:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba40:	781b      	ldrb	r3, [r3, #0]
    ba42:	3301      	adds	r3, #1
    ba44:	b2da      	uxtb	r2, r3
    ba46:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba4e:	701a      	strb	r2, [r3, #0]
    ba50:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba58:	781b      	ldrb	r3, [r3, #0]
    ba5a:	2bff      	cmp	r3, #255	; 0xff
    ba5c:	d105      	bne.n	ba6a <send_climb+0x7a2>
    ba5e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba66:	2200      	movs	r2, #0
    ba68:	701a      	strb	r2, [r3, #0]
    ba6a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba72:	781b      	ldrb	r3, [r3, #0]
    ba74:	461a      	mov	r2, r3
    ba76:	f648 13dc 	movw	r3, #35292	; 0x89dc
    ba7a:	f2c0 0301 	movt	r3, #1
    ba7e:	7859      	ldrb	r1, [r3, #1]
    ba80:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ba84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba88:	5499      	strb	r1, [r3, r2]
    ba8a:	4b43      	ldr	r3, [pc, #268]	; (bb98 <send_climb+0x8d0>)
    ba8c:	781a      	ldrb	r2, [r3, #0]
    ba8e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ba92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba96:	781b      	ldrb	r3, [r3, #0]
    ba98:	4413      	add	r3, r2
    ba9a:	b2da      	uxtb	r2, r3
    ba9c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    baa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baa4:	701a      	strb	r2, [r3, #0]
    baa6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    baaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baae:	781a      	ldrb	r2, [r3, #0]
    bab0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bab8:	781b      	ldrb	r3, [r3, #0]
    baba:	4413      	add	r3, r2
    babc:	b2da      	uxtb	r2, r3
    babe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bac6:	701a      	strb	r2, [r3, #0]
    bac8:	f24c 3319 	movw	r3, #49945	; 0xc319
    bacc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bad0:	781b      	ldrb	r3, [r3, #0]
    bad2:	3301      	adds	r3, #1
    bad4:	b2da      	uxtb	r2, r3
    bad6:	f24c 3319 	movw	r3, #49945	; 0xc319
    bada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bade:	701a      	strb	r2, [r3, #0]
    bae0:	f24c 3319 	movw	r3, #49945	; 0xc319
    bae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bae8:	781b      	ldrb	r3, [r3, #0]
    baea:	2bff      	cmp	r3, #255	; 0xff
    baec:	d105      	bne.n	bafa <send_climb+0x832>
    baee:	f24c 3319 	movw	r3, #49945	; 0xc319
    baf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baf6:	2200      	movs	r2, #0
    baf8:	701a      	strb	r2, [r3, #0]
    bafa:	f24c 3319 	movw	r3, #49945	; 0xc319
    bafe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb02:	781b      	ldrb	r3, [r3, #0]
    bb04:	461a      	mov	r2, r3
    bb06:	f648 13dc 	movw	r3, #35292	; 0x89dc
    bb0a:	f2c0 0301 	movt	r3, #1
    bb0e:	7899      	ldrb	r1, [r3, #2]
    bb10:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bb14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb18:	5499      	strb	r1, [r3, r2]
    bb1a:	4b20      	ldr	r3, [pc, #128]	; (bb9c <send_climb+0x8d4>)
    bb1c:	781a      	ldrb	r2, [r3, #0]
    bb1e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bb22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb26:	781b      	ldrb	r3, [r3, #0]
    bb28:	4413      	add	r3, r2
    bb2a:	b2da      	uxtb	r2, r3
    bb2c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bb30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb34:	701a      	strb	r2, [r3, #0]
    bb36:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bb3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb3e:	781a      	ldrb	r2, [r3, #0]
    bb40:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bb44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb48:	781b      	ldrb	r3, [r3, #0]
    bb4a:	4413      	add	r3, r2
    bb4c:	b2da      	uxtb	r2, r3
    bb4e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bb52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb56:	701a      	strb	r2, [r3, #0]
    bb58:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb60:	781b      	ldrb	r3, [r3, #0]
    bb62:	3301      	adds	r3, #1
    bb64:	b2da      	uxtb	r2, r3
    bb66:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb6e:	701a      	strb	r2, [r3, #0]
    bb70:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb78:	781b      	ldrb	r3, [r3, #0]
    bb7a:	2bff      	cmp	r3, #255	; 0xff
    bb7c:	d110      	bne.n	bba0 <send_climb+0x8d8>
    bb7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb86:	2200      	movs	r2, #0
    bb88:	701a      	strb	r2, [r3, #0]
    bb8a:	e009      	b.n	bba0 <send_climb+0x8d8>
    bb8c:	2004c669 	.word	0x2004c669
    bb90:	2004c66a 	.word	0x2004c66a
    bb94:	2004c66b 	.word	0x2004c66b
    bb98:	000189dd 	.word	0x000189dd
    bb9c:	000189de 	.word	0x000189de
    bba0:	f24c 3319 	movw	r3, #49945	; 0xc319
    bba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bba8:	781b      	ldrb	r3, [r3, #0]
    bbaa:	461a      	mov	r2, r3
    bbac:	f648 13dc 	movw	r3, #35292	; 0x89dc
    bbb0:	f2c0 0301 	movt	r3, #1
    bbb4:	78d9      	ldrb	r1, [r3, #3]
    bbb6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bbba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbbe:	5499      	strb	r1, [r3, r2]
    bbc0:	4b79      	ldr	r3, [pc, #484]	; (bda8 <send_climb+0xae0>)
    bbc2:	781a      	ldrb	r2, [r3, #0]
    bbc4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bbc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbcc:	781b      	ldrb	r3, [r3, #0]
    bbce:	4413      	add	r3, r2
    bbd0:	b2da      	uxtb	r2, r3
    bbd2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bbd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbda:	701a      	strb	r2, [r3, #0]
    bbdc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bbe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbe4:	781a      	ldrb	r2, [r3, #0]
    bbe6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bbea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbee:	781b      	ldrb	r3, [r3, #0]
    bbf0:	4413      	add	r3, r2
    bbf2:	b2da      	uxtb	r2, r3
    bbf4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bbf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbfc:	701a      	strb	r2, [r3, #0]
    bbfe:	f24c 3319 	movw	r3, #49945	; 0xc319
    bc02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc06:	781b      	ldrb	r3, [r3, #0]
    bc08:	3301      	adds	r3, #1
    bc0a:	b2da      	uxtb	r2, r3
    bc0c:	f24c 3319 	movw	r3, #49945	; 0xc319
    bc10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc14:	701a      	strb	r2, [r3, #0]
    bc16:	f24c 3319 	movw	r3, #49945	; 0xc319
    bc1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc1e:	781b      	ldrb	r3, [r3, #0]
    bc20:	2bff      	cmp	r3, #255	; 0xff
    bc22:	d105      	bne.n	bc30 <send_climb+0x968>
    bc24:	f24c 3319 	movw	r3, #49945	; 0xc319
    bc28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc2c:	2200      	movs	r2, #0
    bc2e:	701a      	strb	r2, [r3, #0]
    bc30:	f24c 3319 	movw	r3, #49945	; 0xc319
    bc34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc38:	781b      	ldrb	r3, [r3, #0]
    bc3a:	461a      	mov	r2, r3
    bc3c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bc40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc44:	7819      	ldrb	r1, [r3, #0]
    bc46:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bc4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc4e:	5499      	strb	r1, [r3, r2]
    bc50:	f24c 3319 	movw	r3, #49945	; 0xc319
    bc54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc58:	781b      	ldrb	r3, [r3, #0]
    bc5a:	3301      	adds	r3, #1
    bc5c:	b2da      	uxtb	r2, r3
    bc5e:	f24c 3319 	movw	r3, #49945	; 0xc319
    bc62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc66:	701a      	strb	r2, [r3, #0]
    bc68:	f24c 3319 	movw	r3, #49945	; 0xc319
    bc6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc70:	781b      	ldrb	r3, [r3, #0]
    bc72:	2bff      	cmp	r3, #255	; 0xff
    bc74:	d105      	bne.n	bc82 <send_climb+0x9ba>
    bc76:	f24c 3319 	movw	r3, #49945	; 0xc319
    bc7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc7e:	2200      	movs	r2, #0
    bc80:	701a      	strb	r2, [r3, #0]
    bc82:	f24c 3319 	movw	r3, #49945	; 0xc319
    bc86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc8a:	781b      	ldrb	r3, [r3, #0]
    bc8c:	461a      	mov	r2, r3
    bc8e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bc92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc96:	7819      	ldrb	r1, [r3, #0]
    bc98:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bc9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bca0:	5499      	strb	r1, [r3, r2]
    bca2:	f24c 3319 	movw	r3, #49945	; 0xc319
    bca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcaa:	781b      	ldrb	r3, [r3, #0]
    bcac:	3301      	adds	r3, #1
    bcae:	b2da      	uxtb	r2, r3
    bcb0:	f24c 3319 	movw	r3, #49945	; 0xc319
    bcb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcb8:	701a      	strb	r2, [r3, #0]
    bcba:	f24c 3319 	movw	r3, #49945	; 0xc319
    bcbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcc2:	781b      	ldrb	r3, [r3, #0]
    bcc4:	2bff      	cmp	r3, #255	; 0xff
    bcc6:	d105      	bne.n	bcd4 <send_climb+0xa0c>
    bcc8:	f24c 3319 	movw	r3, #49945	; 0xc319
    bccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcd0:	2200      	movs	r2, #0
    bcd2:	701a      	strb	r2, [r3, #0]
    bcd4:	f242 0339 	movw	r3, #8249	; 0x2039
    bcd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcdc:	781b      	ldrb	r3, [r3, #0]
    bcde:	b2db      	uxtb	r3, r3
    bce0:	f003 0310 	and.w	r3, r3, #16
    bce4:	2b00      	cmp	r3, #0
    bce6:	d15a      	bne.n	bd9e <send_climb+0xad6>
    bce8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bcec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcf0:	781b      	ldrb	r3, [r3, #0]
    bcf2:	b2db      	uxtb	r3, r3
    bcf4:	461a      	mov	r2, r3
    bcf6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bcfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcfe:	5c9a      	ldrb	r2, [r3, r2]
    bd00:	f24c 431b 	movw	r3, #50203	; 0xc41b
    bd04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd08:	701a      	strb	r2, [r3, #0]
    bd0a:	f24c 431c 	movw	r3, #50204	; 0xc41c
    bd0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd12:	2200      	movs	r2, #0
    bd14:	701a      	strb	r2, [r3, #0]
    bd16:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bd1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd1e:	781b      	ldrb	r3, [r3, #0]
    bd20:	b2db      	uxtb	r3, r3
    bd22:	3301      	adds	r3, #1
    bd24:	b2da      	uxtb	r2, r3
    bd26:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bd2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd2e:	701a      	strb	r2, [r3, #0]
    bd30:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bd34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd38:	781b      	ldrb	r3, [r3, #0]
    bd3a:	b2db      	uxtb	r3, r3
    bd3c:	2bff      	cmp	r3, #255	; 0xff
    bd3e:	d105      	bne.n	bd4c <send_climb+0xa84>
    bd40:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bd44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd48:	2200      	movs	r2, #0
    bd4a:	701a      	strb	r2, [r3, #0]
    bd4c:	f242 0338 	movw	r3, #8248	; 0x2038
    bd50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd54:	f242 0238 	movw	r2, #8248	; 0x2038
    bd58:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bd5c:	7812      	ldrb	r2, [r2, #0]
    bd5e:	b2d2      	uxtb	r2, r2
    bd60:	f042 0201 	orr.w	r2, r2, #1
    bd64:	b2d2      	uxtb	r2, r2
    bd66:	701a      	strb	r2, [r3, #0]
    bd68:	f242 0339 	movw	r3, #8249	; 0x2039
    bd6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd70:	f242 0239 	movw	r2, #8249	; 0x2039
    bd74:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bd78:	7812      	ldrb	r2, [r2, #0]
    bd7a:	b2d2      	uxtb	r2, r2
    bd7c:	f042 0210 	orr.w	r2, r2, #16
    bd80:	b2d2      	uxtb	r2, r2
    bd82:	701a      	strb	r2, [r3, #0]
    bd84:	e00b      	b.n	bd9e <send_climb+0xad6>
    bd86:	f24c 3318 	movw	r3, #49944	; 0xc318
    bd8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd8e:	781b      	ldrb	r3, [r3, #0]
    bd90:	3301      	adds	r3, #1
    bd92:	b2da      	uxtb	r2, r3
    bd94:	f24c 3318 	movw	r3, #49944	; 0xc318
    bd98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd9c:	701a      	strb	r2, [r3, #0]
}
    bd9e:	46bd      	mov	sp, r7
    bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
    bda4:	4770      	bx	lr
    bda6:	bf00      	nop
    bda8:	000189df 	.word	0x000189df

0000bdac <send_mode>:
void send_mode(void){  //5000ms
    bdac:	b480      	push	{r7}
    bdae:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    bdb0:	f24c 3311 	movw	r3, #49937	; 0xc311
    bdb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdb8:	781a      	ldrb	r2, [r3, #0]
    bdba:	f248 531f 	movw	r3, #34079	; 0x851f
    bdbe:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    bdc2:	fba3 1302 	umull	r1, r3, r3, r2
    bdc6:	091b      	lsrs	r3, r3, #4
    bdc8:	2132      	movs	r1, #50	; 0x32
    bdca:	fb01 f303 	mul.w	r3, r1, r3
    bdce:	1ad3      	subs	r3, r2, r3
    bdd0:	b2db      	uxtb	r3, r3
    bdd2:	2b09      	cmp	r3, #9
    bdd4:	f040 82ba 	bne.w	c34c <send_mode+0x5a0>
    bdd8:	f24c 3319 	movw	r3, #49945	; 0xc319
    bddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bde0:	781a      	ldrb	r2, [r3, #0]
    bde2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bde6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdea:	781b      	ldrb	r3, [r3, #0]
    bdec:	b2db      	uxtb	r3, r3
    bdee:	429a      	cmp	r2, r3
    bdf0:	d313      	bcc.n	be1a <send_mode+0x6e>
    bdf2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bdf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdfa:	781b      	ldrb	r3, [r3, #0]
    bdfc:	b2db      	uxtb	r3, r3
    bdfe:	461a      	mov	r2, r3
    be00:	f24c 3319 	movw	r3, #49945	; 0xc319
    be04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be08:	781b      	ldrb	r3, [r3, #0]
    be0a:	1ad3      	subs	r3, r2, r3
    be0c:	33ff      	adds	r3, #255	; 0xff
    be0e:	2b09      	cmp	r3, #9
    be10:	bfd4      	ite	le
    be12:	2300      	movle	r3, #0
    be14:	2301      	movgt	r3, #1
    be16:	b2db      	uxtb	r3, r3
    be18:	e011      	b.n	be3e <send_mode+0x92>
    be1a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    be1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be22:	781b      	ldrb	r3, [r3, #0]
    be24:	b2db      	uxtb	r3, r3
    be26:	461a      	mov	r2, r3
    be28:	f24c 3319 	movw	r3, #49945	; 0xc319
    be2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be30:	781b      	ldrb	r3, [r3, #0]
    be32:	1ad3      	subs	r3, r2, r3
    be34:	2b09      	cmp	r3, #9
    be36:	bfd4      	ite	le
    be38:	2300      	movle	r3, #0
    be3a:	2301      	movgt	r3, #1
    be3c:	b2db      	uxtb	r3, r3
    be3e:	2b00      	cmp	r3, #0
    be40:	f000 8278 	beq.w	c334 <send_mode+0x588>
    be44:	f24c 3319 	movw	r3, #49945	; 0xc319
    be48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be4c:	781b      	ldrb	r3, [r3, #0]
    be4e:	461a      	mov	r2, r3
    be50:	f24c 331c 	movw	r3, #49948	; 0xc31c
    be54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be58:	2105      	movs	r1, #5
    be5a:	5499      	strb	r1, [r3, r2]
    be5c:	f24c 3319 	movw	r3, #49945	; 0xc319
    be60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be64:	781b      	ldrb	r3, [r3, #0]
    be66:	3301      	adds	r3, #1
    be68:	b2da      	uxtb	r2, r3
    be6a:	f24c 3319 	movw	r3, #49945	; 0xc319
    be6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be72:	701a      	strb	r2, [r3, #0]
    be74:	f24c 3319 	movw	r3, #49945	; 0xc319
    be78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be7c:	781b      	ldrb	r3, [r3, #0]
    be7e:	2bff      	cmp	r3, #255	; 0xff
    be80:	d105      	bne.n	be8e <send_mode+0xe2>
    be82:	f24c 3319 	movw	r3, #49945	; 0xc319
    be86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be8a:	2200      	movs	r2, #0
    be8c:	701a      	strb	r2, [r3, #0]
    be8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    be92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be96:	781b      	ldrb	r3, [r3, #0]
    be98:	461a      	mov	r2, r3
    be9a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    be9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bea2:	210b      	movs	r1, #11
    bea4:	5499      	strb	r1, [r3, r2]
    bea6:	f24c 3319 	movw	r3, #49945	; 0xc319
    beaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beae:	781b      	ldrb	r3, [r3, #0]
    beb0:	3301      	adds	r3, #1
    beb2:	b2da      	uxtb	r2, r3
    beb4:	f24c 3319 	movw	r3, #49945	; 0xc319
    beb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bebc:	701a      	strb	r2, [r3, #0]
    bebe:	f24c 3319 	movw	r3, #49945	; 0xc319
    bec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bec6:	781b      	ldrb	r3, [r3, #0]
    bec8:	2bff      	cmp	r3, #255	; 0xff
    beca:	d105      	bne.n	bed8 <send_mode+0x12c>
    becc:	f24c 3319 	movw	r3, #49945	; 0xc319
    bed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bed4:	2200      	movs	r2, #0
    bed6:	701a      	strb	r2, [r3, #0]
    bed8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bedc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bee0:	220b      	movs	r2, #11
    bee2:	701a      	strb	r2, [r3, #0]
    bee4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beec:	220b      	movs	r2, #11
    beee:	701a      	strb	r2, [r3, #0]
    bef0:	f24c 3319 	movw	r3, #49945	; 0xc319
    bef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bef8:	781b      	ldrb	r3, [r3, #0]
    befa:	461a      	mov	r2, r3
    befc:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    bf00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf04:	7819      	ldrb	r1, [r3, #0]
    bf06:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bf0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf0e:	5499      	strb	r1, [r3, r2]
    bf10:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bf14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf18:	781a      	ldrb	r2, [r3, #0]
    bf1a:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    bf1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf22:	781b      	ldrb	r3, [r3, #0]
    bf24:	4413      	add	r3, r2
    bf26:	b2da      	uxtb	r2, r3
    bf28:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bf2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf30:	701a      	strb	r2, [r3, #0]
    bf32:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bf36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf3a:	781a      	ldrb	r2, [r3, #0]
    bf3c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bf40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf44:	781b      	ldrb	r3, [r3, #0]
    bf46:	4413      	add	r3, r2
    bf48:	b2da      	uxtb	r2, r3
    bf4a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bf4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf52:	701a      	strb	r2, [r3, #0]
    bf54:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf5c:	781b      	ldrb	r3, [r3, #0]
    bf5e:	3301      	adds	r3, #1
    bf60:	b2da      	uxtb	r2, r3
    bf62:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf6a:	701a      	strb	r2, [r3, #0]
    bf6c:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf74:	781b      	ldrb	r3, [r3, #0]
    bf76:	2bff      	cmp	r3, #255	; 0xff
    bf78:	d105      	bne.n	bf86 <send_mode+0x1da>
    bf7a:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf82:	2200      	movs	r2, #0
    bf84:	701a      	strb	r2, [r3, #0]
    bf86:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf8e:	781b      	ldrb	r3, [r3, #0]
    bf90:	461a      	mov	r2, r3
    bf92:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    bf96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf9a:	7819      	ldrb	r1, [r3, #0]
    bf9c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bfa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfa4:	5499      	strb	r1, [r3, r2]
    bfa6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bfaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfae:	781a      	ldrb	r2, [r3, #0]
    bfb0:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    bfb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfb8:	781b      	ldrb	r3, [r3, #0]
    bfba:	4413      	add	r3, r2
    bfbc:	b2da      	uxtb	r2, r3
    bfbe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bfc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfc6:	701a      	strb	r2, [r3, #0]
    bfc8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bfcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfd0:	781a      	ldrb	r2, [r3, #0]
    bfd2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bfd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfda:	781b      	ldrb	r3, [r3, #0]
    bfdc:	4413      	add	r3, r2
    bfde:	b2da      	uxtb	r2, r3
    bfe0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bfe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfe8:	701a      	strb	r2, [r3, #0]
    bfea:	f24c 3319 	movw	r3, #49945	; 0xc319
    bfee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bff2:	781b      	ldrb	r3, [r3, #0]
    bff4:	3301      	adds	r3, #1
    bff6:	b2da      	uxtb	r2, r3
    bff8:	f24c 3319 	movw	r3, #49945	; 0xc319
    bffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c000:	701a      	strb	r2, [r3, #0]
    c002:	f24c 3319 	movw	r3, #49945	; 0xc319
    c006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c00a:	781b      	ldrb	r3, [r3, #0]
    c00c:	2bff      	cmp	r3, #255	; 0xff
    c00e:	d105      	bne.n	c01c <send_mode+0x270>
    c010:	f24c 3319 	movw	r3, #49945	; 0xc319
    c014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c018:	2200      	movs	r2, #0
    c01a:	701a      	strb	r2, [r3, #0]
    c01c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c024:	781b      	ldrb	r3, [r3, #0]
    c026:	461a      	mov	r2, r3
    c028:	f64c 132c 	movw	r3, #51500	; 0xc92c
    c02c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c030:	7819      	ldrb	r1, [r3, #0]
    c032:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c03a:	5499      	strb	r1, [r3, r2]
    c03c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c044:	781a      	ldrb	r2, [r3, #0]
    c046:	f64c 132c 	movw	r3, #51500	; 0xc92c
    c04a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c04e:	781b      	ldrb	r3, [r3, #0]
    c050:	4413      	add	r3, r2
    c052:	b2da      	uxtb	r2, r3
    c054:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c05c:	701a      	strb	r2, [r3, #0]
    c05e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c066:	781a      	ldrb	r2, [r3, #0]
    c068:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c06c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c070:	781b      	ldrb	r3, [r3, #0]
    c072:	4413      	add	r3, r2
    c074:	b2da      	uxtb	r2, r3
    c076:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c07a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c07e:	701a      	strb	r2, [r3, #0]
    c080:	f24c 3319 	movw	r3, #49945	; 0xc319
    c084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c088:	781b      	ldrb	r3, [r3, #0]
    c08a:	3301      	adds	r3, #1
    c08c:	b2da      	uxtb	r2, r3
    c08e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c096:	701a      	strb	r2, [r3, #0]
    c098:	f24c 3319 	movw	r3, #49945	; 0xc319
    c09c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0a0:	781b      	ldrb	r3, [r3, #0]
    c0a2:	2bff      	cmp	r3, #255	; 0xff
    c0a4:	d105      	bne.n	c0b2 <send_mode+0x306>
    c0a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    c0aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0ae:	2200      	movs	r2, #0
    c0b0:	701a      	strb	r2, [r3, #0]
    c0b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    c0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0ba:	781b      	ldrb	r3, [r3, #0]
    c0bc:	461a      	mov	r2, r3
    c0be:	f24c 3303 	movw	r3, #49923	; 0xc303
    c0c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0c6:	7819      	ldrb	r1, [r3, #0]
    c0c8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c0cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0d0:	5499      	strb	r1, [r3, r2]
    c0d2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0da:	781a      	ldrb	r2, [r3, #0]
    c0dc:	f24c 3303 	movw	r3, #49923	; 0xc303
    c0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0e4:	781b      	ldrb	r3, [r3, #0]
    c0e6:	4413      	add	r3, r2
    c0e8:	b2da      	uxtb	r2, r3
    c0ea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c0ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0f2:	701a      	strb	r2, [r3, #0]
    c0f4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c0f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0fc:	781a      	ldrb	r2, [r3, #0]
    c0fe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c106:	781b      	ldrb	r3, [r3, #0]
    c108:	4413      	add	r3, r2
    c10a:	b2da      	uxtb	r2, r3
    c10c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c114:	701a      	strb	r2, [r3, #0]
    c116:	f24c 3319 	movw	r3, #49945	; 0xc319
    c11a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c11e:	781b      	ldrb	r3, [r3, #0]
    c120:	3301      	adds	r3, #1
    c122:	b2da      	uxtb	r2, r3
    c124:	f24c 3319 	movw	r3, #49945	; 0xc319
    c128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c12c:	701a      	strb	r2, [r3, #0]
    c12e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c136:	781b      	ldrb	r3, [r3, #0]
    c138:	2bff      	cmp	r3, #255	; 0xff
    c13a:	d105      	bne.n	c148 <send_mode+0x39c>
    c13c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c144:	2200      	movs	r2, #0
    c146:	701a      	strb	r2, [r3, #0]
    c148:	f24c 3319 	movw	r3, #49945	; 0xc319
    c14c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c150:	781b      	ldrb	r3, [r3, #0]
    c152:	461a      	mov	r2, r3
    c154:	f240 533c 	movw	r3, #1340	; 0x53c
    c158:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c15c:	7819      	ldrb	r1, [r3, #0]
    c15e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c162:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c166:	5499      	strb	r1, [r3, r2]
    c168:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c16c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c170:	781a      	ldrb	r2, [r3, #0]
    c172:	f240 533c 	movw	r3, #1340	; 0x53c
    c176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c17a:	781b      	ldrb	r3, [r3, #0]
    c17c:	4413      	add	r3, r2
    c17e:	b2da      	uxtb	r2, r3
    c180:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c188:	701a      	strb	r2, [r3, #0]
    c18a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c18e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c192:	781a      	ldrb	r2, [r3, #0]
    c194:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c19c:	781b      	ldrb	r3, [r3, #0]
    c19e:	4413      	add	r3, r2
    c1a0:	b2da      	uxtb	r2, r3
    c1a2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c1a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1aa:	701a      	strb	r2, [r3, #0]
    c1ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    c1b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1b4:	781b      	ldrb	r3, [r3, #0]
    c1b6:	3301      	adds	r3, #1
    c1b8:	b2da      	uxtb	r2, r3
    c1ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    c1be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1c2:	701a      	strb	r2, [r3, #0]
    c1c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c1c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1cc:	781b      	ldrb	r3, [r3, #0]
    c1ce:	2bff      	cmp	r3, #255	; 0xff
    c1d0:	d105      	bne.n	c1de <send_mode+0x432>
    c1d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    c1d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1da:	2200      	movs	r2, #0
    c1dc:	701a      	strb	r2, [r3, #0]
    c1de:	f24c 3319 	movw	r3, #49945	; 0xc319
    c1e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1e6:	781b      	ldrb	r3, [r3, #0]
    c1e8:	461a      	mov	r2, r3
    c1ea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c1ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1f2:	7819      	ldrb	r1, [r3, #0]
    c1f4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c1f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1fc:	5499      	strb	r1, [r3, r2]
    c1fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    c202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c206:	781b      	ldrb	r3, [r3, #0]
    c208:	3301      	adds	r3, #1
    c20a:	b2da      	uxtb	r2, r3
    c20c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c214:	701a      	strb	r2, [r3, #0]
    c216:	f24c 3319 	movw	r3, #49945	; 0xc319
    c21a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c21e:	781b      	ldrb	r3, [r3, #0]
    c220:	2bff      	cmp	r3, #255	; 0xff
    c222:	d105      	bne.n	c230 <send_mode+0x484>
    c224:	f24c 3319 	movw	r3, #49945	; 0xc319
    c228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c22c:	2200      	movs	r2, #0
    c22e:	701a      	strb	r2, [r3, #0]
    c230:	f24c 3319 	movw	r3, #49945	; 0xc319
    c234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c238:	781b      	ldrb	r3, [r3, #0]
    c23a:	461a      	mov	r2, r3
    c23c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c244:	7819      	ldrb	r1, [r3, #0]
    c246:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c24a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c24e:	5499      	strb	r1, [r3, r2]
    c250:	f24c 3319 	movw	r3, #49945	; 0xc319
    c254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c258:	781b      	ldrb	r3, [r3, #0]
    c25a:	3301      	adds	r3, #1
    c25c:	b2da      	uxtb	r2, r3
    c25e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c266:	701a      	strb	r2, [r3, #0]
    c268:	f24c 3319 	movw	r3, #49945	; 0xc319
    c26c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c270:	781b      	ldrb	r3, [r3, #0]
    c272:	2bff      	cmp	r3, #255	; 0xff
    c274:	d105      	bne.n	c282 <send_mode+0x4d6>
    c276:	f24c 3319 	movw	r3, #49945	; 0xc319
    c27a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c27e:	2200      	movs	r2, #0
    c280:	701a      	strb	r2, [r3, #0]
    c282:	f242 0339 	movw	r3, #8249	; 0x2039
    c286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c28a:	781b      	ldrb	r3, [r3, #0]
    c28c:	b2db      	uxtb	r3, r3
    c28e:	f003 0310 	and.w	r3, r3, #16
    c292:	2b00      	cmp	r3, #0
    c294:	d15a      	bne.n	c34c <send_mode+0x5a0>
    c296:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c29e:	781b      	ldrb	r3, [r3, #0]
    c2a0:	b2db      	uxtb	r3, r3
    c2a2:	461a      	mov	r2, r3
    c2a4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c2a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ac:	5c9a      	ldrb	r2, [r3, r2]
    c2ae:	f24c 431b 	movw	r3, #50203	; 0xc41b
    c2b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2b6:	701a      	strb	r2, [r3, #0]
    c2b8:	f24c 431c 	movw	r3, #50204	; 0xc41c
    c2bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2c0:	2200      	movs	r2, #0
    c2c2:	701a      	strb	r2, [r3, #0]
    c2c4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c2c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2cc:	781b      	ldrb	r3, [r3, #0]
    c2ce:	b2db      	uxtb	r3, r3
    c2d0:	3301      	adds	r3, #1
    c2d2:	b2da      	uxtb	r2, r3
    c2d4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c2d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2dc:	701a      	strb	r2, [r3, #0]
    c2de:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2e6:	781b      	ldrb	r3, [r3, #0]
    c2e8:	b2db      	uxtb	r3, r3
    c2ea:	2bff      	cmp	r3, #255	; 0xff
    c2ec:	d105      	bne.n	c2fa <send_mode+0x54e>
    c2ee:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c2f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2f6:	2200      	movs	r2, #0
    c2f8:	701a      	strb	r2, [r3, #0]
    c2fa:	f242 0338 	movw	r3, #8248	; 0x2038
    c2fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c302:	f242 0238 	movw	r2, #8248	; 0x2038
    c306:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c30a:	7812      	ldrb	r2, [r2, #0]
    c30c:	b2d2      	uxtb	r2, r2
    c30e:	f042 0201 	orr.w	r2, r2, #1
    c312:	b2d2      	uxtb	r2, r2
    c314:	701a      	strb	r2, [r3, #0]
    c316:	f242 0339 	movw	r3, #8249	; 0x2039
    c31a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c31e:	f242 0239 	movw	r2, #8249	; 0x2039
    c322:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c326:	7812      	ldrb	r2, [r2, #0]
    c328:	b2d2      	uxtb	r2, r2
    c32a:	f042 0210 	orr.w	r2, r2, #16
    c32e:	b2d2      	uxtb	r2, r2
    c330:	701a      	strb	r2, [r3, #0]
    c332:	e00b      	b.n	c34c <send_mode+0x5a0>
    c334:	f24c 3318 	movw	r3, #49944	; 0xc318
    c338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c33c:	781b      	ldrb	r3, [r3, #0]
    c33e:	3301      	adds	r3, #1
    c340:	b2da      	uxtb	r2, r3
    c342:	f24c 3318 	movw	r3, #49944	; 0xc318
    c346:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c34a:	701a      	strb	r2, [r3, #0]
}
    c34c:	46bd      	mov	sp, r7
    c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c352:	4770      	bx	lr

0000c354 <send_debug>:
void send_debug(void){  //5000ms
    c354:	b480      	push	{r7}
    c356:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    c358:	f24c 3311 	movw	r3, #49937	; 0xc311
    c35c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c360:	781a      	ldrb	r2, [r3, #0]
    c362:	f248 531f 	movw	r3, #34079	; 0x851f
    c366:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c36a:	fba3 1302 	umull	r1, r3, r3, r2
    c36e:	091b      	lsrs	r3, r3, #4
    c370:	2132      	movs	r1, #50	; 0x32
    c372:	fb01 f303 	mul.w	r3, r1, r3
    c376:	1ad3      	subs	r3, r2, r3
    c378:	b2db      	uxtb	r3, r3
    c37a:	2b1d      	cmp	r3, #29
    c37c:	f040 82bb 	bne.w	c8f6 <send_debug+0x5a2>
    c380:	f24c 3319 	movw	r3, #49945	; 0xc319
    c384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c388:	781a      	ldrb	r2, [r3, #0]
    c38a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c38e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c392:	781b      	ldrb	r3, [r3, #0]
    c394:	b2db      	uxtb	r3, r3
    c396:	429a      	cmp	r2, r3
    c398:	d313      	bcc.n	c3c2 <send_debug+0x6e>
    c39a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c39e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3a2:	781b      	ldrb	r3, [r3, #0]
    c3a4:	b2db      	uxtb	r3, r3
    c3a6:	461a      	mov	r2, r3
    c3a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c3ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3b0:	781b      	ldrb	r3, [r3, #0]
    c3b2:	1ad3      	subs	r3, r2, r3
    c3b4:	33ff      	adds	r3, #255	; 0xff
    c3b6:	2b09      	cmp	r3, #9
    c3b8:	bfd4      	ite	le
    c3ba:	2300      	movle	r3, #0
    c3bc:	2301      	movgt	r3, #1
    c3be:	b2db      	uxtb	r3, r3
    c3c0:	e011      	b.n	c3e6 <send_debug+0x92>
    c3c2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c3c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3ca:	781b      	ldrb	r3, [r3, #0]
    c3cc:	b2db      	uxtb	r3, r3
    c3ce:	461a      	mov	r2, r3
    c3d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c3d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3d8:	781b      	ldrb	r3, [r3, #0]
    c3da:	1ad3      	subs	r3, r2, r3
    c3dc:	2b09      	cmp	r3, #9
    c3de:	bfd4      	ite	le
    c3e0:	2300      	movle	r3, #0
    c3e2:	2301      	movgt	r3, #1
    c3e4:	b2db      	uxtb	r3, r3
    c3e6:	2b00      	cmp	r3, #0
    c3e8:	f000 8279 	beq.w	c8de <send_debug+0x58a>
    c3ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    c3f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3f4:	781b      	ldrb	r3, [r3, #0]
    c3f6:	461a      	mov	r2, r3
    c3f8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c3fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c400:	2105      	movs	r1, #5
    c402:	5499      	strb	r1, [r3, r2]
    c404:	f24c 3319 	movw	r3, #49945	; 0xc319
    c408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c40c:	781b      	ldrb	r3, [r3, #0]
    c40e:	3301      	adds	r3, #1
    c410:	b2da      	uxtb	r2, r3
    c412:	f24c 3319 	movw	r3, #49945	; 0xc319
    c416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c41a:	701a      	strb	r2, [r3, #0]
    c41c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c424:	781b      	ldrb	r3, [r3, #0]
    c426:	2bff      	cmp	r3, #255	; 0xff
    c428:	d105      	bne.n	c436 <send_debug+0xe2>
    c42a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c42e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c432:	2200      	movs	r2, #0
    c434:	701a      	strb	r2, [r3, #0]
    c436:	f24c 3319 	movw	r3, #49945	; 0xc319
    c43a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c43e:	781b      	ldrb	r3, [r3, #0]
    c440:	461a      	mov	r2, r3
    c442:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c44a:	210d      	movs	r1, #13
    c44c:	5499      	strb	r1, [r3, r2]
    c44e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c456:	781b      	ldrb	r3, [r3, #0]
    c458:	3301      	adds	r3, #1
    c45a:	b2da      	uxtb	r2, r3
    c45c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c464:	701a      	strb	r2, [r3, #0]
    c466:	f24c 3319 	movw	r3, #49945	; 0xc319
    c46a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c46e:	781b      	ldrb	r3, [r3, #0]
    c470:	2bff      	cmp	r3, #255	; 0xff
    c472:	d105      	bne.n	c480 <send_debug+0x12c>
    c474:	f24c 3319 	movw	r3, #49945	; 0xc319
    c478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c47c:	2200      	movs	r2, #0
    c47e:	701a      	strb	r2, [r3, #0]
    c480:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c488:	220d      	movs	r2, #13
    c48a:	701a      	strb	r2, [r3, #0]
    c48c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c494:	220d      	movs	r2, #13
    c496:	701a      	strb	r2, [r3, #0]
    c498:	f24c 3319 	movw	r3, #49945	; 0xc319
    c49c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4a0:	781b      	ldrb	r3, [r3, #0]
    c4a2:	461a      	mov	r2, r3
    c4a4:	f24c 434f 	movw	r3, #50255	; 0xc44f
    c4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ac:	781b      	ldrb	r3, [r3, #0]
    c4ae:	b2d9      	uxtb	r1, r3
    c4b0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c4b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4b8:	5499      	strb	r1, [r3, r2]
    c4ba:	f24c 434f 	movw	r3, #50255	; 0xc44f
    c4be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4c2:	781a      	ldrb	r2, [r3, #0]
    c4c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c4c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4cc:	781b      	ldrb	r3, [r3, #0]
    c4ce:	4413      	add	r3, r2
    c4d0:	b2da      	uxtb	r2, r3
    c4d2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c4d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4da:	701a      	strb	r2, [r3, #0]
    c4dc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c4e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4e4:	781a      	ldrb	r2, [r3, #0]
    c4e6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c4ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ee:	781b      	ldrb	r3, [r3, #0]
    c4f0:	4413      	add	r3, r2
    c4f2:	b2da      	uxtb	r2, r3
    c4f4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c4f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4fc:	701a      	strb	r2, [r3, #0]
    c4fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    c502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c506:	781b      	ldrb	r3, [r3, #0]
    c508:	3301      	adds	r3, #1
    c50a:	b2da      	uxtb	r2, r3
    c50c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c514:	701a      	strb	r2, [r3, #0]
    c516:	f24c 3319 	movw	r3, #49945	; 0xc319
    c51a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c51e:	781b      	ldrb	r3, [r3, #0]
    c520:	2bff      	cmp	r3, #255	; 0xff
    c522:	d105      	bne.n	c530 <send_debug+0x1dc>
    c524:	f24c 3319 	movw	r3, #49945	; 0xc319
    c528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c52c:	2200      	movs	r2, #0
    c52e:	701a      	strb	r2, [r3, #0]
    c530:	f24c 3319 	movw	r3, #49945	; 0xc319
    c534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c538:	781b      	ldrb	r3, [r3, #0]
    c53a:	461a      	mov	r2, r3
    c53c:	f24c 4350 	movw	r3, #50256	; 0xc450
    c540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c544:	7819      	ldrb	r1, [r3, #0]
    c546:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c54a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c54e:	5499      	strb	r1, [r3, r2]
    c550:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c558:	781a      	ldrb	r2, [r3, #0]
    c55a:	f24c 4350 	movw	r3, #50256	; 0xc450
    c55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c562:	781b      	ldrb	r3, [r3, #0]
    c564:	4413      	add	r3, r2
    c566:	b2da      	uxtb	r2, r3
    c568:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c56c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c570:	701a      	strb	r2, [r3, #0]
    c572:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c57a:	781a      	ldrb	r2, [r3, #0]
    c57c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c584:	781b      	ldrb	r3, [r3, #0]
    c586:	4413      	add	r3, r2
    c588:	b2da      	uxtb	r2, r3
    c58a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c58e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c592:	701a      	strb	r2, [r3, #0]
    c594:	f24c 3319 	movw	r3, #49945	; 0xc319
    c598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c59c:	781b      	ldrb	r3, [r3, #0]
    c59e:	3301      	adds	r3, #1
    c5a0:	b2da      	uxtb	r2, r3
    c5a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    c5a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5aa:	701a      	strb	r2, [r3, #0]
    c5ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    c5b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5b4:	781b      	ldrb	r3, [r3, #0]
    c5b6:	2bff      	cmp	r3, #255	; 0xff
    c5b8:	d105      	bne.n	c5c6 <send_debug+0x272>
    c5ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    c5be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5c2:	2200      	movs	r2, #0
    c5c4:	701a      	strb	r2, [r3, #0]
    c5c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    c5ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5ce:	781b      	ldrb	r3, [r3, #0]
    c5d0:	461a      	mov	r2, r3
    c5d2:	f24c 3318 	movw	r3, #49944	; 0xc318
    c5d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5da:	7819      	ldrb	r1, [r3, #0]
    c5dc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c5e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5e4:	5499      	strb	r1, [r3, r2]
    c5e6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5ee:	781a      	ldrb	r2, [r3, #0]
    c5f0:	f24c 3318 	movw	r3, #49944	; 0xc318
    c5f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5f8:	781b      	ldrb	r3, [r3, #0]
    c5fa:	4413      	add	r3, r2
    c5fc:	b2da      	uxtb	r2, r3
    c5fe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c606:	701a      	strb	r2, [r3, #0]
    c608:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c60c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c610:	781a      	ldrb	r2, [r3, #0]
    c612:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c616:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c61a:	781b      	ldrb	r3, [r3, #0]
    c61c:	4413      	add	r3, r2
    c61e:	b2da      	uxtb	r2, r3
    c620:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c628:	701a      	strb	r2, [r3, #0]
    c62a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c62e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c632:	781b      	ldrb	r3, [r3, #0]
    c634:	3301      	adds	r3, #1
    c636:	b2da      	uxtb	r2, r3
    c638:	f24c 3319 	movw	r3, #49945	; 0xc319
    c63c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c640:	701a      	strb	r2, [r3, #0]
    c642:	f24c 3319 	movw	r3, #49945	; 0xc319
    c646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c64a:	781b      	ldrb	r3, [r3, #0]
    c64c:	2bff      	cmp	r3, #255	; 0xff
    c64e:	d105      	bne.n	c65c <send_debug+0x308>
    c650:	f24c 3319 	movw	r3, #49945	; 0xc319
    c654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c658:	2200      	movs	r2, #0
    c65a:	701a      	strb	r2, [r3, #0]
    c65c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c664:	781b      	ldrb	r3, [r3, #0]
    c666:	461a      	mov	r2, r3
    c668:	f24c 53b7 	movw	r3, #50615	; 0xc5b7
    c66c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c670:	7819      	ldrb	r1, [r3, #0]
    c672:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c67a:	5499      	strb	r1, [r3, r2]
    c67c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c684:	781a      	ldrb	r2, [r3, #0]
    c686:	f24c 53b7 	movw	r3, #50615	; 0xc5b7
    c68a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c68e:	781b      	ldrb	r3, [r3, #0]
    c690:	4413      	add	r3, r2
    c692:	b2da      	uxtb	r2, r3
    c694:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c69c:	701a      	strb	r2, [r3, #0]
    c69e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6a6:	781a      	ldrb	r2, [r3, #0]
    c6a8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c6ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6b0:	781b      	ldrb	r3, [r3, #0]
    c6b2:	4413      	add	r3, r2
    c6b4:	b2da      	uxtb	r2, r3
    c6b6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c6ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6be:	701a      	strb	r2, [r3, #0]
    c6c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6c8:	781b      	ldrb	r3, [r3, #0]
    c6ca:	3301      	adds	r3, #1
    c6cc:	b2da      	uxtb	r2, r3
    c6ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6d6:	701a      	strb	r2, [r3, #0]
    c6d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6e0:	781b      	ldrb	r3, [r3, #0]
    c6e2:	2bff      	cmp	r3, #255	; 0xff
    c6e4:	d105      	bne.n	c6f2 <send_debug+0x39e>
    c6e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6ee:	2200      	movs	r2, #0
    c6f0:	701a      	strb	r2, [r3, #0]
    c6f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6fa:	781b      	ldrb	r3, [r3, #0]
    c6fc:	461a      	mov	r2, r3
    c6fe:	f24c 3304 	movw	r3, #49924	; 0xc304
    c702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c706:	7819      	ldrb	r1, [r3, #0]
    c708:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c70c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c710:	5499      	strb	r1, [r3, r2]
    c712:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c716:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c71a:	781a      	ldrb	r2, [r3, #0]
    c71c:	f24c 3304 	movw	r3, #49924	; 0xc304
    c720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c724:	781b      	ldrb	r3, [r3, #0]
    c726:	4413      	add	r3, r2
    c728:	b2da      	uxtb	r2, r3
    c72a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c72e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c732:	701a      	strb	r2, [r3, #0]
    c734:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c738:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c73c:	781a      	ldrb	r2, [r3, #0]
    c73e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c746:	781b      	ldrb	r3, [r3, #0]
    c748:	4413      	add	r3, r2
    c74a:	b2da      	uxtb	r2, r3
    c74c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c754:	701a      	strb	r2, [r3, #0]
    c756:	f24c 3319 	movw	r3, #49945	; 0xc319
    c75a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c75e:	781b      	ldrb	r3, [r3, #0]
    c760:	3301      	adds	r3, #1
    c762:	b2da      	uxtb	r2, r3
    c764:	f24c 3319 	movw	r3, #49945	; 0xc319
    c768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c76c:	701a      	strb	r2, [r3, #0]
    c76e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c776:	781b      	ldrb	r3, [r3, #0]
    c778:	2bff      	cmp	r3, #255	; 0xff
    c77a:	d105      	bne.n	c788 <send_debug+0x434>
    c77c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c784:	2200      	movs	r2, #0
    c786:	701a      	strb	r2, [r3, #0]
    c788:	f24c 3319 	movw	r3, #49945	; 0xc319
    c78c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c790:	781b      	ldrb	r3, [r3, #0]
    c792:	461a      	mov	r2, r3
    c794:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c79c:	7819      	ldrb	r1, [r3, #0]
    c79e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c7a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7a6:	5499      	strb	r1, [r3, r2]
    c7a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c7ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7b0:	781b      	ldrb	r3, [r3, #0]
    c7b2:	3301      	adds	r3, #1
    c7b4:	b2da      	uxtb	r2, r3
    c7b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    c7ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7be:	701a      	strb	r2, [r3, #0]
    c7c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c7c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7c8:	781b      	ldrb	r3, [r3, #0]
    c7ca:	2bff      	cmp	r3, #255	; 0xff
    c7cc:	d105      	bne.n	c7da <send_debug+0x486>
    c7ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    c7d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7d6:	2200      	movs	r2, #0
    c7d8:	701a      	strb	r2, [r3, #0]
    c7da:	f24c 3319 	movw	r3, #49945	; 0xc319
    c7de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7e2:	781b      	ldrb	r3, [r3, #0]
    c7e4:	461a      	mov	r2, r3
    c7e6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c7ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7ee:	7819      	ldrb	r1, [r3, #0]
    c7f0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c7f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7f8:	5499      	strb	r1, [r3, r2]
    c7fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    c7fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c802:	781b      	ldrb	r3, [r3, #0]
    c804:	3301      	adds	r3, #1
    c806:	b2da      	uxtb	r2, r3
    c808:	f24c 3319 	movw	r3, #49945	; 0xc319
    c80c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c810:	701a      	strb	r2, [r3, #0]
    c812:	f24c 3319 	movw	r3, #49945	; 0xc319
    c816:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c81a:	781b      	ldrb	r3, [r3, #0]
    c81c:	2bff      	cmp	r3, #255	; 0xff
    c81e:	d105      	bne.n	c82c <send_debug+0x4d8>
    c820:	f24c 3319 	movw	r3, #49945	; 0xc319
    c824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c828:	2200      	movs	r2, #0
    c82a:	701a      	strb	r2, [r3, #0]
    c82c:	f242 0339 	movw	r3, #8249	; 0x2039
    c830:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c834:	781b      	ldrb	r3, [r3, #0]
    c836:	b2db      	uxtb	r3, r3
    c838:	f003 0310 	and.w	r3, r3, #16
    c83c:	2b00      	cmp	r3, #0
    c83e:	d15a      	bne.n	c8f6 <send_debug+0x5a2>
    c840:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c848:	781b      	ldrb	r3, [r3, #0]
    c84a:	b2db      	uxtb	r3, r3
    c84c:	461a      	mov	r2, r3
    c84e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c856:	5c9a      	ldrb	r2, [r3, r2]
    c858:	f24c 431b 	movw	r3, #50203	; 0xc41b
    c85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c860:	701a      	strb	r2, [r3, #0]
    c862:	f24c 431c 	movw	r3, #50204	; 0xc41c
    c866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c86a:	2200      	movs	r2, #0
    c86c:	701a      	strb	r2, [r3, #0]
    c86e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c876:	781b      	ldrb	r3, [r3, #0]
    c878:	b2db      	uxtb	r3, r3
    c87a:	3301      	adds	r3, #1
    c87c:	b2da      	uxtb	r2, r3
    c87e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c886:	701a      	strb	r2, [r3, #0]
    c888:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c88c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c890:	781b      	ldrb	r3, [r3, #0]
    c892:	b2db      	uxtb	r3, r3
    c894:	2bff      	cmp	r3, #255	; 0xff
    c896:	d105      	bne.n	c8a4 <send_debug+0x550>
    c898:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c89c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8a0:	2200      	movs	r2, #0
    c8a2:	701a      	strb	r2, [r3, #0]
    c8a4:	f242 0338 	movw	r3, #8248	; 0x2038
    c8a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8ac:	f242 0238 	movw	r2, #8248	; 0x2038
    c8b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c8b4:	7812      	ldrb	r2, [r2, #0]
    c8b6:	b2d2      	uxtb	r2, r2
    c8b8:	f042 0201 	orr.w	r2, r2, #1
    c8bc:	b2d2      	uxtb	r2, r2
    c8be:	701a      	strb	r2, [r3, #0]
    c8c0:	f242 0339 	movw	r3, #8249	; 0x2039
    c8c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8c8:	f242 0239 	movw	r2, #8249	; 0x2039
    c8cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c8d0:	7812      	ldrb	r2, [r2, #0]
    c8d2:	b2d2      	uxtb	r2, r2
    c8d4:	f042 0210 	orr.w	r2, r2, #16
    c8d8:	b2d2      	uxtb	r2, r2
    c8da:	701a      	strb	r2, [r3, #0]
    c8dc:	e00b      	b.n	c8f6 <send_debug+0x5a2>
    c8de:	f24c 3318 	movw	r3, #49944	; 0xc318
    c8e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8e6:	781b      	ldrb	r3, [r3, #0]
    c8e8:	3301      	adds	r3, #1
    c8ea:	b2da      	uxtb	r2, r3
    c8ec:	f24c 3318 	movw	r3, #49944	; 0xc318
    c8f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8f4:	701a      	strb	r2, [r3, #0]
}
    c8f6:	46bd      	mov	sp, r7
    c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8fc:	4770      	bx	lr
    c8fe:	bf00      	nop

0000c900 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c900:	b480      	push	{r7}
    c902:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c904:	f24c 3311 	movw	r3, #49937	; 0xc311
    c908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c90c:	781a      	ldrb	r2, [r3, #0]
    c90e:	f248 531f 	movw	r3, #34079	; 0x851f
    c912:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c916:	fba3 1302 	umull	r1, r3, r3, r2
    c91a:	095b      	lsrs	r3, r3, #5
    c91c:	2164      	movs	r1, #100	; 0x64
    c91e:	fb01 f303 	mul.w	r3, r1, r3
    c922:	1ad3      	subs	r3, r2, r3
    c924:	b2db      	uxtb	r3, r3
    c926:	2b31      	cmp	r3, #49	; 0x31
    c928:	f040 8395 	bne.w	d056 <send_nav_ref+0x756>
    c92c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c934:	781a      	ldrb	r2, [r3, #0]
    c936:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c93a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c93e:	781b      	ldrb	r3, [r3, #0]
    c940:	b2db      	uxtb	r3, r3
    c942:	429a      	cmp	r2, r3
    c944:	d313      	bcc.n	c96e <send_nav_ref+0x6e>
    c946:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c94e:	781b      	ldrb	r3, [r3, #0]
    c950:	b2db      	uxtb	r3, r3
    c952:	461a      	mov	r2, r3
    c954:	f24c 3319 	movw	r3, #49945	; 0xc319
    c958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c95c:	781b      	ldrb	r3, [r3, #0]
    c95e:	1ad3      	subs	r3, r2, r3
    c960:	33ff      	adds	r3, #255	; 0xff
    c962:	2b0c      	cmp	r3, #12
    c964:	bfd4      	ite	le
    c966:	2300      	movle	r3, #0
    c968:	2301      	movgt	r3, #1
    c96a:	b2db      	uxtb	r3, r3
    c96c:	e011      	b.n	c992 <send_nav_ref+0x92>
    c96e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c976:	781b      	ldrb	r3, [r3, #0]
    c978:	b2db      	uxtb	r3, r3
    c97a:	461a      	mov	r2, r3
    c97c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c984:	781b      	ldrb	r3, [r3, #0]
    c986:	1ad3      	subs	r3, r2, r3
    c988:	2b0c      	cmp	r3, #12
    c98a:	bfd4      	ite	le
    c98c:	2300      	movle	r3, #0
    c98e:	2301      	movgt	r3, #1
    c990:	b2db      	uxtb	r3, r3
    c992:	2b00      	cmp	r3, #0
    c994:	f000 8353 	beq.w	d03e <send_nav_ref+0x73e>
    c998:	f24c 3319 	movw	r3, #49945	; 0xc319
    c99c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9a0:	781b      	ldrb	r3, [r3, #0]
    c9a2:	461a      	mov	r2, r3
    c9a4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c9a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ac:	2105      	movs	r1, #5
    c9ae:	5499      	strb	r1, [r3, r2]
    c9b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c9b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9b8:	781b      	ldrb	r3, [r3, #0]
    c9ba:	3301      	adds	r3, #1
    c9bc:	b2da      	uxtb	r2, r3
    c9be:	f24c 3319 	movw	r3, #49945	; 0xc319
    c9c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9c6:	701a      	strb	r2, [r3, #0]
    c9c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c9cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9d0:	781b      	ldrb	r3, [r3, #0]
    c9d2:	2bff      	cmp	r3, #255	; 0xff
    c9d4:	d105      	bne.n	c9e2 <send_nav_ref+0xe2>
    c9d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    c9da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9de:	2200      	movs	r2, #0
    c9e0:	701a      	strb	r2, [r3, #0]
    c9e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    c9e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ea:	781b      	ldrb	r3, [r3, #0]
    c9ec:	461a      	mov	r2, r3
    c9ee:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9f6:	2109      	movs	r1, #9
    c9f8:	5499      	strb	r1, [r3, r2]
    c9fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    c9fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca02:	781b      	ldrb	r3, [r3, #0]
    ca04:	3301      	adds	r3, #1
    ca06:	b2da      	uxtb	r2, r3
    ca08:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca10:	701a      	strb	r2, [r3, #0]
    ca12:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca1a:	781b      	ldrb	r3, [r3, #0]
    ca1c:	2bff      	cmp	r3, #255	; 0xff
    ca1e:	d105      	bne.n	ca2c <send_nav_ref+0x12c>
    ca20:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca28:	2200      	movs	r2, #0
    ca2a:	701a      	strb	r2, [r3, #0]
    ca2c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ca30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca34:	2209      	movs	r2, #9
    ca36:	701a      	strb	r2, [r3, #0]
    ca38:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ca3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca40:	2209      	movs	r2, #9
    ca42:	701a      	strb	r2, [r3, #0]
    ca44:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca4c:	781b      	ldrb	r3, [r3, #0]
    ca4e:	461a      	mov	r2, r3
    ca50:	f648 13d4 	movw	r3, #35284	; 0x89d4
    ca54:	f2c0 0301 	movt	r3, #1
    ca58:	7819      	ldrb	r1, [r3, #0]
    ca5a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ca5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca62:	5499      	strb	r1, [r3, r2]
    ca64:	f648 13d4 	movw	r3, #35284	; 0x89d4
    ca68:	f2c0 0301 	movt	r3, #1
    ca6c:	781a      	ldrb	r2, [r3, #0]
    ca6e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ca72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca76:	781b      	ldrb	r3, [r3, #0]
    ca78:	4413      	add	r3, r2
    ca7a:	b2da      	uxtb	r2, r3
    ca7c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ca80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca84:	701a      	strb	r2, [r3, #0]
    ca86:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ca8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca8e:	781a      	ldrb	r2, [r3, #0]
    ca90:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ca94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca98:	781b      	ldrb	r3, [r3, #0]
    ca9a:	4413      	add	r3, r2
    ca9c:	b2da      	uxtb	r2, r3
    ca9e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    caa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caa6:	701a      	strb	r2, [r3, #0]
    caa8:	f24c 3319 	movw	r3, #49945	; 0xc319
    caac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cab0:	781b      	ldrb	r3, [r3, #0]
    cab2:	3301      	adds	r3, #1
    cab4:	b2da      	uxtb	r2, r3
    cab6:	f24c 3319 	movw	r3, #49945	; 0xc319
    caba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cabe:	701a      	strb	r2, [r3, #0]
    cac0:	f24c 3319 	movw	r3, #49945	; 0xc319
    cac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cac8:	781b      	ldrb	r3, [r3, #0]
    caca:	2bff      	cmp	r3, #255	; 0xff
    cacc:	d105      	bne.n	cada <send_nav_ref+0x1da>
    cace:	f24c 3319 	movw	r3, #49945	; 0xc319
    cad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cad6:	2200      	movs	r2, #0
    cad8:	701a      	strb	r2, [r3, #0]
    cada:	f24c 3319 	movw	r3, #49945	; 0xc319
    cade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cae2:	781b      	ldrb	r3, [r3, #0]
    cae4:	461a      	mov	r2, r3
    cae6:	f648 13d4 	movw	r3, #35284	; 0x89d4
    caea:	f2c0 0301 	movt	r3, #1
    caee:	7859      	ldrb	r1, [r3, #1]
    caf0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    caf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caf8:	5499      	strb	r1, [r3, r2]
    cafa:	4bd2      	ldr	r3, [pc, #840]	; (ce44 <send_nav_ref+0x544>)
    cafc:	781a      	ldrb	r2, [r3, #0]
    cafe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cb02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb06:	781b      	ldrb	r3, [r3, #0]
    cb08:	4413      	add	r3, r2
    cb0a:	b2da      	uxtb	r2, r3
    cb0c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cb10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb14:	701a      	strb	r2, [r3, #0]
    cb16:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cb1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb1e:	781a      	ldrb	r2, [r3, #0]
    cb20:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cb24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb28:	781b      	ldrb	r3, [r3, #0]
    cb2a:	4413      	add	r3, r2
    cb2c:	b2da      	uxtb	r2, r3
    cb2e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cb32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb36:	701a      	strb	r2, [r3, #0]
    cb38:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb40:	781b      	ldrb	r3, [r3, #0]
    cb42:	3301      	adds	r3, #1
    cb44:	b2da      	uxtb	r2, r3
    cb46:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb4e:	701a      	strb	r2, [r3, #0]
    cb50:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb58:	781b      	ldrb	r3, [r3, #0]
    cb5a:	2bff      	cmp	r3, #255	; 0xff
    cb5c:	d105      	bne.n	cb6a <send_nav_ref+0x26a>
    cb5e:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb66:	2200      	movs	r2, #0
    cb68:	701a      	strb	r2, [r3, #0]
    cb6a:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb72:	781b      	ldrb	r3, [r3, #0]
    cb74:	461a      	mov	r2, r3
    cb76:	f648 13d4 	movw	r3, #35284	; 0x89d4
    cb7a:	f2c0 0301 	movt	r3, #1
    cb7e:	7899      	ldrb	r1, [r3, #2]
    cb80:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cb84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb88:	5499      	strb	r1, [r3, r2]
    cb8a:	4baf      	ldr	r3, [pc, #700]	; (ce48 <send_nav_ref+0x548>)
    cb8c:	781a      	ldrb	r2, [r3, #0]
    cb8e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cb92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb96:	781b      	ldrb	r3, [r3, #0]
    cb98:	4413      	add	r3, r2
    cb9a:	b2da      	uxtb	r2, r3
    cb9c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cba4:	701a      	strb	r2, [r3, #0]
    cba6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cbaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbae:	781a      	ldrb	r2, [r3, #0]
    cbb0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cbb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbb8:	781b      	ldrb	r3, [r3, #0]
    cbba:	4413      	add	r3, r2
    cbbc:	b2da      	uxtb	r2, r3
    cbbe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cbc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbc6:	701a      	strb	r2, [r3, #0]
    cbc8:	f24c 3319 	movw	r3, #49945	; 0xc319
    cbcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbd0:	781b      	ldrb	r3, [r3, #0]
    cbd2:	3301      	adds	r3, #1
    cbd4:	b2da      	uxtb	r2, r3
    cbd6:	f24c 3319 	movw	r3, #49945	; 0xc319
    cbda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbde:	701a      	strb	r2, [r3, #0]
    cbe0:	f24c 3319 	movw	r3, #49945	; 0xc319
    cbe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbe8:	781b      	ldrb	r3, [r3, #0]
    cbea:	2bff      	cmp	r3, #255	; 0xff
    cbec:	d105      	bne.n	cbfa <send_nav_ref+0x2fa>
    cbee:	f24c 3319 	movw	r3, #49945	; 0xc319
    cbf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbf6:	2200      	movs	r2, #0
    cbf8:	701a      	strb	r2, [r3, #0]
    cbfa:	f24c 3319 	movw	r3, #49945	; 0xc319
    cbfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc02:	781b      	ldrb	r3, [r3, #0]
    cc04:	461a      	mov	r2, r3
    cc06:	f648 13d4 	movw	r3, #35284	; 0x89d4
    cc0a:	f2c0 0301 	movt	r3, #1
    cc0e:	78d9      	ldrb	r1, [r3, #3]
    cc10:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cc14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc18:	5499      	strb	r1, [r3, r2]
    cc1a:	4b8c      	ldr	r3, [pc, #560]	; (ce4c <send_nav_ref+0x54c>)
    cc1c:	781a      	ldrb	r2, [r3, #0]
    cc1e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cc22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc26:	781b      	ldrb	r3, [r3, #0]
    cc28:	4413      	add	r3, r2
    cc2a:	b2da      	uxtb	r2, r3
    cc2c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cc30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc34:	701a      	strb	r2, [r3, #0]
    cc36:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cc3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc3e:	781a      	ldrb	r2, [r3, #0]
    cc40:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cc44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc48:	781b      	ldrb	r3, [r3, #0]
    cc4a:	4413      	add	r3, r2
    cc4c:	b2da      	uxtb	r2, r3
    cc4e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cc52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc56:	701a      	strb	r2, [r3, #0]
    cc58:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc60:	781b      	ldrb	r3, [r3, #0]
    cc62:	3301      	adds	r3, #1
    cc64:	b2da      	uxtb	r2, r3
    cc66:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc6e:	701a      	strb	r2, [r3, #0]
    cc70:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc78:	781b      	ldrb	r3, [r3, #0]
    cc7a:	2bff      	cmp	r3, #255	; 0xff
    cc7c:	d105      	bne.n	cc8a <send_nav_ref+0x38a>
    cc7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc86:	2200      	movs	r2, #0
    cc88:	701a      	strb	r2, [r3, #0]
    cc8a:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc92:	781b      	ldrb	r3, [r3, #0]
    cc94:	461a      	mov	r2, r3
    cc96:	f648 13d8 	movw	r3, #35288	; 0x89d8
    cc9a:	f2c0 0301 	movt	r3, #1
    cc9e:	7819      	ldrb	r1, [r3, #0]
    cca0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cca8:	5499      	strb	r1, [r3, r2]
    ccaa:	f648 13d8 	movw	r3, #35288	; 0x89d8
    ccae:	f2c0 0301 	movt	r3, #1
    ccb2:	781a      	ldrb	r2, [r3, #0]
    ccb4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ccb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccbc:	781b      	ldrb	r3, [r3, #0]
    ccbe:	4413      	add	r3, r2
    ccc0:	b2da      	uxtb	r2, r3
    ccc2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ccc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccca:	701a      	strb	r2, [r3, #0]
    cccc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ccd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccd4:	781a      	ldrb	r2, [r3, #0]
    ccd6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ccda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccde:	781b      	ldrb	r3, [r3, #0]
    cce0:	4413      	add	r3, r2
    cce2:	b2da      	uxtb	r2, r3
    cce4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccec:	701a      	strb	r2, [r3, #0]
    ccee:	f24c 3319 	movw	r3, #49945	; 0xc319
    ccf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccf6:	781b      	ldrb	r3, [r3, #0]
    ccf8:	3301      	adds	r3, #1
    ccfa:	b2da      	uxtb	r2, r3
    ccfc:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd04:	701a      	strb	r2, [r3, #0]
    cd06:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd0e:	781b      	ldrb	r3, [r3, #0]
    cd10:	2bff      	cmp	r3, #255	; 0xff
    cd12:	d105      	bne.n	cd20 <send_nav_ref+0x420>
    cd14:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd1c:	2200      	movs	r2, #0
    cd1e:	701a      	strb	r2, [r3, #0]
    cd20:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd28:	781b      	ldrb	r3, [r3, #0]
    cd2a:	461a      	mov	r2, r3
    cd2c:	f648 13d8 	movw	r3, #35288	; 0x89d8
    cd30:	f2c0 0301 	movt	r3, #1
    cd34:	7859      	ldrb	r1, [r3, #1]
    cd36:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cd3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd3e:	5499      	strb	r1, [r3, r2]
    cd40:	4b43      	ldr	r3, [pc, #268]	; (ce50 <send_nav_ref+0x550>)
    cd42:	781a      	ldrb	r2, [r3, #0]
    cd44:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cd48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd4c:	781b      	ldrb	r3, [r3, #0]
    cd4e:	4413      	add	r3, r2
    cd50:	b2da      	uxtb	r2, r3
    cd52:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cd56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd5a:	701a      	strb	r2, [r3, #0]
    cd5c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cd60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd64:	781a      	ldrb	r2, [r3, #0]
    cd66:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cd6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd6e:	781b      	ldrb	r3, [r3, #0]
    cd70:	4413      	add	r3, r2
    cd72:	b2da      	uxtb	r2, r3
    cd74:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cd78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd7c:	701a      	strb	r2, [r3, #0]
    cd7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd86:	781b      	ldrb	r3, [r3, #0]
    cd88:	3301      	adds	r3, #1
    cd8a:	b2da      	uxtb	r2, r3
    cd8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd94:	701a      	strb	r2, [r3, #0]
    cd96:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd9e:	781b      	ldrb	r3, [r3, #0]
    cda0:	2bff      	cmp	r3, #255	; 0xff
    cda2:	d105      	bne.n	cdb0 <send_nav_ref+0x4b0>
    cda4:	f24c 3319 	movw	r3, #49945	; 0xc319
    cda8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdac:	2200      	movs	r2, #0
    cdae:	701a      	strb	r2, [r3, #0]
    cdb0:	f24c 3319 	movw	r3, #49945	; 0xc319
    cdb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdb8:	781b      	ldrb	r3, [r3, #0]
    cdba:	461a      	mov	r2, r3
    cdbc:	f648 13d8 	movw	r3, #35288	; 0x89d8
    cdc0:	f2c0 0301 	movt	r3, #1
    cdc4:	7899      	ldrb	r1, [r3, #2]
    cdc6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cdca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdce:	5499      	strb	r1, [r3, r2]
    cdd0:	4b20      	ldr	r3, [pc, #128]	; (ce54 <send_nav_ref+0x554>)
    cdd2:	781a      	ldrb	r2, [r3, #0]
    cdd4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cdd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cddc:	781b      	ldrb	r3, [r3, #0]
    cdde:	4413      	add	r3, r2
    cde0:	b2da      	uxtb	r2, r3
    cde2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cde6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdea:	701a      	strb	r2, [r3, #0]
    cdec:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cdf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdf4:	781a      	ldrb	r2, [r3, #0]
    cdf6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cdfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdfe:	781b      	ldrb	r3, [r3, #0]
    ce00:	4413      	add	r3, r2
    ce02:	b2da      	uxtb	r2, r3
    ce04:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ce08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce0c:	701a      	strb	r2, [r3, #0]
    ce0e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce16:	781b      	ldrb	r3, [r3, #0]
    ce18:	3301      	adds	r3, #1
    ce1a:	b2da      	uxtb	r2, r3
    ce1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce24:	701a      	strb	r2, [r3, #0]
    ce26:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce2e:	781b      	ldrb	r3, [r3, #0]
    ce30:	2bff      	cmp	r3, #255	; 0xff
    ce32:	d111      	bne.n	ce58 <send_nav_ref+0x558>
    ce34:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce3c:	2200      	movs	r2, #0
    ce3e:	701a      	strb	r2, [r3, #0]
    ce40:	e00a      	b.n	ce58 <send_nav_ref+0x558>
    ce42:	bf00      	nop
    ce44:	000189d5 	.word	0x000189d5
    ce48:	000189d6 	.word	0x000189d6
    ce4c:	000189d7 	.word	0x000189d7
    ce50:	000189d9 	.word	0x000189d9
    ce54:	000189da 	.word	0x000189da
    ce58:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce60:	781b      	ldrb	r3, [r3, #0]
    ce62:	461a      	mov	r2, r3
    ce64:	f648 13d8 	movw	r3, #35288	; 0x89d8
    ce68:	f2c0 0301 	movt	r3, #1
    ce6c:	78d9      	ldrb	r1, [r3, #3]
    ce6e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ce72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce76:	5499      	strb	r1, [r3, r2]
    ce78:	4b79      	ldr	r3, [pc, #484]	; (d060 <send_nav_ref+0x760>)
    ce7a:	781a      	ldrb	r2, [r3, #0]
    ce7c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ce80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce84:	781b      	ldrb	r3, [r3, #0]
    ce86:	4413      	add	r3, r2
    ce88:	b2da      	uxtb	r2, r3
    ce8a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ce8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce92:	701a      	strb	r2, [r3, #0]
    ce94:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ce98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce9c:	781a      	ldrb	r2, [r3, #0]
    ce9e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cea6:	781b      	ldrb	r3, [r3, #0]
    cea8:	4413      	add	r3, r2
    ceaa:	b2da      	uxtb	r2, r3
    ceac:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ceb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceb4:	701a      	strb	r2, [r3, #0]
    ceb6:	f24c 3319 	movw	r3, #49945	; 0xc319
    ceba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cebe:	781b      	ldrb	r3, [r3, #0]
    cec0:	3301      	adds	r3, #1
    cec2:	b2da      	uxtb	r2, r3
    cec4:	f24c 3319 	movw	r3, #49945	; 0xc319
    cec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cecc:	701a      	strb	r2, [r3, #0]
    cece:	f24c 3319 	movw	r3, #49945	; 0xc319
    ced2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ced6:	781b      	ldrb	r3, [r3, #0]
    ced8:	2bff      	cmp	r3, #255	; 0xff
    ceda:	d105      	bne.n	cee8 <send_nav_ref+0x5e8>
    cedc:	f24c 3319 	movw	r3, #49945	; 0xc319
    cee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cee4:	2200      	movs	r2, #0
    cee6:	701a      	strb	r2, [r3, #0]
    cee8:	f24c 3319 	movw	r3, #49945	; 0xc319
    ceec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cef0:	781b      	ldrb	r3, [r3, #0]
    cef2:	461a      	mov	r2, r3
    cef4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cefc:	7819      	ldrb	r1, [r3, #0]
    cefe:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cf02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf06:	5499      	strb	r1, [r3, r2]
    cf08:	f24c 3319 	movw	r3, #49945	; 0xc319
    cf0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf10:	781b      	ldrb	r3, [r3, #0]
    cf12:	3301      	adds	r3, #1
    cf14:	b2da      	uxtb	r2, r3
    cf16:	f24c 3319 	movw	r3, #49945	; 0xc319
    cf1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf1e:	701a      	strb	r2, [r3, #0]
    cf20:	f24c 3319 	movw	r3, #49945	; 0xc319
    cf24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf28:	781b      	ldrb	r3, [r3, #0]
    cf2a:	2bff      	cmp	r3, #255	; 0xff
    cf2c:	d105      	bne.n	cf3a <send_nav_ref+0x63a>
    cf2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    cf32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf36:	2200      	movs	r2, #0
    cf38:	701a      	strb	r2, [r3, #0]
    cf3a:	f24c 3319 	movw	r3, #49945	; 0xc319
    cf3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf42:	781b      	ldrb	r3, [r3, #0]
    cf44:	461a      	mov	r2, r3
    cf46:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cf4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf4e:	7819      	ldrb	r1, [r3, #0]
    cf50:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cf54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf58:	5499      	strb	r1, [r3, r2]
    cf5a:	f24c 3319 	movw	r3, #49945	; 0xc319
    cf5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf62:	781b      	ldrb	r3, [r3, #0]
    cf64:	3301      	adds	r3, #1
    cf66:	b2da      	uxtb	r2, r3
    cf68:	f24c 3319 	movw	r3, #49945	; 0xc319
    cf6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf70:	701a      	strb	r2, [r3, #0]
    cf72:	f24c 3319 	movw	r3, #49945	; 0xc319
    cf76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf7a:	781b      	ldrb	r3, [r3, #0]
    cf7c:	2bff      	cmp	r3, #255	; 0xff
    cf7e:	d105      	bne.n	cf8c <send_nav_ref+0x68c>
    cf80:	f24c 3319 	movw	r3, #49945	; 0xc319
    cf84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf88:	2200      	movs	r2, #0
    cf8a:	701a      	strb	r2, [r3, #0]
    cf8c:	f242 0339 	movw	r3, #8249	; 0x2039
    cf90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf94:	781b      	ldrb	r3, [r3, #0]
    cf96:	b2db      	uxtb	r3, r3
    cf98:	f003 0310 	and.w	r3, r3, #16
    cf9c:	2b00      	cmp	r3, #0
    cf9e:	d15a      	bne.n	d056 <send_nav_ref+0x756>
    cfa0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    cfa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfa8:	781b      	ldrb	r3, [r3, #0]
    cfaa:	b2db      	uxtb	r3, r3
    cfac:	461a      	mov	r2, r3
    cfae:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cfb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfb6:	5c9a      	ldrb	r2, [r3, r2]
    cfb8:	f24c 431b 	movw	r3, #50203	; 0xc41b
    cfbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfc0:	701a      	strb	r2, [r3, #0]
    cfc2:	f24c 431c 	movw	r3, #50204	; 0xc41c
    cfc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfca:	2200      	movs	r2, #0
    cfcc:	701a      	strb	r2, [r3, #0]
    cfce:	f24c 331a 	movw	r3, #49946	; 0xc31a
    cfd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfd6:	781b      	ldrb	r3, [r3, #0]
    cfd8:	b2db      	uxtb	r3, r3
    cfda:	3301      	adds	r3, #1
    cfdc:	b2da      	uxtb	r2, r3
    cfde:	f24c 331a 	movw	r3, #49946	; 0xc31a
    cfe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfe6:	701a      	strb	r2, [r3, #0]
    cfe8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    cfec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cff0:	781b      	ldrb	r3, [r3, #0]
    cff2:	b2db      	uxtb	r3, r3
    cff4:	2bff      	cmp	r3, #255	; 0xff
    cff6:	d105      	bne.n	d004 <send_nav_ref+0x704>
    cff8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    cffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d000:	2200      	movs	r2, #0
    d002:	701a      	strb	r2, [r3, #0]
    d004:	f242 0338 	movw	r3, #8248	; 0x2038
    d008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d00c:	f242 0238 	movw	r2, #8248	; 0x2038
    d010:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d014:	7812      	ldrb	r2, [r2, #0]
    d016:	b2d2      	uxtb	r2, r2
    d018:	f042 0201 	orr.w	r2, r2, #1
    d01c:	b2d2      	uxtb	r2, r2
    d01e:	701a      	strb	r2, [r3, #0]
    d020:	f242 0339 	movw	r3, #8249	; 0x2039
    d024:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d028:	f242 0239 	movw	r2, #8249	; 0x2039
    d02c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d030:	7812      	ldrb	r2, [r2, #0]
    d032:	b2d2      	uxtb	r2, r2
    d034:	f042 0210 	orr.w	r2, r2, #16
    d038:	b2d2      	uxtb	r2, r2
    d03a:	701a      	strb	r2, [r3, #0]
    d03c:	e00b      	b.n	d056 <send_nav_ref+0x756>
    d03e:	f24c 3318 	movw	r3, #49944	; 0xc318
    d042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d046:	781b      	ldrb	r3, [r3, #0]
    d048:	3301      	adds	r3, #1
    d04a:	b2da      	uxtb	r2, r3
    d04c:	f24c 3318 	movw	r3, #49944	; 0xc318
    d050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d054:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    d056:	46bd      	mov	sp, r7
    d058:	f85d 7b04 	ldr.w	r7, [sp], #4
    d05c:	4770      	bx	lr
    d05e:	bf00      	nop
    d060:	000189db 	.word	0x000189db

0000d064 <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    d064:	b480      	push	{r7}
    d066:	b083      	sub	sp, #12
    d068:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    d06a:	f24c 4320 	movw	r3, #50208	; 0xc420
    d06e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d072:	8a1b      	ldrh	r3, [r3, #16]
    d074:	b21b      	sxth	r3, r3
    d076:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    d07a:	db0d      	blt.n	d098 <inflight_calib_mode_update+0x34>
    d07c:	f24c 4320 	movw	r3, #50208	; 0xc420
    d080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d084:	8a1b      	ldrh	r3, [r3, #16]
    d086:	b21a      	sxth	r2, r3
    d088:	f640 437f 	movw	r3, #3199	; 0xc7f
    d08c:	429a      	cmp	r2, r3
    d08e:	bfd4      	ite	le
    d090:	2300      	movle	r3, #0
    d092:	2301      	movgt	r3, #1
    d094:	b2db      	uxtb	r3, r3
    d096:	e000      	b.n	d09a <inflight_calib_mode_update+0x36>
    d098:	2302      	movs	r3, #2
    d09a:	71fb      	strb	r3, [r7, #7]
    d09c:	f64c 132c 	movw	r3, #51500	; 0xc92c
    d0a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0a4:	781b      	ldrb	r3, [r3, #0]
    d0a6:	79fa      	ldrb	r2, [r7, #7]
    d0a8:	429a      	cmp	r2, r3
    d0aa:	d007      	beq.n	d0bc <inflight_calib_mode_update+0x58>
    d0ac:	f64c 132c 	movw	r3, #51500	; 0xc92c
    d0b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0b4:	79fa      	ldrb	r2, [r7, #7]
    d0b6:	701a      	strb	r2, [r3, #0]
    d0b8:	2301      	movs	r3, #1
    d0ba:	e000      	b.n	d0be <inflight_calib_mode_update+0x5a>
    d0bc:	2300      	movs	r3, #0
}
    d0be:	4618      	mov	r0, r3
    d0c0:	370c      	adds	r7, #12
    d0c2:	46bd      	mov	sp, r7
    d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0c8:	4770      	bx	lr
    d0ca:	bf00      	nop

0000d0cc <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    d0cc:	b580      	push	{r7, lr}
    d0ce:	b082      	sub	sp, #8
    d0d0:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    d0d2:	f24c 434e 	movw	r3, #50254	; 0xc44e
    d0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0da:	2201      	movs	r2, #1
    d0dc:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    d0de:	f24c 434e 	movw	r3, #50254	; 0xc44e
    d0e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0e6:	781b      	ldrb	r3, [r3, #0]
    d0e8:	b2db      	uxtb	r3, r3
    d0ea:	2b00      	cmp	r3, #0
    d0ec:	f000 83b8 	beq.w	d860 <radio_control_task+0x794>
    uint8_t mode_changed = FALSE;
    d0f0:	2300      	movs	r3, #0
    d0f2:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    d0f4:	f7fa fa9c 	bl	7630 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    d0f8:	4b3a      	ldr	r3, [pc, #232]	; (d1e4 <radio_control_task+0x118>)
    d0fa:	781b      	ldrb	r3, [r3, #0]
    d0fc:	b2db      	uxtb	r3, r3
    d0fe:	f003 0302 	and.w	r3, r3, #2
    d102:	2b00      	cmp	r3, #0
    d104:	d00d      	beq.n	d122 <radio_control_task+0x56>
    d106:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d10a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d10e:	781b      	ldrb	r3, [r3, #0]
    d110:	2b01      	cmp	r3, #1
    d112:	d00d      	beq.n	d130 <radio_control_task+0x64>
    d114:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d118:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d11c:	781b      	ldrb	r3, [r3, #0]
    d11e:	2b00      	cmp	r3, #0
    d120:	d006      	beq.n	d130 <radio_control_task+0x64>
    d122:	f24c 63ac 	movw	r3, #50860	; 0xc6ac
    d126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d12a:	781b      	ldrb	r3, [r3, #0]
    d12c:	2b00      	cmp	r3, #0
    d12e:	d007      	beq.n	d140 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    d130:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d138:	2203      	movs	r2, #3
    d13a:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    d13c:	2301      	movs	r3, #1
    d13e:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    //if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    d140:	f7fa f950 	bl	73e4 <pprz_mode_update>
    d144:	4603      	mov	r3, r0
    d146:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    d148:	79fa      	ldrb	r2, [r7, #7]
    d14a:	79bb      	ldrb	r3, [r7, #6]
    d14c:	4313      	orrs	r3, r2
    d14e:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    d150:	f7fa f994 	bl	747c <ir_estim_mode_update>
    d154:	4603      	mov	r3, r0
    d156:	461a      	mov	r2, r3
    d158:	79fb      	ldrb	r3, [r7, #7]
    d15a:	4313      	orrs	r3, r2
    d15c:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    d15e:	f7ff ff81 	bl	d064 <inflight_calib_mode_update>
    d162:	4603      	mov	r3, r0
    d164:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    d166:	797b      	ldrb	r3, [r7, #5]
    d168:	2b00      	cmp	r3, #0
    d16a:	d102      	bne.n	d172 <radio_control_task+0xa6>
    d16c:	79bb      	ldrb	r3, [r7, #6]
    d16e:	2b00      	cmp	r3, #0
    d170:	d001      	beq.n	d176 <radio_control_task+0xaa>
    d172:	2301      	movs	r3, #1
    d174:	e000      	b.n	d178 <radio_control_task+0xac>
    d176:	2300      	movs	r3, #0
    d178:	b2db      	uxtb	r3, r3
    d17a:	4618      	mov	r0, r3
    d17c:	f008 fba0 	bl	158c0 <inflight_calib>
      mode_changed |= calib_mode_changed;
    d180:	79fa      	ldrb	r2, [r7, #7]
    d182:	797b      	ldrb	r3, [r7, #5]
    d184:	4313      	orrs	r3, r2
    d186:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    d188:	f7fa f9a0 	bl	74cc <mcu1_status_update>
    d18c:	4603      	mov	r3, r0
    d18e:	461a      	mov	r2, r3
    d190:	79fb      	ldrb	r3, [r7, #7]
    d192:	4313      	orrs	r3, r2
    d194:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    d196:	2301      	movs	r3, #1
    d198:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    d19a:	79fb      	ldrb	r3, [r7, #7]
    d19c:	2b00      	cmp	r3, #0
    d19e:	f000 82bc 	beq.w	d71a <radio_control_task+0x64e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    d1a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    d1a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1aa:	781a      	ldrb	r2, [r3, #0]
    d1ac:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d1b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1b4:	781b      	ldrb	r3, [r3, #0]
    d1b6:	b2db      	uxtb	r3, r3
    d1b8:	429a      	cmp	r2, r3
    d1ba:	d315      	bcc.n	d1e8 <radio_control_task+0x11c>
    d1bc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d1c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1c4:	781b      	ldrb	r3, [r3, #0]
    d1c6:	b2db      	uxtb	r3, r3
    d1c8:	461a      	mov	r2, r3
    d1ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    d1ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1d2:	781b      	ldrb	r3, [r3, #0]
    d1d4:	1ad3      	subs	r3, r2, r3
    d1d6:	33ff      	adds	r3, #255	; 0xff
    d1d8:	2b09      	cmp	r3, #9
    d1da:	bfd4      	ite	le
    d1dc:	2300      	movle	r3, #0
    d1de:	2301      	movgt	r3, #1
    d1e0:	b2db      	uxtb	r3, r3
    d1e2:	e013      	b.n	d20c <radio_control_task+0x140>
    d1e4:	2004c433 	.word	0x2004c433
    d1e8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d1ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1f0:	781b      	ldrb	r3, [r3, #0]
    d1f2:	b2db      	uxtb	r3, r3
    d1f4:	461a      	mov	r2, r3
    d1f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    d1fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1fe:	781b      	ldrb	r3, [r3, #0]
    d200:	1ad3      	subs	r3, r2, r3
    d202:	2b09      	cmp	r3, #9
    d204:	bfd4      	ite	le
    d206:	2300      	movle	r3, #0
    d208:	2301      	movgt	r3, #1
    d20a:	b2db      	uxtb	r3, r3
    d20c:	2b00      	cmp	r3, #0
    d20e:	f000 8278 	beq.w	d702 <radio_control_task+0x636>
    d212:	f24c 3319 	movw	r3, #49945	; 0xc319
    d216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d21a:	781b      	ldrb	r3, [r3, #0]
    d21c:	461a      	mov	r2, r3
    d21e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d226:	2105      	movs	r1, #5
    d228:	5499      	strb	r1, [r3, r2]
    d22a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d22e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d232:	781b      	ldrb	r3, [r3, #0]
    d234:	3301      	adds	r3, #1
    d236:	b2da      	uxtb	r2, r3
    d238:	f24c 3319 	movw	r3, #49945	; 0xc319
    d23c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d240:	701a      	strb	r2, [r3, #0]
    d242:	f24c 3319 	movw	r3, #49945	; 0xc319
    d246:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d24a:	781b      	ldrb	r3, [r3, #0]
    d24c:	2bff      	cmp	r3, #255	; 0xff
    d24e:	d105      	bne.n	d25c <radio_control_task+0x190>
    d250:	f24c 3319 	movw	r3, #49945	; 0xc319
    d254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d258:	2200      	movs	r2, #0
    d25a:	701a      	strb	r2, [r3, #0]
    d25c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d264:	781b      	ldrb	r3, [r3, #0]
    d266:	461a      	mov	r2, r3
    d268:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d26c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d270:	210b      	movs	r1, #11
    d272:	5499      	strb	r1, [r3, r2]
    d274:	f24c 3319 	movw	r3, #49945	; 0xc319
    d278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d27c:	781b      	ldrb	r3, [r3, #0]
    d27e:	3301      	adds	r3, #1
    d280:	b2da      	uxtb	r2, r3
    d282:	f24c 3319 	movw	r3, #49945	; 0xc319
    d286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d28a:	701a      	strb	r2, [r3, #0]
    d28c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d294:	781b      	ldrb	r3, [r3, #0]
    d296:	2bff      	cmp	r3, #255	; 0xff
    d298:	d105      	bne.n	d2a6 <radio_control_task+0x1da>
    d29a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d29e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2a2:	2200      	movs	r2, #0
    d2a4:	701a      	strb	r2, [r3, #0]
    d2a6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d2aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ae:	220b      	movs	r2, #11
    d2b0:	701a      	strb	r2, [r3, #0]
    d2b2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d2b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ba:	220b      	movs	r2, #11
    d2bc:	701a      	strb	r2, [r3, #0]
    d2be:	f24c 3319 	movw	r3, #49945	; 0xc319
    d2c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2c6:	781b      	ldrb	r3, [r3, #0]
    d2c8:	461a      	mov	r2, r3
    d2ca:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d2ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2d2:	7819      	ldrb	r1, [r3, #0]
    d2d4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d2d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2dc:	5499      	strb	r1, [r3, r2]
    d2de:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2e6:	781a      	ldrb	r2, [r3, #0]
    d2e8:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d2ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2f0:	781b      	ldrb	r3, [r3, #0]
    d2f2:	4413      	add	r3, r2
    d2f4:	b2da      	uxtb	r2, r3
    d2f6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2fe:	701a      	strb	r2, [r3, #0]
    d300:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d308:	781a      	ldrb	r2, [r3, #0]
    d30a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d30e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d312:	781b      	ldrb	r3, [r3, #0]
    d314:	4413      	add	r3, r2
    d316:	b2da      	uxtb	r2, r3
    d318:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d31c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d320:	701a      	strb	r2, [r3, #0]
    d322:	f24c 3319 	movw	r3, #49945	; 0xc319
    d326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d32a:	781b      	ldrb	r3, [r3, #0]
    d32c:	3301      	adds	r3, #1
    d32e:	b2da      	uxtb	r2, r3
    d330:	f24c 3319 	movw	r3, #49945	; 0xc319
    d334:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d338:	701a      	strb	r2, [r3, #0]
    d33a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d33e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d342:	781b      	ldrb	r3, [r3, #0]
    d344:	2bff      	cmp	r3, #255	; 0xff
    d346:	d105      	bne.n	d354 <radio_control_task+0x288>
    d348:	f24c 3319 	movw	r3, #49945	; 0xc319
    d34c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d350:	2200      	movs	r2, #0
    d352:	701a      	strb	r2, [r3, #0]
    d354:	f24c 3319 	movw	r3, #49945	; 0xc319
    d358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d35c:	781b      	ldrb	r3, [r3, #0]
    d35e:	461a      	mov	r2, r3
    d360:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    d364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d368:	7819      	ldrb	r1, [r3, #0]
    d36a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d36e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d372:	5499      	strb	r1, [r3, r2]
    d374:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d37c:	781a      	ldrb	r2, [r3, #0]
    d37e:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    d382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d386:	781b      	ldrb	r3, [r3, #0]
    d388:	4413      	add	r3, r2
    d38a:	b2da      	uxtb	r2, r3
    d38c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d394:	701a      	strb	r2, [r3, #0]
    d396:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d39a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d39e:	781a      	ldrb	r2, [r3, #0]
    d3a0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3a8:	781b      	ldrb	r3, [r3, #0]
    d3aa:	4413      	add	r3, r2
    d3ac:	b2da      	uxtb	r2, r3
    d3ae:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d3b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3b6:	701a      	strb	r2, [r3, #0]
    d3b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    d3bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3c0:	781b      	ldrb	r3, [r3, #0]
    d3c2:	3301      	adds	r3, #1
    d3c4:	b2da      	uxtb	r2, r3
    d3c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    d3ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3ce:	701a      	strb	r2, [r3, #0]
    d3d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    d3d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3d8:	781b      	ldrb	r3, [r3, #0]
    d3da:	2bff      	cmp	r3, #255	; 0xff
    d3dc:	d105      	bne.n	d3ea <radio_control_task+0x31e>
    d3de:	f24c 3319 	movw	r3, #49945	; 0xc319
    d3e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3e6:	2200      	movs	r2, #0
    d3e8:	701a      	strb	r2, [r3, #0]
    d3ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    d3ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3f2:	781b      	ldrb	r3, [r3, #0]
    d3f4:	461a      	mov	r2, r3
    d3f6:	f64c 132c 	movw	r3, #51500	; 0xc92c
    d3fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3fe:	7819      	ldrb	r1, [r3, #0]
    d400:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d408:	5499      	strb	r1, [r3, r2]
    d40a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d40e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d412:	781a      	ldrb	r2, [r3, #0]
    d414:	f64c 132c 	movw	r3, #51500	; 0xc92c
    d418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d41c:	781b      	ldrb	r3, [r3, #0]
    d41e:	4413      	add	r3, r2
    d420:	b2da      	uxtb	r2, r3
    d422:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d42a:	701a      	strb	r2, [r3, #0]
    d42c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d434:	781a      	ldrb	r2, [r3, #0]
    d436:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d43a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d43e:	781b      	ldrb	r3, [r3, #0]
    d440:	4413      	add	r3, r2
    d442:	b2da      	uxtb	r2, r3
    d444:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d44c:	701a      	strb	r2, [r3, #0]
    d44e:	f24c 3319 	movw	r3, #49945	; 0xc319
    d452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d456:	781b      	ldrb	r3, [r3, #0]
    d458:	3301      	adds	r3, #1
    d45a:	b2da      	uxtb	r2, r3
    d45c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d464:	701a      	strb	r2, [r3, #0]
    d466:	f24c 3319 	movw	r3, #49945	; 0xc319
    d46a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d46e:	781b      	ldrb	r3, [r3, #0]
    d470:	2bff      	cmp	r3, #255	; 0xff
    d472:	d105      	bne.n	d480 <radio_control_task+0x3b4>
    d474:	f24c 3319 	movw	r3, #49945	; 0xc319
    d478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d47c:	2200      	movs	r2, #0
    d47e:	701a      	strb	r2, [r3, #0]
    d480:	f24c 3319 	movw	r3, #49945	; 0xc319
    d484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d488:	781b      	ldrb	r3, [r3, #0]
    d48a:	461a      	mov	r2, r3
    d48c:	f24c 3303 	movw	r3, #49923	; 0xc303
    d490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d494:	7819      	ldrb	r1, [r3, #0]
    d496:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d49a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d49e:	5499      	strb	r1, [r3, r2]
    d4a0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d4a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4a8:	781a      	ldrb	r2, [r3, #0]
    d4aa:	f24c 3303 	movw	r3, #49923	; 0xc303
    d4ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4b2:	781b      	ldrb	r3, [r3, #0]
    d4b4:	4413      	add	r3, r2
    d4b6:	b2da      	uxtb	r2, r3
    d4b8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d4bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4c0:	701a      	strb	r2, [r3, #0]
    d4c2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d4c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ca:	781a      	ldrb	r2, [r3, #0]
    d4cc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d4d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4d4:	781b      	ldrb	r3, [r3, #0]
    d4d6:	4413      	add	r3, r2
    d4d8:	b2da      	uxtb	r2, r3
    d4da:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d4de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4e2:	701a      	strb	r2, [r3, #0]
    d4e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    d4e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ec:	781b      	ldrb	r3, [r3, #0]
    d4ee:	3301      	adds	r3, #1
    d4f0:	b2da      	uxtb	r2, r3
    d4f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    d4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4fa:	701a      	strb	r2, [r3, #0]
    d4fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    d500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d504:	781b      	ldrb	r3, [r3, #0]
    d506:	2bff      	cmp	r3, #255	; 0xff
    d508:	d105      	bne.n	d516 <radio_control_task+0x44a>
    d50a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d50e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d512:	2200      	movs	r2, #0
    d514:	701a      	strb	r2, [r3, #0]
    d516:	f24c 3319 	movw	r3, #49945	; 0xc319
    d51a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d51e:	781b      	ldrb	r3, [r3, #0]
    d520:	461a      	mov	r2, r3
    d522:	f240 533c 	movw	r3, #1340	; 0x53c
    d526:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d52a:	7819      	ldrb	r1, [r3, #0]
    d52c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d534:	5499      	strb	r1, [r3, r2]
    d536:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d53a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d53e:	781a      	ldrb	r2, [r3, #0]
    d540:	f240 533c 	movw	r3, #1340	; 0x53c
    d544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d548:	781b      	ldrb	r3, [r3, #0]
    d54a:	4413      	add	r3, r2
    d54c:	b2da      	uxtb	r2, r3
    d54e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d556:	701a      	strb	r2, [r3, #0]
    d558:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d55c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d560:	781a      	ldrb	r2, [r3, #0]
    d562:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d56a:	781b      	ldrb	r3, [r3, #0]
    d56c:	4413      	add	r3, r2
    d56e:	b2da      	uxtb	r2, r3
    d570:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d578:	701a      	strb	r2, [r3, #0]
    d57a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d57e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d582:	781b      	ldrb	r3, [r3, #0]
    d584:	3301      	adds	r3, #1
    d586:	b2da      	uxtb	r2, r3
    d588:	f24c 3319 	movw	r3, #49945	; 0xc319
    d58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d590:	701a      	strb	r2, [r3, #0]
    d592:	f24c 3319 	movw	r3, #49945	; 0xc319
    d596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d59a:	781b      	ldrb	r3, [r3, #0]
    d59c:	2bff      	cmp	r3, #255	; 0xff
    d59e:	d105      	bne.n	d5ac <radio_control_task+0x4e0>
    d5a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    d5a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5a8:	2200      	movs	r2, #0
    d5aa:	701a      	strb	r2, [r3, #0]
    d5ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    d5b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5b4:	781b      	ldrb	r3, [r3, #0]
    d5b6:	461a      	mov	r2, r3
    d5b8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d5bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5c0:	7819      	ldrb	r1, [r3, #0]
    d5c2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d5c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ca:	5499      	strb	r1, [r3, r2]
    d5cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    d5d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5d4:	781b      	ldrb	r3, [r3, #0]
    d5d6:	3301      	adds	r3, #1
    d5d8:	b2da      	uxtb	r2, r3
    d5da:	f24c 3319 	movw	r3, #49945	; 0xc319
    d5de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5e2:	701a      	strb	r2, [r3, #0]
    d5e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    d5e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ec:	781b      	ldrb	r3, [r3, #0]
    d5ee:	2bff      	cmp	r3, #255	; 0xff
    d5f0:	d105      	bne.n	d5fe <radio_control_task+0x532>
    d5f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    d5f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5fa:	2200      	movs	r2, #0
    d5fc:	701a      	strb	r2, [r3, #0]
    d5fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    d602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d606:	781b      	ldrb	r3, [r3, #0]
    d608:	461a      	mov	r2, r3
    d60a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d60e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d612:	7819      	ldrb	r1, [r3, #0]
    d614:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d61c:	5499      	strb	r1, [r3, r2]
    d61e:	f24c 3319 	movw	r3, #49945	; 0xc319
    d622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d626:	781b      	ldrb	r3, [r3, #0]
    d628:	3301      	adds	r3, #1
    d62a:	b2da      	uxtb	r2, r3
    d62c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d630:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d634:	701a      	strb	r2, [r3, #0]
    d636:	f24c 3319 	movw	r3, #49945	; 0xc319
    d63a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d63e:	781b      	ldrb	r3, [r3, #0]
    d640:	2bff      	cmp	r3, #255	; 0xff
    d642:	d105      	bne.n	d650 <radio_control_task+0x584>
    d644:	f24c 3319 	movw	r3, #49945	; 0xc319
    d648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d64c:	2200      	movs	r2, #0
    d64e:	701a      	strb	r2, [r3, #0]
    d650:	f242 0339 	movw	r3, #8249	; 0x2039
    d654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d658:	781b      	ldrb	r3, [r3, #0]
    d65a:	b2db      	uxtb	r3, r3
    d65c:	f003 0310 	and.w	r3, r3, #16
    d660:	2b00      	cmp	r3, #0
    d662:	d15a      	bne.n	d71a <radio_control_task+0x64e>
    d664:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d66c:	781b      	ldrb	r3, [r3, #0]
    d66e:	b2db      	uxtb	r3, r3
    d670:	461a      	mov	r2, r3
    d672:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d67a:	5c9a      	ldrb	r2, [r3, r2]
    d67c:	f24c 431b 	movw	r3, #50203	; 0xc41b
    d680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d684:	701a      	strb	r2, [r3, #0]
    d686:	f24c 431c 	movw	r3, #50204	; 0xc41c
    d68a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d68e:	2200      	movs	r2, #0
    d690:	701a      	strb	r2, [r3, #0]
    d692:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d69a:	781b      	ldrb	r3, [r3, #0]
    d69c:	b2db      	uxtb	r3, r3
    d69e:	3301      	adds	r3, #1
    d6a0:	b2da      	uxtb	r2, r3
    d6a2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d6a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6aa:	701a      	strb	r2, [r3, #0]
    d6ac:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d6b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6b4:	781b      	ldrb	r3, [r3, #0]
    d6b6:	b2db      	uxtb	r3, r3
    d6b8:	2bff      	cmp	r3, #255	; 0xff
    d6ba:	d105      	bne.n	d6c8 <radio_control_task+0x5fc>
    d6bc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d6c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6c4:	2200      	movs	r2, #0
    d6c6:	701a      	strb	r2, [r3, #0]
    d6c8:	f242 0338 	movw	r3, #8248	; 0x2038
    d6cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6d0:	f242 0238 	movw	r2, #8248	; 0x2038
    d6d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d6d8:	7812      	ldrb	r2, [r2, #0]
    d6da:	b2d2      	uxtb	r2, r2
    d6dc:	f042 0201 	orr.w	r2, r2, #1
    d6e0:	b2d2      	uxtb	r2, r2
    d6e2:	701a      	strb	r2, [r3, #0]
    d6e4:	f242 0339 	movw	r3, #8249	; 0x2039
    d6e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6ec:	f242 0239 	movw	r2, #8249	; 0x2039
    d6f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d6f4:	7812      	ldrb	r2, [r2, #0]
    d6f6:	b2d2      	uxtb	r2, r2
    d6f8:	f042 0210 	orr.w	r2, r2, #16
    d6fc:	b2d2      	uxtb	r2, r2
    d6fe:	701a      	strb	r2, [r3, #0]
    d700:	e00b      	b.n	d71a <radio_control_task+0x64e>
    d702:	f24c 3318 	movw	r3, #49944	; 0xc318
    d706:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d70a:	781b      	ldrb	r3, [r3, #0]
    d70c:	3301      	adds	r3, #1
    d70e:	b2da      	uxtb	r2, r3
    d710:	f24c 3318 	movw	r3, #49944	; 0xc318
    d714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d718:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d71a:	f24c 4320 	movw	r3, #50208	; 0xc420
    d71e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d722:	885b      	ldrh	r3, [r3, #2]
    d724:	b21b      	sxth	r3, r3
    d726:	4618      	mov	r0, r3
    d728:	f00a fe0a 	bl	18340 <__aeabi_i2f>
    d72c:	4603      	mov	r3, r0
    d72e:	4618      	mov	r0, r3
    d730:	f04f 0100 	mov.w	r1, #0
    d734:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d738:	f00a ff0a 	bl	18550 <__aeabi_fdiv>
    d73c:	4603      	mov	r3, r0
    d73e:	4618      	mov	r0, r3
    d740:	f00a f9be 	bl	17ac0 <__aeabi_f2d>
    d744:	4602      	mov	r2, r0
    d746:	460b      	mov	r3, r1
    d748:	4610      	mov	r0, r2
    d74a:	4619      	mov	r1, r3
    d74c:	a346      	add	r3, pc, #280	; (adr r3, d868 <radio_control_task+0x79c>)
    d74e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d752:	f00a fa09 	bl	17b68 <__aeabi_dmul>
    d756:	4602      	mov	r2, r0
    d758:	460b      	mov	r3, r1
    d75a:	4610      	mov	r0, r2
    d75c:	4619      	mov	r1, r3
    d75e:	f04f 0200 	mov.w	r2, #0
    d762:	f04f 0300 	mov.w	r3, #0
    d766:	f00a f84d 	bl	17804 <__adddf3>
    d76a:	4602      	mov	r2, r0
    d76c:	460b      	mov	r3, r1
    d76e:	4610      	mov	r0, r2
    d770:	4619      	mov	r1, r3
    d772:	f00a fcdb 	bl	1812c <__aeabi_d2f>
    d776:	4602      	mov	r2, r0
    d778:	f24c 6344 	movw	r3, #50756	; 0xc644
    d77c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d780:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d782:	f24c 4320 	movw	r3, #50208	; 0xc420
    d786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d78a:	889b      	ldrh	r3, [r3, #4]
    d78c:	b21b      	sxth	r3, r3
    d78e:	4618      	mov	r0, r3
    d790:	f00a fdd6 	bl	18340 <__aeabi_i2f>
    d794:	4603      	mov	r3, r0
    d796:	4618      	mov	r0, r3
    d798:	f04f 0100 	mov.w	r1, #0
    d79c:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d7a0:	f00a fed6 	bl	18550 <__aeabi_fdiv>
    d7a4:	4603      	mov	r3, r0
    d7a6:	4618      	mov	r0, r3
    d7a8:	f00a f98a 	bl	17ac0 <__aeabi_f2d>
    d7ac:	4602      	mov	r2, r0
    d7ae:	460b      	mov	r3, r1
    d7b0:	4610      	mov	r0, r2
    d7b2:	4619      	mov	r1, r3
    d7b4:	f04f 0200 	mov.w	r2, #0
    d7b8:	f04f 0300 	mov.w	r3, #0
    d7bc:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d7c0:	f00a f9d2 	bl	17b68 <__aeabi_dmul>
    d7c4:	4602      	mov	r2, r0
    d7c6:	460b      	mov	r3, r1
    d7c8:	4610      	mov	r0, r2
    d7ca:	4619      	mov	r1, r3
    d7cc:	f04f 0200 	mov.w	r2, #0
    d7d0:	f04f 0300 	mov.w	r3, #0
    d7d4:	f00a f816 	bl	17804 <__adddf3>
    d7d8:	4602      	mov	r2, r0
    d7da:	460b      	mov	r3, r1
    d7dc:	4610      	mov	r0, r2
    d7de:	4619      	mov	r1, r3
    d7e0:	f00a fca4 	bl	1812c <__aeabi_d2f>
    d7e4:	4602      	mov	r2, r0
    d7e6:	f24c 6348 	movw	r3, #50760	; 0xc648
    d7ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7ee:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d7f0:	f24c 4320 	movw	r3, #50208	; 0xc420
    d7f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7f8:	881a      	ldrh	r2, [r3, #0]
    d7fa:	f24c 634c 	movw	r3, #50764	; 0xc64c
    d7fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d802:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d804:	f24c 4320 	movw	r3, #50208	; 0xc420
    d808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d80c:	7c9a      	ldrb	r2, [r3, #18]
    d80e:	f24c 3304 	movw	r3, #49924	; 0xc304
    d812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d816:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d818:	f24c 4320 	movw	r3, #50208	; 0xc420
    d81c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d820:	7d5a      	ldrb	r2, [r3, #21]
    d822:	f24c 3302 	movw	r3, #49922	; 0xc302
    d826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d82a:	701a      	strb	r2, [r3, #0]

    events_update();
    d82c:	f7f9 fe7e 	bl	752c <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d830:	f7f8 fc7e 	bl	6130 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d834:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d83c:	781b      	ldrb	r3, [r3, #0]
    d83e:	2b02      	cmp	r3, #2
    d840:	d10e      	bne.n	d860 <radio_control_task+0x794>
    d842:	f24c 4320 	movw	r3, #50208	; 0xc420
    d846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d84a:	881b      	ldrh	r3, [r3, #0]
    d84c:	b21b      	sxth	r3, r3
    d84e:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d852:	dd05      	ble.n	d860 <radio_control_task+0x794>
	launch = TRUE;
    d854:	f24c 3310 	movw	r3, #49936	; 0xc310
    d858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d85c:	2201      	movs	r2, #1
    d85e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d860:	3708      	adds	r7, #8
    d862:	46bd      	mov	sp, r7
    d864:	bd80      	pop	{r7, pc}
    d866:	bf00      	nop
    d868:	33333333 	.word	0x33333333
    d86c:	bfe33333 	.word	0xbfe33333

0000d870 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d870:	b580      	push	{r7, lr}
    d872:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d874:	f24c 23fe 	movw	r3, #49918	; 0xc2fe
    d878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d87c:	2203      	movs	r2, #3
    d87e:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d880:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d888:	781b      	ldrb	r3, [r3, #0]
    d88a:	2b03      	cmp	r3, #3
    d88c:	d102      	bne.n	d894 <navigation_update+0x24>
    nav_home();
    d88e:	f007 fa9b 	bl	14dc8 <nav_home>
    d892:	e001      	b.n	d898 <navigation_update+0x28>
  else
    nav_update();
    d894:	f007 fabe 	bl	14e14 <nav_update>
}
    d898:	bd80      	pop	{r7, pc}
    d89a:	bf00      	nop

0000d89c <send_nav_values>:

void send_nav_values(void){
    d89c:	b480      	push	{r7}
    d89e:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d8a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    d8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8a8:	781a      	ldrb	r2, [r3, #0]
    d8aa:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d8ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8b2:	781b      	ldrb	r3, [r3, #0]
    d8b4:	b2db      	uxtb	r3, r3
    d8b6:	429a      	cmp	r2, r3
    d8b8:	d313      	bcc.n	d8e2 <send_nav_values+0x46>
    d8ba:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d8be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8c2:	781b      	ldrb	r3, [r3, #0]
    d8c4:	b2db      	uxtb	r3, r3
    d8c6:	461a      	mov	r2, r3
    d8c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    d8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8d0:	781b      	ldrb	r3, [r3, #0]
    d8d2:	1ad3      	subs	r3, r2, r3
    d8d4:	33ff      	adds	r3, #255	; 0xff
    d8d6:	2b1e      	cmp	r3, #30
    d8d8:	bfd4      	ite	le
    d8da:	2300      	movle	r3, #0
    d8dc:	2301      	movgt	r3, #1
    d8de:	b2db      	uxtb	r3, r3
    d8e0:	e011      	b.n	d906 <send_nav_values+0x6a>
    d8e2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d8e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8ea:	781b      	ldrb	r3, [r3, #0]
    d8ec:	b2db      	uxtb	r3, r3
    d8ee:	461a      	mov	r2, r3
    d8f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    d8f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8f8:	781b      	ldrb	r3, [r3, #0]
    d8fa:	1ad3      	subs	r3, r2, r3
    d8fc:	2b1e      	cmp	r3, #30
    d8fe:	bfd4      	ite	le
    d900:	2300      	movle	r3, #0
    d902:	2301      	movgt	r3, #1
    d904:	b2db      	uxtb	r3, r3
    d906:	2b00      	cmp	r3, #0
    d908:	f001 8094 	beq.w	ea34 <send_nav_values+0x1198>
    d90c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d914:	781b      	ldrb	r3, [r3, #0]
    d916:	461a      	mov	r2, r3
    d918:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d920:	2105      	movs	r1, #5
    d922:	5499      	strb	r1, [r3, r2]
    d924:	f24c 3319 	movw	r3, #49945	; 0xc319
    d928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d92c:	781b      	ldrb	r3, [r3, #0]
    d92e:	3301      	adds	r3, #1
    d930:	b2da      	uxtb	r2, r3
    d932:	f24c 3319 	movw	r3, #49945	; 0xc319
    d936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d93a:	701a      	strb	r2, [r3, #0]
    d93c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d944:	781b      	ldrb	r3, [r3, #0]
    d946:	2bff      	cmp	r3, #255	; 0xff
    d948:	d105      	bne.n	d956 <send_nav_values+0xba>
    d94a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d94e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d952:	2200      	movs	r2, #0
    d954:	701a      	strb	r2, [r3, #0]
    d956:	f24c 3319 	movw	r3, #49945	; 0xc319
    d95a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d95e:	781b      	ldrb	r3, [r3, #0]
    d960:	461a      	mov	r2, r3
    d962:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d96a:	210a      	movs	r1, #10
    d96c:	5499      	strb	r1, [r3, r2]
    d96e:	f24c 3319 	movw	r3, #49945	; 0xc319
    d972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d976:	781b      	ldrb	r3, [r3, #0]
    d978:	3301      	adds	r3, #1
    d97a:	b2da      	uxtb	r2, r3
    d97c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d984:	701a      	strb	r2, [r3, #0]
    d986:	f24c 3319 	movw	r3, #49945	; 0xc319
    d98a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d98e:	781b      	ldrb	r3, [r3, #0]
    d990:	2bff      	cmp	r3, #255	; 0xff
    d992:	d105      	bne.n	d9a0 <send_nav_values+0x104>
    d994:	f24c 3319 	movw	r3, #49945	; 0xc319
    d998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d99c:	2200      	movs	r2, #0
    d99e:	701a      	strb	r2, [r3, #0]
    d9a0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d9a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9a8:	220a      	movs	r2, #10
    d9aa:	701a      	strb	r2, [r3, #0]
    d9ac:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d9b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9b4:	220a      	movs	r2, #10
    d9b6:	701a      	strb	r2, [r3, #0]
    d9b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    d9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9c0:	781b      	ldrb	r3, [r3, #0]
    d9c2:	461a      	mov	r2, r3
    d9c4:	f24c 6371 	movw	r3, #50801	; 0xc671
    d9c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9cc:	7819      	ldrb	r1, [r3, #0]
    d9ce:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d9d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9d6:	5499      	strb	r1, [r3, r2]
    d9d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9e0:	781a      	ldrb	r2, [r3, #0]
    d9e2:	f24c 6371 	movw	r3, #50801	; 0xc671
    d9e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ea:	781b      	ldrb	r3, [r3, #0]
    d9ec:	4413      	add	r3, r2
    d9ee:	b2da      	uxtb	r2, r3
    d9f0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d9f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9f8:	701a      	strb	r2, [r3, #0]
    d9fa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d9fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da02:	781a      	ldrb	r2, [r3, #0]
    da04:	f24c 431d 	movw	r3, #50205	; 0xc41d
    da08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da0c:	781b      	ldrb	r3, [r3, #0]
    da0e:	4413      	add	r3, r2
    da10:	b2da      	uxtb	r2, r3
    da12:	f24c 431e 	movw	r3, #50206	; 0xc41e
    da16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da1a:	701a      	strb	r2, [r3, #0]
    da1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    da20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da24:	781b      	ldrb	r3, [r3, #0]
    da26:	3301      	adds	r3, #1
    da28:	b2da      	uxtb	r2, r3
    da2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    da2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da32:	701a      	strb	r2, [r3, #0]
    da34:	f24c 3319 	movw	r3, #49945	; 0xc319
    da38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da3c:	781b      	ldrb	r3, [r3, #0]
    da3e:	2bff      	cmp	r3, #255	; 0xff
    da40:	d105      	bne.n	da4e <send_nav_values+0x1b2>
    da42:	f24c 3319 	movw	r3, #49945	; 0xc319
    da46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da4a:	2200      	movs	r2, #0
    da4c:	701a      	strb	r2, [r3, #0]
    da4e:	f24c 3319 	movw	r3, #49945	; 0xc319
    da52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da56:	781b      	ldrb	r3, [r3, #0]
    da58:	461a      	mov	r2, r3
    da5a:	f24c 6370 	movw	r3, #50800	; 0xc670
    da5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da62:	7819      	ldrb	r1, [r3, #0]
    da64:	f24c 331c 	movw	r3, #49948	; 0xc31c
    da68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da6c:	5499      	strb	r1, [r3, r2]
    da6e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    da72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da76:	781a      	ldrb	r2, [r3, #0]
    da78:	f24c 6370 	movw	r3, #50800	; 0xc670
    da7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da80:	781b      	ldrb	r3, [r3, #0]
    da82:	4413      	add	r3, r2
    da84:	b2da      	uxtb	r2, r3
    da86:	f24c 431d 	movw	r3, #50205	; 0xc41d
    da8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da8e:	701a      	strb	r2, [r3, #0]
    da90:	f24c 431e 	movw	r3, #50206	; 0xc41e
    da94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da98:	781a      	ldrb	r2, [r3, #0]
    da9a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    da9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daa2:	781b      	ldrb	r3, [r3, #0]
    daa4:	4413      	add	r3, r2
    daa6:	b2da      	uxtb	r2, r3
    daa8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    daac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dab0:	701a      	strb	r2, [r3, #0]
    dab2:	f24c 3319 	movw	r3, #49945	; 0xc319
    dab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daba:	781b      	ldrb	r3, [r3, #0]
    dabc:	3301      	adds	r3, #1
    dabe:	b2da      	uxtb	r2, r3
    dac0:	f24c 3319 	movw	r3, #49945	; 0xc319
    dac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dac8:	701a      	strb	r2, [r3, #0]
    daca:	f24c 3319 	movw	r3, #49945	; 0xc319
    dace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dad2:	781b      	ldrb	r3, [r3, #0]
    dad4:	2bff      	cmp	r3, #255	; 0xff
    dad6:	d105      	bne.n	dae4 <send_nav_values+0x248>
    dad8:	f24c 3319 	movw	r3, #49945	; 0xc319
    dadc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dae0:	2200      	movs	r2, #0
    dae2:	701a      	strb	r2, [r3, #0]
    dae4:	f24c 3319 	movw	r3, #49945	; 0xc319
    dae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daec:	781b      	ldrb	r3, [r3, #0]
    daee:	461a      	mov	r2, r3
    daf0:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    daf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daf8:	7819      	ldrb	r1, [r3, #0]
    dafa:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dafe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db02:	5499      	strb	r1, [r3, r2]
    db04:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    db08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db0c:	781a      	ldrb	r2, [r3, #0]
    db0e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    db12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db16:	781b      	ldrb	r3, [r3, #0]
    db18:	4413      	add	r3, r2
    db1a:	b2da      	uxtb	r2, r3
    db1c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    db20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db24:	701a      	strb	r2, [r3, #0]
    db26:	f24c 431e 	movw	r3, #50206	; 0xc41e
    db2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db2e:	781a      	ldrb	r2, [r3, #0]
    db30:	f24c 431d 	movw	r3, #50205	; 0xc41d
    db34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db38:	781b      	ldrb	r3, [r3, #0]
    db3a:	4413      	add	r3, r2
    db3c:	b2da      	uxtb	r2, r3
    db3e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    db42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db46:	701a      	strb	r2, [r3, #0]
    db48:	f24c 3319 	movw	r3, #49945	; 0xc319
    db4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db50:	781b      	ldrb	r3, [r3, #0]
    db52:	3301      	adds	r3, #1
    db54:	b2da      	uxtb	r2, r3
    db56:	f24c 3319 	movw	r3, #49945	; 0xc319
    db5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db5e:	701a      	strb	r2, [r3, #0]
    db60:	f24c 3319 	movw	r3, #49945	; 0xc319
    db64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db68:	781b      	ldrb	r3, [r3, #0]
    db6a:	2bff      	cmp	r3, #255	; 0xff
    db6c:	d105      	bne.n	db7a <send_nav_values+0x2de>
    db6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    db72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db76:	2200      	movs	r2, #0
    db78:	701a      	strb	r2, [r3, #0]
    db7a:	f24c 3319 	movw	r3, #49945	; 0xc319
    db7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db82:	781b      	ldrb	r3, [r3, #0]
    db84:	461a      	mov	r2, r3
    db86:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    db8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db8e:	7859      	ldrb	r1, [r3, #1]
    db90:	f24c 331c 	movw	r3, #49948	; 0xc31c
    db94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db98:	5499      	strb	r1, [r3, r2]
    db9a:	4bd2      	ldr	r3, [pc, #840]	; (dee4 <send_nav_values+0x648>)
    db9c:	781a      	ldrb	r2, [r3, #0]
    db9e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dba6:	781b      	ldrb	r3, [r3, #0]
    dba8:	4413      	add	r3, r2
    dbaa:	b2da      	uxtb	r2, r3
    dbac:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dbb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbb4:	701a      	strb	r2, [r3, #0]
    dbb6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dbba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbbe:	781a      	ldrb	r2, [r3, #0]
    dbc0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dbc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbc8:	781b      	ldrb	r3, [r3, #0]
    dbca:	4413      	add	r3, r2
    dbcc:	b2da      	uxtb	r2, r3
    dbce:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dbd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbd6:	701a      	strb	r2, [r3, #0]
    dbd8:	f24c 3319 	movw	r3, #49945	; 0xc319
    dbdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbe0:	781b      	ldrb	r3, [r3, #0]
    dbe2:	3301      	adds	r3, #1
    dbe4:	b2da      	uxtb	r2, r3
    dbe6:	f24c 3319 	movw	r3, #49945	; 0xc319
    dbea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbee:	701a      	strb	r2, [r3, #0]
    dbf0:	f24c 3319 	movw	r3, #49945	; 0xc319
    dbf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbf8:	781b      	ldrb	r3, [r3, #0]
    dbfa:	2bff      	cmp	r3, #255	; 0xff
    dbfc:	d105      	bne.n	dc0a <send_nav_values+0x36e>
    dbfe:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc06:	2200      	movs	r2, #0
    dc08:	701a      	strb	r2, [r3, #0]
    dc0a:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc12:	781b      	ldrb	r3, [r3, #0]
    dc14:	461a      	mov	r2, r3
    dc16:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    dc1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc1e:	7899      	ldrb	r1, [r3, #2]
    dc20:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dc24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc28:	5499      	strb	r1, [r3, r2]
    dc2a:	4baf      	ldr	r3, [pc, #700]	; (dee8 <send_nav_values+0x64c>)
    dc2c:	781a      	ldrb	r2, [r3, #0]
    dc2e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dc32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc36:	781b      	ldrb	r3, [r3, #0]
    dc38:	4413      	add	r3, r2
    dc3a:	b2da      	uxtb	r2, r3
    dc3c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dc40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc44:	701a      	strb	r2, [r3, #0]
    dc46:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dc4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc4e:	781a      	ldrb	r2, [r3, #0]
    dc50:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dc54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc58:	781b      	ldrb	r3, [r3, #0]
    dc5a:	4413      	add	r3, r2
    dc5c:	b2da      	uxtb	r2, r3
    dc5e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dc62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc66:	701a      	strb	r2, [r3, #0]
    dc68:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc70:	781b      	ldrb	r3, [r3, #0]
    dc72:	3301      	adds	r3, #1
    dc74:	b2da      	uxtb	r2, r3
    dc76:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc7e:	701a      	strb	r2, [r3, #0]
    dc80:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc88:	781b      	ldrb	r3, [r3, #0]
    dc8a:	2bff      	cmp	r3, #255	; 0xff
    dc8c:	d105      	bne.n	dc9a <send_nav_values+0x3fe>
    dc8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc96:	2200      	movs	r2, #0
    dc98:	701a      	strb	r2, [r3, #0]
    dc9a:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dca2:	781b      	ldrb	r3, [r3, #0]
    dca4:	461a      	mov	r2, r3
    dca6:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    dcaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcae:	78d9      	ldrb	r1, [r3, #3]
    dcb0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dcb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcb8:	5499      	strb	r1, [r3, r2]
    dcba:	4b8c      	ldr	r3, [pc, #560]	; (deec <send_nav_values+0x650>)
    dcbc:	781a      	ldrb	r2, [r3, #0]
    dcbe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dcc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcc6:	781b      	ldrb	r3, [r3, #0]
    dcc8:	4413      	add	r3, r2
    dcca:	b2da      	uxtb	r2, r3
    dccc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dcd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcd4:	701a      	strb	r2, [r3, #0]
    dcd6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dcda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcde:	781a      	ldrb	r2, [r3, #0]
    dce0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dce8:	781b      	ldrb	r3, [r3, #0]
    dcea:	4413      	add	r3, r2
    dcec:	b2da      	uxtb	r2, r3
    dcee:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dcf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcf6:	701a      	strb	r2, [r3, #0]
    dcf8:	f24c 3319 	movw	r3, #49945	; 0xc319
    dcfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd00:	781b      	ldrb	r3, [r3, #0]
    dd02:	3301      	adds	r3, #1
    dd04:	b2da      	uxtb	r2, r3
    dd06:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd0e:	701a      	strb	r2, [r3, #0]
    dd10:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd18:	781b      	ldrb	r3, [r3, #0]
    dd1a:	2bff      	cmp	r3, #255	; 0xff
    dd1c:	d105      	bne.n	dd2a <send_nav_values+0x48e>
    dd1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd26:	2200      	movs	r2, #0
    dd28:	701a      	strb	r2, [r3, #0]
    dd2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd32:	781b      	ldrb	r3, [r3, #0]
    dd34:	461a      	mov	r2, r3
    dd36:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    dd3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd3e:	7819      	ldrb	r1, [r3, #0]
    dd40:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dd44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd48:	5499      	strb	r1, [r3, r2]
    dd4a:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    dd4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd52:	781a      	ldrb	r2, [r3, #0]
    dd54:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dd58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd5c:	781b      	ldrb	r3, [r3, #0]
    dd5e:	4413      	add	r3, r2
    dd60:	b2da      	uxtb	r2, r3
    dd62:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dd66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd6a:	701a      	strb	r2, [r3, #0]
    dd6c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dd70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd74:	781a      	ldrb	r2, [r3, #0]
    dd76:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dd7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd7e:	781b      	ldrb	r3, [r3, #0]
    dd80:	4413      	add	r3, r2
    dd82:	b2da      	uxtb	r2, r3
    dd84:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dd88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd8c:	701a      	strb	r2, [r3, #0]
    dd8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd96:	781b      	ldrb	r3, [r3, #0]
    dd98:	3301      	adds	r3, #1
    dd9a:	b2da      	uxtb	r2, r3
    dd9c:	f24c 3319 	movw	r3, #49945	; 0xc319
    dda0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dda4:	701a      	strb	r2, [r3, #0]
    dda6:	f24c 3319 	movw	r3, #49945	; 0xc319
    ddaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddae:	781b      	ldrb	r3, [r3, #0]
    ddb0:	2bff      	cmp	r3, #255	; 0xff
    ddb2:	d105      	bne.n	ddc0 <send_nav_values+0x524>
    ddb4:	f24c 3319 	movw	r3, #49945	; 0xc319
    ddb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddbc:	2200      	movs	r2, #0
    ddbe:	701a      	strb	r2, [r3, #0]
    ddc0:	f24c 3319 	movw	r3, #49945	; 0xc319
    ddc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddc8:	781b      	ldrb	r3, [r3, #0]
    ddca:	461a      	mov	r2, r3
    ddcc:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    ddd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddd4:	7859      	ldrb	r1, [r3, #1]
    ddd6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ddda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddde:	5499      	strb	r1, [r3, r2]
    dde0:	4b43      	ldr	r3, [pc, #268]	; (def0 <send_nav_values+0x654>)
    dde2:	781a      	ldrb	r2, [r3, #0]
    dde4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dde8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddec:	781b      	ldrb	r3, [r3, #0]
    ddee:	4413      	add	r3, r2
    ddf0:	b2da      	uxtb	r2, r3
    ddf2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ddf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddfa:	701a      	strb	r2, [r3, #0]
    ddfc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    de00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de04:	781a      	ldrb	r2, [r3, #0]
    de06:	f24c 431d 	movw	r3, #50205	; 0xc41d
    de0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de0e:	781b      	ldrb	r3, [r3, #0]
    de10:	4413      	add	r3, r2
    de12:	b2da      	uxtb	r2, r3
    de14:	f24c 431e 	movw	r3, #50206	; 0xc41e
    de18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de1c:	701a      	strb	r2, [r3, #0]
    de1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    de22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de26:	781b      	ldrb	r3, [r3, #0]
    de28:	3301      	adds	r3, #1
    de2a:	b2da      	uxtb	r2, r3
    de2c:	f24c 3319 	movw	r3, #49945	; 0xc319
    de30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de34:	701a      	strb	r2, [r3, #0]
    de36:	f24c 3319 	movw	r3, #49945	; 0xc319
    de3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de3e:	781b      	ldrb	r3, [r3, #0]
    de40:	2bff      	cmp	r3, #255	; 0xff
    de42:	d105      	bne.n	de50 <send_nav_values+0x5b4>
    de44:	f24c 3319 	movw	r3, #49945	; 0xc319
    de48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de4c:	2200      	movs	r2, #0
    de4e:	701a      	strb	r2, [r3, #0]
    de50:	f24c 3319 	movw	r3, #49945	; 0xc319
    de54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de58:	781b      	ldrb	r3, [r3, #0]
    de5a:	461a      	mov	r2, r3
    de5c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    de60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de64:	7899      	ldrb	r1, [r3, #2]
    de66:	f24c 331c 	movw	r3, #49948	; 0xc31c
    de6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de6e:	5499      	strb	r1, [r3, r2]
    de70:	4b20      	ldr	r3, [pc, #128]	; (def4 <send_nav_values+0x658>)
    de72:	781a      	ldrb	r2, [r3, #0]
    de74:	f24c 431d 	movw	r3, #50205	; 0xc41d
    de78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de7c:	781b      	ldrb	r3, [r3, #0]
    de7e:	4413      	add	r3, r2
    de80:	b2da      	uxtb	r2, r3
    de82:	f24c 431d 	movw	r3, #50205	; 0xc41d
    de86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de8a:	701a      	strb	r2, [r3, #0]
    de8c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    de90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de94:	781a      	ldrb	r2, [r3, #0]
    de96:	f24c 431d 	movw	r3, #50205	; 0xc41d
    de9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de9e:	781b      	ldrb	r3, [r3, #0]
    dea0:	4413      	add	r3, r2
    dea2:	b2da      	uxtb	r2, r3
    dea4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deac:	701a      	strb	r2, [r3, #0]
    deae:	f24c 3319 	movw	r3, #49945	; 0xc319
    deb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deb6:	781b      	ldrb	r3, [r3, #0]
    deb8:	3301      	adds	r3, #1
    deba:	b2da      	uxtb	r2, r3
    debc:	f24c 3319 	movw	r3, #49945	; 0xc319
    dec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dec4:	701a      	strb	r2, [r3, #0]
    dec6:	f24c 3319 	movw	r3, #49945	; 0xc319
    deca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dece:	781b      	ldrb	r3, [r3, #0]
    ded0:	2bff      	cmp	r3, #255	; 0xff
    ded2:	d111      	bne.n	def8 <send_nav_values+0x65c>
    ded4:	f24c 3319 	movw	r3, #49945	; 0xc319
    ded8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dedc:	2200      	movs	r2, #0
    dede:	701a      	strb	r2, [r3, #0]
    dee0:	e00a      	b.n	def8 <send_nav_values+0x65c>
    dee2:	bf00      	nop
    dee4:	2004c8cd 	.word	0x2004c8cd
    dee8:	2004c8ce 	.word	0x2004c8ce
    deec:	2004c8cf 	.word	0x2004c8cf
    def0:	2004c8d1 	.word	0x2004c8d1
    def4:	2004c8d2 	.word	0x2004c8d2
    def8:	f24c 3319 	movw	r3, #49945	; 0xc319
    defc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df00:	781b      	ldrb	r3, [r3, #0]
    df02:	461a      	mov	r2, r3
    df04:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    df08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df0c:	78d9      	ldrb	r1, [r3, #3]
    df0e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    df12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df16:	5499      	strb	r1, [r3, r2]
    df18:	4bd3      	ldr	r3, [pc, #844]	; (e268 <send_nav_values+0x9cc>)
    df1a:	781a      	ldrb	r2, [r3, #0]
    df1c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    df20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df24:	781b      	ldrb	r3, [r3, #0]
    df26:	4413      	add	r3, r2
    df28:	b2da      	uxtb	r2, r3
    df2a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    df2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df32:	701a      	strb	r2, [r3, #0]
    df34:	f24c 431e 	movw	r3, #50206	; 0xc41e
    df38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df3c:	781a      	ldrb	r2, [r3, #0]
    df3e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    df42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df46:	781b      	ldrb	r3, [r3, #0]
    df48:	4413      	add	r3, r2
    df4a:	b2da      	uxtb	r2, r3
    df4c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    df50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df54:	701a      	strb	r2, [r3, #0]
    df56:	f24c 3319 	movw	r3, #49945	; 0xc319
    df5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df5e:	781b      	ldrb	r3, [r3, #0]
    df60:	3301      	adds	r3, #1
    df62:	b2da      	uxtb	r2, r3
    df64:	f24c 3319 	movw	r3, #49945	; 0xc319
    df68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df6c:	701a      	strb	r2, [r3, #0]
    df6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    df72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df76:	781b      	ldrb	r3, [r3, #0]
    df78:	2bff      	cmp	r3, #255	; 0xff
    df7a:	d105      	bne.n	df88 <send_nav_values+0x6ec>
    df7c:	f24c 3319 	movw	r3, #49945	; 0xc319
    df80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df84:	2200      	movs	r2, #0
    df86:	701a      	strb	r2, [r3, #0]
    df88:	f24c 3319 	movw	r3, #49945	; 0xc319
    df8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df90:	781b      	ldrb	r3, [r3, #0]
    df92:	461a      	mov	r2, r3
    df94:	f24c 635c 	movw	r3, #50780	; 0xc65c
    df98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df9c:	7819      	ldrb	r1, [r3, #0]
    df9e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dfa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfa6:	5499      	strb	r1, [r3, r2]
    dfa8:	f24c 635c 	movw	r3, #50780	; 0xc65c
    dfac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfb0:	781a      	ldrb	r2, [r3, #0]
    dfb2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dfb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfba:	781b      	ldrb	r3, [r3, #0]
    dfbc:	4413      	add	r3, r2
    dfbe:	b2da      	uxtb	r2, r3
    dfc0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dfc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfc8:	701a      	strb	r2, [r3, #0]
    dfca:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dfce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfd2:	781a      	ldrb	r2, [r3, #0]
    dfd4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dfd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfdc:	781b      	ldrb	r3, [r3, #0]
    dfde:	4413      	add	r3, r2
    dfe0:	b2da      	uxtb	r2, r3
    dfe2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dfe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfea:	701a      	strb	r2, [r3, #0]
    dfec:	f24c 3319 	movw	r3, #49945	; 0xc319
    dff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dff4:	781b      	ldrb	r3, [r3, #0]
    dff6:	3301      	adds	r3, #1
    dff8:	b2da      	uxtb	r2, r3
    dffa:	f24c 3319 	movw	r3, #49945	; 0xc319
    dffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e002:	701a      	strb	r2, [r3, #0]
    e004:	f24c 3319 	movw	r3, #49945	; 0xc319
    e008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e00c:	781b      	ldrb	r3, [r3, #0]
    e00e:	2bff      	cmp	r3, #255	; 0xff
    e010:	d105      	bne.n	e01e <send_nav_values+0x782>
    e012:	f24c 3319 	movw	r3, #49945	; 0xc319
    e016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e01a:	2200      	movs	r2, #0
    e01c:	701a      	strb	r2, [r3, #0]
    e01e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e026:	781b      	ldrb	r3, [r3, #0]
    e028:	461a      	mov	r2, r3
    e02a:	f24c 635c 	movw	r3, #50780	; 0xc65c
    e02e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e032:	7859      	ldrb	r1, [r3, #1]
    e034:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e03c:	5499      	strb	r1, [r3, r2]
    e03e:	4b8b      	ldr	r3, [pc, #556]	; (e26c <send_nav_values+0x9d0>)
    e040:	781a      	ldrb	r2, [r3, #0]
    e042:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e04a:	781b      	ldrb	r3, [r3, #0]
    e04c:	4413      	add	r3, r2
    e04e:	b2da      	uxtb	r2, r3
    e050:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e058:	701a      	strb	r2, [r3, #0]
    e05a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e05e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e062:	781a      	ldrb	r2, [r3, #0]
    e064:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e06c:	781b      	ldrb	r3, [r3, #0]
    e06e:	4413      	add	r3, r2
    e070:	b2da      	uxtb	r2, r3
    e072:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e07a:	701a      	strb	r2, [r3, #0]
    e07c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e084:	781b      	ldrb	r3, [r3, #0]
    e086:	3301      	adds	r3, #1
    e088:	b2da      	uxtb	r2, r3
    e08a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e08e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e092:	701a      	strb	r2, [r3, #0]
    e094:	f24c 3319 	movw	r3, #49945	; 0xc319
    e098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e09c:	781b      	ldrb	r3, [r3, #0]
    e09e:	2bff      	cmp	r3, #255	; 0xff
    e0a0:	d105      	bne.n	e0ae <send_nav_values+0x812>
    e0a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    e0a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0aa:	2200      	movs	r2, #0
    e0ac:	701a      	strb	r2, [r3, #0]
    e0ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    e0b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0b6:	781b      	ldrb	r3, [r3, #0]
    e0b8:	461a      	mov	r2, r3
    e0ba:	f24c 635c 	movw	r3, #50780	; 0xc65c
    e0be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0c2:	7899      	ldrb	r1, [r3, #2]
    e0c4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e0c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0cc:	5499      	strb	r1, [r3, r2]
    e0ce:	4b68      	ldr	r3, [pc, #416]	; (e270 <send_nav_values+0x9d4>)
    e0d0:	781a      	ldrb	r2, [r3, #0]
    e0d2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0da:	781b      	ldrb	r3, [r3, #0]
    e0dc:	4413      	add	r3, r2
    e0de:	b2da      	uxtb	r2, r3
    e0e0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e0e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0e8:	701a      	strb	r2, [r3, #0]
    e0ea:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e0ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0f2:	781a      	ldrb	r2, [r3, #0]
    e0f4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e0f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0fc:	781b      	ldrb	r3, [r3, #0]
    e0fe:	4413      	add	r3, r2
    e100:	b2da      	uxtb	r2, r3
    e102:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e10a:	701a      	strb	r2, [r3, #0]
    e10c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e114:	781b      	ldrb	r3, [r3, #0]
    e116:	3301      	adds	r3, #1
    e118:	b2da      	uxtb	r2, r3
    e11a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e11e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e122:	701a      	strb	r2, [r3, #0]
    e124:	f24c 3319 	movw	r3, #49945	; 0xc319
    e128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e12c:	781b      	ldrb	r3, [r3, #0]
    e12e:	2bff      	cmp	r3, #255	; 0xff
    e130:	d105      	bne.n	e13e <send_nav_values+0x8a2>
    e132:	f24c 3319 	movw	r3, #49945	; 0xc319
    e136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e13a:	2200      	movs	r2, #0
    e13c:	701a      	strb	r2, [r3, #0]
    e13e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e146:	781b      	ldrb	r3, [r3, #0]
    e148:	461a      	mov	r2, r3
    e14a:	f24c 635c 	movw	r3, #50780	; 0xc65c
    e14e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e152:	78d9      	ldrb	r1, [r3, #3]
    e154:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e15c:	5499      	strb	r1, [r3, r2]
    e15e:	4b45      	ldr	r3, [pc, #276]	; (e274 <send_nav_values+0x9d8>)
    e160:	781a      	ldrb	r2, [r3, #0]
    e162:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e16a:	781b      	ldrb	r3, [r3, #0]
    e16c:	4413      	add	r3, r2
    e16e:	b2da      	uxtb	r2, r3
    e170:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e178:	701a      	strb	r2, [r3, #0]
    e17a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e17e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e182:	781a      	ldrb	r2, [r3, #0]
    e184:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e18c:	781b      	ldrb	r3, [r3, #0]
    e18e:	4413      	add	r3, r2
    e190:	b2da      	uxtb	r2, r3
    e192:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e19a:	701a      	strb	r2, [r3, #0]
    e19c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e1a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1a4:	781b      	ldrb	r3, [r3, #0]
    e1a6:	3301      	adds	r3, #1
    e1a8:	b2da      	uxtb	r2, r3
    e1aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    e1ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1b2:	701a      	strb	r2, [r3, #0]
    e1b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    e1b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1bc:	781b      	ldrb	r3, [r3, #0]
    e1be:	2bff      	cmp	r3, #255	; 0xff
    e1c0:	d105      	bne.n	e1ce <send_nav_values+0x932>
    e1c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    e1c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ca:	2200      	movs	r2, #0
    e1cc:	701a      	strb	r2, [r3, #0]
    e1ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    e1d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1d6:	781b      	ldrb	r3, [r3, #0]
    e1d8:	461a      	mov	r2, r3
    e1da:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e1de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1e2:	7819      	ldrb	r1, [r3, #0]
    e1e4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e1e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ec:	5499      	strb	r1, [r3, r2]
    e1ee:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e1f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1f6:	781a      	ldrb	r2, [r3, #0]
    e1f8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e1fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e200:	781b      	ldrb	r3, [r3, #0]
    e202:	4413      	add	r3, r2
    e204:	b2da      	uxtb	r2, r3
    e206:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e20a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e20e:	701a      	strb	r2, [r3, #0]
    e210:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e218:	781a      	ldrb	r2, [r3, #0]
    e21a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e21e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e222:	781b      	ldrb	r3, [r3, #0]
    e224:	4413      	add	r3, r2
    e226:	b2da      	uxtb	r2, r3
    e228:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e22c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e230:	701a      	strb	r2, [r3, #0]
    e232:	f24c 3319 	movw	r3, #49945	; 0xc319
    e236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e23a:	781b      	ldrb	r3, [r3, #0]
    e23c:	3301      	adds	r3, #1
    e23e:	b2da      	uxtb	r2, r3
    e240:	f24c 3319 	movw	r3, #49945	; 0xc319
    e244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e248:	701a      	strb	r2, [r3, #0]
    e24a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e24e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e252:	781b      	ldrb	r3, [r3, #0]
    e254:	2bff      	cmp	r3, #255	; 0xff
    e256:	d10f      	bne.n	e278 <send_nav_values+0x9dc>
    e258:	f24c 3319 	movw	r3, #49945	; 0xc319
    e25c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e260:	2200      	movs	r2, #0
    e262:	701a      	strb	r2, [r3, #0]
    e264:	e008      	b.n	e278 <send_nav_values+0x9dc>
    e266:	bf00      	nop
    e268:	2004c8d3 	.word	0x2004c8d3
    e26c:	2004c65d 	.word	0x2004c65d
    e270:	2004c65e 	.word	0x2004c65e
    e274:	2004c65f 	.word	0x2004c65f
    e278:	f24c 3319 	movw	r3, #49945	; 0xc319
    e27c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e280:	781b      	ldrb	r3, [r3, #0]
    e282:	461a      	mov	r2, r3
    e284:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e288:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e28c:	7859      	ldrb	r1, [r3, #1]
    e28e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e296:	5499      	strb	r1, [r3, r2]
    e298:	4bd1      	ldr	r3, [pc, #836]	; (e5e0 <send_nav_values+0xd44>)
    e29a:	781a      	ldrb	r2, [r3, #0]
    e29c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e2a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2a4:	781b      	ldrb	r3, [r3, #0]
    e2a6:	4413      	add	r3, r2
    e2a8:	b2da      	uxtb	r2, r3
    e2aa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2b2:	701a      	strb	r2, [r3, #0]
    e2b4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e2b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2bc:	781a      	ldrb	r2, [r3, #0]
    e2be:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e2c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2c6:	781b      	ldrb	r3, [r3, #0]
    e2c8:	4413      	add	r3, r2
    e2ca:	b2da      	uxtb	r2, r3
    e2cc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2d4:	701a      	strb	r2, [r3, #0]
    e2d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e2da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2de:	781b      	ldrb	r3, [r3, #0]
    e2e0:	3301      	adds	r3, #1
    e2e2:	b2da      	uxtb	r2, r3
    e2e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    e2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ec:	701a      	strb	r2, [r3, #0]
    e2ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    e2f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2f6:	781b      	ldrb	r3, [r3, #0]
    e2f8:	2bff      	cmp	r3, #255	; 0xff
    e2fa:	d105      	bne.n	e308 <send_nav_values+0xa6c>
    e2fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    e300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e304:	2200      	movs	r2, #0
    e306:	701a      	strb	r2, [r3, #0]
    e308:	f24c 3319 	movw	r3, #49945	; 0xc319
    e30c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e310:	781b      	ldrb	r3, [r3, #0]
    e312:	461a      	mov	r2, r3
    e314:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e31c:	7899      	ldrb	r1, [r3, #2]
    e31e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e326:	5499      	strb	r1, [r3, r2]
    e328:	4bae      	ldr	r3, [pc, #696]	; (e5e4 <send_nav_values+0xd48>)
    e32a:	781a      	ldrb	r2, [r3, #0]
    e32c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e334:	781b      	ldrb	r3, [r3, #0]
    e336:	4413      	add	r3, r2
    e338:	b2da      	uxtb	r2, r3
    e33a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e33e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e342:	701a      	strb	r2, [r3, #0]
    e344:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e34c:	781a      	ldrb	r2, [r3, #0]
    e34e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e352:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e356:	781b      	ldrb	r3, [r3, #0]
    e358:	4413      	add	r3, r2
    e35a:	b2da      	uxtb	r2, r3
    e35c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e364:	701a      	strb	r2, [r3, #0]
    e366:	f24c 3319 	movw	r3, #49945	; 0xc319
    e36a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e36e:	781b      	ldrb	r3, [r3, #0]
    e370:	3301      	adds	r3, #1
    e372:	b2da      	uxtb	r2, r3
    e374:	f24c 3319 	movw	r3, #49945	; 0xc319
    e378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e37c:	701a      	strb	r2, [r3, #0]
    e37e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e386:	781b      	ldrb	r3, [r3, #0]
    e388:	2bff      	cmp	r3, #255	; 0xff
    e38a:	d105      	bne.n	e398 <send_nav_values+0xafc>
    e38c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e394:	2200      	movs	r2, #0
    e396:	701a      	strb	r2, [r3, #0]
    e398:	f24c 3319 	movw	r3, #49945	; 0xc319
    e39c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3a0:	781b      	ldrb	r3, [r3, #0]
    e3a2:	461a      	mov	r2, r3
    e3a4:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e3a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ac:	78d9      	ldrb	r1, [r3, #3]
    e3ae:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e3b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3b6:	5499      	strb	r1, [r3, r2]
    e3b8:	4b8b      	ldr	r3, [pc, #556]	; (e5e8 <send_nav_values+0xd4c>)
    e3ba:	781a      	ldrb	r2, [r3, #0]
    e3bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e3c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3c4:	781b      	ldrb	r3, [r3, #0]
    e3c6:	4413      	add	r3, r2
    e3c8:	b2da      	uxtb	r2, r3
    e3ca:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e3ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3d2:	701a      	strb	r2, [r3, #0]
    e3d4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e3d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3dc:	781a      	ldrb	r2, [r3, #0]
    e3de:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e3e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3e6:	781b      	ldrb	r3, [r3, #0]
    e3e8:	4413      	add	r3, r2
    e3ea:	b2da      	uxtb	r2, r3
    e3ec:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e3f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3f4:	701a      	strb	r2, [r3, #0]
    e3f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e3fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3fe:	781b      	ldrb	r3, [r3, #0]
    e400:	3301      	adds	r3, #1
    e402:	b2da      	uxtb	r2, r3
    e404:	f24c 3319 	movw	r3, #49945	; 0xc319
    e408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e40c:	701a      	strb	r2, [r3, #0]
    e40e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e416:	781b      	ldrb	r3, [r3, #0]
    e418:	2bff      	cmp	r3, #255	; 0xff
    e41a:	d105      	bne.n	e428 <send_nav_values+0xb8c>
    e41c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e424:	2200      	movs	r2, #0
    e426:	701a      	strb	r2, [r3, #0]
    e428:	f24c 3319 	movw	r3, #49945	; 0xc319
    e42c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e430:	781b      	ldrb	r3, [r3, #0]
    e432:	461a      	mov	r2, r3
    e434:	f240 5358 	movw	r3, #1368	; 0x558
    e438:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e43c:	7819      	ldrb	r1, [r3, #0]
    e43e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e446:	5499      	strb	r1, [r3, r2]
    e448:	f240 5358 	movw	r3, #1368	; 0x558
    e44c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e450:	781a      	ldrb	r2, [r3, #0]
    e452:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e45a:	781b      	ldrb	r3, [r3, #0]
    e45c:	4413      	add	r3, r2
    e45e:	b2da      	uxtb	r2, r3
    e460:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e468:	701a      	strb	r2, [r3, #0]
    e46a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e46e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e472:	781a      	ldrb	r2, [r3, #0]
    e474:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e47c:	781b      	ldrb	r3, [r3, #0]
    e47e:	4413      	add	r3, r2
    e480:	b2da      	uxtb	r2, r3
    e482:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e48a:	701a      	strb	r2, [r3, #0]
    e48c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e494:	781b      	ldrb	r3, [r3, #0]
    e496:	3301      	adds	r3, #1
    e498:	b2da      	uxtb	r2, r3
    e49a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4a2:	701a      	strb	r2, [r3, #0]
    e4a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    e4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ac:	781b      	ldrb	r3, [r3, #0]
    e4ae:	2bff      	cmp	r3, #255	; 0xff
    e4b0:	d105      	bne.n	e4be <send_nav_values+0xc22>
    e4b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    e4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ba:	2200      	movs	r2, #0
    e4bc:	701a      	strb	r2, [r3, #0]
    e4be:	f24c 3319 	movw	r3, #49945	; 0xc319
    e4c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4c6:	781b      	ldrb	r3, [r3, #0]
    e4c8:	461a      	mov	r2, r3
    e4ca:	f240 5358 	movw	r3, #1368	; 0x558
    e4ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4d2:	7859      	ldrb	r1, [r3, #1]
    e4d4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e4d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4dc:	5499      	strb	r1, [r3, r2]
    e4de:	4b43      	ldr	r3, [pc, #268]	; (e5ec <send_nav_values+0xd50>)
    e4e0:	781a      	ldrb	r2, [r3, #0]
    e4e2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e4e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ea:	781b      	ldrb	r3, [r3, #0]
    e4ec:	4413      	add	r3, r2
    e4ee:	b2da      	uxtb	r2, r3
    e4f0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e4f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4f8:	701a      	strb	r2, [r3, #0]
    e4fa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e4fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e502:	781a      	ldrb	r2, [r3, #0]
    e504:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e50c:	781b      	ldrb	r3, [r3, #0]
    e50e:	4413      	add	r3, r2
    e510:	b2da      	uxtb	r2, r3
    e512:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e51a:	701a      	strb	r2, [r3, #0]
    e51c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e524:	781b      	ldrb	r3, [r3, #0]
    e526:	3301      	adds	r3, #1
    e528:	b2da      	uxtb	r2, r3
    e52a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e52e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e532:	701a      	strb	r2, [r3, #0]
    e534:	f24c 3319 	movw	r3, #49945	; 0xc319
    e538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e53c:	781b      	ldrb	r3, [r3, #0]
    e53e:	2bff      	cmp	r3, #255	; 0xff
    e540:	d105      	bne.n	e54e <send_nav_values+0xcb2>
    e542:	f24c 3319 	movw	r3, #49945	; 0xc319
    e546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e54a:	2200      	movs	r2, #0
    e54c:	701a      	strb	r2, [r3, #0]
    e54e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e556:	781b      	ldrb	r3, [r3, #0]
    e558:	461a      	mov	r2, r3
    e55a:	f240 5358 	movw	r3, #1368	; 0x558
    e55e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e562:	7899      	ldrb	r1, [r3, #2]
    e564:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e56c:	5499      	strb	r1, [r3, r2]
    e56e:	4b20      	ldr	r3, [pc, #128]	; (e5f0 <send_nav_values+0xd54>)
    e570:	781a      	ldrb	r2, [r3, #0]
    e572:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e57a:	781b      	ldrb	r3, [r3, #0]
    e57c:	4413      	add	r3, r2
    e57e:	b2da      	uxtb	r2, r3
    e580:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e588:	701a      	strb	r2, [r3, #0]
    e58a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e58e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e592:	781a      	ldrb	r2, [r3, #0]
    e594:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e59c:	781b      	ldrb	r3, [r3, #0]
    e59e:	4413      	add	r3, r2
    e5a0:	b2da      	uxtb	r2, r3
    e5a2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e5a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5aa:	701a      	strb	r2, [r3, #0]
    e5ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    e5b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5b4:	781b      	ldrb	r3, [r3, #0]
    e5b6:	3301      	adds	r3, #1
    e5b8:	b2da      	uxtb	r2, r3
    e5ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    e5be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5c2:	701a      	strb	r2, [r3, #0]
    e5c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    e5c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5cc:	781b      	ldrb	r3, [r3, #0]
    e5ce:	2bff      	cmp	r3, #255	; 0xff
    e5d0:	d110      	bne.n	e5f4 <send_nav_values+0xd58>
    e5d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    e5d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5da:	2200      	movs	r2, #0
    e5dc:	701a      	strb	r2, [r3, #0]
    e5de:	e009      	b.n	e5f4 <send_nav_values+0xd58>
    e5e0:	2004c6a5 	.word	0x2004c6a5
    e5e4:	2004c6a6 	.word	0x2004c6a6
    e5e8:	2004c6a7 	.word	0x2004c6a7
    e5ec:	20000559 	.word	0x20000559
    e5f0:	2000055a 	.word	0x2000055a
    e5f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    e5f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5fc:	781b      	ldrb	r3, [r3, #0]
    e5fe:	461a      	mov	r2, r3
    e600:	f240 5358 	movw	r3, #1368	; 0x558
    e604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e608:	78d9      	ldrb	r1, [r3, #3]
    e60a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e60e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e612:	5499      	strb	r1, [r3, r2]
    e614:	4bc2      	ldr	r3, [pc, #776]	; (e920 <send_nav_values+0x1084>)
    e616:	781a      	ldrb	r2, [r3, #0]
    e618:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e61c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e620:	781b      	ldrb	r3, [r3, #0]
    e622:	4413      	add	r3, r2
    e624:	b2da      	uxtb	r2, r3
    e626:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e62a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e62e:	701a      	strb	r2, [r3, #0]
    e630:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e638:	781a      	ldrb	r2, [r3, #0]
    e63a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e63e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e642:	781b      	ldrb	r3, [r3, #0]
    e644:	4413      	add	r3, r2
    e646:	b2da      	uxtb	r2, r3
    e648:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e64c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e650:	701a      	strb	r2, [r3, #0]
    e652:	f24c 3319 	movw	r3, #49945	; 0xc319
    e656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e65a:	781b      	ldrb	r3, [r3, #0]
    e65c:	3301      	adds	r3, #1
    e65e:	b2da      	uxtb	r2, r3
    e660:	f24c 3319 	movw	r3, #49945	; 0xc319
    e664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e668:	701a      	strb	r2, [r3, #0]
    e66a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e672:	781b      	ldrb	r3, [r3, #0]
    e674:	2bff      	cmp	r3, #255	; 0xff
    e676:	d105      	bne.n	e684 <send_nav_values+0xde8>
    e678:	f24c 3319 	movw	r3, #49945	; 0xc319
    e67c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e680:	2200      	movs	r2, #0
    e682:	701a      	strb	r2, [r3, #0]
    e684:	f24c 3319 	movw	r3, #49945	; 0xc319
    e688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e68c:	781b      	ldrb	r3, [r3, #0]
    e68e:	461a      	mov	r2, r3
    e690:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e698:	7819      	ldrb	r1, [r3, #0]
    e69a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e69e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6a2:	5499      	strb	r1, [r3, r2]
    e6a4:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e6a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6ac:	781a      	ldrb	r2, [r3, #0]
    e6ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e6b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6b6:	781b      	ldrb	r3, [r3, #0]
    e6b8:	4413      	add	r3, r2
    e6ba:	b2da      	uxtb	r2, r3
    e6bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e6c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6c4:	701a      	strb	r2, [r3, #0]
    e6c6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e6ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6ce:	781a      	ldrb	r2, [r3, #0]
    e6d0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e6d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6d8:	781b      	ldrb	r3, [r3, #0]
    e6da:	4413      	add	r3, r2
    e6dc:	b2da      	uxtb	r2, r3
    e6de:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e6e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6e6:	701a      	strb	r2, [r3, #0]
    e6e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    e6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6f0:	781b      	ldrb	r3, [r3, #0]
    e6f2:	3301      	adds	r3, #1
    e6f4:	b2da      	uxtb	r2, r3
    e6f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e6fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6fe:	701a      	strb	r2, [r3, #0]
    e700:	f24c 3319 	movw	r3, #49945	; 0xc319
    e704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e708:	781b      	ldrb	r3, [r3, #0]
    e70a:	2bff      	cmp	r3, #255	; 0xff
    e70c:	d105      	bne.n	e71a <send_nav_values+0xe7e>
    e70e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e716:	2200      	movs	r2, #0
    e718:	701a      	strb	r2, [r3, #0]
    e71a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e71e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e722:	781b      	ldrb	r3, [r3, #0]
    e724:	461a      	mov	r2, r3
    e726:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e72a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e72e:	7859      	ldrb	r1, [r3, #1]
    e730:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e738:	5499      	strb	r1, [r3, r2]
    e73a:	4b7a      	ldr	r3, [pc, #488]	; (e924 <send_nav_values+0x1088>)
    e73c:	781a      	ldrb	r2, [r3, #0]
    e73e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e746:	781b      	ldrb	r3, [r3, #0]
    e748:	4413      	add	r3, r2
    e74a:	b2da      	uxtb	r2, r3
    e74c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e754:	701a      	strb	r2, [r3, #0]
    e756:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e75a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e75e:	781a      	ldrb	r2, [r3, #0]
    e760:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e768:	781b      	ldrb	r3, [r3, #0]
    e76a:	4413      	add	r3, r2
    e76c:	b2da      	uxtb	r2, r3
    e76e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e776:	701a      	strb	r2, [r3, #0]
    e778:	f24c 3319 	movw	r3, #49945	; 0xc319
    e77c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e780:	781b      	ldrb	r3, [r3, #0]
    e782:	3301      	adds	r3, #1
    e784:	b2da      	uxtb	r2, r3
    e786:	f24c 3319 	movw	r3, #49945	; 0xc319
    e78a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e78e:	701a      	strb	r2, [r3, #0]
    e790:	f24c 3319 	movw	r3, #49945	; 0xc319
    e794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e798:	781b      	ldrb	r3, [r3, #0]
    e79a:	2bff      	cmp	r3, #255	; 0xff
    e79c:	d105      	bne.n	e7aa <send_nav_values+0xf0e>
    e79e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e7a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7a6:	2200      	movs	r2, #0
    e7a8:	701a      	strb	r2, [r3, #0]
    e7aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    e7ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7b2:	781b      	ldrb	r3, [r3, #0]
    e7b4:	461a      	mov	r2, r3
    e7b6:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e7ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7be:	7899      	ldrb	r1, [r3, #2]
    e7c0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e7c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7c8:	5499      	strb	r1, [r3, r2]
    e7ca:	4b57      	ldr	r3, [pc, #348]	; (e928 <send_nav_values+0x108c>)
    e7cc:	781a      	ldrb	r2, [r3, #0]
    e7ce:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e7d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7d6:	781b      	ldrb	r3, [r3, #0]
    e7d8:	4413      	add	r3, r2
    e7da:	b2da      	uxtb	r2, r3
    e7dc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e7e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7e4:	701a      	strb	r2, [r3, #0]
    e7e6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e7ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ee:	781a      	ldrb	r2, [r3, #0]
    e7f0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e7f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7f8:	781b      	ldrb	r3, [r3, #0]
    e7fa:	4413      	add	r3, r2
    e7fc:	b2da      	uxtb	r2, r3
    e7fe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e806:	701a      	strb	r2, [r3, #0]
    e808:	f24c 3319 	movw	r3, #49945	; 0xc319
    e80c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e810:	781b      	ldrb	r3, [r3, #0]
    e812:	3301      	adds	r3, #1
    e814:	b2da      	uxtb	r2, r3
    e816:	f24c 3319 	movw	r3, #49945	; 0xc319
    e81a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e81e:	701a      	strb	r2, [r3, #0]
    e820:	f24c 3319 	movw	r3, #49945	; 0xc319
    e824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e828:	781b      	ldrb	r3, [r3, #0]
    e82a:	2bff      	cmp	r3, #255	; 0xff
    e82c:	d105      	bne.n	e83a <send_nav_values+0xf9e>
    e82e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e836:	2200      	movs	r2, #0
    e838:	701a      	strb	r2, [r3, #0]
    e83a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e83e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e842:	781b      	ldrb	r3, [r3, #0]
    e844:	461a      	mov	r2, r3
    e846:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e84a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e84e:	78d9      	ldrb	r1, [r3, #3]
    e850:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e858:	5499      	strb	r1, [r3, r2]
    e85a:	4b34      	ldr	r3, [pc, #208]	; (e92c <send_nav_values+0x1090>)
    e85c:	781a      	ldrb	r2, [r3, #0]
    e85e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e866:	781b      	ldrb	r3, [r3, #0]
    e868:	4413      	add	r3, r2
    e86a:	b2da      	uxtb	r2, r3
    e86c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e874:	701a      	strb	r2, [r3, #0]
    e876:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e87a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e87e:	781a      	ldrb	r2, [r3, #0]
    e880:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e888:	781b      	ldrb	r3, [r3, #0]
    e88a:	4413      	add	r3, r2
    e88c:	b2da      	uxtb	r2, r3
    e88e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e896:	701a      	strb	r2, [r3, #0]
    e898:	f24c 3319 	movw	r3, #49945	; 0xc319
    e89c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8a0:	781b      	ldrb	r3, [r3, #0]
    e8a2:	3301      	adds	r3, #1
    e8a4:	b2da      	uxtb	r2, r3
    e8a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e8aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8ae:	701a      	strb	r2, [r3, #0]
    e8b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    e8b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8b8:	781b      	ldrb	r3, [r3, #0]
    e8ba:	2bff      	cmp	r3, #255	; 0xff
    e8bc:	d105      	bne.n	e8ca <send_nav_values+0x102e>
    e8be:	f24c 3319 	movw	r3, #49945	; 0xc319
    e8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8c6:	2200      	movs	r2, #0
    e8c8:	701a      	strb	r2, [r3, #0]
    e8ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    e8ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8d2:	781b      	ldrb	r3, [r3, #0]
    e8d4:	461a      	mov	r2, r3
    e8d6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8de:	7819      	ldrb	r1, [r3, #0]
    e8e0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8e8:	5499      	strb	r1, [r3, r2]
    e8ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    e8ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8f2:	781b      	ldrb	r3, [r3, #0]
    e8f4:	3301      	adds	r3, #1
    e8f6:	b2da      	uxtb	r2, r3
    e8f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    e8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e900:	701a      	strb	r2, [r3, #0]
    e902:	f24c 3319 	movw	r3, #49945	; 0xc319
    e906:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e90a:	781b      	ldrb	r3, [r3, #0]
    e90c:	2bff      	cmp	r3, #255	; 0xff
    e90e:	d10f      	bne.n	e930 <send_nav_values+0x1094>
    e910:	f24c 3319 	movw	r3, #49945	; 0xc319
    e914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e918:	2200      	movs	r2, #0
    e91a:	701a      	strb	r2, [r3, #0]
    e91c:	e008      	b.n	e930 <send_nav_values+0x1094>
    e91e:	bf00      	nop
    e920:	2000055b 	.word	0x2000055b
    e924:	2004c6a9 	.word	0x2004c6a9
    e928:	2004c6aa 	.word	0x2004c6aa
    e92c:	2004c6ab 	.word	0x2004c6ab
    e930:	f24c 3319 	movw	r3, #49945	; 0xc319
    e934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e938:	781b      	ldrb	r3, [r3, #0]
    e93a:	461a      	mov	r2, r3
    e93c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e944:	7819      	ldrb	r1, [r3, #0]
    e946:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e94e:	5499      	strb	r1, [r3, r2]
    e950:	f24c 3319 	movw	r3, #49945	; 0xc319
    e954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e958:	781b      	ldrb	r3, [r3, #0]
    e95a:	3301      	adds	r3, #1
    e95c:	b2da      	uxtb	r2, r3
    e95e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e966:	701a      	strb	r2, [r3, #0]
    e968:	f24c 3319 	movw	r3, #49945	; 0xc319
    e96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e970:	781b      	ldrb	r3, [r3, #0]
    e972:	2bff      	cmp	r3, #255	; 0xff
    e974:	d105      	bne.n	e982 <send_nav_values+0x10e6>
    e976:	f24c 3319 	movw	r3, #49945	; 0xc319
    e97a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e97e:	2200      	movs	r2, #0
    e980:	701a      	strb	r2, [r3, #0]
    e982:	f242 0339 	movw	r3, #8249	; 0x2039
    e986:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e98a:	781b      	ldrb	r3, [r3, #0]
    e98c:	b2db      	uxtb	r3, r3
    e98e:	f003 0310 	and.w	r3, r3, #16
    e992:	2b00      	cmp	r3, #0
    e994:	d15a      	bne.n	ea4c <send_nav_values+0x11b0>
    e996:	f24c 331a 	movw	r3, #49946	; 0xc31a
    e99a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e99e:	781b      	ldrb	r3, [r3, #0]
    e9a0:	b2db      	uxtb	r3, r3
    e9a2:	461a      	mov	r2, r3
    e9a4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e9a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9ac:	5c9a      	ldrb	r2, [r3, r2]
    e9ae:	f24c 431b 	movw	r3, #50203	; 0xc41b
    e9b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9b6:	701a      	strb	r2, [r3, #0]
    e9b8:	f24c 431c 	movw	r3, #50204	; 0xc41c
    e9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9c0:	2200      	movs	r2, #0
    e9c2:	701a      	strb	r2, [r3, #0]
    e9c4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    e9c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9cc:	781b      	ldrb	r3, [r3, #0]
    e9ce:	b2db      	uxtb	r3, r3
    e9d0:	3301      	adds	r3, #1
    e9d2:	b2da      	uxtb	r2, r3
    e9d4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    e9d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9dc:	701a      	strb	r2, [r3, #0]
    e9de:	f24c 331a 	movw	r3, #49946	; 0xc31a
    e9e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9e6:	781b      	ldrb	r3, [r3, #0]
    e9e8:	b2db      	uxtb	r3, r3
    e9ea:	2bff      	cmp	r3, #255	; 0xff
    e9ec:	d105      	bne.n	e9fa <send_nav_values+0x115e>
    e9ee:	f24c 331a 	movw	r3, #49946	; 0xc31a
    e9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9f6:	2200      	movs	r2, #0
    e9f8:	701a      	strb	r2, [r3, #0]
    e9fa:	f242 0338 	movw	r3, #8248	; 0x2038
    e9fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea02:	f242 0238 	movw	r2, #8248	; 0x2038
    ea06:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ea0a:	7812      	ldrb	r2, [r2, #0]
    ea0c:	b2d2      	uxtb	r2, r2
    ea0e:	f042 0201 	orr.w	r2, r2, #1
    ea12:	b2d2      	uxtb	r2, r2
    ea14:	701a      	strb	r2, [r3, #0]
    ea16:	f242 0339 	movw	r3, #8249	; 0x2039
    ea1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea1e:	f242 0239 	movw	r2, #8249	; 0x2039
    ea22:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ea26:	7812      	ldrb	r2, [r2, #0]
    ea28:	b2d2      	uxtb	r2, r2
    ea2a:	f042 0210 	orr.w	r2, r2, #16
    ea2e:	b2d2      	uxtb	r2, r2
    ea30:	701a      	strb	r2, [r3, #0]
    ea32:	e00b      	b.n	ea4c <send_nav_values+0x11b0>
    ea34:	f24c 3318 	movw	r3, #49944	; 0xc318
    ea38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea3c:	781b      	ldrb	r3, [r3, #0]
    ea3e:	3301      	adds	r3, #1
    ea40:	b2da      	uxtb	r2, r3
    ea42:	f24c 3318 	movw	r3, #49944	; 0xc318
    ea46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea4a:	701a      	strb	r2, [r3, #0]
}
    ea4c:	46bd      	mov	sp, r7
    ea4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ea52:	4770      	bx	lr

0000ea54 <course_run>:

void course_run(void){
    ea54:	b580      	push	{r7, lr}
    ea56:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    ea58:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    ea5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea60:	781b      	ldrb	r3, [r3, #0]
    ea62:	2b02      	cmp	r3, #2
    ea64:	d006      	beq.n	ea74 <course_run+0x20>
    ea66:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    ea6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea6e:	781b      	ldrb	r3, [r3, #0]
    ea70:	2b03      	cmp	r3, #3
    ea72:	d112      	bne.n	ea9a <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    ea74:	f24c 23fe 	movw	r3, #49918	; 0xc2fe
    ea78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea7c:	781b      	ldrb	r3, [r3, #0]
    ea7e:	2b02      	cmp	r3, #2
    ea80:	d901      	bls.n	ea86 <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    ea82:	f003 faf1 	bl	12068 <course_pid_run>
    desired_roll = nav_desired_roll;
    ea86:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
    ea8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea8e:	681a      	ldr	r2, [r3, #0]
    ea90:	f24c 6344 	movw	r3, #50756	; 0xc644
    ea94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea98:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    ea9a:	bd80      	pop	{r7, pc}

0000ea9c <altitude_control_task>:

void altitude_control_task(void)
{
    ea9c:	b580      	push	{r7, lr}
    ea9e:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    eaa0:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    eaa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaa8:	781b      	ldrb	r3, [r3, #0]
    eaaa:	2b02      	cmp	r3, #2
    eaac:	d006      	beq.n	eabc <altitude_control_task+0x20>
    eaae:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    eab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eab6:	781b      	ldrb	r3, [r3, #0]
    eab8:	2b03      	cmp	r3, #3
    eaba:	d108      	bne.n	eace <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    eabc:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    eac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eac4:	781b      	ldrb	r3, [r3, #0]
    eac6:	2b03      	cmp	r3, #3
    eac8:	d101      	bne.n	eace <altitude_control_task+0x32>
      			altitude_pid_run();
    eaca:	f003 fd55 	bl	12578 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    eace:	bd80      	pop	{r7, pc}

0000ead0 <climb_control_task>:
void climb_control_task(void)
{
    ead0:	b580      	push	{r7, lr}
    ead2:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    ead4:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    ead8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eadc:	781b      	ldrb	r3, [r3, #0]
    eade:	2b02      	cmp	r3, #2
    eae0:	d006      	beq.n	eaf0 <climb_control_task+0x20>
    eae2:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    eae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaea:	781b      	ldrb	r3, [r3, #0]
    eaec:	2b03      	cmp	r3, #3
    eaee:	d135      	bne.n	eb5c <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    eaf0:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    eaf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaf8:	781b      	ldrb	r3, [r3, #0]
    eafa:	2b01      	cmp	r3, #1
    eafc:	d901      	bls.n	eb02 <climb_control_task+0x32>
        	climb_pid_run();
    eafe:	f003 fb6b 	bl	121d8 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    eb02:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    eb06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb0a:	781b      	ldrb	r3, [r3, #0]
    eb0c:	2b01      	cmp	r3, #1
    eb0e:	d10a      	bne.n	eb26 <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    eb10:	f24c 6398 	movw	r3, #50840	; 0xc698
    eb14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb18:	881b      	ldrh	r3, [r3, #0]
    eb1a:	b29a      	uxth	r2, r3
    eb1c:	f24c 634c 	movw	r3, #50764	; 0xc64c
    eb20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb24:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    eb26:	f24c 3305 	movw	r3, #49925	; 0xc305
    eb2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb2e:	781b      	ldrb	r3, [r3, #0]
    eb30:	2b00      	cmp	r3, #0
    eb32:	d10d      	bne.n	eb50 <climb_control_task+0x80>
    eb34:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    eb38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb3c:	881b      	ldrh	r3, [r3, #0]
    eb3e:	2b00      	cmp	r3, #0
    eb40:	d10c      	bne.n	eb5c <climb_control_task+0x8c>
    eb42:	f24c 3310 	movw	r3, #49936	; 0xc310
    eb46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb4a:	781b      	ldrb	r3, [r3, #0]
    eb4c:	2b00      	cmp	r3, #0
    eb4e:	d105      	bne.n	eb5c <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    eb50:	f24c 634c 	movw	r3, #50764	; 0xc64c
    eb54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb58:	2200      	movs	r2, #0
    eb5a:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    eb5c:	bd80      	pop	{r7, pc}
    eb5e:	bf00      	nop

0000eb60 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    eb60:	b580      	push	{r7, lr}
    eb62:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    eb64:	f003 f926 	bl	11db4 <ir_update>
    estimator_update_state_infrared();
    eb68:	f006 fbac 	bl	152c4 <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    eb6c:	f003 f990 	bl	11e90 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    eb70:	f24c 634c 	movw	r3, #50764	; 0xc64c
    eb74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb78:	881a      	ldrh	r2, [r3, #0]
    eb7a:	f24c 4338 	movw	r3, #50232	; 0xc438
    eb7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb82:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    eb84:	f24c 634e 	movw	r3, #50766	; 0xc64e
    eb88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb8c:	881a      	ldrh	r2, [r3, #0]
    eb8e:	f24c 4338 	movw	r3, #50232	; 0xc438
    eb92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb96:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    eb98:	f24c 6350 	movw	r3, #50768	; 0xc650
    eb9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eba0:	881a      	ldrh	r2, [r3, #0]
    eba2:	f24c 4338 	movw	r3, #50232	; 0xc438
    eba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebaa:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    ebac:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    ebb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebb4:	681b      	ldr	r3, [r3, #0]
    ebb6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ebba:	4618      	mov	r0, r3
    ebbc:	f008 ff80 	bl	17ac0 <__aeabi_f2d>
    ebc0:	4602      	mov	r2, r0
    ebc2:	460b      	mov	r3, r1
    ebc4:	4610      	mov	r0, r2
    ebc6:	4619      	mov	r1, r3
    ebc8:	f04f 0200 	mov.w	r2, #0
    ebcc:	f04f 0300 	mov.w	r3, #0
    ebd0:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ebd4:	f008 ffc8 	bl	17b68 <__aeabi_dmul>
    ebd8:	4602      	mov	r2, r0
    ebda:	460b      	mov	r3, r1
    ebdc:	4610      	mov	r0, r2
    ebde:	4619      	mov	r1, r3
    ebe0:	f04f 0200 	mov.w	r2, #0
    ebe4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    ebe8:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    ebec:	f009 fa2e 	bl	1804c <__aeabi_dcmplt>
    ebf0:	4603      	mov	r3, r0
    ebf2:	2b00      	cmp	r3, #0
    ebf4:	d002      	beq.n	ebfc <stabilisation_task+0x9c>
    ebf6:	f64d 2280 	movw	r2, #55936	; 0xda80
    ebfa:	e046      	b.n	ec8a <stabilisation_task+0x12a>
    ebfc:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    ec00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec04:	681b      	ldr	r3, [r3, #0]
    ec06:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ec0a:	4618      	mov	r0, r3
    ec0c:	f008 ff58 	bl	17ac0 <__aeabi_f2d>
    ec10:	4602      	mov	r2, r0
    ec12:	460b      	mov	r3, r1
    ec14:	4610      	mov	r0, r2
    ec16:	4619      	mov	r1, r3
    ec18:	f04f 0200 	mov.w	r2, #0
    ec1c:	f04f 0300 	mov.w	r3, #0
    ec20:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ec24:	f008 ffa0 	bl	17b68 <__aeabi_dmul>
    ec28:	4602      	mov	r2, r0
    ec2a:	460b      	mov	r3, r1
    ec2c:	4610      	mov	r0, r2
    ec2e:	4619      	mov	r1, r3
    ec30:	f04f 0200 	mov.w	r2, #0
    ec34:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    ec38:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    ec3c:	f009 fa24 	bl	18088 <__aeabi_dcmpgt>
    ec40:	4603      	mov	r3, r0
    ec42:	2b00      	cmp	r3, #0
    ec44:	d002      	beq.n	ec4c <stabilisation_task+0xec>
    ec46:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    ec4a:	e01d      	b.n	ec88 <stabilisation_task+0x128>
    ec4c:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    ec50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec54:	681b      	ldr	r3, [r3, #0]
    ec56:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ec5a:	4618      	mov	r0, r3
    ec5c:	f008 ff30 	bl	17ac0 <__aeabi_f2d>
    ec60:	4602      	mov	r2, r0
    ec62:	460b      	mov	r3, r1
    ec64:	4610      	mov	r0, r2
    ec66:	4619      	mov	r1, r3
    ec68:	f04f 0200 	mov.w	r2, #0
    ec6c:	f04f 0300 	mov.w	r3, #0
    ec70:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ec74:	f008 ff78 	bl	17b68 <__aeabi_dmul>
    ec78:	4602      	mov	r2, r0
    ec7a:	460b      	mov	r3, r1
    ec7c:	4610      	mov	r0, r2
    ec7e:	4619      	mov	r1, r3
    ec80:	f009 fa0c 	bl	1809c <__aeabi_d2iz>
    ec84:	4603      	mov	r3, r0
    ec86:	b29b      	uxth	r3, r3
    ec88:	b29a      	uxth	r2, r3
    ec8a:	f24c 4338 	movw	r3, #50232	; 0xc438
    ec8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec92:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    ec94:	bd80      	pop	{r7, pc}
    ec96:	bf00      	nop

0000ec98 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    ec98:	b580      	push	{r7, lr}
    ec9a:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    ec9c:	f24c 43ad 	movw	r3, #50349	; 0xc4ad
    eca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eca4:	2200      	movs	r2, #0
    eca6:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    eca8:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
    ecac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecb0:	781b      	ldrb	r3, [r3, #0]
    ecb2:	2b00      	cmp	r3, #0
    ecb4:	f001 81af 	beq.w	10016 <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    ecb8:	f24c 3319 	movw	r3, #49945	; 0xc319
    ecbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecc0:	781a      	ldrb	r2, [r3, #0]
    ecc2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ecc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecca:	781b      	ldrb	r3, [r3, #0]
    eccc:	b2db      	uxtb	r3, r3
    ecce:	429a      	cmp	r2, r3
    ecd0:	d313      	bcc.n	ecfa <send_gps_pos+0x62>
    ecd2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ecd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecda:	781b      	ldrb	r3, [r3, #0]
    ecdc:	b2db      	uxtb	r3, r3
    ecde:	461a      	mov	r2, r3
    ece0:	f24c 3319 	movw	r3, #49945	; 0xc319
    ece4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ece8:	781b      	ldrb	r3, [r3, #0]
    ecea:	1ad3      	subs	r3, r2, r3
    ecec:	33ff      	adds	r3, #255	; 0xff
    ecee:	2b21      	cmp	r3, #33	; 0x21
    ecf0:	bfd4      	ite	le
    ecf2:	2300      	movle	r3, #0
    ecf4:	2301      	movgt	r3, #1
    ecf6:	b2db      	uxtb	r3, r3
    ecf8:	e011      	b.n	ed1e <send_gps_pos+0x86>
    ecfa:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ecfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed02:	781b      	ldrb	r3, [r3, #0]
    ed04:	b2db      	uxtb	r3, r3
    ed06:	461a      	mov	r2, r3
    ed08:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed10:	781b      	ldrb	r3, [r3, #0]
    ed12:	1ad3      	subs	r3, r2, r3
    ed14:	2b21      	cmp	r3, #33	; 0x21
    ed16:	bfd4      	ite	le
    ed18:	2300      	movle	r3, #0
    ed1a:	2301      	movgt	r3, #1
    ed1c:	b2db      	uxtb	r3, r3
    ed1e:	2b00      	cmp	r3, #0
    ed20:	f001 816b 	beq.w	fffa <send_gps_pos+0x1362>
    ed24:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed2c:	781b      	ldrb	r3, [r3, #0]
    ed2e:	461a      	mov	r2, r3
    ed30:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ed34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed38:	2105      	movs	r1, #5
    ed3a:	5499      	strb	r1, [r3, r2]
    ed3c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed44:	781b      	ldrb	r3, [r3, #0]
    ed46:	3301      	adds	r3, #1
    ed48:	b2da      	uxtb	r2, r3
    ed4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed52:	701a      	strb	r2, [r3, #0]
    ed54:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed5c:	781b      	ldrb	r3, [r3, #0]
    ed5e:	2bff      	cmp	r3, #255	; 0xff
    ed60:	d105      	bne.n	ed6e <send_gps_pos+0xd6>
    ed62:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed6a:	2200      	movs	r2, #0
    ed6c:	701a      	strb	r2, [r3, #0]
    ed6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed76:	781b      	ldrb	r3, [r3, #0]
    ed78:	461a      	mov	r2, r3
    ed7a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ed7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed82:	2108      	movs	r1, #8
    ed84:	5499      	strb	r1, [r3, r2]
    ed86:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed8e:	781b      	ldrb	r3, [r3, #0]
    ed90:	3301      	adds	r3, #1
    ed92:	b2da      	uxtb	r2, r3
    ed94:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed9c:	701a      	strb	r2, [r3, #0]
    ed9e:	f24c 3319 	movw	r3, #49945	; 0xc319
    eda2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eda6:	781b      	ldrb	r3, [r3, #0]
    eda8:	2bff      	cmp	r3, #255	; 0xff
    edaa:	d105      	bne.n	edb8 <send_gps_pos+0x120>
    edac:	f24c 3319 	movw	r3, #49945	; 0xc319
    edb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edb4:	2200      	movs	r2, #0
    edb6:	701a      	strb	r2, [r3, #0]
    edb8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    edbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edc0:	2208      	movs	r2, #8
    edc2:	701a      	strb	r2, [r3, #0]
    edc4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    edc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edcc:	2208      	movs	r2, #8
    edce:	701a      	strb	r2, [r3, #0]
    edd0:	f24c 3319 	movw	r3, #49945	; 0xc319
    edd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edd8:	781b      	ldrb	r3, [r3, #0]
    edda:	461a      	mov	r2, r3
    eddc:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    ede0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ede4:	7819      	ldrb	r1, [r3, #0]
    ede6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    edea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edee:	5499      	strb	r1, [r3, r2]
    edf0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    edf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edf8:	781a      	ldrb	r2, [r3, #0]
    edfa:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    edfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee02:	781b      	ldrb	r3, [r3, #0]
    ee04:	4413      	add	r3, r2
    ee06:	b2da      	uxtb	r2, r3
    ee08:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ee0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee10:	701a      	strb	r2, [r3, #0]
    ee12:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ee16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee1a:	781a      	ldrb	r2, [r3, #0]
    ee1c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ee20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee24:	781b      	ldrb	r3, [r3, #0]
    ee26:	4413      	add	r3, r2
    ee28:	b2da      	uxtb	r2, r3
    ee2a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ee2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee32:	701a      	strb	r2, [r3, #0]
    ee34:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee3c:	781b      	ldrb	r3, [r3, #0]
    ee3e:	3301      	adds	r3, #1
    ee40:	b2da      	uxtb	r2, r3
    ee42:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee4a:	701a      	strb	r2, [r3, #0]
    ee4c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee54:	781b      	ldrb	r3, [r3, #0]
    ee56:	2bff      	cmp	r3, #255	; 0xff
    ee58:	d105      	bne.n	ee66 <send_gps_pos+0x1ce>
    ee5a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee62:	2200      	movs	r2, #0
    ee64:	701a      	strb	r2, [r3, #0]
    ee66:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee6e:	781b      	ldrb	r3, [r3, #0]
    ee70:	461a      	mov	r2, r3
    ee72:	f24c 439c 	movw	r3, #50332	; 0xc49c
    ee76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee7a:	7819      	ldrb	r1, [r3, #0]
    ee7c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ee80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee84:	5499      	strb	r1, [r3, r2]
    ee86:	f24c 439c 	movw	r3, #50332	; 0xc49c
    ee8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee8e:	781a      	ldrb	r2, [r3, #0]
    ee90:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ee94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee98:	781b      	ldrb	r3, [r3, #0]
    ee9a:	4413      	add	r3, r2
    ee9c:	b2da      	uxtb	r2, r3
    ee9e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    eea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eea6:	701a      	strb	r2, [r3, #0]
    eea8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    eeac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeb0:	781a      	ldrb	r2, [r3, #0]
    eeb2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    eeb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeba:	781b      	ldrb	r3, [r3, #0]
    eebc:	4413      	add	r3, r2
    eebe:	b2da      	uxtb	r2, r3
    eec0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    eec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eec8:	701a      	strb	r2, [r3, #0]
    eeca:	f24c 3319 	movw	r3, #49945	; 0xc319
    eece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eed2:	781b      	ldrb	r3, [r3, #0]
    eed4:	3301      	adds	r3, #1
    eed6:	b2da      	uxtb	r2, r3
    eed8:	f24c 3319 	movw	r3, #49945	; 0xc319
    eedc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eee0:	701a      	strb	r2, [r3, #0]
    eee2:	f24c 3319 	movw	r3, #49945	; 0xc319
    eee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeea:	781b      	ldrb	r3, [r3, #0]
    eeec:	2bff      	cmp	r3, #255	; 0xff
    eeee:	d105      	bne.n	eefc <send_gps_pos+0x264>
    eef0:	f24c 3319 	movw	r3, #49945	; 0xc319
    eef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eef8:	2200      	movs	r2, #0
    eefa:	701a      	strb	r2, [r3, #0]
    eefc:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef04:	781b      	ldrb	r3, [r3, #0]
    ef06:	461a      	mov	r2, r3
    ef08:	f24c 439c 	movw	r3, #50332	; 0xc49c
    ef0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef10:	7859      	ldrb	r1, [r3, #1]
    ef12:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ef16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef1a:	5499      	strb	r1, [r3, r2]
    ef1c:	4bd1      	ldr	r3, [pc, #836]	; (f264 <send_gps_pos+0x5cc>)
    ef1e:	781a      	ldrb	r2, [r3, #0]
    ef20:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ef24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef28:	781b      	ldrb	r3, [r3, #0]
    ef2a:	4413      	add	r3, r2
    ef2c:	b2da      	uxtb	r2, r3
    ef2e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ef32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef36:	701a      	strb	r2, [r3, #0]
    ef38:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ef3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef40:	781a      	ldrb	r2, [r3, #0]
    ef42:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ef46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef4a:	781b      	ldrb	r3, [r3, #0]
    ef4c:	4413      	add	r3, r2
    ef4e:	b2da      	uxtb	r2, r3
    ef50:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ef54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef58:	701a      	strb	r2, [r3, #0]
    ef5a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef62:	781b      	ldrb	r3, [r3, #0]
    ef64:	3301      	adds	r3, #1
    ef66:	b2da      	uxtb	r2, r3
    ef68:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef70:	701a      	strb	r2, [r3, #0]
    ef72:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef7a:	781b      	ldrb	r3, [r3, #0]
    ef7c:	2bff      	cmp	r3, #255	; 0xff
    ef7e:	d105      	bne.n	ef8c <send_gps_pos+0x2f4>
    ef80:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef88:	2200      	movs	r2, #0
    ef8a:	701a      	strb	r2, [r3, #0]
    ef8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef94:	781b      	ldrb	r3, [r3, #0]
    ef96:	461a      	mov	r2, r3
    ef98:	f24c 439c 	movw	r3, #50332	; 0xc49c
    ef9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efa0:	7899      	ldrb	r1, [r3, #2]
    efa2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    efa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efaa:	5499      	strb	r1, [r3, r2]
    efac:	4bae      	ldr	r3, [pc, #696]	; (f268 <send_gps_pos+0x5d0>)
    efae:	781a      	ldrb	r2, [r3, #0]
    efb0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    efb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efb8:	781b      	ldrb	r3, [r3, #0]
    efba:	4413      	add	r3, r2
    efbc:	b2da      	uxtb	r2, r3
    efbe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    efc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efc6:	701a      	strb	r2, [r3, #0]
    efc8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    efcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efd0:	781a      	ldrb	r2, [r3, #0]
    efd2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    efd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efda:	781b      	ldrb	r3, [r3, #0]
    efdc:	4413      	add	r3, r2
    efde:	b2da      	uxtb	r2, r3
    efe0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    efe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efe8:	701a      	strb	r2, [r3, #0]
    efea:	f24c 3319 	movw	r3, #49945	; 0xc319
    efee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eff2:	781b      	ldrb	r3, [r3, #0]
    eff4:	3301      	adds	r3, #1
    eff6:	b2da      	uxtb	r2, r3
    eff8:	f24c 3319 	movw	r3, #49945	; 0xc319
    effc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f000:	701a      	strb	r2, [r3, #0]
    f002:	f24c 3319 	movw	r3, #49945	; 0xc319
    f006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f00a:	781b      	ldrb	r3, [r3, #0]
    f00c:	2bff      	cmp	r3, #255	; 0xff
    f00e:	d105      	bne.n	f01c <send_gps_pos+0x384>
    f010:	f24c 3319 	movw	r3, #49945	; 0xc319
    f014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f018:	2200      	movs	r2, #0
    f01a:	701a      	strb	r2, [r3, #0]
    f01c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f024:	781b      	ldrb	r3, [r3, #0]
    f026:	461a      	mov	r2, r3
    f028:	f24c 439c 	movw	r3, #50332	; 0xc49c
    f02c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f030:	78d9      	ldrb	r1, [r3, #3]
    f032:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f03a:	5499      	strb	r1, [r3, r2]
    f03c:	4b8b      	ldr	r3, [pc, #556]	; (f26c <send_gps_pos+0x5d4>)
    f03e:	781a      	ldrb	r2, [r3, #0]
    f040:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f048:	781b      	ldrb	r3, [r3, #0]
    f04a:	4413      	add	r3, r2
    f04c:	b2da      	uxtb	r2, r3
    f04e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f056:	701a      	strb	r2, [r3, #0]
    f058:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f05c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f060:	781a      	ldrb	r2, [r3, #0]
    f062:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f06a:	781b      	ldrb	r3, [r3, #0]
    f06c:	4413      	add	r3, r2
    f06e:	b2da      	uxtb	r2, r3
    f070:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f078:	701a      	strb	r2, [r3, #0]
    f07a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f07e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f082:	781b      	ldrb	r3, [r3, #0]
    f084:	3301      	adds	r3, #1
    f086:	b2da      	uxtb	r2, r3
    f088:	f24c 3319 	movw	r3, #49945	; 0xc319
    f08c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f090:	701a      	strb	r2, [r3, #0]
    f092:	f24c 3319 	movw	r3, #49945	; 0xc319
    f096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f09a:	781b      	ldrb	r3, [r3, #0]
    f09c:	2bff      	cmp	r3, #255	; 0xff
    f09e:	d105      	bne.n	f0ac <send_gps_pos+0x414>
    f0a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    f0a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0a8:	2200      	movs	r2, #0
    f0aa:	701a      	strb	r2, [r3, #0]
    f0ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    f0b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0b4:	781b      	ldrb	r3, [r3, #0]
    f0b6:	461a      	mov	r2, r3
    f0b8:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f0bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0c0:	7819      	ldrb	r1, [r3, #0]
    f0c2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f0c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ca:	5499      	strb	r1, [r3, r2]
    f0cc:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f0d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0d4:	781a      	ldrb	r2, [r3, #0]
    f0d6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f0da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0de:	781b      	ldrb	r3, [r3, #0]
    f0e0:	4413      	add	r3, r2
    f0e2:	b2da      	uxtb	r2, r3
    f0e4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f0e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ec:	701a      	strb	r2, [r3, #0]
    f0ee:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f0f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0f6:	781a      	ldrb	r2, [r3, #0]
    f0f8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f0fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f100:	781b      	ldrb	r3, [r3, #0]
    f102:	4413      	add	r3, r2
    f104:	b2da      	uxtb	r2, r3
    f106:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f10a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f10e:	701a      	strb	r2, [r3, #0]
    f110:	f24c 3319 	movw	r3, #49945	; 0xc319
    f114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f118:	781b      	ldrb	r3, [r3, #0]
    f11a:	3301      	adds	r3, #1
    f11c:	b2da      	uxtb	r2, r3
    f11e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f126:	701a      	strb	r2, [r3, #0]
    f128:	f24c 3319 	movw	r3, #49945	; 0xc319
    f12c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f130:	781b      	ldrb	r3, [r3, #0]
    f132:	2bff      	cmp	r3, #255	; 0xff
    f134:	d105      	bne.n	f142 <send_gps_pos+0x4aa>
    f136:	f24c 3319 	movw	r3, #49945	; 0xc319
    f13a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f13e:	2200      	movs	r2, #0
    f140:	701a      	strb	r2, [r3, #0]
    f142:	f24c 3319 	movw	r3, #49945	; 0xc319
    f146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f14a:	781b      	ldrb	r3, [r3, #0]
    f14c:	461a      	mov	r2, r3
    f14e:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f156:	7859      	ldrb	r1, [r3, #1]
    f158:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f15c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f160:	5499      	strb	r1, [r3, r2]
    f162:	4b43      	ldr	r3, [pc, #268]	; (f270 <send_gps_pos+0x5d8>)
    f164:	781a      	ldrb	r2, [r3, #0]
    f166:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f16a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f16e:	781b      	ldrb	r3, [r3, #0]
    f170:	4413      	add	r3, r2
    f172:	b2da      	uxtb	r2, r3
    f174:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f17c:	701a      	strb	r2, [r3, #0]
    f17e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f186:	781a      	ldrb	r2, [r3, #0]
    f188:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f18c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f190:	781b      	ldrb	r3, [r3, #0]
    f192:	4413      	add	r3, r2
    f194:	b2da      	uxtb	r2, r3
    f196:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f19a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f19e:	701a      	strb	r2, [r3, #0]
    f1a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    f1a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1a8:	781b      	ldrb	r3, [r3, #0]
    f1aa:	3301      	adds	r3, #1
    f1ac:	b2da      	uxtb	r2, r3
    f1ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    f1b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1b6:	701a      	strb	r2, [r3, #0]
    f1b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    f1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1c0:	781b      	ldrb	r3, [r3, #0]
    f1c2:	2bff      	cmp	r3, #255	; 0xff
    f1c4:	d105      	bne.n	f1d2 <send_gps_pos+0x53a>
    f1c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    f1ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1ce:	2200      	movs	r2, #0
    f1d0:	701a      	strb	r2, [r3, #0]
    f1d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    f1d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1da:	781b      	ldrb	r3, [r3, #0]
    f1dc:	461a      	mov	r2, r3
    f1de:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f1e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1e6:	7899      	ldrb	r1, [r3, #2]
    f1e8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f1ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1f0:	5499      	strb	r1, [r3, r2]
    f1f2:	4b20      	ldr	r3, [pc, #128]	; (f274 <send_gps_pos+0x5dc>)
    f1f4:	781a      	ldrb	r2, [r3, #0]
    f1f6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f1fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1fe:	781b      	ldrb	r3, [r3, #0]
    f200:	4413      	add	r3, r2
    f202:	b2da      	uxtb	r2, r3
    f204:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f20c:	701a      	strb	r2, [r3, #0]
    f20e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f216:	781a      	ldrb	r2, [r3, #0]
    f218:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f21c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f220:	781b      	ldrb	r3, [r3, #0]
    f222:	4413      	add	r3, r2
    f224:	b2da      	uxtb	r2, r3
    f226:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f22a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f22e:	701a      	strb	r2, [r3, #0]
    f230:	f24c 3319 	movw	r3, #49945	; 0xc319
    f234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f238:	781b      	ldrb	r3, [r3, #0]
    f23a:	3301      	adds	r3, #1
    f23c:	b2da      	uxtb	r2, r3
    f23e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f246:	701a      	strb	r2, [r3, #0]
    f248:	f24c 3319 	movw	r3, #49945	; 0xc319
    f24c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f250:	781b      	ldrb	r3, [r3, #0]
    f252:	2bff      	cmp	r3, #255	; 0xff
    f254:	d110      	bne.n	f278 <send_gps_pos+0x5e0>
    f256:	f24c 3319 	movw	r3, #49945	; 0xc319
    f25a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f25e:	2200      	movs	r2, #0
    f260:	701a      	strb	r2, [r3, #0]
    f262:	e009      	b.n	f278 <send_gps_pos+0x5e0>
    f264:	2004c49d 	.word	0x2004c49d
    f268:	2004c49e 	.word	0x2004c49e
    f26c:	2004c49f 	.word	0x2004c49f
    f270:	2004c4a1 	.word	0x2004c4a1
    f274:	2004c4a2 	.word	0x2004c4a2
    f278:	f24c 3319 	movw	r3, #49945	; 0xc319
    f27c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f280:	781b      	ldrb	r3, [r3, #0]
    f282:	461a      	mov	r2, r3
    f284:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f288:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f28c:	78d9      	ldrb	r1, [r3, #3]
    f28e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f296:	5499      	strb	r1, [r3, r2]
    f298:	4bd3      	ldr	r3, [pc, #844]	; (f5e8 <send_gps_pos+0x950>)
    f29a:	781a      	ldrb	r2, [r3, #0]
    f29c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f2a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2a4:	781b      	ldrb	r3, [r3, #0]
    f2a6:	4413      	add	r3, r2
    f2a8:	b2da      	uxtb	r2, r3
    f2aa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2b2:	701a      	strb	r2, [r3, #0]
    f2b4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f2b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2bc:	781a      	ldrb	r2, [r3, #0]
    f2be:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f2c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2c6:	781b      	ldrb	r3, [r3, #0]
    f2c8:	4413      	add	r3, r2
    f2ca:	b2da      	uxtb	r2, r3
    f2cc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2d4:	701a      	strb	r2, [r3, #0]
    f2d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    f2da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2de:	781b      	ldrb	r3, [r3, #0]
    f2e0:	3301      	adds	r3, #1
    f2e2:	b2da      	uxtb	r2, r3
    f2e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2ec:	701a      	strb	r2, [r3, #0]
    f2ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    f2f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2f6:	781b      	ldrb	r3, [r3, #0]
    f2f8:	2bff      	cmp	r3, #255	; 0xff
    f2fa:	d105      	bne.n	f308 <send_gps_pos+0x670>
    f2fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    f300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f304:	2200      	movs	r2, #0
    f306:	701a      	strb	r2, [r3, #0]
    f308:	f24c 3319 	movw	r3, #49945	; 0xc319
    f30c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f310:	781b      	ldrb	r3, [r3, #0]
    f312:	461a      	mov	r2, r3
    f314:	f24c 4398 	movw	r3, #50328	; 0xc498
    f318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f31c:	7819      	ldrb	r1, [r3, #0]
    f31e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f326:	5499      	strb	r1, [r3, r2]
    f328:	f24c 4398 	movw	r3, #50328	; 0xc498
    f32c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f330:	781a      	ldrb	r2, [r3, #0]
    f332:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f33a:	781b      	ldrb	r3, [r3, #0]
    f33c:	4413      	add	r3, r2
    f33e:	b2da      	uxtb	r2, r3
    f340:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f348:	701a      	strb	r2, [r3, #0]
    f34a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f34e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f352:	781a      	ldrb	r2, [r3, #0]
    f354:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f35c:	781b      	ldrb	r3, [r3, #0]
    f35e:	4413      	add	r3, r2
    f360:	b2da      	uxtb	r2, r3
    f362:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f36a:	701a      	strb	r2, [r3, #0]
    f36c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f374:	781b      	ldrb	r3, [r3, #0]
    f376:	3301      	adds	r3, #1
    f378:	b2da      	uxtb	r2, r3
    f37a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f37e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f382:	701a      	strb	r2, [r3, #0]
    f384:	f24c 3319 	movw	r3, #49945	; 0xc319
    f388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f38c:	781b      	ldrb	r3, [r3, #0]
    f38e:	2bff      	cmp	r3, #255	; 0xff
    f390:	d105      	bne.n	f39e <send_gps_pos+0x706>
    f392:	f24c 3319 	movw	r3, #49945	; 0xc319
    f396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f39a:	2200      	movs	r2, #0
    f39c:	701a      	strb	r2, [r3, #0]
    f39e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f3a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3a6:	781b      	ldrb	r3, [r3, #0]
    f3a8:	461a      	mov	r2, r3
    f3aa:	f24c 4398 	movw	r3, #50328	; 0xc498
    f3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3b2:	7859      	ldrb	r1, [r3, #1]
    f3b4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3bc:	5499      	strb	r1, [r3, r2]
    f3be:	4b8b      	ldr	r3, [pc, #556]	; (f5ec <send_gps_pos+0x954>)
    f3c0:	781a      	ldrb	r2, [r3, #0]
    f3c2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f3c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ca:	781b      	ldrb	r3, [r3, #0]
    f3cc:	4413      	add	r3, r2
    f3ce:	b2da      	uxtb	r2, r3
    f3d0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f3d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3d8:	701a      	strb	r2, [r3, #0]
    f3da:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f3de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3e2:	781a      	ldrb	r2, [r3, #0]
    f3e4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f3e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ec:	781b      	ldrb	r3, [r3, #0]
    f3ee:	4413      	add	r3, r2
    f3f0:	b2da      	uxtb	r2, r3
    f3f2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f3f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3fa:	701a      	strb	r2, [r3, #0]
    f3fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    f400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f404:	781b      	ldrb	r3, [r3, #0]
    f406:	3301      	adds	r3, #1
    f408:	b2da      	uxtb	r2, r3
    f40a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f40e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f412:	701a      	strb	r2, [r3, #0]
    f414:	f24c 3319 	movw	r3, #49945	; 0xc319
    f418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f41c:	781b      	ldrb	r3, [r3, #0]
    f41e:	2bff      	cmp	r3, #255	; 0xff
    f420:	d105      	bne.n	f42e <send_gps_pos+0x796>
    f422:	f24c 3319 	movw	r3, #49945	; 0xc319
    f426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f42a:	2200      	movs	r2, #0
    f42c:	701a      	strb	r2, [r3, #0]
    f42e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f436:	781b      	ldrb	r3, [r3, #0]
    f438:	461a      	mov	r2, r3
    f43a:	f24c 4398 	movw	r3, #50328	; 0xc498
    f43e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f442:	7899      	ldrb	r1, [r3, #2]
    f444:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f44c:	5499      	strb	r1, [r3, r2]
    f44e:	4b68      	ldr	r3, [pc, #416]	; (f5f0 <send_gps_pos+0x958>)
    f450:	781a      	ldrb	r2, [r3, #0]
    f452:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f45a:	781b      	ldrb	r3, [r3, #0]
    f45c:	4413      	add	r3, r2
    f45e:	b2da      	uxtb	r2, r3
    f460:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f468:	701a      	strb	r2, [r3, #0]
    f46a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f46e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f472:	781a      	ldrb	r2, [r3, #0]
    f474:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f47c:	781b      	ldrb	r3, [r3, #0]
    f47e:	4413      	add	r3, r2
    f480:	b2da      	uxtb	r2, r3
    f482:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f48a:	701a      	strb	r2, [r3, #0]
    f48c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f494:	781b      	ldrb	r3, [r3, #0]
    f496:	3301      	adds	r3, #1
    f498:	b2da      	uxtb	r2, r3
    f49a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4a2:	701a      	strb	r2, [r3, #0]
    f4a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ac:	781b      	ldrb	r3, [r3, #0]
    f4ae:	2bff      	cmp	r3, #255	; 0xff
    f4b0:	d105      	bne.n	f4be <send_gps_pos+0x826>
    f4b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    f4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ba:	2200      	movs	r2, #0
    f4bc:	701a      	strb	r2, [r3, #0]
    f4be:	f24c 3319 	movw	r3, #49945	; 0xc319
    f4c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4c6:	781b      	ldrb	r3, [r3, #0]
    f4c8:	461a      	mov	r2, r3
    f4ca:	f24c 4398 	movw	r3, #50328	; 0xc498
    f4ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4d2:	78d9      	ldrb	r1, [r3, #3]
    f4d4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f4d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4dc:	5499      	strb	r1, [r3, r2]
    f4de:	4b45      	ldr	r3, [pc, #276]	; (f5f4 <send_gps_pos+0x95c>)
    f4e0:	781a      	ldrb	r2, [r3, #0]
    f4e2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f4e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ea:	781b      	ldrb	r3, [r3, #0]
    f4ec:	4413      	add	r3, r2
    f4ee:	b2da      	uxtb	r2, r3
    f4f0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f4f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4f8:	701a      	strb	r2, [r3, #0]
    f4fa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f4fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f502:	781a      	ldrb	r2, [r3, #0]
    f504:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f50c:	781b      	ldrb	r3, [r3, #0]
    f50e:	4413      	add	r3, r2
    f510:	b2da      	uxtb	r2, r3
    f512:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f51a:	701a      	strb	r2, [r3, #0]
    f51c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f524:	781b      	ldrb	r3, [r3, #0]
    f526:	3301      	adds	r3, #1
    f528:	b2da      	uxtb	r2, r3
    f52a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f52e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f532:	701a      	strb	r2, [r3, #0]
    f534:	f24c 3319 	movw	r3, #49945	; 0xc319
    f538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f53c:	781b      	ldrb	r3, [r3, #0]
    f53e:	2bff      	cmp	r3, #255	; 0xff
    f540:	d105      	bne.n	f54e <send_gps_pos+0x8b6>
    f542:	f24c 3319 	movw	r3, #49945	; 0xc319
    f546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f54a:	2200      	movs	r2, #0
    f54c:	701a      	strb	r2, [r3, #0]
    f54e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f556:	781b      	ldrb	r3, [r3, #0]
    f558:	461a      	mov	r2, r3
    f55a:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f562:	7819      	ldrb	r1, [r3, #0]
    f564:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f56c:	5499      	strb	r1, [r3, r2]
    f56e:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f576:	781a      	ldrb	r2, [r3, #0]
    f578:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f57c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f580:	781b      	ldrb	r3, [r3, #0]
    f582:	4413      	add	r3, r2
    f584:	b2da      	uxtb	r2, r3
    f586:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f58a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f58e:	701a      	strb	r2, [r3, #0]
    f590:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f598:	781a      	ldrb	r2, [r3, #0]
    f59a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f59e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5a2:	781b      	ldrb	r3, [r3, #0]
    f5a4:	4413      	add	r3, r2
    f5a6:	b2da      	uxtb	r2, r3
    f5a8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f5ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5b0:	701a      	strb	r2, [r3, #0]
    f5b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    f5b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ba:	781b      	ldrb	r3, [r3, #0]
    f5bc:	3301      	adds	r3, #1
    f5be:	b2da      	uxtb	r2, r3
    f5c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    f5c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5c8:	701a      	strb	r2, [r3, #0]
    f5ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    f5ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5d2:	781b      	ldrb	r3, [r3, #0]
    f5d4:	2bff      	cmp	r3, #255	; 0xff
    f5d6:	d10f      	bne.n	f5f8 <send_gps_pos+0x960>
    f5d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    f5dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5e0:	2200      	movs	r2, #0
    f5e2:	701a      	strb	r2, [r3, #0]
    f5e4:	e008      	b.n	f5f8 <send_gps_pos+0x960>
    f5e6:	bf00      	nop
    f5e8:	2004c4a3 	.word	0x2004c4a3
    f5ec:	2004c499 	.word	0x2004c499
    f5f0:	2004c49a 	.word	0x2004c49a
    f5f4:	2004c49b 	.word	0x2004c49b
    f5f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    f5fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f600:	781b      	ldrb	r3, [r3, #0]
    f602:	461a      	mov	r2, r3
    f604:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f60c:	7859      	ldrb	r1, [r3, #1]
    f60e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f616:	5499      	strb	r1, [r3, r2]
    f618:	4bd1      	ldr	r3, [pc, #836]	; (f960 <send_gps_pos+0xcc8>)
    f61a:	781a      	ldrb	r2, [r3, #0]
    f61c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f624:	781b      	ldrb	r3, [r3, #0]
    f626:	4413      	add	r3, r2
    f628:	b2da      	uxtb	r2, r3
    f62a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f62e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f632:	701a      	strb	r2, [r3, #0]
    f634:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f63c:	781a      	ldrb	r2, [r3, #0]
    f63e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f646:	781b      	ldrb	r3, [r3, #0]
    f648:	4413      	add	r3, r2
    f64a:	b2da      	uxtb	r2, r3
    f64c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f654:	701a      	strb	r2, [r3, #0]
    f656:	f24c 3319 	movw	r3, #49945	; 0xc319
    f65a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f65e:	781b      	ldrb	r3, [r3, #0]
    f660:	3301      	adds	r3, #1
    f662:	b2da      	uxtb	r2, r3
    f664:	f24c 3319 	movw	r3, #49945	; 0xc319
    f668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f66c:	701a      	strb	r2, [r3, #0]
    f66e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f676:	781b      	ldrb	r3, [r3, #0]
    f678:	2bff      	cmp	r3, #255	; 0xff
    f67a:	d105      	bne.n	f688 <send_gps_pos+0x9f0>
    f67c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f684:	2200      	movs	r2, #0
    f686:	701a      	strb	r2, [r3, #0]
    f688:	f24c 3319 	movw	r3, #49945	; 0xc319
    f68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f690:	781b      	ldrb	r3, [r3, #0]
    f692:	461a      	mov	r2, r3
    f694:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f69c:	7899      	ldrb	r1, [r3, #2]
    f69e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6a6:	5499      	strb	r1, [r3, r2]
    f6a8:	4bae      	ldr	r3, [pc, #696]	; (f964 <send_gps_pos+0xccc>)
    f6aa:	781a      	ldrb	r2, [r3, #0]
    f6ac:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f6b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6b4:	781b      	ldrb	r3, [r3, #0]
    f6b6:	4413      	add	r3, r2
    f6b8:	b2da      	uxtb	r2, r3
    f6ba:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f6be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6c2:	701a      	strb	r2, [r3, #0]
    f6c4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f6c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6cc:	781a      	ldrb	r2, [r3, #0]
    f6ce:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f6d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6d6:	781b      	ldrb	r3, [r3, #0]
    f6d8:	4413      	add	r3, r2
    f6da:	b2da      	uxtb	r2, r3
    f6dc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f6e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6e4:	701a      	strb	r2, [r3, #0]
    f6e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    f6ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ee:	781b      	ldrb	r3, [r3, #0]
    f6f0:	3301      	adds	r3, #1
    f6f2:	b2da      	uxtb	r2, r3
    f6f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f6f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6fc:	701a      	strb	r2, [r3, #0]
    f6fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    f702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f706:	781b      	ldrb	r3, [r3, #0]
    f708:	2bff      	cmp	r3, #255	; 0xff
    f70a:	d105      	bne.n	f718 <send_gps_pos+0xa80>
    f70c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f714:	2200      	movs	r2, #0
    f716:	701a      	strb	r2, [r3, #0]
    f718:	f24c 3319 	movw	r3, #49945	; 0xc319
    f71c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f720:	781b      	ldrb	r3, [r3, #0]
    f722:	461a      	mov	r2, r3
    f724:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f72c:	78d9      	ldrb	r1, [r3, #3]
    f72e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f736:	5499      	strb	r1, [r3, r2]
    f738:	4b8b      	ldr	r3, [pc, #556]	; (f968 <send_gps_pos+0xcd0>)
    f73a:	781a      	ldrb	r2, [r3, #0]
    f73c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f744:	781b      	ldrb	r3, [r3, #0]
    f746:	4413      	add	r3, r2
    f748:	b2da      	uxtb	r2, r3
    f74a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f74e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f752:	701a      	strb	r2, [r3, #0]
    f754:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f75c:	781a      	ldrb	r2, [r3, #0]
    f75e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f766:	781b      	ldrb	r3, [r3, #0]
    f768:	4413      	add	r3, r2
    f76a:	b2da      	uxtb	r2, r3
    f76c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f774:	701a      	strb	r2, [r3, #0]
    f776:	f24c 3319 	movw	r3, #49945	; 0xc319
    f77a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f77e:	781b      	ldrb	r3, [r3, #0]
    f780:	3301      	adds	r3, #1
    f782:	b2da      	uxtb	r2, r3
    f784:	f24c 3319 	movw	r3, #49945	; 0xc319
    f788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f78c:	701a      	strb	r2, [r3, #0]
    f78e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f796:	781b      	ldrb	r3, [r3, #0]
    f798:	2bff      	cmp	r3, #255	; 0xff
    f79a:	d105      	bne.n	f7a8 <send_gps_pos+0xb10>
    f79c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f7a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7a4:	2200      	movs	r2, #0
    f7a6:	701a      	strb	r2, [r3, #0]
    f7a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    f7ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7b0:	781b      	ldrb	r3, [r3, #0]
    f7b2:	461a      	mov	r2, r3
    f7b4:	f24c 4390 	movw	r3, #50320	; 0xc490
    f7b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7bc:	7819      	ldrb	r1, [r3, #0]
    f7be:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f7c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7c6:	5499      	strb	r1, [r3, r2]
    f7c8:	f24c 4390 	movw	r3, #50320	; 0xc490
    f7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7d0:	781a      	ldrb	r2, [r3, #0]
    f7d2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f7d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7da:	781b      	ldrb	r3, [r3, #0]
    f7dc:	4413      	add	r3, r2
    f7de:	b2da      	uxtb	r2, r3
    f7e0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f7e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7e8:	701a      	strb	r2, [r3, #0]
    f7ea:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f7ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7f2:	781a      	ldrb	r2, [r3, #0]
    f7f4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f7f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7fc:	781b      	ldrb	r3, [r3, #0]
    f7fe:	4413      	add	r3, r2
    f800:	b2da      	uxtb	r2, r3
    f802:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f80a:	701a      	strb	r2, [r3, #0]
    f80c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f814:	781b      	ldrb	r3, [r3, #0]
    f816:	3301      	adds	r3, #1
    f818:	b2da      	uxtb	r2, r3
    f81a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f81e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f822:	701a      	strb	r2, [r3, #0]
    f824:	f24c 3319 	movw	r3, #49945	; 0xc319
    f828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f82c:	781b      	ldrb	r3, [r3, #0]
    f82e:	2bff      	cmp	r3, #255	; 0xff
    f830:	d105      	bne.n	f83e <send_gps_pos+0xba6>
    f832:	f24c 3319 	movw	r3, #49945	; 0xc319
    f836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f83a:	2200      	movs	r2, #0
    f83c:	701a      	strb	r2, [r3, #0]
    f83e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f846:	781b      	ldrb	r3, [r3, #0]
    f848:	461a      	mov	r2, r3
    f84a:	f24c 4390 	movw	r3, #50320	; 0xc490
    f84e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f852:	7859      	ldrb	r1, [r3, #1]
    f854:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f85c:	5499      	strb	r1, [r3, r2]
    f85e:	4b43      	ldr	r3, [pc, #268]	; (f96c <send_gps_pos+0xcd4>)
    f860:	781a      	ldrb	r2, [r3, #0]
    f862:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f86a:	781b      	ldrb	r3, [r3, #0]
    f86c:	4413      	add	r3, r2
    f86e:	b2da      	uxtb	r2, r3
    f870:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f878:	701a      	strb	r2, [r3, #0]
    f87a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f87e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f882:	781a      	ldrb	r2, [r3, #0]
    f884:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f888:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f88c:	781b      	ldrb	r3, [r3, #0]
    f88e:	4413      	add	r3, r2
    f890:	b2da      	uxtb	r2, r3
    f892:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f89a:	701a      	strb	r2, [r3, #0]
    f89c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f8a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8a4:	781b      	ldrb	r3, [r3, #0]
    f8a6:	3301      	adds	r3, #1
    f8a8:	b2da      	uxtb	r2, r3
    f8aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    f8ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8b2:	701a      	strb	r2, [r3, #0]
    f8b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f8b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8bc:	781b      	ldrb	r3, [r3, #0]
    f8be:	2bff      	cmp	r3, #255	; 0xff
    f8c0:	d105      	bne.n	f8ce <send_gps_pos+0xc36>
    f8c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    f8c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ca:	2200      	movs	r2, #0
    f8cc:	701a      	strb	r2, [r3, #0]
    f8ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    f8d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8d6:	781b      	ldrb	r3, [r3, #0]
    f8d8:	461a      	mov	r2, r3
    f8da:	f24c 4390 	movw	r3, #50320	; 0xc490
    f8de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8e2:	7899      	ldrb	r1, [r3, #2]
    f8e4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f8e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ec:	5499      	strb	r1, [r3, r2]
    f8ee:	4b20      	ldr	r3, [pc, #128]	; (f970 <send_gps_pos+0xcd8>)
    f8f0:	781a      	ldrb	r2, [r3, #0]
    f8f2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f8f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8fa:	781b      	ldrb	r3, [r3, #0]
    f8fc:	4413      	add	r3, r2
    f8fe:	b2da      	uxtb	r2, r3
    f900:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f908:	701a      	strb	r2, [r3, #0]
    f90a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f90e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f912:	781a      	ldrb	r2, [r3, #0]
    f914:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f918:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f91c:	781b      	ldrb	r3, [r3, #0]
    f91e:	4413      	add	r3, r2
    f920:	b2da      	uxtb	r2, r3
    f922:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f92a:	701a      	strb	r2, [r3, #0]
    f92c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f934:	781b      	ldrb	r3, [r3, #0]
    f936:	3301      	adds	r3, #1
    f938:	b2da      	uxtb	r2, r3
    f93a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f93e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f942:	701a      	strb	r2, [r3, #0]
    f944:	f24c 3319 	movw	r3, #49945	; 0xc319
    f948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f94c:	781b      	ldrb	r3, [r3, #0]
    f94e:	2bff      	cmp	r3, #255	; 0xff
    f950:	d110      	bne.n	f974 <send_gps_pos+0xcdc>
    f952:	f24c 3319 	movw	r3, #49945	; 0xc319
    f956:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f95a:	2200      	movs	r2, #0
    f95c:	701a      	strb	r2, [r3, #0]
    f95e:	e009      	b.n	f974 <send_gps_pos+0xcdc>
    f960:	2004c48d 	.word	0x2004c48d
    f964:	2004c48e 	.word	0x2004c48e
    f968:	2004c48f 	.word	0x2004c48f
    f96c:	2004c491 	.word	0x2004c491
    f970:	2004c492 	.word	0x2004c492
    f974:	f24c 3319 	movw	r3, #49945	; 0xc319
    f978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f97c:	781b      	ldrb	r3, [r3, #0]
    f97e:	461a      	mov	r2, r3
    f980:	f24c 4390 	movw	r3, #50320	; 0xc490
    f984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f988:	78d9      	ldrb	r1, [r3, #3]
    f98a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f98e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f992:	5499      	strb	r1, [r3, r2]
    f994:	4bd3      	ldr	r3, [pc, #844]	; (fce4 <send_gps_pos+0x104c>)
    f996:	781a      	ldrb	r2, [r3, #0]
    f998:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f99c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9a0:	781b      	ldrb	r3, [r3, #0]
    f9a2:	4413      	add	r3, r2
    f9a4:	b2da      	uxtb	r2, r3
    f9a6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f9aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9ae:	701a      	strb	r2, [r3, #0]
    f9b0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f9b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9b8:	781a      	ldrb	r2, [r3, #0]
    f9ba:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f9be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9c2:	781b      	ldrb	r3, [r3, #0]
    f9c4:	4413      	add	r3, r2
    f9c6:	b2da      	uxtb	r2, r3
    f9c8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f9cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9d0:	701a      	strb	r2, [r3, #0]
    f9d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    f9d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9da:	781b      	ldrb	r3, [r3, #0]
    f9dc:	3301      	adds	r3, #1
    f9de:	b2da      	uxtb	r2, r3
    f9e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    f9e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9e8:	701a      	strb	r2, [r3, #0]
    f9ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    f9ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9f2:	781b      	ldrb	r3, [r3, #0]
    f9f4:	2bff      	cmp	r3, #255	; 0xff
    f9f6:	d105      	bne.n	fa04 <send_gps_pos+0xd6c>
    f9f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    f9fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa00:	2200      	movs	r2, #0
    fa02:	701a      	strb	r2, [r3, #0]
    fa04:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa0c:	781b      	ldrb	r3, [r3, #0]
    fa0e:	461a      	mov	r2, r3
    fa10:	f24c 4394 	movw	r3, #50324	; 0xc494
    fa14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa18:	7819      	ldrb	r1, [r3, #0]
    fa1a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fa1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa22:	5499      	strb	r1, [r3, r2]
    fa24:	f24c 4394 	movw	r3, #50324	; 0xc494
    fa28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa2c:	781a      	ldrb	r2, [r3, #0]
    fa2e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fa32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa36:	781b      	ldrb	r3, [r3, #0]
    fa38:	4413      	add	r3, r2
    fa3a:	b2da      	uxtb	r2, r3
    fa3c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fa40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa44:	701a      	strb	r2, [r3, #0]
    fa46:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fa4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa4e:	781a      	ldrb	r2, [r3, #0]
    fa50:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fa54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa58:	781b      	ldrb	r3, [r3, #0]
    fa5a:	4413      	add	r3, r2
    fa5c:	b2da      	uxtb	r2, r3
    fa5e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fa62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa66:	701a      	strb	r2, [r3, #0]
    fa68:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa70:	781b      	ldrb	r3, [r3, #0]
    fa72:	3301      	adds	r3, #1
    fa74:	b2da      	uxtb	r2, r3
    fa76:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa7e:	701a      	strb	r2, [r3, #0]
    fa80:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa88:	781b      	ldrb	r3, [r3, #0]
    fa8a:	2bff      	cmp	r3, #255	; 0xff
    fa8c:	d105      	bne.n	fa9a <send_gps_pos+0xe02>
    fa8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa96:	2200      	movs	r2, #0
    fa98:	701a      	strb	r2, [r3, #0]
    fa9a:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faa2:	781b      	ldrb	r3, [r3, #0]
    faa4:	461a      	mov	r2, r3
    faa6:	f24c 4394 	movw	r3, #50324	; 0xc494
    faaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faae:	7859      	ldrb	r1, [r3, #1]
    fab0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fab8:	5499      	strb	r1, [r3, r2]
    faba:	4b8b      	ldr	r3, [pc, #556]	; (fce8 <send_gps_pos+0x1050>)
    fabc:	781a      	ldrb	r2, [r3, #0]
    fabe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fac6:	781b      	ldrb	r3, [r3, #0]
    fac8:	4413      	add	r3, r2
    faca:	b2da      	uxtb	r2, r3
    facc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fad4:	701a      	strb	r2, [r3, #0]
    fad6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fade:	781a      	ldrb	r2, [r3, #0]
    fae0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fae8:	781b      	ldrb	r3, [r3, #0]
    faea:	4413      	add	r3, r2
    faec:	b2da      	uxtb	r2, r3
    faee:	f24c 431e 	movw	r3, #50206	; 0xc41e
    faf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faf6:	701a      	strb	r2, [r3, #0]
    faf8:	f24c 3319 	movw	r3, #49945	; 0xc319
    fafc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb00:	781b      	ldrb	r3, [r3, #0]
    fb02:	3301      	adds	r3, #1
    fb04:	b2da      	uxtb	r2, r3
    fb06:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb0e:	701a      	strb	r2, [r3, #0]
    fb10:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb18:	781b      	ldrb	r3, [r3, #0]
    fb1a:	2bff      	cmp	r3, #255	; 0xff
    fb1c:	d105      	bne.n	fb2a <send_gps_pos+0xe92>
    fb1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb26:	2200      	movs	r2, #0
    fb28:	701a      	strb	r2, [r3, #0]
    fb2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb32:	781b      	ldrb	r3, [r3, #0]
    fb34:	461a      	mov	r2, r3
    fb36:	f24c 4394 	movw	r3, #50324	; 0xc494
    fb3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb3e:	7899      	ldrb	r1, [r3, #2]
    fb40:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fb44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb48:	5499      	strb	r1, [r3, r2]
    fb4a:	4b68      	ldr	r3, [pc, #416]	; (fcec <send_gps_pos+0x1054>)
    fb4c:	781a      	ldrb	r2, [r3, #0]
    fb4e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fb52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb56:	781b      	ldrb	r3, [r3, #0]
    fb58:	4413      	add	r3, r2
    fb5a:	b2da      	uxtb	r2, r3
    fb5c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fb60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb64:	701a      	strb	r2, [r3, #0]
    fb66:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fb6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb6e:	781a      	ldrb	r2, [r3, #0]
    fb70:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fb74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb78:	781b      	ldrb	r3, [r3, #0]
    fb7a:	4413      	add	r3, r2
    fb7c:	b2da      	uxtb	r2, r3
    fb7e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fb82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb86:	701a      	strb	r2, [r3, #0]
    fb88:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb90:	781b      	ldrb	r3, [r3, #0]
    fb92:	3301      	adds	r3, #1
    fb94:	b2da      	uxtb	r2, r3
    fb96:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb9e:	701a      	strb	r2, [r3, #0]
    fba0:	f24c 3319 	movw	r3, #49945	; 0xc319
    fba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fba8:	781b      	ldrb	r3, [r3, #0]
    fbaa:	2bff      	cmp	r3, #255	; 0xff
    fbac:	d105      	bne.n	fbba <send_gps_pos+0xf22>
    fbae:	f24c 3319 	movw	r3, #49945	; 0xc319
    fbb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbb6:	2200      	movs	r2, #0
    fbb8:	701a      	strb	r2, [r3, #0]
    fbba:	f24c 3319 	movw	r3, #49945	; 0xc319
    fbbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbc2:	781b      	ldrb	r3, [r3, #0]
    fbc4:	461a      	mov	r2, r3
    fbc6:	f24c 4394 	movw	r3, #50324	; 0xc494
    fbca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbce:	78d9      	ldrb	r1, [r3, #3]
    fbd0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fbd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbd8:	5499      	strb	r1, [r3, r2]
    fbda:	4b45      	ldr	r3, [pc, #276]	; (fcf0 <send_gps_pos+0x1058>)
    fbdc:	781a      	ldrb	r2, [r3, #0]
    fbde:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fbe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbe6:	781b      	ldrb	r3, [r3, #0]
    fbe8:	4413      	add	r3, r2
    fbea:	b2da      	uxtb	r2, r3
    fbec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fbf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbf4:	701a      	strb	r2, [r3, #0]
    fbf6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fbfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbfe:	781a      	ldrb	r2, [r3, #0]
    fc00:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fc04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc08:	781b      	ldrb	r3, [r3, #0]
    fc0a:	4413      	add	r3, r2
    fc0c:	b2da      	uxtb	r2, r3
    fc0e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fc12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc16:	701a      	strb	r2, [r3, #0]
    fc18:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc20:	781b      	ldrb	r3, [r3, #0]
    fc22:	3301      	adds	r3, #1
    fc24:	b2da      	uxtb	r2, r3
    fc26:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc2e:	701a      	strb	r2, [r3, #0]
    fc30:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc38:	781b      	ldrb	r3, [r3, #0]
    fc3a:	2bff      	cmp	r3, #255	; 0xff
    fc3c:	d105      	bne.n	fc4a <send_gps_pos+0xfb2>
    fc3e:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc46:	2200      	movs	r2, #0
    fc48:	701a      	strb	r2, [r3, #0]
    fc4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc52:	781b      	ldrb	r3, [r3, #0]
    fc54:	461a      	mov	r2, r3
    fc56:	f24c 4388 	movw	r3, #50312	; 0xc488
    fc5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc5e:	7819      	ldrb	r1, [r3, #0]
    fc60:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fc64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc68:	5499      	strb	r1, [r3, r2]
    fc6a:	f24c 4388 	movw	r3, #50312	; 0xc488
    fc6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc72:	781a      	ldrb	r2, [r3, #0]
    fc74:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fc78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc7c:	781b      	ldrb	r3, [r3, #0]
    fc7e:	4413      	add	r3, r2
    fc80:	b2da      	uxtb	r2, r3
    fc82:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fc86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc8a:	701a      	strb	r2, [r3, #0]
    fc8c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fc90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc94:	781a      	ldrb	r2, [r3, #0]
    fc96:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fc9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc9e:	781b      	ldrb	r3, [r3, #0]
    fca0:	4413      	add	r3, r2
    fca2:	b2da      	uxtb	r2, r3
    fca4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcac:	701a      	strb	r2, [r3, #0]
    fcae:	f24c 3319 	movw	r3, #49945	; 0xc319
    fcb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcb6:	781b      	ldrb	r3, [r3, #0]
    fcb8:	3301      	adds	r3, #1
    fcba:	b2da      	uxtb	r2, r3
    fcbc:	f24c 3319 	movw	r3, #49945	; 0xc319
    fcc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcc4:	701a      	strb	r2, [r3, #0]
    fcc6:	f24c 3319 	movw	r3, #49945	; 0xc319
    fcca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcce:	781b      	ldrb	r3, [r3, #0]
    fcd0:	2bff      	cmp	r3, #255	; 0xff
    fcd2:	d10f      	bne.n	fcf4 <send_gps_pos+0x105c>
    fcd4:	f24c 3319 	movw	r3, #49945	; 0xc319
    fcd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcdc:	2200      	movs	r2, #0
    fcde:	701a      	strb	r2, [r3, #0]
    fce0:	e008      	b.n	fcf4 <send_gps_pos+0x105c>
    fce2:	bf00      	nop
    fce4:	2004c493 	.word	0x2004c493
    fce8:	2004c495 	.word	0x2004c495
    fcec:	2004c496 	.word	0x2004c496
    fcf0:	2004c497 	.word	0x2004c497
    fcf4:	f24c 3319 	movw	r3, #49945	; 0xc319
    fcf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcfc:	781b      	ldrb	r3, [r3, #0]
    fcfe:	461a      	mov	r2, r3
    fd00:	f24c 4388 	movw	r3, #50312	; 0xc488
    fd04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd08:	7859      	ldrb	r1, [r3, #1]
    fd0a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fd0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd12:	5499      	strb	r1, [r3, r2]
    fd14:	4bc0      	ldr	r3, [pc, #768]	; (10018 <send_gps_pos+0x1380>)
    fd16:	781a      	ldrb	r2, [r3, #0]
    fd18:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fd1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd20:	781b      	ldrb	r3, [r3, #0]
    fd22:	4413      	add	r3, r2
    fd24:	b2da      	uxtb	r2, r3
    fd26:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fd2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd2e:	701a      	strb	r2, [r3, #0]
    fd30:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fd34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd38:	781a      	ldrb	r2, [r3, #0]
    fd3a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fd3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd42:	781b      	ldrb	r3, [r3, #0]
    fd44:	4413      	add	r3, r2
    fd46:	b2da      	uxtb	r2, r3
    fd48:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fd4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd50:	701a      	strb	r2, [r3, #0]
    fd52:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd5a:	781b      	ldrb	r3, [r3, #0]
    fd5c:	3301      	adds	r3, #1
    fd5e:	b2da      	uxtb	r2, r3
    fd60:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd68:	701a      	strb	r2, [r3, #0]
    fd6a:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd72:	781b      	ldrb	r3, [r3, #0]
    fd74:	2bff      	cmp	r3, #255	; 0xff
    fd76:	d105      	bne.n	fd84 <send_gps_pos+0x10ec>
    fd78:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd80:	2200      	movs	r2, #0
    fd82:	701a      	strb	r2, [r3, #0]
    fd84:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd8c:	781b      	ldrb	r3, [r3, #0]
    fd8e:	461a      	mov	r2, r3
    fd90:	f24c 4388 	movw	r3, #50312	; 0xc488
    fd94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd98:	7899      	ldrb	r1, [r3, #2]
    fd9a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fd9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fda2:	5499      	strb	r1, [r3, r2]
    fda4:	4b9d      	ldr	r3, [pc, #628]	; (1001c <send_gps_pos+0x1384>)
    fda6:	781a      	ldrb	r2, [r3, #0]
    fda8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fdac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdb0:	781b      	ldrb	r3, [r3, #0]
    fdb2:	4413      	add	r3, r2
    fdb4:	b2da      	uxtb	r2, r3
    fdb6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fdba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdbe:	701a      	strb	r2, [r3, #0]
    fdc0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fdc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdc8:	781a      	ldrb	r2, [r3, #0]
    fdca:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fdce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdd2:	781b      	ldrb	r3, [r3, #0]
    fdd4:	4413      	add	r3, r2
    fdd6:	b2da      	uxtb	r2, r3
    fdd8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fde0:	701a      	strb	r2, [r3, #0]
    fde2:	f24c 3319 	movw	r3, #49945	; 0xc319
    fde6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdea:	781b      	ldrb	r3, [r3, #0]
    fdec:	3301      	adds	r3, #1
    fdee:	b2da      	uxtb	r2, r3
    fdf0:	f24c 3319 	movw	r3, #49945	; 0xc319
    fdf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdf8:	701a      	strb	r2, [r3, #0]
    fdfa:	f24c 3319 	movw	r3, #49945	; 0xc319
    fdfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe02:	781b      	ldrb	r3, [r3, #0]
    fe04:	2bff      	cmp	r3, #255	; 0xff
    fe06:	d105      	bne.n	fe14 <send_gps_pos+0x117c>
    fe08:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe10:	2200      	movs	r2, #0
    fe12:	701a      	strb	r2, [r3, #0]
    fe14:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe1c:	781b      	ldrb	r3, [r3, #0]
    fe1e:	461a      	mov	r2, r3
    fe20:	f24c 4388 	movw	r3, #50312	; 0xc488
    fe24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe28:	78d9      	ldrb	r1, [r3, #3]
    fe2a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fe2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe32:	5499      	strb	r1, [r3, r2]
    fe34:	4b7a      	ldr	r3, [pc, #488]	; (10020 <send_gps_pos+0x1388>)
    fe36:	781a      	ldrb	r2, [r3, #0]
    fe38:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fe3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe40:	781b      	ldrb	r3, [r3, #0]
    fe42:	4413      	add	r3, r2
    fe44:	b2da      	uxtb	r2, r3
    fe46:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fe4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe4e:	701a      	strb	r2, [r3, #0]
    fe50:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fe54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe58:	781a      	ldrb	r2, [r3, #0]
    fe5a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fe5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe62:	781b      	ldrb	r3, [r3, #0]
    fe64:	4413      	add	r3, r2
    fe66:	b2da      	uxtb	r2, r3
    fe68:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fe6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe70:	701a      	strb	r2, [r3, #0]
    fe72:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe7a:	781b      	ldrb	r3, [r3, #0]
    fe7c:	3301      	adds	r3, #1
    fe7e:	b2da      	uxtb	r2, r3
    fe80:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe88:	701a      	strb	r2, [r3, #0]
    fe8a:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe92:	781b      	ldrb	r3, [r3, #0]
    fe94:	2bff      	cmp	r3, #255	; 0xff
    fe96:	d105      	bne.n	fea4 <send_gps_pos+0x120c>
    fe98:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fea0:	2200      	movs	r2, #0
    fea2:	701a      	strb	r2, [r3, #0]
    fea4:	f24c 3319 	movw	r3, #49945	; 0xc319
    fea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feac:	781b      	ldrb	r3, [r3, #0]
    feae:	461a      	mov	r2, r3
    feb0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    feb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feb8:	7819      	ldrb	r1, [r3, #0]
    feba:	f24c 331c 	movw	r3, #49948	; 0xc31c
    febe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fec2:	5499      	strb	r1, [r3, r2]
    fec4:	f24c 3319 	movw	r3, #49945	; 0xc319
    fec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fecc:	781b      	ldrb	r3, [r3, #0]
    fece:	3301      	adds	r3, #1
    fed0:	b2da      	uxtb	r2, r3
    fed2:	f24c 3319 	movw	r3, #49945	; 0xc319
    fed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feda:	701a      	strb	r2, [r3, #0]
    fedc:	f24c 3319 	movw	r3, #49945	; 0xc319
    fee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fee4:	781b      	ldrb	r3, [r3, #0]
    fee6:	2bff      	cmp	r3, #255	; 0xff
    fee8:	d105      	bne.n	fef6 <send_gps_pos+0x125e>
    feea:	f24c 3319 	movw	r3, #49945	; 0xc319
    feee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fef2:	2200      	movs	r2, #0
    fef4:	701a      	strb	r2, [r3, #0]
    fef6:	f24c 3319 	movw	r3, #49945	; 0xc319
    fefa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fefe:	781b      	ldrb	r3, [r3, #0]
    ff00:	461a      	mov	r2, r3
    ff02:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ff06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff0a:	7819      	ldrb	r1, [r3, #0]
    ff0c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ff10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff14:	5499      	strb	r1, [r3, r2]
    ff16:	f24c 3319 	movw	r3, #49945	; 0xc319
    ff1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff1e:	781b      	ldrb	r3, [r3, #0]
    ff20:	3301      	adds	r3, #1
    ff22:	b2da      	uxtb	r2, r3
    ff24:	f24c 3319 	movw	r3, #49945	; 0xc319
    ff28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff2c:	701a      	strb	r2, [r3, #0]
    ff2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ff32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff36:	781b      	ldrb	r3, [r3, #0]
    ff38:	2bff      	cmp	r3, #255	; 0xff
    ff3a:	d105      	bne.n	ff48 <send_gps_pos+0x12b0>
    ff3c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ff40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff44:	2200      	movs	r2, #0
    ff46:	701a      	strb	r2, [r3, #0]
    ff48:	f242 0339 	movw	r3, #8249	; 0x2039
    ff4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff50:	781b      	ldrb	r3, [r3, #0]
    ff52:	b2db      	uxtb	r3, r3
    ff54:	f003 0310 	and.w	r3, r3, #16
    ff58:	2b00      	cmp	r3, #0
    ff5a:	d15a      	bne.n	10012 <send_gps_pos+0x137a>
    ff5c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ff60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff64:	781b      	ldrb	r3, [r3, #0]
    ff66:	b2db      	uxtb	r3, r3
    ff68:	461a      	mov	r2, r3
    ff6a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ff6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff72:	5c9a      	ldrb	r2, [r3, r2]
    ff74:	f24c 431b 	movw	r3, #50203	; 0xc41b
    ff78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff7c:	701a      	strb	r2, [r3, #0]
    ff7e:	f24c 431c 	movw	r3, #50204	; 0xc41c
    ff82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff86:	2200      	movs	r2, #0
    ff88:	701a      	strb	r2, [r3, #0]
    ff8a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ff8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff92:	781b      	ldrb	r3, [r3, #0]
    ff94:	b2db      	uxtb	r3, r3
    ff96:	3301      	adds	r3, #1
    ff98:	b2da      	uxtb	r2, r3
    ff9a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ff9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffa2:	701a      	strb	r2, [r3, #0]
    ffa4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ffa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffac:	781b      	ldrb	r3, [r3, #0]
    ffae:	b2db      	uxtb	r3, r3
    ffb0:	2bff      	cmp	r3, #255	; 0xff
    ffb2:	d105      	bne.n	ffc0 <send_gps_pos+0x1328>
    ffb4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ffb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffbc:	2200      	movs	r2, #0
    ffbe:	701a      	strb	r2, [r3, #0]
    ffc0:	f242 0338 	movw	r3, #8248	; 0x2038
    ffc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffc8:	f242 0238 	movw	r2, #8248	; 0x2038
    ffcc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ffd0:	7812      	ldrb	r2, [r2, #0]
    ffd2:	b2d2      	uxtb	r2, r2
    ffd4:	f042 0201 	orr.w	r2, r2, #1
    ffd8:	b2d2      	uxtb	r2, r2
    ffda:	701a      	strb	r2, [r3, #0]
    ffdc:	f242 0339 	movw	r3, #8249	; 0x2039
    ffe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffe4:	f242 0239 	movw	r2, #8249	; 0x2039
    ffe8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ffec:	7812      	ldrb	r2, [r2, #0]
    ffee:	b2d2      	uxtb	r2, r2
    fff0:	f042 0210 	orr.w	r2, r2, #16
    fff4:	b2d2      	uxtb	r2, r2
    fff6:	701a      	strb	r2, [r3, #0]
    fff8:	e00b      	b.n	10012 <send_gps_pos+0x137a>
    fffa:	f24c 3318 	movw	r3, #49944	; 0xc318
    fffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10002:	781b      	ldrb	r3, [r3, #0]
   10004:	3301      	adds	r3, #1
   10006:	b2da      	uxtb	r2, r3
   10008:	f24c 3318 	movw	r3, #49944	; 0xc318
   1000c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10010:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
   10012:	f005 fbfd 	bl	15810 <estimator_update_state_gps>
  }
}
   10016:	bd80      	pop	{r7, pc}
   10018:	2004c489 	.word	0x2004c489
   1001c:	2004c48a 	.word	0x2004c48a
   10020:	2004c48b 	.word	0x2004c48b

00010024 <send_radIR>:

void send_radIR(void){
   10024:	b480      	push	{r7}
   10026:	af00      	add	r7, sp, #0
  if (gps_pos_available)
   10028:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
   1002c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10030:	781b      	ldrb	r3, [r3, #0]
   10032:	2b00      	cmp	r3, #0
   10034:	f000 85e8 	beq.w	10c08 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
   10038:	f24c 3319 	movw	r3, #49945	; 0xc319
   1003c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10040:	781a      	ldrb	r2, [r3, #0]
   10042:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10046:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1004a:	781b      	ldrb	r3, [r3, #0]
   1004c:	b2db      	uxtb	r3, r3
   1004e:	429a      	cmp	r2, r3
   10050:	d313      	bcc.n	1007a <send_radIR+0x56>
   10052:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10056:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1005a:	781b      	ldrb	r3, [r3, #0]
   1005c:	b2db      	uxtb	r3, r3
   1005e:	461a      	mov	r2, r3
   10060:	f24c 3319 	movw	r3, #49945	; 0xc319
   10064:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10068:	781b      	ldrb	r3, [r3, #0]
   1006a:	1ad3      	subs	r3, r2, r3
   1006c:	33ff      	adds	r3, #255	; 0xff
   1006e:	2b14      	cmp	r3, #20
   10070:	bfd4      	ite	le
   10072:	2300      	movle	r3, #0
   10074:	2301      	movgt	r3, #1
   10076:	b2db      	uxtb	r3, r3
   10078:	e011      	b.n	1009e <send_radIR+0x7a>
   1007a:	f24c 331a 	movw	r3, #49946	; 0xc31a
   1007e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10082:	781b      	ldrb	r3, [r3, #0]
   10084:	b2db      	uxtb	r3, r3
   10086:	461a      	mov	r2, r3
   10088:	f24c 3319 	movw	r3, #49945	; 0xc319
   1008c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10090:	781b      	ldrb	r3, [r3, #0]
   10092:	1ad3      	subs	r3, r2, r3
   10094:	2b14      	cmp	r3, #20
   10096:	bfd4      	ite	le
   10098:	2300      	movle	r3, #0
   1009a:	2301      	movgt	r3, #1
   1009c:	b2db      	uxtb	r3, r3
   1009e:	2b00      	cmp	r3, #0
   100a0:	f000 85a6 	beq.w	10bf0 <send_radIR+0xbcc>
   100a4:	f24c 3319 	movw	r3, #49945	; 0xc319
   100a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100ac:	781b      	ldrb	r3, [r3, #0]
   100ae:	461a      	mov	r2, r3
   100b0:	f24c 331c 	movw	r3, #49948	; 0xc31c
   100b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100b8:	2105      	movs	r1, #5
   100ba:	5499      	strb	r1, [r3, r2]
   100bc:	f24c 3319 	movw	r3, #49945	; 0xc319
   100c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100c4:	781b      	ldrb	r3, [r3, #0]
   100c6:	3301      	adds	r3, #1
   100c8:	b2da      	uxtb	r2, r3
   100ca:	f24c 3319 	movw	r3, #49945	; 0xc319
   100ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100d2:	701a      	strb	r2, [r3, #0]
   100d4:	f24c 3319 	movw	r3, #49945	; 0xc319
   100d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100dc:	781b      	ldrb	r3, [r3, #0]
   100de:	2bff      	cmp	r3, #255	; 0xff
   100e0:	d105      	bne.n	100ee <send_radIR+0xca>
   100e2:	f24c 3319 	movw	r3, #49945	; 0xc319
   100e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100ea:	2200      	movs	r2, #0
   100ec:	701a      	strb	r2, [r3, #0]
   100ee:	f24c 3319 	movw	r3, #49945	; 0xc319
   100f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100f6:	781b      	ldrb	r3, [r3, #0]
   100f8:	461a      	mov	r2, r3
   100fa:	f24c 331c 	movw	r3, #49948	; 0xc31c
   100fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10102:	2105      	movs	r1, #5
   10104:	5499      	strb	r1, [r3, r2]
   10106:	f24c 3319 	movw	r3, #49945	; 0xc319
   1010a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1010e:	781b      	ldrb	r3, [r3, #0]
   10110:	3301      	adds	r3, #1
   10112:	b2da      	uxtb	r2, r3
   10114:	f24c 3319 	movw	r3, #49945	; 0xc319
   10118:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1011c:	701a      	strb	r2, [r3, #0]
   1011e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10122:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10126:	781b      	ldrb	r3, [r3, #0]
   10128:	2bff      	cmp	r3, #255	; 0xff
   1012a:	d105      	bne.n	10138 <send_radIR+0x114>
   1012c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10130:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10134:	2200      	movs	r2, #0
   10136:	701a      	strb	r2, [r3, #0]
   10138:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1013c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10140:	2205      	movs	r2, #5
   10142:	701a      	strb	r2, [r3, #0]
   10144:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10148:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1014c:	2205      	movs	r2, #5
   1014e:	701a      	strb	r2, [r3, #0]
   10150:	f24c 3319 	movw	r3, #49945	; 0xc319
   10154:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10158:	781b      	ldrb	r3, [r3, #0]
   1015a:	461a      	mov	r2, r3
   1015c:	f64c 1310 	movw	r3, #51472	; 0xc910
   10160:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10164:	7819      	ldrb	r1, [r3, #0]
   10166:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1016a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1016e:	5499      	strb	r1, [r3, r2]
   10170:	f64c 1310 	movw	r3, #51472	; 0xc910
   10174:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10178:	781a      	ldrb	r2, [r3, #0]
   1017a:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1017e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10182:	781b      	ldrb	r3, [r3, #0]
   10184:	4413      	add	r3, r2
   10186:	b2da      	uxtb	r2, r3
   10188:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1018c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10190:	701a      	strb	r2, [r3, #0]
   10192:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10196:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1019a:	781a      	ldrb	r2, [r3, #0]
   1019c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   101a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101a4:	781b      	ldrb	r3, [r3, #0]
   101a6:	4413      	add	r3, r2
   101a8:	b2da      	uxtb	r2, r3
   101aa:	f24c 431e 	movw	r3, #50206	; 0xc41e
   101ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101b2:	701a      	strb	r2, [r3, #0]
   101b4:	f24c 3319 	movw	r3, #49945	; 0xc319
   101b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101bc:	781b      	ldrb	r3, [r3, #0]
   101be:	3301      	adds	r3, #1
   101c0:	b2da      	uxtb	r2, r3
   101c2:	f24c 3319 	movw	r3, #49945	; 0xc319
   101c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ca:	701a      	strb	r2, [r3, #0]
   101cc:	f24c 3319 	movw	r3, #49945	; 0xc319
   101d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101d4:	781b      	ldrb	r3, [r3, #0]
   101d6:	2bff      	cmp	r3, #255	; 0xff
   101d8:	d105      	bne.n	101e6 <send_radIR+0x1c2>
   101da:	f24c 3319 	movw	r3, #49945	; 0xc319
   101de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101e2:	2200      	movs	r2, #0
   101e4:	701a      	strb	r2, [r3, #0]
   101e6:	f24c 3319 	movw	r3, #49945	; 0xc319
   101ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ee:	781b      	ldrb	r3, [r3, #0]
   101f0:	461a      	mov	r2, r3
   101f2:	f64c 1310 	movw	r3, #51472	; 0xc910
   101f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101fa:	7859      	ldrb	r1, [r3, #1]
   101fc:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10200:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10204:	5499      	strb	r1, [r3, r2]
   10206:	4bd2      	ldr	r3, [pc, #840]	; (10550 <send_radIR+0x52c>)
   10208:	781a      	ldrb	r2, [r3, #0]
   1020a:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1020e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10212:	781b      	ldrb	r3, [r3, #0]
   10214:	4413      	add	r3, r2
   10216:	b2da      	uxtb	r2, r3
   10218:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1021c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10220:	701a      	strb	r2, [r3, #0]
   10222:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10226:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1022a:	781a      	ldrb	r2, [r3, #0]
   1022c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10230:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10234:	781b      	ldrb	r3, [r3, #0]
   10236:	4413      	add	r3, r2
   10238:	b2da      	uxtb	r2, r3
   1023a:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1023e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10242:	701a      	strb	r2, [r3, #0]
   10244:	f24c 3319 	movw	r3, #49945	; 0xc319
   10248:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1024c:	781b      	ldrb	r3, [r3, #0]
   1024e:	3301      	adds	r3, #1
   10250:	b2da      	uxtb	r2, r3
   10252:	f24c 3319 	movw	r3, #49945	; 0xc319
   10256:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1025a:	701a      	strb	r2, [r3, #0]
   1025c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10260:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10264:	781b      	ldrb	r3, [r3, #0]
   10266:	2bff      	cmp	r3, #255	; 0xff
   10268:	d105      	bne.n	10276 <send_radIR+0x252>
   1026a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1026e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10272:	2200      	movs	r2, #0
   10274:	701a      	strb	r2, [r3, #0]
   10276:	f24c 3319 	movw	r3, #49945	; 0xc319
   1027a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1027e:	781b      	ldrb	r3, [r3, #0]
   10280:	461a      	mov	r2, r3
   10282:	f64c 1310 	movw	r3, #51472	; 0xc910
   10286:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1028a:	7899      	ldrb	r1, [r3, #2]
   1028c:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10290:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10294:	5499      	strb	r1, [r3, r2]
   10296:	4baf      	ldr	r3, [pc, #700]	; (10554 <send_radIR+0x530>)
   10298:	781a      	ldrb	r2, [r3, #0]
   1029a:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1029e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102a2:	781b      	ldrb	r3, [r3, #0]
   102a4:	4413      	add	r3, r2
   102a6:	b2da      	uxtb	r2, r3
   102a8:	f24c 431d 	movw	r3, #50205	; 0xc41d
   102ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102b0:	701a      	strb	r2, [r3, #0]
   102b2:	f24c 431e 	movw	r3, #50206	; 0xc41e
   102b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ba:	781a      	ldrb	r2, [r3, #0]
   102bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
   102c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102c4:	781b      	ldrb	r3, [r3, #0]
   102c6:	4413      	add	r3, r2
   102c8:	b2da      	uxtb	r2, r3
   102ca:	f24c 431e 	movw	r3, #50206	; 0xc41e
   102ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102d2:	701a      	strb	r2, [r3, #0]
   102d4:	f24c 3319 	movw	r3, #49945	; 0xc319
   102d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102dc:	781b      	ldrb	r3, [r3, #0]
   102de:	3301      	adds	r3, #1
   102e0:	b2da      	uxtb	r2, r3
   102e2:	f24c 3319 	movw	r3, #49945	; 0xc319
   102e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ea:	701a      	strb	r2, [r3, #0]
   102ec:	f24c 3319 	movw	r3, #49945	; 0xc319
   102f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102f4:	781b      	ldrb	r3, [r3, #0]
   102f6:	2bff      	cmp	r3, #255	; 0xff
   102f8:	d105      	bne.n	10306 <send_radIR+0x2e2>
   102fa:	f24c 3319 	movw	r3, #49945	; 0xc319
   102fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10302:	2200      	movs	r2, #0
   10304:	701a      	strb	r2, [r3, #0]
   10306:	f24c 3319 	movw	r3, #49945	; 0xc319
   1030a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1030e:	781b      	ldrb	r3, [r3, #0]
   10310:	461a      	mov	r2, r3
   10312:	f64c 1310 	movw	r3, #51472	; 0xc910
   10316:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1031a:	78d9      	ldrb	r1, [r3, #3]
   1031c:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10320:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10324:	5499      	strb	r1, [r3, r2]
   10326:	4b8c      	ldr	r3, [pc, #560]	; (10558 <send_radIR+0x534>)
   10328:	781a      	ldrb	r2, [r3, #0]
   1032a:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1032e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10332:	781b      	ldrb	r3, [r3, #0]
   10334:	4413      	add	r3, r2
   10336:	b2da      	uxtb	r2, r3
   10338:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1033c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10340:	701a      	strb	r2, [r3, #0]
   10342:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10346:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1034a:	781a      	ldrb	r2, [r3, #0]
   1034c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10350:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10354:	781b      	ldrb	r3, [r3, #0]
   10356:	4413      	add	r3, r2
   10358:	b2da      	uxtb	r2, r3
   1035a:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1035e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10362:	701a      	strb	r2, [r3, #0]
   10364:	f24c 3319 	movw	r3, #49945	; 0xc319
   10368:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1036c:	781b      	ldrb	r3, [r3, #0]
   1036e:	3301      	adds	r3, #1
   10370:	b2da      	uxtb	r2, r3
   10372:	f24c 3319 	movw	r3, #49945	; 0xc319
   10376:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1037a:	701a      	strb	r2, [r3, #0]
   1037c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10380:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10384:	781b      	ldrb	r3, [r3, #0]
   10386:	2bff      	cmp	r3, #255	; 0xff
   10388:	d105      	bne.n	10396 <send_radIR+0x372>
   1038a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1038e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10392:	2200      	movs	r2, #0
   10394:	701a      	strb	r2, [r3, #0]
   10396:	f24c 3319 	movw	r3, #49945	; 0xc319
   1039a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1039e:	781b      	ldrb	r3, [r3, #0]
   103a0:	461a      	mov	r2, r3
   103a2:	f64c 1314 	movw	r3, #51476	; 0xc914
   103a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103aa:	7819      	ldrb	r1, [r3, #0]
   103ac:	f24c 331c 	movw	r3, #49948	; 0xc31c
   103b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103b4:	5499      	strb	r1, [r3, r2]
   103b6:	f64c 1314 	movw	r3, #51476	; 0xc914
   103ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103be:	781a      	ldrb	r2, [r3, #0]
   103c0:	f24c 431d 	movw	r3, #50205	; 0xc41d
   103c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103c8:	781b      	ldrb	r3, [r3, #0]
   103ca:	4413      	add	r3, r2
   103cc:	b2da      	uxtb	r2, r3
   103ce:	f24c 431d 	movw	r3, #50205	; 0xc41d
   103d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103d6:	701a      	strb	r2, [r3, #0]
   103d8:	f24c 431e 	movw	r3, #50206	; 0xc41e
   103dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103e0:	781a      	ldrb	r2, [r3, #0]
   103e2:	f24c 431d 	movw	r3, #50205	; 0xc41d
   103e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103ea:	781b      	ldrb	r3, [r3, #0]
   103ec:	4413      	add	r3, r2
   103ee:	b2da      	uxtb	r2, r3
   103f0:	f24c 431e 	movw	r3, #50206	; 0xc41e
   103f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103f8:	701a      	strb	r2, [r3, #0]
   103fa:	f24c 3319 	movw	r3, #49945	; 0xc319
   103fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10402:	781b      	ldrb	r3, [r3, #0]
   10404:	3301      	adds	r3, #1
   10406:	b2da      	uxtb	r2, r3
   10408:	f24c 3319 	movw	r3, #49945	; 0xc319
   1040c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10410:	701a      	strb	r2, [r3, #0]
   10412:	f24c 3319 	movw	r3, #49945	; 0xc319
   10416:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1041a:	781b      	ldrb	r3, [r3, #0]
   1041c:	2bff      	cmp	r3, #255	; 0xff
   1041e:	d105      	bne.n	1042c <send_radIR+0x408>
   10420:	f24c 3319 	movw	r3, #49945	; 0xc319
   10424:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10428:	2200      	movs	r2, #0
   1042a:	701a      	strb	r2, [r3, #0]
   1042c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10430:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10434:	781b      	ldrb	r3, [r3, #0]
   10436:	461a      	mov	r2, r3
   10438:	f64c 1314 	movw	r3, #51476	; 0xc914
   1043c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10440:	7859      	ldrb	r1, [r3, #1]
   10442:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10446:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1044a:	5499      	strb	r1, [r3, r2]
   1044c:	4b43      	ldr	r3, [pc, #268]	; (1055c <send_radIR+0x538>)
   1044e:	781a      	ldrb	r2, [r3, #0]
   10450:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10454:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10458:	781b      	ldrb	r3, [r3, #0]
   1045a:	4413      	add	r3, r2
   1045c:	b2da      	uxtb	r2, r3
   1045e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10462:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10466:	701a      	strb	r2, [r3, #0]
   10468:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1046c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10470:	781a      	ldrb	r2, [r3, #0]
   10472:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10476:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1047a:	781b      	ldrb	r3, [r3, #0]
   1047c:	4413      	add	r3, r2
   1047e:	b2da      	uxtb	r2, r3
   10480:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10484:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10488:	701a      	strb	r2, [r3, #0]
   1048a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1048e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10492:	781b      	ldrb	r3, [r3, #0]
   10494:	3301      	adds	r3, #1
   10496:	b2da      	uxtb	r2, r3
   10498:	f24c 3319 	movw	r3, #49945	; 0xc319
   1049c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104a0:	701a      	strb	r2, [r3, #0]
   104a2:	f24c 3319 	movw	r3, #49945	; 0xc319
   104a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104aa:	781b      	ldrb	r3, [r3, #0]
   104ac:	2bff      	cmp	r3, #255	; 0xff
   104ae:	d105      	bne.n	104bc <send_radIR+0x498>
   104b0:	f24c 3319 	movw	r3, #49945	; 0xc319
   104b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104b8:	2200      	movs	r2, #0
   104ba:	701a      	strb	r2, [r3, #0]
   104bc:	f24c 3319 	movw	r3, #49945	; 0xc319
   104c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104c4:	781b      	ldrb	r3, [r3, #0]
   104c6:	461a      	mov	r2, r3
   104c8:	f64c 1314 	movw	r3, #51476	; 0xc914
   104cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104d0:	7899      	ldrb	r1, [r3, #2]
   104d2:	f24c 331c 	movw	r3, #49948	; 0xc31c
   104d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104da:	5499      	strb	r1, [r3, r2]
   104dc:	4b20      	ldr	r3, [pc, #128]	; (10560 <send_radIR+0x53c>)
   104de:	781a      	ldrb	r2, [r3, #0]
   104e0:	f24c 431d 	movw	r3, #50205	; 0xc41d
   104e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104e8:	781b      	ldrb	r3, [r3, #0]
   104ea:	4413      	add	r3, r2
   104ec:	b2da      	uxtb	r2, r3
   104ee:	f24c 431d 	movw	r3, #50205	; 0xc41d
   104f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104f6:	701a      	strb	r2, [r3, #0]
   104f8:	f24c 431e 	movw	r3, #50206	; 0xc41e
   104fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10500:	781a      	ldrb	r2, [r3, #0]
   10502:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10506:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1050a:	781b      	ldrb	r3, [r3, #0]
   1050c:	4413      	add	r3, r2
   1050e:	b2da      	uxtb	r2, r3
   10510:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10514:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10518:	701a      	strb	r2, [r3, #0]
   1051a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1051e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10522:	781b      	ldrb	r3, [r3, #0]
   10524:	3301      	adds	r3, #1
   10526:	b2da      	uxtb	r2, r3
   10528:	f24c 3319 	movw	r3, #49945	; 0xc319
   1052c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10530:	701a      	strb	r2, [r3, #0]
   10532:	f24c 3319 	movw	r3, #49945	; 0xc319
   10536:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1053a:	781b      	ldrb	r3, [r3, #0]
   1053c:	2bff      	cmp	r3, #255	; 0xff
   1053e:	d111      	bne.n	10564 <send_radIR+0x540>
   10540:	f24c 3319 	movw	r3, #49945	; 0xc319
   10544:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10548:	2200      	movs	r2, #0
   1054a:	701a      	strb	r2, [r3, #0]
   1054c:	e00a      	b.n	10564 <send_radIR+0x540>
   1054e:	bf00      	nop
   10550:	2004c911 	.word	0x2004c911
   10554:	2004c912 	.word	0x2004c912
   10558:	2004c913 	.word	0x2004c913
   1055c:	2004c915 	.word	0x2004c915
   10560:	2004c916 	.word	0x2004c916
   10564:	f24c 3319 	movw	r3, #49945	; 0xc319
   10568:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1056c:	781b      	ldrb	r3, [r3, #0]
   1056e:	461a      	mov	r2, r3
   10570:	f64c 1314 	movw	r3, #51476	; 0xc914
   10574:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10578:	78d9      	ldrb	r1, [r3, #3]
   1057a:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1057e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10582:	5499      	strb	r1, [r3, r2]
   10584:	4bd3      	ldr	r3, [pc, #844]	; (108d4 <send_radIR+0x8b0>)
   10586:	781a      	ldrb	r2, [r3, #0]
   10588:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1058c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10590:	781b      	ldrb	r3, [r3, #0]
   10592:	4413      	add	r3, r2
   10594:	b2da      	uxtb	r2, r3
   10596:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1059a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1059e:	701a      	strb	r2, [r3, #0]
   105a0:	f24c 431e 	movw	r3, #50206	; 0xc41e
   105a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105a8:	781a      	ldrb	r2, [r3, #0]
   105aa:	f24c 431d 	movw	r3, #50205	; 0xc41d
   105ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105b2:	781b      	ldrb	r3, [r3, #0]
   105b4:	4413      	add	r3, r2
   105b6:	b2da      	uxtb	r2, r3
   105b8:	f24c 431e 	movw	r3, #50206	; 0xc41e
   105bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105c0:	701a      	strb	r2, [r3, #0]
   105c2:	f24c 3319 	movw	r3, #49945	; 0xc319
   105c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ca:	781b      	ldrb	r3, [r3, #0]
   105cc:	3301      	adds	r3, #1
   105ce:	b2da      	uxtb	r2, r3
   105d0:	f24c 3319 	movw	r3, #49945	; 0xc319
   105d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105d8:	701a      	strb	r2, [r3, #0]
   105da:	f24c 3319 	movw	r3, #49945	; 0xc319
   105de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105e2:	781b      	ldrb	r3, [r3, #0]
   105e4:	2bff      	cmp	r3, #255	; 0xff
   105e6:	d105      	bne.n	105f4 <send_radIR+0x5d0>
   105e8:	f24c 3319 	movw	r3, #49945	; 0xc319
   105ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105f0:	2200      	movs	r2, #0
   105f2:	701a      	strb	r2, [r3, #0]
   105f4:	f24c 3319 	movw	r3, #49945	; 0xc319
   105f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105fc:	781b      	ldrb	r3, [r3, #0]
   105fe:	461a      	mov	r2, r3
   10600:	f64c 130c 	movw	r3, #51468	; 0xc90c
   10604:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10608:	7819      	ldrb	r1, [r3, #0]
   1060a:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1060e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10612:	5499      	strb	r1, [r3, r2]
   10614:	f64c 130c 	movw	r3, #51468	; 0xc90c
   10618:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1061c:	781a      	ldrb	r2, [r3, #0]
   1061e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10622:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10626:	781b      	ldrb	r3, [r3, #0]
   10628:	4413      	add	r3, r2
   1062a:	b2da      	uxtb	r2, r3
   1062c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10630:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10634:	701a      	strb	r2, [r3, #0]
   10636:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1063a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1063e:	781a      	ldrb	r2, [r3, #0]
   10640:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10644:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10648:	781b      	ldrb	r3, [r3, #0]
   1064a:	4413      	add	r3, r2
   1064c:	b2da      	uxtb	r2, r3
   1064e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10652:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10656:	701a      	strb	r2, [r3, #0]
   10658:	f24c 3319 	movw	r3, #49945	; 0xc319
   1065c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10660:	781b      	ldrb	r3, [r3, #0]
   10662:	3301      	adds	r3, #1
   10664:	b2da      	uxtb	r2, r3
   10666:	f24c 3319 	movw	r3, #49945	; 0xc319
   1066a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1066e:	701a      	strb	r2, [r3, #0]
   10670:	f24c 3319 	movw	r3, #49945	; 0xc319
   10674:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10678:	781b      	ldrb	r3, [r3, #0]
   1067a:	2bff      	cmp	r3, #255	; 0xff
   1067c:	d105      	bne.n	1068a <send_radIR+0x666>
   1067e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10682:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10686:	2200      	movs	r2, #0
   10688:	701a      	strb	r2, [r3, #0]
   1068a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1068e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10692:	781b      	ldrb	r3, [r3, #0]
   10694:	461a      	mov	r2, r3
   10696:	f64c 130c 	movw	r3, #51468	; 0xc90c
   1069a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1069e:	7859      	ldrb	r1, [r3, #1]
   106a0:	f24c 331c 	movw	r3, #49948	; 0xc31c
   106a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106a8:	5499      	strb	r1, [r3, r2]
   106aa:	4b8b      	ldr	r3, [pc, #556]	; (108d8 <send_radIR+0x8b4>)
   106ac:	781a      	ldrb	r2, [r3, #0]
   106ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
   106b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106b6:	781b      	ldrb	r3, [r3, #0]
   106b8:	4413      	add	r3, r2
   106ba:	b2da      	uxtb	r2, r3
   106bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
   106c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106c4:	701a      	strb	r2, [r3, #0]
   106c6:	f24c 431e 	movw	r3, #50206	; 0xc41e
   106ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ce:	781a      	ldrb	r2, [r3, #0]
   106d0:	f24c 431d 	movw	r3, #50205	; 0xc41d
   106d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106d8:	781b      	ldrb	r3, [r3, #0]
   106da:	4413      	add	r3, r2
   106dc:	b2da      	uxtb	r2, r3
   106de:	f24c 431e 	movw	r3, #50206	; 0xc41e
   106e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106e6:	701a      	strb	r2, [r3, #0]
   106e8:	f24c 3319 	movw	r3, #49945	; 0xc319
   106ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106f0:	781b      	ldrb	r3, [r3, #0]
   106f2:	3301      	adds	r3, #1
   106f4:	b2da      	uxtb	r2, r3
   106f6:	f24c 3319 	movw	r3, #49945	; 0xc319
   106fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106fe:	701a      	strb	r2, [r3, #0]
   10700:	f24c 3319 	movw	r3, #49945	; 0xc319
   10704:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10708:	781b      	ldrb	r3, [r3, #0]
   1070a:	2bff      	cmp	r3, #255	; 0xff
   1070c:	d105      	bne.n	1071a <send_radIR+0x6f6>
   1070e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10712:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10716:	2200      	movs	r2, #0
   10718:	701a      	strb	r2, [r3, #0]
   1071a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1071e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10722:	781b      	ldrb	r3, [r3, #0]
   10724:	461a      	mov	r2, r3
   10726:	f64c 130c 	movw	r3, #51468	; 0xc90c
   1072a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1072e:	7899      	ldrb	r1, [r3, #2]
   10730:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10734:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10738:	5499      	strb	r1, [r3, r2]
   1073a:	4b68      	ldr	r3, [pc, #416]	; (108dc <send_radIR+0x8b8>)
   1073c:	781a      	ldrb	r2, [r3, #0]
   1073e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10742:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10746:	781b      	ldrb	r3, [r3, #0]
   10748:	4413      	add	r3, r2
   1074a:	b2da      	uxtb	r2, r3
   1074c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10750:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10754:	701a      	strb	r2, [r3, #0]
   10756:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1075a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1075e:	781a      	ldrb	r2, [r3, #0]
   10760:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10764:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10768:	781b      	ldrb	r3, [r3, #0]
   1076a:	4413      	add	r3, r2
   1076c:	b2da      	uxtb	r2, r3
   1076e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10772:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10776:	701a      	strb	r2, [r3, #0]
   10778:	f24c 3319 	movw	r3, #49945	; 0xc319
   1077c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10780:	781b      	ldrb	r3, [r3, #0]
   10782:	3301      	adds	r3, #1
   10784:	b2da      	uxtb	r2, r3
   10786:	f24c 3319 	movw	r3, #49945	; 0xc319
   1078a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1078e:	701a      	strb	r2, [r3, #0]
   10790:	f24c 3319 	movw	r3, #49945	; 0xc319
   10794:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10798:	781b      	ldrb	r3, [r3, #0]
   1079a:	2bff      	cmp	r3, #255	; 0xff
   1079c:	d105      	bne.n	107aa <send_radIR+0x786>
   1079e:	f24c 3319 	movw	r3, #49945	; 0xc319
   107a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107a6:	2200      	movs	r2, #0
   107a8:	701a      	strb	r2, [r3, #0]
   107aa:	f24c 3319 	movw	r3, #49945	; 0xc319
   107ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107b2:	781b      	ldrb	r3, [r3, #0]
   107b4:	461a      	mov	r2, r3
   107b6:	f64c 130c 	movw	r3, #51468	; 0xc90c
   107ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107be:	78d9      	ldrb	r1, [r3, #3]
   107c0:	f24c 331c 	movw	r3, #49948	; 0xc31c
   107c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107c8:	5499      	strb	r1, [r3, r2]
   107ca:	4b45      	ldr	r3, [pc, #276]	; (108e0 <send_radIR+0x8bc>)
   107cc:	781a      	ldrb	r2, [r3, #0]
   107ce:	f24c 431d 	movw	r3, #50205	; 0xc41d
   107d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107d6:	781b      	ldrb	r3, [r3, #0]
   107d8:	4413      	add	r3, r2
   107da:	b2da      	uxtb	r2, r3
   107dc:	f24c 431d 	movw	r3, #50205	; 0xc41d
   107e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107e4:	701a      	strb	r2, [r3, #0]
   107e6:	f24c 431e 	movw	r3, #50206	; 0xc41e
   107ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107ee:	781a      	ldrb	r2, [r3, #0]
   107f0:	f24c 431d 	movw	r3, #50205	; 0xc41d
   107f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107f8:	781b      	ldrb	r3, [r3, #0]
   107fa:	4413      	add	r3, r2
   107fc:	b2da      	uxtb	r2, r3
   107fe:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10802:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10806:	701a      	strb	r2, [r3, #0]
   10808:	f24c 3319 	movw	r3, #49945	; 0xc319
   1080c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10810:	781b      	ldrb	r3, [r3, #0]
   10812:	3301      	adds	r3, #1
   10814:	b2da      	uxtb	r2, r3
   10816:	f24c 3319 	movw	r3, #49945	; 0xc319
   1081a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1081e:	701a      	strb	r2, [r3, #0]
   10820:	f24c 3319 	movw	r3, #49945	; 0xc319
   10824:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10828:	781b      	ldrb	r3, [r3, #0]
   1082a:	2bff      	cmp	r3, #255	; 0xff
   1082c:	d105      	bne.n	1083a <send_radIR+0x816>
   1082e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10832:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10836:	2200      	movs	r2, #0
   10838:	701a      	strb	r2, [r3, #0]
   1083a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1083e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10842:	781b      	ldrb	r3, [r3, #0]
   10844:	461a      	mov	r2, r3
   10846:	f240 5342 	movw	r3, #1346	; 0x542
   1084a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1084e:	7819      	ldrb	r1, [r3, #0]
   10850:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10854:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10858:	5499      	strb	r1, [r3, r2]
   1085a:	f240 5342 	movw	r3, #1346	; 0x542
   1085e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10862:	781a      	ldrb	r2, [r3, #0]
   10864:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10868:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1086c:	781b      	ldrb	r3, [r3, #0]
   1086e:	4413      	add	r3, r2
   10870:	b2da      	uxtb	r2, r3
   10872:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10876:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1087a:	701a      	strb	r2, [r3, #0]
   1087c:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10880:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10884:	781a      	ldrb	r2, [r3, #0]
   10886:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1088a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1088e:	781b      	ldrb	r3, [r3, #0]
   10890:	4413      	add	r3, r2
   10892:	b2da      	uxtb	r2, r3
   10894:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10898:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1089c:	701a      	strb	r2, [r3, #0]
   1089e:	f24c 3319 	movw	r3, #49945	; 0xc319
   108a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108a6:	781b      	ldrb	r3, [r3, #0]
   108a8:	3301      	adds	r3, #1
   108aa:	b2da      	uxtb	r2, r3
   108ac:	f24c 3319 	movw	r3, #49945	; 0xc319
   108b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108b4:	701a      	strb	r2, [r3, #0]
   108b6:	f24c 3319 	movw	r3, #49945	; 0xc319
   108ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108be:	781b      	ldrb	r3, [r3, #0]
   108c0:	2bff      	cmp	r3, #255	; 0xff
   108c2:	d10f      	bne.n	108e4 <send_radIR+0x8c0>
   108c4:	f24c 3319 	movw	r3, #49945	; 0xc319
   108c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108cc:	2200      	movs	r2, #0
   108ce:	701a      	strb	r2, [r3, #0]
   108d0:	e008      	b.n	108e4 <send_radIR+0x8c0>
   108d2:	bf00      	nop
   108d4:	2004c917 	.word	0x2004c917
   108d8:	2004c90d 	.word	0x2004c90d
   108dc:	2004c90e 	.word	0x2004c90e
   108e0:	2004c90f 	.word	0x2004c90f
   108e4:	f24c 3319 	movw	r3, #49945	; 0xc319
   108e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108ec:	781b      	ldrb	r3, [r3, #0]
   108ee:	461a      	mov	r2, r3
   108f0:	f240 5342 	movw	r3, #1346	; 0x542
   108f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108f8:	7859      	ldrb	r1, [r3, #1]
   108fa:	f24c 331c 	movw	r3, #49948	; 0xc31c
   108fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10902:	5499      	strb	r1, [r3, r2]
   10904:	4bc2      	ldr	r3, [pc, #776]	; (10c10 <send_radIR+0xbec>)
   10906:	781a      	ldrb	r2, [r3, #0]
   10908:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1090c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10910:	781b      	ldrb	r3, [r3, #0]
   10912:	4413      	add	r3, r2
   10914:	b2da      	uxtb	r2, r3
   10916:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1091a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1091e:	701a      	strb	r2, [r3, #0]
   10920:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10924:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10928:	781a      	ldrb	r2, [r3, #0]
   1092a:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1092e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10932:	781b      	ldrb	r3, [r3, #0]
   10934:	4413      	add	r3, r2
   10936:	b2da      	uxtb	r2, r3
   10938:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1093c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10940:	701a      	strb	r2, [r3, #0]
   10942:	f24c 3319 	movw	r3, #49945	; 0xc319
   10946:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1094a:	781b      	ldrb	r3, [r3, #0]
   1094c:	3301      	adds	r3, #1
   1094e:	b2da      	uxtb	r2, r3
   10950:	f24c 3319 	movw	r3, #49945	; 0xc319
   10954:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10958:	701a      	strb	r2, [r3, #0]
   1095a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1095e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10962:	781b      	ldrb	r3, [r3, #0]
   10964:	2bff      	cmp	r3, #255	; 0xff
   10966:	d105      	bne.n	10974 <send_radIR+0x950>
   10968:	f24c 3319 	movw	r3, #49945	; 0xc319
   1096c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10970:	2200      	movs	r2, #0
   10972:	701a      	strb	r2, [r3, #0]
   10974:	f24c 3319 	movw	r3, #49945	; 0xc319
   10978:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1097c:	781b      	ldrb	r3, [r3, #0]
   1097e:	461a      	mov	r2, r3
   10980:	f240 5344 	movw	r3, #1348	; 0x544
   10984:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10988:	7819      	ldrb	r1, [r3, #0]
   1098a:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1098e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10992:	5499      	strb	r1, [r3, r2]
   10994:	f240 5344 	movw	r3, #1348	; 0x544
   10998:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1099c:	781a      	ldrb	r2, [r3, #0]
   1099e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   109a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109a6:	781b      	ldrb	r3, [r3, #0]
   109a8:	4413      	add	r3, r2
   109aa:	b2da      	uxtb	r2, r3
   109ac:	f24c 431d 	movw	r3, #50205	; 0xc41d
   109b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109b4:	701a      	strb	r2, [r3, #0]
   109b6:	f24c 431e 	movw	r3, #50206	; 0xc41e
   109ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109be:	781a      	ldrb	r2, [r3, #0]
   109c0:	f24c 431d 	movw	r3, #50205	; 0xc41d
   109c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109c8:	781b      	ldrb	r3, [r3, #0]
   109ca:	4413      	add	r3, r2
   109cc:	b2da      	uxtb	r2, r3
   109ce:	f24c 431e 	movw	r3, #50206	; 0xc41e
   109d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109d6:	701a      	strb	r2, [r3, #0]
   109d8:	f24c 3319 	movw	r3, #49945	; 0xc319
   109dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109e0:	781b      	ldrb	r3, [r3, #0]
   109e2:	3301      	adds	r3, #1
   109e4:	b2da      	uxtb	r2, r3
   109e6:	f24c 3319 	movw	r3, #49945	; 0xc319
   109ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109ee:	701a      	strb	r2, [r3, #0]
   109f0:	f24c 3319 	movw	r3, #49945	; 0xc319
   109f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109f8:	781b      	ldrb	r3, [r3, #0]
   109fa:	2bff      	cmp	r3, #255	; 0xff
   109fc:	d105      	bne.n	10a0a <send_radIR+0x9e6>
   109fe:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a06:	2200      	movs	r2, #0
   10a08:	701a      	strb	r2, [r3, #0]
   10a0a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a12:	781b      	ldrb	r3, [r3, #0]
   10a14:	461a      	mov	r2, r3
   10a16:	f240 5344 	movw	r3, #1348	; 0x544
   10a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a1e:	7859      	ldrb	r1, [r3, #1]
   10a20:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a28:	5499      	strb	r1, [r3, r2]
   10a2a:	4b7a      	ldr	r3, [pc, #488]	; (10c14 <send_radIR+0xbf0>)
   10a2c:	781a      	ldrb	r2, [r3, #0]
   10a2e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a36:	781b      	ldrb	r3, [r3, #0]
   10a38:	4413      	add	r3, r2
   10a3a:	b2da      	uxtb	r2, r3
   10a3c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a44:	701a      	strb	r2, [r3, #0]
   10a46:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a4e:	781a      	ldrb	r2, [r3, #0]
   10a50:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10a54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a58:	781b      	ldrb	r3, [r3, #0]
   10a5a:	4413      	add	r3, r2
   10a5c:	b2da      	uxtb	r2, r3
   10a5e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a66:	701a      	strb	r2, [r3, #0]
   10a68:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a70:	781b      	ldrb	r3, [r3, #0]
   10a72:	3301      	adds	r3, #1
   10a74:	b2da      	uxtb	r2, r3
   10a76:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a7e:	701a      	strb	r2, [r3, #0]
   10a80:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a88:	781b      	ldrb	r3, [r3, #0]
   10a8a:	2bff      	cmp	r3, #255	; 0xff
   10a8c:	d105      	bne.n	10a9a <send_radIR+0xa76>
   10a8e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a96:	2200      	movs	r2, #0
   10a98:	701a      	strb	r2, [r3, #0]
   10a9a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aa2:	781b      	ldrb	r3, [r3, #0]
   10aa4:	461a      	mov	r2, r3
   10aa6:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10aaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aae:	7819      	ldrb	r1, [r3, #0]
   10ab0:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ab8:	5499      	strb	r1, [r3, r2]
   10aba:	f24c 3319 	movw	r3, #49945	; 0xc319
   10abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ac2:	781b      	ldrb	r3, [r3, #0]
   10ac4:	3301      	adds	r3, #1
   10ac6:	b2da      	uxtb	r2, r3
   10ac8:	f24c 3319 	movw	r3, #49945	; 0xc319
   10acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ad0:	701a      	strb	r2, [r3, #0]
   10ad2:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ada:	781b      	ldrb	r3, [r3, #0]
   10adc:	2bff      	cmp	r3, #255	; 0xff
   10ade:	d105      	bne.n	10aec <send_radIR+0xac8>
   10ae0:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ae8:	2200      	movs	r2, #0
   10aea:	701a      	strb	r2, [r3, #0]
   10aec:	f24c 3319 	movw	r3, #49945	; 0xc319
   10af0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10af4:	781b      	ldrb	r3, [r3, #0]
   10af6:	461a      	mov	r2, r3
   10af8:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b00:	7819      	ldrb	r1, [r3, #0]
   10b02:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b0a:	5499      	strb	r1, [r3, r2]
   10b0c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b14:	781b      	ldrb	r3, [r3, #0]
   10b16:	3301      	adds	r3, #1
   10b18:	b2da      	uxtb	r2, r3
   10b1a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b22:	701a      	strb	r2, [r3, #0]
   10b24:	f24c 3319 	movw	r3, #49945	; 0xc319
   10b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b2c:	781b      	ldrb	r3, [r3, #0]
   10b2e:	2bff      	cmp	r3, #255	; 0xff
   10b30:	d105      	bne.n	10b3e <send_radIR+0xb1a>
   10b32:	f24c 3319 	movw	r3, #49945	; 0xc319
   10b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b3a:	2200      	movs	r2, #0
   10b3c:	701a      	strb	r2, [r3, #0]
   10b3e:	f242 0339 	movw	r3, #8249	; 0x2039
   10b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b46:	781b      	ldrb	r3, [r3, #0]
   10b48:	b2db      	uxtb	r3, r3
   10b4a:	f003 0310 	and.w	r3, r3, #16
   10b4e:	2b00      	cmp	r3, #0
   10b50:	d15a      	bne.n	10c08 <send_radIR+0xbe4>
   10b52:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10b56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b5a:	781b      	ldrb	r3, [r3, #0]
   10b5c:	b2db      	uxtb	r3, r3
   10b5e:	461a      	mov	r2, r3
   10b60:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b68:	5c9a      	ldrb	r2, [r3, r2]
   10b6a:	f24c 431b 	movw	r3, #50203	; 0xc41b
   10b6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b72:	701a      	strb	r2, [r3, #0]
   10b74:	f24c 431c 	movw	r3, #50204	; 0xc41c
   10b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b7c:	2200      	movs	r2, #0
   10b7e:	701a      	strb	r2, [r3, #0]
   10b80:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b88:	781b      	ldrb	r3, [r3, #0]
   10b8a:	b2db      	uxtb	r3, r3
   10b8c:	3301      	adds	r3, #1
   10b8e:	b2da      	uxtb	r2, r3
   10b90:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10b94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b98:	701a      	strb	r2, [r3, #0]
   10b9a:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10b9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ba2:	781b      	ldrb	r3, [r3, #0]
   10ba4:	b2db      	uxtb	r3, r3
   10ba6:	2bff      	cmp	r3, #255	; 0xff
   10ba8:	d105      	bne.n	10bb6 <send_radIR+0xb92>
   10baa:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bb2:	2200      	movs	r2, #0
   10bb4:	701a      	strb	r2, [r3, #0]
   10bb6:	f242 0338 	movw	r3, #8248	; 0x2038
   10bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bbe:	f242 0238 	movw	r2, #8248	; 0x2038
   10bc2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10bc6:	7812      	ldrb	r2, [r2, #0]
   10bc8:	b2d2      	uxtb	r2, r2
   10bca:	f042 0201 	orr.w	r2, r2, #1
   10bce:	b2d2      	uxtb	r2, r2
   10bd0:	701a      	strb	r2, [r3, #0]
   10bd2:	f242 0339 	movw	r3, #8249	; 0x2039
   10bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bda:	f242 0239 	movw	r2, #8249	; 0x2039
   10bde:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10be2:	7812      	ldrb	r2, [r2, #0]
   10be4:	b2d2      	uxtb	r2, r2
   10be6:	f042 0210 	orr.w	r2, r2, #16
   10bea:	b2d2      	uxtb	r2, r2
   10bec:	701a      	strb	r2, [r3, #0]
   10bee:	e00b      	b.n	10c08 <send_radIR+0xbe4>
   10bf0:	f24c 3318 	movw	r3, #49944	; 0xc318
   10bf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bf8:	781b      	ldrb	r3, [r3, #0]
   10bfa:	3301      	adds	r3, #1
   10bfc:	b2da      	uxtb	r2, r3
   10bfe:	f24c 3318 	movw	r3, #49944	; 0xc318
   10c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c06:	701a      	strb	r2, [r3, #0]
}
   10c08:	46bd      	mov	sp, r7
   10c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
   10c0e:	4770      	bx	lr
   10c10:	20000543 	.word	0x20000543
   10c14:	20000545 	.word	0x20000545

00010c18 <send_takeOff>:

void send_takeOff(void){
   10c18:	b580      	push	{r7, lr}
   10c1a:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   10c1c:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
   10c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c24:	781b      	ldrb	r3, [r3, #0]
   10c26:	2b00      	cmp	r3, #0
   10c28:	f000 8200 	beq.w	1102c <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   10c2c:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   10c30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c34:	881b      	ldrh	r3, [r3, #0]
   10c36:	2b00      	cmp	r3, #0
   10c38:	f040 81f2 	bne.w	11020 <send_takeOff+0x408>
   10c3c:	f64c 1304 	movw	r3, #51460	; 0xc904
   10c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c44:	681b      	ldr	r3, [r3, #0]
   10c46:	4618      	mov	r0, r3
   10c48:	f04f 0100 	mov.w	r1, #0
   10c4c:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   10c50:	f007 fd86 	bl	18760 <__aeabi_fcmpgt>
   10c54:	4603      	mov	r3, r0
   10c56:	2b00      	cmp	r3, #0
   10c58:	f000 81e2 	beq.w	11020 <send_takeOff+0x408>
        estimator_flight_time = 1;
   10c5c:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   10c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c64:	2201      	movs	r2, #1
   10c66:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   10c68:	f24c 3310 	movw	r3, #49936	; 0xc310
   10c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c70:	2201      	movs	r2, #1
   10c72:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   10c74:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c7c:	781a      	ldrb	r2, [r3, #0]
   10c7e:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10c82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c86:	781b      	ldrb	r3, [r3, #0]
   10c88:	b2db      	uxtb	r3, r3
   10c8a:	429a      	cmp	r2, r3
   10c8c:	d313      	bcc.n	10cb6 <send_takeOff+0x9e>
   10c8e:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c96:	781b      	ldrb	r3, [r3, #0]
   10c98:	b2db      	uxtb	r3, r3
   10c9a:	461a      	mov	r2, r3
   10c9c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ca4:	781b      	ldrb	r3, [r3, #0]
   10ca6:	1ad3      	subs	r3, r2, r3
   10ca8:	33ff      	adds	r3, #255	; 0xff
   10caa:	2b06      	cmp	r3, #6
   10cac:	bfd4      	ite	le
   10cae:	2300      	movle	r3, #0
   10cb0:	2301      	movgt	r3, #1
   10cb2:	b2db      	uxtb	r3, r3
   10cb4:	e011      	b.n	10cda <send_takeOff+0xc2>
   10cb6:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cbe:	781b      	ldrb	r3, [r3, #0]
   10cc0:	b2db      	uxtb	r3, r3
   10cc2:	461a      	mov	r2, r3
   10cc4:	f24c 3319 	movw	r3, #49945	; 0xc319
   10cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ccc:	781b      	ldrb	r3, [r3, #0]
   10cce:	1ad3      	subs	r3, r2, r3
   10cd0:	2b06      	cmp	r3, #6
   10cd2:	bfd4      	ite	le
   10cd4:	2300      	movle	r3, #0
   10cd6:	2301      	movgt	r3, #1
   10cd8:	b2db      	uxtb	r3, r3
   10cda:	2b00      	cmp	r3, #0
   10cdc:	f000 8194 	beq.w	11008 <send_takeOff+0x3f0>
   10ce0:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ce8:	781b      	ldrb	r3, [r3, #0]
   10cea:	461a      	mov	r2, r3
   10cec:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10cf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cf4:	2105      	movs	r1, #5
   10cf6:	5499      	strb	r1, [r3, r2]
   10cf8:	f24c 3319 	movw	r3, #49945	; 0xc319
   10cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d00:	781b      	ldrb	r3, [r3, #0]
   10d02:	3301      	adds	r3, #1
   10d04:	b2da      	uxtb	r2, r3
   10d06:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d0e:	701a      	strb	r2, [r3, #0]
   10d10:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d18:	781b      	ldrb	r3, [r3, #0]
   10d1a:	2bff      	cmp	r3, #255	; 0xff
   10d1c:	d105      	bne.n	10d2a <send_takeOff+0x112>
   10d1e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d26:	2200      	movs	r2, #0
   10d28:	701a      	strb	r2, [r3, #0]
   10d2a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d32:	781b      	ldrb	r3, [r3, #0]
   10d34:	461a      	mov	r2, r3
   10d36:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10d3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d3e:	2104      	movs	r1, #4
   10d40:	5499      	strb	r1, [r3, r2]
   10d42:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d4a:	781b      	ldrb	r3, [r3, #0]
   10d4c:	3301      	adds	r3, #1
   10d4e:	b2da      	uxtb	r2, r3
   10d50:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d58:	701a      	strb	r2, [r3, #0]
   10d5a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d62:	781b      	ldrb	r3, [r3, #0]
   10d64:	2bff      	cmp	r3, #255	; 0xff
   10d66:	d105      	bne.n	10d74 <send_takeOff+0x15c>
   10d68:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d70:	2200      	movs	r2, #0
   10d72:	701a      	strb	r2, [r3, #0]
   10d74:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d7c:	2204      	movs	r2, #4
   10d7e:	701a      	strb	r2, [r3, #0]
   10d80:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d88:	2204      	movs	r2, #4
   10d8a:	701a      	strb	r2, [r3, #0]
   10d8c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d94:	781b      	ldrb	r3, [r3, #0]
   10d96:	461a      	mov	r2, r3
   10d98:	f24c 23fa 	movw	r3, #49914	; 0xc2fa
   10d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10da0:	7819      	ldrb	r1, [r3, #0]
   10da2:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10daa:	5499      	strb	r1, [r3, r2]
   10dac:	f24c 23fa 	movw	r3, #49914	; 0xc2fa
   10db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10db4:	781a      	ldrb	r2, [r3, #0]
   10db6:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dbe:	781b      	ldrb	r3, [r3, #0]
   10dc0:	4413      	add	r3, r2
   10dc2:	b2da      	uxtb	r2, r3
   10dc4:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dcc:	701a      	strb	r2, [r3, #0]
   10dce:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dd6:	781a      	ldrb	r2, [r3, #0]
   10dd8:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10ddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10de0:	781b      	ldrb	r3, [r3, #0]
   10de2:	4413      	add	r3, r2
   10de4:	b2da      	uxtb	r2, r3
   10de6:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dee:	701a      	strb	r2, [r3, #0]
   10df0:	f24c 3319 	movw	r3, #49945	; 0xc319
   10df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10df8:	781b      	ldrb	r3, [r3, #0]
   10dfa:	3301      	adds	r3, #1
   10dfc:	b2da      	uxtb	r2, r3
   10dfe:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e06:	701a      	strb	r2, [r3, #0]
   10e08:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e10:	781b      	ldrb	r3, [r3, #0]
   10e12:	2bff      	cmp	r3, #255	; 0xff
   10e14:	d105      	bne.n	10e22 <send_takeOff+0x20a>
   10e16:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e1e:	2200      	movs	r2, #0
   10e20:	701a      	strb	r2, [r3, #0]
   10e22:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e2a:	781b      	ldrb	r3, [r3, #0]
   10e2c:	461a      	mov	r2, r3
   10e2e:	f24c 23fa 	movw	r3, #49914	; 0xc2fa
   10e32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e36:	7859      	ldrb	r1, [r3, #1]
   10e38:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e40:	5499      	strb	r1, [r3, r2]
   10e42:	4b7b      	ldr	r3, [pc, #492]	; (11030 <send_takeOff+0x418>)
   10e44:	781a      	ldrb	r2, [r3, #0]
   10e46:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e4e:	781b      	ldrb	r3, [r3, #0]
   10e50:	4413      	add	r3, r2
   10e52:	b2da      	uxtb	r2, r3
   10e54:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10e58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e5c:	701a      	strb	r2, [r3, #0]
   10e5e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e66:	781a      	ldrb	r2, [r3, #0]
   10e68:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10e6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e70:	781b      	ldrb	r3, [r3, #0]
   10e72:	4413      	add	r3, r2
   10e74:	b2da      	uxtb	r2, r3
   10e76:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e7e:	701a      	strb	r2, [r3, #0]
   10e80:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e88:	781b      	ldrb	r3, [r3, #0]
   10e8a:	3301      	adds	r3, #1
   10e8c:	b2da      	uxtb	r2, r3
   10e8e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e96:	701a      	strb	r2, [r3, #0]
   10e98:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ea0:	781b      	ldrb	r3, [r3, #0]
   10ea2:	2bff      	cmp	r3, #255	; 0xff
   10ea4:	d105      	bne.n	10eb2 <send_takeOff+0x29a>
   10ea6:	f24c 3319 	movw	r3, #49945	; 0xc319
   10eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eae:	2200      	movs	r2, #0
   10eb0:	701a      	strb	r2, [r3, #0]
   10eb2:	f24c 3319 	movw	r3, #49945	; 0xc319
   10eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eba:	781b      	ldrb	r3, [r3, #0]
   10ebc:	461a      	mov	r2, r3
   10ebe:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ec6:	7819      	ldrb	r1, [r3, #0]
   10ec8:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ed0:	5499      	strb	r1, [r3, r2]
   10ed2:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eda:	781b      	ldrb	r3, [r3, #0]
   10edc:	3301      	adds	r3, #1
   10ede:	b2da      	uxtb	r2, r3
   10ee0:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ee8:	701a      	strb	r2, [r3, #0]
   10eea:	f24c 3319 	movw	r3, #49945	; 0xc319
   10eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ef2:	781b      	ldrb	r3, [r3, #0]
   10ef4:	2bff      	cmp	r3, #255	; 0xff
   10ef6:	d105      	bne.n	10f04 <send_takeOff+0x2ec>
   10ef8:	f24c 3319 	movw	r3, #49945	; 0xc319
   10efc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f00:	2200      	movs	r2, #0
   10f02:	701a      	strb	r2, [r3, #0]
   10f04:	f24c 3319 	movw	r3, #49945	; 0xc319
   10f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f0c:	781b      	ldrb	r3, [r3, #0]
   10f0e:	461a      	mov	r2, r3
   10f10:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f18:	7819      	ldrb	r1, [r3, #0]
   10f1a:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10f1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f22:	5499      	strb	r1, [r3, r2]
   10f24:	f24c 3319 	movw	r3, #49945	; 0xc319
   10f28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f2c:	781b      	ldrb	r3, [r3, #0]
   10f2e:	3301      	adds	r3, #1
   10f30:	b2da      	uxtb	r2, r3
   10f32:	f24c 3319 	movw	r3, #49945	; 0xc319
   10f36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f3a:	701a      	strb	r2, [r3, #0]
   10f3c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f44:	781b      	ldrb	r3, [r3, #0]
   10f46:	2bff      	cmp	r3, #255	; 0xff
   10f48:	d105      	bne.n	10f56 <send_takeOff+0x33e>
   10f4a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10f4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f52:	2200      	movs	r2, #0
   10f54:	701a      	strb	r2, [r3, #0]
   10f56:	f242 0339 	movw	r3, #8249	; 0x2039
   10f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f5e:	781b      	ldrb	r3, [r3, #0]
   10f60:	b2db      	uxtb	r3, r3
   10f62:	f003 0310 	and.w	r3, r3, #16
   10f66:	2b00      	cmp	r3, #0
   10f68:	d15a      	bne.n	11020 <send_takeOff+0x408>
   10f6a:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10f6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f72:	781b      	ldrb	r3, [r3, #0]
   10f74:	b2db      	uxtb	r3, r3
   10f76:	461a      	mov	r2, r3
   10f78:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f80:	5c9a      	ldrb	r2, [r3, r2]
   10f82:	f24c 431b 	movw	r3, #50203	; 0xc41b
   10f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f8a:	701a      	strb	r2, [r3, #0]
   10f8c:	f24c 431c 	movw	r3, #50204	; 0xc41c
   10f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f94:	2200      	movs	r2, #0
   10f96:	701a      	strb	r2, [r3, #0]
   10f98:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fa0:	781b      	ldrb	r3, [r3, #0]
   10fa2:	b2db      	uxtb	r3, r3
   10fa4:	3301      	adds	r3, #1
   10fa6:	b2da      	uxtb	r2, r3
   10fa8:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10fac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fb0:	701a      	strb	r2, [r3, #0]
   10fb2:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10fb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fba:	781b      	ldrb	r3, [r3, #0]
   10fbc:	b2db      	uxtb	r3, r3
   10fbe:	2bff      	cmp	r3, #255	; 0xff
   10fc0:	d105      	bne.n	10fce <send_takeOff+0x3b6>
   10fc2:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10fc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fca:	2200      	movs	r2, #0
   10fcc:	701a      	strb	r2, [r3, #0]
   10fce:	f242 0338 	movw	r3, #8248	; 0x2038
   10fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fd6:	f242 0238 	movw	r2, #8248	; 0x2038
   10fda:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fde:	7812      	ldrb	r2, [r2, #0]
   10fe0:	b2d2      	uxtb	r2, r2
   10fe2:	f042 0201 	orr.w	r2, r2, #1
   10fe6:	b2d2      	uxtb	r2, r2
   10fe8:	701a      	strb	r2, [r3, #0]
   10fea:	f242 0339 	movw	r3, #8249	; 0x2039
   10fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ff2:	f242 0239 	movw	r2, #8249	; 0x2039
   10ff6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ffa:	7812      	ldrb	r2, [r2, #0]
   10ffc:	b2d2      	uxtb	r2, r2
   10ffe:	f042 0210 	orr.w	r2, r2, #16
   11002:	b2d2      	uxtb	r2, r2
   11004:	701a      	strb	r2, [r3, #0]
   11006:	e00b      	b.n	11020 <send_takeOff+0x408>
   11008:	f24c 3318 	movw	r3, #49944	; 0xc318
   1100c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11010:	781b      	ldrb	r3, [r3, #0]
   11012:	3301      	adds	r3, #1
   11014:	b2da      	uxtb	r2, r3
   11016:	f24c 3318 	movw	r3, #49944	; 0xc318
   1101a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1101e:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   11020:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
   11024:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11028:	2200      	movs	r2, #0
   1102a:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   1102c:	bd80      	pop	{r7, pc}
   1102e:	bf00      	nop
   11030:	2004c2fb 	.word	0x2004c2fb
   11034:	f3af 8000 	nop.w

00011038 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   11038:	b480      	push	{r7}
   1103a:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   1103c:	f242 0317 	movw	r3, #8215	; 0x2017
   11040:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11044:	f242 0217 	movw	r2, #8215	; 0x2017
   11048:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1104c:	7812      	ldrb	r2, [r2, #0]
   1104e:	b2d2      	uxtb	r2, r2
   11050:	f042 0210 	orr.w	r2, r2, #16
   11054:	b2d2      	uxtb	r2, r2
   11056:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   11058:	f242 0331 	movw	r3, #8241	; 0x2031
   1105c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11060:	2201      	movs	r2, #1
   11062:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   11064:	f242 0333 	movw	r3, #8243	; 0x2033
   11068:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1106c:	2219      	movs	r2, #25
   1106e:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   11070:	f242 0311 	movw	r3, #8209	; 0x2011
   11074:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11078:	f242 0211 	movw	r2, #8209	; 0x2011
   1107c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11080:	7812      	ldrb	r2, [r2, #0]
   11082:	b2d2      	uxtb	r2, r2
   11084:	f062 023f 	orn	r2, r2, #63	; 0x3f
   11088:	b2d2      	uxtb	r2, r2
   1108a:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   1108c:	f242 0312 	movw	r3, #8210	; 0x2012
   11090:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11094:	f242 0212 	movw	r2, #8210	; 0x2012
   11098:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1109c:	7812      	ldrb	r2, [r2, #0]
   1109e:	b2d2      	uxtb	r2, r2
   110a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   110a4:	b2d2      	uxtb	r2, r2
   110a6:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   110a8:	f242 0312 	movw	r3, #8210	; 0x2012
   110ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110b0:	f242 0212 	movw	r2, #8210	; 0x2012
   110b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110b8:	7812      	ldrb	r2, [r2, #0]
   110ba:	b2d2      	uxtb	r2, r2
   110bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   110c0:	b2d2      	uxtb	r2, r2
   110c2:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   110c4:	f242 033a 	movw	r3, #8250	; 0x203a
   110c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110cc:	f242 023a 	movw	r2, #8250	; 0x203a
   110d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110d4:	7812      	ldrb	r2, [r2, #0]
   110d6:	b2d2      	uxtb	r2, r2
   110d8:	f042 0202 	orr.w	r2, r2, #2
   110dc:	b2d2      	uxtb	r2, r2
   110de:	701a      	strb	r2, [r3, #0]
}
   110e0:	46bd      	mov	sp, r7
   110e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   110e6:	4770      	bx	lr

000110e8 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   110e8:	b480      	push	{r7}
   110ea:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   110ec:	f24c 431c 	movw	r3, #50204	; 0xc41c
   110f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110f4:	781b      	ldrb	r3, [r3, #0]
   110f6:	2b00      	cmp	r3, #0
   110f8:	d10e      	bne.n	11118 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   110fa:	f242 0312 	movw	r3, #8210	; 0x2012
   110fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11102:	f242 0212 	movw	r2, #8210	; 0x2012
   11106:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1110a:	7812      	ldrb	r2, [r2, #0]
   1110c:	b2d2      	uxtb	r2, r2
   1110e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11112:	b2d2      	uxtb	r2, r2
   11114:	701a      	strb	r2, [r3, #0]
   11116:	e047      	b.n	111a8 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   11118:	f24c 431c 	movw	r3, #50204	; 0xc41c
   1111c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11120:	781b      	ldrb	r3, [r3, #0]
   11122:	2b08      	cmp	r3, #8
   11124:	d832      	bhi.n	1118c <__vector_5+0xa4>
    if (tx_byte & 0x01)
   11126:	f24c 431b 	movw	r3, #50203	; 0xc41b
   1112a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1112e:	781b      	ldrb	r3, [r3, #0]
   11130:	f003 0301 	and.w	r3, r3, #1
   11134:	2b00      	cmp	r3, #0
   11136:	d00e      	beq.n	11156 <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   11138:	f242 0312 	movw	r3, #8210	; 0x2012
   1113c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11140:	f242 0212 	movw	r2, #8210	; 0x2012
   11144:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11148:	7812      	ldrb	r2, [r2, #0]
   1114a:	b2d2      	uxtb	r2, r2
   1114c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11150:	b2d2      	uxtb	r2, r2
   11152:	701a      	strb	r2, [r3, #0]
   11154:	e00d      	b.n	11172 <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   11156:	f242 0312 	movw	r3, #8210	; 0x2012
   1115a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1115e:	f242 0212 	movw	r2, #8210	; 0x2012
   11162:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11166:	7812      	ldrb	r2, [r2, #0]
   11168:	b2d2      	uxtb	r2, r2
   1116a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1116e:	b2d2      	uxtb	r2, r2
   11170:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   11172:	f24c 431b 	movw	r3, #50203	; 0xc41b
   11176:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1117a:	781b      	ldrb	r3, [r3, #0]
   1117c:	085b      	lsrs	r3, r3, #1
   1117e:	b2da      	uxtb	r2, r3
   11180:	f24c 431b 	movw	r3, #50203	; 0xc41b
   11184:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11188:	701a      	strb	r2, [r3, #0]
   1118a:	e00d      	b.n	111a8 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   1118c:	f242 0312 	movw	r3, #8210	; 0x2012
   11190:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11194:	f242 0212 	movw	r2, #8210	; 0x2012
   11198:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1119c:	7812      	ldrb	r2, [r2, #0]
   1119e:	b2d2      	uxtb	r2, r2
   111a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   111a4:	b2d2      	uxtb	r2, r2
   111a6:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   111a8:	f24c 431c 	movw	r3, #50204	; 0xc41c
   111ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111b0:	781b      	ldrb	r3, [r3, #0]
   111b2:	3301      	adds	r3, #1
   111b4:	b2da      	uxtb	r2, r3
   111b6:	f24c 431c 	movw	r3, #50204	; 0xc41c
   111ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111be:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   111c0:	f24c 431c 	movw	r3, #50204	; 0xc41c
   111c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111c8:	781b      	ldrb	r3, [r3, #0]
   111ca:	2b09      	cmp	r3, #9
   111cc:	d94d      	bls.n	1126a <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   111ce:	f24c 3319 	movw	r3, #49945	; 0xc319
   111d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111d6:	781a      	ldrb	r2, [r3, #0]
   111d8:	f24c 331a 	movw	r3, #49946	; 0xc31a
   111dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111e0:	781b      	ldrb	r3, [r3, #0]
   111e2:	b2db      	uxtb	r3, r3
   111e4:	429a      	cmp	r2, r3
   111e6:	d10e      	bne.n	11206 <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   111e8:	f242 0339 	movw	r3, #8249	; 0x2039
   111ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111f0:	f242 0239 	movw	r2, #8249	; 0x2039
   111f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111f8:	7812      	ldrb	r2, [r2, #0]
   111fa:	b2d2      	uxtb	r2, r2
   111fc:	f022 0210 	bic.w	r2, r2, #16
   11200:	b2d2      	uxtb	r2, r2
   11202:	701a      	strb	r2, [r3, #0]
   11204:	e031      	b.n	1126a <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   11206:	f24c 331a 	movw	r3, #49946	; 0xc31a
   1120a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1120e:	781b      	ldrb	r3, [r3, #0]
   11210:	b2db      	uxtb	r3, r3
   11212:	461a      	mov	r2, r3
   11214:	f24c 331c 	movw	r3, #49948	; 0xc31c
   11218:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1121c:	5c9a      	ldrb	r2, [r3, r2]
   1121e:	f24c 431b 	movw	r3, #50203	; 0xc41b
   11222:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11226:	701a      	strb	r2, [r3, #0]
   11228:	f24c 431c 	movw	r3, #50204	; 0xc41c
   1122c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11230:	2200      	movs	r2, #0
   11232:	701a      	strb	r2, [r3, #0]
   11234:	f24c 331a 	movw	r3, #49946	; 0xc31a
   11238:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1123c:	781b      	ldrb	r3, [r3, #0]
   1123e:	b2db      	uxtb	r3, r3
   11240:	3301      	adds	r3, #1
   11242:	b2da      	uxtb	r2, r3
   11244:	f24c 331a 	movw	r3, #49946	; 0xc31a
   11248:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1124c:	701a      	strb	r2, [r3, #0]
   1124e:	f24c 331a 	movw	r3, #49946	; 0xc31a
   11252:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11256:	781b      	ldrb	r3, [r3, #0]
   11258:	b2db      	uxtb	r3, r3
   1125a:	2bff      	cmp	r3, #255	; 0xff
   1125c:	d105      	bne.n	1126a <__vector_5+0x182>
   1125e:	f24c 331a 	movw	r3, #49946	; 0xc31a
   11262:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11266:	2200      	movs	r2, #0
   11268:	701a      	strb	r2, [r3, #0]
    }
  }
}
   1126a:	46bd      	mov	sp, r7
   1126c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11270:	4770      	bx	lr
   11272:	bf00      	nop

00011274 <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   11274:	b480      	push	{r7}
   11276:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   11278:	f24c 434f 	movw	r3, #50255	; 0xc44f
   1127c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11280:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   11282:	f240 533e 	movw	r3, #1342	; 0x53e
   11286:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1128a:	2200      	movs	r2, #0
   1128c:	701a      	strb	r2, [r3, #0]
}
   1128e:	46bd      	mov	sp, r7
   11290:	f85d 7b04 	ldr.w	r7, [sp], #4
   11294:	4770      	bx	lr
   11296:	bf00      	nop

00011298 <link_fbw_send>:

void link_fbw_send(void) {
   11298:	b480      	push	{r7}
   1129a:	b083      	sub	sp, #12
   1129c:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   1129e:	f24c 4354 	movw	r3, #50260	; 0xc454
   112a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112a6:	781b      	ldrb	r3, [r3, #0]
   112a8:	b2db      	uxtb	r3, r3
   112aa:	2b00      	cmp	r3, #0
   112ac:	d00c      	beq.n	112c8 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   112ae:	f24c 4355 	movw	r3, #50261	; 0xc455
   112b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112b6:	781b      	ldrb	r3, [r3, #0]
   112b8:	3301      	adds	r3, #1
   112ba:	b2da      	uxtb	r2, r3
   112bc:	f24c 4355 	movw	r3, #50261	; 0xc455
   112c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112c4:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   112c6:	e064      	b.n	11392 <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   112c8:	f242 030d 	movw	r3, #8205	; 0x200d
   112cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112d0:	2251      	movs	r2, #81	; 0x51
   112d2:	701a      	strb	r2, [r3, #0]
   112d4:	f242 030e 	movw	r3, #8206	; 0x200e
   112d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112dc:	781b      	ldrb	r3, [r3, #0]
   112de:	b2db      	uxtb	r3, r3
   112e0:	b2db      	uxtb	r3, r3
   112e2:	b25b      	sxtb	r3, r3
   112e4:	2b00      	cmp	r3, #0
   112e6:	da05      	bge.n	112f4 <link_fbw_send+0x5c>
   112e8:	f242 030f 	movw	r3, #8207	; 0x200f
   112ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112f0:	781b      	ldrb	r3, [r3, #0]
   112f2:	71fb      	strb	r3, [r7, #7]
   112f4:	f242 030d 	movw	r3, #8205	; 0x200d
   112f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112fc:	f242 020d 	movw	r2, #8205	; 0x200d
   11300:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11304:	7812      	ldrb	r2, [r2, #0]
   11306:	b2d2      	uxtb	r2, r2
   11308:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1130c:	b2d2      	uxtb	r2, r2
   1130e:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   11310:	f24c 4354 	movw	r3, #50260	; 0xc454
   11314:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11318:	2201      	movs	r2, #1
   1131a:	701a      	strb	r2, [r3, #0]
   1131c:	f242 0318 	movw	r3, #8216	; 0x2018
   11320:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11324:	f242 0218 	movw	r2, #8216	; 0x2018
   11328:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1132c:	7812      	ldrb	r2, [r2, #0]
   1132e:	b2d2      	uxtb	r2, r2
   11330:	f022 0201 	bic.w	r2, r2, #1
   11334:	b2d2      	uxtb	r2, r2
   11336:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   11338:	f24c 4351 	movw	r3, #50257	; 0xc451
   1133c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11340:	2200      	movs	r2, #0
   11342:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   11344:	f24c 4352 	movw	r3, #50258	; 0xc452
   11348:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1134c:	2200      	movs	r2, #0
   1134e:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   11350:	f24c 4351 	movw	r3, #50257	; 0xc451
   11354:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11358:	781b      	ldrb	r3, [r3, #0]
   1135a:	461a      	mov	r2, r3
   1135c:	f24c 4338 	movw	r3, #50232	; 0xc438
   11360:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11364:	4413      	add	r3, r2
   11366:	781a      	ldrb	r2, [r3, #0]
   11368:	f24c 4353 	movw	r3, #50259	; 0xc453
   1136c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11370:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   11372:	f242 030f 	movw	r3, #8207	; 0x200f
   11376:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1137a:	f24c 4253 	movw	r2, #50259	; 0xc453
   1137e:	f2c2 0204 	movt	r2, #8196	; 0x2004
   11382:	7812      	ldrb	r2, [r2, #0]
   11384:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   11386:	f24c 434e 	movw	r3, #50254	; 0xc44e
   1138a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1138e:	2200      	movs	r2, #0
   11390:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   11392:	370c      	adds	r7, #12
   11394:	46bd      	mov	sp, r7
   11396:	f85d 7b04 	ldr.w	r7, [sp], #4
   1139a:	4770      	bx	lr

0001139c <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   1139c:	b480      	push	{r7}
   1139e:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   113a0:	f242 032a 	movw	r3, #8234	; 0x202a
   113a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113a8:	f242 022c 	movw	r2, #8236	; 0x202c
   113ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
   113b0:	8812      	ldrh	r2, [r2, #0]
   113b2:	b292      	uxth	r2, r2
   113b4:	32c8      	adds	r2, #200	; 0xc8
   113b6:	b292      	uxth	r2, r2
   113b8:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   113ba:	f242 0336 	movw	r3, #8246	; 0x2036
   113be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113c2:	f242 0236 	movw	r2, #8246	; 0x2036
   113c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   113ca:	7812      	ldrb	r2, [r2, #0]
   113cc:	b2d2      	uxtb	r2, r2
   113ce:	f042 0210 	orr.w	r2, r2, #16
   113d2:	b2d2      	uxtb	r2, r2
   113d4:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   113d6:	f242 0337 	movw	r3, #8247	; 0x2037
   113da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113de:	f242 0237 	movw	r2, #8247	; 0x2037
   113e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   113e6:	7812      	ldrb	r2, [r2, #0]
   113e8:	b2d2      	uxtb	r2, r2
   113ea:	f042 0210 	orr.w	r2, r2, #16
   113ee:	b2d2      	uxtb	r2, r2
   113f0:	701a      	strb	r2, [r3, #0]
}
   113f2:	46bd      	mov	sp, r7
   113f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   113f8:	4770      	bx	lr
   113fa:	bf00      	nop

000113fc <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   113fc:	b480      	push	{r7}
   113fe:	b083      	sub	sp, #12
   11400:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   11402:	f242 0337 	movw	r3, #8247	; 0x2037
   11406:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1140a:	f242 0237 	movw	r2, #8247	; 0x2037
   1140e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11412:	7812      	ldrb	r2, [r2, #0]
   11414:	b2d2      	uxtb	r2, r2
   11416:	f022 0210 	bic.w	r2, r2, #16
   1141a:	b2d2      	uxtb	r2, r2
   1141c:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   1141e:	f24c 4351 	movw	r3, #50257	; 0xc451
   11422:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11426:	781b      	ldrb	r3, [r3, #0]
   11428:	3301      	adds	r3, #1
   1142a:	b2da      	uxtb	r2, r3
   1142c:	f24c 4351 	movw	r3, #50257	; 0xc451
   11430:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11434:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   11436:	f24c 4351 	movw	r3, #50257	; 0xc451
   1143a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1143e:	781b      	ldrb	r3, [r3, #0]
   11440:	2b17      	cmp	r3, #23
   11442:	d162      	bne.n	1150a <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   11444:	f242 030f 	movw	r3, #8207	; 0x200f
   11448:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1144c:	781b      	ldrb	r3, [r3, #0]
   1144e:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   11450:	f24c 4352 	movw	r3, #50258	; 0xc452
   11454:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11458:	781b      	ldrb	r3, [r3, #0]
   1145a:	79fa      	ldrb	r2, [r7, #7]
   1145c:	429a      	cmp	r2, r3
   1145e:	d110      	bne.n	11482 <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   11460:	f24c 434e 	movw	r3, #50254	; 0xc44e
   11464:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11468:	2201      	movs	r2, #1
   1146a:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   1146c:	f24c 4320 	movw	r3, #50208	; 0xc420
   11470:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11474:	7d1a      	ldrb	r2, [r3, #20]
   11476:	f24c 4350 	movw	r3, #50256	; 0xc450
   1147a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1147e:	701a      	strb	r2, [r3, #0]
   11480:	e00c      	b.n	1149c <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   11482:	f24c 434f 	movw	r3, #50255	; 0xc44f
   11486:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1148a:	781b      	ldrb	r3, [r3, #0]
   1148c:	b2db      	uxtb	r3, r3
   1148e:	3301      	adds	r3, #1
   11490:	b2da      	uxtb	r2, r3
   11492:	f24c 434f 	movw	r3, #50255	; 0xc44f
   11496:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1149a:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   1149c:	f240 533e 	movw	r3, #1342	; 0x53e
   114a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114a4:	2201      	movs	r2, #1
   114a6:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   114a8:	f24c 4354 	movw	r3, #50260	; 0xc454
   114ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114b0:	2200      	movs	r2, #0
   114b2:	701a      	strb	r2, [r3, #0]
   114b4:	f242 0318 	movw	r3, #8216	; 0x2018
   114b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114bc:	f242 0218 	movw	r2, #8216	; 0x2018
   114c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   114c4:	7812      	ldrb	r2, [r2, #0]
   114c6:	b2d2      	uxtb	r2, r2
   114c8:	f042 0201 	orr.w	r2, r2, #1
   114cc:	b2d2      	uxtb	r2, r2
   114ce:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   114d0:	f242 030d 	movw	r3, #8205	; 0x200d
   114d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114d8:	f242 020d 	movw	r2, #8205	; 0x200d
   114dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   114e0:	7812      	ldrb	r2, [r2, #0]
   114e2:	b2d2      	uxtb	r2, r2
   114e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   114e8:	b2d2      	uxtb	r2, r2
   114ea:	701a      	strb	r2, [r3, #0]
   114ec:	f242 030d 	movw	r3, #8205	; 0x200d
   114f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114f4:	f242 020d 	movw	r2, #8205	; 0x200d
   114f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   114fc:	7812      	ldrb	r2, [r2, #0]
   114fe:	b2d2      	uxtb	r2, r2
   11500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11504:	b2d2      	uxtb	r2, r2
   11506:	701a      	strb	r2, [r3, #0]
    return;
   11508:	e051      	b.n	115ae <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   1150a:	f24c 4351 	movw	r3, #50257	; 0xc451
   1150e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11512:	781b      	ldrb	r3, [r3, #0]
   11514:	2b15      	cmp	r3, #21
   11516:	d820      	bhi.n	1155a <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   11518:	f24c 4351 	movw	r3, #50257	; 0xc451
   1151c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11520:	781b      	ldrb	r3, [r3, #0]
   11522:	461a      	mov	r2, r3
   11524:	f24c 4338 	movw	r3, #50232	; 0xc438
   11528:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1152c:	4413      	add	r3, r2
   1152e:	781b      	ldrb	r3, [r3, #0]
   11530:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   11532:	f242 030f 	movw	r3, #8207	; 0x200f
   11536:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1153a:	79fa      	ldrb	r2, [r7, #7]
   1153c:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   1153e:	f24c 4353 	movw	r3, #50259	; 0xc453
   11542:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11546:	781a      	ldrb	r2, [r3, #0]
   11548:	79fb      	ldrb	r3, [r7, #7]
   1154a:	4053      	eors	r3, r2
   1154c:	b2da      	uxtb	r2, r3
   1154e:	f24c 4353 	movw	r3, #50259	; 0xc453
   11552:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11556:	701a      	strb	r2, [r3, #0]
   11558:	e009      	b.n	1156e <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   1155a:	f242 030f 	movw	r3, #8207	; 0x200f
   1155e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11562:	f24c 4253 	movw	r2, #50259	; 0xc453
   11566:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1156a:	7812      	ldrb	r2, [r2, #0]
   1156c:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   1156e:	f242 030f 	movw	r3, #8207	; 0x200f
   11572:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11576:	781b      	ldrb	r3, [r3, #0]
   11578:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   1157a:	f24c 4351 	movw	r3, #50257	; 0xc451
   1157e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11582:	781b      	ldrb	r3, [r3, #0]
   11584:	1e5a      	subs	r2, r3, #1
   11586:	f24c 4320 	movw	r3, #50208	; 0xc420
   1158a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1158e:	4413      	add	r3, r2
   11590:	79fa      	ldrb	r2, [r7, #7]
   11592:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   11594:	f24c 4352 	movw	r3, #50258	; 0xc452
   11598:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1159c:	781a      	ldrb	r2, [r3, #0]
   1159e:	79fb      	ldrb	r3, [r7, #7]
   115a0:	4053      	eors	r3, r2
   115a2:	b2da      	uxtb	r2, r3
   115a4:	f24c 4352 	movw	r3, #50258	; 0xc452
   115a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115ac:	701a      	strb	r2, [r3, #0]
}
   115ae:	370c      	adds	r7, #12
   115b0:	46bd      	mov	sp, r7
   115b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   115b6:	4770      	bx	lr

000115b8 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   115b8:	b480      	push	{r7}
   115ba:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   115bc:	f242 0317 	movw	r3, #8215	; 0x2017
   115c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115c4:	f242 0217 	movw	r2, #8215	; 0x2017
   115c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   115cc:	7812      	ldrb	r2, [r2, #0]
   115ce:	b2d2      	uxtb	r2, r2
   115d0:	f042 0206 	orr.w	r2, r2, #6
   115d4:	b2d2      	uxtb	r2, r2
   115d6:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   115d8:	f242 0317 	movw	r3, #8215	; 0x2017
   115dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115e0:	f242 0217 	movw	r2, #8215	; 0x2017
   115e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   115e8:	7812      	ldrb	r2, [r2, #0]
   115ea:	b2d2      	uxtb	r2, r2
   115ec:	f042 0201 	orr.w	r2, r2, #1
   115f0:	b2d2      	uxtb	r2, r2
   115f2:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   115f4:	f24c 4354 	movw	r3, #50260	; 0xc454
   115f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115fc:	2200      	movs	r2, #0
   115fe:	701a      	strb	r2, [r3, #0]
   11600:	f242 0318 	movw	r3, #8216	; 0x2018
   11604:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11608:	f242 0218 	movw	r2, #8216	; 0x2018
   1160c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11610:	7812      	ldrb	r2, [r2, #0]
   11612:	b2d2      	uxtb	r2, r2
   11614:	f042 0201 	orr.w	r2, r2, #1
   11618:	b2d2      	uxtb	r2, r2
   1161a:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   1161c:	f242 0302 	movw	r3, #8194	; 0x2002
   11620:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11624:	f242 0202 	movw	r2, #8194	; 0x2002
   11628:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1162c:	7812      	ldrb	r2, [r2, #0]
   1162e:	b2d2      	uxtb	r2, r2
   11630:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11634:	b2d2      	uxtb	r2, r2
   11636:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   11638:	f24c 4354 	movw	r3, #50260	; 0xc454
   1163c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11640:	2200      	movs	r2, #0
   11642:	701a      	strb	r2, [r3, #0]
   11644:	f242 0303 	movw	r3, #8195	; 0x2003
   11648:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1164c:	f242 0203 	movw	r2, #8195	; 0x2003
   11650:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11654:	7812      	ldrb	r2, [r2, #0]
   11656:	b2d2      	uxtb	r2, r2
   11658:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1165c:	b2d2      	uxtb	r2, r2
   1165e:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   11660:	f24c 4354 	movw	r3, #50260	; 0xc454
   11664:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11668:	2200      	movs	r2, #0
   1166a:	701a      	strb	r2, [r3, #0]
}
   1166c:	46bd      	mov	sp, r7
   1166e:	f85d 7b04 	ldr.w	r7, [sp], #4
   11672:	4770      	bx	lr

00011674 <__vector_17>:


SIGNAL(SIG_SPI) {
   11674:	b580      	push	{r7, lr}
   11676:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   11678:	f24c 4354 	movw	r3, #50260	; 0xc454
   1167c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11680:	781b      	ldrb	r3, [r3, #0]
   11682:	b2db      	uxtb	r3, r3
   11684:	2b01      	cmp	r3, #1
   11686:	d102      	bne.n	1168e <__vector_17+0x1a>
    link_fbw_on_spi_it();
   11688:	f7ff fe88 	bl	1139c <link_fbw_on_spi_it>
   1168c:	e00b      	b.n	116a6 <__vector_17+0x32>
  else
    fatal_error_nb++;
   1168e:	f24c 23f8 	movw	r3, #49912	; 0xc2f8
   11692:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11696:	781b      	ldrb	r3, [r3, #0]
   11698:	3301      	adds	r3, #1
   1169a:	b2da      	uxtb	r2, r3
   1169c:	f24c 23f8 	movw	r3, #49912	; 0xc2f8
   116a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116a4:	701a      	strb	r2, [r3, #0]
}
   116a6:	bd80      	pop	{r7, pc}

000116a8 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   116a8:	b480      	push	{r7}
   116aa:	b083      	sub	sp, #12
   116ac:	af00      	add	r7, sp, #0
   116ae:	4603      	mov	r3, r0
   116b0:	6039      	str	r1, [r7, #0]
   116b2:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   116b4:	79fa      	ldrb	r2, [r7, #7]
   116b6:	f24c 4368 	movw	r3, #50280	; 0xc468
   116ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116be:	6839      	ldr	r1, [r7, #0]
   116c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   116c4:	370c      	adds	r7, #12
   116c6:	46bd      	mov	sp, r7
   116c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   116cc:	4770      	bx	lr
   116ce:	bf00      	nop

000116d0 <adc_init>:

void 
adc_init( void )
{
   116d0:	b480      	push	{r7}
   116d2:	b083      	sub	sp, #12
   116d4:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   116d6:	f242 0362 	movw	r3, #8290	; 0x2062
   116da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116de:	2200      	movs	r2, #0
   116e0:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   116e2:	f242 0361 	movw	r3, #8289	; 0x2061
   116e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116ea:	2200      	movs	r2, #0
   116ec:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   116ee:	f242 0307 	movw	r3, #8199	; 0x2007
   116f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116f6:	2240      	movs	r2, #64	; 0x40
   116f8:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   116fa:	f242 0308 	movw	r3, #8200	; 0x2008
   116fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11702:	f242 0208 	movw	r2, #8200	; 0x2008
   11706:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1170a:	7812      	ldrb	r2, [r2, #0]
   1170c:	b2d2      	uxtb	r2, r2
   1170e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11712:	b2d2      	uxtb	r2, r2
   11714:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   11716:	f242 0306 	movw	r3, #8198	; 0x2006
   1171a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1171e:	22cf      	movs	r2, #207	; 0xcf
   11720:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11722:	2300      	movs	r3, #0
   11724:	71fb      	strb	r3, [r7, #7]
   11726:	e00a      	b.n	1173e <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   11728:	79fa      	ldrb	r2, [r7, #7]
   1172a:	f24c 4368 	movw	r3, #50280	; 0xc468
   1172e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11732:	2100      	movs	r1, #0
   11734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11738:	79fb      	ldrb	r3, [r7, #7]
   1173a:	3301      	adds	r3, #1
   1173c:	71fb      	strb	r3, [r7, #7]
   1173e:	79fb      	ldrb	r3, [r7, #7]
   11740:	2b07      	cmp	r3, #7
   11742:	d9f1      	bls.n	11728 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   11744:	370c      	adds	r7, #12
   11746:	46bd      	mov	sp, r7
   11748:	f85d 7b04 	ldr.w	r7, [sp], #4
   1174c:	4770      	bx	lr
   1174e:	bf00      	nop

00011750 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   11750:	b480      	push	{r7}
   11752:	b085      	sub	sp, #20
   11754:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   11756:	f242 0307 	movw	r3, #8199	; 0x2007
   1175a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1175e:	781b      	ldrb	r3, [r3, #0]
   11760:	b2db      	uxtb	r3, r3
   11762:	f003 0307 	and.w	r3, r3, #7
   11766:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   11768:	7bfa      	ldrb	r2, [r7, #15]
   1176a:	f24c 4368 	movw	r3, #50280	; 0xc468
   1176e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11776:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   11778:	f242 0304 	movw	r3, #8196	; 0x2004
   1177c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11780:	881b      	ldrh	r3, [r3, #0]
   11782:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   11784:	7bfa      	ldrb	r2, [r7, #15]
   11786:	f24c 4358 	movw	r3, #50264	; 0xc458
   1178a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1178e:	88f9      	ldrh	r1, [r7, #6]
   11790:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   11794:	68bb      	ldr	r3, [r7, #8]
   11796:	2b00      	cmp	r3, #0
   11798:	d025      	beq.n	117e6 <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   1179a:	68bb      	ldr	r3, [r7, #8]
   1179c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   117a0:	3301      	adds	r3, #1
   117a2:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   117a4:	7bbb      	ldrb	r3, [r7, #14]
   117a6:	2b1f      	cmp	r3, #31
   117a8:	d901      	bls.n	117ae <__vector_21+0x5e>
   117aa:	2300      	movs	r3, #0
   117ac:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   117ae:	68bb      	ldr	r3, [r7, #8]
   117b0:	881a      	ldrh	r2, [r3, #0]
   117b2:	7bbb      	ldrb	r3, [r7, #14]
   117b4:	68b9      	ldr	r1, [r7, #8]
   117b6:	005b      	lsls	r3, r3, #1
   117b8:	440b      	add	r3, r1
   117ba:	885b      	ldrh	r3, [r3, #2]
   117bc:	1ad3      	subs	r3, r2, r3
   117be:	b29a      	uxth	r2, r3
   117c0:	68bb      	ldr	r3, [r7, #8]
   117c2:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   117c4:	7bbb      	ldrb	r3, [r7, #14]
   117c6:	68ba      	ldr	r2, [r7, #8]
   117c8:	005b      	lsls	r3, r3, #1
   117ca:	4413      	add	r3, r2
   117cc:	88fa      	ldrh	r2, [r7, #6]
   117ce:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   117d0:	68bb      	ldr	r3, [r7, #8]
   117d2:	881a      	ldrh	r2, [r3, #0]
   117d4:	88fb      	ldrh	r3, [r7, #6]
   117d6:	4413      	add	r3, r2
   117d8:	b29a      	uxth	r2, r3
   117da:	68bb      	ldr	r3, [r7, #8]
   117dc:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   117de:	68bb      	ldr	r3, [r7, #8]
   117e0:	7bba      	ldrb	r2, [r7, #14]
   117e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   117e6:	7bfb      	ldrb	r3, [r7, #15]
   117e8:	3301      	adds	r3, #1
   117ea:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   117ec:	7bfb      	ldrb	r3, [r7, #15]
   117ee:	2b07      	cmp	r3, #7
   117f0:	d901      	bls.n	117f6 <__vector_21+0xa6>
    adc_input = 0;
   117f2:	2300      	movs	r3, #0
   117f4:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   117f6:	f242 0307 	movw	r3, #8199	; 0x2007
   117fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117fe:	7bfa      	ldrb	r2, [r7, #15]
   11800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11804:	b2d2      	uxtb	r2, r2
   11806:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   11808:	f242 0306 	movw	r3, #8198	; 0x2006
   1180c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11810:	f242 0206 	movw	r2, #8198	; 0x2006
   11814:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11818:	7812      	ldrb	r2, [r2, #0]
   1181a:	b2d2      	uxtb	r2, r2
   1181c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11820:	b2d2      	uxtb	r2, r2
   11822:	701a      	strb	r2, [r3, #0]
  
}
   11824:	3714      	adds	r7, #20
   11826:	46bd      	mov	sp, r7
   11828:	f85d 7b04 	ldr.w	r7, [sp], #4
   1182c:	4770      	bx	lr
   1182e:	bf00      	nop

00011830 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   11830:	b580      	push	{r7, lr}
   11832:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   11834:	f003 fca8 	bl	15188 <uart1_init>
#endif
  ubx_status = UNINIT;
   11838:	f24c 53af 	movw	r3, #50607	; 0xc5af
   1183c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11840:	2200      	movs	r2, #0
   11842:	701a      	strb	r2, [r3, #0]
}
   11844:	bd80      	pop	{r7, pc}
   11846:	bf00      	nop

00011848 <parse_gps_msg>:

void parse_gps_msg( void ) {
   11848:	b580      	push	{r7, lr}
   1184a:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   1184c:	f24c 53b6 	movw	r3, #50614	; 0xc5b6
   11850:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11854:	781b      	ldrb	r3, [r3, #0]
   11856:	2b01      	cmp	r3, #1
   11858:	f040 80f9 	bne.w	11a4e <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   1185c:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   11860:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11864:	781b      	ldrb	r3, [r3, #0]
   11866:	2b08      	cmp	r3, #8
   11868:	d128      	bne.n	118bc <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   1186a:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   1186e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11872:	685a      	ldr	r2, [r3, #4]
   11874:	f24c 439c 	movw	r3, #50332	; 0xc49c
   11878:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1187c:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   1187e:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   11882:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11886:	689a      	ldr	r2, [r3, #8]
   11888:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   1188c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11890:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   11892:	4b73      	ldr	r3, [pc, #460]	; (11a60 <parse_gps_msg+0x218>)
   11894:	681b      	ldr	r3, [r3, #0]
   11896:	4618      	mov	r0, r3
   11898:	f006 fd52 	bl	18340 <__aeabi_i2f>
   1189c:	4603      	mov	r3, r0
   1189e:	4618      	mov	r0, r3
   118a0:	f04f 0100 	mov.w	r1, #0
   118a4:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   118a8:	f006 fe52 	bl	18550 <__aeabi_fdiv>
   118ac:	4603      	mov	r3, r0
   118ae:	461a      	mov	r2, r3
   118b0:	f24c 438c 	movw	r3, #50316	; 0xc48c
   118b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118b8:	601a      	str	r2, [r3, #0]
   118ba:	e0c8      	b.n	11a4e <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   118bc:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   118c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118c4:	781b      	ldrb	r3, [r3, #0]
   118c6:	2b03      	cmp	r3, #3
   118c8:	d10a      	bne.n	118e0 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   118ca:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   118ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118d2:	791a      	ldrb	r2, [r3, #4]
   118d4:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   118d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118dc:	701a      	strb	r2, [r3, #0]
   118de:	e0b6      	b.n	11a4e <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   118e0:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   118e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118e8:	781b      	ldrb	r3, [r3, #0]
   118ea:	2b12      	cmp	r3, #18
   118ec:	f040 80af 	bne.w	11a4e <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   118f0:	4b5c      	ldr	r3, [pc, #368]	; (11a64 <parse_gps_msg+0x21c>)
   118f2:	681b      	ldr	r3, [r3, #0]
   118f4:	4618      	mov	r0, r3
   118f6:	f006 fd1f 	bl	18338 <__aeabi_ui2f>
   118fa:	4603      	mov	r3, r0
   118fc:	4618      	mov	r0, r3
   118fe:	f04f 0100 	mov.w	r1, #0
   11902:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11906:	f006 fe23 	bl	18550 <__aeabi_fdiv>
   1190a:	4603      	mov	r3, r0
   1190c:	461a      	mov	r2, r3
   1190e:	f24c 4390 	movw	r3, #50320	; 0xc490
   11912:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11916:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   11918:	4b51      	ldr	r3, [pc, #324]	; (11a60 <parse_gps_msg+0x218>)
   1191a:	681b      	ldr	r3, [r3, #0]
   1191c:	4618      	mov	r0, r3
   1191e:	f006 fd0f 	bl	18340 <__aeabi_i2f>
   11922:	4603      	mov	r3, r0
   11924:	4618      	mov	r0, r3
   11926:	f04f 0100 	mov.w	r1, #0
   1192a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1192e:	f006 fe0f 	bl	18550 <__aeabi_fdiv>
   11932:	4603      	mov	r3, r0
   11934:	461a      	mov	r2, r3
   11936:	f24c 4394 	movw	r3, #50324	; 0xc494
   1193a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1193e:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   11940:	4b49      	ldr	r3, [pc, #292]	; (11a68 <parse_gps_msg+0x220>)
   11942:	681b      	ldr	r3, [r3, #0]
   11944:	4618      	mov	r0, r3
   11946:	f006 fcfb 	bl	18340 <__aeabi_i2f>
   1194a:	4603      	mov	r3, r0
   1194c:	4618      	mov	r0, r3
   1194e:	f006 f8b7 	bl	17ac0 <__aeabi_f2d>
   11952:	4602      	mov	r2, r0
   11954:	460b      	mov	r3, r1
   11956:	4610      	mov	r0, r2
   11958:	4619      	mov	r1, r3
   1195a:	a33d      	add	r3, pc, #244	; (adr r3, 11a50 <parse_gps_msg+0x208>)
   1195c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11960:	f006 fa2c 	bl	17dbc <__aeabi_ddiv>
   11964:	4602      	mov	r2, r0
   11966:	460b      	mov	r3, r1
   11968:	4610      	mov	r0, r2
   1196a:	4619      	mov	r1, r3
   1196c:	f04f 0200 	mov.w	r2, #0
   11970:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   11974:	f2c4 0366 	movt	r3, #16486	; 0x4066
   11978:	f006 fa20 	bl	17dbc <__aeabi_ddiv>
   1197c:	4602      	mov	r2, r0
   1197e:	460b      	mov	r3, r1
   11980:	4610      	mov	r0, r2
   11982:	4619      	mov	r1, r3
   11984:	a334      	add	r3, pc, #208	; (adr r3, 11a58 <parse_gps_msg+0x210>)
   11986:	e9d3 2300 	ldrd	r2, r3, [r3]
   1198a:	f006 f8ed 	bl	17b68 <__aeabi_dmul>
   1198e:	4602      	mov	r2, r0
   11990:	460b      	mov	r3, r1
   11992:	4610      	mov	r0, r2
   11994:	4619      	mov	r1, r3
   11996:	f006 fbc9 	bl	1812c <__aeabi_d2f>
   1199a:	4602      	mov	r2, r0
   1199c:	f24c 4398 	movw	r3, #50328	; 0xc498
   119a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119a4:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   119a6:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   119aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119ae:	681b      	ldr	r3, [r3, #0]
   119b0:	4618      	mov	r0, r3
   119b2:	f006 fcc1 	bl	18338 <__aeabi_ui2f>
   119b6:	4603      	mov	r3, r0
   119b8:	4618      	mov	r0, r3
   119ba:	f04f 0100 	mov.w	r1, #0
   119be:	f2c4 417a 	movt	r1, #17530	; 0x447a
   119c2:	f006 fdc5 	bl	18550 <__aeabi_fdiv>
   119c6:	4603      	mov	r3, r0
   119c8:	461a      	mov	r2, r3
   119ca:	f24c 4388 	movw	r3, #50312	; 0xc488
   119ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119d2:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   119d4:	f24c 439c 	movw	r3, #50332	; 0xc49c
   119d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119dc:	681a      	ldr	r2, [r3, #0]
   119de:	f248 531f 	movw	r3, #34079	; 0x851f
   119e2:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   119e6:	fb83 1302 	smull	r1, r3, r3, r2
   119ea:	1159      	asrs	r1, r3, #5
   119ec:	17d3      	asrs	r3, r2, #31
   119ee:	1acb      	subs	r3, r1, r3
   119f0:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   119f4:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   119f8:	4618      	mov	r0, r3
   119fa:	f006 fca1 	bl	18340 <__aeabi_i2f>
   119fe:	4602      	mov	r2, r0
   11a00:	f24c 43a4 	movw	r3, #50340	; 0xc4a4
   11a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a08:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   11a0a:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   11a0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a12:	681a      	ldr	r2, [r3, #0]
   11a14:	f248 531f 	movw	r3, #34079	; 0x851f
   11a18:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11a1c:	fb83 1302 	smull	r1, r3, r3, r2
   11a20:	1159      	asrs	r1, r3, #5
   11a22:	17d3      	asrs	r3, r2, #31
   11a24:	1aca      	subs	r2, r1, r3
   11a26:	f648 231a 	movw	r3, #35354	; 0x8a1a
   11a2a:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   11a2e:	4413      	add	r3, r2
   11a30:	4618      	mov	r0, r3
   11a32:	f006 fc85 	bl	18340 <__aeabi_i2f>
   11a36:	4602      	mov	r2, r0
   11a38:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
   11a3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a40:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   11a42:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
   11a46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a4a:	2201      	movs	r2, #1
   11a4c:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   11a4e:	bd80      	pop	{r7, pc}
   11a50:	00000000 	.word	0x00000000
   11a54:	40f86a00 	.word	0x40f86a00
   11a58:	5a7ed197 	.word	0x5a7ed197
   11a5c:	400921fb 	.word	0x400921fb
   11a60:	2004c4bc 	.word	0x2004c4bc
   11a64:	2004c4c4 	.word	0x2004c4c4
   11a68:	2004c4c8 	.word	0x2004c4c8

00011a6c <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   11a6c:	b480      	push	{r7}
   11a6e:	b083      	sub	sp, #12
   11a70:	af00      	add	r7, sp, #0
   11a72:	4603      	mov	r3, r0
   11a74:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   11a76:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a7e:	781b      	ldrb	r3, [r3, #0]
   11a80:	2b06      	cmp	r3, #6
   11a82:	d81d      	bhi.n	11ac0 <parse_ubx+0x54>
    ck_a += c;
   11a84:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   11a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a8c:	781a      	ldrb	r2, [r3, #0]
   11a8e:	79fb      	ldrb	r3, [r7, #7]
   11a90:	4413      	add	r3, r2
   11a92:	b2da      	uxtb	r2, r3
   11a94:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   11a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a9c:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   11a9e:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   11aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aa6:	781a      	ldrb	r2, [r3, #0]
   11aa8:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   11aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ab0:	781b      	ldrb	r3, [r3, #0]
   11ab2:	4413      	add	r3, r2
   11ab4:	b2da      	uxtb	r2, r3
   11ab6:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   11aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11abe:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   11ac0:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ac8:	781b      	ldrb	r3, [r3, #0]
   11aca:	2b00      	cmp	r3, #0
   11acc:	d110      	bne.n	11af0 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   11ace:	79fb      	ldrb	r3, [r7, #7]
   11ad0:	2bb5      	cmp	r3, #181	; 0xb5
   11ad2:	f040 8135 	bne.w	11d40 <parse_ubx+0x2d4>
      ubx_status++;
   11ad6:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11ada:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ade:	781b      	ldrb	r3, [r3, #0]
   11ae0:	3301      	adds	r3, #1
   11ae2:	b2da      	uxtb	r2, r3
   11ae4:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aec:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11aee:	e12f      	b.n	11d50 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   11af0:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11af8:	781b      	ldrb	r3, [r3, #0]
   11afa:	2b01      	cmp	r3, #1
   11afc:	d11c      	bne.n	11b38 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   11afe:	79fb      	ldrb	r3, [r7, #7]
   11b00:	2b62      	cmp	r3, #98	; 0x62
   11b02:	d000      	beq.n	11b06 <parse_ubx+0x9a>
      goto error;
   11b04:	e11d      	b.n	11d42 <parse_ubx+0x2d6>
    ck_a = 0;
   11b06:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   11b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b0e:	2200      	movs	r2, #0
   11b10:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   11b12:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   11b16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b1a:	2200      	movs	r2, #0
   11b1c:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11b1e:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b26:	781b      	ldrb	r3, [r3, #0]
   11b28:	3301      	adds	r3, #1
   11b2a:	b2da      	uxtb	r2, r3
   11b2c:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b34:	701a      	strb	r2, [r3, #0]
   11b36:	e103      	b.n	11d40 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11b38:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b40:	781b      	ldrb	r3, [r3, #0]
   11b42:	2b02      	cmp	r3, #2
   11b44:	d127      	bne.n	11b96 <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   11b46:	f24c 43ad 	movw	r3, #50349	; 0xc4ad
   11b4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b4e:	781b      	ldrb	r3, [r3, #0]
   11b50:	b2db      	uxtb	r3, r3
   11b52:	2b00      	cmp	r3, #0
   11b54:	d00c      	beq.n	11b70 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   11b56:	f24c 53b7 	movw	r3, #50615	; 0xc5b7
   11b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b5e:	781b      	ldrb	r3, [r3, #0]
   11b60:	3301      	adds	r3, #1
   11b62:	b2da      	uxtb	r2, r3
   11b64:	f24c 53b7 	movw	r3, #50615	; 0xc5b7
   11b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b6c:	701a      	strb	r2, [r3, #0]
      goto error;
   11b6e:	e0e8      	b.n	11d42 <parse_ubx+0x2d6>
    }
    ubx_class = c;
   11b70:	f24c 53b6 	movw	r3, #50614	; 0xc5b6
   11b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b78:	79fa      	ldrb	r2, [r7, #7]
   11b7a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11b7c:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b84:	781b      	ldrb	r3, [r3, #0]
   11b86:	3301      	adds	r3, #1
   11b88:	b2da      	uxtb	r2, r3
   11b8a:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b92:	701a      	strb	r2, [r3, #0]
   11b94:	e0d4      	b.n	11d40 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   11b96:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b9e:	781b      	ldrb	r3, [r3, #0]
   11ba0:	2b03      	cmp	r3, #3
   11ba2:	d112      	bne.n	11bca <parse_ubx+0x15e>
  {
    ubx_id = c;
   11ba4:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   11ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bac:	79fa      	ldrb	r2, [r7, #7]
   11bae:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11bb0:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11bb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bb8:	781b      	ldrb	r3, [r3, #0]
   11bba:	3301      	adds	r3, #1
   11bbc:	b2da      	uxtb	r2, r3
   11bbe:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11bc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bc6:	701a      	strb	r2, [r3, #0]
   11bc8:	e0ba      	b.n	11d40 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   11bca:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11bce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bd2:	781b      	ldrb	r3, [r3, #0]
   11bd4:	2b04      	cmp	r3, #4
   11bd6:	d113      	bne.n	11c00 <parse_ubx+0x194>
  {
    ubx_len = c;
   11bd8:	79fb      	ldrb	r3, [r7, #7]
   11bda:	b29a      	uxth	r2, r3
   11bdc:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11be4:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   11be6:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bee:	781b      	ldrb	r3, [r3, #0]
   11bf0:	3301      	adds	r3, #1
   11bf2:	b2da      	uxtb	r2, r3
   11bf4:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bfc:	701a      	strb	r2, [r3, #0]
   11bfe:	e09f      	b.n	11d40 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11c00:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c08:	781b      	ldrb	r3, [r3, #0]
   11c0a:	2b05      	cmp	r3, #5
   11c0c:	d12b      	bne.n	11c66 <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   11c0e:	79fb      	ldrb	r3, [r7, #7]
   11c10:	021b      	lsls	r3, r3, #8
   11c12:	b29a      	uxth	r2, r3
   11c14:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c1c:	881b      	ldrh	r3, [r3, #0]
   11c1e:	b29b      	uxth	r3, r3
   11c20:	4313      	orrs	r3, r2
   11c22:	b29b      	uxth	r3, r3
   11c24:	b29a      	uxth	r2, r3
   11c26:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c2e:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11c30:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c38:	881b      	ldrh	r3, [r3, #0]
   11c3a:	2bff      	cmp	r3, #255	; 0xff
   11c3c:	d900      	bls.n	11c40 <parse_ubx+0x1d4>
      goto error;
   11c3e:	e080      	b.n	11d42 <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11c40:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c48:	2200      	movs	r2, #0
   11c4a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11c4c:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c54:	781b      	ldrb	r3, [r3, #0]
   11c56:	3301      	adds	r3, #1
   11c58:	b2da      	uxtb	r2, r3
   11c5a:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c62:	701a      	strb	r2, [r3, #0]
   11c64:	e06c      	b.n	11d40 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   11c66:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c6e:	781b      	ldrb	r3, [r3, #0]
   11c70:	2b06      	cmp	r3, #6
   11c72:	d131      	bne.n	11cd8 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   11c74:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c7c:	781b      	ldrb	r3, [r3, #0]
   11c7e:	461a      	mov	r2, r3
   11c80:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   11c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c88:	79f9      	ldrb	r1, [r7, #7]
   11c8a:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   11c8c:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c94:	781b      	ldrb	r3, [r3, #0]
   11c96:	3301      	adds	r3, #1
   11c98:	b2da      	uxtb	r2, r3
   11c9a:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ca2:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   11ca4:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11ca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cac:	781b      	ldrb	r3, [r3, #0]
   11cae:	461a      	mov	r2, r3
   11cb0:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11cb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cb8:	881b      	ldrh	r3, [r3, #0]
   11cba:	429a      	cmp	r2, r3
   11cbc:	d340      	bcc.n	11d40 <parse_ubx+0x2d4>
      ubx_status++;
   11cbe:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cc6:	781b      	ldrb	r3, [r3, #0]
   11cc8:	3301      	adds	r3, #1
   11cca:	b2da      	uxtb	r2, r3
   11ccc:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cd4:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11cd6:	e03b      	b.n	11d50 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   11cd8:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ce0:	781b      	ldrb	r3, [r3, #0]
   11ce2:	2b07      	cmp	r3, #7
   11ce4:	d115      	bne.n	11d12 <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   11ce6:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   11cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cee:	781b      	ldrb	r3, [r3, #0]
   11cf0:	79fa      	ldrb	r2, [r7, #7]
   11cf2:	429a      	cmp	r2, r3
   11cf4:	d000      	beq.n	11cf8 <parse_ubx+0x28c>
      goto error;
   11cf6:	e024      	b.n	11d42 <parse_ubx+0x2d6>
    ubx_status++;
   11cf8:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d00:	781b      	ldrb	r3, [r3, #0]
   11d02:	3301      	adds	r3, #1
   11d04:	b2da      	uxtb	r2, r3
   11d06:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d0e:	701a      	strb	r2, [r3, #0]
   11d10:	e016      	b.n	11d40 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   11d12:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11d16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d1a:	781b      	ldrb	r3, [r3, #0]
   11d1c:	2b08      	cmp	r3, #8
   11d1e:	d10f      	bne.n	11d40 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11d20:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   11d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d28:	781b      	ldrb	r3, [r3, #0]
   11d2a:	79fa      	ldrb	r2, [r7, #7]
   11d2c:	429a      	cmp	r2, r3
   11d2e:	d000      	beq.n	11d32 <parse_ubx+0x2c6>
      goto error;
   11d30:	e007      	b.n	11d42 <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   11d32:	f24c 43ad 	movw	r3, #50349	; 0xc4ad
   11d36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d3a:	2201      	movs	r2, #1
   11d3c:	701a      	strb	r2, [r3, #0]
    goto restart;
   11d3e:	e000      	b.n	11d42 <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11d40:	e006      	b.n	11d50 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   11d42:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d4a:	2200      	movs	r2, #0
   11d4c:	701a      	strb	r2, [r3, #0]
  return;
   11d4e:	bf00      	nop
}
   11d50:	370c      	adds	r7, #12
   11d52:	46bd      	mov	sp, r7
   11d54:	f85d 7b04 	ldr.w	r7, [sp], #4
   11d58:	4770      	bx	lr
   11d5a:	bf00      	nop

00011d5c <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   11d5c:	b580      	push	{r7, lr}
   11d5e:	b082      	sub	sp, #8
   11d60:	af00      	add	r7, sp, #0
   11d62:	f242 039c 	movw	r3, #8348	; 0x209c
   11d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d6a:	781b      	ldrb	r3, [r3, #0]
   11d6c:	71fb      	strb	r3, [r7, #7]
   11d6e:	79fb      	ldrb	r3, [r7, #7]
   11d70:	4618      	mov	r0, r3
   11d72:	f7ff fe7b 	bl	11a6c <parse_ubx>
   11d76:	3708      	adds	r7, #8
   11d78:	46bd      	mov	sp, r7
   11d7a:	bd80      	pop	{r7, pc}
   11d7c:	f3af 8000 	nop.w

00011d80 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   11d80:	b580      	push	{r7, lr}
   11d82:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   11d84:	f240 5348 	movw	r3, #1352	; 0x548
   11d88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d8c:	f24c 228f 	movw	r2, #49807	; 0xc28f
   11d90:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   11d94:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   11d96:	2001      	movs	r0, #1
   11d98:	f24c 51bc 	movw	r1, #50620	; 0xc5bc
   11d9c:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11da0:	f7ff fc82 	bl	116a8 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   11da4:	2002      	movs	r0, #2
   11da6:	f24c 6100 	movw	r1, #50688	; 0xc600
   11daa:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11dae:	f7ff fc7b 	bl	116a8 <adc_buf_channel>
}
   11db2:	bd80      	pop	{r7, pc}

00011db4 <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   11db4:	b480      	push	{r7}
   11db6:	b083      	sub	sp, #12
   11db8:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   11dba:	f24c 53bc 	movw	r3, #50620	; 0xc5bc
   11dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dc2:	881b      	ldrh	r3, [r3, #0]
   11dc4:	095b      	lsrs	r3, r3, #5
   11dc6:	b29b      	uxth	r3, r3
   11dc8:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   11dca:	f24c 6300 	movw	r3, #50688	; 0xc600
   11dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dd2:	881b      	ldrh	r3, [r3, #0]
   11dd4:	095b      	lsrs	r3, r3, #5
   11dd6:	b29b      	uxth	r3, r3
   11dd8:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   11dda:	88fb      	ldrh	r3, [r7, #6]
   11ddc:	425b      	negs	r3, r3
   11dde:	b29a      	uxth	r2, r3
   11de0:	88bb      	ldrh	r3, [r7, #4]
   11de2:	1ad3      	subs	r3, r2, r3
   11de4:	b29a      	uxth	r2, r3
   11de6:	f240 5342 	movw	r3, #1346	; 0x542
   11dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dee:	881b      	ldrh	r3, [r3, #0]
   11df0:	b29b      	uxth	r3, r3
   11df2:	1ad3      	subs	r3, r2, r3
   11df4:	b29b      	uxth	r3, r3
   11df6:	b29a      	uxth	r2, r3
   11df8:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   11dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e00:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   11e02:	88ba      	ldrh	r2, [r7, #4]
   11e04:	88fb      	ldrh	r3, [r7, #6]
   11e06:	1ad3      	subs	r3, r2, r3
   11e08:	b29a      	uxth	r2, r3
   11e0a:	f240 5344 	movw	r3, #1348	; 0x544
   11e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e12:	881b      	ldrh	r3, [r3, #0]
   11e14:	b29b      	uxth	r3, r3
   11e16:	1ad3      	subs	r3, r2, r3
   11e18:	b29b      	uxth	r3, r3
   11e1a:	b29a      	uxth	r2, r3
   11e1c:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
   11e20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e24:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   11e26:	370c      	adds	r7, #12
   11e28:	46bd      	mov	sp, r7
   11e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   11e2e:	4770      	bx	lr

00011e30 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11e30:	b580      	push	{r7, lr}
   11e32:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   11e34:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
   11e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e3c:	881b      	ldrh	r3, [r3, #0]
   11e3e:	b29b      	uxth	r3, r3
   11e40:	425b      	negs	r3, r3
   11e42:	b29b      	uxth	r3, r3
   11e44:	b29a      	uxth	r2, r3
   11e46:	f240 5340 	movw	r3, #1344	; 0x540
   11e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e4e:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   11e50:	f240 5340 	movw	r3, #1344	; 0x540
   11e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e58:	881b      	ldrh	r3, [r3, #0]
   11e5a:	b21b      	sxth	r3, r3
   11e5c:	4618      	mov	r0, r3
   11e5e:	f005 fe1d 	bl	17a9c <__aeabi_i2d>
   11e62:	4602      	mov	r2, r0
   11e64:	460b      	mov	r3, r1
   11e66:	f04f 0000 	mov.w	r0, #0
   11e6a:	f04f 0100 	mov.w	r1, #0
   11e6e:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   11e72:	f005 ffa3 	bl	17dbc <__aeabi_ddiv>
   11e76:	4602      	mov	r2, r0
   11e78:	460b      	mov	r3, r1
   11e7a:	4610      	mov	r0, r2
   11e7c:	4619      	mov	r1, r3
   11e7e:	f006 f955 	bl	1812c <__aeabi_d2f>
   11e82:	4602      	mov	r2, r0
   11e84:	f240 5348 	movw	r3, #1352	; 0x548
   11e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e8c:	601a      	str	r2, [r3, #0]
}
   11e8e:	bd80      	pop	{r7, pc}

00011e90 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   11e90:	b590      	push	{r4, r7, lr}
   11e92:	b083      	sub	sp, #12
   11e94:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   11e96:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   11e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e9e:	681a      	ldr	r2, [r3, #0]
   11ea0:	f24c 6344 	movw	r3, #50756	; 0xc644
   11ea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ea8:	681b      	ldr	r3, [r3, #0]
   11eaa:	4610      	mov	r0, r2
   11eac:	4619      	mov	r1, r3
   11eae:	f006 f991 	bl	181d4 <__aeabi_fsub>
   11eb2:	4603      	mov	r3, r0
   11eb4:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   11eb6:	f240 534c 	movw	r3, #1356	; 0x54c
   11eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ebe:	681b      	ldr	r3, [r3, #0]
   11ec0:	4618      	mov	r0, r3
   11ec2:	6879      	ldr	r1, [r7, #4]
   11ec4:	f006 fa90 	bl	183e8 <__aeabi_fmul>
   11ec8:	4603      	mov	r3, r0
   11eca:	4618      	mov	r0, r3
   11ecc:	f04f 0100 	mov.w	r1, #0
   11ed0:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11ed4:	f006 fc26 	bl	18724 <__aeabi_fcmplt>
   11ed8:	4603      	mov	r3, r0
   11eda:	2b00      	cmp	r3, #0
   11edc:	d002      	beq.n	11ee4 <roll_pitch_pid_run+0x54>
   11ede:	f64d 2280 	movw	r2, #55936	; 0xda80
   11ee2:	e026      	b.n	11f32 <roll_pitch_pid_run+0xa2>
   11ee4:	f240 534c 	movw	r3, #1356	; 0x54c
   11ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11eec:	681b      	ldr	r3, [r3, #0]
   11eee:	4618      	mov	r0, r3
   11ef0:	6879      	ldr	r1, [r7, #4]
   11ef2:	f006 fa79 	bl	183e8 <__aeabi_fmul>
   11ef6:	4603      	mov	r3, r0
   11ef8:	4618      	mov	r0, r3
   11efa:	f04f 0100 	mov.w	r1, #0
   11efe:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11f02:	f006 fc2d 	bl	18760 <__aeabi_fcmpgt>
   11f06:	4603      	mov	r3, r0
   11f08:	2b00      	cmp	r3, #0
   11f0a:	d002      	beq.n	11f12 <roll_pitch_pid_run+0x82>
   11f0c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11f10:	e00e      	b.n	11f30 <roll_pitch_pid_run+0xa0>
   11f12:	f240 534c 	movw	r3, #1356	; 0x54c
   11f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f1a:	681b      	ldr	r3, [r3, #0]
   11f1c:	4618      	mov	r0, r3
   11f1e:	6879      	ldr	r1, [r7, #4]
   11f20:	f006 fa62 	bl	183e8 <__aeabi_fmul>
   11f24:	4603      	mov	r3, r0
   11f26:	4618      	mov	r0, r3
   11f28:	f006 fc24 	bl	18774 <__aeabi_f2iz>
   11f2c:	4603      	mov	r3, r0
   11f2e:	b29b      	uxth	r3, r3
   11f30:	b29a      	uxth	r2, r3
   11f32:	f24c 634e 	movw	r3, #50766	; 0xc64e
   11f36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f3a:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   11f3c:	f24c 6354 	movw	r3, #50772	; 0xc654
   11f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f44:	681b      	ldr	r3, [r3, #0]
   11f46:	4618      	mov	r0, r3
   11f48:	f04f 0100 	mov.w	r1, #0
   11f4c:	f006 fbea 	bl	18724 <__aeabi_fcmplt>
   11f50:	4603      	mov	r3, r0
   11f52:	2b00      	cmp	r3, #0
   11f54:	d006      	beq.n	11f64 <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   11f56:	f24c 6354 	movw	r3, #50772	; 0xc654
   11f5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f5e:	f04f 0200 	mov.w	r2, #0
   11f62:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   11f64:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   11f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f6c:	681a      	ldr	r2, [r3, #0]
   11f6e:	f24c 6348 	movw	r3, #50760	; 0xc648
   11f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f76:	681b      	ldr	r3, [r3, #0]
   11f78:	4610      	mov	r0, r2
   11f7a:	4619      	mov	r1, r3
   11f7c:	f006 f92a 	bl	181d4 <__aeabi_fsub>
   11f80:	4603      	mov	r3, r0
   11f82:	461c      	mov	r4, r3
   11f84:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   11f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f8c:	681b      	ldr	r3, [r3, #0]
   11f8e:	4618      	mov	r0, r3
   11f90:	f04f 0100 	mov.w	r1, #0
   11f94:	f006 fbc6 	bl	18724 <__aeabi_fcmplt>
   11f98:	4603      	mov	r3, r0
   11f9a:	2b00      	cmp	r3, #0
   11f9c:	d007      	beq.n	11fae <roll_pitch_pid_run+0x11e>
   11f9e:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   11fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fa6:	681b      	ldr	r3, [r3, #0]
   11fa8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11fac:	e004      	b.n	11fb8 <roll_pitch_pid_run+0x128>
   11fae:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   11fb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fb6:	681a      	ldr	r2, [r3, #0]
   11fb8:	f24c 6354 	movw	r3, #50772	; 0xc654
   11fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fc0:	681b      	ldr	r3, [r3, #0]
   11fc2:	4610      	mov	r0, r2
   11fc4:	4619      	mov	r1, r3
   11fc6:	f006 fa0f 	bl	183e8 <__aeabi_fmul>
   11fca:	4603      	mov	r3, r0
   11fcc:	4620      	mov	r0, r4
   11fce:	4619      	mov	r1, r3
   11fd0:	f006 f900 	bl	181d4 <__aeabi_fsub>
   11fd4:	4603      	mov	r3, r0
   11fd6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   11fda:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   11fdc:	f240 5350 	movw	r3, #1360	; 0x550
   11fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fe4:	681b      	ldr	r3, [r3, #0]
   11fe6:	4618      	mov	r0, r3
   11fe8:	6879      	ldr	r1, [r7, #4]
   11fea:	f006 f9fd 	bl	183e8 <__aeabi_fmul>
   11fee:	4603      	mov	r3, r0
   11ff0:	4618      	mov	r0, r3
   11ff2:	f04f 0100 	mov.w	r1, #0
   11ff6:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11ffa:	f006 fb93 	bl	18724 <__aeabi_fcmplt>
   11ffe:	4603      	mov	r3, r0
   12000:	2b00      	cmp	r3, #0
   12002:	d002      	beq.n	1200a <roll_pitch_pid_run+0x17a>
   12004:	f64d 2280 	movw	r2, #55936	; 0xda80
   12008:	e026      	b.n	12058 <roll_pitch_pid_run+0x1c8>
   1200a:	f240 5350 	movw	r3, #1360	; 0x550
   1200e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12012:	681b      	ldr	r3, [r3, #0]
   12014:	4618      	mov	r0, r3
   12016:	6879      	ldr	r1, [r7, #4]
   12018:	f006 f9e6 	bl	183e8 <__aeabi_fmul>
   1201c:	4603      	mov	r3, r0
   1201e:	4618      	mov	r0, r3
   12020:	f04f 0100 	mov.w	r1, #0
   12024:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12028:	f006 fb9a 	bl	18760 <__aeabi_fcmpgt>
   1202c:	4603      	mov	r3, r0
   1202e:	2b00      	cmp	r3, #0
   12030:	d002      	beq.n	12038 <roll_pitch_pid_run+0x1a8>
   12032:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   12036:	e00e      	b.n	12056 <roll_pitch_pid_run+0x1c6>
   12038:	f240 5350 	movw	r3, #1360	; 0x550
   1203c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12040:	681b      	ldr	r3, [r3, #0]
   12042:	4618      	mov	r0, r3
   12044:	6879      	ldr	r1, [r7, #4]
   12046:	f006 f9cf 	bl	183e8 <__aeabi_fmul>
   1204a:	4603      	mov	r3, r0
   1204c:	4618      	mov	r0, r3
   1204e:	f006 fb91 	bl	18774 <__aeabi_f2iz>
   12052:	4603      	mov	r3, r0
   12054:	b29b      	uxth	r3, r3
   12056:	b29a      	uxth	r2, r3
   12058:	f24c 6350 	movw	r3, #50768	; 0xc650
   1205c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12060:	801a      	strh	r2, [r3, #0]
}
   12062:	370c      	adds	r7, #12
   12064:	46bd      	mov	sp, r7
   12066:	bd90      	pop	{r4, r7, pc}

00012068 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   12068:	b580      	push	{r7, lr}
   1206a:	b082      	sub	sp, #8
   1206c:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   1206e:	f64c 1308 	movw	r3, #51464	; 0xc908
   12072:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12076:	681a      	ldr	r2, [r3, #0]
   12078:	f24c 635c 	movw	r3, #50780	; 0xc65c
   1207c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12080:	681b      	ldr	r3, [r3, #0]
   12082:	4610      	mov	r0, r2
   12084:	4619      	mov	r1, r3
   12086:	f006 f8a5 	bl	181d4 <__aeabi_fsub>
   1208a:	4603      	mov	r3, r0
   1208c:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   1208e:	e013      	b.n	120b8 <course_pid_run+0x50>
   12090:	6878      	ldr	r0, [r7, #4]
   12092:	f005 fd15 	bl	17ac0 <__aeabi_f2d>
   12096:	4602      	mov	r2, r0
   12098:	460b      	mov	r3, r1
   1209a:	4610      	mov	r0, r2
   1209c:	4619      	mov	r1, r3
   1209e:	a348      	add	r3, pc, #288	; (adr r3, 121c0 <course_pid_run+0x158>)
   120a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   120a4:	f005 fbac 	bl	17800 <__aeabi_dsub>
   120a8:	4602      	mov	r2, r0
   120aa:	460b      	mov	r3, r1
   120ac:	4610      	mov	r0, r2
   120ae:	4619      	mov	r1, r3
   120b0:	f006 f83c 	bl	1812c <__aeabi_d2f>
   120b4:	4603      	mov	r3, r0
   120b6:	607b      	str	r3, [r7, #4]
   120b8:	6878      	ldr	r0, [r7, #4]
   120ba:	f005 fd01 	bl	17ac0 <__aeabi_f2d>
   120be:	4602      	mov	r2, r0
   120c0:	460b      	mov	r3, r1
   120c2:	4610      	mov	r0, r2
   120c4:	4619      	mov	r1, r3
   120c6:	a340      	add	r3, pc, #256	; (adr r3, 121c8 <course_pid_run+0x160>)
   120c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   120cc:	f005 ffdc 	bl	18088 <__aeabi_dcmpgt>
   120d0:	4603      	mov	r3, r0
   120d2:	2b00      	cmp	r3, #0
   120d4:	d1dc      	bne.n	12090 <course_pid_run+0x28>
   120d6:	e013      	b.n	12100 <course_pid_run+0x98>
   120d8:	6878      	ldr	r0, [r7, #4]
   120da:	f005 fcf1 	bl	17ac0 <__aeabi_f2d>
   120de:	4602      	mov	r2, r0
   120e0:	460b      	mov	r3, r1
   120e2:	4610      	mov	r0, r2
   120e4:	4619      	mov	r1, r3
   120e6:	a336      	add	r3, pc, #216	; (adr r3, 121c0 <course_pid_run+0x158>)
   120e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   120ec:	f005 fb8a 	bl	17804 <__adddf3>
   120f0:	4602      	mov	r2, r0
   120f2:	460b      	mov	r3, r1
   120f4:	4610      	mov	r0, r2
   120f6:	4619      	mov	r1, r3
   120f8:	f006 f818 	bl	1812c <__aeabi_d2f>
   120fc:	4603      	mov	r3, r0
   120fe:	607b      	str	r3, [r7, #4]
   12100:	6878      	ldr	r0, [r7, #4]
   12102:	f005 fcdd 	bl	17ac0 <__aeabi_f2d>
   12106:	4602      	mov	r2, r0
   12108:	460b      	mov	r3, r1
   1210a:	4610      	mov	r0, r2
   1210c:	4619      	mov	r1, r3
   1210e:	a330      	add	r3, pc, #192	; (adr r3, 121d0 <course_pid_run+0x168>)
   12110:	e9d3 2300 	ldrd	r2, r3, [r3]
   12114:	f005 ff9a 	bl	1804c <__aeabi_dcmplt>
   12118:	4603      	mov	r3, r0
   1211a:	2b00      	cmp	r3, #0
   1211c:	d1dc      	bne.n	120d8 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   1211e:	f240 5358 	movw	r3, #1368	; 0x558
   12122:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12126:	681b      	ldr	r3, [r3, #0]
   12128:	4618      	mov	r0, r3
   1212a:	6879      	ldr	r1, [r7, #4]
   1212c:	f006 f95c 	bl	183e8 <__aeabi_fmul>
   12130:	4603      	mov	r3, r0
   12132:	461a      	mov	r2, r3
   12134:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   12138:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1213c:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   1213e:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   12142:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12146:	681a      	ldr	r2, [r3, #0]
   12148:	f240 535c 	movw	r3, #1372	; 0x55c
   1214c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12150:	681b      	ldr	r3, [r3, #0]
   12152:	4610      	mov	r0, r2
   12154:	4619      	mov	r1, r3
   12156:	f006 fb03 	bl	18760 <__aeabi_fcmpgt>
   1215a:	4603      	mov	r3, r0
   1215c:	2b00      	cmp	r3, #0
   1215e:	d00a      	beq.n	12176 <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   12160:	f240 535c 	movw	r3, #1372	; 0x55c
   12164:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12168:	681a      	ldr	r2, [r3, #0]
   1216a:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   1216e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12172:	601a      	str	r2, [r3, #0]
   12174:	e01e      	b.n	121b4 <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   12176:	f240 535c 	movw	r3, #1372	; 0x55c
   1217a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1217e:	681b      	ldr	r3, [r3, #0]
   12180:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   12184:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   12188:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1218c:	681b      	ldr	r3, [r3, #0]
   1218e:	4610      	mov	r0, r2
   12190:	4619      	mov	r1, r3
   12192:	f006 fae5 	bl	18760 <__aeabi_fcmpgt>
   12196:	4603      	mov	r3, r0
   12198:	2b00      	cmp	r3, #0
   1219a:	d00b      	beq.n	121b4 <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   1219c:	f240 535c 	movw	r3, #1372	; 0x55c
   121a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121a4:	681b      	ldr	r3, [r3, #0]
   121a6:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   121aa:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   121ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121b2:	601a      	str	r2, [r3, #0]
}
   121b4:	3708      	adds	r7, #8
   121b6:	46bd      	mov	sp, r7
   121b8:	bd80      	pop	{r7, pc}
   121ba:	bf00      	nop
   121bc:	f3af 8000 	nop.w
   121c0:	54442d18 	.word	0x54442d18
   121c4:	401921fb 	.word	0x401921fb
   121c8:	54442d18 	.word	0x54442d18
   121cc:	400921fb 	.word	0x400921fb
   121d0:	54442d18 	.word	0x54442d18
   121d4:	c00921fb 	.word	0xc00921fb

000121d8 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   121d8:	b5b0      	push	{r4, r5, r7, lr}
   121da:	b082      	sub	sp, #8
   121dc:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   121de:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   121e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121e6:	681a      	ldr	r2, [r3, #0]
   121e8:	f24c 6360 	movw	r3, #50784	; 0xc660
   121ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121f0:	681b      	ldr	r3, [r3, #0]
   121f2:	4610      	mov	r0, r2
   121f4:	4619      	mov	r1, r3
   121f6:	f005 ffed 	bl	181d4 <__aeabi_fsub>
   121fa:	4603      	mov	r3, r0
   121fc:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   121fe:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12202:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12206:	781b      	ldrb	r3, [r3, #0]
   12208:	2b00      	cmp	r3, #0
   1220a:	f000 80a8 	beq.w	1235e <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   1220e:	f24c 6398 	movw	r3, #50840	; 0xc698
   12212:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12216:	881b      	ldrh	r3, [r3, #0]
   12218:	b29a      	uxth	r2, r3
   1221a:	f24c 634c 	movw	r3, #50764	; 0xc64c
   1221e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12222:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   12224:	f240 5364 	movw	r3, #1380	; 0x564
   12228:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1222c:	681a      	ldr	r2, [r3, #0]
   1222e:	f24c 636c 	movw	r3, #50796	; 0xc66c
   12232:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12236:	681b      	ldr	r3, [r3, #0]
   12238:	4610      	mov	r0, r2
   1223a:	4619      	mov	r1, r3
   1223c:	f006 f8d4 	bl	183e8 <__aeabi_fmul>
   12240:	4603      	mov	r3, r0
   12242:	4618      	mov	r0, r3
   12244:	6879      	ldr	r1, [r7, #4]
   12246:	f005 ffc7 	bl	181d8 <__addsf3>
   1224a:	4603      	mov	r3, r0
   1224c:	461a      	mov	r2, r3
   1224e:	f240 5360 	movw	r3, #1376	; 0x560
   12252:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12256:	681b      	ldr	r3, [r3, #0]
   12258:	4610      	mov	r0, r2
   1225a:	4619      	mov	r1, r3
   1225c:	f006 f8c4 	bl	183e8 <__aeabi_fmul>
   12260:	4603      	mov	r3, r0
   12262:	461a      	mov	r2, r3
   12264:	f24c 6348 	movw	r3, #50760	; 0xc648
   12268:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1226c:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   1226e:	f24c 6348 	movw	r3, #50760	; 0xc648
   12272:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12276:	681a      	ldr	r2, [r3, #0]
   12278:	f240 5368 	movw	r3, #1384	; 0x568
   1227c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12280:	681b      	ldr	r3, [r3, #0]
   12282:	4610      	mov	r0, r2
   12284:	4619      	mov	r1, r3
   12286:	f006 fa6b 	bl	18760 <__aeabi_fcmpgt>
   1228a:	4603      	mov	r3, r0
   1228c:	2b00      	cmp	r3, #0
   1228e:	d009      	beq.n	122a4 <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   12290:	f240 5368 	movw	r3, #1384	; 0x568
   12294:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12298:	681a      	ldr	r2, [r3, #0]
   1229a:	f24c 6348 	movw	r3, #50760	; 0xc648
   1229e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122a2:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   122a4:	f24c 6348 	movw	r3, #50760	; 0xc648
   122a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122ac:	681a      	ldr	r2, [r3, #0]
   122ae:	f240 536c 	movw	r3, #1388	; 0x56c
   122b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122b6:	681b      	ldr	r3, [r3, #0]
   122b8:	4610      	mov	r0, r2
   122ba:	4619      	mov	r1, r3
   122bc:	f006 fa32 	bl	18724 <__aeabi_fcmplt>
   122c0:	4603      	mov	r3, r0
   122c2:	2b00      	cmp	r3, #0
   122c4:	d009      	beq.n	122da <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   122c6:	f240 536c 	movw	r3, #1388	; 0x56c
   122ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122ce:	681a      	ldr	r2, [r3, #0]
   122d0:	f24c 6348 	movw	r3, #50760	; 0xc648
   122d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122d8:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   122da:	f24c 636c 	movw	r3, #50796	; 0xc66c
   122de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122e2:	681b      	ldr	r3, [r3, #0]
   122e4:	4618      	mov	r0, r3
   122e6:	6879      	ldr	r1, [r7, #4]
   122e8:	f005 ff76 	bl	181d8 <__addsf3>
   122ec:	4603      	mov	r3, r0
   122ee:	461a      	mov	r2, r3
   122f0:	f24c 636c 	movw	r3, #50796	; 0xc66c
   122f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122f8:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   122fa:	f24c 636c 	movw	r3, #50796	; 0xc66c
   122fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12302:	681b      	ldr	r3, [r3, #0]
   12304:	4618      	mov	r0, r3
   12306:	f04f 0100 	mov.w	r1, #0
   1230a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1230e:	f006 fa27 	bl	18760 <__aeabi_fcmpgt>
   12312:	4603      	mov	r3, r0
   12314:	2b00      	cmp	r3, #0
   12316:	d008      	beq.n	1232a <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   12318:	f24c 636c 	movw	r3, #50796	; 0xc66c
   1231c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12320:	f04f 0200 	mov.w	r2, #0
   12324:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   12328:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   1232a:	f24c 636c 	movw	r3, #50796	; 0xc66c
   1232e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12332:	681b      	ldr	r3, [r3, #0]
   12334:	4618      	mov	r0, r3
   12336:	f04f 0100 	mov.w	r1, #0
   1233a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1233e:	f006 f9f1 	bl	18724 <__aeabi_fcmplt>
   12342:	4603      	mov	r3, r0
   12344:	2b00      	cmp	r3, #0
   12346:	d100      	bne.n	1234a <climb_pid_run+0x172>
   12348:	e109      	b.n	1255e <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   1234a:	f24c 636c 	movw	r3, #50796	; 0xc66c
   1234e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12352:	f04f 0200 	mov.w	r2, #0
   12356:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   1235a:	601a      	str	r2, [r3, #0]
   1235c:	e0ff      	b.n	1255e <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   1235e:	f24c 6360 	movw	r3, #50784	; 0xc660
   12362:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12366:	681b      	ldr	r3, [r3, #0]
   12368:	4618      	mov	r0, r3
   1236a:	f04f 0100 	mov.w	r1, #0
   1236e:	f006 f9f7 	bl	18760 <__aeabi_fcmpgt>
   12372:	4603      	mov	r3, r0
   12374:	2b00      	cmp	r3, #0
   12376:	d010      	beq.n	1239a <climb_pid_run+0x1c2>
   12378:	f24c 6360 	movw	r3, #50784	; 0xc660
   1237c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12380:	681a      	ldr	r2, [r3, #0]
   12382:	f240 5354 	movw	r3, #1364	; 0x554
   12386:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1238a:	681b      	ldr	r3, [r3, #0]
   1238c:	4610      	mov	r0, r2
   1238e:	4619      	mov	r1, r3
   12390:	f006 f82a 	bl	183e8 <__aeabi_fmul>
   12394:	4603      	mov	r3, r0
   12396:	461a      	mov	r2, r3
   12398:	e001      	b.n	1239e <climb_pid_run+0x1c6>
   1239a:	f04f 0200 	mov.w	r2, #0
   1239e:	f24c 6358 	movw	r3, #50776	; 0xc658
   123a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123a6:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   123a8:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   123ac:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   123b0:	f24c 6368 	movw	r3, #50792	; 0xc668
   123b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123b8:	681b      	ldr	r3, [r3, #0]
   123ba:	4610      	mov	r0, r2
   123bc:	4619      	mov	r1, r3
   123be:	f006 f813 	bl	183e8 <__aeabi_fmul>
   123c2:	4603      	mov	r3, r0
   123c4:	4618      	mov	r0, r3
   123c6:	6879      	ldr	r1, [r7, #4]
   123c8:	f005 ff06 	bl	181d8 <__addsf3>
   123cc:	4603      	mov	r3, r0
   123ce:	461a      	mov	r2, r3
   123d0:	f24c 238f 	movw	r3, #49807	; 0xc28f
   123d4:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   123d8:	4610      	mov	r0, r2
   123da:	4619      	mov	r1, r3
   123dc:	f006 f804 	bl	183e8 <__aeabi_fmul>
   123e0:	4603      	mov	r3, r0
   123e2:	4618      	mov	r0, r3
   123e4:	f005 fb6c 	bl	17ac0 <__aeabi_f2d>
   123e8:	4602      	mov	r2, r0
   123ea:	460b      	mov	r3, r1
   123ec:	4610      	mov	r0, r2
   123ee:	4619      	mov	r1, r3
   123f0:	a35d      	add	r3, pc, #372	; (adr r3, 12568 <climb_pid_run+0x390>)
   123f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   123f6:	f005 fa05 	bl	17804 <__adddf3>
   123fa:	4602      	mov	r2, r0
   123fc:	460b      	mov	r3, r1
   123fe:	4614      	mov	r4, r2
   12400:	461d      	mov	r5, r3
   12402:	f24c 6360 	movw	r3, #50784	; 0xc660
   12406:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1240a:	681b      	ldr	r3, [r3, #0]
   1240c:	4618      	mov	r0, r3
   1240e:	f005 fb57 	bl	17ac0 <__aeabi_f2d>
   12412:	4602      	mov	r2, r0
   12414:	460b      	mov	r3, r1
   12416:	4610      	mov	r0, r2
   12418:	4619      	mov	r1, r3
   1241a:	a355      	add	r3, pc, #340	; (adr r3, 12570 <climb_pid_run+0x398>)
   1241c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12420:	f005 fba2 	bl	17b68 <__aeabi_dmul>
   12424:	4602      	mov	r2, r0
   12426:	460b      	mov	r3, r1
   12428:	4620      	mov	r0, r4
   1242a:	4629      	mov	r1, r5
   1242c:	f005 f9ea 	bl	17804 <__adddf3>
   12430:	4602      	mov	r2, r0
   12432:	460b      	mov	r3, r1
   12434:	4610      	mov	r0, r2
   12436:	4619      	mov	r1, r3
   12438:	f005 fe78 	bl	1812c <__aeabi_d2f>
   1243c:	4603      	mov	r3, r0
   1243e:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   12440:	f24c 6368 	movw	r3, #50792	; 0xc668
   12444:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12448:	681b      	ldr	r3, [r3, #0]
   1244a:	4618      	mov	r0, r3
   1244c:	6879      	ldr	r1, [r7, #4]
   1244e:	f005 fec3 	bl	181d8 <__addsf3>
   12452:	4603      	mov	r3, r0
   12454:	461a      	mov	r2, r3
   12456:	f24c 6368 	movw	r3, #50792	; 0xc668
   1245a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1245e:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   12460:	f24c 6368 	movw	r3, #50792	; 0xc668
   12464:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12468:	681b      	ldr	r3, [r3, #0]
   1246a:	4618      	mov	r0, r3
   1246c:	f04f 0100 	mov.w	r1, #0
   12470:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   12474:	f006 f974 	bl	18760 <__aeabi_fcmpgt>
   12478:	4603      	mov	r3, r0
   1247a:	2b00      	cmp	r3, #0
   1247c:	d008      	beq.n	12490 <climb_pid_run+0x2b8>
   1247e:	f24c 6368 	movw	r3, #50792	; 0xc668
   12482:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12486:	f04f 0200 	mov.w	r2, #0
   1248a:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   1248e:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   12490:	f24c 6368 	movw	r3, #50792	; 0xc668
   12494:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12498:	681b      	ldr	r3, [r3, #0]
   1249a:	4618      	mov	r0, r3
   1249c:	f04f 0100 	mov.w	r1, #0
   124a0:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   124a4:	f006 f93e 	bl	18724 <__aeabi_fcmplt>
   124a8:	4603      	mov	r3, r0
   124aa:	2b00      	cmp	r3, #0
   124ac:	d008      	beq.n	124c0 <climb_pid_run+0x2e8>
   124ae:	f24c 6368 	movw	r3, #50792	; 0xc668
   124b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124b6:	f04f 0200 	mov.w	r2, #0
   124ba:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   124be:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   124c0:	6838      	ldr	r0, [r7, #0]
   124c2:	f04f 0100 	mov.w	r1, #0
   124c6:	f2c4 6116 	movt	r1, #17942	; 0x4616
   124ca:	f005 ff8d 	bl	183e8 <__aeabi_fmul>
   124ce:	4603      	mov	r3, r0
   124d0:	4618      	mov	r0, r3
   124d2:	f04f 0100 	mov.w	r1, #0
   124d6:	f006 f925 	bl	18724 <__aeabi_fcmplt>
   124da:	4603      	mov	r3, r0
   124dc:	2b00      	cmp	r3, #0
   124de:	d001      	beq.n	124e4 <climb_pid_run+0x30c>
   124e0:	2200      	movs	r2, #0
   124e2:	e022      	b.n	1252a <climb_pid_run+0x352>
   124e4:	6838      	ldr	r0, [r7, #0]
   124e6:	f04f 0100 	mov.w	r1, #0
   124ea:	f2c4 6116 	movt	r1, #17942	; 0x4616
   124ee:	f005 ff7b 	bl	183e8 <__aeabi_fmul>
   124f2:	4603      	mov	r3, r0
   124f4:	4618      	mov	r0, r3
   124f6:	f04f 0100 	mov.w	r1, #0
   124fa:	f2c4 6116 	movt	r1, #17942	; 0x4616
   124fe:	f006 f92f 	bl	18760 <__aeabi_fcmpgt>
   12502:	4603      	mov	r3, r0
   12504:	2b00      	cmp	r3, #0
   12506:	d002      	beq.n	1250e <climb_pid_run+0x336>
   12508:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1250c:	e00c      	b.n	12528 <climb_pid_run+0x350>
   1250e:	6838      	ldr	r0, [r7, #0]
   12510:	f04f 0100 	mov.w	r1, #0
   12514:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12518:	f005 ff66 	bl	183e8 <__aeabi_fmul>
   1251c:	4603      	mov	r3, r0
   1251e:	4618      	mov	r0, r3
   12520:	f006 f928 	bl	18774 <__aeabi_f2iz>
   12524:	4603      	mov	r3, r0
   12526:	b29b      	uxth	r3, r3
   12528:	b29a      	uxth	r2, r3
   1252a:	f24c 634c 	movw	r3, #50764	; 0xc64c
   1252e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12532:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   12534:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12538:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1253c:	681a      	ldr	r2, [r3, #0]
   1253e:	f24c 6358 	movw	r3, #50776	; 0xc658
   12542:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12546:	681b      	ldr	r3, [r3, #0]
   12548:	4610      	mov	r0, r2
   1254a:	4619      	mov	r1, r3
   1254c:	f005 fe44 	bl	181d8 <__addsf3>
   12550:	4603      	mov	r3, r0
   12552:	461a      	mov	r2, r3
   12554:	f24c 6348 	movw	r3, #50760	; 0xc648
   12558:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1255c:	601a      	str	r2, [r3, #0]
  }
}
   1255e:	3708      	adds	r7, #8
   12560:	46bd      	mov	sp, r7
   12562:	bdb0      	pop	{r4, r5, r7, pc}
   12564:	f3af 8000 	nop.w
   12568:	3d70a3d7 	.word	0x3d70a3d7
   1256c:	3fd3d70a 	.word	0x3fd3d70a
   12570:	9999999a 	.word	0x9999999a
   12574:	3fc99999 	.word	0x3fc99999

00012578 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   12578:	b580      	push	{r7, lr}
   1257a:	b082      	sub	sp, #8
   1257c:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   1257e:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   12582:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12586:	681a      	ldr	r2, [r3, #0]
   12588:	f240 5374 	movw	r3, #1396	; 0x574
   1258c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12590:	681b      	ldr	r3, [r3, #0]
   12592:	4610      	mov	r0, r2
   12594:	4619      	mov	r1, r3
   12596:	f005 fe1d 	bl	181d4 <__aeabi_fsub>
   1259a:	4603      	mov	r3, r0
   1259c:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   1259e:	f240 5370 	movw	r3, #1392	; 0x570
   125a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125a6:	681b      	ldr	r3, [r3, #0]
   125a8:	4618      	mov	r0, r3
   125aa:	6879      	ldr	r1, [r7, #4]
   125ac:	f005 ff1c 	bl	183e8 <__aeabi_fmul>
   125b0:	4603      	mov	r3, r0
   125b2:	461a      	mov	r2, r3
   125b4:	f24c 6364 	movw	r3, #50788	; 0xc664
   125b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125bc:	681b      	ldr	r3, [r3, #0]
   125be:	4610      	mov	r0, r2
   125c0:	4619      	mov	r1, r3
   125c2:	f005 fe09 	bl	181d8 <__addsf3>
   125c6:	4603      	mov	r3, r0
   125c8:	461a      	mov	r2, r3
   125ca:	f24c 6360 	movw	r3, #50784	; 0xc660
   125ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125d2:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   125d4:	f24c 6360 	movw	r3, #50784	; 0xc660
   125d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125dc:	681b      	ldr	r3, [r3, #0]
   125de:	4618      	mov	r0, r3
   125e0:	f04f 0100 	mov.w	r1, #0
   125e4:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   125e8:	f006 f89c 	bl	18724 <__aeabi_fcmplt>
   125ec:	4603      	mov	r3, r0
   125ee:	2b00      	cmp	r3, #0
   125f0:	d008      	beq.n	12604 <altitude_pid_run+0x8c>
   125f2:	f24c 6360 	movw	r3, #50784	; 0xc660
   125f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125fa:	f04f 0200 	mov.w	r2, #0
   125fe:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   12602:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   12604:	f24c 6360 	movw	r3, #50784	; 0xc660
   12608:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1260c:	681b      	ldr	r3, [r3, #0]
   1260e:	4618      	mov	r0, r3
   12610:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   12614:	f006 f8a4 	bl	18760 <__aeabi_fcmpgt>
   12618:	4603      	mov	r3, r0
   1261a:	2b00      	cmp	r3, #0
   1261c:	d006      	beq.n	1262c <altitude_pid_run+0xb4>
   1261e:	f24c 6360 	movw	r3, #50784	; 0xc660
   12622:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12626:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   1262a:	601a      	str	r2, [r3, #0]
}
   1262c:	3708      	adds	r7, #8
   1262e:	46bd      	mov	sp, r7
   12630:	bd80      	pop	{r7, pc}
   12632:	bf00      	nop
   12634:	f3af 8000 	nop.w

00012638 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   12638:	b5f0      	push	{r4, r5, r6, r7, lr}
   1263a:	b08b      	sub	sp, #44	; 0x2c
   1263c:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   1263e:	f24c 6371 	movw	r3, #50801	; 0xc671
   12642:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12646:	781b      	ldrb	r3, [r3, #0]
   12648:	2b00      	cmp	r3, #0
   1264a:	f040 8169 	bne.w	12920 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   1264e:	f24c 6370 	movw	r3, #50800	; 0xc670
   12652:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12656:	781b      	ldrb	r3, [r3, #0]
   12658:	2b00      	cmp	r3, #0
   1265a:	d13c      	bne.n	126d6 <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   1265c:	f24c 6370 	movw	r3, #50800	; 0xc670
   12660:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12664:	2200      	movs	r2, #0
   12666:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   12668:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   1266c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12670:	881b      	ldrh	r3, [r3, #0]
   12672:	2b00      	cmp	r3, #0
   12674:	d000      	beq.n	12678 <auto_nav+0x40>
   12676:	e03d      	b.n	126f4 <auto_nav+0xbc>
	else NextStage(); 
   12678:	f24c 6370 	movw	r3, #50800	; 0xc670
   1267c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12680:	781b      	ldrb	r3, [r3, #0]
   12682:	3301      	adds	r3, #1
   12684:	b2da      	uxtb	r2, r3
   12686:	f24c 6370 	movw	r3, #50800	; 0xc670
   1268a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1268e:	701a      	strb	r2, [r3, #0]
   12690:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12694:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12698:	681a      	ldr	r2, [r3, #0]
   1269a:	f24c 6374 	movw	r3, #50804	; 0xc674
   1269e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126a2:	601a      	str	r2, [r3, #0]
   126a4:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   126a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126ac:	681a      	ldr	r2, [r3, #0]
   126ae:	f24c 6378 	movw	r3, #50808	; 0xc678
   126b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126b6:	601a      	str	r2, [r3, #0]
   126b8:	f24c 6384 	movw	r3, #50820	; 0xc684
   126bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126c0:	2200      	movs	r2, #0
   126c2:	801a      	strh	r2, [r3, #0]
   126c4:	f24c 6388 	movw	r3, #50824	; 0xc688
   126c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126cc:	f04f 0200 	mov.w	r2, #0
   126d0:	601a      	str	r2, [r3, #0]
   126d2:	f002 b883 	b.w	147dc <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   126d6:	f24c 6370 	movw	r3, #50800	; 0xc670
   126da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126de:	781b      	ldrb	r3, [r3, #0]
   126e0:	2b01      	cmp	r3, #1
   126e2:	d100      	bne.n	126e6 <auto_nav+0xae>
    {   Goto(while_1)}
   126e4:	e7ba      	b.n	1265c <auto_nav+0x24>
    else if (nav_stage == 2)
   126e6:	f24c 6370 	movw	r3, #50800	; 0xc670
   126ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126ee:	781b      	ldrb	r3, [r3, #0]
   126f0:	2b02      	cmp	r3, #2
   126f2:	d162      	bne.n	127ba <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   126f4:	f24c 6370 	movw	r3, #50800	; 0xc670
   126f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126fc:	2202      	movs	r2, #2
   126fe:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   12700:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   12704:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12708:	881b      	ldrh	r3, [r3, #0]
   1270a:	2b08      	cmp	r3, #8
   1270c:	d92e      	bls.n	1276c <auto_nav+0x134>
   1270e:	f24c 6370 	movw	r3, #50800	; 0xc670
   12712:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12716:	781b      	ldrb	r3, [r3, #0]
   12718:	3301      	adds	r3, #1
   1271a:	b2da      	uxtb	r2, r3
   1271c:	f24c 6370 	movw	r3, #50800	; 0xc670
   12720:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12724:	701a      	strb	r2, [r3, #0]
   12726:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1272a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1272e:	681a      	ldr	r2, [r3, #0]
   12730:	f24c 6374 	movw	r3, #50804	; 0xc674
   12734:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12738:	601a      	str	r2, [r3, #0]
   1273a:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1273e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12742:	681a      	ldr	r2, [r3, #0]
   12744:	f24c 6378 	movw	r3, #50808	; 0xc678
   12748:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1274c:	601a      	str	r2, [r3, #0]
   1274e:	f24c 6384 	movw	r3, #50820	; 0xc684
   12752:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12756:	2200      	movs	r2, #0
   12758:	801a      	strh	r2, [r3, #0]
   1275a:	f24c 6388 	movw	r3, #50824	; 0xc688
   1275e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12762:	f04f 0200 	mov.w	r2, #0
   12766:	601a      	str	r2, [r3, #0]
   12768:	f002 b838 	b.w	147dc <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   1276c:	f24c 635c 	movw	r3, #50780	; 0xc65c
   12770:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12774:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12778:	f2c4 0296 	movt	r2, #16534	; 0x4096
   1277c:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   1277e:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12782:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12786:	2200      	movs	r2, #0
   12788:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   1278a:	f24c 639c 	movw	r3, #50844	; 0xc69c
   1278e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12792:	f649 129a 	movw	r2, #39322	; 0x999a
   12796:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   1279a:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   1279c:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   127a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127a4:	2201      	movs	r2, #1
   127a6:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   127a8:	f24c 6398 	movw	r3, #50840	; 0xc698
   127ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127b0:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   127b4:	801a      	strh	r2, [r3, #0]
        }
        return;
   127b6:	f002 b811 	b.w	147dc <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   127ba:	f24c 6370 	movw	r3, #50800	; 0xc670
   127be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127c2:	781b      	ldrb	r3, [r3, #0]
   127c4:	2b03      	cmp	r3, #3
   127c6:	d168      	bne.n	1289a <auto_nav+0x262>
     {
	nav_stage = 3;	
   127c8:	f24c 6370 	movw	r3, #50800	; 0xc670
   127cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127d0:	2203      	movs	r2, #3
   127d2:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   127d4:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   127d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127dc:	681b      	ldr	r3, [r3, #0]
   127de:	4618      	mov	r0, r3
   127e0:	f04f 0100 	mov.w	r1, #0
   127e4:	f2c4 3116 	movt	r1, #17174	; 0x4316
   127e8:	f005 ffba 	bl	18760 <__aeabi_fcmpgt>
   127ec:	4603      	mov	r3, r0
   127ee:	2b00      	cmp	r3, #0
   127f0:	d02e      	beq.n	12850 <auto_nav+0x218>
   127f2:	f24c 6370 	movw	r3, #50800	; 0xc670
   127f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127fa:	781b      	ldrb	r3, [r3, #0]
   127fc:	3301      	adds	r3, #1
   127fe:	b2da      	uxtb	r2, r3
   12800:	f24c 6370 	movw	r3, #50800	; 0xc670
   12804:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12808:	701a      	strb	r2, [r3, #0]
   1280a:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1280e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12812:	681a      	ldr	r2, [r3, #0]
   12814:	f24c 6374 	movw	r3, #50804	; 0xc674
   12818:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1281c:	601a      	str	r2, [r3, #0]
   1281e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12822:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12826:	681a      	ldr	r2, [r3, #0]
   12828:	f24c 6378 	movw	r3, #50808	; 0xc678
   1282c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12830:	601a      	str	r2, [r3, #0]
   12832:	f24c 6384 	movw	r3, #50820	; 0xc684
   12836:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1283a:	2200      	movs	r2, #0
   1283c:	801a      	strh	r2, [r3, #0]
   1283e:	f24c 6388 	movw	r3, #50824	; 0xc688
   12842:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12846:	f04f 0200 	mov.w	r2, #0
   1284a:	601a      	str	r2, [r3, #0]
   1284c:	f001 bfc6 	b.w	147dc <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12850:	f24c 635c 	movw	r3, #50780	; 0xc65c
   12854:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12858:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   1285c:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12860:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   12862:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12866:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1286a:	2200      	movs	r2, #0
   1286c:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   1286e:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12872:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12876:	f04f 0200 	mov.w	r2, #0
   1287a:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   1287c:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12880:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12884:	2202      	movs	r2, #2
   12886:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   12888:	f24c 6360 	movw	r3, #50784	; 0xc660
   1288c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12890:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12894:	601a      	str	r2, [r3, #0]
        }
        return;
   12896:	f001 bfa1 	b.w	147dc <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   1289a:	f24c 6370 	movw	r3, #50800	; 0xc670
   1289e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128a2:	781b      	ldrb	r3, [r3, #0]
   128a4:	2b04      	cmp	r3, #4
   128a6:	f041 8799 	bne.w	147dc <auto_nav+0x21a4>
        NextBlock()
   128aa:	f24c 6371 	movw	r3, #50801	; 0xc671
   128ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128b2:	781b      	ldrb	r3, [r3, #0]
   128b4:	3301      	adds	r3, #1
   128b6:	b2da      	uxtb	r2, r3
   128b8:	f24c 6371 	movw	r3, #50801	; 0xc671
   128bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128c0:	701a      	strb	r2, [r3, #0]
   128c2:	f24c 6370 	movw	r3, #50800	; 0xc670
   128c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128ca:	2200      	movs	r2, #0
   128cc:	701a      	strb	r2, [r3, #0]
   128ce:	f24c 6386 	movw	r3, #50822	; 0xc686
   128d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128d6:	2200      	movs	r2, #0
   128d8:	801a      	strh	r2, [r3, #0]
   128da:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   128de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128e2:	681a      	ldr	r2, [r3, #0]
   128e4:	f24c 6374 	movw	r3, #50804	; 0xc674
   128e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128ec:	601a      	str	r2, [r3, #0]
   128ee:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   128f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128f6:	681a      	ldr	r2, [r3, #0]
   128f8:	f24c 6378 	movw	r3, #50808	; 0xc678
   128fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12900:	601a      	str	r2, [r3, #0]
   12902:	f24c 6384 	movw	r3, #50820	; 0xc684
   12906:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1290a:	2200      	movs	r2, #0
   1290c:	801a      	strh	r2, [r3, #0]
   1290e:	f24c 6388 	movw	r3, #50824	; 0xc688
   12912:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12916:	f04f 0200 	mov.w	r2, #0
   1291a:	601a      	str	r2, [r3, #0]
   1291c:	f001 bf5e 	b.w	147dc <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   12920:	f24c 6371 	movw	r3, #50801	; 0xc671
   12924:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12928:	781b      	ldrb	r3, [r3, #0]
   1292a:	2b01      	cmp	r3, #1
   1292c:	f040 81bc 	bne.w	12ca8 <auto_nav+0x670>
{
    nav_block = 1;
   12930:	f24c 6371 	movw	r3, #50801	; 0xc671
   12934:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12938:	2201      	movs	r2, #1
   1293a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   1293c:	f24c 3300 	movw	r3, #49920	; 0xc300
   12940:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12944:	781b      	ldrb	r3, [r3, #0]
   12946:	2b00      	cmp	r3, #0
   12948:	d007      	beq.n	1295a <auto_nav+0x322>
   1294a:	f24c 3300 	movw	r3, #49920	; 0xc300
   1294e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12952:	2200      	movs	r2, #0
   12954:	701a      	strb	r2, [r3, #0]
   12956:	2301      	movs	r3, #1
   12958:	e000      	b.n	1295c <auto_nav+0x324>
   1295a:	2300      	movs	r3, #0
   1295c:	2b00      	cmp	r3, #0
   1295e:	d034      	beq.n	129ca <auto_nav+0x392>
	{ GotoBlock(2) }
   12960:	f24c 6371 	movw	r3, #50801	; 0xc671
   12964:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12968:	2202      	movs	r2, #2
   1296a:	701a      	strb	r2, [r3, #0]
   1296c:	f24c 6370 	movw	r3, #50800	; 0xc670
   12970:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12974:	2200      	movs	r2, #0
   12976:	701a      	strb	r2, [r3, #0]
   12978:	f24c 6386 	movw	r3, #50822	; 0xc686
   1297c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12980:	2200      	movs	r2, #0
   12982:	801a      	strh	r2, [r3, #0]
   12984:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12988:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1298c:	681a      	ldr	r2, [r3, #0]
   1298e:	f24c 6374 	movw	r3, #50804	; 0xc674
   12992:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12996:	601a      	str	r2, [r3, #0]
   12998:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1299c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129a0:	681a      	ldr	r2, [r3, #0]
   129a2:	f24c 6378 	movw	r3, #50808	; 0xc678
   129a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129aa:	601a      	str	r2, [r3, #0]
   129ac:	f24c 6384 	movw	r3, #50820	; 0xc684
   129b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129b4:	2200      	movs	r2, #0
   129b6:	801a      	strh	r2, [r3, #0]
   129b8:	f24c 6388 	movw	r3, #50824	; 0xc688
   129bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129c0:	f04f 0200 	mov.w	r2, #0
   129c4:	601a      	str	r2, [r3, #0]
   129c6:	f001 bf09 	b.w	147dc <auto_nav+0x21a4>
    if(nav_stage == 0)
   129ca:	f24c 6370 	movw	r3, #50800	; 0xc670
   129ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129d2:	781b      	ldrb	r3, [r3, #0]
   129d4:	2b00      	cmp	r3, #0
   129d6:	d12e      	bne.n	12a36 <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   129d8:	f24c 6370 	movw	r3, #50800	; 0xc670
   129dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129e0:	781b      	ldrb	r3, [r3, #0]
   129e2:	3301      	adds	r3, #1
   129e4:	b2da      	uxtb	r2, r3
   129e6:	f24c 6370 	movw	r3, #50800	; 0xc670
   129ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129ee:	701a      	strb	r2, [r3, #0]
   129f0:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   129f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129f8:	681a      	ldr	r2, [r3, #0]
   129fa:	f24c 6374 	movw	r3, #50804	; 0xc674
   129fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a02:	601a      	str	r2, [r3, #0]
   12a04:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12a08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a0c:	681a      	ldr	r2, [r3, #0]
   12a0e:	f24c 6378 	movw	r3, #50808	; 0xc678
   12a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a16:	601a      	str	r2, [r3, #0]
   12a18:	f24c 6384 	movw	r3, #50820	; 0xc684
   12a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a20:	2200      	movs	r2, #0
   12a22:	801a      	strh	r2, [r3, #0]
   12a24:	f24c 6388 	movw	r3, #50824	; 0xc688
   12a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a2c:	f04f 0200 	mov.w	r2, #0
   12a30:	601a      	str	r2, [r3, #0]
   12a32:	f001 bed3 	b.w	147dc <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   12a36:	f24c 6370 	movw	r3, #50800	; 0xc670
   12a3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a3e:	781b      	ldrb	r3, [r3, #0]
   12a40:	2b01      	cmp	r3, #1
   12a42:	d169      	bne.n	12b18 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   12a44:	f24c 6370 	movw	r3, #50800	; 0xc670
   12a48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a4c:	2201      	movs	r2, #1
   12a4e:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   12a50:	2001      	movs	r0, #1
   12a52:	f001 fed1 	bl	147f8 <approaching>
   12a56:	4603      	mov	r3, r0
   12a58:	2b00      	cmp	r3, #0
   12a5a:	d034      	beq.n	12ac6 <auto_nav+0x48e>
   12a5c:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a64:	2201      	movs	r2, #1
   12a66:	701a      	strb	r2, [r3, #0]
   12a68:	f24c 6370 	movw	r3, #50800	; 0xc670
   12a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a70:	781b      	ldrb	r3, [r3, #0]
   12a72:	3301      	adds	r3, #1
   12a74:	b2da      	uxtb	r2, r3
   12a76:	f24c 6370 	movw	r3, #50800	; 0xc670
   12a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a7e:	701a      	strb	r2, [r3, #0]
   12a80:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a88:	681a      	ldr	r2, [r3, #0]
   12a8a:	f24c 6374 	movw	r3, #50804	; 0xc674
   12a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a92:	601a      	str	r2, [r3, #0]
   12a94:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a9c:	681a      	ldr	r2, [r3, #0]
   12a9e:	f24c 6378 	movw	r3, #50808	; 0xc678
   12aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aa6:	601a      	str	r2, [r3, #0]
   12aa8:	f24c 6384 	movw	r3, #50820	; 0xc684
   12aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ab0:	2200      	movs	r2, #0
   12ab2:	801a      	strh	r2, [r3, #0]
   12ab4:	f24c 6388 	movw	r3, #50824	; 0xc688
   12ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12abc:	f04f 0200 	mov.w	r2, #0
   12ac0:	601a      	str	r2, [r3, #0]
   12ac2:	f001 be8b 	b.w	147dc <auto_nav+0x21a4>
            fly_to(1);
   12ac6:	2001      	movs	r0, #1
   12ac8:	f001 ffca 	bl	14a60 <fly_to>
            auto_pitch = FALSE;
   12acc:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12ad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ad4:	2200      	movs	r2, #0
   12ad6:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12ad8:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12adc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ae0:	f04f 0200 	mov.w	r2, #0
   12ae4:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12ae6:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12aea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aee:	2203      	movs	r2, #3
   12af0:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12af2:	f240 5378 	movw	r3, #1400	; 0x578
   12af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12afa:	695a      	ldr	r2, [r3, #20]
   12afc:	f240 5374 	movw	r3, #1396	; 0x574
   12b00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b04:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12b06:	f24c 6364 	movw	r3, #50788	; 0xc664
   12b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b0e:	f04f 0200 	mov.w	r2, #0
   12b12:	601a      	str	r2, [r3, #0]
          }
          return;
   12b14:	f001 be62 	b.w	147dc <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12b18:	f24c 6370 	movw	r3, #50800	; 0xc670
   12b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b20:	781b      	ldrb	r3, [r3, #0]
   12b22:	2b02      	cmp	r3, #2
   12b24:	d169      	bne.n	12bfa <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   12b26:	f24c 6370 	movw	r3, #50800	; 0xc670
   12b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b2e:	2202      	movs	r2, #2
   12b30:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12b32:	2004      	movs	r0, #4
   12b34:	f001 fe60 	bl	147f8 <approaching>
   12b38:	4603      	mov	r3, r0
   12b3a:	2b00      	cmp	r3, #0
   12b3c:	d034      	beq.n	12ba8 <auto_nav+0x570>
   12b3e:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b46:	2204      	movs	r2, #4
   12b48:	701a      	strb	r2, [r3, #0]
   12b4a:	f24c 6370 	movw	r3, #50800	; 0xc670
   12b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b52:	781b      	ldrb	r3, [r3, #0]
   12b54:	3301      	adds	r3, #1
   12b56:	b2da      	uxtb	r2, r3
   12b58:	f24c 6370 	movw	r3, #50800	; 0xc670
   12b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b60:	701a      	strb	r2, [r3, #0]
   12b62:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b6a:	681a      	ldr	r2, [r3, #0]
   12b6c:	f24c 6374 	movw	r3, #50804	; 0xc674
   12b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b74:	601a      	str	r2, [r3, #0]
   12b76:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b7e:	681a      	ldr	r2, [r3, #0]
   12b80:	f24c 6378 	movw	r3, #50808	; 0xc678
   12b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b88:	601a      	str	r2, [r3, #0]
   12b8a:	f24c 6384 	movw	r3, #50820	; 0xc684
   12b8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b92:	2200      	movs	r2, #0
   12b94:	801a      	strh	r2, [r3, #0]
   12b96:	f24c 6388 	movw	r3, #50824	; 0xc688
   12b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b9e:	f04f 0200 	mov.w	r2, #0
   12ba2:	601a      	str	r2, [r3, #0]
   12ba4:	f001 be1a 	b.w	147dc <auto_nav+0x21a4>
            fly_to(4);
   12ba8:	2004      	movs	r0, #4
   12baa:	f001 ff59 	bl	14a60 <fly_to>
            auto_pitch = FALSE;
   12bae:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bb6:	2200      	movs	r2, #0
   12bb8:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12bba:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12bbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bc2:	f04f 0200 	mov.w	r2, #0
   12bc6:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12bc8:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bd0:	2203      	movs	r2, #3
   12bd2:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12bd4:	f240 5378 	movw	r3, #1400	; 0x578
   12bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12bde:	f240 5374 	movw	r3, #1396	; 0x574
   12be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12be6:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12be8:	f24c 6364 	movw	r3, #50788	; 0xc664
   12bec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bf0:	f04f 0200 	mov.w	r2, #0
   12bf4:	601a      	str	r2, [r3, #0]
          }
          return;
   12bf6:	f001 bdf1 	b.w	147dc <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12bfa:	f24c 6370 	movw	r3, #50800	; 0xc670
   12bfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c02:	781b      	ldrb	r3, [r3, #0]
   12c04:	2b03      	cmp	r3, #3
   12c06:	d106      	bne.n	12c16 <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12c08:	f24c 6370 	movw	r3, #50800	; 0xc670
   12c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c10:	2203      	movs	r2, #3
   12c12:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   12c14:	e6e0      	b.n	129d8 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   12c16:	f24c 6370 	movw	r3, #50800	; 0xc670
   12c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c1e:	781b      	ldrb	r3, [r3, #0]
   12c20:	2b04      	cmp	r3, #4
   12c22:	f041 85db 	bne.w	147dc <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   12c26:	f24c 6370 	movw	r3, #50800	; 0xc670
   12c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c2e:	2204      	movs	r2, #4
   12c30:	701a      	strb	r2, [r3, #0]
        NextBlock()
   12c32:	f24c 6371 	movw	r3, #50801	; 0xc671
   12c36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c3a:	781b      	ldrb	r3, [r3, #0]
   12c3c:	3301      	adds	r3, #1
   12c3e:	b2da      	uxtb	r2, r3
   12c40:	f24c 6371 	movw	r3, #50801	; 0xc671
   12c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c48:	701a      	strb	r2, [r3, #0]
   12c4a:	f24c 6370 	movw	r3, #50800	; 0xc670
   12c4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c52:	2200      	movs	r2, #0
   12c54:	701a      	strb	r2, [r3, #0]
   12c56:	f24c 6386 	movw	r3, #50822	; 0xc686
   12c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c5e:	2200      	movs	r2, #0
   12c60:	801a      	strh	r2, [r3, #0]
   12c62:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12c66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c6a:	681a      	ldr	r2, [r3, #0]
   12c6c:	f24c 6374 	movw	r3, #50804	; 0xc674
   12c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c74:	601a      	str	r2, [r3, #0]
   12c76:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c7e:	681a      	ldr	r2, [r3, #0]
   12c80:	f24c 6378 	movw	r3, #50808	; 0xc678
   12c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c88:	601a      	str	r2, [r3, #0]
   12c8a:	f24c 6384 	movw	r3, #50820	; 0xc684
   12c8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c92:	2200      	movs	r2, #0
   12c94:	801a      	strh	r2, [r3, #0]
   12c96:	f24c 6388 	movw	r3, #50824	; 0xc688
   12c9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c9e:	f04f 0200 	mov.w	r2, #0
   12ca2:	601a      	str	r2, [r3, #0]
   12ca4:	f001 bd9a 	b.w	147dc <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   12ca8:	f24c 6371 	movw	r3, #50801	; 0xc671
   12cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cb0:	781b      	ldrb	r3, [r3, #0]
   12cb2:	2b02      	cmp	r3, #2
   12cb4:	f040 8392 	bne.w	133dc <auto_nav+0xda4>
{
	nav_block = 2;
   12cb8:	f24c 6371 	movw	r3, #50801	; 0xc671
   12cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cc0:	2202      	movs	r2, #2
   12cc2:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   12cc4:	f24c 3300 	movw	r3, #49920	; 0xc300
   12cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ccc:	781b      	ldrb	r3, [r3, #0]
   12cce:	2b00      	cmp	r3, #0
   12cd0:	d007      	beq.n	12ce2 <auto_nav+0x6aa>
   12cd2:	f24c 3300 	movw	r3, #49920	; 0xc300
   12cd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cda:	2200      	movs	r2, #0
   12cdc:	701a      	strb	r2, [r3, #0]
   12cde:	2301      	movs	r3, #1
   12ce0:	e000      	b.n	12ce4 <auto_nav+0x6ac>
   12ce2:	2300      	movs	r3, #0
   12ce4:	2b00      	cmp	r3, #0
   12ce6:	d034      	beq.n	12d52 <auto_nav+0x71a>
   12ce8:	f24c 6371 	movw	r3, #50801	; 0xc671
   12cec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cf0:	2203      	movs	r2, #3
   12cf2:	701a      	strb	r2, [r3, #0]
   12cf4:	f24c 6370 	movw	r3, #50800	; 0xc670
   12cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cfc:	2200      	movs	r2, #0
   12cfe:	701a      	strb	r2, [r3, #0]
   12d00:	f24c 6386 	movw	r3, #50822	; 0xc686
   12d04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d08:	2200      	movs	r2, #0
   12d0a:	801a      	strh	r2, [r3, #0]
   12d0c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d14:	681a      	ldr	r2, [r3, #0]
   12d16:	f24c 6374 	movw	r3, #50804	; 0xc674
   12d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d1e:	601a      	str	r2, [r3, #0]
   12d20:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d28:	681a      	ldr	r2, [r3, #0]
   12d2a:	f24c 6378 	movw	r3, #50808	; 0xc678
   12d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d32:	601a      	str	r2, [r3, #0]
   12d34:	f24c 6384 	movw	r3, #50820	; 0xc684
   12d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d3c:	2200      	movs	r2, #0
   12d3e:	801a      	strh	r2, [r3, #0]
   12d40:	f24c 6388 	movw	r3, #50824	; 0xc688
   12d44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d48:	f04f 0200 	mov.w	r2, #0
   12d4c:	601a      	str	r2, [r3, #0]
   12d4e:	f001 bd45 	b.w	147dc <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   12d52:	f24c 6370 	movw	r3, #50800	; 0xc670
   12d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d5a:	781b      	ldrb	r3, [r3, #0]
   12d5c:	2b00      	cmp	r3, #0
   12d5e:	d134      	bne.n	12dca <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   12d60:	f24c 6370 	movw	r3, #50800	; 0xc670
   12d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d68:	2200      	movs	r2, #0
   12d6a:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   12d6c:	f24c 6370 	movw	r3, #50800	; 0xc670
   12d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d74:	781b      	ldrb	r3, [r3, #0]
   12d76:	3301      	adds	r3, #1
   12d78:	b2da      	uxtb	r2, r3
   12d7a:	f24c 6370 	movw	r3, #50800	; 0xc670
   12d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d82:	701a      	strb	r2, [r3, #0]
   12d84:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d8c:	681a      	ldr	r2, [r3, #0]
   12d8e:	f24c 6374 	movw	r3, #50804	; 0xc674
   12d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d96:	601a      	str	r2, [r3, #0]
   12d98:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12da0:	681a      	ldr	r2, [r3, #0]
   12da2:	f24c 6378 	movw	r3, #50808	; 0xc678
   12da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12daa:	601a      	str	r2, [r3, #0]
   12dac:	f24c 6384 	movw	r3, #50820	; 0xc684
   12db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12db4:	2200      	movs	r2, #0
   12db6:	801a      	strh	r2, [r3, #0]
   12db8:	f24c 6388 	movw	r3, #50824	; 0xc688
   12dbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dc0:	f04f 0200 	mov.w	r2, #0
   12dc4:	601a      	str	r2, [r3, #0]
   12dc6:	f001 bd09 	b.w	147dc <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   12dca:	f24c 6370 	movw	r3, #50800	; 0xc670
   12dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dd2:	781b      	ldrb	r3, [r3, #0]
   12dd4:	2b01      	cmp	r3, #1
   12dd6:	d169      	bne.n	12eac <auto_nav+0x874>
    {
         nav_stage =1;
   12dd8:	f24c 6370 	movw	r3, #50800	; 0xc670
   12ddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12de0:	2201      	movs	r2, #1
   12de2:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   12de4:	2006      	movs	r0, #6
   12de6:	f001 fd07 	bl	147f8 <approaching>
   12dea:	4603      	mov	r3, r0
   12dec:	2b00      	cmp	r3, #0
   12dee:	d034      	beq.n	12e5a <auto_nav+0x822>
   12df0:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12df8:	2206      	movs	r2, #6
   12dfa:	701a      	strb	r2, [r3, #0]
   12dfc:	f24c 6370 	movw	r3, #50800	; 0xc670
   12e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e04:	781b      	ldrb	r3, [r3, #0]
   12e06:	3301      	adds	r3, #1
   12e08:	b2da      	uxtb	r2, r3
   12e0a:	f24c 6370 	movw	r3, #50800	; 0xc670
   12e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e12:	701a      	strb	r2, [r3, #0]
   12e14:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e1c:	681a      	ldr	r2, [r3, #0]
   12e1e:	f24c 6374 	movw	r3, #50804	; 0xc674
   12e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e26:	601a      	str	r2, [r3, #0]
   12e28:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e30:	681a      	ldr	r2, [r3, #0]
   12e32:	f24c 6378 	movw	r3, #50808	; 0xc678
   12e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e3a:	601a      	str	r2, [r3, #0]
   12e3c:	f24c 6384 	movw	r3, #50820	; 0xc684
   12e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e44:	2200      	movs	r2, #0
   12e46:	801a      	strh	r2, [r3, #0]
   12e48:	f24c 6388 	movw	r3, #50824	; 0xc688
   12e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e50:	f04f 0200 	mov.w	r2, #0
   12e54:	601a      	str	r2, [r3, #0]
   12e56:	f001 bcc1 	b.w	147dc <auto_nav+0x21a4>
            fly_to(6);
   12e5a:	2006      	movs	r0, #6
   12e5c:	f001 fe00 	bl	14a60 <fly_to>
            auto_pitch = FALSE;
   12e60:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e68:	2200      	movs	r2, #0
   12e6a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12e6c:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e74:	f04f 0200 	mov.w	r2, #0
   12e78:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12e7a:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e82:	2203      	movs	r2, #3
   12e84:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   12e86:	f240 5378 	movw	r3, #1400	; 0x578
   12e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   12e90:	f240 5374 	movw	r3, #1396	; 0x574
   12e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e98:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12e9a:	f24c 6364 	movw	r3, #50788	; 0xc664
   12e9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ea2:	f04f 0200 	mov.w	r2, #0
   12ea6:	601a      	str	r2, [r3, #0]
          }
          return;
   12ea8:	f001 bc98 	b.w	147dc <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12eac:	f24c 6370 	movw	r3, #50800	; 0xc670
   12eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eb4:	781b      	ldrb	r3, [r3, #0]
   12eb6:	2b02      	cmp	r3, #2
   12eb8:	d169      	bne.n	12f8e <auto_nav+0x956>
     {
         nav_stage =2; 
   12eba:	f24c 6370 	movw	r3, #50800	; 0xc670
   12ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ec2:	2202      	movs	r2, #2
   12ec4:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   12ec6:	2001      	movs	r0, #1
   12ec8:	f001 fc96 	bl	147f8 <approaching>
   12ecc:	4603      	mov	r3, r0
   12ece:	2b00      	cmp	r3, #0
   12ed0:	d034      	beq.n	12f3c <auto_nav+0x904>
   12ed2:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12ed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eda:	2201      	movs	r2, #1
   12edc:	701a      	strb	r2, [r3, #0]
   12ede:	f24c 6370 	movw	r3, #50800	; 0xc670
   12ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ee6:	781b      	ldrb	r3, [r3, #0]
   12ee8:	3301      	adds	r3, #1
   12eea:	b2da      	uxtb	r2, r3
   12eec:	f24c 6370 	movw	r3, #50800	; 0xc670
   12ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ef4:	701a      	strb	r2, [r3, #0]
   12ef6:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12efe:	681a      	ldr	r2, [r3, #0]
   12f00:	f24c 6374 	movw	r3, #50804	; 0xc674
   12f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f08:	601a      	str	r2, [r3, #0]
   12f0a:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f12:	681a      	ldr	r2, [r3, #0]
   12f14:	f24c 6378 	movw	r3, #50808	; 0xc678
   12f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f1c:	601a      	str	r2, [r3, #0]
   12f1e:	f24c 6384 	movw	r3, #50820	; 0xc684
   12f22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f26:	2200      	movs	r2, #0
   12f28:	801a      	strh	r2, [r3, #0]
   12f2a:	f24c 6388 	movw	r3, #50824	; 0xc688
   12f2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f32:	f04f 0200 	mov.w	r2, #0
   12f36:	601a      	str	r2, [r3, #0]
   12f38:	f001 bc50 	b.w	147dc <auto_nav+0x21a4>
            fly_to(1);
   12f3c:	2001      	movs	r0, #1
   12f3e:	f001 fd8f 	bl	14a60 <fly_to>
            auto_pitch = FALSE;
   12f42:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12f46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f4a:	2200      	movs	r2, #0
   12f4c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12f4e:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f56:	f04f 0200 	mov.w	r2, #0
   12f5a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12f5c:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12f60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f64:	2203      	movs	r2, #3
   12f66:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12f68:	f240 5378 	movw	r3, #1400	; 0x578
   12f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f70:	695a      	ldr	r2, [r3, #20]
   12f72:	f240 5374 	movw	r3, #1396	; 0x574
   12f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f7a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12f7c:	f24c 6364 	movw	r3, #50788	; 0xc664
   12f80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f84:	f04f 0200 	mov.w	r2, #0
   12f88:	601a      	str	r2, [r3, #0]
          }
          return;
   12f8a:	f001 bc27 	b.w	147dc <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12f8e:	f24c 6370 	movw	r3, #50800	; 0xc670
   12f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f96:	781b      	ldrb	r3, [r3, #0]
   12f98:	2b03      	cmp	r3, #3
   12f9a:	d16f      	bne.n	1307c <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   12f9c:	f24c 6370 	movw	r3, #50800	; 0xc670
   12fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fa4:	2203      	movs	r2, #3
   12fa6:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   12fa8:	2002      	movs	r0, #2
   12faa:	f001 fc25 	bl	147f8 <approaching>
   12fae:	4603      	mov	r3, r0
   12fb0:	2b00      	cmp	r3, #0
   12fb2:	d034      	beq.n	1301e <auto_nav+0x9e6>
   12fb4:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12fb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fbc:	2202      	movs	r2, #2
   12fbe:	701a      	strb	r2, [r3, #0]
   12fc0:	f24c 6370 	movw	r3, #50800	; 0xc670
   12fc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fc8:	781b      	ldrb	r3, [r3, #0]
   12fca:	3301      	adds	r3, #1
   12fcc:	b2da      	uxtb	r2, r3
   12fce:	f24c 6370 	movw	r3, #50800	; 0xc670
   12fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fd6:	701a      	strb	r2, [r3, #0]
   12fd8:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12fdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fe0:	681a      	ldr	r2, [r3, #0]
   12fe2:	f24c 6374 	movw	r3, #50804	; 0xc674
   12fe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fea:	601a      	str	r2, [r3, #0]
   12fec:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ff4:	681a      	ldr	r2, [r3, #0]
   12ff6:	f24c 6378 	movw	r3, #50808	; 0xc678
   12ffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ffe:	601a      	str	r2, [r3, #0]
   13000:	f24c 6384 	movw	r3, #50820	; 0xc684
   13004:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13008:	2200      	movs	r2, #0
   1300a:	801a      	strh	r2, [r3, #0]
   1300c:	f24c 6388 	movw	r3, #50824	; 0xc688
   13010:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13014:	f04f 0200 	mov.w	r2, #0
   13018:	601a      	str	r2, [r3, #0]
   1301a:	f001 bbdf 	b.w	147dc <auto_nav+0x21a4>
            route_to(last_wp, 2);
   1301e:	f24c 637c 	movw	r3, #50812	; 0xc67c
   13022:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13026:	781b      	ldrb	r3, [r3, #0]
   13028:	4618      	mov	r0, r3
   1302a:	2102      	movs	r1, #2
   1302c:	f001 fd3a 	bl	14aa4 <route_to>
            auto_pitch = FALSE;
   13030:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   13034:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13038:	2200      	movs	r2, #0
   1303a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1303c:	f24c 639c 	movw	r3, #50844	; 0xc69c
   13040:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13044:	f04f 0200 	mov.w	r2, #0
   13048:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1304a:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   1304e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13052:	2203      	movs	r2, #3
   13054:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   13056:	f240 5378 	movw	r3, #1400	; 0x578
   1305a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1305e:	6a1a      	ldr	r2, [r3, #32]
   13060:	f240 5374 	movw	r3, #1396	; 0x574
   13064:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13068:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1306a:	f24c 6364 	movw	r3, #50788	; 0xc664
   1306e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13072:	f04f 0200 	mov.w	r2, #0
   13076:	601a      	str	r2, [r3, #0]
          }
          return;
   13078:	f001 bbb0 	b.w	147dc <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   1307c:	f24c 6370 	movw	r3, #50800	; 0xc670
   13080:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13084:	781b      	ldrb	r3, [r3, #0]
   13086:	2b04      	cmp	r3, #4
   13088:	d169      	bne.n	1315e <auto_nav+0xb26>
       {
          nav_stage = 4;
   1308a:	f24c 6370 	movw	r3, #50800	; 0xc670
   1308e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13092:	2204      	movs	r2, #4
   13094:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   13096:	2003      	movs	r0, #3
   13098:	f001 fbae 	bl	147f8 <approaching>
   1309c:	4603      	mov	r3, r0
   1309e:	2b00      	cmp	r3, #0
   130a0:	d034      	beq.n	1310c <auto_nav+0xad4>
   130a2:	f24c 637c 	movw	r3, #50812	; 0xc67c
   130a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130aa:	2203      	movs	r2, #3
   130ac:	701a      	strb	r2, [r3, #0]
   130ae:	f24c 6370 	movw	r3, #50800	; 0xc670
   130b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130b6:	781b      	ldrb	r3, [r3, #0]
   130b8:	3301      	adds	r3, #1
   130ba:	b2da      	uxtb	r2, r3
   130bc:	f24c 6370 	movw	r3, #50800	; 0xc670
   130c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130c4:	701a      	strb	r2, [r3, #0]
   130c6:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   130ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130ce:	681a      	ldr	r2, [r3, #0]
   130d0:	f24c 6374 	movw	r3, #50804	; 0xc674
   130d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130d8:	601a      	str	r2, [r3, #0]
   130da:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   130de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130e2:	681a      	ldr	r2, [r3, #0]
   130e4:	f24c 6378 	movw	r3, #50808	; 0xc678
   130e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130ec:	601a      	str	r2, [r3, #0]
   130ee:	f24c 6384 	movw	r3, #50820	; 0xc684
   130f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130f6:	2200      	movs	r2, #0
   130f8:	801a      	strh	r2, [r3, #0]
   130fa:	f24c 6388 	movw	r3, #50824	; 0xc688
   130fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13102:	f04f 0200 	mov.w	r2, #0
   13106:	601a      	str	r2, [r3, #0]
   13108:	f001 bb68 	b.w	147dc <auto_nav+0x21a4>
            fly_to(3);
   1310c:	2003      	movs	r0, #3
   1310e:	f001 fca7 	bl	14a60 <fly_to>
            auto_pitch = FALSE;
   13112:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   13116:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1311a:	2200      	movs	r2, #0
   1311c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1311e:	f24c 639c 	movw	r3, #50844	; 0xc69c
   13122:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13126:	f04f 0200 	mov.w	r2, #0
   1312a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1312c:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   13130:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13134:	2203      	movs	r2, #3
   13136:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   13138:	f240 5378 	movw	r3, #1400	; 0x578
   1313c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   13142:	f240 5374 	movw	r3, #1396	; 0x574
   13146:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1314a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1314c:	f24c 6364 	movw	r3, #50788	; 0xc664
   13150:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13154:	f04f 0200 	mov.w	r2, #0
   13158:	601a      	str	r2, [r3, #0]
          }
          return;
   1315a:	f001 bb3f 	b.w	147dc <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   1315e:	f24c 6370 	movw	r3, #50800	; 0xc670
   13162:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13166:	781b      	ldrb	r3, [r3, #0]
   13168:	2b05      	cmp	r3, #5
   1316a:	d169      	bne.n	13240 <auto_nav+0xc08>
       {
          nav_stage =5;
   1316c:	f24c 6370 	movw	r3, #50800	; 0xc670
   13170:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13174:	2205      	movs	r2, #5
   13176:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   13178:	2004      	movs	r0, #4
   1317a:	f001 fb3d 	bl	147f8 <approaching>
   1317e:	4603      	mov	r3, r0
   13180:	2b00      	cmp	r3, #0
   13182:	d034      	beq.n	131ee <auto_nav+0xbb6>
   13184:	f24c 637c 	movw	r3, #50812	; 0xc67c
   13188:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1318c:	2204      	movs	r2, #4
   1318e:	701a      	strb	r2, [r3, #0]
   13190:	f24c 6370 	movw	r3, #50800	; 0xc670
   13194:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13198:	781b      	ldrb	r3, [r3, #0]
   1319a:	3301      	adds	r3, #1
   1319c:	b2da      	uxtb	r2, r3
   1319e:	f24c 6370 	movw	r3, #50800	; 0xc670
   131a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131a6:	701a      	strb	r2, [r3, #0]
   131a8:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   131ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131b0:	681a      	ldr	r2, [r3, #0]
   131b2:	f24c 6374 	movw	r3, #50804	; 0xc674
   131b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131ba:	601a      	str	r2, [r3, #0]
   131bc:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   131c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131c4:	681a      	ldr	r2, [r3, #0]
   131c6:	f24c 6378 	movw	r3, #50808	; 0xc678
   131ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131ce:	601a      	str	r2, [r3, #0]
   131d0:	f24c 6384 	movw	r3, #50820	; 0xc684
   131d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131d8:	2200      	movs	r2, #0
   131da:	801a      	strh	r2, [r3, #0]
   131dc:	f24c 6388 	movw	r3, #50824	; 0xc688
   131e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131e4:	f04f 0200 	mov.w	r2, #0
   131e8:	601a      	str	r2, [r3, #0]
   131ea:	f001 baf7 	b.w	147dc <auto_nav+0x21a4>
            fly_to(4);
   131ee:	2004      	movs	r0, #4
   131f0:	f001 fc36 	bl	14a60 <fly_to>
            auto_pitch = FALSE;
   131f4:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   131f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131fc:	2200      	movs	r2, #0
   131fe:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   13200:	f24c 639c 	movw	r3, #50844	; 0xc69c
   13204:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13208:	f04f 0200 	mov.w	r2, #0
   1320c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1320e:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   13212:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13216:	2203      	movs	r2, #3
   13218:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   1321a:	f240 5378 	movw	r3, #1400	; 0x578
   1321e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   13224:	f240 5374 	movw	r3, #1396	; 0x574
   13228:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1322c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1322e:	f24c 6364 	movw	r3, #50788	; 0xc664
   13232:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13236:	f04f 0200 	mov.w	r2, #0
   1323a:	601a      	str	r2, [r3, #0]
          }
          return;
   1323c:	f001 bace 	b.w	147dc <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   13240:	f24c 6370 	movw	r3, #50800	; 0xc670
   13244:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13248:	781b      	ldrb	r3, [r3, #0]
   1324a:	2b06      	cmp	r3, #6
   1324c:	d16f      	bne.n	1332e <auto_nav+0xcf6>
       {
          nav_stage =6;
   1324e:	f24c 6370 	movw	r3, #50800	; 0xc670
   13252:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13256:	2206      	movs	r2, #6
   13258:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   1325a:	2005      	movs	r0, #5
   1325c:	f001 facc 	bl	147f8 <approaching>
   13260:	4603      	mov	r3, r0
   13262:	2b00      	cmp	r3, #0
   13264:	d034      	beq.n	132d0 <auto_nav+0xc98>
   13266:	f24c 637c 	movw	r3, #50812	; 0xc67c
   1326a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1326e:	2205      	movs	r2, #5
   13270:	701a      	strb	r2, [r3, #0]
   13272:	f24c 6370 	movw	r3, #50800	; 0xc670
   13276:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1327a:	781b      	ldrb	r3, [r3, #0]
   1327c:	3301      	adds	r3, #1
   1327e:	b2da      	uxtb	r2, r3
   13280:	f24c 6370 	movw	r3, #50800	; 0xc670
   13284:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13288:	701a      	strb	r2, [r3, #0]
   1328a:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1328e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13292:	681a      	ldr	r2, [r3, #0]
   13294:	f24c 6374 	movw	r3, #50804	; 0xc674
   13298:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1329c:	601a      	str	r2, [r3, #0]
   1329e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   132a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132a6:	681a      	ldr	r2, [r3, #0]
   132a8:	f24c 6378 	movw	r3, #50808	; 0xc678
   132ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132b0:	601a      	str	r2, [r3, #0]
   132b2:	f24c 6384 	movw	r3, #50820	; 0xc684
   132b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ba:	2200      	movs	r2, #0
   132bc:	801a      	strh	r2, [r3, #0]
   132be:	f24c 6388 	movw	r3, #50824	; 0xc688
   132c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132c6:	f04f 0200 	mov.w	r2, #0
   132ca:	601a      	str	r2, [r3, #0]
   132cc:	f001 ba86 	b.w	147dc <auto_nav+0x21a4>
            route_to(last_wp, 5);
   132d0:	f24c 637c 	movw	r3, #50812	; 0xc67c
   132d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132d8:	781b      	ldrb	r3, [r3, #0]
   132da:	4618      	mov	r0, r3
   132dc:	2105      	movs	r1, #5
   132de:	f001 fbe1 	bl	14aa4 <route_to>
            auto_pitch = FALSE;
   132e2:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   132e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ea:	2200      	movs	r2, #0
   132ec:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   132ee:	f24c 639c 	movw	r3, #50844	; 0xc69c
   132f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132f6:	f04f 0200 	mov.w	r2, #0
   132fa:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   132fc:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   13300:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13304:	2203      	movs	r2, #3
   13306:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   13308:	f240 5378 	movw	r3, #1400	; 0x578
   1330c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   13312:	f240 5374 	movw	r3, #1396	; 0x574
   13316:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1331a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1331c:	f24c 6364 	movw	r3, #50788	; 0xc664
   13320:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13324:	f04f 0200 	mov.w	r2, #0
   13328:	601a      	str	r2, [r3, #0]
          }
          return;
   1332a:	f001 ba57 	b.w	147dc <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   1332e:	f24c 6370 	movw	r3, #50800	; 0xc670
   13332:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13336:	781b      	ldrb	r3, [r3, #0]
   13338:	2b07      	cmp	r3, #7
   1333a:	d106      	bne.n	1334a <auto_nav+0xd12>
       {
	   nav_stage =7;
   1333c:	f24c 6370 	movw	r3, #50800	; 0xc670
   13340:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13344:	2207      	movs	r2, #7
   13346:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   13348:	e50a      	b.n	12d60 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   1334a:	f24c 6370 	movw	r3, #50800	; 0xc670
   1334e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13352:	781b      	ldrb	r3, [r3, #0]
   13354:	2b08      	cmp	r3, #8
   13356:	f041 8241 	bne.w	147dc <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   1335a:	f24c 6370 	movw	r3, #50800	; 0xc670
   1335e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13362:	2208      	movs	r2, #8
   13364:	701a      	strb	r2, [r3, #0]
          NextBlock();
   13366:	f24c 6371 	movw	r3, #50801	; 0xc671
   1336a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1336e:	781b      	ldrb	r3, [r3, #0]
   13370:	3301      	adds	r3, #1
   13372:	b2da      	uxtb	r2, r3
   13374:	f24c 6371 	movw	r3, #50801	; 0xc671
   13378:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1337c:	701a      	strb	r2, [r3, #0]
   1337e:	f24c 6370 	movw	r3, #50800	; 0xc670
   13382:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13386:	2200      	movs	r2, #0
   13388:	701a      	strb	r2, [r3, #0]
   1338a:	f24c 6386 	movw	r3, #50822	; 0xc686
   1338e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13392:	2200      	movs	r2, #0
   13394:	801a      	strh	r2, [r3, #0]
   13396:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1339a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1339e:	681a      	ldr	r2, [r3, #0]
   133a0:	f24c 6374 	movw	r3, #50804	; 0xc674
   133a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133a8:	601a      	str	r2, [r3, #0]
   133aa:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   133ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133b2:	681a      	ldr	r2, [r3, #0]
   133b4:	f24c 6378 	movw	r3, #50808	; 0xc678
   133b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133bc:	601a      	str	r2, [r3, #0]
   133be:	f24c 6384 	movw	r3, #50820	; 0xc684
   133c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133c6:	2200      	movs	r2, #0
   133c8:	801a      	strh	r2, [r3, #0]
   133ca:	f24c 6388 	movw	r3, #50824	; 0xc688
   133ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133d2:	f04f 0200 	mov.w	r2, #0
   133d6:	601a      	str	r2, [r3, #0]
   133d8:	f001 ba00 	b.w	147dc <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   133dc:	f24c 6371 	movw	r3, #50801	; 0xc671
   133e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133e4:	781b      	ldrb	r3, [r3, #0]
   133e6:	2b03      	cmp	r3, #3
   133e8:	f040 8388 	bne.w	13afc <auto_nav+0x14c4>
{
    nav_block = 3;
   133ec:	f24c 6371 	movw	r3, #50801	; 0xc671
   133f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133f4:	2203      	movs	r2, #3
   133f6:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   133f8:	f24c 3300 	movw	r3, #49920	; 0xc300
   133fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13400:	781b      	ldrb	r3, [r3, #0]
   13402:	2b00      	cmp	r3, #0
   13404:	d007      	beq.n	13416 <auto_nav+0xdde>
   13406:	f24c 3300 	movw	r3, #49920	; 0xc300
   1340a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1340e:	2200      	movs	r2, #0
   13410:	701a      	strb	r2, [r3, #0]
   13412:	2301      	movs	r3, #1
   13414:	e000      	b.n	13418 <auto_nav+0xde0>
   13416:	2300      	movs	r3, #0
   13418:	2b00      	cmp	r3, #0
   1341a:	d034      	beq.n	13486 <auto_nav+0xe4e>
   1341c:	f24c 6371 	movw	r3, #50801	; 0xc671
   13420:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13424:	2204      	movs	r2, #4
   13426:	701a      	strb	r2, [r3, #0]
   13428:	f24c 6370 	movw	r3, #50800	; 0xc670
   1342c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13430:	2200      	movs	r2, #0
   13432:	701a      	strb	r2, [r3, #0]
   13434:	f24c 6386 	movw	r3, #50822	; 0xc686
   13438:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1343c:	2200      	movs	r2, #0
   1343e:	801a      	strh	r2, [r3, #0]
   13440:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13444:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13448:	681a      	ldr	r2, [r3, #0]
   1344a:	f24c 6374 	movw	r3, #50804	; 0xc674
   1344e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13452:	601a      	str	r2, [r3, #0]
   13454:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13458:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1345c:	681a      	ldr	r2, [r3, #0]
   1345e:	f24c 6378 	movw	r3, #50808	; 0xc678
   13462:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13466:	601a      	str	r2, [r3, #0]
   13468:	f24c 6384 	movw	r3, #50820	; 0xc684
   1346c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13470:	2200      	movs	r2, #0
   13472:	801a      	strh	r2, [r3, #0]
   13474:	f24c 6388 	movw	r3, #50824	; 0xc688
   13478:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1347c:	f04f 0200 	mov.w	r2, #0
   13480:	601a      	str	r2, [r3, #0]
   13482:	f001 b9ab 	b.w	147dc <auto_nav+0x21a4>
    if(nav_stage == 0)
   13486:	f24c 6370 	movw	r3, #50800	; 0xc670
   1348a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1348e:	781b      	ldrb	r3, [r3, #0]
   13490:	2b00      	cmp	r3, #0
   13492:	f040 82ea 	bne.w	13a6a <auto_nav+0x1432>
    {
        nav_stage = 0;
   13496:	f24c 6370 	movw	r3, #50800	; 0xc670
   1349a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1349e:	2200      	movs	r2, #0
   134a0:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   134a2:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
   134a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134aa:	781b      	ldrb	r3, [r3, #0]
   134ac:	2b02      	cmp	r3, #2
   134ae:	f040 81a5 	bne.w	137fc <auto_nav+0x11c4>
   134b2:	f24c 4320 	movw	r3, #50208	; 0xc420
   134b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134ba:	88db      	ldrh	r3, [r3, #6]
   134bc:	84fb      	strh	r3, [r7, #38]	; 0x26
   134be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   134c2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   134c6:	dc04      	bgt.n	134d2 <auto_nav+0xe9a>
   134c8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   134cc:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   134d0:	da7e      	bge.n	135d0 <auto_nav+0xf98>
   134d2:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   134d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134da:	681b      	ldr	r3, [r3, #0]
   134dc:	4618      	mov	r0, r3
   134de:	f004 faef 	bl	17ac0 <__aeabi_f2d>
   134e2:	4604      	mov	r4, r0
   134e4:	460d      	mov	r5, r1
   134e6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   134ea:	4618      	mov	r0, r3
   134ec:	f004 ff28 	bl	18340 <__aeabi_i2f>
   134f0:	4603      	mov	r3, r0
   134f2:	4618      	mov	r0, r3
   134f4:	f04f 0100 	mov.w	r1, #0
   134f8:	f2c4 6116 	movt	r1, #17942	; 0x4616
   134fc:	f005 f828 	bl	18550 <__aeabi_fdiv>
   13500:	4603      	mov	r3, r0
   13502:	4618      	mov	r0, r3
   13504:	f004 fadc 	bl	17ac0 <__aeabi_f2d>
   13508:	4602      	mov	r2, r0
   1350a:	460b      	mov	r3, r1
   1350c:	4610      	mov	r0, r2
   1350e:	4619      	mov	r1, r3
   13510:	f04f 0200 	mov.w	r2, #0
   13514:	f04f 0300 	mov.w	r3, #0
   13518:	f2cc 0334 	movt	r3, #49204	; 0xc034
   1351c:	f004 fb24 	bl	17b68 <__aeabi_dmul>
   13520:	4602      	mov	r2, r0
   13522:	460b      	mov	r3, r1
   13524:	4610      	mov	r0, r2
   13526:	4619      	mov	r1, r3
   13528:	f04f 0200 	mov.w	r2, #0
   1352c:	f04f 0300 	mov.w	r3, #0
   13530:	f004 f968 	bl	17804 <__adddf3>
   13534:	4602      	mov	r2, r0
   13536:	460b      	mov	r3, r1
   13538:	4620      	mov	r0, r4
   1353a:	4629      	mov	r1, r5
   1353c:	f004 f962 	bl	17804 <__adddf3>
   13540:	4602      	mov	r2, r0
   13542:	460b      	mov	r3, r1
   13544:	4610      	mov	r0, r2
   13546:	4619      	mov	r1, r3
   13548:	f004 fdf0 	bl	1812c <__aeabi_d2f>
   1354c:	4602      	mov	r2, r0
   1354e:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   13552:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13556:	601a      	str	r2, [r3, #0]
   13558:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   1355c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13560:	681b      	ldr	r3, [r3, #0]
   13562:	4618      	mov	r0, r3
   13564:	f04f 0100 	mov.w	r1, #0
   13568:	f2c4 317a 	movt	r1, #17274	; 0x437a
   1356c:	f005 f8e4 	bl	18738 <__aeabi_fcmple>
   13570:	4603      	mov	r3, r0
   13572:	2b00      	cmp	r3, #0
   13574:	d005      	beq.n	13582 <auto_nav+0xf4a>
   13576:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   1357a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1357e:	681a      	ldr	r2, [r3, #0]
   13580:	e003      	b.n	1358a <auto_nav+0xf52>
   13582:	f04f 0200 	mov.w	r2, #0
   13586:	f2c4 327a 	movt	r2, #17274	; 0x437a
   1358a:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   1358e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13592:	601a      	str	r2, [r3, #0]
   13594:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   13598:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1359c:	681b      	ldr	r3, [r3, #0]
   1359e:	4618      	mov	r0, r3
   135a0:	f04f 0100 	mov.w	r1, #0
   135a4:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   135a8:	f005 f8d0 	bl	1874c <__aeabi_fcmpge>
   135ac:	4603      	mov	r3, r0
   135ae:	2b00      	cmp	r3, #0
   135b0:	d005      	beq.n	135be <auto_nav+0xf86>
   135b2:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   135b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135ba:	681a      	ldr	r2, [r3, #0]
   135bc:	e003      	b.n	135c6 <auto_nav+0xf8e>
   135be:	f04f 0200 	mov.w	r2, #0
   135c2:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   135c6:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   135ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135ce:	601a      	str	r2, [r3, #0]
   135d0:	f24c 4320 	movw	r3, #50208	; 0xc420
   135d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135d8:	889b      	ldrh	r3, [r3, #4]
   135da:	84bb      	strh	r3, [r7, #36]	; 0x24
   135dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   135e0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   135e4:	dc04      	bgt.n	135f0 <auto_nav+0xfb8>
   135e6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   135ea:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   135ee:	da7e      	bge.n	136ee <auto_nav+0x10b6>
   135f0:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   135f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135f8:	681b      	ldr	r3, [r3, #0]
   135fa:	4618      	mov	r0, r3
   135fc:	f004 fa60 	bl	17ac0 <__aeabi_f2d>
   13600:	4604      	mov	r4, r0
   13602:	460d      	mov	r5, r1
   13604:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13608:	4618      	mov	r0, r3
   1360a:	f004 fe99 	bl	18340 <__aeabi_i2f>
   1360e:	4603      	mov	r3, r0
   13610:	4618      	mov	r0, r3
   13612:	f04f 0100 	mov.w	r1, #0
   13616:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1361a:	f004 ff99 	bl	18550 <__aeabi_fdiv>
   1361e:	4603      	mov	r3, r0
   13620:	4618      	mov	r0, r3
   13622:	f004 fa4d 	bl	17ac0 <__aeabi_f2d>
   13626:	4602      	mov	r2, r0
   13628:	460b      	mov	r3, r1
   1362a:	4610      	mov	r0, r2
   1362c:	4619      	mov	r1, r3
   1362e:	f04f 0200 	mov.w	r2, #0
   13632:	f04f 0300 	mov.w	r3, #0
   13636:	f2cc 0334 	movt	r3, #49204	; 0xc034
   1363a:	f004 fa95 	bl	17b68 <__aeabi_dmul>
   1363e:	4602      	mov	r2, r0
   13640:	460b      	mov	r3, r1
   13642:	4610      	mov	r0, r2
   13644:	4619      	mov	r1, r3
   13646:	f04f 0200 	mov.w	r2, #0
   1364a:	f04f 0300 	mov.w	r3, #0
   1364e:	f004 f8d9 	bl	17804 <__adddf3>
   13652:	4602      	mov	r2, r0
   13654:	460b      	mov	r3, r1
   13656:	4620      	mov	r0, r4
   13658:	4629      	mov	r1, r5
   1365a:	f004 f8d3 	bl	17804 <__adddf3>
   1365e:	4602      	mov	r2, r0
   13660:	460b      	mov	r3, r1
   13662:	4610      	mov	r0, r2
   13664:	4619      	mov	r1, r3
   13666:	f004 fd61 	bl	1812c <__aeabi_d2f>
   1366a:	4602      	mov	r2, r0
   1366c:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   13670:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13674:	601a      	str	r2, [r3, #0]
   13676:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   1367a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1367e:	681b      	ldr	r3, [r3, #0]
   13680:	4618      	mov	r0, r3
   13682:	f04f 0100 	mov.w	r1, #0
   13686:	f2c4 317a 	movt	r1, #17274	; 0x437a
   1368a:	f005 f855 	bl	18738 <__aeabi_fcmple>
   1368e:	4603      	mov	r3, r0
   13690:	2b00      	cmp	r3, #0
   13692:	d005      	beq.n	136a0 <auto_nav+0x1068>
   13694:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   13698:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1369c:	681a      	ldr	r2, [r3, #0]
   1369e:	e003      	b.n	136a8 <auto_nav+0x1070>
   136a0:	f04f 0200 	mov.w	r2, #0
   136a4:	f2c4 327a 	movt	r2, #17274	; 0x437a
   136a8:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   136ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136b0:	601a      	str	r2, [r3, #0]
   136b2:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   136b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136ba:	681b      	ldr	r3, [r3, #0]
   136bc:	4618      	mov	r0, r3
   136be:	f04f 0100 	mov.w	r1, #0
   136c2:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   136c6:	f005 f841 	bl	1874c <__aeabi_fcmpge>
   136ca:	4603      	mov	r3, r0
   136cc:	2b00      	cmp	r3, #0
   136ce:	d005      	beq.n	136dc <auto_nav+0x10a4>
   136d0:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   136d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136d8:	681a      	ldr	r2, [r3, #0]
   136da:	e003      	b.n	136e4 <auto_nav+0x10ac>
   136dc:	f04f 0200 	mov.w	r2, #0
   136e0:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   136e4:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   136e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136ec:	601a      	str	r2, [r3, #0]
   136ee:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   136f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136f6:	2203      	movs	r2, #3
   136f8:	701a      	strb	r2, [r3, #0]
   136fa:	f24c 4320 	movw	r3, #50208	; 0xc420
   136fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13702:	885b      	ldrh	r3, [r3, #2]
   13704:	847b      	strh	r3, [r7, #34]	; 0x22
   13706:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1370a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   1370e:	dc04      	bgt.n	1371a <auto_nav+0x10e2>
   13710:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13714:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13718:	da70      	bge.n	137fc <auto_nav+0x11c4>
   1371a:	f240 5374 	movw	r3, #1396	; 0x574
   1371e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13722:	681b      	ldr	r3, [r3, #0]
   13724:	4618      	mov	r0, r3
   13726:	f004 f9cb 	bl	17ac0 <__aeabi_f2d>
   1372a:	4604      	mov	r4, r0
   1372c:	460d      	mov	r5, r1
   1372e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13732:	4618      	mov	r0, r3
   13734:	f004 fe04 	bl	18340 <__aeabi_i2f>
   13738:	4603      	mov	r3, r0
   1373a:	4618      	mov	r0, r3
   1373c:	f04f 0100 	mov.w	r1, #0
   13740:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13744:	f004 ff04 	bl	18550 <__aeabi_fdiv>
   13748:	4603      	mov	r3, r0
   1374a:	4618      	mov	r0, r3
   1374c:	f004 f9b8 	bl	17ac0 <__aeabi_f2d>
   13750:	4602      	mov	r2, r0
   13752:	460b      	mov	r3, r1
   13754:	f04f 0000 	mov.w	r0, #0
   13758:	f04f 0100 	mov.w	r1, #0
   1375c:	f004 f850 	bl	17800 <__aeabi_dsub>
   13760:	4602      	mov	r2, r0
   13762:	460b      	mov	r3, r1
   13764:	4620      	mov	r0, r4
   13766:	4629      	mov	r1, r5
   13768:	f004 f84c 	bl	17804 <__adddf3>
   1376c:	4602      	mov	r2, r0
   1376e:	460b      	mov	r3, r1
   13770:	4610      	mov	r0, r2
   13772:	4619      	mov	r1, r3
   13774:	f004 fcda 	bl	1812c <__aeabi_d2f>
   13778:	4602      	mov	r2, r0
   1377a:	f240 5374 	movw	r3, #1396	; 0x574
   1377e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13782:	601a      	str	r2, [r3, #0]
   13784:	f240 5374 	movw	r3, #1396	; 0x574
   13788:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1378c:	681b      	ldr	r3, [r3, #0]
   1378e:	4618      	mov	r0, r3
   13790:	f04f 0100 	mov.w	r1, #0
   13794:	f2c4 312f 	movt	r1, #17199	; 0x432f
   13798:	f004 ffd8 	bl	1874c <__aeabi_fcmpge>
   1379c:	4603      	mov	r3, r0
   1379e:	2b00      	cmp	r3, #0
   137a0:	d005      	beq.n	137ae <auto_nav+0x1176>
   137a2:	f240 5374 	movw	r3, #1396	; 0x574
   137a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137aa:	681a      	ldr	r2, [r3, #0]
   137ac:	e003      	b.n	137b6 <auto_nav+0x117e>
   137ae:	f04f 0200 	mov.w	r2, #0
   137b2:	f2c4 322f 	movt	r2, #17199	; 0x432f
   137b6:	f240 5374 	movw	r3, #1396	; 0x574
   137ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137be:	601a      	str	r2, [r3, #0]
   137c0:	f240 5374 	movw	r3, #1396	; 0x574
   137c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137c8:	681b      	ldr	r3, [r3, #0]
   137ca:	4618      	mov	r0, r3
   137cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   137d0:	f2c4 3189 	movt	r1, #17289	; 0x4389
   137d4:	f004 ffb0 	bl	18738 <__aeabi_fcmple>
   137d8:	4603      	mov	r3, r0
   137da:	2b00      	cmp	r3, #0
   137dc:	d005      	beq.n	137ea <auto_nav+0x11b2>
   137de:	f240 5374 	movw	r3, #1396	; 0x574
   137e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137e6:	681a      	ldr	r2, [r3, #0]
   137e8:	e003      	b.n	137f2 <auto_nav+0x11ba>
   137ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   137ee:	f2c4 3289 	movt	r2, #17289	; 0x4389
   137f2:	f240 5374 	movw	r3, #1396	; 0x574
   137f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137fa:	601a      	str	r2, [r3, #0]
   137fc:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13800:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13804:	681a      	ldr	r2, [r3, #0]
   13806:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   1380a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1380e:	681b      	ldr	r3, [r3, #0]
   13810:	4610      	mov	r0, r2
   13812:	4619      	mov	r1, r3
   13814:	f004 fcde 	bl	181d4 <__aeabi_fsub>
   13818:	4603      	mov	r3, r0
   1381a:	4618      	mov	r0, r3
   1381c:	f004 f950 	bl	17ac0 <__aeabi_f2d>
   13820:	4604      	mov	r4, r0
   13822:	460d      	mov	r5, r1
   13824:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13828:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1382c:	681a      	ldr	r2, [r3, #0]
   1382e:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   13832:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13836:	681b      	ldr	r3, [r3, #0]
   13838:	4610      	mov	r0, r2
   1383a:	4619      	mov	r1, r3
   1383c:	f004 fcca 	bl	181d4 <__aeabi_fsub>
   13840:	4603      	mov	r3, r0
   13842:	4618      	mov	r0, r3
   13844:	f004 f93c 	bl	17ac0 <__aeabi_f2d>
   13848:	4602      	mov	r2, r0
   1384a:	460b      	mov	r3, r1
   1384c:	4620      	mov	r0, r4
   1384e:	4629      	mov	r1, r5
   13850:	f002 fa12 	bl	15c78 <pp_atan2>
   13854:	4602      	mov	r2, r0
   13856:	460b      	mov	r3, r1
   13858:	4610      	mov	r0, r2
   1385a:	4619      	mov	r1, r3
   1385c:	f004 fc66 	bl	1812c <__aeabi_d2f>
   13860:	4603      	mov	r3, r0
   13862:	61fb      	str	r3, [r7, #28]
   13864:	69f8      	ldr	r0, [r7, #28]
   13866:	f004 f92b 	bl	17ac0 <__aeabi_f2d>
   1386a:	4604      	mov	r4, r0
   1386c:	460d      	mov	r5, r1
   1386e:	f64c 1304 	movw	r3, #51460	; 0xc904
   13872:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13876:	681b      	ldr	r3, [r3, #0]
   13878:	4618      	mov	r0, r3
   1387a:	f04f 0100 	mov.w	r1, #0
   1387e:	f2cc 2148 	movt	r1, #49736	; 0xc248
   13882:	f004 fdb1 	bl	183e8 <__aeabi_fmul>
   13886:	4603      	mov	r3, r0
   13888:	4618      	mov	r0, r3
   1388a:	f004 f919 	bl	17ac0 <__aeabi_f2d>
   1388e:	4602      	mov	r2, r0
   13890:	460b      	mov	r3, r1
   13892:	f04f 0000 	mov.w	r0, #0
   13896:	f04f 0100 	mov.w	r1, #0
   1389a:	f2c4 0114 	movt	r1, #16404	; 0x4014
   1389e:	f004 fa8d 	bl	17dbc <__aeabi_ddiv>
   138a2:	4602      	mov	r2, r0
   138a4:	460b      	mov	r3, r1
   138a6:	4620      	mov	r0, r4
   138a8:	4629      	mov	r1, r5
   138aa:	f003 ffab 	bl	17804 <__adddf3>
   138ae:	4602      	mov	r2, r0
   138b0:	460b      	mov	r3, r1
   138b2:	4610      	mov	r0, r2
   138b4:	4619      	mov	r1, r3
   138b6:	f004 fc39 	bl	1812c <__aeabi_d2f>
   138ba:	4603      	mov	r3, r0
   138bc:	61bb      	str	r3, [r7, #24]
   138be:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   138c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138c6:	681b      	ldr	r3, [r3, #0]
   138c8:	4618      	mov	r0, r3
   138ca:	f004 f8f9 	bl	17ac0 <__aeabi_f2d>
   138ce:	4604      	mov	r4, r0
   138d0:	460d      	mov	r5, r1
   138d2:	69b8      	ldr	r0, [r7, #24]
   138d4:	f004 f8f4 	bl	17ac0 <__aeabi_f2d>
   138d8:	4602      	mov	r2, r0
   138da:	460b      	mov	r3, r1
   138dc:	4610      	mov	r0, r2
   138de:	4619      	mov	r1, r3
   138e0:	a3b1      	add	r3, pc, #708	; (adr r3, 13ba8 <auto_nav+0x1570>)
   138e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   138e6:	f003 ff8d 	bl	17804 <__adddf3>
   138ea:	4602      	mov	r2, r0
   138ec:	460b      	mov	r3, r1
   138ee:	4610      	mov	r0, r2
   138f0:	4619      	mov	r1, r3
   138f2:	f002 fa81 	bl	15df8 <pp_sin>
   138f6:	4602      	mov	r2, r0
   138f8:	460b      	mov	r3, r1
   138fa:	4610      	mov	r0, r2
   138fc:	4619      	mov	r1, r3
   138fe:	f04f 0200 	mov.w	r2, #0
   13902:	f04f 0300 	mov.w	r3, #0
   13906:	f2c4 0349 	movt	r3, #16457	; 0x4049
   1390a:	f004 f92d 	bl	17b68 <__aeabi_dmul>
   1390e:	4602      	mov	r2, r0
   13910:	460b      	mov	r3, r1
   13912:	4620      	mov	r0, r4
   13914:	4629      	mov	r1, r5
   13916:	f003 ff75 	bl	17804 <__adddf3>
   1391a:	4602      	mov	r2, r0
   1391c:	460b      	mov	r3, r1
   1391e:	4610      	mov	r0, r2
   13920:	4619      	mov	r1, r3
   13922:	f004 fc03 	bl	1812c <__aeabi_d2f>
   13926:	4606      	mov	r6, r0
   13928:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   1392c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13930:	681b      	ldr	r3, [r3, #0]
   13932:	4618      	mov	r0, r3
   13934:	f004 f8c4 	bl	17ac0 <__aeabi_f2d>
   13938:	4604      	mov	r4, r0
   1393a:	460d      	mov	r5, r1
   1393c:	69b8      	ldr	r0, [r7, #24]
   1393e:	f004 f8bf 	bl	17ac0 <__aeabi_f2d>
   13942:	4602      	mov	r2, r0
   13944:	460b      	mov	r3, r1
   13946:	4610      	mov	r0, r2
   13948:	4619      	mov	r1, r3
   1394a:	f002 fa55 	bl	15df8 <pp_sin>
   1394e:	4602      	mov	r2, r0
   13950:	460b      	mov	r3, r1
   13952:	4610      	mov	r0, r2
   13954:	4619      	mov	r1, r3
   13956:	f04f 0200 	mov.w	r2, #0
   1395a:	f04f 0300 	mov.w	r3, #0
   1395e:	f2c4 0349 	movt	r3, #16457	; 0x4049
   13962:	f004 f901 	bl	17b68 <__aeabi_dmul>
   13966:	4602      	mov	r2, r0
   13968:	460b      	mov	r3, r1
   1396a:	4620      	mov	r0, r4
   1396c:	4629      	mov	r1, r5
   1396e:	f003 ff49 	bl	17804 <__adddf3>
   13972:	4602      	mov	r2, r0
   13974:	460b      	mov	r3, r1
   13976:	4610      	mov	r0, r2
   13978:	4619      	mov	r1, r3
   1397a:	f004 fbd7 	bl	1812c <__aeabi_d2f>
   1397e:	4603      	mov	r3, r0
   13980:	4630      	mov	r0, r6
   13982:	4619      	mov	r1, r3
   13984:	f001 f81c 	bl	149c0 <fly_to_xy>
   13988:	69b8      	ldr	r0, [r7, #24]
   1398a:	f004 f899 	bl	17ac0 <__aeabi_f2d>
   1398e:	4602      	mov	r2, r0
   13990:	460b      	mov	r3, r1
   13992:	a185      	add	r1, pc, #532	; (adr r1, 13ba8 <auto_nav+0x1570>)
   13994:	e9d1 0100 	ldrd	r0, r1, [r1]
   13998:	f003 ff32 	bl	17800 <__aeabi_dsub>
   1399c:	4602      	mov	r2, r0
   1399e:	460b      	mov	r3, r1
   139a0:	4610      	mov	r0, r2
   139a2:	4619      	mov	r1, r3
   139a4:	a382      	add	r3, pc, #520	; (adr r3, 13bb0 <auto_nav+0x1578>)
   139a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   139aa:	f004 fa07 	bl	17dbc <__aeabi_ddiv>
   139ae:	4602      	mov	r2, r0
   139b0:	460b      	mov	r3, r1
   139b2:	4610      	mov	r0, r2
   139b4:	4619      	mov	r1, r3
   139b6:	f04f 0200 	mov.w	r2, #0
   139ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   139be:	f2c4 0366 	movt	r3, #16486	; 0x4066
   139c2:	f004 f8d1 	bl	17b68 <__aeabi_dmul>
   139c6:	4602      	mov	r2, r0
   139c8:	460b      	mov	r3, r1
   139ca:	4610      	mov	r0, r2
   139cc:	4619      	mov	r1, r3
   139ce:	f004 fbad 	bl	1812c <__aeabi_d2f>
   139d2:	4602      	mov	r2, r0
   139d4:	f24c 638c 	movw	r3, #50828	; 0xc68c
   139d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139dc:	601a      	str	r2, [r3, #0]
   139de:	e012      	b.n	13a06 <auto_nav+0x13ce>
   139e0:	f24c 638c 	movw	r3, #50828	; 0xc68c
   139e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139e8:	681b      	ldr	r3, [r3, #0]
   139ea:	4618      	mov	r0, r3
   139ec:	f04f 0100 	mov.w	r1, #0
   139f0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   139f4:	f004 fbf0 	bl	181d8 <__addsf3>
   139f8:	4603      	mov	r3, r0
   139fa:	461a      	mov	r2, r3
   139fc:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a04:	601a      	str	r2, [r3, #0]
   13a06:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a0e:	681b      	ldr	r3, [r3, #0]
   13a10:	4618      	mov	r0, r3
   13a12:	f04f 0100 	mov.w	r1, #0
   13a16:	f004 fe85 	bl	18724 <__aeabi_fcmplt>
   13a1a:	4603      	mov	r3, r0
   13a1c:	2b00      	cmp	r3, #0
   13a1e:	d1df      	bne.n	139e0 <auto_nav+0x13a8>
   13a20:	e012      	b.n	13a48 <auto_nav+0x1410>
   13a22:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13a26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a2a:	681b      	ldr	r3, [r3, #0]
   13a2c:	4618      	mov	r0, r3
   13a2e:	f04f 0100 	mov.w	r1, #0
   13a32:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13a36:	f004 fbcd 	bl	181d4 <__aeabi_fsub>
   13a3a:	4603      	mov	r3, r0
   13a3c:	461a      	mov	r2, r3
   13a3e:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13a42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a46:	601a      	str	r2, [r3, #0]
   13a48:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13a4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a50:	681b      	ldr	r3, [r3, #0]
   13a52:	4618      	mov	r0, r3
   13a54:	f04f 0100 	mov.w	r1, #0
   13a58:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13a5c:	f004 fe76 	bl	1874c <__aeabi_fcmpge>
   13a60:	4603      	mov	r3, r0
   13a62:	2b00      	cmp	r3, #0
   13a64:	d1dd      	bne.n	13a22 <auto_nav+0x13ea>
        return;
   13a66:	f000 beb9 	b.w	147dc <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13a6a:	f24c 6370 	movw	r3, #50800	; 0xc670
   13a6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a72:	781b      	ldrb	r3, [r3, #0]
   13a74:	2b01      	cmp	r3, #1
   13a76:	f040 86b1 	bne.w	147dc <auto_nav+0x21a4>
    {
        nav_stage = 1;
   13a7a:	f24c 6370 	movw	r3, #50800	; 0xc670
   13a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a82:	2201      	movs	r2, #1
   13a84:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13a86:	f24c 6371 	movw	r3, #50801	; 0xc671
   13a8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a8e:	781b      	ldrb	r3, [r3, #0]
   13a90:	3301      	adds	r3, #1
   13a92:	b2da      	uxtb	r2, r3
   13a94:	f24c 6371 	movw	r3, #50801	; 0xc671
   13a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a9c:	701a      	strb	r2, [r3, #0]
   13a9e:	f24c 6370 	movw	r3, #50800	; 0xc670
   13aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13aa6:	2200      	movs	r2, #0
   13aa8:	701a      	strb	r2, [r3, #0]
   13aaa:	f24c 6386 	movw	r3, #50822	; 0xc686
   13aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ab2:	2200      	movs	r2, #0
   13ab4:	801a      	strh	r2, [r3, #0]
   13ab6:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13abe:	681a      	ldr	r2, [r3, #0]
   13ac0:	f24c 6374 	movw	r3, #50804	; 0xc674
   13ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ac8:	601a      	str	r2, [r3, #0]
   13aca:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13ace:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ad2:	681a      	ldr	r2, [r3, #0]
   13ad4:	f24c 6378 	movw	r3, #50808	; 0xc678
   13ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13adc:	601a      	str	r2, [r3, #0]
   13ade:	f24c 6384 	movw	r3, #50820	; 0xc684
   13ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ae6:	2200      	movs	r2, #0
   13ae8:	801a      	strh	r2, [r3, #0]
   13aea:	f24c 6388 	movw	r3, #50824	; 0xc688
   13aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13af2:	f04f 0200 	mov.w	r2, #0
   13af6:	601a      	str	r2, [r3, #0]
   13af8:	f000 be70 	b.w	147dc <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   13afc:	f24c 6371 	movw	r3, #50801	; 0xc671
   13b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b04:	781b      	ldrb	r3, [r3, #0]
   13b06:	2b04      	cmp	r3, #4
   13b08:	f040 8202 	bne.w	13f10 <auto_nav+0x18d8>
{
    nav_block = 4;
   13b0c:	f24c 6371 	movw	r3, #50801	; 0xc671
   13b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b14:	2204      	movs	r2, #4
   13b16:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13b18:	f24c 3300 	movw	r3, #49920	; 0xc300
   13b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b20:	781b      	ldrb	r3, [r3, #0]
   13b22:	2b00      	cmp	r3, #0
   13b24:	d007      	beq.n	13b36 <auto_nav+0x14fe>
   13b26:	f24c 3300 	movw	r3, #49920	; 0xc300
   13b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b2e:	2200      	movs	r2, #0
   13b30:	701a      	strb	r2, [r3, #0]
   13b32:	2301      	movs	r3, #1
   13b34:	e000      	b.n	13b38 <auto_nav+0x1500>
   13b36:	2300      	movs	r3, #0
   13b38:	2b00      	cmp	r3, #0
   13b3a:	d03d      	beq.n	13bb8 <auto_nav+0x1580>
   13b3c:	f24c 6371 	movw	r3, #50801	; 0xc671
   13b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b44:	2205      	movs	r2, #5
   13b46:	701a      	strb	r2, [r3, #0]
   13b48:	f24c 6370 	movw	r3, #50800	; 0xc670
   13b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b50:	2200      	movs	r2, #0
   13b52:	701a      	strb	r2, [r3, #0]
   13b54:	f24c 6386 	movw	r3, #50822	; 0xc686
   13b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b5c:	2200      	movs	r2, #0
   13b5e:	801a      	strh	r2, [r3, #0]
   13b60:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b68:	681a      	ldr	r2, [r3, #0]
   13b6a:	f24c 6374 	movw	r3, #50804	; 0xc674
   13b6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b72:	601a      	str	r2, [r3, #0]
   13b74:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b7c:	681a      	ldr	r2, [r3, #0]
   13b7e:	f24c 6378 	movw	r3, #50808	; 0xc678
   13b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b86:	601a      	str	r2, [r3, #0]
   13b88:	f24c 6384 	movw	r3, #50820	; 0xc684
   13b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b90:	2200      	movs	r2, #0
   13b92:	801a      	strh	r2, [r3, #0]
   13b94:	f24c 6388 	movw	r3, #50824	; 0xc688
   13b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b9c:	f04f 0200 	mov.w	r2, #0
   13ba0:	601a      	str	r2, [r3, #0]
   13ba2:	f000 be1b 	b.w	147dc <auto_nav+0x21a4>
   13ba6:	bf00      	nop
   13ba8:	54442d18 	.word	0x54442d18
   13bac:	3ff921fb 	.word	0x3ff921fb
   13bb0:	54442d18 	.word	0x54442d18
   13bb4:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   13bb8:	f24c 6370 	movw	r3, #50800	; 0xc670
   13bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bc0:	781b      	ldrb	r3, [r3, #0]
   13bc2:	2b00      	cmp	r3, #0
   13bc4:	f040 815b 	bne.w	13e7e <auto_nav+0x1846>
    {
        nav_stage = 0;
   13bc8:	f24c 6370 	movw	r3, #50800	; 0xc670
   13bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bd0:	2200      	movs	r2, #0
   13bd2:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13bd4:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   13bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bdc:	2200      	movs	r2, #0
   13bde:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13be0:	f24c 639c 	movw	r3, #50844	; 0xc69c
   13be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13be8:	f04f 0200 	mov.w	r2, #0
   13bec:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13bee:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   13bf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bf6:	2203      	movs	r2, #3
   13bf8:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   13bfa:	f240 5378 	movw	r3, #1400	; 0x578
   13bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c02:	689a      	ldr	r2, [r3, #8]
   13c04:	f240 5374 	movw	r3, #1396	; 0x574
   13c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c0c:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13c0e:	f24c 6364 	movw	r3, #50788	; 0xc664
   13c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c16:	f04f 0200 	mov.w	r2, #0
   13c1a:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   13c1c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c24:	681a      	ldr	r2, [r3, #0]
   13c26:	f240 5378 	movw	r3, #1400	; 0x578
   13c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c2e:	685b      	ldr	r3, [r3, #4]
   13c30:	4610      	mov	r0, r2
   13c32:	4619      	mov	r1, r3
   13c34:	f004 face 	bl	181d4 <__aeabi_fsub>
   13c38:	4603      	mov	r3, r0
   13c3a:	4618      	mov	r0, r3
   13c3c:	f003 ff40 	bl	17ac0 <__aeabi_f2d>
   13c40:	4604      	mov	r4, r0
   13c42:	460d      	mov	r5, r1
   13c44:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c4c:	681a      	ldr	r2, [r3, #0]
   13c4e:	f240 5378 	movw	r3, #1400	; 0x578
   13c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c56:	681b      	ldr	r3, [r3, #0]
   13c58:	4610      	mov	r0, r2
   13c5a:	4619      	mov	r1, r3
   13c5c:	f004 faba 	bl	181d4 <__aeabi_fsub>
   13c60:	4603      	mov	r3, r0
   13c62:	4618      	mov	r0, r3
   13c64:	f003 ff2c 	bl	17ac0 <__aeabi_f2d>
   13c68:	4602      	mov	r2, r0
   13c6a:	460b      	mov	r3, r1
   13c6c:	4620      	mov	r0, r4
   13c6e:	4629      	mov	r1, r5
   13c70:	f002 f802 	bl	15c78 <pp_atan2>
   13c74:	4602      	mov	r2, r0
   13c76:	460b      	mov	r3, r1
   13c78:	4610      	mov	r0, r2
   13c7a:	4619      	mov	r1, r3
   13c7c:	f004 fa56 	bl	1812c <__aeabi_d2f>
   13c80:	4603      	mov	r3, r0
   13c82:	617b      	str	r3, [r7, #20]
   13c84:	6978      	ldr	r0, [r7, #20]
   13c86:	f003 ff1b 	bl	17ac0 <__aeabi_f2d>
   13c8a:	4604      	mov	r4, r0
   13c8c:	460d      	mov	r5, r1
   13c8e:	f64c 1304 	movw	r3, #51460	; 0xc904
   13c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c96:	681b      	ldr	r3, [r3, #0]
   13c98:	4618      	mov	r0, r3
   13c9a:	f04f 0100 	mov.w	r1, #0
   13c9e:	f2cc 3116 	movt	r1, #49942	; 0xc316
   13ca2:	f004 fba1 	bl	183e8 <__aeabi_fmul>
   13ca6:	4603      	mov	r3, r0
   13ca8:	4618      	mov	r0, r3
   13caa:	f003 ff09 	bl	17ac0 <__aeabi_f2d>
   13cae:	4602      	mov	r2, r0
   13cb0:	460b      	mov	r3, r1
   13cb2:	f04f 0000 	mov.w	r0, #0
   13cb6:	f04f 0100 	mov.w	r1, #0
   13cba:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13cbe:	f004 f87d 	bl	17dbc <__aeabi_ddiv>
   13cc2:	4602      	mov	r2, r0
   13cc4:	460b      	mov	r3, r1
   13cc6:	4620      	mov	r0, r4
   13cc8:	4629      	mov	r1, r5
   13cca:	f003 fd9b 	bl	17804 <__adddf3>
   13cce:	4602      	mov	r2, r0
   13cd0:	460b      	mov	r3, r1
   13cd2:	4610      	mov	r0, r2
   13cd4:	4619      	mov	r1, r3
   13cd6:	f004 fa29 	bl	1812c <__aeabi_d2f>
   13cda:	4603      	mov	r3, r0
   13cdc:	613b      	str	r3, [r7, #16]
   13cde:	f240 5378 	movw	r3, #1400	; 0x578
   13ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ce6:	681b      	ldr	r3, [r3, #0]
   13ce8:	4618      	mov	r0, r3
   13cea:	f003 fee9 	bl	17ac0 <__aeabi_f2d>
   13cee:	4604      	mov	r4, r0
   13cf0:	460d      	mov	r5, r1
   13cf2:	6938      	ldr	r0, [r7, #16]
   13cf4:	f003 fee4 	bl	17ac0 <__aeabi_f2d>
   13cf8:	4602      	mov	r2, r0
   13cfa:	460b      	mov	r3, r1
   13cfc:	4610      	mov	r0, r2
   13cfe:	4619      	mov	r1, r3
   13d00:	a3af      	add	r3, pc, #700	; (adr r3, 13fc0 <auto_nav+0x1988>)
   13d02:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d06:	f003 fd7d 	bl	17804 <__adddf3>
   13d0a:	4602      	mov	r2, r0
   13d0c:	460b      	mov	r3, r1
   13d0e:	4610      	mov	r0, r2
   13d10:	4619      	mov	r1, r3
   13d12:	f002 f871 	bl	15df8 <pp_sin>
   13d16:	4602      	mov	r2, r0
   13d18:	460b      	mov	r3, r1
   13d1a:	4610      	mov	r0, r2
   13d1c:	4619      	mov	r1, r3
   13d1e:	a3aa      	add	r3, pc, #680	; (adr r3, 13fc8 <auto_nav+0x1990>)
   13d20:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d24:	f003 ff20 	bl	17b68 <__aeabi_dmul>
   13d28:	4602      	mov	r2, r0
   13d2a:	460b      	mov	r3, r1
   13d2c:	4620      	mov	r0, r4
   13d2e:	4629      	mov	r1, r5
   13d30:	f003 fd68 	bl	17804 <__adddf3>
   13d34:	4602      	mov	r2, r0
   13d36:	460b      	mov	r3, r1
   13d38:	4610      	mov	r0, r2
   13d3a:	4619      	mov	r1, r3
   13d3c:	f004 f9f6 	bl	1812c <__aeabi_d2f>
   13d40:	4606      	mov	r6, r0
   13d42:	f240 5378 	movw	r3, #1400	; 0x578
   13d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d4a:	685b      	ldr	r3, [r3, #4]
   13d4c:	4618      	mov	r0, r3
   13d4e:	f003 feb7 	bl	17ac0 <__aeabi_f2d>
   13d52:	4604      	mov	r4, r0
   13d54:	460d      	mov	r5, r1
   13d56:	6938      	ldr	r0, [r7, #16]
   13d58:	f003 feb2 	bl	17ac0 <__aeabi_f2d>
   13d5c:	4602      	mov	r2, r0
   13d5e:	460b      	mov	r3, r1
   13d60:	4610      	mov	r0, r2
   13d62:	4619      	mov	r1, r3
   13d64:	f002 f848 	bl	15df8 <pp_sin>
   13d68:	4602      	mov	r2, r0
   13d6a:	460b      	mov	r3, r1
   13d6c:	4610      	mov	r0, r2
   13d6e:	4619      	mov	r1, r3
   13d70:	a395      	add	r3, pc, #596	; (adr r3, 13fc8 <auto_nav+0x1990>)
   13d72:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d76:	f003 fef7 	bl	17b68 <__aeabi_dmul>
   13d7a:	4602      	mov	r2, r0
   13d7c:	460b      	mov	r3, r1
   13d7e:	4620      	mov	r0, r4
   13d80:	4629      	mov	r1, r5
   13d82:	f003 fd3f 	bl	17804 <__adddf3>
   13d86:	4602      	mov	r2, r0
   13d88:	460b      	mov	r3, r1
   13d8a:	4610      	mov	r0, r2
   13d8c:	4619      	mov	r1, r3
   13d8e:	f004 f9cd 	bl	1812c <__aeabi_d2f>
   13d92:	4603      	mov	r3, r0
   13d94:	4630      	mov	r0, r6
   13d96:	4619      	mov	r1, r3
   13d98:	f000 fe12 	bl	149c0 <fly_to_xy>
   13d9c:	6938      	ldr	r0, [r7, #16]
   13d9e:	f003 fe8f 	bl	17ac0 <__aeabi_f2d>
   13da2:	4602      	mov	r2, r0
   13da4:	460b      	mov	r3, r1
   13da6:	a186      	add	r1, pc, #536	; (adr r1, 13fc0 <auto_nav+0x1988>)
   13da8:	e9d1 0100 	ldrd	r0, r1, [r1]
   13dac:	f003 fd28 	bl	17800 <__aeabi_dsub>
   13db0:	4602      	mov	r2, r0
   13db2:	460b      	mov	r3, r1
   13db4:	4610      	mov	r0, r2
   13db6:	4619      	mov	r1, r3
   13db8:	a385      	add	r3, pc, #532	; (adr r3, 13fd0 <auto_nav+0x1998>)
   13dba:	e9d3 2300 	ldrd	r2, r3, [r3]
   13dbe:	f003 fffd 	bl	17dbc <__aeabi_ddiv>
   13dc2:	4602      	mov	r2, r0
   13dc4:	460b      	mov	r3, r1
   13dc6:	4610      	mov	r0, r2
   13dc8:	4619      	mov	r1, r3
   13dca:	f04f 0200 	mov.w	r2, #0
   13dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13dd2:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13dd6:	f003 fec7 	bl	17b68 <__aeabi_dmul>
   13dda:	4602      	mov	r2, r0
   13ddc:	460b      	mov	r3, r1
   13dde:	4610      	mov	r0, r2
   13de0:	4619      	mov	r1, r3
   13de2:	f004 f9a3 	bl	1812c <__aeabi_d2f>
   13de6:	4602      	mov	r2, r0
   13de8:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13df0:	601a      	str	r2, [r3, #0]
   13df2:	e012      	b.n	13e1a <auto_nav+0x17e2>
   13df4:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13df8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dfc:	681b      	ldr	r3, [r3, #0]
   13dfe:	4618      	mov	r0, r3
   13e00:	f04f 0100 	mov.w	r1, #0
   13e04:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13e08:	f004 f9e6 	bl	181d8 <__addsf3>
   13e0c:	4603      	mov	r3, r0
   13e0e:	461a      	mov	r2, r3
   13e10:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13e14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e18:	601a      	str	r2, [r3, #0]
   13e1a:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e22:	681b      	ldr	r3, [r3, #0]
   13e24:	4618      	mov	r0, r3
   13e26:	f04f 0100 	mov.w	r1, #0
   13e2a:	f004 fc7b 	bl	18724 <__aeabi_fcmplt>
   13e2e:	4603      	mov	r3, r0
   13e30:	2b00      	cmp	r3, #0
   13e32:	d1df      	bne.n	13df4 <auto_nav+0x17bc>
   13e34:	e012      	b.n	13e5c <auto_nav+0x1824>
   13e36:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e3e:	681b      	ldr	r3, [r3, #0]
   13e40:	4618      	mov	r0, r3
   13e42:	f04f 0100 	mov.w	r1, #0
   13e46:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13e4a:	f004 f9c3 	bl	181d4 <__aeabi_fsub>
   13e4e:	4603      	mov	r3, r0
   13e50:	461a      	mov	r2, r3
   13e52:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e5a:	601a      	str	r2, [r3, #0]
   13e5c:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e64:	681b      	ldr	r3, [r3, #0]
   13e66:	4618      	mov	r0, r3
   13e68:	f04f 0100 	mov.w	r1, #0
   13e6c:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13e70:	f004 fc6c 	bl	1874c <__aeabi_fcmpge>
   13e74:	4603      	mov	r3, r0
   13e76:	2b00      	cmp	r3, #0
   13e78:	d1dd      	bne.n	13e36 <auto_nav+0x17fe>
        return;
   13e7a:	f000 bcaf 	b.w	147dc <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13e7e:	f24c 6370 	movw	r3, #50800	; 0xc670
   13e82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e86:	781b      	ldrb	r3, [r3, #0]
   13e88:	2b01      	cmp	r3, #1
   13e8a:	f040 84a7 	bne.w	147dc <auto_nav+0x21a4>
    {
        nav_stage =1;
   13e8e:	f24c 6370 	movw	r3, #50800	; 0xc670
   13e92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e96:	2201      	movs	r2, #1
   13e98:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13e9a:	f24c 6371 	movw	r3, #50801	; 0xc671
   13e9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ea2:	781b      	ldrb	r3, [r3, #0]
   13ea4:	3301      	adds	r3, #1
   13ea6:	b2da      	uxtb	r2, r3
   13ea8:	f24c 6371 	movw	r3, #50801	; 0xc671
   13eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eb0:	701a      	strb	r2, [r3, #0]
   13eb2:	f24c 6370 	movw	r3, #50800	; 0xc670
   13eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eba:	2200      	movs	r2, #0
   13ebc:	701a      	strb	r2, [r3, #0]
   13ebe:	f24c 6386 	movw	r3, #50822	; 0xc686
   13ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ec6:	2200      	movs	r2, #0
   13ec8:	801a      	strh	r2, [r3, #0]
   13eca:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ed2:	681a      	ldr	r2, [r3, #0]
   13ed4:	f24c 6374 	movw	r3, #50804	; 0xc674
   13ed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13edc:	601a      	str	r2, [r3, #0]
   13ede:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ee6:	681a      	ldr	r2, [r3, #0]
   13ee8:	f24c 6378 	movw	r3, #50808	; 0xc678
   13eec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ef0:	601a      	str	r2, [r3, #0]
   13ef2:	f24c 6384 	movw	r3, #50820	; 0xc684
   13ef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13efa:	2200      	movs	r2, #0
   13efc:	801a      	strh	r2, [r3, #0]
   13efe:	f24c 6388 	movw	r3, #50824	; 0xc688
   13f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f06:	f04f 0200 	mov.w	r2, #0
   13f0a:	601a      	str	r2, [r3, #0]
   13f0c:	f000 bc66 	b.w	147dc <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13f10:	f24c 6371 	movw	r3, #50801	; 0xc671
   13f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f18:	781b      	ldrb	r3, [r3, #0]
   13f1a:	2b05      	cmp	r3, #5
   13f1c:	f040 845e 	bne.w	147dc <auto_nav+0x21a4>
{
    nav_block = 5;
   13f20:	f24c 6371 	movw	r3, #50801	; 0xc671
   13f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f28:	2205      	movs	r2, #5
   13f2a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   13f2c:	f24c 3300 	movw	r3, #49920	; 0xc300
   13f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f34:	781b      	ldrb	r3, [r3, #0]
   13f36:	2b00      	cmp	r3, #0
   13f38:	d007      	beq.n	13f4a <auto_nav+0x1912>
   13f3a:	f24c 3300 	movw	r3, #49920	; 0xc300
   13f3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f42:	2200      	movs	r2, #0
   13f44:	701a      	strb	r2, [r3, #0]
   13f46:	2301      	movs	r3, #1
   13f48:	e000      	b.n	13f4c <auto_nav+0x1914>
   13f4a:	2300      	movs	r3, #0
   13f4c:	2b00      	cmp	r3, #0
   13f4e:	d043      	beq.n	13fd8 <auto_nav+0x19a0>
   13f50:	f24c 6371 	movw	r3, #50801	; 0xc671
   13f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f58:	2201      	movs	r2, #1
   13f5a:	701a      	strb	r2, [r3, #0]
   13f5c:	f24c 6370 	movw	r3, #50800	; 0xc670
   13f60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f64:	2200      	movs	r2, #0
   13f66:	701a      	strb	r2, [r3, #0]
   13f68:	f24c 6386 	movw	r3, #50822	; 0xc686
   13f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f70:	2200      	movs	r2, #0
   13f72:	801a      	strh	r2, [r3, #0]
   13f74:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f7c:	681a      	ldr	r2, [r3, #0]
   13f7e:	f24c 6374 	movw	r3, #50804	; 0xc674
   13f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f86:	601a      	str	r2, [r3, #0]
   13f88:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13f8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f90:	681a      	ldr	r2, [r3, #0]
   13f92:	f24c 6378 	movw	r3, #50808	; 0xc678
   13f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f9a:	601a      	str	r2, [r3, #0]
   13f9c:	f24c 6384 	movw	r3, #50820	; 0xc684
   13fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fa4:	2200      	movs	r2, #0
   13fa6:	801a      	strh	r2, [r3, #0]
   13fa8:	f24c 6388 	movw	r3, #50824	; 0xc688
   13fac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fb0:	f04f 0200 	mov.w	r2, #0
   13fb4:	601a      	str	r2, [r3, #0]
   13fb6:	f000 bc11 	b.w	147dc <auto_nav+0x21a4>
   13fba:	bf00      	nop
   13fbc:	f3af 8000 	nop.w
   13fc0:	54442d18 	.word	0x54442d18
   13fc4:	3ff921fb 	.word	0x3ff921fb
   13fc8:	00000000 	.word	0x00000000
   13fcc:	4062c000 	.word	0x4062c000
   13fd0:	54442d18 	.word	0x54442d18
   13fd4:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   13fd8:	f24c 6370 	movw	r3, #50800	; 0xc670
   13fdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fe0:	781b      	ldrb	r3, [r3, #0]
   13fe2:	2b00      	cmp	r3, #0
   13fe4:	d133      	bne.n	1404e <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   13fe6:	f24c 6370 	movw	r3, #50800	; 0xc670
   13fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fee:	2200      	movs	r2, #0
   13ff0:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   13ff2:	f24c 6370 	movw	r3, #50800	; 0xc670
   13ff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ffa:	781b      	ldrb	r3, [r3, #0]
   13ffc:	3301      	adds	r3, #1
   13ffe:	b2da      	uxtb	r2, r3
   14000:	f24c 6370 	movw	r3, #50800	; 0xc670
   14004:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14008:	701a      	strb	r2, [r3, #0]
   1400a:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1400e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14012:	681a      	ldr	r2, [r3, #0]
   14014:	f24c 6374 	movw	r3, #50804	; 0xc674
   14018:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1401c:	601a      	str	r2, [r3, #0]
   1401e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14022:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14026:	681a      	ldr	r2, [r3, #0]
   14028:	f24c 6378 	movw	r3, #50808	; 0xc678
   1402c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14030:	601a      	str	r2, [r3, #0]
   14032:	f24c 6384 	movw	r3, #50820	; 0xc684
   14036:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1403a:	2200      	movs	r2, #0
   1403c:	801a      	strh	r2, [r3, #0]
   1403e:	f24c 6388 	movw	r3, #50824	; 0xc688
   14042:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14046:	f04f 0200 	mov.w	r2, #0
   1404a:	601a      	str	r2, [r3, #0]
   1404c:	e3c6      	b.n	147dc <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   1404e:	f24c 6370 	movw	r3, #50800	; 0xc670
   14052:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14056:	781b      	ldrb	r3, [r3, #0]
   14058:	2b01      	cmp	r3, #1
   1405a:	f040 81b5 	bne.w	143c8 <auto_nav+0x1d90>
    {
        nav_stage =1;
   1405e:	f24c 6370 	movw	r3, #50800	; 0xc670
   14062:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14066:	2201      	movs	r2, #1
   14068:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   1406a:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   1406e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14072:	2200      	movs	r2, #0
   14074:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   14076:	f24c 639c 	movw	r3, #50844	; 0xc69c
   1407a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1407e:	f04f 0200 	mov.w	r2, #0
   14082:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14084:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   14088:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1408c:	2203      	movs	r2, #3
   1408e:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   14090:	f240 5378 	movw	r3, #1400	; 0x578
   14094:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14098:	695a      	ldr	r2, [r3, #20]
   1409a:	f240 5374 	movw	r3, #1396	; 0x574
   1409e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140a2:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   140a4:	f24c 6364 	movw	r3, #50788	; 0xc664
   140a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140ac:	f04f 0200 	mov.w	r2, #0
   140b0:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   140b2:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   140b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140ba:	681a      	ldr	r2, [r3, #0]
   140bc:	f240 5378 	movw	r3, #1400	; 0x578
   140c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140c4:	691b      	ldr	r3, [r3, #16]
   140c6:	4610      	mov	r0, r2
   140c8:	4619      	mov	r1, r3
   140ca:	f004 f883 	bl	181d4 <__aeabi_fsub>
   140ce:	4603      	mov	r3, r0
   140d0:	4618      	mov	r0, r3
   140d2:	f003 fcf5 	bl	17ac0 <__aeabi_f2d>
   140d6:	4604      	mov	r4, r0
   140d8:	460d      	mov	r5, r1
   140da:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   140de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140e2:	681a      	ldr	r2, [r3, #0]
   140e4:	f240 5378 	movw	r3, #1400	; 0x578
   140e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140ec:	68db      	ldr	r3, [r3, #12]
   140ee:	4610      	mov	r0, r2
   140f0:	4619      	mov	r1, r3
   140f2:	f004 f86f 	bl	181d4 <__aeabi_fsub>
   140f6:	4603      	mov	r3, r0
   140f8:	4618      	mov	r0, r3
   140fa:	f003 fce1 	bl	17ac0 <__aeabi_f2d>
   140fe:	4602      	mov	r2, r0
   14100:	460b      	mov	r3, r1
   14102:	4620      	mov	r0, r4
   14104:	4629      	mov	r1, r5
   14106:	f001 fdb7 	bl	15c78 <pp_atan2>
   1410a:	4602      	mov	r2, r0
   1410c:	460b      	mov	r3, r1
   1410e:	4610      	mov	r0, r2
   14110:	4619      	mov	r1, r3
   14112:	f004 f80b 	bl	1812c <__aeabi_d2f>
   14116:	4603      	mov	r3, r0
   14118:	60fb      	str	r3, [r7, #12]
   1411a:	68f8      	ldr	r0, [r7, #12]
   1411c:	f003 fcd0 	bl	17ac0 <__aeabi_f2d>
   14120:	4604      	mov	r4, r0
   14122:	460d      	mov	r5, r1
   14124:	f64c 1304 	movw	r3, #51460	; 0xc904
   14128:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1412c:	681b      	ldr	r3, [r3, #0]
   1412e:	4618      	mov	r0, r3
   14130:	f04f 0100 	mov.w	r1, #0
   14134:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   14138:	f004 f956 	bl	183e8 <__aeabi_fmul>
   1413c:	4603      	mov	r3, r0
   1413e:	4618      	mov	r0, r3
   14140:	f003 fcbe 	bl	17ac0 <__aeabi_f2d>
   14144:	4602      	mov	r2, r0
   14146:	460b      	mov	r3, r1
   14148:	f04f 0000 	mov.w	r0, #0
   1414c:	f04f 0100 	mov.w	r1, #0
   14150:	f2c4 0114 	movt	r1, #16404	; 0x4014
   14154:	f003 fe32 	bl	17dbc <__aeabi_ddiv>
   14158:	4602      	mov	r2, r0
   1415a:	460b      	mov	r3, r1
   1415c:	4620      	mov	r0, r4
   1415e:	4629      	mov	r1, r5
   14160:	f003 fb50 	bl	17804 <__adddf3>
   14164:	4602      	mov	r2, r0
   14166:	460b      	mov	r3, r1
   14168:	4610      	mov	r0, r2
   1416a:	4619      	mov	r1, r3
   1416c:	f003 ffde 	bl	1812c <__aeabi_d2f>
   14170:	4603      	mov	r3, r0
   14172:	60bb      	str	r3, [r7, #8]
   14174:	f240 5378 	movw	r3, #1400	; 0x578
   14178:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1417c:	68db      	ldr	r3, [r3, #12]
   1417e:	4618      	mov	r0, r3
   14180:	f003 fc9e 	bl	17ac0 <__aeabi_f2d>
   14184:	4604      	mov	r4, r0
   14186:	460d      	mov	r5, r1
   14188:	68b8      	ldr	r0, [r7, #8]
   1418a:	f003 fc99 	bl	17ac0 <__aeabi_f2d>
   1418e:	4602      	mov	r2, r0
   14190:	460b      	mov	r3, r1
   14192:	4610      	mov	r0, r2
   14194:	4619      	mov	r1, r3
   14196:	a388      	add	r3, pc, #544	; (adr r3, 143b8 <auto_nav+0x1d80>)
   14198:	e9d3 2300 	ldrd	r2, r3, [r3]
   1419c:	f003 fb32 	bl	17804 <__adddf3>
   141a0:	4602      	mov	r2, r0
   141a2:	460b      	mov	r3, r1
   141a4:	4610      	mov	r0, r2
   141a6:	4619      	mov	r1, r3
   141a8:	f001 fe26 	bl	15df8 <pp_sin>
   141ac:	4602      	mov	r2, r0
   141ae:	460b      	mov	r3, r1
   141b0:	4610      	mov	r0, r2
   141b2:	4619      	mov	r1, r3
   141b4:	f04f 0200 	mov.w	r2, #0
   141b8:	f04f 0300 	mov.w	r3, #0
   141bc:	f2c4 0359 	movt	r3, #16473	; 0x4059
   141c0:	f003 fcd2 	bl	17b68 <__aeabi_dmul>
   141c4:	4602      	mov	r2, r0
   141c6:	460b      	mov	r3, r1
   141c8:	4620      	mov	r0, r4
   141ca:	4629      	mov	r1, r5
   141cc:	f003 fb1a 	bl	17804 <__adddf3>
   141d0:	4602      	mov	r2, r0
   141d2:	460b      	mov	r3, r1
   141d4:	4610      	mov	r0, r2
   141d6:	4619      	mov	r1, r3
   141d8:	f003 ffa8 	bl	1812c <__aeabi_d2f>
   141dc:	4606      	mov	r6, r0
   141de:	f240 5378 	movw	r3, #1400	; 0x578
   141e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141e6:	691b      	ldr	r3, [r3, #16]
   141e8:	4618      	mov	r0, r3
   141ea:	f003 fc69 	bl	17ac0 <__aeabi_f2d>
   141ee:	4604      	mov	r4, r0
   141f0:	460d      	mov	r5, r1
   141f2:	68b8      	ldr	r0, [r7, #8]
   141f4:	f003 fc64 	bl	17ac0 <__aeabi_f2d>
   141f8:	4602      	mov	r2, r0
   141fa:	460b      	mov	r3, r1
   141fc:	4610      	mov	r0, r2
   141fe:	4619      	mov	r1, r3
   14200:	f001 fdfa 	bl	15df8 <pp_sin>
   14204:	4602      	mov	r2, r0
   14206:	460b      	mov	r3, r1
   14208:	4610      	mov	r0, r2
   1420a:	4619      	mov	r1, r3
   1420c:	f04f 0200 	mov.w	r2, #0
   14210:	f04f 0300 	mov.w	r3, #0
   14214:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14218:	f003 fca6 	bl	17b68 <__aeabi_dmul>
   1421c:	4602      	mov	r2, r0
   1421e:	460b      	mov	r3, r1
   14220:	4620      	mov	r0, r4
   14222:	4629      	mov	r1, r5
   14224:	f003 faee 	bl	17804 <__adddf3>
   14228:	4602      	mov	r2, r0
   1422a:	460b      	mov	r3, r1
   1422c:	4610      	mov	r0, r2
   1422e:	4619      	mov	r1, r3
   14230:	f003 ff7c 	bl	1812c <__aeabi_d2f>
   14234:	4603      	mov	r3, r0
   14236:	4630      	mov	r0, r6
   14238:	4619      	mov	r1, r3
   1423a:	f000 fbc1 	bl	149c0 <fly_to_xy>
   1423e:	68b8      	ldr	r0, [r7, #8]
   14240:	f003 fc3e 	bl	17ac0 <__aeabi_f2d>
   14244:	4602      	mov	r2, r0
   14246:	460b      	mov	r3, r1
   14248:	a15b      	add	r1, pc, #364	; (adr r1, 143b8 <auto_nav+0x1d80>)
   1424a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1424e:	f003 fad7 	bl	17800 <__aeabi_dsub>
   14252:	4602      	mov	r2, r0
   14254:	460b      	mov	r3, r1
   14256:	4610      	mov	r0, r2
   14258:	4619      	mov	r1, r3
   1425a:	a359      	add	r3, pc, #356	; (adr r3, 143c0 <auto_nav+0x1d88>)
   1425c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14260:	f003 fdac 	bl	17dbc <__aeabi_ddiv>
   14264:	4602      	mov	r2, r0
   14266:	460b      	mov	r3, r1
   14268:	4610      	mov	r0, r2
   1426a:	4619      	mov	r1, r3
   1426c:	f04f 0200 	mov.w	r2, #0
   14270:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   14274:	f2c4 0366 	movt	r3, #16486	; 0x4066
   14278:	f003 fc76 	bl	17b68 <__aeabi_dmul>
   1427c:	4602      	mov	r2, r0
   1427e:	460b      	mov	r3, r1
   14280:	4610      	mov	r0, r2
   14282:	4619      	mov	r1, r3
   14284:	f003 ff52 	bl	1812c <__aeabi_d2f>
   14288:	4602      	mov	r2, r0
   1428a:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1428e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14292:	601a      	str	r2, [r3, #0]
   14294:	e012      	b.n	142bc <auto_nav+0x1c84>
   14296:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1429a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1429e:	681b      	ldr	r3, [r3, #0]
   142a0:	4618      	mov	r0, r3
   142a2:	f04f 0100 	mov.w	r1, #0
   142a6:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   142aa:	f003 ff95 	bl	181d8 <__addsf3>
   142ae:	4603      	mov	r3, r0
   142b0:	461a      	mov	r2, r3
   142b2:	f24c 638c 	movw	r3, #50828	; 0xc68c
   142b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142ba:	601a      	str	r2, [r3, #0]
   142bc:	f24c 638c 	movw	r3, #50828	; 0xc68c
   142c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142c4:	681b      	ldr	r3, [r3, #0]
   142c6:	4618      	mov	r0, r3
   142c8:	f04f 0100 	mov.w	r1, #0
   142cc:	f004 fa2a 	bl	18724 <__aeabi_fcmplt>
   142d0:	4603      	mov	r3, r0
   142d2:	2b00      	cmp	r3, #0
   142d4:	d1df      	bne.n	14296 <auto_nav+0x1c5e>
   142d6:	e012      	b.n	142fe <auto_nav+0x1cc6>
   142d8:	f24c 638c 	movw	r3, #50828	; 0xc68c
   142dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142e0:	681b      	ldr	r3, [r3, #0]
   142e2:	4618      	mov	r0, r3
   142e4:	f04f 0100 	mov.w	r1, #0
   142e8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   142ec:	f003 ff72 	bl	181d4 <__aeabi_fsub>
   142f0:	4603      	mov	r3, r0
   142f2:	461a      	mov	r2, r3
   142f4:	f24c 638c 	movw	r3, #50828	; 0xc68c
   142f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142fc:	601a      	str	r2, [r3, #0]
   142fe:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14302:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14306:	681b      	ldr	r3, [r3, #0]
   14308:	4618      	mov	r0, r3
   1430a:	f04f 0100 	mov.w	r1, #0
   1430e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14312:	f004 fa1b 	bl	1874c <__aeabi_fcmpge>
   14316:	4603      	mov	r3, r0
   14318:	2b00      	cmp	r3, #0
   1431a:	d1dd      	bne.n	142d8 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   1431c:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14320:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14324:	681b      	ldr	r3, [r3, #0]
   14326:	4618      	mov	r0, r3
   14328:	f04f 0100 	mov.w	r1, #0
   1432c:	f004 fa18 	bl	18760 <__aeabi_fcmpgt>
   14330:	4603      	mov	r3, r0
   14332:	2b00      	cmp	r3, #0
   14334:	d100      	bne.n	14338 <auto_nav+0x1d00>
        return;
   14336:	e251      	b.n	147dc <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14338:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1433c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14340:	681b      	ldr	r3, [r3, #0]
   14342:	4618      	mov	r0, r3
   14344:	f04f 0100 	mov.w	r1, #0
   14348:	f2c4 1120 	movt	r1, #16672	; 0x4120
   1434c:	f004 f9ea 	bl	18724 <__aeabi_fcmplt>
   14350:	4603      	mov	r3, r0
   14352:	2b00      	cmp	r3, #0
   14354:	d100      	bne.n	14358 <auto_nav+0x1d20>
        return;
   14356:	e241      	b.n	147dc <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14358:	f24c 6370 	movw	r3, #50800	; 0xc670
   1435c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14360:	781b      	ldrb	r3, [r3, #0]
   14362:	3301      	adds	r3, #1
   14364:	b2da      	uxtb	r2, r3
   14366:	f24c 6370 	movw	r3, #50800	; 0xc670
   1436a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1436e:	701a      	strb	r2, [r3, #0]
   14370:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14374:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14378:	681a      	ldr	r2, [r3, #0]
   1437a:	f24c 6374 	movw	r3, #50804	; 0xc674
   1437e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14382:	601a      	str	r2, [r3, #0]
   14384:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14388:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1438c:	681a      	ldr	r2, [r3, #0]
   1438e:	f24c 6378 	movw	r3, #50808	; 0xc678
   14392:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14396:	601a      	str	r2, [r3, #0]
   14398:	f24c 6384 	movw	r3, #50820	; 0xc684
   1439c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143a0:	2200      	movs	r2, #0
   143a2:	801a      	strh	r2, [r3, #0]
   143a4:	f24c 6388 	movw	r3, #50824	; 0xc688
   143a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143ac:	f04f 0200 	mov.w	r2, #0
   143b0:	601a      	str	r2, [r3, #0]
   143b2:	e213      	b.n	147dc <auto_nav+0x21a4>
   143b4:	f3af 8000 	nop.w
   143b8:	54442d18 	.word	0x54442d18
   143bc:	3ff921fb 	.word	0x3ff921fb
   143c0:	54442d18 	.word	0x54442d18
   143c4:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   143c8:	f24c 6370 	movw	r3, #50800	; 0xc670
   143cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143d0:	781b      	ldrb	r3, [r3, #0]
   143d2:	2b02      	cmp	r3, #2
   143d4:	f040 81ad 	bne.w	14732 <auto_nav+0x20fa>
    {
         nav_stage = 2;
   143d8:	f24c 6370 	movw	r3, #50800	; 0xc670
   143dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143e0:	2202      	movs	r2, #2
   143e2:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   143e4:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   143e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143ec:	2200      	movs	r2, #0
   143ee:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   143f0:	f24c 639c 	movw	r3, #50844	; 0xc69c
   143f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143f8:	f04f 0200 	mov.w	r2, #0
   143fc:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   143fe:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   14402:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14406:	2203      	movs	r2, #3
   14408:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   1440a:	f240 5378 	movw	r3, #1400	; 0x578
   1440e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   14414:	f240 5374 	movw	r3, #1396	; 0x574
   14418:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1441c:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   1441e:	f24c 6364 	movw	r3, #50788	; 0xc664
   14422:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14426:	f04f 0200 	mov.w	r2, #0
   1442a:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   1442c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14430:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14434:	681a      	ldr	r2, [r3, #0]
   14436:	f240 5378 	movw	r3, #1400	; 0x578
   1443a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1443e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14440:	4610      	mov	r0, r2
   14442:	4619      	mov	r1, r3
   14444:	f003 fec6 	bl	181d4 <__aeabi_fsub>
   14448:	4603      	mov	r3, r0
   1444a:	4618      	mov	r0, r3
   1444c:	f003 fb38 	bl	17ac0 <__aeabi_f2d>
   14450:	4604      	mov	r4, r0
   14452:	460d      	mov	r5, r1
   14454:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14458:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1445c:	681a      	ldr	r2, [r3, #0]
   1445e:	f240 5378 	movw	r3, #1400	; 0x578
   14462:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14468:	4610      	mov	r0, r2
   1446a:	4619      	mov	r1, r3
   1446c:	f003 feb2 	bl	181d4 <__aeabi_fsub>
   14470:	4603      	mov	r3, r0
   14472:	4618      	mov	r0, r3
   14474:	f003 fb24 	bl	17ac0 <__aeabi_f2d>
   14478:	4602      	mov	r2, r0
   1447a:	460b      	mov	r3, r1
   1447c:	4620      	mov	r0, r4
   1447e:	4629      	mov	r1, r5
   14480:	f001 fbfa 	bl	15c78 <pp_atan2>
   14484:	4602      	mov	r2, r0
   14486:	460b      	mov	r3, r1
   14488:	4610      	mov	r0, r2
   1448a:	4619      	mov	r1, r3
   1448c:	f003 fe4e 	bl	1812c <__aeabi_d2f>
   14490:	4603      	mov	r3, r0
   14492:	607b      	str	r3, [r7, #4]
   14494:	6878      	ldr	r0, [r7, #4]
   14496:	f003 fb13 	bl	17ac0 <__aeabi_f2d>
   1449a:	4604      	mov	r4, r0
   1449c:	460d      	mov	r5, r1
   1449e:	f64c 1304 	movw	r3, #51460	; 0xc904
   144a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144a6:	681b      	ldr	r3, [r3, #0]
   144a8:	4618      	mov	r0, r3
   144aa:	f04f 0100 	mov.w	r1, #0
   144ae:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   144b2:	f003 ff99 	bl	183e8 <__aeabi_fmul>
   144b6:	4603      	mov	r3, r0
   144b8:	4618      	mov	r0, r3
   144ba:	f003 fb01 	bl	17ac0 <__aeabi_f2d>
   144be:	4602      	mov	r2, r0
   144c0:	460b      	mov	r3, r1
   144c2:	f04f 0000 	mov.w	r0, #0
   144c6:	f04f 0100 	mov.w	r1, #0
   144ca:	f2c4 0114 	movt	r1, #16404	; 0x4014
   144ce:	f003 fc75 	bl	17dbc <__aeabi_ddiv>
   144d2:	4602      	mov	r2, r0
   144d4:	460b      	mov	r3, r1
   144d6:	4620      	mov	r0, r4
   144d8:	4629      	mov	r1, r5
   144da:	f003 f993 	bl	17804 <__adddf3>
   144de:	4602      	mov	r2, r0
   144e0:	460b      	mov	r3, r1
   144e2:	4610      	mov	r0, r2
   144e4:	4619      	mov	r1, r3
   144e6:	f003 fe21 	bl	1812c <__aeabi_d2f>
   144ea:	4603      	mov	r3, r0
   144ec:	603b      	str	r3, [r7, #0]
   144ee:	f240 5378 	movw	r3, #1400	; 0x578
   144f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   144f8:	4618      	mov	r0, r3
   144fa:	f003 fae1 	bl	17ac0 <__aeabi_f2d>
   144fe:	4604      	mov	r4, r0
   14500:	460d      	mov	r5, r1
   14502:	6838      	ldr	r0, [r7, #0]
   14504:	f003 fadc 	bl	17ac0 <__aeabi_f2d>
   14508:	4602      	mov	r2, r0
   1450a:	460b      	mov	r3, r1
   1450c:	4610      	mov	r0, r2
   1450e:	4619      	mov	r1, r3
   14510:	a3b5      	add	r3, pc, #724	; (adr r3, 147e8 <auto_nav+0x21b0>)
   14512:	e9d3 2300 	ldrd	r2, r3, [r3]
   14516:	f003 f975 	bl	17804 <__adddf3>
   1451a:	4602      	mov	r2, r0
   1451c:	460b      	mov	r3, r1
   1451e:	4610      	mov	r0, r2
   14520:	4619      	mov	r1, r3
   14522:	f001 fc69 	bl	15df8 <pp_sin>
   14526:	4602      	mov	r2, r0
   14528:	460b      	mov	r3, r1
   1452a:	4610      	mov	r0, r2
   1452c:	4619      	mov	r1, r3
   1452e:	f04f 0200 	mov.w	r2, #0
   14532:	f04f 0300 	mov.w	r3, #0
   14536:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1453a:	f003 fb15 	bl	17b68 <__aeabi_dmul>
   1453e:	4602      	mov	r2, r0
   14540:	460b      	mov	r3, r1
   14542:	4620      	mov	r0, r4
   14544:	4629      	mov	r1, r5
   14546:	f003 f95d 	bl	17804 <__adddf3>
   1454a:	4602      	mov	r2, r0
   1454c:	460b      	mov	r3, r1
   1454e:	4610      	mov	r0, r2
   14550:	4619      	mov	r1, r3
   14552:	f003 fdeb 	bl	1812c <__aeabi_d2f>
   14556:	4606      	mov	r6, r0
   14558:	f240 5378 	movw	r3, #1400	; 0x578
   1455c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14562:	4618      	mov	r0, r3
   14564:	f003 faac 	bl	17ac0 <__aeabi_f2d>
   14568:	4604      	mov	r4, r0
   1456a:	460d      	mov	r5, r1
   1456c:	6838      	ldr	r0, [r7, #0]
   1456e:	f003 faa7 	bl	17ac0 <__aeabi_f2d>
   14572:	4602      	mov	r2, r0
   14574:	460b      	mov	r3, r1
   14576:	4610      	mov	r0, r2
   14578:	4619      	mov	r1, r3
   1457a:	f001 fc3d 	bl	15df8 <pp_sin>
   1457e:	4602      	mov	r2, r0
   14580:	460b      	mov	r3, r1
   14582:	4610      	mov	r0, r2
   14584:	4619      	mov	r1, r3
   14586:	f04f 0200 	mov.w	r2, #0
   1458a:	f04f 0300 	mov.w	r3, #0
   1458e:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14592:	f003 fae9 	bl	17b68 <__aeabi_dmul>
   14596:	4602      	mov	r2, r0
   14598:	460b      	mov	r3, r1
   1459a:	4620      	mov	r0, r4
   1459c:	4629      	mov	r1, r5
   1459e:	f003 f931 	bl	17804 <__adddf3>
   145a2:	4602      	mov	r2, r0
   145a4:	460b      	mov	r3, r1
   145a6:	4610      	mov	r0, r2
   145a8:	4619      	mov	r1, r3
   145aa:	f003 fdbf 	bl	1812c <__aeabi_d2f>
   145ae:	4603      	mov	r3, r0
   145b0:	4630      	mov	r0, r6
   145b2:	4619      	mov	r1, r3
   145b4:	f000 fa04 	bl	149c0 <fly_to_xy>
   145b8:	6838      	ldr	r0, [r7, #0]
   145ba:	f003 fa81 	bl	17ac0 <__aeabi_f2d>
   145be:	4602      	mov	r2, r0
   145c0:	460b      	mov	r3, r1
   145c2:	a189      	add	r1, pc, #548	; (adr r1, 147e8 <auto_nav+0x21b0>)
   145c4:	e9d1 0100 	ldrd	r0, r1, [r1]
   145c8:	f003 f91a 	bl	17800 <__aeabi_dsub>
   145cc:	4602      	mov	r2, r0
   145ce:	460b      	mov	r3, r1
   145d0:	4610      	mov	r0, r2
   145d2:	4619      	mov	r1, r3
   145d4:	a386      	add	r3, pc, #536	; (adr r3, 147f0 <auto_nav+0x21b8>)
   145d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   145da:	f003 fbef 	bl	17dbc <__aeabi_ddiv>
   145de:	4602      	mov	r2, r0
   145e0:	460b      	mov	r3, r1
   145e2:	4610      	mov	r0, r2
   145e4:	4619      	mov	r1, r3
   145e6:	f04f 0200 	mov.w	r2, #0
   145ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   145ee:	f2c4 0366 	movt	r3, #16486	; 0x4066
   145f2:	f003 fab9 	bl	17b68 <__aeabi_dmul>
   145f6:	4602      	mov	r2, r0
   145f8:	460b      	mov	r3, r1
   145fa:	4610      	mov	r0, r2
   145fc:	4619      	mov	r1, r3
   145fe:	f003 fd95 	bl	1812c <__aeabi_d2f>
   14602:	4602      	mov	r2, r0
   14604:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14608:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1460c:	601a      	str	r2, [r3, #0]
   1460e:	e012      	b.n	14636 <auto_nav+0x1ffe>
   14610:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14614:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14618:	681b      	ldr	r3, [r3, #0]
   1461a:	4618      	mov	r0, r3
   1461c:	f04f 0100 	mov.w	r1, #0
   14620:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14624:	f003 fdd8 	bl	181d8 <__addsf3>
   14628:	4603      	mov	r3, r0
   1462a:	461a      	mov	r2, r3
   1462c:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14630:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14634:	601a      	str	r2, [r3, #0]
   14636:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1463a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1463e:	681b      	ldr	r3, [r3, #0]
   14640:	4618      	mov	r0, r3
   14642:	f04f 0100 	mov.w	r1, #0
   14646:	f004 f86d 	bl	18724 <__aeabi_fcmplt>
   1464a:	4603      	mov	r3, r0
   1464c:	2b00      	cmp	r3, #0
   1464e:	d1df      	bne.n	14610 <auto_nav+0x1fd8>
   14650:	e012      	b.n	14678 <auto_nav+0x2040>
   14652:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14656:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1465a:	681b      	ldr	r3, [r3, #0]
   1465c:	4618      	mov	r0, r3
   1465e:	f04f 0100 	mov.w	r1, #0
   14662:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14666:	f003 fdb5 	bl	181d4 <__aeabi_fsub>
   1466a:	4603      	mov	r3, r0
   1466c:	461a      	mov	r2, r3
   1466e:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14672:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14676:	601a      	str	r2, [r3, #0]
   14678:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1467c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14680:	681b      	ldr	r3, [r3, #0]
   14682:	4618      	mov	r0, r3
   14684:	f04f 0100 	mov.w	r1, #0
   14688:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1468c:	f004 f85e 	bl	1874c <__aeabi_fcmpge>
   14690:	4603      	mov	r3, r0
   14692:	2b00      	cmp	r3, #0
   14694:	d1dd      	bne.n	14652 <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   14696:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1469a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1469e:	681b      	ldr	r3, [r3, #0]
   146a0:	4618      	mov	r0, r3
   146a2:	f04f 0100 	mov.w	r1, #0
   146a6:	f2c4 3134 	movt	r1, #17204	; 0x4334
   146aa:	f004 f859 	bl	18760 <__aeabi_fcmpgt>
   146ae:	4603      	mov	r3, r0
   146b0:	2b00      	cmp	r3, #0
   146b2:	d100      	bne.n	146b6 <auto_nav+0x207e>
          return;
   146b4:	e092      	b.n	147dc <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   146b6:	f24c 638c 	movw	r3, #50828	; 0xc68c
   146ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146be:	681b      	ldr	r3, [r3, #0]
   146c0:	4618      	mov	r0, r3
   146c2:	f04f 0100 	mov.w	r1, #0
   146c6:	f2c4 313e 	movt	r1, #17214	; 0x433e
   146ca:	f004 f82b 	bl	18724 <__aeabi_fcmplt>
   146ce:	4603      	mov	r3, r0
   146d0:	2b00      	cmp	r3, #0
   146d2:	d100      	bne.n	146d6 <auto_nav+0x209e>
          return;
   146d4:	e082      	b.n	147dc <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   146d6:	f24c 6370 	movw	r3, #50800	; 0xc670
   146da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146de:	781b      	ldrb	r3, [r3, #0]
   146e0:	3301      	adds	r3, #1
   146e2:	b2da      	uxtb	r2, r3
   146e4:	f24c 6370 	movw	r3, #50800	; 0xc670
   146e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146ec:	701a      	strb	r2, [r3, #0]
   146ee:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   146f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146f6:	681a      	ldr	r2, [r3, #0]
   146f8:	f24c 6374 	movw	r3, #50804	; 0xc674
   146fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14700:	601a      	str	r2, [r3, #0]
   14702:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14706:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1470a:	681a      	ldr	r2, [r3, #0]
   1470c:	f24c 6378 	movw	r3, #50808	; 0xc678
   14710:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14714:	601a      	str	r2, [r3, #0]
   14716:	f24c 6384 	movw	r3, #50820	; 0xc684
   1471a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1471e:	2200      	movs	r2, #0
   14720:	801a      	strh	r2, [r3, #0]
   14722:	f24c 6388 	movw	r3, #50824	; 0xc688
   14726:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1472a:	f04f 0200 	mov.w	r2, #0
   1472e:	601a      	str	r2, [r3, #0]
   14730:	e054      	b.n	147dc <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   14732:	f24c 6370 	movw	r3, #50800	; 0xc670
   14736:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1473a:	781b      	ldrb	r3, [r3, #0]
   1473c:	2b03      	cmp	r3, #3
   1473e:	d106      	bne.n	1474e <auto_nav+0x2116>
    {
	  nav_stage = 3;
   14740:	f24c 6370 	movw	r3, #50800	; 0xc670
   14744:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14748:	2203      	movs	r2, #3
   1474a:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   1474c:	e44b      	b.n	13fe6 <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   1474e:	f24c 6370 	movw	r3, #50800	; 0xc670
   14752:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14756:	781b      	ldrb	r3, [r3, #0]
   14758:	2b04      	cmp	r3, #4
   1475a:	d13f      	bne.n	147dc <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   1475c:	f24c 6370 	movw	r3, #50800	; 0xc670
   14760:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14764:	2204      	movs	r2, #4
   14766:	701a      	strb	r2, [r3, #0]
        NextBlock()
   14768:	f24c 6371 	movw	r3, #50801	; 0xc671
   1476c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14770:	781b      	ldrb	r3, [r3, #0]
   14772:	3301      	adds	r3, #1
   14774:	b2da      	uxtb	r2, r3
   14776:	f24c 6371 	movw	r3, #50801	; 0xc671
   1477a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1477e:	701a      	strb	r2, [r3, #0]
   14780:	f24c 6370 	movw	r3, #50800	; 0xc670
   14784:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14788:	2200      	movs	r2, #0
   1478a:	701a      	strb	r2, [r3, #0]
   1478c:	f24c 6386 	movw	r3, #50822	; 0xc686
   14790:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14794:	2200      	movs	r2, #0
   14796:	801a      	strh	r2, [r3, #0]
   14798:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1479c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147a0:	681a      	ldr	r2, [r3, #0]
   147a2:	f24c 6374 	movw	r3, #50804	; 0xc674
   147a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147aa:	601a      	str	r2, [r3, #0]
   147ac:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   147b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147b4:	681a      	ldr	r2, [r3, #0]
   147b6:	f24c 6378 	movw	r3, #50808	; 0xc678
   147ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147be:	601a      	str	r2, [r3, #0]
   147c0:	f24c 6384 	movw	r3, #50820	; 0xc684
   147c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147c8:	2200      	movs	r2, #0
   147ca:	801a      	strh	r2, [r3, #0]
   147cc:	f24c 6388 	movw	r3, #50824	; 0xc688
   147d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147d4:	f04f 0200 	mov.w	r2, #0
   147d8:	601a      	str	r2, [r3, #0]
   147da:	bf00      	nop
    else { }
}
else { }

//#endif
}
   147dc:	372c      	adds	r7, #44	; 0x2c
   147de:	46bd      	mov	sp, r7
   147e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   147e2:	bf00      	nop
   147e4:	f3af 8000 	nop.w
   147e8:	54442d18 	.word	0x54442d18
   147ec:	3ff921fb 	.word	0x3ff921fb
   147f0:	54442d18 	.word	0x54442d18
   147f4:	400921fb 	.word	0x400921fb

000147f8 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   147f8:	b590      	push	{r4, r7, lr}
   147fa:	b087      	sub	sp, #28
   147fc:	af00      	add	r7, sp, #0
   147fe:	4603      	mov	r3, r0
   14800:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   14802:	79f9      	ldrb	r1, [r7, #7]
   14804:	f240 5278 	movw	r2, #1400	; 0x578
   14808:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1480c:	460b      	mov	r3, r1
   1480e:	005b      	lsls	r3, r3, #1
   14810:	440b      	add	r3, r1
   14812:	009b      	lsls	r3, r3, #2
   14814:	4413      	add	r3, r2
   14816:	681a      	ldr	r2, [r3, #0]
   14818:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1481c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14820:	681b      	ldr	r3, [r3, #0]
   14822:	4610      	mov	r0, r2
   14824:	4619      	mov	r1, r3
   14826:	f003 fcd5 	bl	181d4 <__aeabi_fsub>
   1482a:	4603      	mov	r3, r0
   1482c:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   1482e:	79f9      	ldrb	r1, [r7, #7]
   14830:	f240 5278 	movw	r2, #1400	; 0x578
   14834:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14838:	460b      	mov	r3, r1
   1483a:	005b      	lsls	r3, r3, #1
   1483c:	440b      	add	r3, r1
   1483e:	009b      	lsls	r3, r3, #2
   14840:	4413      	add	r3, r2
   14842:	3304      	adds	r3, #4
   14844:	681a      	ldr	r2, [r3, #0]
   14846:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1484a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1484e:	681b      	ldr	r3, [r3, #0]
   14850:	4610      	mov	r0, r2
   14852:	4619      	mov	r1, r3
   14854:	f003 fcbe 	bl	181d4 <__aeabi_fsub>
   14858:	4603      	mov	r3, r0
   1485a:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   1485c:	6978      	ldr	r0, [r7, #20]
   1485e:	6979      	ldr	r1, [r7, #20]
   14860:	f003 fdc2 	bl	183e8 <__aeabi_fmul>
   14864:	4603      	mov	r3, r0
   14866:	461c      	mov	r4, r3
   14868:	6938      	ldr	r0, [r7, #16]
   1486a:	6939      	ldr	r1, [r7, #16]
   1486c:	f003 fdbc 	bl	183e8 <__aeabi_fmul>
   14870:	4603      	mov	r3, r0
   14872:	4620      	mov	r0, r4
   14874:	4619      	mov	r1, r3
   14876:	f003 fcaf 	bl	181d8 <__addsf3>
   1487a:	4603      	mov	r3, r0
   1487c:	461a      	mov	r2, r3
   1487e:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
   14882:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14886:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   14888:	f64c 1304 	movw	r3, #51460	; 0xc904
   1488c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14890:	681b      	ldr	r3, [r3, #0]
   14892:	4618      	mov	r0, r3
   14894:	f04f 0100 	mov.w	r1, #0
   14898:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   1489c:	f003 fda4 	bl	183e8 <__aeabi_fmul>
   148a0:	4603      	mov	r3, r0
   148a2:	461a      	mov	r2, r3
   148a4:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   148a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148ac:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   148ae:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   148b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148b6:	681b      	ldr	r3, [r3, #0]
   148b8:	4618      	mov	r0, r3
   148ba:	f04f 0100 	mov.w	r1, #0
   148be:	f2c4 2120 	movt	r1, #16928	; 0x4220
   148c2:	f003 ff2f 	bl	18724 <__aeabi_fcmplt>
   148c6:	4603      	mov	r3, r0
   148c8:	2b00      	cmp	r3, #0
   148ca:	d004      	beq.n	148d6 <approaching+0xde>
   148cc:	f04f 0200 	mov.w	r2, #0
   148d0:	f2c4 2220 	movt	r2, #16928	; 0x4220
   148d4:	e004      	b.n	148e0 <approaching+0xe8>
   148d6:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   148da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148de:	681a      	ldr	r2, [r3, #0]
   148e0:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   148e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148e8:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   148ea:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   148ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148f2:	681a      	ldr	r2, [r3, #0]
   148f4:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   148f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148fc:	681b      	ldr	r3, [r3, #0]
   148fe:	4610      	mov	r0, r2
   14900:	4619      	mov	r1, r3
   14902:	f003 fd71 	bl	183e8 <__aeabi_fmul>
   14906:	4603      	mov	r3, r0
   14908:	461a      	mov	r2, r3
   1490a:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
   1490e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14912:	681b      	ldr	r3, [r3, #0]
   14914:	4610      	mov	r0, r2
   14916:	4619      	mov	r1, r3
   14918:	f003 ff22 	bl	18760 <__aeabi_fcmpgt>
   1491c:	4603      	mov	r3, r0
   1491e:	2b00      	cmp	r3, #0
   14920:	d001      	beq.n	14926 <approaching+0x12e>
    return TRUE;
   14922:	2301      	movs	r3, #1
   14924:	e048      	b.n	149b8 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   14926:	79f9      	ldrb	r1, [r7, #7]
   14928:	f240 5278 	movw	r2, #1400	; 0x578
   1492c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14930:	460b      	mov	r3, r1
   14932:	005b      	lsls	r3, r3, #1
   14934:	440b      	add	r3, r1
   14936:	009b      	lsls	r3, r3, #2
   14938:	4413      	add	r3, r2
   1493a:	681a      	ldr	r2, [r3, #0]
   1493c:	f24c 6374 	movw	r3, #50804	; 0xc674
   14940:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14944:	681b      	ldr	r3, [r3, #0]
   14946:	4610      	mov	r0, r2
   14948:	4619      	mov	r1, r3
   1494a:	f003 fc43 	bl	181d4 <__aeabi_fsub>
   1494e:	4603      	mov	r3, r0
   14950:	4618      	mov	r0, r3
   14952:	6979      	ldr	r1, [r7, #20]
   14954:	f003 fd48 	bl	183e8 <__aeabi_fmul>
   14958:	4603      	mov	r3, r0
   1495a:	461c      	mov	r4, r3
   1495c:	79f9      	ldrb	r1, [r7, #7]
   1495e:	f240 5278 	movw	r2, #1400	; 0x578
   14962:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14966:	460b      	mov	r3, r1
   14968:	005b      	lsls	r3, r3, #1
   1496a:	440b      	add	r3, r1
   1496c:	009b      	lsls	r3, r3, #2
   1496e:	4413      	add	r3, r2
   14970:	3304      	adds	r3, #4
   14972:	681a      	ldr	r2, [r3, #0]
   14974:	f24c 6378 	movw	r3, #50808	; 0xc678
   14978:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1497c:	681b      	ldr	r3, [r3, #0]
   1497e:	4610      	mov	r0, r2
   14980:	4619      	mov	r1, r3
   14982:	f003 fc27 	bl	181d4 <__aeabi_fsub>
   14986:	4603      	mov	r3, r0
   14988:	4618      	mov	r0, r3
   1498a:	6939      	ldr	r1, [r7, #16]
   1498c:	f003 fd2c 	bl	183e8 <__aeabi_fmul>
   14990:	4603      	mov	r3, r0
   14992:	4620      	mov	r0, r4
   14994:	4619      	mov	r1, r3
   14996:	f003 fc1f 	bl	181d8 <__addsf3>
   1499a:	4603      	mov	r3, r0
   1499c:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   1499e:	2301      	movs	r3, #1
   149a0:	461c      	mov	r4, r3
   149a2:	68f8      	ldr	r0, [r7, #12]
   149a4:	f04f 0100 	mov.w	r1, #0
   149a8:	f003 febc 	bl	18724 <__aeabi_fcmplt>
   149ac:	4603      	mov	r3, r0
   149ae:	2b00      	cmp	r3, #0
   149b0:	d101      	bne.n	149b6 <approaching+0x1be>
   149b2:	2300      	movs	r3, #0
   149b4:	461c      	mov	r4, r3
   149b6:	b2e3      	uxtb	r3, r4
}
   149b8:	4618      	mov	r0, r3
   149ba:	371c      	adds	r7, #28
   149bc:	46bd      	mov	sp, r7
   149be:	bd90      	pop	{r4, r7, pc}

000149c0 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   149c0:	b5b0      	push	{r4, r5, r7, lr}
   149c2:	b082      	sub	sp, #8
   149c4:	af00      	add	r7, sp, #0
   149c6:	6078      	str	r0, [r7, #4]
   149c8:	6039      	str	r1, [r7, #0]
  desired_x = x;
   149ca:	f24c 6390 	movw	r3, #50832	; 0xc690
   149ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149d2:	687a      	ldr	r2, [r7, #4]
   149d4:	601a      	str	r2, [r3, #0]
  desired_y = y;
   149d6:	f24c 6394 	movw	r3, #50836	; 0xc694
   149da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149de:	683a      	ldr	r2, [r7, #0]
   149e0:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   149e2:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   149e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149ea:	681b      	ldr	r3, [r3, #0]
   149ec:	6838      	ldr	r0, [r7, #0]
   149ee:	4619      	mov	r1, r3
   149f0:	f003 fbf0 	bl	181d4 <__aeabi_fsub>
   149f4:	4603      	mov	r3, r0
   149f6:	4618      	mov	r0, r3
   149f8:	f003 f862 	bl	17ac0 <__aeabi_f2d>
   149fc:	4604      	mov	r4, r0
   149fe:	460d      	mov	r5, r1
   14a00:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a08:	681b      	ldr	r3, [r3, #0]
   14a0a:	6878      	ldr	r0, [r7, #4]
   14a0c:	4619      	mov	r1, r3
   14a0e:	f003 fbe1 	bl	181d4 <__aeabi_fsub>
   14a12:	4603      	mov	r3, r0
   14a14:	4618      	mov	r0, r3
   14a16:	f003 f853 	bl	17ac0 <__aeabi_f2d>
   14a1a:	4602      	mov	r2, r0
   14a1c:	460b      	mov	r3, r1
   14a1e:	4620      	mov	r0, r4
   14a20:	4629      	mov	r1, r5
   14a22:	f001 f929 	bl	15c78 <pp_atan2>
   14a26:	4602      	mov	r2, r0
   14a28:	460b      	mov	r3, r1
   14a2a:	a10b      	add	r1, pc, #44	; (adr r1, 14a58 <fly_to_xy+0x98>)
   14a2c:	e9d1 0100 	ldrd	r0, r1, [r1]
   14a30:	f002 fee6 	bl	17800 <__aeabi_dsub>
   14a34:	4602      	mov	r2, r0
   14a36:	460b      	mov	r3, r1
   14a38:	4610      	mov	r0, r2
   14a3a:	4619      	mov	r1, r3
   14a3c:	f003 fb76 	bl	1812c <__aeabi_d2f>
   14a40:	4602      	mov	r2, r0
   14a42:	f24c 635c 	movw	r3, #50780	; 0xc65c
   14a46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a4a:	601a      	str	r2, [r3, #0]
}
   14a4c:	3708      	adds	r7, #8
   14a4e:	46bd      	mov	sp, r7
   14a50:	bdb0      	pop	{r4, r5, r7, pc}
   14a52:	bf00      	nop
   14a54:	f3af 8000 	nop.w
   14a58:	54442d18 	.word	0x54442d18
   14a5c:	3ff921fb 	.word	0x3ff921fb

00014a60 <fly_to>:

static void fly_to(uint8_t wp) { 
   14a60:	b580      	push	{r7, lr}
   14a62:	b082      	sub	sp, #8
   14a64:	af00      	add	r7, sp, #0
   14a66:	4603      	mov	r3, r0
   14a68:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   14a6a:	79f9      	ldrb	r1, [r7, #7]
   14a6c:	f240 5278 	movw	r2, #1400	; 0x578
   14a70:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a74:	460b      	mov	r3, r1
   14a76:	005b      	lsls	r3, r3, #1
   14a78:	440b      	add	r3, r1
   14a7a:	009b      	lsls	r3, r3, #2
   14a7c:	4413      	add	r3, r2
   14a7e:	6818      	ldr	r0, [r3, #0]
   14a80:	79f9      	ldrb	r1, [r7, #7]
   14a82:	f240 5278 	movw	r2, #1400	; 0x578
   14a86:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a8a:	460b      	mov	r3, r1
   14a8c:	005b      	lsls	r3, r3, #1
   14a8e:	440b      	add	r3, r1
   14a90:	009b      	lsls	r3, r3, #2
   14a92:	4413      	add	r3, r2
   14a94:	3304      	adds	r3, #4
   14a96:	681b      	ldr	r3, [r3, #0]
   14a98:	4619      	mov	r1, r3
   14a9a:	f7ff ff91 	bl	149c0 <fly_to_xy>
}
   14a9e:	3708      	adds	r7, #8
   14aa0:	46bd      	mov	sp, r7
   14aa2:	bd80      	pop	{r7, pc}

00014aa4 <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   14aa4:	b5b0      	push	{r4, r5, r7, lr}
   14aa6:	b088      	sub	sp, #32
   14aa8:	af00      	add	r7, sp, #0
   14aaa:	4602      	mov	r2, r0
   14aac:	460b      	mov	r3, r1
   14aae:	71fa      	strb	r2, [r7, #7]
   14ab0:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   14ab2:	79f9      	ldrb	r1, [r7, #7]
   14ab4:	f240 5278 	movw	r2, #1400	; 0x578
   14ab8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14abc:	460b      	mov	r3, r1
   14abe:	005b      	lsls	r3, r3, #1
   14ac0:	440b      	add	r3, r1
   14ac2:	009b      	lsls	r3, r3, #2
   14ac4:	4413      	add	r3, r2
   14ac6:	681b      	ldr	r3, [r3, #0]
   14ac8:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   14aca:	79f9      	ldrb	r1, [r7, #7]
   14acc:	f240 5278 	movw	r2, #1400	; 0x578
   14ad0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ad4:	460b      	mov	r3, r1
   14ad6:	005b      	lsls	r3, r3, #1
   14ad8:	440b      	add	r3, r1
   14ada:	009b      	lsls	r3, r3, #2
   14adc:	4413      	add	r3, r2
   14ade:	3304      	adds	r3, #4
   14ae0:	681b      	ldr	r3, [r3, #0]
   14ae2:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   14ae4:	79b9      	ldrb	r1, [r7, #6]
   14ae6:	f240 5278 	movw	r2, #1400	; 0x578
   14aea:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14aee:	460b      	mov	r3, r1
   14af0:	005b      	lsls	r3, r3, #1
   14af2:	440b      	add	r3, r1
   14af4:	009b      	lsls	r3, r3, #2
   14af6:	4413      	add	r3, r2
   14af8:	681b      	ldr	r3, [r3, #0]
   14afa:	4618      	mov	r0, r3
   14afc:	69f9      	ldr	r1, [r7, #28]
   14afe:	f003 fb69 	bl	181d4 <__aeabi_fsub>
   14b02:	4603      	mov	r3, r0
   14b04:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   14b06:	79b9      	ldrb	r1, [r7, #6]
   14b08:	f240 5278 	movw	r2, #1400	; 0x578
   14b0c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b10:	460b      	mov	r3, r1
   14b12:	005b      	lsls	r3, r3, #1
   14b14:	440b      	add	r3, r1
   14b16:	009b      	lsls	r3, r3, #2
   14b18:	4413      	add	r3, r2
   14b1a:	3304      	adds	r3, #4
   14b1c:	681b      	ldr	r3, [r3, #0]
   14b1e:	4618      	mov	r0, r3
   14b20:	69b9      	ldr	r1, [r7, #24]
   14b22:	f003 fb57 	bl	181d4 <__aeabi_fsub>
   14b26:	4603      	mov	r3, r0
   14b28:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   14b2a:	6978      	ldr	r0, [r7, #20]
   14b2c:	6979      	ldr	r1, [r7, #20]
   14b2e:	f003 fc5b 	bl	183e8 <__aeabi_fmul>
   14b32:	4603      	mov	r3, r0
   14b34:	461c      	mov	r4, r3
   14b36:	6938      	ldr	r0, [r7, #16]
   14b38:	6939      	ldr	r1, [r7, #16]
   14b3a:	f003 fc55 	bl	183e8 <__aeabi_fmul>
   14b3e:	4603      	mov	r3, r0
   14b40:	4620      	mov	r0, r4
   14b42:	4619      	mov	r1, r3
   14b44:	f003 fb48 	bl	181d8 <__addsf3>
   14b48:	4603      	mov	r3, r0
   14b4a:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   14b4c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b54:	681b      	ldr	r3, [r3, #0]
   14b56:	4618      	mov	r0, r3
   14b58:	69f9      	ldr	r1, [r7, #28]
   14b5a:	f003 fb3b 	bl	181d4 <__aeabi_fsub>
   14b5e:	4603      	mov	r3, r0
   14b60:	4618      	mov	r0, r3
   14b62:	6979      	ldr	r1, [r7, #20]
   14b64:	f003 fc40 	bl	183e8 <__aeabi_fmul>
   14b68:	4603      	mov	r3, r0
   14b6a:	461c      	mov	r4, r3
   14b6c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b74:	681b      	ldr	r3, [r3, #0]
   14b76:	4618      	mov	r0, r3
   14b78:	69b9      	ldr	r1, [r7, #24]
   14b7a:	f003 fb2b 	bl	181d4 <__aeabi_fsub>
   14b7e:	4603      	mov	r3, r0
   14b80:	4618      	mov	r0, r3
   14b82:	6939      	ldr	r1, [r7, #16]
   14b84:	f003 fc30 	bl	183e8 <__aeabi_fmul>
   14b88:	4603      	mov	r3, r0
   14b8a:	4620      	mov	r0, r4
   14b8c:	4619      	mov	r1, r3
   14b8e:	f003 fb23 	bl	181d8 <__addsf3>
   14b92:	4603      	mov	r3, r0
   14b94:	4618      	mov	r0, r3
   14b96:	68f9      	ldr	r1, [r7, #12]
   14b98:	f003 fcda 	bl	18550 <__aeabi_fdiv>
   14b9c:	4603      	mov	r3, r0
   14b9e:	461a      	mov	r2, r3
   14ba0:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ba8:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   14baa:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bb2:	681b      	ldr	r3, [r3, #0]
   14bb4:	4618      	mov	r0, r3
   14bb6:	f04f 0100 	mov.w	r1, #0
   14bba:	f003 fdc7 	bl	1874c <__aeabi_fcmpge>
   14bbe:	4603      	mov	r3, r0
   14bc0:	2b00      	cmp	r3, #0
   14bc2:	d005      	beq.n	14bd0 <route_to+0x12c>
   14bc4:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bcc:	681a      	ldr	r2, [r3, #0]
   14bce:	e001      	b.n	14bd4 <route_to+0x130>
   14bd0:	f04f 0200 	mov.w	r2, #0
   14bd4:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bdc:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   14bde:	68f8      	ldr	r0, [r7, #12]
   14be0:	f002 ff6e 	bl	17ac0 <__aeabi_f2d>
   14be4:	4602      	mov	r2, r0
   14be6:	460b      	mov	r3, r1
   14be8:	4610      	mov	r0, r2
   14bea:	4619      	mov	r1, r3
   14bec:	f001 f9f4 	bl	15fd8 <pp_sqrt>
   14bf0:	4602      	mov	r2, r0
   14bf2:	460b      	mov	r3, r1
   14bf4:	4610      	mov	r0, r2
   14bf6:	4619      	mov	r1, r3
   14bf8:	f003 fa98 	bl	1812c <__aeabi_d2f>
   14bfc:	4602      	mov	r2, r0
   14bfe:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   14c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c06:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14c08:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c10:	681b      	ldr	r3, [r3, #0]
   14c12:	4618      	mov	r0, r3
   14c14:	f002 ff54 	bl	17ac0 <__aeabi_f2d>
   14c18:	4604      	mov	r4, r0
   14c1a:	460d      	mov	r5, r1
   14c1c:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c24:	681a      	ldr	r2, [r3, #0]
   14c26:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   14c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c2e:	681b      	ldr	r3, [r3, #0]
   14c30:	4610      	mov	r0, r2
   14c32:	4619      	mov	r1, r3
   14c34:	f003 fc8c 	bl	18550 <__aeabi_fdiv>
   14c38:	4603      	mov	r3, r0
   14c3a:	4618      	mov	r0, r3
   14c3c:	f04f 0100 	mov.w	r1, #0
   14c40:	f003 fd84 	bl	1874c <__aeabi_fcmpge>
   14c44:	4603      	mov	r3, r0
   14c46:	2b00      	cmp	r3, #0
   14c48:	d014      	beq.n	14c74 <route_to+0x1d0>
   14c4a:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14c4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c52:	681a      	ldr	r2, [r3, #0]
   14c54:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   14c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c5c:	681b      	ldr	r3, [r3, #0]
   14c5e:	4610      	mov	r0, r2
   14c60:	4619      	mov	r1, r3
   14c62:	f003 fc75 	bl	18550 <__aeabi_fdiv>
   14c66:	4603      	mov	r3, r0
   14c68:	4618      	mov	r0, r3
   14c6a:	f002 ff29 	bl	17ac0 <__aeabi_f2d>
   14c6e:	4602      	mov	r2, r0
   14c70:	460b      	mov	r3, r1
   14c72:	e003      	b.n	14c7c <route_to+0x1d8>
   14c74:	f04f 0200 	mov.w	r2, #0
   14c78:	f04f 0300 	mov.w	r3, #0
   14c7c:	4620      	mov	r0, r4
   14c7e:	4629      	mov	r1, r5
   14c80:	f002 fdc0 	bl	17804 <__adddf3>
   14c84:	4602      	mov	r2, r0
   14c86:	460b      	mov	r3, r1
   14c88:	4610      	mov	r0, r2
   14c8a:	4619      	mov	r1, r3
   14c8c:	f003 fa4e 	bl	1812c <__aeabi_d2f>
   14c90:	4602      	mov	r2, r0
   14c92:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14c96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c9a:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   14c9c:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ca4:	681b      	ldr	r3, [r3, #0]
   14ca6:	4618      	mov	r0, r3
   14ca8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14cac:	f003 fd4e 	bl	1874c <__aeabi_fcmpge>
   14cb0:	4603      	mov	r3, r0
   14cb2:	2b00      	cmp	r3, #0
   14cb4:	d002      	beq.n	14cbc <route_to+0x218>
   14cb6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   14cba:	e004      	b.n	14cc6 <route_to+0x222>
   14cbc:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14cc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cc4:	681a      	ldr	r2, [r3, #0]
   14cc6:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14cca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cce:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   14cd0:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cd8:	681b      	ldr	r3, [r3, #0]
   14cda:	4618      	mov	r0, r3
   14cdc:	6979      	ldr	r1, [r7, #20]
   14cde:	f003 fb83 	bl	183e8 <__aeabi_fmul>
   14ce2:	4603      	mov	r3, r0
   14ce4:	4618      	mov	r0, r3
   14ce6:	69f9      	ldr	r1, [r7, #28]
   14ce8:	f003 fa76 	bl	181d8 <__addsf3>
   14cec:	4603      	mov	r3, r0
   14cee:	461c      	mov	r4, r3
   14cf0:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cf8:	681b      	ldr	r3, [r3, #0]
   14cfa:	4618      	mov	r0, r3
   14cfc:	6939      	ldr	r1, [r7, #16]
   14cfe:	f003 fb73 	bl	183e8 <__aeabi_fmul>
   14d02:	4603      	mov	r3, r0
   14d04:	4618      	mov	r0, r3
   14d06:	69b9      	ldr	r1, [r7, #24]
   14d08:	f003 fa66 	bl	181d8 <__addsf3>
   14d0c:	4603      	mov	r3, r0
   14d0e:	4620      	mov	r0, r4
   14d10:	4619      	mov	r1, r3
   14d12:	f7ff fe55 	bl	149c0 <fly_to_xy>
}
   14d16:	3720      	adds	r7, #32
   14d18:	46bd      	mov	sp, r7
   14d1a:	bdb0      	pop	{r4, r5, r7, pc}

00014d1c <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   14d1c:	b590      	push	{r4, r7, lr}
   14d1e:	b083      	sub	sp, #12
   14d20:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   14d22:	f240 5378 	movw	r3, #1400	; 0x578
   14d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d2a:	681a      	ldr	r2, [r3, #0]
   14d2c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14d30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d34:	681b      	ldr	r3, [r3, #0]
   14d36:	4610      	mov	r0, r2
   14d38:	4619      	mov	r1, r3
   14d3a:	f003 fa4b 	bl	181d4 <__aeabi_fsub>
   14d3e:	4603      	mov	r3, r0
   14d40:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   14d42:	f240 5378 	movw	r3, #1400	; 0x578
   14d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d4a:	685a      	ldr	r2, [r3, #4]
   14d4c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d54:	681b      	ldr	r3, [r3, #0]
   14d56:	4610      	mov	r0, r2
   14d58:	4619      	mov	r1, r3
   14d5a:	f003 fa3b 	bl	181d4 <__aeabi_fsub>
   14d5e:	4603      	mov	r3, r0
   14d60:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   14d62:	6878      	ldr	r0, [r7, #4]
   14d64:	6879      	ldr	r1, [r7, #4]
   14d66:	f003 fb3f 	bl	183e8 <__aeabi_fmul>
   14d6a:	4603      	mov	r3, r0
   14d6c:	461c      	mov	r4, r3
   14d6e:	6838      	ldr	r0, [r7, #0]
   14d70:	6839      	ldr	r1, [r7, #0]
   14d72:	f003 fb39 	bl	183e8 <__aeabi_fmul>
   14d76:	4603      	mov	r3, r0
   14d78:	4620      	mov	r0, r4
   14d7a:	4619      	mov	r1, r3
   14d7c:	f003 fa2c 	bl	181d8 <__addsf3>
   14d80:	4603      	mov	r3, r0
   14d82:	461a      	mov	r2, r3
   14d84:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
   14d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d8c:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   14d8e:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
   14d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d96:	681b      	ldr	r3, [r3, #0]
   14d98:	2201      	movs	r2, #1
   14d9a:	4614      	mov	r4, r2
   14d9c:	4618      	mov	r0, r3
   14d9e:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   14da2:	f6c4 0174 	movt	r1, #18548	; 0x4874
   14da6:	f003 fcdb 	bl	18760 <__aeabi_fcmpgt>
   14daa:	4603      	mov	r3, r0
   14dac:	2b00      	cmp	r3, #0
   14dae:	d101      	bne.n	14db4 <compute_dist2_to_home+0x98>
   14db0:	2300      	movs	r3, #0
   14db2:	461c      	mov	r4, r3
   14db4:	b2e3      	uxtb	r3, r4
   14db6:	461a      	mov	r2, r3
   14db8:	f24c 63ac 	movw	r3, #50860	; 0xc6ac
   14dbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14dc0:	701a      	strb	r2, [r3, #0]
}
   14dc2:	370c      	adds	r7, #12
   14dc4:	46bd      	mov	sp, r7
   14dc6:	bd90      	pop	{r4, r7, pc}

00014dc8 <nav_home>:

void nav_home(void) {
   14dc8:	b580      	push	{r7, lr}
   14dca:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   14dcc:	f24c 639c 	movw	r3, #50844	; 0xc69c
   14dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14dd4:	f04f 0200 	mov.w	r2, #0
   14dd8:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14dda:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   14dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14de2:	2203      	movs	r2, #3
   14de4:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   14de6:	f240 5374 	movw	r3, #1396	; 0x574
   14dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dee:	f04f 0200 	mov.w	r2, #0
   14df2:	f2c4 322f 	movt	r2, #17199	; 0x432f
   14df6:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14df8:	f7ff ff90 	bl	14d1c <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   14dfc:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
   14e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e04:	681a      	ldr	r2, [r3, #0]
   14e06:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
   14e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e0e:	601a      	str	r2, [r3, #0]
}
   14e10:	bd80      	pop	{r7, pc}
   14e12:	bf00      	nop

00014e14 <nav_update>:

void nav_update(void) {
   14e14:	b580      	push	{r7, lr}
   14e16:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14e18:	f7ff ff80 	bl	14d1c <compute_dist2_to_home>

  auto_nav();
   14e1c:	f7fd fc0c 	bl	12638 <auto_nav>
}
   14e20:	bd80      	pop	{r7, pc}
   14e22:	bf00      	nop

00014e24 <nav_init>:


void nav_init(void) {
   14e24:	b480      	push	{r7}
   14e26:	af00      	add	r7, sp, #0
  nav_block = 0;
   14e28:	f24c 6371 	movw	r3, #50801	; 0xc671
   14e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e30:	2200      	movs	r2, #0
   14e32:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   14e34:	f24c 6370 	movw	r3, #50800	; 0xc670
   14e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e3c:	2200      	movs	r2, #0
   14e3e:	701a      	strb	r2, [r3, #0]
}
   14e40:	46bd      	mov	sp, r7
   14e42:	f85d 7b04 	ldr.w	r7, [sp], #4
   14e46:	4770      	bx	lr

00014e48 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14e48:	b480      	push	{r7}
   14e4a:	b083      	sub	sp, #12
   14e4c:	af00      	add	r7, sp, #0
   14e4e:	4603      	mov	r3, r0
   14e50:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   14e52:	f242 030a 	movw	r3, #8202	; 0x200a
   14e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e5a:	781b      	ldrb	r3, [r3, #0]
   14e5c:	b2db      	uxtb	r3, r3
   14e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14e62:	2b00      	cmp	r3, #0
   14e64:	d028      	beq.n	14eb8 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   14e66:	f24c 63c5 	movw	r3, #50885	; 0xc6c5
   14e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e6e:	781b      	ldrb	r3, [r3, #0]
   14e70:	b2db      	uxtb	r3, r3
   14e72:	461a      	mov	r2, r3
   14e74:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14e78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e7c:	781b      	ldrb	r3, [r3, #0]
   14e7e:	3301      	adds	r3, #1
   14e80:	429a      	cmp	r2, r3
   14e82:	d100      	bne.n	14e86 <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14e84:	e02c      	b.n	14ee0 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   14e86:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e8e:	781b      	ldrb	r3, [r3, #0]
   14e90:	461a      	mov	r2, r3
   14e92:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
   14e96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e9a:	79f9      	ldrb	r1, [r7, #7]
   14e9c:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   14e9e:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14ea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ea6:	781b      	ldrb	r3, [r3, #0]
   14ea8:	3301      	adds	r3, #1
   14eaa:	b2da      	uxtb	r2, r3
   14eac:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14eb4:	701a      	strb	r2, [r3, #0]
   14eb6:	e013      	b.n	14ee0 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   14eb8:	f242 030c 	movw	r3, #8204	; 0x200c
   14ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ec0:	79fa      	ldrb	r2, [r7, #7]
   14ec2:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   14ec4:	f242 030a 	movw	r3, #8202	; 0x200a
   14ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ecc:	f242 020a 	movw	r2, #8202	; 0x200a
   14ed0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ed4:	7812      	ldrb	r2, [r2, #0]
   14ed6:	b2d2      	uxtb	r2, r2
   14ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14edc:	b2d2      	uxtb	r2, r2
   14ede:	701a      	strb	r2, [r3, #0]
  }
}
   14ee0:	370c      	adds	r7, #12
   14ee2:	46bd      	mov	sp, r7
   14ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
   14ee8:	4770      	bx	lr
   14eea:	bf00      	nop

00014eec <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   14eec:	b480      	push	{r7}
   14eee:	b083      	sub	sp, #12
   14ef0:	af00      	add	r7, sp, #0
   14ef2:	4603      	mov	r3, r0
   14ef4:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   14ef6:	f242 039a 	movw	r3, #8346	; 0x209a
   14efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14efe:	781b      	ldrb	r3, [r3, #0]
   14f00:	b2db      	uxtb	r3, r3
   14f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14f06:	2b00      	cmp	r3, #0
   14f08:	d028      	beq.n	14f5c <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   14f0a:	f24c 73c9 	movw	r3, #51145	; 0xc7c9
   14f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f12:	781b      	ldrb	r3, [r3, #0]
   14f14:	b2db      	uxtb	r3, r3
   14f16:	461a      	mov	r2, r3
   14f18:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   14f1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f20:	781b      	ldrb	r3, [r3, #0]
   14f22:	3301      	adds	r3, #1
   14f24:	429a      	cmp	r2, r3
   14f26:	d100      	bne.n	14f2a <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14f28:	e02c      	b.n	14f84 <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   14f2a:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   14f2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f32:	781b      	ldrb	r3, [r3, #0]
   14f34:	461a      	mov	r2, r3
   14f36:	f24c 73cc 	movw	r3, #51148	; 0xc7cc
   14f3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f3e:	79f9      	ldrb	r1, [r7, #7]
   14f40:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   14f42:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   14f46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f4a:	781b      	ldrb	r3, [r3, #0]
   14f4c:	3301      	adds	r3, #1
   14f4e:	b2da      	uxtb	r2, r3
   14f50:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   14f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f58:	701a      	strb	r2, [r3, #0]
   14f5a:	e013      	b.n	14f84 <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   14f5c:	f242 039c 	movw	r3, #8348	; 0x209c
   14f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f64:	79fa      	ldrb	r2, [r7, #7]
   14f66:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   14f68:	f242 039a 	movw	r3, #8346	; 0x209a
   14f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f70:	f242 029a 	movw	r2, #8346	; 0x209a
   14f74:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14f78:	7812      	ldrb	r2, [r2, #0]
   14f7a:	b2d2      	uxtb	r2, r2
   14f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14f80:	b2d2      	uxtb	r2, r2
   14f82:	701a      	strb	r2, [r3, #0]
  }
}
   14f84:	370c      	adds	r7, #12
   14f86:	46bd      	mov	sp, r7
   14f88:	f85d 7b04 	ldr.w	r7, [sp], #4
   14f8c:	4770      	bx	lr
   14f8e:	bf00      	nop

00014f90 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   14f90:	b580      	push	{r7, lr}
   14f92:	b084      	sub	sp, #16
   14f94:	af00      	add	r7, sp, #0
   14f96:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   14f98:	2300      	movs	r3, #0
   14f9a:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   14f9c:	e009      	b.n	14fb2 <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   14f9e:	7bfb      	ldrb	r3, [r7, #15]
   14fa0:	687a      	ldr	r2, [r7, #4]
   14fa2:	4413      	add	r3, r2
   14fa4:	781b      	ldrb	r3, [r3, #0]
   14fa6:	4618      	mov	r0, r3
   14fa8:	f7ff ff4e 	bl	14e48 <uart0_transmit>
    i++;
   14fac:	7bfb      	ldrb	r3, [r7, #15]
   14fae:	3301      	adds	r3, #1
   14fb0:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   14fb2:	7bfb      	ldrb	r3, [r7, #15]
   14fb4:	687a      	ldr	r2, [r7, #4]
   14fb6:	4413      	add	r3, r2
   14fb8:	781b      	ldrb	r3, [r3, #0]
   14fba:	2b00      	cmp	r3, #0
   14fbc:	d1ef      	bne.n	14f9e <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   14fbe:	3710      	adds	r7, #16
   14fc0:	46bd      	mov	sp, r7
   14fc2:	bd80      	pop	{r7, pc}

00014fc4 <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   14fc4:	b590      	push	{r4, r7, lr}
   14fc6:	b089      	sub	sp, #36	; 0x24
   14fc8:	af00      	add	r7, sp, #0
   14fca:	4603      	mov	r3, r0
   14fcc:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   14fce:	f648 13f4 	movw	r3, #35316	; 0x89f4
   14fd2:	f2c0 0301 	movt	r3, #1
   14fd6:	f107 040c 	add.w	r4, r7, #12
   14fda:	6818      	ldr	r0, [r3, #0]
   14fdc:	6859      	ldr	r1, [r3, #4]
   14fde:	689a      	ldr	r2, [r3, #8]
   14fe0:	68db      	ldr	r3, [r3, #12]
   14fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   14fe4:	79fb      	ldrb	r3, [r7, #7]
   14fe6:	091b      	lsrs	r3, r3, #4
   14fe8:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   14fea:	79fb      	ldrb	r3, [r7, #7]
   14fec:	f003 030f 	and.w	r3, r3, #15
   14ff0:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   14ff2:	230f      	movs	r3, #15
   14ff4:	77fb      	strb	r3, [r7, #31]
    low = 15;
   14ff6:	230f      	movs	r3, #15
   14ff8:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   14ffa:	7ffb      	ldrb	r3, [r7, #31]
   14ffc:	f107 0220 	add.w	r2, r7, #32
   15000:	4413      	add	r3, r2
   15002:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   15006:	4618      	mov	r0, r3
   15008:	f7ff ff1e 	bl	14e48 <uart0_transmit>
  uart0_transmit(hex[low]);
   1500c:	7fbb      	ldrb	r3, [r7, #30]
   1500e:	f107 0220 	add.w	r2, r7, #32
   15012:	4413      	add	r3, r2
   15014:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   15018:	4618      	mov	r0, r3
   1501a:	f7ff ff15 	bl	14e48 <uart0_transmit>
}
   1501e:	3724      	adds	r7, #36	; 0x24
   15020:	46bd      	mov	sp, r7
   15022:	bd90      	pop	{r4, r7, pc}

00015024 <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   15024:	b480      	push	{r7}
   15026:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   15028:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   1502c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15030:	781a      	ldrb	r2, [r3, #0]
   15032:	f24c 63c5 	movw	r3, #50885	; 0xc6c5
   15036:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1503a:	781b      	ldrb	r3, [r3, #0]
   1503c:	b2db      	uxtb	r3, r3
   1503e:	429a      	cmp	r2, r3
   15040:	d10e      	bne.n	15060 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   15042:	f242 030a 	movw	r3, #8202	; 0x200a
   15046:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1504a:	f242 020a 	movw	r2, #8202	; 0x200a
   1504e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15052:	7812      	ldrb	r2, [r2, #0]
   15054:	b2d2      	uxtb	r2, r2
   15056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1505a:	b2d2      	uxtb	r2, r2
   1505c:	701a      	strb	r2, [r3, #0]
   1505e:	e01d      	b.n	1509c <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   15060:	f242 030c 	movw	r3, #8204	; 0x200c
   15064:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15068:	f24c 62c5 	movw	r2, #50885	; 0xc6c5
   1506c:	f2c2 0204 	movt	r2, #8196	; 0x2004
   15070:	7812      	ldrb	r2, [r2, #0]
   15072:	b2d2      	uxtb	r2, r2
   15074:	4611      	mov	r1, r2
   15076:	f24c 62c8 	movw	r2, #50888	; 0xc6c8
   1507a:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1507e:	5c52      	ldrb	r2, [r2, r1]
   15080:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   15082:	f24c 63c5 	movw	r3, #50885	; 0xc6c5
   15086:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1508a:	781b      	ldrb	r3, [r3, #0]
   1508c:	b2db      	uxtb	r3, r3
   1508e:	3301      	adds	r3, #1
   15090:	b2da      	uxtb	r2, r3
   15092:	f24c 63c5 	movw	r3, #50885	; 0xc6c5
   15096:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1509a:	701a      	strb	r2, [r3, #0]
  }
}
   1509c:	46bd      	mov	sp, r7
   1509e:	f85d 7b04 	ldr.w	r7, [sp], #4
   150a2:	4770      	bx	lr

000150a4 <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   150a4:	b480      	push	{r7}
   150a6:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   150a8:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   150ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150b0:	781a      	ldrb	r2, [r3, #0]
   150b2:	f24c 73c9 	movw	r3, #51145	; 0xc7c9
   150b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150ba:	781b      	ldrb	r3, [r3, #0]
   150bc:	b2db      	uxtb	r3, r3
   150be:	429a      	cmp	r2, r3
   150c0:	d10e      	bne.n	150e0 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   150c2:	f242 039a 	movw	r3, #8346	; 0x209a
   150c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150ca:	f242 029a 	movw	r2, #8346	; 0x209a
   150ce:	f2c2 0200 	movt	r2, #8192	; 0x2000
   150d2:	7812      	ldrb	r2, [r2, #0]
   150d4:	b2d2      	uxtb	r2, r2
   150d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   150da:	b2d2      	uxtb	r2, r2
   150dc:	701a      	strb	r2, [r3, #0]
   150de:	e01d      	b.n	1511c <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   150e0:	f242 039c 	movw	r3, #8348	; 0x209c
   150e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150e8:	f24c 72c9 	movw	r2, #51145	; 0xc7c9
   150ec:	f2c2 0204 	movt	r2, #8196	; 0x2004
   150f0:	7812      	ldrb	r2, [r2, #0]
   150f2:	b2d2      	uxtb	r2, r2
   150f4:	4611      	mov	r1, r2
   150f6:	f24c 72cc 	movw	r2, #51148	; 0xc7cc
   150fa:	f2c2 0204 	movt	r2, #8196	; 0x2004
   150fe:	5c52      	ldrb	r2, [r2, r1]
   15100:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   15102:	f24c 73c9 	movw	r3, #51145	; 0xc7c9
   15106:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1510a:	781b      	ldrb	r3, [r3, #0]
   1510c:	b2db      	uxtb	r3, r3
   1510e:	3301      	adds	r3, #1
   15110:	b2da      	uxtb	r2, r3
   15112:	f24c 73c9 	movw	r3, #51145	; 0xc7c9
   15116:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1511a:	701a      	strb	r2, [r3, #0]
  }
}
   1511c:	46bd      	mov	sp, r7
   1511e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15122:	4770      	bx	lr

00015124 <uart0_init>:

void uart0_init( void ) {
   15124:	b480      	push	{r7}
   15126:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   15128:	f242 0390 	movw	r3, #8336	; 0x2090
   1512c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15130:	2200      	movs	r2, #0
   15132:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   15134:	f242 0309 	movw	r3, #8201	; 0x2009
   15138:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1513c:	2219      	movs	r2, #25
   1513e:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   15140:	f242 030b 	movw	r3, #8203	; 0x200b
   15144:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15148:	2200      	movs	r2, #0
   1514a:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   1514c:	f242 030a 	movw	r3, #8202	; 0x200a
   15150:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15154:	2218      	movs	r2, #24
   15156:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   15158:	f242 0395 	movw	r3, #8341	; 0x2095
   1515c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15160:	2206      	movs	r2, #6
   15162:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   15164:	f242 030a 	movw	r3, #8202	; 0x200a
   15168:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1516c:	f242 020a 	movw	r2, #8202	; 0x200a
   15170:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15174:	7812      	ldrb	r2, [r2, #0]
   15176:	b2d2      	uxtb	r2, r2
   15178:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1517c:	b2d2      	uxtb	r2, r2
   1517e:	701a      	strb	r2, [r3, #0]
}
   15180:	46bd      	mov	sp, r7
   15182:	f85d 7b04 	ldr.w	r7, [sp], #4
   15186:	4770      	bx	lr

00015188 <uart1_init>:

void uart1_init( void ) {
   15188:	b480      	push	{r7}
   1518a:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   1518c:	f242 0398 	movw	r3, #8344	; 0x2098
   15190:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15194:	2200      	movs	r2, #0
   15196:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   15198:	f242 0399 	movw	r3, #8345	; 0x2099
   1519c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151a0:	2219      	movs	r2, #25
   151a2:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   151a4:	f242 039b 	movw	r3, #8347	; 0x209b
   151a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151ac:	2200      	movs	r2, #0
   151ae:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   151b0:	f242 039a 	movw	r3, #8346	; 0x209a
   151b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151b8:	2218      	movs	r2, #24
   151ba:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   151bc:	f242 039d 	movw	r3, #8349	; 0x209d
   151c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151c4:	2206      	movs	r2, #6
   151c6:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   151c8:	f242 039a 	movw	r3, #8346	; 0x209a
   151cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151d0:	f242 029a 	movw	r2, #8346	; 0x209a
   151d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   151d8:	7812      	ldrb	r2, [r2, #0]
   151da:	b2d2      	uxtb	r2, r2
   151dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
   151e0:	b2d2      	uxtb	r2, r2
   151e2:	701a      	strb	r2, [r3, #0]
}
   151e4:	46bd      	mov	sp, r7
   151e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   151ea:	4770      	bx	lr
   151ec:	0000      	movs	r0, r0
	...

000151f0 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   151f0:	b480      	push	{r7}
   151f2:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   151f4:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   151f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151fc:	f04f 0200 	mov.w	r2, #0
   15200:	601a      	str	r2, [r3, #0]
   15202:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   15206:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1520a:	f04f 0200 	mov.w	r2, #0
   1520e:	601a      	str	r2, [r3, #0]
   15210:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   15214:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15218:	f04f 0200 	mov.w	r2, #0
   1521c:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   1521e:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   15222:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15226:	f04f 0200 	mov.w	r2, #0
   1522a:	601a      	str	r2, [r3, #0]
   1522c:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
   15230:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15234:	f04f 0200 	mov.w	r2, #0
   15238:	601a      	str	r2, [r3, #0]
   1523a:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   1523e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15242:	f04f 0200 	mov.w	r2, #0
   15246:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   15248:	f64c 1304 	movw	r3, #51460	; 0xc904
   1524c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15250:	f04f 0200 	mov.w	r2, #0
   15254:	601a      	str	r2, [r3, #0]
   15256:	f64c 1308 	movw	r3, #51464	; 0xc908
   1525a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1525e:	f04f 0200 	mov.w	r2, #0
   15262:	601a      	str	r2, [r3, #0]
   15264:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   15268:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1526c:	f04f 0200 	mov.w	r2, #0
   15270:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   15272:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   15276:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1527a:	f04f 0200 	mov.w	r2, #0
   1527e:	601a      	str	r2, [r3, #0]
   15280:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   15284:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15288:	f04f 0200 	mov.w	r2, #0
   1528c:	601a      	str	r2, [r3, #0]
   1528e:	f64c 03f8 	movw	r3, #51448	; 0xc8f8
   15292:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15296:	f04f 0200 	mov.w	r2, #0
   1529a:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   1529c:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   152a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152a4:	2200      	movs	r2, #0
   152a6:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   152a8:	f240 5348 	movw	r3, #1352	; 0x548
   152ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152b0:	681a      	ldr	r2, [r3, #0]
   152b2:	f64c 130c 	movw	r3, #51468	; 0xc90c
   152b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152ba:	601a      	str	r2, [r3, #0]
}
   152bc:	46bd      	mov	sp, r7
   152be:	f85d 7b04 	ldr.w	r7, [sp], #4
   152c2:	4770      	bx	lr

000152c4 <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   152c4:	b580      	push	{r7, lr}
   152c6:	b082      	sub	sp, #8
   152c8:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   152ca:	f240 533c 	movw	r3, #1340	; 0x53c
   152ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152d2:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   152d4:	2b01      	cmp	r3, #1
   152d6:	d105      	bne.n	152e4 <estimator_update_state_infrared+0x20>
   152d8:	f64c 130c 	movw	r3, #51468	; 0xc90c
   152dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152e0:	681b      	ldr	r3, [r3, #0]
   152e2:	e004      	b.n	152ee <estimator_update_state_infrared+0x2a>
   152e4:	f240 5348 	movw	r3, #1352	; 0x548
   152e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152ec:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   152ee:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   152f0:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   152f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152f8:	881b      	ldrh	r3, [r3, #0]
   152fa:	b21b      	sxth	r3, r3
   152fc:	4618      	mov	r0, r3
   152fe:	f003 f81f 	bl	18340 <__aeabi_i2f>
   15302:	4603      	mov	r3, r0
   15304:	4618      	mov	r0, r3
   15306:	6879      	ldr	r1, [r7, #4]
   15308:	f003 f86e 	bl	183e8 <__aeabi_fmul>
   1530c:	4603      	mov	r3, r0
   1530e:	461a      	mov	r2, r3
   15310:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   15314:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15318:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   1531a:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
   1531e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15322:	881b      	ldrh	r3, [r3, #0]
   15324:	b21b      	sxth	r3, r3
   15326:	4618      	mov	r0, r3
   15328:	f003 f80a 	bl	18340 <__aeabi_i2f>
   1532c:	4603      	mov	r3, r0
   1532e:	4618      	mov	r0, r3
   15330:	6879      	ldr	r1, [r7, #4]
   15332:	f003 f859 	bl	183e8 <__aeabi_fmul>
   15336:	4603      	mov	r3, r0
   15338:	461a      	mov	r2, r3
   1533a:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   1533e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15342:	601a      	str	r2, [r3, #0]
}
   15344:	3708      	adds	r7, #8
   15346:	46bd      	mov	sp, r7
   15348:	bd80      	pop	{r7, pc}
   1534a:	bf00      	nop

0001534c <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   1534c:	b5b0      	push	{r4, r5, r7, lr}
   1534e:	b084      	sub	sp, #16
   15350:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   15352:	f64c 1318 	movw	r3, #51480	; 0xc918
   15356:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1535a:	781b      	ldrb	r3, [r3, #0]
   1535c:	2b00      	cmp	r3, #0
   1535e:	f000 81e8 	beq.w	15732 <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   15362:	f24c 4388 	movw	r3, #50312	; 0xc488
   15366:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1536a:	681a      	ldr	r2, [r3, #0]
   1536c:	f64c 131c 	movw	r3, #51484	; 0xc91c
   15370:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15374:	681b      	ldr	r3, [r3, #0]
   15376:	4610      	mov	r0, r2
   15378:	4619      	mov	r1, r3
   1537a:	f002 ff2b 	bl	181d4 <__aeabi_fsub>
   1537e:	4603      	mov	r3, r0
   15380:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   15382:	68b8      	ldr	r0, [r7, #8]
   15384:	f002 fb9c 	bl	17ac0 <__aeabi_f2d>
   15388:	4602      	mov	r2, r0
   1538a:	460b      	mov	r3, r1
   1538c:	4610      	mov	r0, r2
   1538e:	4619      	mov	r1, r3
   15390:	a385      	add	r3, pc, #532	; (adr r3, 155a8 <estimator_update_ir_estim+0x25c>)
   15392:	e9d3 2300 	ldrd	r2, r3, [r3]
   15396:	f002 fe77 	bl	18088 <__aeabi_dcmpgt>
   1539a:	4603      	mov	r3, r0
   1539c:	2b00      	cmp	r3, #0
   1539e:	d100      	bne.n	153a2 <estimator_update_ir_estim+0x56>
   153a0:	e219      	b.n	157d6 <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   153a2:	f64c 1308 	movw	r3, #51464	; 0xc908
   153a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153aa:	681a      	ldr	r2, [r3, #0]
   153ac:	f64c 1320 	movw	r3, #51488	; 0xc920
   153b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153b4:	681b      	ldr	r3, [r3, #0]
   153b6:	4610      	mov	r0, r2
   153b8:	4619      	mov	r1, r3
   153ba:	f002 ff0b 	bl	181d4 <__aeabi_fsub>
   153be:	4603      	mov	r3, r0
   153c0:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   153c2:	e013      	b.n	153ec <estimator_update_ir_estim+0xa0>
   153c4:	68f8      	ldr	r0, [r7, #12]
   153c6:	f002 fb7b 	bl	17ac0 <__aeabi_f2d>
   153ca:	4602      	mov	r2, r0
   153cc:	460b      	mov	r3, r1
   153ce:	4610      	mov	r0, r2
   153d0:	4619      	mov	r1, r3
   153d2:	a377      	add	r3, pc, #476	; (adr r3, 155b0 <estimator_update_ir_estim+0x264>)
   153d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   153d8:	f002 fa12 	bl	17800 <__aeabi_dsub>
   153dc:	4602      	mov	r2, r0
   153de:	460b      	mov	r3, r1
   153e0:	4610      	mov	r0, r2
   153e2:	4619      	mov	r1, r3
   153e4:	f002 fea2 	bl	1812c <__aeabi_d2f>
   153e8:	4603      	mov	r3, r0
   153ea:	60fb      	str	r3, [r7, #12]
   153ec:	68f8      	ldr	r0, [r7, #12]
   153ee:	f002 fb67 	bl	17ac0 <__aeabi_f2d>
   153f2:	4602      	mov	r2, r0
   153f4:	460b      	mov	r3, r1
   153f6:	4610      	mov	r0, r2
   153f8:	4619      	mov	r1, r3
   153fa:	a36f      	add	r3, pc, #444	; (adr r3, 155b8 <estimator_update_ir_estim+0x26c>)
   153fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   15400:	f002 fe42 	bl	18088 <__aeabi_dcmpgt>
   15404:	4603      	mov	r3, r0
   15406:	2b00      	cmp	r3, #0
   15408:	d1dc      	bne.n	153c4 <estimator_update_ir_estim+0x78>
   1540a:	e013      	b.n	15434 <estimator_update_ir_estim+0xe8>
   1540c:	68f8      	ldr	r0, [r7, #12]
   1540e:	f002 fb57 	bl	17ac0 <__aeabi_f2d>
   15412:	4602      	mov	r2, r0
   15414:	460b      	mov	r3, r1
   15416:	4610      	mov	r0, r2
   15418:	4619      	mov	r1, r3
   1541a:	a365      	add	r3, pc, #404	; (adr r3, 155b0 <estimator_update_ir_estim+0x264>)
   1541c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15420:	f002 f9f0 	bl	17804 <__adddf3>
   15424:	4602      	mov	r2, r0
   15426:	460b      	mov	r3, r1
   15428:	4610      	mov	r0, r2
   1542a:	4619      	mov	r1, r3
   1542c:	f002 fe7e 	bl	1812c <__aeabi_d2f>
   15430:	4603      	mov	r3, r0
   15432:	60fb      	str	r3, [r7, #12]
   15434:	68f8      	ldr	r0, [r7, #12]
   15436:	f002 fb43 	bl	17ac0 <__aeabi_f2d>
   1543a:	4602      	mov	r2, r0
   1543c:	460b      	mov	r3, r1
   1543e:	4610      	mov	r0, r2
   15440:	4619      	mov	r1, r3
   15442:	a35f      	add	r3, pc, #380	; (adr r3, 155c0 <estimator_update_ir_estim+0x274>)
   15444:	e9d3 2300 	ldrd	r2, r3, [r3]
   15448:	f002 fe00 	bl	1804c <__aeabi_dcmplt>
   1544c:	4603      	mov	r3, r0
   1544e:	2b00      	cmp	r3, #0
   15450:	d1dc      	bne.n	1540c <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   15452:	68f8      	ldr	r0, [r7, #12]
   15454:	68b9      	ldr	r1, [r7, #8]
   15456:	f003 f87b 	bl	18550 <__aeabi_fdiv>
   1545a:	4603      	mov	r3, r0
   1545c:	4618      	mov	r0, r3
   1545e:	f002 fb2f 	bl	17ac0 <__aeabi_f2d>
   15462:	4602      	mov	r2, r0
   15464:	460b      	mov	r3, r1
   15466:	4610      	mov	r0, r2
   15468:	4619      	mov	r1, r3
   1546a:	f04f 0200 	mov.w	r2, #0
   1546e:	f04f 0300 	mov.w	r3, #0
   15472:	f2c4 0324 	movt	r3, #16420	; 0x4024
   15476:	f002 fb77 	bl	17b68 <__aeabi_dmul>
   1547a:	4602      	mov	r2, r0
   1547c:	460b      	mov	r3, r1
   1547e:	4610      	mov	r0, r2
   15480:	4619      	mov	r1, r3
   15482:	a351      	add	r3, pc, #324	; (adr r3, 155c8 <estimator_update_ir_estim+0x27c>)
   15484:	e9d3 2300 	ldrd	r2, r3, [r3]
   15488:	f002 fc98 	bl	17dbc <__aeabi_ddiv>
   1548c:	4602      	mov	r2, r0
   1548e:	460b      	mov	r3, r1
   15490:	4610      	mov	r0, r2
   15492:	4619      	mov	r1, r3
   15494:	f002 fe4a 	bl	1812c <__aeabi_d2f>
   15498:	4603      	mov	r3, r0
   1549a:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   1549c:	e013      	b.n	154c6 <estimator_update_ir_estim+0x17a>
   1549e:	68f8      	ldr	r0, [r7, #12]
   154a0:	f002 fb0e 	bl	17ac0 <__aeabi_f2d>
   154a4:	4602      	mov	r2, r0
   154a6:	460b      	mov	r3, r1
   154a8:	4610      	mov	r0, r2
   154aa:	4619      	mov	r1, r3
   154ac:	a340      	add	r3, pc, #256	; (adr r3, 155b0 <estimator_update_ir_estim+0x264>)
   154ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   154b2:	f002 f9a5 	bl	17800 <__aeabi_dsub>
   154b6:	4602      	mov	r2, r0
   154b8:	460b      	mov	r3, r1
   154ba:	4610      	mov	r0, r2
   154bc:	4619      	mov	r1, r3
   154be:	f002 fe35 	bl	1812c <__aeabi_d2f>
   154c2:	4603      	mov	r3, r0
   154c4:	60fb      	str	r3, [r7, #12]
   154c6:	68f8      	ldr	r0, [r7, #12]
   154c8:	f002 fafa 	bl	17ac0 <__aeabi_f2d>
   154cc:	4602      	mov	r2, r0
   154ce:	460b      	mov	r3, r1
   154d0:	4610      	mov	r0, r2
   154d2:	4619      	mov	r1, r3
   154d4:	a338      	add	r3, pc, #224	; (adr r3, 155b8 <estimator_update_ir_estim+0x26c>)
   154d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   154da:	f002 fdd5 	bl	18088 <__aeabi_dcmpgt>
   154de:	4603      	mov	r3, r0
   154e0:	2b00      	cmp	r3, #0
   154e2:	d1dc      	bne.n	1549e <estimator_update_ir_estim+0x152>
   154e4:	e013      	b.n	1550e <estimator_update_ir_estim+0x1c2>
   154e6:	68f8      	ldr	r0, [r7, #12]
   154e8:	f002 faea 	bl	17ac0 <__aeabi_f2d>
   154ec:	4602      	mov	r2, r0
   154ee:	460b      	mov	r3, r1
   154f0:	4610      	mov	r0, r2
   154f2:	4619      	mov	r1, r3
   154f4:	a32e      	add	r3, pc, #184	; (adr r3, 155b0 <estimator_update_ir_estim+0x264>)
   154f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   154fa:	f002 f983 	bl	17804 <__adddf3>
   154fe:	4602      	mov	r2, r0
   15500:	460b      	mov	r3, r1
   15502:	4610      	mov	r0, r2
   15504:	4619      	mov	r1, r3
   15506:	f002 fe11 	bl	1812c <__aeabi_d2f>
   1550a:	4603      	mov	r3, r0
   1550c:	60fb      	str	r3, [r7, #12]
   1550e:	68f8      	ldr	r0, [r7, #12]
   15510:	f002 fad6 	bl	17ac0 <__aeabi_f2d>
   15514:	4602      	mov	r2, r0
   15516:	460b      	mov	r3, r1
   15518:	4610      	mov	r0, r2
   1551a:	4619      	mov	r1, r3
   1551c:	a328      	add	r3, pc, #160	; (adr r3, 155c0 <estimator_update_ir_estim+0x274>)
   1551e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15522:	f002 fd93 	bl	1804c <__aeabi_dcmplt>
   15526:	4603      	mov	r3, r0
   15528:	2b00      	cmp	r3, #0
   1552a:	d1dc      	bne.n	154e6 <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   1552c:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   15530:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15534:	881b      	ldrh	r3, [r3, #0]
   15536:	b21b      	sxth	r3, r3
   15538:	4618      	mov	r0, r3
   1553a:	f002 ff01 	bl	18340 <__aeabi_i2f>
   1553e:	4602      	mov	r2, r0
   15540:	f64c 1310 	movw	r3, #51472	; 0xc910
   15544:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15548:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   1554a:	f64c 1314 	movw	r3, #51476	; 0xc914
   1554e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15552:	68fa      	ldr	r2, [r7, #12]
   15554:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   15556:	68f8      	ldr	r0, [r7, #12]
   15558:	f04f 0100 	mov.w	r1, #0
   1555c:	f003 f8e2 	bl	18724 <__aeabi_fcmplt>
   15560:	4603      	mov	r3, r0
   15562:	2b00      	cmp	r3, #0
   15564:	d003      	beq.n	1556e <estimator_update_ir_estim+0x222>
   15566:	68fb      	ldr	r3, [r7, #12]
   15568:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   1556c:	e000      	b.n	15570 <estimator_update_ir_estim+0x224>
   1556e:	68fb      	ldr	r3, [r7, #12]
   15570:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   15572:	6878      	ldr	r0, [r7, #4]
   15574:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   15578:	f003 f8d4 	bl	18724 <__aeabi_fcmplt>
   1557c:	4603      	mov	r3, r0
   1557e:	2b00      	cmp	r3, #0
   15580:	d100      	bne.n	15584 <estimator_update_ir_estim+0x238>
   15582:	e128      	b.n	157d6 <estimator_update_ir_estim+0x48a>
   15584:	6878      	ldr	r0, [r7, #4]
   15586:	f002 fa9b 	bl	17ac0 <__aeabi_f2d>
   1558a:	4602      	mov	r2, r0
   1558c:	460b      	mov	r3, r1
   1558e:	4610      	mov	r0, r2
   15590:	4619      	mov	r1, r3
   15592:	a30f      	add	r3, pc, #60	; (adr r3, 155d0 <estimator_update_ir_estim+0x284>)
   15594:	e9d3 2300 	ldrd	r2, r3, [r3]
   15598:	f002 fd76 	bl	18088 <__aeabi_dcmpgt>
   1559c:	4603      	mov	r3, r0
   1559e:	2b00      	cmp	r3, #0
   155a0:	d11a      	bne.n	155d8 <estimator_update_ir_estim+0x28c>
   155a2:	e118      	b.n	157d6 <estimator_update_ir_estim+0x48a>
   155a4:	f3af 8000 	nop.w
   155a8:	9999999a 	.word	0x9999999a
   155ac:	3fb99999 	.word	0x3fb99999
   155b0:	54442d18 	.word	0x54442d18
   155b4:	401921fb 	.word	0x401921fb
   155b8:	54442d18 	.word	0x54442d18
   155bc:	400921fb 	.word	0x400921fb
   155c0:	54442d18 	.word	0x54442d18
   155c4:	c00921fb 	.word	0xc00921fb
   155c8:	51eb851f 	.word	0x51eb851f
   155cc:	40239eb8 	.word	0x40239eb8
   155d0:	9999999a 	.word	0x9999999a
   155d4:	3fa99999 	.word	0x3fa99999
   155d8:	f240 5340 	movw	r3, #1344	; 0x540
   155dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155e0:	881b      	ldrh	r3, [r3, #0]
   155e2:	b21b      	sxth	r3, r3
   155e4:	425b      	negs	r3, r3
   155e6:	0fda      	lsrs	r2, r3, #31
   155e8:	4413      	add	r3, r2
   155ea:	105b      	asrs	r3, r3, #1
   155ec:	461a      	mov	r2, r3
   155ee:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   155f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155f6:	881b      	ldrh	r3, [r3, #0]
   155f8:	b21b      	sxth	r3, r3
   155fa:	429a      	cmp	r2, r3
   155fc:	f280 8098 	bge.w	15730 <estimator_update_ir_estim+0x3e4>
   15600:	f240 5340 	movw	r3, #1344	; 0x540
   15604:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15608:	881b      	ldrh	r3, [r3, #0]
   1560a:	b21b      	sxth	r3, r3
   1560c:	0fda      	lsrs	r2, r3, #31
   1560e:	4413      	add	r3, r2
   15610:	105b      	asrs	r3, r3, #1
   15612:	b29a      	uxth	r2, r3
   15614:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   15618:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1561c:	881b      	ldrh	r3, [r3, #0]
   1561e:	b212      	sxth	r2, r2
   15620:	b21b      	sxth	r3, r3
   15622:	429a      	cmp	r2, r3
   15624:	f340 8084 	ble.w	15730 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   15628:	f64c 1314 	movw	r3, #51476	; 0xc914
   1562c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15630:	681a      	ldr	r2, [r3, #0]
   15632:	f64c 1310 	movw	r3, #51472	; 0xc910
   15636:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1563a:	681b      	ldr	r3, [r3, #0]
   1563c:	4610      	mov	r0, r2
   1563e:	4619      	mov	r1, r3
   15640:	f002 fed2 	bl	183e8 <__aeabi_fmul>
   15644:	4603      	mov	r3, r0
   15646:	4618      	mov	r0, r3
   15648:	f002 fa3a 	bl	17ac0 <__aeabi_f2d>
   1564c:	4604      	mov	r4, r0
   1564e:	460d      	mov	r5, r1
   15650:	f64c 1324 	movw	r3, #51492	; 0xc924
   15654:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15658:	681b      	ldr	r3, [r3, #0]
   1565a:	4618      	mov	r0, r3
   1565c:	f002 fa30 	bl	17ac0 <__aeabi_f2d>
   15660:	4602      	mov	r2, r0
   15662:	460b      	mov	r3, r1
   15664:	4610      	mov	r0, r2
   15666:	4619      	mov	r1, r3
   15668:	a367      	add	r3, pc, #412	; (adr r3, 15808 <estimator_update_ir_estim+0x4bc>)
   1566a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1566e:	f002 fa7b 	bl	17b68 <__aeabi_dmul>
   15672:	4602      	mov	r2, r0
   15674:	460b      	mov	r3, r1
   15676:	4620      	mov	r0, r4
   15678:	4629      	mov	r1, r5
   1567a:	f002 f8c3 	bl	17804 <__adddf3>
   1567e:	4602      	mov	r2, r0
   15680:	460b      	mov	r3, r1
   15682:	4610      	mov	r0, r2
   15684:	4619      	mov	r1, r3
   15686:	f002 fd51 	bl	1812c <__aeabi_d2f>
   1568a:	4602      	mov	r2, r0
   1568c:	f64c 1324 	movw	r3, #51492	; 0xc924
   15690:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15694:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   15696:	f64c 1310 	movw	r3, #51472	; 0xc910
   1569a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1569e:	681a      	ldr	r2, [r3, #0]
   156a0:	f64c 1310 	movw	r3, #51472	; 0xc910
   156a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156a8:	681b      	ldr	r3, [r3, #0]
   156aa:	4610      	mov	r0, r2
   156ac:	4619      	mov	r1, r3
   156ae:	f002 fe9b 	bl	183e8 <__aeabi_fmul>
   156b2:	4603      	mov	r3, r0
   156b4:	4618      	mov	r0, r3
   156b6:	f002 fa03 	bl	17ac0 <__aeabi_f2d>
   156ba:	4604      	mov	r4, r0
   156bc:	460d      	mov	r5, r1
   156be:	f64c 1328 	movw	r3, #51496	; 0xc928
   156c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156c6:	681b      	ldr	r3, [r3, #0]
   156c8:	4618      	mov	r0, r3
   156ca:	f002 f9f9 	bl	17ac0 <__aeabi_f2d>
   156ce:	4602      	mov	r2, r0
   156d0:	460b      	mov	r3, r1
   156d2:	4610      	mov	r0, r2
   156d4:	4619      	mov	r1, r3
   156d6:	a34c      	add	r3, pc, #304	; (adr r3, 15808 <estimator_update_ir_estim+0x4bc>)
   156d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   156dc:	f002 fa44 	bl	17b68 <__aeabi_dmul>
   156e0:	4602      	mov	r2, r0
   156e2:	460b      	mov	r3, r1
   156e4:	4620      	mov	r0, r4
   156e6:	4629      	mov	r1, r5
   156e8:	f002 f88c 	bl	17804 <__adddf3>
   156ec:	4602      	mov	r2, r0
   156ee:	460b      	mov	r3, r1
   156f0:	4610      	mov	r0, r2
   156f2:	4619      	mov	r1, r3
   156f4:	f002 fd1a 	bl	1812c <__aeabi_d2f>
   156f8:	4602      	mov	r2, r0
   156fa:	f64c 1328 	movw	r3, #51496	; 0xc928
   156fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15702:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   15704:	f64c 1324 	movw	r3, #51492	; 0xc924
   15708:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1570c:	681a      	ldr	r2, [r3, #0]
   1570e:	f64c 1328 	movw	r3, #51496	; 0xc928
   15712:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15716:	681b      	ldr	r3, [r3, #0]
   15718:	4610      	mov	r0, r2
   1571a:	4619      	mov	r1, r3
   1571c:	f002 ff18 	bl	18550 <__aeabi_fdiv>
   15720:	4603      	mov	r3, r0
   15722:	461a      	mov	r2, r3
   15724:	f64c 130c 	movw	r3, #51468	; 0xc90c
   15728:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1572c:	601a      	str	r2, [r3, #0]
   1572e:	e052      	b.n	157d6 <estimator_update_ir_estim+0x48a>
   15730:	e051      	b.n	157d6 <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   15732:	f64c 1318 	movw	r3, #51480	; 0xc918
   15736:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1573a:	2201      	movs	r2, #1
   1573c:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   1573e:	f240 5340 	movw	r3, #1344	; 0x540
   15742:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15746:	881b      	ldrh	r3, [r3, #0]
   15748:	b21b      	sxth	r3, r3
   1574a:	4618      	mov	r0, r3
   1574c:	f002 fdf8 	bl	18340 <__aeabi_i2f>
   15750:	4603      	mov	r3, r0
   15752:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   15754:	6838      	ldr	r0, [r7, #0]
   15756:	6839      	ldr	r1, [r7, #0]
   15758:	f002 fe46 	bl	183e8 <__aeabi_fmul>
   1575c:	4603      	mov	r3, r0
   1575e:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   15760:	f64c 130c 	movw	r3, #51468	; 0xc90c
   15764:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15768:	681b      	ldr	r3, [r3, #0]
   1576a:	4618      	mov	r0, r3
   1576c:	f002 f9a8 	bl	17ac0 <__aeabi_f2d>
   15770:	4602      	mov	r2, r0
   15772:	460b      	mov	r3, r1
   15774:	4610      	mov	r0, r2
   15776:	4619      	mov	r1, r3
   15778:	f04f 0200 	mov.w	r2, #0
   1577c:	f04f 0300 	mov.w	r3, #0
   15780:	f2c4 0359 	movt	r3, #16473	; 0x4059
   15784:	f002 f9f0 	bl	17b68 <__aeabi_dmul>
   15788:	4602      	mov	r2, r0
   1578a:	460b      	mov	r3, r1
   1578c:	4614      	mov	r4, r2
   1578e:	461d      	mov	r5, r3
   15790:	6838      	ldr	r0, [r7, #0]
   15792:	f002 f995 	bl	17ac0 <__aeabi_f2d>
   15796:	4602      	mov	r2, r0
   15798:	460b      	mov	r3, r1
   1579a:	4620      	mov	r0, r4
   1579c:	4629      	mov	r1, r5
   1579e:	f002 f9e3 	bl	17b68 <__aeabi_dmul>
   157a2:	4602      	mov	r2, r0
   157a4:	460b      	mov	r3, r1
   157a6:	4610      	mov	r0, r2
   157a8:	4619      	mov	r1, r3
   157aa:	f002 fcbf 	bl	1812c <__aeabi_d2f>
   157ae:	4602      	mov	r2, r0
   157b0:	f64c 1324 	movw	r3, #51492	; 0xc924
   157b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157b8:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   157ba:	6838      	ldr	r0, [r7, #0]
   157bc:	f04f 0100 	mov.w	r1, #0
   157c0:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   157c4:	f002 fe10 	bl	183e8 <__aeabi_fmul>
   157c8:	4603      	mov	r3, r0
   157ca:	461a      	mov	r2, r3
   157cc:	f64c 1328 	movw	r3, #51496	; 0xc928
   157d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157d4:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   157d6:	f64c 1308 	movw	r3, #51464	; 0xc908
   157da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157de:	681a      	ldr	r2, [r3, #0]
   157e0:	f64c 1320 	movw	r3, #51488	; 0xc920
   157e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157e8:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   157ea:	f24c 4388 	movw	r3, #50312	; 0xc488
   157ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157f2:	681a      	ldr	r2, [r3, #0]
   157f4:	f64c 131c 	movw	r3, #51484	; 0xc91c
   157f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157fc:	601a      	str	r2, [r3, #0]
}
   157fe:	3710      	adds	r7, #16
   15800:	46bd      	mov	sp, r7
   15802:	bdb0      	pop	{r4, r5, r7, pc}
   15804:	f3af 8000 	nop.w
   15808:	d916872b 	.word	0xd916872b
   1580c:	3feff7ce 	.word	0x3feff7ce

00015810 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   15810:	b580      	push	{r7, lr}
   15812:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   15814:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   15818:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1581c:	781b      	ldrb	r3, [r3, #0]
   1581e:	f003 0320 	and.w	r3, r3, #32
   15822:	2b00      	cmp	r3, #0
   15824:	d044      	beq.n	158b0 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   15826:	f24c 43a4 	movw	r3, #50340	; 0xc4a4
   1582a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1582e:	681a      	ldr	r2, [r3, #0]
   15830:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   15834:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15838:	601a      	str	r2, [r3, #0]
   1583a:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
   1583e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15842:	681a      	ldr	r2, [r3, #0]
   15844:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   15848:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1584c:	601a      	str	r2, [r3, #0]
   1584e:	f24c 438c 	movw	r3, #50316	; 0xc48c
   15852:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15856:	681a      	ldr	r2, [r3, #0]
   15858:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   1585c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15860:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   15862:	f24c 4390 	movw	r3, #50320	; 0xc490
   15866:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1586a:	681a      	ldr	r2, [r3, #0]
   1586c:	f64c 1304 	movw	r3, #51460	; 0xc904
   15870:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15874:	601a      	str	r2, [r3, #0]
   15876:	f24c 4398 	movw	r3, #50328	; 0xc498
   1587a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1587e:	681a      	ldr	r2, [r3, #0]
   15880:	f64c 1308 	movw	r3, #51464	; 0xc908
   15884:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15888:	601a      	str	r2, [r3, #0]
   1588a:	f24c 4394 	movw	r3, #50324	; 0xc494
   1588e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15892:	681a      	ldr	r2, [r3, #0]
   15894:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   15898:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1589c:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   1589e:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   158a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158a6:	881b      	ldrh	r3, [r3, #0]
   158a8:	2b00      	cmp	r3, #0
   158aa:	d001      	beq.n	158b0 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   158ac:	f7ff fd4e 	bl	1534c <estimator_update_ir_estim>
  }
}
   158b0:	bd80      	pop	{r7, pc}
   158b2:	bf00      	nop

000158b4 <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   158b4:	b480      	push	{r7}
   158b6:	af00      	add	r7, sp, #0
  
}
   158b8:	46bd      	mov	sp, r7
   158ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   158be:	4770      	bx	lr

000158c0 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   158c0:	b5b0      	push	{r4, r5, r7, lr}
   158c2:	b082      	sub	sp, #8
   158c4:	af00      	add	r7, sp, #0
   158c6:	4603      	mov	r3, r0
   158c8:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   158ca:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
   158ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158d2:	781b      	ldrb	r3, [r3, #0]
   158d4:	2b01      	cmp	r3, #1
   158d6:	f040 80e0 	bne.w	15a9a <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   158da:	f64c 132c 	movw	r3, #51500	; 0xc92c
   158de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158e2:	781b      	ldrb	r3, [r3, #0]
   158e4:	2b02      	cmp	r3, #2
   158e6:	d168      	bne.n	159ba <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   158e8:	79fb      	ldrb	r3, [r7, #7]
   158ea:	2b00      	cmp	r3, #0
   158ec:	d013      	beq.n	15916 <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   158ee:	f240 5344 	movw	r3, #1348	; 0x544
   158f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158f6:	881a      	ldrh	r2, [r3, #0]
   158f8:	f64c 1332 	movw	r3, #51506	; 0xc932
   158fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15900:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15902:	f24c 4320 	movw	r3, #50208	; 0xc420
   15906:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1590a:	895a      	ldrh	r2, [r3, #10]
   1590c:	f64c 132e 	movw	r3, #51502	; 0xc92e
   15910:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15914:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15916:	f24c 4320 	movw	r3, #50208	; 0xc420
   1591a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1591e:	895b      	ldrh	r3, [r3, #10]
   15920:	b21a      	sxth	r2, r3
   15922:	f64c 132e 	movw	r3, #51502	; 0xc92e
   15926:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1592a:	881b      	ldrh	r3, [r3, #0]
   1592c:	b21b      	sxth	r3, r3
   1592e:	1ad3      	subs	r3, r2, r3
   15930:	4618      	mov	r0, r3
   15932:	f002 fd05 	bl	18340 <__aeabi_i2f>
   15936:	4603      	mov	r3, r0
   15938:	4618      	mov	r0, r3
   1593a:	f002 f8c1 	bl	17ac0 <__aeabi_f2d>
   1593e:	4602      	mov	r2, r0
   15940:	460b      	mov	r3, r1
   15942:	4610      	mov	r0, r2
   15944:	4619      	mov	r1, r3
   15946:	f04f 0200 	mov.w	r2, #0
   1594a:	f04f 0300 	mov.w	r3, #0
   1594e:	f2c4 034e 	movt	r3, #16462	; 0x404e
   15952:	f002 f909 	bl	17b68 <__aeabi_dmul>
   15956:	4602      	mov	r2, r0
   15958:	460b      	mov	r3, r1
   1595a:	4610      	mov	r0, r2
   1595c:	4619      	mov	r1, r3
   1595e:	f04f 0200 	mov.w	r2, #0
   15962:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15966:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1596a:	f002 fa27 	bl	17dbc <__aeabi_ddiv>
   1596e:	4602      	mov	r2, r0
   15970:	460b      	mov	r3, r1
   15972:	4610      	mov	r0, r2
   15974:	4619      	mov	r1, r3
   15976:	f002 fb91 	bl	1809c <__aeabi_d2iz>
   1597a:	4603      	mov	r3, r0
   1597c:	b29b      	uxth	r3, r3
   1597e:	b29a      	uxth	r2, r3
   15980:	f64c 1332 	movw	r3, #51506	; 0xc932
   15984:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15988:	881b      	ldrh	r3, [r3, #0]
   1598a:	b29b      	uxth	r3, r3
   1598c:	4413      	add	r3, r2
   1598e:	b29b      	uxth	r3, r3
   15990:	b29a      	uxth	r2, r3
   15992:	f240 5344 	movw	r3, #1348	; 0x544
   15996:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1599a:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   1599c:	f240 5344 	movw	r3, #1348	; 0x544
   159a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159a4:	881b      	ldrh	r3, [r3, #0]
   159a6:	b21b      	sxth	r3, r3
   159a8:	4618      	mov	r0, r3
   159aa:	f002 fcc9 	bl	18340 <__aeabi_i2f>
   159ae:	4602      	mov	r2, r0
   159b0:	f24c 3308 	movw	r3, #49928	; 0xc308
   159b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159b8:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   159ba:	f64c 132c 	movw	r3, #51500	; 0xc92c
   159be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159c2:	781b      	ldrb	r3, [r3, #0]
   159c4:	2b02      	cmp	r3, #2
   159c6:	d168      	bne.n	15a9a <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   159c8:	79fb      	ldrb	r3, [r7, #7]
   159ca:	2b00      	cmp	r3, #0
   159cc:	d013      	beq.n	159f6 <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   159ce:	f240 5342 	movw	r3, #1346	; 0x542
   159d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159d6:	881a      	ldrh	r2, [r3, #0]
   159d8:	f64c 1334 	movw	r3, #51508	; 0xc934
   159dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159e0:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   159e2:	f24c 4320 	movw	r3, #50208	; 0xc420
   159e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159ea:	899a      	ldrh	r2, [r3, #12]
   159ec:	f64c 1330 	movw	r3, #51504	; 0xc930
   159f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159f4:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   159f6:	f24c 4320 	movw	r3, #50208	; 0xc420
   159fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159fe:	899b      	ldrh	r3, [r3, #12]
   15a00:	b21a      	sxth	r2, r3
   15a02:	f64c 1330 	movw	r3, #51504	; 0xc930
   15a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a0a:	881b      	ldrh	r3, [r3, #0]
   15a0c:	b21b      	sxth	r3, r3
   15a0e:	1ad3      	subs	r3, r2, r3
   15a10:	4618      	mov	r0, r3
   15a12:	f002 fc95 	bl	18340 <__aeabi_i2f>
   15a16:	4603      	mov	r3, r0
   15a18:	4618      	mov	r0, r3
   15a1a:	f002 f851 	bl	17ac0 <__aeabi_f2d>
   15a1e:	4602      	mov	r2, r0
   15a20:	460b      	mov	r3, r1
   15a22:	4610      	mov	r0, r2
   15a24:	4619      	mov	r1, r3
   15a26:	f04f 0200 	mov.w	r2, #0
   15a2a:	f04f 0300 	mov.w	r3, #0
   15a2e:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   15a32:	f002 f899 	bl	17b68 <__aeabi_dmul>
   15a36:	4602      	mov	r2, r0
   15a38:	460b      	mov	r3, r1
   15a3a:	4610      	mov	r0, r2
   15a3c:	4619      	mov	r1, r3
   15a3e:	f04f 0200 	mov.w	r2, #0
   15a42:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15a46:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15a4a:	f002 f9b7 	bl	17dbc <__aeabi_ddiv>
   15a4e:	4602      	mov	r2, r0
   15a50:	460b      	mov	r3, r1
   15a52:	4610      	mov	r0, r2
   15a54:	4619      	mov	r1, r3
   15a56:	f002 fb21 	bl	1809c <__aeabi_d2iz>
   15a5a:	4603      	mov	r3, r0
   15a5c:	b29b      	uxth	r3, r3
   15a5e:	b29a      	uxth	r2, r3
   15a60:	f64c 1334 	movw	r3, #51508	; 0xc934
   15a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a68:	881b      	ldrh	r3, [r3, #0]
   15a6a:	b29b      	uxth	r3, r3
   15a6c:	4413      	add	r3, r2
   15a6e:	b29b      	uxth	r3, r3
   15a70:	b29a      	uxth	r2, r3
   15a72:	f240 5342 	movw	r3, #1346	; 0x542
   15a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a7a:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   15a7c:	f240 5342 	movw	r3, #1346	; 0x542
   15a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a84:	881b      	ldrh	r3, [r3, #0]
   15a86:	b21b      	sxth	r3, r3
   15a88:	4618      	mov	r0, r3
   15a8a:	f002 fc59 	bl	18340 <__aeabi_i2f>
   15a8e:	4602      	mov	r2, r0
   15a90:	f24c 330c 	movw	r3, #49932	; 0xc30c
   15a94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a98:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   15a9a:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
   15a9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15aa2:	781b      	ldrb	r3, [r3, #0]
   15aa4:	2b02      	cmp	r3, #2
   15aa6:	f040 80da 	bne.w	15c5e <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15aaa:	f64c 132c 	movw	r3, #51500	; 0xc92c
   15aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ab2:	781b      	ldrb	r3, [r3, #0]
   15ab4:	2b02      	cmp	r3, #2
   15ab6:	d165      	bne.n	15b84 <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   15ab8:	79fb      	ldrb	r3, [r7, #7]
   15aba:	2b00      	cmp	r3, #0
   15abc:	d013      	beq.n	15ae6 <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   15abe:	f240 5358 	movw	r3, #1368	; 0x558
   15ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ac6:	681a      	ldr	r2, [r3, #0]
   15ac8:	f64c 1338 	movw	r3, #51512	; 0xc938
   15acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ad0:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15ad2:	f24c 4320 	movw	r3, #50208	; 0xc420
   15ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ada:	895a      	ldrh	r2, [r3, #10]
   15adc:	f64c 132e 	movw	r3, #51502	; 0xc92e
   15ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ae4:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15ae6:	f64c 1338 	movw	r3, #51512	; 0xc938
   15aea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15aee:	681b      	ldr	r3, [r3, #0]
   15af0:	4618      	mov	r0, r3
   15af2:	f001 ffe5 	bl	17ac0 <__aeabi_f2d>
   15af6:	4604      	mov	r4, r0
   15af8:	460d      	mov	r5, r1
   15afa:	f24c 4320 	movw	r3, #50208	; 0xc420
   15afe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b02:	895b      	ldrh	r3, [r3, #10]
   15b04:	b21a      	sxth	r2, r3
   15b06:	f64c 132e 	movw	r3, #51502	; 0xc92e
   15b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b0e:	881b      	ldrh	r3, [r3, #0]
   15b10:	b21b      	sxth	r3, r3
   15b12:	1ad3      	subs	r3, r2, r3
   15b14:	4618      	mov	r0, r3
   15b16:	f002 fc13 	bl	18340 <__aeabi_i2f>
   15b1a:	4603      	mov	r3, r0
   15b1c:	4618      	mov	r0, r3
   15b1e:	f001 ffcf 	bl	17ac0 <__aeabi_f2d>
   15b22:	4602      	mov	r2, r0
   15b24:	460b      	mov	r3, r1
   15b26:	4610      	mov	r0, r2
   15b28:	4619      	mov	r1, r3
   15b2a:	a34f      	add	r3, pc, #316	; (adr r3, 15c68 <inflight_calib+0x3a8>)
   15b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b30:	f002 f81a 	bl	17b68 <__aeabi_dmul>
   15b34:	4602      	mov	r2, r0
   15b36:	460b      	mov	r3, r1
   15b38:	4610      	mov	r0, r2
   15b3a:	4619      	mov	r1, r3
   15b3c:	f04f 0200 	mov.w	r2, #0
   15b40:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15b44:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15b48:	f002 f938 	bl	17dbc <__aeabi_ddiv>
   15b4c:	4602      	mov	r2, r0
   15b4e:	460b      	mov	r3, r1
   15b50:	4620      	mov	r0, r4
   15b52:	4629      	mov	r1, r5
   15b54:	f001 fe56 	bl	17804 <__adddf3>
   15b58:	4602      	mov	r2, r0
   15b5a:	460b      	mov	r3, r1
   15b5c:	4610      	mov	r0, r2
   15b5e:	4619      	mov	r1, r3
   15b60:	f002 fae4 	bl	1812c <__aeabi_d2f>
   15b64:	4602      	mov	r2, r0
   15b66:	f240 5358 	movw	r3, #1368	; 0x558
   15b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b6e:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   15b70:	f240 5358 	movw	r3, #1368	; 0x558
   15b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b78:	681a      	ldr	r2, [r3, #0]
   15b7a:	f24c 3308 	movw	r3, #49928	; 0xc308
   15b7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b82:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15b84:	f64c 132c 	movw	r3, #51500	; 0xc92c
   15b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b8c:	781b      	ldrb	r3, [r3, #0]
   15b8e:	2b02      	cmp	r3, #2
   15b90:	d165      	bne.n	15c5e <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   15b92:	79fb      	ldrb	r3, [r7, #7]
   15b94:	2b00      	cmp	r3, #0
   15b96:	d013      	beq.n	15bc0 <inflight_calib+0x300>
        max_roll_init = max_roll;
   15b98:	f240 535c 	movw	r3, #1372	; 0x55c
   15b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ba0:	681a      	ldr	r2, [r3, #0]
   15ba2:	f64c 133c 	movw	r3, #51516	; 0xc93c
   15ba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15baa:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15bac:	f24c 4320 	movw	r3, #50208	; 0xc420
   15bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bb4:	899a      	ldrh	r2, [r3, #12]
   15bb6:	f64c 1330 	movw	r3, #51504	; 0xc930
   15bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bbe:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15bc0:	f64c 133c 	movw	r3, #51516	; 0xc93c
   15bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bc8:	681b      	ldr	r3, [r3, #0]
   15bca:	4618      	mov	r0, r3
   15bcc:	f001 ff78 	bl	17ac0 <__aeabi_f2d>
   15bd0:	4604      	mov	r4, r0
   15bd2:	460d      	mov	r5, r1
   15bd4:	f24c 4320 	movw	r3, #50208	; 0xc420
   15bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bdc:	899b      	ldrh	r3, [r3, #12]
   15bde:	b21a      	sxth	r2, r3
   15be0:	f64c 1330 	movw	r3, #51504	; 0xc930
   15be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15be8:	881b      	ldrh	r3, [r3, #0]
   15bea:	b21b      	sxth	r3, r3
   15bec:	1ad3      	subs	r3, r2, r3
   15bee:	4618      	mov	r0, r3
   15bf0:	f002 fba6 	bl	18340 <__aeabi_i2f>
   15bf4:	4603      	mov	r3, r0
   15bf6:	4618      	mov	r0, r3
   15bf8:	f001 ff62 	bl	17ac0 <__aeabi_f2d>
   15bfc:	4602      	mov	r2, r0
   15bfe:	460b      	mov	r3, r1
   15c00:	4610      	mov	r0, r2
   15c02:	4619      	mov	r1, r3
   15c04:	a31a      	add	r3, pc, #104	; (adr r3, 15c70 <inflight_calib+0x3b0>)
   15c06:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c0a:	f001 ffad 	bl	17b68 <__aeabi_dmul>
   15c0e:	4602      	mov	r2, r0
   15c10:	460b      	mov	r3, r1
   15c12:	4610      	mov	r0, r2
   15c14:	4619      	mov	r1, r3
   15c16:	f04f 0200 	mov.w	r2, #0
   15c1a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15c1e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15c22:	f002 f8cb 	bl	17dbc <__aeabi_ddiv>
   15c26:	4602      	mov	r2, r0
   15c28:	460b      	mov	r3, r1
   15c2a:	4620      	mov	r0, r4
   15c2c:	4629      	mov	r1, r5
   15c2e:	f001 fde9 	bl	17804 <__adddf3>
   15c32:	4602      	mov	r2, r0
   15c34:	460b      	mov	r3, r1
   15c36:	4610      	mov	r0, r2
   15c38:	4619      	mov	r1, r3
   15c3a:	f002 fa77 	bl	1812c <__aeabi_d2f>
   15c3e:	4602      	mov	r2, r0
   15c40:	f240 535c 	movw	r3, #1372	; 0x55c
   15c44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c48:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   15c4a:	f240 535c 	movw	r3, #1372	; 0x55c
   15c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c52:	681a      	ldr	r2, [r3, #0]
   15c54:	f24c 330c 	movw	r3, #49932	; 0xc30c
   15c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c5c:	601a      	str	r2, [r3, #0]
    }
  }
}
   15c5e:	3708      	adds	r7, #8
   15c60:	46bd      	mov	sp, r7
   15c62:	bdb0      	pop	{r4, r5, r7, pc}
   15c64:	f3af 8000 	nop.w
   15c68:	9999999a 	.word	0x9999999a
   15c6c:	3fb99999 	.word	0x3fb99999
   15c70:	9999999a 	.word	0x9999999a
   15c74:	bfc99999 	.word	0xbfc99999

00015c78 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   15c78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   15c7c:	b08e      	sub	sp, #56	; 0x38
   15c7e:	af00      	add	r7, sp, #0
   15c80:	e9c7 0102 	strd	r0, r1, [r7, #8]
   15c84:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   15c88:	a357      	add	r3, pc, #348	; (adr r3, 15de8 <pp_atan2+0x170>)
   15c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c8e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   15c92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c96:	f04f 0200 	mov.w	r2, #0
   15c9a:	f04f 0300 	mov.w	r3, #0
   15c9e:	f2c4 0308 	movt	r3, #16392	; 0x4008
   15ca2:	f001 ff61 	bl	17b68 <__aeabi_dmul>
   15ca6:	4602      	mov	r2, r0
   15ca8:	460b      	mov	r3, r1
   15caa:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   15cae:	e9d7 0100 	ldrd	r0, r1, [r7]
   15cb2:	f04f 0200 	mov.w	r2, #0
   15cb6:	f04f 0300 	mov.w	r3, #0
   15cba:	f002 f9c7 	bl	1804c <__aeabi_dcmplt>
   15cbe:	4603      	mov	r3, r0
   15cc0:	2b00      	cmp	r3, #0
   15cc2:	d009      	beq.n	15cd8 <pp_atan2+0x60>
   15cc4:	a14a      	add	r1, pc, #296	; (adr r1, 15df0 <pp_atan2+0x178>)
   15cc6:	e9d1 0100 	ldrd	r0, r1, [r1]
   15cca:	e9d7 2300 	ldrd	r2, r3, [r7]
   15cce:	f001 fd97 	bl	17800 <__aeabi_dsub>
   15cd2:	4602      	mov	r2, r0
   15cd4:	460b      	mov	r3, r1
   15cd6:	e008      	b.n	15cea <pp_atan2+0x72>
   15cd8:	e9d7 0100 	ldrd	r0, r1, [r7]
   15cdc:	a344      	add	r3, pc, #272	; (adr r3, 15df0 <pp_atan2+0x178>)
   15cde:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ce2:	f001 fd8f 	bl	17804 <__adddf3>
   15ce6:	4602      	mov	r2, r0
   15ce8:	460b      	mov	r3, r1
   15cea:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   15cee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15cf2:	f04f 0200 	mov.w	r2, #0
   15cf6:	f04f 0300 	mov.w	r3, #0
   15cfa:	f002 f9c5 	bl	18088 <__aeabi_dcmpgt>
   15cfe:	4603      	mov	r3, r0
   15d00:	2b00      	cmp	r3, #0
   15d02:	d02a      	beq.n	15d5a <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   15d04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15d08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15d0c:	f001 fd78 	bl	17800 <__aeabi_dsub>
   15d10:	4602      	mov	r2, r0
   15d12:	460b      	mov	r3, r1
   15d14:	4690      	mov	r8, r2
   15d16:	4699      	mov	r9, r3
   15d18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15d1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15d20:	f001 fd70 	bl	17804 <__adddf3>
   15d24:	4602      	mov	r2, r0
   15d26:	460b      	mov	r3, r1
   15d28:	4640      	mov	r0, r8
   15d2a:	4649      	mov	r1, r9
   15d2c:	f002 f846 	bl	17dbc <__aeabi_ddiv>
   15d30:	4602      	mov	r2, r0
   15d32:	460b      	mov	r3, r1
   15d34:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15d38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15d40:	f001 ff12 	bl	17b68 <__aeabi_dmul>
   15d44:	4602      	mov	r2, r0
   15d46:	460b      	mov	r3, r1
   15d48:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d4c:	f001 fd58 	bl	17800 <__aeabi_dsub>
   15d50:	4602      	mov	r2, r0
   15d52:	460b      	mov	r3, r1
   15d54:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15d58:	e029      	b.n	15dae <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   15d5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15d5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15d62:	f001 fd4f 	bl	17804 <__adddf3>
   15d66:	4602      	mov	r2, r0
   15d68:	460b      	mov	r3, r1
   15d6a:	4690      	mov	r8, r2
   15d6c:	4699      	mov	r9, r3
   15d6e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15d72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   15d76:	f001 fd43 	bl	17800 <__aeabi_dsub>
   15d7a:	4602      	mov	r2, r0
   15d7c:	460b      	mov	r3, r1
   15d7e:	4640      	mov	r0, r8
   15d80:	4649      	mov	r1, r9
   15d82:	f002 f81b 	bl	17dbc <__aeabi_ddiv>
   15d86:	4602      	mov	r2, r0
   15d88:	460b      	mov	r3, r1
   15d8a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   15d8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15d96:	f001 fee7 	bl	17b68 <__aeabi_dmul>
   15d9a:	4602      	mov	r2, r0
   15d9c:	460b      	mov	r3, r1
   15d9e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   15da2:	f001 fd2d 	bl	17800 <__aeabi_dsub>
   15da6:	4602      	mov	r2, r0
   15da8:	460b      	mov	r3, r1
   15daa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   15dae:	e9d7 0100 	ldrd	r0, r1, [r7]
   15db2:	f04f 0200 	mov.w	r2, #0
   15db6:	f04f 0300 	mov.w	r3, #0
   15dba:	f002 f947 	bl	1804c <__aeabi_dcmplt>
   15dbe:	4603      	mov	r3, r0
   15dc0:	2b00      	cmp	r3, #0
   15dc2:	d004      	beq.n	15dce <pp_atan2+0x156>
		return (-angle);
   15dc4:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15dc8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15dcc:	e001      	b.n	15dd2 <pp_atan2+0x15a>
	else
		return angle;
   15dce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   15dd2:	4622      	mov	r2, r4
   15dd4:	462b      	mov	r3, r5
}
   15dd6:	4610      	mov	r0, r2
   15dd8:	4619      	mov	r1, r3
   15dda:	3738      	adds	r7, #56	; 0x38
   15ddc:	46bd      	mov	sp, r7
   15dde:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   15de2:	bf00      	nop
   15de4:	f3af 8000 	nop.w
   15de8:	54442d18 	.word	0x54442d18
   15dec:	3fe921fb 	.word	0x3fe921fb
   15df0:	d9d7bdbb 	.word	0xd9d7bdbb
   15df4:	3ddb7cdf 	.word	0x3ddb7cdf

00015df8 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15df8:	b5b0      	push	{r4, r5, r7, lr}
   15dfa:	b08c      	sub	sp, #48	; 0x30
   15dfc:	af00      	add	r7, sp, #0
   15dfe:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   15e02:	e9d7 2300 	ldrd	r2, r3, [r7]
   15e06:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15e0a:	2301      	movs	r3, #1
   15e0c:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   15e0e:	e00a      	b.n	15e26 <pp_sin+0x2e>
   15e10:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e14:	a35a      	add	r3, pc, #360	; (adr r3, 15f80 <pp_sin+0x188>)
   15e16:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e1a:	f001 fcf3 	bl	17804 <__adddf3>
   15e1e:	4602      	mov	r2, r0
   15e20:	460b      	mov	r3, r1
   15e22:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15e26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e2a:	a357      	add	r3, pc, #348	; (adr r3, 15f88 <pp_sin+0x190>)
   15e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e30:	f002 f90c 	bl	1804c <__aeabi_dcmplt>
   15e34:	4603      	mov	r3, r0
   15e36:	2b00      	cmp	r3, #0
   15e38:	d1ea      	bne.n	15e10 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   15e3a:	e00a      	b.n	15e52 <pp_sin+0x5a>
   15e3c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e40:	a34f      	add	r3, pc, #316	; (adr r3, 15f80 <pp_sin+0x188>)
   15e42:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e46:	f001 fcdb 	bl	17800 <__aeabi_dsub>
   15e4a:	4602      	mov	r2, r0
   15e4c:	460b      	mov	r3, r1
   15e4e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15e52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e56:	a34e      	add	r3, pc, #312	; (adr r3, 15f90 <pp_sin+0x198>)
   15e58:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e5c:	f002 f914 	bl	18088 <__aeabi_dcmpgt>
   15e60:	4603      	mov	r3, r0
   15e62:	2b00      	cmp	r3, #0
   15e64:	d1ea      	bne.n	15e3c <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   15e66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e6a:	a34b      	add	r3, pc, #300	; (adr r3, 15f98 <pp_sin+0x1a0>)
   15e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e70:	f002 f90a 	bl	18088 <__aeabi_dcmpgt>
   15e74:	4603      	mov	r3, r0
   15e76:	2b00      	cmp	r3, #0
   15e78:	d00d      	beq.n	15e96 <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   15e7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e7e:	a348      	add	r3, pc, #288	; (adr r3, 15fa0 <pp_sin+0x1a8>)
   15e80:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e84:	f001 fcbc 	bl	17800 <__aeabi_dsub>
   15e88:	4602      	mov	r2, r0
   15e8a:	460b      	mov	r3, r1
   15e8c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   15e90:	f04f 33ff 	mov.w	r3, #4294967295
   15e94:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   15e96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e9a:	a343      	add	r3, pc, #268	; (adr r3, 15fa8 <pp_sin+0x1b0>)
   15e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ea0:	f001 ff8c 	bl	17dbc <__aeabi_ddiv>
   15ea4:	4602      	mov	r2, r0
   15ea6:	460b      	mov	r3, r1
   15ea8:	e9c7 2306 	strd	r2, r3, [r7, #24]
   15eac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15eb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15eb4:	f001 fe58 	bl	17b68 <__aeabi_dmul>
   15eb8:	4602      	mov	r2, r0
   15eba:	460b      	mov	r3, r1
   15ebc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15ec0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15ec4:	a33a      	add	r3, pc, #232	; (adr r3, 15fb0 <pp_sin+0x1b8>)
   15ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
   15eca:	f001 fe4d 	bl	17b68 <__aeabi_dmul>
   15ece:	4602      	mov	r2, r0
   15ed0:	460b      	mov	r3, r1
	      - .00467376557) * q2
   15ed2:	4610      	mov	r0, r2
   15ed4:	4619      	mov	r1, r3
   15ed6:	a338      	add	r3, pc, #224	; (adr r3, 15fb8 <pp_sin+0x1c0>)
   15ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
   15edc:	f001 fc90 	bl	17800 <__aeabi_dsub>
   15ee0:	4602      	mov	r2, r0
   15ee2:	460b      	mov	r3, r1
   15ee4:	4610      	mov	r0, r2
   15ee6:	4619      	mov	r1, r3
   15ee8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15eec:	f001 fe3c 	bl	17b68 <__aeabi_dmul>
   15ef0:	4602      	mov	r2, r0
   15ef2:	460b      	mov	r3, r1
	      + .07968967928) * q2
   15ef4:	4610      	mov	r0, r2
   15ef6:	4619      	mov	r1, r3
   15ef8:	a331      	add	r3, pc, #196	; (adr r3, 15fc0 <pp_sin+0x1c8>)
   15efa:	e9d3 2300 	ldrd	r2, r3, [r3]
   15efe:	f001 fc81 	bl	17804 <__adddf3>
   15f02:	4602      	mov	r2, r0
   15f04:	460b      	mov	r3, r1
   15f06:	4610      	mov	r0, r2
   15f08:	4619      	mov	r1, r3
   15f0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15f0e:	f001 fe2b 	bl	17b68 <__aeabi_dmul>
   15f12:	4602      	mov	r2, r0
   15f14:	460b      	mov	r3, r1
	      - .64596371106) * q2
   15f16:	4610      	mov	r0, r2
   15f18:	4619      	mov	r1, r3
   15f1a:	a32b      	add	r3, pc, #172	; (adr r3, 15fc8 <pp_sin+0x1d0>)
   15f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f20:	f001 fc6e 	bl	17800 <__aeabi_dsub>
   15f24:	4602      	mov	r2, r0
   15f26:	460b      	mov	r3, r1
   15f28:	4610      	mov	r0, r2
   15f2a:	4619      	mov	r1, r3
   15f2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15f30:	f001 fe1a 	bl	17b68 <__aeabi_dmul>
   15f34:	4602      	mov	r2, r0
   15f36:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15f38:	4610      	mov	r0, r2
   15f3a:	4619      	mov	r1, r3
   15f3c:	a324      	add	r3, pc, #144	; (adr r3, 15fd0 <pp_sin+0x1d8>)
   15f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f42:	f001 fc5f 	bl	17804 <__adddf3>
   15f46:	4602      	mov	r2, r0
   15f48:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   15f4a:	4610      	mov	r0, r2
   15f4c:	4619      	mov	r1, r3
   15f4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15f52:	f001 fe09 	bl	17b68 <__aeabi_dmul>
   15f56:	4602      	mov	r2, r0
   15f58:	460b      	mov	r3, r1
   15f5a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   15f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15f60:	2b00      	cmp	r3, #0
   15f62:	da04      	bge.n	15f6e <pp_sin+0x176>
   15f64:	68bc      	ldr	r4, [r7, #8]
   15f66:	68fb      	ldr	r3, [r7, #12]
   15f68:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15f6c:	e001      	b.n	15f72 <pp_sin+0x17a>
   15f6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   15f72:	4622      	mov	r2, r4
   15f74:	462b      	mov	r3, r5
}
   15f76:	4610      	mov	r0, r2
   15f78:	4619      	mov	r1, r3
   15f7a:	3730      	adds	r7, #48	; 0x30
   15f7c:	46bd      	mov	sp, r7
   15f7e:	bdb0      	pop	{r4, r5, r7, pc}
   15f80:	54442d18 	.word	0x54442d18
   15f84:	401921fb 	.word	0x401921fb
   15f88:	54442d18 	.word	0x54442d18
   15f8c:	bff921fb 	.word	0xbff921fb
   15f90:	7f3321d2 	.word	0x7f3321d2
   15f94:	4012d97c 	.word	0x4012d97c
   15f98:	54442d18 	.word	0x54442d18
   15f9c:	3ff921fb 	.word	0x3ff921fb
   15fa0:	54442d18 	.word	0x54442d18
   15fa4:	400921fb 	.word	0x400921fb
   15fa8:	5443d6f4 	.word	0x5443d6f4
   15fac:	3ff921fb 	.word	0x3ff921fb
   15fb0:	48a890af 	.word	0x48a890af
   15fb4:	3f23daf7 	.word	0x3f23daf7
   15fb8:	645b6d0e 	.word	0x645b6d0e
   15fbc:	3f7324cc 	.word	0x3f7324cc
   15fc0:	f65619a5 	.word	0xf65619a5
   15fc4:	3fb4668a 	.word	0x3fb4668a
   15fc8:	16acf9cd 	.word	0x16acf9cd
   15fcc:	3fe4abbc 	.word	0x3fe4abbc
   15fd0:	520817f7 	.word	0x520817f7
   15fd4:	3ff921fb 	.word	0x3ff921fb

00015fd8 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   15fd8:	b480      	push	{r7}
   15fda:	b083      	sub	sp, #12
   15fdc:	af00      	add	r7, sp, #0
   15fde:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   15fe2:	4610      	mov	r0, r2
   15fe4:	4619      	mov	r1, r3
   15fe6:	370c      	adds	r7, #12
   15fe8:	46bd      	mov	sp, r7
   15fea:	f85d 7b04 	ldr.w	r7, [sp], #4
   15fee:	4770      	bx	lr

00015ff0 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   15ff0:	b480      	push	{r7}
   15ff2:	b083      	sub	sp, #12
   15ff4:	af00      	add	r7, sp, #0
   15ff6:	4603      	mov	r3, r0
   15ff8:	6039      	str	r1, [r7, #0]
   15ffa:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   15ffc:	79fa      	ldrb	r2, [r7, #7]
   15ffe:	f64c 1350 	movw	r3, #51536	; 0xc950
   16002:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16006:	6839      	ldr	r1, [r7, #0]
   16008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1600c:	370c      	adds	r7, #12
   1600e:	46bd      	mov	sp, r7
   16010:	f85d 7b04 	ldr.w	r7, [sp], #4
   16014:	4770      	bx	lr
   16016:	bf00      	nop

00016018 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   16018:	b480      	push	{r7}
   1601a:	b083      	sub	sp, #12
   1601c:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   1601e:	f242 0315 	movw	r3, #8213	; 0x2015
   16022:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16026:	2200      	movs	r2, #0
   16028:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   1602a:	f242 0314 	movw	r3, #8212	; 0x2014
   1602e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16032:	2200      	movs	r2, #0
   16034:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   16036:	f242 0307 	movw	r3, #8199	; 0x2007
   1603a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1603e:	22c0      	movs	r2, #192	; 0xc0
   16040:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   16042:	f242 0306 	movw	r3, #8198	; 0x2006
   16046:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1604a:	22cf      	movs	r2, #207	; 0xcf
   1604c:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   1604e:	2300      	movs	r3, #0
   16050:	71fb      	strb	r3, [r7, #7]
   16052:	e00a      	b.n	1606a <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   16054:	79fa      	ldrb	r2, [r7, #7]
   16056:	f64c 1350 	movw	r3, #51536	; 0xc950
   1605a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1605e:	2100      	movs	r1, #0
   16060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   16064:	79fb      	ldrb	r3, [r7, #7]
   16066:	3301      	adds	r3, #1
   16068:	71fb      	strb	r3, [r7, #7]
   1606a:	79fb      	ldrb	r3, [r7, #7]
   1606c:	2b07      	cmp	r3, #7
   1606e:	d9f1      	bls.n	16054 <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   16070:	370c      	adds	r7, #12
   16072:	46bd      	mov	sp, r7
   16074:	f85d 7b04 	ldr.w	r7, [sp], #4
   16078:	4770      	bx	lr
   1607a:	bf00      	nop

0001607c <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   1607c:	b480      	push	{r7}
   1607e:	b083      	sub	sp, #12
   16080:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   16082:	f242 0326 	movw	r3, #8230	; 0x2026
   16086:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1608a:	881b      	ldrh	r3, [r3, #0]
   1608c:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   1608e:	f64c 13ac 	movw	r3, #51628	; 0xc9ac
   16092:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16096:	881b      	ldrh	r3, [r3, #0]
   16098:	88fa      	ldrh	r2, [r7, #6]
   1609a:	1ad3      	subs	r3, r2, r3
   1609c:	80bb      	strh	r3, [r7, #4]
  last		= this;
   1609e:	f64c 13ac 	movw	r3, #51628	; 0xc9ac
   160a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160a6:	88fa      	ldrh	r2, [r7, #6]
   160a8:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   160aa:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   160ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160b2:	781b      	ldrb	r3, [r3, #0]
   160b4:	2b00      	cmp	r3, #0
   160b6:	d11e      	bne.n	160f6 <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   160b8:	f242 0324 	movw	r3, #8228	; 0x2024
   160bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160c0:	781b      	ldrb	r3, [r3, #0]
   160c2:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   160c4:	f64c 13af 	movw	r3, #51631	; 0xc9af
   160c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160cc:	781b      	ldrb	r3, [r3, #0]
   160ce:	78fa      	ldrb	r2, [r7, #3]
   160d0:	1ad3      	subs	r3, r2, r3
   160d2:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   160d4:	f64c 13af 	movw	r3, #51631	; 0xc9af
   160d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160dc:	78fa      	ldrb	r2, [r7, #3]
   160de:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   160e0:	78bb      	ldrb	r3, [r7, #2]
   160e2:	2b6d      	cmp	r3, #109	; 0x6d
   160e4:	d906      	bls.n	160f4 <__vector_34+0x78>
      state = 1;
   160e6:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   160ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160ee:	2201      	movs	r2, #1
   160f0:	701a      	strb	r2, [r3, #0]
   160f2:	e053      	b.n	1619c <__vector_34+0x120>
   160f4:	e052      	b.n	1619c <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   160f6:	88bb      	ldrh	r3, [r7, #4]
   160f8:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   160fc:	d304      	bcc.n	16108 <__vector_34+0x8c>
   160fe:	88ba      	ldrh	r2, [r7, #4]
   16100:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   16104:	429a      	cmp	r2, r3
   16106:	d911      	bls.n	1612c <__vector_34+0xb0>
      RestartPpmCycle();
   16108:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   1610c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16110:	2200      	movs	r2, #0
   16112:	701a      	strb	r2, [r3, #0]
   16114:	f242 0324 	movw	r3, #8228	; 0x2024
   16118:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1611c:	781b      	ldrb	r3, [r3, #0]
   1611e:	b2da      	uxtb	r2, r3
   16120:	f64c 13af 	movw	r3, #51631	; 0xc9af
   16124:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16128:	701a      	strb	r2, [r3, #0]
   1612a:	e038      	b.n	1619e <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   1612c:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   16130:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16134:	781b      	ldrb	r3, [r3, #0]
   16136:	1e5a      	subs	r2, r3, #1
   16138:	f64c 1370 	movw	r3, #51568	; 0xc970
   1613c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16140:	88b9      	ldrh	r1, [r7, #4]
   16142:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   16146:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   1614a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1614e:	781b      	ldrb	r3, [r3, #0]
   16150:	2b08      	cmp	r3, #8
   16152:	d917      	bls.n	16184 <__vector_34+0x108>
      ppm_valid	= 1;
   16154:	f64c 13ab 	movw	r3, #51627	; 0xc9ab
   16158:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1615c:	2201      	movs	r2, #1
   1615e:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   16160:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   16164:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16168:	2200      	movs	r2, #0
   1616a:	701a      	strb	r2, [r3, #0]
   1616c:	f242 0324 	movw	r3, #8228	; 0x2024
   16170:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16174:	781b      	ldrb	r3, [r3, #0]
   16176:	b2da      	uxtb	r2, r3
   16178:	f64c 13af 	movw	r3, #51631	; 0xc9af
   1617c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16180:	701a      	strb	r2, [r3, #0]
   16182:	e00c      	b.n	1619e <__vector_34+0x122>
    } else 
      state++;
   16184:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   16188:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1618c:	781b      	ldrb	r3, [r3, #0]
   1618e:	3301      	adds	r3, #1
   16190:	b2da      	uxtb	r2, r3
   16192:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   16196:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1619a:	701a      	strb	r2, [r3, #0]
  }
  return;
   1619c:	bf00      	nop
}
   1619e:	370c      	adds	r7, #12
   161a0:	46bd      	mov	sp, r7
   161a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   161a6:	4770      	bx	lr

000161a8 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   161a8:	b590      	push	{r4, r7, lr}
   161aa:	b083      	sub	sp, #12
   161ac:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   161ae:	f64c 1370 	movw	r3, #51568	; 0xc970
   161b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161b6:	881b      	ldrh	r3, [r3, #0]
   161b8:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   161bc:	b29b      	uxth	r3, r3
   161be:	80fb      	strh	r3, [r7, #6]
   161c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   161c4:	4618      	mov	r0, r3
   161c6:	f002 f8bb 	bl	18340 <__aeabi_i2f>
   161ca:	4603      	mov	r3, r0
   161cc:	4618      	mov	r0, r3
   161ce:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   161d2:	f002 f909 	bl	183e8 <__aeabi_fmul>
   161d6:	4603      	mov	r3, r0
   161d8:	4618      	mov	r0, r3
   161da:	f002 facb 	bl	18774 <__aeabi_f2iz>
   161de:	4603      	mov	r3, r0
   161e0:	b29a      	uxth	r2, r3
   161e2:	f64c 1384 	movw	r3, #51588	; 0xc984
   161e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161ea:	801a      	strh	r2, [r3, #0]
   161ec:	f64c 1384 	movw	r3, #51588	; 0xc984
   161f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161f4:	881b      	ldrh	r3, [r3, #0]
   161f6:	b21b      	sxth	r3, r3
   161f8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   161fc:	dd07      	ble.n	1620e <last_radio_from_ppm+0x66>
   161fe:	f64c 1384 	movw	r3, #51588	; 0xc984
   16202:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16206:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1620a:	801a      	strh	r2, [r3, #0]
   1620c:	e00d      	b.n	1622a <last_radio_from_ppm+0x82>
   1620e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16212:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16216:	881b      	ldrh	r3, [r3, #0]
   16218:	b21b      	sxth	r3, r3
   1621a:	2b00      	cmp	r3, #0
   1621c:	da05      	bge.n	1622a <last_radio_from_ppm+0x82>
   1621e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16222:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16226:	2200      	movs	r2, #0
   16228:	801a      	strh	r2, [r3, #0]
   1622a:	f64c 1370 	movw	r3, #51568	; 0xc970
   1622e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16232:	885b      	ldrh	r3, [r3, #2]
   16234:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16238:	b29b      	uxth	r3, r3
   1623a:	80fb      	strh	r3, [r7, #6]
   1623c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16240:	4618      	mov	r0, r3
   16242:	f002 f87d 	bl	18340 <__aeabi_i2f>
   16246:	4603      	mov	r3, r0
   16248:	4618      	mov	r0, r3
   1624a:	f002 fa93 	bl	18774 <__aeabi_f2iz>
   1624e:	4603      	mov	r3, r0
   16250:	b29a      	uxth	r2, r3
   16252:	f64c 1384 	movw	r3, #51588	; 0xc984
   16256:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1625a:	805a      	strh	r2, [r3, #2]
   1625c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16260:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16264:	885b      	ldrh	r3, [r3, #2]
   16266:	b21b      	sxth	r3, r3
   16268:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1626c:	dd07      	ble.n	1627e <last_radio_from_ppm+0xd6>
   1626e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16272:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16276:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1627a:	805a      	strh	r2, [r3, #2]
   1627c:	e00f      	b.n	1629e <last_radio_from_ppm+0xf6>
   1627e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16282:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16286:	885b      	ldrh	r3, [r3, #2]
   16288:	b21b      	sxth	r3, r3
   1628a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1628e:	da06      	bge.n	1629e <last_radio_from_ppm+0xf6>
   16290:	f64c 1384 	movw	r3, #51588	; 0xc984
   16294:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16298:	f64d 2280 	movw	r2, #55936	; 0xda80
   1629c:	805a      	strh	r2, [r3, #2]
   1629e:	f64c 1370 	movw	r3, #51568	; 0xc970
   162a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162a6:	889b      	ldrh	r3, [r3, #4]
   162a8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   162ac:	b29b      	uxth	r3, r3
   162ae:	80fb      	strh	r3, [r7, #6]
   162b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   162b4:	4618      	mov	r0, r3
   162b6:	f002 f843 	bl	18340 <__aeabi_i2f>
   162ba:	4603      	mov	r3, r0
   162bc:	4618      	mov	r0, r3
   162be:	f002 fa59 	bl	18774 <__aeabi_f2iz>
   162c2:	4603      	mov	r3, r0
   162c4:	b29a      	uxth	r2, r3
   162c6:	f64c 1384 	movw	r3, #51588	; 0xc984
   162ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162ce:	809a      	strh	r2, [r3, #4]
   162d0:	f64c 1384 	movw	r3, #51588	; 0xc984
   162d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162d8:	889b      	ldrh	r3, [r3, #4]
   162da:	b21b      	sxth	r3, r3
   162dc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   162e0:	dd07      	ble.n	162f2 <last_radio_from_ppm+0x14a>
   162e2:	f64c 1384 	movw	r3, #51588	; 0xc984
   162e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162ea:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   162ee:	809a      	strh	r2, [r3, #4]
   162f0:	e00f      	b.n	16312 <last_radio_from_ppm+0x16a>
   162f2:	f64c 1384 	movw	r3, #51588	; 0xc984
   162f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162fa:	889b      	ldrh	r3, [r3, #4]
   162fc:	b21b      	sxth	r3, r3
   162fe:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16302:	da06      	bge.n	16312 <last_radio_from_ppm+0x16a>
   16304:	f64c 1384 	movw	r3, #51588	; 0xc984
   16308:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1630c:	f64d 2280 	movw	r2, #55936	; 0xda80
   16310:	809a      	strh	r2, [r3, #4]
   16312:	f64c 1370 	movw	r3, #51568	; 0xc970
   16316:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1631a:	88db      	ldrh	r3, [r3, #6]
   1631c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16320:	b29b      	uxth	r3, r3
   16322:	80fb      	strh	r3, [r7, #6]
   16324:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16328:	4618      	mov	r0, r3
   1632a:	f002 f809 	bl	18340 <__aeabi_i2f>
   1632e:	4603      	mov	r3, r0
   16330:	4618      	mov	r0, r3
   16332:	f002 fa1f 	bl	18774 <__aeabi_f2iz>
   16336:	4603      	mov	r3, r0
   16338:	b29a      	uxth	r2, r3
   1633a:	f64c 1384 	movw	r3, #51588	; 0xc984
   1633e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16342:	80da      	strh	r2, [r3, #6]
   16344:	f64c 1384 	movw	r3, #51588	; 0xc984
   16348:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1634c:	88db      	ldrh	r3, [r3, #6]
   1634e:	b21b      	sxth	r3, r3
   16350:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16354:	dd07      	ble.n	16366 <last_radio_from_ppm+0x1be>
   16356:	f64c 1384 	movw	r3, #51588	; 0xc984
   1635a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1635e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16362:	80da      	strh	r2, [r3, #6]
   16364:	e00f      	b.n	16386 <last_radio_from_ppm+0x1de>
   16366:	f64c 1384 	movw	r3, #51588	; 0xc984
   1636a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1636e:	88db      	ldrh	r3, [r3, #6]
   16370:	b21b      	sxth	r3, r3
   16372:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16376:	da06      	bge.n	16386 <last_radio_from_ppm+0x1de>
   16378:	f64c 1384 	movw	r3, #51588	; 0xc984
   1637c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16380:	f64d 2280 	movw	r2, #55936	; 0xda80
   16384:	80da      	strh	r2, [r3, #6]
   16386:	f64c 1370 	movw	r3, #51568	; 0xc970
   1638a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1638e:	891b      	ldrh	r3, [r3, #8]
   16390:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16394:	b29b      	uxth	r3, r3
   16396:	80fb      	strh	r3, [r7, #6]
   16398:	f64c 1398 	movw	r3, #51608	; 0xc998
   1639c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163a0:	891b      	ldrh	r3, [r3, #8]
   163a2:	b21b      	sxth	r3, r3
   163a4:	4618      	mov	r0, r3
   163a6:	f001 ffcb 	bl	18340 <__aeabi_i2f>
   163aa:	4604      	mov	r4, r0
   163ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   163b0:	4618      	mov	r0, r3
   163b2:	f001 ffc5 	bl	18340 <__aeabi_i2f>
   163b6:	4603      	mov	r3, r0
   163b8:	4618      	mov	r0, r3
   163ba:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   163be:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   163c2:	f002 f811 	bl	183e8 <__aeabi_fmul>
   163c6:	4603      	mov	r3, r0
   163c8:	4620      	mov	r0, r4
   163ca:	4619      	mov	r1, r3
   163cc:	f001 ff04 	bl	181d8 <__addsf3>
   163d0:	4603      	mov	r3, r0
   163d2:	4618      	mov	r0, r3
   163d4:	f002 f9ce 	bl	18774 <__aeabi_f2iz>
   163d8:	4603      	mov	r3, r0
   163da:	b29a      	uxth	r2, r3
   163dc:	f64c 1398 	movw	r3, #51608	; 0xc998
   163e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163e4:	811a      	strh	r2, [r3, #8]
   163e6:	f64c 1370 	movw	r3, #51568	; 0xc970
   163ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163ee:	895b      	ldrh	r3, [r3, #10]
   163f0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   163f4:	b29b      	uxth	r3, r3
   163f6:	80fb      	strh	r3, [r7, #6]
   163f8:	f64c 1398 	movw	r3, #51608	; 0xc998
   163fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16400:	895b      	ldrh	r3, [r3, #10]
   16402:	b21b      	sxth	r3, r3
   16404:	4618      	mov	r0, r3
   16406:	f001 ff9b 	bl	18340 <__aeabi_i2f>
   1640a:	4604      	mov	r4, r0
   1640c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16410:	4618      	mov	r0, r3
   16412:	f001 ff95 	bl	18340 <__aeabi_i2f>
   16416:	4603      	mov	r3, r0
   16418:	4618      	mov	r0, r3
   1641a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1641e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16422:	f001 ffe1 	bl	183e8 <__aeabi_fmul>
   16426:	4603      	mov	r3, r0
   16428:	4620      	mov	r0, r4
   1642a:	4619      	mov	r1, r3
   1642c:	f001 fed4 	bl	181d8 <__addsf3>
   16430:	4603      	mov	r3, r0
   16432:	4618      	mov	r0, r3
   16434:	f002 f99e 	bl	18774 <__aeabi_f2iz>
   16438:	4603      	mov	r3, r0
   1643a:	b29a      	uxth	r2, r3
   1643c:	f64c 1398 	movw	r3, #51608	; 0xc998
   16440:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16444:	815a      	strh	r2, [r3, #10]
   16446:	f64c 1370 	movw	r3, #51568	; 0xc970
   1644a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1644e:	899b      	ldrh	r3, [r3, #12]
   16450:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16454:	b29b      	uxth	r3, r3
   16456:	80fb      	strh	r3, [r7, #6]
   16458:	f64c 1398 	movw	r3, #51608	; 0xc998
   1645c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16460:	899b      	ldrh	r3, [r3, #12]
   16462:	b21b      	sxth	r3, r3
   16464:	4618      	mov	r0, r3
   16466:	f001 ff6b 	bl	18340 <__aeabi_i2f>
   1646a:	4604      	mov	r4, r0
   1646c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16470:	4618      	mov	r0, r3
   16472:	f001 ff65 	bl	18340 <__aeabi_i2f>
   16476:	4603      	mov	r3, r0
   16478:	4618      	mov	r0, r3
   1647a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1647e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16482:	f001 ffb1 	bl	183e8 <__aeabi_fmul>
   16486:	4603      	mov	r3, r0
   16488:	4620      	mov	r0, r4
   1648a:	4619      	mov	r1, r3
   1648c:	f001 fea4 	bl	181d8 <__addsf3>
   16490:	4603      	mov	r3, r0
   16492:	4618      	mov	r0, r3
   16494:	f002 f96e 	bl	18774 <__aeabi_f2iz>
   16498:	4603      	mov	r3, r0
   1649a:	b29a      	uxth	r2, r3
   1649c:	f64c 1398 	movw	r3, #51608	; 0xc998
   164a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164a4:	819a      	strh	r2, [r3, #12]
   164a6:	f64c 1370 	movw	r3, #51568	; 0xc970
   164aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164ae:	89db      	ldrh	r3, [r3, #14]
   164b0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   164b4:	b29b      	uxth	r3, r3
   164b6:	80fb      	strh	r3, [r7, #6]
   164b8:	f64c 1398 	movw	r3, #51608	; 0xc998
   164bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164c0:	89db      	ldrh	r3, [r3, #14]
   164c2:	b21b      	sxth	r3, r3
   164c4:	4618      	mov	r0, r3
   164c6:	f001 ff3b 	bl	18340 <__aeabi_i2f>
   164ca:	4604      	mov	r4, r0
   164cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   164d0:	4618      	mov	r0, r3
   164d2:	f001 ff35 	bl	18340 <__aeabi_i2f>
   164d6:	4603      	mov	r3, r0
   164d8:	4618      	mov	r0, r3
   164da:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   164de:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   164e2:	f001 ff81 	bl	183e8 <__aeabi_fmul>
   164e6:	4603      	mov	r3, r0
   164e8:	4620      	mov	r0, r4
   164ea:	4619      	mov	r1, r3
   164ec:	f001 fe74 	bl	181d8 <__addsf3>
   164f0:	4603      	mov	r3, r0
   164f2:	4618      	mov	r0, r3
   164f4:	f002 f93e 	bl	18774 <__aeabi_f2iz>
   164f8:	4603      	mov	r3, r0
   164fa:	b29a      	uxth	r2, r3
   164fc:	f64c 1398 	movw	r3, #51608	; 0xc998
   16500:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16504:	81da      	strh	r2, [r3, #14]
   16506:	f64c 1370 	movw	r3, #51568	; 0xc970
   1650a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1650e:	8a1b      	ldrh	r3, [r3, #16]
   16510:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16514:	b29b      	uxth	r3, r3
   16516:	80fb      	strh	r3, [r7, #6]
   16518:	f64c 1398 	movw	r3, #51608	; 0xc998
   1651c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16520:	8a1b      	ldrh	r3, [r3, #16]
   16522:	b21b      	sxth	r3, r3
   16524:	4618      	mov	r0, r3
   16526:	f001 ff0b 	bl	18340 <__aeabi_i2f>
   1652a:	4604      	mov	r4, r0
   1652c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16530:	4618      	mov	r0, r3
   16532:	f001 ff05 	bl	18340 <__aeabi_i2f>
   16536:	4603      	mov	r3, r0
   16538:	4618      	mov	r0, r3
   1653a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1653e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16542:	f001 ff51 	bl	183e8 <__aeabi_fmul>
   16546:	4603      	mov	r3, r0
   16548:	4620      	mov	r0, r4
   1654a:	4619      	mov	r1, r3
   1654c:	f001 fe44 	bl	181d8 <__addsf3>
   16550:	4603      	mov	r3, r0
   16552:	4618      	mov	r0, r3
   16554:	f002 f90e 	bl	18774 <__aeabi_f2iz>
   16558:	4603      	mov	r3, r0
   1655a:	b29a      	uxth	r2, r3
   1655c:	f64c 1398 	movw	r3, #51608	; 0xc998
   16560:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16564:	821a      	strh	r2, [r3, #16]
   16566:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
   1656a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1656e:	781b      	ldrb	r3, [r3, #0]
   16570:	3301      	adds	r3, #1
   16572:	b2da      	uxtb	r2, r3
   16574:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
   16578:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1657c:	701a      	strb	r2, [r3, #0]
   1657e:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
   16582:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16586:	781b      	ldrb	r3, [r3, #0]
   16588:	2b0a      	cmp	r3, #10
   1658a:	f040 8101 	bne.w	16790 <last_radio_from_ppm+0x5e8>
   1658e:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
   16592:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16596:	2200      	movs	r2, #0
   16598:	701a      	strb	r2, [r3, #0]
   1659a:	f64c 1398 	movw	r3, #51608	; 0xc998
   1659e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165a2:	891a      	ldrh	r2, [r3, #8]
   165a4:	f64c 1384 	movw	r3, #51588	; 0xc984
   165a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165ac:	811a      	strh	r2, [r3, #8]
   165ae:	f64c 1398 	movw	r3, #51608	; 0xc998
   165b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165b6:	2200      	movs	r2, #0
   165b8:	811a      	strh	r2, [r3, #8]
   165ba:	f64c 1384 	movw	r3, #51588	; 0xc984
   165be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165c2:	891b      	ldrh	r3, [r3, #8]
   165c4:	b21b      	sxth	r3, r3
   165c6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   165ca:	dd07      	ble.n	165dc <last_radio_from_ppm+0x434>
   165cc:	f64c 1384 	movw	r3, #51588	; 0xc984
   165d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   165d8:	811a      	strh	r2, [r3, #8]
   165da:	e00f      	b.n	165fc <last_radio_from_ppm+0x454>
   165dc:	f64c 1384 	movw	r3, #51588	; 0xc984
   165e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165e4:	891b      	ldrh	r3, [r3, #8]
   165e6:	b21b      	sxth	r3, r3
   165e8:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   165ec:	da06      	bge.n	165fc <last_radio_from_ppm+0x454>
   165ee:	f64c 1384 	movw	r3, #51588	; 0xc984
   165f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165f6:	f64d 2280 	movw	r2, #55936	; 0xda80
   165fa:	811a      	strh	r2, [r3, #8]
   165fc:	f64c 1398 	movw	r3, #51608	; 0xc998
   16600:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16604:	895a      	ldrh	r2, [r3, #10]
   16606:	f64c 1384 	movw	r3, #51588	; 0xc984
   1660a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1660e:	815a      	strh	r2, [r3, #10]
   16610:	f64c 1398 	movw	r3, #51608	; 0xc998
   16614:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16618:	2200      	movs	r2, #0
   1661a:	815a      	strh	r2, [r3, #10]
   1661c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16620:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16624:	895b      	ldrh	r3, [r3, #10]
   16626:	b21b      	sxth	r3, r3
   16628:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1662c:	dd07      	ble.n	1663e <last_radio_from_ppm+0x496>
   1662e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16632:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16636:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1663a:	815a      	strh	r2, [r3, #10]
   1663c:	e00f      	b.n	1665e <last_radio_from_ppm+0x4b6>
   1663e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16642:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16646:	895b      	ldrh	r3, [r3, #10]
   16648:	b21b      	sxth	r3, r3
   1664a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1664e:	da06      	bge.n	1665e <last_radio_from_ppm+0x4b6>
   16650:	f64c 1384 	movw	r3, #51588	; 0xc984
   16654:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16658:	f64d 2280 	movw	r2, #55936	; 0xda80
   1665c:	815a      	strh	r2, [r3, #10]
   1665e:	f64c 1398 	movw	r3, #51608	; 0xc998
   16662:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16666:	899a      	ldrh	r2, [r3, #12]
   16668:	f64c 1384 	movw	r3, #51588	; 0xc984
   1666c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16670:	819a      	strh	r2, [r3, #12]
   16672:	f64c 1398 	movw	r3, #51608	; 0xc998
   16676:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1667a:	2200      	movs	r2, #0
   1667c:	819a      	strh	r2, [r3, #12]
   1667e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16682:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16686:	899b      	ldrh	r3, [r3, #12]
   16688:	b21b      	sxth	r3, r3
   1668a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1668e:	dd07      	ble.n	166a0 <last_radio_from_ppm+0x4f8>
   16690:	f64c 1384 	movw	r3, #51588	; 0xc984
   16694:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16698:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1669c:	819a      	strh	r2, [r3, #12]
   1669e:	e00f      	b.n	166c0 <last_radio_from_ppm+0x518>
   166a0:	f64c 1384 	movw	r3, #51588	; 0xc984
   166a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166a8:	899b      	ldrh	r3, [r3, #12]
   166aa:	b21b      	sxth	r3, r3
   166ac:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   166b0:	da06      	bge.n	166c0 <last_radio_from_ppm+0x518>
   166b2:	f64c 1384 	movw	r3, #51588	; 0xc984
   166b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166ba:	f64d 2280 	movw	r2, #55936	; 0xda80
   166be:	819a      	strh	r2, [r3, #12]
   166c0:	f64c 1398 	movw	r3, #51608	; 0xc998
   166c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166c8:	89da      	ldrh	r2, [r3, #14]
   166ca:	f64c 1384 	movw	r3, #51588	; 0xc984
   166ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166d2:	81da      	strh	r2, [r3, #14]
   166d4:	f64c 1398 	movw	r3, #51608	; 0xc998
   166d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166dc:	2200      	movs	r2, #0
   166de:	81da      	strh	r2, [r3, #14]
   166e0:	f64c 1384 	movw	r3, #51588	; 0xc984
   166e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166e8:	89db      	ldrh	r3, [r3, #14]
   166ea:	b21b      	sxth	r3, r3
   166ec:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   166f0:	dd07      	ble.n	16702 <last_radio_from_ppm+0x55a>
   166f2:	f64c 1384 	movw	r3, #51588	; 0xc984
   166f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166fa:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   166fe:	81da      	strh	r2, [r3, #14]
   16700:	e00f      	b.n	16722 <last_radio_from_ppm+0x57a>
   16702:	f64c 1384 	movw	r3, #51588	; 0xc984
   16706:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1670a:	89db      	ldrh	r3, [r3, #14]
   1670c:	b21b      	sxth	r3, r3
   1670e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16712:	da06      	bge.n	16722 <last_radio_from_ppm+0x57a>
   16714:	f64c 1384 	movw	r3, #51588	; 0xc984
   16718:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1671c:	f64d 2280 	movw	r2, #55936	; 0xda80
   16720:	81da      	strh	r2, [r3, #14]
   16722:	f64c 1398 	movw	r3, #51608	; 0xc998
   16726:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1672a:	8a1a      	ldrh	r2, [r3, #16]
   1672c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16730:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16734:	821a      	strh	r2, [r3, #16]
   16736:	f64c 1398 	movw	r3, #51608	; 0xc998
   1673a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1673e:	2200      	movs	r2, #0
   16740:	821a      	strh	r2, [r3, #16]
   16742:	f64c 1384 	movw	r3, #51588	; 0xc984
   16746:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1674a:	8a1b      	ldrh	r3, [r3, #16]
   1674c:	b21b      	sxth	r3, r3
   1674e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16752:	dd07      	ble.n	16764 <last_radio_from_ppm+0x5bc>
   16754:	f64c 1384 	movw	r3, #51588	; 0xc984
   16758:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1675c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16760:	821a      	strh	r2, [r3, #16]
   16762:	e00f      	b.n	16784 <last_radio_from_ppm+0x5dc>
   16764:	f64c 1384 	movw	r3, #51588	; 0xc984
   16768:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1676c:	8a1b      	ldrh	r3, [r3, #16]
   1676e:	b21b      	sxth	r3, r3
   16770:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16774:	da06      	bge.n	16784 <last_radio_from_ppm+0x5dc>
   16776:	f64c 1384 	movw	r3, #51588	; 0xc984
   1677a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1677e:	f64d 2280 	movw	r2, #55936	; 0xda80
   16782:	821a      	strh	r2, [r3, #16]
   16784:	f64c 13aa 	movw	r3, #51626	; 0xc9aa
   16788:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1678c:	2201      	movs	r2, #1
   1678e:	701a      	strb	r2, [r3, #0]
}
   16790:	370c      	adds	r7, #12
   16792:	46bd      	mov	sp, r7
   16794:	bd90      	pop	{r4, r7, pc}
   16796:	bf00      	nop

00016798 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   16798:	b480      	push	{r7}
   1679a:	af00      	add	r7, sp, #0
  idx_buf = 0;
   1679c:	f64c 13e4 	movw	r3, #51684	; 0xc9e4
   167a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167a4:	2200      	movs	r2, #0
   167a6:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   167a8:	f64c 13e5 	movw	r3, #51685	; 0xc9e5
   167ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167b0:	2200      	movs	r2, #0
   167b2:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   167b4:	f64c 13e4 	movw	r3, #51684	; 0xc9e4
   167b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167bc:	781b      	ldrb	r3, [r3, #0]
   167be:	b2db      	uxtb	r3, r3
   167c0:	461a      	mov	r2, r3
   167c2:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   167c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167ca:	4413      	add	r3, r2
   167cc:	781a      	ldrb	r2, [r3, #0]
   167ce:	f64c 13e6 	movw	r3, #51686	; 0xc9e6
   167d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167d6:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   167d8:	f242 030f 	movw	r3, #8207	; 0x200f
   167dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167e0:	f64c 12e6 	movw	r2, #51686	; 0xc9e6
   167e4:	f2c2 0204 	movt	r2, #8196	; 0x2004
   167e8:	7812      	ldrb	r2, [r2, #0]
   167ea:	b2d2      	uxtb	r2, r2
   167ec:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   167ee:	f64c 13e2 	movw	r3, #51682	; 0xc9e2
   167f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167f6:	2200      	movs	r2, #0
   167f8:	701a      	strb	r2, [r3, #0]
}
   167fa:	46bd      	mov	sp, r7
   167fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   16800:	4770      	bx	lr
   16802:	bf00      	nop

00016804 <fbw_spi_init>:

void fbw_spi_init(void) {
   16804:	b480      	push	{r7}
   16806:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   16808:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   1680c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16810:	2200      	movs	r2, #0
   16812:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   16814:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16818:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1681c:	2200      	movs	r2, #0
   1681e:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   16820:	f242 0317 	movw	r3, #8215	; 0x2017
   16824:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16828:	f242 0217 	movw	r2, #8215	; 0x2017
   1682c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16830:	7812      	ldrb	r2, [r2, #0]
   16832:	b2d2      	uxtb	r2, r2
   16834:	f042 0210 	orr.w	r2, r2, #16
   16838:	b2d2      	uxtb	r2, r2
   1683a:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   1683c:	f242 030d 	movw	r3, #8205	; 0x200d
   16840:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16844:	2240      	movs	r2, #64	; 0x40
   16846:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   16848:	f242 030d 	movw	r3, #8205	; 0x200d
   1684c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16850:	f242 020d 	movw	r2, #8205	; 0x200d
   16854:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16858:	7812      	ldrb	r2, [r2, #0]
   1685a:	b2d2      	uxtb	r2, r2
   1685c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16860:	b2d2      	uxtb	r2, r2
   16862:	701a      	strb	r2, [r3, #0]
}
   16864:	46bd      	mov	sp, r7
   16866:	f85d 7b04 	ldr.w	r7, [sp], #4
   1686a:	4770      	bx	lr
   1686c:	0000      	movs	r0, r0
	...

00016870 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   16870:	b480      	push	{r7}
   16872:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   16874:	f242 032f 	movw	r3, #8239	; 0x202f
   16878:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1687c:	2200      	movs	r2, #0
   1687e:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   16880:	f242 032e 	movw	r3, #8238	; 0x202e
   16884:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16888:	2201      	movs	r2, #1
   1688a:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   1688c:	f242 0325 	movw	r3, #8229	; 0x2025
   16890:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16894:	2207      	movs	r2, #7
   16896:	701a      	strb	r2, [r3, #0]
}
   16898:	46bd      	mov	sp, r7
   1689a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1689e:	4770      	bx	lr

000168a0 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   168a0:	b480      	push	{r7}
   168a2:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   168a4:	f242 032e 	movw	r3, #8238	; 0x202e
   168a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168ac:	f242 022e 	movw	r2, #8238	; 0x202e
   168b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   168b4:	7812      	ldrb	r2, [r2, #0]
   168b6:	b2d2      	uxtb	r2, r2
   168b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   168bc:	b2d2      	uxtb	r2, r2
   168be:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   168c0:	f242 032e 	movw	r3, #8238	; 0x202e
   168c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168c8:	f242 022e 	movw	r2, #8238	; 0x202e
   168cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   168d0:	7812      	ldrb	r2, [r2, #0]
   168d2:	b2d2      	uxtb	r2, r2
   168d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   168d8:	b2d2      	uxtb	r2, r2
   168da:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   168dc:	f242 0317 	movw	r3, #8215	; 0x2017
   168e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168e4:	f242 0217 	movw	r2, #8215	; 0x2017
   168e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   168ec:	7812      	ldrb	r2, [r2, #0]
   168ee:	b2d2      	uxtb	r2, r2
   168f0:	f022 0201 	bic.w	r2, r2, #1
   168f4:	b2d2      	uxtb	r2, r2
   168f6:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   168f8:	f242 0337 	movw	r3, #8247	; 0x2037
   168fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16900:	f242 0237 	movw	r2, #8247	; 0x2037
   16904:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16908:	7812      	ldrb	r2, [r2, #0]
   1690a:	b2d2      	uxtb	r2, r2
   1690c:	f042 0220 	orr.w	r2, r2, #32
   16910:	b2d2      	uxtb	r2, r2
   16912:	701a      	strb	r2, [r3, #0]
}
   16914:	46bd      	mov	sp, r7
   16916:	f85d 7b04 	ldr.w	r7, [sp], #4
   1691a:	4770      	bx	lr

0001691c <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   1691c:	b580      	push	{r7, lr}
   1691e:	b082      	sub	sp, #8
   16920:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16922:	2300      	movs	r3, #0
   16924:	71fb      	strb	r3, [r7, #7]
   16926:	e010      	b.n	1694a <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   16928:	79fa      	ldrb	r2, [r7, #7]
   1692a:	79f9      	ldrb	r1, [r7, #7]
   1692c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16930:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16934:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   16938:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   1693c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16940:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16944:	79fb      	ldrb	r3, [r7, #7]
   16946:	3301      	adds	r3, #1
   16948:	71fb      	strb	r3, [r7, #7]
   1694a:	79fb      	ldrb	r3, [r7, #7]
   1694c:	2b08      	cmp	r3, #8
   1694e:	d9eb      	bls.n	16928 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   16950:	f64c 2374 	movw	r3, #51828	; 0xca74
   16954:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16958:	781b      	ldrb	r3, [r3, #0]
   1695a:	2b00      	cmp	r3, #0
   1695c:	bf0c      	ite	eq
   1695e:	2300      	moveq	r3, #0
   16960:	2301      	movne	r3, #1
   16962:	b2db      	uxtb	r3, r3
   16964:	461a      	mov	r2, r3
   16966:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   1696a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1696e:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   16970:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16974:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16978:	7cdb      	ldrb	r3, [r3, #19]
   1697a:	b2da      	uxtb	r2, r3
   1697c:	f64c 2376 	movw	r3, #51830	; 0xca76
   16980:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16984:	781b      	ldrb	r3, [r3, #0]
   16986:	2b00      	cmp	r3, #0
   16988:	d001      	beq.n	1698e <to_autopilot_from_last_radio+0x72>
   1698a:	2302      	movs	r3, #2
   1698c:	e000      	b.n	16990 <to_autopilot_from_last_radio+0x74>
   1698e:	2300      	movs	r3, #0
   16990:	4313      	orrs	r3, r2
   16992:	b2db      	uxtb	r3, r3
   16994:	b2da      	uxtb	r2, r3
   16996:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   1699a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1699e:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   169a0:	f64c 13aa 	movw	r3, #51626	; 0xc9aa
   169a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169a8:	781b      	ldrb	r3, [r3, #0]
   169aa:	2b00      	cmp	r3, #0
   169ac:	d012      	beq.n	169d4 <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   169ae:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   169b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169b6:	7cdb      	ldrb	r3, [r3, #19]
   169b8:	f043 0304 	orr.w	r3, r3, #4
   169bc:	b2da      	uxtb	r2, r3
   169be:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   169c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169c6:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   169c8:	f64c 13aa 	movw	r3, #51626	; 0xc9aa
   169cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169d0:	2200      	movs	r2, #0
   169d2:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   169d4:	f64c 2378 	movw	r3, #51832	; 0xca78
   169d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169dc:	781a      	ldrb	r2, [r3, #0]
   169de:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   169e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169e6:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   169e8:	f64c 13e8 	movw	r3, #51688	; 0xc9e8
   169ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169f0:	881b      	ldrh	r3, [r3, #0]
   169f2:	4618      	mov	r0, r3
   169f4:	f001 f852 	bl	17a9c <__aeabi_i2d>
   169f8:	4602      	mov	r2, r0
   169fa:	460b      	mov	r3, r1
   169fc:	4610      	mov	r0, r2
   169fe:	4619      	mov	r1, r3
   16a00:	a31b      	add	r3, pc, #108	; (adr r3, 16a70 <to_autopilot_from_last_radio+0x154>)
   16a02:	e9d3 2300 	ldrd	r2, r3, [r3]
   16a06:	f001 f8af 	bl	17b68 <__aeabi_dmul>
   16a0a:	4602      	mov	r2, r0
   16a0c:	460b      	mov	r3, r1
   16a0e:	4610      	mov	r0, r2
   16a10:	4619      	mov	r1, r3
   16a12:	f04f 0200 	mov.w	r2, #0
   16a16:	f04f 0300 	mov.w	r3, #0
   16a1a:	f2c4 0340 	movt	r3, #16448	; 0x4040
   16a1e:	f001 f9cd 	bl	17dbc <__aeabi_ddiv>
   16a22:	4602      	mov	r2, r0
   16a24:	460b      	mov	r3, r1
   16a26:	4610      	mov	r0, r2
   16a28:	4619      	mov	r1, r3
   16a2a:	a313      	add	r3, pc, #76	; (adr r3, 16a78 <to_autopilot_from_last_radio+0x15c>)
   16a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16a30:	f000 fee8 	bl	17804 <__adddf3>
   16a34:	4602      	mov	r2, r0
   16a36:	460b      	mov	r3, r1
   16a38:	4610      	mov	r0, r2
   16a3a:	4619      	mov	r1, r3
   16a3c:	f04f 0200 	mov.w	r2, #0
   16a40:	f04f 0300 	mov.w	r3, #0
   16a44:	f2c4 0324 	movt	r3, #16420	; 0x4024
   16a48:	f001 f88e 	bl	17b68 <__aeabi_dmul>
   16a4c:	4602      	mov	r2, r0
   16a4e:	460b      	mov	r3, r1
   16a50:	4610      	mov	r0, r2
   16a52:	4619      	mov	r1, r3
   16a54:	f001 fb4a 	bl	180ec <__aeabi_d2uiz>
   16a58:	4603      	mov	r3, r0
   16a5a:	b2da      	uxtb	r2, r3
   16a5c:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a64:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   16a66:	3708      	adds	r7, #8
   16a68:	46bd      	mov	sp, r7
   16a6a:	bd80      	pop	{r7, pc}
   16a6c:	f3af 8000 	nop.w
   16a70:	1eb851ec 	.word	0x1eb851ec
   16a74:	3f91eb85 	.word	0x3f91eb85
   16a78:	020c49ba 	.word	0x020c49ba
   16a7c:	3fb6872b 	.word	0x3fb6872b

00016a80 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   16a80:	b580      	push	{r7, lr}
   16a82:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
//   if ( !SpiIsSelected() && spi_was_interrupted ) 
   {
      spi_was_interrupted = FALSE;
   16a84:	f64c 13e3 	movw	r3, #51683	; 0xc9e3
   16a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a8c:	2200      	movs	r2, #0
   16a8e:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   16a90:	f7ff ff44 	bl	1691c <to_autopilot_from_last_radio>
      spi_reset();
   16a94:	f7ff fe80 	bl	16798 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   16a98:	bd80      	pop	{r7, pc}
   16a9a:	bf00      	nop

00016a9c <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   16a9c:	b580      	push	{r7, lr}
   16a9e:	af00      	add	r7, sp, #0
  uart_init_tx();
   16aa0:	f000 fb02 	bl	170a8 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   16aa4:	f648 2018 	movw	r0, #35352	; 0x8a18
   16aa8:	f2c0 0001 	movt	r0, #1
   16aac:	f000 fbda 	bl	17264 <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   16ab0:	f7ff fab2 	bl	16018 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   16ab4:	2003      	movs	r0, #3
   16ab6:	f64c 11e8 	movw	r1, #51688	; 0xc9e8
   16aba:	f2c2 0104 	movt	r1, #8196	; 0x2004
   16abe:	f7ff fa97 	bl	15ff0 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   16ac2:	2006      	movs	r0, #6
   16ac4:	f64c 212c 	movw	r1, #51756	; 0xca2c
   16ac8:	f2c2 0104 	movt	r1, #8196	; 0x2004
   16acc:	f7ff fa90 	bl	15ff0 <fbw_adc_buf_channel>
#endif
  timer_init();
   16ad0:	f7ff fece 	bl	16870 <timer_init>
  servo_init();
   16ad4:	f000 f894 	bl	16c00 <servo_init>
  ppm_init();
   16ad8:	f7ff fee2 	bl	168a0 <ppm_init>
  fbw_spi_init();
   16adc:	f7ff fe92 	bl	16804 <fbw_spi_init>
  //sei(); //FN
}
   16ae0:	bd80      	pop	{r7, pc}
   16ae2:	bf00      	nop

00016ae4 <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   16ae4:	b580      	push	{r7, lr}
   16ae6:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    //if( ppm_valid ) 
    {
      ppm_valid = FALSE;
   16ae8:	f64c 13ab 	movw	r3, #51627	; 0xc9ab
   16aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16af0:	2200      	movs	r2, #0
   16af2:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   16af4:	f64c 2377 	movw	r3, #51831	; 0xca77
   16af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16afc:	781b      	ldrb	r3, [r3, #0]
   16afe:	3301      	adds	r3, #1
   16b00:	b2da      	uxtb	r2, r3
   16b02:	f64c 2377 	movw	r3, #51831	; 0xca77
   16b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b0a:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   16b0c:	f64c 2374 	movw	r3, #51828	; 0xca74
   16b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b14:	2201      	movs	r2, #1
   16b16:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16b18:	f64c 2376 	movw	r3, #51830	; 0xca76
   16b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b20:	2200      	movs	r2, #0
   16b22:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   16b24:	f64c 2372 	movw	r3, #51826	; 0xca72
   16b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b2c:	2200      	movs	r2, #0
   16b2e:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16b30:	f7ff fb3a 	bl	161a8 <last_radio_from_ppm>
      //if (last_radio_contains_avg_channels) 
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   16b34:	f64c 1384 	movw	r3, #51588	; 0xc984
   16b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b3c:	891b      	ldrh	r3, [r3, #8]
   16b3e:	b21b      	sxth	r3, r3
   16b40:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   16b44:	bfb4      	ite	lt
   16b46:	2300      	movlt	r3, #0
   16b48:	2301      	movge	r3, #1
   16b4a:	b2db      	uxtb	r3, r3
   16b4c:	461a      	mov	r2, r3
   16b4e:	f64c 2370 	movw	r3, #51824	; 0xca70
   16b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b56:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   16b58:	f64c 2370 	movw	r3, #51824	; 0xca70
   16b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b60:	781b      	ldrb	r3, [r3, #0]
   16b62:	2b00      	cmp	r3, #0
   16b64:	d105      	bne.n	16b72 <test_ppm_task+0x8e>
      {
	servo_set(last_radio);
   16b66:	f64c 1084 	movw	r0, #51588	; 0xc984
   16b6a:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16b6e:	f000 f925 	bl	16dbc <servo_set>
      }
    } 
    //else if (mode == MODE_MANUAL && radio_really_lost) 
    {
      mode = MODE_AUTO;
   16b72:	f64c 2370 	movw	r3, #51824	; 0xca70
   16b76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b7a:	2201      	movs	r2, #1
   16b7c:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= STALLED_TIME) 
    {
      radio_ok = FALSE;
   16b7e:	f64c 2374 	movw	r3, #51828	; 0xca74
   16b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b86:	2200      	movs	r2, #0
   16b88:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= REALLY_STALLED_TIME) 
    {
      radio_really_lost = TRUE;
   16b8a:	f64c 2376 	movw	r3, #51830	; 0xca76
   16b8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b92:	2201      	movs	r2, #1
   16b94:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   16b96:	bd80      	pop	{r7, pc}

00016b98 <check_failsafe_task>:
void check_failsafe_task(void)
{
   16b98:	b580      	push	{r7, lr}
   16b9a:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    //if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
    {
      servo_set(failsafe);
   16b9c:	f648 2004 	movw	r0, #35332	; 0x8a04
   16ba0:	f2c0 0001 	movt	r0, #1
   16ba4:	f000 f90a 	bl	16dbc <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   16ba8:	bd80      	pop	{r7, pc}
   16baa:	bf00      	nop

00016bac <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   16bac:	b580      	push	{r7, lr}
   16bae:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     //if ( !SpiIsSelected() && spi_was_interrupted ) 
     {
         if (mega128_receive_valid)
   16bb0:	f64c 13e2 	movw	r3, #51682	; 0xc9e2
   16bb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bb8:	781b      	ldrb	r3, [r3, #0]
   16bba:	b2db      	uxtb	r3, r3
   16bbc:	2b00      	cmp	r3, #0
   16bbe:	d018      	beq.n	16bf2 <check_mega128_values_task+0x46>
         { 
             time_since_last_mega128 = 0;
   16bc0:	f64c 2371 	movw	r3, #51825	; 0xca71
   16bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bc8:	2200      	movs	r2, #0
   16bca:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   16bcc:	f64c 2375 	movw	r3, #51829	; 0xca75
   16bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bd4:	2201      	movs	r2, #1
   16bd6:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   16bd8:	f64c 2370 	movw	r3, #51824	; 0xca70
   16bdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16be0:	781b      	ldrb	r3, [r3, #0]
   16be2:	2b01      	cmp	r3, #1
   16be4:	d105      	bne.n	16bf2 <check_mega128_values_task+0x46>
                 servo_set(from_mega128.channels);
   16be6:	f64c 10b4 	movw	r0, #51636	; 0xc9b4
   16bea:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16bee:	f000 f8e5 	bl	16dbc <servo_set>
         }
     }
     //if (time_since_last_mega128 == STALLED_TIME) 
     {
         mega128_ok = FALSE;
   16bf2:	f64c 2375 	movw	r3, #51829	; 0xca75
   16bf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bfa:	2200      	movs	r2, #0
   16bfc:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   16bfe:	bd80      	pop	{r7, pc}

00016c00 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16c00:	b480      	push	{r7}
   16c02:	b083      	sub	sp, #12
   16c04:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   16c06:	f242 0311 	movw	r3, #8209	; 0x2011
   16c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c0e:	f242 0211 	movw	r2, #8209	; 0x2011
   16c12:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c16:	7812      	ldrb	r2, [r2, #0]
   16c18:	b2d2      	uxtb	r2, r2
   16c1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16c1e:	b2d2      	uxtb	r2, r2
   16c20:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   16c22:	f242 0317 	movw	r3, #8215	; 0x2017
   16c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c2a:	f242 0217 	movw	r2, #8215	; 0x2017
   16c2e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c32:	7812      	ldrb	r2, [r2, #0]
   16c34:	b2d2      	uxtb	r2, r2
   16c36:	f042 0202 	orr.w	r2, r2, #2
   16c3a:	b2d2      	uxtb	r2, r2
   16c3c:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16c3e:	f242 0312 	movw	r3, #8210	; 0x2012
   16c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c46:	f242 0212 	movw	r2, #8210	; 0x2012
   16c4a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c4e:	7812      	ldrb	r2, [r2, #0]
   16c50:	b2d2      	uxtb	r2, r2
   16c52:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16c56:	b2d2      	uxtb	r2, r2
   16c58:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   16c5a:	f242 0318 	movw	r3, #8216	; 0x2018
   16c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c62:	f242 0218 	movw	r2, #8216	; 0x2018
   16c66:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c6a:	7812      	ldrb	r2, [r2, #0]
   16c6c:	b2d2      	uxtb	r2, r2
   16c6e:	f022 0202 	bic.w	r2, r2, #2
   16c72:	b2d2      	uxtb	r2, r2
   16c74:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16c76:	2300      	movs	r3, #0
   16c78:	71fb      	strb	r3, [r7, #7]
   16c7a:	e00b      	b.n	16c94 <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   16c7c:	79fa      	ldrb	r2, [r7, #7]
   16c7e:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16c82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c86:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   16c8a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16c8e:	79fb      	ldrb	r3, [r7, #7]
   16c90:	3301      	adds	r3, #1
   16c92:	71fb      	strb	r3, [r7, #7]
   16c94:	79fb      	ldrb	r3, [r7, #7]
   16c96:	2b09      	cmp	r3, #9
   16c98:	d9f0      	bls.n	16c7c <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   16c9a:	f242 032a 	movw	r3, #8234	; 0x202a
   16c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ca2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   16ca6:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   16ca8:	f242 032f 	movw	r3, #8239	; 0x202f
   16cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cb0:	f242 022f 	movw	r2, #8239	; 0x202f
   16cb4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16cb8:	7812      	ldrb	r2, [r2, #0]
   16cba:	b2d2      	uxtb	r2, r2
   16cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16cc0:	b2d2      	uxtb	r2, r2
   16cc2:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   16cc4:	f242 0336 	movw	r3, #8246	; 0x2036
   16cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ccc:	2210      	movs	r2, #16
   16cce:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16cd0:	f242 0312 	movw	r3, #8210	; 0x2012
   16cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cd8:	f242 0212 	movw	r2, #8210	; 0x2012
   16cdc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16ce0:	7812      	ldrb	r2, [r2, #0]
   16ce2:	b2d2      	uxtb	r2, r2
   16ce4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16ce8:	b2d2      	uxtb	r2, r2
   16cea:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   16cec:	f242 0337 	movw	r3, #8247	; 0x2037
   16cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cf4:	f242 0237 	movw	r2, #8247	; 0x2037
   16cf8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16cfc:	7812      	ldrb	r2, [r2, #0]
   16cfe:	b2d2      	uxtb	r2, r2
   16d00:	f042 0210 	orr.w	r2, r2, #16
   16d04:	b2d2      	uxtb	r2, r2
   16d06:	701a      	strb	r2, [r3, #0]
}
   16d08:	370c      	adds	r7, #12
   16d0a:	46bd      	mov	sp, r7
   16d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16d10:	4770      	bx	lr
   16d12:	bf00      	nop

00016d14 <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   16d14:	b480      	push	{r7}
   16d16:	b083      	sub	sp, #12
   16d18:	af00      	add	r7, sp, #0
   16d1a:	4602      	mov	r2, r0
   16d1c:	460b      	mov	r3, r1
   16d1e:	71fa      	strb	r2, [r7, #7]
   16d20:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   16d22:	79f9      	ldrb	r1, [r7, #7]
   16d24:	88bb      	ldrh	r3, [r7, #4]
   16d26:	011b      	lsls	r3, r3, #4
   16d28:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16d2c:	d308      	bcc.n	16d40 <servo_set_one+0x2c>
   16d2e:	88bb      	ldrh	r3, [r7, #4]
   16d30:	011b      	lsls	r3, r3, #4
   16d32:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16d36:	bf28      	it	cs
   16d38:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16d3c:	b29a      	uxth	r2, r3
   16d3e:	e001      	b.n	16d44 <servo_set_one+0x30>
   16d40:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16d44:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16d48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d4c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   16d50:	370c      	adds	r7, #12
   16d52:	46bd      	mov	sp, r7
   16d54:	f85d 7b04 	ldr.w	r7, [sp], #4
   16d58:	4770      	bx	lr
   16d5a:	bf00      	nop

00016d5c <servo_transmit>:

void 
servo_transmit(void) {
   16d5c:	b580      	push	{r7, lr}
   16d5e:	b082      	sub	sp, #8
   16d60:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   16d62:	2000      	movs	r0, #0
   16d64:	f000 f9e6 	bl	17134 <uart_transmit>
   16d68:	2000      	movs	r0, #0
   16d6a:	f000 f9e3 	bl	17134 <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16d6e:	2300      	movs	r3, #0
   16d70:	71fb      	strb	r3, [r7, #7]
   16d72:	e01a      	b.n	16daa <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   16d74:	79fa      	ldrb	r2, [r7, #7]
   16d76:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d7e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16d82:	0a1b      	lsrs	r3, r3, #8
   16d84:	b29b      	uxth	r3, r3
   16d86:	b2db      	uxtb	r3, r3
   16d88:	4618      	mov	r0, r3
   16d8a:	f000 f9d3 	bl	17134 <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   16d8e:	79fa      	ldrb	r2, [r7, #7]
   16d90:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16d94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d98:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16d9c:	b2db      	uxtb	r3, r3
   16d9e:	4618      	mov	r0, r3
   16da0:	f000 f9c8 	bl	17134 <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16da4:	79fb      	ldrb	r3, [r7, #7]
   16da6:	3301      	adds	r3, #1
   16da8:	71fb      	strb	r3, [r7, #7]
   16daa:	79fb      	ldrb	r3, [r7, #7]
   16dac:	2b09      	cmp	r3, #9
   16dae:	d9e1      	bls.n	16d74 <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   16db0:	200a      	movs	r0, #10
   16db2:	f000 f9bf 	bl	17134 <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   16db6:	3708      	adds	r7, #8
   16db8:	46bd      	mov	sp, r7
   16dba:	bd80      	pop	{r7, pc}

00016dbc <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   16dbc:	b5b0      	push	{r4, r5, r7, lr}
   16dbe:	b084      	sub	sp, #16
   16dc0:	af00      	add	r7, sp, #0
   16dc2:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   16dc4:	687b      	ldr	r3, [r7, #4]
   16dc6:	330a      	adds	r3, #10
   16dc8:	881b      	ldrh	r3, [r3, #0]
   16dca:	b21b      	sxth	r3, r3
   16dcc:	005b      	lsls	r3, r3, #1
   16dce:	4618      	mov	r0, r3
   16dd0:	f000 fe64 	bl	17a9c <__aeabi_i2d>
   16dd4:	4602      	mov	r2, r0
   16dd6:	460b      	mov	r3, r1
   16dd8:	4610      	mov	r0, r2
   16dda:	4619      	mov	r1, r3
   16ddc:	a3a6      	add	r3, pc, #664	; (adr r3, 17078 <servo_set+0x2bc>)
   16dde:	e9d3 2300 	ldrd	r2, r3, [r3]
   16de2:	f000 fec1 	bl	17b68 <__aeabi_dmul>
   16de6:	4602      	mov	r2, r0
   16de8:	460b      	mov	r3, r1
   16dea:	4610      	mov	r0, r2
   16dec:	4619      	mov	r1, r3
   16dee:	f001 f955 	bl	1809c <__aeabi_d2iz>
   16df2:	4603      	mov	r3, r0
   16df4:	b29b      	uxth	r3, r3
   16df6:	b29b      	uxth	r3, r3
   16df8:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16dfc:	81fb      	strh	r3, [r7, #14]
   16dfe:	89fb      	ldrh	r3, [r7, #14]
   16e00:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16e04:	d307      	bcc.n	16e16 <servo_set+0x5a>
   16e06:	89fb      	ldrh	r3, [r7, #14]
   16e08:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16e0c:	bf28      	it	cs
   16e0e:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16e12:	b29a      	uxth	r2, r3
   16e14:	e001      	b.n	16e1a <servo_set+0x5e>
   16e16:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16e1a:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e22:	80da      	strh	r2, [r3, #6]
   16e24:	687b      	ldr	r3, [r7, #4]
   16e26:	881b      	ldrh	r3, [r3, #0]
   16e28:	b21b      	sxth	r3, r3
   16e2a:	005b      	lsls	r3, r3, #1
   16e2c:	4618      	mov	r0, r3
   16e2e:	f000 fe35 	bl	17a9c <__aeabi_i2d>
   16e32:	4602      	mov	r2, r0
   16e34:	460b      	mov	r3, r1
   16e36:	4610      	mov	r0, r2
   16e38:	4619      	mov	r1, r3
   16e3a:	a38f      	add	r3, pc, #572	; (adr r3, 17078 <servo_set+0x2bc>)
   16e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16e40:	f000 fe92 	bl	17b68 <__aeabi_dmul>
   16e44:	4602      	mov	r2, r0
   16e46:	460b      	mov	r3, r1
   16e48:	4610      	mov	r0, r2
   16e4a:	4619      	mov	r1, r3
   16e4c:	f001 f926 	bl	1809c <__aeabi_d2iz>
   16e50:	4603      	mov	r3, r0
   16e52:	b29b      	uxth	r3, r3
   16e54:	b29b      	uxth	r3, r3
   16e56:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16e5a:	81fb      	strh	r3, [r7, #14]
   16e5c:	89fb      	ldrh	r3, [r7, #14]
   16e5e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16e62:	d307      	bcc.n	16e74 <servo_set+0xb8>
   16e64:	89fb      	ldrh	r3, [r7, #14]
   16e66:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16e6a:	bf28      	it	cs
   16e6c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16e70:	b29a      	uxth	r2, r3
   16e72:	e001      	b.n	16e78 <servo_set+0xbc>
   16e74:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16e78:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e80:	825a      	strh	r2, [r3, #18]
   16e82:	687b      	ldr	r3, [r7, #4]
   16e84:	3304      	adds	r3, #4
   16e86:	881b      	ldrh	r3, [r3, #0]
   16e88:	b21b      	sxth	r3, r3
   16e8a:	4618      	mov	r0, r3
   16e8c:	f000 fe06 	bl	17a9c <__aeabi_i2d>
   16e90:	4602      	mov	r2, r0
   16e92:	460b      	mov	r3, r1
   16e94:	4610      	mov	r0, r2
   16e96:	4619      	mov	r1, r3
   16e98:	a379      	add	r3, pc, #484	; (adr r3, 17080 <servo_set+0x2c4>)
   16e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   16e9e:	f000 fe63 	bl	17b68 <__aeabi_dmul>
   16ea2:	4602      	mov	r2, r0
   16ea4:	460b      	mov	r3, r1
   16ea6:	4610      	mov	r0, r2
   16ea8:	4619      	mov	r1, r3
   16eaa:	f001 f8f7 	bl	1809c <__aeabi_d2iz>
   16eae:	4603      	mov	r3, r0
   16eb0:	b29b      	uxth	r3, r3
   16eb2:	b29b      	uxth	r3, r3
   16eb4:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   16eb8:	3320      	adds	r3, #32
   16eba:	81fb      	strh	r3, [r7, #14]
   16ebc:	89fb      	ldrh	r3, [r7, #14]
   16ebe:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16ec2:	d307      	bcc.n	16ed4 <servo_set+0x118>
   16ec4:	89fb      	ldrh	r3, [r7, #14]
   16ec6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16eca:	bf28      	it	cs
   16ecc:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16ed0:	b29a      	uxth	r2, r3
   16ed2:	e001      	b.n	16ed8 <servo_set+0x11c>
   16ed4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16ed8:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ee0:	819a      	strh	r2, [r3, #12]
   16ee2:	687b      	ldr	r3, [r7, #4]
   16ee4:	885b      	ldrh	r3, [r3, #2]
   16ee6:	81bb      	strh	r3, [r7, #12]
   16ee8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16eec:	2b00      	cmp	r3, #0
   16eee:	dd06      	ble.n	16efe <servo_set+0x142>
   16ef0:	f04f 0400 	mov.w	r4, #0
   16ef4:	f04f 0500 	mov.w	r5, #0
   16ef8:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16efc:	e002      	b.n	16f04 <servo_set+0x148>
   16efe:	a562      	add	r5, pc, #392	; (adr r5, 17088 <servo_set+0x2cc>)
   16f00:	e9d5 4500 	ldrd	r4, r5, [r5]
   16f04:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16f08:	4618      	mov	r0, r3
   16f0a:	f000 fdc7 	bl	17a9c <__aeabi_i2d>
   16f0e:	4602      	mov	r2, r0
   16f10:	460b      	mov	r3, r1
   16f12:	4620      	mov	r0, r4
   16f14:	4629      	mov	r1, r5
   16f16:	f000 fe27 	bl	17b68 <__aeabi_dmul>
   16f1a:	4602      	mov	r2, r0
   16f1c:	460b      	mov	r3, r1
   16f1e:	4610      	mov	r0, r2
   16f20:	4619      	mov	r1, r3
   16f22:	a35b      	add	r3, pc, #364	; (adr r3, 17090 <servo_set+0x2d4>)
   16f24:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f28:	f000 fe1e 	bl	17b68 <__aeabi_dmul>
   16f2c:	4602      	mov	r2, r0
   16f2e:	460b      	mov	r3, r1
   16f30:	4610      	mov	r0, r2
   16f32:	4619      	mov	r1, r3
   16f34:	f001 f8b2 	bl	1809c <__aeabi_d2iz>
   16f38:	4603      	mov	r3, r0
   16f3a:	b29b      	uxth	r3, r3
   16f3c:	b29b      	uxth	r3, r3
   16f3e:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   16f42:	81fb      	strh	r3, [r7, #14]
   16f44:	89fb      	ldrh	r3, [r7, #14]
   16f46:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16f4a:	d307      	bcc.n	16f5c <servo_set+0x1a0>
   16f4c:	89fb      	ldrh	r3, [r7, #14]
   16f4e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16f52:	bf28      	it	cs
   16f54:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16f58:	b29a      	uxth	r2, r3
   16f5a:	e001      	b.n	16f60 <servo_set+0x1a4>
   16f5c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16f60:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16f64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f68:	801a      	strh	r2, [r3, #0]
   16f6a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16f6e:	2b00      	cmp	r3, #0
   16f70:	dd03      	ble.n	16f7a <servo_set+0x1be>
   16f72:	a545      	add	r5, pc, #276	; (adr r5, 17088 <servo_set+0x2cc>)
   16f74:	e9d5 4500 	ldrd	r4, r5, [r5]
   16f78:	e005      	b.n	16f86 <servo_set+0x1ca>
   16f7a:	f04f 0400 	mov.w	r4, #0
   16f7e:	f04f 0500 	mov.w	r5, #0
   16f82:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16f86:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16f8a:	4618      	mov	r0, r3
   16f8c:	f000 fd86 	bl	17a9c <__aeabi_i2d>
   16f90:	4602      	mov	r2, r0
   16f92:	460b      	mov	r3, r1
   16f94:	4620      	mov	r0, r4
   16f96:	4629      	mov	r1, r5
   16f98:	f000 fde6 	bl	17b68 <__aeabi_dmul>
   16f9c:	4602      	mov	r2, r0
   16f9e:	460b      	mov	r3, r1
   16fa0:	4610      	mov	r0, r2
   16fa2:	4619      	mov	r1, r3
   16fa4:	a33c      	add	r3, pc, #240	; (adr r3, 17098 <servo_set+0x2dc>)
   16fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
   16faa:	f000 fddd 	bl	17b68 <__aeabi_dmul>
   16fae:	4602      	mov	r2, r0
   16fb0:	460b      	mov	r3, r1
   16fb2:	4610      	mov	r0, r2
   16fb4:	4619      	mov	r1, r3
   16fb6:	f001 f871 	bl	1809c <__aeabi_d2iz>
   16fba:	4603      	mov	r3, r0
   16fbc:	b29b      	uxth	r3, r3
   16fbe:	b29b      	uxth	r3, r3
   16fc0:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   16fc4:	3320      	adds	r3, #32
   16fc6:	81fb      	strh	r3, [r7, #14]
   16fc8:	89fb      	ldrh	r3, [r7, #14]
   16fca:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16fce:	d307      	bcc.n	16fe0 <servo_set+0x224>
   16fd0:	89fb      	ldrh	r3, [r7, #14]
   16fd2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16fd6:	bf28      	it	cs
   16fd8:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16fdc:	b29a      	uxth	r2, r3
   16fde:	e001      	b.n	16fe4 <servo_set+0x228>
   16fe0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16fe4:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16fe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16fec:	809a      	strh	r2, [r3, #4]
   16fee:	687b      	ldr	r3, [r7, #4]
   16ff0:	3306      	adds	r3, #6
   16ff2:	881b      	ldrh	r3, [r3, #0]
   16ff4:	b21b      	sxth	r3, r3
   16ff6:	4618      	mov	r0, r3
   16ff8:	f000 fd50 	bl	17a9c <__aeabi_i2d>
   16ffc:	4604      	mov	r4, r0
   16ffe:	460d      	mov	r5, r1
   17000:	687b      	ldr	r3, [r7, #4]
   17002:	3302      	adds	r3, #2
   17004:	881b      	ldrh	r3, [r3, #0]
   17006:	b21b      	sxth	r3, r3
   17008:	4618      	mov	r0, r3
   1700a:	f000 fd47 	bl	17a9c <__aeabi_i2d>
   1700e:	4602      	mov	r2, r0
   17010:	460b      	mov	r3, r1
   17012:	4620      	mov	r0, r4
   17014:	4629      	mov	r1, r5
   17016:	f000 fbf5 	bl	17804 <__adddf3>
   1701a:	4602      	mov	r2, r0
   1701c:	460b      	mov	r3, r1
   1701e:	4610      	mov	r0, r2
   17020:	4619      	mov	r1, r3
   17022:	a31f      	add	r3, pc, #124	; (adr r3, 170a0 <servo_set+0x2e4>)
   17024:	e9d3 2300 	ldrd	r2, r3, [r3]
   17028:	f000 fd9e 	bl	17b68 <__aeabi_dmul>
   1702c:	4602      	mov	r2, r0
   1702e:	460b      	mov	r3, r1
   17030:	4610      	mov	r0, r2
   17032:	4619      	mov	r1, r3
   17034:	f001 f832 	bl	1809c <__aeabi_d2iz>
   17038:	4603      	mov	r3, r0
   1703a:	b29b      	uxth	r3, r3
   1703c:	b29b      	uxth	r3, r3
   1703e:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   17042:	3320      	adds	r3, #32
   17044:	81fb      	strh	r3, [r7, #14]
   17046:	89fb      	ldrh	r3, [r7, #14]
   17048:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1704c:	d307      	bcc.n	1705e <servo_set+0x2a2>
   1704e:	89fb      	ldrh	r3, [r7, #14]
   17050:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   17054:	bf28      	it	cs
   17056:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   1705a:	b29a      	uxth	r2, r3
   1705c:	e001      	b.n	17062 <servo_set+0x2a6>
   1705e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   17062:	f64c 237c 	movw	r3, #51836	; 0xca7c
   17066:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1706a:	81da      	strh	r2, [r3, #14]
}
   1706c:	3710      	adds	r7, #16
   1706e:	46bd      	mov	sp, r7
   17070:	bdb0      	pop	{r4, r5, r7, pc}
   17072:	bf00      	nop
   17074:	f3af 8000 	nop.w
   17078:	aaaa9ef0 	.word	0xaaaa9ef0
   1707c:	3feaaaaa 	.word	0x3feaaaaa
   17080:	fc96473e 	.word	0xfc96473e
   17084:	3fdfc962 	.word	0x3fdfc962
   17088:	51eb851f 	.word	0x51eb851f
   1708c:	3fe51eb8 	.word	0x3fe51eb8
   17090:	9999999a 	.word	0x9999999a
   17094:	bfe19999 	.word	0xbfe19999
   17098:	aaaa9ef0 	.word	0xaaaa9ef0
   1709c:	bfe0aaaa 	.word	0xbfe0aaaa
   170a0:	eeeed77a 	.word	0xeeeed77a
   170a4:	bfdeeeee 	.word	0xbfdeeeee

000170a8 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   170a8:	b480      	push	{r7}
   170aa:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   170ac:	f242 0320 	movw	r3, #8224	; 0x2020
   170b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170b4:	2200      	movs	r2, #0
   170b6:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   170b8:	f242 0309 	movw	r3, #8201	; 0x2009
   170bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170c0:	2219      	movs	r2, #25
   170c2:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   170c4:	f242 030b 	movw	r3, #8203	; 0x200b
   170c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170cc:	2200      	movs	r2, #0
   170ce:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   170d0:	f242 030a 	movw	r3, #8202	; 0x200a
   170d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170d8:	2208      	movs	r2, #8
   170da:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   170dc:	f242 0320 	movw	r3, #8224	; 0x2020
   170e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170e4:	2286      	movs	r2, #134	; 0x86
   170e6:	701a      	strb	r2, [r3, #0]
}
   170e8:	46bd      	mov	sp, r7
   170ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   170ee:	4770      	bx	lr

000170f0 <uart_init_rx>:

void uart_init_rx() {
   170f0:	b480      	push	{r7}
   170f2:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   170f4:	f242 030a 	movw	r3, #8202	; 0x200a
   170f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170fc:	f242 020a 	movw	r2, #8202	; 0x200a
   17100:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17104:	7812      	ldrb	r2, [r2, #0]
   17106:	b2d2      	uxtb	r2, r2
   17108:	f042 0210 	orr.w	r2, r2, #16
   1710c:	b2d2      	uxtb	r2, r2
   1710e:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   17110:	f242 030a 	movw	r3, #8202	; 0x200a
   17114:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17118:	f242 020a 	movw	r2, #8202	; 0x200a
   1711c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17120:	7812      	ldrb	r2, [r2, #0]
   17122:	b2d2      	uxtb	r2, r2
   17124:	f062 027f 	orn	r2, r2, #127	; 0x7f
   17128:	b2d2      	uxtb	r2, r2
   1712a:	701a      	strb	r2, [r3, #0]
}
   1712c:	46bd      	mov	sp, r7
   1712e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17132:	4770      	bx	lr

00017134 <uart_transmit>:

void uart_transmit( unsigned char data ) {
   17134:	b480      	push	{r7}
   17136:	b083      	sub	sp, #12
   17138:	af00      	add	r7, sp, #0
   1713a:	4603      	mov	r3, r0
   1713c:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   1713e:	f242 030a 	movw	r3, #8202	; 0x200a
   17142:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17146:	781b      	ldrb	r3, [r3, #0]
   17148:	b2db      	uxtb	r3, r3
   1714a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1714e:	2b00      	cmp	r3, #0
   17150:	d028      	beq.n	171a4 <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   17152:	f64c 2391 	movw	r3, #51857	; 0xca91
   17156:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1715a:	781b      	ldrb	r3, [r3, #0]
   1715c:	b2db      	uxtb	r3, r3
   1715e:	461a      	mov	r2, r3
   17160:	f64c 2390 	movw	r3, #51856	; 0xca90
   17164:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17168:	781b      	ldrb	r3, [r3, #0]
   1716a:	3301      	adds	r3, #1
   1716c:	429a      	cmp	r2, r3
   1716e:	d100      	bne.n	17172 <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   17170:	e02c      	b.n	171cc <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   17172:	f64c 2390 	movw	r3, #51856	; 0xca90
   17176:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1717a:	781b      	ldrb	r3, [r3, #0]
   1717c:	461a      	mov	r2, r3
   1717e:	f64c 2394 	movw	r3, #51860	; 0xca94
   17182:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17186:	79f9      	ldrb	r1, [r7, #7]
   17188:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   1718a:	f64c 2390 	movw	r3, #51856	; 0xca90
   1718e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17192:	781b      	ldrb	r3, [r3, #0]
   17194:	3301      	adds	r3, #1
   17196:	b2da      	uxtb	r2, r3
   17198:	f64c 2390 	movw	r3, #51856	; 0xca90
   1719c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   171a0:	701a      	strb	r2, [r3, #0]
   171a2:	e013      	b.n	171cc <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   171a4:	f242 030c 	movw	r3, #8204	; 0x200c
   171a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   171ac:	79fa      	ldrb	r2, [r7, #7]
   171ae:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   171b0:	f242 030a 	movw	r3, #8202	; 0x200a
   171b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   171b8:	f242 020a 	movw	r2, #8202	; 0x200a
   171bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   171c0:	7812      	ldrb	r2, [r2, #0]
   171c2:	b2d2      	uxtb	r2, r2
   171c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   171c8:	b2d2      	uxtb	r2, r2
   171ca:	701a      	strb	r2, [r3, #0]
  }
}
   171cc:	370c      	adds	r7, #12
   171ce:	46bd      	mov	sp, r7
   171d0:	f85d 7b04 	ldr.w	r7, [sp], #4
   171d4:	4770      	bx	lr
   171d6:	bf00      	nop

000171d8 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   171d8:	b590      	push	{r4, r7, lr}
   171da:	b089      	sub	sp, #36	; 0x24
   171dc:	af00      	add	r7, sp, #0
   171de:	4603      	mov	r3, r0
   171e0:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   171e2:	f648 2358 	movw	r3, #35416	; 0x8a58
   171e6:	f2c0 0301 	movt	r3, #1
   171ea:	f107 040c 	add.w	r4, r7, #12
   171ee:	6818      	ldr	r0, [r3, #0]
   171f0:	6859      	ldr	r1, [r3, #4]
   171f2:	689a      	ldr	r2, [r3, #8]
   171f4:	68db      	ldr	r3, [r3, #12]
   171f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   171f8:	79fb      	ldrb	r3, [r7, #7]
   171fa:	091b      	lsrs	r3, r3, #4
   171fc:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   171fe:	79fb      	ldrb	r3, [r7, #7]
   17200:	f003 030f 	and.w	r3, r3, #15
   17204:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   17206:	230f      	movs	r3, #15
   17208:	77fb      	strb	r3, [r7, #31]
        low = 15;
   1720a:	230f      	movs	r3, #15
   1720c:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   1720e:	7ffb      	ldrb	r3, [r7, #31]
   17210:	f107 0220 	add.w	r2, r7, #32
   17214:	4413      	add	r3, r2
   17216:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1721a:	4618      	mov	r0, r3
   1721c:	f7ff ff8a 	bl	17134 <uart_transmit>
  uart_transmit(hex[low]);
   17220:	7fbb      	ldrb	r3, [r7, #30]
   17222:	f107 0220 	add.w	r2, r7, #32
   17226:	4413      	add	r3, r2
   17228:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1722c:	4618      	mov	r0, r3
   1722e:	f7ff ff81 	bl	17134 <uart_transmit>
} 
   17232:	3724      	adds	r7, #36	; 0x24
   17234:	46bd      	mov	sp, r7
   17236:	bd90      	pop	{r4, r7, pc}

00017238 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   17238:	b580      	push	{r7, lr}
   1723a:	b084      	sub	sp, #16
   1723c:	af00      	add	r7, sp, #0
   1723e:	4603      	mov	r3, r0
   17240:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   17242:	88fb      	ldrh	r3, [r7, #6]
   17244:	0a1b      	lsrs	r3, r3, #8
   17246:	b29b      	uxth	r3, r3
   17248:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   1724a:	88fb      	ldrh	r3, [r7, #6]
   1724c:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   1724e:	7bfb      	ldrb	r3, [r7, #15]
   17250:	4618      	mov	r0, r3
   17252:	f7ff ffc1 	bl	171d8 <uart_print_hex>
  uart_print_hex(low);
   17256:	7bbb      	ldrb	r3, [r7, #14]
   17258:	4618      	mov	r0, r3
   1725a:	f7ff ffbd 	bl	171d8 <uart_print_hex>
}
   1725e:	3710      	adds	r7, #16
   17260:	46bd      	mov	sp, r7
   17262:	bd80      	pop	{r7, pc}

00017264 <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   17264:	b580      	push	{r7, lr}
   17266:	b084      	sub	sp, #16
   17268:	af00      	add	r7, sp, #0
   1726a:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   1726c:	2300      	movs	r3, #0
   1726e:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   17270:	e009      	b.n	17286 <uart_print_string+0x22>
    uart_transmit(s[i]);
   17272:	7bfb      	ldrb	r3, [r7, #15]
   17274:	687a      	ldr	r2, [r7, #4]
   17276:	4413      	add	r3, r2
   17278:	781b      	ldrb	r3, [r3, #0]
   1727a:	4618      	mov	r0, r3
   1727c:	f7ff ff5a 	bl	17134 <uart_transmit>
    i++;
   17280:	7bfb      	ldrb	r3, [r7, #15]
   17282:	3301      	adds	r3, #1
   17284:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   17286:	7bfb      	ldrb	r3, [r7, #15]
   17288:	687a      	ldr	r2, [r7, #4]
   1728a:	4413      	add	r3, r2
   1728c:	781b      	ldrb	r3, [r3, #0]
   1728e:	2b00      	cmp	r3, #0
   17290:	d1ef      	bne.n	17272 <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   17292:	3710      	adds	r7, #16
   17294:	46bd      	mov	sp, r7
   17296:	bd80      	pop	{r7, pc}

00017298 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   17298:	b480      	push	{r7}
   1729a:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   1729c:	f64c 2390 	movw	r3, #51856	; 0xca90
   172a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   172a4:	781a      	ldrb	r2, [r3, #0]
   172a6:	f64c 2391 	movw	r3, #51857	; 0xca91
   172aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   172ae:	781b      	ldrb	r3, [r3, #0]
   172b0:	b2db      	uxtb	r3, r3
   172b2:	429a      	cmp	r2, r3
   172b4:	d10e      	bne.n	172d4 <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   172b6:	f242 030a 	movw	r3, #8202	; 0x200a
   172ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   172be:	f242 020a 	movw	r2, #8202	; 0x200a
   172c2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   172c6:	7812      	ldrb	r2, [r2, #0]
   172c8:	b2d2      	uxtb	r2, r2
   172ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   172ce:	b2d2      	uxtb	r2, r2
   172d0:	701a      	strb	r2, [r3, #0]
   172d2:	e01d      	b.n	17310 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   172d4:	f242 030c 	movw	r3, #8204	; 0x200c
   172d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   172dc:	f64c 2291 	movw	r2, #51857	; 0xca91
   172e0:	f2c2 0204 	movt	r2, #8196	; 0x2004
   172e4:	7812      	ldrb	r2, [r2, #0]
   172e6:	b2d2      	uxtb	r2, r2
   172e8:	4611      	mov	r1, r2
   172ea:	f64c 2294 	movw	r2, #51860	; 0xca94
   172ee:	f2c2 0204 	movt	r2, #8196	; 0x2004
   172f2:	5c52      	ldrb	r2, [r2, r1]
   172f4:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   172f6:	f64c 2391 	movw	r3, #51857	; 0xca91
   172fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   172fe:	781b      	ldrb	r3, [r3, #0]
   17300:	b2db      	uxtb	r3, r3
   17302:	3301      	adds	r3, #1
   17304:	b2da      	uxtb	r2, r3
   17306:	f64c 2391 	movw	r3, #51857	; 0xca91
   1730a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1730e:	701a      	strb	r2, [r3, #0]
  }
}
   17310:	46bd      	mov	sp, r7
   17312:	f85d 7b04 	ldr.w	r7, [sp], #4
   17316:	4770      	bx	lr

00017318 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   17318:	b580      	push	{r7, lr}
   1731a:	b082      	sub	sp, #8
   1731c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   1731e:	2010      	movs	r0, #16
   17320:	2101      	movs	r1, #1
   17322:	f7e9 fd4d 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   17326:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1732a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1732e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   17332:	2201      	movs	r2, #1
   17334:	f7ea f854 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   17338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1733c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   1733e:	2310      	movs	r3, #16
   17340:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17342:	2303      	movs	r3, #3
   17344:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   17346:	1d3b      	adds	r3, r7, #4
   17348:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1734c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17350:	4619      	mov	r1, r3
   17352:	f7e9 ff09 	bl	1168 <GPIO_Init>
}
   17356:	3708      	adds	r7, #8
   17358:	46bd      	mov	sp, r7
   1735a:	bd80      	pop	{r7, pc}

0001735c <init_button>:

void init_button(void)
{
   1735c:	b580      	push	{r7, lr}
   1735e:	b082      	sub	sp, #8
   17360:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   17362:	2004      	movs	r0, #4
   17364:	2101      	movs	r1, #1
   17366:	f7e9 fd2b 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   1736a:	2301      	movs	r3, #1
   1736c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   1736e:	2304      	movs	r3, #4
   17370:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17372:	2303      	movs	r3, #3
   17374:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   17376:	1d3b      	adds	r3, r7, #4
   17378:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1737c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17380:	4619      	mov	r1, r3
   17382:	f7e9 fef1 	bl	1168 <GPIO_Init>
}
   17386:	3708      	adds	r7, #8
   17388:	46bd      	mov	sp, r7
   1738a:	bd80      	pop	{r7, pc}

0001738c <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   1738c:	b580      	push	{r7, lr}
   1738e:	b084      	sub	sp, #16
   17390:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   17392:	2001      	movs	r0, #1
   17394:	2101      	movs	r1, #1
   17396:	f7e9 fd13 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   1739a:	2000      	movs	r0, #0
   1739c:	2100      	movs	r1, #0
   1739e:	f7ea f917 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   173a2:	2301      	movs	r3, #1
   173a4:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   173a6:	2300      	movs	r3, #0
   173a8:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   173aa:	2308      	movs	r3, #8
   173ac:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   173ae:	2301      	movs	r3, #1
   173b0:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   173b2:	f107 0308 	add.w	r3, r7, #8
   173b6:	4618      	mov	r0, r3
   173b8:	f7ea fe10 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   173bc:	2306      	movs	r3, #6
   173be:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   173c0:	230f      	movs	r3, #15
   173c2:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   173c4:	230f      	movs	r3, #15
   173c6:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   173c8:	2301      	movs	r3, #1
   173ca:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   173cc:	1d3b      	adds	r3, r7, #4
   173ce:	4618      	mov	r0, r3
   173d0:	f7ea ff3e 	bl	2250 <NVIC_Init>
}
   173d4:	3710      	adds	r7, #16
   173d6:	46bd      	mov	sp, r7
   173d8:	bd80      	pop	{r7, pc}
   173da:	bf00      	nop

000173dc <init_rs232>:

void init_rs232(void)
{
   173dc:	b580      	push	{r7, lr}
   173de:	b086      	sub	sp, #24
   173e0:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   173e2:	2005      	movs	r0, #5
   173e4:	2101      	movs	r1, #1
   173e6:	f7e9 fceb 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   173ea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   173ee:	2101      	movs	r1, #1
   173f0:	f7e9 fd0e 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   173f4:	2308      	movs	r3, #8
   173f6:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   173f8:	2304      	movs	r3, #4
   173fa:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   173fc:	1d3b      	adds	r3, r7, #4
   173fe:	f44f 6000 	mov.w	r0, #2048	; 0x800
   17402:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17406:	4619      	mov	r1, r3
   17408:	f7e9 feae 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   1740c:	2304      	movs	r3, #4
   1740e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17410:	2303      	movs	r3, #3
   17412:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   17414:	2318      	movs	r3, #24
   17416:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   17418:	1d3b      	adds	r3, r7, #4
   1741a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1741e:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17422:	4619      	mov	r1, r3
   17424:	f7e9 fea0 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   17428:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1742c:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   1742e:	2300      	movs	r3, #0
   17430:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   17432:	2300      	movs	r3, #0
   17434:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   17436:	2300      	movs	r3, #0
   17438:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   1743a:	2300      	movs	r3, #0
   1743c:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   1743e:	230c      	movs	r3, #12
   17440:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   17442:	f107 0308 	add.w	r3, r7, #8
   17446:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1744a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1744e:	4619      	mov	r1, r3
   17450:	f7ea f972 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   17454:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17458:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1745c:	2101      	movs	r1, #1
   1745e:	f7ea fa89 	bl	1974 <USART_Cmd>
}
   17462:	3718      	adds	r7, #24
   17464:	46bd      	mov	sp, r7
   17466:	bd80      	pop	{r7, pc}

00017468 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   17468:	b580      	push	{r7, lr}
   1746a:	b082      	sub	sp, #8
   1746c:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   1746e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17472:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17476:	f240 7127 	movw	r1, #1831	; 0x727
   1747a:	2200      	movs	r2, #0
   1747c:	f7ea fa9a 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   17480:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17484:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17488:	f240 5125 	movw	r1, #1317	; 0x525
   1748c:	2201      	movs	r2, #1
   1748e:	f7ea fa91 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   17492:	2326      	movs	r3, #38	; 0x26
   17494:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   17496:	2300      	movs	r3, #0
   17498:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   1749a:	2301      	movs	r3, #1
   1749c:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   1749e:	1d3b      	adds	r3, r7, #4
   174a0:	4618      	mov	r0, r3
   174a2:	f7ea fed5 	bl	2250 <NVIC_Init>
}
   174a6:	3708      	adds	r7, #8
   174a8:	46bd      	mov	sp, r7
   174aa:	bd80      	pop	{r7, pc}

000174ac <enable_rs232>:

void enable_rs232(void)
{
   174ac:	b580      	push	{r7, lr}
   174ae:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   174b0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   174b4:	f2c4 0000 	movt	r0, #16384	; 0x4000
   174b8:	2101      	movs	r1, #1
   174ba:	f7ea fa5b 	bl	1974 <USART_Cmd>
}
   174be:	bd80      	pop	{r7, pc}

000174c0 <send_byte>:

void send_byte(uint8_t b)
{
   174c0:	b580      	push	{r7, lr}
   174c2:	b082      	sub	sp, #8
   174c4:	af00      	add	r7, sp, #0
   174c6:	4603      	mov	r3, r0
   174c8:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   174ca:	bf00      	nop
   174cc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   174d0:	f2c4 0000 	movt	r0, #16384	; 0x4000
   174d4:	2180      	movs	r1, #128	; 0x80
   174d6:	f7ea fcb9 	bl	1e4c <USART_GetFlagStatus>
   174da:	4603      	mov	r3, r0
   174dc:	2b00      	cmp	r3, #0
   174de:	d0f5      	beq.n	174cc <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   174e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   174e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
   174e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   174ec:	f2c4 0201 	movt	r2, #16385	; 0x4001
   174f0:	68d2      	ldr	r2, [r2, #12]
   174f2:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   174f6:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   174f8:	79fb      	ldrb	r3, [r7, #7]
   174fa:	b29b      	uxth	r3, r3
   174fc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17500:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17504:	4619      	mov	r1, r3
   17506:	f7ea fb55 	bl	1bb4 <USART_SendData>
}
   1750a:	3708      	adds	r7, #8
   1750c:	46bd      	mov	sp, r7
   1750e:	bd80      	pop	{r7, pc}

00017510 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   17510:	b580      	push	{r7, lr}
   17512:	b082      	sub	sp, #8
   17514:	af00      	add	r7, sp, #0
   17516:	4603      	mov	r3, r0
   17518:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   1751a:	79fb      	ldrb	r3, [r7, #7]
   1751c:	3330      	adds	r3, #48	; 0x30
   1751e:	b2db      	uxtb	r3, r3
   17520:	4618      	mov	r0, r3
   17522:	f7ff ffcd 	bl	174c0 <send_byte>
}
   17526:	3708      	adds	r7, #8
   17528:	46bd      	mov	sp, r7
   1752a:	bd80      	pop	{r7, pc}

0001752c <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   1752c:	b580      	push	{r7, lr}
   1752e:	b084      	sub	sp, #16
   17530:	af00      	add	r7, sp, #0
   17532:	6078      	str	r0, [r7, #4]
    int i = 0;
   17534:	2300      	movs	r3, #0
   17536:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   17538:	e009      	b.n	1754e <vPrintString+0x22>
    {
        send_byte(string[i]);
   1753a:	68fb      	ldr	r3, [r7, #12]
   1753c:	687a      	ldr	r2, [r7, #4]
   1753e:	4413      	add	r3, r2
   17540:	781b      	ldrb	r3, [r3, #0]
   17542:	4618      	mov	r0, r3
   17544:	f7ff ffbc 	bl	174c0 <send_byte>
        i++;
   17548:	68fb      	ldr	r3, [r7, #12]
   1754a:	3301      	adds	r3, #1
   1754c:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   1754e:	68fb      	ldr	r3, [r7, #12]
   17550:	687a      	ldr	r2, [r7, #4]
   17552:	4413      	add	r3, r2
   17554:	781b      	ldrb	r3, [r3, #0]
   17556:	2b00      	cmp	r3, #0
   17558:	d1ef      	bne.n	1753a <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   1755a:	3710      	adds	r7, #16
   1755c:	46bd      	mov	sp, r7
   1755e:	bd80      	pop	{r7, pc}

00017560 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   17560:	b580      	push	{r7, lr}
   17562:	b08a      	sub	sp, #40	; 0x28
   17564:	af00      	add	r7, sp, #0
   17566:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   17568:	2300      	movs	r3, #0
   1756a:	623b      	str	r3, [r7, #32]
    long num = c_num;
   1756c:	687b      	ldr	r3, [r7, #4]
   1756e:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   17570:	69fb      	ldr	r3, [r7, #28]
   17572:	2b00      	cmp	r3, #0
   17574:	d106      	bne.n	17584 <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   17576:	f648 2068 	movw	r0, #35432	; 0x8a68
   1757a:	f2c0 0001 	movt	r0, #1
   1757e:	f7ff ffd5 	bl	1752c <vPrintString>
   17582:	e062      	b.n	1764a <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   17584:	e024      	b.n	175d0 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   17586:	69f9      	ldr	r1, [r7, #28]
   17588:	f246 6367 	movw	r3, #26215	; 0x6667
   1758c:	f2c6 6366 	movt	r3, #26214	; 0x6666
   17590:	fb83 2301 	smull	r2, r3, r3, r1
   17594:	109a      	asrs	r2, r3, #2
   17596:	17cb      	asrs	r3, r1, #31
   17598:	1ad2      	subs	r2, r2, r3
   1759a:	4613      	mov	r3, r2
   1759c:	009b      	lsls	r3, r3, #2
   1759e:	4413      	add	r3, r2
   175a0:	005b      	lsls	r3, r3, #1
   175a2:	1aca      	subs	r2, r1, r3
   175a4:	b2d3      	uxtb	r3, r2
   175a6:	3330      	adds	r3, #48	; 0x30
   175a8:	b2da      	uxtb	r2, r3
   175aa:	f107 010c 	add.w	r1, r7, #12
   175ae:	6a3b      	ldr	r3, [r7, #32]
   175b0:	440b      	add	r3, r1
   175b2:	701a      	strb	r2, [r3, #0]
            count ++;
   175b4:	6a3b      	ldr	r3, [r7, #32]
   175b6:	3301      	adds	r3, #1
   175b8:	623b      	str	r3, [r7, #32]
            num /= 10;
   175ba:	69fa      	ldr	r2, [r7, #28]
   175bc:	f246 6367 	movw	r3, #26215	; 0x6667
   175c0:	f2c6 6366 	movt	r3, #26214	; 0x6666
   175c4:	fb83 1302 	smull	r1, r3, r3, r2
   175c8:	1099      	asrs	r1, r3, #2
   175ca:	17d3      	asrs	r3, r2, #31
   175cc:	1acb      	subs	r3, r1, r3
   175ce:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   175d0:	69fb      	ldr	r3, [r7, #28]
   175d2:	2b00      	cmp	r3, #0
   175d4:	d1d7      	bne.n	17586 <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   175d6:	f107 020c 	add.w	r2, r7, #12
   175da:	6a3b      	ldr	r3, [r7, #32]
   175dc:	4413      	add	r3, r2
   175de:	2200      	movs	r2, #0
   175e0:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   175e2:	2300      	movs	r3, #0
   175e4:	627b      	str	r3, [r7, #36]	; 0x24
   175e6:	e020      	b.n	1762a <vPrintNumber+0xca>
        {
            tmp = time[i];
   175e8:	f107 020c 	add.w	r2, r7, #12
   175ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   175ee:	4413      	add	r3, r2
   175f0:	781b      	ldrb	r3, [r3, #0]
   175f2:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   175f4:	6a3a      	ldr	r2, [r7, #32]
   175f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   175f8:	1ad3      	subs	r3, r2, r3
   175fa:	3b01      	subs	r3, #1
   175fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
   17600:	4413      	add	r3, r2
   17602:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   17606:	f107 010c 	add.w	r1, r7, #12
   1760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1760c:	440b      	add	r3, r1
   1760e:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   17610:	6a3a      	ldr	r2, [r7, #32]
   17612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17614:	1ad3      	subs	r3, r2, r3
   17616:	3b01      	subs	r3, #1
   17618:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1761c:	440b      	add	r3, r1
   1761e:	7efa      	ldrb	r2, [r7, #27]
   17620:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   17624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17626:	3301      	adds	r3, #1
   17628:	627b      	str	r3, [r7, #36]	; 0x24
   1762a:	6a3b      	ldr	r3, [r7, #32]
   1762c:	085a      	lsrs	r2, r3, #1
   1762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17630:	429a      	cmp	r2, r3
   17632:	d8d9      	bhi.n	175e8 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   17634:	f107 030c 	add.w	r3, r7, #12
   17638:	4618      	mov	r0, r3
   1763a:	f7ff ff77 	bl	1752c <vPrintString>
        vPrintString("\n\r");
   1763e:	f648 206c 	movw	r0, #35436	; 0x8a6c
   17642:	f2c0 0001 	movt	r0, #1
   17646:	f7ff ff71 	bl	1752c <vPrintString>
    }
}
   1764a:	3728      	adds	r7, #40	; 0x28
   1764c:	46bd      	mov	sp, r7
   1764e:	bd80      	pop	{r7, pc}

00017650 <vStartTask>:
extern portBASE_TYPE xSensorOfTask[NUMBEROFTASK];
extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

// init program to start all task when system init
void vStartTask()
{
   17650:	b580      	push	{r7, lr}
   17652:	b086      	sub	sp, #24
   17654:	af02      	add	r7, sp, #8
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;
    for( i = 0; i < NUMBEROFTASK; ++i )
   17656:	2300      	movs	r3, #0
   17658:	60fb      	str	r3, [r7, #12]
   1765a:	e020      	b.n	1769e <vStartTask+0x4e>
    {
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i], xPeriodOfTask[i], null_data);
   1765c:	f240 0390 	movw	r3, #144	; 0x90
   17660:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17664:	68fa      	ldr	r2, [r7, #12]
   17666:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1766a:	f240 0328 	movw	r3, #40	; 0x28
   1766e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17672:	68fa      	ldr	r2, [r7, #12]
   17674:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   17678:	f240 0328 	movw	r3, #40	; 0x28
   1767c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17680:	68fa      	ldr	r2, [r7, #12]
   17682:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   17686:	687b      	ldr	r3, [r7, #4]
   17688:	9300      	str	r3, [sp, #0]
   1768a:	683b      	ldr	r3, [r7, #0]
   1768c:	f7eb fbe4 	bl	2e58 <pxEventGenericCreate>
   17690:	60b8      	str	r0, [r7, #8]
        vEventSend( pxEvent );   
   17692:	68b8      	ldr	r0, [r7, #8]
   17694:	f7eb ff5c 	bl	3550 <vEventGenericSend>
void vStartTask()
{
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;
    for( i = 0; i < NUMBEROFTASK; ++i )
   17698:	68fb      	ldr	r3, [r7, #12]
   1769a:	3301      	adds	r3, #1
   1769c:	60fb      	str	r3, [r7, #12]
   1769e:	68fb      	ldr	r3, [r7, #12]
   176a0:	2b0c      	cmp	r3, #12
   176a2:	dddb      	ble.n	1765c <vStartTask+0xc>
    {
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i], xPeriodOfTask[i], null_data);
        vEventSend( pxEvent );   
    }
}
   176a4:	3710      	adds	r7, #16
   176a6:	46bd      	mov	sp, r7
   176a8:	bd80      	pop	{r7, pc}
   176aa:	bf00      	nop

000176ac <main>:

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   176ac:	b580      	push	{r7, lr}
   176ae:	b086      	sub	sp, #24
   176b0:	af04      	add	r7, sp, #16
    init_led();
   176b2:	f7ff fe31 	bl	17318 <init_led>
    init_rs232();
   176b6:	f7ff fe91 	bl	173dc <init_rs232>
    enable_rs232_interrupts();
   176ba:	f7ff fed5 	bl	17468 <enable_rs232_interrupts>
    enable_rs232();
   176be:	f7ff fef5 	bl	174ac <enable_rs232>

    vSemaphoreInitialise();
   176c2:	f7eb ffc1 	bl	3648 <vSemaphoreInitialise>
    vContextInit();
   176c6:	f7eb ffff 	bl	36c8 <vContextInit>
    vInitialiseEventLists();  
   176ca:	f7eb f9d9 	bl	2a80 <vInitialiseEventLists>
    vStartTask();
   176ce:	f7ff ffbf 	bl	17650 <vStartTask>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;
   176d2:	2300      	movs	r3, #0
   176d4:	607b      	str	r3, [r7, #4]

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 1, &xTaskOfHandle[0]);
   176d6:	2301      	movs	r3, #1
   176d8:	9300      	str	r3, [sp, #0]
   176da:	f64c 3394 	movw	r3, #52116	; 0xcb94
   176de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   176e2:	9301      	str	r3, [sp, #4]
   176e4:	2300      	movs	r3, #0
   176e6:	9302      	str	r3, [sp, #8]
   176e8:	2300      	movs	r3, #0
   176ea:	9303      	str	r3, [sp, #12]
   176ec:	f643 5011 	movw	r0, #15633	; 0x3d11
   176f0:	f2c0 0000 	movt	r0, #0
   176f4:	f648 2170 	movw	r1, #35440	; 0x8a70
   176f8:	f2c0 0101 	movt	r1, #1
   176fc:	2280      	movs	r2, #128	; 0x80
   176fe:	2300      	movs	r3, #0
   17700:	f7ed f9ec 	bl	4adc <xTaskGenericCreate>
    xTaskCreate( vSensor, "I-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 4, &xTaskOfHandle[1]);
   17704:	2304      	movs	r3, #4
   17706:	9300      	str	r3, [sp, #0]
   17708:	4b25      	ldr	r3, [pc, #148]	; (177a0 <main+0xf4>)
   1770a:	9301      	str	r3, [sp, #4]
   1770c:	2300      	movs	r3, #0
   1770e:	9302      	str	r3, [sp, #8]
   17710:	2300      	movs	r3, #0
   17712:	9303      	str	r3, [sp, #12]
   17714:	f643 10ad 	movw	r0, #14765	; 0x39ad
   17718:	f2c0 0000 	movt	r0, #0
   1771c:	f648 217c 	movw	r1, #35452	; 0x8a7c
   17720:	f2c0 0101 	movt	r1, #1
   17724:	2280      	movs	r2, #128	; 0x80
   17726:	2300      	movs	r3, #0
   17728:	f7ed f9d8 	bl	4adc <xTaskGenericCreate>
    xTaskCreate( vServant, "C-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[2]);
   1772c:	2302      	movs	r3, #2
   1772e:	9300      	str	r3, [sp, #0]
   17730:	4b1c      	ldr	r3, [pc, #112]	; (177a4 <main+0xf8>)
   17732:	9301      	str	r3, [sp, #4]
   17734:	2300      	movs	r3, #0
   17736:	9302      	str	r3, [sp, #8]
   17738:	2300      	movs	r3, #0
   1773a:	9303      	str	r3, [sp, #12]
   1773c:	f643 20cd 	movw	r0, #15053	; 0x3acd
   17740:	f2c0 0000 	movt	r0, #0
   17744:	f648 2188 	movw	r1, #35464	; 0x8a88
   17748:	f2c0 0101 	movt	r1, #1
   1774c:	2280      	movs	r2, #128	; 0x80
   1774e:	2300      	movs	r3, #0
   17750:	f7ed f9c4 	bl	4adc <xTaskGenericCreate>
    xTaskCreate( vActuator, "O-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 3, &xTaskOfHandle[3]);
   17754:	2303      	movs	r3, #3
   17756:	9300      	str	r3, [sp, #0]
   17758:	4b13      	ldr	r3, [pc, #76]	; (177a8 <main+0xfc>)
   1775a:	9301      	str	r3, [sp, #4]
   1775c:	2300      	movs	r3, #0
   1775e:	9302      	str	r3, [sp, #8]
   17760:	2300      	movs	r3, #0
   17762:	9303      	str	r3, [sp, #12]
   17764:	f643 402d 	movw	r0, #15405	; 0x3c2d
   17768:	f2c0 0000 	movt	r0, #0
   1776c:	f648 2194 	movw	r1, #35476	; 0x8a94
   17770:	f2c0 0101 	movt	r1, #1
   17774:	2280      	movs	r2, #128	; 0x80
   17776:	2300      	movs	r3, #0
   17778:	f7ed f9b0 	bl	4adc <xTaskGenericCreate>

    xSemaphoreGive(xBinarySemaphore[0]);
   1777c:	f241 1324 	movw	r3, #4388	; 0x1124
   17780:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17784:	681b      	ldr	r3, [r3, #0]
   17786:	4618      	mov	r0, r3
   17788:	2100      	movs	r1, #0
   1778a:	2200      	movs	r2, #0
   1778c:	2300      	movs	r3, #0
   1778e:	f7ec fe93 	bl	44b8 <xQueueGenericSend>
    vTaskStartScheduler();
   17792:	f7ed fd21 	bl	51d8 <vTaskStartScheduler>

    return 0;
   17796:	2300      	movs	r3, #0
}
   17798:	4618      	mov	r0, r3
   1779a:	3708      	adds	r7, #8
   1779c:	46bd      	mov	sp, r7
   1779e:	bd80      	pop	{r7, pc}
   177a0:	2004cb98 	.word	0x2004cb98
   177a4:	2004cb9c 	.word	0x2004cb9c
   177a8:	2004cba0 	.word	0x2004cba0

000177ac <myTraceCreate>:

void myTraceCreate      (){
   177ac:	b480      	push	{r7}
   177ae:	af00      	add	r7, sp, #0
}
   177b0:	46bd      	mov	sp, r7
   177b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   177b6:	4770      	bx	lr

000177b8 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   177b8:	b480      	push	{r7}
   177ba:	af00      	add	r7, sp, #0
}
   177bc:	46bd      	mov	sp, r7
   177be:	f85d 7b04 	ldr.w	r7, [sp], #4
   177c2:	4770      	bx	lr

000177c4 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   177c4:	b480      	push	{r7}
   177c6:	af00      	add	r7, sp, #0
}
   177c8:	46bd      	mov	sp, r7
   177ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   177ce:	4770      	bx	lr

000177d0 <vApplicationTickHook>:
 /*
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   177d0:	b580      	push	{r7, lr}
   177d2:	af00      	add	r7, sp, #0
    if(xIsExecutableEventArrive())
   177d4:	f7eb fa08 	bl	2be8 <xIsExecutableEventArrive>
   177d8:	4603      	mov	r3, r0
   177da:	2b00      	cmp	r3, #0
   177dc:	d00a      	beq.n	177f4 <vApplicationTickHook+0x24>
       xSemaphoreGive( xBinarySemaphore[0] ); 
   177de:	f241 1324 	movw	r3, #4388	; 0x1124
   177e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   177e6:	681b      	ldr	r3, [r3, #0]
   177e8:	4618      	mov	r0, r3
   177ea:	2100      	movs	r1, #0
   177ec:	2200      	movs	r2, #0
   177ee:	2300      	movs	r3, #0
   177f0:	f7ec fe62 	bl	44b8 <xQueueGenericSend>
}
   177f4:	bd80      	pop	{r7, pc}
   177f6:	bf00      	nop

000177f8 <__aeabi_drsub>:
   177f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   177fc:	e002      	b.n	17804 <__adddf3>
   177fe:	bf00      	nop

00017800 <__aeabi_dsub>:
   17800:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00017804 <__adddf3>:
   17804:	b530      	push	{r4, r5, lr}
   17806:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1780a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1780e:	ea94 0f05 	teq	r4, r5
   17812:	bf08      	it	eq
   17814:	ea90 0f02 	teqeq	r0, r2
   17818:	bf1f      	itttt	ne
   1781a:	ea54 0c00 	orrsne.w	ip, r4, r0
   1781e:	ea55 0c02 	orrsne.w	ip, r5, r2
   17822:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   17826:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1782a:	f000 80e2 	beq.w	179f2 <__adddf3+0x1ee>
   1782e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   17832:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   17836:	bfb8      	it	lt
   17838:	426d      	neglt	r5, r5
   1783a:	dd0c      	ble.n	17856 <__adddf3+0x52>
   1783c:	442c      	add	r4, r5
   1783e:	ea80 0202 	eor.w	r2, r0, r2
   17842:	ea81 0303 	eor.w	r3, r1, r3
   17846:	ea82 0000 	eor.w	r0, r2, r0
   1784a:	ea83 0101 	eor.w	r1, r3, r1
   1784e:	ea80 0202 	eor.w	r2, r0, r2
   17852:	ea81 0303 	eor.w	r3, r1, r3
   17856:	2d36      	cmp	r5, #54	; 0x36
   17858:	bf88      	it	hi
   1785a:	bd30      	pophi	{r4, r5, pc}
   1785c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17860:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17864:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   17868:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1786c:	d002      	beq.n	17874 <__adddf3+0x70>
   1786e:	4240      	negs	r0, r0
   17870:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17874:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   17878:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1787c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   17880:	d002      	beq.n	17888 <__adddf3+0x84>
   17882:	4252      	negs	r2, r2
   17884:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   17888:	ea94 0f05 	teq	r4, r5
   1788c:	f000 80a7 	beq.w	179de <__adddf3+0x1da>
   17890:	f1a4 0401 	sub.w	r4, r4, #1
   17894:	f1d5 0e20 	rsbs	lr, r5, #32
   17898:	db0d      	blt.n	178b6 <__adddf3+0xb2>
   1789a:	fa02 fc0e 	lsl.w	ip, r2, lr
   1789e:	fa22 f205 	lsr.w	r2, r2, r5
   178a2:	1880      	adds	r0, r0, r2
   178a4:	f141 0100 	adc.w	r1, r1, #0
   178a8:	fa03 f20e 	lsl.w	r2, r3, lr
   178ac:	1880      	adds	r0, r0, r2
   178ae:	fa43 f305 	asr.w	r3, r3, r5
   178b2:	4159      	adcs	r1, r3
   178b4:	e00e      	b.n	178d4 <__adddf3+0xd0>
   178b6:	f1a5 0520 	sub.w	r5, r5, #32
   178ba:	f10e 0e20 	add.w	lr, lr, #32
   178be:	2a01      	cmp	r2, #1
   178c0:	fa03 fc0e 	lsl.w	ip, r3, lr
   178c4:	bf28      	it	cs
   178c6:	f04c 0c02 	orrcs.w	ip, ip, #2
   178ca:	fa43 f305 	asr.w	r3, r3, r5
   178ce:	18c0      	adds	r0, r0, r3
   178d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   178d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   178d8:	d507      	bpl.n	178ea <__adddf3+0xe6>
   178da:	f04f 0e00 	mov.w	lr, #0
   178de:	f1dc 0c00 	rsbs	ip, ip, #0
   178e2:	eb7e 0000 	sbcs.w	r0, lr, r0
   178e6:	eb6e 0101 	sbc.w	r1, lr, r1
   178ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   178ee:	d31b      	bcc.n	17928 <__adddf3+0x124>
   178f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   178f4:	d30c      	bcc.n	17910 <__adddf3+0x10c>
   178f6:	0849      	lsrs	r1, r1, #1
   178f8:	ea5f 0030 	movs.w	r0, r0, rrx
   178fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   17900:	f104 0401 	add.w	r4, r4, #1
   17904:	ea4f 5244 	mov.w	r2, r4, lsl #21
   17908:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1790c:	f080 809a 	bcs.w	17a44 <__adddf3+0x240>
   17910:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   17914:	bf08      	it	eq
   17916:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1791a:	f150 0000 	adcs.w	r0, r0, #0
   1791e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17922:	ea41 0105 	orr.w	r1, r1, r5
   17926:	bd30      	pop	{r4, r5, pc}
   17928:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1792c:	4140      	adcs	r0, r0
   1792e:	eb41 0101 	adc.w	r1, r1, r1
   17932:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17936:	f1a4 0401 	sub.w	r4, r4, #1
   1793a:	d1e9      	bne.n	17910 <__adddf3+0x10c>
   1793c:	f091 0f00 	teq	r1, #0
   17940:	bf04      	itt	eq
   17942:	4601      	moveq	r1, r0
   17944:	2000      	moveq	r0, #0
   17946:	fab1 f381 	clz	r3, r1
   1794a:	bf08      	it	eq
   1794c:	3320      	addeq	r3, #32
   1794e:	f1a3 030b 	sub.w	r3, r3, #11
   17952:	f1b3 0220 	subs.w	r2, r3, #32
   17956:	da0c      	bge.n	17972 <__adddf3+0x16e>
   17958:	320c      	adds	r2, #12
   1795a:	dd08      	ble.n	1796e <__adddf3+0x16a>
   1795c:	f102 0c14 	add.w	ip, r2, #20
   17960:	f1c2 020c 	rsb	r2, r2, #12
   17964:	fa01 f00c 	lsl.w	r0, r1, ip
   17968:	fa21 f102 	lsr.w	r1, r1, r2
   1796c:	e00c      	b.n	17988 <__adddf3+0x184>
   1796e:	f102 0214 	add.w	r2, r2, #20
   17972:	bfd8      	it	le
   17974:	f1c2 0c20 	rsble	ip, r2, #32
   17978:	fa01 f102 	lsl.w	r1, r1, r2
   1797c:	fa20 fc0c 	lsr.w	ip, r0, ip
   17980:	bfdc      	itt	le
   17982:	ea41 010c 	orrle.w	r1, r1, ip
   17986:	4090      	lslle	r0, r2
   17988:	1ae4      	subs	r4, r4, r3
   1798a:	bfa2      	ittt	ge
   1798c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   17990:	4329      	orrge	r1, r5
   17992:	bd30      	popge	{r4, r5, pc}
   17994:	ea6f 0404 	mvn.w	r4, r4
   17998:	3c1f      	subs	r4, #31
   1799a:	da1c      	bge.n	179d6 <__adddf3+0x1d2>
   1799c:	340c      	adds	r4, #12
   1799e:	dc0e      	bgt.n	179be <__adddf3+0x1ba>
   179a0:	f104 0414 	add.w	r4, r4, #20
   179a4:	f1c4 0220 	rsb	r2, r4, #32
   179a8:	fa20 f004 	lsr.w	r0, r0, r4
   179ac:	fa01 f302 	lsl.w	r3, r1, r2
   179b0:	ea40 0003 	orr.w	r0, r0, r3
   179b4:	fa21 f304 	lsr.w	r3, r1, r4
   179b8:	ea45 0103 	orr.w	r1, r5, r3
   179bc:	bd30      	pop	{r4, r5, pc}
   179be:	f1c4 040c 	rsb	r4, r4, #12
   179c2:	f1c4 0220 	rsb	r2, r4, #32
   179c6:	fa20 f002 	lsr.w	r0, r0, r2
   179ca:	fa01 f304 	lsl.w	r3, r1, r4
   179ce:	ea40 0003 	orr.w	r0, r0, r3
   179d2:	4629      	mov	r1, r5
   179d4:	bd30      	pop	{r4, r5, pc}
   179d6:	fa21 f004 	lsr.w	r0, r1, r4
   179da:	4629      	mov	r1, r5
   179dc:	bd30      	pop	{r4, r5, pc}
   179de:	f094 0f00 	teq	r4, #0
   179e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   179e6:	bf06      	itte	eq
   179e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   179ec:	3401      	addeq	r4, #1
   179ee:	3d01      	subne	r5, #1
   179f0:	e74e      	b.n	17890 <__adddf3+0x8c>
   179f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   179f6:	bf18      	it	ne
   179f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   179fc:	d029      	beq.n	17a52 <__adddf3+0x24e>
   179fe:	ea94 0f05 	teq	r4, r5
   17a02:	bf08      	it	eq
   17a04:	ea90 0f02 	teqeq	r0, r2
   17a08:	d005      	beq.n	17a16 <__adddf3+0x212>
   17a0a:	ea54 0c00 	orrs.w	ip, r4, r0
   17a0e:	bf04      	itt	eq
   17a10:	4619      	moveq	r1, r3
   17a12:	4610      	moveq	r0, r2
   17a14:	bd30      	pop	{r4, r5, pc}
   17a16:	ea91 0f03 	teq	r1, r3
   17a1a:	bf1e      	ittt	ne
   17a1c:	2100      	movne	r1, #0
   17a1e:	2000      	movne	r0, #0
   17a20:	bd30      	popne	{r4, r5, pc}
   17a22:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   17a26:	d105      	bne.n	17a34 <__adddf3+0x230>
   17a28:	0040      	lsls	r0, r0, #1
   17a2a:	4149      	adcs	r1, r1
   17a2c:	bf28      	it	cs
   17a2e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   17a32:	bd30      	pop	{r4, r5, pc}
   17a34:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17a38:	bf3c      	itt	cc
   17a3a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   17a3e:	bd30      	popcc	{r4, r5, pc}
   17a40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17a44:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   17a48:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17a4c:	f04f 0000 	mov.w	r0, #0
   17a50:	bd30      	pop	{r4, r5, pc}
   17a52:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17a56:	bf1a      	itte	ne
   17a58:	4619      	movne	r1, r3
   17a5a:	4610      	movne	r0, r2
   17a5c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   17a60:	bf1c      	itt	ne
   17a62:	460b      	movne	r3, r1
   17a64:	4602      	movne	r2, r0
   17a66:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17a6a:	bf06      	itte	eq
   17a6c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   17a70:	ea91 0f03 	teqeq	r1, r3
   17a74:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   17a78:	bd30      	pop	{r4, r5, pc}
   17a7a:	bf00      	nop

00017a7c <__aeabi_ui2d>:
   17a7c:	f090 0f00 	teq	r0, #0
   17a80:	bf04      	itt	eq
   17a82:	2100      	moveq	r1, #0
   17a84:	4770      	bxeq	lr
   17a86:	b530      	push	{r4, r5, lr}
   17a88:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17a8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17a90:	f04f 0500 	mov.w	r5, #0
   17a94:	f04f 0100 	mov.w	r1, #0
   17a98:	e750      	b.n	1793c <__adddf3+0x138>
   17a9a:	bf00      	nop

00017a9c <__aeabi_i2d>:
   17a9c:	f090 0f00 	teq	r0, #0
   17aa0:	bf04      	itt	eq
   17aa2:	2100      	moveq	r1, #0
   17aa4:	4770      	bxeq	lr
   17aa6:	b530      	push	{r4, r5, lr}
   17aa8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17aac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17ab0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   17ab4:	bf48      	it	mi
   17ab6:	4240      	negmi	r0, r0
   17ab8:	f04f 0100 	mov.w	r1, #0
   17abc:	e73e      	b.n	1793c <__adddf3+0x138>
   17abe:	bf00      	nop

00017ac0 <__aeabi_f2d>:
   17ac0:	0042      	lsls	r2, r0, #1
   17ac2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   17ac6:	ea4f 0131 	mov.w	r1, r1, rrx
   17aca:	ea4f 7002 	mov.w	r0, r2, lsl #28
   17ace:	bf1f      	itttt	ne
   17ad0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   17ad4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17ad8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   17adc:	4770      	bxne	lr
   17ade:	f092 0f00 	teq	r2, #0
   17ae2:	bf14      	ite	ne
   17ae4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17ae8:	4770      	bxeq	lr
   17aea:	b530      	push	{r4, r5, lr}
   17aec:	f44f 7460 	mov.w	r4, #896	; 0x380
   17af0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17af4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17af8:	e720      	b.n	1793c <__adddf3+0x138>
   17afa:	bf00      	nop

00017afc <__aeabi_ul2d>:
   17afc:	ea50 0201 	orrs.w	r2, r0, r1
   17b00:	bf08      	it	eq
   17b02:	4770      	bxeq	lr
   17b04:	b530      	push	{r4, r5, lr}
   17b06:	f04f 0500 	mov.w	r5, #0
   17b0a:	e00a      	b.n	17b22 <__aeabi_l2d+0x16>

00017b0c <__aeabi_l2d>:
   17b0c:	ea50 0201 	orrs.w	r2, r0, r1
   17b10:	bf08      	it	eq
   17b12:	4770      	bxeq	lr
   17b14:	b530      	push	{r4, r5, lr}
   17b16:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   17b1a:	d502      	bpl.n	17b22 <__aeabi_l2d+0x16>
   17b1c:	4240      	negs	r0, r0
   17b1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17b22:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17b26:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17b2a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   17b2e:	f43f aedc 	beq.w	178ea <__adddf3+0xe6>
   17b32:	f04f 0203 	mov.w	r2, #3
   17b36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17b3a:	bf18      	it	ne
   17b3c:	3203      	addne	r2, #3
   17b3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17b42:	bf18      	it	ne
   17b44:	3203      	addne	r2, #3
   17b46:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   17b4a:	f1c2 0320 	rsb	r3, r2, #32
   17b4e:	fa00 fc03 	lsl.w	ip, r0, r3
   17b52:	fa20 f002 	lsr.w	r0, r0, r2
   17b56:	fa01 fe03 	lsl.w	lr, r1, r3
   17b5a:	ea40 000e 	orr.w	r0, r0, lr
   17b5e:	fa21 f102 	lsr.w	r1, r1, r2
   17b62:	4414      	add	r4, r2
   17b64:	e6c1      	b.n	178ea <__adddf3+0xe6>
   17b66:	bf00      	nop

00017b68 <__aeabi_dmul>:
   17b68:	b570      	push	{r4, r5, r6, lr}
   17b6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17b6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17b72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17b76:	bf1d      	ittte	ne
   17b78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17b7c:	ea94 0f0c 	teqne	r4, ip
   17b80:	ea95 0f0c 	teqne	r5, ip
   17b84:	f000 f8de 	bleq	17d44 <__aeabi_dmul+0x1dc>
   17b88:	442c      	add	r4, r5
   17b8a:	ea81 0603 	eor.w	r6, r1, r3
   17b8e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   17b92:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   17b96:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   17b9a:	bf18      	it	ne
   17b9c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   17ba0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17ba4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17ba8:	d038      	beq.n	17c1c <__aeabi_dmul+0xb4>
   17baa:	fba0 ce02 	umull	ip, lr, r0, r2
   17bae:	f04f 0500 	mov.w	r5, #0
   17bb2:	fbe1 e502 	umlal	lr, r5, r1, r2
   17bb6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   17bba:	fbe0 e503 	umlal	lr, r5, r0, r3
   17bbe:	f04f 0600 	mov.w	r6, #0
   17bc2:	fbe1 5603 	umlal	r5, r6, r1, r3
   17bc6:	f09c 0f00 	teq	ip, #0
   17bca:	bf18      	it	ne
   17bcc:	f04e 0e01 	orrne.w	lr, lr, #1
   17bd0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   17bd4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17bd8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17bdc:	d204      	bcs.n	17be8 <__aeabi_dmul+0x80>
   17bde:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17be2:	416d      	adcs	r5, r5
   17be4:	eb46 0606 	adc.w	r6, r6, r6
   17be8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17bec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17bf0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17bf4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17bf8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17bfc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17c00:	bf88      	it	hi
   17c02:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17c06:	d81e      	bhi.n	17c46 <__aeabi_dmul+0xde>
   17c08:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17c0c:	bf08      	it	eq
   17c0e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17c12:	f150 0000 	adcs.w	r0, r0, #0
   17c16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17c1a:	bd70      	pop	{r4, r5, r6, pc}
   17c1c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17c20:	ea46 0101 	orr.w	r1, r6, r1
   17c24:	ea40 0002 	orr.w	r0, r0, r2
   17c28:	ea81 0103 	eor.w	r1, r1, r3
   17c2c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17c30:	bfc2      	ittt	gt
   17c32:	ebd4 050c 	rsbsgt	r5, r4, ip
   17c36:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17c3a:	bd70      	popgt	{r4, r5, r6, pc}
   17c3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17c40:	f04f 0e00 	mov.w	lr, #0
   17c44:	3c01      	subs	r4, #1
   17c46:	f300 80ab 	bgt.w	17da0 <__aeabi_dmul+0x238>
   17c4a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17c4e:	bfde      	ittt	le
   17c50:	2000      	movle	r0, #0
   17c52:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17c56:	bd70      	pople	{r4, r5, r6, pc}
   17c58:	f1c4 0400 	rsb	r4, r4, #0
   17c5c:	3c20      	subs	r4, #32
   17c5e:	da35      	bge.n	17ccc <__aeabi_dmul+0x164>
   17c60:	340c      	adds	r4, #12
   17c62:	dc1b      	bgt.n	17c9c <__aeabi_dmul+0x134>
   17c64:	f104 0414 	add.w	r4, r4, #20
   17c68:	f1c4 0520 	rsb	r5, r4, #32
   17c6c:	fa00 f305 	lsl.w	r3, r0, r5
   17c70:	fa20 f004 	lsr.w	r0, r0, r4
   17c74:	fa01 f205 	lsl.w	r2, r1, r5
   17c78:	ea40 0002 	orr.w	r0, r0, r2
   17c7c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   17c80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17c84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17c88:	fa21 f604 	lsr.w	r6, r1, r4
   17c8c:	eb42 0106 	adc.w	r1, r2, r6
   17c90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17c94:	bf08      	it	eq
   17c96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17c9a:	bd70      	pop	{r4, r5, r6, pc}
   17c9c:	f1c4 040c 	rsb	r4, r4, #12
   17ca0:	f1c4 0520 	rsb	r5, r4, #32
   17ca4:	fa00 f304 	lsl.w	r3, r0, r4
   17ca8:	fa20 f005 	lsr.w	r0, r0, r5
   17cac:	fa01 f204 	lsl.w	r2, r1, r4
   17cb0:	ea40 0002 	orr.w	r0, r0, r2
   17cb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17cb8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17cbc:	f141 0100 	adc.w	r1, r1, #0
   17cc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17cc4:	bf08      	it	eq
   17cc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17cca:	bd70      	pop	{r4, r5, r6, pc}
   17ccc:	f1c4 0520 	rsb	r5, r4, #32
   17cd0:	fa00 f205 	lsl.w	r2, r0, r5
   17cd4:	ea4e 0e02 	orr.w	lr, lr, r2
   17cd8:	fa20 f304 	lsr.w	r3, r0, r4
   17cdc:	fa01 f205 	lsl.w	r2, r1, r5
   17ce0:	ea43 0302 	orr.w	r3, r3, r2
   17ce4:	fa21 f004 	lsr.w	r0, r1, r4
   17ce8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17cec:	fa21 f204 	lsr.w	r2, r1, r4
   17cf0:	ea20 0002 	bic.w	r0, r0, r2
   17cf4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17cf8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17cfc:	bf08      	it	eq
   17cfe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17d02:	bd70      	pop	{r4, r5, r6, pc}
   17d04:	f094 0f00 	teq	r4, #0
   17d08:	d10f      	bne.n	17d2a <__aeabi_dmul+0x1c2>
   17d0a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17d0e:	0040      	lsls	r0, r0, #1
   17d10:	eb41 0101 	adc.w	r1, r1, r1
   17d14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17d18:	bf08      	it	eq
   17d1a:	3c01      	subeq	r4, #1
   17d1c:	d0f7      	beq.n	17d0e <__aeabi_dmul+0x1a6>
   17d1e:	ea41 0106 	orr.w	r1, r1, r6
   17d22:	f095 0f00 	teq	r5, #0
   17d26:	bf18      	it	ne
   17d28:	4770      	bxne	lr
   17d2a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17d2e:	0052      	lsls	r2, r2, #1
   17d30:	eb43 0303 	adc.w	r3, r3, r3
   17d34:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17d38:	bf08      	it	eq
   17d3a:	3d01      	subeq	r5, #1
   17d3c:	d0f7      	beq.n	17d2e <__aeabi_dmul+0x1c6>
   17d3e:	ea43 0306 	orr.w	r3, r3, r6
   17d42:	4770      	bx	lr
   17d44:	ea94 0f0c 	teq	r4, ip
   17d48:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17d4c:	bf18      	it	ne
   17d4e:	ea95 0f0c 	teqne	r5, ip
   17d52:	d00c      	beq.n	17d6e <__aeabi_dmul+0x206>
   17d54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17d58:	bf18      	it	ne
   17d5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17d5e:	d1d1      	bne.n	17d04 <__aeabi_dmul+0x19c>
   17d60:	ea81 0103 	eor.w	r1, r1, r3
   17d64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17d68:	f04f 0000 	mov.w	r0, #0
   17d6c:	bd70      	pop	{r4, r5, r6, pc}
   17d6e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17d72:	bf06      	itte	eq
   17d74:	4610      	moveq	r0, r2
   17d76:	4619      	moveq	r1, r3
   17d78:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17d7c:	d019      	beq.n	17db2 <__aeabi_dmul+0x24a>
   17d7e:	ea94 0f0c 	teq	r4, ip
   17d82:	d102      	bne.n	17d8a <__aeabi_dmul+0x222>
   17d84:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17d88:	d113      	bne.n	17db2 <__aeabi_dmul+0x24a>
   17d8a:	ea95 0f0c 	teq	r5, ip
   17d8e:	d105      	bne.n	17d9c <__aeabi_dmul+0x234>
   17d90:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17d94:	bf1c      	itt	ne
   17d96:	4610      	movne	r0, r2
   17d98:	4619      	movne	r1, r3
   17d9a:	d10a      	bne.n	17db2 <__aeabi_dmul+0x24a>
   17d9c:	ea81 0103 	eor.w	r1, r1, r3
   17da0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17da4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17da8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17dac:	f04f 0000 	mov.w	r0, #0
   17db0:	bd70      	pop	{r4, r5, r6, pc}
   17db2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17db6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17dba:	bd70      	pop	{r4, r5, r6, pc}

00017dbc <__aeabi_ddiv>:
   17dbc:	b570      	push	{r4, r5, r6, lr}
   17dbe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17dc2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17dc6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17dca:	bf1d      	ittte	ne
   17dcc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17dd0:	ea94 0f0c 	teqne	r4, ip
   17dd4:	ea95 0f0c 	teqne	r5, ip
   17dd8:	f000 f8a7 	bleq	17f2a <__aeabi_ddiv+0x16e>
   17ddc:	eba4 0405 	sub.w	r4, r4, r5
   17de0:	ea81 0e03 	eor.w	lr, r1, r3
   17de4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17de8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17dec:	f000 8088 	beq.w	17f00 <__aeabi_ddiv+0x144>
   17df0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17df4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17df8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17dfc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17e00:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17e04:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17e08:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17e0c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17e10:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17e14:	429d      	cmp	r5, r3
   17e16:	bf08      	it	eq
   17e18:	4296      	cmpeq	r6, r2
   17e1a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17e1e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17e22:	d202      	bcs.n	17e2a <__aeabi_ddiv+0x6e>
   17e24:	085b      	lsrs	r3, r3, #1
   17e26:	ea4f 0232 	mov.w	r2, r2, rrx
   17e2a:	1ab6      	subs	r6, r6, r2
   17e2c:	eb65 0503 	sbc.w	r5, r5, r3
   17e30:	085b      	lsrs	r3, r3, #1
   17e32:	ea4f 0232 	mov.w	r2, r2, rrx
   17e36:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   17e3a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17e3e:	ebb6 0e02 	subs.w	lr, r6, r2
   17e42:	eb75 0e03 	sbcs.w	lr, r5, r3
   17e46:	bf22      	ittt	cs
   17e48:	1ab6      	subcs	r6, r6, r2
   17e4a:	4675      	movcs	r5, lr
   17e4c:	ea40 000c 	orrcs.w	r0, r0, ip
   17e50:	085b      	lsrs	r3, r3, #1
   17e52:	ea4f 0232 	mov.w	r2, r2, rrx
   17e56:	ebb6 0e02 	subs.w	lr, r6, r2
   17e5a:	eb75 0e03 	sbcs.w	lr, r5, r3
   17e5e:	bf22      	ittt	cs
   17e60:	1ab6      	subcs	r6, r6, r2
   17e62:	4675      	movcs	r5, lr
   17e64:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   17e68:	085b      	lsrs	r3, r3, #1
   17e6a:	ea4f 0232 	mov.w	r2, r2, rrx
   17e6e:	ebb6 0e02 	subs.w	lr, r6, r2
   17e72:	eb75 0e03 	sbcs.w	lr, r5, r3
   17e76:	bf22      	ittt	cs
   17e78:	1ab6      	subcs	r6, r6, r2
   17e7a:	4675      	movcs	r5, lr
   17e7c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   17e80:	085b      	lsrs	r3, r3, #1
   17e82:	ea4f 0232 	mov.w	r2, r2, rrx
   17e86:	ebb6 0e02 	subs.w	lr, r6, r2
   17e8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   17e8e:	bf22      	ittt	cs
   17e90:	1ab6      	subcs	r6, r6, r2
   17e92:	4675      	movcs	r5, lr
   17e94:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   17e98:	ea55 0e06 	orrs.w	lr, r5, r6
   17e9c:	d018      	beq.n	17ed0 <__aeabi_ddiv+0x114>
   17e9e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   17ea2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   17ea6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   17eaa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   17eae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   17eb2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   17eb6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   17eba:	d1c0      	bne.n	17e3e <__aeabi_ddiv+0x82>
   17ebc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17ec0:	d10b      	bne.n	17eda <__aeabi_ddiv+0x11e>
   17ec2:	ea41 0100 	orr.w	r1, r1, r0
   17ec6:	f04f 0000 	mov.w	r0, #0
   17eca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   17ece:	e7b6      	b.n	17e3e <__aeabi_ddiv+0x82>
   17ed0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17ed4:	bf04      	itt	eq
   17ed6:	4301      	orreq	r1, r0
   17ed8:	2000      	moveq	r0, #0
   17eda:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17ede:	bf88      	it	hi
   17ee0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17ee4:	f63f aeaf 	bhi.w	17c46 <__aeabi_dmul+0xde>
   17ee8:	ebb5 0c03 	subs.w	ip, r5, r3
   17eec:	bf04      	itt	eq
   17eee:	ebb6 0c02 	subseq.w	ip, r6, r2
   17ef2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17ef6:	f150 0000 	adcs.w	r0, r0, #0
   17efa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17efe:	bd70      	pop	{r4, r5, r6, pc}
   17f00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   17f04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   17f08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   17f0c:	bfc2      	ittt	gt
   17f0e:	ebd4 050c 	rsbsgt	r5, r4, ip
   17f12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17f16:	bd70      	popgt	{r4, r5, r6, pc}
   17f18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17f1c:	f04f 0e00 	mov.w	lr, #0
   17f20:	3c01      	subs	r4, #1
   17f22:	e690      	b.n	17c46 <__aeabi_dmul+0xde>
   17f24:	ea45 0e06 	orr.w	lr, r5, r6
   17f28:	e68d      	b.n	17c46 <__aeabi_dmul+0xde>
   17f2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17f2e:	ea94 0f0c 	teq	r4, ip
   17f32:	bf08      	it	eq
   17f34:	ea95 0f0c 	teqeq	r5, ip
   17f38:	f43f af3b 	beq.w	17db2 <__aeabi_dmul+0x24a>
   17f3c:	ea94 0f0c 	teq	r4, ip
   17f40:	d10a      	bne.n	17f58 <__aeabi_ddiv+0x19c>
   17f42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17f46:	f47f af34 	bne.w	17db2 <__aeabi_dmul+0x24a>
   17f4a:	ea95 0f0c 	teq	r5, ip
   17f4e:	f47f af25 	bne.w	17d9c <__aeabi_dmul+0x234>
   17f52:	4610      	mov	r0, r2
   17f54:	4619      	mov	r1, r3
   17f56:	e72c      	b.n	17db2 <__aeabi_dmul+0x24a>
   17f58:	ea95 0f0c 	teq	r5, ip
   17f5c:	d106      	bne.n	17f6c <__aeabi_ddiv+0x1b0>
   17f5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17f62:	f43f aefd 	beq.w	17d60 <__aeabi_dmul+0x1f8>
   17f66:	4610      	mov	r0, r2
   17f68:	4619      	mov	r1, r3
   17f6a:	e722      	b.n	17db2 <__aeabi_dmul+0x24a>
   17f6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17f70:	bf18      	it	ne
   17f72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17f76:	f47f aec5 	bne.w	17d04 <__aeabi_dmul+0x19c>
   17f7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   17f7e:	f47f af0d 	bne.w	17d9c <__aeabi_dmul+0x234>
   17f82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   17f86:	f47f aeeb 	bne.w	17d60 <__aeabi_dmul+0x1f8>
   17f8a:	e712      	b.n	17db2 <__aeabi_dmul+0x24a>

00017f8c <__gedf2>:
   17f8c:	f04f 3cff 	mov.w	ip, #4294967295
   17f90:	e006      	b.n	17fa0 <__cmpdf2+0x4>
   17f92:	bf00      	nop

00017f94 <__ledf2>:
   17f94:	f04f 0c01 	mov.w	ip, #1
   17f98:	e002      	b.n	17fa0 <__cmpdf2+0x4>
   17f9a:	bf00      	nop

00017f9c <__cmpdf2>:
   17f9c:	f04f 0c01 	mov.w	ip, #1
   17fa0:	f84d cd04 	str.w	ip, [sp, #-4]!
   17fa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17fa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17fac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17fb0:	bf18      	it	ne
   17fb2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   17fb6:	d01b      	beq.n	17ff0 <__cmpdf2+0x54>
   17fb8:	b001      	add	sp, #4
   17fba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   17fbe:	bf0c      	ite	eq
   17fc0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   17fc4:	ea91 0f03 	teqne	r1, r3
   17fc8:	bf02      	ittt	eq
   17fca:	ea90 0f02 	teqeq	r0, r2
   17fce:	2000      	moveq	r0, #0
   17fd0:	4770      	bxeq	lr
   17fd2:	f110 0f00 	cmn.w	r0, #0
   17fd6:	ea91 0f03 	teq	r1, r3
   17fda:	bf58      	it	pl
   17fdc:	4299      	cmppl	r1, r3
   17fde:	bf08      	it	eq
   17fe0:	4290      	cmpeq	r0, r2
   17fe2:	bf2c      	ite	cs
   17fe4:	17d8      	asrcs	r0, r3, #31
   17fe6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   17fea:	f040 0001 	orr.w	r0, r0, #1
   17fee:	4770      	bx	lr
   17ff0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17ff4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17ff8:	d102      	bne.n	18000 <__cmpdf2+0x64>
   17ffa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   17ffe:	d107      	bne.n	18010 <__cmpdf2+0x74>
   18000:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18004:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18008:	d1d6      	bne.n	17fb8 <__cmpdf2+0x1c>
   1800a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1800e:	d0d3      	beq.n	17fb8 <__cmpdf2+0x1c>
   18010:	f85d 0b04 	ldr.w	r0, [sp], #4
   18014:	4770      	bx	lr
   18016:	bf00      	nop

00018018 <__aeabi_cdrcmple>:
   18018:	4684      	mov	ip, r0
   1801a:	4610      	mov	r0, r2
   1801c:	4662      	mov	r2, ip
   1801e:	468c      	mov	ip, r1
   18020:	4619      	mov	r1, r3
   18022:	4663      	mov	r3, ip
   18024:	e000      	b.n	18028 <__aeabi_cdcmpeq>
   18026:	bf00      	nop

00018028 <__aeabi_cdcmpeq>:
   18028:	b501      	push	{r0, lr}
   1802a:	f7ff ffb7 	bl	17f9c <__cmpdf2>
   1802e:	2800      	cmp	r0, #0
   18030:	bf48      	it	mi
   18032:	f110 0f00 	cmnmi.w	r0, #0
   18036:	bd01      	pop	{r0, pc}

00018038 <__aeabi_dcmpeq>:
   18038:	f84d ed08 	str.w	lr, [sp, #-8]!
   1803c:	f7ff fff4 	bl	18028 <__aeabi_cdcmpeq>
   18040:	bf0c      	ite	eq
   18042:	2001      	moveq	r0, #1
   18044:	2000      	movne	r0, #0
   18046:	f85d fb08 	ldr.w	pc, [sp], #8
   1804a:	bf00      	nop

0001804c <__aeabi_dcmplt>:
   1804c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18050:	f7ff ffea 	bl	18028 <__aeabi_cdcmpeq>
   18054:	bf34      	ite	cc
   18056:	2001      	movcc	r0, #1
   18058:	2000      	movcs	r0, #0
   1805a:	f85d fb08 	ldr.w	pc, [sp], #8
   1805e:	bf00      	nop

00018060 <__aeabi_dcmple>:
   18060:	f84d ed08 	str.w	lr, [sp, #-8]!
   18064:	f7ff ffe0 	bl	18028 <__aeabi_cdcmpeq>
   18068:	bf94      	ite	ls
   1806a:	2001      	movls	r0, #1
   1806c:	2000      	movhi	r0, #0
   1806e:	f85d fb08 	ldr.w	pc, [sp], #8
   18072:	bf00      	nop

00018074 <__aeabi_dcmpge>:
   18074:	f84d ed08 	str.w	lr, [sp, #-8]!
   18078:	f7ff ffce 	bl	18018 <__aeabi_cdrcmple>
   1807c:	bf94      	ite	ls
   1807e:	2001      	movls	r0, #1
   18080:	2000      	movhi	r0, #0
   18082:	f85d fb08 	ldr.w	pc, [sp], #8
   18086:	bf00      	nop

00018088 <__aeabi_dcmpgt>:
   18088:	f84d ed08 	str.w	lr, [sp, #-8]!
   1808c:	f7ff ffc4 	bl	18018 <__aeabi_cdrcmple>
   18090:	bf34      	ite	cc
   18092:	2001      	movcc	r0, #1
   18094:	2000      	movcs	r0, #0
   18096:	f85d fb08 	ldr.w	pc, [sp], #8
   1809a:	bf00      	nop

0001809c <__aeabi_d2iz>:
   1809c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   180a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   180a4:	d215      	bcs.n	180d2 <__aeabi_d2iz+0x36>
   180a6:	d511      	bpl.n	180cc <__aeabi_d2iz+0x30>
   180a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   180ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   180b0:	d912      	bls.n	180d8 <__aeabi_d2iz+0x3c>
   180b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   180b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   180ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   180be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   180c2:	fa23 f002 	lsr.w	r0, r3, r2
   180c6:	bf18      	it	ne
   180c8:	4240      	negne	r0, r0
   180ca:	4770      	bx	lr
   180cc:	f04f 0000 	mov.w	r0, #0
   180d0:	4770      	bx	lr
   180d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   180d6:	d105      	bne.n	180e4 <__aeabi_d2iz+0x48>
   180d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   180dc:	bf08      	it	eq
   180de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   180e2:	4770      	bx	lr
   180e4:	f04f 0000 	mov.w	r0, #0
   180e8:	4770      	bx	lr
   180ea:	bf00      	nop

000180ec <__aeabi_d2uiz>:
   180ec:	004a      	lsls	r2, r1, #1
   180ee:	d211      	bcs.n	18114 <__aeabi_d2uiz+0x28>
   180f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   180f4:	d211      	bcs.n	1811a <__aeabi_d2uiz+0x2e>
   180f6:	d50d      	bpl.n	18114 <__aeabi_d2uiz+0x28>
   180f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   180fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   18100:	d40e      	bmi.n	18120 <__aeabi_d2uiz+0x34>
   18102:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18106:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1810a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1810e:	fa23 f002 	lsr.w	r0, r3, r2
   18112:	4770      	bx	lr
   18114:	f04f 0000 	mov.w	r0, #0
   18118:	4770      	bx	lr
   1811a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1811e:	d102      	bne.n	18126 <__aeabi_d2uiz+0x3a>
   18120:	f04f 30ff 	mov.w	r0, #4294967295
   18124:	4770      	bx	lr
   18126:	f04f 0000 	mov.w	r0, #0
   1812a:	4770      	bx	lr

0001812c <__aeabi_d2f>:
   1812c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18130:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   18134:	bf24      	itt	cs
   18136:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1813a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1813e:	d90d      	bls.n	1815c <__aeabi_d2f+0x30>
   18140:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18144:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   18148:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1814c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18150:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   18154:	bf08      	it	eq
   18156:	f020 0001 	biceq.w	r0, r0, #1
   1815a:	4770      	bx	lr
   1815c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   18160:	d121      	bne.n	181a6 <__aeabi_d2f+0x7a>
   18162:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   18166:	bfbc      	itt	lt
   18168:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1816c:	4770      	bxlt	lr
   1816e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18172:	ea4f 5252 	mov.w	r2, r2, lsr #21
   18176:	f1c2 0218 	rsb	r2, r2, #24
   1817a:	f1c2 0c20 	rsb	ip, r2, #32
   1817e:	fa10 f30c 	lsls.w	r3, r0, ip
   18182:	fa20 f002 	lsr.w	r0, r0, r2
   18186:	bf18      	it	ne
   18188:	f040 0001 	orrne.w	r0, r0, #1
   1818c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18190:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   18194:	fa03 fc0c 	lsl.w	ip, r3, ip
   18198:	ea40 000c 	orr.w	r0, r0, ip
   1819c:	fa23 f302 	lsr.w	r3, r3, r2
   181a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   181a4:	e7cc      	b.n	18140 <__aeabi_d2f+0x14>
   181a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   181aa:	d107      	bne.n	181bc <__aeabi_d2f+0x90>
   181ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   181b0:	bf1e      	ittt	ne
   181b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   181b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   181ba:	4770      	bxne	lr
   181bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   181c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   181c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   181c8:	4770      	bx	lr
   181ca:	bf00      	nop

000181cc <__aeabi_frsub>:
   181cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   181d0:	e002      	b.n	181d8 <__addsf3>
   181d2:	bf00      	nop

000181d4 <__aeabi_fsub>:
   181d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000181d8 <__addsf3>:
   181d8:	0042      	lsls	r2, r0, #1
   181da:	bf1f      	itttt	ne
   181dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   181e0:	ea92 0f03 	teqne	r2, r3
   181e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   181e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   181ec:	d06a      	beq.n	182c4 <__addsf3+0xec>
   181ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
   181f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   181f6:	bfc1      	itttt	gt
   181f8:	18d2      	addgt	r2, r2, r3
   181fa:	4041      	eorgt	r1, r0
   181fc:	4048      	eorgt	r0, r1
   181fe:	4041      	eorgt	r1, r0
   18200:	bfb8      	it	lt
   18202:	425b      	neglt	r3, r3
   18204:	2b19      	cmp	r3, #25
   18206:	bf88      	it	hi
   18208:	4770      	bxhi	lr
   1820a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1820e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18212:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18216:	bf18      	it	ne
   18218:	4240      	negne	r0, r0
   1821a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1821e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   18222:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   18226:	bf18      	it	ne
   18228:	4249      	negne	r1, r1
   1822a:	ea92 0f03 	teq	r2, r3
   1822e:	d03f      	beq.n	182b0 <__addsf3+0xd8>
   18230:	f1a2 0201 	sub.w	r2, r2, #1
   18234:	fa41 fc03 	asr.w	ip, r1, r3
   18238:	eb10 000c 	adds.w	r0, r0, ip
   1823c:	f1c3 0320 	rsb	r3, r3, #32
   18240:	fa01 f103 	lsl.w	r1, r1, r3
   18244:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18248:	d502      	bpl.n	18250 <__addsf3+0x78>
   1824a:	4249      	negs	r1, r1
   1824c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   18250:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18254:	d313      	bcc.n	1827e <__addsf3+0xa6>
   18256:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1825a:	d306      	bcc.n	1826a <__addsf3+0x92>
   1825c:	0840      	lsrs	r0, r0, #1
   1825e:	ea4f 0131 	mov.w	r1, r1, rrx
   18262:	f102 0201 	add.w	r2, r2, #1
   18266:	2afe      	cmp	r2, #254	; 0xfe
   18268:	d251      	bcs.n	1830e <__addsf3+0x136>
   1826a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1826e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18272:	bf08      	it	eq
   18274:	f020 0001 	biceq.w	r0, r0, #1
   18278:	ea40 0003 	orr.w	r0, r0, r3
   1827c:	4770      	bx	lr
   1827e:	0049      	lsls	r1, r1, #1
   18280:	eb40 0000 	adc.w	r0, r0, r0
   18284:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   18288:	f1a2 0201 	sub.w	r2, r2, #1
   1828c:	d1ed      	bne.n	1826a <__addsf3+0x92>
   1828e:	fab0 fc80 	clz	ip, r0
   18292:	f1ac 0c08 	sub.w	ip, ip, #8
   18296:	ebb2 020c 	subs.w	r2, r2, ip
   1829a:	fa00 f00c 	lsl.w	r0, r0, ip
   1829e:	bfaa      	itet	ge
   182a0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   182a4:	4252      	neglt	r2, r2
   182a6:	4318      	orrge	r0, r3
   182a8:	bfbc      	itt	lt
   182aa:	40d0      	lsrlt	r0, r2
   182ac:	4318      	orrlt	r0, r3
   182ae:	4770      	bx	lr
   182b0:	f092 0f00 	teq	r2, #0
   182b4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   182b8:	bf06      	itte	eq
   182ba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   182be:	3201      	addeq	r2, #1
   182c0:	3b01      	subne	r3, #1
   182c2:	e7b5      	b.n	18230 <__addsf3+0x58>
   182c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   182c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   182cc:	bf18      	it	ne
   182ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   182d2:	d021      	beq.n	18318 <__addsf3+0x140>
   182d4:	ea92 0f03 	teq	r2, r3
   182d8:	d004      	beq.n	182e4 <__addsf3+0x10c>
   182da:	f092 0f00 	teq	r2, #0
   182de:	bf08      	it	eq
   182e0:	4608      	moveq	r0, r1
   182e2:	4770      	bx	lr
   182e4:	ea90 0f01 	teq	r0, r1
   182e8:	bf1c      	itt	ne
   182ea:	2000      	movne	r0, #0
   182ec:	4770      	bxne	lr
   182ee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   182f2:	d104      	bne.n	182fe <__addsf3+0x126>
   182f4:	0040      	lsls	r0, r0, #1
   182f6:	bf28      	it	cs
   182f8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   182fc:	4770      	bx	lr
   182fe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   18302:	bf3c      	itt	cc
   18304:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   18308:	4770      	bxcc	lr
   1830a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1830e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   18312:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18316:	4770      	bx	lr
   18318:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1831c:	bf16      	itet	ne
   1831e:	4608      	movne	r0, r1
   18320:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   18324:	4601      	movne	r1, r0
   18326:	0242      	lsls	r2, r0, #9
   18328:	bf06      	itte	eq
   1832a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1832e:	ea90 0f01 	teqeq	r0, r1
   18332:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   18336:	4770      	bx	lr

00018338 <__aeabi_ui2f>:
   18338:	f04f 0300 	mov.w	r3, #0
   1833c:	e004      	b.n	18348 <__aeabi_i2f+0x8>
   1833e:	bf00      	nop

00018340 <__aeabi_i2f>:
   18340:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   18344:	bf48      	it	mi
   18346:	4240      	negmi	r0, r0
   18348:	ea5f 0c00 	movs.w	ip, r0
   1834c:	bf08      	it	eq
   1834e:	4770      	bxeq	lr
   18350:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   18354:	4601      	mov	r1, r0
   18356:	f04f 0000 	mov.w	r0, #0
   1835a:	e01c      	b.n	18396 <__aeabi_l2f+0x2a>

0001835c <__aeabi_ul2f>:
   1835c:	ea50 0201 	orrs.w	r2, r0, r1
   18360:	bf08      	it	eq
   18362:	4770      	bxeq	lr
   18364:	f04f 0300 	mov.w	r3, #0
   18368:	e00a      	b.n	18380 <__aeabi_l2f+0x14>
   1836a:	bf00      	nop

0001836c <__aeabi_l2f>:
   1836c:	ea50 0201 	orrs.w	r2, r0, r1
   18370:	bf08      	it	eq
   18372:	4770      	bxeq	lr
   18374:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   18378:	d502      	bpl.n	18380 <__aeabi_l2f+0x14>
   1837a:	4240      	negs	r0, r0
   1837c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18380:	ea5f 0c01 	movs.w	ip, r1
   18384:	bf02      	ittt	eq
   18386:	4684      	moveq	ip, r0
   18388:	4601      	moveq	r1, r0
   1838a:	2000      	moveq	r0, #0
   1838c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   18390:	bf08      	it	eq
   18392:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   18396:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1839a:	fabc f28c 	clz	r2, ip
   1839e:	3a08      	subs	r2, #8
   183a0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   183a4:	db10      	blt.n	183c8 <__aeabi_l2f+0x5c>
   183a6:	fa01 fc02 	lsl.w	ip, r1, r2
   183aa:	4463      	add	r3, ip
   183ac:	fa00 fc02 	lsl.w	ip, r0, r2
   183b0:	f1c2 0220 	rsb	r2, r2, #32
   183b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   183b8:	fa20 f202 	lsr.w	r2, r0, r2
   183bc:	eb43 0002 	adc.w	r0, r3, r2
   183c0:	bf08      	it	eq
   183c2:	f020 0001 	biceq.w	r0, r0, #1
   183c6:	4770      	bx	lr
   183c8:	f102 0220 	add.w	r2, r2, #32
   183cc:	fa01 fc02 	lsl.w	ip, r1, r2
   183d0:	f1c2 0220 	rsb	r2, r2, #32
   183d4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   183d8:	fa21 f202 	lsr.w	r2, r1, r2
   183dc:	eb43 0002 	adc.w	r0, r3, r2
   183e0:	bf08      	it	eq
   183e2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   183e6:	4770      	bx	lr

000183e8 <__aeabi_fmul>:
   183e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   183ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   183f0:	bf1e      	ittt	ne
   183f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   183f6:	ea92 0f0c 	teqne	r2, ip
   183fa:	ea93 0f0c 	teqne	r3, ip
   183fe:	d06f      	beq.n	184e0 <__aeabi_fmul+0xf8>
   18400:	441a      	add	r2, r3
   18402:	ea80 0c01 	eor.w	ip, r0, r1
   18406:	0240      	lsls	r0, r0, #9
   18408:	bf18      	it	ne
   1840a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1840e:	d01e      	beq.n	1844e <__aeabi_fmul+0x66>
   18410:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   18414:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   18418:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1841c:	fba0 3101 	umull	r3, r1, r0, r1
   18420:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18424:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   18428:	bf3e      	ittt	cc
   1842a:	0049      	lslcc	r1, r1, #1
   1842c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18430:	005b      	lslcc	r3, r3, #1
   18432:	ea40 0001 	orr.w	r0, r0, r1
   18436:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1843a:	2afd      	cmp	r2, #253	; 0xfd
   1843c:	d81d      	bhi.n	1847a <__aeabi_fmul+0x92>
   1843e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   18442:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18446:	bf08      	it	eq
   18448:	f020 0001 	biceq.w	r0, r0, #1
   1844c:	4770      	bx	lr
   1844e:	f090 0f00 	teq	r0, #0
   18452:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   18456:	bf08      	it	eq
   18458:	0249      	lsleq	r1, r1, #9
   1845a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1845e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   18462:	3a7f      	subs	r2, #127	; 0x7f
   18464:	bfc2      	ittt	gt
   18466:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1846a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1846e:	4770      	bxgt	lr
   18470:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18474:	f04f 0300 	mov.w	r3, #0
   18478:	3a01      	subs	r2, #1
   1847a:	dc5d      	bgt.n	18538 <__aeabi_fmul+0x150>
   1847c:	f112 0f19 	cmn.w	r2, #25
   18480:	bfdc      	itt	le
   18482:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   18486:	4770      	bxle	lr
   18488:	f1c2 0200 	rsb	r2, r2, #0
   1848c:	0041      	lsls	r1, r0, #1
   1848e:	fa21 f102 	lsr.w	r1, r1, r2
   18492:	f1c2 0220 	rsb	r2, r2, #32
   18496:	fa00 fc02 	lsl.w	ip, r0, r2
   1849a:	ea5f 0031 	movs.w	r0, r1, rrx
   1849e:	f140 0000 	adc.w	r0, r0, #0
   184a2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   184a6:	bf08      	it	eq
   184a8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   184ac:	4770      	bx	lr
   184ae:	f092 0f00 	teq	r2, #0
   184b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   184b6:	bf02      	ittt	eq
   184b8:	0040      	lsleq	r0, r0, #1
   184ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   184be:	3a01      	subeq	r2, #1
   184c0:	d0f9      	beq.n	184b6 <__aeabi_fmul+0xce>
   184c2:	ea40 000c 	orr.w	r0, r0, ip
   184c6:	f093 0f00 	teq	r3, #0
   184ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   184ce:	bf02      	ittt	eq
   184d0:	0049      	lsleq	r1, r1, #1
   184d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   184d6:	3b01      	subeq	r3, #1
   184d8:	d0f9      	beq.n	184ce <__aeabi_fmul+0xe6>
   184da:	ea41 010c 	orr.w	r1, r1, ip
   184de:	e78f      	b.n	18400 <__aeabi_fmul+0x18>
   184e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   184e4:	ea92 0f0c 	teq	r2, ip
   184e8:	bf18      	it	ne
   184ea:	ea93 0f0c 	teqne	r3, ip
   184ee:	d00a      	beq.n	18506 <__aeabi_fmul+0x11e>
   184f0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   184f4:	bf18      	it	ne
   184f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   184fa:	d1d8      	bne.n	184ae <__aeabi_fmul+0xc6>
   184fc:	ea80 0001 	eor.w	r0, r0, r1
   18500:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18504:	4770      	bx	lr
   18506:	f090 0f00 	teq	r0, #0
   1850a:	bf17      	itett	ne
   1850c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18510:	4608      	moveq	r0, r1
   18512:	f091 0f00 	teqne	r1, #0
   18516:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1851a:	d014      	beq.n	18546 <__aeabi_fmul+0x15e>
   1851c:	ea92 0f0c 	teq	r2, ip
   18520:	d101      	bne.n	18526 <__aeabi_fmul+0x13e>
   18522:	0242      	lsls	r2, r0, #9
   18524:	d10f      	bne.n	18546 <__aeabi_fmul+0x15e>
   18526:	ea93 0f0c 	teq	r3, ip
   1852a:	d103      	bne.n	18534 <__aeabi_fmul+0x14c>
   1852c:	024b      	lsls	r3, r1, #9
   1852e:	bf18      	it	ne
   18530:	4608      	movne	r0, r1
   18532:	d108      	bne.n	18546 <__aeabi_fmul+0x15e>
   18534:	ea80 0001 	eor.w	r0, r0, r1
   18538:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1853c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18540:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18544:	4770      	bx	lr
   18546:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1854a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1854e:	4770      	bx	lr

00018550 <__aeabi_fdiv>:
   18550:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18554:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18558:	bf1e      	ittt	ne
   1855a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1855e:	ea92 0f0c 	teqne	r2, ip
   18562:	ea93 0f0c 	teqne	r3, ip
   18566:	d069      	beq.n	1863c <__aeabi_fdiv+0xec>
   18568:	eba2 0203 	sub.w	r2, r2, r3
   1856c:	ea80 0c01 	eor.w	ip, r0, r1
   18570:	0249      	lsls	r1, r1, #9
   18572:	ea4f 2040 	mov.w	r0, r0, lsl #9
   18576:	d037      	beq.n	185e8 <__aeabi_fdiv+0x98>
   18578:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1857c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   18580:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   18584:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18588:	428b      	cmp	r3, r1
   1858a:	bf38      	it	cc
   1858c:	005b      	lslcc	r3, r3, #1
   1858e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   18592:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   18596:	428b      	cmp	r3, r1
   18598:	bf24      	itt	cs
   1859a:	1a5b      	subcs	r3, r3, r1
   1859c:	ea40 000c 	orrcs.w	r0, r0, ip
   185a0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   185a4:	bf24      	itt	cs
   185a6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   185aa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   185ae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   185b2:	bf24      	itt	cs
   185b4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   185b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   185bc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   185c0:	bf24      	itt	cs
   185c2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   185c6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   185ca:	011b      	lsls	r3, r3, #4
   185cc:	bf18      	it	ne
   185ce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   185d2:	d1e0      	bne.n	18596 <__aeabi_fdiv+0x46>
   185d4:	2afd      	cmp	r2, #253	; 0xfd
   185d6:	f63f af50 	bhi.w	1847a <__aeabi_fmul+0x92>
   185da:	428b      	cmp	r3, r1
   185dc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   185e0:	bf08      	it	eq
   185e2:	f020 0001 	biceq.w	r0, r0, #1
   185e6:	4770      	bx	lr
   185e8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   185ec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   185f0:	327f      	adds	r2, #127	; 0x7f
   185f2:	bfc2      	ittt	gt
   185f4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   185f8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   185fc:	4770      	bxgt	lr
   185fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18602:	f04f 0300 	mov.w	r3, #0
   18606:	3a01      	subs	r2, #1
   18608:	e737      	b.n	1847a <__aeabi_fmul+0x92>
   1860a:	f092 0f00 	teq	r2, #0
   1860e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18612:	bf02      	ittt	eq
   18614:	0040      	lsleq	r0, r0, #1
   18616:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1861a:	3a01      	subeq	r2, #1
   1861c:	d0f9      	beq.n	18612 <__aeabi_fdiv+0xc2>
   1861e:	ea40 000c 	orr.w	r0, r0, ip
   18622:	f093 0f00 	teq	r3, #0
   18626:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1862a:	bf02      	ittt	eq
   1862c:	0049      	lsleq	r1, r1, #1
   1862e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18632:	3b01      	subeq	r3, #1
   18634:	d0f9      	beq.n	1862a <__aeabi_fdiv+0xda>
   18636:	ea41 010c 	orr.w	r1, r1, ip
   1863a:	e795      	b.n	18568 <__aeabi_fdiv+0x18>
   1863c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18640:	ea92 0f0c 	teq	r2, ip
   18644:	d108      	bne.n	18658 <__aeabi_fdiv+0x108>
   18646:	0242      	lsls	r2, r0, #9
   18648:	f47f af7d 	bne.w	18546 <__aeabi_fmul+0x15e>
   1864c:	ea93 0f0c 	teq	r3, ip
   18650:	f47f af70 	bne.w	18534 <__aeabi_fmul+0x14c>
   18654:	4608      	mov	r0, r1
   18656:	e776      	b.n	18546 <__aeabi_fmul+0x15e>
   18658:	ea93 0f0c 	teq	r3, ip
   1865c:	d104      	bne.n	18668 <__aeabi_fdiv+0x118>
   1865e:	024b      	lsls	r3, r1, #9
   18660:	f43f af4c 	beq.w	184fc <__aeabi_fmul+0x114>
   18664:	4608      	mov	r0, r1
   18666:	e76e      	b.n	18546 <__aeabi_fmul+0x15e>
   18668:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1866c:	bf18      	it	ne
   1866e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   18672:	d1ca      	bne.n	1860a <__aeabi_fdiv+0xba>
   18674:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   18678:	f47f af5c 	bne.w	18534 <__aeabi_fmul+0x14c>
   1867c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   18680:	f47f af3c 	bne.w	184fc <__aeabi_fmul+0x114>
   18684:	e75f      	b.n	18546 <__aeabi_fmul+0x15e>
   18686:	bf00      	nop

00018688 <__gesf2>:
   18688:	f04f 3cff 	mov.w	ip, #4294967295
   1868c:	e006      	b.n	1869c <__cmpsf2+0x4>
   1868e:	bf00      	nop

00018690 <__lesf2>:
   18690:	f04f 0c01 	mov.w	ip, #1
   18694:	e002      	b.n	1869c <__cmpsf2+0x4>
   18696:	bf00      	nop

00018698 <__cmpsf2>:
   18698:	f04f 0c01 	mov.w	ip, #1
   1869c:	f84d cd04 	str.w	ip, [sp, #-4]!
   186a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
   186a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   186a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   186ac:	bf18      	it	ne
   186ae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   186b2:	d011      	beq.n	186d8 <__cmpsf2+0x40>
   186b4:	b001      	add	sp, #4
   186b6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   186ba:	bf18      	it	ne
   186bc:	ea90 0f01 	teqne	r0, r1
   186c0:	bf58      	it	pl
   186c2:	ebb2 0003 	subspl.w	r0, r2, r3
   186c6:	bf88      	it	hi
   186c8:	17c8      	asrhi	r0, r1, #31
   186ca:	bf38      	it	cc
   186cc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   186d0:	bf18      	it	ne
   186d2:	f040 0001 	orrne.w	r0, r0, #1
   186d6:	4770      	bx	lr
   186d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   186dc:	d102      	bne.n	186e4 <__cmpsf2+0x4c>
   186de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   186e2:	d105      	bne.n	186f0 <__cmpsf2+0x58>
   186e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   186e8:	d1e4      	bne.n	186b4 <__cmpsf2+0x1c>
   186ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   186ee:	d0e1      	beq.n	186b4 <__cmpsf2+0x1c>
   186f0:	f85d 0b04 	ldr.w	r0, [sp], #4
   186f4:	4770      	bx	lr
   186f6:	bf00      	nop

000186f8 <__aeabi_cfrcmple>:
   186f8:	4684      	mov	ip, r0
   186fa:	4608      	mov	r0, r1
   186fc:	4661      	mov	r1, ip
   186fe:	e7ff      	b.n	18700 <__aeabi_cfcmpeq>

00018700 <__aeabi_cfcmpeq>:
   18700:	b50f      	push	{r0, r1, r2, r3, lr}
   18702:	f7ff ffc9 	bl	18698 <__cmpsf2>
   18706:	2800      	cmp	r0, #0
   18708:	bf48      	it	mi
   1870a:	f110 0f00 	cmnmi.w	r0, #0
   1870e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00018710 <__aeabi_fcmpeq>:
   18710:	f84d ed08 	str.w	lr, [sp, #-8]!
   18714:	f7ff fff4 	bl	18700 <__aeabi_cfcmpeq>
   18718:	bf0c      	ite	eq
   1871a:	2001      	moveq	r0, #1
   1871c:	2000      	movne	r0, #0
   1871e:	f85d fb08 	ldr.w	pc, [sp], #8
   18722:	bf00      	nop

00018724 <__aeabi_fcmplt>:
   18724:	f84d ed08 	str.w	lr, [sp, #-8]!
   18728:	f7ff ffea 	bl	18700 <__aeabi_cfcmpeq>
   1872c:	bf34      	ite	cc
   1872e:	2001      	movcc	r0, #1
   18730:	2000      	movcs	r0, #0
   18732:	f85d fb08 	ldr.w	pc, [sp], #8
   18736:	bf00      	nop

00018738 <__aeabi_fcmple>:
   18738:	f84d ed08 	str.w	lr, [sp, #-8]!
   1873c:	f7ff ffe0 	bl	18700 <__aeabi_cfcmpeq>
   18740:	bf94      	ite	ls
   18742:	2001      	movls	r0, #1
   18744:	2000      	movhi	r0, #0
   18746:	f85d fb08 	ldr.w	pc, [sp], #8
   1874a:	bf00      	nop

0001874c <__aeabi_fcmpge>:
   1874c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18750:	f7ff ffd2 	bl	186f8 <__aeabi_cfrcmple>
   18754:	bf94      	ite	ls
   18756:	2001      	movls	r0, #1
   18758:	2000      	movhi	r0, #0
   1875a:	f85d fb08 	ldr.w	pc, [sp], #8
   1875e:	bf00      	nop

00018760 <__aeabi_fcmpgt>:
   18760:	f84d ed08 	str.w	lr, [sp, #-8]!
   18764:	f7ff ffc8 	bl	186f8 <__aeabi_cfrcmple>
   18768:	bf34      	ite	cc
   1876a:	2001      	movcc	r0, #1
   1876c:	2000      	movcs	r0, #0
   1876e:	f85d fb08 	ldr.w	pc, [sp], #8
   18772:	bf00      	nop

00018774 <__aeabi_f2iz>:
   18774:	ea4f 0240 	mov.w	r2, r0, lsl #1
   18778:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1877c:	d30f      	bcc.n	1879e <__aeabi_f2iz+0x2a>
   1877e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   18782:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   18786:	d90d      	bls.n	187a4 <__aeabi_f2iz+0x30>
   18788:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1878c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18790:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18794:	fa23 f002 	lsr.w	r0, r3, r2
   18798:	bf18      	it	ne
   1879a:	4240      	negne	r0, r0
   1879c:	4770      	bx	lr
   1879e:	f04f 0000 	mov.w	r0, #0
   187a2:	4770      	bx	lr
   187a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
   187a8:	d101      	bne.n	187ae <__aeabi_f2iz+0x3a>
   187aa:	0242      	lsls	r2, r0, #9
   187ac:	d105      	bne.n	187ba <__aeabi_f2iz+0x46>
   187ae:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   187b2:	bf08      	it	eq
   187b4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   187b8:	4770      	bx	lr
   187ba:	f04f 0000 	mov.w	r0, #0
   187be:	4770      	bx	lr

000187c0 <memcpy>:
   187c0:	2a0f      	cmp	r2, #15
   187c2:	b4f0      	push	{r4, r5, r6, r7}
   187c4:	d945      	bls.n	18852 <memcpy+0x92>
   187c6:	ea40 0301 	orr.w	r3, r0, r1
   187ca:	079b      	lsls	r3, r3, #30
   187cc:	d145      	bne.n	1885a <memcpy+0x9a>
   187ce:	f1a2 0710 	sub.w	r7, r2, #16
   187d2:	460c      	mov	r4, r1
   187d4:	4603      	mov	r3, r0
   187d6:	093f      	lsrs	r7, r7, #4
   187d8:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   187dc:	3610      	adds	r6, #16
   187de:	6825      	ldr	r5, [r4, #0]
   187e0:	3310      	adds	r3, #16
   187e2:	3410      	adds	r4, #16
   187e4:	f843 5c10 	str.w	r5, [r3, #-16]
   187e8:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   187ec:	f843 5c0c 	str.w	r5, [r3, #-12]
   187f0:	f854 5c08 	ldr.w	r5, [r4, #-8]
   187f4:	f843 5c08 	str.w	r5, [r3, #-8]
   187f8:	f854 5c04 	ldr.w	r5, [r4, #-4]
   187fc:	f843 5c04 	str.w	r5, [r3, #-4]
   18800:	42b3      	cmp	r3, r6
   18802:	d1ec      	bne.n	187de <memcpy+0x1e>
   18804:	1c7b      	adds	r3, r7, #1
   18806:	f002 0c0f 	and.w	ip, r2, #15
   1880a:	f1bc 0f03 	cmp.w	ip, #3
   1880e:	ea4f 1303 	mov.w	r3, r3, lsl #4
   18812:	4419      	add	r1, r3
   18814:	4403      	add	r3, r0
   18816:	d922      	bls.n	1885e <memcpy+0x9e>
   18818:	460e      	mov	r6, r1
   1881a:	461d      	mov	r5, r3
   1881c:	4664      	mov	r4, ip
   1881e:	f856 7b04 	ldr.w	r7, [r6], #4
   18822:	3c04      	subs	r4, #4
   18824:	2c03      	cmp	r4, #3
   18826:	f845 7b04 	str.w	r7, [r5], #4
   1882a:	d8f8      	bhi.n	1881e <memcpy+0x5e>
   1882c:	f1ac 0404 	sub.w	r4, ip, #4
   18830:	f002 0203 	and.w	r2, r2, #3
   18834:	f024 0403 	bic.w	r4, r4, #3
   18838:	3404      	adds	r4, #4
   1883a:	4423      	add	r3, r4
   1883c:	4421      	add	r1, r4
   1883e:	b132      	cbz	r2, 1884e <memcpy+0x8e>
   18840:	440a      	add	r2, r1
   18842:	f811 4b01 	ldrb.w	r4, [r1], #1
   18846:	4291      	cmp	r1, r2
   18848:	f803 4b01 	strb.w	r4, [r3], #1
   1884c:	d1f9      	bne.n	18842 <memcpy+0x82>
   1884e:	bcf0      	pop	{r4, r5, r6, r7}
   18850:	4770      	bx	lr
   18852:	4603      	mov	r3, r0
   18854:	2a00      	cmp	r2, #0
   18856:	d1f3      	bne.n	18840 <memcpy+0x80>
   18858:	e7f9      	b.n	1884e <memcpy+0x8e>
   1885a:	4603      	mov	r3, r0
   1885c:	e7f0      	b.n	18840 <memcpy+0x80>
   1885e:	4662      	mov	r2, ip
   18860:	2a00      	cmp	r2, #0
   18862:	d1ed      	bne.n	18840 <memcpy+0x80>
   18864:	e7f3      	b.n	1884e <memcpy+0x8e>
   18866:	bf00      	nop

00018868 <memset>:
   18868:	0783      	lsls	r3, r0, #30
   1886a:	b4f0      	push	{r4, r5, r6, r7}
   1886c:	d048      	beq.n	18900 <memset+0x98>
   1886e:	1e54      	subs	r4, r2, #1
   18870:	2a00      	cmp	r2, #0
   18872:	d043      	beq.n	188fc <memset+0x94>
   18874:	b2cd      	uxtb	r5, r1
   18876:	4603      	mov	r3, r0
   18878:	e002      	b.n	18880 <memset+0x18>
   1887a:	2c00      	cmp	r4, #0
   1887c:	d03e      	beq.n	188fc <memset+0x94>
   1887e:	4614      	mov	r4, r2
   18880:	f803 5b01 	strb.w	r5, [r3], #1
   18884:	f013 0f03 	tst.w	r3, #3
   18888:	f104 32ff 	add.w	r2, r4, #4294967295
   1888c:	d1f5      	bne.n	1887a <memset+0x12>
   1888e:	2c03      	cmp	r4, #3
   18890:	d92d      	bls.n	188ee <memset+0x86>
   18892:	b2cd      	uxtb	r5, r1
   18894:	2c0f      	cmp	r4, #15
   18896:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1889a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1889e:	d918      	bls.n	188d2 <memset+0x6a>
   188a0:	f1a4 0710 	sub.w	r7, r4, #16
   188a4:	f103 0610 	add.w	r6, r3, #16
   188a8:	461a      	mov	r2, r3
   188aa:	093f      	lsrs	r7, r7, #4
   188ac:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   188b0:	6015      	str	r5, [r2, #0]
   188b2:	3210      	adds	r2, #16
   188b4:	f842 5c0c 	str.w	r5, [r2, #-12]
   188b8:	f842 5c08 	str.w	r5, [r2, #-8]
   188bc:	f842 5c04 	str.w	r5, [r2, #-4]
   188c0:	42b2      	cmp	r2, r6
   188c2:	d1f5      	bne.n	188b0 <memset+0x48>
   188c4:	f004 040f 	and.w	r4, r4, #15
   188c8:	3701      	adds	r7, #1
   188ca:	2c03      	cmp	r4, #3
   188cc:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   188d0:	d90d      	bls.n	188ee <memset+0x86>
   188d2:	461e      	mov	r6, r3
   188d4:	4622      	mov	r2, r4
   188d6:	3a04      	subs	r2, #4
   188d8:	f846 5b04 	str.w	r5, [r6], #4
   188dc:	2a03      	cmp	r2, #3
   188de:	d8fa      	bhi.n	188d6 <memset+0x6e>
   188e0:	1f22      	subs	r2, r4, #4
   188e2:	f004 0403 	and.w	r4, r4, #3
   188e6:	f022 0203 	bic.w	r2, r2, #3
   188ea:	3204      	adds	r2, #4
   188ec:	4413      	add	r3, r2
   188ee:	b12c      	cbz	r4, 188fc <memset+0x94>
   188f0:	b2c9      	uxtb	r1, r1
   188f2:	441c      	add	r4, r3
   188f4:	f803 1b01 	strb.w	r1, [r3], #1
   188f8:	42a3      	cmp	r3, r4
   188fa:	d1fb      	bne.n	188f4 <memset+0x8c>
   188fc:	bcf0      	pop	{r4, r5, r6, r7}
   188fe:	4770      	bx	lr
   18900:	4614      	mov	r4, r2
   18902:	4603      	mov	r3, r0
   18904:	e7c3      	b.n	1888e <memset+0x26>
   18906:	bf00      	nop

00018908 <strncpy>:
   18908:	ea40 0301 	orr.w	r3, r0, r1
   1890c:	079b      	lsls	r3, r3, #30
   1890e:	b470      	push	{r4, r5, r6}
   18910:	d12b      	bne.n	1896a <strncpy+0x62>
   18912:	2a03      	cmp	r2, #3
   18914:	bf84      	itt	hi
   18916:	460b      	movhi	r3, r1
   18918:	4605      	movhi	r5, r0
   1891a:	d926      	bls.n	1896a <strncpy+0x62>
   1891c:	4619      	mov	r1, r3
   1891e:	f853 4b04 	ldr.w	r4, [r3], #4
   18922:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   18926:	ea26 0604 	bic.w	r6, r6, r4
   1892a:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   1892e:	d105      	bne.n	1893c <strncpy+0x34>
   18930:	3a04      	subs	r2, #4
   18932:	f845 4b04 	str.w	r4, [r5], #4
   18936:	2a03      	cmp	r2, #3
   18938:	4619      	mov	r1, r3
   1893a:	d8ef      	bhi.n	1891c <strncpy+0x14>
   1893c:	b19a      	cbz	r2, 18966 <strncpy+0x5e>
   1893e:	780c      	ldrb	r4, [r1, #0]
   18940:	3a01      	subs	r2, #1
   18942:	1c6b      	adds	r3, r5, #1
   18944:	702c      	strb	r4, [r5, #0]
   18946:	b13c      	cbz	r4, 18958 <strncpy+0x50>
   18948:	b16a      	cbz	r2, 18966 <strncpy+0x5e>
   1894a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1894e:	3a01      	subs	r2, #1
   18950:	f803 4b01 	strb.w	r4, [r3], #1
   18954:	2c00      	cmp	r4, #0
   18956:	d1f7      	bne.n	18948 <strncpy+0x40>
   18958:	b12a      	cbz	r2, 18966 <strncpy+0x5e>
   1895a:	441a      	add	r2, r3
   1895c:	2100      	movs	r1, #0
   1895e:	f803 1b01 	strb.w	r1, [r3], #1
   18962:	4293      	cmp	r3, r2
   18964:	d1fb      	bne.n	1895e <strncpy+0x56>
   18966:	bc70      	pop	{r4, r5, r6}
   18968:	4770      	bx	lr
   1896a:	4605      	mov	r5, r0
   1896c:	e7e6      	b.n	1893c <strncpy+0x34>
   1896e:	bf00      	nop

00018970 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   18970:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   18972:	e003      	b.n	1897c <LoopCopyDataInit>

00018974 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   18974:	4b0a      	ldr	r3, [pc, #40]	; (189a0 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   18976:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   18978:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   1897a:	3104      	adds	r1, #4

0001897c <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   1897c:	4809      	ldr	r0, [pc, #36]	; (189a4 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   1897e:	4b0a      	ldr	r3, [pc, #40]	; (189a8 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   18980:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   18982:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   18984:	d3f6      	bcc.n	18974 <CopyDataInit>
	ldr	r2, =_sbss
   18986:	4a09      	ldr	r2, [pc, #36]	; (189ac <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   18988:	e002      	b.n	18990 <LoopFillZerobss>

0001898a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   1898a:	2300      	movs	r3, #0
	str	r3, [r2], #4
   1898c:	f842 3b04 	str.w	r3, [r2], #4

00018990 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18990:	4b07      	ldr	r3, [pc, #28]	; (189b0 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   18992:	429a      	cmp	r2, r3
	bcc	FillZerobss
   18994:	d3f9      	bcc.n	1898a <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   18996:	f7e7 fcd1 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   1899a:	f7fe fe87 	bl	176ac <main>
	bx	lr    
   1899e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   189a0:	00018aa0 	.word	0x00018aa0
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   189a4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   189a8:	200005d8 	.word	0x200005d8
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   189ac:	200005d8 	.word	0x200005d8
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   189b0:	2004cba4 	.word	0x2004cba4

000189b4 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   189b4:	e7fe      	b.n	189b4 <ADC1_2_IRQHandler>
   189b6:	0000      	movs	r0, r0
   189b8:	65535f52 	.word	0x65535f52
   189bc:	6e617672 	.word	0x6e617672
   189c0:	000d0a74 	.word	0x000d0a74
   189c4:	454c4449 	.word	0x454c4449
   189c8:	00000000 	.word	0x00000000

000189cc <ulKernelPriority>:
   189cc:	0000007f                                ....

000189d0 <heapSTRUCT_SIZE>:
   189d0:	00010010                                         ..

000189d2 <version>:
   189d2:	3d5a0001                                         ..

000189d4 <utm_east0>:
   189d4:	00093d5a                                Z=..

000189d8 <utm_north0>:
   189d8:	005875e6                                .uX.

000189dc <climb_pgain>:
   189dc:	bcf5c28f                                ....

000189e0 <climb_igain>:
   189e0:	3dcccccd                                ...=

000189e4 <level_gaz>:
   189e4:	3e9eb852                                R..>

000189e8 <nav_east0>:
   189e8:	00093d5a                                Z=..

000189ec <nav_north0>:
   189ec:	005875e6                                .uX.

000189f0 <nb_waypoint>:
   189f0:	00000007 33323130 37363534 42413938     ....0123456789AB
   18a00:	46454443                                CDEF

00018a04 <failsafe>:
	...
   18a18:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   18a28:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   18a38:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   18a48:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   18a58:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   18a68:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   18a78:	00000074 65532d49 6e617672 00000074     t...I-Servant...
   18a88:	65532d43 6e617672 00000074 65532d4f     C-Servant...O-Se
   18a98:	6e617672 00000074                       rvant...
