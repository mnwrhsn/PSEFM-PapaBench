
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 80 01 20 79 87 01 00 bd 87 01 00 bd 87 01 00     ... y...........
      10:	bd 87 01 00 bd 87 01 00 bd 87 01 00 00 00 00 00     ................
	...
      2c:	61 5a 00 00 bd 87 01 00 00 00 00 00 6d 5b 00 00     aZ..........m[..
      3c:	a9 5b 00 00 bd 87 01 00 bd 87 01 00 bd 87 01 00     .[..............
      4c:	bd 87 01 00 bd 87 01 00 bd 87 01 00 bd 87 01 00     ................
      5c:	bd 87 01 00 bd 87 01 00 bd 87 01 00 bd 87 01 00     ................
      6c:	bd 87 01 00 bd 87 01 00 bd 87 01 00 bd 87 01 00     ................
      7c:	bd 87 01 00 bd 87 01 00 bd 87 01 00 bd 87 01 00     ................
      8c:	bd 87 01 00 bd 87 01 00 bd 87 01 00 bd 87 01 00     ................
      9c:	bd 87 01 00 bd 87 01 00 bd 87 01 00 bd 87 01 00     ................
      ac:	bd 87 01 00 bd 87 01 00 bd 87 01 00 bd 87 01 00     ................
      bc:	bd 87 01 00 bd 87 01 00 bd 87 01 00 bd 87 01 00     ................
      cc:	bd 87 01 00 bd 87 01 00 bd 87 01 00 bd 87 01 00     ................
      dc:	bd 87 01 00 bd 87 01 00 bd 87 01 00 bd 87 01 00     ................
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00018918 	.word	0x00018918
     6d0:	20000000 	.word	0x20000000
     6d4:	20000488 	.word	0x20000488
     6d8:	20000488 	.word	0x20000488
     6dc:	2000b780 	.word	0x2000b780

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fbfd 	bl	5bf8 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 43f4 	movw	r3, #1268	; 0x4f4
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fd3e 	bl	3ecc <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fd39 	bl	3ecc <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0214 	rsb	r2, r3, #20
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 43f8 	movw	r3, #1272	; 0x4f8
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 4288 	movw	r2, #1160	; 0x488
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fd19 	bl	3ee4 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 43fc 	movw	r3, #1276	; 0x4fc
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 43f4 	movw	r3, #1268	; 0x4f4
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fd58 	bl	3fa4 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 43f4 	movw	r3, #1268	; 0x4f4
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 43dc 	movw	r3, #1244	; 0x4dc
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fd02 	bl	3f34 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fcf2 	bl	3f34 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 43f4 	movw	r3, #1268	; 0x4f4
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fce5 	bl	3f34 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 43e0 	movw	r3, #1248	; 0x4e0
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fd06 	bl	3fa4 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fcfd 	bl	3fa4 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 43f8 	movw	r3, #1272	; 0x4f8
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 43f8 	movw	r3, #1272	; 0x4f8
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 4288 	movw	r2, #1160	; 0x488
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fc7c 	bl	3ee4 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 43e0 	movw	r3, #1248	; 0x4e0
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fd4b 	bl	50a0 <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 5300 	movw	r3, #1280	; 0x500
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 5304 	movw	r3, #1284	; 0x504
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 5304 	movw	r3, #1284	; 0x504
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 5304 	movw	r3, #1284	; 0x504
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 43dc 	movw	r3, #1244	; 0x4dc
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 43dc 	movw	r3, #1244	; 0x4dc
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 43fc 	movw	r3, #1276	; 0x4fc
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fc70 	bl	3fa4 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fc67 	bl	3fa4 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 43f8 	movw	r3, #1272	; 0x4f8
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 43f8 	movw	r3, #1272	; 0x4f8
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 4288 	movw	r2, #1160	; 0x488
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fbe2 	bl	3ee4 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 5304 	movw	r3, #1284	; 0x504
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 5300 	movw	r3, #1280	; 0x500
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 43f8 	movw	r3, #1272	; 0x4f8
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 4288 	movw	r2, #1160	; 0x488
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 43f8 	movw	r3, #1272	; 0x4f8
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 4288 	movw	r2, #1160	; 0x488
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 43f4 	movw	r3, #1268	; 0x4f4
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 43f4 	movw	r3, #1268	; 0x4f4
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 4288 	movw	r2, #1160	; 0x488
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 fb19 	bl	3e8c <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 40b0 	movw	r0, #1200	; 0x4b0
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 fb0d 	bl	3e8c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 40c4 	movw	r0, #1220	; 0x4c4
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 fb07 	bl	3e8c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 40e0 	movw	r0, #1248	; 0x4e0
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 fb01 	bl	3e8c <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 43d8 	movw	r3, #1240	; 0x4d8
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 42b0 	movw	r2, #1200	; 0x4b0
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 43dc 	movw	r3, #1244	; 0x4dc
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 42c4 	movw	r2, #1220	; 0x4c4
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 fb6b 	bl	3fa4 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 40e0 	movw	r0, #1248	; 0x4e0
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 fb02 	bl	3ee4 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 43f4 	movw	r3, #1268	; 0x4f4
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <prvInitialiseEventLists>:
static void vEventSetxTimeStamp( xEventHandle pxNewEvent );

static xList * pxGetReadyList( void );

static void prvInitialiseEventLists(void )
{
    2908:	b580      	push	{r7, lr}
    290a:	b084      	sub	sp, #16
    290c:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU;

    vListInitialise( ( xList * ) &xEventList );
    290e:	f240 5008 	movw	r0, #1288	; 0x508
    2912:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2916:	f001 fab9 	bl	3e8c <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutableList );
    291a:	f240 501c 	movw	r0, #1308	; 0x51c
    291e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2922:	f001 fab3 	bl	3e8c <vListInitialise>

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    2926:	2300      	movs	r3, #0
    2928:	607b      	str	r3, [r7, #4]
    292a:	e00f      	b.n	294c <prvInitialiseEventLists+0x44>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    292c:	687a      	ldr	r2, [r7, #4]
    292e:	4613      	mov	r3, r2
    2930:	009b      	lsls	r3, r3, #2
    2932:	4413      	add	r3, r2
    2934:	009b      	lsls	r3, r3, #2
    2936:	f240 5230 	movw	r2, #1328	; 0x530
    293a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    293e:	4413      	add	r3, r2
    2940:	4618      	mov	r0, r3
    2942:	f001 faa3 	bl	3e8c <vListInitialise>

    vListInitialise( ( xList * ) &xEventList );
    vListInitialise( ( xList * ) &xEventExecutableList );

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    2946:	687b      	ldr	r3, [r7, #4]
    2948:	3301      	adds	r3, #1
    294a:	607b      	str	r3, [r7, #4]
    294c:	687b      	ldr	r3, [r7, #4]
    294e:	2b00      	cmp	r3, #0
    2950:	ddec      	ble.n	292c <prvInitialiseEventLists+0x24>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    }

    // Creating an End FLag Event and insert into the end of xEventList.
    eveECB * pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2952:	203c      	movs	r0, #60	; 0x3c
    2954:	f003 f950 	bl	5bf8 <pvPortMalloc>
    2958:	60f8      	str	r0, [r7, #12]
    if( pxEndFlagEvent != NULL )
    295a:	68fb      	ldr	r3, [r7, #12]
    295c:	2b00      	cmp	r3, #0
    295e:	d01e      	beq.n	299e <prvInitialiseEventLists+0x96>
    {
       // pxEndFlagEvent->pxSource = pxEndFlagEvent->pxDestination = NULL;
        // there may be some problem here because of this assignment way
        pxEndFlagEvent->xTimeStamp.xDeadline= portMAX_DELAY;
    2960:	68fb      	ldr	r3, [r7, #12]
    2962:	f04f 32ff 	mov.w	r2, #4294967295
    2966:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent->xTimeStamp.xTime = portMAX_DELAY;
    2968:	68fb      	ldr	r3, [r7, #12]
    296a:	f04f 32ff 	mov.w	r2, #4294967295
    296e:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent->xTimeStamp.xMicroStep = portMAX_DELAY;
    2970:	68fb      	ldr	r3, [r7, #12]
    2972:	f04f 32ff 	mov.w	r2, #4294967295
    2976:	611a      	str	r2, [r3, #16]
        pxEndFlagEvent->xTimeStamp.xLevel = portMAX_DELAY;
    2978:	68fb      	ldr	r3, [r7, #12]
    297a:	f04f 32ff 	mov.w	r2, #4294967295
    297e:	615a      	str	r2, [r3, #20]
        vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2980:	68fb      	ldr	r3, [r7, #12]
    2982:	3318      	adds	r3, #24
    2984:	68f8      	ldr	r0, [r7, #12]
    2986:	4619      	mov	r1, r3
    2988:	f000 f9b8 	bl	2cfc <vListIntialiseEventItem>
        vListInsertEnd(&xEventList, &pxEndFlagEvent->xEventListItem); 
    298c:	68fb      	ldr	r3, [r7, #12]
    298e:	3318      	adds	r3, #24
    2990:	f240 5008 	movw	r0, #1288	; 0x508
    2994:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2998:	4619      	mov	r1, r3
    299a:	f001 faa3 	bl	3ee4 <vListInsertEnd>
    }

    // Creating an End FLag Event and insert into the end of xEventExecutableList
    eveECB * pxEndFlagEvent1 = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    299e:	203c      	movs	r0, #60	; 0x3c
    29a0:	f003 f92a 	bl	5bf8 <pvPortMalloc>
    29a4:	60b8      	str	r0, [r7, #8]
    if( pxEndFlagEvent1 != NULL )
    29a6:	68bb      	ldr	r3, [r7, #8]
    29a8:	2b00      	cmp	r3, #0
    29aa:	d01e      	beq.n	29ea <prvInitialiseEventLists+0xe2>
    {
        // there may be some problem here because of this assignment way
        pxEndFlagEvent1->xTimeStamp.xDeadline= portMAX_DELAY;
    29ac:	68bb      	ldr	r3, [r7, #8]
    29ae:	f04f 32ff 	mov.w	r2, #4294967295
    29b2:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent1->xTimeStamp.xTime = portMAX_DELAY;
    29b4:	68bb      	ldr	r3, [r7, #8]
    29b6:	f04f 32ff 	mov.w	r2, #4294967295
    29ba:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent1->xTimeStamp.xMicroStep = portMAX_DELAY;
    29bc:	68bb      	ldr	r3, [r7, #8]
    29be:	f04f 32ff 	mov.w	r2, #4294967295
    29c2:	611a      	str	r2, [r3, #16]
        pxEndFlagEvent1->xTimeStamp.xLevel = portMAX_DELAY;
    29c4:	68bb      	ldr	r3, [r7, #8]
    29c6:	f04f 32ff 	mov.w	r2, #4294967295
    29ca:	615a      	str	r2, [r3, #20]
        vListIntialiseEventItem( pxEndFlagEvent1, (xListItem *) & pxEndFlagEvent1->xEventListItem );
    29cc:	68bb      	ldr	r3, [r7, #8]
    29ce:	3318      	adds	r3, #24
    29d0:	68b8      	ldr	r0, [r7, #8]
    29d2:	4619      	mov	r1, r3
    29d4:	f000 f992 	bl	2cfc <vListIntialiseEventItem>
        vListInsertEnd(&xEventExecutableList, &pxEndFlagEvent1->xEventListItem); 
    29d8:	68bb      	ldr	r3, [r7, #8]
    29da:	3318      	adds	r3, #24
    29dc:	f240 501c 	movw	r0, #1308	; 0x51c
    29e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    29e4:	4619      	mov	r1, r3
    29e6:	f001 fa7d 	bl	3ee4 <vListInsertEnd>
    }
}
    29ea:	3710      	adds	r7, #16
    29ec:	46bd      	mov	sp, r7
    29ee:	bd80      	pop	{r7, pc}

000029f0 <xCompareFunction1>:

/* unexecutable event comparison function is used in xEventList. 
 * The event with earlist timestamp will be proceeded first*/
static portBASE_TYPE xCompareFunction1( const struct timeStamp t1, const struct timeStamp t2 )
{
    29f0:	b490      	push	{r4, r7}
    29f2:	b084      	sub	sp, #16
    29f4:	af00      	add	r7, sp, #0
    29f6:	463c      	mov	r4, r7
    29f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xTime < t2.xTime)
    29fc:	687a      	ldr	r2, [r7, #4]
    29fe:	69fb      	ldr	r3, [r7, #28]
    2a00:	429a      	cmp	r2, r3
    2a02:	d201      	bcs.n	2a08 <xCompareFunction1+0x18>
    {
        return pdTRUE;
    2a04:	2301      	movs	r3, #1
    2a06:	e014      	b.n	2a32 <xCompareFunction1+0x42>
    }
    else if( t1.xTime == t2.xTime)
    2a08:	687a      	ldr	r2, [r7, #4]
    2a0a:	69fb      	ldr	r3, [r7, #28]
    2a0c:	429a      	cmp	r2, r3
    2a0e:	d10f      	bne.n	2a30 <xCompareFunction1+0x40>
    {
        if( t1.xDeadline < t2.xDeadline )
    2a10:	683a      	ldr	r2, [r7, #0]
    2a12:	69bb      	ldr	r3, [r7, #24]
    2a14:	429a      	cmp	r2, r3
    2a16:	d201      	bcs.n	2a1c <xCompareFunction1+0x2c>
        {
            return pdTRUE;
    2a18:	2301      	movs	r3, #1
    2a1a:	e00a      	b.n	2a32 <xCompareFunction1+0x42>
        }
        else if( t1.xDeadline == t2.xDeadline )
    2a1c:	683a      	ldr	r2, [r7, #0]
    2a1e:	69bb      	ldr	r3, [r7, #24]
    2a20:	429a      	cmp	r2, r3
    2a22:	d105      	bne.n	2a30 <xCompareFunction1+0x40>
        {
            if( t1.xLevel < t2.xLevel )
    2a24:	68fa      	ldr	r2, [r7, #12]
    2a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a28:	429a      	cmp	r2, r3
    2a2a:	da01      	bge.n	2a30 <xCompareFunction1+0x40>
            {
                return pdTRUE;
    2a2c:	2301      	movs	r3, #1
    2a2e:	e000      	b.n	2a32 <xCompareFunction1+0x42>
            }
        }
    }
    return pdFALSE;
    2a30:	2300      	movs	r3, #0
}
    2a32:	4618      	mov	r0, r3
    2a34:	3710      	adds	r7, #16
    2a36:	46bd      	mov	sp, r7
    2a38:	bc90      	pop	{r4, r7}
    2a3a:	4770      	bx	lr

00002a3c <xCompareFunction2>:

/* executable event comparison function is used in xEventExecutableList. 
 * The event with earlist deadline will be scheduled to execute first */
static portBASE_TYPE xCompareFunction2( const struct timeStamp t1, const struct timeStamp t2 )
{
    2a3c:	b490      	push	{r4, r7}
    2a3e:	b084      	sub	sp, #16
    2a40:	af00      	add	r7, sp, #0
    2a42:	463c      	mov	r4, r7
    2a44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xDeadline < t2.xDeadline)
    2a48:	683a      	ldr	r2, [r7, #0]
    2a4a:	69bb      	ldr	r3, [r7, #24]
    2a4c:	429a      	cmp	r2, r3
    2a4e:	d201      	bcs.n	2a54 <xCompareFunction2+0x18>
    {
        return pdTRUE;
    2a50:	2301      	movs	r3, #1
    2a52:	e014      	b.n	2a7e <xCompareFunction2+0x42>
    }
    else if( t1.xDeadline == t2.xDeadline)
    2a54:	683a      	ldr	r2, [r7, #0]
    2a56:	69bb      	ldr	r3, [r7, #24]
    2a58:	429a      	cmp	r2, r3
    2a5a:	d10f      	bne.n	2a7c <xCompareFunction2+0x40>
    {
        if( t1.xTime < t2.xTime )
    2a5c:	687a      	ldr	r2, [r7, #4]
    2a5e:	69fb      	ldr	r3, [r7, #28]
    2a60:	429a      	cmp	r2, r3
    2a62:	d201      	bcs.n	2a68 <xCompareFunction2+0x2c>
        {
            return pdTRUE;
    2a64:	2301      	movs	r3, #1
    2a66:	e00a      	b.n	2a7e <xCompareFunction2+0x42>
        }
        else if( t1.xTime == t2.xTime )
    2a68:	687a      	ldr	r2, [r7, #4]
    2a6a:	69fb      	ldr	r3, [r7, #28]
    2a6c:	429a      	cmp	r2, r3
    2a6e:	d105      	bne.n	2a7c <xCompareFunction2+0x40>
        {
            if( t1.xLevel < t2.xLevel )
    2a70:	68fa      	ldr	r2, [r7, #12]
    2a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a74:	429a      	cmp	r2, r3
    2a76:	da01      	bge.n	2a7c <xCompareFunction2+0x40>
            {
                return pdTRUE;
    2a78:	2301      	movs	r3, #1
    2a7a:	e000      	b.n	2a7e <xCompareFunction2+0x42>
            }
        }
    }

    return pdFALSE;
    2a7c:	2300      	movs	r3, #0
}
    2a7e:	4618      	mov	r0, r3
    2a80:	3710      	adds	r7, #16
    2a82:	46bd      	mov	sp, r7
    2a84:	bc90      	pop	{r4, r7}
    2a86:	4770      	bx	lr

00002a88 <xEventGetpxSource>:



xTaskHandle xEventGetpxSource( xEventHandle pxEvent )
{
    2a88:	b480      	push	{r7}
    2a8a:	b083      	sub	sp, #12
    2a8c:	af00      	add	r7, sp, #0
    2a8e:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    2a90:	687b      	ldr	r3, [r7, #4]
    2a92:	681b      	ldr	r3, [r3, #0]
}
    2a94:	4618      	mov	r0, r3
    2a96:	370c      	adds	r7, #12
    2a98:	46bd      	mov	sp, r7
    2a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a9e:	4770      	bx	lr

00002aa0 <xEventGetpxDestination>:

xTaskHandle xEventGetpxDestination( xEventHandle pxEvent)
{
    2aa0:	b480      	push	{r7}
    2aa2:	b083      	sub	sp, #12
    2aa4:	af00      	add	r7, sp, #0
    2aa6:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    2aa8:	687b      	ldr	r3, [r7, #4]
    2aaa:	685b      	ldr	r3, [r3, #4]
}
    2aac:	4618      	mov	r0, r3
    2aae:	370c      	adds	r7, #12
    2ab0:	46bd      	mov	sp, r7
    2ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ab6:	4770      	bx	lr

00002ab8 <xEventGetxTimeStamp>:

struct timeStamp xEventGetxTimeStamp( xEventHandle pxEvent)
{
    2ab8:	b490      	push	{r4, r7}
    2aba:	b082      	sub	sp, #8
    2abc:	af00      	add	r7, sp, #0
    2abe:	6078      	str	r0, [r7, #4]
    2ac0:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xTimeStamp;
    2ac2:	687a      	ldr	r2, [r7, #4]
    2ac4:	683b      	ldr	r3, [r7, #0]
    2ac6:	4614      	mov	r4, r2
    2ac8:	3308      	adds	r3, #8
    2aca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2acc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2ad0:	6878      	ldr	r0, [r7, #4]
    2ad2:	3708      	adds	r7, #8
    2ad4:	46bd      	mov	sp, r7
    2ad6:	bc90      	pop	{r4, r7}
    2ad8:	4770      	bx	lr
    2ada:	bf00      	nop

00002adc <xEventGetxData>:

struct eventData xEventGetxData( xEventHandle pxEvent)
{
    2adc:	b490      	push	{r4, r7}
    2ade:	b082      	sub	sp, #8
    2ae0:	af00      	add	r7, sp, #0
    2ae2:	6078      	str	r0, [r7, #4]
    2ae4:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xData;
    2ae6:	687a      	ldr	r2, [r7, #4]
    2ae8:	683b      	ldr	r3, [r7, #0]
    2aea:	4614      	mov	r4, r2
    2aec:	332c      	adds	r3, #44	; 0x2c
    2aee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2af0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2af4:	6878      	ldr	r0, [r7, #4]
    2af6:	3708      	adds	r7, #8
    2af8:	46bd      	mov	sp, r7
    2afa:	bc90      	pop	{r4, r7}
    2afc:	4770      	bx	lr
    2afe:	bf00      	nop

00002b00 <vEventSetxTimeStamp>:

static void vEventSetxTimeStamp( xEventHandle pxNewEvent )
{
    2b00:	b480      	push	{r7}
    2b02:	b085      	sub	sp, #20
    2b04:	af00      	add	r7, sp, #0
    2b06:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2b08:	687b      	ldr	r3, [r7, #4]
    2b0a:	60fb      	str	r3, [r7, #12]
    portTickType xDeadline = pxEvent->xData.xNextPeriod;
    2b0c:	68fb      	ldr	r3, [r7, #12]
    2b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2b10:	60bb      	str	r3, [r7, #8]

    /* EDF scheduling algorithm */
    pxEvent->xTimeStamp.xDeadline= xDeadline ;
    2b12:	68fb      	ldr	r3, [r7, #12]
    2b14:	68ba      	ldr	r2, [r7, #8]
    2b16:	609a      	str	r2, [r3, #8]

    /*set the time of this event to be processed */
    if( pxEvent->xData.IS_LAST_SERVANT == 1 )
    2b18:	68fb      	ldr	r3, [r7, #12]
    2b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2b1c:	2b01      	cmp	r3, #1
    2b1e:	d103      	bne.n	2b28 <vEventSetxTimeStamp+0x28>
    {
        pxEvent->xTimeStamp.xTime = xDeadline;
    2b20:	68fb      	ldr	r3, [r7, #12]
    2b22:	68ba      	ldr	r2, [r7, #8]
    2b24:	60da      	str	r2, [r3, #12]
    2b26:	e003      	b.n	2b30 <vEventSetxTimeStamp+0x30>
    }
    else
    {
        pxEvent->xTimeStamp.xTime = pxEvent->xData.xTime ;
    2b28:	68fb      	ldr	r3, [r7, #12]
    2b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2b2c:	68fb      	ldr	r3, [r7, #12]
    2b2e:	60da      	str	r2, [r3, #12]
    }

    /*the microstep is not used now*/
    pxEvent->xTimeStamp.xMicroStep = 0;
    2b30:	68fb      	ldr	r3, [r7, #12]
    2b32:	2200      	movs	r2, #0
    2b34:	611a      	str	r2, [r3, #16]

    /* set the level of timestamp according to the topology sort result*/
    pxEvent->xTimeStamp.xLevel = xEventSerialNumber;
    2b36:	f240 5344 	movw	r3, #1348	; 0x544
    2b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b3e:	681b      	ldr	r3, [r3, #0]
    2b40:	461a      	mov	r2, r3
    2b42:	68fb      	ldr	r3, [r7, #12]
    2b44:	615a      	str	r2, [r3, #20]

    xEventSerialNumber++;
    2b46:	f240 5344 	movw	r3, #1348	; 0x544
    2b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b4e:	681b      	ldr	r3, [r3, #0]
    2b50:	1c5a      	adds	r2, r3, #1
    2b52:	f240 5344 	movw	r3, #1348	; 0x544
    2b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b5a:	601a      	str	r2, [r3, #0]
}
    2b5c:	3714      	adds	r7, #20
    2b5e:	46bd      	mov	sp, r7
    2b60:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b64:	4770      	bx	lr
    2b66:	bf00      	nop

00002b68 <vEventSetxData>:

static void vEventSetxData( xEventHandle pxEvent, struct eventData xData)
{
    2b68:	b084      	sub	sp, #16
    2b6a:	b490      	push	{r4, r7}
    2b6c:	b082      	sub	sp, #8
    2b6e:	af00      	add	r7, sp, #0
    2b70:	6078      	str	r0, [r7, #4]
    2b72:	f107 0014 	add.w	r0, r7, #20
    2b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ((eveECB *) pxEvent)->xData = xData;
    2b7a:	687b      	ldr	r3, [r7, #4]
    2b7c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    2b80:	f107 0314 	add.w	r3, r7, #20
    2b84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2b86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2b8a:	3708      	adds	r7, #8
    2b8c:	46bd      	mov	sp, r7
    2b8e:	bc90      	pop	{r4, r7}
    2b90:	b004      	add	sp, #16
    2b92:	4770      	bx	lr

00002b94 <pxGetReadyList>:
* Get the event ready list according to the multicore scheduling algorithm.
*
* @return the address of the event ready list.
* */
static xList * pxGetReadyList( void )
{
    2b94:	b480      	push	{r7}
    2b96:	af00      	add	r7, sp, #0
    return &xEventReadyList[0];
    2b98:	f240 5330 	movw	r3, #1328	; 0x530
    2b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
    2ba0:	4618      	mov	r0, r3
    2ba2:	46bd      	mov	sp, r7
    2ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ba8:	4770      	bx	lr
    2baa:	bf00      	nop

00002bac <prvEventListGenericInsert1>:


/* insert event to xEventList in terms of comparison function 1 */
static void prvEventListGenericInsert1( xListItem *pxNewListItem )
{
    2bac:	b590      	push	{r4, r7, lr}
    2bae:	b091      	sub	sp, #68	; 0x44
    2bb0:	af04      	add	r7, sp, #16
    2bb2:	6078      	str	r0, [r7, #4]
    volatile xListItem *pxIterator;
    struct timeStamp xTimeStampOfInsertion;
    xList * pxList = &xEventList;
    2bb4:	f240 5308 	movw	r3, #1288	; 0x508
    2bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bbc:	62bb      	str	r3, [r7, #40]	; 0x28

    xTimeStampOfInsertion = xEventGetxTimeStamp(pxNewListItem->pvOwner);
    2bbe:	687b      	ldr	r3, [r7, #4]
    2bc0:	68db      	ldr	r3, [r3, #12]
    2bc2:	f107 0208 	add.w	r2, r7, #8
    2bc6:	4610      	mov	r0, r2
    2bc8:	4619      	mov	r1, r3
    2bca:	f7ff ff75 	bl	2ab8 <xEventGetxTimeStamp>

    if( xTimeStampOfInsertion.xTime == portMAX_DELAY )
    2bce:	68fb      	ldr	r3, [r7, #12]
    2bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
    2bd4:	d103      	bne.n	2bde <prvEventListGenericInsert1+0x32>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2bd8:	691b      	ldr	r3, [r3, #16]
    2bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    2bdc:	e021      	b.n	2c22 <prvEventListGenericInsert1+0x76>
    }
    else
    {
        taskENTER_CRITICAL();
    2bde:	f002 ff93 	bl	5b08 <vPortEnterCritical>
        // There must already be a End Flag Event with max timeStamp in xEventList.
        // The End Flag Event can be the last Event to be processed, and new events
        // are inserted before it in xEventList.
        // The End Flag Event has been inserted when xEventList is initialised.
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); xCompareFunction1( xEventGetxTimeStamp( pxIterator->pxNext->pvOwner ), xTimeStampOfInsertion ); pxIterator = pxIterator->pxNext ) 
    2be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2be4:	3308      	adds	r3, #8
    2be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    2be8:	e002      	b.n	2bf0 <prvEventListGenericInsert1+0x44>
    2bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2bec:	685b      	ldr	r3, [r3, #4]
    2bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    2bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2bf2:	685b      	ldr	r3, [r3, #4]
    2bf4:	68db      	ldr	r3, [r3, #12]
    2bf6:	f107 0218 	add.w	r2, r7, #24
    2bfa:	4610      	mov	r0, r2
    2bfc:	4619      	mov	r1, r3
    2bfe:	f7ff ff5b 	bl	2ab8 <xEventGetxTimeStamp>
    2c02:	466c      	mov	r4, sp
    2c04:	f107 0308 	add.w	r3, r7, #8
    2c08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2c0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2c0e:	f107 0318 	add.w	r3, r7, #24
    2c12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2c14:	f7ff feec 	bl	29f0 <xCompareFunction1>
    2c18:	4603      	mov	r3, r0
    2c1a:	2b00      	cmp	r3, #0
    2c1c:	d1e5      	bne.n	2bea <prvEventListGenericInsert1+0x3e>
        {
        }
        taskEXIT_CRITICAL();
    2c1e:	f002 ff89 	bl	5b34 <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c24:	685a      	ldr	r2, [r3, #4]
    2c26:	687b      	ldr	r3, [r7, #4]
    2c28:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2c2a:	687b      	ldr	r3, [r7, #4]
    2c2c:	685b      	ldr	r3, [r3, #4]
    2c2e:	687a      	ldr	r2, [r7, #4]
    2c30:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2c32:	687b      	ldr	r3, [r7, #4]
    2c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2c36:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c3a:	687a      	ldr	r2, [r7, #4]
    2c3c:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2c3e:	687b      	ldr	r3, [r7, #4]
    2c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2c42:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c46:	681b      	ldr	r3, [r3, #0]
    2c48:	1c5a      	adds	r2, r3, #1
    2c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c4c:	601a      	str	r2, [r3, #0]
}
    2c4e:	3734      	adds	r7, #52	; 0x34
    2c50:	46bd      	mov	sp, r7
    2c52:	bd90      	pop	{r4, r7, pc}

00002c54 <prvEventListGenericInsert2>:

/* insert event to xEventExecutableList in terms of comparison function 2 */
static void prvEventListGenericInsert2( xListItem *pxNewListItem )
{
    2c54:	b590      	push	{r4, r7, lr}
    2c56:	b091      	sub	sp, #68	; 0x44
    2c58:	af04      	add	r7, sp, #16
    2c5a:	6078      	str	r0, [r7, #4]
    volatile xListItem *pxIterator;
    struct timeStamp xTimeStampOfInsertion;
    xList * pxList = &xEventExecutableList;
    2c5c:	f240 531c 	movw	r3, #1308	; 0x51c
    2c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c64:	62bb      	str	r3, [r7, #40]	; 0x28

    xTimeStampOfInsertion = xEventGetxTimeStamp(pxNewListItem->pvOwner);
    2c66:	687b      	ldr	r3, [r7, #4]
    2c68:	68db      	ldr	r3, [r3, #12]
    2c6a:	f107 0208 	add.w	r2, r7, #8
    2c6e:	4610      	mov	r0, r2
    2c70:	4619      	mov	r1, r3
    2c72:	f7ff ff21 	bl	2ab8 <xEventGetxTimeStamp>

    if( xTimeStampOfInsertion.xTime == portMAX_DELAY )
    2c76:	68fb      	ldr	r3, [r7, #12]
    2c78:	f1b3 3fff 	cmp.w	r3, #4294967295
    2c7c:	d103      	bne.n	2c86 <prvEventListGenericInsert2+0x32>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c80:	691b      	ldr	r3, [r3, #16]
    2c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    2c84:	e021      	b.n	2cca <prvEventListGenericInsert2+0x76>
    }
    else
    {
        taskENTER_CRITICAL();
    2c86:	f002 ff3f 	bl	5b08 <vPortEnterCritical>
        // There must already be a End Flag Event with max timeStamp in xEventList.
        // The End Flag Event can be the last Event to be processed, and new events
        // are inserted before it in xEventList.
        // The End Flag Event has been inserted when xEventList is initialised.
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); xCompareFunction2( xEventGetxTimeStamp( pxIterator->pxNext->pvOwner ), xTimeStampOfInsertion ); pxIterator = pxIterator->pxNext ) 
    2c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c8c:	3308      	adds	r3, #8
    2c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    2c90:	e002      	b.n	2c98 <prvEventListGenericInsert2+0x44>
    2c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c94:	685b      	ldr	r3, [r3, #4]
    2c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    2c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c9a:	685b      	ldr	r3, [r3, #4]
    2c9c:	68db      	ldr	r3, [r3, #12]
    2c9e:	f107 0218 	add.w	r2, r7, #24
    2ca2:	4610      	mov	r0, r2
    2ca4:	4619      	mov	r1, r3
    2ca6:	f7ff ff07 	bl	2ab8 <xEventGetxTimeStamp>
    2caa:	466c      	mov	r4, sp
    2cac:	f107 0308 	add.w	r3, r7, #8
    2cb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2cb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2cb6:	f107 0318 	add.w	r3, r7, #24
    2cba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2cbc:	f7ff febe 	bl	2a3c <xCompareFunction2>
    2cc0:	4603      	mov	r3, r0
    2cc2:	2b00      	cmp	r3, #0
    2cc4:	d1e5      	bne.n	2c92 <prvEventListGenericInsert2+0x3e>
        {
        }
        taskEXIT_CRITICAL();
    2cc6:	f002 ff35 	bl	5b34 <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ccc:	685a      	ldr	r2, [r3, #4]
    2cce:	687b      	ldr	r3, [r7, #4]
    2cd0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2cd2:	687b      	ldr	r3, [r7, #4]
    2cd4:	685b      	ldr	r3, [r3, #4]
    2cd6:	687a      	ldr	r2, [r7, #4]
    2cd8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2cda:	687b      	ldr	r3, [r7, #4]
    2cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2cde:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ce2:	687a      	ldr	r2, [r7, #4]
    2ce4:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2ce6:	687b      	ldr	r3, [r7, #4]
    2ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2cea:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2cee:	681b      	ldr	r3, [r3, #0]
    2cf0:	1c5a      	adds	r2, r3, #1
    2cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2cf4:	601a      	str	r2, [r3, #0]
}
    2cf6:	3734      	adds	r7, #52	; 0x34
    2cf8:	46bd      	mov	sp, r7
    2cfa:	bd90      	pop	{r4, r7, pc}

00002cfc <vListIntialiseEventItem>:


static void vListIntialiseEventItem( xEventHandle pvOwner, xListItem * pxNewEventItem)
{
    2cfc:	b480      	push	{r7}
    2cfe:	b083      	sub	sp, #12
    2d00:	af00      	add	r7, sp, #0
    2d02:	6078      	str	r0, [r7, #4]
    2d04:	6039      	str	r1, [r7, #0]
    /* set the pvOwner of the EventItem as a event*/
    listSET_LIST_ITEM_OWNER( pxNewEventItem, pvOwner );
    2d06:	683b      	ldr	r3, [r7, #0]
    2d08:	687a      	ldr	r2, [r7, #4]
    2d0a:	60da      	str	r2, [r3, #12]
    //pxNewEventItem->pvContainer = (void *) &xEventList;
}
    2d0c:	370c      	adds	r7, #12
    2d0e:	46bd      	mov	sp, r7
    2d10:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d14:	4770      	bx	lr
    2d16:	bf00      	nop

00002d18 <vEventGenericCreate>:


void vEventGenericCreate( xTaskHandle pxDestination, struct eventData pdData)
{
    2d18:	b084      	sub	sp, #16
    2d1a:	b580      	push	{r7, lr}
    2d1c:	b086      	sub	sp, #24
    2d1e:	af02      	add	r7, sp, #8
    2d20:	6078      	str	r0, [r7, #4]
    2d22:	f107 001c 	add.w	r0, r7, #28
    2d26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    eveECB * pxNewEvent = NULL;
    2d2a:	2300      	movs	r3, #0
    2d2c:	60fb      	str	r3, [r7, #12]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2d2e:	f002 feeb 	bl	5b08 <vPortEnterCritical>

    if ( IS_FIRST_EVENT == 1 )
    2d32:	f240 0328 	movw	r3, #40	; 0x28
    2d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d3a:	681b      	ldr	r3, [r3, #0]
    2d3c:	2b01      	cmp	r3, #1
    2d3e:	d107      	bne.n	2d50 <vEventGenericCreate+0x38>
    {
        IS_FIRST_EVENT = 0;
    2d40:	f240 0328 	movw	r3, #40	; 0x28
    2d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d48:	2200      	movs	r2, #0
    2d4a:	601a      	str	r2, [r3, #0]
        prvInitialiseEventLists();
    2d4c:	f7ff fddc 	bl	2908 <prvInitialiseEventLists>
    }

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2d50:	f002 fd72 	bl	5838 <xTaskGetCurrentTaskHandle>
    2d54:	60b8      	str	r0, [r7, #8]
    pxNewEvent = (eveECB *)pvPortMalloc( sizeof( eveECB ));
    2d56:	203c      	movs	r0, #60	; 0x3c
    2d58:	f002 ff4e 	bl	5bf8 <pvPortMalloc>
    2d5c:	60f8      	str	r0, [r7, #12]
    if( pxNewEvent == NULL )
    2d5e:	68fb      	ldr	r3, [r7, #12]
    2d60:	2b00      	cmp	r3, #0
    2d62:	d105      	bne.n	2d70 <vEventGenericCreate+0x58>
    {
        vPrintString("malloc for event stack failed\n\r");
    2d64:	f248 70c0 	movw	r0, #34752	; 0x87c0
    2d68:	f2c0 0001 	movt	r0, #1
    2d6c:	f014 fa56 	bl	1721c <vPrintString>
    }
    if ( pxNewEvent != NULL )
    2d70:	68fb      	ldr	r3, [r7, #12]
    2d72:	2b00      	cmp	r3, #0
    2d74:	d01b      	beq.n	2dae <vEventGenericCreate+0x96>
    {
        pxNewEvent->pxSource = pxCurrentTCBLocal;
    2d76:	68fb      	ldr	r3, [r7, #12]
    2d78:	68ba      	ldr	r2, [r7, #8]
    2d7a:	601a      	str	r2, [r3, #0]
        pxNewEvent->pxDestination = pxDestination;
    2d7c:	68fb      	ldr	r3, [r7, #12]
    2d7e:	687a      	ldr	r2, [r7, #4]
    2d80:	605a      	str	r2, [r3, #4]

        /* initialise the time stamp of an event item according to the sort algorithm.*/
        vEventSetxData( pxNewEvent, pdData );
    2d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d84:	9300      	str	r3, [sp, #0]
    2d86:	f107 031c 	add.w	r3, r7, #28
    2d8a:	cb0e      	ldmia	r3, {r1, r2, r3}
    2d8c:	68f8      	ldr	r0, [r7, #12]
    2d8e:	f7ff feeb 	bl	2b68 <vEventSetxData>

        vEventSetxTimeStamp( pxNewEvent );
    2d92:	68f8      	ldr	r0, [r7, #12]
    2d94:	f7ff feb4 	bl	2b00 <vEventSetxTimeStamp>

        vListIntialiseEventItem( pxNewEvent, (xListItem *) &pxNewEvent->xEventListItem );
    2d98:	68fb      	ldr	r3, [r7, #12]
    2d9a:	3318      	adds	r3, #24
    2d9c:	68f8      	ldr	r0, [r7, #12]
    2d9e:	4619      	mov	r1, r3
    2da0:	f7ff ffac 	bl	2cfc <vListIntialiseEventItem>

        /*how to call this funciton: vEventListInsert( newListItem ). This function add the new item into the xEventList as default*/
        prvEventListGenericInsert1( (xListItem *) &(pxNewEvent->xEventListItem));
    2da4:	68fb      	ldr	r3, [r7, #12]
    2da6:	3318      	adds	r3, #24
    2da8:	4618      	mov	r0, r3
    2daa:	f7ff feff 	bl	2bac <prvEventListGenericInsert1>
    
    }
    taskEXIT_CRITICAL();
    2dae:	f002 fec1 	bl	5b34 <vPortExitCritical>

}
    2db2:	3710      	adds	r7, #16
    2db4:	46bd      	mov	sp, r7
    2db6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2dba:	b004      	add	sp, #16
    2dbc:	4770      	bx	lr
    2dbe:	bf00      	nop

00002dc0 <xEventListGenericTransit>:

/* An API to transfer all executable Event Items from xEventList to xEventExecutableList.
* Then, choose the first executable event item in xEventExecutableList to proceed, which means
* transfer the executable to specific xEventReadyList according to the condition of CPU*/
portBASE_TYPE xEventListGenericTransit( xListItem ** pxEventListItem, xList ** pxCurrentReadyList)
{
    2dc0:	b580      	push	{r7, lr}
    2dc2:	b088      	sub	sp, #32
    2dc4:	af00      	add	r7, sp, #0
    2dc6:	6078      	str	r0, [r7, #4]
    2dc8:	6039      	str	r1, [r7, #0]
    //if( listLIST_IS_EMPTY(&xEventList) )
    // if there is only End Flag Event in xEventList, then return NULL.

    if( listCURRENT_LIST_LENGTH(&xEventList) == 1 )
    2dca:	f240 5308 	movw	r3, #1288	; 0x508
    2dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2dd2:	681b      	ldr	r3, [r3, #0]
    2dd4:	2b01      	cmp	r3, #1
    2dd6:	d108      	bne.n	2dea <xEventListGenericTransit+0x2a>
    {
        *pxEventListItem  = NULL;
    2dd8:	687b      	ldr	r3, [r7, #4]
    2dda:	2200      	movs	r2, #0
    2ddc:	601a      	str	r2, [r3, #0]
        *pxCurrentReadyList = NULL;
    2dde:	683b      	ldr	r3, [r7, #0]
    2de0:	2200      	movs	r2, #0
    2de2:	601a      	str	r2, [r3, #0]
        return -1;
    2de4:	f04f 33ff 	mov.w	r3, #4294967295
    2de8:	e055      	b.n	2e96 <xEventListGenericTransit+0xd6>
        
    xListItem * temp_pxEventListItem;
    struct timeStamp xTimeStamp;
    portTickType xCurrentTime;
    // transmit the executable event from xEventList to xEventExecutableList 
    while( listCURRENT_LIST_LENGTH( &xEventList ) > 1 )
    2dea:	e020      	b.n	2e2e <xEventListGenericTransit+0x6e>
    {
        temp_pxEventListItem = (xListItem *)xEventList.xListEnd.pxNext;
    2dec:	f240 5308 	movw	r3, #1288	; 0x508
    2df0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2df4:	68db      	ldr	r3, [r3, #12]
    2df6:	61fb      	str	r3, [r7, #28]
        xTimeStamp = xEventGetxTimeStamp( (xEventHandle) (temp_pxEventListItem)->pvOwner );
    2df8:	69fb      	ldr	r3, [r7, #28]
    2dfa:	68db      	ldr	r3, [r3, #12]
    2dfc:	f107 0208 	add.w	r2, r7, #8
    2e00:	4610      	mov	r0, r2
    2e02:	4619      	mov	r1, r3
    2e04:	f7ff fe58 	bl	2ab8 <xEventGetxTimeStamp>
        xCurrentTime = xTaskGetTickCount();
    2e08:	f002 f94a 	bl	50a0 <xTaskGetTickCount>
    2e0c:	61b8      	str	r0, [r7, #24]

        // the event is executable
        if( xTimeStamp.xTime <= xCurrentTime )
    2e0e:	68fa      	ldr	r2, [r7, #12]
    2e10:	69bb      	ldr	r3, [r7, #24]
    2e12:	429a      	cmp	r2, r3
    2e14:	d80a      	bhi.n	2e2c <xEventListGenericTransit+0x6c>
        {
            taskENTER_CRITICAL();
    2e16:	f002 fe77 	bl	5b08 <vPortEnterCritical>
            /* remove pxListItem from xEventList */ 
            vListRemove(temp_pxEventListItem);
    2e1a:	69f8      	ldr	r0, [r7, #28]
    2e1c:	f001 f8c2 	bl	3fa4 <vListRemove>
            /* insert the executable event into the xEventExecutableList*/
            prvEventListGenericInsert2(temp_pxEventListItem);
    2e20:	69f8      	ldr	r0, [r7, #28]
    2e22:	f7ff ff17 	bl	2c54 <prvEventListGenericInsert2>
            taskEXIT_CRITICAL();
    2e26:	f002 fe85 	bl	5b34 <vPortExitCritical>
    2e2a:	e000      	b.n	2e2e <xEventListGenericTransit+0x6e>
        }
        else
        {
          // no executable event in xEventList
           break; 
    2e2c:	e006      	b.n	2e3c <xEventListGenericTransit+0x7c>
        
    xListItem * temp_pxEventListItem;
    struct timeStamp xTimeStamp;
    portTickType xCurrentTime;
    // transmit the executable event from xEventList to xEventExecutableList 
    while( listCURRENT_LIST_LENGTH( &xEventList ) > 1 )
    2e2e:	f240 5308 	movw	r3, #1288	; 0x508
    2e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e36:	681b      	ldr	r3, [r3, #0]
    2e38:	2b01      	cmp	r3, #1
    2e3a:	d8d7      	bhi.n	2dec <xEventListGenericTransit+0x2c>
        }

    }

    // if no executable event exists, then return NULL and information about not time yet
    if( listCURRENT_LIST_LENGTH(& xEventExecutableList) == 1 )
    2e3c:	f240 531c 	movw	r3, #1308	; 0x51c
    2e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e44:	681b      	ldr	r3, [r3, #0]
    2e46:	2b01      	cmp	r3, #1
    2e48:	d107      	bne.n	2e5a <xEventListGenericTransit+0x9a>
    {
        *pxCurrentReadyList = NULL;
    2e4a:	683b      	ldr	r3, [r7, #0]
    2e4c:	2200      	movs	r2, #0
    2e4e:	601a      	str	r2, [r3, #0]
        *pxEventListItem = NULL;
    2e50:	687b      	ldr	r3, [r7, #4]
    2e52:	2200      	movs	r2, #0
    2e54:	601a      	str	r2, [r3, #0]
        return 0;
    2e56:	2300      	movs	r3, #0
    2e58:	e01d      	b.n	2e96 <xEventListGenericTransit+0xd6>
    }
    // transmit the first executable event from xEventExecutableList to specific xEventReadyList
    else
    {
        *pxCurrentReadyList = pxGetReadyList();
    2e5a:	f7ff fe9b 	bl	2b94 <pxGetReadyList>
    2e5e:	4602      	mov	r2, r0
    2e60:	683b      	ldr	r3, [r7, #0]
    2e62:	601a      	str	r2, [r3, #0]
        *pxEventListItem = (xListItem *) xEventExecutableList.xListEnd.pxNext;
    2e64:	f240 531c 	movw	r3, #1308	; 0x51c
    2e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e6c:	68da      	ldr	r2, [r3, #12]
    2e6e:	687b      	ldr	r3, [r7, #4]
    2e70:	601a      	str	r2, [r3, #0]
        
        taskENTER_CRITICAL();
    2e72:	f002 fe49 	bl	5b08 <vPortEnterCritical>
        /* remove pxListItem from xEventList */ 
        vListRemove(*pxEventListItem);
    2e76:	687b      	ldr	r3, [r7, #4]
    2e78:	681b      	ldr	r3, [r3, #0]
    2e7a:	4618      	mov	r0, r3
    2e7c:	f001 f892 	bl	3fa4 <vListRemove>
        /* insert the pxListItem into the specified pxList */
        vListInsertEnd(*pxCurrentReadyList, *pxEventListItem);
    2e80:	683b      	ldr	r3, [r7, #0]
    2e82:	681a      	ldr	r2, [r3, #0]
    2e84:	687b      	ldr	r3, [r7, #4]
    2e86:	681b      	ldr	r3, [r3, #0]
    2e88:	4610      	mov	r0, r2
    2e8a:	4619      	mov	r1, r3
    2e8c:	f001 f82a 	bl	3ee4 <vListInsertEnd>
        taskEXIT_CRITICAL();
    2e90:	f002 fe50 	bl	5b34 <vPortExitCritical>
    }

    return 1;
    2e94:	2301      	movs	r3, #1
}
    2e96:	4618      	mov	r0, r3
    2e98:	3720      	adds	r7, #32
    2e9a:	46bd      	mov	sp, r7
    2e9c:	bd80      	pop	{r7, pc}
    2e9e:	bf00      	nop

00002ea0 <vEventGenericReceive>:

void vEventGenericReceive( xEventHandle * pxEvent, xTaskHandle pxSource, xList * pxList )
{
    2ea0:	b580      	push	{r7, lr}
    2ea2:	b088      	sub	sp, #32
    2ea4:	af00      	add	r7, sp, #0
    2ea6:	60f8      	str	r0, [r7, #12]
    2ea8:	60b9      	str	r1, [r7, #8]
    2eaa:	607a      	str	r2, [r7, #4]
    xList * const pxConstList = pxList; 
    2eac:	687b      	ldr	r3, [r7, #4]
    2eae:	61bb      	str	r3, [r7, #24]
    {
        //successful.
        //helloworld();
    }

    if( listLIST_IS_EMPTY( pxList ) )
    2eb0:	687b      	ldr	r3, [r7, #4]
    2eb2:	681b      	ldr	r3, [r3, #0]
    2eb4:	2b00      	cmp	r3, #0
    2eb6:	d103      	bne.n	2ec0 <vEventGenericReceive+0x20>
    {
        *pxEvent = NULL;
    2eb8:	68fb      	ldr	r3, [r7, #12]
    2eba:	2200      	movs	r2, #0
    2ebc:	601a      	str	r2, [r3, #0]
        return;
    2ebe:	e04d      	b.n	2f5c <vEventGenericReceive+0xbc>
    }

    volatile xListItem * pxFlag = pxConstList->xListEnd.pxNext;
    2ec0:	69bb      	ldr	r3, [r7, #24]
    2ec2:	68db      	ldr	r3, [r3, #12]
    2ec4:	61fb      	str	r3, [r7, #28]


    taskENTER_CRITICAL();
    2ec6:	f002 fe1f 	bl	5b08 <vPortEnterCritical>

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2eca:	f002 fcb5 	bl	5838 <xTaskGetCurrentTaskHandle>
    2ece:	6178      	str	r0, [r7, #20]

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2ed0:	e01e      	b.n	2f10 <vEventGenericReceive+0x70>
    {
        if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2ed2:	69fb      	ldr	r3, [r7, #28]
    2ed4:	68db      	ldr	r3, [r3, #12]
    2ed6:	4618      	mov	r0, r3
    2ed8:	f7ff fdd6 	bl	2a88 <xEventGetpxSource>
    2edc:	4602      	mov	r2, r0
    2ede:	68bb      	ldr	r3, [r7, #8]
    2ee0:	429a      	cmp	r2, r3
    2ee2:	d112      	bne.n	2f0a <vEventGenericReceive+0x6a>
    2ee4:	69fb      	ldr	r3, [r7, #28]
    2ee6:	68db      	ldr	r3, [r3, #12]
    2ee8:	4618      	mov	r0, r3
    2eea:	f7ff fdd9 	bl	2aa0 <xEventGetpxDestination>
    2eee:	4602      	mov	r2, r0
    2ef0:	697b      	ldr	r3, [r7, #20]
    2ef2:	429a      	cmp	r2, r3
    2ef4:	d109      	bne.n	2f0a <vEventGenericReceive+0x6a>
        {
            *pxEvent = pxFlag->pvOwner;
    2ef6:	69fb      	ldr	r3, [r7, #28]
    2ef8:	68da      	ldr	r2, [r3, #12]
    2efa:	68fb      	ldr	r3, [r7, #12]
    2efc:	601a      	str	r2, [r3, #0]
            vListRemove((xListItem *)pxFlag);
    2efe:	69f8      	ldr	r0, [r7, #28]
    2f00:	f001 f850 	bl	3fa4 <vListRemove>
            taskEXIT_CRITICAL();
    2f04:	f002 fe16 	bl	5b34 <vPortExitCritical>
            return;
    2f08:	e028      	b.n	2f5c <vEventGenericReceive+0xbc>
    taskENTER_CRITICAL();

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2f0a:	69fb      	ldr	r3, [r7, #28]
    2f0c:	685b      	ldr	r3, [r3, #4]
    2f0e:	61fb      	str	r3, [r7, #28]
    2f10:	69bb      	ldr	r3, [r7, #24]
    2f12:	691a      	ldr	r2, [r3, #16]
    2f14:	69fb      	ldr	r3, [r7, #28]
    2f16:	429a      	cmp	r2, r3
    2f18:	d1db      	bne.n	2ed2 <vEventGenericReceive+0x32>
            return;
        }
    }

    /* we can't forget the last one item of the list. */
    if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2f1a:	69fb      	ldr	r3, [r7, #28]
    2f1c:	68db      	ldr	r3, [r3, #12]
    2f1e:	4618      	mov	r0, r3
    2f20:	f7ff fdb2 	bl	2a88 <xEventGetpxSource>
    2f24:	4602      	mov	r2, r0
    2f26:	68bb      	ldr	r3, [r7, #8]
    2f28:	429a      	cmp	r2, r3
    2f2a:	d112      	bne.n	2f52 <vEventGenericReceive+0xb2>
    2f2c:	69fb      	ldr	r3, [r7, #28]
    2f2e:	68db      	ldr	r3, [r3, #12]
    2f30:	4618      	mov	r0, r3
    2f32:	f7ff fdb5 	bl	2aa0 <xEventGetpxDestination>
    2f36:	4602      	mov	r2, r0
    2f38:	697b      	ldr	r3, [r7, #20]
    2f3a:	429a      	cmp	r2, r3
    2f3c:	d109      	bne.n	2f52 <vEventGenericReceive+0xb2>
    {
        *pxEvent = pxFlag->pvOwner;
    2f3e:	69fb      	ldr	r3, [r7, #28]
    2f40:	68da      	ldr	r2, [r3, #12]
    2f42:	68fb      	ldr	r3, [r7, #12]
    2f44:	601a      	str	r2, [r3, #0]
        vListRemove((xListItem *)pxFlag);
    2f46:	69f8      	ldr	r0, [r7, #28]
    2f48:	f001 f82c 	bl	3fa4 <vListRemove>
        taskEXIT_CRITICAL();
    2f4c:	f002 fdf2 	bl	5b34 <vPortExitCritical>
        return;
    2f50:	e004      	b.n	2f5c <vEventGenericReceive+0xbc>
    }
    else
    {
        // cannot find the specified event.
        *pxEvent = NULL;
    2f52:	68fb      	ldr	r3, [r7, #12]
    2f54:	2200      	movs	r2, #0
    2f56:	601a      	str	r2, [r3, #0]
    }

    taskEXIT_CRITICAL();
    2f58:	f002 fdec 	bl	5b34 <vPortExitCritical>
}
    2f5c:	3720      	adds	r7, #32
    2f5e:	46bd      	mov	sp, r7
    2f60:	bd80      	pop	{r7, pc}
    2f62:	bf00      	nop

00002f64 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    2f64:	b580      	push	{r7, lr}
    2f66:	b082      	sub	sp, #8
    2f68:	af00      	add	r7, sp, #0
    2f6a:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
    2f6c:	f002 fdcc 	bl	5b08 <vPortEnterCritical>

    vPortFree( xEvent );
    2f70:	6878      	ldr	r0, [r7, #4]
    2f72:	f002 ff05 	bl	5d80 <vPortFree>

    taskEXIT_CRITICAL();
    2f76:	f002 fddd 	bl	5b34 <vPortExitCritical>
}
    2f7a:	3708      	adds	r7, #8
    2f7c:	46bd      	mov	sp, r7
    2f7e:	bd80      	pop	{r7, pc}

00002f80 <vSemaphoreInitialise>:
// record the period of Task
extern portTickType xPeriodOfTask[NUMBEROFTASK];

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    2f80:	b580      	push	{r7, lr}
    2f82:	b082      	sub	sp, #8
    2f84:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2f86:	2300      	movs	r3, #0
    2f88:	607b      	str	r3, [r7, #4]
    2f8a:	e033      	b.n	2ff4 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    2f8c:	2001      	movs	r0, #1
    2f8e:	2100      	movs	r1, #0
    2f90:	2203      	movs	r2, #3
    2f92:	f001 f87d 	bl	4090 <xQueueGenericCreate>
    2f96:	4601      	mov	r1, r0
    2f98:	f640 3354 	movw	r3, #2900	; 0xb54
    2f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fa0:	687a      	ldr	r2, [r7, #4]
    2fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    2fa6:	f640 3354 	movw	r3, #2900	; 0xb54
    2faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fae:	687a      	ldr	r2, [r7, #4]
    2fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2fb4:	2b00      	cmp	r3, #0
    2fb6:	d00c      	beq.n	2fd2 <vSemaphoreInitialise+0x52>
    2fb8:	f640 3354 	movw	r3, #2900	; 0xb54
    2fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fc0:	687a      	ldr	r2, [r7, #4]
    2fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2fc6:	4618      	mov	r0, r3
    2fc8:	2100      	movs	r1, #0
    2fca:	2200      	movs	r2, #0
    2fcc:	2300      	movs	r3, #0
    2fce:	f001 f8ed 	bl	41ac <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    2fd2:	f640 3354 	movw	r3, #2900	; 0xb54
    2fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fda:	687a      	ldr	r2, [r7, #4]
    2fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2fe0:	4618      	mov	r0, r3
    2fe2:	2100      	movs	r1, #0
    2fe4:	f04f 32ff 	mov.w	r2, #4294967295
    2fe8:	2300      	movs	r3, #0
    2fea:	f001 f9a5 	bl	4338 <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2fee:	687b      	ldr	r3, [r7, #4]
    2ff0:	3301      	adds	r3, #1
    2ff2:	607b      	str	r3, [r7, #4]
    2ff4:	687b      	ldr	r3, [r7, #4]
    2ff6:	2b22      	cmp	r3, #34	; 0x22
    2ff8:	ddc8      	ble.n	2f8c <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    2ffa:	3708      	adds	r7, #8
    2ffc:	46bd      	mov	sp, r7
    2ffe:	bd80      	pop	{r7, pc}

00003000 <vParameterInitialise>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vParameterInitialise()
{
    3000:	b480      	push	{r7}
    3002:	b085      	sub	sp, #20
    3004:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    3006:	2300      	movs	r3, #0
    3008:	60fb      	str	r3, [r7, #12]
    300a:	e073      	b.n	30f4 <vParameterInitialise+0xf4>
    {
        pvParameters[i].xMyFlag = i;
    300c:	f240 5350 	movw	r3, #1360	; 0x550
    3010:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3014:	68fa      	ldr	r2, [r7, #12]
    3016:	212c      	movs	r1, #44	; 0x2c
    3018:	fb01 f202 	mul.w	r2, r1, r2
    301c:	4413      	add	r3, r2
    301e:	68fa      	ldr	r2, [r7, #12]
    3020:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfIn = 0;
    3022:	f240 5350 	movw	r3, #1360	; 0x550
    3026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    302a:	68fa      	ldr	r2, [r7, #12]
    302c:	212c      	movs	r1, #44	; 0x2c
    302e:	fb01 f202 	mul.w	r2, r1, r2
    3032:	4413      	add	r3, r2
    3034:	3304      	adds	r3, #4
    3036:	2200      	movs	r2, #0
    3038:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfOut = 0;
    303a:	f240 5350 	movw	r3, #1360	; 0x550
    303e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3042:	68fa      	ldr	r2, [r7, #12]
    3044:	212c      	movs	r1, #44	; 0x2c
    3046:	fb01 f202 	mul.w	r2, r1, r2
    304a:	4413      	add	r3, r2
    304c:	3308      	adds	r3, #8
    304e:	2200      	movs	r2, #0
    3050:	601a      	str	r2, [r3, #0]
        pvParameters[i].xLet = xLetOfServant[i]/portTICK_RATE_MS;
    3052:	f240 0394 	movw	r3, #148	; 0x94
    3056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    305a:	68fa      	ldr	r2, [r7, #12]
    305c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3060:	f240 5350 	movw	r3, #1360	; 0x550
    3064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3068:	68f9      	ldr	r1, [r7, #12]
    306a:	202c      	movs	r0, #44	; 0x2c
    306c:	fb00 f101 	mul.w	r1, r0, r1
    3070:	440b      	add	r3, r1
    3072:	331c      	adds	r3, #28
    3074:	601a      	str	r2, [r3, #0]
        pvParameters[i].xFp = xServantTable[i];
    3076:	f240 3354 	movw	r3, #852	; 0x354
    307a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    307e:	68fa      	ldr	r2, [r7, #12]
    3080:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3084:	f240 5350 	movw	r3, #1360	; 0x550
    3088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    308c:	68f9      	ldr	r1, [r7, #12]
    308e:	202c      	movs	r0, #44	; 0x2c
    3090:	fb00 f101 	mul.w	r1, r0, r1
    3094:	440b      	add	r3, r1
    3096:	3320      	adds	r3, #32
    3098:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
    309a:	f240 1320 	movw	r3, #288	; 0x120
    309e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30a2:	68fa      	ldr	r2, [r7, #12]
    30a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    30a8:	f240 5350 	movw	r3, #1360	; 0x550
    30ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30b0:	68f9      	ldr	r1, [r7, #12]
    30b2:	202c      	movs	r0, #44	; 0x2c
    30b4:	fb00 f101 	mul.w	r1, r0, r1
    30b8:	440b      	add	r3, r1
    30ba:	3328      	adds	r3, #40	; 0x28
    30bc:	601a      	str	r2, [r3, #0]
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    30be:	f240 1320 	movw	r3, #288	; 0x120
    30c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30c6:	68fa      	ldr	r2, [r7, #12]
    30c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    30cc:	f240 032c 	movw	r3, #44	; 0x2c
    30d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    30d8:	f240 5350 	movw	r3, #1360	; 0x550
    30dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30e0:	68f9      	ldr	r1, [r7, #12]
    30e2:	202c      	movs	r0, #44	; 0x2c
    30e4:	fb00 f101 	mul.w	r1, r0, r1
    30e8:	440b      	add	r3, r1
    30ea:	3324      	adds	r3, #36	; 0x24
    30ec:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    30ee:	68fb      	ldr	r3, [r7, #12]
    30f0:	3301      	adds	r3, #1
    30f2:	60fb      	str	r3, [r7, #12]
    30f4:	68fb      	ldr	r3, [r7, #12]
    30f6:	2b22      	cmp	r3, #34	; 0x22
    30f8:	dd88      	ble.n	300c <vParameterInitialise+0xc>
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    30fa:	2300      	movs	r3, #0
    30fc:	60fb      	str	r3, [r7, #12]
    30fe:	e080      	b.n	3202 <vParameterInitialise+0x202>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    3100:	f240 12ac 	movw	r2, #428	; 0x1ac
    3104:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3108:	68f9      	ldr	r1, [r7, #12]
    310a:	460b      	mov	r3, r1
    310c:	005b      	lsls	r3, r3, #1
    310e:	440b      	add	r3, r1
    3110:	009b      	lsls	r3, r3, #2
    3112:	4413      	add	r3, r2
    3114:	3304      	adds	r3, #4
    3116:	681b      	ldr	r3, [r3, #0]
    3118:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    311a:	f240 12ac 	movw	r2, #428	; 0x1ac
    311e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3122:	68f9      	ldr	r1, [r7, #12]
    3124:	460b      	mov	r3, r1
    3126:	005b      	lsls	r3, r3, #1
    3128:	440b      	add	r3, r1
    312a:	009b      	lsls	r3, r3, #2
    312c:	4413      	add	r3, r2
    312e:	3308      	adds	r3, #8
    3130:	681b      	ldr	r3, [r3, #0]
    3132:	607b      	str	r3, [r7, #4]

        pvParameters[xSource].xOutFlag[pvParameters[xSource].xNumOfOut] = xDest;
    3134:	f240 5350 	movw	r3, #1360	; 0x550
    3138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    313c:	68ba      	ldr	r2, [r7, #8]
    313e:	212c      	movs	r1, #44	; 0x2c
    3140:	fb01 f202 	mul.w	r2, r1, r2
    3144:	4413      	add	r3, r2
    3146:	3308      	adds	r3, #8
    3148:	6818      	ldr	r0, [r3, #0]
    314a:	f240 5250 	movw	r2, #1360	; 0x550
    314e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3152:	68b9      	ldr	r1, [r7, #8]
    3154:	460b      	mov	r3, r1
    3156:	009b      	lsls	r3, r3, #2
    3158:	440b      	add	r3, r1
    315a:	005b      	lsls	r3, r3, #1
    315c:	440b      	add	r3, r1
    315e:	4403      	add	r3, r0
    3160:	3304      	adds	r3, #4
    3162:	009b      	lsls	r3, r3, #2
    3164:	4413      	add	r3, r2
    3166:	687a      	ldr	r2, [r7, #4]
    3168:	605a      	str	r2, [r3, #4]
        pvParameters[xSource].xNumOfOut ++;
    316a:	f240 5350 	movw	r3, #1360	; 0x550
    316e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3172:	68ba      	ldr	r2, [r7, #8]
    3174:	212c      	movs	r1, #44	; 0x2c
    3176:	fb01 f202 	mul.w	r2, r1, r2
    317a:	4413      	add	r3, r2
    317c:	3308      	adds	r3, #8
    317e:	681b      	ldr	r3, [r3, #0]
    3180:	1c5a      	adds	r2, r3, #1
    3182:	f240 5350 	movw	r3, #1360	; 0x550
    3186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    318a:	68b9      	ldr	r1, [r7, #8]
    318c:	202c      	movs	r0, #44	; 0x2c
    318e:	fb00 f101 	mul.w	r1, r0, r1
    3192:	440b      	add	r3, r1
    3194:	3308      	adds	r3, #8
    3196:	601a      	str	r2, [r3, #0]

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
    3198:	f240 5350 	movw	r3, #1360	; 0x550
    319c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31a0:	687a      	ldr	r2, [r7, #4]
    31a2:	212c      	movs	r1, #44	; 0x2c
    31a4:	fb01 f202 	mul.w	r2, r1, r2
    31a8:	4413      	add	r3, r2
    31aa:	3304      	adds	r3, #4
    31ac:	6818      	ldr	r0, [r3, #0]
    31ae:	f240 5250 	movw	r2, #1360	; 0x550
    31b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    31b6:	6879      	ldr	r1, [r7, #4]
    31b8:	460b      	mov	r3, r1
    31ba:	009b      	lsls	r3, r3, #2
    31bc:	440b      	add	r3, r1
    31be:	005b      	lsls	r3, r3, #1
    31c0:	440b      	add	r3, r1
    31c2:	4403      	add	r3, r0
    31c4:	3302      	adds	r3, #2
    31c6:	009b      	lsls	r3, r3, #2
    31c8:	4413      	add	r3, r2
    31ca:	68ba      	ldr	r2, [r7, #8]
    31cc:	605a      	str	r2, [r3, #4]
        pvParameters[xDest].xNumOfIn ++;
    31ce:	f240 5350 	movw	r3, #1360	; 0x550
    31d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31d6:	687a      	ldr	r2, [r7, #4]
    31d8:	212c      	movs	r1, #44	; 0x2c
    31da:	fb01 f202 	mul.w	r2, r1, r2
    31de:	4413      	add	r3, r2
    31e0:	3304      	adds	r3, #4
    31e2:	681b      	ldr	r3, [r3, #0]
    31e4:	1c5a      	adds	r2, r3, #1
    31e6:	f240 5350 	movw	r3, #1360	; 0x550
    31ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31ee:	6879      	ldr	r1, [r7, #4]
    31f0:	202c      	movs	r0, #44	; 0x2c
    31f2:	fb00 f101 	mul.w	r1, r0, r1
    31f6:	440b      	add	r3, r1
    31f8:	3304      	adds	r3, #4
    31fa:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    31fc:	68fb      	ldr	r3, [r7, #12]
    31fe:	3301      	adds	r3, #1
    3200:	60fb      	str	r3, [r7, #12]
    3202:	f240 13ac 	movw	r3, #428	; 0x1ac
    3206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    320a:	681a      	ldr	r2, [r3, #0]
    320c:	68fb      	ldr	r3, [r7, #12]
    320e:	429a      	cmp	r2, r3
    3210:	f73f af76 	bgt.w	3100 <vParameterInitialise+0x100>
        pvParameters[xSource].xNumOfOut ++;

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
        pvParameters[xDest].xNumOfIn ++;
    }
}
    3214:	3714      	adds	r7, #20
    3216:	46bd      	mov	sp, r7
    3218:	f85d 7b04 	ldr.w	r7, [sp], #4
    321c:	4770      	bx	lr
    321e:	bf00      	nop

00003220 <vTaskDelayLET>:

void vTaskDelayLET()
{
    3220:	b580      	push	{r7, lr}
    3222:	b084      	sub	sp, #16
    3224:	af00      	add	r7, sp, #0
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    3226:	f002 fb07 	bl	5838 <xTaskGetCurrentTaskHandle>
    322a:	60b8      	str	r0, [r7, #8]
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    322c:	68b8      	ldr	r0, [r7, #8]
    322e:	f002 fbb9 	bl	59a4 <xTaskGetxStartTime>
    3232:	6078      	str	r0, [r7, #4]
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    3234:	68b8      	ldr	r0, [r7, #8]
    3236:	f002 fbc1 	bl	59bc <xTaskGetxLet>
    323a:	4602      	mov	r2, r0
    323c:	687b      	ldr	r3, [r7, #4]
    323e:	4413      	add	r3, r2
    3240:	603b      	str	r3, [r7, #0]
    portTickType xCurrentTime = xTaskGetTickCount();
    3242:	f001 ff2d 	bl	50a0 <xTaskGetTickCount>
    3246:	60f8      	str	r0, [r7, #12]

    while( xCurrentTime <  xOutputTime)
    3248:	e002      	b.n	3250 <vTaskDelayLET+0x30>
    {
        xCurrentTime = xTaskGetTickCount();
    324a:	f001 ff29 	bl	50a0 <xTaskGetTickCount>
    324e:	60f8      	str	r0, [r7, #12]
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    portTickType xCurrentTime = xTaskGetTickCount();

    while( xCurrentTime <  xOutputTime)
    3250:	68fa      	ldr	r2, [r7, #12]
    3252:	683b      	ldr	r3, [r7, #0]
    3254:	429a      	cmp	r2, r3
    3256:	d3f8      	bcc.n	324a <vTaskDelayLET+0x2a>
    {
        xCurrentTime = xTaskGetTickCount();
    }
}
    3258:	3710      	adds	r7, #16
    325a:	46bd      	mov	sp, r7
    325c:	bd80      	pop	{r7, pc}
    325e:	bf00      	nop

00003260 <vEventReceiveAll>:

// receive all Events from sources servant, and return them through the point
void vEventReceiveAll( void * pvParameter, xEventHandle *pxEvent )
{
    3260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3264:	b088      	sub	sp, #32
    3266:	af00      	add	r7, sp, #0
    3268:	6078      	str	r0, [r7, #4]
    326a:	6039      	str	r1, [r7, #0]
    326c:	4669      	mov	r1, sp
    326e:	4688      	mov	r8, r1
    portBASE_TYPE i ;

    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    3270:	6879      	ldr	r1, [r7, #4]
    3272:	6849      	ldr	r1, [r1, #4]
    3274:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xInFlag[NUM]; 
    3276:	69be      	ldr	r6, [r7, #24]
    3278:	1e71      	subs	r1, r6, #1
    327a:	6179      	str	r1, [r7, #20]
    327c:	4631      	mov	r1, r6
    327e:	4608      	mov	r0, r1
    3280:	f04f 0100 	mov.w	r1, #0
    3284:	014d      	lsls	r5, r1, #5
    3286:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    328a:	0144      	lsls	r4, r0, #5
    328c:	4631      	mov	r1, r6
    328e:	4608      	mov	r0, r1
    3290:	f04f 0100 	mov.w	r1, #0
    3294:	014b      	lsls	r3, r1, #5
    3296:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    329a:	0142      	lsls	r2, r0, #5
    329c:	4633      	mov	r3, r6
    329e:	009b      	lsls	r3, r3, #2
    32a0:	3303      	adds	r3, #3
    32a2:	3307      	adds	r3, #7
    32a4:	08db      	lsrs	r3, r3, #3
    32a6:	00db      	lsls	r3, r3, #3
    32a8:	ebad 0d03 	sub.w	sp, sp, r3
    32ac:	466b      	mov	r3, sp
    32ae:	3303      	adds	r3, #3
    32b0:	089b      	lsrs	r3, r3, #2
    32b2:	009b      	lsls	r3, r3, #2
    32b4:	613b      	str	r3, [r7, #16]
    portBASE_TYPE xMyFlag = ((struct xParam *) pvParameter)->xMyFlag;
    32b6:	687b      	ldr	r3, [r7, #4]
    32b8:	681b      	ldr	r3, [r3, #0]
    32ba:	60fb      	str	r3, [r7, #12]
    portTickType xCurrentTime;
   
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );
    32bc:	f640 3354 	movw	r3, #2900	; 0xb54
    32c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32c4:	68fa      	ldr	r2, [r7, #12]
    32c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    32ca:	4618      	mov	r0, r3
    32cc:	2100      	movs	r1, #0
    32ce:	f04f 32ff 	mov.w	r2, #4294967295
    32d2:	2300      	movs	r3, #0
    32d4:	f001 f830 	bl	4338 <xQueueGenericReceive>

    xCurrentTime = xTaskGetTickCount(); 
    32d8:	f001 fee2 	bl	50a0 <xTaskGetTickCount>
    32dc:	60b8      	str	r0, [r7, #8]
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    32de:	f640 33e0 	movw	r3, #3040	; 0xbe0
    32e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32e6:	68fa      	ldr	r2, [r7, #12]
    32e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    32ec:	4618      	mov	r0, r3
    32ee:	68b9      	ldr	r1, [r7, #8]
    32f0:	f002 fb70 	bl	59d4 <vTaskSetxStartTime>

    for( i = 0; i < NUM; i ++ )
    32f4:	2300      	movs	r3, #0
    32f6:	61fb      	str	r3, [r7, #28]
    32f8:	e024      	b.n	3344 <vEventReceiveAll+0xe4>
    {
        // get all the in flag
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
    32fa:	687a      	ldr	r2, [r7, #4]
    32fc:	69fb      	ldr	r3, [r7, #28]
    32fe:	3302      	adds	r3, #2
    3300:	009b      	lsls	r3, r3, #2
    3302:	4413      	add	r3, r2
    3304:	6859      	ldr	r1, [r3, #4]
    3306:	693b      	ldr	r3, [r7, #16]
    3308:	69fa      	ldr	r2, [r7, #28]
    330a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    330e:	69fb      	ldr	r3, [r7, #28]
    3310:	009b      	lsls	r3, r3, #2
    3312:	683a      	ldr	r2, [r7, #0]
    3314:	18d1      	adds	r1, r2, r3
    3316:	693b      	ldr	r3, [r7, #16]
    3318:	69fa      	ldr	r2, [r7, #28]
    331a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    331e:	f640 33e0 	movw	r3, #3040	; 0xbe0
    3322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3326:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    332a:	f240 534c 	movw	r3, #1356	; 0x54c
    332e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3332:	681b      	ldr	r3, [r3, #0]
    3334:	4608      	mov	r0, r1
    3336:	4611      	mov	r1, r2
    3338:	461a      	mov	r2, r3
    333a:	f7ff fdb1 	bl	2ea0 <vEventGenericReceive>
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );

    xCurrentTime = xTaskGetTickCount(); 
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

    for( i = 0; i < NUM; i ++ )
    333e:	69fb      	ldr	r3, [r7, #28]
    3340:	3301      	adds	r3, #1
    3342:	61fb      	str	r3, [r7, #28]
    3344:	69fa      	ldr	r2, [r7, #28]
    3346:	69bb      	ldr	r3, [r7, #24]
    3348:	429a      	cmp	r2, r3
    334a:	dbd6      	blt.n	32fa <vEventReceiveAll+0x9a>
    334c:	46c5      	mov	sp, r8
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    }
}
    334e:	3720      	adds	r7, #32
    3350:	46bd      	mov	sp, r7
    3352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3356:	bf00      	nop

00003358 <vEventDeleteAll>:

void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    3358:	b580      	push	{r7, lr}
    335a:	b084      	sub	sp, #16
    335c:	af00      	add	r7, sp, #0
    335e:	6078      	str	r0, [r7, #4]
    3360:	6039      	str	r1, [r7, #0]
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    3362:	687b      	ldr	r3, [r7, #4]
    3364:	685b      	ldr	r3, [r3, #4]
    3366:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; ++i )
    3368:	2300      	movs	r3, #0
    336a:	60fb      	str	r3, [r7, #12]
    336c:	e00a      	b.n	3384 <vEventDeleteAll+0x2c>
    {
        vEventDelete( pxEvent[i] );
    336e:	68fb      	ldr	r3, [r7, #12]
    3370:	009b      	lsls	r3, r3, #2
    3372:	683a      	ldr	r2, [r7, #0]
    3374:	4413      	add	r3, r2
    3376:	681b      	ldr	r3, [r3, #0]
    3378:	4618      	mov	r0, r3
    337a:	f7ff fdf3 	bl	2f64 <vEventGenericDelete>
void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;

    for( i = 0; i < NUM; ++i )
    337e:	68fb      	ldr	r3, [r7, #12]
    3380:	3301      	adds	r3, #1
    3382:	60fb      	str	r3, [r7, #12]
    3384:	68fa      	ldr	r2, [r7, #12]
    3386:	68bb      	ldr	r3, [r7, #8]
    3388:	429a      	cmp	r2, r3
    338a:	dbf0      	blt.n	336e <vEventDeleteAll+0x16>
    {
        vEventDelete( pxEvent[i] );
    }
}
    338c:	3710      	adds	r7, #16
    338e:	46bd      	mov	sp, r7
    3390:	bd80      	pop	{r7, pc}
    3392:	bf00      	nop

00003394 <vEventCreateAll>:


void vEventCreateAll( void * pvParameter, struct eventData *xDatas )
{
    3394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3398:	b08a      	sub	sp, #40	; 0x28
    339a:	af02      	add	r7, sp, #8
    339c:	6078      	str	r0, [r7, #4]
    339e:	6039      	str	r1, [r7, #0]
    33a0:	4669      	mov	r1, sp
    33a2:	4688      	mov	r8, r1
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    33a4:	6879      	ldr	r1, [r7, #4]
    33a6:	6889      	ldr	r1, [r1, #8]
    33a8:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    33aa:	6879      	ldr	r1, [r7, #4]
    33ac:	6809      	ldr	r1, [r1, #0]
    33ae:	6179      	str	r1, [r7, #20]
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    33b0:	6879      	ldr	r1, [r7, #4]
    33b2:	6a49      	ldr	r1, [r1, #36]	; 0x24
    33b4:	6139      	str	r1, [r7, #16]
    portBASE_TYPE xFlags[NUM];
    33b6:	69be      	ldr	r6, [r7, #24]
    33b8:	1e71      	subs	r1, r6, #1
    33ba:	60f9      	str	r1, [r7, #12]
    33bc:	4631      	mov	r1, r6
    33be:	4608      	mov	r0, r1
    33c0:	f04f 0100 	mov.w	r1, #0
    33c4:	014d      	lsls	r5, r1, #5
    33c6:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    33ca:	0144      	lsls	r4, r0, #5
    33cc:	4631      	mov	r1, r6
    33ce:	4608      	mov	r0, r1
    33d0:	f04f 0100 	mov.w	r1, #0
    33d4:	014b      	lsls	r3, r1, #5
    33d6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    33da:	0142      	lsls	r2, r0, #5
    33dc:	4633      	mov	r3, r6
    33de:	009b      	lsls	r3, r3, #2
    33e0:	3303      	adds	r3, #3
    33e2:	3307      	adds	r3, #7
    33e4:	08db      	lsrs	r3, r3, #3
    33e6:	00db      	lsls	r3, r3, #3
    33e8:	ebad 0d03 	sub.w	sp, sp, r3
    33ec:	ab02      	add	r3, sp, #8
    33ee:	3303      	adds	r3, #3
    33f0:	089b      	lsrs	r3, r3, #2
    33f2:	009b      	lsls	r3, r3, #2
    33f4:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; i ++ )
    33f6:	2300      	movs	r3, #0
    33f8:	61fb      	str	r3, [r7, #28]
    33fa:	e033      	b.n	3464 <vEventCreateAll+0xd0>
    {
        // get all flags of destination servants
        xFlags[i] = ((struct xParam *) pvParameter)->xOutFlag[i]; 
    33fc:	687a      	ldr	r2, [r7, #4]
    33fe:	69fb      	ldr	r3, [r7, #28]
    3400:	3304      	adds	r3, #4
    3402:	009b      	lsls	r3, r3, #2
    3404:	4413      	add	r3, r2
    3406:	6859      	ldr	r1, [r3, #4]
    3408:	68bb      	ldr	r3, [r7, #8]
    340a:	69fa      	ldr	r2, [r7, #28]
    340c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        // if current servant is the last one of task, then the event will be proceeded at the deadline
        if( xFlags[i] <= xMyFlag )
    3410:	68bb      	ldr	r3, [r7, #8]
    3412:	69fa      	ldr	r2, [r7, #28]
    3414:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3418:	697b      	ldr	r3, [r7, #20]
    341a:	429a      	cmp	r2, r3
    341c:	dc06      	bgt.n	342c <vEventCreateAll+0x98>
        {
            xDatas[i].IS_LAST_SERVANT = 1;
    341e:	69fb      	ldr	r3, [r7, #28]
    3420:	011b      	lsls	r3, r3, #4
    3422:	683a      	ldr	r2, [r7, #0]
    3424:	4413      	add	r3, r2
    3426:	2201      	movs	r2, #1
    3428:	609a      	str	r2, [r3, #8]
    342a:	e005      	b.n	3438 <vEventCreateAll+0xa4>
        }
        else
        {
            xDatas[i].IS_LAST_SERVANT = 0;
    342c:	69fb      	ldr	r3, [r7, #28]
    342e:	011b      	lsls	r3, r3, #4
    3430:	683a      	ldr	r2, [r7, #0]
    3432:	4413      	add	r3, r2
    3434:	2200      	movs	r2, #0
    3436:	609a      	str	r2, [r3, #8]
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    3438:	68bb      	ldr	r3, [r7, #8]
    343a:	69fa      	ldr	r2, [r7, #28]
    343c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3440:	f640 33e0 	movw	r3, #3040	; 0xbe0
    3444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3448:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    344c:	69fb      	ldr	r3, [r7, #28]
    344e:	011b      	lsls	r3, r3, #4
    3450:	683a      	ldr	r2, [r7, #0]
    3452:	4413      	add	r3, r2
    3454:	68da      	ldr	r2, [r3, #12]
    3456:	9200      	str	r2, [sp, #0]
    3458:	cb0e      	ldmia	r3, {r1, r2, r3}
    345a:	f7ff fc5d 	bl	2d18 <vEventGenericCreate>
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    portBASE_TYPE xFlags[NUM];

    for( i = 0; i < NUM; i ++ )
    345e:	69fb      	ldr	r3, [r7, #28]
    3460:	3301      	adds	r3, #1
    3462:	61fb      	str	r3, [r7, #28]
    3464:	69fa      	ldr	r2, [r7, #28]
    3466:	69bb      	ldr	r3, [r7, #24]
    3468:	429a      	cmp	r2, r3
    346a:	dbc7      	blt.n	33fc <vEventCreateAll+0x68>
    346c:	46c5      	mov	sp, r8
            xDatas[i].IS_LAST_SERVANT = 0;
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    }
}
    346e:	3720      	adds	r7, #32
    3470:	46bd      	mov	sp, r7
    3472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3476:	bf00      	nop

00003478 <vSensor>:
*
* @param pvParameter is parameter from programmer.
*
* */
void vSensor( void * pvParameter )
{
    3478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    347c:	b095      	sub	sp, #84	; 0x54
    347e:	af00      	add	r7, sp, #0
    3480:	60f8      	str	r0, [r7, #12]
    3482:	466b      	mov	r3, sp
    3484:	461e      	mov	r6, r3
    portTickType xCurrentTime;

    portBASE_TYPE i;
    portBASE_TYPE IS_FIRST_TIME_TO_EXE = 1;
    3486:	2301      	movs	r3, #1
    3488:	647b      	str	r3, [r7, #68]	; 0x44

    /* store the paramter into stack of servant */
    void * pvMyParameter = pvParameter;
    348a:	68fb      	ldr	r3, [r7, #12]
    348c:	63bb      	str	r3, [r7, #56]	; 0x38

    portBASE_TYPE NUM = ((struct xParam *) pvMyParameter)->xNumOfOut;
    348e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3490:	689b      	ldr	r3, [r3, #8]
    3492:	637b      	str	r3, [r7, #52]	; 0x34
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    3494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3496:	681b      	ldr	r3, [r3, #0]
    3498:	633b      	str	r3, [r7, #48]	; 0x30
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    349a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    349c:	69db      	ldr	r3, [r3, #28]
    349e:	62fb      	str	r3, [r7, #44]	; 0x2c
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    34a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    34a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    34a4:	62bb      	str	r3, [r7, #40]	; 0x28
    pvServantFunType xMyFun = ((struct xParam *) pvMyParameter)->xFp;
    34a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    34a8:	6a1b      	ldr	r3, [r3, #32]
    34aa:	627b      	str	r3, [r7, #36]	; 0x24

    portBASE_TYPE xCount = 1;
    34ac:	2301      	movs	r3, #1
    34ae:	643b      	str	r3, [r7, #64]	; 0x40
    portTickType deadline = xCount * xPeriod;
    34b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    34b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    34b4:	fb02 f303 	mul.w	r3, r2, r3
    34b8:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* set the LET of Servant when it is created */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    34ba:	f640 33e0 	movw	r3, #3040	; 0xbe0
    34be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    34c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    34c8:	4618      	mov	r0, r3
    34ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    34cc:	f002 fa90 	bl	59f0 <vTaskSetxLet>
    
    /* receive the events created by the last servant of this task. */
    xEventHandle pxEvent[NUM];
    34d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
    34d2:	1e4b      	subs	r3, r1, #1
    34d4:	623b      	str	r3, [r7, #32]
    34d6:	460b      	mov	r3, r1
    34d8:	461a      	mov	r2, r3
    34da:	f04f 0300 	mov.w	r3, #0
    34de:	0158      	lsls	r0, r3, #5
    34e0:	6078      	str	r0, [r7, #4]
    34e2:	6878      	ldr	r0, [r7, #4]
    34e4:	ea40 60d2 	orr.w	r0, r0, r2, lsr #27
    34e8:	6078      	str	r0, [r7, #4]
    34ea:	0150      	lsls	r0, r2, #5
    34ec:	460b      	mov	r3, r1
    34ee:	461a      	mov	r2, r3
    34f0:	f04f 0300 	mov.w	r3, #0
    34f4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
    34f8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
    34fc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
    3500:	460b      	mov	r3, r1
    3502:	009b      	lsls	r3, r3, #2
    3504:	3303      	adds	r3, #3
    3506:	3307      	adds	r3, #7
    3508:	08db      	lsrs	r3, r3, #3
    350a:	00db      	lsls	r3, r3, #3
    350c:	ebad 0d03 	sub.w	sp, sp, r3
    3510:	466b      	mov	r3, sp
    3512:	3303      	adds	r3, #3
    3514:	089b      	lsrs	r3, r3, #2
    3516:	009b      	lsls	r3, r3, #2
    3518:	61fb      	str	r3, [r7, #28]
    
    /* create data for destination servants and initialise them */
    struct eventData xDatas[NUM];
    351a:	6b79      	ldr	r1, [r7, #52]	; 0x34
    351c:	1e4b      	subs	r3, r1, #1
    351e:	61bb      	str	r3, [r7, #24]
    3520:	460b      	mov	r3, r1
    3522:	461a      	mov	r2, r3
    3524:	f04f 0300 	mov.w	r3, #0
    3528:	ea4f 19c3 	mov.w	r9, r3, lsl #7
    352c:	ea49 6952 	orr.w	r9, r9, r2, lsr #25
    3530:	ea4f 18c2 	mov.w	r8, r2, lsl #7
    3534:	460b      	mov	r3, r1
    3536:	461a      	mov	r2, r3
    3538:	f04f 0300 	mov.w	r3, #0
    353c:	01dd      	lsls	r5, r3, #7
    353e:	ea45 6552 	orr.w	r5, r5, r2, lsr #25
    3542:	01d4      	lsls	r4, r2, #7
    3544:	460b      	mov	r3, r1
    3546:	011b      	lsls	r3, r3, #4
    3548:	3303      	adds	r3, #3
    354a:	3307      	adds	r3, #7
    354c:	08db      	lsrs	r3, r3, #3
    354e:	00db      	lsls	r3, r3, #3
    3550:	ebad 0d03 	sub.w	sp, sp, r3
    3554:	466b      	mov	r3, sp
    3556:	3303      	adds	r3, #3
    3558:	089b      	lsrs	r3, r3, #2
    355a:	009b      	lsls	r3, r3, #2
    355c:	617b      	str	r3, [r7, #20]

    while(1)
    {

        if( IS_FIRST_TIME_TO_EXE == 1 )
    355e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3560:	2b01      	cmp	r3, #1
    3562:	d127      	bne.n	35b4 <vSensor+0x13c>
        {
            /* Waiting for the start time of task period */
            xSemaphoreTake(xBinarySemaphore[xMyFlag], portMAX_DELAY);
    3564:	f640 3354 	movw	r3, #2900	; 0xb54
    3568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    356c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    356e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3572:	4618      	mov	r0, r3
    3574:	2100      	movs	r1, #0
    3576:	f04f 32ff 	mov.w	r2, #4294967295
    357a:	2300      	movs	r3, #0
    357c:	f000 fedc 	bl	4338 <xQueueGenericReceive>
#ifdef SENSOR_PRINT
            vPrintNumber( xMyFlag );
    3580:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3582:	f013 fe65 	bl	17250 <vPrintNumber>
            vPrintNumber( deadline ); // ready time  of task 
    3586:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    3588:	f013 fe62 	bl	17250 <vPrintNumber>
#endif 
            xCurrentTime = xTaskGetTickCount();
    358c:	f001 fd88 	bl	50a0 <xTaskGetTickCount>
    3590:	64f8      	str	r0, [r7, #76]	; 0x4c
#ifdef SENSOR_PRINT
            vPrintNumber( xCurrentTime ); // start time of task
    3592:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    3594:	f013 fe5c 	bl	17250 <vPrintNumber>
#endif
            vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3598:	f640 33e0 	movw	r3, #3040	; 0xbe0
    359c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    35a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35a6:	4618      	mov	r0, r3
    35a8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    35aa:	f002 fa13 	bl	59d4 <vTaskSetxStartTime>

            IS_FIRST_TIME_TO_EXE = 0;
    35ae:	2300      	movs	r3, #0
    35b0:	647b      	str	r3, [r7, #68]	; 0x44
    35b2:	e020      	b.n	35f6 <vSensor+0x17e>
        {
            /* When system started, the first servant of every task is triggered to
             * execute by the init events created by tick hook. After that, the first
             * servant of every task is triggered by the last servant of corresponding task.
            * */
            vEventReceiveAll( pvMyParameter, pxEvent );
    35b4:	69fb      	ldr	r3, [r7, #28]
    35b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    35b8:	4619      	mov	r1, r3
    35ba:	f7ff fe51 	bl	3260 <vEventReceiveAll>

#ifdef SENSOR_PRINT
            vPrintNumber( xMyFlag );
    35be:	6b38      	ldr	r0, [r7, #48]	; 0x30
    35c0:	f013 fe46 	bl	17250 <vPrintNumber>
            vPrintNumber( deadline ); // ready time of task 
    35c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    35c6:	f013 fe43 	bl	17250 <vPrintNumber>
#endif 
            xCurrentTime = xTaskGetTickCount();
    35ca:	f001 fd69 	bl	50a0 <xTaskGetTickCount>
    35ce:	64f8      	str	r0, [r7, #76]	; 0x4c
#ifdef SENSOR_PRINT
            vPrintNumber( xCurrentTime ); // start time of task 
    35d0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    35d2:	f013 fe3d 	bl	17250 <vPrintNumber>
#endif
            vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    35d6:	f640 33e0 	movw	r3, #3040	; 0xbe0
    35da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    35e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35e4:	4618      	mov	r0, r3
    35e6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    35e8:	f002 f9f4 	bl	59d4 <vTaskSetxStartTime>

            // do actuator and sensor
#ifdef SENSOR_FUN
            xMyFun( NULL, 0, xDatas, NUM);
#endif
            vEventDeleteAll(pvMyParameter, pxEvent);
    35ec:	69fb      	ldr	r3, [r7, #28]
    35ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    35f0:	4619      	mov	r1, r3
    35f2:	f7ff feb1 	bl	3358 <vEventDeleteAll>
        }

        // deadline is the start time of next period
        xCount ++;
    35f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    35f8:	3301      	adds	r3, #1
    35fa:	643b      	str	r3, [r7, #64]	; 0x40
        deadline = xCount * xPeriod; 
    35fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    35fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3600:	fb02 f303 	mul.w	r3, r2, r3
    3604:	63fb      	str	r3, [r7, #60]	; 0x3c

        for( i = 0; i < NUM; i ++ )
    3606:	2300      	movs	r3, #0
    3608:	64bb      	str	r3, [r7, #72]	; 0x48
    360a:	e013      	b.n	3634 <vSensor+0x1bc>
        {
            xDatas[i].xNextPeriod = deadline;
    360c:	697a      	ldr	r2, [r7, #20]
    360e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3610:	011b      	lsls	r3, r3, #4
    3612:	4413      	add	r3, r2
    3614:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3616:	601a      	str	r2, [r3, #0]
            xDatas[i].xTime = deadline - xPeriod + xLet;
    3618:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    361c:	1ad2      	subs	r2, r2, r3
    361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3620:	441a      	add	r2, r3
    3622:	6979      	ldr	r1, [r7, #20]
    3624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3626:	011b      	lsls	r3, r3, #4
    3628:	440b      	add	r3, r1
    362a:	3304      	adds	r3, #4
    362c:	601a      	str	r2, [r3, #0]

        // deadline is the start time of next period
        xCount ++;
        deadline = xCount * xPeriod; 

        for( i = 0; i < NUM; i ++ )
    362e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3630:	3301      	adds	r3, #1
    3632:	64bb      	str	r3, [r7, #72]	; 0x48
    3634:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3638:	429a      	cmp	r2, r3
    363a:	dbe7      	blt.n	360c <vSensor+0x194>
        {
            xDatas[i].xNextPeriod = deadline;
            xDatas[i].xTime = deadline - xPeriod + xLet;
        }
        // set the future model time
        xFutureModelTime = deadline - xPeriod + xLet;
    363c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    363e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3640:	1ad2      	subs	r2, r2, r3
    3642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3644:	4413      	add	r3, r2
    3646:	461a      	mov	r2, r3
    3648:	f240 5348 	movw	r3, #1352	; 0x548
    364c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3650:	601a      	str	r2, [r3, #0]

        // create events for all destination servants of this servant. 
        vEventCreateAll( pvMyParameter, xDatas );
    3652:	697b      	ldr	r3, [r7, #20]
    3654:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3656:	4619      	mov	r1, r3
    3658:	f7ff fe9c 	bl	3394 <vEventCreateAll>

#ifdef SENSOR_LET
        vTaskDelayLET();
#endif
        
        if( xCurrentTime > xDatas[0].xNextPeriod )
    365c:	697b      	ldr	r3, [r7, #20]
    365e:	681a      	ldr	r2, [r3, #0]
    3660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3662:	429a      	cmp	r2, r3
    3664:	d20a      	bcs.n	367c <vSensor+0x204>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    3666:	697b      	ldr	r3, [r7, #20]
    3668:	681b      	ldr	r3, [r3, #0]
    366a:	4618      	mov	r0, r3
    366c:	f013 fdf0 	bl	17250 <vPrintNumber>
            vPrintString("there are sensor missing deadline\n\r");
    3670:	f248 70e0 	movw	r0, #34784	; 0x87e0
    3674:	f2c0 0001 	movt	r0, #1
    3678:	f013 fdd0 	bl	1721c <vPrintString>
        }

#ifdef SENSOR_PRINT

        xCurrentTime = xTaskGetTickCount();
    367c:	f001 fd10 	bl	50a0 <xTaskGetTickCount>
    3680:	64f8      	str	r0, [r7, #76]	; 0x4c
        vPrintNumber( xCurrentTime );  // finish time of sensor
    3682:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    3684:	f013 fde4 	bl	17250 <vPrintNumber>
        vPrintNumber( deadline );   // deadline of task
    3688:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    368a:	f013 fde1 	bl	17250 <vPrintNumber>
        vPrintNumber( ( xMyFlag + 10 ) * 3 );
    368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3690:	f103 020a 	add.w	r2, r3, #10
    3694:	4613      	mov	r3, r2
    3696:	005b      	lsls	r3, r3, #1
    3698:	4413      	add	r3, r2
    369a:	4618      	mov	r0, r3
    369c:	f013 fdd8 	bl	17250 <vPrintNumber>
#endif

        xCurrentTime = xTaskGetTickCount();
    36a0:	f001 fcfe 	bl	50a0 <xTaskGetTickCount>
    36a4:	64f8      	str	r0, [r7, #76]	; 0x4c
        if( xCurrentTime > 1000000 )
    36a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    36a8:	f244 2340 	movw	r3, #16960	; 0x4240
    36ac:	f2c0 030f 	movt	r3, #15
    36b0:	429a      	cmp	r2, r3
    36b2:	d900      	bls.n	36b6 <vSensor+0x23e>
        {
            break;
    36b4:	e00c      	b.n	36d0 <vSensor+0x258>
        }
        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    36b6:	f640 3354 	movw	r3, #2900	; 0xb54
    36ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    36c2:	4618      	mov	r0, r3
    36c4:	2100      	movs	r1, #0
    36c6:	2200      	movs	r2, #0
    36c8:	2300      	movs	r3, #0
    36ca:	f000 fd6f 	bl	41ac <xQueueGenericSend>
    }
    36ce:	e746      	b.n	355e <vSensor+0xe6>
    36d0:	46b5      	mov	sp, r6
}
    36d2:	3754      	adds	r7, #84	; 0x54
    36d4:	46bd      	mov	sp, r7
    36d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    36da:	bf00      	nop

000036dc <vServant>:
*  @param pvParameter is parameter from programmer
*
* */

void vServant( void * pvParameter )
{
    36dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36e0:	b097      	sub	sp, #92	; 0x5c
    36e2:	af00      	add	r7, sp, #0
    36e4:	61f8      	str	r0, [r7, #28]
    36e6:	4669      	mov	r1, sp
    36e8:	6079      	str	r1, [r7, #4]
    portBASE_TYPE i;
    void * pvMyParameter = pvParameter;
    36ea:	69f9      	ldr	r1, [r7, #28]
    36ec:	6539      	str	r1, [r7, #80]	; 0x50
    portTickType xCurrentTime;
    
    portBASE_TYPE xNumOfIn = ((struct xParam *) pvMyParameter)->xNumOfIn;
    36ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
    36f0:	6849      	ldr	r1, [r1, #4]
    36f2:	64f9      	str	r1, [r7, #76]	; 0x4c
    portBASE_TYPE xNumOfOut = ((struct xParam *) pvMyParameter)->xNumOfOut;
    36f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
    36f6:	6889      	ldr	r1, [r1, #8]
    36f8:	64b9      	str	r1, [r7, #72]	; 0x48
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    36fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
    36fc:	6809      	ldr	r1, [r1, #0]
    36fe:	6479      	str	r1, [r7, #68]	; 0x44
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    3700:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3702:	6a49      	ldr	r1, [r1, #36]	; 0x24
    3704:	6439      	str	r1, [r7, #64]	; 0x40
    pvServantFunType xMyFun = ((struct xParam *) pvMyParameter)->xFp;
    3706:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3708:	6a09      	ldr	r1, [r1, #32]
    370a:	63f9      	str	r1, [r7, #60]	; 0x3c

    xEventHandle pxEvent[xNumOfIn];
    370c:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
    370e:	1e71      	subs	r1, r6, #1
    3710:	63b9      	str	r1, [r7, #56]	; 0x38
    3712:	4631      	mov	r1, r6
    3714:	4608      	mov	r0, r1
    3716:	f04f 0100 	mov.w	r1, #0
    371a:	ea4f 1b41 	mov.w	fp, r1, lsl #5
    371e:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
    3722:	ea4f 1a40 	mov.w	sl, r0, lsl #5
    3726:	4631      	mov	r1, r6
    3728:	4608      	mov	r0, r1
    372a:	f04f 0100 	mov.w	r1, #0
    372e:	ea4f 1941 	mov.w	r9, r1, lsl #5
    3732:	ea49 69d0 	orr.w	r9, r9, r0, lsr #27
    3736:	ea4f 1840 	mov.w	r8, r0, lsl #5
    373a:	4631      	mov	r1, r6
    373c:	0089      	lsls	r1, r1, #2
    373e:	3103      	adds	r1, #3
    3740:	3107      	adds	r1, #7
    3742:	08c9      	lsrs	r1, r1, #3
    3744:	00c9      	lsls	r1, r1, #3
    3746:	ebad 0d01 	sub.w	sp, sp, r1
    374a:	4669      	mov	r1, sp
    374c:	3103      	adds	r1, #3
    374e:	0889      	lsrs	r1, r1, #2
    3750:	0089      	lsls	r1, r1, #2
    3752:	6379      	str	r1, [r7, #52]	; 0x34
    struct eventData xDatas[xNumOfOut];
    3754:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    3756:	1e71      	subs	r1, r6, #1
    3758:	6339      	str	r1, [r7, #48]	; 0x30
    375a:	4631      	mov	r1, r6
    375c:	4608      	mov	r0, r1
    375e:	f04f 0100 	mov.w	r1, #0
    3762:	01cd      	lsls	r5, r1, #7
    3764:	ea45 6550 	orr.w	r5, r5, r0, lsr #25
    3768:	01c4      	lsls	r4, r0, #7
    376a:	4631      	mov	r1, r6
    376c:	4608      	mov	r0, r1
    376e:	f04f 0100 	mov.w	r1, #0
    3772:	01cb      	lsls	r3, r1, #7
    3774:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
    3778:	01c2      	lsls	r2, r0, #7
    377a:	4633      	mov	r3, r6
    377c:	011b      	lsls	r3, r3, #4
    377e:	3303      	adds	r3, #3
    3780:	3307      	adds	r3, #7
    3782:	08db      	lsrs	r3, r3, #3
    3784:	00db      	lsls	r3, r3, #3
    3786:	ebad 0d03 	sub.w	sp, sp, r3
    378a:	466b      	mov	r3, sp
    378c:	3303      	adds	r3, #3
    378e:	089b      	lsrs	r3, r3, #2
    3790:	009b      	lsls	r3, r3, #2
    3792:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* get the LET of current servant */
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    3794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3796:	69db      	ldr	r3, [r3, #28]
    3798:	62bb      	str	r3, [r7, #40]	; 0x28
    /* set the LET of current servant */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    379a:	f640 33e0 	movw	r3, #3040	; 0xbe0
    379e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    37a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    37a8:	4618      	mov	r0, r3
    37aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    37ac:	f002 f920 	bl	59f0 <vTaskSetxLet>

    while(1)
    {
        vEventReceiveAll( pvMyParameter, pxEvent );
    37b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    37b2:	6d38      	ldr	r0, [r7, #80]	; 0x50
    37b4:	4619      	mov	r1, r3
    37b6:	f7ff fd53 	bl	3260 <vEventReceiveAll>

#ifdef SERVANT_PRINT
        vPrintNumber(xMyFlag);
    37ba:	6c78      	ldr	r0, [r7, #68]	; 0x44
    37bc:	f013 fd48 	bl	17250 <vPrintNumber>
#endif
        xCurrentTime = xTaskGetTickCountFromISR();
    37c0:	f001 fc80 	bl	50c4 <xTaskGetTickCountFromISR>
    37c4:	6278      	str	r0, [r7, #36]	; 0x24
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    37c6:	f640 33e0 	movw	r3, #3040	; 0xbe0
    37ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    37d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    37d4:	4618      	mov	r0, r3
    37d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
    37d8:	f002 f8fc 	bl	59d4 <vTaskSetxStartTime>

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    37dc:	2300      	movs	r3, #0
    37de:	657b      	str	r3, [r7, #84]	; 0x54
    37e0:	e02f      	b.n	3842 <vServant+0x166>
        {
            xDatas[i] = xEventGetxData(pxEvent[i]);
    37e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    37e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    37e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    37ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    37ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    37ee:	0112      	lsls	r2, r2, #4
    37f0:	188c      	adds	r4, r1, r2
    37f2:	f107 0208 	add.w	r2, r7, #8
    37f6:	4610      	mov	r0, r2
    37f8:	4619      	mov	r1, r3
    37fa:	f7ff f96f 	bl	2adc <xEventGetxData>
    37fe:	f107 0308 	add.w	r3, r7, #8
    3802:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3804:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            xDatas[i].xTime = xFutureModelTime + xLet;
    3808:	f240 5348 	movw	r3, #1352	; 0x548
    380c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3810:	681b      	ldr	r3, [r3, #0]
    3812:	461a      	mov	r2, r3
    3814:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3816:	441a      	add	r2, r3
    3818:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    381a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    381c:	011b      	lsls	r3, r3, #4
    381e:	440b      	add	r3, r1
    3820:	3304      	adds	r3, #4
    3822:	601a      	str	r2, [r3, #0]
            xFutureModelTime = xDatas[i].xTime;
    3824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3828:	011b      	lsls	r3, r3, #4
    382a:	4413      	add	r3, r2
    382c:	3304      	adds	r3, #4
    382e:	681b      	ldr	r3, [r3, #0]
    3830:	461a      	mov	r2, r3
    3832:	f240 5348 	movw	r3, #1352	; 0x548
    3836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    383a:	601a      	str	r2, [r3, #0]
#endif
        xCurrentTime = xTaskGetTickCountFromISR();
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    383c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    383e:	3301      	adds	r3, #1
    3840:	657b      	str	r3, [r7, #84]	; 0x54
    3842:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3846:	429a      	cmp	r2, r3
    3848:	dbcb      	blt.n	37e2 <vServant+0x106>
            xDatas[i].xTime = xFutureModelTime + xLet;
            xFutureModelTime = xDatas[i].xTime;
        }

#ifdef SERVANT_PRINT
        vPrintNumber( xDatas[0].xNextPeriod - xPeriod ); // ready time of task
    384a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    384c:	681a      	ldr	r2, [r3, #0]
    384e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3850:	1ad3      	subs	r3, r2, r3
    3852:	4618      	mov	r0, r3
    3854:	f013 fcfc 	bl	17250 <vPrintNumber>
        vPrintNumber( xCurrentTime );   // start time of current servant
    3858:	6a78      	ldr	r0, [r7, #36]	; 0x24
    385a:	f013 fcf9 	bl	17250 <vPrintNumber>
        {
            xMyFun(pxEvent, xNumOfIn, xDatas, xNumOfOut);
        }
#endif

        vEventDeleteAll( pvMyParameter, pxEvent );        
    385e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3860:	6d38      	ldr	r0, [r7, #80]	; 0x50
    3862:	4619      	mov	r1, r3
    3864:	f7ff fd78 	bl	3358 <vEventDeleteAll>

        vEventCreateAll( pvMyParameter, xDatas );
    3868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    386a:	6d38      	ldr	r0, [r7, #80]	; 0x50
    386c:	4619      	mov	r1, r3
    386e:	f7ff fd91 	bl	3394 <vEventCreateAll>

        if( xCurrentTime > xDatas[0].xNextPeriod )
    3872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3874:	681a      	ldr	r2, [r3, #0]
    3876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3878:	429a      	cmp	r2, r3
    387a:	d20a      	bcs.n	3892 <vServant+0x1b6>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    387c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    387e:	681b      	ldr	r3, [r3, #0]
    3880:	4618      	mov	r0, r3
    3882:	f013 fce5 	bl	17250 <vPrintNumber>
            vPrintString("there are servants missing deadline\n\r");
    3886:	f648 0004 	movw	r0, #34820	; 0x8804
    388a:	f2c0 0001 	movt	r0, #1
    388e:	f013 fcc5 	bl	1721c <vPrintString>
#ifdef SERVANT_LET
        vTaskDelayLET();
#endif

#ifdef SERVANT_PRINT
        xCurrentTime = xTaskGetTickCount();
    3892:	f001 fc05 	bl	50a0 <xTaskGetTickCount>
    3896:	6278      	str	r0, [r7, #36]	; 0x24
        vPrintNumber( xCurrentTime );   // finish time of current servant
    3898:	6a78      	ldr	r0, [r7, #36]	; 0x24
    389a:	f013 fcd9 	bl	17250 <vPrintNumber>
        vPrintNumber( xDatas[0].xNextPeriod ); // deadline of task
    389e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38a0:	681b      	ldr	r3, [r3, #0]
    38a2:	4618      	mov	r0, r3
    38a4:	f013 fcd4 	bl	17250 <vPrintNumber>
        vPrintNumber( (xMyFlag + 10) * 3 );
    38a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    38aa:	f103 020a 	add.w	r2, r3, #10
    38ae:	4613      	mov	r3, r2
    38b0:	005b      	lsls	r3, r3, #1
    38b2:	4413      	add	r3, r2
    38b4:	4618      	mov	r0, r3
    38b6:	f013 fccb 	bl	17250 <vPrintNumber>
#endif

        xCurrentTime = xTaskGetTickCount();
    38ba:	f001 fbf1 	bl	50a0 <xTaskGetTickCount>
    38be:	6278      	str	r0, [r7, #36]	; 0x24
        if( xCurrentTime > 1000000 )
    38c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    38c2:	f244 2340 	movw	r3, #16960	; 0x4240
    38c6:	f2c0 030f 	movt	r3, #15
    38ca:	429a      	cmp	r2, r3
    38cc:	d900      	bls.n	38d0 <vServant+0x1f4>
        {
            break;
    38ce:	e00c      	b.n	38ea <vServant+0x20e>
        }

        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    38d0:	f640 3354 	movw	r3, #2900	; 0xb54
    38d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    38dc:	4618      	mov	r0, r3
    38de:	2100      	movs	r1, #0
    38e0:	2200      	movs	r2, #0
    38e2:	2300      	movs	r3, #0
    38e4:	f000 fc62 	bl	41ac <xQueueGenericSend>
    }
    38e8:	e762      	b.n	37b0 <vServant+0xd4>
    38ea:	687b      	ldr	r3, [r7, #4]
    38ec:	469d      	mov	sp, r3
}
    38ee:	375c      	adds	r7, #92	; 0x5c
    38f0:	46bd      	mov	sp, r7
    38f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    38f6:	bf00      	nop

000038f8 <vR_Servant>:

void vR_Servant( void * pvParameter)
{
    38f8:	b580      	push	{r7, lr}
    38fa:	b090      	sub	sp, #64	; 0x40
    38fc:	af00      	add	r7, sp, #0
    38fe:	6078      	str	r0, [r7, #4]
    portBASE_TYPE xSource, xDest;
    portBASE_TYPE HAVE_TO_SEND_SEMAPHORE; // could the semaphore be sent? 1 means yes , 0 means no
    portBASE_TYPE xResult;

    portTickType xCurrentTime;
    void * pvMyParameter = pvParameter;
    3900:	687b      	ldr	r3, [r7, #4]
    3902:	62bb      	str	r3, [r7, #40]	; 0x28

    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    3904:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3906:	681b      	ldr	r3, [r3, #0]
    3908:	627b      	str	r3, [r7, #36]	; 0x24
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    390a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    390c:	69db      	ldr	r3, [r3, #28]
    390e:	623b      	str	r3, [r7, #32]
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    3910:	f640 33e0 	movw	r3, #3040	; 0xbe0
    3914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    391a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    391e:	4618      	mov	r0, r3
    3920:	6a39      	ldr	r1, [r7, #32]
    3922:	f002 f865 	bl	59f0 <vTaskSetxLet>
    xTaskHandle destinationTCB, sourceTCB;

    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[xMyFlag], portMAX_DELAY );
    3926:	f640 3354 	movw	r3, #2900	; 0xb54
    392a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    392e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3934:	4618      	mov	r0, r3
    3936:	2100      	movs	r1, #0
    3938:	f04f 32ff 	mov.w	r2, #4294967295
    393c:	2300      	movs	r3, #0
    393e:	f000 fcfb 	bl	4338 <xQueueGenericReceive>
#ifdef RSERVANT_PRINT
        vPrintNumber( xMyFlag );
#endif
        
        xCurrentTime = xTaskGetTickCount();
    3942:	f001 fbad 	bl	50a0 <xTaskGetTickCount>
    3946:	61f8      	str	r0, [r7, #28]
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3948:	f640 33e0 	movw	r3, #3040	; 0xbe0
    394c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3956:	4618      	mov	r0, r3
    3958:	69f9      	ldr	r1, [r7, #28]
    395a:	f002 f83b 	bl	59d4 <vTaskSetxStartTime>
#ifdef RSERVANT_PRINT
        vPrintNumber( xCurrentTime );
#endif

        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;
    395e:	2300      	movs	r3, #0
    3960:	637b      	str	r3, [r7, #52]	; 0x34

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    3962:	e094      	b.n	3a8e <vR_Servant+0x196>
            /*
             * transit the event item, whose timestamp bigger or equal to current Tick Count, 
             * from xEventList to the idlest xEvestReadyList
             *
             * */
            xResult = xEventListTransit( &pxEventListItem, &pxCurrentReadyList);
    3964:	f107 030c 	add.w	r3, r7, #12
    3968:	4618      	mov	r0, r3
    396a:	f240 514c 	movw	r1, #1356	; 0x54c
    396e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    3972:	f7ff fa25 	bl	2dc0 <xEventListGenericTransit>
    3976:	6338      	str	r0, [r7, #48]	; 0x30
            if( xResult == -1 )
    3978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    397a:	f1b3 3fff 	cmp.w	r3, #4294967295
    397e:	d100      	bne.n	3982 <vR_Servant+0x8a>
            {
                // no event
                break;
    3980:	e089      	b.n	3a96 <vR_Servant+0x19e>
            }
            else if( xResult == 0 )
    3982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3984:	2b00      	cmp	r3, #0
    3986:	d100      	bne.n	398a <vR_Servant+0x92>
            {
                // not time yet
                //break;
                continue;
    3988:	e081      	b.n	3a8e <vR_Servant+0x196>
            else
            {
                // transmit success
            }

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
    398a:	68fb      	ldr	r3, [r7, #12]
    398c:	68db      	ldr	r3, [r3, #12]
    398e:	4618      	mov	r0, r3
    3990:	f7ff f886 	bl	2aa0 <xEventGetpxDestination>
    3994:	62f8      	str	r0, [r7, #44]	; 0x2c
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
    3996:	68fb      	ldr	r3, [r7, #12]
    3998:	68db      	ldr	r3, [r3, #12]
    399a:	4618      	mov	r0, r3
    399c:	f7ff f874 	bl	2a88 <xEventGetpxSource>
    39a0:	61b8      	str	r0, [r7, #24]
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1
    39a2:	2301      	movs	r3, #1
    39a4:	637b      	str	r3, [r7, #52]	; 0x34

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    39a6:	2300      	movs	r3, #0
    39a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    39aa:	e068      	b.n	3a7e <vR_Servant+0x186>
            {
                xSource = xRelations.xRelation[i].xInFlag;
    39ac:	f240 12ac 	movw	r2, #428	; 0x1ac
    39b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    39b6:	460b      	mov	r3, r1
    39b8:	005b      	lsls	r3, r3, #1
    39ba:	440b      	add	r3, r1
    39bc:	009b      	lsls	r3, r3, #2
    39be:	4413      	add	r3, r2
    39c0:	3304      	adds	r3, #4
    39c2:	681b      	ldr	r3, [r3, #0]
    39c4:	617b      	str	r3, [r7, #20]
                xDest   = xRelations.xRelation[i].xOutFlag;
    39c6:	f240 12ac 	movw	r2, #428	; 0x1ac
    39ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    39d0:	460b      	mov	r3, r1
    39d2:	005b      	lsls	r3, r3, #1
    39d4:	440b      	add	r3, r1
    39d6:	009b      	lsls	r3, r3, #2
    39d8:	4413      	add	r3, r2
    39da:	3308      	adds	r3, #8
    39dc:	681b      	ldr	r3, [r3, #0]
    39de:	613b      	str	r3, [r7, #16]

                if( destinationTCB == xTaskOfHandle[xDest] )
    39e0:	f640 33e0 	movw	r3, #3040	; 0xbe0
    39e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39e8:	693a      	ldr	r2, [r7, #16]
    39ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    39ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    39f0:	429a      	cmp	r2, r3
    39f2:	d141      	bne.n	3a78 <vR_Servant+0x180>
                {
                    // find the right relation
                    if( sourceTCB == xTaskOfHandle[xSource] )
    39f4:	f640 33e0 	movw	r3, #3040	; 0xbe0
    39f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39fc:	697a      	ldr	r2, [r7, #20]
    39fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3a02:	69bb      	ldr	r3, [r7, #24]
    3a04:	429a      	cmp	r2, r3
    3a06:	d127      	bne.n	3a58 <vR_Servant+0x160>
                    {
                        if( xRelations.xRelation[i].xFlag == 2 )
    3a08:	f240 12ac 	movw	r2, #428	; 0x1ac
    3a0c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3a12:	460b      	mov	r3, r1
    3a14:	005b      	lsls	r3, r3, #1
    3a16:	440b      	add	r3, r1
    3a18:	009b      	lsls	r3, r3, #2
    3a1a:	4413      	add	r3, r2
    3a1c:	330c      	adds	r3, #12
    3a1e:	681b      	ldr	r3, [r3, #0]
    3a20:	2b02      	cmp	r3, #2
    3a22:	d10b      	bne.n	3a3c <vR_Servant+0x144>
                        {
                            vPrintString("Error: This event has arrived!!\n\r") ;
    3a24:	f648 002c 	movw	r0, #34860	; 0x882c
    3a28:	f2c0 0001 	movt	r0, #1
    3a2c:	f013 fbf6 	bl	1721c <vPrintString>
                            vEventDelete( (xEventHandle) pxEventListItem->pvOwner );
    3a30:	68fb      	ldr	r3, [r7, #12]
    3a32:	68db      	ldr	r3, [r3, #12]
    3a34:	4618      	mov	r0, r3
    3a36:	f7ff fa95 	bl	2f64 <vEventGenericDelete>
    3a3a:	e01d      	b.n	3a78 <vR_Servant+0x180>
                        }
                        else
                        {
                            // set the relation to 2
                            xRelations.xRelation[i].xFlag = 2;
    3a3c:	f240 12ac 	movw	r2, #428	; 0x1ac
    3a40:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3a46:	460b      	mov	r3, r1
    3a48:	005b      	lsls	r3, r3, #1
    3a4a:	440b      	add	r3, r1
    3a4c:	009b      	lsls	r3, r3, #2
    3a4e:	4413      	add	r3, r2
    3a50:	330c      	adds	r3, #12
    3a52:	2202      	movs	r2, #2
    3a54:	601a      	str	r2, [r3, #0]
    3a56:	e00f      	b.n	3a78 <vR_Servant+0x180>
                    }
                    // find other relation which is relative to destinationtcb
                    else
                    {
                        // waiting for an events that is not arriving yet
                        if( xRelations.xRelation[i].xFlag == 1 )
    3a58:	f240 12ac 	movw	r2, #428	; 0x1ac
    3a5c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3a62:	460b      	mov	r3, r1
    3a64:	005b      	lsls	r3, r3, #1
    3a66:	440b      	add	r3, r1
    3a68:	009b      	lsls	r3, r3, #2
    3a6a:	4413      	add	r3, r2
    3a6c:	330c      	adds	r3, #12
    3a6e:	681b      	ldr	r3, [r3, #0]
    3a70:	2b01      	cmp	r3, #1
    3a72:	d101      	bne.n	3a78 <vR_Servant+0x180>
                        {
                            HAVE_TO_SEND_SEMAPHORE = 0;
    3a74:	2300      	movs	r3, #0
    3a76:	637b      	str	r3, [r7, #52]	; 0x34

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3a7a:	3301      	adds	r3, #1
    3a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    3a7e:	f240 13ac 	movw	r3, #428	; 0x1ac
    3a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a86:	681a      	ldr	r2, [r3, #0]
    3a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3a8a:	429a      	cmp	r2, r3
    3a8c:	dc8e      	bgt.n	39ac <vR_Servant+0xb4>
        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    3a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a90:	2b00      	cmp	r3, #0
    3a92:	f43f af67 	beq.w	3964 <vR_Servant+0x6c>
                }
            }
        } //  end inner while(1)

        // not time yet, R-Servant should be sleep until next period of any task
        if( xResult == -1 )
    3a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3a98:	f1b3 3fff 	cmp.w	r3, #4294967295
    3a9c:	d100      	bne.n	3aa0 <vR_Servant+0x1a8>
#ifdef RSERVANT_PRINT
            xCurrentTime = xTaskGetTickCount();
            vPrintNumber( xCurrentTime );
            vPrintNumber( (xMyFlag + 10) * 3 );
#endif
            continue; 
    3a9e:	e045      	b.n	3b2c <vR_Servant+0x234>
        }
        else if ( xResult == 0 )
    3aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3aa2:	2b00      	cmp	r3, #0
    3aa4:	d100      	bne.n	3aa8 <vR_Servant+0x1b0>
#ifdef RSERVANT_PRINT
            xCurrentTime = xTaskGetTickCount();
            vPrintNumber( xCurrentTime );
            vPrintNumber( (xMyFlag + 10) * 3 );
#endif
            continue;
    3aa6:	e041      	b.n	3b2c <vR_Servant+0x234>
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3aa8:	2300      	movs	r3, #0
    3aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
    3aac:	e028      	b.n	3b00 <vR_Servant+0x208>
            {
                xDest = xRelations.xRelation[i].xOutFlag;
    3aae:	f240 12ac 	movw	r2, #428	; 0x1ac
    3ab2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ab6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3ab8:	460b      	mov	r3, r1
    3aba:	005b      	lsls	r3, r3, #1
    3abc:	440b      	add	r3, r1
    3abe:	009b      	lsls	r3, r3, #2
    3ac0:	4413      	add	r3, r2
    3ac2:	3308      	adds	r3, #8
    3ac4:	681b      	ldr	r3, [r3, #0]
    3ac6:	613b      	str	r3, [r7, #16]
                if( destinationTCB == xTaskOfHandle[xDest] )
    3ac8:	f640 33e0 	movw	r3, #3040	; 0xbe0
    3acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ad0:	693a      	ldr	r2, [r7, #16]
    3ad2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3ad8:	429a      	cmp	r2, r3
    3ada:	d10e      	bne.n	3afa <vR_Servant+0x202>
                {
                    xRelations.xRelation[i].xFlag = 1;
    3adc:	f240 12ac 	movw	r2, #428	; 0x1ac
    3ae0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ae4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3ae6:	460b      	mov	r3, r1
    3ae8:	005b      	lsls	r3, r3, #1
    3aea:	440b      	add	r3, r1
    3aec:	009b      	lsls	r3, r3, #2
    3aee:	4413      	add	r3, r2
    3af0:	330c      	adds	r3, #12
    3af2:	2201      	movs	r2, #1
    3af4:	601a      	str	r2, [r3, #0]
                    // record the number of destinationtcb in xTaskOfHandle array.
                    j = xDest;
    3af6:	693b      	ldr	r3, [r7, #16]
    3af8:	63bb      	str	r3, [r7, #56]	; 0x38
            continue;
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3afc:	3301      	adds	r3, #1
    3afe:	63fb      	str	r3, [r7, #60]	; 0x3c
    3b00:	f240 13ac 	movw	r3, #428	; 0x1ac
    3b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b08:	681a      	ldr	r2, [r3, #0]
    3b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3b0c:	429a      	cmp	r2, r3
    3b0e:	dcce      	bgt.n	3aae <vR_Servant+0x1b6>
            xCurrentTime = xTaskGetTickCount();
            vPrintNumber( xCurrentTime );
            vPrintNumber( (xMyFlag + 10) * 3 );
#endif
            // send semaphore to destinationtcb
            xSemaphoreGive( xBinarySemaphore[j] );
    3b10:	f640 3354 	movw	r3, #2900	; 0xb54
    3b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b18:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3b1e:	4618      	mov	r0, r3
    3b20:	2100      	movs	r1, #0
    3b22:	2200      	movs	r2, #0
    3b24:	2300      	movs	r3, #0
    3b26:	f000 fb41 	bl	41ac <xQueueGenericSend>
        }
    }
    3b2a:	e6fc      	b.n	3926 <vR_Servant+0x2e>
    3b2c:	e6fb      	b.n	3926 <vR_Servant+0x2e>
    3b2e:	bf00      	nop

00003b30 <s_0>:
#define SUNNYBEIKE 1
#ifdef SUNNYBEIKE

/*task0, servant 0, 1, 2*/
void s_0(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b30:	b480      	push	{r7}
    3b32:	b085      	sub	sp, #20
    3b34:	af00      	add	r7, sp, #0
    3b36:	60f8      	str	r0, [r7, #12]
    3b38:	60b9      	str	r1, [r7, #8]
    3b3a:	607a      	str	r2, [r7, #4]
    3b3c:	603b      	str	r3, [r7, #0]
    // do actuator
    // do sensor
}
    3b3e:	3714      	adds	r7, #20
    3b40:	46bd      	mov	sp, r7
    3b42:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b46:	4770      	bx	lr

00003b48 <s_1>:
void s_1(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b48:	b580      	push	{r7, lr}
    3b4a:	b084      	sub	sp, #16
    3b4c:	af00      	add	r7, sp, #0
    3b4e:	60f8      	str	r0, [r7, #12]
    3b50:	60b9      	str	r1, [r7, #8]
    3b52:	607a      	str	r2, [r7, #4]
    3b54:	603b      	str	r3, [r7, #0]
    last_radio_from_ppm(); // ppm.h
    3b56:	f012 f99f 	bl	15e98 <last_radio_from_ppm>
}
    3b5a:	3710      	adds	r7, #16
    3b5c:	46bd      	mov	sp, r7
    3b5e:	bd80      	pop	{r7, pc}

00003b60 <s_2>:
void s_2(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b60:	b480      	push	{r7}
    3b62:	b085      	sub	sp, #20
    3b64:	af00      	add	r7, sp, #0
    3b66:	60f8      	str	r0, [r7, #12]
    3b68:	60b9      	str	r1, [r7, #8]
    3b6a:	607a      	str	r2, [r7, #4]
    3b6c:	603b      	str	r3, [r7, #0]
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    3b6e:	3714      	adds	r7, #20
    3b70:	46bd      	mov	sp, r7
    3b72:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b76:	4770      	bx	lr

00003b78 <s_3>:

/*task1, servant 3, 4, 5*/

void s_3(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b78:	b480      	push	{r7}
    3b7a:	b085      	sub	sp, #20
    3b7c:	af00      	add	r7, sp, #0
    3b7e:	60f8      	str	r0, [r7, #12]
    3b80:	60b9      	str	r1, [r7, #8]
    3b82:	607a      	str	r2, [r7, #4]
    3b84:	603b      	str	r3, [r7, #0]
}
    3b86:	3714      	adds	r7, #20
    3b88:	46bd      	mov	sp, r7
    3b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b8e:	4770      	bx	lr

00003b90 <s_4>:
void s_4(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b90:	b580      	push	{r7, lr}
    3b92:	b084      	sub	sp, #16
    3b94:	af00      	add	r7, sp, #0
    3b96:	60f8      	str	r0, [r7, #12]
    3b98:	60b9      	str	r1, [r7, #8]
    3b9a:	607a      	str	r2, [r7, #4]
    3b9c:	603b      	str	r3, [r7, #0]
    to_autopilot_from_last_radio(); // main.c
    3b9e:	f012 fd35 	bl	1660c <to_autopilot_from_last_radio>
}
    3ba2:	3710      	adds	r7, #16
    3ba4:	46bd      	mov	sp, r7
    3ba6:	bd80      	pop	{r7, pc}

00003ba8 <s_5>:
void s_5(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ba8:	b580      	push	{r7, lr}
    3baa:	b084      	sub	sp, #16
    3bac:	af00      	add	r7, sp, #0
    3bae:	60f8      	str	r0, [r7, #12]
    3bb0:	60b9      	str	r1, [r7, #8]
    3bb2:	607a      	str	r2, [r7, #4]
    3bb4:	603b      	str	r3, [r7, #0]
    spi_reset(); // spi_fbw.h
    3bb6:	f012 fc67 	bl	16488 <spi_reset>
}
    3bba:	3710      	adds	r7, #16
    3bbc:	46bd      	mov	sp, r7
    3bbe:	bd80      	pop	{r7, pc}

00003bc0 <s_6>:

/*task 2, servant 6, 7*/
void s_6(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3bc0:	b480      	push	{r7}
    3bc2:	b085      	sub	sp, #20
    3bc4:	af00      	add	r7, sp, #0
    3bc6:	60f8      	str	r0, [r7, #12]
    3bc8:	60b9      	str	r1, [r7, #8]
    3bca:	607a      	str	r2, [r7, #4]
    3bcc:	603b      	str	r3, [r7, #0]
}
    3bce:	3714      	adds	r7, #20
    3bd0:	46bd      	mov	sp, r7
    3bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bd6:	4770      	bx	lr

00003bd8 <s_7>:
void s_7(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3bd8:	b580      	push	{r7, lr}
    3bda:	b084      	sub	sp, #16
    3bdc:	af00      	add	r7, sp, #0
    3bde:	60f8      	str	r0, [r7, #12]
    3be0:	60b9      	str	r1, [r7, #8]
    3be2:	607a      	str	r2, [r7, #4]
    3be4:	603b      	str	r3, [r7, #0]
    check_mega128_values_task(); // main.c
    3be6:	f012 fe59 	bl	1689c <check_mega128_values_task>
}
    3bea:	3710      	adds	r7, #16
    3bec:	46bd      	mov	sp, r7
    3bee:	bd80      	pop	{r7, pc}

00003bf0 <s_8>:

/*task 3, servant 8, 9*/ 
void s_8(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3bf0:	b480      	push	{r7}
    3bf2:	b085      	sub	sp, #20
    3bf4:	af00      	add	r7, sp, #0
    3bf6:	60f8      	str	r0, [r7, #12]
    3bf8:	60b9      	str	r1, [r7, #8]
    3bfa:	607a      	str	r2, [r7, #4]
    3bfc:	603b      	str	r3, [r7, #0]
}
    3bfe:	3714      	adds	r7, #20
    3c00:	46bd      	mov	sp, r7
    3c02:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c06:	4770      	bx	lr

00003c08 <s_9>:
void s_9(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c08:	b580      	push	{r7, lr}
    3c0a:	b084      	sub	sp, #16
    3c0c:	af00      	add	r7, sp, #0
    3c0e:	60f8      	str	r0, [r7, #12]
    3c10:	60b9      	str	r1, [r7, #8]
    3c12:	607a      	str	r2, [r7, #4]
    3c14:	603b      	str	r3, [r7, #0]
    servo_transmit(); //servo.h
    3c16:	f012 ff19 	bl	16a4c <servo_transmit>
}
    3c1a:	3710      	adds	r7, #16
    3c1c:	46bd      	mov	sp, r7
    3c1e:	bd80      	pop	{r7, pc}

00003c20 <s_10>:

/*task 4, servant 10, 11*/
void s_10(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c20:	b480      	push	{r7}
    3c22:	b085      	sub	sp, #20
    3c24:	af00      	add	r7, sp, #0
    3c26:	60f8      	str	r0, [r7, #12]
    3c28:	60b9      	str	r1, [r7, #8]
    3c2a:	607a      	str	r2, [r7, #4]
    3c2c:	603b      	str	r3, [r7, #0]
}
    3c2e:	3714      	adds	r7, #20
    3c30:	46bd      	mov	sp, r7
    3c32:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c36:	4770      	bx	lr

00003c38 <s_11>:
void s_11(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c38:	b580      	push	{r7, lr}
    3c3a:	b084      	sub	sp, #16
    3c3c:	af00      	add	r7, sp, #0
    3c3e:	60f8      	str	r0, [r7, #12]
    3c40:	60b9      	str	r1, [r7, #8]
    3c42:	607a      	str	r2, [r7, #4]
    3c44:	603b      	str	r3, [r7, #0]
    check_failsafe_task(); // main.c
    3c46:	f012 fe1f 	bl	16888 <check_failsafe_task>
}
    3c4a:	3710      	adds	r7, #16
    3c4c:	46bd      	mov	sp, r7
    3c4e:	bd80      	pop	{r7, pc}

00003c50 <s_12>:

/*task 5, servant 12, 13, 14*/
void s_12(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c50:	b480      	push	{r7}
    3c52:	b085      	sub	sp, #20
    3c54:	af00      	add	r7, sp, #0
    3c56:	60f8      	str	r0, [r7, #12]
    3c58:	60b9      	str	r1, [r7, #8]
    3c5a:	607a      	str	r2, [r7, #4]
    3c5c:	603b      	str	r3, [r7, #0]
}
    3c5e:	3714      	adds	r7, #20
    3c60:	46bd      	mov	sp, r7
    3c62:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c66:	4770      	bx	lr

00003c68 <s_13>:
void s_13(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c68:	b580      	push	{r7, lr}
    3c6a:	b084      	sub	sp, #16
    3c6c:	af00      	add	r7, sp, #0
    3c6e:	60f8      	str	r0, [r7, #12]
    3c70:	60b9      	str	r1, [r7, #8]
    3c72:	607a      	str	r2, [r7, #4]
    3c74:	603b      	str	r3, [r7, #0]
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    3c76:	f009 f8a1 	bl	cdbc <radio_control_task>
}
    3c7a:	3710      	adds	r7, #16
    3c7c:	46bd      	mov	sp, r7
    3c7e:	bd80      	pop	{r7, pc}

00003c80 <s_14>:
void s_14(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c80:	b580      	push	{r7, lr}
    3c82:	b084      	sub	sp, #16
    3c84:	af00      	add	r7, sp, #0
    3c86:	60f8      	str	r0, [r7, #12]
    3c88:	60b9      	str	r1, [r7, #8]
    3c8a:	607a      	str	r2, [r7, #4]
    3c8c:	603b      	str	r3, [r7, #0]
    ir_gain_calib(); //infrared.h
    3c8e:	f00d ff47 	bl	11b20 <ir_gain_calib>
}
    3c92:	3710      	adds	r7, #16
    3c94:	46bd      	mov	sp, r7
    3c96:	bd80      	pop	{r7, pc}

00003c98 <s_15>:

/*task 6, servant 15,16,17,18*/ 
void s_15(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3c98:	b480      	push	{r7}
    3c9a:	b085      	sub	sp, #20
    3c9c:	af00      	add	r7, sp, #0
    3c9e:	60f8      	str	r0, [r7, #12]
    3ca0:	60b9      	str	r1, [r7, #8]
    3ca2:	607a      	str	r2, [r7, #4]
    3ca4:	603b      	str	r3, [r7, #0]
}
    3ca6:	3714      	adds	r7, #20
    3ca8:	46bd      	mov	sp, r7
    3caa:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cae:	4770      	bx	lr

00003cb0 <s_16>:
void s_16(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3cb0:	b580      	push	{r7, lr}
    3cb2:	b084      	sub	sp, #16
    3cb4:	af00      	add	r7, sp, #0
    3cb6:	60f8      	str	r0, [r7, #12]
    3cb8:	60b9      	str	r1, [r7, #8]
    3cba:	607a      	str	r2, [r7, #4]
    3cbc:	603b      	str	r3, [r7, #0]
    ir_update(); // infrared.h
    3cbe:	f00d fef1 	bl	11aa4 <ir_update>
}
    3cc2:	3710      	adds	r7, #16
    3cc4:	46bd      	mov	sp, r7
    3cc6:	bd80      	pop	{r7, pc}

00003cc8 <s_17>:
void s_17(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3cc8:	b580      	push	{r7, lr}
    3cca:	b084      	sub	sp, #16
    3ccc:	af00      	add	r7, sp, #0
    3cce:	60f8      	str	r0, [r7, #12]
    3cd0:	60b9      	str	r1, [r7, #8]
    3cd2:	607a      	str	r2, [r7, #4]
    3cd4:	603b      	str	r3, [r7, #0]
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3cd6:	f011 f96d 	bl	14fb4 <estimator_update_state_infrared>
}
    3cda:	3710      	adds	r7, #16
    3cdc:	46bd      	mov	sp, r7
    3cde:	bd80      	pop	{r7, pc}

00003ce0 <s_18>:
void s_18(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ce0:	b580      	push	{r7, lr}
    3ce2:	b084      	sub	sp, #16
    3ce4:	af00      	add	r7, sp, #0
    3ce6:	60f8      	str	r0, [r7, #12]
    3ce8:	60b9      	str	r1, [r7, #8]
    3cea:	607a      	str	r2, [r7, #4]
    3cec:	603b      	str	r3, [r7, #0]
    roll_pitch_pid_run(); // pid.h
    3cee:	f00d ff47 	bl	11b80 <roll_pitch_pid_run>
}
    3cf2:	3710      	adds	r7, #16
    3cf4:	46bd      	mov	sp, r7
    3cf6:	bd80      	pop	{r7, pc}

00003cf8 <s_19>:

/*task 7, servant 19, 20*/
void s_19(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3cf8:	b480      	push	{r7}
    3cfa:	b085      	sub	sp, #20
    3cfc:	af00      	add	r7, sp, #0
    3cfe:	60f8      	str	r0, [r7, #12]
    3d00:	60b9      	str	r1, [r7, #8]
    3d02:	607a      	str	r2, [r7, #4]
    3d04:	603b      	str	r3, [r7, #0]
}
    3d06:	3714      	adds	r7, #20
    3d08:	46bd      	mov	sp, r7
    3d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d0e:	4770      	bx	lr

00003d10 <s_20>:
void s_20(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d10:	b580      	push	{r7, lr}
    3d12:	b084      	sub	sp, #16
    3d14:	af00      	add	r7, sp, #0
    3d16:	60f8      	str	r0, [r7, #12]
    3d18:	60b9      	str	r1, [r7, #8]
    3d1a:	607a      	str	r2, [r7, #4]
    3d1c:	603b      	str	r3, [r7, #0]
    link_fbw_send(); //link_fbw.h
    3d1e:	f00d f933 	bl	10f88 <link_fbw_send>
}
    3d22:	3710      	adds	r7, #16
    3d24:	46bd      	mov	sp, r7
    3d26:	bd80      	pop	{r7, pc}

00003d28 <s_21>:

/*task 8, sevrvant 21,22,23*/
void s_21(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d28:	b480      	push	{r7}
    3d2a:	b085      	sub	sp, #20
    3d2c:	af00      	add	r7, sp, #0
    3d2e:	60f8      	str	r0, [r7, #12]
    3d30:	60b9      	str	r1, [r7, #8]
    3d32:	607a      	str	r2, [r7, #4]
    3d34:	603b      	str	r3, [r7, #0]
}
    3d36:	3714      	adds	r7, #20
    3d38:	46bd      	mov	sp, r7
    3d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d3e:	4770      	bx	lr

00003d40 <s_22>:
void s_22(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d40:	b580      	push	{r7, lr}
    3d42:	b084      	sub	sp, #16
    3d44:	af00      	add	r7, sp, #0
    3d46:	60f8      	str	r0, [r7, #12]
    3d48:	60b9      	str	r1, [r7, #8]
    3d4a:	607a      	str	r2, [r7, #4]
    3d4c:	603b      	str	r3, [r7, #0]
    parse_gps_msg(); //gps.h
    3d4e:	f00d fbf3 	bl	11538 <parse_gps_msg>
}
    3d52:	3710      	adds	r7, #16
    3d54:	46bd      	mov	sp, r7
    3d56:	bd80      	pop	{r7, pc}

00003d58 <s_23>:
void s_23(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d58:	b580      	push	{r7, lr}
    3d5a:	b084      	sub	sp, #16
    3d5c:	af00      	add	r7, sp, #0
    3d5e:	60f8      	str	r0, [r7, #12]
    3d60:	60b9      	str	r1, [r7, #8]
    3d62:	607a      	str	r2, [r7, #4]
    3d64:	603b      	str	r3, [r7, #0]
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    3d66:	f00a fe0f 	bl	e988 <send_gps_pos>
    send_radIR();
    3d6a:	f00b ffd3 	bl	fd14 <send_radIR>
    send_takeOff();
    3d6e:	f00c fdcb 	bl	10908 <send_takeOff>
}
    3d72:	3710      	adds	r7, #16
    3d74:	46bd      	mov	sp, r7
    3d76:	bd80      	pop	{r7, pc}

00003d78 <s_24>:

/*task 9, servant 24, 25, 26, 27*/
void s_24(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d78:	b480      	push	{r7}
    3d7a:	b085      	sub	sp, #20
    3d7c:	af00      	add	r7, sp, #0
    3d7e:	60f8      	str	r0, [r7, #12]
    3d80:	60b9      	str	r1, [r7, #8]
    3d82:	607a      	str	r2, [r7, #4]
    3d84:	603b      	str	r3, [r7, #0]
}
    3d86:	3714      	adds	r7, #20
    3d88:	46bd      	mov	sp, r7
    3d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d8e:	4770      	bx	lr

00003d90 <s_25>:
void s_25(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d90:	b580      	push	{r7, lr}
    3d92:	b084      	sub	sp, #16
    3d94:	af00      	add	r7, sp, #0
    3d96:	60f8      	str	r0, [r7, #12]
    3d98:	60b9      	str	r1, [r7, #8]
    3d9a:	607a      	str	r2, [r7, #4]
    3d9c:	603b      	str	r3, [r7, #0]
    nav_home(); // nav.h
    3d9e:	f010 fe8b 	bl	14ab8 <nav_home>
}
    3da2:	3710      	adds	r7, #16
    3da4:	46bd      	mov	sp, r7
    3da6:	bd80      	pop	{r7, pc}

00003da8 <s_26>:
void s_26(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3da8:	b580      	push	{r7, lr}
    3daa:	b084      	sub	sp, #16
    3dac:	af00      	add	r7, sp, #0
    3dae:	60f8      	str	r0, [r7, #12]
    3db0:	60b9      	str	r1, [r7, #8]
    3db2:	607a      	str	r2, [r7, #4]
    3db4:	603b      	str	r3, [r7, #0]
    nav_update(); // nav.h
    3db6:	f010 fea5 	bl	14b04 <nav_update>
}
    3dba:	3710      	adds	r7, #16
    3dbc:	46bd      	mov	sp, r7
    3dbe:	bd80      	pop	{r7, pc}

00003dc0 <s_27>:
void s_27(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3dc0:	b580      	push	{r7, lr}
    3dc2:	b084      	sub	sp, #16
    3dc4:	af00      	add	r7, sp, #0
    3dc6:	60f8      	str	r0, [r7, #12]
    3dc8:	60b9      	str	r1, [r7, #8]
    3dca:	607a      	str	r2, [r7, #4]
    3dcc:	603b      	str	r3, [r7, #0]
    course_pid_run(); // pid.h
    3dce:	f00d ffc3 	bl	11d58 <course_pid_run>
}
    3dd2:	3710      	adds	r7, #16
    3dd4:	46bd      	mov	sp, r7
    3dd6:	bd80      	pop	{r7, pc}

00003dd8 <s_28>:

/*task 10, servant 28, 29*/
void s_28(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3dd8:	b480      	push	{r7}
    3dda:	b085      	sub	sp, #20
    3ddc:	af00      	add	r7, sp, #0
    3dde:	60f8      	str	r0, [r7, #12]
    3de0:	60b9      	str	r1, [r7, #8]
    3de2:	607a      	str	r2, [r7, #4]
    3de4:	603b      	str	r3, [r7, #0]
}
    3de6:	3714      	adds	r7, #20
    3de8:	46bd      	mov	sp, r7
    3dea:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dee:	4770      	bx	lr

00003df0 <s_29>:
void s_29(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3df0:	b580      	push	{r7, lr}
    3df2:	b084      	sub	sp, #16
    3df4:	af00      	add	r7, sp, #0
    3df6:	60f8      	str	r0, [r7, #12]
    3df8:	60b9      	str	r1, [r7, #8]
    3dfa:	607a      	str	r2, [r7, #4]
    3dfc:	603b      	str	r3, [r7, #0]
    altitude_pid_run(); // pid.h
    3dfe:	f00e fa33 	bl	12268 <altitude_pid_run>
}
    3e02:	3710      	adds	r7, #16
    3e04:	46bd      	mov	sp, r7
    3e06:	bd80      	pop	{r7, pc}

00003e08 <s_30>:

/*task 11, servant 30, 31*/
void s_30(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3e08:	b480      	push	{r7}
    3e0a:	b085      	sub	sp, #20
    3e0c:	af00      	add	r7, sp, #0
    3e0e:	60f8      	str	r0, [r7, #12]
    3e10:	60b9      	str	r1, [r7, #8]
    3e12:	607a      	str	r2, [r7, #4]
    3e14:	603b      	str	r3, [r7, #0]
}
    3e16:	3714      	adds	r7, #20
    3e18:	46bd      	mov	sp, r7
    3e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e1e:	4770      	bx	lr

00003e20 <s_31>:
void s_31(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3e20:	b580      	push	{r7, lr}
    3e22:	b084      	sub	sp, #16
    3e24:	af00      	add	r7, sp, #0
    3e26:	60f8      	str	r0, [r7, #12]
    3e28:	60b9      	str	r1, [r7, #8]
    3e2a:	607a      	str	r2, [r7, #4]
    3e2c:	603b      	str	r3, [r7, #0]
    climb_pid_run(); // pid.h
    3e2e:	f00e f84b 	bl	11ec8 <climb_pid_run>
}
    3e32:	3710      	adds	r7, #16
    3e34:	46bd      	mov	sp, r7
    3e36:	bd80      	pop	{r7, pc}

00003e38 <s_32>:

/*task 12, servant 32, 33*/
void s_32(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3e38:	b480      	push	{r7}
    3e3a:	b085      	sub	sp, #20
    3e3c:	af00      	add	r7, sp, #0
    3e3e:	60f8      	str	r0, [r7, #12]
    3e40:	60b9      	str	r1, [r7, #8]
    3e42:	607a      	str	r2, [r7, #4]
    3e44:	603b      	str	r3, [r7, #0]
}
    3e46:	3714      	adds	r7, #20
    3e48:	46bd      	mov	sp, r7
    3e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e4e:	4770      	bx	lr

00003e50 <s_33>:
void s_33(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3e50:	b580      	push	{r7, lr}
    3e52:	b084      	sub	sp, #16
    3e54:	af00      	add	r7, sp, #0
    3e56:	60f8      	str	r0, [r7, #12]
    3e58:	60b9      	str	r1, [r7, #8]
    3e5a:	607a      	str	r2, [r7, #4]
    3e5c:	603b      	str	r3, [r7, #0]
    // main.c
    send_boot();
    3e5e:	f003 fa75 	bl	734c <send_boot>
    send_attitude();
    3e62:	f004 fa43 	bl	82ec <send_attitude>
    send_adc();
    3e66:	f004 ff35 	bl	8cd4 <send_adc>
    send_settings();
    3e6a:	f005 f9bb 	bl	91e4 <send_settings>
    send_desired();
    3e6e:	f005 fdbd 	bl	99ec <send_desired>
    send_bat();
    3e72:	f006 fceb 	bl	a84c <send_bat>
    send_climb();
    3e76:	f007 f89f 	bl	afb8 <send_climb>
    send_mode();
    3e7a:	f007 fe0f 	bl	ba9c <send_mode>
    send_debug();
    3e7e:	f008 f8e1 	bl	c044 <send_debug>
    send_nav_ref();
    3e82:	f008 fbb5 	bl	c5f0 <send_nav_ref>
}
    3e86:	3710      	adds	r7, #16
    3e88:	46bd      	mov	sp, r7
    3e8a:	bd80      	pop	{r7, pc}

00003e8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    3e8c:	b480      	push	{r7}
    3e8e:	b083      	sub	sp, #12
    3e90:	af00      	add	r7, sp, #0
    3e92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    3e94:	687b      	ldr	r3, [r7, #4]
    3e96:	f103 0208 	add.w	r2, r3, #8
    3e9a:	687b      	ldr	r3, [r7, #4]
    3e9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3e9e:	687b      	ldr	r3, [r7, #4]
    3ea0:	f04f 32ff 	mov.w	r2, #4294967295
    3ea4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    3ea6:	687b      	ldr	r3, [r7, #4]
    3ea8:	f103 0208 	add.w	r2, r3, #8
    3eac:	687b      	ldr	r3, [r7, #4]
    3eae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    3eb0:	687b      	ldr	r3, [r7, #4]
    3eb2:	f103 0208 	add.w	r2, r3, #8
    3eb6:	687b      	ldr	r3, [r7, #4]
    3eb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    3eba:	687b      	ldr	r3, [r7, #4]
    3ebc:	2200      	movs	r2, #0
    3ebe:	601a      	str	r2, [r3, #0]
}
    3ec0:	370c      	adds	r7, #12
    3ec2:	46bd      	mov	sp, r7
    3ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ec8:	4770      	bx	lr
    3eca:	bf00      	nop

00003ecc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    3ecc:	b480      	push	{r7}
    3ece:	b083      	sub	sp, #12
    3ed0:	af00      	add	r7, sp, #0
    3ed2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3ed4:	687b      	ldr	r3, [r7, #4]
    3ed6:	2200      	movs	r2, #0
    3ed8:	611a      	str	r2, [r3, #16]
}
    3eda:	370c      	adds	r7, #12
    3edc:	46bd      	mov	sp, r7
    3ede:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ee2:	4770      	bx	lr

00003ee4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    3ee4:	b480      	push	{r7}
    3ee6:	b085      	sub	sp, #20
    3ee8:	af00      	add	r7, sp, #0
    3eea:	6078      	str	r0, [r7, #4]
    3eec:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    3eee:	687b      	ldr	r3, [r7, #4]
    3ef0:	685b      	ldr	r3, [r3, #4]
    3ef2:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    3ef4:	68fb      	ldr	r3, [r7, #12]
    3ef6:	685a      	ldr	r2, [r3, #4]
    3ef8:	683b      	ldr	r3, [r7, #0]
    3efa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    3efc:	687b      	ldr	r3, [r7, #4]
    3efe:	685a      	ldr	r2, [r3, #4]
    3f00:	683b      	ldr	r3, [r7, #0]
    3f02:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3f04:	68fb      	ldr	r3, [r7, #12]
    3f06:	685b      	ldr	r3, [r3, #4]
    3f08:	683a      	ldr	r2, [r7, #0]
    3f0a:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    3f0c:	68fb      	ldr	r3, [r7, #12]
    3f0e:	683a      	ldr	r2, [r7, #0]
    3f10:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    3f12:	687b      	ldr	r3, [r7, #4]
    3f14:	683a      	ldr	r2, [r7, #0]
    3f16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3f18:	683b      	ldr	r3, [r7, #0]
    3f1a:	687a      	ldr	r2, [r7, #4]
    3f1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3f1e:	687b      	ldr	r3, [r7, #4]
    3f20:	681b      	ldr	r3, [r3, #0]
    3f22:	1c5a      	adds	r2, r3, #1
    3f24:	687b      	ldr	r3, [r7, #4]
    3f26:	601a      	str	r2, [r3, #0]
}
    3f28:	3714      	adds	r7, #20
    3f2a:	46bd      	mov	sp, r7
    3f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f30:	4770      	bx	lr
    3f32:	bf00      	nop

00003f34 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    3f34:	b480      	push	{r7}
    3f36:	b085      	sub	sp, #20
    3f38:	af00      	add	r7, sp, #0
    3f3a:	6078      	str	r0, [r7, #4]
    3f3c:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    3f3e:	683b      	ldr	r3, [r7, #0]
    3f40:	681b      	ldr	r3, [r3, #0]
    3f42:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    3f44:	68bb      	ldr	r3, [r7, #8]
    3f46:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f4a:	d103      	bne.n	3f54 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    3f4c:	687b      	ldr	r3, [r7, #4]
    3f4e:	691b      	ldr	r3, [r3, #16]
    3f50:	60fb      	str	r3, [r7, #12]
    3f52:	e00c      	b.n	3f6e <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    3f54:	687b      	ldr	r3, [r7, #4]
    3f56:	3308      	adds	r3, #8
    3f58:	60fb      	str	r3, [r7, #12]
    3f5a:	e002      	b.n	3f62 <vListInsert+0x2e>
    3f5c:	68fb      	ldr	r3, [r7, #12]
    3f5e:	685b      	ldr	r3, [r3, #4]
    3f60:	60fb      	str	r3, [r7, #12]
    3f62:	68fb      	ldr	r3, [r7, #12]
    3f64:	685b      	ldr	r3, [r3, #4]
    3f66:	681a      	ldr	r2, [r3, #0]
    3f68:	68bb      	ldr	r3, [r7, #8]
    3f6a:	429a      	cmp	r2, r3
    3f6c:	d9f6      	bls.n	3f5c <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    3f6e:	68fb      	ldr	r3, [r7, #12]
    3f70:	685a      	ldr	r2, [r3, #4]
    3f72:	683b      	ldr	r3, [r7, #0]
    3f74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3f76:	683b      	ldr	r3, [r7, #0]
    3f78:	685b      	ldr	r3, [r3, #4]
    3f7a:	683a      	ldr	r2, [r7, #0]
    3f7c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    3f7e:	683b      	ldr	r3, [r7, #0]
    3f80:	68fa      	ldr	r2, [r7, #12]
    3f82:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    3f84:	68fb      	ldr	r3, [r7, #12]
    3f86:	683a      	ldr	r2, [r7, #0]
    3f88:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3f8a:	683b      	ldr	r3, [r7, #0]
    3f8c:	687a      	ldr	r2, [r7, #4]
    3f8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3f90:	687b      	ldr	r3, [r7, #4]
    3f92:	681b      	ldr	r3, [r3, #0]
    3f94:	1c5a      	adds	r2, r3, #1
    3f96:	687b      	ldr	r3, [r7, #4]
    3f98:	601a      	str	r2, [r3, #0]
}
    3f9a:	3714      	adds	r7, #20
    3f9c:	46bd      	mov	sp, r7
    3f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fa2:	4770      	bx	lr

00003fa4 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    3fa4:	b480      	push	{r7}
    3fa6:	b085      	sub	sp, #20
    3fa8:	af00      	add	r7, sp, #0
    3faa:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    3fac:	687b      	ldr	r3, [r7, #4]
    3fae:	685b      	ldr	r3, [r3, #4]
    3fb0:	687a      	ldr	r2, [r7, #4]
    3fb2:	6892      	ldr	r2, [r2, #8]
    3fb4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3fb6:	687b      	ldr	r3, [r7, #4]
    3fb8:	689b      	ldr	r3, [r3, #8]
    3fba:	687a      	ldr	r2, [r7, #4]
    3fbc:	6852      	ldr	r2, [r2, #4]
    3fbe:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    3fc0:	687b      	ldr	r3, [r7, #4]
    3fc2:	691b      	ldr	r3, [r3, #16]
    3fc4:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    3fc6:	68fb      	ldr	r3, [r7, #12]
    3fc8:	685a      	ldr	r2, [r3, #4]
    3fca:	687b      	ldr	r3, [r7, #4]
    3fcc:	429a      	cmp	r2, r3
    3fce:	d103      	bne.n	3fd8 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    3fd0:	687b      	ldr	r3, [r7, #4]
    3fd2:	689a      	ldr	r2, [r3, #8]
    3fd4:	68fb      	ldr	r3, [r7, #12]
    3fd6:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    3fd8:	687b      	ldr	r3, [r7, #4]
    3fda:	2200      	movs	r2, #0
    3fdc:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    3fde:	68fb      	ldr	r3, [r7, #12]
    3fe0:	681b      	ldr	r3, [r3, #0]
    3fe2:	1e5a      	subs	r2, r3, #1
    3fe4:	68fb      	ldr	r3, [r7, #12]
    3fe6:	601a      	str	r2, [r3, #0]
}
    3fe8:	3714      	adds	r7, #20
    3fea:	46bd      	mov	sp, r7
    3fec:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ff0:	4770      	bx	lr
    3ff2:	bf00      	nop

00003ff4 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    3ff4:	b580      	push	{r7, lr}
    3ff6:	b084      	sub	sp, #16
    3ff8:	af00      	add	r7, sp, #0
    3ffa:	6078      	str	r0, [r7, #4]
    3ffc:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    3ffe:	2301      	movs	r3, #1
    4000:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    4002:	683b      	ldr	r3, [r7, #0]
    4004:	2b01      	cmp	r3, #1
    4006:	d00b      	beq.n	4020 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4008:	687b      	ldr	r3, [r7, #4]
    400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    400c:	2b00      	cmp	r3, #0
    400e:	d001      	beq.n	4014 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    4010:	2300      	movs	r3, #0
    4012:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4014:	687b      	ldr	r3, [r7, #4]
    4016:	691b      	ldr	r3, [r3, #16]
    4018:	2b00      	cmp	r3, #0
    401a:	d001      	beq.n	4020 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    401c:	2300      	movs	r3, #0
    401e:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    4020:	68fb      	ldr	r3, [r7, #12]
    4022:	2b01      	cmp	r3, #1
    4024:	d12f      	bne.n	4086 <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    4026:	687b      	ldr	r3, [r7, #4]
    4028:	681a      	ldr	r2, [r3, #0]
    402a:	687b      	ldr	r3, [r7, #4]
    402c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    402e:	6879      	ldr	r1, [r7, #4]
    4030:	6c09      	ldr	r1, [r1, #64]	; 0x40
    4032:	fb01 f303 	mul.w	r3, r1, r3
    4036:	441a      	add	r2, r3
    4038:	687b      	ldr	r3, [r7, #4]
    403a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    403c:	687b      	ldr	r3, [r7, #4]
    403e:	2200      	movs	r2, #0
    4040:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    4042:	687b      	ldr	r3, [r7, #4]
    4044:	681a      	ldr	r2, [r3, #0]
    4046:	687b      	ldr	r3, [r7, #4]
    4048:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    404a:	687b      	ldr	r3, [r7, #4]
    404c:	681a      	ldr	r2, [r3, #0]
    404e:	687b      	ldr	r3, [r7, #4]
    4050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4052:	3b01      	subs	r3, #1
    4054:	6879      	ldr	r1, [r7, #4]
    4056:	6c09      	ldr	r1, [r1, #64]	; 0x40
    4058:	fb01 f303 	mul.w	r3, r1, r3
    405c:	441a      	add	r2, r3
    405e:	687b      	ldr	r3, [r7, #4]
    4060:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    4062:	687b      	ldr	r3, [r7, #4]
    4064:	f04f 32ff 	mov.w	r2, #4294967295
    4068:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    406a:	687b      	ldr	r3, [r7, #4]
    406c:	f04f 32ff 	mov.w	r2, #4294967295
    4070:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    4072:	687b      	ldr	r3, [r7, #4]
    4074:	3310      	adds	r3, #16
    4076:	4618      	mov	r0, r3
    4078:	f7ff ff08 	bl	3e8c <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    407c:	687b      	ldr	r3, [r7, #4]
    407e:	3324      	adds	r3, #36	; 0x24
    4080:	4618      	mov	r0, r3
    4082:	f7ff ff03 	bl	3e8c <vListInitialise>
	}

	return xReturn;
    4086:	68fb      	ldr	r3, [r7, #12]
}
    4088:	4618      	mov	r0, r3
    408a:	3710      	adds	r7, #16
    408c:	46bd      	mov	sp, r7
    408e:	bd80      	pop	{r7, pc}

00004090 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    4090:	b580      	push	{r7, lr}
    4092:	b088      	sub	sp, #32
    4094:	af00      	add	r7, sp, #0
    4096:	60f8      	str	r0, [r7, #12]
    4098:	60b9      	str	r1, [r7, #8]
    409a:	4613      	mov	r3, r2
    409c:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    409e:	2300      	movs	r3, #0
    40a0:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    40a2:	68fb      	ldr	r3, [r7, #12]
    40a4:	2b00      	cmp	r3, #0
    40a6:	d026      	beq.n	40f6 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    40a8:	204c      	movs	r0, #76	; 0x4c
    40aa:	f001 fda5 	bl	5bf8 <pvPortMalloc>
    40ae:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    40b0:	69bb      	ldr	r3, [r7, #24]
    40b2:	2b00      	cmp	r3, #0
    40b4:	d01f      	beq.n	40f6 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    40b6:	68fb      	ldr	r3, [r7, #12]
    40b8:	68ba      	ldr	r2, [r7, #8]
    40ba:	fb02 f303 	mul.w	r3, r2, r3
    40be:	3301      	adds	r3, #1
    40c0:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    40c2:	6978      	ldr	r0, [r7, #20]
    40c4:	f001 fd98 	bl	5bf8 <pvPortMalloc>
    40c8:	4602      	mov	r2, r0
    40ca:	69bb      	ldr	r3, [r7, #24]
    40cc:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    40ce:	69bb      	ldr	r3, [r7, #24]
    40d0:	681b      	ldr	r3, [r3, #0]
    40d2:	2b00      	cmp	r3, #0
    40d4:	d00c      	beq.n	40f0 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    40d6:	69bb      	ldr	r3, [r7, #24]
    40d8:	68fa      	ldr	r2, [r7, #12]
    40da:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    40dc:	69bb      	ldr	r3, [r7, #24]
    40de:	68ba      	ldr	r2, [r7, #8]
    40e0:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    40e2:	69b8      	ldr	r0, [r7, #24]
    40e4:	2101      	movs	r1, #1
    40e6:	f7ff ff85 	bl	3ff4 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    40ea:	69bb      	ldr	r3, [r7, #24]
    40ec:	61fb      	str	r3, [r7, #28]
    40ee:	e002      	b.n	40f6 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    40f0:	69b8      	ldr	r0, [r7, #24]
    40f2:	f001 fe45 	bl	5d80 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    40f6:	69fb      	ldr	r3, [r7, #28]
}
    40f8:	4618      	mov	r0, r3
    40fa:	3720      	adds	r7, #32
    40fc:	46bd      	mov	sp, r7
    40fe:	bd80      	pop	{r7, pc}

00004100 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    4100:	b580      	push	{r7, lr}
    4102:	b084      	sub	sp, #16
    4104:	af00      	add	r7, sp, #0
    4106:	4603      	mov	r3, r0
    4108:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    410a:	204c      	movs	r0, #76	; 0x4c
    410c:	f001 fd74 	bl	5bf8 <pvPortMalloc>
    4110:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    4112:	68fb      	ldr	r3, [r7, #12]
    4114:	2b00      	cmp	r3, #0
    4116:	d02c      	beq.n	4172 <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    4118:	68fb      	ldr	r3, [r7, #12]
    411a:	2200      	movs	r2, #0
    411c:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    411e:	68fb      	ldr	r3, [r7, #12]
    4120:	2200      	movs	r2, #0
    4122:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    4124:	68fb      	ldr	r3, [r7, #12]
    4126:	2200      	movs	r2, #0
    4128:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    412a:	68fb      	ldr	r3, [r7, #12]
    412c:	2200      	movs	r2, #0
    412e:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4130:	68fb      	ldr	r3, [r7, #12]
    4132:	2200      	movs	r2, #0
    4134:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    4136:	68fb      	ldr	r3, [r7, #12]
    4138:	2201      	movs	r2, #1
    413a:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    413c:	68fb      	ldr	r3, [r7, #12]
    413e:	2200      	movs	r2, #0
    4140:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    4142:	68fb      	ldr	r3, [r7, #12]
    4144:	f04f 32ff 	mov.w	r2, #4294967295
    4148:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    414a:	68fb      	ldr	r3, [r7, #12]
    414c:	f04f 32ff 	mov.w	r2, #4294967295
    4150:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    4152:	68fb      	ldr	r3, [r7, #12]
    4154:	3310      	adds	r3, #16
    4156:	4618      	mov	r0, r3
    4158:	f7ff fe98 	bl	3e8c <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    415c:	68fb      	ldr	r3, [r7, #12]
    415e:	3324      	adds	r3, #36	; 0x24
    4160:	4618      	mov	r0, r3
    4162:	f7ff fe93 	bl	3e8c <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    4166:	68f8      	ldr	r0, [r7, #12]
    4168:	2100      	movs	r1, #0
    416a:	2200      	movs	r2, #0
    416c:	2300      	movs	r3, #0
    416e:	f000 f81d 	bl	41ac <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    4172:	68fb      	ldr	r3, [r7, #12]
	}
    4174:	4618      	mov	r0, r3
    4176:	3710      	adds	r7, #16
    4178:	46bd      	mov	sp, r7
    417a:	bd80      	pop	{r7, pc}

0000417c <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    417c:	b580      	push	{r7, lr}
    417e:	b084      	sub	sp, #16
    4180:	af00      	add	r7, sp, #0
    4182:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    4184:	f001 fcc0 	bl	5b08 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    4188:	687b      	ldr	r3, [r7, #4]
    418a:	681b      	ldr	r3, [r3, #0]
    418c:	2b00      	cmp	r3, #0
    418e:	d103      	bne.n	4198 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    4190:	687b      	ldr	r3, [r7, #4]
    4192:	685b      	ldr	r3, [r3, #4]
    4194:	60fb      	str	r3, [r7, #12]
    4196:	e001      	b.n	419c <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    4198:	2300      	movs	r3, #0
    419a:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    419c:	f001 fcca 	bl	5b34 <vPortExitCritical>
		
		return pxReturn;
    41a0:	68fb      	ldr	r3, [r7, #12]
	}
    41a2:	4618      	mov	r0, r3
    41a4:	3710      	adds	r7, #16
    41a6:	46bd      	mov	sp, r7
    41a8:	bd80      	pop	{r7, pc}
    41aa:	bf00      	nop

000041ac <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    41ac:	b580      	push	{r7, lr}
    41ae:	b088      	sub	sp, #32
    41b0:	af00      	add	r7, sp, #0
    41b2:	60f8      	str	r0, [r7, #12]
    41b4:	60b9      	str	r1, [r7, #8]
    41b6:	607a      	str	r2, [r7, #4]
    41b8:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    41ba:	2300      	movs	r3, #0
    41bc:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    41be:	f001 fca3 	bl	5b08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    41c2:	68fb      	ldr	r3, [r7, #12]
    41c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    41c6:	68fb      	ldr	r3, [r7, #12]
    41c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    41ca:	429a      	cmp	r2, r3
    41cc:	d216      	bcs.n	41fc <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    41ce:	68f8      	ldr	r0, [r7, #12]
    41d0:	68b9      	ldr	r1, [r7, #8]
    41d2:	683a      	ldr	r2, [r7, #0]
    41d4:	f000 f9d6 	bl	4584 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    41d8:	68fb      	ldr	r3, [r7, #12]
    41da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    41dc:	2b00      	cmp	r3, #0
    41de:	d009      	beq.n	41f4 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    41e0:	68fb      	ldr	r3, [r7, #12]
    41e2:	3324      	adds	r3, #36	; 0x24
    41e4:	4618      	mov	r0, r3
    41e6:	f001 f905 	bl	53f4 <xTaskRemoveFromEventList>
    41ea:	4603      	mov	r3, r0
    41ec:	2b01      	cmp	r3, #1
    41ee:	d101      	bne.n	41f4 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    41f0:	f001 fc7c 	bl	5aec <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    41f4:	f001 fc9e 	bl	5b34 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    41f8:	2301      	movs	r3, #1
    41fa:	e059      	b.n	42b0 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    41fc:	687b      	ldr	r3, [r7, #4]
    41fe:	2b00      	cmp	r3, #0
    4200:	d103      	bne.n	420a <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4202:	f001 fc97 	bl	5b34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    4206:	2300      	movs	r3, #0
    4208:	e052      	b.n	42b0 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    420a:	69fb      	ldr	r3, [r7, #28]
    420c:	2b00      	cmp	r3, #0
    420e:	d106      	bne.n	421e <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    4210:	f107 0314 	add.w	r3, r7, #20
    4214:	4618      	mov	r0, r3
    4216:	f001 f945 	bl	54a4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    421a:	2301      	movs	r3, #1
    421c:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    421e:	f001 fc89 	bl	5b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4222:	f000 fe93 	bl	4f4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4226:	f001 fc6f 	bl	5b08 <vPortEnterCritical>
    422a:	68fb      	ldr	r3, [r7, #12]
    422c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    422e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4232:	d102      	bne.n	423a <xQueueGenericSend+0x8e>
    4234:	68fb      	ldr	r3, [r7, #12]
    4236:	2200      	movs	r2, #0
    4238:	645a      	str	r2, [r3, #68]	; 0x44
    423a:	68fb      	ldr	r3, [r7, #12]
    423c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    423e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4242:	d102      	bne.n	424a <xQueueGenericSend+0x9e>
    4244:	68fb      	ldr	r3, [r7, #12]
    4246:	2200      	movs	r2, #0
    4248:	649a      	str	r2, [r3, #72]	; 0x48
    424a:	f001 fc73 	bl	5b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    424e:	f107 0214 	add.w	r2, r7, #20
    4252:	1d3b      	adds	r3, r7, #4
    4254:	4610      	mov	r0, r2
    4256:	4619      	mov	r1, r3
    4258:	f001 f93c 	bl	54d4 <xTaskCheckForTimeOut>
    425c:	4603      	mov	r3, r0
    425e:	2b00      	cmp	r3, #0
    4260:	d11e      	bne.n	42a0 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    4262:	68f8      	ldr	r0, [r7, #12]
    4264:	f000 fa86 	bl	4774 <prvIsQueueFull>
    4268:	4603      	mov	r3, r0
    426a:	2b00      	cmp	r3, #0
    426c:	d012      	beq.n	4294 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    426e:	68fb      	ldr	r3, [r7, #12]
    4270:	f103 0210 	add.w	r2, r3, #16
    4274:	687b      	ldr	r3, [r7, #4]
    4276:	4610      	mov	r0, r2
    4278:	4619      	mov	r1, r3
    427a:	f001 f883 	bl	5384 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    427e:	68f8      	ldr	r0, [r7, #12]
    4280:	f000 fa02 	bl	4688 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    4284:	f000 fe74 	bl	4f70 <xTaskResumeAll>
    4288:	4603      	mov	r3, r0
    428a:	2b00      	cmp	r3, #0
    428c:	d10f      	bne.n	42ae <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    428e:	f001 fc2d 	bl	5aec <vPortYieldFromISR>
    4292:	e00c      	b.n	42ae <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    4294:	68f8      	ldr	r0, [r7, #12]
    4296:	f000 f9f7 	bl	4688 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    429a:	f000 fe69 	bl	4f70 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    429e:	e78e      	b.n	41be <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    42a0:	68f8      	ldr	r0, [r7, #12]
    42a2:	f000 f9f1 	bl	4688 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    42a6:	f000 fe63 	bl	4f70 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    42aa:	2300      	movs	r3, #0
    42ac:	e000      	b.n	42b0 <xQueueGenericSend+0x104>
		}
	}
    42ae:	e786      	b.n	41be <xQueueGenericSend+0x12>
}
    42b0:	4618      	mov	r0, r3
    42b2:	3720      	adds	r7, #32
    42b4:	46bd      	mov	sp, r7
    42b6:	bd80      	pop	{r7, pc}

000042b8 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    42b8:	b580      	push	{r7, lr}
    42ba:	b086      	sub	sp, #24
    42bc:	af00      	add	r7, sp, #0
    42be:	60f8      	str	r0, [r7, #12]
    42c0:	60b9      	str	r1, [r7, #8]
    42c2:	607a      	str	r2, [r7, #4]
    42c4:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    42c6:	2300      	movs	r3, #0
    42c8:	613b      	str	r3, [r7, #16]
    42ca:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    42ce:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    42d2:	68fb      	ldr	r3, [r7, #12]
    42d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    42d6:	68fb      	ldr	r3, [r7, #12]
    42d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    42da:	429a      	cmp	r2, r3
    42dc:	d221      	bcs.n	4322 <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    42de:	68f8      	ldr	r0, [r7, #12]
    42e0:	68b9      	ldr	r1, [r7, #8]
    42e2:	683a      	ldr	r2, [r7, #0]
    42e4:	f000 f94e 	bl	4584 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    42e8:	68fb      	ldr	r3, [r7, #12]
    42ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    42ec:	f1b3 3fff 	cmp.w	r3, #4294967295
    42f0:	d10f      	bne.n	4312 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    42f2:	68fb      	ldr	r3, [r7, #12]
    42f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    42f6:	2b00      	cmp	r3, #0
    42f8:	d010      	beq.n	431c <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    42fa:	68fb      	ldr	r3, [r7, #12]
    42fc:	3324      	adds	r3, #36	; 0x24
    42fe:	4618      	mov	r0, r3
    4300:	f001 f878 	bl	53f4 <xTaskRemoveFromEventList>
    4304:	4603      	mov	r3, r0
    4306:	2b00      	cmp	r3, #0
    4308:	d008      	beq.n	431c <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    430a:	687b      	ldr	r3, [r7, #4]
    430c:	2201      	movs	r2, #1
    430e:	601a      	str	r2, [r3, #0]
    4310:	e004      	b.n	431c <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    4312:	68fb      	ldr	r3, [r7, #12]
    4314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4316:	1c5a      	adds	r2, r3, #1
    4318:	68fb      	ldr	r3, [r7, #12]
    431a:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    431c:	2301      	movs	r3, #1
    431e:	617b      	str	r3, [r7, #20]
    4320:	e001      	b.n	4326 <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    4322:	2300      	movs	r3, #0
    4324:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4326:	f04f 0000 	mov.w	r0, #0
    432a:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    432e:	697b      	ldr	r3, [r7, #20]
}
    4330:	4618      	mov	r0, r3
    4332:	3718      	adds	r7, #24
    4334:	46bd      	mov	sp, r7
    4336:	bd80      	pop	{r7, pc}

00004338 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    4338:	b580      	push	{r7, lr}
    433a:	b088      	sub	sp, #32
    433c:	af00      	add	r7, sp, #0
    433e:	60f8      	str	r0, [r7, #12]
    4340:	60b9      	str	r1, [r7, #8]
    4342:	607a      	str	r2, [r7, #4]
    4344:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    4346:	2300      	movs	r3, #0
    4348:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    434a:	f001 fbdd 	bl	5b08 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    434e:	68fb      	ldr	r3, [r7, #12]
    4350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4352:	2b00      	cmp	r3, #0
    4354:	d03b      	beq.n	43ce <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    4356:	68fb      	ldr	r3, [r7, #12]
    4358:	68db      	ldr	r3, [r3, #12]
    435a:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    435c:	68f8      	ldr	r0, [r7, #12]
    435e:	68b9      	ldr	r1, [r7, #8]
    4360:	f000 f96c 	bl	463c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    4364:	683b      	ldr	r3, [r7, #0]
    4366:	2b00      	cmp	r3, #0
    4368:	d11c      	bne.n	43a4 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    436a:	68fb      	ldr	r3, [r7, #12]
    436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    436e:	1e5a      	subs	r2, r3, #1
    4370:	68fb      	ldr	r3, [r7, #12]
    4372:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4374:	68fb      	ldr	r3, [r7, #12]
    4376:	681b      	ldr	r3, [r3, #0]
    4378:	2b00      	cmp	r3, #0
    437a:	d104      	bne.n	4386 <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    437c:	f001 fa5c 	bl	5838 <xTaskGetCurrentTaskHandle>
    4380:	4602      	mov	r2, r0
    4382:	68fb      	ldr	r3, [r7, #12]
    4384:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4386:	68fb      	ldr	r3, [r7, #12]
    4388:	691b      	ldr	r3, [r3, #16]
    438a:	2b00      	cmp	r3, #0
    438c:	d01b      	beq.n	43c6 <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    438e:	68fb      	ldr	r3, [r7, #12]
    4390:	3310      	adds	r3, #16
    4392:	4618      	mov	r0, r3
    4394:	f001 f82e 	bl	53f4 <xTaskRemoveFromEventList>
    4398:	4603      	mov	r3, r0
    439a:	2b01      	cmp	r3, #1
    439c:	d113      	bne.n	43c6 <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    439e:	f001 fba5 	bl	5aec <vPortYieldFromISR>
    43a2:	e010      	b.n	43c6 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    43a4:	68fb      	ldr	r3, [r7, #12]
    43a6:	69ba      	ldr	r2, [r7, #24]
    43a8:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    43aa:	68fb      	ldr	r3, [r7, #12]
    43ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    43ae:	2b00      	cmp	r3, #0
    43b0:	d009      	beq.n	43c6 <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    43b2:	68fb      	ldr	r3, [r7, #12]
    43b4:	3324      	adds	r3, #36	; 0x24
    43b6:	4618      	mov	r0, r3
    43b8:	f001 f81c 	bl	53f4 <xTaskRemoveFromEventList>
    43bc:	4603      	mov	r3, r0
    43be:	2b00      	cmp	r3, #0
    43c0:	d001      	beq.n	43c6 <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    43c2:	f001 fb93 	bl	5aec <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    43c6:	f001 fbb5 	bl	5b34 <vPortExitCritical>
				return pdPASS;
    43ca:	2301      	movs	r3, #1
    43cc:	e066      	b.n	449c <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    43ce:	687b      	ldr	r3, [r7, #4]
    43d0:	2b00      	cmp	r3, #0
    43d2:	d103      	bne.n	43dc <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    43d4:	f001 fbae 	bl	5b34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    43d8:	2300      	movs	r3, #0
    43da:	e05f      	b.n	449c <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    43dc:	69fb      	ldr	r3, [r7, #28]
    43de:	2b00      	cmp	r3, #0
    43e0:	d106      	bne.n	43f0 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    43e2:	f107 0310 	add.w	r3, r7, #16
    43e6:	4618      	mov	r0, r3
    43e8:	f001 f85c 	bl	54a4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    43ec:	2301      	movs	r3, #1
    43ee:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    43f0:	f001 fba0 	bl	5b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    43f4:	f000 fdaa 	bl	4f4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    43f8:	f001 fb86 	bl	5b08 <vPortEnterCritical>
    43fc:	68fb      	ldr	r3, [r7, #12]
    43fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4400:	f1b3 3fff 	cmp.w	r3, #4294967295
    4404:	d102      	bne.n	440c <xQueueGenericReceive+0xd4>
    4406:	68fb      	ldr	r3, [r7, #12]
    4408:	2200      	movs	r2, #0
    440a:	645a      	str	r2, [r3, #68]	; 0x44
    440c:	68fb      	ldr	r3, [r7, #12]
    440e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4410:	f1b3 3fff 	cmp.w	r3, #4294967295
    4414:	d102      	bne.n	441c <xQueueGenericReceive+0xe4>
    4416:	68fb      	ldr	r3, [r7, #12]
    4418:	2200      	movs	r2, #0
    441a:	649a      	str	r2, [r3, #72]	; 0x48
    441c:	f001 fb8a 	bl	5b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4420:	f107 0210 	add.w	r2, r7, #16
    4424:	1d3b      	adds	r3, r7, #4
    4426:	4610      	mov	r0, r2
    4428:	4619      	mov	r1, r3
    442a:	f001 f853 	bl	54d4 <xTaskCheckForTimeOut>
    442e:	4603      	mov	r3, r0
    4430:	2b00      	cmp	r3, #0
    4432:	d12b      	bne.n	448c <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4434:	68f8      	ldr	r0, [r7, #12]
    4436:	f000 f973 	bl	4720 <prvIsQueueEmpty>
    443a:	4603      	mov	r3, r0
    443c:	2b00      	cmp	r3, #0
    443e:	d01f      	beq.n	4480 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4440:	68fb      	ldr	r3, [r7, #12]
    4442:	681b      	ldr	r3, [r3, #0]
    4444:	2b00      	cmp	r3, #0
    4446:	d108      	bne.n	445a <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    4448:	f001 fb5e 	bl	5b08 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    444c:	68fb      	ldr	r3, [r7, #12]
    444e:	685b      	ldr	r3, [r3, #4]
    4450:	4618      	mov	r0, r3
    4452:	f001 fa01 	bl	5858 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    4456:	f001 fb6d 	bl	5b34 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    445a:	68fb      	ldr	r3, [r7, #12]
    445c:	f103 0224 	add.w	r2, r3, #36	; 0x24
    4460:	687b      	ldr	r3, [r7, #4]
    4462:	4610      	mov	r0, r2
    4464:	4619      	mov	r1, r3
    4466:	f000 ff8d 	bl	5384 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    446a:	68f8      	ldr	r0, [r7, #12]
    446c:	f000 f90c 	bl	4688 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    4470:	f000 fd7e 	bl	4f70 <xTaskResumeAll>
    4474:	4603      	mov	r3, r0
    4476:	2b00      	cmp	r3, #0
    4478:	d10f      	bne.n	449a <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    447a:	f001 fb37 	bl	5aec <vPortYieldFromISR>
    447e:	e00c      	b.n	449a <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    4480:	68f8      	ldr	r0, [r7, #12]
    4482:	f000 f901 	bl	4688 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    4486:	f000 fd73 	bl	4f70 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    448a:	e75e      	b.n	434a <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    448c:	68f8      	ldr	r0, [r7, #12]
    448e:	f000 f8fb 	bl	4688 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    4492:	f000 fd6d 	bl	4f70 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    4496:	2300      	movs	r3, #0
    4498:	e000      	b.n	449c <xQueueGenericReceive+0x164>
		}
	}
    449a:	e756      	b.n	434a <xQueueGenericReceive+0x12>
}
    449c:	4618      	mov	r0, r3
    449e:	3720      	adds	r7, #32
    44a0:	46bd      	mov	sp, r7
    44a2:	bd80      	pop	{r7, pc}

000044a4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    44a4:	b580      	push	{r7, lr}
    44a6:	b086      	sub	sp, #24
    44a8:	af00      	add	r7, sp, #0
    44aa:	60f8      	str	r0, [r7, #12]
    44ac:	60b9      	str	r1, [r7, #8]
    44ae:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    44b0:	2300      	movs	r3, #0
    44b2:	613b      	str	r3, [r7, #16]
    44b4:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    44b8:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    44bc:	68fb      	ldr	r3, [r7, #12]
    44be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    44c0:	2b00      	cmp	r3, #0
    44c2:	d025      	beq.n	4510 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    44c4:	68f8      	ldr	r0, [r7, #12]
    44c6:	68b9      	ldr	r1, [r7, #8]
    44c8:	f000 f8b8 	bl	463c <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    44cc:	68fb      	ldr	r3, [r7, #12]
    44ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    44d0:	1e5a      	subs	r2, r3, #1
    44d2:	68fb      	ldr	r3, [r7, #12]
    44d4:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    44d6:	68fb      	ldr	r3, [r7, #12]
    44d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    44da:	f1b3 3fff 	cmp.w	r3, #4294967295
    44de:	d10f      	bne.n	4500 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    44e0:	68fb      	ldr	r3, [r7, #12]
    44e2:	691b      	ldr	r3, [r3, #16]
    44e4:	2b00      	cmp	r3, #0
    44e6:	d010      	beq.n	450a <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    44e8:	68fb      	ldr	r3, [r7, #12]
    44ea:	3310      	adds	r3, #16
    44ec:	4618      	mov	r0, r3
    44ee:	f000 ff81 	bl	53f4 <xTaskRemoveFromEventList>
    44f2:	4603      	mov	r3, r0
    44f4:	2b00      	cmp	r3, #0
    44f6:	d008      	beq.n	450a <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    44f8:	687b      	ldr	r3, [r7, #4]
    44fa:	2201      	movs	r2, #1
    44fc:	601a      	str	r2, [r3, #0]
    44fe:	e004      	b.n	450a <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    4500:	68fb      	ldr	r3, [r7, #12]
    4502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4504:	1c5a      	adds	r2, r3, #1
    4506:	68fb      	ldr	r3, [r7, #12]
    4508:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    450a:	2301      	movs	r3, #1
    450c:	617b      	str	r3, [r7, #20]
    450e:	e001      	b.n	4514 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    4510:	2300      	movs	r3, #0
    4512:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4514:	f04f 0000 	mov.w	r0, #0
    4518:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    451c:	697b      	ldr	r3, [r7, #20]
}
    451e:	4618      	mov	r0, r3
    4520:	3718      	adds	r7, #24
    4522:	46bd      	mov	sp, r7
    4524:	bd80      	pop	{r7, pc}
    4526:	bf00      	nop

00004528 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    4528:	b580      	push	{r7, lr}
    452a:	b084      	sub	sp, #16
    452c:	af00      	add	r7, sp, #0
    452e:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    4530:	f001 faea 	bl	5b08 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    4534:	687b      	ldr	r3, [r7, #4]
    4536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4538:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    453a:	f001 fafb 	bl	5b34 <vPortExitCritical>

	return uxReturn;
    453e:	68fb      	ldr	r3, [r7, #12]
}
    4540:	4618      	mov	r0, r3
    4542:	3710      	adds	r7, #16
    4544:	46bd      	mov	sp, r7
    4546:	bd80      	pop	{r7, pc}

00004548 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    4548:	b480      	push	{r7}
    454a:	b085      	sub	sp, #20
    454c:	af00      	add	r7, sp, #0
    454e:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    4550:	687b      	ldr	r3, [r7, #4]
    4552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4554:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    4556:	68fb      	ldr	r3, [r7, #12]
}
    4558:	4618      	mov	r0, r3
    455a:	3714      	adds	r7, #20
    455c:	46bd      	mov	sp, r7
    455e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4562:	4770      	bx	lr

00004564 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    4564:	b580      	push	{r7, lr}
    4566:	b082      	sub	sp, #8
    4568:	af00      	add	r7, sp, #0
    456a:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    456c:	687b      	ldr	r3, [r7, #4]
    456e:	681b      	ldr	r3, [r3, #0]
    4570:	4618      	mov	r0, r3
    4572:	f001 fc05 	bl	5d80 <vPortFree>
	vPortFree( pxQueue );
    4576:	6878      	ldr	r0, [r7, #4]
    4578:	f001 fc02 	bl	5d80 <vPortFree>
}
    457c:	3708      	adds	r7, #8
    457e:	46bd      	mov	sp, r7
    4580:	bd80      	pop	{r7, pc}
    4582:	bf00      	nop

00004584 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    4584:	b580      	push	{r7, lr}
    4586:	b084      	sub	sp, #16
    4588:	af00      	add	r7, sp, #0
    458a:	60f8      	str	r0, [r7, #12]
    458c:	60b9      	str	r1, [r7, #8]
    458e:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    4590:	68fb      	ldr	r3, [r7, #12]
    4592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4594:	2b00      	cmp	r3, #0
    4596:	d10c      	bne.n	45b2 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4598:	68fb      	ldr	r3, [r7, #12]
    459a:	681b      	ldr	r3, [r3, #0]
    459c:	2b00      	cmp	r3, #0
    459e:	d145      	bne.n	462c <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    45a0:	68fb      	ldr	r3, [r7, #12]
    45a2:	685b      	ldr	r3, [r3, #4]
    45a4:	4618      	mov	r0, r3
    45a6:	f001 f9bb 	bl	5920 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    45aa:	68fb      	ldr	r3, [r7, #12]
    45ac:	2200      	movs	r2, #0
    45ae:	605a      	str	r2, [r3, #4]
    45b0:	e03c      	b.n	462c <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    45b2:	687b      	ldr	r3, [r7, #4]
    45b4:	2b00      	cmp	r3, #0
    45b6:	d11a      	bne.n	45ee <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    45b8:	68fb      	ldr	r3, [r7, #12]
    45ba:	689a      	ldr	r2, [r3, #8]
    45bc:	68fb      	ldr	r3, [r7, #12]
    45be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    45c0:	4610      	mov	r0, r2
    45c2:	68b9      	ldr	r1, [r7, #8]
    45c4:	461a      	mov	r2, r3
    45c6:	f013 ffff 	bl	185c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    45ca:	68fb      	ldr	r3, [r7, #12]
    45cc:	689a      	ldr	r2, [r3, #8]
    45ce:	68fb      	ldr	r3, [r7, #12]
    45d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    45d2:	441a      	add	r2, r3
    45d4:	68fb      	ldr	r3, [r7, #12]
    45d6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    45d8:	68fb      	ldr	r3, [r7, #12]
    45da:	689a      	ldr	r2, [r3, #8]
    45dc:	68fb      	ldr	r3, [r7, #12]
    45de:	685b      	ldr	r3, [r3, #4]
    45e0:	429a      	cmp	r2, r3
    45e2:	d323      	bcc.n	462c <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    45e4:	68fb      	ldr	r3, [r7, #12]
    45e6:	681a      	ldr	r2, [r3, #0]
    45e8:	68fb      	ldr	r3, [r7, #12]
    45ea:	609a      	str	r2, [r3, #8]
    45ec:	e01e      	b.n	462c <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    45ee:	68fb      	ldr	r3, [r7, #12]
    45f0:	68da      	ldr	r2, [r3, #12]
    45f2:	68fb      	ldr	r3, [r7, #12]
    45f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    45f6:	4610      	mov	r0, r2
    45f8:	68b9      	ldr	r1, [r7, #8]
    45fa:	461a      	mov	r2, r3
    45fc:	f013 ffe4 	bl	185c8 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    4600:	68fb      	ldr	r3, [r7, #12]
    4602:	68da      	ldr	r2, [r3, #12]
    4604:	68fb      	ldr	r3, [r7, #12]
    4606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4608:	425b      	negs	r3, r3
    460a:	441a      	add	r2, r3
    460c:	68fb      	ldr	r3, [r7, #12]
    460e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    4610:	68fb      	ldr	r3, [r7, #12]
    4612:	68da      	ldr	r2, [r3, #12]
    4614:	68fb      	ldr	r3, [r7, #12]
    4616:	681b      	ldr	r3, [r3, #0]
    4618:	429a      	cmp	r2, r3
    461a:	d207      	bcs.n	462c <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    461c:	68fb      	ldr	r3, [r7, #12]
    461e:	685a      	ldr	r2, [r3, #4]
    4620:	68fb      	ldr	r3, [r7, #12]
    4622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4624:	425b      	negs	r3, r3
    4626:	441a      	add	r2, r3
    4628:	68fb      	ldr	r3, [r7, #12]
    462a:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    462c:	68fb      	ldr	r3, [r7, #12]
    462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4630:	1c5a      	adds	r2, r3, #1
    4632:	68fb      	ldr	r3, [r7, #12]
    4634:	639a      	str	r2, [r3, #56]	; 0x38
}
    4636:	3710      	adds	r7, #16
    4638:	46bd      	mov	sp, r7
    463a:	bd80      	pop	{r7, pc}

0000463c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    463c:	b580      	push	{r7, lr}
    463e:	b082      	sub	sp, #8
    4640:	af00      	add	r7, sp, #0
    4642:	6078      	str	r0, [r7, #4]
    4644:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    4646:	687b      	ldr	r3, [r7, #4]
    4648:	681b      	ldr	r3, [r3, #0]
    464a:	2b00      	cmp	r3, #0
    464c:	d019      	beq.n	4682 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    464e:	687b      	ldr	r3, [r7, #4]
    4650:	68da      	ldr	r2, [r3, #12]
    4652:	687b      	ldr	r3, [r7, #4]
    4654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4656:	441a      	add	r2, r3
    4658:	687b      	ldr	r3, [r7, #4]
    465a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    465c:	687b      	ldr	r3, [r7, #4]
    465e:	68da      	ldr	r2, [r3, #12]
    4660:	687b      	ldr	r3, [r7, #4]
    4662:	685b      	ldr	r3, [r3, #4]
    4664:	429a      	cmp	r2, r3
    4666:	d303      	bcc.n	4670 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    4668:	687b      	ldr	r3, [r7, #4]
    466a:	681a      	ldr	r2, [r3, #0]
    466c:	687b      	ldr	r3, [r7, #4]
    466e:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    4670:	687b      	ldr	r3, [r7, #4]
    4672:	68da      	ldr	r2, [r3, #12]
    4674:	687b      	ldr	r3, [r7, #4]
    4676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4678:	6838      	ldr	r0, [r7, #0]
    467a:	4611      	mov	r1, r2
    467c:	461a      	mov	r2, r3
    467e:	f013 ffa3 	bl	185c8 <memcpy>
	}
}
    4682:	3708      	adds	r7, #8
    4684:	46bd      	mov	sp, r7
    4686:	bd80      	pop	{r7, pc}

00004688 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    4688:	b580      	push	{r7, lr}
    468a:	b082      	sub	sp, #8
    468c:	af00      	add	r7, sp, #0
    468e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    4690:	f001 fa3a 	bl	5b08 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    4694:	e014      	b.n	46c0 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4696:	687b      	ldr	r3, [r7, #4]
    4698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    469a:	2b00      	cmp	r3, #0
    469c:	d00f      	beq.n	46be <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    469e:	687b      	ldr	r3, [r7, #4]
    46a0:	3324      	adds	r3, #36	; 0x24
    46a2:	4618      	mov	r0, r3
    46a4:	f000 fea6 	bl	53f4 <xTaskRemoveFromEventList>
    46a8:	4603      	mov	r3, r0
    46aa:	2b00      	cmp	r3, #0
    46ac:	d001      	beq.n	46b2 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    46ae:	f000 ff5d 	bl	556c <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    46b2:	687b      	ldr	r3, [r7, #4]
    46b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    46b6:	1e5a      	subs	r2, r3, #1
    46b8:	687b      	ldr	r3, [r7, #4]
    46ba:	649a      	str	r2, [r3, #72]	; 0x48
    46bc:	e000      	b.n	46c0 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    46be:	e003      	b.n	46c8 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    46c0:	687b      	ldr	r3, [r7, #4]
    46c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    46c4:	2b00      	cmp	r3, #0
    46c6:	dce6      	bgt.n	4696 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    46c8:	687b      	ldr	r3, [r7, #4]
    46ca:	f04f 32ff 	mov.w	r2, #4294967295
    46ce:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    46d0:	f001 fa30 	bl	5b34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    46d4:	f001 fa18 	bl	5b08 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    46d8:	e014      	b.n	4704 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    46da:	687b      	ldr	r3, [r7, #4]
    46dc:	691b      	ldr	r3, [r3, #16]
    46de:	2b00      	cmp	r3, #0
    46e0:	d00f      	beq.n	4702 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    46e2:	687b      	ldr	r3, [r7, #4]
    46e4:	3310      	adds	r3, #16
    46e6:	4618      	mov	r0, r3
    46e8:	f000 fe84 	bl	53f4 <xTaskRemoveFromEventList>
    46ec:	4603      	mov	r3, r0
    46ee:	2b00      	cmp	r3, #0
    46f0:	d001      	beq.n	46f6 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    46f2:	f000 ff3b 	bl	556c <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    46f6:	687b      	ldr	r3, [r7, #4]
    46f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    46fa:	1e5a      	subs	r2, r3, #1
    46fc:	687b      	ldr	r3, [r7, #4]
    46fe:	645a      	str	r2, [r3, #68]	; 0x44
    4700:	e000      	b.n	4704 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    4702:	e003      	b.n	470c <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4704:	687b      	ldr	r3, [r7, #4]
    4706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4708:	2b00      	cmp	r3, #0
    470a:	dce6      	bgt.n	46da <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    470c:	687b      	ldr	r3, [r7, #4]
    470e:	f04f 32ff 	mov.w	r2, #4294967295
    4712:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    4714:	f001 fa0e 	bl	5b34 <vPortExitCritical>
}
    4718:	3708      	adds	r7, #8
    471a:	46bd      	mov	sp, r7
    471c:	bd80      	pop	{r7, pc}
    471e:	bf00      	nop

00004720 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    4720:	b580      	push	{r7, lr}
    4722:	b084      	sub	sp, #16
    4724:	af00      	add	r7, sp, #0
    4726:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4728:	f001 f9ee 	bl	5b08 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    472c:	687b      	ldr	r3, [r7, #4]
    472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4730:	2b00      	cmp	r3, #0
    4732:	bf14      	ite	ne
    4734:	2300      	movne	r3, #0
    4736:	2301      	moveq	r3, #1
    4738:	b2db      	uxtb	r3, r3
    473a:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    473c:	f001 f9fa 	bl	5b34 <vPortExitCritical>

	return xReturn;
    4740:	68fb      	ldr	r3, [r7, #12]
}
    4742:	4618      	mov	r0, r3
    4744:	3710      	adds	r7, #16
    4746:	46bd      	mov	sp, r7
    4748:	bd80      	pop	{r7, pc}
    474a:	bf00      	nop

0000474c <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    474c:	b480      	push	{r7}
    474e:	b085      	sub	sp, #20
    4750:	af00      	add	r7, sp, #0
    4752:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4754:	687b      	ldr	r3, [r7, #4]
    4756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4758:	2b00      	cmp	r3, #0
    475a:	bf14      	ite	ne
    475c:	2300      	movne	r3, #0
    475e:	2301      	moveq	r3, #1
    4760:	b2db      	uxtb	r3, r3
    4762:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4764:	68fb      	ldr	r3, [r7, #12]
}
    4766:	4618      	mov	r0, r3
    4768:	3714      	adds	r7, #20
    476a:	46bd      	mov	sp, r7
    476c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4770:	4770      	bx	lr
    4772:	bf00      	nop

00004774 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    4774:	b580      	push	{r7, lr}
    4776:	b084      	sub	sp, #16
    4778:	af00      	add	r7, sp, #0
    477a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    477c:	f001 f9c4 	bl	5b08 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4780:	687b      	ldr	r3, [r7, #4]
    4782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4784:	687b      	ldr	r3, [r7, #4]
    4786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4788:	429a      	cmp	r2, r3
    478a:	bf14      	ite	ne
    478c:	2300      	movne	r3, #0
    478e:	2301      	moveq	r3, #1
    4790:	b2db      	uxtb	r3, r3
    4792:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4794:	f001 f9ce 	bl	5b34 <vPortExitCritical>

	return xReturn;
    4798:	68fb      	ldr	r3, [r7, #12]
}
    479a:	4618      	mov	r0, r3
    479c:	3710      	adds	r7, #16
    479e:	46bd      	mov	sp, r7
    47a0:	bd80      	pop	{r7, pc}
    47a2:	bf00      	nop

000047a4 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    47a4:	b480      	push	{r7}
    47a6:	b085      	sub	sp, #20
    47a8:	af00      	add	r7, sp, #0
    47aa:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    47ac:	687b      	ldr	r3, [r7, #4]
    47ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    47b0:	687b      	ldr	r3, [r7, #4]
    47b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    47b4:	429a      	cmp	r2, r3
    47b6:	bf14      	ite	ne
    47b8:	2300      	movne	r3, #0
    47ba:	2301      	moveq	r3, #1
    47bc:	b2db      	uxtb	r3, r3
    47be:	60fb      	str	r3, [r7, #12]

	return xReturn;
    47c0:	68fb      	ldr	r3, [r7, #12]
}
    47c2:	4618      	mov	r0, r3
    47c4:	3714      	adds	r7, #20
    47c6:	46bd      	mov	sp, r7
    47c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    47cc:	4770      	bx	lr
    47ce:	bf00      	nop

000047d0 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    47d0:	b580      	push	{r7, lr}
    47d2:	b08a      	sub	sp, #40	; 0x28
    47d4:	af02      	add	r7, sp, #8
    47d6:	60f8      	str	r0, [r7, #12]
    47d8:	60b9      	str	r1, [r7, #8]
    47da:	603b      	str	r3, [r7, #0]
    47dc:	4613      	mov	r3, r2
    47de:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    47e0:	88fb      	ldrh	r3, [r7, #6]
    47e2:	4618      	mov	r0, r3
    47e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
    47e6:	f000 ffe5 	bl	57b4 <prvAllocateTCBAndStack>
    47ea:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    47ec:	69bb      	ldr	r3, [r7, #24]
    47ee:	2b00      	cmp	r3, #0
    47f0:	f000 80a1 	beq.w	4936 <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    47f4:	69bb      	ldr	r3, [r7, #24]
    47f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    47f8:	88fb      	ldrh	r3, [r7, #6]
    47fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    47fe:	3b01      	subs	r3, #1
    4800:	009b      	lsls	r3, r3, #2
    4802:	4413      	add	r3, r2
    4804:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    4806:	697b      	ldr	r3, [r7, #20]
    4808:	f023 0307 	bic.w	r3, r3, #7
    480c:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    480e:	88fb      	ldrh	r3, [r7, #6]
    4810:	9300      	str	r3, [sp, #0]
    4812:	69b8      	ldr	r0, [r7, #24]
    4814:	68b9      	ldr	r1, [r7, #8]
    4816:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    481a:	f000 febd 	bl	5598 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    481e:	6978      	ldr	r0, [r7, #20]
    4820:	68f9      	ldr	r1, [r7, #12]
    4822:	683a      	ldr	r2, [r7, #0]
    4824:	f001 f8f2 	bl	5a0c <pxPortInitialiseStack>
    4828:	4602      	mov	r2, r0
    482a:	69bb      	ldr	r3, [r7, #24]
    482c:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4830:	2b00      	cmp	r3, #0
    4832:	d002      	beq.n	483a <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4836:	69ba      	ldr	r2, [r7, #24]
    4838:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    483a:	f001 f965 	bl	5b08 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    483e:	f640 6370 	movw	r3, #3696	; 0xe70
    4842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4846:	681b      	ldr	r3, [r3, #0]
    4848:	1c5a      	adds	r2, r3, #1
    484a:	f640 6370 	movw	r3, #3696	; 0xe70
    484e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4852:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    4854:	f640 436c 	movw	r3, #3180	; 0xc6c
    4858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    485c:	681b      	ldr	r3, [r3, #0]
    485e:	2b00      	cmp	r3, #0
    4860:	d10f      	bne.n	4882 <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    4862:	f640 436c 	movw	r3, #3180	; 0xc6c
    4866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    486a:	69ba      	ldr	r2, [r7, #24]
    486c:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    486e:	f640 6370 	movw	r3, #3696	; 0xe70
    4872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4876:	681b      	ldr	r3, [r3, #0]
    4878:	2b01      	cmp	r3, #1
    487a:	d118      	bne.n	48ae <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    487c:	f000 fec2 	bl	5604 <prvInitialiseTaskLists>
    4880:	e015      	b.n	48ae <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    4882:	f640 6380 	movw	r3, #3712	; 0xe80
    4886:	f2c2 0300 	movt	r3, #8192	; 0x2000
    488a:	681b      	ldr	r3, [r3, #0]
    488c:	2b00      	cmp	r3, #0
    488e:	d10e      	bne.n	48ae <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    4890:	f640 436c 	movw	r3, #3180	; 0xc6c
    4894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4898:	681b      	ldr	r3, [r3, #0]
    489a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    489c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    489e:	429a      	cmp	r2, r3
    48a0:	d805      	bhi.n	48ae <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    48a2:	f640 436c 	movw	r3, #3180	; 0xc6c
    48a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48aa:	69ba      	ldr	r2, [r7, #24]
    48ac:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    48ae:	69bb      	ldr	r3, [r7, #24]
    48b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48b2:	f640 6378 	movw	r3, #3704	; 0xe78
    48b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48ba:	681b      	ldr	r3, [r3, #0]
    48bc:	429a      	cmp	r2, r3
    48be:	d906      	bls.n	48ce <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    48c0:	69bb      	ldr	r3, [r7, #24]
    48c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48c4:	f640 6378 	movw	r3, #3704	; 0xe78
    48c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48cc:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    48ce:	f640 6394 	movw	r3, #3732	; 0xe94
    48d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48d6:	681b      	ldr	r3, [r3, #0]
    48d8:	1c5a      	adds	r2, r3, #1
    48da:	f640 6394 	movw	r3, #3732	; 0xe94
    48de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48e2:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    48e4:	69bb      	ldr	r3, [r7, #24]
    48e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48e8:	f640 637c 	movw	r3, #3708	; 0xe7c
    48ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48f0:	681b      	ldr	r3, [r3, #0]
    48f2:	429a      	cmp	r2, r3
    48f4:	d906      	bls.n	4904 <xTaskGenericCreate+0x134>
    48f6:	69bb      	ldr	r3, [r7, #24]
    48f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48fa:	f640 637c 	movw	r3, #3708	; 0xe7c
    48fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4902:	601a      	str	r2, [r3, #0]
    4904:	69bb      	ldr	r3, [r7, #24]
    4906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4908:	4613      	mov	r3, r2
    490a:	009b      	lsls	r3, r3, #2
    490c:	4413      	add	r3, r2
    490e:	009b      	lsls	r3, r3, #2
    4910:	f640 4270 	movw	r2, #3184	; 0xc70
    4914:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4918:	441a      	add	r2, r3
    491a:	69bb      	ldr	r3, [r7, #24]
    491c:	3304      	adds	r3, #4
    491e:	4610      	mov	r0, r2
    4920:	4619      	mov	r1, r3
    4922:	f7ff fadf 	bl	3ee4 <vListInsertEnd>

			xReturn = pdPASS;
    4926:	2301      	movs	r3, #1
    4928:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    492a:	69b8      	ldr	r0, [r7, #24]
    492c:	f012 fdc0 	bl	174b0 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    4930:	f001 f900 	bl	5b34 <vPortExitCritical>
    4934:	e002      	b.n	493c <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4936:	f04f 33ff 	mov.w	r3, #4294967295
    493a:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    493c:	69fb      	ldr	r3, [r7, #28]
    493e:	2b01      	cmp	r3, #1
    4940:	d111      	bne.n	4966 <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    4942:	f640 6380 	movw	r3, #3712	; 0xe80
    4946:	f2c2 0300 	movt	r3, #8192	; 0x2000
    494a:	681b      	ldr	r3, [r3, #0]
    494c:	2b00      	cmp	r3, #0
    494e:	d00a      	beq.n	4966 <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    4950:	f640 436c 	movw	r3, #3180	; 0xc6c
    4954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4958:	681b      	ldr	r3, [r3, #0]
    495a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    495e:	429a      	cmp	r2, r3
    4960:	d201      	bcs.n	4966 <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    4962:	f001 f8c3 	bl	5aec <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    4966:	69fb      	ldr	r3, [r7, #28]
}
    4968:	4618      	mov	r0, r3
    496a:	3720      	adds	r7, #32
    496c:	46bd      	mov	sp, r7
    496e:	bd80      	pop	{r7, pc}

00004970 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    4970:	b580      	push	{r7, lr}
    4972:	b084      	sub	sp, #16
    4974:	af00      	add	r7, sp, #0
    4976:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4978:	f001 f8c6 	bl	5b08 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    497c:	f640 436c 	movw	r3, #3180	; 0xc6c
    4980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4984:	681b      	ldr	r3, [r3, #0]
    4986:	687a      	ldr	r2, [r7, #4]
    4988:	429a      	cmp	r2, r3
    498a:	d101      	bne.n	4990 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    498c:	2300      	movs	r3, #0
    498e:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    4990:	687b      	ldr	r3, [r7, #4]
    4992:	2b00      	cmp	r3, #0
    4994:	d105      	bne.n	49a2 <vTaskDelete+0x32>
    4996:	f640 436c 	movw	r3, #3180	; 0xc6c
    499a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    499e:	681b      	ldr	r3, [r3, #0]
    49a0:	e000      	b.n	49a4 <vTaskDelete+0x34>
    49a2:	687b      	ldr	r3, [r7, #4]
    49a4:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    49a6:	68fb      	ldr	r3, [r7, #12]
    49a8:	3304      	adds	r3, #4
    49aa:	4618      	mov	r0, r3
    49ac:	f7ff fafa 	bl	3fa4 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    49b0:	68fb      	ldr	r3, [r7, #12]
    49b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    49b4:	2b00      	cmp	r3, #0
    49b6:	d004      	beq.n	49c2 <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    49b8:	68fb      	ldr	r3, [r7, #12]
    49ba:	3318      	adds	r3, #24
    49bc:	4618      	mov	r0, r3
    49be:	f7ff faf1 	bl	3fa4 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    49c2:	68fb      	ldr	r3, [r7, #12]
    49c4:	3304      	adds	r3, #4
    49c6:	f640 6044 	movw	r0, #3652	; 0xe44
    49ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
    49ce:	4619      	mov	r1, r3
    49d0:	f7ff fa88 	bl	3ee4 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    49d4:	f640 6358 	movw	r3, #3672	; 0xe58
    49d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49dc:	681b      	ldr	r3, [r3, #0]
    49de:	1c5a      	adds	r2, r3, #1
    49e0:	f640 6358 	movw	r3, #3672	; 0xe58
    49e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49e8:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    49ea:	f640 6394 	movw	r3, #3732	; 0xe94
    49ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49f2:	681b      	ldr	r3, [r3, #0]
    49f4:	1c5a      	adds	r2, r3, #1
    49f6:	f640 6394 	movw	r3, #3732	; 0xe94
    49fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49fe:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4a00:	f001 f898 	bl	5b34 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4a04:	f640 6380 	movw	r3, #3712	; 0xe80
    4a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a0c:	681b      	ldr	r3, [r3, #0]
    4a0e:	2b00      	cmp	r3, #0
    4a10:	d004      	beq.n	4a1c <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4a12:	687b      	ldr	r3, [r7, #4]
    4a14:	2b00      	cmp	r3, #0
    4a16:	d101      	bne.n	4a1c <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    4a18:	f001 f868 	bl	5aec <vPortYieldFromISR>
			}
		}
	}
    4a1c:	3710      	adds	r7, #16
    4a1e:	46bd      	mov	sp, r7
    4a20:	bd80      	pop	{r7, pc}
    4a22:	bf00      	nop

00004a24 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4a24:	b580      	push	{r7, lr}
    4a26:	b086      	sub	sp, #24
    4a28:	af00      	add	r7, sp, #0
    4a2a:	6078      	str	r0, [r7, #4]
    4a2c:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4a2e:	2300      	movs	r3, #0
    4a30:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    4a32:	f000 fa8b 	bl	4f4c <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4a36:	687b      	ldr	r3, [r7, #4]
    4a38:	681a      	ldr	r2, [r3, #0]
    4a3a:	683b      	ldr	r3, [r7, #0]
    4a3c:	4413      	add	r3, r2
    4a3e:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    4a40:	687b      	ldr	r3, [r7, #4]
    4a42:	681a      	ldr	r2, [r3, #0]
    4a44:	f640 6374 	movw	r3, #3700	; 0xe74
    4a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a4c:	681b      	ldr	r3, [r3, #0]
    4a4e:	429a      	cmp	r2, r3
    4a50:	d90f      	bls.n	4a72 <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    4a52:	687b      	ldr	r3, [r7, #4]
    4a54:	681a      	ldr	r2, [r3, #0]
    4a56:	693b      	ldr	r3, [r7, #16]
    4a58:	429a      	cmp	r2, r3
    4a5a:	d919      	bls.n	4a90 <vTaskDelayUntil+0x6c>
    4a5c:	f640 6374 	movw	r3, #3700	; 0xe74
    4a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a64:	681b      	ldr	r3, [r3, #0]
    4a66:	693a      	ldr	r2, [r7, #16]
    4a68:	429a      	cmp	r2, r3
    4a6a:	d911      	bls.n	4a90 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4a6c:	2301      	movs	r3, #1
    4a6e:	617b      	str	r3, [r7, #20]
    4a70:	e00e      	b.n	4a90 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4a72:	687b      	ldr	r3, [r7, #4]
    4a74:	681a      	ldr	r2, [r3, #0]
    4a76:	693b      	ldr	r3, [r7, #16]
    4a78:	429a      	cmp	r2, r3
    4a7a:	d807      	bhi.n	4a8c <vTaskDelayUntil+0x68>
    4a7c:	f640 6374 	movw	r3, #3700	; 0xe74
    4a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a84:	681b      	ldr	r3, [r3, #0]
    4a86:	693a      	ldr	r2, [r7, #16]
    4a88:	429a      	cmp	r2, r3
    4a8a:	d901      	bls.n	4a90 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4a8c:	2301      	movs	r3, #1
    4a8e:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4a90:	687b      	ldr	r3, [r7, #4]
    4a92:	693a      	ldr	r2, [r7, #16]
    4a94:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    4a96:	697b      	ldr	r3, [r7, #20]
    4a98:	2b00      	cmp	r3, #0
    4a9a:	d00b      	beq.n	4ab4 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4a9c:	f640 436c 	movw	r3, #3180	; 0xc6c
    4aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aa4:	681b      	ldr	r3, [r3, #0]
    4aa6:	3304      	adds	r3, #4
    4aa8:	4618      	mov	r0, r3
    4aaa:	f7ff fa7b 	bl	3fa4 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4aae:	6938      	ldr	r0, [r7, #16]
    4ab0:	f000 fe3c 	bl	572c <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4ab4:	f000 fa5c 	bl	4f70 <xTaskResumeAll>
    4ab8:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4aba:	68fb      	ldr	r3, [r7, #12]
    4abc:	2b00      	cmp	r3, #0
    4abe:	d101      	bne.n	4ac4 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    4ac0:	f001 f814 	bl	5aec <vPortYieldFromISR>
		}
	}
    4ac4:	3718      	adds	r7, #24
    4ac6:	46bd      	mov	sp, r7
    4ac8:	bd80      	pop	{r7, pc}
    4aca:	bf00      	nop

00004acc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4acc:	b580      	push	{r7, lr}
    4ace:	b084      	sub	sp, #16
    4ad0:	af00      	add	r7, sp, #0
    4ad2:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4ad4:	2300      	movs	r3, #0
    4ad6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4ad8:	687b      	ldr	r3, [r7, #4]
    4ada:	2b00      	cmp	r3, #0
    4adc:	d018      	beq.n	4b10 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4ade:	f000 fa35 	bl	4f4c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4ae2:	f640 6374 	movw	r3, #3700	; 0xe74
    4ae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aea:	681a      	ldr	r2, [r3, #0]
    4aec:	687b      	ldr	r3, [r7, #4]
    4aee:	4413      	add	r3, r2
    4af0:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4af2:	f640 436c 	movw	r3, #3180	; 0xc6c
    4af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4afa:	681b      	ldr	r3, [r3, #0]
    4afc:	3304      	adds	r3, #4
    4afe:	4618      	mov	r0, r3
    4b00:	f7ff fa50 	bl	3fa4 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4b04:	68b8      	ldr	r0, [r7, #8]
    4b06:	f000 fe11 	bl	572c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4b0a:	f000 fa31 	bl	4f70 <xTaskResumeAll>
    4b0e:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4b10:	68fb      	ldr	r3, [r7, #12]
    4b12:	2b00      	cmp	r3, #0
    4b14:	d101      	bne.n	4b1a <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    4b16:	f000 ffe9 	bl	5aec <vPortYieldFromISR>
		}
	}
    4b1a:	3710      	adds	r7, #16
    4b1c:	46bd      	mov	sp, r7
    4b1e:	bd80      	pop	{r7, pc}

00004b20 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4b20:	b580      	push	{r7, lr}
    4b22:	b084      	sub	sp, #16
    4b24:	af00      	add	r7, sp, #0
    4b26:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4b28:	f000 ffee 	bl	5b08 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4b2c:	687b      	ldr	r3, [r7, #4]
    4b2e:	2b00      	cmp	r3, #0
    4b30:	d105      	bne.n	4b3e <uxTaskPriorityGet+0x1e>
    4b32:	f640 436c 	movw	r3, #3180	; 0xc6c
    4b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b3a:	681b      	ldr	r3, [r3, #0]
    4b3c:	e000      	b.n	4b40 <uxTaskPriorityGet+0x20>
    4b3e:	687b      	ldr	r3, [r7, #4]
    4b40:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    4b42:	68fb      	ldr	r3, [r7, #12]
    4b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4b46:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    4b48:	f000 fff4 	bl	5b34 <vPortExitCritical>

		return uxReturn;
    4b4c:	68bb      	ldr	r3, [r7, #8]
	}
    4b4e:	4618      	mov	r0, r3
    4b50:	3710      	adds	r7, #16
    4b52:	46bd      	mov	sp, r7
    4b54:	bd80      	pop	{r7, pc}
    4b56:	bf00      	nop

00004b58 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    4b58:	b580      	push	{r7, lr}
    4b5a:	b086      	sub	sp, #24
    4b5c:	af00      	add	r7, sp, #0
    4b5e:	6078      	str	r0, [r7, #4]
    4b60:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4b62:	2300      	movs	r3, #0
    4b64:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    4b66:	683b      	ldr	r3, [r7, #0]
    4b68:	2b13      	cmp	r3, #19
    4b6a:	d901      	bls.n	4b70 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4b6c:	2313      	movs	r3, #19
    4b6e:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4b70:	f000 ffca 	bl	5b08 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4b74:	f640 436c 	movw	r3, #3180	; 0xc6c
    4b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b7c:	681b      	ldr	r3, [r3, #0]
    4b7e:	687a      	ldr	r2, [r7, #4]
    4b80:	429a      	cmp	r2, r3
    4b82:	d101      	bne.n	4b88 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4b84:	2300      	movs	r3, #0
    4b86:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4b88:	687b      	ldr	r3, [r7, #4]
    4b8a:	2b00      	cmp	r3, #0
    4b8c:	d105      	bne.n	4b9a <vTaskPrioritySet+0x42>
    4b8e:	f640 436c 	movw	r3, #3180	; 0xc6c
    4b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b96:	681b      	ldr	r3, [r3, #0]
    4b98:	e000      	b.n	4b9c <vTaskPrioritySet+0x44>
    4b9a:	687b      	ldr	r3, [r7, #4]
    4b9c:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    4b9e:	693b      	ldr	r3, [r7, #16]
    4ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4ba2:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    4ba4:	68fa      	ldr	r2, [r7, #12]
    4ba6:	683b      	ldr	r3, [r7, #0]
    4ba8:	429a      	cmp	r2, r3
    4baa:	d058      	beq.n	4c5e <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4bac:	683a      	ldr	r2, [r7, #0]
    4bae:	68fb      	ldr	r3, [r7, #12]
    4bb0:	429a      	cmp	r2, r3
    4bb2:	d905      	bls.n	4bc0 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4bb4:	687b      	ldr	r3, [r7, #4]
    4bb6:	2b00      	cmp	r3, #0
    4bb8:	d007      	beq.n	4bca <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    4bba:	2301      	movs	r3, #1
    4bbc:	617b      	str	r3, [r7, #20]
    4bbe:	e004      	b.n	4bca <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4bc0:	687b      	ldr	r3, [r7, #4]
    4bc2:	2b00      	cmp	r3, #0
    4bc4:	d101      	bne.n	4bca <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    4bc6:	2301      	movs	r3, #1
    4bc8:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4bca:	693b      	ldr	r3, [r7, #16]
    4bcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4bce:	693b      	ldr	r3, [r7, #16]
    4bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4bd2:	429a      	cmp	r2, r3
    4bd4:	d102      	bne.n	4bdc <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    4bd6:	693b      	ldr	r3, [r7, #16]
    4bd8:	683a      	ldr	r2, [r7, #0]
    4bda:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4bdc:	693b      	ldr	r3, [r7, #16]
    4bde:	683a      	ldr	r2, [r7, #0]
    4be0:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    4be2:	683b      	ldr	r3, [r7, #0]
    4be4:	f1c3 0214 	rsb	r2, r3, #20
    4be8:	693b      	ldr	r3, [r7, #16]
    4bea:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4bec:	693b      	ldr	r3, [r7, #16]
    4bee:	6959      	ldr	r1, [r3, #20]
    4bf0:	68fa      	ldr	r2, [r7, #12]
    4bf2:	4613      	mov	r3, r2
    4bf4:	009b      	lsls	r3, r3, #2
    4bf6:	4413      	add	r3, r2
    4bf8:	009b      	lsls	r3, r3, #2
    4bfa:	f640 4270 	movw	r2, #3184	; 0xc70
    4bfe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4c02:	4413      	add	r3, r2
    4c04:	4299      	cmp	r1, r3
    4c06:	d125      	bne.n	4c54 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4c08:	693b      	ldr	r3, [r7, #16]
    4c0a:	3304      	adds	r3, #4
    4c0c:	4618      	mov	r0, r3
    4c0e:	f7ff f9c9 	bl	3fa4 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4c12:	693b      	ldr	r3, [r7, #16]
    4c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c16:	f640 637c 	movw	r3, #3708	; 0xe7c
    4c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c1e:	681b      	ldr	r3, [r3, #0]
    4c20:	429a      	cmp	r2, r3
    4c22:	d906      	bls.n	4c32 <vTaskPrioritySet+0xda>
    4c24:	693b      	ldr	r3, [r7, #16]
    4c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c28:	f640 637c 	movw	r3, #3708	; 0xe7c
    4c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c30:	601a      	str	r2, [r3, #0]
    4c32:	693b      	ldr	r3, [r7, #16]
    4c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c36:	4613      	mov	r3, r2
    4c38:	009b      	lsls	r3, r3, #2
    4c3a:	4413      	add	r3, r2
    4c3c:	009b      	lsls	r3, r3, #2
    4c3e:	f640 4270 	movw	r2, #3184	; 0xc70
    4c42:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4c46:	441a      	add	r2, r3
    4c48:	693b      	ldr	r3, [r7, #16]
    4c4a:	3304      	adds	r3, #4
    4c4c:	4610      	mov	r0, r2
    4c4e:	4619      	mov	r1, r3
    4c50:	f7ff f948 	bl	3ee4 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4c54:	697b      	ldr	r3, [r7, #20]
    4c56:	2b01      	cmp	r3, #1
    4c58:	d101      	bne.n	4c5e <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    4c5a:	f000 ff47 	bl	5aec <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4c5e:	f000 ff69 	bl	5b34 <vPortExitCritical>
	}
    4c62:	3718      	adds	r7, #24
    4c64:	46bd      	mov	sp, r7
    4c66:	bd80      	pop	{r7, pc}

00004c68 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    4c68:	b580      	push	{r7, lr}
    4c6a:	b084      	sub	sp, #16
    4c6c:	af00      	add	r7, sp, #0
    4c6e:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4c70:	f000 ff4a 	bl	5b08 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4c74:	f640 436c 	movw	r3, #3180	; 0xc6c
    4c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c7c:	681b      	ldr	r3, [r3, #0]
    4c7e:	687a      	ldr	r2, [r7, #4]
    4c80:	429a      	cmp	r2, r3
    4c82:	d101      	bne.n	4c88 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4c84:	2300      	movs	r3, #0
    4c86:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4c88:	687b      	ldr	r3, [r7, #4]
    4c8a:	2b00      	cmp	r3, #0
    4c8c:	d105      	bne.n	4c9a <vTaskSuspend+0x32>
    4c8e:	f640 436c 	movw	r3, #3180	; 0xc6c
    4c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c96:	681b      	ldr	r3, [r3, #0]
    4c98:	e000      	b.n	4c9c <vTaskSuspend+0x34>
    4c9a:	687b      	ldr	r3, [r7, #4]
    4c9c:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4c9e:	68fb      	ldr	r3, [r7, #12]
    4ca0:	3304      	adds	r3, #4
    4ca2:	4618      	mov	r0, r3
    4ca4:	f7ff f97e 	bl	3fa4 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4ca8:	68fb      	ldr	r3, [r7, #12]
    4caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4cac:	2b00      	cmp	r3, #0
    4cae:	d004      	beq.n	4cba <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4cb0:	68fb      	ldr	r3, [r7, #12]
    4cb2:	3318      	adds	r3, #24
    4cb4:	4618      	mov	r0, r3
    4cb6:	f7ff f975 	bl	3fa4 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4cba:	68fb      	ldr	r3, [r7, #12]
    4cbc:	3304      	adds	r3, #4
    4cbe:	f640 605c 	movw	r0, #3676	; 0xe5c
    4cc2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4cc6:	4619      	mov	r1, r3
    4cc8:	f7ff f90c 	bl	3ee4 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4ccc:	f000 ff32 	bl	5b34 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4cd0:	687b      	ldr	r3, [r7, #4]
    4cd2:	2b00      	cmp	r3, #0
    4cd4:	d11e      	bne.n	4d14 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4cd6:	f640 6380 	movw	r3, #3712	; 0xe80
    4cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cde:	681b      	ldr	r3, [r3, #0]
    4ce0:	2b00      	cmp	r3, #0
    4ce2:	d002      	beq.n	4cea <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4ce4:	f000 ff02 	bl	5aec <vPortYieldFromISR>
    4ce8:	e014      	b.n	4d14 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4cea:	f640 635c 	movw	r3, #3676	; 0xe5c
    4cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cf2:	681a      	ldr	r2, [r3, #0]
    4cf4:	f640 6370 	movw	r3, #3696	; 0xe70
    4cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cfc:	681b      	ldr	r3, [r3, #0]
    4cfe:	429a      	cmp	r2, r3
    4d00:	d106      	bne.n	4d10 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4d02:	f640 436c 	movw	r3, #3180	; 0xc6c
    4d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d0a:	2200      	movs	r2, #0
    4d0c:	601a      	str	r2, [r3, #0]
    4d0e:	e001      	b.n	4d14 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    4d10:	f000 fadc 	bl	52cc <vTaskSwitchContext>
				}
			}
		}
	}
    4d14:	3710      	adds	r7, #16
    4d16:	46bd      	mov	sp, r7
    4d18:	bd80      	pop	{r7, pc}
    4d1a:	bf00      	nop

00004d1c <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4d1c:	b480      	push	{r7}
    4d1e:	b085      	sub	sp, #20
    4d20:	af00      	add	r7, sp, #0
    4d22:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4d24:	2300      	movs	r3, #0
    4d26:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    4d28:	687b      	ldr	r3, [r7, #4]
    4d2a:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4d2c:	68bb      	ldr	r3, [r7, #8]
    4d2e:	695a      	ldr	r2, [r3, #20]
    4d30:	f640 635c 	movw	r3, #3676	; 0xe5c
    4d34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d38:	429a      	cmp	r2, r3
    4d3a:	d10d      	bne.n	4d58 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    4d3c:	68bb      	ldr	r3, [r7, #8]
    4d3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4d40:	f640 6330 	movw	r3, #3632	; 0xe30
    4d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d48:	429a      	cmp	r2, r3
    4d4a:	d005      	beq.n	4d58 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4d4c:	68bb      	ldr	r3, [r7, #8]
    4d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d50:	2b00      	cmp	r3, #0
    4d52:	d101      	bne.n	4d58 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    4d54:	2301      	movs	r3, #1
    4d56:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    4d58:	68fb      	ldr	r3, [r7, #12]
	}
    4d5a:	4618      	mov	r0, r3
    4d5c:	3714      	adds	r7, #20
    4d5e:	46bd      	mov	sp, r7
    4d60:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d64:	4770      	bx	lr
    4d66:	bf00      	nop

00004d68 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    4d68:	b580      	push	{r7, lr}
    4d6a:	b084      	sub	sp, #16
    4d6c:	af00      	add	r7, sp, #0
    4d6e:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    4d70:	687b      	ldr	r3, [r7, #4]
    4d72:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    4d74:	68fb      	ldr	r3, [r7, #12]
    4d76:	2b00      	cmp	r3, #0
    4d78:	d043      	beq.n	4e02 <vTaskResume+0x9a>
    4d7a:	f640 436c 	movw	r3, #3180	; 0xc6c
    4d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d82:	681b      	ldr	r3, [r3, #0]
    4d84:	68fa      	ldr	r2, [r7, #12]
    4d86:	429a      	cmp	r2, r3
    4d88:	d03b      	beq.n	4e02 <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    4d8a:	f000 febd 	bl	5b08 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4d8e:	68f8      	ldr	r0, [r7, #12]
    4d90:	f7ff ffc4 	bl	4d1c <xTaskIsTaskSuspended>
    4d94:	4603      	mov	r3, r0
    4d96:	2b01      	cmp	r3, #1
    4d98:	d131      	bne.n	4dfe <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4d9a:	68fb      	ldr	r3, [r7, #12]
    4d9c:	3304      	adds	r3, #4
    4d9e:	4618      	mov	r0, r3
    4da0:	f7ff f900 	bl	3fa4 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4da4:	68fb      	ldr	r3, [r7, #12]
    4da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4da8:	f640 637c 	movw	r3, #3708	; 0xe7c
    4dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4db0:	681b      	ldr	r3, [r3, #0]
    4db2:	429a      	cmp	r2, r3
    4db4:	d906      	bls.n	4dc4 <vTaskResume+0x5c>
    4db6:	68fb      	ldr	r3, [r7, #12]
    4db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4dba:	f640 637c 	movw	r3, #3708	; 0xe7c
    4dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dc2:	601a      	str	r2, [r3, #0]
    4dc4:	68fb      	ldr	r3, [r7, #12]
    4dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4dc8:	4613      	mov	r3, r2
    4dca:	009b      	lsls	r3, r3, #2
    4dcc:	4413      	add	r3, r2
    4dce:	009b      	lsls	r3, r3, #2
    4dd0:	f640 4270 	movw	r2, #3184	; 0xc70
    4dd4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4dd8:	441a      	add	r2, r3
    4dda:	68fb      	ldr	r3, [r7, #12]
    4ddc:	3304      	adds	r3, #4
    4dde:	4610      	mov	r0, r2
    4de0:	4619      	mov	r1, r3
    4de2:	f7ff f87f 	bl	3ee4 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4de6:	68fb      	ldr	r3, [r7, #12]
    4de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4dea:	f640 436c 	movw	r3, #3180	; 0xc6c
    4dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4df2:	681b      	ldr	r3, [r3, #0]
    4df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4df6:	429a      	cmp	r2, r3
    4df8:	d301      	bcc.n	4dfe <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    4dfa:	f000 fe77 	bl	5aec <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    4dfe:	f000 fe99 	bl	5b34 <vPortExitCritical>
		}
	}
    4e02:	3710      	adds	r7, #16
    4e04:	46bd      	mov	sp, r7
    4e06:	bd80      	pop	{r7, pc}

00004e08 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    4e08:	b580      	push	{r7, lr}
    4e0a:	b086      	sub	sp, #24
    4e0c:	af00      	add	r7, sp, #0
    4e0e:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    4e10:	2300      	movs	r3, #0
    4e12:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    4e14:	687b      	ldr	r3, [r7, #4]
    4e16:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4e18:	2300      	movs	r3, #0
    4e1a:	60fb      	str	r3, [r7, #12]
    4e1c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4e20:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4e24:	6938      	ldr	r0, [r7, #16]
    4e26:	f7ff ff79 	bl	4d1c <xTaskIsTaskSuspended>
    4e2a:	4603      	mov	r3, r0
    4e2c:	2b01      	cmp	r3, #1
    4e2e:	d144      	bne.n	4eba <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4e30:	f640 6384 	movw	r3, #3716	; 0xe84
    4e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e38:	681b      	ldr	r3, [r3, #0]
    4e3a:	2b00      	cmp	r3, #0
    4e3c:	d134      	bne.n	4ea8 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    4e3e:	693b      	ldr	r3, [r7, #16]
    4e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e42:	f640 436c 	movw	r3, #3180	; 0xc6c
    4e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e4a:	681b      	ldr	r3, [r3, #0]
    4e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e4e:	429a      	cmp	r2, r3
    4e50:	bf34      	ite	cc
    4e52:	2300      	movcc	r3, #0
    4e54:	2301      	movcs	r3, #1
    4e56:	b2db      	uxtb	r3, r3
    4e58:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4e5a:	693b      	ldr	r3, [r7, #16]
    4e5c:	3304      	adds	r3, #4
    4e5e:	4618      	mov	r0, r3
    4e60:	f7ff f8a0 	bl	3fa4 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4e64:	693b      	ldr	r3, [r7, #16]
    4e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e68:	f640 637c 	movw	r3, #3708	; 0xe7c
    4e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e70:	681b      	ldr	r3, [r3, #0]
    4e72:	429a      	cmp	r2, r3
    4e74:	d906      	bls.n	4e84 <xTaskResumeFromISR+0x7c>
    4e76:	693b      	ldr	r3, [r7, #16]
    4e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e7a:	f640 637c 	movw	r3, #3708	; 0xe7c
    4e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e82:	601a      	str	r2, [r3, #0]
    4e84:	693b      	ldr	r3, [r7, #16]
    4e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e88:	4613      	mov	r3, r2
    4e8a:	009b      	lsls	r3, r3, #2
    4e8c:	4413      	add	r3, r2
    4e8e:	009b      	lsls	r3, r3, #2
    4e90:	f640 4270 	movw	r2, #3184	; 0xc70
    4e94:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4e98:	441a      	add	r2, r3
    4e9a:	693b      	ldr	r3, [r7, #16]
    4e9c:	3304      	adds	r3, #4
    4e9e:	4610      	mov	r0, r2
    4ea0:	4619      	mov	r1, r3
    4ea2:	f7ff f81f 	bl	3ee4 <vListInsertEnd>
    4ea6:	e008      	b.n	4eba <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4ea8:	693b      	ldr	r3, [r7, #16]
    4eaa:	3318      	adds	r3, #24
    4eac:	f640 6030 	movw	r0, #3632	; 0xe30
    4eb0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4eb4:	4619      	mov	r1, r3
    4eb6:	f7ff f815 	bl	3ee4 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4eba:	f04f 0000 	mov.w	r0, #0
    4ebe:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    4ec2:	697b      	ldr	r3, [r7, #20]
	}
    4ec4:	4618      	mov	r0, r3
    4ec6:	3718      	adds	r7, #24
    4ec8:	46bd      	mov	sp, r7
    4eca:	bd80      	pop	{r7, pc}

00004ecc <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    4ecc:	b580      	push	{r7, lr}
    4ece:	b086      	sub	sp, #24
    4ed0:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    4ed2:	2300      	movs	r3, #0
    4ed4:	9300      	str	r3, [sp, #0]
    4ed6:	2300      	movs	r3, #0
    4ed8:	9301      	str	r3, [sp, #4]
    4eda:	2300      	movs	r3, #0
    4edc:	9302      	str	r3, [sp, #8]
    4ede:	2300      	movs	r3, #0
    4ee0:	9303      	str	r3, [sp, #12]
    4ee2:	f245 5085 	movw	r0, #21893	; 0x5585
    4ee6:	f2c0 0000 	movt	r0, #0
    4eea:	f648 0150 	movw	r1, #34896	; 0x8850
    4eee:	f2c0 0101 	movt	r1, #1
    4ef2:	2280      	movs	r2, #128	; 0x80
    4ef4:	2300      	movs	r3, #0
    4ef6:	f7ff fc6b 	bl	47d0 <xTaskGenericCreate>
    4efa:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    4efc:	687b      	ldr	r3, [r7, #4]
    4efe:	2b01      	cmp	r3, #1
    4f00:	d111      	bne.n	4f26 <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    4f02:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4f06:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    4f0a:	f640 6380 	movw	r3, #3712	; 0xe80
    4f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f12:	2201      	movs	r2, #1
    4f14:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    4f16:	f640 6374 	movw	r3, #3700	; 0xe74
    4f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f1e:	2200      	movs	r2, #0
    4f20:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    4f22:	f000 fdb5 	bl	5a90 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    4f26:	3708      	adds	r7, #8
    4f28:	46bd      	mov	sp, r7
    4f2a:	bd80      	pop	{r7, pc}

00004f2c <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    4f2c:	b580      	push	{r7, lr}
    4f2e:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    4f30:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4f34:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    4f38:	f640 6380 	movw	r3, #3712	; 0xe80
    4f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f40:	2200      	movs	r2, #0
    4f42:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    4f44:	f000 fdcc 	bl	5ae0 <vPortEndScheduler>
}
    4f48:	bd80      	pop	{r7, pc}
    4f4a:	bf00      	nop

00004f4c <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    4f4c:	b480      	push	{r7}
    4f4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    4f50:	f640 6384 	movw	r3, #3716	; 0xe84
    4f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f58:	681b      	ldr	r3, [r3, #0]
    4f5a:	1c5a      	adds	r2, r3, #1
    4f5c:	f640 6384 	movw	r3, #3716	; 0xe84
    4f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f64:	601a      	str	r2, [r3, #0]
}
    4f66:	46bd      	mov	sp, r7
    4f68:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f6c:	4770      	bx	lr
    4f6e:	bf00      	nop

00004f70 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    4f70:	b590      	push	{r4, r7, lr}
    4f72:	b083      	sub	sp, #12
    4f74:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4f76:	2300      	movs	r3, #0
    4f78:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    4f7a:	f000 fdc5 	bl	5b08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    4f7e:	f640 6384 	movw	r3, #3716	; 0xe84
    4f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f86:	681b      	ldr	r3, [r3, #0]
    4f88:	1e5a      	subs	r2, r3, #1
    4f8a:	f640 6384 	movw	r3, #3716	; 0xe84
    4f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f92:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4f94:	f640 6384 	movw	r3, #3716	; 0xe84
    4f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f9c:	681b      	ldr	r3, [r3, #0]
    4f9e:	2b00      	cmp	r3, #0
    4fa0:	d177      	bne.n	5092 <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    4fa2:	f640 6370 	movw	r3, #3696	; 0xe70
    4fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4faa:	681b      	ldr	r3, [r3, #0]
    4fac:	2b00      	cmp	r3, #0
    4fae:	d070      	beq.n	5092 <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    4fb0:	2300      	movs	r3, #0
    4fb2:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4fb4:	e036      	b.n	5024 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    4fb6:	f640 6330 	movw	r3, #3632	; 0xe30
    4fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fbe:	68db      	ldr	r3, [r3, #12]
    4fc0:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    4fc2:	f104 0318 	add.w	r3, r4, #24
    4fc6:	4618      	mov	r0, r3
    4fc8:	f7fe ffec 	bl	3fa4 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    4fcc:	1d23      	adds	r3, r4, #4
    4fce:	4618      	mov	r0, r3
    4fd0:	f7fe ffe8 	bl	3fa4 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4fd4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4fd6:	f640 637c 	movw	r3, #3708	; 0xe7c
    4fda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fde:	681b      	ldr	r3, [r3, #0]
    4fe0:	429a      	cmp	r2, r3
    4fe2:	d905      	bls.n	4ff0 <xTaskResumeAll+0x80>
    4fe4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4fe6:	f640 637c 	movw	r3, #3708	; 0xe7c
    4fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fee:	601a      	str	r2, [r3, #0]
    4ff0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4ff2:	4613      	mov	r3, r2
    4ff4:	009b      	lsls	r3, r3, #2
    4ff6:	4413      	add	r3, r2
    4ff8:	009b      	lsls	r3, r3, #2
    4ffa:	f640 4270 	movw	r2, #3184	; 0xc70
    4ffe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5002:	441a      	add	r2, r3
    5004:	1d23      	adds	r3, r4, #4
    5006:	4610      	mov	r0, r2
    5008:	4619      	mov	r1, r3
    500a:	f7fe ff6b 	bl	3ee4 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    500e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5010:	f640 436c 	movw	r3, #3180	; 0xc6c
    5014:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5018:	681b      	ldr	r3, [r3, #0]
    501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    501c:	429a      	cmp	r2, r3
    501e:	d301      	bcc.n	5024 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    5020:	2301      	movs	r3, #1
    5022:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    5024:	f640 6330 	movw	r3, #3632	; 0xe30
    5028:	f2c2 0300 	movt	r3, #8192	; 0x2000
    502c:	681b      	ldr	r3, [r3, #0]
    502e:	2b00      	cmp	r3, #0
    5030:	d1c1      	bne.n	4fb6 <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5032:	f640 6388 	movw	r3, #3720	; 0xe88
    5036:	f2c2 0300 	movt	r3, #8192	; 0x2000
    503a:	681b      	ldr	r3, [r3, #0]
    503c:	2b00      	cmp	r3, #0
    503e:	d014      	beq.n	506a <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5040:	e00c      	b.n	505c <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    5042:	f000 f865 	bl	5110 <vTaskIncrementTick>
						--uxMissedTicks;
    5046:	f640 6388 	movw	r3, #3720	; 0xe88
    504a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    504e:	681b      	ldr	r3, [r3, #0]
    5050:	1e5a      	subs	r2, r3, #1
    5052:	f640 6388 	movw	r3, #3720	; 0xe88
    5056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    505a:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    505c:	f640 6388 	movw	r3, #3720	; 0xe88
    5060:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5064:	681b      	ldr	r3, [r3, #0]
    5066:	2b00      	cmp	r3, #0
    5068:	d1eb      	bne.n	5042 <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    506a:	683b      	ldr	r3, [r7, #0]
    506c:	2b01      	cmp	r3, #1
    506e:	d006      	beq.n	507e <xTaskResumeAll+0x10e>
    5070:	f640 638c 	movw	r3, #3724	; 0xe8c
    5074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5078:	681b      	ldr	r3, [r3, #0]
    507a:	2b01      	cmp	r3, #1
    507c:	d109      	bne.n	5092 <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    507e:	2301      	movs	r3, #1
    5080:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    5082:	f640 638c 	movw	r3, #3724	; 0xe8c
    5086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    508a:	2200      	movs	r2, #0
    508c:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    508e:	f000 fd2d 	bl	5aec <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    5092:	f000 fd4f 	bl	5b34 <vPortExitCritical>

	return xAlreadyYielded;
    5096:	687b      	ldr	r3, [r7, #4]
}
    5098:	4618      	mov	r0, r3
    509a:	370c      	adds	r7, #12
    509c:	46bd      	mov	sp, r7
    509e:	bd90      	pop	{r4, r7, pc}

000050a0 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    50a0:	b580      	push	{r7, lr}
    50a2:	b082      	sub	sp, #8
    50a4:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    50a6:	f000 fd2f 	bl	5b08 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    50aa:	f640 6374 	movw	r3, #3700	; 0xe74
    50ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50b2:	681b      	ldr	r3, [r3, #0]
    50b4:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    50b6:	f000 fd3d 	bl	5b34 <vPortExitCritical>

	return xTicks;
    50ba:	687b      	ldr	r3, [r7, #4]
}
    50bc:	4618      	mov	r0, r3
    50be:	3708      	adds	r7, #8
    50c0:	46bd      	mov	sp, r7
    50c2:	bd80      	pop	{r7, pc}

000050c4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    50c4:	b480      	push	{r7}
    50c6:	b083      	sub	sp, #12
    50c8:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    50ca:	2300      	movs	r3, #0
    50cc:	607b      	str	r3, [r7, #4]
    50ce:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    50d2:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    50d6:	f640 6374 	movw	r3, #3700	; 0xe74
    50da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50de:	681b      	ldr	r3, [r3, #0]
    50e0:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    50e2:	f04f 0000 	mov.w	r0, #0
    50e6:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    50ea:	683b      	ldr	r3, [r7, #0]
}
    50ec:	4618      	mov	r0, r3
    50ee:	370c      	adds	r7, #12
    50f0:	46bd      	mov	sp, r7
    50f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    50f6:	4770      	bx	lr

000050f8 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    50f8:	b480      	push	{r7}
    50fa:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    50fc:	f640 6370 	movw	r3, #3696	; 0xe70
    5100:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5104:	681b      	ldr	r3, [r3, #0]
}
    5106:	4618      	mov	r0, r3
    5108:	46bd      	mov	sp, r7
    510a:	f85d 7b04 	ldr.w	r7, [sp], #4
    510e:	4770      	bx	lr

00005110 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    5110:	b580      	push	{r7, lr}
    5112:	b084      	sub	sp, #16
    5114:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5116:	f640 6384 	movw	r3, #3716	; 0xe84
    511a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    511e:	681b      	ldr	r3, [r3, #0]
    5120:	2b00      	cmp	r3, #0
    5122:	f040 80b9 	bne.w	5298 <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    5126:	f640 6374 	movw	r3, #3700	; 0xe74
    512a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    512e:	681b      	ldr	r3, [r3, #0]
    5130:	1c5a      	adds	r2, r3, #1
    5132:	f640 6374 	movw	r3, #3700	; 0xe74
    5136:	f2c2 0300 	movt	r3, #8192	; 0x2000
    513a:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    513c:	f640 6374 	movw	r3, #3700	; 0xe74
    5140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5144:	681b      	ldr	r3, [r3, #0]
    5146:	2b00      	cmp	r3, #0
    5148:	d13f      	bne.n	51ca <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    514a:	f640 6328 	movw	r3, #3624	; 0xe28
    514e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5152:	681b      	ldr	r3, [r3, #0]
    5154:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    5156:	f640 632c 	movw	r3, #3628	; 0xe2c
    515a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    515e:	681a      	ldr	r2, [r3, #0]
    5160:	f640 6328 	movw	r3, #3624	; 0xe28
    5164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5168:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    516a:	f640 632c 	movw	r3, #3628	; 0xe2c
    516e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5172:	68fa      	ldr	r2, [r7, #12]
    5174:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    5176:	f640 6390 	movw	r3, #3728	; 0xe90
    517a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    517e:	681b      	ldr	r3, [r3, #0]
    5180:	1c5a      	adds	r2, r3, #1
    5182:	f640 6390 	movw	r3, #3728	; 0xe90
    5186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    518a:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    518c:	f640 6328 	movw	r3, #3624	; 0xe28
    5190:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5194:	681b      	ldr	r3, [r3, #0]
    5196:	681b      	ldr	r3, [r3, #0]
    5198:	2b00      	cmp	r3, #0
    519a:	d107      	bne.n	51ac <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    519c:	f240 33e0 	movw	r3, #992	; 0x3e0
    51a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51a4:	f04f 32ff 	mov.w	r2, #4294967295
    51a8:	601a      	str	r2, [r3, #0]
    51aa:	e00e      	b.n	51ca <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    51ac:	f640 6328 	movw	r3, #3624	; 0xe28
    51b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51b4:	681b      	ldr	r3, [r3, #0]
    51b6:	68db      	ldr	r3, [r3, #12]
    51b8:	68db      	ldr	r3, [r3, #12]
    51ba:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    51bc:	68bb      	ldr	r3, [r7, #8]
    51be:	685a      	ldr	r2, [r3, #4]
    51c0:	f240 33e0 	movw	r3, #992	; 0x3e0
    51c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51c8:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    51ca:	f640 6374 	movw	r3, #3700	; 0xe74
    51ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51d2:	681a      	ldr	r2, [r3, #0]
    51d4:	f240 33e0 	movw	r3, #992	; 0x3e0
    51d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51dc:	681b      	ldr	r3, [r3, #0]
    51de:	429a      	cmp	r2, r3
    51e0:	d359      	bcc.n	5296 <vTaskIncrementTick+0x186>
    51e2:	f640 6328 	movw	r3, #3624	; 0xe28
    51e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ea:	681b      	ldr	r3, [r3, #0]
    51ec:	681b      	ldr	r3, [r3, #0]
    51ee:	2b00      	cmp	r3, #0
    51f0:	d107      	bne.n	5202 <vTaskIncrementTick+0xf2>
    51f2:	f240 33e0 	movw	r3, #992	; 0x3e0
    51f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51fa:	f04f 32ff 	mov.w	r2, #4294967295
    51fe:	601a      	str	r2, [r3, #0]
    5200:	e049      	b.n	5296 <vTaskIncrementTick+0x186>
    5202:	f640 6328 	movw	r3, #3624	; 0xe28
    5206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    520a:	681b      	ldr	r3, [r3, #0]
    520c:	68db      	ldr	r3, [r3, #12]
    520e:	68db      	ldr	r3, [r3, #12]
    5210:	60bb      	str	r3, [r7, #8]
    5212:	68bb      	ldr	r3, [r7, #8]
    5214:	685b      	ldr	r3, [r3, #4]
    5216:	607b      	str	r3, [r7, #4]
    5218:	f640 6374 	movw	r3, #3700	; 0xe74
    521c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5220:	681a      	ldr	r2, [r3, #0]
    5222:	687b      	ldr	r3, [r7, #4]
    5224:	429a      	cmp	r2, r3
    5226:	d206      	bcs.n	5236 <vTaskIncrementTick+0x126>
    5228:	f240 33e0 	movw	r3, #992	; 0x3e0
    522c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5230:	687a      	ldr	r2, [r7, #4]
    5232:	601a      	str	r2, [r3, #0]
    5234:	e02f      	b.n	5296 <vTaskIncrementTick+0x186>
    5236:	68bb      	ldr	r3, [r7, #8]
    5238:	3304      	adds	r3, #4
    523a:	4618      	mov	r0, r3
    523c:	f7fe feb2 	bl	3fa4 <vListRemove>
    5240:	68bb      	ldr	r3, [r7, #8]
    5242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5244:	2b00      	cmp	r3, #0
    5246:	d004      	beq.n	5252 <vTaskIncrementTick+0x142>
    5248:	68bb      	ldr	r3, [r7, #8]
    524a:	3318      	adds	r3, #24
    524c:	4618      	mov	r0, r3
    524e:	f7fe fea9 	bl	3fa4 <vListRemove>
    5252:	68bb      	ldr	r3, [r7, #8]
    5254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5256:	f640 637c 	movw	r3, #3708	; 0xe7c
    525a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    525e:	681b      	ldr	r3, [r3, #0]
    5260:	429a      	cmp	r2, r3
    5262:	d906      	bls.n	5272 <vTaskIncrementTick+0x162>
    5264:	68bb      	ldr	r3, [r7, #8]
    5266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5268:	f640 637c 	movw	r3, #3708	; 0xe7c
    526c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5270:	601a      	str	r2, [r3, #0]
    5272:	68bb      	ldr	r3, [r7, #8]
    5274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5276:	4613      	mov	r3, r2
    5278:	009b      	lsls	r3, r3, #2
    527a:	4413      	add	r3, r2
    527c:	009b      	lsls	r3, r3, #2
    527e:	f640 4270 	movw	r2, #3184	; 0xc70
    5282:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5286:	441a      	add	r2, r3
    5288:	68bb      	ldr	r3, [r7, #8]
    528a:	3304      	adds	r3, #4
    528c:	4610      	mov	r0, r2
    528e:	4619      	mov	r1, r3
    5290:	f7fe fe28 	bl	3ee4 <vListInsertEnd>
    5294:	e7a5      	b.n	51e2 <vTaskIncrementTick+0xd2>
    5296:	e00c      	b.n	52b2 <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    5298:	f640 6388 	movw	r3, #3720	; 0xe88
    529c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52a0:	681b      	ldr	r3, [r3, #0]
    52a2:	1c5a      	adds	r2, r3, #1
    52a4:	f640 6388 	movw	r3, #3720	; 0xe88
    52a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52ac:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    52ae:	f012 f911 	bl	174d4 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    52b2:	f640 6388 	movw	r3, #3720	; 0xe88
    52b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52ba:	681b      	ldr	r3, [r3, #0]
    52bc:	2b00      	cmp	r3, #0
    52be:	d101      	bne.n	52c4 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    52c0:	f012 f908 	bl	174d4 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    52c4:	3710      	adds	r7, #16
    52c6:	46bd      	mov	sp, r7
    52c8:	bd80      	pop	{r7, pc}
    52ca:	bf00      	nop

000052cc <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    52cc:	b580      	push	{r7, lr}
    52ce:	b082      	sub	sp, #8
    52d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    52d2:	f640 6384 	movw	r3, #3716	; 0xe84
    52d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52da:	681b      	ldr	r3, [r3, #0]
    52dc:	2b00      	cmp	r3, #0
    52de:	d006      	beq.n	52ee <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    52e0:	f640 638c 	movw	r3, #3724	; 0xe8c
    52e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52e8:	2201      	movs	r2, #1
    52ea:	601a      	str	r2, [r3, #0]
    52ec:	e047      	b.n	537e <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    52ee:	f012 f8eb 	bl	174c8 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    52f2:	e00a      	b.n	530a <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    52f4:	f640 637c 	movw	r3, #3708	; 0xe7c
    52f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52fc:	681b      	ldr	r3, [r3, #0]
    52fe:	1e5a      	subs	r2, r3, #1
    5300:	f640 637c 	movw	r3, #3708	; 0xe7c
    5304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5308:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    530a:	f640 637c 	movw	r3, #3708	; 0xe7c
    530e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5312:	6819      	ldr	r1, [r3, #0]
    5314:	f640 4270 	movw	r2, #3184	; 0xc70
    5318:	f2c2 0200 	movt	r2, #8192	; 0x2000
    531c:	460b      	mov	r3, r1
    531e:	009b      	lsls	r3, r3, #2
    5320:	440b      	add	r3, r1
    5322:	009b      	lsls	r3, r3, #2
    5324:	4413      	add	r3, r2
    5326:	681b      	ldr	r3, [r3, #0]
    5328:	2b00      	cmp	r3, #0
    532a:	d0e3      	beq.n	52f4 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    532c:	f640 637c 	movw	r3, #3708	; 0xe7c
    5330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5334:	681a      	ldr	r2, [r3, #0]
    5336:	4613      	mov	r3, r2
    5338:	009b      	lsls	r3, r3, #2
    533a:	4413      	add	r3, r2
    533c:	009b      	lsls	r3, r3, #2
    533e:	f640 4270 	movw	r2, #3184	; 0xc70
    5342:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5346:	4413      	add	r3, r2
    5348:	607b      	str	r3, [r7, #4]
    534a:	687b      	ldr	r3, [r7, #4]
    534c:	685b      	ldr	r3, [r3, #4]
    534e:	685a      	ldr	r2, [r3, #4]
    5350:	687b      	ldr	r3, [r7, #4]
    5352:	605a      	str	r2, [r3, #4]
    5354:	687b      	ldr	r3, [r7, #4]
    5356:	685a      	ldr	r2, [r3, #4]
    5358:	687b      	ldr	r3, [r7, #4]
    535a:	3308      	adds	r3, #8
    535c:	429a      	cmp	r2, r3
    535e:	d104      	bne.n	536a <vTaskSwitchContext+0x9e>
    5360:	687b      	ldr	r3, [r7, #4]
    5362:	685b      	ldr	r3, [r3, #4]
    5364:	685a      	ldr	r2, [r3, #4]
    5366:	687b      	ldr	r3, [r7, #4]
    5368:	605a      	str	r2, [r3, #4]
    536a:	687b      	ldr	r3, [r7, #4]
    536c:	685b      	ldr	r3, [r3, #4]
    536e:	68da      	ldr	r2, [r3, #12]
    5370:	f640 436c 	movw	r3, #3180	; 0xc6c
    5374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5378:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    537a:	f012 f89f 	bl	174bc <myTraceSwitchedIn>
	}
}
    537e:	3708      	adds	r7, #8
    5380:	46bd      	mov	sp, r7
    5382:	bd80      	pop	{r7, pc}

00005384 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    5384:	b580      	push	{r7, lr}
    5386:	b084      	sub	sp, #16
    5388:	af00      	add	r7, sp, #0
    538a:	6078      	str	r0, [r7, #4]
    538c:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    538e:	f640 436c 	movw	r3, #3180	; 0xc6c
    5392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5396:	681b      	ldr	r3, [r3, #0]
    5398:	3318      	adds	r3, #24
    539a:	6878      	ldr	r0, [r7, #4]
    539c:	4619      	mov	r1, r3
    539e:	f7fe fdc9 	bl	3f34 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    53a2:	f640 436c 	movw	r3, #3180	; 0xc6c
    53a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53aa:	681b      	ldr	r3, [r3, #0]
    53ac:	3304      	adds	r3, #4
    53ae:	4618      	mov	r0, r3
    53b0:	f7fe fdf8 	bl	3fa4 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    53b4:	683b      	ldr	r3, [r7, #0]
    53b6:	f1b3 3fff 	cmp.w	r3, #4294967295
    53ba:	d10d      	bne.n	53d8 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    53bc:	f640 436c 	movw	r3, #3180	; 0xc6c
    53c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53c4:	681b      	ldr	r3, [r3, #0]
    53c6:	3304      	adds	r3, #4
    53c8:	f640 605c 	movw	r0, #3676	; 0xe5c
    53cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    53d0:	4619      	mov	r1, r3
    53d2:	f7fe fd87 	bl	3ee4 <vListInsertEnd>
    53d6:	e00a      	b.n	53ee <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    53d8:	f640 6374 	movw	r3, #3700	; 0xe74
    53dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53e0:	681a      	ldr	r2, [r3, #0]
    53e2:	683b      	ldr	r3, [r7, #0]
    53e4:	4413      	add	r3, r2
    53e6:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    53e8:	68f8      	ldr	r0, [r7, #12]
    53ea:	f000 f99f 	bl	572c <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    53ee:	3710      	adds	r7, #16
    53f0:	46bd      	mov	sp, r7
    53f2:	bd80      	pop	{r7, pc}

000053f4 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    53f4:	b580      	push	{r7, lr}
    53f6:	b084      	sub	sp, #16
    53f8:	af00      	add	r7, sp, #0
    53fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    53fc:	687b      	ldr	r3, [r7, #4]
    53fe:	68db      	ldr	r3, [r3, #12]
    5400:	68db      	ldr	r3, [r3, #12]
    5402:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    5404:	68bb      	ldr	r3, [r7, #8]
    5406:	3318      	adds	r3, #24
    5408:	4618      	mov	r0, r3
    540a:	f7fe fdcb 	bl	3fa4 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    540e:	f640 6384 	movw	r3, #3716	; 0xe84
    5412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5416:	681b      	ldr	r3, [r3, #0]
    5418:	2b00      	cmp	r3, #0
    541a:	d126      	bne.n	546a <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    541c:	68bb      	ldr	r3, [r7, #8]
    541e:	3304      	adds	r3, #4
    5420:	4618      	mov	r0, r3
    5422:	f7fe fdbf 	bl	3fa4 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    5426:	68bb      	ldr	r3, [r7, #8]
    5428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    542a:	f640 637c 	movw	r3, #3708	; 0xe7c
    542e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5432:	681b      	ldr	r3, [r3, #0]
    5434:	429a      	cmp	r2, r3
    5436:	d906      	bls.n	5446 <xTaskRemoveFromEventList+0x52>
    5438:	68bb      	ldr	r3, [r7, #8]
    543a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    543c:	f640 637c 	movw	r3, #3708	; 0xe7c
    5440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5444:	601a      	str	r2, [r3, #0]
    5446:	68bb      	ldr	r3, [r7, #8]
    5448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    544a:	4613      	mov	r3, r2
    544c:	009b      	lsls	r3, r3, #2
    544e:	4413      	add	r3, r2
    5450:	009b      	lsls	r3, r3, #2
    5452:	f640 4270 	movw	r2, #3184	; 0xc70
    5456:	f2c2 0200 	movt	r2, #8192	; 0x2000
    545a:	441a      	add	r2, r3
    545c:	68bb      	ldr	r3, [r7, #8]
    545e:	3304      	adds	r3, #4
    5460:	4610      	mov	r0, r2
    5462:	4619      	mov	r1, r3
    5464:	f7fe fd3e 	bl	3ee4 <vListInsertEnd>
    5468:	e008      	b.n	547c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    546a:	68bb      	ldr	r3, [r7, #8]
    546c:	3318      	adds	r3, #24
    546e:	f640 6030 	movw	r0, #3632	; 0xe30
    5472:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5476:	4619      	mov	r1, r3
    5478:	f7fe fd34 	bl	3ee4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    547c:	68bb      	ldr	r3, [r7, #8]
    547e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5480:	f640 436c 	movw	r3, #3180	; 0xc6c
    5484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5488:	681b      	ldr	r3, [r3, #0]
    548a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    548c:	429a      	cmp	r2, r3
    548e:	d302      	bcc.n	5496 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    5490:	2301      	movs	r3, #1
    5492:	60fb      	str	r3, [r7, #12]
    5494:	e001      	b.n	549a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    5496:	2300      	movs	r3, #0
    5498:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    549a:	68fb      	ldr	r3, [r7, #12]
}
    549c:	4618      	mov	r0, r3
    549e:	3710      	adds	r7, #16
    54a0:	46bd      	mov	sp, r7
    54a2:	bd80      	pop	{r7, pc}

000054a4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    54a4:	b480      	push	{r7}
    54a6:	b083      	sub	sp, #12
    54a8:	af00      	add	r7, sp, #0
    54aa:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    54ac:	f640 6390 	movw	r3, #3728	; 0xe90
    54b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54b4:	681a      	ldr	r2, [r3, #0]
    54b6:	687b      	ldr	r3, [r7, #4]
    54b8:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    54ba:	f640 6374 	movw	r3, #3700	; 0xe74
    54be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54c2:	681a      	ldr	r2, [r3, #0]
    54c4:	687b      	ldr	r3, [r7, #4]
    54c6:	605a      	str	r2, [r3, #4]
}
    54c8:	370c      	adds	r7, #12
    54ca:	46bd      	mov	sp, r7
    54cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    54d0:	4770      	bx	lr
    54d2:	bf00      	nop

000054d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    54d4:	b580      	push	{r7, lr}
    54d6:	b084      	sub	sp, #16
    54d8:	af00      	add	r7, sp, #0
    54da:	6078      	str	r0, [r7, #4]
    54dc:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    54de:	f000 fb13 	bl	5b08 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    54e2:	683b      	ldr	r3, [r7, #0]
    54e4:	681b      	ldr	r3, [r3, #0]
    54e6:	f1b3 3fff 	cmp.w	r3, #4294967295
    54ea:	d102      	bne.n	54f2 <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    54ec:	2300      	movs	r3, #0
    54ee:	60fb      	str	r3, [r7, #12]
    54f0:	e035      	b.n	555e <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    54f2:	687b      	ldr	r3, [r7, #4]
    54f4:	681a      	ldr	r2, [r3, #0]
    54f6:	f640 6390 	movw	r3, #3728	; 0xe90
    54fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54fe:	681b      	ldr	r3, [r3, #0]
    5500:	429a      	cmp	r2, r3
    5502:	d00b      	beq.n	551c <xTaskCheckForTimeOut+0x48>
    5504:	687b      	ldr	r3, [r7, #4]
    5506:	685a      	ldr	r2, [r3, #4]
    5508:	f640 6374 	movw	r3, #3700	; 0xe74
    550c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5510:	681b      	ldr	r3, [r3, #0]
    5512:	429a      	cmp	r2, r3
    5514:	d802      	bhi.n	551c <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    5516:	2301      	movs	r3, #1
    5518:	60fb      	str	r3, [r7, #12]
    551a:	e020      	b.n	555e <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    551c:	f640 6374 	movw	r3, #3700	; 0xe74
    5520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5524:	681a      	ldr	r2, [r3, #0]
    5526:	687b      	ldr	r3, [r7, #4]
    5528:	685b      	ldr	r3, [r3, #4]
    552a:	1ad2      	subs	r2, r2, r3
    552c:	683b      	ldr	r3, [r7, #0]
    552e:	681b      	ldr	r3, [r3, #0]
    5530:	429a      	cmp	r2, r3
    5532:	d212      	bcs.n	555a <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    5534:	683b      	ldr	r3, [r7, #0]
    5536:	681a      	ldr	r2, [r3, #0]
    5538:	687b      	ldr	r3, [r7, #4]
    553a:	6859      	ldr	r1, [r3, #4]
    553c:	f640 6374 	movw	r3, #3700	; 0xe74
    5540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5544:	681b      	ldr	r3, [r3, #0]
    5546:	1acb      	subs	r3, r1, r3
    5548:	441a      	add	r2, r3
    554a:	683b      	ldr	r3, [r7, #0]
    554c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    554e:	6878      	ldr	r0, [r7, #4]
    5550:	f7ff ffa8 	bl	54a4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    5554:	2300      	movs	r3, #0
    5556:	60fb      	str	r3, [r7, #12]
    5558:	e001      	b.n	555e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    555a:	2301      	movs	r3, #1
    555c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    555e:	f000 fae9 	bl	5b34 <vPortExitCritical>

	return xReturn;
    5562:	68fb      	ldr	r3, [r7, #12]
}
    5564:	4618      	mov	r0, r3
    5566:	3710      	adds	r7, #16
    5568:	46bd      	mov	sp, r7
    556a:	bd80      	pop	{r7, pc}

0000556c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    556c:	b480      	push	{r7}
    556e:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    5570:	f640 638c 	movw	r3, #3724	; 0xe8c
    5574:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5578:	2201      	movs	r2, #1
    557a:	601a      	str	r2, [r3, #0]
}
    557c:	46bd      	mov	sp, r7
    557e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5582:	4770      	bx	lr

00005584 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    5584:	b580      	push	{r7, lr}
    5586:	b082      	sub	sp, #8
    5588:	af00      	add	r7, sp, #0
    558a:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    558c:	f000 f886 	bl	569c <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    5590:	f000 faac 	bl	5aec <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    5594:	e7fa      	b.n	558c <prvIdleTask+0x8>
    5596:	bf00      	nop

00005598 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    5598:	b580      	push	{r7, lr}
    559a:	b084      	sub	sp, #16
    559c:	af00      	add	r7, sp, #0
    559e:	60f8      	str	r0, [r7, #12]
    55a0:	60b9      	str	r1, [r7, #8]
    55a2:	607a      	str	r2, [r7, #4]
    55a4:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    55a6:	68fb      	ldr	r3, [r7, #12]
    55a8:	3334      	adds	r3, #52	; 0x34
    55aa:	4618      	mov	r0, r3
    55ac:	68b9      	ldr	r1, [r7, #8]
    55ae:	2210      	movs	r2, #16
    55b0:	f013 f8ae 	bl	18710 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    55b4:	68fb      	ldr	r3, [r7, #12]
    55b6:	2200      	movs	r2, #0
    55b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    55bc:	687b      	ldr	r3, [r7, #4]
    55be:	2b13      	cmp	r3, #19
    55c0:	d901      	bls.n	55c6 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    55c2:	2313      	movs	r3, #19
    55c4:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    55c6:	68fb      	ldr	r3, [r7, #12]
    55c8:	687a      	ldr	r2, [r7, #4]
    55ca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    55cc:	68fb      	ldr	r3, [r7, #12]
    55ce:	687a      	ldr	r2, [r7, #4]
    55d0:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    55d2:	68fb      	ldr	r3, [r7, #12]
    55d4:	3304      	adds	r3, #4
    55d6:	4618      	mov	r0, r3
    55d8:	f7fe fc78 	bl	3ecc <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    55dc:	68fb      	ldr	r3, [r7, #12]
    55de:	3318      	adds	r3, #24
    55e0:	4618      	mov	r0, r3
    55e2:	f7fe fc73 	bl	3ecc <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    55e6:	68fb      	ldr	r3, [r7, #12]
    55e8:	68fa      	ldr	r2, [r7, #12]
    55ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    55ec:	687b      	ldr	r3, [r7, #4]
    55ee:	f1c3 0214 	rsb	r2, r3, #20
    55f2:	68fb      	ldr	r3, [r7, #12]
    55f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    55f6:	68fb      	ldr	r3, [r7, #12]
    55f8:	68fa      	ldr	r2, [r7, #12]
    55fa:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    55fc:	3710      	adds	r7, #16
    55fe:	46bd      	mov	sp, r7
    5600:	bd80      	pop	{r7, pc}
    5602:	bf00      	nop

00005604 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    5604:	b580      	push	{r7, lr}
    5606:	b082      	sub	sp, #8
    5608:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    560a:	2300      	movs	r3, #0
    560c:	607b      	str	r3, [r7, #4]
    560e:	e00f      	b.n	5630 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    5610:	687a      	ldr	r2, [r7, #4]
    5612:	4613      	mov	r3, r2
    5614:	009b      	lsls	r3, r3, #2
    5616:	4413      	add	r3, r2
    5618:	009b      	lsls	r3, r3, #2
    561a:	f640 4270 	movw	r2, #3184	; 0xc70
    561e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5622:	4413      	add	r3, r2
    5624:	4618      	mov	r0, r3
    5626:	f7fe fc31 	bl	3e8c <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    562a:	687b      	ldr	r3, [r7, #4]
    562c:	3301      	adds	r3, #1
    562e:	607b      	str	r3, [r7, #4]
    5630:	687b      	ldr	r3, [r7, #4]
    5632:	2b13      	cmp	r3, #19
    5634:	d9ec      	bls.n	5610 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    5636:	f640 6000 	movw	r0, #3584	; 0xe00
    563a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    563e:	f7fe fc25 	bl	3e8c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    5642:	f640 6014 	movw	r0, #3604	; 0xe14
    5646:	f2c2 0000 	movt	r0, #8192	; 0x2000
    564a:	f7fe fc1f 	bl	3e8c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    564e:	f640 6030 	movw	r0, #3632	; 0xe30
    5652:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5656:	f7fe fc19 	bl	3e8c <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    565a:	f640 6044 	movw	r0, #3652	; 0xe44
    565e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5662:	f7fe fc13 	bl	3e8c <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    5666:	f640 605c 	movw	r0, #3676	; 0xe5c
    566a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    566e:	f7fe fc0d 	bl	3e8c <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    5672:	f640 6328 	movw	r3, #3624	; 0xe28
    5676:	f2c2 0300 	movt	r3, #8192	; 0x2000
    567a:	f640 6200 	movw	r2, #3584	; 0xe00
    567e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5682:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    5684:	f640 632c 	movw	r3, #3628	; 0xe2c
    5688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    568c:	f640 6214 	movw	r2, #3604	; 0xe14
    5690:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5694:	601a      	str	r2, [r3, #0]
}
    5696:	3708      	adds	r7, #8
    5698:	46bd      	mov	sp, r7
    569a:	bd80      	pop	{r7, pc}

0000569c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    569c:	b580      	push	{r7, lr}
    569e:	b082      	sub	sp, #8
    56a0:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    56a2:	f640 6358 	movw	r3, #3672	; 0xe58
    56a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56aa:	681b      	ldr	r3, [r3, #0]
    56ac:	2b00      	cmp	r3, #0
    56ae:	d03a      	beq.n	5726 <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    56b0:	f7ff fc4c 	bl	4f4c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    56b4:	f640 6344 	movw	r3, #3652	; 0xe44
    56b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56bc:	681b      	ldr	r3, [r3, #0]
    56be:	2b00      	cmp	r3, #0
    56c0:	bf14      	ite	ne
    56c2:	2300      	movne	r3, #0
    56c4:	2301      	moveq	r3, #1
    56c6:	b2db      	uxtb	r3, r3
    56c8:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    56ca:	f7ff fc51 	bl	4f70 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    56ce:	687b      	ldr	r3, [r7, #4]
    56d0:	2b00      	cmp	r3, #0
    56d2:	d128      	bne.n	5726 <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    56d4:	f000 fa18 	bl	5b08 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    56d8:	f640 6344 	movw	r3, #3652	; 0xe44
    56dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56e0:	68db      	ldr	r3, [r3, #12]
    56e2:	68db      	ldr	r3, [r3, #12]
    56e4:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    56e6:	683b      	ldr	r3, [r7, #0]
    56e8:	3304      	adds	r3, #4
    56ea:	4618      	mov	r0, r3
    56ec:	f7fe fc5a 	bl	3fa4 <vListRemove>
					--uxCurrentNumberOfTasks;
    56f0:	f640 6370 	movw	r3, #3696	; 0xe70
    56f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56f8:	681b      	ldr	r3, [r3, #0]
    56fa:	1e5a      	subs	r2, r3, #1
    56fc:	f640 6370 	movw	r3, #3696	; 0xe70
    5700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5704:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    5706:	f640 6358 	movw	r3, #3672	; 0xe58
    570a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    570e:	681b      	ldr	r3, [r3, #0]
    5710:	1e5a      	subs	r2, r3, #1
    5712:	f640 6358 	movw	r3, #3672	; 0xe58
    5716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    571a:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    571c:	f000 fa0a 	bl	5b34 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    5720:	6838      	ldr	r0, [r7, #0]
    5722:	f000 f879 	bl	5818 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    5726:	3708      	adds	r7, #8
    5728:	46bd      	mov	sp, r7
    572a:	bd80      	pop	{r7, pc}

0000572c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    572c:	b580      	push	{r7, lr}
    572e:	b082      	sub	sp, #8
    5730:	af00      	add	r7, sp, #0
    5732:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    5734:	f640 436c 	movw	r3, #3180	; 0xc6c
    5738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    573c:	681b      	ldr	r3, [r3, #0]
    573e:	687a      	ldr	r2, [r7, #4]
    5740:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    5742:	f640 6374 	movw	r3, #3700	; 0xe74
    5746:	f2c2 0300 	movt	r3, #8192	; 0x2000
    574a:	681b      	ldr	r3, [r3, #0]
    574c:	687a      	ldr	r2, [r7, #4]
    574e:	429a      	cmp	r2, r3
    5750:	d20f      	bcs.n	5772 <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5752:	f640 632c 	movw	r3, #3628	; 0xe2c
    5756:	f2c2 0300 	movt	r3, #8192	; 0x2000
    575a:	681a      	ldr	r2, [r3, #0]
    575c:	f640 436c 	movw	r3, #3180	; 0xc6c
    5760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5764:	681b      	ldr	r3, [r3, #0]
    5766:	3304      	adds	r3, #4
    5768:	4610      	mov	r0, r2
    576a:	4619      	mov	r1, r3
    576c:	f7fe fbe2 	bl	3f34 <vListInsert>
    5770:	e01c      	b.n	57ac <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5772:	f640 6328 	movw	r3, #3624	; 0xe28
    5776:	f2c2 0300 	movt	r3, #8192	; 0x2000
    577a:	681a      	ldr	r2, [r3, #0]
    577c:	f640 436c 	movw	r3, #3180	; 0xc6c
    5780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5784:	681b      	ldr	r3, [r3, #0]
    5786:	3304      	adds	r3, #4
    5788:	4610      	mov	r0, r2
    578a:	4619      	mov	r1, r3
    578c:	f7fe fbd2 	bl	3f34 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    5790:	f240 33e0 	movw	r3, #992	; 0x3e0
    5794:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5798:	681b      	ldr	r3, [r3, #0]
    579a:	687a      	ldr	r2, [r7, #4]
    579c:	429a      	cmp	r2, r3
    579e:	d205      	bcs.n	57ac <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    57a0:	f240 33e0 	movw	r3, #992	; 0x3e0
    57a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57a8:	687a      	ldr	r2, [r7, #4]
    57aa:	601a      	str	r2, [r3, #0]
		}
	}
}
    57ac:	3708      	adds	r7, #8
    57ae:	46bd      	mov	sp, r7
    57b0:	bd80      	pop	{r7, pc}
    57b2:	bf00      	nop

000057b4 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    57b4:	b580      	push	{r7, lr}
    57b6:	b084      	sub	sp, #16
    57b8:	af00      	add	r7, sp, #0
    57ba:	4603      	mov	r3, r0
    57bc:	6039      	str	r1, [r7, #0]
    57be:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    57c0:	2050      	movs	r0, #80	; 0x50
    57c2:	f000 fa19 	bl	5bf8 <pvPortMalloc>
    57c6:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    57c8:	68fb      	ldr	r3, [r7, #12]
    57ca:	2b00      	cmp	r3, #0
    57cc:	d01f      	beq.n	580e <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    57ce:	683b      	ldr	r3, [r7, #0]
    57d0:	2b00      	cmp	r3, #0
    57d2:	d106      	bne.n	57e2 <prvAllocateTCBAndStack+0x2e>
    57d4:	88fb      	ldrh	r3, [r7, #6]
    57d6:	009b      	lsls	r3, r3, #2
    57d8:	4618      	mov	r0, r3
    57da:	f000 fa0d 	bl	5bf8 <pvPortMalloc>
    57de:	4603      	mov	r3, r0
    57e0:	e000      	b.n	57e4 <prvAllocateTCBAndStack+0x30>
    57e2:	683b      	ldr	r3, [r7, #0]
    57e4:	68fa      	ldr	r2, [r7, #12]
    57e6:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    57e8:	68fb      	ldr	r3, [r7, #12]
    57ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    57ec:	2b00      	cmp	r3, #0
    57ee:	d105      	bne.n	57fc <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    57f0:	68f8      	ldr	r0, [r7, #12]
    57f2:	f000 fac5 	bl	5d80 <vPortFree>
			pxNewTCB = NULL;
    57f6:	2300      	movs	r3, #0
    57f8:	60fb      	str	r3, [r7, #12]
    57fa:	e008      	b.n	580e <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    57fc:	68fb      	ldr	r3, [r7, #12]
    57fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5800:	88fb      	ldrh	r3, [r7, #6]
    5802:	009b      	lsls	r3, r3, #2
    5804:	4610      	mov	r0, r2
    5806:	21a5      	movs	r1, #165	; 0xa5
    5808:	461a      	mov	r2, r3
    580a:	f012 ff31 	bl	18670 <memset>
		}
	}

	return pxNewTCB;
    580e:	68fb      	ldr	r3, [r7, #12]
}
    5810:	4618      	mov	r0, r3
    5812:	3710      	adds	r7, #16
    5814:	46bd      	mov	sp, r7
    5816:	bd80      	pop	{r7, pc}

00005818 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    5818:	b580      	push	{r7, lr}
    581a:	b082      	sub	sp, #8
    581c:	af00      	add	r7, sp, #0
    581e:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    5820:	687b      	ldr	r3, [r7, #4]
    5822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5824:	4618      	mov	r0, r3
    5826:	f000 faab 	bl	5d80 <vPortFree>
		vPortFree( pxTCB );
    582a:	6878      	ldr	r0, [r7, #4]
    582c:	f000 faa8 	bl	5d80 <vPortFree>
	}
    5830:	3708      	adds	r7, #8
    5832:	46bd      	mov	sp, r7
    5834:	bd80      	pop	{r7, pc}
    5836:	bf00      	nop

00005838 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    5838:	b480      	push	{r7}
    583a:	b083      	sub	sp, #12
    583c:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    583e:	f640 436c 	movw	r3, #3180	; 0xc6c
    5842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5846:	681b      	ldr	r3, [r3, #0]
    5848:	607b      	str	r3, [r7, #4]

		return xReturn;
    584a:	687b      	ldr	r3, [r7, #4]
	}
    584c:	4618      	mov	r0, r3
    584e:	370c      	adds	r7, #12
    5850:	46bd      	mov	sp, r7
    5852:	f85d 7b04 	ldr.w	r7, [sp], #4
    5856:	4770      	bx	lr

00005858 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    5858:	b580      	push	{r7, lr}
    585a:	b084      	sub	sp, #16
    585c:	af00      	add	r7, sp, #0
    585e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5860:	687b      	ldr	r3, [r7, #4]
    5862:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    5864:	68fb      	ldr	r3, [r7, #12]
    5866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5868:	f640 436c 	movw	r3, #3180	; 0xc6c
    586c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5870:	681b      	ldr	r3, [r3, #0]
    5872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5874:	429a      	cmp	r2, r3
    5876:	d24f      	bcs.n	5918 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    5878:	f640 436c 	movw	r3, #3180	; 0xc6c
    587c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5880:	681b      	ldr	r3, [r3, #0]
    5882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5884:	f1c3 0214 	rsb	r2, r3, #20
    5888:	68fb      	ldr	r3, [r7, #12]
    588a:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    588c:	68fb      	ldr	r3, [r7, #12]
    588e:	6959      	ldr	r1, [r3, #20]
    5890:	68fb      	ldr	r3, [r7, #12]
    5892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5894:	4613      	mov	r3, r2
    5896:	009b      	lsls	r3, r3, #2
    5898:	4413      	add	r3, r2
    589a:	009b      	lsls	r3, r3, #2
    589c:	f640 4270 	movw	r2, #3184	; 0xc70
    58a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    58a4:	4413      	add	r3, r2
    58a6:	4299      	cmp	r1, r3
    58a8:	d12e      	bne.n	5908 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    58aa:	68fb      	ldr	r3, [r7, #12]
    58ac:	3304      	adds	r3, #4
    58ae:	4618      	mov	r0, r3
    58b0:	f7fe fb78 	bl	3fa4 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    58b4:	f640 436c 	movw	r3, #3180	; 0xc6c
    58b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58bc:	681b      	ldr	r3, [r3, #0]
    58be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58c0:	68fb      	ldr	r3, [r7, #12]
    58c2:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    58c4:	68fb      	ldr	r3, [r7, #12]
    58c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58c8:	f640 637c 	movw	r3, #3708	; 0xe7c
    58cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58d0:	681b      	ldr	r3, [r3, #0]
    58d2:	429a      	cmp	r2, r3
    58d4:	d906      	bls.n	58e4 <vTaskPriorityInherit+0x8c>
    58d6:	68fb      	ldr	r3, [r7, #12]
    58d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58da:	f640 637c 	movw	r3, #3708	; 0xe7c
    58de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58e2:	601a      	str	r2, [r3, #0]
    58e4:	68fb      	ldr	r3, [r7, #12]
    58e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58e8:	4613      	mov	r3, r2
    58ea:	009b      	lsls	r3, r3, #2
    58ec:	4413      	add	r3, r2
    58ee:	009b      	lsls	r3, r3, #2
    58f0:	f640 4270 	movw	r2, #3184	; 0xc70
    58f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    58f8:	441a      	add	r2, r3
    58fa:	68fb      	ldr	r3, [r7, #12]
    58fc:	3304      	adds	r3, #4
    58fe:	4610      	mov	r0, r2
    5900:	4619      	mov	r1, r3
    5902:	f7fe faef 	bl	3ee4 <vListInsertEnd>
    5906:	e007      	b.n	5918 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5908:	f640 436c 	movw	r3, #3180	; 0xc6c
    590c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5910:	681b      	ldr	r3, [r3, #0]
    5912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5914:	68fb      	ldr	r3, [r7, #12]
    5916:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    5918:	3710      	adds	r7, #16
    591a:	46bd      	mov	sp, r7
    591c:	bd80      	pop	{r7, pc}
    591e:	bf00      	nop

00005920 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    5920:	b580      	push	{r7, lr}
    5922:	b084      	sub	sp, #16
    5924:	af00      	add	r7, sp, #0
    5926:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5928:	687b      	ldr	r3, [r7, #4]
    592a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    592c:	687b      	ldr	r3, [r7, #4]
    592e:	2b00      	cmp	r3, #0
    5930:	d035      	beq.n	599e <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    5932:	68fb      	ldr	r3, [r7, #12]
    5934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5936:	68fb      	ldr	r3, [r7, #12]
    5938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    593a:	429a      	cmp	r2, r3
    593c:	d02f      	beq.n	599e <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    593e:	68fb      	ldr	r3, [r7, #12]
    5940:	3304      	adds	r3, #4
    5942:	4618      	mov	r0, r3
    5944:	f7fe fb2e 	bl	3fa4 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5948:	68fb      	ldr	r3, [r7, #12]
    594a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    594c:	68fb      	ldr	r3, [r7, #12]
    594e:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    5950:	68fb      	ldr	r3, [r7, #12]
    5952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5954:	f1c3 0214 	rsb	r2, r3, #20
    5958:	68fb      	ldr	r3, [r7, #12]
    595a:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    595c:	68fb      	ldr	r3, [r7, #12]
    595e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5960:	f640 637c 	movw	r3, #3708	; 0xe7c
    5964:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5968:	681b      	ldr	r3, [r3, #0]
    596a:	429a      	cmp	r2, r3
    596c:	d906      	bls.n	597c <vTaskPriorityDisinherit+0x5c>
    596e:	68fb      	ldr	r3, [r7, #12]
    5970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5972:	f640 637c 	movw	r3, #3708	; 0xe7c
    5976:	f2c2 0300 	movt	r3, #8192	; 0x2000
    597a:	601a      	str	r2, [r3, #0]
    597c:	68fb      	ldr	r3, [r7, #12]
    597e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5980:	4613      	mov	r3, r2
    5982:	009b      	lsls	r3, r3, #2
    5984:	4413      	add	r3, r2
    5986:	009b      	lsls	r3, r3, #2
    5988:	f640 4270 	movw	r2, #3184	; 0xc70
    598c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5990:	441a      	add	r2, r3
    5992:	68fb      	ldr	r3, [r7, #12]
    5994:	3304      	adds	r3, #4
    5996:	4610      	mov	r0, r2
    5998:	4619      	mov	r1, r3
    599a:	f7fe faa3 	bl	3ee4 <vListInsertEnd>
			}
		}
	}
    599e:	3710      	adds	r7, #16
    59a0:	46bd      	mov	sp, r7
    59a2:	bd80      	pop	{r7, pc}

000059a4 <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    59a4:	b480      	push	{r7}
    59a6:	b083      	sub	sp, #12
    59a8:	af00      	add	r7, sp, #0
    59aa:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    59ac:	687b      	ldr	r3, [r7, #4]
    59ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    59b0:	4618      	mov	r0, r3
    59b2:	370c      	adds	r7, #12
    59b4:	46bd      	mov	sp, r7
    59b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    59ba:	4770      	bx	lr

000059bc <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    59bc:	b480      	push	{r7}
    59be:	b083      	sub	sp, #12
    59c0:	af00      	add	r7, sp, #0
    59c2:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    59c4:	687b      	ldr	r3, [r7, #4]
    59c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    59c8:	4618      	mov	r0, r3
    59ca:	370c      	adds	r7, #12
    59cc:	46bd      	mov	sp, r7
    59ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    59d2:	4770      	bx	lr

000059d4 <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    59d4:	b480      	push	{r7}
    59d6:	b083      	sub	sp, #12
    59d8:	af00      	add	r7, sp, #0
    59da:	6078      	str	r0, [r7, #4]
    59dc:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    59de:	687b      	ldr	r3, [r7, #4]
    59e0:	683a      	ldr	r2, [r7, #0]
    59e2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    59e4:	370c      	adds	r7, #12
    59e6:	46bd      	mov	sp, r7
    59e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    59ec:	4770      	bx	lr
    59ee:	bf00      	nop

000059f0 <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    59f0:	b480      	push	{r7}
    59f2:	b083      	sub	sp, #12
    59f4:	af00      	add	r7, sp, #0
    59f6:	6078      	str	r0, [r7, #4]
    59f8:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    59fa:	687b      	ldr	r3, [r7, #4]
    59fc:	683a      	ldr	r2, [r7, #0]
    59fe:	649a      	str	r2, [r3, #72]	; 0x48
    }
    5a00:	370c      	adds	r7, #12
    5a02:	46bd      	mov	sp, r7
    5a04:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a08:	4770      	bx	lr
    5a0a:	bf00      	nop

00005a0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5a0c:	b480      	push	{r7}
    5a0e:	b085      	sub	sp, #20
    5a10:	af00      	add	r7, sp, #0
    5a12:	60f8      	str	r0, [r7, #12]
    5a14:	60b9      	str	r1, [r7, #8]
    5a16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5a18:	68fb      	ldr	r3, [r7, #12]
    5a1a:	3b04      	subs	r3, #4
    5a1c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5a1e:	68fb      	ldr	r3, [r7, #12]
    5a20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5a24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5a26:	68fb      	ldr	r3, [r7, #12]
    5a28:	3b04      	subs	r3, #4
    5a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5a2c:	68ba      	ldr	r2, [r7, #8]
    5a2e:	68fb      	ldr	r3, [r7, #12]
    5a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5a32:	68fb      	ldr	r3, [r7, #12]
    5a34:	3b04      	subs	r3, #4
    5a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    5a38:	68fb      	ldr	r3, [r7, #12]
    5a3a:	2200      	movs	r2, #0
    5a3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5a3e:	68fb      	ldr	r3, [r7, #12]
    5a40:	3b14      	subs	r3, #20
    5a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    5a44:	687a      	ldr	r2, [r7, #4]
    5a46:	68fb      	ldr	r3, [r7, #12]
    5a48:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5a4a:	68fb      	ldr	r3, [r7, #12]
    5a4c:	3b20      	subs	r3, #32
    5a4e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5a50:	68fb      	ldr	r3, [r7, #12]
}
    5a52:	4618      	mov	r0, r3
    5a54:	3714      	adds	r7, #20
    5a56:	46bd      	mov	sp, r7
    5a58:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a5c:	4770      	bx	lr
    5a5e:	bf00      	nop

00005a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5a60:	4b06      	ldr	r3, [pc, #24]	; (5a7c <pxCurrentTCBConst2>)
    5a62:	6819      	ldr	r1, [r3, #0]
    5a64:	6808      	ldr	r0, [r1, #0]
    5a66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5a6a:	f380 8809 	msr	PSP, r0
    5a6e:	f04f 0000 	mov.w	r0, #0
    5a72:	f380 8811 	msr	BASEPRI, r0
    5a76:	f04e 0e0d 	orr.w	lr, lr, #13
    5a7a:	4770      	bx	lr

00005a7c <pxCurrentTCBConst2>:
    5a7c:	20000c6c 	.word	0x20000c6c

00005a80 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    5a80:	485c      	ldr	r0, [pc, #368]	; (5bf4 <prvSetupTimerInterrupt+0x28>)
    5a82:	6800      	ldr	r0, [r0, #0]
    5a84:	6800      	ldr	r0, [r0, #0]
    5a86:	f380 8808 	msr	MSP, r0
    5a8a:	b662      	cpsie	i
    5a8c:	df00      	svc	0
    5a8e:	bf00      	nop

00005a90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    5a90:	b580      	push	{r7, lr}
    5a92:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    5a94:	f64e 5320 	movw	r3, #60704	; 0xed20
    5a98:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5a9c:	f64e 5220 	movw	r2, #60704	; 0xed20
    5aa0:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5aa4:	6812      	ldr	r2, [r2, #0]
    5aa6:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    5aaa:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5aac:	f64e 5320 	movw	r3, #60704	; 0xed20
    5ab0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5ab4:	f64e 5220 	movw	r2, #60704	; 0xed20
    5ab8:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5abc:	6812      	ldr	r2, [r2, #0]
    5abe:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    5ac2:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5ac4:	f000 f882 	bl	5bcc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5ac8:	f240 33e4 	movw	r3, #996	; 0x3e4
    5acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ad0:	2200      	movs	r2, #0
    5ad2:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5ad4:	f7ff ffd4 	bl	5a80 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5ad8:	2300      	movs	r3, #0
}
    5ada:	4618      	mov	r0, r3
    5adc:	bd80      	pop	{r7, pc}
    5ade:	bf00      	nop

00005ae0 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5ae0:	b480      	push	{r7}
    5ae2:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5ae4:	46bd      	mov	sp, r7
    5ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aea:	4770      	bx	lr

00005aec <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5aec:	b480      	push	{r7}
    5aee:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5af0:	f64e 5304 	movw	r3, #60676	; 0xed04
    5af4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5afc:	601a      	str	r2, [r3, #0]
}
    5afe:	46bd      	mov	sp, r7
    5b00:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b04:	4770      	bx	lr
    5b06:	bf00      	nop

00005b08 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5b08:	b480      	push	{r7}
    5b0a:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5b0c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5b10:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5b14:	f240 33e4 	movw	r3, #996	; 0x3e4
    5b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b1c:	681b      	ldr	r3, [r3, #0]
    5b1e:	1c5a      	adds	r2, r3, #1
    5b20:	f240 33e4 	movw	r3, #996	; 0x3e4
    5b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b28:	601a      	str	r2, [r3, #0]
}
    5b2a:	46bd      	mov	sp, r7
    5b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b30:	4770      	bx	lr
    5b32:	bf00      	nop

00005b34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5b34:	b480      	push	{r7}
    5b36:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5b38:	f240 33e4 	movw	r3, #996	; 0x3e4
    5b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b40:	681b      	ldr	r3, [r3, #0]
    5b42:	1e5a      	subs	r2, r3, #1
    5b44:	f240 33e4 	movw	r3, #996	; 0x3e4
    5b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b4c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5b4e:	f240 33e4 	movw	r3, #996	; 0x3e4
    5b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b56:	681b      	ldr	r3, [r3, #0]
    5b58:	2b00      	cmp	r3, #0
    5b5a:	d103      	bne.n	5b64 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5b5c:	f04f 0000 	mov.w	r0, #0
    5b60:	f380 8811 	msr	BASEPRI, r0
	}
}
    5b64:	46bd      	mov	sp, r7
    5b66:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b6a:	4770      	bx	lr

00005b6c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5b6c:	f3ef 8009 	mrs	r0, PSP
    5b70:	4b0c      	ldr	r3, [pc, #48]	; (5ba4 <pxCurrentTCBConst>)
    5b72:	681a      	ldr	r2, [r3, #0]
    5b74:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5b78:	6010      	str	r0, [r2, #0]
    5b7a:	e92d 4008 	stmdb	sp!, {r3, lr}
    5b7e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5b82:	f380 8811 	msr	BASEPRI, r0
    5b86:	f7ff fba1 	bl	52cc <vTaskSwitchContext>
    5b8a:	f04f 0000 	mov.w	r0, #0
    5b8e:	f380 8811 	msr	BASEPRI, r0
    5b92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5b96:	6819      	ldr	r1, [r3, #0]
    5b98:	6808      	ldr	r0, [r1, #0]
    5b9a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5b9e:	f380 8809 	msr	PSP, r0
    5ba2:	4770      	bx	lr

00005ba4 <pxCurrentTCBConst>:
    5ba4:	20000c6c 	.word	0x20000c6c

00005ba8 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5ba8:	b580      	push	{r7, lr}
    5baa:	b082      	sub	sp, #8
    5bac:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5bae:	2300      	movs	r3, #0
    5bb0:	607b      	str	r3, [r7, #4]
    5bb2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5bb6:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    5bba:	f7ff faa9 	bl	5110 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5bbe:	f04f 0000 	mov.w	r0, #0
    5bc2:	f380 8811 	msr	BASEPRI, r0
}
    5bc6:	3708      	adds	r7, #8
    5bc8:	46bd      	mov	sp, r7
    5bca:	bd80      	pop	{r7, pc}

00005bcc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5bcc:	b480      	push	{r7}
    5bce:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5bd0:	f24e 0314 	movw	r3, #57364	; 0xe014
    5bd4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5bd8:	f641 421f 	movw	r2, #7199	; 0x1c1f
    5bdc:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5bde:	f24e 0310 	movw	r3, #57360	; 0xe010
    5be2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5be6:	2207      	movs	r2, #7
    5be8:	601a      	str	r2, [r3, #0]
}
    5bea:	46bd      	mov	sp, r7
    5bec:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bf0:	4770      	bx	lr
    5bf2:	0000      	.short	0x0000
    5bf4:	e000ed08 	.word	0xe000ed08

00005bf8 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5bf8:	b580      	push	{r7, lr}
    5bfa:	b08a      	sub	sp, #40	; 0x28
    5bfc:	af00      	add	r7, sp, #0
    5bfe:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5c00:	2300      	movs	r3, #0
    5c02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5c04:	f7ff f9a2 	bl	4f4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5c08:	f64a 63a8 	movw	r3, #44712	; 0xaea8
    5c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c10:	681b      	ldr	r3, [r3, #0]
    5c12:	2b00      	cmp	r3, #0
    5c14:	d130      	bne.n	5c78 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5c16:	f64a 6398 	movw	r3, #44696	; 0xae98
    5c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c1e:	f640 6298 	movw	r2, #3736	; 0xe98
    5c22:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5c26:	601a      	str	r2, [r3, #0]
    5c28:	f64a 6398 	movw	r3, #44696	; 0xae98
    5c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c30:	2200      	movs	r2, #0
    5c32:	605a      	str	r2, [r3, #4]
    5c34:	f64a 63a0 	movw	r3, #44704	; 0xaea0
    5c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c3c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    5c40:	605a      	str	r2, [r3, #4]
    5c42:	f64a 63a0 	movw	r3, #44704	; 0xaea0
    5c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c4a:	2200      	movs	r2, #0
    5c4c:	601a      	str	r2, [r3, #0]
    5c4e:	f640 6398 	movw	r3, #3736	; 0xe98
    5c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c56:	617b      	str	r3, [r7, #20]
    5c58:	697b      	ldr	r3, [r7, #20]
    5c5a:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    5c5e:	605a      	str	r2, [r3, #4]
    5c60:	697a      	ldr	r2, [r7, #20]
    5c62:	f64a 63a0 	movw	r3, #44704	; 0xaea0
    5c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c6a:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5c6c:	f64a 63a8 	movw	r3, #44712	; 0xaea8
    5c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c74:	2201      	movs	r2, #1
    5c76:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5c78:	687b      	ldr	r3, [r7, #4]
    5c7a:	2b00      	cmp	r3, #0
    5c7c:	d00d      	beq.n	5c9a <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5c7e:	2310      	movs	r3, #16
    5c80:	687a      	ldr	r2, [r7, #4]
    5c82:	4413      	add	r3, r2
    5c84:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5c86:	687b      	ldr	r3, [r7, #4]
    5c88:	f003 0307 	and.w	r3, r3, #7
    5c8c:	2b00      	cmp	r3, #0
    5c8e:	d004      	beq.n	5c9a <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5c90:	687b      	ldr	r3, [r7, #4]
    5c92:	f023 0307 	bic.w	r3, r3, #7
    5c96:	3308      	adds	r3, #8
    5c98:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5c9a:	687b      	ldr	r3, [r7, #4]
    5c9c:	2b00      	cmp	r3, #0
    5c9e:	d068      	beq.n	5d72 <pvPortMalloc+0x17a>
    5ca0:	687b      	ldr	r3, [r7, #4]
    5ca2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
    5ca6:	d264      	bcs.n	5d72 <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5ca8:	f64a 6398 	movw	r3, #44696	; 0xae98
    5cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cb0:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5cb2:	f64a 6398 	movw	r3, #44696	; 0xae98
    5cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cba:	681b      	ldr	r3, [r3, #0]
    5cbc:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5cbe:	e004      	b.n	5cca <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5cc2:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5cc6:	681b      	ldr	r3, [r3, #0]
    5cc8:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ccc:	685a      	ldr	r2, [r3, #4]
    5cce:	687b      	ldr	r3, [r7, #4]
    5cd0:	429a      	cmp	r2, r3
    5cd2:	d203      	bcs.n	5cdc <pvPortMalloc+0xe4>
    5cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5cd6:	681b      	ldr	r3, [r3, #0]
    5cd8:	2b00      	cmp	r3, #0
    5cda:	d1f1      	bne.n	5cc0 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5cde:	f64a 63a0 	movw	r3, #44704	; 0xaea0
    5ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ce6:	429a      	cmp	r2, r3
    5ce8:	d043      	beq.n	5d72 <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5cea:	6a3b      	ldr	r3, [r7, #32]
    5cec:	681a      	ldr	r2, [r3, #0]
    5cee:	2310      	movs	r3, #16
    5cf0:	4413      	add	r3, r2
    5cf2:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    5cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5cf6:	681a      	ldr	r2, [r3, #0]
    5cf8:	6a3b      	ldr	r3, [r7, #32]
    5cfa:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    5cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5cfe:	685a      	ldr	r2, [r3, #4]
    5d00:	687b      	ldr	r3, [r7, #4]
    5d02:	1ad2      	subs	r2, r2, r3
    5d04:	2310      	movs	r3, #16
    5d06:	005b      	lsls	r3, r3, #1
    5d08:	429a      	cmp	r2, r3
    5d0a:	d925      	bls.n	5d58 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    5d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5d0e:	687b      	ldr	r3, [r7, #4]
    5d10:	4413      	add	r3, r2
    5d12:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d16:	685a      	ldr	r2, [r3, #4]
    5d18:	687b      	ldr	r3, [r7, #4]
    5d1a:	1ad2      	subs	r2, r2, r3
    5d1c:	693b      	ldr	r3, [r7, #16]
    5d1e:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d22:	687a      	ldr	r2, [r7, #4]
    5d24:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    5d26:	693b      	ldr	r3, [r7, #16]
    5d28:	685b      	ldr	r3, [r3, #4]
    5d2a:	60fb      	str	r3, [r7, #12]
    5d2c:	f64a 6398 	movw	r3, #44696	; 0xae98
    5d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d34:	61bb      	str	r3, [r7, #24]
    5d36:	e002      	b.n	5d3e <pvPortMalloc+0x146>
    5d38:	69bb      	ldr	r3, [r7, #24]
    5d3a:	681b      	ldr	r3, [r3, #0]
    5d3c:	61bb      	str	r3, [r7, #24]
    5d3e:	69bb      	ldr	r3, [r7, #24]
    5d40:	681b      	ldr	r3, [r3, #0]
    5d42:	685a      	ldr	r2, [r3, #4]
    5d44:	68fb      	ldr	r3, [r7, #12]
    5d46:	429a      	cmp	r2, r3
    5d48:	d3f6      	bcc.n	5d38 <pvPortMalloc+0x140>
    5d4a:	69bb      	ldr	r3, [r7, #24]
    5d4c:	681a      	ldr	r2, [r3, #0]
    5d4e:	693b      	ldr	r3, [r7, #16]
    5d50:	601a      	str	r2, [r3, #0]
    5d52:	69bb      	ldr	r3, [r7, #24]
    5d54:	693a      	ldr	r2, [r7, #16]
    5d56:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5d58:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d60:	681a      	ldr	r2, [r3, #0]
    5d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d64:	685b      	ldr	r3, [r3, #4]
    5d66:	1ad2      	subs	r2, r2, r3
    5d68:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d70:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    5d72:	f7ff f8fd 	bl	4f70 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    5d76:	69fb      	ldr	r3, [r7, #28]
}
    5d78:	4618      	mov	r0, r3
    5d7a:	3728      	adds	r7, #40	; 0x28
    5d7c:	46bd      	mov	sp, r7
    5d7e:	bd80      	pop	{r7, pc}

00005d80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    5d80:	b580      	push	{r7, lr}
    5d82:	b086      	sub	sp, #24
    5d84:	af00      	add	r7, sp, #0
    5d86:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    5d88:	687b      	ldr	r3, [r7, #4]
    5d8a:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    5d8c:	687b      	ldr	r3, [r7, #4]
    5d8e:	2b00      	cmp	r3, #0
    5d90:	d030      	beq.n	5df4 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    5d92:	2310      	movs	r3, #16
    5d94:	425b      	negs	r3, r3
    5d96:	693a      	ldr	r2, [r7, #16]
    5d98:	4413      	add	r3, r2
    5d9a:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    5d9c:	693b      	ldr	r3, [r7, #16]
    5d9e:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    5da0:	f7ff f8d4 	bl	4f4c <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    5da4:	68fb      	ldr	r3, [r7, #12]
    5da6:	685b      	ldr	r3, [r3, #4]
    5da8:	60bb      	str	r3, [r7, #8]
    5daa:	f64a 6398 	movw	r3, #44696	; 0xae98
    5dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5db2:	617b      	str	r3, [r7, #20]
    5db4:	e002      	b.n	5dbc <vPortFree+0x3c>
    5db6:	697b      	ldr	r3, [r7, #20]
    5db8:	681b      	ldr	r3, [r3, #0]
    5dba:	617b      	str	r3, [r7, #20]
    5dbc:	697b      	ldr	r3, [r7, #20]
    5dbe:	681b      	ldr	r3, [r3, #0]
    5dc0:	685a      	ldr	r2, [r3, #4]
    5dc2:	68bb      	ldr	r3, [r7, #8]
    5dc4:	429a      	cmp	r2, r3
    5dc6:	d3f6      	bcc.n	5db6 <vPortFree+0x36>
    5dc8:	697b      	ldr	r3, [r7, #20]
    5dca:	681a      	ldr	r2, [r3, #0]
    5dcc:	68fb      	ldr	r3, [r7, #12]
    5dce:	601a      	str	r2, [r3, #0]
    5dd0:	697b      	ldr	r3, [r7, #20]
    5dd2:	68fa      	ldr	r2, [r7, #12]
    5dd4:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    5dd6:	68fb      	ldr	r3, [r7, #12]
    5dd8:	685a      	ldr	r2, [r3, #4]
    5dda:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5de2:	681b      	ldr	r3, [r3, #0]
    5de4:	441a      	add	r2, r3
    5de6:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dee:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    5df0:	f7ff f8be 	bl	4f70 <xTaskResumeAll>
	}
}
    5df4:	3718      	adds	r7, #24
    5df6:	46bd      	mov	sp, r7
    5df8:	bd80      	pop	{r7, pc}
    5dfa:	bf00      	nop

00005dfc <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    5dfc:	b480      	push	{r7}
    5dfe:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    5e00:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e08:	681b      	ldr	r3, [r3, #0]
}
    5e0a:	4618      	mov	r0, r3
    5e0c:	46bd      	mov	sp, r7
    5e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e12:	4770      	bx	lr

00005e14 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    5e14:	b480      	push	{r7}
    5e16:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    5e18:	46bd      	mov	sp, r7
    5e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e1e:	4770      	bx	lr

00005e20 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    5e20:	b580      	push	{r7, lr}
    5e22:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    5e24:	f64a 63ca 	movw	r3, #44746	; 0xaeca
    5e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e2c:	781b      	ldrb	r3, [r3, #0]
    5e2e:	2b00      	cmp	r3, #0
    5e30:	f040 815d 	bne.w	60ee <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    5e34:	f64a 63b2 	movw	r3, #44722	; 0xaeb2
    5e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e3c:	881b      	ldrh	r3, [r3, #0]
    5e3e:	2b09      	cmp	r3, #9
    5e40:	f201 8145 	bhi.w	70ce <ground_calibrate+0x12ae>
    5e44:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    5e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e4c:	781b      	ldrb	r3, [r3, #0]
    5e4e:	2b01      	cmp	r3, #1
    5e50:	f041 813d 	bne.w	70ce <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    5e54:	f64a 63ca 	movw	r3, #44746	; 0xaeca
    5e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e5c:	2201      	movs	r2, #1
    5e5e:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    5e60:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e68:	781a      	ldrb	r2, [r3, #0]
    5e6a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    5e6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e72:	781b      	ldrb	r3, [r3, #0]
    5e74:	b2db      	uxtb	r3, r3
    5e76:	429a      	cmp	r2, r3
    5e78:	d313      	bcc.n	5ea2 <ground_calibrate+0x82>
    5e7a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    5e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e82:	781b      	ldrb	r3, [r3, #0]
    5e84:	b2db      	uxtb	r3, r3
    5e86:	461a      	mov	r2, r3
    5e88:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e90:	781b      	ldrb	r3, [r3, #0]
    5e92:	1ad3      	subs	r3, r2, r3
    5e94:	33ff      	adds	r3, #255	; 0xff
    5e96:	2b04      	cmp	r3, #4
    5e98:	bfd4      	ite	le
    5e9a:	2300      	movle	r3, #0
    5e9c:	2301      	movgt	r3, #1
    5e9e:	b2db      	uxtb	r3, r3
    5ea0:	e011      	b.n	5ec6 <ground_calibrate+0xa6>
    5ea2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    5ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eaa:	781b      	ldrb	r3, [r3, #0]
    5eac:	b2db      	uxtb	r3, r3
    5eae:	461a      	mov	r2, r3
    5eb0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eb8:	781b      	ldrb	r3, [r3, #0]
    5eba:	1ad3      	subs	r3, r2, r3
    5ebc:	2b04      	cmp	r3, #4
    5ebe:	bfd4      	ite	le
    5ec0:	2300      	movle	r3, #0
    5ec2:	2301      	movgt	r3, #1
    5ec4:	b2db      	uxtb	r3, r3
    5ec6:	2b00      	cmp	r3, #0
    5ec8:	f000 8103 	beq.w	60d2 <ground_calibrate+0x2b2>
    5ecc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ed4:	781b      	ldrb	r3, [r3, #0]
    5ed6:	461a      	mov	r2, r3
    5ed8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    5edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ee0:	2105      	movs	r1, #5
    5ee2:	5499      	strb	r1, [r3, r2]
    5ee4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eec:	781b      	ldrb	r3, [r3, #0]
    5eee:	3301      	adds	r3, #1
    5ef0:	b2da      	uxtb	r2, r3
    5ef2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5efa:	701a      	strb	r2, [r3, #0]
    5efc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f04:	781b      	ldrb	r3, [r3, #0]
    5f06:	2bff      	cmp	r3, #255	; 0xff
    5f08:	d105      	bne.n	5f16 <ground_calibrate+0xf6>
    5f0a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f12:	2200      	movs	r2, #0
    5f14:	701a      	strb	r2, [r3, #0]
    5f16:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f1e:	781b      	ldrb	r3, [r3, #0]
    5f20:	461a      	mov	r2, r3
    5f22:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    5f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f2a:	2102      	movs	r1, #2
    5f2c:	5499      	strb	r1, [r3, r2]
    5f2e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f36:	781b      	ldrb	r3, [r3, #0]
    5f38:	3301      	adds	r3, #1
    5f3a:	b2da      	uxtb	r2, r3
    5f3c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f44:	701a      	strb	r2, [r3, #0]
    5f46:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f4e:	781b      	ldrb	r3, [r3, #0]
    5f50:	2bff      	cmp	r3, #255	; 0xff
    5f52:	d105      	bne.n	5f60 <ground_calibrate+0x140>
    5f54:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f5c:	2200      	movs	r2, #0
    5f5e:	701a      	strb	r2, [r3, #0]
    5f60:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    5f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f68:	2202      	movs	r2, #2
    5f6a:	701a      	strb	r2, [r3, #0]
    5f6c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    5f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f74:	2202      	movs	r2, #2
    5f76:	701a      	strb	r2, [r3, #0]
    5f78:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f80:	781b      	ldrb	r3, [r3, #0]
    5f82:	461a      	mov	r2, r3
    5f84:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    5f88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f8c:	7819      	ldrb	r1, [r3, #0]
    5f8e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    5f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f96:	5499      	strb	r1, [r3, r2]
    5f98:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fa0:	781b      	ldrb	r3, [r3, #0]
    5fa2:	3301      	adds	r3, #1
    5fa4:	b2da      	uxtb	r2, r3
    5fa6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fae:	701a      	strb	r2, [r3, #0]
    5fb0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fb8:	781b      	ldrb	r3, [r3, #0]
    5fba:	2bff      	cmp	r3, #255	; 0xff
    5fbc:	d105      	bne.n	5fca <ground_calibrate+0x1aa>
    5fbe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fc6:	2200      	movs	r2, #0
    5fc8:	701a      	strb	r2, [r3, #0]
    5fca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fd2:	781b      	ldrb	r3, [r3, #0]
    5fd4:	461a      	mov	r2, r3
    5fd6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    5fda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fde:	7819      	ldrb	r1, [r3, #0]
    5fe0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    5fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fe8:	5499      	strb	r1, [r3, r2]
    5fea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ff2:	781b      	ldrb	r3, [r3, #0]
    5ff4:	3301      	adds	r3, #1
    5ff6:	b2da      	uxtb	r2, r3
    5ff8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6000:	701a      	strb	r2, [r3, #0]
    6002:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6006:	f2c2 0300 	movt	r3, #8192	; 0x2000
    600a:	781b      	ldrb	r3, [r3, #0]
    600c:	2bff      	cmp	r3, #255	; 0xff
    600e:	d105      	bne.n	601c <ground_calibrate+0x1fc>
    6010:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6014:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6018:	2200      	movs	r2, #0
    601a:	701a      	strb	r2, [r3, #0]
    601c:	f242 0339 	movw	r3, #8249	; 0x2039
    6020:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6024:	781b      	ldrb	r3, [r3, #0]
    6026:	b2db      	uxtb	r3, r3
    6028:	f003 0310 	and.w	r3, r3, #16
    602c:	2b00      	cmp	r3, #0
    602e:	f041 804e 	bne.w	70ce <ground_calibrate+0x12ae>
    6032:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6036:	f2c2 0300 	movt	r3, #8192	; 0x2000
    603a:	781b      	ldrb	r3, [r3, #0]
    603c:	b2db      	uxtb	r3, r3
    603e:	461a      	mov	r2, r3
    6040:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6044:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6048:	5c9a      	ldrb	r2, [r3, r2]
    604a:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    604e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6052:	701a      	strb	r2, [r3, #0]
    6054:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    6058:	f2c2 0300 	movt	r3, #8192	; 0x2000
    605c:	2200      	movs	r2, #0
    605e:	701a      	strb	r2, [r3, #0]
    6060:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6068:	781b      	ldrb	r3, [r3, #0]
    606a:	b2db      	uxtb	r3, r3
    606c:	3301      	adds	r3, #1
    606e:	b2da      	uxtb	r2, r3
    6070:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6078:	701a      	strb	r2, [r3, #0]
    607a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    607e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6082:	781b      	ldrb	r3, [r3, #0]
    6084:	b2db      	uxtb	r3, r3
    6086:	2bff      	cmp	r3, #255	; 0xff
    6088:	d105      	bne.n	6096 <ground_calibrate+0x276>
    608a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    608e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6092:	2200      	movs	r2, #0
    6094:	701a      	strb	r2, [r3, #0]
    6096:	f242 0338 	movw	r3, #8248	; 0x2038
    609a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    609e:	f242 0238 	movw	r2, #8248	; 0x2038
    60a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    60a6:	7812      	ldrb	r2, [r2, #0]
    60a8:	b2d2      	uxtb	r2, r2
    60aa:	f042 0201 	orr.w	r2, r2, #1
    60ae:	b2d2      	uxtb	r2, r2
    60b0:	701a      	strb	r2, [r3, #0]
    60b2:	f242 0339 	movw	r3, #8249	; 0x2039
    60b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60ba:	f242 0239 	movw	r2, #8249	; 0x2039
    60be:	f2c2 0200 	movt	r2, #8192	; 0x2000
    60c2:	7812      	ldrb	r2, [r2, #0]
    60c4:	b2d2      	uxtb	r2, r2
    60c6:	f042 0210 	orr.w	r2, r2, #16
    60ca:	b2d2      	uxtb	r2, r2
    60cc:	701a      	strb	r2, [r3, #0]
    60ce:	f000 bffe 	b.w	70ce <ground_calibrate+0x12ae>
    60d2:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    60d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60da:	781b      	ldrb	r3, [r3, #0]
    60dc:	3301      	adds	r3, #1
    60de:	b2da      	uxtb	r2, r3
    60e0:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    60e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60e8:	701a      	strb	r2, [r3, #0]
    60ea:	f000 bff0 	b.w	70ce <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    60ee:	f64a 63ca 	movw	r3, #44746	; 0xaeca
    60f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60f6:	781b      	ldrb	r3, [r3, #0]
    60f8:	2b01      	cmp	r3, #1
    60fa:	f040 87e8 	bne.w	70ce <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    60fe:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    6102:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6106:	885b      	ldrh	r3, [r3, #2]
    6108:	b21b      	sxth	r3, r3
    610a:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    610e:	db09      	blt.n	6124 <ground_calibrate+0x304>
    6110:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    6114:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6118:	885b      	ldrh	r3, [r3, #2]
    611a:	b21b      	sxth	r3, r3
    611c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    6120:	f340 87d5 	ble.w	70ce <ground_calibrate+0x12ae>
      ir_gain_calib();
    6124:	f00b fcfc 	bl	11b20 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    6128:	f240 33f8 	movw	r3, #1016	; 0x3f8
    612c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6130:	681a      	ldr	r2, [r3, #0]
    6132:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    6136:	f2c2 0300 	movt	r3, #8192	; 0x2000
    613a:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    613c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6144:	781a      	ldrb	r2, [r3, #0]
    6146:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    614a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    614e:	781b      	ldrb	r3, [r3, #0]
    6150:	b2db      	uxtb	r3, r3
    6152:	429a      	cmp	r2, r3
    6154:	d313      	bcc.n	617e <ground_calibrate+0x35e>
    6156:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    615a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    615e:	781b      	ldrb	r3, [r3, #0]
    6160:	b2db      	uxtb	r3, r3
    6162:	461a      	mov	r2, r3
    6164:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    616c:	781b      	ldrb	r3, [r3, #0]
    616e:	1ad3      	subs	r3, r2, r3
    6170:	33ff      	adds	r3, #255	; 0xff
    6172:	2b14      	cmp	r3, #20
    6174:	bfd4      	ite	le
    6176:	2300      	movle	r3, #0
    6178:	2301      	movgt	r3, #1
    617a:	b2db      	uxtb	r3, r3
    617c:	e011      	b.n	61a2 <ground_calibrate+0x382>
    617e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6186:	781b      	ldrb	r3, [r3, #0]
    6188:	b2db      	uxtb	r3, r3
    618a:	461a      	mov	r2, r3
    618c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6190:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6194:	781b      	ldrb	r3, [r3, #0]
    6196:	1ad3      	subs	r3, r2, r3
    6198:	2b14      	cmp	r3, #20
    619a:	bfd4      	ite	le
    619c:	2300      	movle	r3, #0
    619e:	2301      	movgt	r3, #1
    61a0:	b2db      	uxtb	r3, r3
    61a2:	2b00      	cmp	r3, #0
    61a4:	f000 85a6 	beq.w	6cf4 <ground_calibrate+0xed4>
    61a8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    61ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61b0:	781b      	ldrb	r3, [r3, #0]
    61b2:	461a      	mov	r2, r3
    61b4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    61b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61bc:	2105      	movs	r1, #5
    61be:	5499      	strb	r1, [r3, r2]
    61c0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    61c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61c8:	781b      	ldrb	r3, [r3, #0]
    61ca:	3301      	adds	r3, #1
    61cc:	b2da      	uxtb	r2, r3
    61ce:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    61d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61d6:	701a      	strb	r2, [r3, #0]
    61d8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    61dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61e0:	781b      	ldrb	r3, [r3, #0]
    61e2:	2bff      	cmp	r3, #255	; 0xff
    61e4:	d105      	bne.n	61f2 <ground_calibrate+0x3d2>
    61e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    61ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61ee:	2200      	movs	r2, #0
    61f0:	701a      	strb	r2, [r3, #0]
    61f2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    61f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61fa:	781b      	ldrb	r3, [r3, #0]
    61fc:	461a      	mov	r2, r3
    61fe:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6206:	2105      	movs	r1, #5
    6208:	5499      	strb	r1, [r3, r2]
    620a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    620e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6212:	781b      	ldrb	r3, [r3, #0]
    6214:	3301      	adds	r3, #1
    6216:	b2da      	uxtb	r2, r3
    6218:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    621c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6220:	701a      	strb	r2, [r3, #0]
    6222:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    622a:	781b      	ldrb	r3, [r3, #0]
    622c:	2bff      	cmp	r3, #255	; 0xff
    622e:	d105      	bne.n	623c <ground_calibrate+0x41c>
    6230:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6238:	2200      	movs	r2, #0
    623a:	701a      	strb	r2, [r3, #0]
    623c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6244:	2205      	movs	r2, #5
    6246:	701a      	strb	r2, [r3, #0]
    6248:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    624c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6250:	2205      	movs	r2, #5
    6252:	701a      	strb	r2, [r3, #0]
    6254:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    625c:	781b      	ldrb	r3, [r3, #0]
    625e:	461a      	mov	r2, r3
    6260:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    6264:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6268:	7819      	ldrb	r1, [r3, #0]
    626a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    626e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6272:	5499      	strb	r1, [r3, r2]
    6274:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    6278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    627c:	781a      	ldrb	r2, [r3, #0]
    627e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6286:	781b      	ldrb	r3, [r3, #0]
    6288:	4413      	add	r3, r2
    628a:	b2da      	uxtb	r2, r3
    628c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6290:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6294:	701a      	strb	r2, [r3, #0]
    6296:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    629a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    629e:	781a      	ldrb	r2, [r3, #0]
    62a0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    62a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62a8:	781b      	ldrb	r3, [r3, #0]
    62aa:	4413      	add	r3, r2
    62ac:	b2da      	uxtb	r2, r3
    62ae:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    62b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62b6:	701a      	strb	r2, [r3, #0]
    62b8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    62bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62c0:	781b      	ldrb	r3, [r3, #0]
    62c2:	3301      	adds	r3, #1
    62c4:	b2da      	uxtb	r2, r3
    62c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    62ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62ce:	701a      	strb	r2, [r3, #0]
    62d0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    62d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62d8:	781b      	ldrb	r3, [r3, #0]
    62da:	2bff      	cmp	r3, #255	; 0xff
    62dc:	d105      	bne.n	62ea <ground_calibrate+0x4ca>
    62de:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    62e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62e6:	2200      	movs	r2, #0
    62e8:	701a      	strb	r2, [r3, #0]
    62ea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    62ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62f2:	781b      	ldrb	r3, [r3, #0]
    62f4:	461a      	mov	r2, r3
    62f6:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    62fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62fe:	7859      	ldrb	r1, [r3, #1]
    6300:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6308:	5499      	strb	r1, [r3, r2]
    630a:	4bd2      	ldr	r3, [pc, #840]	; (6654 <ground_calibrate+0x834>)
    630c:	781a      	ldrb	r2, [r3, #0]
    630e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6316:	781b      	ldrb	r3, [r3, #0]
    6318:	4413      	add	r3, r2
    631a:	b2da      	uxtb	r2, r3
    631c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6324:	701a      	strb	r2, [r3, #0]
    6326:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    632a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    632e:	781a      	ldrb	r2, [r3, #0]
    6330:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6338:	781b      	ldrb	r3, [r3, #0]
    633a:	4413      	add	r3, r2
    633c:	b2da      	uxtb	r2, r3
    633e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6346:	701a      	strb	r2, [r3, #0]
    6348:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    634c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6350:	781b      	ldrb	r3, [r3, #0]
    6352:	3301      	adds	r3, #1
    6354:	b2da      	uxtb	r2, r3
    6356:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    635a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    635e:	701a      	strb	r2, [r3, #0]
    6360:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6368:	781b      	ldrb	r3, [r3, #0]
    636a:	2bff      	cmp	r3, #255	; 0xff
    636c:	d105      	bne.n	637a <ground_calibrate+0x55a>
    636e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6376:	2200      	movs	r2, #0
    6378:	701a      	strb	r2, [r3, #0]
    637a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    637e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6382:	781b      	ldrb	r3, [r3, #0]
    6384:	461a      	mov	r2, r3
    6386:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    638a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    638e:	7899      	ldrb	r1, [r3, #2]
    6390:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6398:	5499      	strb	r1, [r3, r2]
    639a:	4baf      	ldr	r3, [pc, #700]	; (6658 <ground_calibrate+0x838>)
    639c:	781a      	ldrb	r2, [r3, #0]
    639e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    63a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63a6:	781b      	ldrb	r3, [r3, #0]
    63a8:	4413      	add	r3, r2
    63aa:	b2da      	uxtb	r2, r3
    63ac:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    63b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63b4:	701a      	strb	r2, [r3, #0]
    63b6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    63ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63be:	781a      	ldrb	r2, [r3, #0]
    63c0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    63c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63c8:	781b      	ldrb	r3, [r3, #0]
    63ca:	4413      	add	r3, r2
    63cc:	b2da      	uxtb	r2, r3
    63ce:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    63d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63d6:	701a      	strb	r2, [r3, #0]
    63d8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    63dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63e0:	781b      	ldrb	r3, [r3, #0]
    63e2:	3301      	adds	r3, #1
    63e4:	b2da      	uxtb	r2, r3
    63e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    63ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63ee:	701a      	strb	r2, [r3, #0]
    63f0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    63f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63f8:	781b      	ldrb	r3, [r3, #0]
    63fa:	2bff      	cmp	r3, #255	; 0xff
    63fc:	d105      	bne.n	640a <ground_calibrate+0x5ea>
    63fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6406:	2200      	movs	r2, #0
    6408:	701a      	strb	r2, [r3, #0]
    640a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    640e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6412:	781b      	ldrb	r3, [r3, #0]
    6414:	461a      	mov	r2, r3
    6416:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    641a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    641e:	78d9      	ldrb	r1, [r3, #3]
    6420:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6428:	5499      	strb	r1, [r3, r2]
    642a:	4b8c      	ldr	r3, [pc, #560]	; (665c <ground_calibrate+0x83c>)
    642c:	781a      	ldrb	r2, [r3, #0]
    642e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6436:	781b      	ldrb	r3, [r3, #0]
    6438:	4413      	add	r3, r2
    643a:	b2da      	uxtb	r2, r3
    643c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6444:	701a      	strb	r2, [r3, #0]
    6446:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    644a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    644e:	781a      	ldrb	r2, [r3, #0]
    6450:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6458:	781b      	ldrb	r3, [r3, #0]
    645a:	4413      	add	r3, r2
    645c:	b2da      	uxtb	r2, r3
    645e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6466:	701a      	strb	r2, [r3, #0]
    6468:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    646c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6470:	781b      	ldrb	r3, [r3, #0]
    6472:	3301      	adds	r3, #1
    6474:	b2da      	uxtb	r2, r3
    6476:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    647a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    647e:	701a      	strb	r2, [r3, #0]
    6480:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6488:	781b      	ldrb	r3, [r3, #0]
    648a:	2bff      	cmp	r3, #255	; 0xff
    648c:	d105      	bne.n	649a <ground_calibrate+0x67a>
    648e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6496:	2200      	movs	r2, #0
    6498:	701a      	strb	r2, [r3, #0]
    649a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    649e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64a2:	781b      	ldrb	r3, [r3, #0]
    64a4:	461a      	mov	r2, r3
    64a6:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    64aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ae:	7819      	ldrb	r1, [r3, #0]
    64b0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    64b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64b8:	5499      	strb	r1, [r3, r2]
    64ba:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    64be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64c2:	781a      	ldrb	r2, [r3, #0]
    64c4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    64c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64cc:	781b      	ldrb	r3, [r3, #0]
    64ce:	4413      	add	r3, r2
    64d0:	b2da      	uxtb	r2, r3
    64d2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    64d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64da:	701a      	strb	r2, [r3, #0]
    64dc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    64e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64e4:	781a      	ldrb	r2, [r3, #0]
    64e6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    64ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ee:	781b      	ldrb	r3, [r3, #0]
    64f0:	4413      	add	r3, r2
    64f2:	b2da      	uxtb	r2, r3
    64f4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    64f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64fc:	701a      	strb	r2, [r3, #0]
    64fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6506:	781b      	ldrb	r3, [r3, #0]
    6508:	3301      	adds	r3, #1
    650a:	b2da      	uxtb	r2, r3
    650c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6514:	701a      	strb	r2, [r3, #0]
    6516:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    651a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    651e:	781b      	ldrb	r3, [r3, #0]
    6520:	2bff      	cmp	r3, #255	; 0xff
    6522:	d105      	bne.n	6530 <ground_calibrate+0x710>
    6524:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    652c:	2200      	movs	r2, #0
    652e:	701a      	strb	r2, [r3, #0]
    6530:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6538:	781b      	ldrb	r3, [r3, #0]
    653a:	461a      	mov	r2, r3
    653c:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    6540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6544:	7859      	ldrb	r1, [r3, #1]
    6546:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    654a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    654e:	5499      	strb	r1, [r3, r2]
    6550:	4b43      	ldr	r3, [pc, #268]	; (6660 <ground_calibrate+0x840>)
    6552:	781a      	ldrb	r2, [r3, #0]
    6554:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    655c:	781b      	ldrb	r3, [r3, #0]
    655e:	4413      	add	r3, r2
    6560:	b2da      	uxtb	r2, r3
    6562:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6566:	f2c2 0300 	movt	r3, #8192	; 0x2000
    656a:	701a      	strb	r2, [r3, #0]
    656c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6570:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6574:	781a      	ldrb	r2, [r3, #0]
    6576:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    657a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    657e:	781b      	ldrb	r3, [r3, #0]
    6580:	4413      	add	r3, r2
    6582:	b2da      	uxtb	r2, r3
    6584:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    658c:	701a      	strb	r2, [r3, #0]
    658e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6596:	781b      	ldrb	r3, [r3, #0]
    6598:	3301      	adds	r3, #1
    659a:	b2da      	uxtb	r2, r3
    659c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    65a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65a4:	701a      	strb	r2, [r3, #0]
    65a6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    65aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65ae:	781b      	ldrb	r3, [r3, #0]
    65b0:	2bff      	cmp	r3, #255	; 0xff
    65b2:	d105      	bne.n	65c0 <ground_calibrate+0x7a0>
    65b4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    65b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65bc:	2200      	movs	r2, #0
    65be:	701a      	strb	r2, [r3, #0]
    65c0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    65c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65c8:	781b      	ldrb	r3, [r3, #0]
    65ca:	461a      	mov	r2, r3
    65cc:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    65d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65d4:	7899      	ldrb	r1, [r3, #2]
    65d6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    65da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65de:	5499      	strb	r1, [r3, r2]
    65e0:	4b20      	ldr	r3, [pc, #128]	; (6664 <ground_calibrate+0x844>)
    65e2:	781a      	ldrb	r2, [r3, #0]
    65e4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    65e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65ec:	781b      	ldrb	r3, [r3, #0]
    65ee:	4413      	add	r3, r2
    65f0:	b2da      	uxtb	r2, r3
    65f2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    65f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65fa:	701a      	strb	r2, [r3, #0]
    65fc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6604:	781a      	ldrb	r2, [r3, #0]
    6606:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    660a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    660e:	781b      	ldrb	r3, [r3, #0]
    6610:	4413      	add	r3, r2
    6612:	b2da      	uxtb	r2, r3
    6614:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6618:	f2c2 0300 	movt	r3, #8192	; 0x2000
    661c:	701a      	strb	r2, [r3, #0]
    661e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6622:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6626:	781b      	ldrb	r3, [r3, #0]
    6628:	3301      	adds	r3, #1
    662a:	b2da      	uxtb	r2, r3
    662c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6634:	701a      	strb	r2, [r3, #0]
    6636:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    663a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    663e:	781b      	ldrb	r3, [r3, #0]
    6640:	2bff      	cmp	r3, #255	; 0xff
    6642:	d111      	bne.n	6668 <ground_calibrate+0x848>
    6644:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    664c:	2200      	movs	r2, #0
    664e:	701a      	strb	r2, [r3, #0]
    6650:	e00a      	b.n	6668 <ground_calibrate+0x848>
    6652:	bf00      	nop
    6654:	2000b4c9 	.word	0x2000b4c9
    6658:	2000b4ca 	.word	0x2000b4ca
    665c:	2000b4cb 	.word	0x2000b4cb
    6660:	2000b4cd 	.word	0x2000b4cd
    6664:	2000b4ce 	.word	0x2000b4ce
    6668:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    666c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6670:	781b      	ldrb	r3, [r3, #0]
    6672:	461a      	mov	r2, r3
    6674:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    6678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    667c:	78d9      	ldrb	r1, [r3, #3]
    667e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6686:	5499      	strb	r1, [r3, r2]
    6688:	4bd3      	ldr	r3, [pc, #844]	; (69d8 <ground_calibrate+0xbb8>)
    668a:	781a      	ldrb	r2, [r3, #0]
    668c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6694:	781b      	ldrb	r3, [r3, #0]
    6696:	4413      	add	r3, r2
    6698:	b2da      	uxtb	r2, r3
    669a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    669e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66a2:	701a      	strb	r2, [r3, #0]
    66a4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    66a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66ac:	781a      	ldrb	r2, [r3, #0]
    66ae:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    66b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66b6:	781b      	ldrb	r3, [r3, #0]
    66b8:	4413      	add	r3, r2
    66ba:	b2da      	uxtb	r2, r3
    66bc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    66c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66c4:	701a      	strb	r2, [r3, #0]
    66c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    66ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66ce:	781b      	ldrb	r3, [r3, #0]
    66d0:	3301      	adds	r3, #1
    66d2:	b2da      	uxtb	r2, r3
    66d4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    66d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66dc:	701a      	strb	r2, [r3, #0]
    66de:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    66e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66e6:	781b      	ldrb	r3, [r3, #0]
    66e8:	2bff      	cmp	r3, #255	; 0xff
    66ea:	d105      	bne.n	66f8 <ground_calibrate+0x8d8>
    66ec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    66f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66f4:	2200      	movs	r2, #0
    66f6:	701a      	strb	r2, [r3, #0]
    66f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    66fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6700:	781b      	ldrb	r3, [r3, #0]
    6702:	461a      	mov	r2, r3
    6704:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    6708:	f2c2 0300 	movt	r3, #8192	; 0x2000
    670c:	7819      	ldrb	r1, [r3, #0]
    670e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6712:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6716:	5499      	strb	r1, [r3, r2]
    6718:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    671c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6720:	781a      	ldrb	r2, [r3, #0]
    6722:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6726:	f2c2 0300 	movt	r3, #8192	; 0x2000
    672a:	781b      	ldrb	r3, [r3, #0]
    672c:	4413      	add	r3, r2
    672e:	b2da      	uxtb	r2, r3
    6730:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6738:	701a      	strb	r2, [r3, #0]
    673a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    673e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6742:	781a      	ldrb	r2, [r3, #0]
    6744:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    674c:	781b      	ldrb	r3, [r3, #0]
    674e:	4413      	add	r3, r2
    6750:	b2da      	uxtb	r2, r3
    6752:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6756:	f2c2 0300 	movt	r3, #8192	; 0x2000
    675a:	701a      	strb	r2, [r3, #0]
    675c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6764:	781b      	ldrb	r3, [r3, #0]
    6766:	3301      	adds	r3, #1
    6768:	b2da      	uxtb	r2, r3
    676a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    676e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6772:	701a      	strb	r2, [r3, #0]
    6774:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    677c:	781b      	ldrb	r3, [r3, #0]
    677e:	2bff      	cmp	r3, #255	; 0xff
    6780:	d105      	bne.n	678e <ground_calibrate+0x96e>
    6782:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6786:	f2c2 0300 	movt	r3, #8192	; 0x2000
    678a:	2200      	movs	r2, #0
    678c:	701a      	strb	r2, [r3, #0]
    678e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6796:	781b      	ldrb	r3, [r3, #0]
    6798:	461a      	mov	r2, r3
    679a:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    679e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67a2:	7859      	ldrb	r1, [r3, #1]
    67a4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    67a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67ac:	5499      	strb	r1, [r3, r2]
    67ae:	4b8b      	ldr	r3, [pc, #556]	; (69dc <ground_calibrate+0xbbc>)
    67b0:	781a      	ldrb	r2, [r3, #0]
    67b2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    67b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67ba:	781b      	ldrb	r3, [r3, #0]
    67bc:	4413      	add	r3, r2
    67be:	b2da      	uxtb	r2, r3
    67c0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    67c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67c8:	701a      	strb	r2, [r3, #0]
    67ca:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    67ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67d2:	781a      	ldrb	r2, [r3, #0]
    67d4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    67d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67dc:	781b      	ldrb	r3, [r3, #0]
    67de:	4413      	add	r3, r2
    67e0:	b2da      	uxtb	r2, r3
    67e2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    67e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67ea:	701a      	strb	r2, [r3, #0]
    67ec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    67f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67f4:	781b      	ldrb	r3, [r3, #0]
    67f6:	3301      	adds	r3, #1
    67f8:	b2da      	uxtb	r2, r3
    67fa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    67fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6802:	701a      	strb	r2, [r3, #0]
    6804:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    680c:	781b      	ldrb	r3, [r3, #0]
    680e:	2bff      	cmp	r3, #255	; 0xff
    6810:	d105      	bne.n	681e <ground_calibrate+0x9fe>
    6812:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    681a:	2200      	movs	r2, #0
    681c:	701a      	strb	r2, [r3, #0]
    681e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6826:	781b      	ldrb	r3, [r3, #0]
    6828:	461a      	mov	r2, r3
    682a:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    682e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6832:	7899      	ldrb	r1, [r3, #2]
    6834:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    683c:	5499      	strb	r1, [r3, r2]
    683e:	4b68      	ldr	r3, [pc, #416]	; (69e0 <ground_calibrate+0xbc0>)
    6840:	781a      	ldrb	r2, [r3, #0]
    6842:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6846:	f2c2 0300 	movt	r3, #8192	; 0x2000
    684a:	781b      	ldrb	r3, [r3, #0]
    684c:	4413      	add	r3, r2
    684e:	b2da      	uxtb	r2, r3
    6850:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6854:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6858:	701a      	strb	r2, [r3, #0]
    685a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    685e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6862:	781a      	ldrb	r2, [r3, #0]
    6864:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    686c:	781b      	ldrb	r3, [r3, #0]
    686e:	4413      	add	r3, r2
    6870:	b2da      	uxtb	r2, r3
    6872:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6876:	f2c2 0300 	movt	r3, #8192	; 0x2000
    687a:	701a      	strb	r2, [r3, #0]
    687c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6880:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6884:	781b      	ldrb	r3, [r3, #0]
    6886:	3301      	adds	r3, #1
    6888:	b2da      	uxtb	r2, r3
    688a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    688e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6892:	701a      	strb	r2, [r3, #0]
    6894:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6898:	f2c2 0300 	movt	r3, #8192	; 0x2000
    689c:	781b      	ldrb	r3, [r3, #0]
    689e:	2bff      	cmp	r3, #255	; 0xff
    68a0:	d105      	bne.n	68ae <ground_calibrate+0xa8e>
    68a2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    68a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68aa:	2200      	movs	r2, #0
    68ac:	701a      	strb	r2, [r3, #0]
    68ae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    68b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68b6:	781b      	ldrb	r3, [r3, #0]
    68b8:	461a      	mov	r2, r3
    68ba:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    68be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68c2:	78d9      	ldrb	r1, [r3, #3]
    68c4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    68c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68cc:	5499      	strb	r1, [r3, r2]
    68ce:	4b45      	ldr	r3, [pc, #276]	; (69e4 <ground_calibrate+0xbc4>)
    68d0:	781a      	ldrb	r2, [r3, #0]
    68d2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    68d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68da:	781b      	ldrb	r3, [r3, #0]
    68dc:	4413      	add	r3, r2
    68de:	b2da      	uxtb	r2, r3
    68e0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    68e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68e8:	701a      	strb	r2, [r3, #0]
    68ea:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    68ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68f2:	781a      	ldrb	r2, [r3, #0]
    68f4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    68f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68fc:	781b      	ldrb	r3, [r3, #0]
    68fe:	4413      	add	r3, r2
    6900:	b2da      	uxtb	r2, r3
    6902:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6906:	f2c2 0300 	movt	r3, #8192	; 0x2000
    690a:	701a      	strb	r2, [r3, #0]
    690c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6914:	781b      	ldrb	r3, [r3, #0]
    6916:	3301      	adds	r3, #1
    6918:	b2da      	uxtb	r2, r3
    691a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    691e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6922:	701a      	strb	r2, [r3, #0]
    6924:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    692c:	781b      	ldrb	r3, [r3, #0]
    692e:	2bff      	cmp	r3, #255	; 0xff
    6930:	d105      	bne.n	693e <ground_calibrate+0xb1e>
    6932:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6936:	f2c2 0300 	movt	r3, #8192	; 0x2000
    693a:	2200      	movs	r2, #0
    693c:	701a      	strb	r2, [r3, #0]
    693e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6946:	781b      	ldrb	r3, [r3, #0]
    6948:	461a      	mov	r2, r3
    694a:	f240 33f2 	movw	r3, #1010	; 0x3f2
    694e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6952:	7819      	ldrb	r1, [r3, #0]
    6954:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6958:	f2c2 0300 	movt	r3, #8192	; 0x2000
    695c:	5499      	strb	r1, [r3, r2]
    695e:	f240 33f2 	movw	r3, #1010	; 0x3f2
    6962:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6966:	781a      	ldrb	r2, [r3, #0]
    6968:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    696c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6970:	781b      	ldrb	r3, [r3, #0]
    6972:	4413      	add	r3, r2
    6974:	b2da      	uxtb	r2, r3
    6976:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    697a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    697e:	701a      	strb	r2, [r3, #0]
    6980:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6984:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6988:	781a      	ldrb	r2, [r3, #0]
    698a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    698e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6992:	781b      	ldrb	r3, [r3, #0]
    6994:	4413      	add	r3, r2
    6996:	b2da      	uxtb	r2, r3
    6998:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    699c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69a0:	701a      	strb	r2, [r3, #0]
    69a2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    69a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69aa:	781b      	ldrb	r3, [r3, #0]
    69ac:	3301      	adds	r3, #1
    69ae:	b2da      	uxtb	r2, r3
    69b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    69b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69b8:	701a      	strb	r2, [r3, #0]
    69ba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    69be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69c2:	781b      	ldrb	r3, [r3, #0]
    69c4:	2bff      	cmp	r3, #255	; 0xff
    69c6:	d10f      	bne.n	69e8 <ground_calibrate+0xbc8>
    69c8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    69cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69d0:	2200      	movs	r2, #0
    69d2:	701a      	strb	r2, [r3, #0]
    69d4:	e008      	b.n	69e8 <ground_calibrate+0xbc8>
    69d6:	bf00      	nop
    69d8:	2000b4cf 	.word	0x2000b4cf
    69dc:	2000b4c5 	.word	0x2000b4c5
    69e0:	2000b4c6 	.word	0x2000b4c6
    69e4:	2000b4c7 	.word	0x2000b4c7
    69e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    69ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69f0:	781b      	ldrb	r3, [r3, #0]
    69f2:	461a      	mov	r2, r3
    69f4:	f240 33f2 	movw	r3, #1010	; 0x3f2
    69f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69fc:	7859      	ldrb	r1, [r3, #1]
    69fe:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a06:	5499      	strb	r1, [r3, r2]
    6a08:	4bd4      	ldr	r3, [pc, #848]	; (6d5c <ground_calibrate+0xf3c>)
    6a0a:	781a      	ldrb	r2, [r3, #0]
    6a0c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a14:	781b      	ldrb	r3, [r3, #0]
    6a16:	4413      	add	r3, r2
    6a18:	b2da      	uxtb	r2, r3
    6a1a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a22:	701a      	strb	r2, [r3, #0]
    6a24:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a2c:	781a      	ldrb	r2, [r3, #0]
    6a2e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a36:	781b      	ldrb	r3, [r3, #0]
    6a38:	4413      	add	r3, r2
    6a3a:	b2da      	uxtb	r2, r3
    6a3c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a44:	701a      	strb	r2, [r3, #0]
    6a46:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a4e:	781b      	ldrb	r3, [r3, #0]
    6a50:	3301      	adds	r3, #1
    6a52:	b2da      	uxtb	r2, r3
    6a54:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a5c:	701a      	strb	r2, [r3, #0]
    6a5e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a66:	781b      	ldrb	r3, [r3, #0]
    6a68:	2bff      	cmp	r3, #255	; 0xff
    6a6a:	d105      	bne.n	6a78 <ground_calibrate+0xc58>
    6a6c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a74:	2200      	movs	r2, #0
    6a76:	701a      	strb	r2, [r3, #0]
    6a78:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a80:	781b      	ldrb	r3, [r3, #0]
    6a82:	461a      	mov	r2, r3
    6a84:	f240 33f4 	movw	r3, #1012	; 0x3f4
    6a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a8c:	7819      	ldrb	r1, [r3, #0]
    6a8e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a96:	5499      	strb	r1, [r3, r2]
    6a98:	f240 33f4 	movw	r3, #1012	; 0x3f4
    6a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6aa0:	781a      	ldrb	r2, [r3, #0]
    6aa2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6aaa:	781b      	ldrb	r3, [r3, #0]
    6aac:	4413      	add	r3, r2
    6aae:	b2da      	uxtb	r2, r3
    6ab0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ab8:	701a      	strb	r2, [r3, #0]
    6aba:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ac2:	781a      	ldrb	r2, [r3, #0]
    6ac4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6acc:	781b      	ldrb	r3, [r3, #0]
    6ace:	4413      	add	r3, r2
    6ad0:	b2da      	uxtb	r2, r3
    6ad2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ada:	701a      	strb	r2, [r3, #0]
    6adc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ae4:	781b      	ldrb	r3, [r3, #0]
    6ae6:	3301      	adds	r3, #1
    6ae8:	b2da      	uxtb	r2, r3
    6aea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6af2:	701a      	strb	r2, [r3, #0]
    6af4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6afc:	781b      	ldrb	r3, [r3, #0]
    6afe:	2bff      	cmp	r3, #255	; 0xff
    6b00:	d105      	bne.n	6b0e <ground_calibrate+0xcee>
    6b02:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b0a:	2200      	movs	r2, #0
    6b0c:	701a      	strb	r2, [r3, #0]
    6b0e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b16:	781b      	ldrb	r3, [r3, #0]
    6b18:	461a      	mov	r2, r3
    6b1a:	f240 33f4 	movw	r3, #1012	; 0x3f4
    6b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b22:	7859      	ldrb	r1, [r3, #1]
    6b24:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b2c:	5499      	strb	r1, [r3, r2]
    6b2e:	4b8c      	ldr	r3, [pc, #560]	; (6d60 <ground_calibrate+0xf40>)
    6b30:	781a      	ldrb	r2, [r3, #0]
    6b32:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b3a:	781b      	ldrb	r3, [r3, #0]
    6b3c:	4413      	add	r3, r2
    6b3e:	b2da      	uxtb	r2, r3
    6b40:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b48:	701a      	strb	r2, [r3, #0]
    6b4a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b52:	781a      	ldrb	r2, [r3, #0]
    6b54:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b5c:	781b      	ldrb	r3, [r3, #0]
    6b5e:	4413      	add	r3, r2
    6b60:	b2da      	uxtb	r2, r3
    6b62:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b6a:	701a      	strb	r2, [r3, #0]
    6b6c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b74:	781b      	ldrb	r3, [r3, #0]
    6b76:	3301      	adds	r3, #1
    6b78:	b2da      	uxtb	r2, r3
    6b7a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b82:	701a      	strb	r2, [r3, #0]
    6b84:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b8c:	781b      	ldrb	r3, [r3, #0]
    6b8e:	2bff      	cmp	r3, #255	; 0xff
    6b90:	d105      	bne.n	6b9e <ground_calibrate+0xd7e>
    6b92:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b9a:	2200      	movs	r2, #0
    6b9c:	701a      	strb	r2, [r3, #0]
    6b9e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6ba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ba6:	781b      	ldrb	r3, [r3, #0]
    6ba8:	461a      	mov	r2, r3
    6baa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bb2:	7819      	ldrb	r1, [r3, #0]
    6bb4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bbc:	5499      	strb	r1, [r3, r2]
    6bbe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bc6:	781b      	ldrb	r3, [r3, #0]
    6bc8:	3301      	adds	r3, #1
    6bca:	b2da      	uxtb	r2, r3
    6bcc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bd4:	701a      	strb	r2, [r3, #0]
    6bd6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bde:	781b      	ldrb	r3, [r3, #0]
    6be0:	2bff      	cmp	r3, #255	; 0xff
    6be2:	d105      	bne.n	6bf0 <ground_calibrate+0xdd0>
    6be4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6be8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bec:	2200      	movs	r2, #0
    6bee:	701a      	strb	r2, [r3, #0]
    6bf0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bf8:	781b      	ldrb	r3, [r3, #0]
    6bfa:	461a      	mov	r2, r3
    6bfc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c04:	7819      	ldrb	r1, [r3, #0]
    6c06:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c0e:	5499      	strb	r1, [r3, r2]
    6c10:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c18:	781b      	ldrb	r3, [r3, #0]
    6c1a:	3301      	adds	r3, #1
    6c1c:	b2da      	uxtb	r2, r3
    6c1e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c26:	701a      	strb	r2, [r3, #0]
    6c28:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c30:	781b      	ldrb	r3, [r3, #0]
    6c32:	2bff      	cmp	r3, #255	; 0xff
    6c34:	d105      	bne.n	6c42 <ground_calibrate+0xe22>
    6c36:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c3e:	2200      	movs	r2, #0
    6c40:	701a      	strb	r2, [r3, #0]
    6c42:	f242 0339 	movw	r3, #8249	; 0x2039
    6c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c4a:	781b      	ldrb	r3, [r3, #0]
    6c4c:	b2db      	uxtb	r3, r3
    6c4e:	f003 0310 	and.w	r3, r3, #16
    6c52:	2b00      	cmp	r3, #0
    6c54:	d15a      	bne.n	6d0c <ground_calibrate+0xeec>
    6c56:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c5e:	781b      	ldrb	r3, [r3, #0]
    6c60:	b2db      	uxtb	r3, r3
    6c62:	461a      	mov	r2, r3
    6c64:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c6c:	5c9a      	ldrb	r2, [r3, r2]
    6c6e:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    6c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c76:	701a      	strb	r2, [r3, #0]
    6c78:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    6c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c80:	2200      	movs	r2, #0
    6c82:	701a      	strb	r2, [r3, #0]
    6c84:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c8c:	781b      	ldrb	r3, [r3, #0]
    6c8e:	b2db      	uxtb	r3, r3
    6c90:	3301      	adds	r3, #1
    6c92:	b2da      	uxtb	r2, r3
    6c94:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c9c:	701a      	strb	r2, [r3, #0]
    6c9e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ca6:	781b      	ldrb	r3, [r3, #0]
    6ca8:	b2db      	uxtb	r3, r3
    6caa:	2bff      	cmp	r3, #255	; 0xff
    6cac:	d105      	bne.n	6cba <ground_calibrate+0xe9a>
    6cae:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cb6:	2200      	movs	r2, #0
    6cb8:	701a      	strb	r2, [r3, #0]
    6cba:	f242 0338 	movw	r3, #8248	; 0x2038
    6cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cc2:	f242 0238 	movw	r2, #8248	; 0x2038
    6cc6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6cca:	7812      	ldrb	r2, [r2, #0]
    6ccc:	b2d2      	uxtb	r2, r2
    6cce:	f042 0201 	orr.w	r2, r2, #1
    6cd2:	b2d2      	uxtb	r2, r2
    6cd4:	701a      	strb	r2, [r3, #0]
    6cd6:	f242 0339 	movw	r3, #8249	; 0x2039
    6cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cde:	f242 0239 	movw	r2, #8249	; 0x2039
    6ce2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6ce6:	7812      	ldrb	r2, [r2, #0]
    6ce8:	b2d2      	uxtb	r2, r2
    6cea:	f042 0210 	orr.w	r2, r2, #16
    6cee:	b2d2      	uxtb	r2, r2
    6cf0:	701a      	strb	r2, [r3, #0]
    6cf2:	e00b      	b.n	6d0c <ground_calibrate+0xeec>
    6cf4:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    6cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cfc:	781b      	ldrb	r3, [r3, #0]
    6cfe:	3301      	adds	r3, #1
    6d00:	b2da      	uxtb	r2, r3
    6d02:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    6d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d0a:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    6d0c:	f64a 63ca 	movw	r3, #44746	; 0xaeca
    6d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d14:	2202      	movs	r2, #2
    6d16:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    6d18:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d20:	781a      	ldrb	r2, [r3, #0]
    6d22:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d2a:	781b      	ldrb	r3, [r3, #0]
    6d2c:	b2db      	uxtb	r3, r3
    6d2e:	429a      	cmp	r2, r3
    6d30:	d318      	bcc.n	6d64 <ground_calibrate+0xf44>
    6d32:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d3a:	781b      	ldrb	r3, [r3, #0]
    6d3c:	b2db      	uxtb	r3, r3
    6d3e:	461a      	mov	r2, r3
    6d40:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d48:	781b      	ldrb	r3, [r3, #0]
    6d4a:	1ad3      	subs	r3, r2, r3
    6d4c:	33ff      	adds	r3, #255	; 0xff
    6d4e:	2b06      	cmp	r3, #6
    6d50:	bfd4      	ite	le
    6d52:	2300      	movle	r3, #0
    6d54:	2301      	movgt	r3, #1
    6d56:	b2db      	uxtb	r3, r3
    6d58:	e016      	b.n	6d88 <ground_calibrate+0xf68>
    6d5a:	bf00      	nop
    6d5c:	200003f3 	.word	0x200003f3
    6d60:	200003f5 	.word	0x200003f5
    6d64:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d6c:	781b      	ldrb	r3, [r3, #0]
    6d6e:	b2db      	uxtb	r3, r3
    6d70:	461a      	mov	r2, r3
    6d72:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d7a:	781b      	ldrb	r3, [r3, #0]
    6d7c:	1ad3      	subs	r3, r2, r3
    6d7e:	2b06      	cmp	r3, #6
    6d80:	bfd4      	ite	le
    6d82:	2300      	movle	r3, #0
    6d84:	2301      	movgt	r3, #1
    6d86:	b2db      	uxtb	r3, r3
    6d88:	2b00      	cmp	r3, #0
    6d8a:	f000 8194 	beq.w	70b6 <ground_calibrate+0x1296>
    6d8e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d96:	781b      	ldrb	r3, [r3, #0]
    6d98:	461a      	mov	r2, r3
    6d9a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6d9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6da2:	2105      	movs	r1, #5
    6da4:	5499      	strb	r1, [r3, r2]
    6da6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dae:	781b      	ldrb	r3, [r3, #0]
    6db0:	3301      	adds	r3, #1
    6db2:	b2da      	uxtb	r2, r3
    6db4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dbc:	701a      	strb	r2, [r3, #0]
    6dbe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dc6:	781b      	ldrb	r3, [r3, #0]
    6dc8:	2bff      	cmp	r3, #255	; 0xff
    6dca:	d105      	bne.n	6dd8 <ground_calibrate+0xfb8>
    6dcc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dd4:	2200      	movs	r2, #0
    6dd6:	701a      	strb	r2, [r3, #0]
    6dd8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6de0:	781b      	ldrb	r3, [r3, #0]
    6de2:	461a      	mov	r2, r3
    6de4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dec:	2103      	movs	r1, #3
    6dee:	5499      	strb	r1, [r3, r2]
    6df0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6df8:	781b      	ldrb	r3, [r3, #0]
    6dfa:	3301      	adds	r3, #1
    6dfc:	b2da      	uxtb	r2, r3
    6dfe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e06:	701a      	strb	r2, [r3, #0]
    6e08:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e10:	781b      	ldrb	r3, [r3, #0]
    6e12:	2bff      	cmp	r3, #255	; 0xff
    6e14:	d105      	bne.n	6e22 <ground_calibrate+0x1002>
    6e16:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e1e:	2200      	movs	r2, #0
    6e20:	701a      	strb	r2, [r3, #0]
    6e22:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e2a:	2203      	movs	r2, #3
    6e2c:	701a      	strb	r2, [r3, #0]
    6e2e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e36:	2203      	movs	r2, #3
    6e38:	701a      	strb	r2, [r3, #0]
    6e3a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e42:	781b      	ldrb	r3, [r3, #0]
    6e44:	461a      	mov	r2, r3
    6e46:	f240 33f0 	movw	r3, #1008	; 0x3f0
    6e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e4e:	7819      	ldrb	r1, [r3, #0]
    6e50:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e58:	5499      	strb	r1, [r3, r2]
    6e5a:	f240 33f0 	movw	r3, #1008	; 0x3f0
    6e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e62:	781a      	ldrb	r2, [r3, #0]
    6e64:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e6c:	781b      	ldrb	r3, [r3, #0]
    6e6e:	4413      	add	r3, r2
    6e70:	b2da      	uxtb	r2, r3
    6e72:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e7a:	701a      	strb	r2, [r3, #0]
    6e7c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e84:	781a      	ldrb	r2, [r3, #0]
    6e86:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e8e:	781b      	ldrb	r3, [r3, #0]
    6e90:	4413      	add	r3, r2
    6e92:	b2da      	uxtb	r2, r3
    6e94:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e9c:	701a      	strb	r2, [r3, #0]
    6e9e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6ea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ea6:	781b      	ldrb	r3, [r3, #0]
    6ea8:	3301      	adds	r3, #1
    6eaa:	b2da      	uxtb	r2, r3
    6eac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eb4:	701a      	strb	r2, [r3, #0]
    6eb6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ebe:	781b      	ldrb	r3, [r3, #0]
    6ec0:	2bff      	cmp	r3, #255	; 0xff
    6ec2:	d105      	bne.n	6ed0 <ground_calibrate+0x10b0>
    6ec4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ecc:	2200      	movs	r2, #0
    6ece:	701a      	strb	r2, [r3, #0]
    6ed0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ed8:	781b      	ldrb	r3, [r3, #0]
    6eda:	461a      	mov	r2, r3
    6edc:	f240 33f0 	movw	r3, #1008	; 0x3f0
    6ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ee4:	7859      	ldrb	r1, [r3, #1]
    6ee6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6eea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eee:	5499      	strb	r1, [r3, r2]
    6ef0:	4b77      	ldr	r3, [pc, #476]	; (70d0 <ground_calibrate+0x12b0>)
    6ef2:	781a      	ldrb	r2, [r3, #0]
    6ef4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6efc:	781b      	ldrb	r3, [r3, #0]
    6efe:	4413      	add	r3, r2
    6f00:	b2da      	uxtb	r2, r3
    6f02:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f0a:	701a      	strb	r2, [r3, #0]
    6f0c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f14:	781a      	ldrb	r2, [r3, #0]
    6f16:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f1e:	781b      	ldrb	r3, [r3, #0]
    6f20:	4413      	add	r3, r2
    6f22:	b2da      	uxtb	r2, r3
    6f24:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f2c:	701a      	strb	r2, [r3, #0]
    6f2e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f36:	781b      	ldrb	r3, [r3, #0]
    6f38:	3301      	adds	r3, #1
    6f3a:	b2da      	uxtb	r2, r3
    6f3c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f44:	701a      	strb	r2, [r3, #0]
    6f46:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f4e:	781b      	ldrb	r3, [r3, #0]
    6f50:	2bff      	cmp	r3, #255	; 0xff
    6f52:	d105      	bne.n	6f60 <ground_calibrate+0x1140>
    6f54:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f5c:	2200      	movs	r2, #0
    6f5e:	701a      	strb	r2, [r3, #0]
    6f60:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f68:	781b      	ldrb	r3, [r3, #0]
    6f6a:	461a      	mov	r2, r3
    6f6c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f74:	7819      	ldrb	r1, [r3, #0]
    6f76:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f7e:	5499      	strb	r1, [r3, r2]
    6f80:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f88:	781b      	ldrb	r3, [r3, #0]
    6f8a:	3301      	adds	r3, #1
    6f8c:	b2da      	uxtb	r2, r3
    6f8e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f96:	701a      	strb	r2, [r3, #0]
    6f98:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fa0:	781b      	ldrb	r3, [r3, #0]
    6fa2:	2bff      	cmp	r3, #255	; 0xff
    6fa4:	d105      	bne.n	6fb2 <ground_calibrate+0x1192>
    6fa6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fae:	2200      	movs	r2, #0
    6fb0:	701a      	strb	r2, [r3, #0]
    6fb2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fba:	781b      	ldrb	r3, [r3, #0]
    6fbc:	461a      	mov	r2, r3
    6fbe:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fc6:	7819      	ldrb	r1, [r3, #0]
    6fc8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fd0:	5499      	strb	r1, [r3, r2]
    6fd2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fda:	781b      	ldrb	r3, [r3, #0]
    6fdc:	3301      	adds	r3, #1
    6fde:	b2da      	uxtb	r2, r3
    6fe0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fe8:	701a      	strb	r2, [r3, #0]
    6fea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ff2:	781b      	ldrb	r3, [r3, #0]
    6ff4:	2bff      	cmp	r3, #255	; 0xff
    6ff6:	d105      	bne.n	7004 <ground_calibrate+0x11e4>
    6ff8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7000:	2200      	movs	r2, #0
    7002:	701a      	strb	r2, [r3, #0]
    7004:	f242 0339 	movw	r3, #8249	; 0x2039
    7008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    700c:	781b      	ldrb	r3, [r3, #0]
    700e:	b2db      	uxtb	r3, r3
    7010:	f003 0310 	and.w	r3, r3, #16
    7014:	2b00      	cmp	r3, #0
    7016:	d15a      	bne.n	70ce <ground_calibrate+0x12ae>
    7018:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    701c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7020:	781b      	ldrb	r3, [r3, #0]
    7022:	b2db      	uxtb	r3, r3
    7024:	461a      	mov	r2, r3
    7026:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    702a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    702e:	5c9a      	ldrb	r2, [r3, r2]
    7030:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    7034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7038:	701a      	strb	r2, [r3, #0]
    703a:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    703e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7042:	2200      	movs	r2, #0
    7044:	701a      	strb	r2, [r3, #0]
    7046:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    704a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    704e:	781b      	ldrb	r3, [r3, #0]
    7050:	b2db      	uxtb	r3, r3
    7052:	3301      	adds	r3, #1
    7054:	b2da      	uxtb	r2, r3
    7056:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    705a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    705e:	701a      	strb	r2, [r3, #0]
    7060:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    7064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7068:	781b      	ldrb	r3, [r3, #0]
    706a:	b2db      	uxtb	r3, r3
    706c:	2bff      	cmp	r3, #255	; 0xff
    706e:	d105      	bne.n	707c <ground_calibrate+0x125c>
    7070:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    7074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7078:	2200      	movs	r2, #0
    707a:	701a      	strb	r2, [r3, #0]
    707c:	f242 0338 	movw	r3, #8248	; 0x2038
    7080:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7084:	f242 0238 	movw	r2, #8248	; 0x2038
    7088:	f2c2 0200 	movt	r2, #8192	; 0x2000
    708c:	7812      	ldrb	r2, [r2, #0]
    708e:	b2d2      	uxtb	r2, r2
    7090:	f042 0201 	orr.w	r2, r2, #1
    7094:	b2d2      	uxtb	r2, r2
    7096:	701a      	strb	r2, [r3, #0]
    7098:	f242 0339 	movw	r3, #8249	; 0x2039
    709c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70a0:	f242 0239 	movw	r2, #8249	; 0x2039
    70a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    70a8:	7812      	ldrb	r2, [r2, #0]
    70aa:	b2d2      	uxtb	r2, r2
    70ac:	f042 0210 	orr.w	r2, r2, #16
    70b0:	b2d2      	uxtb	r2, r2
    70b2:	701a      	strb	r2, [r3, #0]
    70b4:	e00b      	b.n	70ce <ground_calibrate+0x12ae>
    70b6:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    70ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70be:	781b      	ldrb	r3, [r3, #0]
    70c0:	3301      	adds	r3, #1
    70c2:	b2da      	uxtb	r2, r3
    70c4:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    70c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70cc:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    70ce:	bd80      	pop	{r7, pc}
    70d0:	200003f1 	.word	0x200003f1

000070d4 <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    70d4:	b480      	push	{r7}
    70d6:	b083      	sub	sp, #12
    70d8:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    70da:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    70de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70e2:	781b      	ldrb	r3, [r3, #0]
    70e4:	2b03      	cmp	r3, #3
    70e6:	d10c      	bne.n	7102 <pprz_mode_update+0x2e>
    70e8:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    70ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70f0:	781b      	ldrb	r3, [r3, #0]
    70f2:	2b00      	cmp	r3, #0
    70f4:	d032      	beq.n	715c <pprz_mode_update+0x88>
    70f6:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    70fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70fe:	2200      	movs	r2, #0
    7100:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    7102:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    7106:	f2c2 0300 	movt	r3, #8192	; 0x2000
    710a:	891b      	ldrh	r3, [r3, #8]
    710c:	b21b      	sxth	r3, r3
    710e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    7112:	dc0f      	bgt.n	7134 <pprz_mode_update+0x60>
    7114:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    7118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    711c:	891b      	ldrh	r3, [r3, #8]
    711e:	b21a      	sxth	r2, r3
    7120:	f64e 5341 	movw	r3, #60737	; 0xed41
    7124:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    7128:	429a      	cmp	r2, r3
    712a:	bfb4      	ite	lt
    712c:	2300      	movlt	r3, #0
    712e:	2301      	movge	r3, #1
    7130:	b2db      	uxtb	r3, r3
    7132:	e000      	b.n	7136 <pprz_mode_update+0x62>
    7134:	2302      	movs	r3, #2
    7136:	71fb      	strb	r3, [r7, #7]
    7138:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    713c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7140:	781b      	ldrb	r3, [r3, #0]
    7142:	79fa      	ldrb	r2, [r7, #7]
    7144:	429a      	cmp	r2, r3
    7146:	d007      	beq.n	7158 <pprz_mode_update+0x84>
    7148:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    714c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7150:	79fa      	ldrb	r2, [r7, #7]
    7152:	701a      	strb	r2, [r3, #0]
    7154:	2301      	movs	r3, #1
    7156:	e002      	b.n	715e <pprz_mode_update+0x8a>
    7158:	2300      	movs	r3, #0
    715a:	e000      	b.n	715e <pprz_mode_update+0x8a>
  } else
    return FALSE;
    715c:	2300      	movs	r3, #0
}
    715e:	4618      	mov	r0, r3
    7160:	370c      	adds	r7, #12
    7162:	46bd      	mov	sp, r7
    7164:	f85d 7b04 	ldr.w	r7, [sp], #4
    7168:	4770      	bx	lr
    716a:	bf00      	nop

0000716c <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    716c:	b480      	push	{r7}
    716e:	b083      	sub	sp, #12
    7170:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    7172:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    7176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    717a:	89db      	ldrh	r3, [r3, #14]
    717c:	b21a      	sxth	r2, r3
    717e:	f640 437f 	movw	r3, #3199	; 0xc7f
    7182:	429a      	cmp	r2, r3
    7184:	bfd4      	ite	le
    7186:	2300      	movle	r3, #0
    7188:	2301      	movgt	r3, #1
    718a:	b2db      	uxtb	r3, r3
    718c:	71fb      	strb	r3, [r7, #7]
    718e:	f240 33ec 	movw	r3, #1004	; 0x3ec
    7192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7196:	781b      	ldrb	r3, [r3, #0]
    7198:	79fa      	ldrb	r2, [r7, #7]
    719a:	429a      	cmp	r2, r3
    719c:	d007      	beq.n	71ae <ir_estim_mode_update+0x42>
    719e:	f240 33ec 	movw	r3, #1004	; 0x3ec
    71a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71a6:	79fa      	ldrb	r2, [r7, #7]
    71a8:	701a      	strb	r2, [r3, #0]
    71aa:	2301      	movs	r3, #1
    71ac:	e000      	b.n	71b0 <ir_estim_mode_update+0x44>
    71ae:	2300      	movs	r3, #0
}
    71b0:	4618      	mov	r0, r3
    71b2:	370c      	adds	r7, #12
    71b4:	46bd      	mov	sp, r7
    71b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    71ba:	4770      	bx	lr

000071bc <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    71bc:	b480      	push	{r7}
    71be:	b083      	sub	sp, #12
    71c0:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    71c2:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    71c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71ca:	7cdb      	ldrb	r3, [r3, #19]
    71cc:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    71ce:	f64a 63bb 	movw	r3, #44731	; 0xaebb
    71d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71d6:	781b      	ldrb	r3, [r3, #0]
    71d8:	79fa      	ldrb	r2, [r7, #7]
    71da:	429a      	cmp	r2, r3
    71dc:	d017      	beq.n	720e <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    71de:	f64a 63bb 	movw	r3, #44731	; 0xaebb
    71e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71e6:	781b      	ldrb	r3, [r3, #0]
    71e8:	461a      	mov	r2, r3
    71ea:	79fb      	ldrb	r3, [r7, #7]
    71ec:	4053      	eors	r3, r2
    71ee:	f003 0303 	and.w	r3, r3, #3
    71f2:	2b00      	cmp	r3, #0
    71f4:	bf0c      	ite	eq
    71f6:	2300      	moveq	r3, #0
    71f8:	2301      	movne	r3, #1
    71fa:	b2db      	uxtb	r3, r3
    71fc:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    71fe:	f64a 63bb 	movw	r3, #44731	; 0xaebb
    7202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7206:	79fa      	ldrb	r2, [r7, #7]
    7208:	701a      	strb	r2, [r3, #0]
    return changed;
    720a:	79bb      	ldrb	r3, [r7, #6]
    720c:	e000      	b.n	7210 <mcu1_status_update+0x54>
  }
  return FALSE;
    720e:	2300      	movs	r3, #0
}
    7210:	4618      	mov	r0, r3
    7212:	370c      	adds	r7, #12
    7214:	46bd      	mov	sp, r7
    7216:	f85d 7b04 	ldr.w	r7, [sp], #4
    721a:	4770      	bx	lr

0000721c <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    721c:	b480      	push	{r7}
    721e:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    7220:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    7224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7228:	781b      	ldrb	r3, [r3, #0]
    722a:	2b00      	cmp	r3, #0
    722c:	d12a      	bne.n	7284 <events_update+0x68>
    722e:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    7232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7236:	895b      	ldrh	r3, [r3, #10]
    7238:	b21b      	sxth	r3, r3
    723a:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    723e:	dd21      	ble.n	7284 <events_update+0x68>
    7240:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    7244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7248:	881b      	ldrh	r3, [r3, #0]
    724a:	2b13      	cmp	r3, #19
    724c:	d819      	bhi.n	7282 <events_update+0x66>
    724e:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    7252:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7256:	881b      	ldrh	r3, [r3, #0]
    7258:	3301      	adds	r3, #1
    725a:	b29a      	uxth	r2, r3
    725c:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    7260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7264:	801a      	strh	r2, [r3, #0]
    7266:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    726a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    726e:	881b      	ldrh	r3, [r3, #0]
    7270:	2b14      	cmp	r3, #20
    7272:	d106      	bne.n	7282 <events_update+0x66>
    7274:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    7278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    727c:	2201      	movs	r2, #1
    727e:	701a      	strb	r2, [r3, #0]
    7280:	e00c      	b.n	729c <events_update+0x80>
    7282:	e00b      	b.n	729c <events_update+0x80>
    7284:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    7288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    728c:	2200      	movs	r2, #0
    728e:	801a      	strh	r2, [r3, #0]
    7290:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    7294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7298:	2200      	movs	r2, #0
    729a:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    729c:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    72a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72a4:	781b      	ldrb	r3, [r3, #0]
    72a6:	2b00      	cmp	r3, #0
    72a8:	d12a      	bne.n	7300 <events_update+0xe4>
    72aa:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    72ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72b2:	895b      	ldrh	r3, [r3, #10]
    72b4:	b21b      	sxth	r3, r3
    72b6:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    72ba:	da21      	bge.n	7300 <events_update+0xe4>
    72bc:	f64a 63ce 	movw	r3, #44750	; 0xaece
    72c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72c4:	881b      	ldrh	r3, [r3, #0]
    72c6:	2b13      	cmp	r3, #19
    72c8:	d819      	bhi.n	72fe <events_update+0xe2>
    72ca:	f64a 63ce 	movw	r3, #44750	; 0xaece
    72ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72d2:	881b      	ldrh	r3, [r3, #0]
    72d4:	3301      	adds	r3, #1
    72d6:	b29a      	uxth	r2, r3
    72d8:	f64a 63ce 	movw	r3, #44750	; 0xaece
    72dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72e0:	801a      	strh	r2, [r3, #0]
    72e2:	f64a 63ce 	movw	r3, #44750	; 0xaece
    72e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72ea:	881b      	ldrh	r3, [r3, #0]
    72ec:	2b14      	cmp	r3, #20
    72ee:	d106      	bne.n	72fe <events_update+0xe2>
    72f0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    72f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72f8:	2201      	movs	r2, #1
    72fa:	701a      	strb	r2, [r3, #0]
    72fc:	e00c      	b.n	7318 <events_update+0xfc>
    72fe:	e00b      	b.n	7318 <events_update+0xfc>
    7300:	f64a 63ce 	movw	r3, #44750	; 0xaece
    7304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7308:	2200      	movs	r2, #0
    730a:	801a      	strh	r2, [r3, #0]
    730c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7314:	2200      	movs	r2, #0
    7316:	701a      	strb	r2, [r3, #0]
}  
    7318:	46bd      	mov	sp, r7
    731a:	f85d 7b04 	ldr.w	r7, [sp], #4
    731e:	4770      	bx	lr

00007320 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    7320:	b480      	push	{r7}
    7322:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    7324:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    7328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    732c:	88da      	ldrh	r2, [r3, #6]
    732e:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    7332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7336:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    7338:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    733c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7340:	2200      	movs	r2, #0
    7342:	74da      	strb	r2, [r3, #19]
}
    7344:	46bd      	mov	sp, r7
    7346:	f85d 7b04 	ldr.w	r7, [sp], #4
    734a:	4770      	bx	lr

0000734c <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    734c:	b480      	push	{r7}
    734e:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  //if (boot) 
  {
      DOWNLINK_SEND_BOOT(&version);
    7350:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7354:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7358:	781a      	ldrb	r2, [r3, #0]
    735a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    735e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7362:	781b      	ldrb	r3, [r3, #0]
    7364:	b2db      	uxtb	r3, r3
    7366:	429a      	cmp	r2, r3
    7368:	d313      	bcc.n	7392 <send_boot+0x46>
    736a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    736e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7372:	781b      	ldrb	r3, [r3, #0]
    7374:	b2db      	uxtb	r3, r3
    7376:	461a      	mov	r2, r3
    7378:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    737c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7380:	781b      	ldrb	r3, [r3, #0]
    7382:	1ad3      	subs	r3, r2, r3
    7384:	33ff      	adds	r3, #255	; 0xff
    7386:	2b06      	cmp	r3, #6
    7388:	bfd4      	ite	le
    738a:	2300      	movle	r3, #0
    738c:	2301      	movgt	r3, #1
    738e:	b2db      	uxtb	r3, r3
    7390:	e011      	b.n	73b6 <send_boot+0x6a>
    7392:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    7396:	f2c2 0300 	movt	r3, #8192	; 0x2000
    739a:	781b      	ldrb	r3, [r3, #0]
    739c:	b2db      	uxtb	r3, r3
    739e:	461a      	mov	r2, r3
    73a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    73a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73a8:	781b      	ldrb	r3, [r3, #0]
    73aa:	1ad3      	subs	r3, r2, r3
    73ac:	2b06      	cmp	r3, #6
    73ae:	bfd4      	ite	le
    73b0:	2300      	movle	r3, #0
    73b2:	2301      	movgt	r3, #1
    73b4:	b2db      	uxtb	r3, r3
    73b6:	2b00      	cmp	r3, #0
    73b8:	f000 8194 	beq.w	76e4 <send_boot+0x398>
    73bc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    73c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73c4:	781b      	ldrb	r3, [r3, #0]
    73c6:	461a      	mov	r2, r3
    73c8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    73cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73d0:	2105      	movs	r1, #5
    73d2:	5499      	strb	r1, [r3, r2]
    73d4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    73d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73dc:	781b      	ldrb	r3, [r3, #0]
    73de:	3301      	adds	r3, #1
    73e0:	b2da      	uxtb	r2, r3
    73e2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    73e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73ea:	701a      	strb	r2, [r3, #0]
    73ec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    73f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73f4:	781b      	ldrb	r3, [r3, #0]
    73f6:	2bff      	cmp	r3, #255	; 0xff
    73f8:	d105      	bne.n	7406 <send_boot+0xba>
    73fa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    73fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7402:	2200      	movs	r2, #0
    7404:	701a      	strb	r2, [r3, #0]
    7406:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    740a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    740e:	781b      	ldrb	r3, [r3, #0]
    7410:	461a      	mov	r2, r3
    7412:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7416:	f2c2 0300 	movt	r3, #8192	; 0x2000
    741a:	2101      	movs	r1, #1
    741c:	5499      	strb	r1, [r3, r2]
    741e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7422:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7426:	781b      	ldrb	r3, [r3, #0]
    7428:	3301      	adds	r3, #1
    742a:	b2da      	uxtb	r2, r3
    742c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7434:	701a      	strb	r2, [r3, #0]
    7436:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    743a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    743e:	781b      	ldrb	r3, [r3, #0]
    7440:	2bff      	cmp	r3, #255	; 0xff
    7442:	d105      	bne.n	7450 <send_boot+0x104>
    7444:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7448:	f2c2 0300 	movt	r3, #8192	; 0x2000
    744c:	2200      	movs	r2, #0
    744e:	701a      	strb	r2, [r3, #0]
    7450:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7458:	2201      	movs	r2, #1
    745a:	701a      	strb	r2, [r3, #0]
    745c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7464:	2201      	movs	r2, #1
    7466:	701a      	strb	r2, [r3, #0]
    7468:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    746c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7470:	781b      	ldrb	r3, [r3, #0]
    7472:	461a      	mov	r2, r3
    7474:	f648 035e 	movw	r3, #34910	; 0x885e
    7478:	f2c0 0301 	movt	r3, #1
    747c:	7819      	ldrb	r1, [r3, #0]
    747e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7486:	5499      	strb	r1, [r3, r2]
    7488:	f648 035e 	movw	r3, #34910	; 0x885e
    748c:	f2c0 0301 	movt	r3, #1
    7490:	781a      	ldrb	r2, [r3, #0]
    7492:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    749a:	781b      	ldrb	r3, [r3, #0]
    749c:	4413      	add	r3, r2
    749e:	b2da      	uxtb	r2, r3
    74a0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    74a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74a8:	701a      	strb	r2, [r3, #0]
    74aa:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    74ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74b2:	781a      	ldrb	r2, [r3, #0]
    74b4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    74b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74bc:	781b      	ldrb	r3, [r3, #0]
    74be:	4413      	add	r3, r2
    74c0:	b2da      	uxtb	r2, r3
    74c2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    74c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74ca:	701a      	strb	r2, [r3, #0]
    74cc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    74d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74d4:	781b      	ldrb	r3, [r3, #0]
    74d6:	3301      	adds	r3, #1
    74d8:	b2da      	uxtb	r2, r3
    74da:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    74de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74e2:	701a      	strb	r2, [r3, #0]
    74e4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    74e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74ec:	781b      	ldrb	r3, [r3, #0]
    74ee:	2bff      	cmp	r3, #255	; 0xff
    74f0:	d105      	bne.n	74fe <send_boot+0x1b2>
    74f2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    74f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74fa:	2200      	movs	r2, #0
    74fc:	701a      	strb	r2, [r3, #0]
    74fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7506:	781b      	ldrb	r3, [r3, #0]
    7508:	461a      	mov	r2, r3
    750a:	f648 035e 	movw	r3, #34910	; 0x885e
    750e:	f2c0 0301 	movt	r3, #1
    7512:	7859      	ldrb	r1, [r3, #1]
    7514:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    751c:	5499      	strb	r1, [r3, r2]
    751e:	4b88      	ldr	r3, [pc, #544]	; (7740 <send_boot+0x3f4>)
    7520:	781a      	ldrb	r2, [r3, #0]
    7522:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7526:	f2c2 0300 	movt	r3, #8192	; 0x2000
    752a:	781b      	ldrb	r3, [r3, #0]
    752c:	4413      	add	r3, r2
    752e:	b2da      	uxtb	r2, r3
    7530:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7538:	701a      	strb	r2, [r3, #0]
    753a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    753e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7542:	781a      	ldrb	r2, [r3, #0]
    7544:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    754c:	781b      	ldrb	r3, [r3, #0]
    754e:	4413      	add	r3, r2
    7550:	b2da      	uxtb	r2, r3
    7552:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    755a:	701a      	strb	r2, [r3, #0]
    755c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7564:	781b      	ldrb	r3, [r3, #0]
    7566:	3301      	adds	r3, #1
    7568:	b2da      	uxtb	r2, r3
    756a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    756e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7572:	701a      	strb	r2, [r3, #0]
    7574:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7578:	f2c2 0300 	movt	r3, #8192	; 0x2000
    757c:	781b      	ldrb	r3, [r3, #0]
    757e:	2bff      	cmp	r3, #255	; 0xff
    7580:	d105      	bne.n	758e <send_boot+0x242>
    7582:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7586:	f2c2 0300 	movt	r3, #8192	; 0x2000
    758a:	2200      	movs	r2, #0
    758c:	701a      	strb	r2, [r3, #0]
    758e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7596:	781b      	ldrb	r3, [r3, #0]
    7598:	461a      	mov	r2, r3
    759a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    759e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75a2:	7819      	ldrb	r1, [r3, #0]
    75a4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    75a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75ac:	5499      	strb	r1, [r3, r2]
    75ae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    75b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75b6:	781b      	ldrb	r3, [r3, #0]
    75b8:	3301      	adds	r3, #1
    75ba:	b2da      	uxtb	r2, r3
    75bc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    75c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75c4:	701a      	strb	r2, [r3, #0]
    75c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    75ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75ce:	781b      	ldrb	r3, [r3, #0]
    75d0:	2bff      	cmp	r3, #255	; 0xff
    75d2:	d105      	bne.n	75e0 <send_boot+0x294>
    75d4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    75d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75dc:	2200      	movs	r2, #0
    75de:	701a      	strb	r2, [r3, #0]
    75e0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    75e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75e8:	781b      	ldrb	r3, [r3, #0]
    75ea:	461a      	mov	r2, r3
    75ec:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    75f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75f4:	7819      	ldrb	r1, [r3, #0]
    75f6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    75fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75fe:	5499      	strb	r1, [r3, r2]
    7600:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7608:	781b      	ldrb	r3, [r3, #0]
    760a:	3301      	adds	r3, #1
    760c:	b2da      	uxtb	r2, r3
    760e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7616:	701a      	strb	r2, [r3, #0]
    7618:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    761c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7620:	781b      	ldrb	r3, [r3, #0]
    7622:	2bff      	cmp	r3, #255	; 0xff
    7624:	d105      	bne.n	7632 <send_boot+0x2e6>
    7626:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    762a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    762e:	2200      	movs	r2, #0
    7630:	701a      	strb	r2, [r3, #0]
    7632:	f242 0339 	movw	r3, #8249	; 0x2039
    7636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    763a:	781b      	ldrb	r3, [r3, #0]
    763c:	b2db      	uxtb	r3, r3
    763e:	f003 0310 	and.w	r3, r3, #16
    7642:	2b00      	cmp	r3, #0
    7644:	d15a      	bne.n	76fc <send_boot+0x3b0>
    7646:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    764a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    764e:	781b      	ldrb	r3, [r3, #0]
    7650:	b2db      	uxtb	r3, r3
    7652:	461a      	mov	r2, r3
    7654:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    765c:	5c9a      	ldrb	r2, [r3, r2]
    765e:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    7662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7666:	701a      	strb	r2, [r3, #0]
    7668:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    766c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7670:	2200      	movs	r2, #0
    7672:	701a      	strb	r2, [r3, #0]
    7674:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    7678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    767c:	781b      	ldrb	r3, [r3, #0]
    767e:	b2db      	uxtb	r3, r3
    7680:	3301      	adds	r3, #1
    7682:	b2da      	uxtb	r2, r3
    7684:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    7688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    768c:	701a      	strb	r2, [r3, #0]
    768e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    7692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7696:	781b      	ldrb	r3, [r3, #0]
    7698:	b2db      	uxtb	r3, r3
    769a:	2bff      	cmp	r3, #255	; 0xff
    769c:	d105      	bne.n	76aa <send_boot+0x35e>
    769e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    76a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76a6:	2200      	movs	r2, #0
    76a8:	701a      	strb	r2, [r3, #0]
    76aa:	f242 0338 	movw	r3, #8248	; 0x2038
    76ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76b2:	f242 0238 	movw	r2, #8248	; 0x2038
    76b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    76ba:	7812      	ldrb	r2, [r2, #0]
    76bc:	b2d2      	uxtb	r2, r2
    76be:	f042 0201 	orr.w	r2, r2, #1
    76c2:	b2d2      	uxtb	r2, r2
    76c4:	701a      	strb	r2, [r3, #0]
    76c6:	f242 0339 	movw	r3, #8249	; 0x2039
    76ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76ce:	f242 0239 	movw	r2, #8249	; 0x2039
    76d2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    76d6:	7812      	ldrb	r2, [r2, #0]
    76d8:	b2d2      	uxtb	r2, r2
    76da:	f042 0210 	orr.w	r2, r2, #16
    76de:	b2d2      	uxtb	r2, r2
    76e0:	701a      	strb	r2, [r3, #0]
    76e2:	e00b      	b.n	76fc <send_boot+0x3b0>
    76e4:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    76e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76ec:	781b      	ldrb	r3, [r3, #0]
    76ee:	3301      	adds	r3, #1
    76f0:	b2da      	uxtb	r2, r3
    76f2:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    76f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76fa:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    76fc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7704:	781a      	ldrb	r2, [r3, #0]
    7706:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    770a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    770e:	781b      	ldrb	r3, [r3, #0]
    7710:	b2db      	uxtb	r3, r3
    7712:	429a      	cmp	r2, r3
    7714:	d316      	bcc.n	7744 <send_boot+0x3f8>
    7716:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    771a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    771e:	781b      	ldrb	r3, [r3, #0]
    7720:	b2db      	uxtb	r3, r3
    7722:	461a      	mov	r2, r3
    7724:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    772c:	781b      	ldrb	r3, [r3, #0]
    772e:	1ad3      	subs	r3, r2, r3
    7730:	33ff      	adds	r3, #255	; 0xff
    7732:	2b14      	cmp	r3, #20
    7734:	bfd4      	ite	le
    7736:	2300      	movle	r3, #0
    7738:	2301      	movgt	r3, #1
    773a:	b2db      	uxtb	r3, r3
    773c:	e014      	b.n	7768 <send_boot+0x41c>
    773e:	bf00      	nop
    7740:	0001885f 	.word	0x0001885f
    7744:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    7748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    774c:	781b      	ldrb	r3, [r3, #0]
    774e:	b2db      	uxtb	r3, r3
    7750:	461a      	mov	r2, r3
    7752:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7756:	f2c2 0300 	movt	r3, #8192	; 0x2000
    775a:	781b      	ldrb	r3, [r3, #0]
    775c:	1ad3      	subs	r3, r2, r3
    775e:	2b14      	cmp	r3, #20
    7760:	bfd4      	ite	le
    7762:	2300      	movle	r3, #0
    7764:	2301      	movgt	r3, #1
    7766:	b2db      	uxtb	r3, r3
    7768:	2b00      	cmp	r3, #0
    776a:	f000 85a5 	beq.w	82b8 <send_boot+0xf6c>
    776e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7776:	781b      	ldrb	r3, [r3, #0]
    7778:	461a      	mov	r2, r3
    777a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    777e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7782:	2105      	movs	r1, #5
    7784:	5499      	strb	r1, [r3, r2]
    7786:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    778a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    778e:	781b      	ldrb	r3, [r3, #0]
    7790:	3301      	adds	r3, #1
    7792:	b2da      	uxtb	r2, r3
    7794:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    779c:	701a      	strb	r2, [r3, #0]
    779e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    77a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77a6:	781b      	ldrb	r3, [r3, #0]
    77a8:	2bff      	cmp	r3, #255	; 0xff
    77aa:	d105      	bne.n	77b8 <send_boot+0x46c>
    77ac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    77b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77b4:	2200      	movs	r2, #0
    77b6:	701a      	strb	r2, [r3, #0]
    77b8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    77bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77c0:	781b      	ldrb	r3, [r3, #0]
    77c2:	461a      	mov	r2, r3
    77c4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    77c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77cc:	2105      	movs	r1, #5
    77ce:	5499      	strb	r1, [r3, r2]
    77d0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    77d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77d8:	781b      	ldrb	r3, [r3, #0]
    77da:	3301      	adds	r3, #1
    77dc:	b2da      	uxtb	r2, r3
    77de:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    77e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77e6:	701a      	strb	r2, [r3, #0]
    77e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    77ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77f0:	781b      	ldrb	r3, [r3, #0]
    77f2:	2bff      	cmp	r3, #255	; 0xff
    77f4:	d105      	bne.n	7802 <send_boot+0x4b6>
    77f6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    77fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77fe:	2200      	movs	r2, #0
    7800:	701a      	strb	r2, [r3, #0]
    7802:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    780a:	2205      	movs	r2, #5
    780c:	701a      	strb	r2, [r3, #0]
    780e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7816:	2205      	movs	r2, #5
    7818:	701a      	strb	r2, [r3, #0]
    781a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    781e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7822:	781b      	ldrb	r3, [r3, #0]
    7824:	461a      	mov	r2, r3
    7826:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    782a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    782e:	7819      	ldrb	r1, [r3, #0]
    7830:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7834:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7838:	5499      	strb	r1, [r3, r2]
    783a:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    783e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7842:	781a      	ldrb	r2, [r3, #0]
    7844:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7848:	f2c2 0300 	movt	r3, #8192	; 0x2000
    784c:	781b      	ldrb	r3, [r3, #0]
    784e:	4413      	add	r3, r2
    7850:	b2da      	uxtb	r2, r3
    7852:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    785a:	701a      	strb	r2, [r3, #0]
    785c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7864:	781a      	ldrb	r2, [r3, #0]
    7866:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    786a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    786e:	781b      	ldrb	r3, [r3, #0]
    7870:	4413      	add	r3, r2
    7872:	b2da      	uxtb	r2, r3
    7874:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    787c:	701a      	strb	r2, [r3, #0]
    787e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7886:	781b      	ldrb	r3, [r3, #0]
    7888:	3301      	adds	r3, #1
    788a:	b2da      	uxtb	r2, r3
    788c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7890:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7894:	701a      	strb	r2, [r3, #0]
    7896:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    789a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    789e:	781b      	ldrb	r3, [r3, #0]
    78a0:	2bff      	cmp	r3, #255	; 0xff
    78a2:	d105      	bne.n	78b0 <send_boot+0x564>
    78a4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    78a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78ac:	2200      	movs	r2, #0
    78ae:	701a      	strb	r2, [r3, #0]
    78b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    78b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78b8:	781b      	ldrb	r3, [r3, #0]
    78ba:	461a      	mov	r2, r3
    78bc:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    78c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78c4:	7859      	ldrb	r1, [r3, #1]
    78c6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    78ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78ce:	5499      	strb	r1, [r3, r2]
    78d0:	4bd1      	ldr	r3, [pc, #836]	; (7c18 <send_boot+0x8cc>)
    78d2:	781a      	ldrb	r2, [r3, #0]
    78d4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    78d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78dc:	781b      	ldrb	r3, [r3, #0]
    78de:	4413      	add	r3, r2
    78e0:	b2da      	uxtb	r2, r3
    78e2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    78e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78ea:	701a      	strb	r2, [r3, #0]
    78ec:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    78f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78f4:	781a      	ldrb	r2, [r3, #0]
    78f6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    78fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78fe:	781b      	ldrb	r3, [r3, #0]
    7900:	4413      	add	r3, r2
    7902:	b2da      	uxtb	r2, r3
    7904:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    790c:	701a      	strb	r2, [r3, #0]
    790e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7916:	781b      	ldrb	r3, [r3, #0]
    7918:	3301      	adds	r3, #1
    791a:	b2da      	uxtb	r2, r3
    791c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7924:	701a      	strb	r2, [r3, #0]
    7926:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    792a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    792e:	781b      	ldrb	r3, [r3, #0]
    7930:	2bff      	cmp	r3, #255	; 0xff
    7932:	d105      	bne.n	7940 <send_boot+0x5f4>
    7934:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    793c:	2200      	movs	r2, #0
    793e:	701a      	strb	r2, [r3, #0]
    7940:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7944:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7948:	781b      	ldrb	r3, [r3, #0]
    794a:	461a      	mov	r2, r3
    794c:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    7950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7954:	7899      	ldrb	r1, [r3, #2]
    7956:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    795a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    795e:	5499      	strb	r1, [r3, r2]
    7960:	4bae      	ldr	r3, [pc, #696]	; (7c1c <send_boot+0x8d0>)
    7962:	781a      	ldrb	r2, [r3, #0]
    7964:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    796c:	781b      	ldrb	r3, [r3, #0]
    796e:	4413      	add	r3, r2
    7970:	b2da      	uxtb	r2, r3
    7972:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7976:	f2c2 0300 	movt	r3, #8192	; 0x2000
    797a:	701a      	strb	r2, [r3, #0]
    797c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7984:	781a      	ldrb	r2, [r3, #0]
    7986:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    798a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    798e:	781b      	ldrb	r3, [r3, #0]
    7990:	4413      	add	r3, r2
    7992:	b2da      	uxtb	r2, r3
    7994:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    799c:	701a      	strb	r2, [r3, #0]
    799e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    79a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79a6:	781b      	ldrb	r3, [r3, #0]
    79a8:	3301      	adds	r3, #1
    79aa:	b2da      	uxtb	r2, r3
    79ac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    79b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79b4:	701a      	strb	r2, [r3, #0]
    79b6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    79ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79be:	781b      	ldrb	r3, [r3, #0]
    79c0:	2bff      	cmp	r3, #255	; 0xff
    79c2:	d105      	bne.n	79d0 <send_boot+0x684>
    79c4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    79c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79cc:	2200      	movs	r2, #0
    79ce:	701a      	strb	r2, [r3, #0]
    79d0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    79d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79d8:	781b      	ldrb	r3, [r3, #0]
    79da:	461a      	mov	r2, r3
    79dc:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    79e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79e4:	78d9      	ldrb	r1, [r3, #3]
    79e6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    79ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79ee:	5499      	strb	r1, [r3, r2]
    79f0:	4b8b      	ldr	r3, [pc, #556]	; (7c20 <send_boot+0x8d4>)
    79f2:	781a      	ldrb	r2, [r3, #0]
    79f4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    79f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79fc:	781b      	ldrb	r3, [r3, #0]
    79fe:	4413      	add	r3, r2
    7a00:	b2da      	uxtb	r2, r3
    7a02:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7a06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a0a:	701a      	strb	r2, [r3, #0]
    7a0c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a14:	781a      	ldrb	r2, [r3, #0]
    7a16:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a1e:	781b      	ldrb	r3, [r3, #0]
    7a20:	4413      	add	r3, r2
    7a22:	b2da      	uxtb	r2, r3
    7a24:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a2c:	701a      	strb	r2, [r3, #0]
    7a2e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a36:	781b      	ldrb	r3, [r3, #0]
    7a38:	3301      	adds	r3, #1
    7a3a:	b2da      	uxtb	r2, r3
    7a3c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a44:	701a      	strb	r2, [r3, #0]
    7a46:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a4e:	781b      	ldrb	r3, [r3, #0]
    7a50:	2bff      	cmp	r3, #255	; 0xff
    7a52:	d105      	bne.n	7a60 <send_boot+0x714>
    7a54:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a5c:	2200      	movs	r2, #0
    7a5e:	701a      	strb	r2, [r3, #0]
    7a60:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a68:	781b      	ldrb	r3, [r3, #0]
    7a6a:	461a      	mov	r2, r3
    7a6c:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    7a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a74:	7819      	ldrb	r1, [r3, #0]
    7a76:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a7e:	5499      	strb	r1, [r3, r2]
    7a80:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    7a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a88:	781a      	ldrb	r2, [r3, #0]
    7a8a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a92:	781b      	ldrb	r3, [r3, #0]
    7a94:	4413      	add	r3, r2
    7a96:	b2da      	uxtb	r2, r3
    7a98:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aa0:	701a      	strb	r2, [r3, #0]
    7aa2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aaa:	781a      	ldrb	r2, [r3, #0]
    7aac:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ab4:	781b      	ldrb	r3, [r3, #0]
    7ab6:	4413      	add	r3, r2
    7ab8:	b2da      	uxtb	r2, r3
    7aba:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ac2:	701a      	strb	r2, [r3, #0]
    7ac4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7acc:	781b      	ldrb	r3, [r3, #0]
    7ace:	3301      	adds	r3, #1
    7ad0:	b2da      	uxtb	r2, r3
    7ad2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ada:	701a      	strb	r2, [r3, #0]
    7adc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ae4:	781b      	ldrb	r3, [r3, #0]
    7ae6:	2bff      	cmp	r3, #255	; 0xff
    7ae8:	d105      	bne.n	7af6 <send_boot+0x7aa>
    7aea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7af2:	2200      	movs	r2, #0
    7af4:	701a      	strb	r2, [r3, #0]
    7af6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7afe:	781b      	ldrb	r3, [r3, #0]
    7b00:	461a      	mov	r2, r3
    7b02:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    7b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b0a:	7859      	ldrb	r1, [r3, #1]
    7b0c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b14:	5499      	strb	r1, [r3, r2]
    7b16:	4b43      	ldr	r3, [pc, #268]	; (7c24 <send_boot+0x8d8>)
    7b18:	781a      	ldrb	r2, [r3, #0]
    7b1a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b22:	781b      	ldrb	r3, [r3, #0]
    7b24:	4413      	add	r3, r2
    7b26:	b2da      	uxtb	r2, r3
    7b28:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b30:	701a      	strb	r2, [r3, #0]
    7b32:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b3a:	781a      	ldrb	r2, [r3, #0]
    7b3c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b44:	781b      	ldrb	r3, [r3, #0]
    7b46:	4413      	add	r3, r2
    7b48:	b2da      	uxtb	r2, r3
    7b4a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b52:	701a      	strb	r2, [r3, #0]
    7b54:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b5c:	781b      	ldrb	r3, [r3, #0]
    7b5e:	3301      	adds	r3, #1
    7b60:	b2da      	uxtb	r2, r3
    7b62:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b6a:	701a      	strb	r2, [r3, #0]
    7b6c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b74:	781b      	ldrb	r3, [r3, #0]
    7b76:	2bff      	cmp	r3, #255	; 0xff
    7b78:	d105      	bne.n	7b86 <send_boot+0x83a>
    7b7a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b82:	2200      	movs	r2, #0
    7b84:	701a      	strb	r2, [r3, #0]
    7b86:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7b8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b8e:	781b      	ldrb	r3, [r3, #0]
    7b90:	461a      	mov	r2, r3
    7b92:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    7b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b9a:	7899      	ldrb	r1, [r3, #2]
    7b9c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ba4:	5499      	strb	r1, [r3, r2]
    7ba6:	4b20      	ldr	r3, [pc, #128]	; (7c28 <send_boot+0x8dc>)
    7ba8:	781a      	ldrb	r2, [r3, #0]
    7baa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bb2:	781b      	ldrb	r3, [r3, #0]
    7bb4:	4413      	add	r3, r2
    7bb6:	b2da      	uxtb	r2, r3
    7bb8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7bbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bc0:	701a      	strb	r2, [r3, #0]
    7bc2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bca:	781a      	ldrb	r2, [r3, #0]
    7bcc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bd4:	781b      	ldrb	r3, [r3, #0]
    7bd6:	4413      	add	r3, r2
    7bd8:	b2da      	uxtb	r2, r3
    7bda:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7be2:	701a      	strb	r2, [r3, #0]
    7be4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7be8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bec:	781b      	ldrb	r3, [r3, #0]
    7bee:	3301      	adds	r3, #1
    7bf0:	b2da      	uxtb	r2, r3
    7bf2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bfa:	701a      	strb	r2, [r3, #0]
    7bfc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c04:	781b      	ldrb	r3, [r3, #0]
    7c06:	2bff      	cmp	r3, #255	; 0xff
    7c08:	d110      	bne.n	7c2c <send_boot+0x8e0>
    7c0a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7c0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c12:	2200      	movs	r2, #0
    7c14:	701a      	strb	r2, [r3, #0]
    7c16:	e009      	b.n	7c2c <send_boot+0x8e0>
    7c18:	2000b4c9 	.word	0x2000b4c9
    7c1c:	2000b4ca 	.word	0x2000b4ca
    7c20:	2000b4cb 	.word	0x2000b4cb
    7c24:	2000b4cd 	.word	0x2000b4cd
    7c28:	2000b4ce 	.word	0x2000b4ce
    7c2c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c34:	781b      	ldrb	r3, [r3, #0]
    7c36:	461a      	mov	r2, r3
    7c38:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    7c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c40:	78d9      	ldrb	r1, [r3, #3]
    7c42:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c4a:	5499      	strb	r1, [r3, r2]
    7c4c:	4bd3      	ldr	r3, [pc, #844]	; (7f9c <send_boot+0xc50>)
    7c4e:	781a      	ldrb	r2, [r3, #0]
    7c50:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c58:	781b      	ldrb	r3, [r3, #0]
    7c5a:	4413      	add	r3, r2
    7c5c:	b2da      	uxtb	r2, r3
    7c5e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c66:	701a      	strb	r2, [r3, #0]
    7c68:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c70:	781a      	ldrb	r2, [r3, #0]
    7c72:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c7a:	781b      	ldrb	r3, [r3, #0]
    7c7c:	4413      	add	r3, r2
    7c7e:	b2da      	uxtb	r2, r3
    7c80:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c88:	701a      	strb	r2, [r3, #0]
    7c8a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c92:	781b      	ldrb	r3, [r3, #0]
    7c94:	3301      	adds	r3, #1
    7c96:	b2da      	uxtb	r2, r3
    7c98:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ca0:	701a      	strb	r2, [r3, #0]
    7ca2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7caa:	781b      	ldrb	r3, [r3, #0]
    7cac:	2bff      	cmp	r3, #255	; 0xff
    7cae:	d105      	bne.n	7cbc <send_boot+0x970>
    7cb0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cb8:	2200      	movs	r2, #0
    7cba:	701a      	strb	r2, [r3, #0]
    7cbc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7cc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cc4:	781b      	ldrb	r3, [r3, #0]
    7cc6:	461a      	mov	r2, r3
    7cc8:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cd0:	7819      	ldrb	r1, [r3, #0]
    7cd2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7cd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cda:	5499      	strb	r1, [r3, r2]
    7cdc:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ce4:	781a      	ldrb	r2, [r3, #0]
    7ce6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cee:	781b      	ldrb	r3, [r3, #0]
    7cf0:	4413      	add	r3, r2
    7cf2:	b2da      	uxtb	r2, r3
    7cf4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cfc:	701a      	strb	r2, [r3, #0]
    7cfe:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d06:	781a      	ldrb	r2, [r3, #0]
    7d08:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d10:	781b      	ldrb	r3, [r3, #0]
    7d12:	4413      	add	r3, r2
    7d14:	b2da      	uxtb	r2, r3
    7d16:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d1e:	701a      	strb	r2, [r3, #0]
    7d20:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d28:	781b      	ldrb	r3, [r3, #0]
    7d2a:	3301      	adds	r3, #1
    7d2c:	b2da      	uxtb	r2, r3
    7d2e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d36:	701a      	strb	r2, [r3, #0]
    7d38:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d40:	781b      	ldrb	r3, [r3, #0]
    7d42:	2bff      	cmp	r3, #255	; 0xff
    7d44:	d105      	bne.n	7d52 <send_boot+0xa06>
    7d46:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d4e:	2200      	movs	r2, #0
    7d50:	701a      	strb	r2, [r3, #0]
    7d52:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d5a:	781b      	ldrb	r3, [r3, #0]
    7d5c:	461a      	mov	r2, r3
    7d5e:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d66:	7859      	ldrb	r1, [r3, #1]
    7d68:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d70:	5499      	strb	r1, [r3, r2]
    7d72:	4b8b      	ldr	r3, [pc, #556]	; (7fa0 <send_boot+0xc54>)
    7d74:	781a      	ldrb	r2, [r3, #0]
    7d76:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d7e:	781b      	ldrb	r3, [r3, #0]
    7d80:	4413      	add	r3, r2
    7d82:	b2da      	uxtb	r2, r3
    7d84:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7d88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d8c:	701a      	strb	r2, [r3, #0]
    7d8e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d96:	781a      	ldrb	r2, [r3, #0]
    7d98:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7da0:	781b      	ldrb	r3, [r3, #0]
    7da2:	4413      	add	r3, r2
    7da4:	b2da      	uxtb	r2, r3
    7da6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dae:	701a      	strb	r2, [r3, #0]
    7db0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7db8:	781b      	ldrb	r3, [r3, #0]
    7dba:	3301      	adds	r3, #1
    7dbc:	b2da      	uxtb	r2, r3
    7dbe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dc6:	701a      	strb	r2, [r3, #0]
    7dc8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dd0:	781b      	ldrb	r3, [r3, #0]
    7dd2:	2bff      	cmp	r3, #255	; 0xff
    7dd4:	d105      	bne.n	7de2 <send_boot+0xa96>
    7dd6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dde:	2200      	movs	r2, #0
    7de0:	701a      	strb	r2, [r3, #0]
    7de2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7de6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dea:	781b      	ldrb	r3, [r3, #0]
    7dec:	461a      	mov	r2, r3
    7dee:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7df6:	7899      	ldrb	r1, [r3, #2]
    7df8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e00:	5499      	strb	r1, [r3, r2]
    7e02:	4b68      	ldr	r3, [pc, #416]	; (7fa4 <send_boot+0xc58>)
    7e04:	781a      	ldrb	r2, [r3, #0]
    7e06:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e0e:	781b      	ldrb	r3, [r3, #0]
    7e10:	4413      	add	r3, r2
    7e12:	b2da      	uxtb	r2, r3
    7e14:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e1c:	701a      	strb	r2, [r3, #0]
    7e1e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e26:	781a      	ldrb	r2, [r3, #0]
    7e28:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e30:	781b      	ldrb	r3, [r3, #0]
    7e32:	4413      	add	r3, r2
    7e34:	b2da      	uxtb	r2, r3
    7e36:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e3e:	701a      	strb	r2, [r3, #0]
    7e40:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e48:	781b      	ldrb	r3, [r3, #0]
    7e4a:	3301      	adds	r3, #1
    7e4c:	b2da      	uxtb	r2, r3
    7e4e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e56:	701a      	strb	r2, [r3, #0]
    7e58:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e60:	781b      	ldrb	r3, [r3, #0]
    7e62:	2bff      	cmp	r3, #255	; 0xff
    7e64:	d105      	bne.n	7e72 <send_boot+0xb26>
    7e66:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e6e:	2200      	movs	r2, #0
    7e70:	701a      	strb	r2, [r3, #0]
    7e72:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e7a:	781b      	ldrb	r3, [r3, #0]
    7e7c:	461a      	mov	r2, r3
    7e7e:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e86:	78d9      	ldrb	r1, [r3, #3]
    7e88:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e90:	5499      	strb	r1, [r3, r2]
    7e92:	4b45      	ldr	r3, [pc, #276]	; (7fa8 <send_boot+0xc5c>)
    7e94:	781a      	ldrb	r2, [r3, #0]
    7e96:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e9e:	781b      	ldrb	r3, [r3, #0]
    7ea0:	4413      	add	r3, r2
    7ea2:	b2da      	uxtb	r2, r3
    7ea4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eac:	701a      	strb	r2, [r3, #0]
    7eae:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eb6:	781a      	ldrb	r2, [r3, #0]
    7eb8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ec0:	781b      	ldrb	r3, [r3, #0]
    7ec2:	4413      	add	r3, r2
    7ec4:	b2da      	uxtb	r2, r3
    7ec6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ece:	701a      	strb	r2, [r3, #0]
    7ed0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ed8:	781b      	ldrb	r3, [r3, #0]
    7eda:	3301      	adds	r3, #1
    7edc:	b2da      	uxtb	r2, r3
    7ede:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ee6:	701a      	strb	r2, [r3, #0]
    7ee8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ef0:	781b      	ldrb	r3, [r3, #0]
    7ef2:	2bff      	cmp	r3, #255	; 0xff
    7ef4:	d105      	bne.n	7f02 <send_boot+0xbb6>
    7ef6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7efe:	2200      	movs	r2, #0
    7f00:	701a      	strb	r2, [r3, #0]
    7f02:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f0a:	781b      	ldrb	r3, [r3, #0]
    7f0c:	461a      	mov	r2, r3
    7f0e:	f240 33f2 	movw	r3, #1010	; 0x3f2
    7f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f16:	7819      	ldrb	r1, [r3, #0]
    7f18:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f20:	5499      	strb	r1, [r3, r2]
    7f22:	f240 33f2 	movw	r3, #1010	; 0x3f2
    7f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f2a:	781a      	ldrb	r2, [r3, #0]
    7f2c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f34:	781b      	ldrb	r3, [r3, #0]
    7f36:	4413      	add	r3, r2
    7f38:	b2da      	uxtb	r2, r3
    7f3a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f42:	701a      	strb	r2, [r3, #0]
    7f44:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f4c:	781a      	ldrb	r2, [r3, #0]
    7f4e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f56:	781b      	ldrb	r3, [r3, #0]
    7f58:	4413      	add	r3, r2
    7f5a:	b2da      	uxtb	r2, r3
    7f5c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f64:	701a      	strb	r2, [r3, #0]
    7f66:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f6e:	781b      	ldrb	r3, [r3, #0]
    7f70:	3301      	adds	r3, #1
    7f72:	b2da      	uxtb	r2, r3
    7f74:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f7c:	701a      	strb	r2, [r3, #0]
    7f7e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f86:	781b      	ldrb	r3, [r3, #0]
    7f88:	2bff      	cmp	r3, #255	; 0xff
    7f8a:	d10f      	bne.n	7fac <send_boot+0xc60>
    7f8c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f94:	2200      	movs	r2, #0
    7f96:	701a      	strb	r2, [r3, #0]
    7f98:	e008      	b.n	7fac <send_boot+0xc60>
    7f9a:	bf00      	nop
    7f9c:	2000b4cf 	.word	0x2000b4cf
    7fa0:	2000b4c5 	.word	0x2000b4c5
    7fa4:	2000b4c6 	.word	0x2000b4c6
    7fa8:	2000b4c7 	.word	0x2000b4c7
    7fac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fb4:	781b      	ldrb	r3, [r3, #0]
    7fb6:	461a      	mov	r2, r3
    7fb8:	f240 33f2 	movw	r3, #1010	; 0x3f2
    7fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fc0:	7859      	ldrb	r1, [r3, #1]
    7fc2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fca:	5499      	strb	r1, [r3, r2]
    7fcc:	4bc5      	ldr	r3, [pc, #788]	; (82e4 <send_boot+0xf98>)
    7fce:	781a      	ldrb	r2, [r3, #0]
    7fd0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fd8:	781b      	ldrb	r3, [r3, #0]
    7fda:	4413      	add	r3, r2
    7fdc:	b2da      	uxtb	r2, r3
    7fde:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fe6:	701a      	strb	r2, [r3, #0]
    7fe8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ff0:	781a      	ldrb	r2, [r3, #0]
    7ff2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7ff6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ffa:	781b      	ldrb	r3, [r3, #0]
    7ffc:	4413      	add	r3, r2
    7ffe:	b2da      	uxtb	r2, r3
    8000:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8008:	701a      	strb	r2, [r3, #0]
    800a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    800e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8012:	781b      	ldrb	r3, [r3, #0]
    8014:	3301      	adds	r3, #1
    8016:	b2da      	uxtb	r2, r3
    8018:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    801c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8020:	701a      	strb	r2, [r3, #0]
    8022:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    802a:	781b      	ldrb	r3, [r3, #0]
    802c:	2bff      	cmp	r3, #255	; 0xff
    802e:	d105      	bne.n	803c <send_boot+0xcf0>
    8030:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8038:	2200      	movs	r2, #0
    803a:	701a      	strb	r2, [r3, #0]
    803c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8044:	781b      	ldrb	r3, [r3, #0]
    8046:	461a      	mov	r2, r3
    8048:	f240 33f4 	movw	r3, #1012	; 0x3f4
    804c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8050:	7819      	ldrb	r1, [r3, #0]
    8052:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    805a:	5499      	strb	r1, [r3, r2]
    805c:	f240 33f4 	movw	r3, #1012	; 0x3f4
    8060:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8064:	781a      	ldrb	r2, [r3, #0]
    8066:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    806a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    806e:	781b      	ldrb	r3, [r3, #0]
    8070:	4413      	add	r3, r2
    8072:	b2da      	uxtb	r2, r3
    8074:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    807c:	701a      	strb	r2, [r3, #0]
    807e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8082:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8086:	781a      	ldrb	r2, [r3, #0]
    8088:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    808c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8090:	781b      	ldrb	r3, [r3, #0]
    8092:	4413      	add	r3, r2
    8094:	b2da      	uxtb	r2, r3
    8096:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    809a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    809e:	701a      	strb	r2, [r3, #0]
    80a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    80a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80a8:	781b      	ldrb	r3, [r3, #0]
    80aa:	3301      	adds	r3, #1
    80ac:	b2da      	uxtb	r2, r3
    80ae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    80b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80b6:	701a      	strb	r2, [r3, #0]
    80b8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    80bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80c0:	781b      	ldrb	r3, [r3, #0]
    80c2:	2bff      	cmp	r3, #255	; 0xff
    80c4:	d105      	bne.n	80d2 <send_boot+0xd86>
    80c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    80ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80ce:	2200      	movs	r2, #0
    80d0:	701a      	strb	r2, [r3, #0]
    80d2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    80d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80da:	781b      	ldrb	r3, [r3, #0]
    80dc:	461a      	mov	r2, r3
    80de:	f240 33f4 	movw	r3, #1012	; 0x3f4
    80e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80e6:	7859      	ldrb	r1, [r3, #1]
    80e8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    80ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80f0:	5499      	strb	r1, [r3, r2]
    80f2:	4b7d      	ldr	r3, [pc, #500]	; (82e8 <send_boot+0xf9c>)
    80f4:	781a      	ldrb	r2, [r3, #0]
    80f6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    80fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80fe:	781b      	ldrb	r3, [r3, #0]
    8100:	4413      	add	r3, r2
    8102:	b2da      	uxtb	r2, r3
    8104:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    810c:	701a      	strb	r2, [r3, #0]
    810e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8112:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8116:	781a      	ldrb	r2, [r3, #0]
    8118:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    811c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8120:	781b      	ldrb	r3, [r3, #0]
    8122:	4413      	add	r3, r2
    8124:	b2da      	uxtb	r2, r3
    8126:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    812a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    812e:	701a      	strb	r2, [r3, #0]
    8130:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8138:	781b      	ldrb	r3, [r3, #0]
    813a:	3301      	adds	r3, #1
    813c:	b2da      	uxtb	r2, r3
    813e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8146:	701a      	strb	r2, [r3, #0]
    8148:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    814c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8150:	781b      	ldrb	r3, [r3, #0]
    8152:	2bff      	cmp	r3, #255	; 0xff
    8154:	d105      	bne.n	8162 <send_boot+0xe16>
    8156:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    815a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    815e:	2200      	movs	r2, #0
    8160:	701a      	strb	r2, [r3, #0]
    8162:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8166:	f2c2 0300 	movt	r3, #8192	; 0x2000
    816a:	781b      	ldrb	r3, [r3, #0]
    816c:	461a      	mov	r2, r3
    816e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8176:	7819      	ldrb	r1, [r3, #0]
    8178:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    817c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8180:	5499      	strb	r1, [r3, r2]
    8182:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    818a:	781b      	ldrb	r3, [r3, #0]
    818c:	3301      	adds	r3, #1
    818e:	b2da      	uxtb	r2, r3
    8190:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8198:	701a      	strb	r2, [r3, #0]
    819a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    819e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81a2:	781b      	ldrb	r3, [r3, #0]
    81a4:	2bff      	cmp	r3, #255	; 0xff
    81a6:	d105      	bne.n	81b4 <send_boot+0xe68>
    81a8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    81ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81b0:	2200      	movs	r2, #0
    81b2:	701a      	strb	r2, [r3, #0]
    81b4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    81b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81bc:	781b      	ldrb	r3, [r3, #0]
    81be:	461a      	mov	r2, r3
    81c0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    81c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81c8:	7819      	ldrb	r1, [r3, #0]
    81ca:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    81ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81d2:	5499      	strb	r1, [r3, r2]
    81d4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    81d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81dc:	781b      	ldrb	r3, [r3, #0]
    81de:	3301      	adds	r3, #1
    81e0:	b2da      	uxtb	r2, r3
    81e2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    81e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81ea:	701a      	strb	r2, [r3, #0]
    81ec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    81f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81f4:	781b      	ldrb	r3, [r3, #0]
    81f6:	2bff      	cmp	r3, #255	; 0xff
    81f8:	d105      	bne.n	8206 <send_boot+0xeba>
    81fa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    81fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8202:	2200      	movs	r2, #0
    8204:	701a      	strb	r2, [r3, #0]
    8206:	f242 0339 	movw	r3, #8249	; 0x2039
    820a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	b2db      	uxtb	r3, r3
    8212:	f003 0310 	and.w	r3, r3, #16
    8216:	2b00      	cmp	r3, #0
    8218:	d15a      	bne.n	82d0 <send_boot+0xf84>
    821a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    821e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8222:	781b      	ldrb	r3, [r3, #0]
    8224:	b2db      	uxtb	r3, r3
    8226:	461a      	mov	r2, r3
    8228:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    822c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8230:	5c9a      	ldrb	r2, [r3, r2]
    8232:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    8236:	f2c2 0300 	movt	r3, #8192	; 0x2000
    823a:	701a      	strb	r2, [r3, #0]
    823c:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    8240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8244:	2200      	movs	r2, #0
    8246:	701a      	strb	r2, [r3, #0]
    8248:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    824c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8250:	781b      	ldrb	r3, [r3, #0]
    8252:	b2db      	uxtb	r3, r3
    8254:	3301      	adds	r3, #1
    8256:	b2da      	uxtb	r2, r3
    8258:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    825c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8260:	701a      	strb	r2, [r3, #0]
    8262:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8266:	f2c2 0300 	movt	r3, #8192	; 0x2000
    826a:	781b      	ldrb	r3, [r3, #0]
    826c:	b2db      	uxtb	r3, r3
    826e:	2bff      	cmp	r3, #255	; 0xff
    8270:	d105      	bne.n	827e <send_boot+0xf32>
    8272:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8276:	f2c2 0300 	movt	r3, #8192	; 0x2000
    827a:	2200      	movs	r2, #0
    827c:	701a      	strb	r2, [r3, #0]
    827e:	f242 0338 	movw	r3, #8248	; 0x2038
    8282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8286:	f242 0238 	movw	r2, #8248	; 0x2038
    828a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    828e:	7812      	ldrb	r2, [r2, #0]
    8290:	b2d2      	uxtb	r2, r2
    8292:	f042 0201 	orr.w	r2, r2, #1
    8296:	b2d2      	uxtb	r2, r2
    8298:	701a      	strb	r2, [r3, #0]
    829a:	f242 0339 	movw	r3, #8249	; 0x2039
    829e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82a2:	f242 0239 	movw	r2, #8249	; 0x2039
    82a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    82aa:	7812      	ldrb	r2, [r2, #0]
    82ac:	b2d2      	uxtb	r2, r2
    82ae:	f042 0210 	orr.w	r2, r2, #16
    82b2:	b2d2      	uxtb	r2, r2
    82b4:	701a      	strb	r2, [r3, #0]
    82b6:	e00b      	b.n	82d0 <send_boot+0xf84>
    82b8:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    82bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82c0:	781b      	ldrb	r3, [r3, #0]
    82c2:	3301      	adds	r3, #1
    82c4:	b2da      	uxtb	r2, r3
    82c6:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    82ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82ce:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    82d0:	f240 33ed 	movw	r3, #1005	; 0x3ed
    82d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82d8:	2200      	movs	r2, #0
    82da:	701a      	strb	r2, [r3, #0]
  }
}
    82dc:	46bd      	mov	sp, r7
    82de:	f85d 7b04 	ldr.w	r7, [sp], #4
    82e2:	4770      	bx	lr
    82e4:	200003f3 	.word	0x200003f3
    82e8:	200003f5 	.word	0x200003f5

000082ec <send_attitude>:
void send_attitude(void){ //499ms
    82ec:	b480      	push	{r7}
    82ee:	af00      	add	r7, sp, #0
    // add by wanbo
  //if(!boot)
  {
    count++;
    82f0:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    82f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82f8:	781b      	ldrb	r3, [r3, #0]
    82fa:	3301      	adds	r3, #1
    82fc:	b2da      	uxtb	r2, r3
    82fe:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    8302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8306:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    8308:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    830c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8310:	781b      	ldrb	r3, [r3, #0]
    8312:	2bfa      	cmp	r3, #250	; 0xfa
    8314:	d105      	bne.n	8322 <send_attitude+0x36>
    8316:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    831a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    831e:	2200      	movs	r2, #0
    8320:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    8322:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    8326:	f2c2 0300 	movt	r3, #8192	; 0x2000
    832a:	781a      	ldrb	r2, [r3, #0]
    832c:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8330:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8334:	fba3 1302 	umull	r1, r3, r3, r2
    8338:	0899      	lsrs	r1, r3, #2
    833a:	460b      	mov	r3, r1
    833c:	009b      	lsls	r3, r3, #2
    833e:	440b      	add	r3, r1
    8340:	1ad3      	subs	r3, r2, r3
    8342:	b2db      	uxtb	r3, r3
    8344:	2b00      	cmp	r3, #0
    8346:	f040 84c1 	bne.w	8ccc <send_attitude+0x9e0>
       PERIODIC_SEND_ATTITUDE(); 
    834a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    834e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8352:	781a      	ldrb	r2, [r3, #0]
    8354:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    835c:	781b      	ldrb	r3, [r3, #0]
    835e:	b2db      	uxtb	r3, r3
    8360:	429a      	cmp	r2, r3
    8362:	d313      	bcc.n	838c <send_attitude+0xa0>
    8364:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    836c:	781b      	ldrb	r3, [r3, #0]
    836e:	b2db      	uxtb	r3, r3
    8370:	461a      	mov	r2, r3
    8372:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8376:	f2c2 0300 	movt	r3, #8192	; 0x2000
    837a:	781b      	ldrb	r3, [r3, #0]
    837c:	1ad3      	subs	r3, r2, r3
    837e:	33ff      	adds	r3, #255	; 0xff
    8380:	2b10      	cmp	r3, #16
    8382:	bfd4      	ite	le
    8384:	2300      	movle	r3, #0
    8386:	2301      	movgt	r3, #1
    8388:	b2db      	uxtb	r3, r3
    838a:	e011      	b.n	83b0 <send_attitude+0xc4>
    838c:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8394:	781b      	ldrb	r3, [r3, #0]
    8396:	b2db      	uxtb	r3, r3
    8398:	461a      	mov	r2, r3
    839a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    839e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83a2:	781b      	ldrb	r3, [r3, #0]
    83a4:	1ad3      	subs	r3, r2, r3
    83a6:	2b10      	cmp	r3, #16
    83a8:	bfd4      	ite	le
    83aa:	2300      	movle	r3, #0
    83ac:	2301      	movgt	r3, #1
    83ae:	b2db      	uxtb	r3, r3
    83b0:	2b00      	cmp	r3, #0
    83b2:	f000 847f 	beq.w	8cb4 <send_attitude+0x9c8>
    83b6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    83ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83be:	781b      	ldrb	r3, [r3, #0]
    83c0:	461a      	mov	r2, r3
    83c2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    83c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83ca:	2105      	movs	r1, #5
    83cc:	5499      	strb	r1, [r3, r2]
    83ce:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    83d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83d6:	781b      	ldrb	r3, [r3, #0]
    83d8:	3301      	adds	r3, #1
    83da:	b2da      	uxtb	r2, r3
    83dc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    83e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83e4:	701a      	strb	r2, [r3, #0]
    83e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    83ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83ee:	781b      	ldrb	r3, [r3, #0]
    83f0:	2bff      	cmp	r3, #255	; 0xff
    83f2:	d105      	bne.n	8400 <send_attitude+0x114>
    83f4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    83f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83fc:	2200      	movs	r2, #0
    83fe:	701a      	strb	r2, [r3, #0]
    8400:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8408:	781b      	ldrb	r3, [r3, #0]
    840a:	461a      	mov	r2, r3
    840c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8414:	2106      	movs	r1, #6
    8416:	5499      	strb	r1, [r3, r2]
    8418:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    841c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8420:	781b      	ldrb	r3, [r3, #0]
    8422:	3301      	adds	r3, #1
    8424:	b2da      	uxtb	r2, r3
    8426:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    842a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    842e:	701a      	strb	r2, [r3, #0]
    8430:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8438:	781b      	ldrb	r3, [r3, #0]
    843a:	2bff      	cmp	r3, #255	; 0xff
    843c:	d105      	bne.n	844a <send_attitude+0x15e>
    843e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8446:	2200      	movs	r2, #0
    8448:	701a      	strb	r2, [r3, #0]
    844a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    844e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8452:	2206      	movs	r2, #6
    8454:	701a      	strb	r2, [r3, #0]
    8456:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    845a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    845e:	2206      	movs	r2, #6
    8460:	701a      	strb	r2, [r3, #0]
    8462:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    846a:	781b      	ldrb	r3, [r3, #0]
    846c:	461a      	mov	r2, r3
    846e:	f24b 4390 	movw	r3, #46224	; 0xb490
    8472:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8476:	7819      	ldrb	r1, [r3, #0]
    8478:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    847c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8480:	5499      	strb	r1, [r3, r2]
    8482:	f24b 4390 	movw	r3, #46224	; 0xb490
    8486:	f2c2 0300 	movt	r3, #8192	; 0x2000
    848a:	781a      	ldrb	r2, [r3, #0]
    848c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8490:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8494:	781b      	ldrb	r3, [r3, #0]
    8496:	4413      	add	r3, r2
    8498:	b2da      	uxtb	r2, r3
    849a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    849e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84a2:	701a      	strb	r2, [r3, #0]
    84a4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    84a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84ac:	781a      	ldrb	r2, [r3, #0]
    84ae:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    84b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84b6:	781b      	ldrb	r3, [r3, #0]
    84b8:	4413      	add	r3, r2
    84ba:	b2da      	uxtb	r2, r3
    84bc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    84c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84c4:	701a      	strb	r2, [r3, #0]
    84c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    84ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84ce:	781b      	ldrb	r3, [r3, #0]
    84d0:	3301      	adds	r3, #1
    84d2:	b2da      	uxtb	r2, r3
    84d4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    84d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84dc:	701a      	strb	r2, [r3, #0]
    84de:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    84e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84e6:	781b      	ldrb	r3, [r3, #0]
    84e8:	2bff      	cmp	r3, #255	; 0xff
    84ea:	d105      	bne.n	84f8 <send_attitude+0x20c>
    84ec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    84f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84f4:	2200      	movs	r2, #0
    84f6:	701a      	strb	r2, [r3, #0]
    84f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    84fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8500:	781b      	ldrb	r3, [r3, #0]
    8502:	461a      	mov	r2, r3
    8504:	f24b 4390 	movw	r3, #46224	; 0xb490
    8508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    850c:	7859      	ldrb	r1, [r3, #1]
    850e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8516:	5499      	strb	r1, [r3, r2]
    8518:	4bd1      	ldr	r3, [pc, #836]	; (8860 <send_attitude+0x574>)
    851a:	781a      	ldrb	r2, [r3, #0]
    851c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8524:	781b      	ldrb	r3, [r3, #0]
    8526:	4413      	add	r3, r2
    8528:	b2da      	uxtb	r2, r3
    852a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    852e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8532:	701a      	strb	r2, [r3, #0]
    8534:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    853c:	781a      	ldrb	r2, [r3, #0]
    853e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8546:	781b      	ldrb	r3, [r3, #0]
    8548:	4413      	add	r3, r2
    854a:	b2da      	uxtb	r2, r3
    854c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8554:	701a      	strb	r2, [r3, #0]
    8556:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    855a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    855e:	781b      	ldrb	r3, [r3, #0]
    8560:	3301      	adds	r3, #1
    8562:	b2da      	uxtb	r2, r3
    8564:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    856c:	701a      	strb	r2, [r3, #0]
    856e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8576:	781b      	ldrb	r3, [r3, #0]
    8578:	2bff      	cmp	r3, #255	; 0xff
    857a:	d105      	bne.n	8588 <send_attitude+0x29c>
    857c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8584:	2200      	movs	r2, #0
    8586:	701a      	strb	r2, [r3, #0]
    8588:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    858c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8590:	781b      	ldrb	r3, [r3, #0]
    8592:	461a      	mov	r2, r3
    8594:	f24b 4390 	movw	r3, #46224	; 0xb490
    8598:	f2c2 0300 	movt	r3, #8192	; 0x2000
    859c:	7899      	ldrb	r1, [r3, #2]
    859e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    85a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85a6:	5499      	strb	r1, [r3, r2]
    85a8:	4bae      	ldr	r3, [pc, #696]	; (8864 <send_attitude+0x578>)
    85aa:	781a      	ldrb	r2, [r3, #0]
    85ac:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    85b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85b4:	781b      	ldrb	r3, [r3, #0]
    85b6:	4413      	add	r3, r2
    85b8:	b2da      	uxtb	r2, r3
    85ba:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    85be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85c2:	701a      	strb	r2, [r3, #0]
    85c4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    85c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85cc:	781a      	ldrb	r2, [r3, #0]
    85ce:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    85d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85d6:	781b      	ldrb	r3, [r3, #0]
    85d8:	4413      	add	r3, r2
    85da:	b2da      	uxtb	r2, r3
    85dc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    85e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85e4:	701a      	strb	r2, [r3, #0]
    85e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    85ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85ee:	781b      	ldrb	r3, [r3, #0]
    85f0:	3301      	adds	r3, #1
    85f2:	b2da      	uxtb	r2, r3
    85f4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    85f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85fc:	701a      	strb	r2, [r3, #0]
    85fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8606:	781b      	ldrb	r3, [r3, #0]
    8608:	2bff      	cmp	r3, #255	; 0xff
    860a:	d105      	bne.n	8618 <send_attitude+0x32c>
    860c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8614:	2200      	movs	r2, #0
    8616:	701a      	strb	r2, [r3, #0]
    8618:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    861c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8620:	781b      	ldrb	r3, [r3, #0]
    8622:	461a      	mov	r2, r3
    8624:	f24b 4390 	movw	r3, #46224	; 0xb490
    8628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    862c:	78d9      	ldrb	r1, [r3, #3]
    862e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8632:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8636:	5499      	strb	r1, [r3, r2]
    8638:	4b8b      	ldr	r3, [pc, #556]	; (8868 <send_attitude+0x57c>)
    863a:	781a      	ldrb	r2, [r3, #0]
    863c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8644:	781b      	ldrb	r3, [r3, #0]
    8646:	4413      	add	r3, r2
    8648:	b2da      	uxtb	r2, r3
    864a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    864e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8652:	701a      	strb	r2, [r3, #0]
    8654:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    865c:	781a      	ldrb	r2, [r3, #0]
    865e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8666:	781b      	ldrb	r3, [r3, #0]
    8668:	4413      	add	r3, r2
    866a:	b2da      	uxtb	r2, r3
    866c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8674:	701a      	strb	r2, [r3, #0]
    8676:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    867a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    867e:	781b      	ldrb	r3, [r3, #0]
    8680:	3301      	adds	r3, #1
    8682:	b2da      	uxtb	r2, r3
    8684:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    868c:	701a      	strb	r2, [r3, #0]
    868e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8696:	781b      	ldrb	r3, [r3, #0]
    8698:	2bff      	cmp	r3, #255	; 0xff
    869a:	d105      	bne.n	86a8 <send_attitude+0x3bc>
    869c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    86a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86a4:	2200      	movs	r2, #0
    86a6:	701a      	strb	r2, [r3, #0]
    86a8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    86ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86b0:	781b      	ldrb	r3, [r3, #0]
    86b2:	461a      	mov	r2, r3
    86b4:	f24b 4394 	movw	r3, #46228	; 0xb494
    86b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86bc:	7819      	ldrb	r1, [r3, #0]
    86be:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    86c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86c6:	5499      	strb	r1, [r3, r2]
    86c8:	f24b 4394 	movw	r3, #46228	; 0xb494
    86cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86d0:	781a      	ldrb	r2, [r3, #0]
    86d2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    86d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86da:	781b      	ldrb	r3, [r3, #0]
    86dc:	4413      	add	r3, r2
    86de:	b2da      	uxtb	r2, r3
    86e0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    86e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86e8:	701a      	strb	r2, [r3, #0]
    86ea:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    86ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86f2:	781a      	ldrb	r2, [r3, #0]
    86f4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    86f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86fc:	781b      	ldrb	r3, [r3, #0]
    86fe:	4413      	add	r3, r2
    8700:	b2da      	uxtb	r2, r3
    8702:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8706:	f2c2 0300 	movt	r3, #8192	; 0x2000
    870a:	701a      	strb	r2, [r3, #0]
    870c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8714:	781b      	ldrb	r3, [r3, #0]
    8716:	3301      	adds	r3, #1
    8718:	b2da      	uxtb	r2, r3
    871a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    871e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8722:	701a      	strb	r2, [r3, #0]
    8724:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    872c:	781b      	ldrb	r3, [r3, #0]
    872e:	2bff      	cmp	r3, #255	; 0xff
    8730:	d105      	bne.n	873e <send_attitude+0x452>
    8732:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8736:	f2c2 0300 	movt	r3, #8192	; 0x2000
    873a:	2200      	movs	r2, #0
    873c:	701a      	strb	r2, [r3, #0]
    873e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8746:	781b      	ldrb	r3, [r3, #0]
    8748:	461a      	mov	r2, r3
    874a:	f24b 4394 	movw	r3, #46228	; 0xb494
    874e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8752:	7859      	ldrb	r1, [r3, #1]
    8754:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8758:	f2c2 0300 	movt	r3, #8192	; 0x2000
    875c:	5499      	strb	r1, [r3, r2]
    875e:	4b43      	ldr	r3, [pc, #268]	; (886c <send_attitude+0x580>)
    8760:	781a      	ldrb	r2, [r3, #0]
    8762:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8766:	f2c2 0300 	movt	r3, #8192	; 0x2000
    876a:	781b      	ldrb	r3, [r3, #0]
    876c:	4413      	add	r3, r2
    876e:	b2da      	uxtb	r2, r3
    8770:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8778:	701a      	strb	r2, [r3, #0]
    877a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    877e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8782:	781a      	ldrb	r2, [r3, #0]
    8784:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8788:	f2c2 0300 	movt	r3, #8192	; 0x2000
    878c:	781b      	ldrb	r3, [r3, #0]
    878e:	4413      	add	r3, r2
    8790:	b2da      	uxtb	r2, r3
    8792:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    879a:	701a      	strb	r2, [r3, #0]
    879c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    87a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87a4:	781b      	ldrb	r3, [r3, #0]
    87a6:	3301      	adds	r3, #1
    87a8:	b2da      	uxtb	r2, r3
    87aa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    87ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87b2:	701a      	strb	r2, [r3, #0]
    87b4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    87b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87bc:	781b      	ldrb	r3, [r3, #0]
    87be:	2bff      	cmp	r3, #255	; 0xff
    87c0:	d105      	bne.n	87ce <send_attitude+0x4e2>
    87c2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    87c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87ca:	2200      	movs	r2, #0
    87cc:	701a      	strb	r2, [r3, #0]
    87ce:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    87d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87d6:	781b      	ldrb	r3, [r3, #0]
    87d8:	461a      	mov	r2, r3
    87da:	f24b 4394 	movw	r3, #46228	; 0xb494
    87de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87e2:	7899      	ldrb	r1, [r3, #2]
    87e4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    87e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87ec:	5499      	strb	r1, [r3, r2]
    87ee:	4b20      	ldr	r3, [pc, #128]	; (8870 <send_attitude+0x584>)
    87f0:	781a      	ldrb	r2, [r3, #0]
    87f2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    87f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87fa:	781b      	ldrb	r3, [r3, #0]
    87fc:	4413      	add	r3, r2
    87fe:	b2da      	uxtb	r2, r3
    8800:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8808:	701a      	strb	r2, [r3, #0]
    880a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    880e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8812:	781a      	ldrb	r2, [r3, #0]
    8814:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    881c:	781b      	ldrb	r3, [r3, #0]
    881e:	4413      	add	r3, r2
    8820:	b2da      	uxtb	r2, r3
    8822:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8826:	f2c2 0300 	movt	r3, #8192	; 0x2000
    882a:	701a      	strb	r2, [r3, #0]
    882c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8830:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8834:	781b      	ldrb	r3, [r3, #0]
    8836:	3301      	adds	r3, #1
    8838:	b2da      	uxtb	r2, r3
    883a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    883e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8842:	701a      	strb	r2, [r3, #0]
    8844:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8848:	f2c2 0300 	movt	r3, #8192	; 0x2000
    884c:	781b      	ldrb	r3, [r3, #0]
    884e:	2bff      	cmp	r3, #255	; 0xff
    8850:	d110      	bne.n	8874 <send_attitude+0x588>
    8852:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    885a:	2200      	movs	r2, #0
    885c:	701a      	strb	r2, [r3, #0]
    885e:	e009      	b.n	8874 <send_attitude+0x588>
    8860:	2000b491 	.word	0x2000b491
    8864:	2000b492 	.word	0x2000b492
    8868:	2000b493 	.word	0x2000b493
    886c:	2000b495 	.word	0x2000b495
    8870:	2000b496 	.word	0x2000b496
    8874:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    887c:	781b      	ldrb	r3, [r3, #0]
    887e:	461a      	mov	r2, r3
    8880:	f24b 4394 	movw	r3, #46228	; 0xb494
    8884:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8888:	78d9      	ldrb	r1, [r3, #3]
    888a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    888e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8892:	5499      	strb	r1, [r3, r2]
    8894:	4bc2      	ldr	r3, [pc, #776]	; (8ba0 <send_attitude+0x8b4>)
    8896:	781a      	ldrb	r2, [r3, #0]
    8898:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    889c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88a0:	781b      	ldrb	r3, [r3, #0]
    88a2:	4413      	add	r3, r2
    88a4:	b2da      	uxtb	r2, r3
    88a6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    88aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88ae:	701a      	strb	r2, [r3, #0]
    88b0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    88b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88b8:	781a      	ldrb	r2, [r3, #0]
    88ba:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    88be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88c2:	781b      	ldrb	r3, [r3, #0]
    88c4:	4413      	add	r3, r2
    88c6:	b2da      	uxtb	r2, r3
    88c8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    88cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88d0:	701a      	strb	r2, [r3, #0]
    88d2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    88d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88da:	781b      	ldrb	r3, [r3, #0]
    88dc:	3301      	adds	r3, #1
    88de:	b2da      	uxtb	r2, r3
    88e0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    88e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88e8:	701a      	strb	r2, [r3, #0]
    88ea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    88ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88f2:	781b      	ldrb	r3, [r3, #0]
    88f4:	2bff      	cmp	r3, #255	; 0xff
    88f6:	d105      	bne.n	8904 <send_attitude+0x618>
    88f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    88fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8900:	2200      	movs	r2, #0
    8902:	701a      	strb	r2, [r3, #0]
    8904:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    890c:	781b      	ldrb	r3, [r3, #0]
    890e:	461a      	mov	r2, r3
    8910:	f24b 4398 	movw	r3, #46232	; 0xb498
    8914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8918:	7819      	ldrb	r1, [r3, #0]
    891a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    891e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8922:	5499      	strb	r1, [r3, r2]
    8924:	f24b 4398 	movw	r3, #46232	; 0xb498
    8928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    892c:	781a      	ldrb	r2, [r3, #0]
    892e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8936:	781b      	ldrb	r3, [r3, #0]
    8938:	4413      	add	r3, r2
    893a:	b2da      	uxtb	r2, r3
    893c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8940:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8944:	701a      	strb	r2, [r3, #0]
    8946:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    894a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    894e:	781a      	ldrb	r2, [r3, #0]
    8950:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8958:	781b      	ldrb	r3, [r3, #0]
    895a:	4413      	add	r3, r2
    895c:	b2da      	uxtb	r2, r3
    895e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8962:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8966:	701a      	strb	r2, [r3, #0]
    8968:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    896c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8970:	781b      	ldrb	r3, [r3, #0]
    8972:	3301      	adds	r3, #1
    8974:	b2da      	uxtb	r2, r3
    8976:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    897a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    897e:	701a      	strb	r2, [r3, #0]
    8980:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8984:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8988:	781b      	ldrb	r3, [r3, #0]
    898a:	2bff      	cmp	r3, #255	; 0xff
    898c:	d105      	bne.n	899a <send_attitude+0x6ae>
    898e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8992:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8996:	2200      	movs	r2, #0
    8998:	701a      	strb	r2, [r3, #0]
    899a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    899e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89a2:	781b      	ldrb	r3, [r3, #0]
    89a4:	461a      	mov	r2, r3
    89a6:	f24b 4398 	movw	r3, #46232	; 0xb498
    89aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89ae:	7859      	ldrb	r1, [r3, #1]
    89b0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    89b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89b8:	5499      	strb	r1, [r3, r2]
    89ba:	4b7a      	ldr	r3, [pc, #488]	; (8ba4 <send_attitude+0x8b8>)
    89bc:	781a      	ldrb	r2, [r3, #0]
    89be:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    89c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89c6:	781b      	ldrb	r3, [r3, #0]
    89c8:	4413      	add	r3, r2
    89ca:	b2da      	uxtb	r2, r3
    89cc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    89d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89d4:	701a      	strb	r2, [r3, #0]
    89d6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    89da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89de:	781a      	ldrb	r2, [r3, #0]
    89e0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    89e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89e8:	781b      	ldrb	r3, [r3, #0]
    89ea:	4413      	add	r3, r2
    89ec:	b2da      	uxtb	r2, r3
    89ee:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    89f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89f6:	701a      	strb	r2, [r3, #0]
    89f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    89fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a00:	781b      	ldrb	r3, [r3, #0]
    8a02:	3301      	adds	r3, #1
    8a04:	b2da      	uxtb	r2, r3
    8a06:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8a0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a0e:	701a      	strb	r2, [r3, #0]
    8a10:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a18:	781b      	ldrb	r3, [r3, #0]
    8a1a:	2bff      	cmp	r3, #255	; 0xff
    8a1c:	d105      	bne.n	8a2a <send_attitude+0x73e>
    8a1e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a26:	2200      	movs	r2, #0
    8a28:	701a      	strb	r2, [r3, #0]
    8a2a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a32:	781b      	ldrb	r3, [r3, #0]
    8a34:	461a      	mov	r2, r3
    8a36:	f24b 4398 	movw	r3, #46232	; 0xb498
    8a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a3e:	7899      	ldrb	r1, [r3, #2]
    8a40:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8a44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a48:	5499      	strb	r1, [r3, r2]
    8a4a:	4b57      	ldr	r3, [pc, #348]	; (8ba8 <send_attitude+0x8bc>)
    8a4c:	781a      	ldrb	r2, [r3, #0]
    8a4e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8a52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a56:	781b      	ldrb	r3, [r3, #0]
    8a58:	4413      	add	r3, r2
    8a5a:	b2da      	uxtb	r2, r3
    8a5c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a64:	701a      	strb	r2, [r3, #0]
    8a66:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a6e:	781a      	ldrb	r2, [r3, #0]
    8a70:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a78:	781b      	ldrb	r3, [r3, #0]
    8a7a:	4413      	add	r3, r2
    8a7c:	b2da      	uxtb	r2, r3
    8a7e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a86:	701a      	strb	r2, [r3, #0]
    8a88:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a90:	781b      	ldrb	r3, [r3, #0]
    8a92:	3301      	adds	r3, #1
    8a94:	b2da      	uxtb	r2, r3
    8a96:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a9e:	701a      	strb	r2, [r3, #0]
    8aa0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8aa8:	781b      	ldrb	r3, [r3, #0]
    8aaa:	2bff      	cmp	r3, #255	; 0xff
    8aac:	d105      	bne.n	8aba <send_attitude+0x7ce>
    8aae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ab6:	2200      	movs	r2, #0
    8ab8:	701a      	strb	r2, [r3, #0]
    8aba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ac2:	781b      	ldrb	r3, [r3, #0]
    8ac4:	461a      	mov	r2, r3
    8ac6:	f24b 4398 	movw	r3, #46232	; 0xb498
    8aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ace:	78d9      	ldrb	r1, [r3, #3]
    8ad0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ad8:	5499      	strb	r1, [r3, r2]
    8ada:	4b34      	ldr	r3, [pc, #208]	; (8bac <send_attitude+0x8c0>)
    8adc:	781a      	ldrb	r2, [r3, #0]
    8ade:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ae6:	781b      	ldrb	r3, [r3, #0]
    8ae8:	4413      	add	r3, r2
    8aea:	b2da      	uxtb	r2, r3
    8aec:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8af4:	701a      	strb	r2, [r3, #0]
    8af6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8afe:	781a      	ldrb	r2, [r3, #0]
    8b00:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b08:	781b      	ldrb	r3, [r3, #0]
    8b0a:	4413      	add	r3, r2
    8b0c:	b2da      	uxtb	r2, r3
    8b0e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b16:	701a      	strb	r2, [r3, #0]
    8b18:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b20:	781b      	ldrb	r3, [r3, #0]
    8b22:	3301      	adds	r3, #1
    8b24:	b2da      	uxtb	r2, r3
    8b26:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b2e:	701a      	strb	r2, [r3, #0]
    8b30:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b38:	781b      	ldrb	r3, [r3, #0]
    8b3a:	2bff      	cmp	r3, #255	; 0xff
    8b3c:	d105      	bne.n	8b4a <send_attitude+0x85e>
    8b3e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b46:	2200      	movs	r2, #0
    8b48:	701a      	strb	r2, [r3, #0]
    8b4a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b52:	781b      	ldrb	r3, [r3, #0]
    8b54:	461a      	mov	r2, r3
    8b56:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8b5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b5e:	7819      	ldrb	r1, [r3, #0]
    8b60:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b68:	5499      	strb	r1, [r3, r2]
    8b6a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b72:	781b      	ldrb	r3, [r3, #0]
    8b74:	3301      	adds	r3, #1
    8b76:	b2da      	uxtb	r2, r3
    8b78:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b80:	701a      	strb	r2, [r3, #0]
    8b82:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b8a:	781b      	ldrb	r3, [r3, #0]
    8b8c:	2bff      	cmp	r3, #255	; 0xff
    8b8e:	d10f      	bne.n	8bb0 <send_attitude+0x8c4>
    8b90:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b98:	2200      	movs	r2, #0
    8b9a:	701a      	strb	r2, [r3, #0]
    8b9c:	e008      	b.n	8bb0 <send_attitude+0x8c4>
    8b9e:	bf00      	nop
    8ba0:	2000b497 	.word	0x2000b497
    8ba4:	2000b499 	.word	0x2000b499
    8ba8:	2000b49a 	.word	0x2000b49a
    8bac:	2000b49b 	.word	0x2000b49b
    8bb0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bb8:	781b      	ldrb	r3, [r3, #0]
    8bba:	461a      	mov	r2, r3
    8bbc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bc4:	7819      	ldrb	r1, [r3, #0]
    8bc6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bce:	5499      	strb	r1, [r3, r2]
    8bd0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bd8:	781b      	ldrb	r3, [r3, #0]
    8bda:	3301      	adds	r3, #1
    8bdc:	b2da      	uxtb	r2, r3
    8bde:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8be6:	701a      	strb	r2, [r3, #0]
    8be8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bf0:	781b      	ldrb	r3, [r3, #0]
    8bf2:	2bff      	cmp	r3, #255	; 0xff
    8bf4:	d105      	bne.n	8c02 <send_attitude+0x916>
    8bf6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bfe:	2200      	movs	r2, #0
    8c00:	701a      	strb	r2, [r3, #0]
    8c02:	f242 0339 	movw	r3, #8249	; 0x2039
    8c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c0a:	781b      	ldrb	r3, [r3, #0]
    8c0c:	b2db      	uxtb	r3, r3
    8c0e:	f003 0310 	and.w	r3, r3, #16
    8c12:	2b00      	cmp	r3, #0
    8c14:	d15a      	bne.n	8ccc <send_attitude+0x9e0>
    8c16:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c1e:	781b      	ldrb	r3, [r3, #0]
    8c20:	b2db      	uxtb	r3, r3
    8c22:	461a      	mov	r2, r3
    8c24:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c2c:	5c9a      	ldrb	r2, [r3, r2]
    8c2e:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    8c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c36:	701a      	strb	r2, [r3, #0]
    8c38:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    8c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c40:	2200      	movs	r2, #0
    8c42:	701a      	strb	r2, [r3, #0]
    8c44:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c4c:	781b      	ldrb	r3, [r3, #0]
    8c4e:	b2db      	uxtb	r3, r3
    8c50:	3301      	adds	r3, #1
    8c52:	b2da      	uxtb	r2, r3
    8c54:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c5c:	701a      	strb	r2, [r3, #0]
    8c5e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c66:	781b      	ldrb	r3, [r3, #0]
    8c68:	b2db      	uxtb	r3, r3
    8c6a:	2bff      	cmp	r3, #255	; 0xff
    8c6c:	d105      	bne.n	8c7a <send_attitude+0x98e>
    8c6e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c76:	2200      	movs	r2, #0
    8c78:	701a      	strb	r2, [r3, #0]
    8c7a:	f242 0338 	movw	r3, #8248	; 0x2038
    8c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c82:	f242 0238 	movw	r2, #8248	; 0x2038
    8c86:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8c8a:	7812      	ldrb	r2, [r2, #0]
    8c8c:	b2d2      	uxtb	r2, r2
    8c8e:	f042 0201 	orr.w	r2, r2, #1
    8c92:	b2d2      	uxtb	r2, r2
    8c94:	701a      	strb	r2, [r3, #0]
    8c96:	f242 0339 	movw	r3, #8249	; 0x2039
    8c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c9e:	f242 0239 	movw	r2, #8249	; 0x2039
    8ca2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8ca6:	7812      	ldrb	r2, [r2, #0]
    8ca8:	b2d2      	uxtb	r2, r2
    8caa:	f042 0210 	orr.w	r2, r2, #16
    8cae:	b2d2      	uxtb	r2, r2
    8cb0:	701a      	strb	r2, [r3, #0]
    8cb2:	e00b      	b.n	8ccc <send_attitude+0x9e0>
    8cb4:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    8cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cbc:	781b      	ldrb	r3, [r3, #0]
    8cbe:	3301      	adds	r3, #1
    8cc0:	b2da      	uxtb	r2, r3
    8cc2:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    8cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cca:	701a      	strb	r2, [r3, #0]
  }
}
    8ccc:	46bd      	mov	sp, r7
    8cce:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cd2:	4770      	bx	lr

00008cd4 <send_adc>:
  
void send_adc(void){  //500ms
    8cd4:	b480      	push	{r7}
    8cd6:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    8cd8:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    8cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ce0:	781a      	ldrb	r2, [r3, #0]
    8ce2:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8ce6:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8cea:	fba3 1302 	umull	r1, r3, r3, r2
    8cee:	0899      	lsrs	r1, r3, #2
    8cf0:	460b      	mov	r3, r1
    8cf2:	009b      	lsls	r3, r3, #2
    8cf4:	440b      	add	r3, r1
    8cf6:	1ad3      	subs	r3, r2, r3
    8cf8:	b2db      	uxtb	r3, r3
    8cfa:	2b01      	cmp	r3, #1
    8cfc:	f040 8269 	bne.w	91d2 <send_adc+0x4fe>
    8d00:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d08:	781a      	ldrb	r2, [r3, #0]
    8d0a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8d0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d12:	781b      	ldrb	r3, [r3, #0]
    8d14:	b2db      	uxtb	r3, r3
    8d16:	429a      	cmp	r2, r3
    8d18:	d313      	bcc.n	8d42 <send_adc+0x6e>
    8d1a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d22:	781b      	ldrb	r3, [r3, #0]
    8d24:	b2db      	uxtb	r3, r3
    8d26:	461a      	mov	r2, r3
    8d28:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d30:	781b      	ldrb	r3, [r3, #0]
    8d32:	1ad3      	subs	r3, r2, r3
    8d34:	33ff      	adds	r3, #255	; 0xff
    8d36:	2b08      	cmp	r3, #8
    8d38:	bfd4      	ite	le
    8d3a:	2300      	movle	r3, #0
    8d3c:	2301      	movgt	r3, #1
    8d3e:	b2db      	uxtb	r3, r3
    8d40:	e011      	b.n	8d66 <send_adc+0x92>
    8d42:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d4a:	781b      	ldrb	r3, [r3, #0]
    8d4c:	b2db      	uxtb	r3, r3
    8d4e:	461a      	mov	r2, r3
    8d50:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d58:	781b      	ldrb	r3, [r3, #0]
    8d5a:	1ad3      	subs	r3, r2, r3
    8d5c:	2b08      	cmp	r3, #8
    8d5e:	bfd4      	ite	le
    8d60:	2300      	movle	r3, #0
    8d62:	2301      	movgt	r3, #1
    8d64:	b2db      	uxtb	r3, r3
    8d66:	2b00      	cmp	r3, #0
    8d68:	f000 8227 	beq.w	91ba <send_adc+0x4e6>
    8d6c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d74:	781b      	ldrb	r3, [r3, #0]
    8d76:	461a      	mov	r2, r3
    8d78:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d80:	2105      	movs	r1, #5
    8d82:	5499      	strb	r1, [r3, r2]
    8d84:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8d88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d8c:	781b      	ldrb	r3, [r3, #0]
    8d8e:	3301      	adds	r3, #1
    8d90:	b2da      	uxtb	r2, r3
    8d92:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d9a:	701a      	strb	r2, [r3, #0]
    8d9c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8da4:	781b      	ldrb	r3, [r3, #0]
    8da6:	2bff      	cmp	r3, #255	; 0xff
    8da8:	d105      	bne.n	8db6 <send_adc+0xe2>
    8daa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8db2:	2200      	movs	r2, #0
    8db4:	701a      	strb	r2, [r3, #0]
    8db6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dbe:	781b      	ldrb	r3, [r3, #0]
    8dc0:	461a      	mov	r2, r3
    8dc2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8dc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dca:	2107      	movs	r1, #7
    8dcc:	5499      	strb	r1, [r3, r2]
    8dce:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dd6:	781b      	ldrb	r3, [r3, #0]
    8dd8:	3301      	adds	r3, #1
    8dda:	b2da      	uxtb	r2, r3
    8ddc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8de4:	701a      	strb	r2, [r3, #0]
    8de6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dee:	781b      	ldrb	r3, [r3, #0]
    8df0:	2bff      	cmp	r3, #255	; 0xff
    8df2:	d105      	bne.n	8e00 <send_adc+0x12c>
    8df4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dfc:	2200      	movs	r2, #0
    8dfe:	701a      	strb	r2, [r3, #0]
    8e00:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e08:	2207      	movs	r2, #7
    8e0a:	701a      	strb	r2, [r3, #0]
    8e0c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e14:	2207      	movs	r2, #7
    8e16:	701a      	strb	r2, [r3, #0]
    8e18:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e20:	781b      	ldrb	r3, [r3, #0]
    8e22:	461a      	mov	r2, r3
    8e24:	f24b 1370 	movw	r3, #45424	; 0xb170
    8e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e2c:	7819      	ldrb	r1, [r3, #0]
    8e2e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e36:	5499      	strb	r1, [r3, r2]
    8e38:	f24b 1370 	movw	r3, #45424	; 0xb170
    8e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e40:	781a      	ldrb	r2, [r3, #0]
    8e42:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e4a:	781b      	ldrb	r3, [r3, #0]
    8e4c:	4413      	add	r3, r2
    8e4e:	b2da      	uxtb	r2, r3
    8e50:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e58:	701a      	strb	r2, [r3, #0]
    8e5a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e62:	781a      	ldrb	r2, [r3, #0]
    8e64:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e6c:	781b      	ldrb	r3, [r3, #0]
    8e6e:	4413      	add	r3, r2
    8e70:	b2da      	uxtb	r2, r3
    8e72:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e7a:	701a      	strb	r2, [r3, #0]
    8e7c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e84:	781b      	ldrb	r3, [r3, #0]
    8e86:	3301      	adds	r3, #1
    8e88:	b2da      	uxtb	r2, r3
    8e8a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e92:	701a      	strb	r2, [r3, #0]
    8e94:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e9c:	781b      	ldrb	r3, [r3, #0]
    8e9e:	2bff      	cmp	r3, #255	; 0xff
    8ea0:	d105      	bne.n	8eae <send_adc+0x1da>
    8ea2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eaa:	2200      	movs	r2, #0
    8eac:	701a      	strb	r2, [r3, #0]
    8eae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eb6:	781b      	ldrb	r3, [r3, #0]
    8eb8:	461a      	mov	r2, r3
    8eba:	f24b 1370 	movw	r3, #45424	; 0xb170
    8ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ec2:	7859      	ldrb	r1, [r3, #1]
    8ec4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ecc:	5499      	strb	r1, [r3, r2]
    8ece:	4bc3      	ldr	r3, [pc, #780]	; (91dc <send_adc+0x508>)
    8ed0:	781a      	ldrb	r2, [r3, #0]
    8ed2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eda:	781b      	ldrb	r3, [r3, #0]
    8edc:	4413      	add	r3, r2
    8ede:	b2da      	uxtb	r2, r3
    8ee0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ee8:	701a      	strb	r2, [r3, #0]
    8eea:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ef2:	781a      	ldrb	r2, [r3, #0]
    8ef4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8efc:	781b      	ldrb	r3, [r3, #0]
    8efe:	4413      	add	r3, r2
    8f00:	b2da      	uxtb	r2, r3
    8f02:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f0a:	701a      	strb	r2, [r3, #0]
    8f0c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f14:	781b      	ldrb	r3, [r3, #0]
    8f16:	3301      	adds	r3, #1
    8f18:	b2da      	uxtb	r2, r3
    8f1a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f22:	701a      	strb	r2, [r3, #0]
    8f24:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f2c:	781b      	ldrb	r3, [r3, #0]
    8f2e:	2bff      	cmp	r3, #255	; 0xff
    8f30:	d105      	bne.n	8f3e <send_adc+0x26a>
    8f32:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f3a:	2200      	movs	r2, #0
    8f3c:	701a      	strb	r2, [r3, #0]
    8f3e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f46:	781b      	ldrb	r3, [r3, #0]
    8f48:	461a      	mov	r2, r3
    8f4a:	f24b 1372 	movw	r3, #45426	; 0xb172
    8f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f52:	7819      	ldrb	r1, [r3, #0]
    8f54:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f5c:	5499      	strb	r1, [r3, r2]
    8f5e:	f24b 1372 	movw	r3, #45426	; 0xb172
    8f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f66:	781a      	ldrb	r2, [r3, #0]
    8f68:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f70:	781b      	ldrb	r3, [r3, #0]
    8f72:	4413      	add	r3, r2
    8f74:	b2da      	uxtb	r2, r3
    8f76:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f7e:	701a      	strb	r2, [r3, #0]
    8f80:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f88:	781a      	ldrb	r2, [r3, #0]
    8f8a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f92:	781b      	ldrb	r3, [r3, #0]
    8f94:	4413      	add	r3, r2
    8f96:	b2da      	uxtb	r2, r3
    8f98:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fa0:	701a      	strb	r2, [r3, #0]
    8fa2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8faa:	781b      	ldrb	r3, [r3, #0]
    8fac:	3301      	adds	r3, #1
    8fae:	b2da      	uxtb	r2, r3
    8fb0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fb8:	701a      	strb	r2, [r3, #0]
    8fba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fc2:	781b      	ldrb	r3, [r3, #0]
    8fc4:	2bff      	cmp	r3, #255	; 0xff
    8fc6:	d105      	bne.n	8fd4 <send_adc+0x300>
    8fc8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fd0:	2200      	movs	r2, #0
    8fd2:	701a      	strb	r2, [r3, #0]
    8fd4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fdc:	781b      	ldrb	r3, [r3, #0]
    8fde:	461a      	mov	r2, r3
    8fe0:	f24b 1372 	movw	r3, #45426	; 0xb172
    8fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fe8:	7859      	ldrb	r1, [r3, #1]
    8fea:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ff2:	5499      	strb	r1, [r3, r2]
    8ff4:	4b7a      	ldr	r3, [pc, #488]	; (91e0 <send_adc+0x50c>)
    8ff6:	781a      	ldrb	r2, [r3, #0]
    8ff8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9000:	781b      	ldrb	r3, [r3, #0]
    9002:	4413      	add	r3, r2
    9004:	b2da      	uxtb	r2, r3
    9006:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    900a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    900e:	701a      	strb	r2, [r3, #0]
    9010:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9014:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9018:	781a      	ldrb	r2, [r3, #0]
    901a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    901e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9022:	781b      	ldrb	r3, [r3, #0]
    9024:	4413      	add	r3, r2
    9026:	b2da      	uxtb	r2, r3
    9028:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    902c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9030:	701a      	strb	r2, [r3, #0]
    9032:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9036:	f2c2 0300 	movt	r3, #8192	; 0x2000
    903a:	781b      	ldrb	r3, [r3, #0]
    903c:	3301      	adds	r3, #1
    903e:	b2da      	uxtb	r2, r3
    9040:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9044:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9048:	701a      	strb	r2, [r3, #0]
    904a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    904e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9052:	781b      	ldrb	r3, [r3, #0]
    9054:	2bff      	cmp	r3, #255	; 0xff
    9056:	d105      	bne.n	9064 <send_adc+0x390>
    9058:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    905c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9060:	2200      	movs	r2, #0
    9062:	701a      	strb	r2, [r3, #0]
    9064:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    906c:	781b      	ldrb	r3, [r3, #0]
    906e:	461a      	mov	r2, r3
    9070:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9078:	7819      	ldrb	r1, [r3, #0]
    907a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    907e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9082:	5499      	strb	r1, [r3, r2]
    9084:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    908c:	781b      	ldrb	r3, [r3, #0]
    908e:	3301      	adds	r3, #1
    9090:	b2da      	uxtb	r2, r3
    9092:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9096:	f2c2 0300 	movt	r3, #8192	; 0x2000
    909a:	701a      	strb	r2, [r3, #0]
    909c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    90a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90a4:	781b      	ldrb	r3, [r3, #0]
    90a6:	2bff      	cmp	r3, #255	; 0xff
    90a8:	d105      	bne.n	90b6 <send_adc+0x3e2>
    90aa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    90ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90b2:	2200      	movs	r2, #0
    90b4:	701a      	strb	r2, [r3, #0]
    90b6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    90ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90be:	781b      	ldrb	r3, [r3, #0]
    90c0:	461a      	mov	r2, r3
    90c2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    90c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90ca:	7819      	ldrb	r1, [r3, #0]
    90cc:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    90d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90d4:	5499      	strb	r1, [r3, r2]
    90d6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    90da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90de:	781b      	ldrb	r3, [r3, #0]
    90e0:	3301      	adds	r3, #1
    90e2:	b2da      	uxtb	r2, r3
    90e4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    90e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90ec:	701a      	strb	r2, [r3, #0]
    90ee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    90f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90f6:	781b      	ldrb	r3, [r3, #0]
    90f8:	2bff      	cmp	r3, #255	; 0xff
    90fa:	d105      	bne.n	9108 <send_adc+0x434>
    90fc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9100:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9104:	2200      	movs	r2, #0
    9106:	701a      	strb	r2, [r3, #0]
    9108:	f242 0339 	movw	r3, #8249	; 0x2039
    910c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9110:	781b      	ldrb	r3, [r3, #0]
    9112:	b2db      	uxtb	r3, r3
    9114:	f003 0310 	and.w	r3, r3, #16
    9118:	2b00      	cmp	r3, #0
    911a:	d15a      	bne.n	91d2 <send_adc+0x4fe>
    911c:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9120:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9124:	781b      	ldrb	r3, [r3, #0]
    9126:	b2db      	uxtb	r3, r3
    9128:	461a      	mov	r2, r3
    912a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    912e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9132:	5c9a      	ldrb	r2, [r3, r2]
    9134:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    9138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    913c:	701a      	strb	r2, [r3, #0]
    913e:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    9142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9146:	2200      	movs	r2, #0
    9148:	701a      	strb	r2, [r3, #0]
    914a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    914e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9152:	781b      	ldrb	r3, [r3, #0]
    9154:	b2db      	uxtb	r3, r3
    9156:	3301      	adds	r3, #1
    9158:	b2da      	uxtb	r2, r3
    915a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    915e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9162:	701a      	strb	r2, [r3, #0]
    9164:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    916c:	781b      	ldrb	r3, [r3, #0]
    916e:	b2db      	uxtb	r3, r3
    9170:	2bff      	cmp	r3, #255	; 0xff
    9172:	d105      	bne.n	9180 <send_adc+0x4ac>
    9174:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    917c:	2200      	movs	r2, #0
    917e:	701a      	strb	r2, [r3, #0]
    9180:	f242 0338 	movw	r3, #8248	; 0x2038
    9184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9188:	f242 0238 	movw	r2, #8248	; 0x2038
    918c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9190:	7812      	ldrb	r2, [r2, #0]
    9192:	b2d2      	uxtb	r2, r2
    9194:	f042 0201 	orr.w	r2, r2, #1
    9198:	b2d2      	uxtb	r2, r2
    919a:	701a      	strb	r2, [r3, #0]
    919c:	f242 0339 	movw	r3, #8249	; 0x2039
    91a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91a4:	f242 0239 	movw	r2, #8249	; 0x2039
    91a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    91ac:	7812      	ldrb	r2, [r2, #0]
    91ae:	b2d2      	uxtb	r2, r2
    91b0:	f042 0210 	orr.w	r2, r2, #16
    91b4:	b2d2      	uxtb	r2, r2
    91b6:	701a      	strb	r2, [r3, #0]
    91b8:	e00b      	b.n	91d2 <send_adc+0x4fe>
    91ba:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    91be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91c2:	781b      	ldrb	r3, [r3, #0]
    91c4:	3301      	adds	r3, #1
    91c6:	b2da      	uxtb	r2, r3
    91c8:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    91cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91d0:	701a      	strb	r2, [r3, #0]
}
    91d2:	46bd      	mov	sp, r7
    91d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    91d8:	4770      	bx	lr
    91da:	bf00      	nop
    91dc:	2000b171 	.word	0x2000b171
    91e0:	2000b173 	.word	0x2000b173

000091e4 <send_settings>:
void send_settings(void){ //500ms
    91e4:	b480      	push	{r7}
    91e6:	af00      	add	r7, sp, #0
  //if(!boot)
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    91e8:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    91ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91f0:	781a      	ldrb	r2, [r3, #0]
    91f2:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    91f6:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    91fa:	fba3 1302 	umull	r1, r3, r3, r2
    91fe:	0899      	lsrs	r1, r3, #2
    9200:	460b      	mov	r3, r1
    9202:	009b      	lsls	r3, r3, #2
    9204:	440b      	add	r3, r1
    9206:	1ad3      	subs	r3, r2, r3
    9208:	b2db      	uxtb	r3, r3
    920a:	2b02      	cmp	r3, #2
    920c:	f040 83e7 	bne.w	99de <send_settings+0x7fa>
    9210:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    9214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9218:	781b      	ldrb	r3, [r3, #0]
    921a:	2b00      	cmp	r3, #0
    921c:	f000 83df 	beq.w	99de <send_settings+0x7fa>
    9220:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9228:	781a      	ldrb	r2, [r3, #0]
    922a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    922e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9232:	781b      	ldrb	r3, [r3, #0]
    9234:	b2db      	uxtb	r3, r3
    9236:	429a      	cmp	r2, r3
    9238:	d313      	bcc.n	9262 <send_settings+0x7e>
    923a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    923e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9242:	781b      	ldrb	r3, [r3, #0]
    9244:	b2db      	uxtb	r3, r3
    9246:	461a      	mov	r2, r3
    9248:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    924c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9250:	781b      	ldrb	r3, [r3, #0]
    9252:	1ad3      	subs	r3, r2, r3
    9254:	33ff      	adds	r3, #255	; 0xff
    9256:	2b0d      	cmp	r3, #13
    9258:	bfd4      	ite	le
    925a:	2300      	movle	r3, #0
    925c:	2301      	movgt	r3, #1
    925e:	b2db      	uxtb	r3, r3
    9260:	e011      	b.n	9286 <send_settings+0xa2>
    9262:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9266:	f2c2 0300 	movt	r3, #8192	; 0x2000
    926a:	781b      	ldrb	r3, [r3, #0]
    926c:	b2db      	uxtb	r3, r3
    926e:	461a      	mov	r2, r3
    9270:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9278:	781b      	ldrb	r3, [r3, #0]
    927a:	1ad3      	subs	r3, r2, r3
    927c:	2b0d      	cmp	r3, #13
    927e:	bfd4      	ite	le
    9280:	2300      	movle	r3, #0
    9282:	2301      	movgt	r3, #1
    9284:	b2db      	uxtb	r3, r3
    9286:	2b00      	cmp	r3, #0
    9288:	f000 839d 	beq.w	99c6 <send_settings+0x7e2>
    928c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9290:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9294:	781b      	ldrb	r3, [r3, #0]
    9296:	461a      	mov	r2, r3
    9298:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    929c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92a0:	2105      	movs	r1, #5
    92a2:	5499      	strb	r1, [r3, r2]
    92a4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    92a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92ac:	781b      	ldrb	r3, [r3, #0]
    92ae:	3301      	adds	r3, #1
    92b0:	b2da      	uxtb	r2, r3
    92b2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    92b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92ba:	701a      	strb	r2, [r3, #0]
    92bc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    92c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92c4:	781b      	ldrb	r3, [r3, #0]
    92c6:	2bff      	cmp	r3, #255	; 0xff
    92c8:	d105      	bne.n	92d6 <send_settings+0xf2>
    92ca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    92ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92d2:	2200      	movs	r2, #0
    92d4:	701a      	strb	r2, [r3, #0]
    92d6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    92da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92de:	781b      	ldrb	r3, [r3, #0]
    92e0:	461a      	mov	r2, r3
    92e2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    92e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92ea:	2111      	movs	r1, #17
    92ec:	5499      	strb	r1, [r3, r2]
    92ee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    92f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92f6:	781b      	ldrb	r3, [r3, #0]
    92f8:	3301      	adds	r3, #1
    92fa:	b2da      	uxtb	r2, r3
    92fc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9300:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9304:	701a      	strb	r2, [r3, #0]
    9306:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    930a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    930e:	781b      	ldrb	r3, [r3, #0]
    9310:	2bff      	cmp	r3, #255	; 0xff
    9312:	d105      	bne.n	9320 <send_settings+0x13c>
    9314:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9318:	f2c2 0300 	movt	r3, #8192	; 0x2000
    931c:	2200      	movs	r2, #0
    931e:	701a      	strb	r2, [r3, #0]
    9320:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9328:	2211      	movs	r2, #17
    932a:	701a      	strb	r2, [r3, #0]
    932c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9334:	2211      	movs	r2, #17
    9336:	701a      	strb	r2, [r3, #0]
    9338:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    933c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9340:	781b      	ldrb	r3, [r3, #0]
    9342:	461a      	mov	r2, r3
    9344:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    9348:	f2c2 0300 	movt	r3, #8192	; 0x2000
    934c:	7819      	ldrb	r1, [r3, #0]
    934e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9356:	5499      	strb	r1, [r3, r2]
    9358:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    935c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9360:	781a      	ldrb	r2, [r3, #0]
    9362:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    9366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    936a:	781b      	ldrb	r3, [r3, #0]
    936c:	4413      	add	r3, r2
    936e:	b2da      	uxtb	r2, r3
    9370:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9378:	701a      	strb	r2, [r3, #0]
    937a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    937e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9382:	781a      	ldrb	r2, [r3, #0]
    9384:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    938c:	781b      	ldrb	r3, [r3, #0]
    938e:	4413      	add	r3, r2
    9390:	b2da      	uxtb	r2, r3
    9392:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9396:	f2c2 0300 	movt	r3, #8192	; 0x2000
    939a:	701a      	strb	r2, [r3, #0]
    939c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    93a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93a4:	781b      	ldrb	r3, [r3, #0]
    93a6:	3301      	adds	r3, #1
    93a8:	b2da      	uxtb	r2, r3
    93aa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    93ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93b2:	701a      	strb	r2, [r3, #0]
    93b4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    93b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93bc:	781b      	ldrb	r3, [r3, #0]
    93be:	2bff      	cmp	r3, #255	; 0xff
    93c0:	d105      	bne.n	93ce <send_settings+0x1ea>
    93c2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    93c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93ca:	2200      	movs	r2, #0
    93cc:	701a      	strb	r2, [r3, #0]
    93ce:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    93d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93d6:	781b      	ldrb	r3, [r3, #0]
    93d8:	461a      	mov	r2, r3
    93da:	f64a 63c0 	movw	r3, #44736	; 0xaec0
    93de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93e2:	7819      	ldrb	r1, [r3, #0]
    93e4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    93e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93ec:	5499      	strb	r1, [r3, r2]
    93ee:	f64a 63c0 	movw	r3, #44736	; 0xaec0
    93f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93f6:	781a      	ldrb	r2, [r3, #0]
    93f8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    93fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9400:	781b      	ldrb	r3, [r3, #0]
    9402:	4413      	add	r3, r2
    9404:	b2da      	uxtb	r2, r3
    9406:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    940a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    940e:	701a      	strb	r2, [r3, #0]
    9410:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9414:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9418:	781a      	ldrb	r2, [r3, #0]
    941a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    941e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9422:	781b      	ldrb	r3, [r3, #0]
    9424:	4413      	add	r3, r2
    9426:	b2da      	uxtb	r2, r3
    9428:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    942c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9430:	701a      	strb	r2, [r3, #0]
    9432:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9436:	f2c2 0300 	movt	r3, #8192	; 0x2000
    943a:	781b      	ldrb	r3, [r3, #0]
    943c:	3301      	adds	r3, #1
    943e:	b2da      	uxtb	r2, r3
    9440:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9448:	701a      	strb	r2, [r3, #0]
    944a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    944e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9452:	781b      	ldrb	r3, [r3, #0]
    9454:	2bff      	cmp	r3, #255	; 0xff
    9456:	d105      	bne.n	9464 <send_settings+0x280>
    9458:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    945c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9460:	2200      	movs	r2, #0
    9462:	701a      	strb	r2, [r3, #0]
    9464:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9468:	f2c2 0300 	movt	r3, #8192	; 0x2000
    946c:	781b      	ldrb	r3, [r3, #0]
    946e:	461a      	mov	r2, r3
    9470:	f64a 63c0 	movw	r3, #44736	; 0xaec0
    9474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9478:	7859      	ldrb	r1, [r3, #1]
    947a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    947e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9482:	5499      	strb	r1, [r3, r2]
    9484:	4bd1      	ldr	r3, [pc, #836]	; (97cc <send_settings+0x5e8>)
    9486:	781a      	ldrb	r2, [r3, #0]
    9488:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    948c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9490:	781b      	ldrb	r3, [r3, #0]
    9492:	4413      	add	r3, r2
    9494:	b2da      	uxtb	r2, r3
    9496:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    949a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    949e:	701a      	strb	r2, [r3, #0]
    94a0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    94a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94a8:	781a      	ldrb	r2, [r3, #0]
    94aa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    94ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94b2:	781b      	ldrb	r3, [r3, #0]
    94b4:	4413      	add	r3, r2
    94b6:	b2da      	uxtb	r2, r3
    94b8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    94bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94c0:	701a      	strb	r2, [r3, #0]
    94c2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    94c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94ca:	781b      	ldrb	r3, [r3, #0]
    94cc:	3301      	adds	r3, #1
    94ce:	b2da      	uxtb	r2, r3
    94d0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    94d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94d8:	701a      	strb	r2, [r3, #0]
    94da:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    94de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94e2:	781b      	ldrb	r3, [r3, #0]
    94e4:	2bff      	cmp	r3, #255	; 0xff
    94e6:	d105      	bne.n	94f4 <send_settings+0x310>
    94e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    94ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94f0:	2200      	movs	r2, #0
    94f2:	701a      	strb	r2, [r3, #0]
    94f4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    94f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94fc:	781b      	ldrb	r3, [r3, #0]
    94fe:	461a      	mov	r2, r3
    9500:	f64a 63c0 	movw	r3, #44736	; 0xaec0
    9504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9508:	7899      	ldrb	r1, [r3, #2]
    950a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    950e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9512:	5499      	strb	r1, [r3, r2]
    9514:	4bae      	ldr	r3, [pc, #696]	; (97d0 <send_settings+0x5ec>)
    9516:	781a      	ldrb	r2, [r3, #0]
    9518:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    951c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9520:	781b      	ldrb	r3, [r3, #0]
    9522:	4413      	add	r3, r2
    9524:	b2da      	uxtb	r2, r3
    9526:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    952a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    952e:	701a      	strb	r2, [r3, #0]
    9530:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9538:	781a      	ldrb	r2, [r3, #0]
    953a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    953e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9542:	781b      	ldrb	r3, [r3, #0]
    9544:	4413      	add	r3, r2
    9546:	b2da      	uxtb	r2, r3
    9548:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    954c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9550:	701a      	strb	r2, [r3, #0]
    9552:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    955a:	781b      	ldrb	r3, [r3, #0]
    955c:	3301      	adds	r3, #1
    955e:	b2da      	uxtb	r2, r3
    9560:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9568:	701a      	strb	r2, [r3, #0]
    956a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    956e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9572:	781b      	ldrb	r3, [r3, #0]
    9574:	2bff      	cmp	r3, #255	; 0xff
    9576:	d105      	bne.n	9584 <send_settings+0x3a0>
    9578:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    957c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9580:	2200      	movs	r2, #0
    9582:	701a      	strb	r2, [r3, #0]
    9584:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    958c:	781b      	ldrb	r3, [r3, #0]
    958e:	461a      	mov	r2, r3
    9590:	f64a 63c0 	movw	r3, #44736	; 0xaec0
    9594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9598:	78d9      	ldrb	r1, [r3, #3]
    959a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    959e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95a2:	5499      	strb	r1, [r3, r2]
    95a4:	4b8b      	ldr	r3, [pc, #556]	; (97d4 <send_settings+0x5f0>)
    95a6:	781a      	ldrb	r2, [r3, #0]
    95a8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    95ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95b0:	781b      	ldrb	r3, [r3, #0]
    95b2:	4413      	add	r3, r2
    95b4:	b2da      	uxtb	r2, r3
    95b6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    95ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95be:	701a      	strb	r2, [r3, #0]
    95c0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    95c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95c8:	781a      	ldrb	r2, [r3, #0]
    95ca:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    95ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95d2:	781b      	ldrb	r3, [r3, #0]
    95d4:	4413      	add	r3, r2
    95d6:	b2da      	uxtb	r2, r3
    95d8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    95dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95e0:	701a      	strb	r2, [r3, #0]
    95e2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    95e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95ea:	781b      	ldrb	r3, [r3, #0]
    95ec:	3301      	adds	r3, #1
    95ee:	b2da      	uxtb	r2, r3
    95f0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    95f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95f8:	701a      	strb	r2, [r3, #0]
    95fa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    95fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9602:	781b      	ldrb	r3, [r3, #0]
    9604:	2bff      	cmp	r3, #255	; 0xff
    9606:	d105      	bne.n	9614 <send_settings+0x430>
    9608:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    960c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9610:	2200      	movs	r2, #0
    9612:	701a      	strb	r2, [r3, #0]
    9614:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9618:	f2c2 0300 	movt	r3, #8192	; 0x2000
    961c:	781b      	ldrb	r3, [r3, #0]
    961e:	461a      	mov	r2, r3
    9620:	f64a 63c4 	movw	r3, #44740	; 0xaec4
    9624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9628:	7819      	ldrb	r1, [r3, #0]
    962a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    962e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9632:	5499      	strb	r1, [r3, r2]
    9634:	f64a 63c4 	movw	r3, #44740	; 0xaec4
    9638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    963c:	781a      	ldrb	r2, [r3, #0]
    963e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9646:	781b      	ldrb	r3, [r3, #0]
    9648:	4413      	add	r3, r2
    964a:	b2da      	uxtb	r2, r3
    964c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9650:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9654:	701a      	strb	r2, [r3, #0]
    9656:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    965a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    965e:	781a      	ldrb	r2, [r3, #0]
    9660:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9668:	781b      	ldrb	r3, [r3, #0]
    966a:	4413      	add	r3, r2
    966c:	b2da      	uxtb	r2, r3
    966e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9676:	701a      	strb	r2, [r3, #0]
    9678:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    967c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9680:	781b      	ldrb	r3, [r3, #0]
    9682:	3301      	adds	r3, #1
    9684:	b2da      	uxtb	r2, r3
    9686:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    968a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    968e:	701a      	strb	r2, [r3, #0]
    9690:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9694:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9698:	781b      	ldrb	r3, [r3, #0]
    969a:	2bff      	cmp	r3, #255	; 0xff
    969c:	d105      	bne.n	96aa <send_settings+0x4c6>
    969e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    96a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96a6:	2200      	movs	r2, #0
    96a8:	701a      	strb	r2, [r3, #0]
    96aa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    96ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96b2:	781b      	ldrb	r3, [r3, #0]
    96b4:	461a      	mov	r2, r3
    96b6:	f64a 63c4 	movw	r3, #44740	; 0xaec4
    96ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96be:	7859      	ldrb	r1, [r3, #1]
    96c0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    96c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96c8:	5499      	strb	r1, [r3, r2]
    96ca:	4b43      	ldr	r3, [pc, #268]	; (97d8 <send_settings+0x5f4>)
    96cc:	781a      	ldrb	r2, [r3, #0]
    96ce:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    96d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96d6:	781b      	ldrb	r3, [r3, #0]
    96d8:	4413      	add	r3, r2
    96da:	b2da      	uxtb	r2, r3
    96dc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    96e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96e4:	701a      	strb	r2, [r3, #0]
    96e6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    96ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96ee:	781a      	ldrb	r2, [r3, #0]
    96f0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    96f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96f8:	781b      	ldrb	r3, [r3, #0]
    96fa:	4413      	add	r3, r2
    96fc:	b2da      	uxtb	r2, r3
    96fe:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9706:	701a      	strb	r2, [r3, #0]
    9708:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    970c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9710:	781b      	ldrb	r3, [r3, #0]
    9712:	3301      	adds	r3, #1
    9714:	b2da      	uxtb	r2, r3
    9716:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    971a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    971e:	701a      	strb	r2, [r3, #0]
    9720:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9728:	781b      	ldrb	r3, [r3, #0]
    972a:	2bff      	cmp	r3, #255	; 0xff
    972c:	d105      	bne.n	973a <send_settings+0x556>
    972e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9736:	2200      	movs	r2, #0
    9738:	701a      	strb	r2, [r3, #0]
    973a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    973e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9742:	781b      	ldrb	r3, [r3, #0]
    9744:	461a      	mov	r2, r3
    9746:	f64a 63c4 	movw	r3, #44740	; 0xaec4
    974a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    974e:	7899      	ldrb	r1, [r3, #2]
    9750:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9758:	5499      	strb	r1, [r3, r2]
    975a:	4b20      	ldr	r3, [pc, #128]	; (97dc <send_settings+0x5f8>)
    975c:	781a      	ldrb	r2, [r3, #0]
    975e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9766:	781b      	ldrb	r3, [r3, #0]
    9768:	4413      	add	r3, r2
    976a:	b2da      	uxtb	r2, r3
    976c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9774:	701a      	strb	r2, [r3, #0]
    9776:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    977a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    977e:	781a      	ldrb	r2, [r3, #0]
    9780:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9788:	781b      	ldrb	r3, [r3, #0]
    978a:	4413      	add	r3, r2
    978c:	b2da      	uxtb	r2, r3
    978e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9796:	701a      	strb	r2, [r3, #0]
    9798:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    979c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97a0:	781b      	ldrb	r3, [r3, #0]
    97a2:	3301      	adds	r3, #1
    97a4:	b2da      	uxtb	r2, r3
    97a6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    97aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97ae:	701a      	strb	r2, [r3, #0]
    97b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    97b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97b8:	781b      	ldrb	r3, [r3, #0]
    97ba:	2bff      	cmp	r3, #255	; 0xff
    97bc:	d110      	bne.n	97e0 <send_settings+0x5fc>
    97be:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    97c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97c6:	2200      	movs	r2, #0
    97c8:	701a      	strb	r2, [r3, #0]
    97ca:	e009      	b.n	97e0 <send_settings+0x5fc>
    97cc:	2000aec1 	.word	0x2000aec1
    97d0:	2000aec2 	.word	0x2000aec2
    97d4:	2000aec3 	.word	0x2000aec3
    97d8:	2000aec5 	.word	0x2000aec5
    97dc:	2000aec6 	.word	0x2000aec6
    97e0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    97e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97e8:	781b      	ldrb	r3, [r3, #0]
    97ea:	461a      	mov	r2, r3
    97ec:	f64a 63c4 	movw	r3, #44740	; 0xaec4
    97f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97f4:	78d9      	ldrb	r1, [r3, #3]
    97f6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    97fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97fe:	5499      	strb	r1, [r3, r2]
    9800:	4b79      	ldr	r3, [pc, #484]	; (99e8 <send_settings+0x804>)
    9802:	781a      	ldrb	r2, [r3, #0]
    9804:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    980c:	781b      	ldrb	r3, [r3, #0]
    980e:	4413      	add	r3, r2
    9810:	b2da      	uxtb	r2, r3
    9812:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    981a:	701a      	strb	r2, [r3, #0]
    981c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9824:	781a      	ldrb	r2, [r3, #0]
    9826:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    982a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    982e:	781b      	ldrb	r3, [r3, #0]
    9830:	4413      	add	r3, r2
    9832:	b2da      	uxtb	r2, r3
    9834:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    983c:	701a      	strb	r2, [r3, #0]
    983e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9846:	781b      	ldrb	r3, [r3, #0]
    9848:	3301      	adds	r3, #1
    984a:	b2da      	uxtb	r2, r3
    984c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9854:	701a      	strb	r2, [r3, #0]
    9856:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    985a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    985e:	781b      	ldrb	r3, [r3, #0]
    9860:	2bff      	cmp	r3, #255	; 0xff
    9862:	d105      	bne.n	9870 <send_settings+0x68c>
    9864:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    986c:	2200      	movs	r2, #0
    986e:	701a      	strb	r2, [r3, #0]
    9870:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9874:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9878:	781b      	ldrb	r3, [r3, #0]
    987a:	461a      	mov	r2, r3
    987c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9880:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9884:	7819      	ldrb	r1, [r3, #0]
    9886:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    988a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    988e:	5499      	strb	r1, [r3, r2]
    9890:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9898:	781b      	ldrb	r3, [r3, #0]
    989a:	3301      	adds	r3, #1
    989c:	b2da      	uxtb	r2, r3
    989e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    98a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98a6:	701a      	strb	r2, [r3, #0]
    98a8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    98ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98b0:	781b      	ldrb	r3, [r3, #0]
    98b2:	2bff      	cmp	r3, #255	; 0xff
    98b4:	d105      	bne.n	98c2 <send_settings+0x6de>
    98b6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    98ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98be:	2200      	movs	r2, #0
    98c0:	701a      	strb	r2, [r3, #0]
    98c2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    98c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98ca:	781b      	ldrb	r3, [r3, #0]
    98cc:	461a      	mov	r2, r3
    98ce:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    98d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98d6:	7819      	ldrb	r1, [r3, #0]
    98d8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    98dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98e0:	5499      	strb	r1, [r3, r2]
    98e2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    98e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98ea:	781b      	ldrb	r3, [r3, #0]
    98ec:	3301      	adds	r3, #1
    98ee:	b2da      	uxtb	r2, r3
    98f0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    98f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98f8:	701a      	strb	r2, [r3, #0]
    98fa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    98fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9902:	781b      	ldrb	r3, [r3, #0]
    9904:	2bff      	cmp	r3, #255	; 0xff
    9906:	d105      	bne.n	9914 <send_settings+0x730>
    9908:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    990c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9910:	2200      	movs	r2, #0
    9912:	701a      	strb	r2, [r3, #0]
    9914:	f242 0339 	movw	r3, #8249	; 0x2039
    9918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    991c:	781b      	ldrb	r3, [r3, #0]
    991e:	b2db      	uxtb	r3, r3
    9920:	f003 0310 	and.w	r3, r3, #16
    9924:	2b00      	cmp	r3, #0
    9926:	d15a      	bne.n	99de <send_settings+0x7fa>
    9928:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    992c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9930:	781b      	ldrb	r3, [r3, #0]
    9932:	b2db      	uxtb	r3, r3
    9934:	461a      	mov	r2, r3
    9936:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    993a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    993e:	5c9a      	ldrb	r2, [r3, r2]
    9940:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    9944:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9948:	701a      	strb	r2, [r3, #0]
    994a:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    994e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9952:	2200      	movs	r2, #0
    9954:	701a      	strb	r2, [r3, #0]
    9956:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    995a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    995e:	781b      	ldrb	r3, [r3, #0]
    9960:	b2db      	uxtb	r3, r3
    9962:	3301      	adds	r3, #1
    9964:	b2da      	uxtb	r2, r3
    9966:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    996a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    996e:	701a      	strb	r2, [r3, #0]
    9970:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9978:	781b      	ldrb	r3, [r3, #0]
    997a:	b2db      	uxtb	r3, r3
    997c:	2bff      	cmp	r3, #255	; 0xff
    997e:	d105      	bne.n	998c <send_settings+0x7a8>
    9980:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9984:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9988:	2200      	movs	r2, #0
    998a:	701a      	strb	r2, [r3, #0]
    998c:	f242 0338 	movw	r3, #8248	; 0x2038
    9990:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9994:	f242 0238 	movw	r2, #8248	; 0x2038
    9998:	f2c2 0200 	movt	r2, #8192	; 0x2000
    999c:	7812      	ldrb	r2, [r2, #0]
    999e:	b2d2      	uxtb	r2, r2
    99a0:	f042 0201 	orr.w	r2, r2, #1
    99a4:	b2d2      	uxtb	r2, r2
    99a6:	701a      	strb	r2, [r3, #0]
    99a8:	f242 0339 	movw	r3, #8249	; 0x2039
    99ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99b0:	f242 0239 	movw	r2, #8249	; 0x2039
    99b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    99b8:	7812      	ldrb	r2, [r2, #0]
    99ba:	b2d2      	uxtb	r2, r2
    99bc:	f042 0210 	orr.w	r2, r2, #16
    99c0:	b2d2      	uxtb	r2, r2
    99c2:	701a      	strb	r2, [r3, #0]
    99c4:	e00b      	b.n	99de <send_settings+0x7fa>
    99c6:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    99ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99ce:	781b      	ldrb	r3, [r3, #0]
    99d0:	3301      	adds	r3, #1
    99d2:	b2da      	uxtb	r2, r3
    99d4:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    99d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99dc:	701a      	strb	r2, [r3, #0]
}
    99de:	46bd      	mov	sp, r7
    99e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    99e4:	4770      	bx	lr
    99e6:	bf00      	nop
    99e8:	2000aec7 	.word	0x2000aec7

000099ec <send_desired>:
void send_desired(void){  //1000ms
    99ec:	b480      	push	{r7}
    99ee:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    99f0:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    99f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99f8:	781a      	ldrb	r2, [r3, #0]
    99fa:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    99fe:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9a02:	fba3 1302 	umull	r1, r3, r3, r2
    9a06:	08d9      	lsrs	r1, r3, #3
    9a08:	460b      	mov	r3, r1
    9a0a:	009b      	lsls	r3, r3, #2
    9a0c:	440b      	add	r3, r1
    9a0e:	005b      	lsls	r3, r3, #1
    9a10:	1ad3      	subs	r3, r2, r3
    9a12:	b2db      	uxtb	r3, r3
    9a14:	2b03      	cmp	r3, #3
    9a16:	f040 8712 	bne.w	a83e <send_desired+0xe52>
    9a1a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a22:	781a      	ldrb	r2, [r3, #0]
    9a24:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a2c:	781b      	ldrb	r3, [r3, #0]
    9a2e:	b2db      	uxtb	r3, r3
    9a30:	429a      	cmp	r2, r3
    9a32:	d313      	bcc.n	9a5c <send_desired+0x70>
    9a34:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a3c:	781b      	ldrb	r3, [r3, #0]
    9a3e:	b2db      	uxtb	r3, r3
    9a40:	461a      	mov	r2, r3
    9a42:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a4a:	781b      	ldrb	r3, [r3, #0]
    9a4c:	1ad3      	subs	r3, r2, r3
    9a4e:	33ff      	adds	r3, #255	; 0xff
    9a50:	2b18      	cmp	r3, #24
    9a52:	bfd4      	ite	le
    9a54:	2300      	movle	r3, #0
    9a56:	2301      	movgt	r3, #1
    9a58:	b2db      	uxtb	r3, r3
    9a5a:	e011      	b.n	9a80 <send_desired+0x94>
    9a5c:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a64:	781b      	ldrb	r3, [r3, #0]
    9a66:	b2db      	uxtb	r3, r3
    9a68:	461a      	mov	r2, r3
    9a6a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a72:	781b      	ldrb	r3, [r3, #0]
    9a74:	1ad3      	subs	r3, r2, r3
    9a76:	2b18      	cmp	r3, #24
    9a78:	bfd4      	ite	le
    9a7a:	2300      	movle	r3, #0
    9a7c:	2301      	movgt	r3, #1
    9a7e:	b2db      	uxtb	r3, r3
    9a80:	2b00      	cmp	r3, #0
    9a82:	f000 86d0 	beq.w	a826 <send_desired+0xe3a>
    9a86:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9a8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a8e:	781b      	ldrb	r3, [r3, #0]
    9a90:	461a      	mov	r2, r3
    9a92:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a9a:	2105      	movs	r1, #5
    9a9c:	5499      	strb	r1, [r3, r2]
    9a9e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9aa6:	781b      	ldrb	r3, [r3, #0]
    9aa8:	3301      	adds	r3, #1
    9aaa:	b2da      	uxtb	r2, r3
    9aac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ab4:	701a      	strb	r2, [r3, #0]
    9ab6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9abe:	781b      	ldrb	r3, [r3, #0]
    9ac0:	2bff      	cmp	r3, #255	; 0xff
    9ac2:	d105      	bne.n	9ad0 <send_desired+0xe4>
    9ac4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9acc:	2200      	movs	r2, #0
    9ace:	701a      	strb	r2, [r3, #0]
    9ad0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ad8:	781b      	ldrb	r3, [r3, #0]
    9ada:	461a      	mov	r2, r3
    9adc:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ae4:	2112      	movs	r1, #18
    9ae6:	5499      	strb	r1, [r3, r2]
    9ae8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9af0:	781b      	ldrb	r3, [r3, #0]
    9af2:	3301      	adds	r3, #1
    9af4:	b2da      	uxtb	r2, r3
    9af6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9afe:	701a      	strb	r2, [r3, #0]
    9b00:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b08:	781b      	ldrb	r3, [r3, #0]
    9b0a:	2bff      	cmp	r3, #255	; 0xff
    9b0c:	d105      	bne.n	9b1a <send_desired+0x12e>
    9b0e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b16:	2200      	movs	r2, #0
    9b18:	701a      	strb	r2, [r3, #0]
    9b1a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b22:	2212      	movs	r2, #18
    9b24:	701a      	strb	r2, [r3, #0]
    9b26:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b2e:	2212      	movs	r2, #18
    9b30:	701a      	strb	r2, [r3, #0]
    9b32:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b3a:	781b      	ldrb	r3, [r3, #0]
    9b3c:	461a      	mov	r2, r3
    9b3e:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    9b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b46:	7819      	ldrb	r1, [r3, #0]
    9b48:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b50:	5499      	strb	r1, [r3, r2]
    9b52:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    9b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b5a:	781a      	ldrb	r2, [r3, #0]
    9b5c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b64:	781b      	ldrb	r3, [r3, #0]
    9b66:	4413      	add	r3, r2
    9b68:	b2da      	uxtb	r2, r3
    9b6a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b72:	701a      	strb	r2, [r3, #0]
    9b74:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b7c:	781a      	ldrb	r2, [r3, #0]
    9b7e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b86:	781b      	ldrb	r3, [r3, #0]
    9b88:	4413      	add	r3, r2
    9b8a:	b2da      	uxtb	r2, r3
    9b8c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b94:	701a      	strb	r2, [r3, #0]
    9b96:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b9e:	781b      	ldrb	r3, [r3, #0]
    9ba0:	3301      	adds	r3, #1
    9ba2:	b2da      	uxtb	r2, r3
    9ba4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bac:	701a      	strb	r2, [r3, #0]
    9bae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bb6:	781b      	ldrb	r3, [r3, #0]
    9bb8:	2bff      	cmp	r3, #255	; 0xff
    9bba:	d105      	bne.n	9bc8 <send_desired+0x1dc>
    9bbc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bc4:	2200      	movs	r2, #0
    9bc6:	701a      	strb	r2, [r3, #0]
    9bc8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bd0:	781b      	ldrb	r3, [r3, #0]
    9bd2:	461a      	mov	r2, r3
    9bd4:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    9bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bdc:	7859      	ldrb	r1, [r3, #1]
    9bde:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9be6:	5499      	strb	r1, [r3, r2]
    9be8:	4bd1      	ldr	r3, [pc, #836]	; (9f30 <send_desired+0x544>)
    9bea:	781a      	ldrb	r2, [r3, #0]
    9bec:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bf4:	781b      	ldrb	r3, [r3, #0]
    9bf6:	4413      	add	r3, r2
    9bf8:	b2da      	uxtb	r2, r3
    9bfa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c02:	701a      	strb	r2, [r3, #0]
    9c04:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c0c:	781a      	ldrb	r2, [r3, #0]
    9c0e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c16:	781b      	ldrb	r3, [r3, #0]
    9c18:	4413      	add	r3, r2
    9c1a:	b2da      	uxtb	r2, r3
    9c1c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c24:	701a      	strb	r2, [r3, #0]
    9c26:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c2e:	781b      	ldrb	r3, [r3, #0]
    9c30:	3301      	adds	r3, #1
    9c32:	b2da      	uxtb	r2, r3
    9c34:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c3c:	701a      	strb	r2, [r3, #0]
    9c3e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c46:	781b      	ldrb	r3, [r3, #0]
    9c48:	2bff      	cmp	r3, #255	; 0xff
    9c4a:	d105      	bne.n	9c58 <send_desired+0x26c>
    9c4c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9c50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c54:	2200      	movs	r2, #0
    9c56:	701a      	strb	r2, [r3, #0]
    9c58:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c60:	781b      	ldrb	r3, [r3, #0]
    9c62:	461a      	mov	r2, r3
    9c64:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    9c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c6c:	7899      	ldrb	r1, [r3, #2]
    9c6e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c76:	5499      	strb	r1, [r3, r2]
    9c78:	4bae      	ldr	r3, [pc, #696]	; (9f34 <send_desired+0x548>)
    9c7a:	781a      	ldrb	r2, [r3, #0]
    9c7c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c84:	781b      	ldrb	r3, [r3, #0]
    9c86:	4413      	add	r3, r2
    9c88:	b2da      	uxtb	r2, r3
    9c8a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c92:	701a      	strb	r2, [r3, #0]
    9c94:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c9c:	781a      	ldrb	r2, [r3, #0]
    9c9e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ca6:	781b      	ldrb	r3, [r3, #0]
    9ca8:	4413      	add	r3, r2
    9caa:	b2da      	uxtb	r2, r3
    9cac:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cb4:	701a      	strb	r2, [r3, #0]
    9cb6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cbe:	781b      	ldrb	r3, [r3, #0]
    9cc0:	3301      	adds	r3, #1
    9cc2:	b2da      	uxtb	r2, r3
    9cc4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ccc:	701a      	strb	r2, [r3, #0]
    9cce:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cd6:	781b      	ldrb	r3, [r3, #0]
    9cd8:	2bff      	cmp	r3, #255	; 0xff
    9cda:	d105      	bne.n	9ce8 <send_desired+0x2fc>
    9cdc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ce4:	2200      	movs	r2, #0
    9ce6:	701a      	strb	r2, [r3, #0]
    9ce8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cf0:	781b      	ldrb	r3, [r3, #0]
    9cf2:	461a      	mov	r2, r3
    9cf4:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    9cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cfc:	78d9      	ldrb	r1, [r3, #3]
    9cfe:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d06:	5499      	strb	r1, [r3, r2]
    9d08:	4b8b      	ldr	r3, [pc, #556]	; (9f38 <send_desired+0x54c>)
    9d0a:	781a      	ldrb	r2, [r3, #0]
    9d0c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d14:	781b      	ldrb	r3, [r3, #0]
    9d16:	4413      	add	r3, r2
    9d18:	b2da      	uxtb	r2, r3
    9d1a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d22:	701a      	strb	r2, [r3, #0]
    9d24:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d2c:	781a      	ldrb	r2, [r3, #0]
    9d2e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d36:	781b      	ldrb	r3, [r3, #0]
    9d38:	4413      	add	r3, r2
    9d3a:	b2da      	uxtb	r2, r3
    9d3c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d44:	701a      	strb	r2, [r3, #0]
    9d46:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d4e:	781b      	ldrb	r3, [r3, #0]
    9d50:	3301      	adds	r3, #1
    9d52:	b2da      	uxtb	r2, r3
    9d54:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d5c:	701a      	strb	r2, [r3, #0]
    9d5e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d66:	781b      	ldrb	r3, [r3, #0]
    9d68:	2bff      	cmp	r3, #255	; 0xff
    9d6a:	d105      	bne.n	9d78 <send_desired+0x38c>
    9d6c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d74:	2200      	movs	r2, #0
    9d76:	701a      	strb	r2, [r3, #0]
    9d78:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d80:	781b      	ldrb	r3, [r3, #0]
    9d82:	461a      	mov	r2, r3
    9d84:	f24b 2300 	movw	r3, #45568	; 0xb200
    9d88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d8c:	7819      	ldrb	r1, [r3, #0]
    9d8e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d96:	5499      	strb	r1, [r3, r2]
    9d98:	f24b 2300 	movw	r3, #45568	; 0xb200
    9d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9da0:	781a      	ldrb	r2, [r3, #0]
    9da2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9da6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9daa:	781b      	ldrb	r3, [r3, #0]
    9dac:	4413      	add	r3, r2
    9dae:	b2da      	uxtb	r2, r3
    9db0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9db8:	701a      	strb	r2, [r3, #0]
    9dba:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dc2:	781a      	ldrb	r2, [r3, #0]
    9dc4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dcc:	781b      	ldrb	r3, [r3, #0]
    9dce:	4413      	add	r3, r2
    9dd0:	b2da      	uxtb	r2, r3
    9dd2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dda:	701a      	strb	r2, [r3, #0]
    9ddc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9de4:	781b      	ldrb	r3, [r3, #0]
    9de6:	3301      	adds	r3, #1
    9de8:	b2da      	uxtb	r2, r3
    9dea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9df2:	701a      	strb	r2, [r3, #0]
    9df4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dfc:	781b      	ldrb	r3, [r3, #0]
    9dfe:	2bff      	cmp	r3, #255	; 0xff
    9e00:	d105      	bne.n	9e0e <send_desired+0x422>
    9e02:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e0a:	2200      	movs	r2, #0
    9e0c:	701a      	strb	r2, [r3, #0]
    9e0e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9e12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e16:	781b      	ldrb	r3, [r3, #0]
    9e18:	461a      	mov	r2, r3
    9e1a:	f24b 2300 	movw	r3, #45568	; 0xb200
    9e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e22:	7859      	ldrb	r1, [r3, #1]
    9e24:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e2c:	5499      	strb	r1, [r3, r2]
    9e2e:	4b43      	ldr	r3, [pc, #268]	; (9f3c <send_desired+0x550>)
    9e30:	781a      	ldrb	r2, [r3, #0]
    9e32:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9e36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e3a:	781b      	ldrb	r3, [r3, #0]
    9e3c:	4413      	add	r3, r2
    9e3e:	b2da      	uxtb	r2, r3
    9e40:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e48:	701a      	strb	r2, [r3, #0]
    9e4a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e52:	781a      	ldrb	r2, [r3, #0]
    9e54:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e5c:	781b      	ldrb	r3, [r3, #0]
    9e5e:	4413      	add	r3, r2
    9e60:	b2da      	uxtb	r2, r3
    9e62:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e6a:	701a      	strb	r2, [r3, #0]
    9e6c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e74:	781b      	ldrb	r3, [r3, #0]
    9e76:	3301      	adds	r3, #1
    9e78:	b2da      	uxtb	r2, r3
    9e7a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e82:	701a      	strb	r2, [r3, #0]
    9e84:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e8c:	781b      	ldrb	r3, [r3, #0]
    9e8e:	2bff      	cmp	r3, #255	; 0xff
    9e90:	d105      	bne.n	9e9e <send_desired+0x4b2>
    9e92:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9e96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e9a:	2200      	movs	r2, #0
    9e9c:	701a      	strb	r2, [r3, #0]
    9e9e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9ea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ea6:	781b      	ldrb	r3, [r3, #0]
    9ea8:	461a      	mov	r2, r3
    9eaa:	f24b 2300 	movw	r3, #45568	; 0xb200
    9eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eb2:	7899      	ldrb	r1, [r3, #2]
    9eb4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ebc:	5499      	strb	r1, [r3, r2]
    9ebe:	4b20      	ldr	r3, [pc, #128]	; (9f40 <send_desired+0x554>)
    9ec0:	781a      	ldrb	r2, [r3, #0]
    9ec2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eca:	781b      	ldrb	r3, [r3, #0]
    9ecc:	4413      	add	r3, r2
    9ece:	b2da      	uxtb	r2, r3
    9ed0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ed8:	701a      	strb	r2, [r3, #0]
    9eda:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ee2:	781a      	ldrb	r2, [r3, #0]
    9ee4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eec:	781b      	ldrb	r3, [r3, #0]
    9eee:	4413      	add	r3, r2
    9ef0:	b2da      	uxtb	r2, r3
    9ef2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9efa:	701a      	strb	r2, [r3, #0]
    9efc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f04:	781b      	ldrb	r3, [r3, #0]
    9f06:	3301      	adds	r3, #1
    9f08:	b2da      	uxtb	r2, r3
    9f0a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f12:	701a      	strb	r2, [r3, #0]
    9f14:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f1c:	781b      	ldrb	r3, [r3, #0]
    9f1e:	2bff      	cmp	r3, #255	; 0xff
    9f20:	d110      	bne.n	9f44 <send_desired+0x558>
    9f22:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f2a:	2200      	movs	r2, #0
    9f2c:	701a      	strb	r2, [r3, #0]
    9f2e:	e009      	b.n	9f44 <send_desired+0x558>
    9f30:	2000b1fd 	.word	0x2000b1fd
    9f34:	2000b1fe 	.word	0x2000b1fe
    9f38:	2000b1ff 	.word	0x2000b1ff
    9f3c:	2000b201 	.word	0x2000b201
    9f40:	2000b202 	.word	0x2000b202
    9f44:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f4c:	781b      	ldrb	r3, [r3, #0]
    9f4e:	461a      	mov	r2, r3
    9f50:	f24b 2300 	movw	r3, #45568	; 0xb200
    9f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f58:	78d9      	ldrb	r1, [r3, #3]
    9f5a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f62:	5499      	strb	r1, [r3, r2]
    9f64:	4bd3      	ldr	r3, [pc, #844]	; (a2b4 <send_desired+0x8c8>)
    9f66:	781a      	ldrb	r2, [r3, #0]
    9f68:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f70:	781b      	ldrb	r3, [r3, #0]
    9f72:	4413      	add	r3, r2
    9f74:	b2da      	uxtb	r2, r3
    9f76:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f7e:	701a      	strb	r2, [r3, #0]
    9f80:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f88:	781a      	ldrb	r2, [r3, #0]
    9f8a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f92:	781b      	ldrb	r3, [r3, #0]
    9f94:	4413      	add	r3, r2
    9f96:	b2da      	uxtb	r2, r3
    9f98:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fa0:	701a      	strb	r2, [r3, #0]
    9fa2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9faa:	781b      	ldrb	r3, [r3, #0]
    9fac:	3301      	adds	r3, #1
    9fae:	b2da      	uxtb	r2, r3
    9fb0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fb8:	701a      	strb	r2, [r3, #0]
    9fba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fc2:	781b      	ldrb	r3, [r3, #0]
    9fc4:	2bff      	cmp	r3, #255	; 0xff
    9fc6:	d105      	bne.n	9fd4 <send_desired+0x5e8>
    9fc8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fd0:	2200      	movs	r2, #0
    9fd2:	701a      	strb	r2, [r3, #0]
    9fd4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fdc:	781b      	ldrb	r3, [r3, #0]
    9fde:	461a      	mov	r2, r3
    9fe0:	f24b 2348 	movw	r3, #45640	; 0xb248
    9fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fe8:	7819      	ldrb	r1, [r3, #0]
    9fea:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ff2:	5499      	strb	r1, [r3, r2]
    9ff4:	f24b 2348 	movw	r3, #45640	; 0xb248
    9ff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ffc:	781a      	ldrb	r2, [r3, #0]
    9ffe:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a002:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a006:	781b      	ldrb	r3, [r3, #0]
    a008:	4413      	add	r3, r2
    a00a:	b2da      	uxtb	r2, r3
    a00c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a010:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a014:	701a      	strb	r2, [r3, #0]
    a016:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a01a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a01e:	781a      	ldrb	r2, [r3, #0]
    a020:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a024:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a028:	781b      	ldrb	r3, [r3, #0]
    a02a:	4413      	add	r3, r2
    a02c:	b2da      	uxtb	r2, r3
    a02e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a032:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a036:	701a      	strb	r2, [r3, #0]
    a038:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a03c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a040:	781b      	ldrb	r3, [r3, #0]
    a042:	3301      	adds	r3, #1
    a044:	b2da      	uxtb	r2, r3
    a046:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a04a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a04e:	701a      	strb	r2, [r3, #0]
    a050:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a058:	781b      	ldrb	r3, [r3, #0]
    a05a:	2bff      	cmp	r3, #255	; 0xff
    a05c:	d105      	bne.n	a06a <send_desired+0x67e>
    a05e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a062:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a066:	2200      	movs	r2, #0
    a068:	701a      	strb	r2, [r3, #0]
    a06a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a06e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a072:	781b      	ldrb	r3, [r3, #0]
    a074:	461a      	mov	r2, r3
    a076:	f24b 2348 	movw	r3, #45640	; 0xb248
    a07a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a07e:	7859      	ldrb	r1, [r3, #1]
    a080:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a084:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a088:	5499      	strb	r1, [r3, r2]
    a08a:	4b8b      	ldr	r3, [pc, #556]	; (a2b8 <send_desired+0x8cc>)
    a08c:	781a      	ldrb	r2, [r3, #0]
    a08e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a096:	781b      	ldrb	r3, [r3, #0]
    a098:	4413      	add	r3, r2
    a09a:	b2da      	uxtb	r2, r3
    a09c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a0a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0a4:	701a      	strb	r2, [r3, #0]
    a0a6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a0aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0ae:	781a      	ldrb	r2, [r3, #0]
    a0b0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a0b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0b8:	781b      	ldrb	r3, [r3, #0]
    a0ba:	4413      	add	r3, r2
    a0bc:	b2da      	uxtb	r2, r3
    a0be:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a0c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0c6:	701a      	strb	r2, [r3, #0]
    a0c8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a0cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0d0:	781b      	ldrb	r3, [r3, #0]
    a0d2:	3301      	adds	r3, #1
    a0d4:	b2da      	uxtb	r2, r3
    a0d6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a0da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0de:	701a      	strb	r2, [r3, #0]
    a0e0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a0e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0e8:	781b      	ldrb	r3, [r3, #0]
    a0ea:	2bff      	cmp	r3, #255	; 0xff
    a0ec:	d105      	bne.n	a0fa <send_desired+0x70e>
    a0ee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a0f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0f6:	2200      	movs	r2, #0
    a0f8:	701a      	strb	r2, [r3, #0]
    a0fa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a0fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a102:	781b      	ldrb	r3, [r3, #0]
    a104:	461a      	mov	r2, r3
    a106:	f24b 2348 	movw	r3, #45640	; 0xb248
    a10a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a10e:	7899      	ldrb	r1, [r3, #2]
    a110:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a114:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a118:	5499      	strb	r1, [r3, r2]
    a11a:	4b68      	ldr	r3, [pc, #416]	; (a2bc <send_desired+0x8d0>)
    a11c:	781a      	ldrb	r2, [r3, #0]
    a11e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a126:	781b      	ldrb	r3, [r3, #0]
    a128:	4413      	add	r3, r2
    a12a:	b2da      	uxtb	r2, r3
    a12c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a130:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a134:	701a      	strb	r2, [r3, #0]
    a136:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a13a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a13e:	781a      	ldrb	r2, [r3, #0]
    a140:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a144:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a148:	781b      	ldrb	r3, [r3, #0]
    a14a:	4413      	add	r3, r2
    a14c:	b2da      	uxtb	r2, r3
    a14e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a152:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a156:	701a      	strb	r2, [r3, #0]
    a158:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a15c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a160:	781b      	ldrb	r3, [r3, #0]
    a162:	3301      	adds	r3, #1
    a164:	b2da      	uxtb	r2, r3
    a166:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a16a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a16e:	701a      	strb	r2, [r3, #0]
    a170:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a174:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a178:	781b      	ldrb	r3, [r3, #0]
    a17a:	2bff      	cmp	r3, #255	; 0xff
    a17c:	d105      	bne.n	a18a <send_desired+0x79e>
    a17e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a186:	2200      	movs	r2, #0
    a188:	701a      	strb	r2, [r3, #0]
    a18a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a18e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a192:	781b      	ldrb	r3, [r3, #0]
    a194:	461a      	mov	r2, r3
    a196:	f24b 2348 	movw	r3, #45640	; 0xb248
    a19a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a19e:	78d9      	ldrb	r1, [r3, #3]
    a1a0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a1a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1a8:	5499      	strb	r1, [r3, r2]
    a1aa:	4b45      	ldr	r3, [pc, #276]	; (a2c0 <send_desired+0x8d4>)
    a1ac:	781a      	ldrb	r2, [r3, #0]
    a1ae:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a1b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1b6:	781b      	ldrb	r3, [r3, #0]
    a1b8:	4413      	add	r3, r2
    a1ba:	b2da      	uxtb	r2, r3
    a1bc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a1c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1c4:	701a      	strb	r2, [r3, #0]
    a1c6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a1ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1ce:	781a      	ldrb	r2, [r3, #0]
    a1d0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a1d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1d8:	781b      	ldrb	r3, [r3, #0]
    a1da:	4413      	add	r3, r2
    a1dc:	b2da      	uxtb	r2, r3
    a1de:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a1e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1e6:	701a      	strb	r2, [r3, #0]
    a1e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a1ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1f0:	781b      	ldrb	r3, [r3, #0]
    a1f2:	3301      	adds	r3, #1
    a1f4:	b2da      	uxtb	r2, r3
    a1f6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a1fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1fe:	701a      	strb	r2, [r3, #0]
    a200:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a208:	781b      	ldrb	r3, [r3, #0]
    a20a:	2bff      	cmp	r3, #255	; 0xff
    a20c:	d105      	bne.n	a21a <send_desired+0x82e>
    a20e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a216:	2200      	movs	r2, #0
    a218:	701a      	strb	r2, [r3, #0]
    a21a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a21e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a222:	781b      	ldrb	r3, [r3, #0]
    a224:	461a      	mov	r2, r3
    a226:	f24b 234c 	movw	r3, #45644	; 0xb24c
    a22a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a22e:	7819      	ldrb	r1, [r3, #0]
    a230:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a238:	5499      	strb	r1, [r3, r2]
    a23a:	f24b 234c 	movw	r3, #45644	; 0xb24c
    a23e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a242:	781a      	ldrb	r2, [r3, #0]
    a244:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a24c:	781b      	ldrb	r3, [r3, #0]
    a24e:	4413      	add	r3, r2
    a250:	b2da      	uxtb	r2, r3
    a252:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a25a:	701a      	strb	r2, [r3, #0]
    a25c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a264:	781a      	ldrb	r2, [r3, #0]
    a266:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a26a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a26e:	781b      	ldrb	r3, [r3, #0]
    a270:	4413      	add	r3, r2
    a272:	b2da      	uxtb	r2, r3
    a274:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a27c:	701a      	strb	r2, [r3, #0]
    a27e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a286:	781b      	ldrb	r3, [r3, #0]
    a288:	3301      	adds	r3, #1
    a28a:	b2da      	uxtb	r2, r3
    a28c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a290:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a294:	701a      	strb	r2, [r3, #0]
    a296:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a29a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a29e:	781b      	ldrb	r3, [r3, #0]
    a2a0:	2bff      	cmp	r3, #255	; 0xff
    a2a2:	d10f      	bne.n	a2c4 <send_desired+0x8d8>
    a2a4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a2a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2ac:	2200      	movs	r2, #0
    a2ae:	701a      	strb	r2, [r3, #0]
    a2b0:	e008      	b.n	a2c4 <send_desired+0x8d8>
    a2b2:	bf00      	nop
    a2b4:	2000b203 	.word	0x2000b203
    a2b8:	2000b249 	.word	0x2000b249
    a2bc:	2000b24a 	.word	0x2000b24a
    a2c0:	2000b24b 	.word	0x2000b24b
    a2c4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a2c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2cc:	781b      	ldrb	r3, [r3, #0]
    a2ce:	461a      	mov	r2, r3
    a2d0:	f24b 234c 	movw	r3, #45644	; 0xb24c
    a2d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2d8:	7859      	ldrb	r1, [r3, #1]
    a2da:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a2de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2e2:	5499      	strb	r1, [r3, r2]
    a2e4:	4bd1      	ldr	r3, [pc, #836]	; (a62c <send_desired+0xc40>)
    a2e6:	781a      	ldrb	r2, [r3, #0]
    a2e8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a2ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2f0:	781b      	ldrb	r3, [r3, #0]
    a2f2:	4413      	add	r3, r2
    a2f4:	b2da      	uxtb	r2, r3
    a2f6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a2fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2fe:	701a      	strb	r2, [r3, #0]
    a300:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a308:	781a      	ldrb	r2, [r3, #0]
    a30a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a30e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a312:	781b      	ldrb	r3, [r3, #0]
    a314:	4413      	add	r3, r2
    a316:	b2da      	uxtb	r2, r3
    a318:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a31c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a320:	701a      	strb	r2, [r3, #0]
    a322:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a326:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a32a:	781b      	ldrb	r3, [r3, #0]
    a32c:	3301      	adds	r3, #1
    a32e:	b2da      	uxtb	r2, r3
    a330:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a338:	701a      	strb	r2, [r3, #0]
    a33a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a33e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a342:	781b      	ldrb	r3, [r3, #0]
    a344:	2bff      	cmp	r3, #255	; 0xff
    a346:	d105      	bne.n	a354 <send_desired+0x968>
    a348:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a34c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a350:	2200      	movs	r2, #0
    a352:	701a      	strb	r2, [r3, #0]
    a354:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a35c:	781b      	ldrb	r3, [r3, #0]
    a35e:	461a      	mov	r2, r3
    a360:	f24b 234c 	movw	r3, #45644	; 0xb24c
    a364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a368:	7899      	ldrb	r1, [r3, #2]
    a36a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a36e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a372:	5499      	strb	r1, [r3, r2]
    a374:	4bae      	ldr	r3, [pc, #696]	; (a630 <send_desired+0xc44>)
    a376:	781a      	ldrb	r2, [r3, #0]
    a378:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a37c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a380:	781b      	ldrb	r3, [r3, #0]
    a382:	4413      	add	r3, r2
    a384:	b2da      	uxtb	r2, r3
    a386:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a38a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a38e:	701a      	strb	r2, [r3, #0]
    a390:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a398:	781a      	ldrb	r2, [r3, #0]
    a39a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a39e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3a2:	781b      	ldrb	r3, [r3, #0]
    a3a4:	4413      	add	r3, r2
    a3a6:	b2da      	uxtb	r2, r3
    a3a8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a3ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3b0:	701a      	strb	r2, [r3, #0]
    a3b2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a3b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3ba:	781b      	ldrb	r3, [r3, #0]
    a3bc:	3301      	adds	r3, #1
    a3be:	b2da      	uxtb	r2, r3
    a3c0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a3c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3c8:	701a      	strb	r2, [r3, #0]
    a3ca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a3ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3d2:	781b      	ldrb	r3, [r3, #0]
    a3d4:	2bff      	cmp	r3, #255	; 0xff
    a3d6:	d105      	bne.n	a3e4 <send_desired+0x9f8>
    a3d8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a3dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3e0:	2200      	movs	r2, #0
    a3e2:	701a      	strb	r2, [r3, #0]
    a3e4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a3e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3ec:	781b      	ldrb	r3, [r3, #0]
    a3ee:	461a      	mov	r2, r3
    a3f0:	f24b 234c 	movw	r3, #45644	; 0xb24c
    a3f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3f8:	78d9      	ldrb	r1, [r3, #3]
    a3fa:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a3fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a402:	5499      	strb	r1, [r3, r2]
    a404:	4b8b      	ldr	r3, [pc, #556]	; (a634 <send_desired+0xc48>)
    a406:	781a      	ldrb	r2, [r3, #0]
    a408:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a40c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a410:	781b      	ldrb	r3, [r3, #0]
    a412:	4413      	add	r3, r2
    a414:	b2da      	uxtb	r2, r3
    a416:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a41a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a41e:	701a      	strb	r2, [r3, #0]
    a420:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a428:	781a      	ldrb	r2, [r3, #0]
    a42a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a42e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a432:	781b      	ldrb	r3, [r3, #0]
    a434:	4413      	add	r3, r2
    a436:	b2da      	uxtb	r2, r3
    a438:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a43c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a440:	701a      	strb	r2, [r3, #0]
    a442:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a446:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a44a:	781b      	ldrb	r3, [r3, #0]
    a44c:	3301      	adds	r3, #1
    a44e:	b2da      	uxtb	r2, r3
    a450:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a458:	701a      	strb	r2, [r3, #0]
    a45a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a45e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a462:	781b      	ldrb	r3, [r3, #0]
    a464:	2bff      	cmp	r3, #255	; 0xff
    a466:	d105      	bne.n	a474 <send_desired+0xa88>
    a468:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a46c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a470:	2200      	movs	r2, #0
    a472:	701a      	strb	r2, [r3, #0]
    a474:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a47c:	781b      	ldrb	r3, [r3, #0]
    a47e:	461a      	mov	r2, r3
    a480:	f240 4324 	movw	r3, #1060	; 0x424
    a484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a488:	7819      	ldrb	r1, [r3, #0]
    a48a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a48e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a492:	5499      	strb	r1, [r3, r2]
    a494:	f240 4324 	movw	r3, #1060	; 0x424
    a498:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a49c:	781a      	ldrb	r2, [r3, #0]
    a49e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a4a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4a6:	781b      	ldrb	r3, [r3, #0]
    a4a8:	4413      	add	r3, r2
    a4aa:	b2da      	uxtb	r2, r3
    a4ac:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a4b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4b4:	701a      	strb	r2, [r3, #0]
    a4b6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a4ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4be:	781a      	ldrb	r2, [r3, #0]
    a4c0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a4c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4c8:	781b      	ldrb	r3, [r3, #0]
    a4ca:	4413      	add	r3, r2
    a4cc:	b2da      	uxtb	r2, r3
    a4ce:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a4d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4d6:	701a      	strb	r2, [r3, #0]
    a4d8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a4dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4e0:	781b      	ldrb	r3, [r3, #0]
    a4e2:	3301      	adds	r3, #1
    a4e4:	b2da      	uxtb	r2, r3
    a4e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a4ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4ee:	701a      	strb	r2, [r3, #0]
    a4f0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4f8:	781b      	ldrb	r3, [r3, #0]
    a4fa:	2bff      	cmp	r3, #255	; 0xff
    a4fc:	d105      	bne.n	a50a <send_desired+0xb1e>
    a4fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a506:	2200      	movs	r2, #0
    a508:	701a      	strb	r2, [r3, #0]
    a50a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a50e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a512:	781b      	ldrb	r3, [r3, #0]
    a514:	461a      	mov	r2, r3
    a516:	f240 4324 	movw	r3, #1060	; 0x424
    a51a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a51e:	7859      	ldrb	r1, [r3, #1]
    a520:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a528:	5499      	strb	r1, [r3, r2]
    a52a:	4b43      	ldr	r3, [pc, #268]	; (a638 <send_desired+0xc4c>)
    a52c:	781a      	ldrb	r2, [r3, #0]
    a52e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a536:	781b      	ldrb	r3, [r3, #0]
    a538:	4413      	add	r3, r2
    a53a:	b2da      	uxtb	r2, r3
    a53c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a544:	701a      	strb	r2, [r3, #0]
    a546:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a54a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a54e:	781a      	ldrb	r2, [r3, #0]
    a550:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a558:	781b      	ldrb	r3, [r3, #0]
    a55a:	4413      	add	r3, r2
    a55c:	b2da      	uxtb	r2, r3
    a55e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a566:	701a      	strb	r2, [r3, #0]
    a568:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a56c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a570:	781b      	ldrb	r3, [r3, #0]
    a572:	3301      	adds	r3, #1
    a574:	b2da      	uxtb	r2, r3
    a576:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a57a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a57e:	701a      	strb	r2, [r3, #0]
    a580:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a588:	781b      	ldrb	r3, [r3, #0]
    a58a:	2bff      	cmp	r3, #255	; 0xff
    a58c:	d105      	bne.n	a59a <send_desired+0xbae>
    a58e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a596:	2200      	movs	r2, #0
    a598:	701a      	strb	r2, [r3, #0]
    a59a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a59e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5a2:	781b      	ldrb	r3, [r3, #0]
    a5a4:	461a      	mov	r2, r3
    a5a6:	f240 4324 	movw	r3, #1060	; 0x424
    a5aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5ae:	7899      	ldrb	r1, [r3, #2]
    a5b0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a5b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5b8:	5499      	strb	r1, [r3, r2]
    a5ba:	4b20      	ldr	r3, [pc, #128]	; (a63c <send_desired+0xc50>)
    a5bc:	781a      	ldrb	r2, [r3, #0]
    a5be:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a5c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5c6:	781b      	ldrb	r3, [r3, #0]
    a5c8:	4413      	add	r3, r2
    a5ca:	b2da      	uxtb	r2, r3
    a5cc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a5d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5d4:	701a      	strb	r2, [r3, #0]
    a5d6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a5da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5de:	781a      	ldrb	r2, [r3, #0]
    a5e0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a5e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5e8:	781b      	ldrb	r3, [r3, #0]
    a5ea:	4413      	add	r3, r2
    a5ec:	b2da      	uxtb	r2, r3
    a5ee:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a5f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5f6:	701a      	strb	r2, [r3, #0]
    a5f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a5fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a600:	781b      	ldrb	r3, [r3, #0]
    a602:	3301      	adds	r3, #1
    a604:	b2da      	uxtb	r2, r3
    a606:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a60a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a60e:	701a      	strb	r2, [r3, #0]
    a610:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a618:	781b      	ldrb	r3, [r3, #0]
    a61a:	2bff      	cmp	r3, #255	; 0xff
    a61c:	d110      	bne.n	a640 <send_desired+0xc54>
    a61e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a622:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a626:	2200      	movs	r2, #0
    a628:	701a      	strb	r2, [r3, #0]
    a62a:	e009      	b.n	a640 <send_desired+0xc54>
    a62c:	2000b24d 	.word	0x2000b24d
    a630:	2000b24e 	.word	0x2000b24e
    a634:	2000b24f 	.word	0x2000b24f
    a638:	20000425 	.word	0x20000425
    a63c:	20000426 	.word	0x20000426
    a640:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a648:	781b      	ldrb	r3, [r3, #0]
    a64a:	461a      	mov	r2, r3
    a64c:	f240 4324 	movw	r3, #1060	; 0x424
    a650:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a654:	78d9      	ldrb	r1, [r3, #3]
    a656:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a65a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a65e:	5499      	strb	r1, [r3, r2]
    a660:	4b79      	ldr	r3, [pc, #484]	; (a848 <send_desired+0xe5c>)
    a662:	781a      	ldrb	r2, [r3, #0]
    a664:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a668:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a66c:	781b      	ldrb	r3, [r3, #0]
    a66e:	4413      	add	r3, r2
    a670:	b2da      	uxtb	r2, r3
    a672:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a676:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a67a:	701a      	strb	r2, [r3, #0]
    a67c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a684:	781a      	ldrb	r2, [r3, #0]
    a686:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a68a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a68e:	781b      	ldrb	r3, [r3, #0]
    a690:	4413      	add	r3, r2
    a692:	b2da      	uxtb	r2, r3
    a694:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a69c:	701a      	strb	r2, [r3, #0]
    a69e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a6a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6a6:	781b      	ldrb	r3, [r3, #0]
    a6a8:	3301      	adds	r3, #1
    a6aa:	b2da      	uxtb	r2, r3
    a6ac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a6b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6b4:	701a      	strb	r2, [r3, #0]
    a6b6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a6ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6be:	781b      	ldrb	r3, [r3, #0]
    a6c0:	2bff      	cmp	r3, #255	; 0xff
    a6c2:	d105      	bne.n	a6d0 <send_desired+0xce4>
    a6c4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a6c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6cc:	2200      	movs	r2, #0
    a6ce:	701a      	strb	r2, [r3, #0]
    a6d0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a6d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6d8:	781b      	ldrb	r3, [r3, #0]
    a6da:	461a      	mov	r2, r3
    a6dc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a6e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6e4:	7819      	ldrb	r1, [r3, #0]
    a6e6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a6ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6ee:	5499      	strb	r1, [r3, r2]
    a6f0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a6f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6f8:	781b      	ldrb	r3, [r3, #0]
    a6fa:	3301      	adds	r3, #1
    a6fc:	b2da      	uxtb	r2, r3
    a6fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a706:	701a      	strb	r2, [r3, #0]
    a708:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a710:	781b      	ldrb	r3, [r3, #0]
    a712:	2bff      	cmp	r3, #255	; 0xff
    a714:	d105      	bne.n	a722 <send_desired+0xd36>
    a716:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a71a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a71e:	2200      	movs	r2, #0
    a720:	701a      	strb	r2, [r3, #0]
    a722:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a726:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a72a:	781b      	ldrb	r3, [r3, #0]
    a72c:	461a      	mov	r2, r3
    a72e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a736:	7819      	ldrb	r1, [r3, #0]
    a738:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a73c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a740:	5499      	strb	r1, [r3, r2]
    a742:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a746:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a74a:	781b      	ldrb	r3, [r3, #0]
    a74c:	3301      	adds	r3, #1
    a74e:	b2da      	uxtb	r2, r3
    a750:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a758:	701a      	strb	r2, [r3, #0]
    a75a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a75e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a762:	781b      	ldrb	r3, [r3, #0]
    a764:	2bff      	cmp	r3, #255	; 0xff
    a766:	d105      	bne.n	a774 <send_desired+0xd88>
    a768:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a76c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a770:	2200      	movs	r2, #0
    a772:	701a      	strb	r2, [r3, #0]
    a774:	f242 0339 	movw	r3, #8249	; 0x2039
    a778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a77c:	781b      	ldrb	r3, [r3, #0]
    a77e:	b2db      	uxtb	r3, r3
    a780:	f003 0310 	and.w	r3, r3, #16
    a784:	2b00      	cmp	r3, #0
    a786:	d15a      	bne.n	a83e <send_desired+0xe52>
    a788:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a78c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a790:	781b      	ldrb	r3, [r3, #0]
    a792:	b2db      	uxtb	r3, r3
    a794:	461a      	mov	r2, r3
    a796:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a79a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a79e:	5c9a      	ldrb	r2, [r3, r2]
    a7a0:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    a7a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7a8:	701a      	strb	r2, [r3, #0]
    a7aa:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    a7ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7b2:	2200      	movs	r2, #0
    a7b4:	701a      	strb	r2, [r3, #0]
    a7b6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a7ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7be:	781b      	ldrb	r3, [r3, #0]
    a7c0:	b2db      	uxtb	r3, r3
    a7c2:	3301      	adds	r3, #1
    a7c4:	b2da      	uxtb	r2, r3
    a7c6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a7ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7ce:	701a      	strb	r2, [r3, #0]
    a7d0:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a7d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7d8:	781b      	ldrb	r3, [r3, #0]
    a7da:	b2db      	uxtb	r3, r3
    a7dc:	2bff      	cmp	r3, #255	; 0xff
    a7de:	d105      	bne.n	a7ec <send_desired+0xe00>
    a7e0:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a7e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7e8:	2200      	movs	r2, #0
    a7ea:	701a      	strb	r2, [r3, #0]
    a7ec:	f242 0338 	movw	r3, #8248	; 0x2038
    a7f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7f4:	f242 0238 	movw	r2, #8248	; 0x2038
    a7f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a7fc:	7812      	ldrb	r2, [r2, #0]
    a7fe:	b2d2      	uxtb	r2, r2
    a800:	f042 0201 	orr.w	r2, r2, #1
    a804:	b2d2      	uxtb	r2, r2
    a806:	701a      	strb	r2, [r3, #0]
    a808:	f242 0339 	movw	r3, #8249	; 0x2039
    a80c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a810:	f242 0239 	movw	r2, #8249	; 0x2039
    a814:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a818:	7812      	ldrb	r2, [r2, #0]
    a81a:	b2d2      	uxtb	r2, r2
    a81c:	f042 0210 	orr.w	r2, r2, #16
    a820:	b2d2      	uxtb	r2, r2
    a822:	701a      	strb	r2, [r3, #0]
    a824:	e00b      	b.n	a83e <send_desired+0xe52>
    a826:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    a82a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a82e:	781b      	ldrb	r3, [r3, #0]
    a830:	3301      	adds	r3, #1
    a832:	b2da      	uxtb	r2, r3
    a834:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    a838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a83c:	701a      	strb	r2, [r3, #0]
}
    a83e:	46bd      	mov	sp, r7
    a840:	f85d 7b04 	ldr.w	r7, [sp], #4
    a844:	4770      	bx	lr
    a846:	bf00      	nop
    a848:	20000427 	.word	0x20000427

0000a84c <send_bat>:
void send_bat(void){  //2000ms
    a84c:	b480      	push	{r7}
    a84e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    a850:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    a854:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a858:	781a      	ldrb	r2, [r3, #0]
    a85a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    a85e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    a862:	fba3 1302 	umull	r1, r3, r3, r2
    a866:	0919      	lsrs	r1, r3, #4
    a868:	460b      	mov	r3, r1
    a86a:	009b      	lsls	r3, r3, #2
    a86c:	440b      	add	r3, r1
    a86e:	009b      	lsls	r3, r3, #2
    a870:	1ad3      	subs	r3, r2, r3
    a872:	b2db      	uxtb	r3, r3
    a874:	2b08      	cmp	r3, #8
    a876:	f040 839a 	bne.w	afae <send_bat+0x762>
    a87a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a87e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a882:	781a      	ldrb	r2, [r3, #0]
    a884:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a88c:	781b      	ldrb	r3, [r3, #0]
    a88e:	b2db      	uxtb	r3, r3
    a890:	429a      	cmp	r2, r3
    a892:	d313      	bcc.n	a8bc <send_bat+0x70>
    a894:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a898:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a89c:	781b      	ldrb	r3, [r3, #0]
    a89e:	b2db      	uxtb	r3, r3
    a8a0:	461a      	mov	r2, r3
    a8a2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a8a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8aa:	781b      	ldrb	r3, [r3, #0]
    a8ac:	1ad3      	subs	r3, r2, r3
    a8ae:	33ff      	adds	r3, #255	; 0xff
    a8b0:	2b0c      	cmp	r3, #12
    a8b2:	bfd4      	ite	le
    a8b4:	2300      	movle	r3, #0
    a8b6:	2301      	movgt	r3, #1
    a8b8:	b2db      	uxtb	r3, r3
    a8ba:	e011      	b.n	a8e0 <send_bat+0x94>
    a8bc:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a8c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8c4:	781b      	ldrb	r3, [r3, #0]
    a8c6:	b2db      	uxtb	r3, r3
    a8c8:	461a      	mov	r2, r3
    a8ca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a8ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8d2:	781b      	ldrb	r3, [r3, #0]
    a8d4:	1ad3      	subs	r3, r2, r3
    a8d6:	2b0c      	cmp	r3, #12
    a8d8:	bfd4      	ite	le
    a8da:	2300      	movle	r3, #0
    a8dc:	2301      	movgt	r3, #1
    a8de:	b2db      	uxtb	r3, r3
    a8e0:	2b00      	cmp	r3, #0
    a8e2:	f000 8358 	beq.w	af96 <send_bat+0x74a>
    a8e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a8ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8ee:	781b      	ldrb	r3, [r3, #0]
    a8f0:	461a      	mov	r2, r3
    a8f2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a8f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8fa:	2105      	movs	r1, #5
    a8fc:	5499      	strb	r1, [r3, r2]
    a8fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a902:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a906:	781b      	ldrb	r3, [r3, #0]
    a908:	3301      	adds	r3, #1
    a90a:	b2da      	uxtb	r2, r3
    a90c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a914:	701a      	strb	r2, [r3, #0]
    a916:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a91a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a91e:	781b      	ldrb	r3, [r3, #0]
    a920:	2bff      	cmp	r3, #255	; 0xff
    a922:	d105      	bne.n	a930 <send_bat+0xe4>
    a924:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a92c:	2200      	movs	r2, #0
    a92e:	701a      	strb	r2, [r3, #0]
    a930:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a938:	781b      	ldrb	r3, [r3, #0]
    a93a:	461a      	mov	r2, r3
    a93c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a940:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a944:	210c      	movs	r1, #12
    a946:	5499      	strb	r1, [r3, r2]
    a948:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a94c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a950:	781b      	ldrb	r3, [r3, #0]
    a952:	3301      	adds	r3, #1
    a954:	b2da      	uxtb	r2, r3
    a956:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a95a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a95e:	701a      	strb	r2, [r3, #0]
    a960:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a964:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a968:	781b      	ldrb	r3, [r3, #0]
    a96a:	2bff      	cmp	r3, #255	; 0xff
    a96c:	d105      	bne.n	a97a <send_bat+0x12e>
    a96e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a976:	2200      	movs	r2, #0
    a978:	701a      	strb	r2, [r3, #0]
    a97a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a97e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a982:	220c      	movs	r2, #12
    a984:	701a      	strb	r2, [r3, #0]
    a986:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a98a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a98e:	220c      	movs	r2, #12
    a990:	701a      	strb	r2, [r3, #0]
    a992:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a99a:	781b      	ldrb	r3, [r3, #0]
    a99c:	461a      	mov	r2, r3
    a99e:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    a9a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9a6:	7819      	ldrb	r1, [r3, #0]
    a9a8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a9ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9b0:	5499      	strb	r1, [r3, r2]
    a9b2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a9b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9ba:	781a      	ldrb	r2, [r3, #0]
    a9bc:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    a9c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9c4:	781b      	ldrb	r3, [r3, #0]
    a9c6:	4413      	add	r3, r2
    a9c8:	b2da      	uxtb	r2, r3
    a9ca:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a9ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9d2:	701a      	strb	r2, [r3, #0]
    a9d4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a9d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9dc:	781a      	ldrb	r2, [r3, #0]
    a9de:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a9e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9e6:	781b      	ldrb	r3, [r3, #0]
    a9e8:	4413      	add	r3, r2
    a9ea:	b2da      	uxtb	r2, r3
    a9ec:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a9f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9f4:	701a      	strb	r2, [r3, #0]
    a9f6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a9fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9fe:	781b      	ldrb	r3, [r3, #0]
    aa00:	3301      	adds	r3, #1
    aa02:	b2da      	uxtb	r2, r3
    aa04:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aa08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa0c:	701a      	strb	r2, [r3, #0]
    aa0e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aa12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa16:	781b      	ldrb	r3, [r3, #0]
    aa18:	2bff      	cmp	r3, #255	; 0xff
    aa1a:	d105      	bne.n	aa28 <send_bat+0x1dc>
    aa1c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aa20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa24:	2200      	movs	r2, #0
    aa26:	701a      	strb	r2, [r3, #0]
    aa28:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aa2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa30:	781b      	ldrb	r3, [r3, #0]
    aa32:	461a      	mov	r2, r3
    aa34:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    aa38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa3c:	7819      	ldrb	r1, [r3, #0]
    aa3e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    aa42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa46:	5499      	strb	r1, [r3, r2]
    aa48:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    aa4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa50:	781a      	ldrb	r2, [r3, #0]
    aa52:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    aa56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa5a:	781b      	ldrb	r3, [r3, #0]
    aa5c:	4413      	add	r3, r2
    aa5e:	b2da      	uxtb	r2, r3
    aa60:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    aa64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa68:	701a      	strb	r2, [r3, #0]
    aa6a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    aa6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa72:	781a      	ldrb	r2, [r3, #0]
    aa74:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    aa78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa7c:	781b      	ldrb	r3, [r3, #0]
    aa7e:	4413      	add	r3, r2
    aa80:	b2da      	uxtb	r2, r3
    aa82:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    aa86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa8a:	701a      	strb	r2, [r3, #0]
    aa8c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aa90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa94:	781b      	ldrb	r3, [r3, #0]
    aa96:	3301      	adds	r3, #1
    aa98:	b2da      	uxtb	r2, r3
    aa9a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aa9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaa2:	701a      	strb	r2, [r3, #0]
    aaa4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aaa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaac:	781b      	ldrb	r3, [r3, #0]
    aaae:	2bff      	cmp	r3, #255	; 0xff
    aab0:	d105      	bne.n	aabe <send_bat+0x272>
    aab2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaba:	2200      	movs	r2, #0
    aabc:	701a      	strb	r2, [r3, #0]
    aabe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aac6:	781b      	ldrb	r3, [r3, #0]
    aac8:	461a      	mov	r2, r3
    aaca:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    aace:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aad2:	7859      	ldrb	r1, [r3, #1]
    aad4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    aad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aadc:	5499      	strb	r1, [r3, r2]
    aade:	4bd5      	ldr	r3, [pc, #852]	; (ae34 <send_bat+0x5e8>)
    aae0:	781a      	ldrb	r2, [r3, #0]
    aae2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    aae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaea:	781b      	ldrb	r3, [r3, #0]
    aaec:	4413      	add	r3, r2
    aaee:	b2da      	uxtb	r2, r3
    aaf0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    aaf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaf8:	701a      	strb	r2, [r3, #0]
    aafa:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    aafe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab02:	781a      	ldrb	r2, [r3, #0]
    ab04:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ab08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab0c:	781b      	ldrb	r3, [r3, #0]
    ab0e:	4413      	add	r3, r2
    ab10:	b2da      	uxtb	r2, r3
    ab12:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ab16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab1a:	701a      	strb	r2, [r3, #0]
    ab1c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ab20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab24:	781b      	ldrb	r3, [r3, #0]
    ab26:	3301      	adds	r3, #1
    ab28:	b2da      	uxtb	r2, r3
    ab2a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ab2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab32:	701a      	strb	r2, [r3, #0]
    ab34:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ab38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab3c:	781b      	ldrb	r3, [r3, #0]
    ab3e:	2bff      	cmp	r3, #255	; 0xff
    ab40:	d105      	bne.n	ab4e <send_bat+0x302>
    ab42:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ab46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab4a:	2200      	movs	r2, #0
    ab4c:	701a      	strb	r2, [r3, #0]
    ab4e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ab52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab56:	781b      	ldrb	r3, [r3, #0]
    ab58:	461a      	mov	r2, r3
    ab5a:	f64a 63bd 	movw	r3, #44733	; 0xaebd
    ab5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab62:	7819      	ldrb	r1, [r3, #0]
    ab64:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ab68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab6c:	5499      	strb	r1, [r3, r2]
    ab6e:	f64a 63bd 	movw	r3, #44733	; 0xaebd
    ab72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab76:	781a      	ldrb	r2, [r3, #0]
    ab78:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ab7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab80:	781b      	ldrb	r3, [r3, #0]
    ab82:	4413      	add	r3, r2
    ab84:	b2da      	uxtb	r2, r3
    ab86:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ab8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab8e:	701a      	strb	r2, [r3, #0]
    ab90:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ab94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab98:	781a      	ldrb	r2, [r3, #0]
    ab9a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ab9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aba2:	781b      	ldrb	r3, [r3, #0]
    aba4:	4413      	add	r3, r2
    aba6:	b2da      	uxtb	r2, r3
    aba8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    abac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abb0:	701a      	strb	r2, [r3, #0]
    abb2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    abb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abba:	781b      	ldrb	r3, [r3, #0]
    abbc:	3301      	adds	r3, #1
    abbe:	b2da      	uxtb	r2, r3
    abc0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    abc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abc8:	701a      	strb	r2, [r3, #0]
    abca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    abce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abd2:	781b      	ldrb	r3, [r3, #0]
    abd4:	2bff      	cmp	r3, #255	; 0xff
    abd6:	d105      	bne.n	abe4 <send_bat+0x398>
    abd8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    abdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abe0:	2200      	movs	r2, #0
    abe2:	701a      	strb	r2, [r3, #0]
    abe4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    abe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abec:	781b      	ldrb	r3, [r3, #0]
    abee:	461a      	mov	r2, r3
    abf0:	f24b 233e 	movw	r3, #45630	; 0xb23e
    abf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abf8:	7819      	ldrb	r1, [r3, #0]
    abfa:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    abfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac02:	5499      	strb	r1, [r3, r2]
    ac04:	f24b 233e 	movw	r3, #45630	; 0xb23e
    ac08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac0c:	781a      	ldrb	r2, [r3, #0]
    ac0e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ac12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac16:	781b      	ldrb	r3, [r3, #0]
    ac18:	4413      	add	r3, r2
    ac1a:	b2da      	uxtb	r2, r3
    ac1c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ac20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac24:	701a      	strb	r2, [r3, #0]
    ac26:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ac2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac2e:	781a      	ldrb	r2, [r3, #0]
    ac30:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ac34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac38:	781b      	ldrb	r3, [r3, #0]
    ac3a:	4413      	add	r3, r2
    ac3c:	b2da      	uxtb	r2, r3
    ac3e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ac42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac46:	701a      	strb	r2, [r3, #0]
    ac48:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ac4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac50:	781b      	ldrb	r3, [r3, #0]
    ac52:	3301      	adds	r3, #1
    ac54:	b2da      	uxtb	r2, r3
    ac56:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ac5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac5e:	701a      	strb	r2, [r3, #0]
    ac60:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ac64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac68:	781b      	ldrb	r3, [r3, #0]
    ac6a:	2bff      	cmp	r3, #255	; 0xff
    ac6c:	d105      	bne.n	ac7a <send_bat+0x42e>
    ac6e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ac72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac76:	2200      	movs	r2, #0
    ac78:	701a      	strb	r2, [r3, #0]
    ac7a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ac7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac82:	781b      	ldrb	r3, [r3, #0]
    ac84:	461a      	mov	r2, r3
    ac86:	f24b 233e 	movw	r3, #45630	; 0xb23e
    ac8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac8e:	7859      	ldrb	r1, [r3, #1]
    ac90:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ac94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac98:	5499      	strb	r1, [r3, r2]
    ac9a:	4b67      	ldr	r3, [pc, #412]	; (ae38 <send_bat+0x5ec>)
    ac9c:	781a      	ldrb	r2, [r3, #0]
    ac9e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    aca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aca6:	781b      	ldrb	r3, [r3, #0]
    aca8:	4413      	add	r3, r2
    acaa:	b2da      	uxtb	r2, r3
    acac:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    acb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acb4:	701a      	strb	r2, [r3, #0]
    acb6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    acba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acbe:	781a      	ldrb	r2, [r3, #0]
    acc0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    acc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acc8:	781b      	ldrb	r3, [r3, #0]
    acca:	4413      	add	r3, r2
    accc:	b2da      	uxtb	r2, r3
    acce:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    acd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acd6:	701a      	strb	r2, [r3, #0]
    acd8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    acdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ace0:	781b      	ldrb	r3, [r3, #0]
    ace2:	3301      	adds	r3, #1
    ace4:	b2da      	uxtb	r2, r3
    ace6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    acea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acee:	701a      	strb	r2, [r3, #0]
    acf0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    acf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acf8:	781b      	ldrb	r3, [r3, #0]
    acfa:	2bff      	cmp	r3, #255	; 0xff
    acfc:	d105      	bne.n	ad0a <send_bat+0x4be>
    acfe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ad02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad06:	2200      	movs	r2, #0
    ad08:	701a      	strb	r2, [r3, #0]
    ad0a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ad0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad12:	781b      	ldrb	r3, [r3, #0]
    ad14:	461a      	mov	r2, r3
    ad16:	f24b 233c 	movw	r3, #45628	; 0xb23c
    ad1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad1e:	7819      	ldrb	r1, [r3, #0]
    ad20:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ad24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad28:	5499      	strb	r1, [r3, r2]
    ad2a:	f24b 233c 	movw	r3, #45628	; 0xb23c
    ad2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad32:	781a      	ldrb	r2, [r3, #0]
    ad34:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ad38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad3c:	781b      	ldrb	r3, [r3, #0]
    ad3e:	4413      	add	r3, r2
    ad40:	b2da      	uxtb	r2, r3
    ad42:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ad46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad4a:	701a      	strb	r2, [r3, #0]
    ad4c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ad50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad54:	781a      	ldrb	r2, [r3, #0]
    ad56:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ad5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad5e:	781b      	ldrb	r3, [r3, #0]
    ad60:	4413      	add	r3, r2
    ad62:	b2da      	uxtb	r2, r3
    ad64:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ad68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad6c:	701a      	strb	r2, [r3, #0]
    ad6e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ad72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad76:	781b      	ldrb	r3, [r3, #0]
    ad78:	3301      	adds	r3, #1
    ad7a:	b2da      	uxtb	r2, r3
    ad7c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ad80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad84:	701a      	strb	r2, [r3, #0]
    ad86:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ad8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad8e:	781b      	ldrb	r3, [r3, #0]
    ad90:	2bff      	cmp	r3, #255	; 0xff
    ad92:	d105      	bne.n	ada0 <send_bat+0x554>
    ad94:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ad98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad9c:	2200      	movs	r2, #0
    ad9e:	701a      	strb	r2, [r3, #0]
    ada0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ada4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ada8:	781b      	ldrb	r3, [r3, #0]
    adaa:	461a      	mov	r2, r3
    adac:	f24b 233c 	movw	r3, #45628	; 0xb23c
    adb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adb4:	7859      	ldrb	r1, [r3, #1]
    adb6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    adba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adbe:	5499      	strb	r1, [r3, r2]
    adc0:	4b1e      	ldr	r3, [pc, #120]	; (ae3c <send_bat+0x5f0>)
    adc2:	781a      	ldrb	r2, [r3, #0]
    adc4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    adc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adcc:	781b      	ldrb	r3, [r3, #0]
    adce:	4413      	add	r3, r2
    add0:	b2da      	uxtb	r2, r3
    add2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    add6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adda:	701a      	strb	r2, [r3, #0]
    addc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ade0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ade4:	781a      	ldrb	r2, [r3, #0]
    ade6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    adea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adee:	781b      	ldrb	r3, [r3, #0]
    adf0:	4413      	add	r3, r2
    adf2:	b2da      	uxtb	r2, r3
    adf4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    adf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adfc:	701a      	strb	r2, [r3, #0]
    adfe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ae02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae06:	781b      	ldrb	r3, [r3, #0]
    ae08:	3301      	adds	r3, #1
    ae0a:	b2da      	uxtb	r2, r3
    ae0c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ae10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae14:	701a      	strb	r2, [r3, #0]
    ae16:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ae1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae1e:	781b      	ldrb	r3, [r3, #0]
    ae20:	2bff      	cmp	r3, #255	; 0xff
    ae22:	d10d      	bne.n	ae40 <send_bat+0x5f4>
    ae24:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ae28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae2c:	2200      	movs	r2, #0
    ae2e:	701a      	strb	r2, [r3, #0]
    ae30:	e006      	b.n	ae40 <send_bat+0x5f4>
    ae32:	bf00      	nop
    ae34:	2000b4b5 	.word	0x2000b4b5
    ae38:	2000b23f 	.word	0x2000b23f
    ae3c:	2000b23d 	.word	0x2000b23d
    ae40:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ae44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae48:	781b      	ldrb	r3, [r3, #0]
    ae4a:	461a      	mov	r2, r3
    ae4c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ae50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae54:	7819      	ldrb	r1, [r3, #0]
    ae56:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ae5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae5e:	5499      	strb	r1, [r3, r2]
    ae60:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ae64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae68:	781b      	ldrb	r3, [r3, #0]
    ae6a:	3301      	adds	r3, #1
    ae6c:	b2da      	uxtb	r2, r3
    ae6e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ae72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae76:	701a      	strb	r2, [r3, #0]
    ae78:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ae7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae80:	781b      	ldrb	r3, [r3, #0]
    ae82:	2bff      	cmp	r3, #255	; 0xff
    ae84:	d105      	bne.n	ae92 <send_bat+0x646>
    ae86:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ae8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae8e:	2200      	movs	r2, #0
    ae90:	701a      	strb	r2, [r3, #0]
    ae92:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ae96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae9a:	781b      	ldrb	r3, [r3, #0]
    ae9c:	461a      	mov	r2, r3
    ae9e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    aea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aea6:	7819      	ldrb	r1, [r3, #0]
    aea8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    aeac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aeb0:	5499      	strb	r1, [r3, r2]
    aeb2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aeb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aeba:	781b      	ldrb	r3, [r3, #0]
    aebc:	3301      	adds	r3, #1
    aebe:	b2da      	uxtb	r2, r3
    aec0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aec8:	701a      	strb	r2, [r3, #0]
    aeca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aece:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aed2:	781b      	ldrb	r3, [r3, #0]
    aed4:	2bff      	cmp	r3, #255	; 0xff
    aed6:	d105      	bne.n	aee4 <send_bat+0x698>
    aed8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aedc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aee0:	2200      	movs	r2, #0
    aee2:	701a      	strb	r2, [r3, #0]
    aee4:	f242 0339 	movw	r3, #8249	; 0x2039
    aee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aeec:	781b      	ldrb	r3, [r3, #0]
    aeee:	b2db      	uxtb	r3, r3
    aef0:	f003 0310 	and.w	r3, r3, #16
    aef4:	2b00      	cmp	r3, #0
    aef6:	d15a      	bne.n	afae <send_bat+0x762>
    aef8:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    aefc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af00:	781b      	ldrb	r3, [r3, #0]
    af02:	b2db      	uxtb	r3, r3
    af04:	461a      	mov	r2, r3
    af06:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    af0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af0e:	5c9a      	ldrb	r2, [r3, r2]
    af10:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    af14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af18:	701a      	strb	r2, [r3, #0]
    af1a:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    af1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af22:	2200      	movs	r2, #0
    af24:	701a      	strb	r2, [r3, #0]
    af26:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    af2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af2e:	781b      	ldrb	r3, [r3, #0]
    af30:	b2db      	uxtb	r3, r3
    af32:	3301      	adds	r3, #1
    af34:	b2da      	uxtb	r2, r3
    af36:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    af3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af3e:	701a      	strb	r2, [r3, #0]
    af40:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    af44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af48:	781b      	ldrb	r3, [r3, #0]
    af4a:	b2db      	uxtb	r3, r3
    af4c:	2bff      	cmp	r3, #255	; 0xff
    af4e:	d105      	bne.n	af5c <send_bat+0x710>
    af50:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    af54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af58:	2200      	movs	r2, #0
    af5a:	701a      	strb	r2, [r3, #0]
    af5c:	f242 0338 	movw	r3, #8248	; 0x2038
    af60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af64:	f242 0238 	movw	r2, #8248	; 0x2038
    af68:	f2c2 0200 	movt	r2, #8192	; 0x2000
    af6c:	7812      	ldrb	r2, [r2, #0]
    af6e:	b2d2      	uxtb	r2, r2
    af70:	f042 0201 	orr.w	r2, r2, #1
    af74:	b2d2      	uxtb	r2, r2
    af76:	701a      	strb	r2, [r3, #0]
    af78:	f242 0339 	movw	r3, #8249	; 0x2039
    af7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af80:	f242 0239 	movw	r2, #8249	; 0x2039
    af84:	f2c2 0200 	movt	r2, #8192	; 0x2000
    af88:	7812      	ldrb	r2, [r2, #0]
    af8a:	b2d2      	uxtb	r2, r2
    af8c:	f042 0210 	orr.w	r2, r2, #16
    af90:	b2d2      	uxtb	r2, r2
    af92:	701a      	strb	r2, [r3, #0]
    af94:	e00b      	b.n	afae <send_bat+0x762>
    af96:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    af9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af9e:	781b      	ldrb	r3, [r3, #0]
    afa0:	3301      	adds	r3, #1
    afa2:	b2da      	uxtb	r2, r3
    afa4:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    afa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afac:	701a      	strb	r2, [r3, #0]
}
    afae:	46bd      	mov	sp, r7
    afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    afb4:	4770      	bx	lr
    afb6:	bf00      	nop

0000afb8 <send_climb>:
void send_climb(void){  //2000ms
    afb8:	b480      	push	{r7}
    afba:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    afbc:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    afc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afc4:	781a      	ldrb	r2, [r3, #0]
    afc6:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    afca:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    afce:	fba3 1302 	umull	r1, r3, r3, r2
    afd2:	0919      	lsrs	r1, r3, #4
    afd4:	460b      	mov	r3, r1
    afd6:	009b      	lsls	r3, r3, #2
    afd8:	440b      	add	r3, r1
    afda:	009b      	lsls	r3, r3, #2
    afdc:	1ad3      	subs	r3, r2, r3
    afde:	b2db      	uxtb	r3, r3
    afe0:	2b12      	cmp	r3, #18
    afe2:	f040 8554 	bne.w	ba8e <send_climb+0xad6>
    afe6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    afea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afee:	781a      	ldrb	r2, [r3, #0]
    aff0:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    aff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aff8:	781b      	ldrb	r3, [r3, #0]
    affa:	b2db      	uxtb	r3, r3
    affc:	429a      	cmp	r2, r3
    affe:	d313      	bcc.n	b028 <send_climb+0x70>
    b000:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    b004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b008:	781b      	ldrb	r3, [r3, #0]
    b00a:	b2db      	uxtb	r3, r3
    b00c:	461a      	mov	r2, r3
    b00e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b016:	781b      	ldrb	r3, [r3, #0]
    b018:	1ad3      	subs	r3, r2, r3
    b01a:	33ff      	adds	r3, #255	; 0xff
    b01c:	2b12      	cmp	r3, #18
    b01e:	bfd4      	ite	le
    b020:	2300      	movle	r3, #0
    b022:	2301      	movgt	r3, #1
    b024:	b2db      	uxtb	r3, r3
    b026:	e011      	b.n	b04c <send_climb+0x94>
    b028:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    b02c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b030:	781b      	ldrb	r3, [r3, #0]
    b032:	b2db      	uxtb	r3, r3
    b034:	461a      	mov	r2, r3
    b036:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b03a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b03e:	781b      	ldrb	r3, [r3, #0]
    b040:	1ad3      	subs	r3, r2, r3
    b042:	2b12      	cmp	r3, #18
    b044:	bfd4      	ite	le
    b046:	2300      	movle	r3, #0
    b048:	2301      	movgt	r3, #1
    b04a:	b2db      	uxtb	r3, r3
    b04c:	2b00      	cmp	r3, #0
    b04e:	f000 8512 	beq.w	ba76 <send_climb+0xabe>
    b052:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b05a:	781b      	ldrb	r3, [r3, #0]
    b05c:	461a      	mov	r2, r3
    b05e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b062:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b066:	2105      	movs	r1, #5
    b068:	5499      	strb	r1, [r3, r2]
    b06a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b06e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b072:	781b      	ldrb	r3, [r3, #0]
    b074:	3301      	adds	r3, #1
    b076:	b2da      	uxtb	r2, r3
    b078:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b07c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b080:	701a      	strb	r2, [r3, #0]
    b082:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b08a:	781b      	ldrb	r3, [r3, #0]
    b08c:	2bff      	cmp	r3, #255	; 0xff
    b08e:	d105      	bne.n	b09c <send_climb+0xe4>
    b090:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b098:	2200      	movs	r2, #0
    b09a:	701a      	strb	r2, [r3, #0]
    b09c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b0a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0a4:	781b      	ldrb	r3, [r3, #0]
    b0a6:	461a      	mov	r2, r3
    b0a8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b0ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0b0:	210e      	movs	r1, #14
    b0b2:	5499      	strb	r1, [r3, r2]
    b0b4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0bc:	781b      	ldrb	r3, [r3, #0]
    b0be:	3301      	adds	r3, #1
    b0c0:	b2da      	uxtb	r2, r3
    b0c2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b0c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0ca:	701a      	strb	r2, [r3, #0]
    b0cc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b0d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0d4:	781b      	ldrb	r3, [r3, #0]
    b0d6:	2bff      	cmp	r3, #255	; 0xff
    b0d8:	d105      	bne.n	b0e6 <send_climb+0x12e>
    b0da:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b0de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0e2:	2200      	movs	r2, #0
    b0e4:	701a      	strb	r2, [r3, #0]
    b0e6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b0ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0ee:	220e      	movs	r2, #14
    b0f0:	701a      	strb	r2, [r3, #0]
    b0f2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b0f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0fa:	220e      	movs	r2, #14
    b0fc:	701a      	strb	r2, [r3, #0]
    b0fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b102:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b106:	781b      	ldrb	r3, [r3, #0]
    b108:	461a      	mov	r2, r3
    b10a:	f24b 2304 	movw	r3, #45572	; 0xb204
    b10e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b112:	7819      	ldrb	r1, [r3, #0]
    b114:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b11c:	5499      	strb	r1, [r3, r2]
    b11e:	f24b 2304 	movw	r3, #45572	; 0xb204
    b122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b126:	781a      	ldrb	r2, [r3, #0]
    b128:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b12c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b130:	781b      	ldrb	r3, [r3, #0]
    b132:	4413      	add	r3, r2
    b134:	b2da      	uxtb	r2, r3
    b136:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b13a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b13e:	701a      	strb	r2, [r3, #0]
    b140:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b144:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b148:	781a      	ldrb	r2, [r3, #0]
    b14a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b14e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b152:	781b      	ldrb	r3, [r3, #0]
    b154:	4413      	add	r3, r2
    b156:	b2da      	uxtb	r2, r3
    b158:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b15c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b160:	701a      	strb	r2, [r3, #0]
    b162:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b166:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b16a:	781b      	ldrb	r3, [r3, #0]
    b16c:	3301      	adds	r3, #1
    b16e:	b2da      	uxtb	r2, r3
    b170:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b174:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b178:	701a      	strb	r2, [r3, #0]
    b17a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b17e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b182:	781b      	ldrb	r3, [r3, #0]
    b184:	2bff      	cmp	r3, #255	; 0xff
    b186:	d105      	bne.n	b194 <send_climb+0x1dc>
    b188:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b18c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b190:	2200      	movs	r2, #0
    b192:	701a      	strb	r2, [r3, #0]
    b194:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b19c:	781b      	ldrb	r3, [r3, #0]
    b19e:	461a      	mov	r2, r3
    b1a0:	f24b 2304 	movw	r3, #45572	; 0xb204
    b1a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1a8:	7859      	ldrb	r1, [r3, #1]
    b1aa:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b1ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1b2:	5499      	strb	r1, [r3, r2]
    b1b4:	4bd3      	ldr	r3, [pc, #844]	; (b504 <send_climb+0x54c>)
    b1b6:	781a      	ldrb	r2, [r3, #0]
    b1b8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b1bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1c0:	781b      	ldrb	r3, [r3, #0]
    b1c2:	4413      	add	r3, r2
    b1c4:	b2da      	uxtb	r2, r3
    b1c6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b1ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1ce:	701a      	strb	r2, [r3, #0]
    b1d0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b1d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1d8:	781a      	ldrb	r2, [r3, #0]
    b1da:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b1de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1e2:	781b      	ldrb	r3, [r3, #0]
    b1e4:	4413      	add	r3, r2
    b1e6:	b2da      	uxtb	r2, r3
    b1e8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b1ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1f0:	701a      	strb	r2, [r3, #0]
    b1f2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b1f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1fa:	781b      	ldrb	r3, [r3, #0]
    b1fc:	3301      	adds	r3, #1
    b1fe:	b2da      	uxtb	r2, r3
    b200:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b208:	701a      	strb	r2, [r3, #0]
    b20a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b20e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b212:	781b      	ldrb	r3, [r3, #0]
    b214:	2bff      	cmp	r3, #255	; 0xff
    b216:	d105      	bne.n	b224 <send_climb+0x26c>
    b218:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b21c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b220:	2200      	movs	r2, #0
    b222:	701a      	strb	r2, [r3, #0]
    b224:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b228:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b22c:	781b      	ldrb	r3, [r3, #0]
    b22e:	461a      	mov	r2, r3
    b230:	f24b 2318 	movw	r3, #45592	; 0xb218
    b234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b238:	7819      	ldrb	r1, [r3, #0]
    b23a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b23e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b242:	5499      	strb	r1, [r3, r2]
    b244:	f24b 2318 	movw	r3, #45592	; 0xb218
    b248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b24c:	781a      	ldrb	r2, [r3, #0]
    b24e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b252:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b256:	781b      	ldrb	r3, [r3, #0]
    b258:	4413      	add	r3, r2
    b25a:	b2da      	uxtb	r2, r3
    b25c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b264:	701a      	strb	r2, [r3, #0]
    b266:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b26a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b26e:	781a      	ldrb	r2, [r3, #0]
    b270:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b278:	781b      	ldrb	r3, [r3, #0]
    b27a:	4413      	add	r3, r2
    b27c:	b2da      	uxtb	r2, r3
    b27e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b286:	701a      	strb	r2, [r3, #0]
    b288:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b28c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b290:	781b      	ldrb	r3, [r3, #0]
    b292:	3301      	adds	r3, #1
    b294:	b2da      	uxtb	r2, r3
    b296:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b29a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b29e:	701a      	strb	r2, [r3, #0]
    b2a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b2a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2a8:	781b      	ldrb	r3, [r3, #0]
    b2aa:	2bff      	cmp	r3, #255	; 0xff
    b2ac:	d105      	bne.n	b2ba <send_climb+0x302>
    b2ae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b2b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2b6:	2200      	movs	r2, #0
    b2b8:	701a      	strb	r2, [r3, #0]
    b2ba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b2be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2c2:	781b      	ldrb	r3, [r3, #0]
    b2c4:	461a      	mov	r2, r3
    b2c6:	f24b 2318 	movw	r3, #45592	; 0xb218
    b2ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2ce:	7859      	ldrb	r1, [r3, #1]
    b2d0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b2d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2d8:	5499      	strb	r1, [r3, r2]
    b2da:	4b8b      	ldr	r3, [pc, #556]	; (b508 <send_climb+0x550>)
    b2dc:	781a      	ldrb	r2, [r3, #0]
    b2de:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b2e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2e6:	781b      	ldrb	r3, [r3, #0]
    b2e8:	4413      	add	r3, r2
    b2ea:	b2da      	uxtb	r2, r3
    b2ec:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b2f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2f4:	701a      	strb	r2, [r3, #0]
    b2f6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b2fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2fe:	781a      	ldrb	r2, [r3, #0]
    b300:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b308:	781b      	ldrb	r3, [r3, #0]
    b30a:	4413      	add	r3, r2
    b30c:	b2da      	uxtb	r2, r3
    b30e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b316:	701a      	strb	r2, [r3, #0]
    b318:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b31c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b320:	781b      	ldrb	r3, [r3, #0]
    b322:	3301      	adds	r3, #1
    b324:	b2da      	uxtb	r2, r3
    b326:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b32a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b32e:	701a      	strb	r2, [r3, #0]
    b330:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b338:	781b      	ldrb	r3, [r3, #0]
    b33a:	2bff      	cmp	r3, #255	; 0xff
    b33c:	d105      	bne.n	b34a <send_climb+0x392>
    b33e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b346:	2200      	movs	r2, #0
    b348:	701a      	strb	r2, [r3, #0]
    b34a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b34e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b352:	781b      	ldrb	r3, [r3, #0]
    b354:	461a      	mov	r2, r3
    b356:	f24b 2318 	movw	r3, #45592	; 0xb218
    b35a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b35e:	7899      	ldrb	r1, [r3, #2]
    b360:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b368:	5499      	strb	r1, [r3, r2]
    b36a:	4b68      	ldr	r3, [pc, #416]	; (b50c <send_climb+0x554>)
    b36c:	781a      	ldrb	r2, [r3, #0]
    b36e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b376:	781b      	ldrb	r3, [r3, #0]
    b378:	4413      	add	r3, r2
    b37a:	b2da      	uxtb	r2, r3
    b37c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b384:	701a      	strb	r2, [r3, #0]
    b386:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b38a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b38e:	781a      	ldrb	r2, [r3, #0]
    b390:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b398:	781b      	ldrb	r3, [r3, #0]
    b39a:	4413      	add	r3, r2
    b39c:	b2da      	uxtb	r2, r3
    b39e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b3a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3a6:	701a      	strb	r2, [r3, #0]
    b3a8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b3ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3b0:	781b      	ldrb	r3, [r3, #0]
    b3b2:	3301      	adds	r3, #1
    b3b4:	b2da      	uxtb	r2, r3
    b3b6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b3ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3be:	701a      	strb	r2, [r3, #0]
    b3c0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b3c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3c8:	781b      	ldrb	r3, [r3, #0]
    b3ca:	2bff      	cmp	r3, #255	; 0xff
    b3cc:	d105      	bne.n	b3da <send_climb+0x422>
    b3ce:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b3d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3d6:	2200      	movs	r2, #0
    b3d8:	701a      	strb	r2, [r3, #0]
    b3da:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b3de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3e2:	781b      	ldrb	r3, [r3, #0]
    b3e4:	461a      	mov	r2, r3
    b3e6:	f24b 2318 	movw	r3, #45592	; 0xb218
    b3ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3ee:	78d9      	ldrb	r1, [r3, #3]
    b3f0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b3f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3f8:	5499      	strb	r1, [r3, r2]
    b3fa:	4b45      	ldr	r3, [pc, #276]	; (b510 <send_climb+0x558>)
    b3fc:	781a      	ldrb	r2, [r3, #0]
    b3fe:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b406:	781b      	ldrb	r3, [r3, #0]
    b408:	4413      	add	r3, r2
    b40a:	b2da      	uxtb	r2, r3
    b40c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b414:	701a      	strb	r2, [r3, #0]
    b416:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b41a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b41e:	781a      	ldrb	r2, [r3, #0]
    b420:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b428:	781b      	ldrb	r3, [r3, #0]
    b42a:	4413      	add	r3, r2
    b42c:	b2da      	uxtb	r2, r3
    b42e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b436:	701a      	strb	r2, [r3, #0]
    b438:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b43c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b440:	781b      	ldrb	r3, [r3, #0]
    b442:	3301      	adds	r3, #1
    b444:	b2da      	uxtb	r2, r3
    b446:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b44a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b44e:	701a      	strb	r2, [r3, #0]
    b450:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b458:	781b      	ldrb	r3, [r3, #0]
    b45a:	2bff      	cmp	r3, #255	; 0xff
    b45c:	d105      	bne.n	b46a <send_climb+0x4b2>
    b45e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b466:	2200      	movs	r2, #0
    b468:	701a      	strb	r2, [r3, #0]
    b46a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b46e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b472:	781b      	ldrb	r3, [r3, #0]
    b474:	461a      	mov	r2, r3
    b476:	f24b 2320 	movw	r3, #45600	; 0xb220
    b47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b47e:	7819      	ldrb	r1, [r3, #0]
    b480:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b488:	5499      	strb	r1, [r3, r2]
    b48a:	f24b 2320 	movw	r3, #45600	; 0xb220
    b48e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b492:	781a      	ldrb	r2, [r3, #0]
    b494:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b498:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b49c:	781b      	ldrb	r3, [r3, #0]
    b49e:	4413      	add	r3, r2
    b4a0:	b2da      	uxtb	r2, r3
    b4a2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b4a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4aa:	701a      	strb	r2, [r3, #0]
    b4ac:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b4b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4b4:	781a      	ldrb	r2, [r3, #0]
    b4b6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b4ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4be:	781b      	ldrb	r3, [r3, #0]
    b4c0:	4413      	add	r3, r2
    b4c2:	b2da      	uxtb	r2, r3
    b4c4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b4c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4cc:	701a      	strb	r2, [r3, #0]
    b4ce:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b4d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4d6:	781b      	ldrb	r3, [r3, #0]
    b4d8:	3301      	adds	r3, #1
    b4da:	b2da      	uxtb	r2, r3
    b4dc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b4e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4e4:	701a      	strb	r2, [r3, #0]
    b4e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b4ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4ee:	781b      	ldrb	r3, [r3, #0]
    b4f0:	2bff      	cmp	r3, #255	; 0xff
    b4f2:	d10f      	bne.n	b514 <send_climb+0x55c>
    b4f4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b4f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4fc:	2200      	movs	r2, #0
    b4fe:	701a      	strb	r2, [r3, #0]
    b500:	e008      	b.n	b514 <send_climb+0x55c>
    b502:	bf00      	nop
    b504:	2000b205 	.word	0x2000b205
    b508:	2000b219 	.word	0x2000b219
    b50c:	2000b21a 	.word	0x2000b21a
    b510:	2000b21b 	.word	0x2000b21b
    b514:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b51c:	781b      	ldrb	r3, [r3, #0]
    b51e:	461a      	mov	r2, r3
    b520:	f24b 2320 	movw	r3, #45600	; 0xb220
    b524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b528:	7859      	ldrb	r1, [r3, #1]
    b52a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b52e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b532:	5499      	strb	r1, [r3, r2]
    b534:	4bd1      	ldr	r3, [pc, #836]	; (b87c <send_climb+0x8c4>)
    b536:	781a      	ldrb	r2, [r3, #0]
    b538:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b53c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b540:	781b      	ldrb	r3, [r3, #0]
    b542:	4413      	add	r3, r2
    b544:	b2da      	uxtb	r2, r3
    b546:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b54a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b54e:	701a      	strb	r2, [r3, #0]
    b550:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b558:	781a      	ldrb	r2, [r3, #0]
    b55a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b55e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b562:	781b      	ldrb	r3, [r3, #0]
    b564:	4413      	add	r3, r2
    b566:	b2da      	uxtb	r2, r3
    b568:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b56c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b570:	701a      	strb	r2, [r3, #0]
    b572:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b576:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b57a:	781b      	ldrb	r3, [r3, #0]
    b57c:	3301      	adds	r3, #1
    b57e:	b2da      	uxtb	r2, r3
    b580:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b588:	701a      	strb	r2, [r3, #0]
    b58a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b58e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b592:	781b      	ldrb	r3, [r3, #0]
    b594:	2bff      	cmp	r3, #255	; 0xff
    b596:	d105      	bne.n	b5a4 <send_climb+0x5ec>
    b598:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b59c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5a0:	2200      	movs	r2, #0
    b5a2:	701a      	strb	r2, [r3, #0]
    b5a4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b5a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5ac:	781b      	ldrb	r3, [r3, #0]
    b5ae:	461a      	mov	r2, r3
    b5b0:	f24b 2320 	movw	r3, #45600	; 0xb220
    b5b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5b8:	7899      	ldrb	r1, [r3, #2]
    b5ba:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b5be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5c2:	5499      	strb	r1, [r3, r2]
    b5c4:	4bae      	ldr	r3, [pc, #696]	; (b880 <send_climb+0x8c8>)
    b5c6:	781a      	ldrb	r2, [r3, #0]
    b5c8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b5cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5d0:	781b      	ldrb	r3, [r3, #0]
    b5d2:	4413      	add	r3, r2
    b5d4:	b2da      	uxtb	r2, r3
    b5d6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b5da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5de:	701a      	strb	r2, [r3, #0]
    b5e0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b5e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5e8:	781a      	ldrb	r2, [r3, #0]
    b5ea:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b5ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5f2:	781b      	ldrb	r3, [r3, #0]
    b5f4:	4413      	add	r3, r2
    b5f6:	b2da      	uxtb	r2, r3
    b5f8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b5fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b600:	701a      	strb	r2, [r3, #0]
    b602:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b606:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b60a:	781b      	ldrb	r3, [r3, #0]
    b60c:	3301      	adds	r3, #1
    b60e:	b2da      	uxtb	r2, r3
    b610:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b618:	701a      	strb	r2, [r3, #0]
    b61a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b61e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b622:	781b      	ldrb	r3, [r3, #0]
    b624:	2bff      	cmp	r3, #255	; 0xff
    b626:	d105      	bne.n	b634 <send_climb+0x67c>
    b628:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b62c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b630:	2200      	movs	r2, #0
    b632:	701a      	strb	r2, [r3, #0]
    b634:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b63c:	781b      	ldrb	r3, [r3, #0]
    b63e:	461a      	mov	r2, r3
    b640:	f24b 2320 	movw	r3, #45600	; 0xb220
    b644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b648:	78d9      	ldrb	r1, [r3, #3]
    b64a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b64e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b652:	5499      	strb	r1, [r3, r2]
    b654:	4b8b      	ldr	r3, [pc, #556]	; (b884 <send_climb+0x8cc>)
    b656:	781a      	ldrb	r2, [r3, #0]
    b658:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b65c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b660:	781b      	ldrb	r3, [r3, #0]
    b662:	4413      	add	r3, r2
    b664:	b2da      	uxtb	r2, r3
    b666:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b66a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b66e:	701a      	strb	r2, [r3, #0]
    b670:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b674:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b678:	781a      	ldrb	r2, [r3, #0]
    b67a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b67e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b682:	781b      	ldrb	r3, [r3, #0]
    b684:	4413      	add	r3, r2
    b686:	b2da      	uxtb	r2, r3
    b688:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b68c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b690:	701a      	strb	r2, [r3, #0]
    b692:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b69a:	781b      	ldrb	r3, [r3, #0]
    b69c:	3301      	adds	r3, #1
    b69e:	b2da      	uxtb	r2, r3
    b6a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b6a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6a8:	701a      	strb	r2, [r3, #0]
    b6aa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b6ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6b2:	781b      	ldrb	r3, [r3, #0]
    b6b4:	2bff      	cmp	r3, #255	; 0xff
    b6b6:	d105      	bne.n	b6c4 <send_climb+0x70c>
    b6b8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b6bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6c0:	2200      	movs	r2, #0
    b6c2:	701a      	strb	r2, [r3, #0]
    b6c4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b6c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6cc:	781b      	ldrb	r3, [r3, #0]
    b6ce:	461a      	mov	r2, r3
    b6d0:	f648 0368 	movw	r3, #34920	; 0x8868
    b6d4:	f2c0 0301 	movt	r3, #1
    b6d8:	7819      	ldrb	r1, [r3, #0]
    b6da:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b6de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6e2:	5499      	strb	r1, [r3, r2]
    b6e4:	f648 0368 	movw	r3, #34920	; 0x8868
    b6e8:	f2c0 0301 	movt	r3, #1
    b6ec:	781a      	ldrb	r2, [r3, #0]
    b6ee:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b6f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6f6:	781b      	ldrb	r3, [r3, #0]
    b6f8:	4413      	add	r3, r2
    b6fa:	b2da      	uxtb	r2, r3
    b6fc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b704:	701a      	strb	r2, [r3, #0]
    b706:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b70a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b70e:	781a      	ldrb	r2, [r3, #0]
    b710:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b714:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b718:	781b      	ldrb	r3, [r3, #0]
    b71a:	4413      	add	r3, r2
    b71c:	b2da      	uxtb	r2, r3
    b71e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b722:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b726:	701a      	strb	r2, [r3, #0]
    b728:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b72c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b730:	781b      	ldrb	r3, [r3, #0]
    b732:	3301      	adds	r3, #1
    b734:	b2da      	uxtb	r2, r3
    b736:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b73a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b73e:	701a      	strb	r2, [r3, #0]
    b740:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b748:	781b      	ldrb	r3, [r3, #0]
    b74a:	2bff      	cmp	r3, #255	; 0xff
    b74c:	d105      	bne.n	b75a <send_climb+0x7a2>
    b74e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b756:	2200      	movs	r2, #0
    b758:	701a      	strb	r2, [r3, #0]
    b75a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b75e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b762:	781b      	ldrb	r3, [r3, #0]
    b764:	461a      	mov	r2, r3
    b766:	f648 0368 	movw	r3, #34920	; 0x8868
    b76a:	f2c0 0301 	movt	r3, #1
    b76e:	7859      	ldrb	r1, [r3, #1]
    b770:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b778:	5499      	strb	r1, [r3, r2]
    b77a:	4b43      	ldr	r3, [pc, #268]	; (b888 <send_climb+0x8d0>)
    b77c:	781a      	ldrb	r2, [r3, #0]
    b77e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b786:	781b      	ldrb	r3, [r3, #0]
    b788:	4413      	add	r3, r2
    b78a:	b2da      	uxtb	r2, r3
    b78c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b790:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b794:	701a      	strb	r2, [r3, #0]
    b796:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b79a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b79e:	781a      	ldrb	r2, [r3, #0]
    b7a0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b7a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7a8:	781b      	ldrb	r3, [r3, #0]
    b7aa:	4413      	add	r3, r2
    b7ac:	b2da      	uxtb	r2, r3
    b7ae:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b7b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7b6:	701a      	strb	r2, [r3, #0]
    b7b8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b7bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7c0:	781b      	ldrb	r3, [r3, #0]
    b7c2:	3301      	adds	r3, #1
    b7c4:	b2da      	uxtb	r2, r3
    b7c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b7ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7ce:	701a      	strb	r2, [r3, #0]
    b7d0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b7d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7d8:	781b      	ldrb	r3, [r3, #0]
    b7da:	2bff      	cmp	r3, #255	; 0xff
    b7dc:	d105      	bne.n	b7ea <send_climb+0x832>
    b7de:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b7e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7e6:	2200      	movs	r2, #0
    b7e8:	701a      	strb	r2, [r3, #0]
    b7ea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b7ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7f2:	781b      	ldrb	r3, [r3, #0]
    b7f4:	461a      	mov	r2, r3
    b7f6:	f648 0368 	movw	r3, #34920	; 0x8868
    b7fa:	f2c0 0301 	movt	r3, #1
    b7fe:	7899      	ldrb	r1, [r3, #2]
    b800:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b808:	5499      	strb	r1, [r3, r2]
    b80a:	4b20      	ldr	r3, [pc, #128]	; (b88c <send_climb+0x8d4>)
    b80c:	781a      	ldrb	r2, [r3, #0]
    b80e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b816:	781b      	ldrb	r3, [r3, #0]
    b818:	4413      	add	r3, r2
    b81a:	b2da      	uxtb	r2, r3
    b81c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b824:	701a      	strb	r2, [r3, #0]
    b826:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b82a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b82e:	781a      	ldrb	r2, [r3, #0]
    b830:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b834:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b838:	781b      	ldrb	r3, [r3, #0]
    b83a:	4413      	add	r3, r2
    b83c:	b2da      	uxtb	r2, r3
    b83e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b846:	701a      	strb	r2, [r3, #0]
    b848:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b84c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b850:	781b      	ldrb	r3, [r3, #0]
    b852:	3301      	adds	r3, #1
    b854:	b2da      	uxtb	r2, r3
    b856:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b85a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b85e:	701a      	strb	r2, [r3, #0]
    b860:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b864:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b868:	781b      	ldrb	r3, [r3, #0]
    b86a:	2bff      	cmp	r3, #255	; 0xff
    b86c:	d110      	bne.n	b890 <send_climb+0x8d8>
    b86e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b876:	2200      	movs	r2, #0
    b878:	701a      	strb	r2, [r3, #0]
    b87a:	e009      	b.n	b890 <send_climb+0x8d8>
    b87c:	2000b221 	.word	0x2000b221
    b880:	2000b222 	.word	0x2000b222
    b884:	2000b223 	.word	0x2000b223
    b888:	00018869 	.word	0x00018869
    b88c:	0001886a 	.word	0x0001886a
    b890:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b898:	781b      	ldrb	r3, [r3, #0]
    b89a:	461a      	mov	r2, r3
    b89c:	f648 0368 	movw	r3, #34920	; 0x8868
    b8a0:	f2c0 0301 	movt	r3, #1
    b8a4:	78d9      	ldrb	r1, [r3, #3]
    b8a6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b8aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8ae:	5499      	strb	r1, [r3, r2]
    b8b0:	4b79      	ldr	r3, [pc, #484]	; (ba98 <send_climb+0xae0>)
    b8b2:	781a      	ldrb	r2, [r3, #0]
    b8b4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b8b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8bc:	781b      	ldrb	r3, [r3, #0]
    b8be:	4413      	add	r3, r2
    b8c0:	b2da      	uxtb	r2, r3
    b8c2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b8c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8ca:	701a      	strb	r2, [r3, #0]
    b8cc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b8d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8d4:	781a      	ldrb	r2, [r3, #0]
    b8d6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b8da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8de:	781b      	ldrb	r3, [r3, #0]
    b8e0:	4413      	add	r3, r2
    b8e2:	b2da      	uxtb	r2, r3
    b8e4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b8e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8ec:	701a      	strb	r2, [r3, #0]
    b8ee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b8f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8f6:	781b      	ldrb	r3, [r3, #0]
    b8f8:	3301      	adds	r3, #1
    b8fa:	b2da      	uxtb	r2, r3
    b8fc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b904:	701a      	strb	r2, [r3, #0]
    b906:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b90a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b90e:	781b      	ldrb	r3, [r3, #0]
    b910:	2bff      	cmp	r3, #255	; 0xff
    b912:	d105      	bne.n	b920 <send_climb+0x968>
    b914:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b91c:	2200      	movs	r2, #0
    b91e:	701a      	strb	r2, [r3, #0]
    b920:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b928:	781b      	ldrb	r3, [r3, #0]
    b92a:	461a      	mov	r2, r3
    b92c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b934:	7819      	ldrb	r1, [r3, #0]
    b936:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b93a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b93e:	5499      	strb	r1, [r3, r2]
    b940:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b944:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b948:	781b      	ldrb	r3, [r3, #0]
    b94a:	3301      	adds	r3, #1
    b94c:	b2da      	uxtb	r2, r3
    b94e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b952:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b956:	701a      	strb	r2, [r3, #0]
    b958:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b95c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b960:	781b      	ldrb	r3, [r3, #0]
    b962:	2bff      	cmp	r3, #255	; 0xff
    b964:	d105      	bne.n	b972 <send_climb+0x9ba>
    b966:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b96a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b96e:	2200      	movs	r2, #0
    b970:	701a      	strb	r2, [r3, #0]
    b972:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b976:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b97a:	781b      	ldrb	r3, [r3, #0]
    b97c:	461a      	mov	r2, r3
    b97e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b986:	7819      	ldrb	r1, [r3, #0]
    b988:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b98c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b990:	5499      	strb	r1, [r3, r2]
    b992:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b99a:	781b      	ldrb	r3, [r3, #0]
    b99c:	3301      	adds	r3, #1
    b99e:	b2da      	uxtb	r2, r3
    b9a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b9a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9a8:	701a      	strb	r2, [r3, #0]
    b9aa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b9ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9b2:	781b      	ldrb	r3, [r3, #0]
    b9b4:	2bff      	cmp	r3, #255	; 0xff
    b9b6:	d105      	bne.n	b9c4 <send_climb+0xa0c>
    b9b8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b9bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9c0:	2200      	movs	r2, #0
    b9c2:	701a      	strb	r2, [r3, #0]
    b9c4:	f242 0339 	movw	r3, #8249	; 0x2039
    b9c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9cc:	781b      	ldrb	r3, [r3, #0]
    b9ce:	b2db      	uxtb	r3, r3
    b9d0:	f003 0310 	and.w	r3, r3, #16
    b9d4:	2b00      	cmp	r3, #0
    b9d6:	d15a      	bne.n	ba8e <send_climb+0xad6>
    b9d8:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    b9dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9e0:	781b      	ldrb	r3, [r3, #0]
    b9e2:	b2db      	uxtb	r3, r3
    b9e4:	461a      	mov	r2, r3
    b9e6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b9ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9ee:	5c9a      	ldrb	r2, [r3, r2]
    b9f0:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    b9f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9f8:	701a      	strb	r2, [r3, #0]
    b9fa:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    b9fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba02:	2200      	movs	r2, #0
    ba04:	701a      	strb	r2, [r3, #0]
    ba06:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    ba0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba0e:	781b      	ldrb	r3, [r3, #0]
    ba10:	b2db      	uxtb	r3, r3
    ba12:	3301      	adds	r3, #1
    ba14:	b2da      	uxtb	r2, r3
    ba16:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    ba1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba1e:	701a      	strb	r2, [r3, #0]
    ba20:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    ba24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba28:	781b      	ldrb	r3, [r3, #0]
    ba2a:	b2db      	uxtb	r3, r3
    ba2c:	2bff      	cmp	r3, #255	; 0xff
    ba2e:	d105      	bne.n	ba3c <send_climb+0xa84>
    ba30:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    ba34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba38:	2200      	movs	r2, #0
    ba3a:	701a      	strb	r2, [r3, #0]
    ba3c:	f242 0338 	movw	r3, #8248	; 0x2038
    ba40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba44:	f242 0238 	movw	r2, #8248	; 0x2038
    ba48:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ba4c:	7812      	ldrb	r2, [r2, #0]
    ba4e:	b2d2      	uxtb	r2, r2
    ba50:	f042 0201 	orr.w	r2, r2, #1
    ba54:	b2d2      	uxtb	r2, r2
    ba56:	701a      	strb	r2, [r3, #0]
    ba58:	f242 0339 	movw	r3, #8249	; 0x2039
    ba5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba60:	f242 0239 	movw	r2, #8249	; 0x2039
    ba64:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ba68:	7812      	ldrb	r2, [r2, #0]
    ba6a:	b2d2      	uxtb	r2, r2
    ba6c:	f042 0210 	orr.w	r2, r2, #16
    ba70:	b2d2      	uxtb	r2, r2
    ba72:	701a      	strb	r2, [r3, #0]
    ba74:	e00b      	b.n	ba8e <send_climb+0xad6>
    ba76:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    ba7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba7e:	781b      	ldrb	r3, [r3, #0]
    ba80:	3301      	adds	r3, #1
    ba82:	b2da      	uxtb	r2, r3
    ba84:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    ba88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba8c:	701a      	strb	r2, [r3, #0]
}
    ba8e:	46bd      	mov	sp, r7
    ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba94:	4770      	bx	lr
    ba96:	bf00      	nop
    ba98:	0001886b 	.word	0x0001886b

0000ba9c <send_mode>:
void send_mode(void){  //5000ms
    ba9c:	b480      	push	{r7}
    ba9e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    baa0:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    baa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baa8:	781a      	ldrb	r2, [r3, #0]
    baaa:	f248 531f 	movw	r3, #34079	; 0x851f
    baae:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    bab2:	fba3 1302 	umull	r1, r3, r3, r2
    bab6:	091b      	lsrs	r3, r3, #4
    bab8:	2132      	movs	r1, #50	; 0x32
    baba:	fb01 f303 	mul.w	r3, r1, r3
    babe:	1ad3      	subs	r3, r2, r3
    bac0:	b2db      	uxtb	r3, r3
    bac2:	2b09      	cmp	r3, #9
    bac4:	f040 82ba 	bne.w	c03c <send_mode+0x5a0>
    bac8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bacc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bad0:	781a      	ldrb	r2, [r3, #0]
    bad2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    bad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bada:	781b      	ldrb	r3, [r3, #0]
    badc:	b2db      	uxtb	r3, r3
    bade:	429a      	cmp	r2, r3
    bae0:	d313      	bcc.n	bb0a <send_mode+0x6e>
    bae2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    bae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baea:	781b      	ldrb	r3, [r3, #0]
    baec:	b2db      	uxtb	r3, r3
    baee:	461a      	mov	r2, r3
    baf0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    baf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baf8:	781b      	ldrb	r3, [r3, #0]
    bafa:	1ad3      	subs	r3, r2, r3
    bafc:	33ff      	adds	r3, #255	; 0xff
    bafe:	2b09      	cmp	r3, #9
    bb00:	bfd4      	ite	le
    bb02:	2300      	movle	r3, #0
    bb04:	2301      	movgt	r3, #1
    bb06:	b2db      	uxtb	r3, r3
    bb08:	e011      	b.n	bb2e <send_mode+0x92>
    bb0a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    bb0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb12:	781b      	ldrb	r3, [r3, #0]
    bb14:	b2db      	uxtb	r3, r3
    bb16:	461a      	mov	r2, r3
    bb18:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bb1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb20:	781b      	ldrb	r3, [r3, #0]
    bb22:	1ad3      	subs	r3, r2, r3
    bb24:	2b09      	cmp	r3, #9
    bb26:	bfd4      	ite	le
    bb28:	2300      	movle	r3, #0
    bb2a:	2301      	movgt	r3, #1
    bb2c:	b2db      	uxtb	r3, r3
    bb2e:	2b00      	cmp	r3, #0
    bb30:	f000 8278 	beq.w	c024 <send_mode+0x588>
    bb34:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bb38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb3c:	781b      	ldrb	r3, [r3, #0]
    bb3e:	461a      	mov	r2, r3
    bb40:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    bb44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb48:	2105      	movs	r1, #5
    bb4a:	5499      	strb	r1, [r3, r2]
    bb4c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bb50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb54:	781b      	ldrb	r3, [r3, #0]
    bb56:	3301      	adds	r3, #1
    bb58:	b2da      	uxtb	r2, r3
    bb5a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bb5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb62:	701a      	strb	r2, [r3, #0]
    bb64:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bb68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb6c:	781b      	ldrb	r3, [r3, #0]
    bb6e:	2bff      	cmp	r3, #255	; 0xff
    bb70:	d105      	bne.n	bb7e <send_mode+0xe2>
    bb72:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bb76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb7a:	2200      	movs	r2, #0
    bb7c:	701a      	strb	r2, [r3, #0]
    bb7e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bb82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb86:	781b      	ldrb	r3, [r3, #0]
    bb88:	461a      	mov	r2, r3
    bb8a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    bb8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb92:	210b      	movs	r1, #11
    bb94:	5499      	strb	r1, [r3, r2]
    bb96:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bb9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb9e:	781b      	ldrb	r3, [r3, #0]
    bba0:	3301      	adds	r3, #1
    bba2:	b2da      	uxtb	r2, r3
    bba4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbac:	701a      	strb	r2, [r3, #0]
    bbae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bbb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbb6:	781b      	ldrb	r3, [r3, #0]
    bbb8:	2bff      	cmp	r3, #255	; 0xff
    bbba:	d105      	bne.n	bbc8 <send_mode+0x12c>
    bbbc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bbc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbc4:	2200      	movs	r2, #0
    bbc6:	701a      	strb	r2, [r3, #0]
    bbc8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bbcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbd0:	220b      	movs	r2, #11
    bbd2:	701a      	strb	r2, [r3, #0]
    bbd4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bbd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbdc:	220b      	movs	r2, #11
    bbde:	701a      	strb	r2, [r3, #0]
    bbe0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bbe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbe8:	781b      	ldrb	r3, [r3, #0]
    bbea:	461a      	mov	r2, r3
    bbec:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    bbf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbf4:	7819      	ldrb	r1, [r3, #0]
    bbf6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    bbfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbfe:	5499      	strb	r1, [r3, r2]
    bc00:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bc04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc08:	781a      	ldrb	r2, [r3, #0]
    bc0a:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    bc0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc12:	781b      	ldrb	r3, [r3, #0]
    bc14:	4413      	add	r3, r2
    bc16:	b2da      	uxtb	r2, r3
    bc18:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bc1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc20:	701a      	strb	r2, [r3, #0]
    bc22:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bc26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc2a:	781a      	ldrb	r2, [r3, #0]
    bc2c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bc30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc34:	781b      	ldrb	r3, [r3, #0]
    bc36:	4413      	add	r3, r2
    bc38:	b2da      	uxtb	r2, r3
    bc3a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bc3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc42:	701a      	strb	r2, [r3, #0]
    bc44:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bc48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc4c:	781b      	ldrb	r3, [r3, #0]
    bc4e:	3301      	adds	r3, #1
    bc50:	b2da      	uxtb	r2, r3
    bc52:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bc56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc5a:	701a      	strb	r2, [r3, #0]
    bc5c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bc60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc64:	781b      	ldrb	r3, [r3, #0]
    bc66:	2bff      	cmp	r3, #255	; 0xff
    bc68:	d105      	bne.n	bc76 <send_mode+0x1da>
    bc6a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bc6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc72:	2200      	movs	r2, #0
    bc74:	701a      	strb	r2, [r3, #0]
    bc76:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bc7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc7e:	781b      	ldrb	r3, [r3, #0]
    bc80:	461a      	mov	r2, r3
    bc82:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
    bc86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc8a:	7819      	ldrb	r1, [r3, #0]
    bc8c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    bc90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc94:	5499      	strb	r1, [r3, r2]
    bc96:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bc9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc9e:	781a      	ldrb	r2, [r3, #0]
    bca0:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
    bca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bca8:	781b      	ldrb	r3, [r3, #0]
    bcaa:	4413      	add	r3, r2
    bcac:	b2da      	uxtb	r2, r3
    bcae:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bcb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcb6:	701a      	strb	r2, [r3, #0]
    bcb8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bcbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcc0:	781a      	ldrb	r2, [r3, #0]
    bcc2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bcc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcca:	781b      	ldrb	r3, [r3, #0]
    bccc:	4413      	add	r3, r2
    bcce:	b2da      	uxtb	r2, r3
    bcd0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bcd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcd8:	701a      	strb	r2, [r3, #0]
    bcda:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bcde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bce2:	781b      	ldrb	r3, [r3, #0]
    bce4:	3301      	adds	r3, #1
    bce6:	b2da      	uxtb	r2, r3
    bce8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bcec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcf0:	701a      	strb	r2, [r3, #0]
    bcf2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bcf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcfa:	781b      	ldrb	r3, [r3, #0]
    bcfc:	2bff      	cmp	r3, #255	; 0xff
    bcfe:	d105      	bne.n	bd0c <send_mode+0x270>
    bd00:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bd04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd08:	2200      	movs	r2, #0
    bd0a:	701a      	strb	r2, [r3, #0]
    bd0c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bd10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd14:	781b      	ldrb	r3, [r3, #0]
    bd16:	461a      	mov	r2, r3
    bd18:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    bd1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd20:	7819      	ldrb	r1, [r3, #0]
    bd22:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    bd26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd2a:	5499      	strb	r1, [r3, r2]
    bd2c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bd30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd34:	781a      	ldrb	r2, [r3, #0]
    bd36:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    bd3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd3e:	781b      	ldrb	r3, [r3, #0]
    bd40:	4413      	add	r3, r2
    bd42:	b2da      	uxtb	r2, r3
    bd44:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bd48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd4c:	701a      	strb	r2, [r3, #0]
    bd4e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bd52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd56:	781a      	ldrb	r2, [r3, #0]
    bd58:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bd5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd60:	781b      	ldrb	r3, [r3, #0]
    bd62:	4413      	add	r3, r2
    bd64:	b2da      	uxtb	r2, r3
    bd66:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bd6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd6e:	701a      	strb	r2, [r3, #0]
    bd70:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bd74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd78:	781b      	ldrb	r3, [r3, #0]
    bd7a:	3301      	adds	r3, #1
    bd7c:	b2da      	uxtb	r2, r3
    bd7e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bd82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd86:	701a      	strb	r2, [r3, #0]
    bd88:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bd8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd90:	781b      	ldrb	r3, [r3, #0]
    bd92:	2bff      	cmp	r3, #255	; 0xff
    bd94:	d105      	bne.n	bda2 <send_mode+0x306>
    bd96:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bd9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd9e:	2200      	movs	r2, #0
    bda0:	701a      	strb	r2, [r3, #0]
    bda2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bda6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdaa:	781b      	ldrb	r3, [r3, #0]
    bdac:	461a      	mov	r2, r3
    bdae:	f64a 63bb 	movw	r3, #44731	; 0xaebb
    bdb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdb6:	7819      	ldrb	r1, [r3, #0]
    bdb8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    bdbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdc0:	5499      	strb	r1, [r3, r2]
    bdc2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bdc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdca:	781a      	ldrb	r2, [r3, #0]
    bdcc:	f64a 63bb 	movw	r3, #44731	; 0xaebb
    bdd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdd4:	781b      	ldrb	r3, [r3, #0]
    bdd6:	4413      	add	r3, r2
    bdd8:	b2da      	uxtb	r2, r3
    bdda:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bdde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bde2:	701a      	strb	r2, [r3, #0]
    bde4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bde8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdec:	781a      	ldrb	r2, [r3, #0]
    bdee:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bdf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdf6:	781b      	ldrb	r3, [r3, #0]
    bdf8:	4413      	add	r3, r2
    bdfa:	b2da      	uxtb	r2, r3
    bdfc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    be00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be04:	701a      	strb	r2, [r3, #0]
    be06:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    be0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be0e:	781b      	ldrb	r3, [r3, #0]
    be10:	3301      	adds	r3, #1
    be12:	b2da      	uxtb	r2, r3
    be14:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    be18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be1c:	701a      	strb	r2, [r3, #0]
    be1e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    be22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be26:	781b      	ldrb	r3, [r3, #0]
    be28:	2bff      	cmp	r3, #255	; 0xff
    be2a:	d105      	bne.n	be38 <send_mode+0x39c>
    be2c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    be30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be34:	2200      	movs	r2, #0
    be36:	701a      	strb	r2, [r3, #0]
    be38:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    be3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be40:	781b      	ldrb	r3, [r3, #0]
    be42:	461a      	mov	r2, r3
    be44:	f240 33ec 	movw	r3, #1004	; 0x3ec
    be48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be4c:	7819      	ldrb	r1, [r3, #0]
    be4e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    be52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be56:	5499      	strb	r1, [r3, r2]
    be58:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    be5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be60:	781a      	ldrb	r2, [r3, #0]
    be62:	f240 33ec 	movw	r3, #1004	; 0x3ec
    be66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be6a:	781b      	ldrb	r3, [r3, #0]
    be6c:	4413      	add	r3, r2
    be6e:	b2da      	uxtb	r2, r3
    be70:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    be74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be78:	701a      	strb	r2, [r3, #0]
    be7a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    be7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be82:	781a      	ldrb	r2, [r3, #0]
    be84:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    be88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be8c:	781b      	ldrb	r3, [r3, #0]
    be8e:	4413      	add	r3, r2
    be90:	b2da      	uxtb	r2, r3
    be92:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    be96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be9a:	701a      	strb	r2, [r3, #0]
    be9c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bea4:	781b      	ldrb	r3, [r3, #0]
    bea6:	3301      	adds	r3, #1
    bea8:	b2da      	uxtb	r2, r3
    beaa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    beae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beb2:	701a      	strb	r2, [r3, #0]
    beb4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    beb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bebc:	781b      	ldrb	r3, [r3, #0]
    bebe:	2bff      	cmp	r3, #255	; 0xff
    bec0:	d105      	bne.n	bece <send_mode+0x432>
    bec2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beca:	2200      	movs	r2, #0
    becc:	701a      	strb	r2, [r3, #0]
    bece:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bed6:	781b      	ldrb	r3, [r3, #0]
    bed8:	461a      	mov	r2, r3
    beda:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bee2:	7819      	ldrb	r1, [r3, #0]
    bee4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    bee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beec:	5499      	strb	r1, [r3, r2]
    beee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bef6:	781b      	ldrb	r3, [r3, #0]
    bef8:	3301      	adds	r3, #1
    befa:	b2da      	uxtb	r2, r3
    befc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bf00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf04:	701a      	strb	r2, [r3, #0]
    bf06:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bf0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf0e:	781b      	ldrb	r3, [r3, #0]
    bf10:	2bff      	cmp	r3, #255	; 0xff
    bf12:	d105      	bne.n	bf20 <send_mode+0x484>
    bf14:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bf18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf1c:	2200      	movs	r2, #0
    bf1e:	701a      	strb	r2, [r3, #0]
    bf20:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bf24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf28:	781b      	ldrb	r3, [r3, #0]
    bf2a:	461a      	mov	r2, r3
    bf2c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bf30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf34:	7819      	ldrb	r1, [r3, #0]
    bf36:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    bf3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf3e:	5499      	strb	r1, [r3, r2]
    bf40:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bf44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf48:	781b      	ldrb	r3, [r3, #0]
    bf4a:	3301      	adds	r3, #1
    bf4c:	b2da      	uxtb	r2, r3
    bf4e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bf52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf56:	701a      	strb	r2, [r3, #0]
    bf58:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bf5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf60:	781b      	ldrb	r3, [r3, #0]
    bf62:	2bff      	cmp	r3, #255	; 0xff
    bf64:	d105      	bne.n	bf72 <send_mode+0x4d6>
    bf66:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bf6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf6e:	2200      	movs	r2, #0
    bf70:	701a      	strb	r2, [r3, #0]
    bf72:	f242 0339 	movw	r3, #8249	; 0x2039
    bf76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf7a:	781b      	ldrb	r3, [r3, #0]
    bf7c:	b2db      	uxtb	r3, r3
    bf7e:	f003 0310 	and.w	r3, r3, #16
    bf82:	2b00      	cmp	r3, #0
    bf84:	d15a      	bne.n	c03c <send_mode+0x5a0>
    bf86:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    bf8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf8e:	781b      	ldrb	r3, [r3, #0]
    bf90:	b2db      	uxtb	r3, r3
    bf92:	461a      	mov	r2, r3
    bf94:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    bf98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf9c:	5c9a      	ldrb	r2, [r3, r2]
    bf9e:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    bfa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfa6:	701a      	strb	r2, [r3, #0]
    bfa8:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    bfac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfb0:	2200      	movs	r2, #0
    bfb2:	701a      	strb	r2, [r3, #0]
    bfb4:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    bfb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfbc:	781b      	ldrb	r3, [r3, #0]
    bfbe:	b2db      	uxtb	r3, r3
    bfc0:	3301      	adds	r3, #1
    bfc2:	b2da      	uxtb	r2, r3
    bfc4:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    bfc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfcc:	701a      	strb	r2, [r3, #0]
    bfce:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    bfd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfd6:	781b      	ldrb	r3, [r3, #0]
    bfd8:	b2db      	uxtb	r3, r3
    bfda:	2bff      	cmp	r3, #255	; 0xff
    bfdc:	d105      	bne.n	bfea <send_mode+0x54e>
    bfde:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    bfe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfe6:	2200      	movs	r2, #0
    bfe8:	701a      	strb	r2, [r3, #0]
    bfea:	f242 0338 	movw	r3, #8248	; 0x2038
    bfee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bff2:	f242 0238 	movw	r2, #8248	; 0x2038
    bff6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bffa:	7812      	ldrb	r2, [r2, #0]
    bffc:	b2d2      	uxtb	r2, r2
    bffe:	f042 0201 	orr.w	r2, r2, #1
    c002:	b2d2      	uxtb	r2, r2
    c004:	701a      	strb	r2, [r3, #0]
    c006:	f242 0339 	movw	r3, #8249	; 0x2039
    c00a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c00e:	f242 0239 	movw	r2, #8249	; 0x2039
    c012:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c016:	7812      	ldrb	r2, [r2, #0]
    c018:	b2d2      	uxtb	r2, r2
    c01a:	f042 0210 	orr.w	r2, r2, #16
    c01e:	b2d2      	uxtb	r2, r2
    c020:	701a      	strb	r2, [r3, #0]
    c022:	e00b      	b.n	c03c <send_mode+0x5a0>
    c024:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    c028:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c02c:	781b      	ldrb	r3, [r3, #0]
    c02e:	3301      	adds	r3, #1
    c030:	b2da      	uxtb	r2, r3
    c032:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    c036:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c03a:	701a      	strb	r2, [r3, #0]
}
    c03c:	46bd      	mov	sp, r7
    c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c042:	4770      	bx	lr

0000c044 <send_debug>:
void send_debug(void){  //5000ms
    c044:	b480      	push	{r7}
    c046:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    c048:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    c04c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c050:	781a      	ldrb	r2, [r3, #0]
    c052:	f248 531f 	movw	r3, #34079	; 0x851f
    c056:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c05a:	fba3 1302 	umull	r1, r3, r3, r2
    c05e:	091b      	lsrs	r3, r3, #4
    c060:	2132      	movs	r1, #50	; 0x32
    c062:	fb01 f303 	mul.w	r3, r1, r3
    c066:	1ad3      	subs	r3, r2, r3
    c068:	b2db      	uxtb	r3, r3
    c06a:	2b1d      	cmp	r3, #29
    c06c:	f040 82bb 	bne.w	c5e6 <send_debug+0x5a2>
    c070:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c078:	781a      	ldrb	r2, [r3, #0]
    c07a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c07e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c082:	781b      	ldrb	r3, [r3, #0]
    c084:	b2db      	uxtb	r3, r3
    c086:	429a      	cmp	r2, r3
    c088:	d313      	bcc.n	c0b2 <send_debug+0x6e>
    c08a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c08e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c092:	781b      	ldrb	r3, [r3, #0]
    c094:	b2db      	uxtb	r3, r3
    c096:	461a      	mov	r2, r3
    c098:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c09c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0a0:	781b      	ldrb	r3, [r3, #0]
    c0a2:	1ad3      	subs	r3, r2, r3
    c0a4:	33ff      	adds	r3, #255	; 0xff
    c0a6:	2b09      	cmp	r3, #9
    c0a8:	bfd4      	ite	le
    c0aa:	2300      	movle	r3, #0
    c0ac:	2301      	movgt	r3, #1
    c0ae:	b2db      	uxtb	r3, r3
    c0b0:	e011      	b.n	c0d6 <send_debug+0x92>
    c0b2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c0b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0ba:	781b      	ldrb	r3, [r3, #0]
    c0bc:	b2db      	uxtb	r3, r3
    c0be:	461a      	mov	r2, r3
    c0c0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0c8:	781b      	ldrb	r3, [r3, #0]
    c0ca:	1ad3      	subs	r3, r2, r3
    c0cc:	2b09      	cmp	r3, #9
    c0ce:	bfd4      	ite	le
    c0d0:	2300      	movle	r3, #0
    c0d2:	2301      	movgt	r3, #1
    c0d4:	b2db      	uxtb	r3, r3
    c0d6:	2b00      	cmp	r3, #0
    c0d8:	f000 8279 	beq.w	c5ce <send_debug+0x58a>
    c0dc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c0e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0e4:	781b      	ldrb	r3, [r3, #0]
    c0e6:	461a      	mov	r2, r3
    c0e8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c0ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0f0:	2105      	movs	r1, #5
    c0f2:	5499      	strb	r1, [r3, r2]
    c0f4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c0f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0fc:	781b      	ldrb	r3, [r3, #0]
    c0fe:	3301      	adds	r3, #1
    c100:	b2da      	uxtb	r2, r3
    c102:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c106:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c10a:	701a      	strb	r2, [r3, #0]
    c10c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c110:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c114:	781b      	ldrb	r3, [r3, #0]
    c116:	2bff      	cmp	r3, #255	; 0xff
    c118:	d105      	bne.n	c126 <send_debug+0xe2>
    c11a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c11e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c122:	2200      	movs	r2, #0
    c124:	701a      	strb	r2, [r3, #0]
    c126:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c12a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c12e:	781b      	ldrb	r3, [r3, #0]
    c130:	461a      	mov	r2, r3
    c132:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c136:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c13a:	210d      	movs	r1, #13
    c13c:	5499      	strb	r1, [r3, r2]
    c13e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c146:	781b      	ldrb	r3, [r3, #0]
    c148:	3301      	adds	r3, #1
    c14a:	b2da      	uxtb	r2, r3
    c14c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c150:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c154:	701a      	strb	r2, [r3, #0]
    c156:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c15a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c15e:	781b      	ldrb	r3, [r3, #0]
    c160:	2bff      	cmp	r3, #255	; 0xff
    c162:	d105      	bne.n	c170 <send_debug+0x12c>
    c164:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c16c:	2200      	movs	r2, #0
    c16e:	701a      	strb	r2, [r3, #0]
    c170:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c174:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c178:	220d      	movs	r2, #13
    c17a:	701a      	strb	r2, [r3, #0]
    c17c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c180:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c184:	220d      	movs	r2, #13
    c186:	701a      	strb	r2, [r3, #0]
    c188:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c18c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c190:	781b      	ldrb	r3, [r3, #0]
    c192:	461a      	mov	r2, r3
    c194:	f24b 0307 	movw	r3, #45063	; 0xb007
    c198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c19c:	781b      	ldrb	r3, [r3, #0]
    c19e:	b2d9      	uxtb	r1, r3
    c1a0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c1a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1a8:	5499      	strb	r1, [r3, r2]
    c1aa:	f24b 0307 	movw	r3, #45063	; 0xb007
    c1ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1b2:	781a      	ldrb	r2, [r3, #0]
    c1b4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c1b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1bc:	781b      	ldrb	r3, [r3, #0]
    c1be:	4413      	add	r3, r2
    c1c0:	b2da      	uxtb	r2, r3
    c1c2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c1c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1ca:	701a      	strb	r2, [r3, #0]
    c1cc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c1d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1d4:	781a      	ldrb	r2, [r3, #0]
    c1d6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c1da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1de:	781b      	ldrb	r3, [r3, #0]
    c1e0:	4413      	add	r3, r2
    c1e2:	b2da      	uxtb	r2, r3
    c1e4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c1e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1ec:	701a      	strb	r2, [r3, #0]
    c1ee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c1f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1f6:	781b      	ldrb	r3, [r3, #0]
    c1f8:	3301      	adds	r3, #1
    c1fa:	b2da      	uxtb	r2, r3
    c1fc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c204:	701a      	strb	r2, [r3, #0]
    c206:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c20a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c20e:	781b      	ldrb	r3, [r3, #0]
    c210:	2bff      	cmp	r3, #255	; 0xff
    c212:	d105      	bne.n	c220 <send_debug+0x1dc>
    c214:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c218:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c21c:	2200      	movs	r2, #0
    c21e:	701a      	strb	r2, [r3, #0]
    c220:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c228:	781b      	ldrb	r3, [r3, #0]
    c22a:	461a      	mov	r2, r3
    c22c:	f24b 0308 	movw	r3, #45064	; 0xb008
    c230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c234:	7819      	ldrb	r1, [r3, #0]
    c236:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c23a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c23e:	5499      	strb	r1, [r3, r2]
    c240:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c248:	781a      	ldrb	r2, [r3, #0]
    c24a:	f24b 0308 	movw	r3, #45064	; 0xb008
    c24e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c252:	781b      	ldrb	r3, [r3, #0]
    c254:	4413      	add	r3, r2
    c256:	b2da      	uxtb	r2, r3
    c258:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c25c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c260:	701a      	strb	r2, [r3, #0]
    c262:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c266:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c26a:	781a      	ldrb	r2, [r3, #0]
    c26c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c270:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c274:	781b      	ldrb	r3, [r3, #0]
    c276:	4413      	add	r3, r2
    c278:	b2da      	uxtb	r2, r3
    c27a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c27e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c282:	701a      	strb	r2, [r3, #0]
    c284:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c28c:	781b      	ldrb	r3, [r3, #0]
    c28e:	3301      	adds	r3, #1
    c290:	b2da      	uxtb	r2, r3
    c292:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c296:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c29a:	701a      	strb	r2, [r3, #0]
    c29c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c2a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2a4:	781b      	ldrb	r3, [r3, #0]
    c2a6:	2bff      	cmp	r3, #255	; 0xff
    c2a8:	d105      	bne.n	c2b6 <send_debug+0x272>
    c2aa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c2ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2b2:	2200      	movs	r2, #0
    c2b4:	701a      	strb	r2, [r3, #0]
    c2b6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c2ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2be:	781b      	ldrb	r3, [r3, #0]
    c2c0:	461a      	mov	r2, r3
    c2c2:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    c2c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2ca:	7819      	ldrb	r1, [r3, #0]
    c2cc:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c2d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2d4:	5499      	strb	r1, [r3, r2]
    c2d6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c2da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2de:	781a      	ldrb	r2, [r3, #0]
    c2e0:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    c2e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2e8:	781b      	ldrb	r3, [r3, #0]
    c2ea:	4413      	add	r3, r2
    c2ec:	b2da      	uxtb	r2, r3
    c2ee:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c2f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2f6:	701a      	strb	r2, [r3, #0]
    c2f8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c2fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c300:	781a      	ldrb	r2, [r3, #0]
    c302:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c306:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c30a:	781b      	ldrb	r3, [r3, #0]
    c30c:	4413      	add	r3, r2
    c30e:	b2da      	uxtb	r2, r3
    c310:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c318:	701a      	strb	r2, [r3, #0]
    c31a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c31e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c322:	781b      	ldrb	r3, [r3, #0]
    c324:	3301      	adds	r3, #1
    c326:	b2da      	uxtb	r2, r3
    c328:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c32c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c330:	701a      	strb	r2, [r3, #0]
    c332:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c336:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c33a:	781b      	ldrb	r3, [r3, #0]
    c33c:	2bff      	cmp	r3, #255	; 0xff
    c33e:	d105      	bne.n	c34c <send_debug+0x308>
    c340:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c348:	2200      	movs	r2, #0
    c34a:	701a      	strb	r2, [r3, #0]
    c34c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c354:	781b      	ldrb	r3, [r3, #0]
    c356:	461a      	mov	r2, r3
    c358:	f24b 136f 	movw	r3, #45423	; 0xb16f
    c35c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c360:	7819      	ldrb	r1, [r3, #0]
    c362:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c36a:	5499      	strb	r1, [r3, r2]
    c36c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c370:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c374:	781a      	ldrb	r2, [r3, #0]
    c376:	f24b 136f 	movw	r3, #45423	; 0xb16f
    c37a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c37e:	781b      	ldrb	r3, [r3, #0]
    c380:	4413      	add	r3, r2
    c382:	b2da      	uxtb	r2, r3
    c384:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c38c:	701a      	strb	r2, [r3, #0]
    c38e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c396:	781a      	ldrb	r2, [r3, #0]
    c398:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c39c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3a0:	781b      	ldrb	r3, [r3, #0]
    c3a2:	4413      	add	r3, r2
    c3a4:	b2da      	uxtb	r2, r3
    c3a6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c3aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3ae:	701a      	strb	r2, [r3, #0]
    c3b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c3b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3b8:	781b      	ldrb	r3, [r3, #0]
    c3ba:	3301      	adds	r3, #1
    c3bc:	b2da      	uxtb	r2, r3
    c3be:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c3c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3c6:	701a      	strb	r2, [r3, #0]
    c3c8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c3cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3d0:	781b      	ldrb	r3, [r3, #0]
    c3d2:	2bff      	cmp	r3, #255	; 0xff
    c3d4:	d105      	bne.n	c3e2 <send_debug+0x39e>
    c3d6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c3da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3de:	2200      	movs	r2, #0
    c3e0:	701a      	strb	r2, [r3, #0]
    c3e2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c3e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3ea:	781b      	ldrb	r3, [r3, #0]
    c3ec:	461a      	mov	r2, r3
    c3ee:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    c3f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3f6:	7819      	ldrb	r1, [r3, #0]
    c3f8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c3fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c400:	5499      	strb	r1, [r3, r2]
    c402:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c40a:	781a      	ldrb	r2, [r3, #0]
    c40c:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    c410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c414:	781b      	ldrb	r3, [r3, #0]
    c416:	4413      	add	r3, r2
    c418:	b2da      	uxtb	r2, r3
    c41a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c41e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c422:	701a      	strb	r2, [r3, #0]
    c424:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c42c:	781a      	ldrb	r2, [r3, #0]
    c42e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c436:	781b      	ldrb	r3, [r3, #0]
    c438:	4413      	add	r3, r2
    c43a:	b2da      	uxtb	r2, r3
    c43c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c444:	701a      	strb	r2, [r3, #0]
    c446:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c44a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c44e:	781b      	ldrb	r3, [r3, #0]
    c450:	3301      	adds	r3, #1
    c452:	b2da      	uxtb	r2, r3
    c454:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c458:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c45c:	701a      	strb	r2, [r3, #0]
    c45e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c466:	781b      	ldrb	r3, [r3, #0]
    c468:	2bff      	cmp	r3, #255	; 0xff
    c46a:	d105      	bne.n	c478 <send_debug+0x434>
    c46c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c474:	2200      	movs	r2, #0
    c476:	701a      	strb	r2, [r3, #0]
    c478:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c480:	781b      	ldrb	r3, [r3, #0]
    c482:	461a      	mov	r2, r3
    c484:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c48c:	7819      	ldrb	r1, [r3, #0]
    c48e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c496:	5499      	strb	r1, [r3, r2]
    c498:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c49c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4a0:	781b      	ldrb	r3, [r3, #0]
    c4a2:	3301      	adds	r3, #1
    c4a4:	b2da      	uxtb	r2, r3
    c4a6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c4aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4ae:	701a      	strb	r2, [r3, #0]
    c4b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c4b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4b8:	781b      	ldrb	r3, [r3, #0]
    c4ba:	2bff      	cmp	r3, #255	; 0xff
    c4bc:	d105      	bne.n	c4ca <send_debug+0x486>
    c4be:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4c6:	2200      	movs	r2, #0
    c4c8:	701a      	strb	r2, [r3, #0]
    c4ca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c4ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4d2:	781b      	ldrb	r3, [r3, #0]
    c4d4:	461a      	mov	r2, r3
    c4d6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c4da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4de:	7819      	ldrb	r1, [r3, #0]
    c4e0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c4e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4e8:	5499      	strb	r1, [r3, r2]
    c4ea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c4ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4f2:	781b      	ldrb	r3, [r3, #0]
    c4f4:	3301      	adds	r3, #1
    c4f6:	b2da      	uxtb	r2, r3
    c4f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c4fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c500:	701a      	strb	r2, [r3, #0]
    c502:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c50a:	781b      	ldrb	r3, [r3, #0]
    c50c:	2bff      	cmp	r3, #255	; 0xff
    c50e:	d105      	bne.n	c51c <send_debug+0x4d8>
    c510:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c514:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c518:	2200      	movs	r2, #0
    c51a:	701a      	strb	r2, [r3, #0]
    c51c:	f242 0339 	movw	r3, #8249	; 0x2039
    c520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c524:	781b      	ldrb	r3, [r3, #0]
    c526:	b2db      	uxtb	r3, r3
    c528:	f003 0310 	and.w	r3, r3, #16
    c52c:	2b00      	cmp	r3, #0
    c52e:	d15a      	bne.n	c5e6 <send_debug+0x5a2>
    c530:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c538:	781b      	ldrb	r3, [r3, #0]
    c53a:	b2db      	uxtb	r3, r3
    c53c:	461a      	mov	r2, r3
    c53e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c546:	5c9a      	ldrb	r2, [r3, r2]
    c548:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    c54c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c550:	701a      	strb	r2, [r3, #0]
    c552:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    c556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c55a:	2200      	movs	r2, #0
    c55c:	701a      	strb	r2, [r3, #0]
    c55e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c566:	781b      	ldrb	r3, [r3, #0]
    c568:	b2db      	uxtb	r3, r3
    c56a:	3301      	adds	r3, #1
    c56c:	b2da      	uxtb	r2, r3
    c56e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c576:	701a      	strb	r2, [r3, #0]
    c578:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c57c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c580:	781b      	ldrb	r3, [r3, #0]
    c582:	b2db      	uxtb	r3, r3
    c584:	2bff      	cmp	r3, #255	; 0xff
    c586:	d105      	bne.n	c594 <send_debug+0x550>
    c588:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c58c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c590:	2200      	movs	r2, #0
    c592:	701a      	strb	r2, [r3, #0]
    c594:	f242 0338 	movw	r3, #8248	; 0x2038
    c598:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c59c:	f242 0238 	movw	r2, #8248	; 0x2038
    c5a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c5a4:	7812      	ldrb	r2, [r2, #0]
    c5a6:	b2d2      	uxtb	r2, r2
    c5a8:	f042 0201 	orr.w	r2, r2, #1
    c5ac:	b2d2      	uxtb	r2, r2
    c5ae:	701a      	strb	r2, [r3, #0]
    c5b0:	f242 0339 	movw	r3, #8249	; 0x2039
    c5b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5b8:	f242 0239 	movw	r2, #8249	; 0x2039
    c5bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c5c0:	7812      	ldrb	r2, [r2, #0]
    c5c2:	b2d2      	uxtb	r2, r2
    c5c4:	f042 0210 	orr.w	r2, r2, #16
    c5c8:	b2d2      	uxtb	r2, r2
    c5ca:	701a      	strb	r2, [r3, #0]
    c5cc:	e00b      	b.n	c5e6 <send_debug+0x5a2>
    c5ce:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    c5d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5d6:	781b      	ldrb	r3, [r3, #0]
    c5d8:	3301      	adds	r3, #1
    c5da:	b2da      	uxtb	r2, r3
    c5dc:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    c5e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5e4:	701a      	strb	r2, [r3, #0]
}
    c5e6:	46bd      	mov	sp, r7
    c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5ec:	4770      	bx	lr
    c5ee:	bf00      	nop

0000c5f0 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c5f0:	b480      	push	{r7}
    c5f2:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c5f4:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    c5f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5fc:	781a      	ldrb	r2, [r3, #0]
    c5fe:	f248 531f 	movw	r3, #34079	; 0x851f
    c602:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c606:	fba3 1302 	umull	r1, r3, r3, r2
    c60a:	095b      	lsrs	r3, r3, #5
    c60c:	2164      	movs	r1, #100	; 0x64
    c60e:	fb01 f303 	mul.w	r3, r1, r3
    c612:	1ad3      	subs	r3, r2, r3
    c614:	b2db      	uxtb	r3, r3
    c616:	2b31      	cmp	r3, #49	; 0x31
    c618:	f040 8395 	bne.w	cd46 <send_nav_ref+0x756>
    c61c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c624:	781a      	ldrb	r2, [r3, #0]
    c626:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c62a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c62e:	781b      	ldrb	r3, [r3, #0]
    c630:	b2db      	uxtb	r3, r3
    c632:	429a      	cmp	r2, r3
    c634:	d313      	bcc.n	c65e <send_nav_ref+0x6e>
    c636:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c63a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c63e:	781b      	ldrb	r3, [r3, #0]
    c640:	b2db      	uxtb	r3, r3
    c642:	461a      	mov	r2, r3
    c644:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c64c:	781b      	ldrb	r3, [r3, #0]
    c64e:	1ad3      	subs	r3, r2, r3
    c650:	33ff      	adds	r3, #255	; 0xff
    c652:	2b0c      	cmp	r3, #12
    c654:	bfd4      	ite	le
    c656:	2300      	movle	r3, #0
    c658:	2301      	movgt	r3, #1
    c65a:	b2db      	uxtb	r3, r3
    c65c:	e011      	b.n	c682 <send_nav_ref+0x92>
    c65e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c666:	781b      	ldrb	r3, [r3, #0]
    c668:	b2db      	uxtb	r3, r3
    c66a:	461a      	mov	r2, r3
    c66c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c674:	781b      	ldrb	r3, [r3, #0]
    c676:	1ad3      	subs	r3, r2, r3
    c678:	2b0c      	cmp	r3, #12
    c67a:	bfd4      	ite	le
    c67c:	2300      	movle	r3, #0
    c67e:	2301      	movgt	r3, #1
    c680:	b2db      	uxtb	r3, r3
    c682:	2b00      	cmp	r3, #0
    c684:	f000 8353 	beq.w	cd2e <send_nav_ref+0x73e>
    c688:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c68c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c690:	781b      	ldrb	r3, [r3, #0]
    c692:	461a      	mov	r2, r3
    c694:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c69c:	2105      	movs	r1, #5
    c69e:	5499      	strb	r1, [r3, r2]
    c6a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c6a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6a8:	781b      	ldrb	r3, [r3, #0]
    c6aa:	3301      	adds	r3, #1
    c6ac:	b2da      	uxtb	r2, r3
    c6ae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c6b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6b6:	701a      	strb	r2, [r3, #0]
    c6b8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c6bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6c0:	781b      	ldrb	r3, [r3, #0]
    c6c2:	2bff      	cmp	r3, #255	; 0xff
    c6c4:	d105      	bne.n	c6d2 <send_nav_ref+0xe2>
    c6c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c6ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6ce:	2200      	movs	r2, #0
    c6d0:	701a      	strb	r2, [r3, #0]
    c6d2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c6d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6da:	781b      	ldrb	r3, [r3, #0]
    c6dc:	461a      	mov	r2, r3
    c6de:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c6e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6e6:	2109      	movs	r1, #9
    c6e8:	5499      	strb	r1, [r3, r2]
    c6ea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c6ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6f2:	781b      	ldrb	r3, [r3, #0]
    c6f4:	3301      	adds	r3, #1
    c6f6:	b2da      	uxtb	r2, r3
    c6f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c6fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c700:	701a      	strb	r2, [r3, #0]
    c702:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c706:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c70a:	781b      	ldrb	r3, [r3, #0]
    c70c:	2bff      	cmp	r3, #255	; 0xff
    c70e:	d105      	bne.n	c71c <send_nav_ref+0x12c>
    c710:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c714:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c718:	2200      	movs	r2, #0
    c71a:	701a      	strb	r2, [r3, #0]
    c71c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c724:	2209      	movs	r2, #9
    c726:	701a      	strb	r2, [r3, #0]
    c728:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c72c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c730:	2209      	movs	r2, #9
    c732:	701a      	strb	r2, [r3, #0]
    c734:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c73c:	781b      	ldrb	r3, [r3, #0]
    c73e:	461a      	mov	r2, r3
    c740:	f648 0360 	movw	r3, #34912	; 0x8860
    c744:	f2c0 0301 	movt	r3, #1
    c748:	7819      	ldrb	r1, [r3, #0]
    c74a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c74e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c752:	5499      	strb	r1, [r3, r2]
    c754:	f648 0360 	movw	r3, #34912	; 0x8860
    c758:	f2c0 0301 	movt	r3, #1
    c75c:	781a      	ldrb	r2, [r3, #0]
    c75e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c766:	781b      	ldrb	r3, [r3, #0]
    c768:	4413      	add	r3, r2
    c76a:	b2da      	uxtb	r2, r3
    c76c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c774:	701a      	strb	r2, [r3, #0]
    c776:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c77a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c77e:	781a      	ldrb	r2, [r3, #0]
    c780:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c788:	781b      	ldrb	r3, [r3, #0]
    c78a:	4413      	add	r3, r2
    c78c:	b2da      	uxtb	r2, r3
    c78e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c796:	701a      	strb	r2, [r3, #0]
    c798:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c79c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7a0:	781b      	ldrb	r3, [r3, #0]
    c7a2:	3301      	adds	r3, #1
    c7a4:	b2da      	uxtb	r2, r3
    c7a6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c7aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7ae:	701a      	strb	r2, [r3, #0]
    c7b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c7b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7b8:	781b      	ldrb	r3, [r3, #0]
    c7ba:	2bff      	cmp	r3, #255	; 0xff
    c7bc:	d105      	bne.n	c7ca <send_nav_ref+0x1da>
    c7be:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c7c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7c6:	2200      	movs	r2, #0
    c7c8:	701a      	strb	r2, [r3, #0]
    c7ca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c7ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7d2:	781b      	ldrb	r3, [r3, #0]
    c7d4:	461a      	mov	r2, r3
    c7d6:	f648 0360 	movw	r3, #34912	; 0x8860
    c7da:	f2c0 0301 	movt	r3, #1
    c7de:	7859      	ldrb	r1, [r3, #1]
    c7e0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c7e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7e8:	5499      	strb	r1, [r3, r2]
    c7ea:	4bd2      	ldr	r3, [pc, #840]	; (cb34 <send_nav_ref+0x544>)
    c7ec:	781a      	ldrb	r2, [r3, #0]
    c7ee:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c7f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7f6:	781b      	ldrb	r3, [r3, #0]
    c7f8:	4413      	add	r3, r2
    c7fa:	b2da      	uxtb	r2, r3
    c7fc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c800:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c804:	701a      	strb	r2, [r3, #0]
    c806:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c80a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c80e:	781a      	ldrb	r2, [r3, #0]
    c810:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c818:	781b      	ldrb	r3, [r3, #0]
    c81a:	4413      	add	r3, r2
    c81c:	b2da      	uxtb	r2, r3
    c81e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c826:	701a      	strb	r2, [r3, #0]
    c828:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c82c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c830:	781b      	ldrb	r3, [r3, #0]
    c832:	3301      	adds	r3, #1
    c834:	b2da      	uxtb	r2, r3
    c836:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c83a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c83e:	701a      	strb	r2, [r3, #0]
    c840:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c844:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c848:	781b      	ldrb	r3, [r3, #0]
    c84a:	2bff      	cmp	r3, #255	; 0xff
    c84c:	d105      	bne.n	c85a <send_nav_ref+0x26a>
    c84e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c856:	2200      	movs	r2, #0
    c858:	701a      	strb	r2, [r3, #0]
    c85a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c85e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c862:	781b      	ldrb	r3, [r3, #0]
    c864:	461a      	mov	r2, r3
    c866:	f648 0360 	movw	r3, #34912	; 0x8860
    c86a:	f2c0 0301 	movt	r3, #1
    c86e:	7899      	ldrb	r1, [r3, #2]
    c870:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c874:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c878:	5499      	strb	r1, [r3, r2]
    c87a:	4baf      	ldr	r3, [pc, #700]	; (cb38 <send_nav_ref+0x548>)
    c87c:	781a      	ldrb	r2, [r3, #0]
    c87e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c886:	781b      	ldrb	r3, [r3, #0]
    c888:	4413      	add	r3, r2
    c88a:	b2da      	uxtb	r2, r3
    c88c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c890:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c894:	701a      	strb	r2, [r3, #0]
    c896:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c89a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c89e:	781a      	ldrb	r2, [r3, #0]
    c8a0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c8a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8a8:	781b      	ldrb	r3, [r3, #0]
    c8aa:	4413      	add	r3, r2
    c8ac:	b2da      	uxtb	r2, r3
    c8ae:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c8b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8b6:	701a      	strb	r2, [r3, #0]
    c8b8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c8bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8c0:	781b      	ldrb	r3, [r3, #0]
    c8c2:	3301      	adds	r3, #1
    c8c4:	b2da      	uxtb	r2, r3
    c8c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c8ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8ce:	701a      	strb	r2, [r3, #0]
    c8d0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c8d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8d8:	781b      	ldrb	r3, [r3, #0]
    c8da:	2bff      	cmp	r3, #255	; 0xff
    c8dc:	d105      	bne.n	c8ea <send_nav_ref+0x2fa>
    c8de:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c8e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8e6:	2200      	movs	r2, #0
    c8e8:	701a      	strb	r2, [r3, #0]
    c8ea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c8ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8f2:	781b      	ldrb	r3, [r3, #0]
    c8f4:	461a      	mov	r2, r3
    c8f6:	f648 0360 	movw	r3, #34912	; 0x8860
    c8fa:	f2c0 0301 	movt	r3, #1
    c8fe:	78d9      	ldrb	r1, [r3, #3]
    c900:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c904:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c908:	5499      	strb	r1, [r3, r2]
    c90a:	4b8c      	ldr	r3, [pc, #560]	; (cb3c <send_nav_ref+0x54c>)
    c90c:	781a      	ldrb	r2, [r3, #0]
    c90e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c916:	781b      	ldrb	r3, [r3, #0]
    c918:	4413      	add	r3, r2
    c91a:	b2da      	uxtb	r2, r3
    c91c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c924:	701a      	strb	r2, [r3, #0]
    c926:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c92a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c92e:	781a      	ldrb	r2, [r3, #0]
    c930:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c938:	781b      	ldrb	r3, [r3, #0]
    c93a:	4413      	add	r3, r2
    c93c:	b2da      	uxtb	r2, r3
    c93e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c946:	701a      	strb	r2, [r3, #0]
    c948:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c94c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c950:	781b      	ldrb	r3, [r3, #0]
    c952:	3301      	adds	r3, #1
    c954:	b2da      	uxtb	r2, r3
    c956:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c95a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c95e:	701a      	strb	r2, [r3, #0]
    c960:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c964:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c968:	781b      	ldrb	r3, [r3, #0]
    c96a:	2bff      	cmp	r3, #255	; 0xff
    c96c:	d105      	bne.n	c97a <send_nav_ref+0x38a>
    c96e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c976:	2200      	movs	r2, #0
    c978:	701a      	strb	r2, [r3, #0]
    c97a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c97e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c982:	781b      	ldrb	r3, [r3, #0]
    c984:	461a      	mov	r2, r3
    c986:	f648 0364 	movw	r3, #34916	; 0x8864
    c98a:	f2c0 0301 	movt	r3, #1
    c98e:	7819      	ldrb	r1, [r3, #0]
    c990:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c998:	5499      	strb	r1, [r3, r2]
    c99a:	f648 0364 	movw	r3, #34916	; 0x8864
    c99e:	f2c0 0301 	movt	r3, #1
    c9a2:	781a      	ldrb	r2, [r3, #0]
    c9a4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c9a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9ac:	781b      	ldrb	r3, [r3, #0]
    c9ae:	4413      	add	r3, r2
    c9b0:	b2da      	uxtb	r2, r3
    c9b2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c9b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9ba:	701a      	strb	r2, [r3, #0]
    c9bc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c9c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9c4:	781a      	ldrb	r2, [r3, #0]
    c9c6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c9ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9ce:	781b      	ldrb	r3, [r3, #0]
    c9d0:	4413      	add	r3, r2
    c9d2:	b2da      	uxtb	r2, r3
    c9d4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c9d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9dc:	701a      	strb	r2, [r3, #0]
    c9de:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c9e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9e6:	781b      	ldrb	r3, [r3, #0]
    c9e8:	3301      	adds	r3, #1
    c9ea:	b2da      	uxtb	r2, r3
    c9ec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c9f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9f4:	701a      	strb	r2, [r3, #0]
    c9f6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c9fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9fe:	781b      	ldrb	r3, [r3, #0]
    ca00:	2bff      	cmp	r3, #255	; 0xff
    ca02:	d105      	bne.n	ca10 <send_nav_ref+0x420>
    ca04:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ca08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca0c:	2200      	movs	r2, #0
    ca0e:	701a      	strb	r2, [r3, #0]
    ca10:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ca14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca18:	781b      	ldrb	r3, [r3, #0]
    ca1a:	461a      	mov	r2, r3
    ca1c:	f648 0364 	movw	r3, #34916	; 0x8864
    ca20:	f2c0 0301 	movt	r3, #1
    ca24:	7859      	ldrb	r1, [r3, #1]
    ca26:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ca2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca2e:	5499      	strb	r1, [r3, r2]
    ca30:	4b43      	ldr	r3, [pc, #268]	; (cb40 <send_nav_ref+0x550>)
    ca32:	781a      	ldrb	r2, [r3, #0]
    ca34:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ca38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca3c:	781b      	ldrb	r3, [r3, #0]
    ca3e:	4413      	add	r3, r2
    ca40:	b2da      	uxtb	r2, r3
    ca42:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ca46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca4a:	701a      	strb	r2, [r3, #0]
    ca4c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ca50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca54:	781a      	ldrb	r2, [r3, #0]
    ca56:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ca5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca5e:	781b      	ldrb	r3, [r3, #0]
    ca60:	4413      	add	r3, r2
    ca62:	b2da      	uxtb	r2, r3
    ca64:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ca68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca6c:	701a      	strb	r2, [r3, #0]
    ca6e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ca72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca76:	781b      	ldrb	r3, [r3, #0]
    ca78:	3301      	adds	r3, #1
    ca7a:	b2da      	uxtb	r2, r3
    ca7c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ca80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca84:	701a      	strb	r2, [r3, #0]
    ca86:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ca8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca8e:	781b      	ldrb	r3, [r3, #0]
    ca90:	2bff      	cmp	r3, #255	; 0xff
    ca92:	d105      	bne.n	caa0 <send_nav_ref+0x4b0>
    ca94:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ca98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca9c:	2200      	movs	r2, #0
    ca9e:	701a      	strb	r2, [r3, #0]
    caa0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    caa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    caa8:	781b      	ldrb	r3, [r3, #0]
    caaa:	461a      	mov	r2, r3
    caac:	f648 0364 	movw	r3, #34916	; 0x8864
    cab0:	f2c0 0301 	movt	r3, #1
    cab4:	7899      	ldrb	r1, [r3, #2]
    cab6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    caba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cabe:	5499      	strb	r1, [r3, r2]
    cac0:	4b20      	ldr	r3, [pc, #128]	; (cb44 <send_nav_ref+0x554>)
    cac2:	781a      	ldrb	r2, [r3, #0]
    cac4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cacc:	781b      	ldrb	r3, [r3, #0]
    cace:	4413      	add	r3, r2
    cad0:	b2da      	uxtb	r2, r3
    cad2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cada:	701a      	strb	r2, [r3, #0]
    cadc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    cae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cae4:	781a      	ldrb	r2, [r3, #0]
    cae6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    caea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    caee:	781b      	ldrb	r3, [r3, #0]
    caf0:	4413      	add	r3, r2
    caf2:	b2da      	uxtb	r2, r3
    caf4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    caf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cafc:	701a      	strb	r2, [r3, #0]
    cafe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cb02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb06:	781b      	ldrb	r3, [r3, #0]
    cb08:	3301      	adds	r3, #1
    cb0a:	b2da      	uxtb	r2, r3
    cb0c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cb10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb14:	701a      	strb	r2, [r3, #0]
    cb16:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cb1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb1e:	781b      	ldrb	r3, [r3, #0]
    cb20:	2bff      	cmp	r3, #255	; 0xff
    cb22:	d111      	bne.n	cb48 <send_nav_ref+0x558>
    cb24:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cb28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb2c:	2200      	movs	r2, #0
    cb2e:	701a      	strb	r2, [r3, #0]
    cb30:	e00a      	b.n	cb48 <send_nav_ref+0x558>
    cb32:	bf00      	nop
    cb34:	00018861 	.word	0x00018861
    cb38:	00018862 	.word	0x00018862
    cb3c:	00018863 	.word	0x00018863
    cb40:	00018865 	.word	0x00018865
    cb44:	00018866 	.word	0x00018866
    cb48:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cb4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb50:	781b      	ldrb	r3, [r3, #0]
    cb52:	461a      	mov	r2, r3
    cb54:	f648 0364 	movw	r3, #34916	; 0x8864
    cb58:	f2c0 0301 	movt	r3, #1
    cb5c:	78d9      	ldrb	r1, [r3, #3]
    cb5e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    cb62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb66:	5499      	strb	r1, [r3, r2]
    cb68:	4b79      	ldr	r3, [pc, #484]	; (cd50 <send_nav_ref+0x760>)
    cb6a:	781a      	ldrb	r2, [r3, #0]
    cb6c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cb70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb74:	781b      	ldrb	r3, [r3, #0]
    cb76:	4413      	add	r3, r2
    cb78:	b2da      	uxtb	r2, r3
    cb7a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cb7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb82:	701a      	strb	r2, [r3, #0]
    cb84:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    cb88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb8c:	781a      	ldrb	r2, [r3, #0]
    cb8e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cb92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb96:	781b      	ldrb	r3, [r3, #0]
    cb98:	4413      	add	r3, r2
    cb9a:	b2da      	uxtb	r2, r3
    cb9c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    cba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cba4:	701a      	strb	r2, [r3, #0]
    cba6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cbaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbae:	781b      	ldrb	r3, [r3, #0]
    cbb0:	3301      	adds	r3, #1
    cbb2:	b2da      	uxtb	r2, r3
    cbb4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cbb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbbc:	701a      	strb	r2, [r3, #0]
    cbbe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cbc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbc6:	781b      	ldrb	r3, [r3, #0]
    cbc8:	2bff      	cmp	r3, #255	; 0xff
    cbca:	d105      	bne.n	cbd8 <send_nav_ref+0x5e8>
    cbcc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cbd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbd4:	2200      	movs	r2, #0
    cbd6:	701a      	strb	r2, [r3, #0]
    cbd8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cbdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbe0:	781b      	ldrb	r3, [r3, #0]
    cbe2:	461a      	mov	r2, r3
    cbe4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cbe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbec:	7819      	ldrb	r1, [r3, #0]
    cbee:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    cbf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbf6:	5499      	strb	r1, [r3, r2]
    cbf8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cbfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc00:	781b      	ldrb	r3, [r3, #0]
    cc02:	3301      	adds	r3, #1
    cc04:	b2da      	uxtb	r2, r3
    cc06:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cc0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc0e:	701a      	strb	r2, [r3, #0]
    cc10:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cc14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc18:	781b      	ldrb	r3, [r3, #0]
    cc1a:	2bff      	cmp	r3, #255	; 0xff
    cc1c:	d105      	bne.n	cc2a <send_nav_ref+0x63a>
    cc1e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cc22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc26:	2200      	movs	r2, #0
    cc28:	701a      	strb	r2, [r3, #0]
    cc2a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cc2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc32:	781b      	ldrb	r3, [r3, #0]
    cc34:	461a      	mov	r2, r3
    cc36:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    cc3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc3e:	7819      	ldrb	r1, [r3, #0]
    cc40:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    cc44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc48:	5499      	strb	r1, [r3, r2]
    cc4a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cc4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc52:	781b      	ldrb	r3, [r3, #0]
    cc54:	3301      	adds	r3, #1
    cc56:	b2da      	uxtb	r2, r3
    cc58:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cc5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc60:	701a      	strb	r2, [r3, #0]
    cc62:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cc66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc6a:	781b      	ldrb	r3, [r3, #0]
    cc6c:	2bff      	cmp	r3, #255	; 0xff
    cc6e:	d105      	bne.n	cc7c <send_nav_ref+0x68c>
    cc70:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cc74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc78:	2200      	movs	r2, #0
    cc7a:	701a      	strb	r2, [r3, #0]
    cc7c:	f242 0339 	movw	r3, #8249	; 0x2039
    cc80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc84:	781b      	ldrb	r3, [r3, #0]
    cc86:	b2db      	uxtb	r3, r3
    cc88:	f003 0310 	and.w	r3, r3, #16
    cc8c:	2b00      	cmp	r3, #0
    cc8e:	d15a      	bne.n	cd46 <send_nav_ref+0x756>
    cc90:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    cc94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc98:	781b      	ldrb	r3, [r3, #0]
    cc9a:	b2db      	uxtb	r3, r3
    cc9c:	461a      	mov	r2, r3
    cc9e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    cca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cca6:	5c9a      	ldrb	r2, [r3, r2]
    cca8:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    ccac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccb0:	701a      	strb	r2, [r3, #0]
    ccb2:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    ccb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccba:	2200      	movs	r2, #0
    ccbc:	701a      	strb	r2, [r3, #0]
    ccbe:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    ccc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccc6:	781b      	ldrb	r3, [r3, #0]
    ccc8:	b2db      	uxtb	r3, r3
    ccca:	3301      	adds	r3, #1
    cccc:	b2da      	uxtb	r2, r3
    ccce:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    ccd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccd6:	701a      	strb	r2, [r3, #0]
    ccd8:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    ccdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cce0:	781b      	ldrb	r3, [r3, #0]
    cce2:	b2db      	uxtb	r3, r3
    cce4:	2bff      	cmp	r3, #255	; 0xff
    cce6:	d105      	bne.n	ccf4 <send_nav_ref+0x704>
    cce8:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    ccec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccf0:	2200      	movs	r2, #0
    ccf2:	701a      	strb	r2, [r3, #0]
    ccf4:	f242 0338 	movw	r3, #8248	; 0x2038
    ccf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccfc:	f242 0238 	movw	r2, #8248	; 0x2038
    cd00:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cd04:	7812      	ldrb	r2, [r2, #0]
    cd06:	b2d2      	uxtb	r2, r2
    cd08:	f042 0201 	orr.w	r2, r2, #1
    cd0c:	b2d2      	uxtb	r2, r2
    cd0e:	701a      	strb	r2, [r3, #0]
    cd10:	f242 0339 	movw	r3, #8249	; 0x2039
    cd14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd18:	f242 0239 	movw	r2, #8249	; 0x2039
    cd1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cd20:	7812      	ldrb	r2, [r2, #0]
    cd22:	b2d2      	uxtb	r2, r2
    cd24:	f042 0210 	orr.w	r2, r2, #16
    cd28:	b2d2      	uxtb	r2, r2
    cd2a:	701a      	strb	r2, [r3, #0]
    cd2c:	e00b      	b.n	cd46 <send_nav_ref+0x756>
    cd2e:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    cd32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd36:	781b      	ldrb	r3, [r3, #0]
    cd38:	3301      	adds	r3, #1
    cd3a:	b2da      	uxtb	r2, r3
    cd3c:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    cd40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd44:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    cd46:	46bd      	mov	sp, r7
    cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd4c:	4770      	bx	lr
    cd4e:	bf00      	nop
    cd50:	00018867 	.word	0x00018867

0000cd54 <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    cd54:	b480      	push	{r7}
    cd56:	b083      	sub	sp, #12
    cd58:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    cd5a:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    cd5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd62:	8a1b      	ldrh	r3, [r3, #16]
    cd64:	b21b      	sxth	r3, r3
    cd66:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    cd6a:	db0d      	blt.n	cd88 <inflight_calib_mode_update+0x34>
    cd6c:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    cd70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd74:	8a1b      	ldrh	r3, [r3, #16]
    cd76:	b21a      	sxth	r2, r3
    cd78:	f640 437f 	movw	r3, #3199	; 0xc7f
    cd7c:	429a      	cmp	r2, r3
    cd7e:	bfd4      	ite	le
    cd80:	2300      	movle	r3, #0
    cd82:	2301      	movgt	r3, #1
    cd84:	b2db      	uxtb	r3, r3
    cd86:	e000      	b.n	cd8a <inflight_calib_mode_update+0x36>
    cd88:	2302      	movs	r3, #2
    cd8a:	71fb      	strb	r3, [r7, #7]
    cd8c:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    cd90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd94:	781b      	ldrb	r3, [r3, #0]
    cd96:	79fa      	ldrb	r2, [r7, #7]
    cd98:	429a      	cmp	r2, r3
    cd9a:	d007      	beq.n	cdac <inflight_calib_mode_update+0x58>
    cd9c:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    cda0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cda4:	79fa      	ldrb	r2, [r7, #7]
    cda6:	701a      	strb	r2, [r3, #0]
    cda8:	2301      	movs	r3, #1
    cdaa:	e000      	b.n	cdae <inflight_calib_mode_update+0x5a>
    cdac:	2300      	movs	r3, #0
}
    cdae:	4618      	mov	r0, r3
    cdb0:	370c      	adds	r7, #12
    cdb2:	46bd      	mov	sp, r7
    cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    cdb8:	4770      	bx	lr
    cdba:	bf00      	nop

0000cdbc <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    cdbc:	b580      	push	{r7, lr}
    cdbe:	b082      	sub	sp, #8
    cdc0:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    cdc2:	f24b 0306 	movw	r3, #45062	; 0xb006
    cdc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdca:	2201      	movs	r2, #1
    cdcc:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    cdce:	f24b 0306 	movw	r3, #45062	; 0xb006
    cdd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdd6:	781b      	ldrb	r3, [r3, #0]
    cdd8:	b2db      	uxtb	r3, r3
    cdda:	2b00      	cmp	r3, #0
    cddc:	f000 83b8 	beq.w	d550 <radio_control_task+0x794>
    uint8_t mode_changed = FALSE;
    cde0:	2300      	movs	r3, #0
    cde2:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    cde4:	f7fa fa9c 	bl	7320 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    cde8:	4b3a      	ldr	r3, [pc, #232]	; (ced4 <radio_control_task+0x118>)
    cdea:	781b      	ldrb	r3, [r3, #0]
    cdec:	b2db      	uxtb	r3, r3
    cdee:	f003 0302 	and.w	r3, r3, #2
    cdf2:	2b00      	cmp	r3, #0
    cdf4:	d00d      	beq.n	ce12 <radio_control_task+0x56>
    cdf6:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    cdfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdfe:	781b      	ldrb	r3, [r3, #0]
    ce00:	2b01      	cmp	r3, #1
    ce02:	d00d      	beq.n	ce20 <radio_control_task+0x64>
    ce04:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    ce08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce0c:	781b      	ldrb	r3, [r3, #0]
    ce0e:	2b00      	cmp	r3, #0
    ce10:	d006      	beq.n	ce20 <radio_control_task+0x64>
    ce12:	f24b 2364 	movw	r3, #45668	; 0xb264
    ce16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce1a:	781b      	ldrb	r3, [r3, #0]
    ce1c:	2b00      	cmp	r3, #0
    ce1e:	d007      	beq.n	ce30 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    ce20:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    ce24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce28:	2203      	movs	r2, #3
    ce2a:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    ce2c:	2301      	movs	r3, #1
    ce2e:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    //if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    ce30:	f7fa f950 	bl	70d4 <pprz_mode_update>
    ce34:	4603      	mov	r3, r0
    ce36:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    ce38:	79fa      	ldrb	r2, [r7, #7]
    ce3a:	79bb      	ldrb	r3, [r7, #6]
    ce3c:	4313      	orrs	r3, r2
    ce3e:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    ce40:	f7fa f994 	bl	716c <ir_estim_mode_update>
    ce44:	4603      	mov	r3, r0
    ce46:	461a      	mov	r2, r3
    ce48:	79fb      	ldrb	r3, [r7, #7]
    ce4a:	4313      	orrs	r3, r2
    ce4c:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    ce4e:	f7ff ff81 	bl	cd54 <inflight_calib_mode_update>
    ce52:	4603      	mov	r3, r0
    ce54:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    ce56:	797b      	ldrb	r3, [r7, #5]
    ce58:	2b00      	cmp	r3, #0
    ce5a:	d102      	bne.n	ce62 <radio_control_task+0xa6>
    ce5c:	79bb      	ldrb	r3, [r7, #6]
    ce5e:	2b00      	cmp	r3, #0
    ce60:	d001      	beq.n	ce66 <radio_control_task+0xaa>
    ce62:	2301      	movs	r3, #1
    ce64:	e000      	b.n	ce68 <radio_control_task+0xac>
    ce66:	2300      	movs	r3, #0
    ce68:	b2db      	uxtb	r3, r3
    ce6a:	4618      	mov	r0, r3
    ce6c:	f008 fba0 	bl	155b0 <inflight_calib>
      mode_changed |= calib_mode_changed;
    ce70:	79fa      	ldrb	r2, [r7, #7]
    ce72:	797b      	ldrb	r3, [r7, #5]
    ce74:	4313      	orrs	r3, r2
    ce76:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    ce78:	f7fa f9a0 	bl	71bc <mcu1_status_update>
    ce7c:	4603      	mov	r3, r0
    ce7e:	461a      	mov	r2, r3
    ce80:	79fb      	ldrb	r3, [r7, #7]
    ce82:	4313      	orrs	r3, r2
    ce84:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    ce86:	2301      	movs	r3, #1
    ce88:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    ce8a:	79fb      	ldrb	r3, [r7, #7]
    ce8c:	2b00      	cmp	r3, #0
    ce8e:	f000 82bc 	beq.w	d40a <radio_control_task+0x64e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    ce92:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ce96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce9a:	781a      	ldrb	r2, [r3, #0]
    ce9c:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    cea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cea4:	781b      	ldrb	r3, [r3, #0]
    cea6:	b2db      	uxtb	r3, r3
    cea8:	429a      	cmp	r2, r3
    ceaa:	d315      	bcc.n	ced8 <radio_control_task+0x11c>
    ceac:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    ceb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ceb4:	781b      	ldrb	r3, [r3, #0]
    ceb6:	b2db      	uxtb	r3, r3
    ceb8:	461a      	mov	r2, r3
    ceba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cec2:	781b      	ldrb	r3, [r3, #0]
    cec4:	1ad3      	subs	r3, r2, r3
    cec6:	33ff      	adds	r3, #255	; 0xff
    cec8:	2b09      	cmp	r3, #9
    ceca:	bfd4      	ite	le
    cecc:	2300      	movle	r3, #0
    cece:	2301      	movgt	r3, #1
    ced0:	b2db      	uxtb	r3, r3
    ced2:	e013      	b.n	cefc <radio_control_task+0x140>
    ced4:	2000afeb 	.word	0x2000afeb
    ced8:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    cedc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cee0:	781b      	ldrb	r3, [r3, #0]
    cee2:	b2db      	uxtb	r3, r3
    cee4:	461a      	mov	r2, r3
    cee6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ceea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ceee:	781b      	ldrb	r3, [r3, #0]
    cef0:	1ad3      	subs	r3, r2, r3
    cef2:	2b09      	cmp	r3, #9
    cef4:	bfd4      	ite	le
    cef6:	2300      	movle	r3, #0
    cef8:	2301      	movgt	r3, #1
    cefa:	b2db      	uxtb	r3, r3
    cefc:	2b00      	cmp	r3, #0
    cefe:	f000 8278 	beq.w	d3f2 <radio_control_task+0x636>
    cf02:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cf06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf0a:	781b      	ldrb	r3, [r3, #0]
    cf0c:	461a      	mov	r2, r3
    cf0e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    cf12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf16:	2105      	movs	r1, #5
    cf18:	5499      	strb	r1, [r3, r2]
    cf1a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cf1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf22:	781b      	ldrb	r3, [r3, #0]
    cf24:	3301      	adds	r3, #1
    cf26:	b2da      	uxtb	r2, r3
    cf28:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cf2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf30:	701a      	strb	r2, [r3, #0]
    cf32:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cf36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf3a:	781b      	ldrb	r3, [r3, #0]
    cf3c:	2bff      	cmp	r3, #255	; 0xff
    cf3e:	d105      	bne.n	cf4c <radio_control_task+0x190>
    cf40:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cf44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf48:	2200      	movs	r2, #0
    cf4a:	701a      	strb	r2, [r3, #0]
    cf4c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cf50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf54:	781b      	ldrb	r3, [r3, #0]
    cf56:	461a      	mov	r2, r3
    cf58:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    cf5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf60:	210b      	movs	r1, #11
    cf62:	5499      	strb	r1, [r3, r2]
    cf64:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cf68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf6c:	781b      	ldrb	r3, [r3, #0]
    cf6e:	3301      	adds	r3, #1
    cf70:	b2da      	uxtb	r2, r3
    cf72:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cf76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf7a:	701a      	strb	r2, [r3, #0]
    cf7c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cf80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf84:	781b      	ldrb	r3, [r3, #0]
    cf86:	2bff      	cmp	r3, #255	; 0xff
    cf88:	d105      	bne.n	cf96 <radio_control_task+0x1da>
    cf8a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cf8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf92:	2200      	movs	r2, #0
    cf94:	701a      	strb	r2, [r3, #0]
    cf96:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cf9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf9e:	220b      	movs	r2, #11
    cfa0:	701a      	strb	r2, [r3, #0]
    cfa2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    cfa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfaa:	220b      	movs	r2, #11
    cfac:	701a      	strb	r2, [r3, #0]
    cfae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cfb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfb6:	781b      	ldrb	r3, [r3, #0]
    cfb8:	461a      	mov	r2, r3
    cfba:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    cfbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfc2:	7819      	ldrb	r1, [r3, #0]
    cfc4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    cfc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfcc:	5499      	strb	r1, [r3, r2]
    cfce:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cfd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfd6:	781a      	ldrb	r2, [r3, #0]
    cfd8:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    cfdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfe0:	781b      	ldrb	r3, [r3, #0]
    cfe2:	4413      	add	r3, r2
    cfe4:	b2da      	uxtb	r2, r3
    cfe6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cfea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfee:	701a      	strb	r2, [r3, #0]
    cff0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    cff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cff8:	781a      	ldrb	r2, [r3, #0]
    cffa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d002:	781b      	ldrb	r3, [r3, #0]
    d004:	4413      	add	r3, r2
    d006:	b2da      	uxtb	r2, r3
    d008:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d00c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d010:	701a      	strb	r2, [r3, #0]
    d012:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d01a:	781b      	ldrb	r3, [r3, #0]
    d01c:	3301      	adds	r3, #1
    d01e:	b2da      	uxtb	r2, r3
    d020:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d024:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d028:	701a      	strb	r2, [r3, #0]
    d02a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d02e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d032:	781b      	ldrb	r3, [r3, #0]
    d034:	2bff      	cmp	r3, #255	; 0xff
    d036:	d105      	bne.n	d044 <radio_control_task+0x288>
    d038:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d03c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d040:	2200      	movs	r2, #0
    d042:	701a      	strb	r2, [r3, #0]
    d044:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d04c:	781b      	ldrb	r3, [r3, #0]
    d04e:	461a      	mov	r2, r3
    d050:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
    d054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d058:	7819      	ldrb	r1, [r3, #0]
    d05a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d05e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d062:	5499      	strb	r1, [r3, r2]
    d064:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d06c:	781a      	ldrb	r2, [r3, #0]
    d06e:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
    d072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d076:	781b      	ldrb	r3, [r3, #0]
    d078:	4413      	add	r3, r2
    d07a:	b2da      	uxtb	r2, r3
    d07c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d080:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d084:	701a      	strb	r2, [r3, #0]
    d086:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d08a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d08e:	781a      	ldrb	r2, [r3, #0]
    d090:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d098:	781b      	ldrb	r3, [r3, #0]
    d09a:	4413      	add	r3, r2
    d09c:	b2da      	uxtb	r2, r3
    d09e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d0a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0a6:	701a      	strb	r2, [r3, #0]
    d0a8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d0ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0b0:	781b      	ldrb	r3, [r3, #0]
    d0b2:	3301      	adds	r3, #1
    d0b4:	b2da      	uxtb	r2, r3
    d0b6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d0ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0be:	701a      	strb	r2, [r3, #0]
    d0c0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0c8:	781b      	ldrb	r3, [r3, #0]
    d0ca:	2bff      	cmp	r3, #255	; 0xff
    d0cc:	d105      	bne.n	d0da <radio_control_task+0x31e>
    d0ce:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d0d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0d6:	2200      	movs	r2, #0
    d0d8:	701a      	strb	r2, [r3, #0]
    d0da:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d0de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0e2:	781b      	ldrb	r3, [r3, #0]
    d0e4:	461a      	mov	r2, r3
    d0e6:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    d0ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0ee:	7819      	ldrb	r1, [r3, #0]
    d0f0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d0f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0f8:	5499      	strb	r1, [r3, r2]
    d0fa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d0fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d102:	781a      	ldrb	r2, [r3, #0]
    d104:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    d108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d10c:	781b      	ldrb	r3, [r3, #0]
    d10e:	4413      	add	r3, r2
    d110:	b2da      	uxtb	r2, r3
    d112:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d11a:	701a      	strb	r2, [r3, #0]
    d11c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d120:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d124:	781a      	ldrb	r2, [r3, #0]
    d126:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d12a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d12e:	781b      	ldrb	r3, [r3, #0]
    d130:	4413      	add	r3, r2
    d132:	b2da      	uxtb	r2, r3
    d134:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d13c:	701a      	strb	r2, [r3, #0]
    d13e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d146:	781b      	ldrb	r3, [r3, #0]
    d148:	3301      	adds	r3, #1
    d14a:	b2da      	uxtb	r2, r3
    d14c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d150:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d154:	701a      	strb	r2, [r3, #0]
    d156:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d15a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d15e:	781b      	ldrb	r3, [r3, #0]
    d160:	2bff      	cmp	r3, #255	; 0xff
    d162:	d105      	bne.n	d170 <radio_control_task+0x3b4>
    d164:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d16c:	2200      	movs	r2, #0
    d16e:	701a      	strb	r2, [r3, #0]
    d170:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d174:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d178:	781b      	ldrb	r3, [r3, #0]
    d17a:	461a      	mov	r2, r3
    d17c:	f64a 63bb 	movw	r3, #44731	; 0xaebb
    d180:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d184:	7819      	ldrb	r1, [r3, #0]
    d186:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d18a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d18e:	5499      	strb	r1, [r3, r2]
    d190:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d198:	781a      	ldrb	r2, [r3, #0]
    d19a:	f64a 63bb 	movw	r3, #44731	; 0xaebb
    d19e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1a2:	781b      	ldrb	r3, [r3, #0]
    d1a4:	4413      	add	r3, r2
    d1a6:	b2da      	uxtb	r2, r3
    d1a8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d1ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1b0:	701a      	strb	r2, [r3, #0]
    d1b2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d1b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1ba:	781a      	ldrb	r2, [r3, #0]
    d1bc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d1c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1c4:	781b      	ldrb	r3, [r3, #0]
    d1c6:	4413      	add	r3, r2
    d1c8:	b2da      	uxtb	r2, r3
    d1ca:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d1ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1d2:	701a      	strb	r2, [r3, #0]
    d1d4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d1d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1dc:	781b      	ldrb	r3, [r3, #0]
    d1de:	3301      	adds	r3, #1
    d1e0:	b2da      	uxtb	r2, r3
    d1e2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d1e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1ea:	701a      	strb	r2, [r3, #0]
    d1ec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d1f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1f4:	781b      	ldrb	r3, [r3, #0]
    d1f6:	2bff      	cmp	r3, #255	; 0xff
    d1f8:	d105      	bne.n	d206 <radio_control_task+0x44a>
    d1fa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d1fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d202:	2200      	movs	r2, #0
    d204:	701a      	strb	r2, [r3, #0]
    d206:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d20a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d20e:	781b      	ldrb	r3, [r3, #0]
    d210:	461a      	mov	r2, r3
    d212:	f240 33ec 	movw	r3, #1004	; 0x3ec
    d216:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d21a:	7819      	ldrb	r1, [r3, #0]
    d21c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d220:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d224:	5499      	strb	r1, [r3, r2]
    d226:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d22a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d22e:	781a      	ldrb	r2, [r3, #0]
    d230:	f240 33ec 	movw	r3, #1004	; 0x3ec
    d234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d238:	781b      	ldrb	r3, [r3, #0]
    d23a:	4413      	add	r3, r2
    d23c:	b2da      	uxtb	r2, r3
    d23e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d246:	701a      	strb	r2, [r3, #0]
    d248:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d24c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d250:	781a      	ldrb	r2, [r3, #0]
    d252:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d25a:	781b      	ldrb	r3, [r3, #0]
    d25c:	4413      	add	r3, r2
    d25e:	b2da      	uxtb	r2, r3
    d260:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d264:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d268:	701a      	strb	r2, [r3, #0]
    d26a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d26e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d272:	781b      	ldrb	r3, [r3, #0]
    d274:	3301      	adds	r3, #1
    d276:	b2da      	uxtb	r2, r3
    d278:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d27c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d280:	701a      	strb	r2, [r3, #0]
    d282:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d28a:	781b      	ldrb	r3, [r3, #0]
    d28c:	2bff      	cmp	r3, #255	; 0xff
    d28e:	d105      	bne.n	d29c <radio_control_task+0x4e0>
    d290:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d298:	2200      	movs	r2, #0
    d29a:	701a      	strb	r2, [r3, #0]
    d29c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d2a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2a4:	781b      	ldrb	r3, [r3, #0]
    d2a6:	461a      	mov	r2, r3
    d2a8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d2ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2b0:	7819      	ldrb	r1, [r3, #0]
    d2b2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d2b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2ba:	5499      	strb	r1, [r3, r2]
    d2bc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d2c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2c4:	781b      	ldrb	r3, [r3, #0]
    d2c6:	3301      	adds	r3, #1
    d2c8:	b2da      	uxtb	r2, r3
    d2ca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d2ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2d2:	701a      	strb	r2, [r3, #0]
    d2d4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d2d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2dc:	781b      	ldrb	r3, [r3, #0]
    d2de:	2bff      	cmp	r3, #255	; 0xff
    d2e0:	d105      	bne.n	d2ee <radio_control_task+0x532>
    d2e2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d2e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2ea:	2200      	movs	r2, #0
    d2ec:	701a      	strb	r2, [r3, #0]
    d2ee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d2f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2f6:	781b      	ldrb	r3, [r3, #0]
    d2f8:	461a      	mov	r2, r3
    d2fa:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d2fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d302:	7819      	ldrb	r1, [r3, #0]
    d304:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d308:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d30c:	5499      	strb	r1, [r3, r2]
    d30e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d316:	781b      	ldrb	r3, [r3, #0]
    d318:	3301      	adds	r3, #1
    d31a:	b2da      	uxtb	r2, r3
    d31c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d324:	701a      	strb	r2, [r3, #0]
    d326:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d32a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d32e:	781b      	ldrb	r3, [r3, #0]
    d330:	2bff      	cmp	r3, #255	; 0xff
    d332:	d105      	bne.n	d340 <radio_control_task+0x584>
    d334:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d338:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d33c:	2200      	movs	r2, #0
    d33e:	701a      	strb	r2, [r3, #0]
    d340:	f242 0339 	movw	r3, #8249	; 0x2039
    d344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d348:	781b      	ldrb	r3, [r3, #0]
    d34a:	b2db      	uxtb	r3, r3
    d34c:	f003 0310 	and.w	r3, r3, #16
    d350:	2b00      	cmp	r3, #0
    d352:	d15a      	bne.n	d40a <radio_control_task+0x64e>
    d354:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d35c:	781b      	ldrb	r3, [r3, #0]
    d35e:	b2db      	uxtb	r3, r3
    d360:	461a      	mov	r2, r3
    d362:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d36a:	5c9a      	ldrb	r2, [r3, r2]
    d36c:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    d370:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d374:	701a      	strb	r2, [r3, #0]
    d376:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    d37a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d37e:	2200      	movs	r2, #0
    d380:	701a      	strb	r2, [r3, #0]
    d382:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d386:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d38a:	781b      	ldrb	r3, [r3, #0]
    d38c:	b2db      	uxtb	r3, r3
    d38e:	3301      	adds	r3, #1
    d390:	b2da      	uxtb	r2, r3
    d392:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d396:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d39a:	701a      	strb	r2, [r3, #0]
    d39c:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d3a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3a4:	781b      	ldrb	r3, [r3, #0]
    d3a6:	b2db      	uxtb	r3, r3
    d3a8:	2bff      	cmp	r3, #255	; 0xff
    d3aa:	d105      	bne.n	d3b8 <radio_control_task+0x5fc>
    d3ac:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d3b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3b4:	2200      	movs	r2, #0
    d3b6:	701a      	strb	r2, [r3, #0]
    d3b8:	f242 0338 	movw	r3, #8248	; 0x2038
    d3bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3c0:	f242 0238 	movw	r2, #8248	; 0x2038
    d3c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d3c8:	7812      	ldrb	r2, [r2, #0]
    d3ca:	b2d2      	uxtb	r2, r2
    d3cc:	f042 0201 	orr.w	r2, r2, #1
    d3d0:	b2d2      	uxtb	r2, r2
    d3d2:	701a      	strb	r2, [r3, #0]
    d3d4:	f242 0339 	movw	r3, #8249	; 0x2039
    d3d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3dc:	f242 0239 	movw	r2, #8249	; 0x2039
    d3e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d3e4:	7812      	ldrb	r2, [r2, #0]
    d3e6:	b2d2      	uxtb	r2, r2
    d3e8:	f042 0210 	orr.w	r2, r2, #16
    d3ec:	b2d2      	uxtb	r2, r2
    d3ee:	701a      	strb	r2, [r3, #0]
    d3f0:	e00b      	b.n	d40a <radio_control_task+0x64e>
    d3f2:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    d3f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3fa:	781b      	ldrb	r3, [r3, #0]
    d3fc:	3301      	adds	r3, #1
    d3fe:	b2da      	uxtb	r2, r3
    d400:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    d404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d408:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d40a:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    d40e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d412:	885b      	ldrh	r3, [r3, #2]
    d414:	b21b      	sxth	r3, r3
    d416:	4618      	mov	r0, r3
    d418:	f00a fe96 	bl	18148 <__aeabi_i2f>
    d41c:	4603      	mov	r3, r0
    d41e:	4618      	mov	r0, r3
    d420:	f04f 0100 	mov.w	r1, #0
    d424:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d428:	f00a ff96 	bl	18358 <__aeabi_fdiv>
    d42c:	4603      	mov	r3, r0
    d42e:	4618      	mov	r0, r3
    d430:	f00a fa4a 	bl	178c8 <__aeabi_f2d>
    d434:	4602      	mov	r2, r0
    d436:	460b      	mov	r3, r1
    d438:	4610      	mov	r0, r2
    d43a:	4619      	mov	r1, r3
    d43c:	a346      	add	r3, pc, #280	; (adr r3, d558 <radio_control_task+0x79c>)
    d43e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d442:	f00a fa95 	bl	17970 <__aeabi_dmul>
    d446:	4602      	mov	r2, r0
    d448:	460b      	mov	r3, r1
    d44a:	4610      	mov	r0, r2
    d44c:	4619      	mov	r1, r3
    d44e:	f04f 0200 	mov.w	r2, #0
    d452:	f04f 0300 	mov.w	r3, #0
    d456:	f00a f8d9 	bl	1760c <__adddf3>
    d45a:	4602      	mov	r2, r0
    d45c:	460b      	mov	r3, r1
    d45e:	4610      	mov	r0, r2
    d460:	4619      	mov	r1, r3
    d462:	f00a fd67 	bl	17f34 <__aeabi_d2f>
    d466:	4602      	mov	r2, r0
    d468:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    d46c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d470:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d472:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    d476:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d47a:	889b      	ldrh	r3, [r3, #4]
    d47c:	b21b      	sxth	r3, r3
    d47e:	4618      	mov	r0, r3
    d480:	f00a fe62 	bl	18148 <__aeabi_i2f>
    d484:	4603      	mov	r3, r0
    d486:	4618      	mov	r0, r3
    d488:	f04f 0100 	mov.w	r1, #0
    d48c:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d490:	f00a ff62 	bl	18358 <__aeabi_fdiv>
    d494:	4603      	mov	r3, r0
    d496:	4618      	mov	r0, r3
    d498:	f00a fa16 	bl	178c8 <__aeabi_f2d>
    d49c:	4602      	mov	r2, r0
    d49e:	460b      	mov	r3, r1
    d4a0:	4610      	mov	r0, r2
    d4a2:	4619      	mov	r1, r3
    d4a4:	f04f 0200 	mov.w	r2, #0
    d4a8:	f04f 0300 	mov.w	r3, #0
    d4ac:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d4b0:	f00a fa5e 	bl	17970 <__aeabi_dmul>
    d4b4:	4602      	mov	r2, r0
    d4b6:	460b      	mov	r3, r1
    d4b8:	4610      	mov	r0, r2
    d4ba:	4619      	mov	r1, r3
    d4bc:	f04f 0200 	mov.w	r2, #0
    d4c0:	f04f 0300 	mov.w	r3, #0
    d4c4:	f00a f8a2 	bl	1760c <__adddf3>
    d4c8:	4602      	mov	r2, r0
    d4ca:	460b      	mov	r3, r1
    d4cc:	4610      	mov	r0, r2
    d4ce:	4619      	mov	r1, r3
    d4d0:	f00a fd30 	bl	17f34 <__aeabi_d2f>
    d4d4:	4602      	mov	r2, r0
    d4d6:	f24b 2300 	movw	r3, #45568	; 0xb200
    d4da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4de:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d4e0:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    d4e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4e8:	881a      	ldrh	r2, [r3, #0]
    d4ea:	f24b 2304 	movw	r3, #45572	; 0xb204
    d4ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4f2:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d4f4:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    d4f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4fc:	7c9a      	ldrb	r2, [r3, #18]
    d4fe:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    d502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d506:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d508:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    d50c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d510:	7d5a      	ldrb	r2, [r3, #21]
    d512:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    d516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d51a:	701a      	strb	r2, [r3, #0]

    events_update();
    d51c:	f7f9 fe7e 	bl	721c <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d520:	f7f8 fc7e 	bl	5e20 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d524:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    d528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d52c:	781b      	ldrb	r3, [r3, #0]
    d52e:	2b02      	cmp	r3, #2
    d530:	d10e      	bne.n	d550 <radio_control_task+0x794>
    d532:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    d536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d53a:	881b      	ldrh	r3, [r3, #0]
    d53c:	b21b      	sxth	r3, r3
    d53e:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d542:	dd05      	ble.n	d550 <radio_control_task+0x794>
	launch = TRUE;
    d544:	f64a 63c8 	movw	r3, #44744	; 0xaec8
    d548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d54c:	2201      	movs	r2, #1
    d54e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d550:	3708      	adds	r7, #8
    d552:	46bd      	mov	sp, r7
    d554:	bd80      	pop	{r7, pc}
    d556:	bf00      	nop
    d558:	33333333 	.word	0x33333333
    d55c:	bfe33333 	.word	0xbfe33333

0000d560 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d560:	b580      	push	{r7, lr}
    d562:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d564:	f64a 63b6 	movw	r3, #44726	; 0xaeb6
    d568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d56c:	2203      	movs	r2, #3
    d56e:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d570:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    d574:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d578:	781b      	ldrb	r3, [r3, #0]
    d57a:	2b03      	cmp	r3, #3
    d57c:	d102      	bne.n	d584 <navigation_update+0x24>
    nav_home();
    d57e:	f007 fa9b 	bl	14ab8 <nav_home>
    d582:	e001      	b.n	d588 <navigation_update+0x28>
  else
    nav_update();
    d584:	f007 fabe 	bl	14b04 <nav_update>
}
    d588:	bd80      	pop	{r7, pc}
    d58a:	bf00      	nop

0000d58c <send_nav_values>:

void send_nav_values(void){
    d58c:	b480      	push	{r7}
    d58e:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d590:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d598:	781a      	ldrb	r2, [r3, #0]
    d59a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d59e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5a2:	781b      	ldrb	r3, [r3, #0]
    d5a4:	b2db      	uxtb	r3, r3
    d5a6:	429a      	cmp	r2, r3
    d5a8:	d313      	bcc.n	d5d2 <send_nav_values+0x46>
    d5aa:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d5ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5b2:	781b      	ldrb	r3, [r3, #0]
    d5b4:	b2db      	uxtb	r3, r3
    d5b6:	461a      	mov	r2, r3
    d5b8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d5bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5c0:	781b      	ldrb	r3, [r3, #0]
    d5c2:	1ad3      	subs	r3, r2, r3
    d5c4:	33ff      	adds	r3, #255	; 0xff
    d5c6:	2b1e      	cmp	r3, #30
    d5c8:	bfd4      	ite	le
    d5ca:	2300      	movle	r3, #0
    d5cc:	2301      	movgt	r3, #1
    d5ce:	b2db      	uxtb	r3, r3
    d5d0:	e011      	b.n	d5f6 <send_nav_values+0x6a>
    d5d2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d5d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5da:	781b      	ldrb	r3, [r3, #0]
    d5dc:	b2db      	uxtb	r3, r3
    d5de:	461a      	mov	r2, r3
    d5e0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d5e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5e8:	781b      	ldrb	r3, [r3, #0]
    d5ea:	1ad3      	subs	r3, r2, r3
    d5ec:	2b1e      	cmp	r3, #30
    d5ee:	bfd4      	ite	le
    d5f0:	2300      	movle	r3, #0
    d5f2:	2301      	movgt	r3, #1
    d5f4:	b2db      	uxtb	r3, r3
    d5f6:	2b00      	cmp	r3, #0
    d5f8:	f001 8094 	beq.w	e724 <send_nav_values+0x1198>
    d5fc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d604:	781b      	ldrb	r3, [r3, #0]
    d606:	461a      	mov	r2, r3
    d608:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d60c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d610:	2105      	movs	r1, #5
    d612:	5499      	strb	r1, [r3, r2]
    d614:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d618:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d61c:	781b      	ldrb	r3, [r3, #0]
    d61e:	3301      	adds	r3, #1
    d620:	b2da      	uxtb	r2, r3
    d622:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d626:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d62a:	701a      	strb	r2, [r3, #0]
    d62c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d634:	781b      	ldrb	r3, [r3, #0]
    d636:	2bff      	cmp	r3, #255	; 0xff
    d638:	d105      	bne.n	d646 <send_nav_values+0xba>
    d63a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d63e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d642:	2200      	movs	r2, #0
    d644:	701a      	strb	r2, [r3, #0]
    d646:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d64a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d64e:	781b      	ldrb	r3, [r3, #0]
    d650:	461a      	mov	r2, r3
    d652:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d65a:	210a      	movs	r1, #10
    d65c:	5499      	strb	r1, [r3, r2]
    d65e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d666:	781b      	ldrb	r3, [r3, #0]
    d668:	3301      	adds	r3, #1
    d66a:	b2da      	uxtb	r2, r3
    d66c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d674:	701a      	strb	r2, [r3, #0]
    d676:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d67a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d67e:	781b      	ldrb	r3, [r3, #0]
    d680:	2bff      	cmp	r3, #255	; 0xff
    d682:	d105      	bne.n	d690 <send_nav_values+0x104>
    d684:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d68c:	2200      	movs	r2, #0
    d68e:	701a      	strb	r2, [r3, #0]
    d690:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d694:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d698:	220a      	movs	r2, #10
    d69a:	701a      	strb	r2, [r3, #0]
    d69c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d6a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6a4:	220a      	movs	r2, #10
    d6a6:	701a      	strb	r2, [r3, #0]
    d6a8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d6ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6b0:	781b      	ldrb	r3, [r3, #0]
    d6b2:	461a      	mov	r2, r3
    d6b4:	f24b 2329 	movw	r3, #45609	; 0xb229
    d6b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6bc:	7819      	ldrb	r1, [r3, #0]
    d6be:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d6c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6c6:	5499      	strb	r1, [r3, r2]
    d6c8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d6cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6d0:	781a      	ldrb	r2, [r3, #0]
    d6d2:	f24b 2329 	movw	r3, #45609	; 0xb229
    d6d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6da:	781b      	ldrb	r3, [r3, #0]
    d6dc:	4413      	add	r3, r2
    d6de:	b2da      	uxtb	r2, r3
    d6e0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d6e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6e8:	701a      	strb	r2, [r3, #0]
    d6ea:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d6ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6f2:	781a      	ldrb	r2, [r3, #0]
    d6f4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d6f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6fc:	781b      	ldrb	r3, [r3, #0]
    d6fe:	4413      	add	r3, r2
    d700:	b2da      	uxtb	r2, r3
    d702:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d706:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d70a:	701a      	strb	r2, [r3, #0]
    d70c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d714:	781b      	ldrb	r3, [r3, #0]
    d716:	3301      	adds	r3, #1
    d718:	b2da      	uxtb	r2, r3
    d71a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d71e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d722:	701a      	strb	r2, [r3, #0]
    d724:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d72c:	781b      	ldrb	r3, [r3, #0]
    d72e:	2bff      	cmp	r3, #255	; 0xff
    d730:	d105      	bne.n	d73e <send_nav_values+0x1b2>
    d732:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d736:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d73a:	2200      	movs	r2, #0
    d73c:	701a      	strb	r2, [r3, #0]
    d73e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d746:	781b      	ldrb	r3, [r3, #0]
    d748:	461a      	mov	r2, r3
    d74a:	f24b 2328 	movw	r3, #45608	; 0xb228
    d74e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d752:	7819      	ldrb	r1, [r3, #0]
    d754:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d758:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d75c:	5499      	strb	r1, [r3, r2]
    d75e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d766:	781a      	ldrb	r2, [r3, #0]
    d768:	f24b 2328 	movw	r3, #45608	; 0xb228
    d76c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d770:	781b      	ldrb	r3, [r3, #0]
    d772:	4413      	add	r3, r2
    d774:	b2da      	uxtb	r2, r3
    d776:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d77a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d77e:	701a      	strb	r2, [r3, #0]
    d780:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d788:	781a      	ldrb	r2, [r3, #0]
    d78a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d78e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d792:	781b      	ldrb	r3, [r3, #0]
    d794:	4413      	add	r3, r2
    d796:	b2da      	uxtb	r2, r3
    d798:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d79c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7a0:	701a      	strb	r2, [r3, #0]
    d7a2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d7a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7aa:	781b      	ldrb	r3, [r3, #0]
    d7ac:	3301      	adds	r3, #1
    d7ae:	b2da      	uxtb	r2, r3
    d7b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d7b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7b8:	701a      	strb	r2, [r3, #0]
    d7ba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d7be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7c2:	781b      	ldrb	r3, [r3, #0]
    d7c4:	2bff      	cmp	r3, #255	; 0xff
    d7c6:	d105      	bne.n	d7d4 <send_nav_values+0x248>
    d7c8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d7cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7d0:	2200      	movs	r2, #0
    d7d2:	701a      	strb	r2, [r3, #0]
    d7d4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d7d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7dc:	781b      	ldrb	r3, [r3, #0]
    d7de:	461a      	mov	r2, r3
    d7e0:	f24b 4384 	movw	r3, #46212	; 0xb484
    d7e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7e8:	7819      	ldrb	r1, [r3, #0]
    d7ea:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d7ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7f2:	5499      	strb	r1, [r3, r2]
    d7f4:	f24b 4384 	movw	r3, #46212	; 0xb484
    d7f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7fc:	781a      	ldrb	r2, [r3, #0]
    d7fe:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d806:	781b      	ldrb	r3, [r3, #0]
    d808:	4413      	add	r3, r2
    d80a:	b2da      	uxtb	r2, r3
    d80c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d810:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d814:	701a      	strb	r2, [r3, #0]
    d816:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d81a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d81e:	781a      	ldrb	r2, [r3, #0]
    d820:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d828:	781b      	ldrb	r3, [r3, #0]
    d82a:	4413      	add	r3, r2
    d82c:	b2da      	uxtb	r2, r3
    d82e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d832:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d836:	701a      	strb	r2, [r3, #0]
    d838:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d83c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d840:	781b      	ldrb	r3, [r3, #0]
    d842:	3301      	adds	r3, #1
    d844:	b2da      	uxtb	r2, r3
    d846:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d84a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d84e:	701a      	strb	r2, [r3, #0]
    d850:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d854:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d858:	781b      	ldrb	r3, [r3, #0]
    d85a:	2bff      	cmp	r3, #255	; 0xff
    d85c:	d105      	bne.n	d86a <send_nav_values+0x2de>
    d85e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d862:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d866:	2200      	movs	r2, #0
    d868:	701a      	strb	r2, [r3, #0]
    d86a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d86e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d872:	781b      	ldrb	r3, [r3, #0]
    d874:	461a      	mov	r2, r3
    d876:	f24b 4384 	movw	r3, #46212	; 0xb484
    d87a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d87e:	7859      	ldrb	r1, [r3, #1]
    d880:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d884:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d888:	5499      	strb	r1, [r3, r2]
    d88a:	4bd2      	ldr	r3, [pc, #840]	; (dbd4 <send_nav_values+0x648>)
    d88c:	781a      	ldrb	r2, [r3, #0]
    d88e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d892:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d896:	781b      	ldrb	r3, [r3, #0]
    d898:	4413      	add	r3, r2
    d89a:	b2da      	uxtb	r2, r3
    d89c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d8a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8a4:	701a      	strb	r2, [r3, #0]
    d8a6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d8aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8ae:	781a      	ldrb	r2, [r3, #0]
    d8b0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d8b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8b8:	781b      	ldrb	r3, [r3, #0]
    d8ba:	4413      	add	r3, r2
    d8bc:	b2da      	uxtb	r2, r3
    d8be:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d8c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8c6:	701a      	strb	r2, [r3, #0]
    d8c8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d8cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8d0:	781b      	ldrb	r3, [r3, #0]
    d8d2:	3301      	adds	r3, #1
    d8d4:	b2da      	uxtb	r2, r3
    d8d6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d8da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8de:	701a      	strb	r2, [r3, #0]
    d8e0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d8e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8e8:	781b      	ldrb	r3, [r3, #0]
    d8ea:	2bff      	cmp	r3, #255	; 0xff
    d8ec:	d105      	bne.n	d8fa <send_nav_values+0x36e>
    d8ee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d8f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8f6:	2200      	movs	r2, #0
    d8f8:	701a      	strb	r2, [r3, #0]
    d8fa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d8fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d902:	781b      	ldrb	r3, [r3, #0]
    d904:	461a      	mov	r2, r3
    d906:	f24b 4384 	movw	r3, #46212	; 0xb484
    d90a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d90e:	7899      	ldrb	r1, [r3, #2]
    d910:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d918:	5499      	strb	r1, [r3, r2]
    d91a:	4baf      	ldr	r3, [pc, #700]	; (dbd8 <send_nav_values+0x64c>)
    d91c:	781a      	ldrb	r2, [r3, #0]
    d91e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d922:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d926:	781b      	ldrb	r3, [r3, #0]
    d928:	4413      	add	r3, r2
    d92a:	b2da      	uxtb	r2, r3
    d92c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d934:	701a      	strb	r2, [r3, #0]
    d936:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d93a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d93e:	781a      	ldrb	r2, [r3, #0]
    d940:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d944:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d948:	781b      	ldrb	r3, [r3, #0]
    d94a:	4413      	add	r3, r2
    d94c:	b2da      	uxtb	r2, r3
    d94e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d952:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d956:	701a      	strb	r2, [r3, #0]
    d958:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d95c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d960:	781b      	ldrb	r3, [r3, #0]
    d962:	3301      	adds	r3, #1
    d964:	b2da      	uxtb	r2, r3
    d966:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d96a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d96e:	701a      	strb	r2, [r3, #0]
    d970:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d978:	781b      	ldrb	r3, [r3, #0]
    d97a:	2bff      	cmp	r3, #255	; 0xff
    d97c:	d105      	bne.n	d98a <send_nav_values+0x3fe>
    d97e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d986:	2200      	movs	r2, #0
    d988:	701a      	strb	r2, [r3, #0]
    d98a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d98e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d992:	781b      	ldrb	r3, [r3, #0]
    d994:	461a      	mov	r2, r3
    d996:	f24b 4384 	movw	r3, #46212	; 0xb484
    d99a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d99e:	78d9      	ldrb	r1, [r3, #3]
    d9a0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d9a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9a8:	5499      	strb	r1, [r3, r2]
    d9aa:	4b8c      	ldr	r3, [pc, #560]	; (dbdc <send_nav_values+0x650>)
    d9ac:	781a      	ldrb	r2, [r3, #0]
    d9ae:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d9b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9b6:	781b      	ldrb	r3, [r3, #0]
    d9b8:	4413      	add	r3, r2
    d9ba:	b2da      	uxtb	r2, r3
    d9bc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d9c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9c4:	701a      	strb	r2, [r3, #0]
    d9c6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d9ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9ce:	781a      	ldrb	r2, [r3, #0]
    d9d0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d9d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9d8:	781b      	ldrb	r3, [r3, #0]
    d9da:	4413      	add	r3, r2
    d9dc:	b2da      	uxtb	r2, r3
    d9de:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d9e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9e6:	701a      	strb	r2, [r3, #0]
    d9e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d9ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9f0:	781b      	ldrb	r3, [r3, #0]
    d9f2:	3301      	adds	r3, #1
    d9f4:	b2da      	uxtb	r2, r3
    d9f6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d9fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9fe:	701a      	strb	r2, [r3, #0]
    da00:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    da04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da08:	781b      	ldrb	r3, [r3, #0]
    da0a:	2bff      	cmp	r3, #255	; 0xff
    da0c:	d105      	bne.n	da1a <send_nav_values+0x48e>
    da0e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    da12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da16:	2200      	movs	r2, #0
    da18:	701a      	strb	r2, [r3, #0]
    da1a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    da1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da22:	781b      	ldrb	r3, [r3, #0]
    da24:	461a      	mov	r2, r3
    da26:	f24b 4388 	movw	r3, #46216	; 0xb488
    da2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da2e:	7819      	ldrb	r1, [r3, #0]
    da30:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    da34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da38:	5499      	strb	r1, [r3, r2]
    da3a:	f24b 4388 	movw	r3, #46216	; 0xb488
    da3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da42:	781a      	ldrb	r2, [r3, #0]
    da44:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    da48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da4c:	781b      	ldrb	r3, [r3, #0]
    da4e:	4413      	add	r3, r2
    da50:	b2da      	uxtb	r2, r3
    da52:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    da56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da5a:	701a      	strb	r2, [r3, #0]
    da5c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    da60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da64:	781a      	ldrb	r2, [r3, #0]
    da66:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    da6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da6e:	781b      	ldrb	r3, [r3, #0]
    da70:	4413      	add	r3, r2
    da72:	b2da      	uxtb	r2, r3
    da74:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    da78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da7c:	701a      	strb	r2, [r3, #0]
    da7e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    da82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da86:	781b      	ldrb	r3, [r3, #0]
    da88:	3301      	adds	r3, #1
    da8a:	b2da      	uxtb	r2, r3
    da8c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    da90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da94:	701a      	strb	r2, [r3, #0]
    da96:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    da9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da9e:	781b      	ldrb	r3, [r3, #0]
    daa0:	2bff      	cmp	r3, #255	; 0xff
    daa2:	d105      	bne.n	dab0 <send_nav_values+0x524>
    daa4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    daa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daac:	2200      	movs	r2, #0
    daae:	701a      	strb	r2, [r3, #0]
    dab0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dab8:	781b      	ldrb	r3, [r3, #0]
    daba:	461a      	mov	r2, r3
    dabc:	f24b 4388 	movw	r3, #46216	; 0xb488
    dac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dac4:	7859      	ldrb	r1, [r3, #1]
    dac6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    daca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dace:	5499      	strb	r1, [r3, r2]
    dad0:	4b43      	ldr	r3, [pc, #268]	; (dbe0 <send_nav_values+0x654>)
    dad2:	781a      	ldrb	r2, [r3, #0]
    dad4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dadc:	781b      	ldrb	r3, [r3, #0]
    dade:	4413      	add	r3, r2
    dae0:	b2da      	uxtb	r2, r3
    dae2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daea:	701a      	strb	r2, [r3, #0]
    daec:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    daf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daf4:	781a      	ldrb	r2, [r3, #0]
    daf6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dafa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dafe:	781b      	ldrb	r3, [r3, #0]
    db00:	4413      	add	r3, r2
    db02:	b2da      	uxtb	r2, r3
    db04:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    db08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db0c:	701a      	strb	r2, [r3, #0]
    db0e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    db12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db16:	781b      	ldrb	r3, [r3, #0]
    db18:	3301      	adds	r3, #1
    db1a:	b2da      	uxtb	r2, r3
    db1c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    db20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db24:	701a      	strb	r2, [r3, #0]
    db26:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    db2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db2e:	781b      	ldrb	r3, [r3, #0]
    db30:	2bff      	cmp	r3, #255	; 0xff
    db32:	d105      	bne.n	db40 <send_nav_values+0x5b4>
    db34:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    db38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db3c:	2200      	movs	r2, #0
    db3e:	701a      	strb	r2, [r3, #0]
    db40:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    db44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db48:	781b      	ldrb	r3, [r3, #0]
    db4a:	461a      	mov	r2, r3
    db4c:	f24b 4388 	movw	r3, #46216	; 0xb488
    db50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db54:	7899      	ldrb	r1, [r3, #2]
    db56:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    db5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db5e:	5499      	strb	r1, [r3, r2]
    db60:	4b20      	ldr	r3, [pc, #128]	; (dbe4 <send_nav_values+0x658>)
    db62:	781a      	ldrb	r2, [r3, #0]
    db64:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    db68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db6c:	781b      	ldrb	r3, [r3, #0]
    db6e:	4413      	add	r3, r2
    db70:	b2da      	uxtb	r2, r3
    db72:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    db76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db7a:	701a      	strb	r2, [r3, #0]
    db7c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    db80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db84:	781a      	ldrb	r2, [r3, #0]
    db86:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    db8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db8e:	781b      	ldrb	r3, [r3, #0]
    db90:	4413      	add	r3, r2
    db92:	b2da      	uxtb	r2, r3
    db94:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    db98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db9c:	701a      	strb	r2, [r3, #0]
    db9e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dba6:	781b      	ldrb	r3, [r3, #0]
    dba8:	3301      	adds	r3, #1
    dbaa:	b2da      	uxtb	r2, r3
    dbac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dbb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbb4:	701a      	strb	r2, [r3, #0]
    dbb6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dbba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbbe:	781b      	ldrb	r3, [r3, #0]
    dbc0:	2bff      	cmp	r3, #255	; 0xff
    dbc2:	d111      	bne.n	dbe8 <send_nav_values+0x65c>
    dbc4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dbc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbcc:	2200      	movs	r2, #0
    dbce:	701a      	strb	r2, [r3, #0]
    dbd0:	e00a      	b.n	dbe8 <send_nav_values+0x65c>
    dbd2:	bf00      	nop
    dbd4:	2000b485 	.word	0x2000b485
    dbd8:	2000b486 	.word	0x2000b486
    dbdc:	2000b487 	.word	0x2000b487
    dbe0:	2000b489 	.word	0x2000b489
    dbe4:	2000b48a 	.word	0x2000b48a
    dbe8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dbec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbf0:	781b      	ldrb	r3, [r3, #0]
    dbf2:	461a      	mov	r2, r3
    dbf4:	f24b 4388 	movw	r3, #46216	; 0xb488
    dbf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbfc:	78d9      	ldrb	r1, [r3, #3]
    dbfe:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    dc02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc06:	5499      	strb	r1, [r3, r2]
    dc08:	4bd3      	ldr	r3, [pc, #844]	; (df58 <send_nav_values+0x9cc>)
    dc0a:	781a      	ldrb	r2, [r3, #0]
    dc0c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dc10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc14:	781b      	ldrb	r3, [r3, #0]
    dc16:	4413      	add	r3, r2
    dc18:	b2da      	uxtb	r2, r3
    dc1a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dc1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc22:	701a      	strb	r2, [r3, #0]
    dc24:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dc28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc2c:	781a      	ldrb	r2, [r3, #0]
    dc2e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dc32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc36:	781b      	ldrb	r3, [r3, #0]
    dc38:	4413      	add	r3, r2
    dc3a:	b2da      	uxtb	r2, r3
    dc3c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dc40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc44:	701a      	strb	r2, [r3, #0]
    dc46:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dc4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc4e:	781b      	ldrb	r3, [r3, #0]
    dc50:	3301      	adds	r3, #1
    dc52:	b2da      	uxtb	r2, r3
    dc54:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dc58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc5c:	701a      	strb	r2, [r3, #0]
    dc5e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dc62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc66:	781b      	ldrb	r3, [r3, #0]
    dc68:	2bff      	cmp	r3, #255	; 0xff
    dc6a:	d105      	bne.n	dc78 <send_nav_values+0x6ec>
    dc6c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dc70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc74:	2200      	movs	r2, #0
    dc76:	701a      	strb	r2, [r3, #0]
    dc78:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dc7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc80:	781b      	ldrb	r3, [r3, #0]
    dc82:	461a      	mov	r2, r3
    dc84:	f24b 2314 	movw	r3, #45588	; 0xb214
    dc88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc8c:	7819      	ldrb	r1, [r3, #0]
    dc8e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    dc92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc96:	5499      	strb	r1, [r3, r2]
    dc98:	f24b 2314 	movw	r3, #45588	; 0xb214
    dc9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dca0:	781a      	ldrb	r2, [r3, #0]
    dca2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcaa:	781b      	ldrb	r3, [r3, #0]
    dcac:	4413      	add	r3, r2
    dcae:	b2da      	uxtb	r2, r3
    dcb0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dcb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcb8:	701a      	strb	r2, [r3, #0]
    dcba:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dcbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcc2:	781a      	ldrb	r2, [r3, #0]
    dcc4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dcc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dccc:	781b      	ldrb	r3, [r3, #0]
    dcce:	4413      	add	r3, r2
    dcd0:	b2da      	uxtb	r2, r3
    dcd2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dcd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcda:	701a      	strb	r2, [r3, #0]
    dcdc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dce4:	781b      	ldrb	r3, [r3, #0]
    dce6:	3301      	adds	r3, #1
    dce8:	b2da      	uxtb	r2, r3
    dcea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dcee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcf2:	701a      	strb	r2, [r3, #0]
    dcf4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dcf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcfc:	781b      	ldrb	r3, [r3, #0]
    dcfe:	2bff      	cmp	r3, #255	; 0xff
    dd00:	d105      	bne.n	dd0e <send_nav_values+0x782>
    dd02:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dd06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd0a:	2200      	movs	r2, #0
    dd0c:	701a      	strb	r2, [r3, #0]
    dd0e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dd12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd16:	781b      	ldrb	r3, [r3, #0]
    dd18:	461a      	mov	r2, r3
    dd1a:	f24b 2314 	movw	r3, #45588	; 0xb214
    dd1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd22:	7859      	ldrb	r1, [r3, #1]
    dd24:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    dd28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd2c:	5499      	strb	r1, [r3, r2]
    dd2e:	4b8b      	ldr	r3, [pc, #556]	; (df5c <send_nav_values+0x9d0>)
    dd30:	781a      	ldrb	r2, [r3, #0]
    dd32:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dd36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd3a:	781b      	ldrb	r3, [r3, #0]
    dd3c:	4413      	add	r3, r2
    dd3e:	b2da      	uxtb	r2, r3
    dd40:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dd44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd48:	701a      	strb	r2, [r3, #0]
    dd4a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dd4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd52:	781a      	ldrb	r2, [r3, #0]
    dd54:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dd58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd5c:	781b      	ldrb	r3, [r3, #0]
    dd5e:	4413      	add	r3, r2
    dd60:	b2da      	uxtb	r2, r3
    dd62:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dd66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd6a:	701a      	strb	r2, [r3, #0]
    dd6c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dd70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd74:	781b      	ldrb	r3, [r3, #0]
    dd76:	3301      	adds	r3, #1
    dd78:	b2da      	uxtb	r2, r3
    dd7a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dd7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd82:	701a      	strb	r2, [r3, #0]
    dd84:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dd88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd8c:	781b      	ldrb	r3, [r3, #0]
    dd8e:	2bff      	cmp	r3, #255	; 0xff
    dd90:	d105      	bne.n	dd9e <send_nav_values+0x812>
    dd92:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dd96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd9a:	2200      	movs	r2, #0
    dd9c:	701a      	strb	r2, [r3, #0]
    dd9e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dda2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dda6:	781b      	ldrb	r3, [r3, #0]
    dda8:	461a      	mov	r2, r3
    ddaa:	f24b 2314 	movw	r3, #45588	; 0xb214
    ddae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddb2:	7899      	ldrb	r1, [r3, #2]
    ddb4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ddb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddbc:	5499      	strb	r1, [r3, r2]
    ddbe:	4b68      	ldr	r3, [pc, #416]	; (df60 <send_nav_values+0x9d4>)
    ddc0:	781a      	ldrb	r2, [r3, #0]
    ddc2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ddc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddca:	781b      	ldrb	r3, [r3, #0]
    ddcc:	4413      	add	r3, r2
    ddce:	b2da      	uxtb	r2, r3
    ddd0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ddd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddd8:	701a      	strb	r2, [r3, #0]
    ddda:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ddde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dde2:	781a      	ldrb	r2, [r3, #0]
    dde4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dde8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddec:	781b      	ldrb	r3, [r3, #0]
    ddee:	4413      	add	r3, r2
    ddf0:	b2da      	uxtb	r2, r3
    ddf2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ddf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddfa:	701a      	strb	r2, [r3, #0]
    ddfc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    de00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de04:	781b      	ldrb	r3, [r3, #0]
    de06:	3301      	adds	r3, #1
    de08:	b2da      	uxtb	r2, r3
    de0a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    de0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de12:	701a      	strb	r2, [r3, #0]
    de14:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    de18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de1c:	781b      	ldrb	r3, [r3, #0]
    de1e:	2bff      	cmp	r3, #255	; 0xff
    de20:	d105      	bne.n	de2e <send_nav_values+0x8a2>
    de22:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    de26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de2a:	2200      	movs	r2, #0
    de2c:	701a      	strb	r2, [r3, #0]
    de2e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    de32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de36:	781b      	ldrb	r3, [r3, #0]
    de38:	461a      	mov	r2, r3
    de3a:	f24b 2314 	movw	r3, #45588	; 0xb214
    de3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de42:	78d9      	ldrb	r1, [r3, #3]
    de44:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    de48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de4c:	5499      	strb	r1, [r3, r2]
    de4e:	4b45      	ldr	r3, [pc, #276]	; (df64 <send_nav_values+0x9d8>)
    de50:	781a      	ldrb	r2, [r3, #0]
    de52:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    de56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de5a:	781b      	ldrb	r3, [r3, #0]
    de5c:	4413      	add	r3, r2
    de5e:	b2da      	uxtb	r2, r3
    de60:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    de64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de68:	701a      	strb	r2, [r3, #0]
    de6a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    de6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de72:	781a      	ldrb	r2, [r3, #0]
    de74:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    de78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de7c:	781b      	ldrb	r3, [r3, #0]
    de7e:	4413      	add	r3, r2
    de80:	b2da      	uxtb	r2, r3
    de82:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    de86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de8a:	701a      	strb	r2, [r3, #0]
    de8c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    de90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de94:	781b      	ldrb	r3, [r3, #0]
    de96:	3301      	adds	r3, #1
    de98:	b2da      	uxtb	r2, r3
    de9a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    de9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dea2:	701a      	strb	r2, [r3, #0]
    dea4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deac:	781b      	ldrb	r3, [r3, #0]
    deae:	2bff      	cmp	r3, #255	; 0xff
    deb0:	d105      	bne.n	debe <send_nav_values+0x932>
    deb2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    deb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deba:	2200      	movs	r2, #0
    debc:	701a      	strb	r2, [r3, #0]
    debe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dec6:	781b      	ldrb	r3, [r3, #0]
    dec8:	461a      	mov	r2, r3
    deca:	f24b 235c 	movw	r3, #45660	; 0xb25c
    dece:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ded2:	7819      	ldrb	r1, [r3, #0]
    ded4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ded8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dedc:	5499      	strb	r1, [r3, r2]
    dede:	f24b 235c 	movw	r3, #45660	; 0xb25c
    dee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dee6:	781a      	ldrb	r2, [r3, #0]
    dee8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    deec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    def0:	781b      	ldrb	r3, [r3, #0]
    def2:	4413      	add	r3, r2
    def4:	b2da      	uxtb	r2, r3
    def6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    defa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    defe:	701a      	strb	r2, [r3, #0]
    df00:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    df04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df08:	781a      	ldrb	r2, [r3, #0]
    df0a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    df0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df12:	781b      	ldrb	r3, [r3, #0]
    df14:	4413      	add	r3, r2
    df16:	b2da      	uxtb	r2, r3
    df18:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    df1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df20:	701a      	strb	r2, [r3, #0]
    df22:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    df26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df2a:	781b      	ldrb	r3, [r3, #0]
    df2c:	3301      	adds	r3, #1
    df2e:	b2da      	uxtb	r2, r3
    df30:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    df34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df38:	701a      	strb	r2, [r3, #0]
    df3a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    df3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df42:	781b      	ldrb	r3, [r3, #0]
    df44:	2bff      	cmp	r3, #255	; 0xff
    df46:	d10f      	bne.n	df68 <send_nav_values+0x9dc>
    df48:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    df4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df50:	2200      	movs	r2, #0
    df52:	701a      	strb	r2, [r3, #0]
    df54:	e008      	b.n	df68 <send_nav_values+0x9dc>
    df56:	bf00      	nop
    df58:	2000b48b 	.word	0x2000b48b
    df5c:	2000b215 	.word	0x2000b215
    df60:	2000b216 	.word	0x2000b216
    df64:	2000b217 	.word	0x2000b217
    df68:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    df6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df70:	781b      	ldrb	r3, [r3, #0]
    df72:	461a      	mov	r2, r3
    df74:	f24b 235c 	movw	r3, #45660	; 0xb25c
    df78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df7c:	7859      	ldrb	r1, [r3, #1]
    df7e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    df82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df86:	5499      	strb	r1, [r3, r2]
    df88:	4bd1      	ldr	r3, [pc, #836]	; (e2d0 <send_nav_values+0xd44>)
    df8a:	781a      	ldrb	r2, [r3, #0]
    df8c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    df90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df94:	781b      	ldrb	r3, [r3, #0]
    df96:	4413      	add	r3, r2
    df98:	b2da      	uxtb	r2, r3
    df9a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    df9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfa2:	701a      	strb	r2, [r3, #0]
    dfa4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dfa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfac:	781a      	ldrb	r2, [r3, #0]
    dfae:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dfb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfb6:	781b      	ldrb	r3, [r3, #0]
    dfb8:	4413      	add	r3, r2
    dfba:	b2da      	uxtb	r2, r3
    dfbc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dfc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfc4:	701a      	strb	r2, [r3, #0]
    dfc6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dfca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfce:	781b      	ldrb	r3, [r3, #0]
    dfd0:	3301      	adds	r3, #1
    dfd2:	b2da      	uxtb	r2, r3
    dfd4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dfd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfdc:	701a      	strb	r2, [r3, #0]
    dfde:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dfe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfe6:	781b      	ldrb	r3, [r3, #0]
    dfe8:	2bff      	cmp	r3, #255	; 0xff
    dfea:	d105      	bne.n	dff8 <send_nav_values+0xa6c>
    dfec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dff4:	2200      	movs	r2, #0
    dff6:	701a      	strb	r2, [r3, #0]
    dff8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e000:	781b      	ldrb	r3, [r3, #0]
    e002:	461a      	mov	r2, r3
    e004:	f24b 235c 	movw	r3, #45660	; 0xb25c
    e008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e00c:	7899      	ldrb	r1, [r3, #2]
    e00e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e016:	5499      	strb	r1, [r3, r2]
    e018:	4bae      	ldr	r3, [pc, #696]	; (e2d4 <send_nav_values+0xd48>)
    e01a:	781a      	ldrb	r2, [r3, #0]
    e01c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e020:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e024:	781b      	ldrb	r3, [r3, #0]
    e026:	4413      	add	r3, r2
    e028:	b2da      	uxtb	r2, r3
    e02a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e02e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e032:	701a      	strb	r2, [r3, #0]
    e034:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e038:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e03c:	781a      	ldrb	r2, [r3, #0]
    e03e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e046:	781b      	ldrb	r3, [r3, #0]
    e048:	4413      	add	r3, r2
    e04a:	b2da      	uxtb	r2, r3
    e04c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e050:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e054:	701a      	strb	r2, [r3, #0]
    e056:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e05a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e05e:	781b      	ldrb	r3, [r3, #0]
    e060:	3301      	adds	r3, #1
    e062:	b2da      	uxtb	r2, r3
    e064:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e06c:	701a      	strb	r2, [r3, #0]
    e06e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e076:	781b      	ldrb	r3, [r3, #0]
    e078:	2bff      	cmp	r3, #255	; 0xff
    e07a:	d105      	bne.n	e088 <send_nav_values+0xafc>
    e07c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e080:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e084:	2200      	movs	r2, #0
    e086:	701a      	strb	r2, [r3, #0]
    e088:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e08c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e090:	781b      	ldrb	r3, [r3, #0]
    e092:	461a      	mov	r2, r3
    e094:	f24b 235c 	movw	r3, #45660	; 0xb25c
    e098:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e09c:	78d9      	ldrb	r1, [r3, #3]
    e09e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e0a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0a6:	5499      	strb	r1, [r3, r2]
    e0a8:	4b8b      	ldr	r3, [pc, #556]	; (e2d8 <send_nav_values+0xd4c>)
    e0aa:	781a      	ldrb	r2, [r3, #0]
    e0ac:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e0b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0b4:	781b      	ldrb	r3, [r3, #0]
    e0b6:	4413      	add	r3, r2
    e0b8:	b2da      	uxtb	r2, r3
    e0ba:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e0be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0c2:	701a      	strb	r2, [r3, #0]
    e0c4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e0c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0cc:	781a      	ldrb	r2, [r3, #0]
    e0ce:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e0d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0d6:	781b      	ldrb	r3, [r3, #0]
    e0d8:	4413      	add	r3, r2
    e0da:	b2da      	uxtb	r2, r3
    e0dc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e0e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0e4:	701a      	strb	r2, [r3, #0]
    e0e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e0ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0ee:	781b      	ldrb	r3, [r3, #0]
    e0f0:	3301      	adds	r3, #1
    e0f2:	b2da      	uxtb	r2, r3
    e0f4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e0f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0fc:	701a      	strb	r2, [r3, #0]
    e0fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e102:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e106:	781b      	ldrb	r3, [r3, #0]
    e108:	2bff      	cmp	r3, #255	; 0xff
    e10a:	d105      	bne.n	e118 <send_nav_values+0xb8c>
    e10c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e110:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e114:	2200      	movs	r2, #0
    e116:	701a      	strb	r2, [r3, #0]
    e118:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e11c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e120:	781b      	ldrb	r3, [r3, #0]
    e122:	461a      	mov	r2, r3
    e124:	f240 4308 	movw	r3, #1032	; 0x408
    e128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e12c:	7819      	ldrb	r1, [r3, #0]
    e12e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e136:	5499      	strb	r1, [r3, r2]
    e138:	f240 4308 	movw	r3, #1032	; 0x408
    e13c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e140:	781a      	ldrb	r2, [r3, #0]
    e142:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e146:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e14a:	781b      	ldrb	r3, [r3, #0]
    e14c:	4413      	add	r3, r2
    e14e:	b2da      	uxtb	r2, r3
    e150:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e158:	701a      	strb	r2, [r3, #0]
    e15a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e15e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e162:	781a      	ldrb	r2, [r3, #0]
    e164:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e16c:	781b      	ldrb	r3, [r3, #0]
    e16e:	4413      	add	r3, r2
    e170:	b2da      	uxtb	r2, r3
    e172:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e17a:	701a      	strb	r2, [r3, #0]
    e17c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e180:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e184:	781b      	ldrb	r3, [r3, #0]
    e186:	3301      	adds	r3, #1
    e188:	b2da      	uxtb	r2, r3
    e18a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e18e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e192:	701a      	strb	r2, [r3, #0]
    e194:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e19c:	781b      	ldrb	r3, [r3, #0]
    e19e:	2bff      	cmp	r3, #255	; 0xff
    e1a0:	d105      	bne.n	e1ae <send_nav_values+0xc22>
    e1a2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e1a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1aa:	2200      	movs	r2, #0
    e1ac:	701a      	strb	r2, [r3, #0]
    e1ae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e1b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1b6:	781b      	ldrb	r3, [r3, #0]
    e1b8:	461a      	mov	r2, r3
    e1ba:	f240 4308 	movw	r3, #1032	; 0x408
    e1be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1c2:	7859      	ldrb	r1, [r3, #1]
    e1c4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e1c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1cc:	5499      	strb	r1, [r3, r2]
    e1ce:	4b43      	ldr	r3, [pc, #268]	; (e2dc <send_nav_values+0xd50>)
    e1d0:	781a      	ldrb	r2, [r3, #0]
    e1d2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e1d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1da:	781b      	ldrb	r3, [r3, #0]
    e1dc:	4413      	add	r3, r2
    e1de:	b2da      	uxtb	r2, r3
    e1e0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e1e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1e8:	701a      	strb	r2, [r3, #0]
    e1ea:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e1ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1f2:	781a      	ldrb	r2, [r3, #0]
    e1f4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e1f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1fc:	781b      	ldrb	r3, [r3, #0]
    e1fe:	4413      	add	r3, r2
    e200:	b2da      	uxtb	r2, r3
    e202:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e20a:	701a      	strb	r2, [r3, #0]
    e20c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e210:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e214:	781b      	ldrb	r3, [r3, #0]
    e216:	3301      	adds	r3, #1
    e218:	b2da      	uxtb	r2, r3
    e21a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e21e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e222:	701a      	strb	r2, [r3, #0]
    e224:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e228:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e22c:	781b      	ldrb	r3, [r3, #0]
    e22e:	2bff      	cmp	r3, #255	; 0xff
    e230:	d105      	bne.n	e23e <send_nav_values+0xcb2>
    e232:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e236:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e23a:	2200      	movs	r2, #0
    e23c:	701a      	strb	r2, [r3, #0]
    e23e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e246:	781b      	ldrb	r3, [r3, #0]
    e248:	461a      	mov	r2, r3
    e24a:	f240 4308 	movw	r3, #1032	; 0x408
    e24e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e252:	7899      	ldrb	r1, [r3, #2]
    e254:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e25c:	5499      	strb	r1, [r3, r2]
    e25e:	4b20      	ldr	r3, [pc, #128]	; (e2e0 <send_nav_values+0xd54>)
    e260:	781a      	ldrb	r2, [r3, #0]
    e262:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e266:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e26a:	781b      	ldrb	r3, [r3, #0]
    e26c:	4413      	add	r3, r2
    e26e:	b2da      	uxtb	r2, r3
    e270:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e278:	701a      	strb	r2, [r3, #0]
    e27a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e27e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e282:	781a      	ldrb	r2, [r3, #0]
    e284:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e28c:	781b      	ldrb	r3, [r3, #0]
    e28e:	4413      	add	r3, r2
    e290:	b2da      	uxtb	r2, r3
    e292:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e296:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e29a:	701a      	strb	r2, [r3, #0]
    e29c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e2a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2a4:	781b      	ldrb	r3, [r3, #0]
    e2a6:	3301      	adds	r3, #1
    e2a8:	b2da      	uxtb	r2, r3
    e2aa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e2ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2b2:	701a      	strb	r2, [r3, #0]
    e2b4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e2b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2bc:	781b      	ldrb	r3, [r3, #0]
    e2be:	2bff      	cmp	r3, #255	; 0xff
    e2c0:	d110      	bne.n	e2e4 <send_nav_values+0xd58>
    e2c2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e2c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2ca:	2200      	movs	r2, #0
    e2cc:	701a      	strb	r2, [r3, #0]
    e2ce:	e009      	b.n	e2e4 <send_nav_values+0xd58>
    e2d0:	2000b25d 	.word	0x2000b25d
    e2d4:	2000b25e 	.word	0x2000b25e
    e2d8:	2000b25f 	.word	0x2000b25f
    e2dc:	20000409 	.word	0x20000409
    e2e0:	2000040a 	.word	0x2000040a
    e2e4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e2e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2ec:	781b      	ldrb	r3, [r3, #0]
    e2ee:	461a      	mov	r2, r3
    e2f0:	f240 4308 	movw	r3, #1032	; 0x408
    e2f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2f8:	78d9      	ldrb	r1, [r3, #3]
    e2fa:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e2fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e302:	5499      	strb	r1, [r3, r2]
    e304:	4bc2      	ldr	r3, [pc, #776]	; (e610 <send_nav_values+0x1084>)
    e306:	781a      	ldrb	r2, [r3, #0]
    e308:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e30c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e310:	781b      	ldrb	r3, [r3, #0]
    e312:	4413      	add	r3, r2
    e314:	b2da      	uxtb	r2, r3
    e316:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e31a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e31e:	701a      	strb	r2, [r3, #0]
    e320:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e328:	781a      	ldrb	r2, [r3, #0]
    e32a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e32e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e332:	781b      	ldrb	r3, [r3, #0]
    e334:	4413      	add	r3, r2
    e336:	b2da      	uxtb	r2, r3
    e338:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e33c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e340:	701a      	strb	r2, [r3, #0]
    e342:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e346:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e34a:	781b      	ldrb	r3, [r3, #0]
    e34c:	3301      	adds	r3, #1
    e34e:	b2da      	uxtb	r2, r3
    e350:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e354:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e358:	701a      	strb	r2, [r3, #0]
    e35a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e35e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e362:	781b      	ldrb	r3, [r3, #0]
    e364:	2bff      	cmp	r3, #255	; 0xff
    e366:	d105      	bne.n	e374 <send_nav_values+0xde8>
    e368:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e36c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e370:	2200      	movs	r2, #0
    e372:	701a      	strb	r2, [r3, #0]
    e374:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e37c:	781b      	ldrb	r3, [r3, #0]
    e37e:	461a      	mov	r2, r3
    e380:	f24b 2360 	movw	r3, #45664	; 0xb260
    e384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e388:	7819      	ldrb	r1, [r3, #0]
    e38a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e38e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e392:	5499      	strb	r1, [r3, r2]
    e394:	f24b 2360 	movw	r3, #45664	; 0xb260
    e398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e39c:	781a      	ldrb	r2, [r3, #0]
    e39e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e3a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3a6:	781b      	ldrb	r3, [r3, #0]
    e3a8:	4413      	add	r3, r2
    e3aa:	b2da      	uxtb	r2, r3
    e3ac:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e3b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3b4:	701a      	strb	r2, [r3, #0]
    e3b6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e3ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3be:	781a      	ldrb	r2, [r3, #0]
    e3c0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e3c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3c8:	781b      	ldrb	r3, [r3, #0]
    e3ca:	4413      	add	r3, r2
    e3cc:	b2da      	uxtb	r2, r3
    e3ce:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e3d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3d6:	701a      	strb	r2, [r3, #0]
    e3d8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e3dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3e0:	781b      	ldrb	r3, [r3, #0]
    e3e2:	3301      	adds	r3, #1
    e3e4:	b2da      	uxtb	r2, r3
    e3e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e3ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3ee:	701a      	strb	r2, [r3, #0]
    e3f0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e3f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3f8:	781b      	ldrb	r3, [r3, #0]
    e3fa:	2bff      	cmp	r3, #255	; 0xff
    e3fc:	d105      	bne.n	e40a <send_nav_values+0xe7e>
    e3fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e406:	2200      	movs	r2, #0
    e408:	701a      	strb	r2, [r3, #0]
    e40a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e40e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e412:	781b      	ldrb	r3, [r3, #0]
    e414:	461a      	mov	r2, r3
    e416:	f24b 2360 	movw	r3, #45664	; 0xb260
    e41a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e41e:	7859      	ldrb	r1, [r3, #1]
    e420:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e428:	5499      	strb	r1, [r3, r2]
    e42a:	4b7a      	ldr	r3, [pc, #488]	; (e614 <send_nav_values+0x1088>)
    e42c:	781a      	ldrb	r2, [r3, #0]
    e42e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e436:	781b      	ldrb	r3, [r3, #0]
    e438:	4413      	add	r3, r2
    e43a:	b2da      	uxtb	r2, r3
    e43c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e444:	701a      	strb	r2, [r3, #0]
    e446:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e44a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e44e:	781a      	ldrb	r2, [r3, #0]
    e450:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e458:	781b      	ldrb	r3, [r3, #0]
    e45a:	4413      	add	r3, r2
    e45c:	b2da      	uxtb	r2, r3
    e45e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e466:	701a      	strb	r2, [r3, #0]
    e468:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e46c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e470:	781b      	ldrb	r3, [r3, #0]
    e472:	3301      	adds	r3, #1
    e474:	b2da      	uxtb	r2, r3
    e476:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e47e:	701a      	strb	r2, [r3, #0]
    e480:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e488:	781b      	ldrb	r3, [r3, #0]
    e48a:	2bff      	cmp	r3, #255	; 0xff
    e48c:	d105      	bne.n	e49a <send_nav_values+0xf0e>
    e48e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e496:	2200      	movs	r2, #0
    e498:	701a      	strb	r2, [r3, #0]
    e49a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e49e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4a2:	781b      	ldrb	r3, [r3, #0]
    e4a4:	461a      	mov	r2, r3
    e4a6:	f24b 2360 	movw	r3, #45664	; 0xb260
    e4aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4ae:	7899      	ldrb	r1, [r3, #2]
    e4b0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e4b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4b8:	5499      	strb	r1, [r3, r2]
    e4ba:	4b57      	ldr	r3, [pc, #348]	; (e618 <send_nav_values+0x108c>)
    e4bc:	781a      	ldrb	r2, [r3, #0]
    e4be:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4c6:	781b      	ldrb	r3, [r3, #0]
    e4c8:	4413      	add	r3, r2
    e4ca:	b2da      	uxtb	r2, r3
    e4cc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4d4:	701a      	strb	r2, [r3, #0]
    e4d6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e4da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4de:	781a      	ldrb	r2, [r3, #0]
    e4e0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e4e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4e8:	781b      	ldrb	r3, [r3, #0]
    e4ea:	4413      	add	r3, r2
    e4ec:	b2da      	uxtb	r2, r3
    e4ee:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e4f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4f6:	701a      	strb	r2, [r3, #0]
    e4f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e4fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e500:	781b      	ldrb	r3, [r3, #0]
    e502:	3301      	adds	r3, #1
    e504:	b2da      	uxtb	r2, r3
    e506:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e50a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e50e:	701a      	strb	r2, [r3, #0]
    e510:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e514:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e518:	781b      	ldrb	r3, [r3, #0]
    e51a:	2bff      	cmp	r3, #255	; 0xff
    e51c:	d105      	bne.n	e52a <send_nav_values+0xf9e>
    e51e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e522:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e526:	2200      	movs	r2, #0
    e528:	701a      	strb	r2, [r3, #0]
    e52a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e52e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e532:	781b      	ldrb	r3, [r3, #0]
    e534:	461a      	mov	r2, r3
    e536:	f24b 2360 	movw	r3, #45664	; 0xb260
    e53a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e53e:	78d9      	ldrb	r1, [r3, #3]
    e540:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e548:	5499      	strb	r1, [r3, r2]
    e54a:	4b34      	ldr	r3, [pc, #208]	; (e61c <send_nav_values+0x1090>)
    e54c:	781a      	ldrb	r2, [r3, #0]
    e54e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e552:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e556:	781b      	ldrb	r3, [r3, #0]
    e558:	4413      	add	r3, r2
    e55a:	b2da      	uxtb	r2, r3
    e55c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e564:	701a      	strb	r2, [r3, #0]
    e566:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e56a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e56e:	781a      	ldrb	r2, [r3, #0]
    e570:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e574:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e578:	781b      	ldrb	r3, [r3, #0]
    e57a:	4413      	add	r3, r2
    e57c:	b2da      	uxtb	r2, r3
    e57e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e582:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e586:	701a      	strb	r2, [r3, #0]
    e588:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e58c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e590:	781b      	ldrb	r3, [r3, #0]
    e592:	3301      	adds	r3, #1
    e594:	b2da      	uxtb	r2, r3
    e596:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e59a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e59e:	701a      	strb	r2, [r3, #0]
    e5a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e5a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5a8:	781b      	ldrb	r3, [r3, #0]
    e5aa:	2bff      	cmp	r3, #255	; 0xff
    e5ac:	d105      	bne.n	e5ba <send_nav_values+0x102e>
    e5ae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e5b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5b6:	2200      	movs	r2, #0
    e5b8:	701a      	strb	r2, [r3, #0]
    e5ba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e5be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5c2:	781b      	ldrb	r3, [r3, #0]
    e5c4:	461a      	mov	r2, r3
    e5c6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e5ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5ce:	7819      	ldrb	r1, [r3, #0]
    e5d0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e5d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5d8:	5499      	strb	r1, [r3, r2]
    e5da:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e5de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5e2:	781b      	ldrb	r3, [r3, #0]
    e5e4:	3301      	adds	r3, #1
    e5e6:	b2da      	uxtb	r2, r3
    e5e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e5ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5f0:	701a      	strb	r2, [r3, #0]
    e5f2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e5f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5fa:	781b      	ldrb	r3, [r3, #0]
    e5fc:	2bff      	cmp	r3, #255	; 0xff
    e5fe:	d10f      	bne.n	e620 <send_nav_values+0x1094>
    e600:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e608:	2200      	movs	r2, #0
    e60a:	701a      	strb	r2, [r3, #0]
    e60c:	e008      	b.n	e620 <send_nav_values+0x1094>
    e60e:	bf00      	nop
    e610:	2000040b 	.word	0x2000040b
    e614:	2000b261 	.word	0x2000b261
    e618:	2000b262 	.word	0x2000b262
    e61c:	2000b263 	.word	0x2000b263
    e620:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e628:	781b      	ldrb	r3, [r3, #0]
    e62a:	461a      	mov	r2, r3
    e62c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e634:	7819      	ldrb	r1, [r3, #0]
    e636:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e63a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e63e:	5499      	strb	r1, [r3, r2]
    e640:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e648:	781b      	ldrb	r3, [r3, #0]
    e64a:	3301      	adds	r3, #1
    e64c:	b2da      	uxtb	r2, r3
    e64e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e652:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e656:	701a      	strb	r2, [r3, #0]
    e658:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e65c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e660:	781b      	ldrb	r3, [r3, #0]
    e662:	2bff      	cmp	r3, #255	; 0xff
    e664:	d105      	bne.n	e672 <send_nav_values+0x10e6>
    e666:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e66a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e66e:	2200      	movs	r2, #0
    e670:	701a      	strb	r2, [r3, #0]
    e672:	f242 0339 	movw	r3, #8249	; 0x2039
    e676:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e67a:	781b      	ldrb	r3, [r3, #0]
    e67c:	b2db      	uxtb	r3, r3
    e67e:	f003 0310 	and.w	r3, r3, #16
    e682:	2b00      	cmp	r3, #0
    e684:	d15a      	bne.n	e73c <send_nav_values+0x11b0>
    e686:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    e68a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e68e:	781b      	ldrb	r3, [r3, #0]
    e690:	b2db      	uxtb	r3, r3
    e692:	461a      	mov	r2, r3
    e694:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e69c:	5c9a      	ldrb	r2, [r3, r2]
    e69e:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    e6a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6a6:	701a      	strb	r2, [r3, #0]
    e6a8:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    e6ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6b0:	2200      	movs	r2, #0
    e6b2:	701a      	strb	r2, [r3, #0]
    e6b4:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    e6b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6bc:	781b      	ldrb	r3, [r3, #0]
    e6be:	b2db      	uxtb	r3, r3
    e6c0:	3301      	adds	r3, #1
    e6c2:	b2da      	uxtb	r2, r3
    e6c4:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    e6c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6cc:	701a      	strb	r2, [r3, #0]
    e6ce:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    e6d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6d6:	781b      	ldrb	r3, [r3, #0]
    e6d8:	b2db      	uxtb	r3, r3
    e6da:	2bff      	cmp	r3, #255	; 0xff
    e6dc:	d105      	bne.n	e6ea <send_nav_values+0x115e>
    e6de:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    e6e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6e6:	2200      	movs	r2, #0
    e6e8:	701a      	strb	r2, [r3, #0]
    e6ea:	f242 0338 	movw	r3, #8248	; 0x2038
    e6ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6f2:	f242 0238 	movw	r2, #8248	; 0x2038
    e6f6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e6fa:	7812      	ldrb	r2, [r2, #0]
    e6fc:	b2d2      	uxtb	r2, r2
    e6fe:	f042 0201 	orr.w	r2, r2, #1
    e702:	b2d2      	uxtb	r2, r2
    e704:	701a      	strb	r2, [r3, #0]
    e706:	f242 0339 	movw	r3, #8249	; 0x2039
    e70a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e70e:	f242 0239 	movw	r2, #8249	; 0x2039
    e712:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e716:	7812      	ldrb	r2, [r2, #0]
    e718:	b2d2      	uxtb	r2, r2
    e71a:	f042 0210 	orr.w	r2, r2, #16
    e71e:	b2d2      	uxtb	r2, r2
    e720:	701a      	strb	r2, [r3, #0]
    e722:	e00b      	b.n	e73c <send_nav_values+0x11b0>
    e724:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    e728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e72c:	781b      	ldrb	r3, [r3, #0]
    e72e:	3301      	adds	r3, #1
    e730:	b2da      	uxtb	r2, r3
    e732:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    e736:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e73a:	701a      	strb	r2, [r3, #0]
}
    e73c:	46bd      	mov	sp, r7
    e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e742:	4770      	bx	lr

0000e744 <course_run>:

void course_run(void){
    e744:	b580      	push	{r7, lr}
    e746:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e748:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    e74c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e750:	781b      	ldrb	r3, [r3, #0]
    e752:	2b02      	cmp	r3, #2
    e754:	d006      	beq.n	e764 <course_run+0x20>
    e756:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    e75a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e75e:	781b      	ldrb	r3, [r3, #0]
    e760:	2b03      	cmp	r3, #3
    e762:	d112      	bne.n	e78a <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    e764:	f64a 63b6 	movw	r3, #44726	; 0xaeb6
    e768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e76c:	781b      	ldrb	r3, [r3, #0]
    e76e:	2b02      	cmp	r3, #2
    e770:	d901      	bls.n	e776 <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    e772:	f003 faf1 	bl	11d58 <course_pid_run>
    desired_roll = nav_desired_roll;
    e776:	f24b 2358 	movw	r3, #45656	; 0xb258
    e77a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e77e:	681a      	ldr	r2, [r3, #0]
    e780:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    e784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e788:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    e78a:	bd80      	pop	{r7, pc}

0000e78c <altitude_control_task>:

void altitude_control_task(void)
{
    e78c:	b580      	push	{r7, lr}
    e78e:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    e790:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    e794:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e798:	781b      	ldrb	r3, [r3, #0]
    e79a:	2b02      	cmp	r3, #2
    e79c:	d006      	beq.n	e7ac <altitude_control_task+0x20>
    e79e:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    e7a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7a6:	781b      	ldrb	r3, [r3, #0]
    e7a8:	2b03      	cmp	r3, #3
    e7aa:	d108      	bne.n	e7be <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    e7ac:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
    e7b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7b4:	781b      	ldrb	r3, [r3, #0]
    e7b6:	2b03      	cmp	r3, #3
    e7b8:	d101      	bne.n	e7be <altitude_control_task+0x32>
      			altitude_pid_run();
    e7ba:	f003 fd55 	bl	12268 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    e7be:	bd80      	pop	{r7, pc}

0000e7c0 <climb_control_task>:
void climb_control_task(void)
{
    e7c0:	b580      	push	{r7, lr}
    e7c2:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e7c4:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    e7c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7cc:	781b      	ldrb	r3, [r3, #0]
    e7ce:	2b02      	cmp	r3, #2
    e7d0:	d006      	beq.n	e7e0 <climb_control_task+0x20>
    e7d2:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    e7d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7da:	781b      	ldrb	r3, [r3, #0]
    e7dc:	2b03      	cmp	r3, #3
    e7de:	d135      	bne.n	e84c <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    e7e0:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
    e7e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7e8:	781b      	ldrb	r3, [r3, #0]
    e7ea:	2b01      	cmp	r3, #1
    e7ec:	d901      	bls.n	e7f2 <climb_control_task+0x32>
        	climb_pid_run();
    e7ee:	f003 fb6b 	bl	11ec8 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    e7f2:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
    e7f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7fa:	781b      	ldrb	r3, [r3, #0]
    e7fc:	2b01      	cmp	r3, #1
    e7fe:	d10a      	bne.n	e816 <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    e800:	f24b 2350 	movw	r3, #45648	; 0xb250
    e804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e808:	881b      	ldrh	r3, [r3, #0]
    e80a:	b29a      	uxth	r2, r3
    e80c:	f24b 2304 	movw	r3, #45572	; 0xb204
    e810:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e814:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    e816:	f64a 63bd 	movw	r3, #44733	; 0xaebd
    e81a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e81e:	781b      	ldrb	r3, [r3, #0]
    e820:	2b00      	cmp	r3, #0
    e822:	d10d      	bne.n	e840 <climb_control_task+0x80>
    e824:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    e828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e82c:	881b      	ldrh	r3, [r3, #0]
    e82e:	2b00      	cmp	r3, #0
    e830:	d10c      	bne.n	e84c <climb_control_task+0x8c>
    e832:	f64a 63c8 	movw	r3, #44744	; 0xaec8
    e836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e83a:	781b      	ldrb	r3, [r3, #0]
    e83c:	2b00      	cmp	r3, #0
    e83e:	d105      	bne.n	e84c <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    e840:	f24b 2304 	movw	r3, #45572	; 0xb204
    e844:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e848:	2200      	movs	r2, #0
    e84a:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    e84c:	bd80      	pop	{r7, pc}
    e84e:	bf00      	nop

0000e850 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    e850:	b580      	push	{r7, lr}
    e852:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    e854:	f003 f926 	bl	11aa4 <ir_update>
    estimator_update_state_infrared();
    e858:	f006 fbac 	bl	14fb4 <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    e85c:	f003 f990 	bl	11b80 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    e860:	f24b 2304 	movw	r3, #45572	; 0xb204
    e864:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e868:	881a      	ldrh	r2, [r3, #0]
    e86a:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    e86e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e872:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    e874:	f24b 2306 	movw	r3, #45574	; 0xb206
    e878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e87c:	881a      	ldrh	r2, [r3, #0]
    e87e:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    e882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e886:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    e888:	f24b 2308 	movw	r3, #45576	; 0xb208
    e88c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e890:	881a      	ldrh	r2, [r3, #0]
    e892:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    e896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e89a:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    e89c:	f24b 4390 	movw	r3, #46224	; 0xb490
    e8a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8a4:	681b      	ldr	r3, [r3, #0]
    e8a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e8aa:	4618      	mov	r0, r3
    e8ac:	f009 f80c 	bl	178c8 <__aeabi_f2d>
    e8b0:	4602      	mov	r2, r0
    e8b2:	460b      	mov	r3, r1
    e8b4:	4610      	mov	r0, r2
    e8b6:	4619      	mov	r1, r3
    e8b8:	f04f 0200 	mov.w	r2, #0
    e8bc:	f04f 0300 	mov.w	r3, #0
    e8c0:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e8c4:	f009 f854 	bl	17970 <__aeabi_dmul>
    e8c8:	4602      	mov	r2, r0
    e8ca:	460b      	mov	r3, r1
    e8cc:	4610      	mov	r0, r2
    e8ce:	4619      	mov	r1, r3
    e8d0:	f04f 0200 	mov.w	r2, #0
    e8d4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    e8d8:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    e8dc:	f009 faba 	bl	17e54 <__aeabi_dcmplt>
    e8e0:	4603      	mov	r3, r0
    e8e2:	2b00      	cmp	r3, #0
    e8e4:	d002      	beq.n	e8ec <stabilisation_task+0x9c>
    e8e6:	f64d 2280 	movw	r2, #55936	; 0xda80
    e8ea:	e046      	b.n	e97a <stabilisation_task+0x12a>
    e8ec:	f24b 4390 	movw	r3, #46224	; 0xb490
    e8f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8f4:	681b      	ldr	r3, [r3, #0]
    e8f6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e8fa:	4618      	mov	r0, r3
    e8fc:	f008 ffe4 	bl	178c8 <__aeabi_f2d>
    e900:	4602      	mov	r2, r0
    e902:	460b      	mov	r3, r1
    e904:	4610      	mov	r0, r2
    e906:	4619      	mov	r1, r3
    e908:	f04f 0200 	mov.w	r2, #0
    e90c:	f04f 0300 	mov.w	r3, #0
    e910:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e914:	f009 f82c 	bl	17970 <__aeabi_dmul>
    e918:	4602      	mov	r2, r0
    e91a:	460b      	mov	r3, r1
    e91c:	4610      	mov	r0, r2
    e91e:	4619      	mov	r1, r3
    e920:	f04f 0200 	mov.w	r2, #0
    e924:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    e928:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    e92c:	f009 fab0 	bl	17e90 <__aeabi_dcmpgt>
    e930:	4603      	mov	r3, r0
    e932:	2b00      	cmp	r3, #0
    e934:	d002      	beq.n	e93c <stabilisation_task+0xec>
    e936:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    e93a:	e01d      	b.n	e978 <stabilisation_task+0x128>
    e93c:	f24b 4390 	movw	r3, #46224	; 0xb490
    e940:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e944:	681b      	ldr	r3, [r3, #0]
    e946:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e94a:	4618      	mov	r0, r3
    e94c:	f008 ffbc 	bl	178c8 <__aeabi_f2d>
    e950:	4602      	mov	r2, r0
    e952:	460b      	mov	r3, r1
    e954:	4610      	mov	r0, r2
    e956:	4619      	mov	r1, r3
    e958:	f04f 0200 	mov.w	r2, #0
    e95c:	f04f 0300 	mov.w	r3, #0
    e960:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e964:	f009 f804 	bl	17970 <__aeabi_dmul>
    e968:	4602      	mov	r2, r0
    e96a:	460b      	mov	r3, r1
    e96c:	4610      	mov	r0, r2
    e96e:	4619      	mov	r1, r3
    e970:	f009 fa98 	bl	17ea4 <__aeabi_d2iz>
    e974:	4603      	mov	r3, r0
    e976:	b29b      	uxth	r3, r3
    e978:	b29a      	uxth	r2, r3
    e97a:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    e97e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e982:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    e984:	bd80      	pop	{r7, pc}
    e986:	bf00      	nop

0000e988 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    e988:	b580      	push	{r7, lr}
    e98a:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    e98c:	f24b 0365 	movw	r3, #45157	; 0xb065
    e990:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e994:	2200      	movs	r2, #0
    e996:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    e998:	f24b 0366 	movw	r3, #45158	; 0xb066
    e99c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9a0:	781b      	ldrb	r3, [r3, #0]
    e9a2:	2b00      	cmp	r3, #0
    e9a4:	f001 81af 	beq.w	fd06 <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    e9a8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e9ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9b0:	781a      	ldrb	r2, [r3, #0]
    e9b2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    e9b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9ba:	781b      	ldrb	r3, [r3, #0]
    e9bc:	b2db      	uxtb	r3, r3
    e9be:	429a      	cmp	r2, r3
    e9c0:	d313      	bcc.n	e9ea <send_gps_pos+0x62>
    e9c2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    e9c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9ca:	781b      	ldrb	r3, [r3, #0]
    e9cc:	b2db      	uxtb	r3, r3
    e9ce:	461a      	mov	r2, r3
    e9d0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e9d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9d8:	781b      	ldrb	r3, [r3, #0]
    e9da:	1ad3      	subs	r3, r2, r3
    e9dc:	33ff      	adds	r3, #255	; 0xff
    e9de:	2b21      	cmp	r3, #33	; 0x21
    e9e0:	bfd4      	ite	le
    e9e2:	2300      	movle	r3, #0
    e9e4:	2301      	movgt	r3, #1
    e9e6:	b2db      	uxtb	r3, r3
    e9e8:	e011      	b.n	ea0e <send_gps_pos+0x86>
    e9ea:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    e9ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9f2:	781b      	ldrb	r3, [r3, #0]
    e9f4:	b2db      	uxtb	r3, r3
    e9f6:	461a      	mov	r2, r3
    e9f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e9fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea00:	781b      	ldrb	r3, [r3, #0]
    ea02:	1ad3      	subs	r3, r2, r3
    ea04:	2b21      	cmp	r3, #33	; 0x21
    ea06:	bfd4      	ite	le
    ea08:	2300      	movle	r3, #0
    ea0a:	2301      	movgt	r3, #1
    ea0c:	b2db      	uxtb	r3, r3
    ea0e:	2b00      	cmp	r3, #0
    ea10:	f001 816b 	beq.w	fcea <send_gps_pos+0x1362>
    ea14:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ea18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea1c:	781b      	ldrb	r3, [r3, #0]
    ea1e:	461a      	mov	r2, r3
    ea20:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ea24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea28:	2105      	movs	r1, #5
    ea2a:	5499      	strb	r1, [r3, r2]
    ea2c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ea30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea34:	781b      	ldrb	r3, [r3, #0]
    ea36:	3301      	adds	r3, #1
    ea38:	b2da      	uxtb	r2, r3
    ea3a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ea3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea42:	701a      	strb	r2, [r3, #0]
    ea44:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ea48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea4c:	781b      	ldrb	r3, [r3, #0]
    ea4e:	2bff      	cmp	r3, #255	; 0xff
    ea50:	d105      	bne.n	ea5e <send_gps_pos+0xd6>
    ea52:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ea56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea5a:	2200      	movs	r2, #0
    ea5c:	701a      	strb	r2, [r3, #0]
    ea5e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ea62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea66:	781b      	ldrb	r3, [r3, #0]
    ea68:	461a      	mov	r2, r3
    ea6a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ea6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea72:	2108      	movs	r1, #8
    ea74:	5499      	strb	r1, [r3, r2]
    ea76:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ea7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea7e:	781b      	ldrb	r3, [r3, #0]
    ea80:	3301      	adds	r3, #1
    ea82:	b2da      	uxtb	r2, r3
    ea84:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ea88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea8c:	701a      	strb	r2, [r3, #0]
    ea8e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ea92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea96:	781b      	ldrb	r3, [r3, #0]
    ea98:	2bff      	cmp	r3, #255	; 0xff
    ea9a:	d105      	bne.n	eaa8 <send_gps_pos+0x120>
    ea9c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eaa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaa4:	2200      	movs	r2, #0
    eaa6:	701a      	strb	r2, [r3, #0]
    eaa8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eaac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eab0:	2208      	movs	r2, #8
    eab2:	701a      	strb	r2, [r3, #0]
    eab4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    eab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eabc:	2208      	movs	r2, #8
    eabe:	701a      	strb	r2, [r3, #0]
    eac0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eac8:	781b      	ldrb	r3, [r3, #0]
    eaca:	461a      	mov	r2, r3
    eacc:	f24b 0364 	movw	r3, #45156	; 0xb064
    ead0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ead4:	7819      	ldrb	r1, [r3, #0]
    ead6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    eada:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eade:	5499      	strb	r1, [r3, r2]
    eae0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eae8:	781a      	ldrb	r2, [r3, #0]
    eaea:	f24b 0364 	movw	r3, #45156	; 0xb064
    eaee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaf2:	781b      	ldrb	r3, [r3, #0]
    eaf4:	4413      	add	r3, r2
    eaf6:	b2da      	uxtb	r2, r3
    eaf8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eafc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb00:	701a      	strb	r2, [r3, #0]
    eb02:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    eb06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb0a:	781a      	ldrb	r2, [r3, #0]
    eb0c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eb10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb14:	781b      	ldrb	r3, [r3, #0]
    eb16:	4413      	add	r3, r2
    eb18:	b2da      	uxtb	r2, r3
    eb1a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    eb1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb22:	701a      	strb	r2, [r3, #0]
    eb24:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eb28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb2c:	781b      	ldrb	r3, [r3, #0]
    eb2e:	3301      	adds	r3, #1
    eb30:	b2da      	uxtb	r2, r3
    eb32:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eb36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb3a:	701a      	strb	r2, [r3, #0]
    eb3c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eb40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb44:	781b      	ldrb	r3, [r3, #0]
    eb46:	2bff      	cmp	r3, #255	; 0xff
    eb48:	d105      	bne.n	eb56 <send_gps_pos+0x1ce>
    eb4a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eb4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb52:	2200      	movs	r2, #0
    eb54:	701a      	strb	r2, [r3, #0]
    eb56:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eb5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb5e:	781b      	ldrb	r3, [r3, #0]
    eb60:	461a      	mov	r2, r3
    eb62:	f24b 0354 	movw	r3, #45140	; 0xb054
    eb66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb6a:	7819      	ldrb	r1, [r3, #0]
    eb6c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    eb70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb74:	5499      	strb	r1, [r3, r2]
    eb76:	f24b 0354 	movw	r3, #45140	; 0xb054
    eb7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb7e:	781a      	ldrb	r2, [r3, #0]
    eb80:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eb84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb88:	781b      	ldrb	r3, [r3, #0]
    eb8a:	4413      	add	r3, r2
    eb8c:	b2da      	uxtb	r2, r3
    eb8e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eb92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb96:	701a      	strb	r2, [r3, #0]
    eb98:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    eb9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eba0:	781a      	ldrb	r2, [r3, #0]
    eba2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebaa:	781b      	ldrb	r3, [r3, #0]
    ebac:	4413      	add	r3, r2
    ebae:	b2da      	uxtb	r2, r3
    ebb0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ebb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebb8:	701a      	strb	r2, [r3, #0]
    ebba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ebbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebc2:	781b      	ldrb	r3, [r3, #0]
    ebc4:	3301      	adds	r3, #1
    ebc6:	b2da      	uxtb	r2, r3
    ebc8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ebcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebd0:	701a      	strb	r2, [r3, #0]
    ebd2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ebd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebda:	781b      	ldrb	r3, [r3, #0]
    ebdc:	2bff      	cmp	r3, #255	; 0xff
    ebde:	d105      	bne.n	ebec <send_gps_pos+0x264>
    ebe0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ebe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebe8:	2200      	movs	r2, #0
    ebea:	701a      	strb	r2, [r3, #0]
    ebec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ebf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebf4:	781b      	ldrb	r3, [r3, #0]
    ebf6:	461a      	mov	r2, r3
    ebf8:	f24b 0354 	movw	r3, #45140	; 0xb054
    ebfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec00:	7859      	ldrb	r1, [r3, #1]
    ec02:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ec06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec0a:	5499      	strb	r1, [r3, r2]
    ec0c:	4bd1      	ldr	r3, [pc, #836]	; (ef54 <send_gps_pos+0x5cc>)
    ec0e:	781a      	ldrb	r2, [r3, #0]
    ec10:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ec14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec18:	781b      	ldrb	r3, [r3, #0]
    ec1a:	4413      	add	r3, r2
    ec1c:	b2da      	uxtb	r2, r3
    ec1e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ec22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec26:	701a      	strb	r2, [r3, #0]
    ec28:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ec2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec30:	781a      	ldrb	r2, [r3, #0]
    ec32:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ec36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec3a:	781b      	ldrb	r3, [r3, #0]
    ec3c:	4413      	add	r3, r2
    ec3e:	b2da      	uxtb	r2, r3
    ec40:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ec44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec48:	701a      	strb	r2, [r3, #0]
    ec4a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ec4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec52:	781b      	ldrb	r3, [r3, #0]
    ec54:	3301      	adds	r3, #1
    ec56:	b2da      	uxtb	r2, r3
    ec58:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ec5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec60:	701a      	strb	r2, [r3, #0]
    ec62:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ec66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec6a:	781b      	ldrb	r3, [r3, #0]
    ec6c:	2bff      	cmp	r3, #255	; 0xff
    ec6e:	d105      	bne.n	ec7c <send_gps_pos+0x2f4>
    ec70:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ec74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec78:	2200      	movs	r2, #0
    ec7a:	701a      	strb	r2, [r3, #0]
    ec7c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ec80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec84:	781b      	ldrb	r3, [r3, #0]
    ec86:	461a      	mov	r2, r3
    ec88:	f24b 0354 	movw	r3, #45140	; 0xb054
    ec8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec90:	7899      	ldrb	r1, [r3, #2]
    ec92:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ec96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec9a:	5499      	strb	r1, [r3, r2]
    ec9c:	4bae      	ldr	r3, [pc, #696]	; (ef58 <send_gps_pos+0x5d0>)
    ec9e:	781a      	ldrb	r2, [r3, #0]
    eca0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eca8:	781b      	ldrb	r3, [r3, #0]
    ecaa:	4413      	add	r3, r2
    ecac:	b2da      	uxtb	r2, r3
    ecae:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ecb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecb6:	701a      	strb	r2, [r3, #0]
    ecb8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ecbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecc0:	781a      	ldrb	r2, [r3, #0]
    ecc2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ecc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecca:	781b      	ldrb	r3, [r3, #0]
    eccc:	4413      	add	r3, r2
    ecce:	b2da      	uxtb	r2, r3
    ecd0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ecd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecd8:	701a      	strb	r2, [r3, #0]
    ecda:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ecde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ece2:	781b      	ldrb	r3, [r3, #0]
    ece4:	3301      	adds	r3, #1
    ece6:	b2da      	uxtb	r2, r3
    ece8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ecec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecf0:	701a      	strb	r2, [r3, #0]
    ecf2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ecf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecfa:	781b      	ldrb	r3, [r3, #0]
    ecfc:	2bff      	cmp	r3, #255	; 0xff
    ecfe:	d105      	bne.n	ed0c <send_gps_pos+0x384>
    ed00:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ed04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed08:	2200      	movs	r2, #0
    ed0a:	701a      	strb	r2, [r3, #0]
    ed0c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ed10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed14:	781b      	ldrb	r3, [r3, #0]
    ed16:	461a      	mov	r2, r3
    ed18:	f24b 0354 	movw	r3, #45140	; 0xb054
    ed1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed20:	78d9      	ldrb	r1, [r3, #3]
    ed22:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ed26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed2a:	5499      	strb	r1, [r3, r2]
    ed2c:	4b8b      	ldr	r3, [pc, #556]	; (ef5c <send_gps_pos+0x5d4>)
    ed2e:	781a      	ldrb	r2, [r3, #0]
    ed30:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ed34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed38:	781b      	ldrb	r3, [r3, #0]
    ed3a:	4413      	add	r3, r2
    ed3c:	b2da      	uxtb	r2, r3
    ed3e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ed42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed46:	701a      	strb	r2, [r3, #0]
    ed48:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ed4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed50:	781a      	ldrb	r2, [r3, #0]
    ed52:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ed56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed5a:	781b      	ldrb	r3, [r3, #0]
    ed5c:	4413      	add	r3, r2
    ed5e:	b2da      	uxtb	r2, r3
    ed60:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ed64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed68:	701a      	strb	r2, [r3, #0]
    ed6a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ed6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed72:	781b      	ldrb	r3, [r3, #0]
    ed74:	3301      	adds	r3, #1
    ed76:	b2da      	uxtb	r2, r3
    ed78:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ed7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed80:	701a      	strb	r2, [r3, #0]
    ed82:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ed86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed8a:	781b      	ldrb	r3, [r3, #0]
    ed8c:	2bff      	cmp	r3, #255	; 0xff
    ed8e:	d105      	bne.n	ed9c <send_gps_pos+0x414>
    ed90:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ed94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed98:	2200      	movs	r2, #0
    ed9a:	701a      	strb	r2, [r3, #0]
    ed9c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eda0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eda4:	781b      	ldrb	r3, [r3, #0]
    eda6:	461a      	mov	r2, r3
    eda8:	f24b 0358 	movw	r3, #45144	; 0xb058
    edac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edb0:	7819      	ldrb	r1, [r3, #0]
    edb2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    edb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edba:	5499      	strb	r1, [r3, r2]
    edbc:	f24b 0358 	movw	r3, #45144	; 0xb058
    edc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edc4:	781a      	ldrb	r2, [r3, #0]
    edc6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    edca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edce:	781b      	ldrb	r3, [r3, #0]
    edd0:	4413      	add	r3, r2
    edd2:	b2da      	uxtb	r2, r3
    edd4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    edd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eddc:	701a      	strb	r2, [r3, #0]
    edde:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ede2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ede6:	781a      	ldrb	r2, [r3, #0]
    ede8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    edec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edf0:	781b      	ldrb	r3, [r3, #0]
    edf2:	4413      	add	r3, r2
    edf4:	b2da      	uxtb	r2, r3
    edf6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    edfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edfe:	701a      	strb	r2, [r3, #0]
    ee00:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ee04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee08:	781b      	ldrb	r3, [r3, #0]
    ee0a:	3301      	adds	r3, #1
    ee0c:	b2da      	uxtb	r2, r3
    ee0e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ee12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee16:	701a      	strb	r2, [r3, #0]
    ee18:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ee1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee20:	781b      	ldrb	r3, [r3, #0]
    ee22:	2bff      	cmp	r3, #255	; 0xff
    ee24:	d105      	bne.n	ee32 <send_gps_pos+0x4aa>
    ee26:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ee2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee2e:	2200      	movs	r2, #0
    ee30:	701a      	strb	r2, [r3, #0]
    ee32:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ee36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee3a:	781b      	ldrb	r3, [r3, #0]
    ee3c:	461a      	mov	r2, r3
    ee3e:	f24b 0358 	movw	r3, #45144	; 0xb058
    ee42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee46:	7859      	ldrb	r1, [r3, #1]
    ee48:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ee4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee50:	5499      	strb	r1, [r3, r2]
    ee52:	4b43      	ldr	r3, [pc, #268]	; (ef60 <send_gps_pos+0x5d8>)
    ee54:	781a      	ldrb	r2, [r3, #0]
    ee56:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ee5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee5e:	781b      	ldrb	r3, [r3, #0]
    ee60:	4413      	add	r3, r2
    ee62:	b2da      	uxtb	r2, r3
    ee64:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ee68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee6c:	701a      	strb	r2, [r3, #0]
    ee6e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ee72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee76:	781a      	ldrb	r2, [r3, #0]
    ee78:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ee7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee80:	781b      	ldrb	r3, [r3, #0]
    ee82:	4413      	add	r3, r2
    ee84:	b2da      	uxtb	r2, r3
    ee86:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ee8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee8e:	701a      	strb	r2, [r3, #0]
    ee90:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ee94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee98:	781b      	ldrb	r3, [r3, #0]
    ee9a:	3301      	adds	r3, #1
    ee9c:	b2da      	uxtb	r2, r3
    ee9e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eea6:	701a      	strb	r2, [r3, #0]
    eea8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eeac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeb0:	781b      	ldrb	r3, [r3, #0]
    eeb2:	2bff      	cmp	r3, #255	; 0xff
    eeb4:	d105      	bne.n	eec2 <send_gps_pos+0x53a>
    eeb6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eeba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eebe:	2200      	movs	r2, #0
    eec0:	701a      	strb	r2, [r3, #0]
    eec2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeca:	781b      	ldrb	r3, [r3, #0]
    eecc:	461a      	mov	r2, r3
    eece:	f24b 0358 	movw	r3, #45144	; 0xb058
    eed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eed6:	7899      	ldrb	r1, [r3, #2]
    eed8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    eedc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eee0:	5499      	strb	r1, [r3, r2]
    eee2:	4b20      	ldr	r3, [pc, #128]	; (ef64 <send_gps_pos+0x5dc>)
    eee4:	781a      	ldrb	r2, [r3, #0]
    eee6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eeea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeee:	781b      	ldrb	r3, [r3, #0]
    eef0:	4413      	add	r3, r2
    eef2:	b2da      	uxtb	r2, r3
    eef4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eefc:	701a      	strb	r2, [r3, #0]
    eefe:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ef02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef06:	781a      	ldrb	r2, [r3, #0]
    ef08:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ef0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef10:	781b      	ldrb	r3, [r3, #0]
    ef12:	4413      	add	r3, r2
    ef14:	b2da      	uxtb	r2, r3
    ef16:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ef1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef1e:	701a      	strb	r2, [r3, #0]
    ef20:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ef24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef28:	781b      	ldrb	r3, [r3, #0]
    ef2a:	3301      	adds	r3, #1
    ef2c:	b2da      	uxtb	r2, r3
    ef2e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ef32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef36:	701a      	strb	r2, [r3, #0]
    ef38:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ef3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef40:	781b      	ldrb	r3, [r3, #0]
    ef42:	2bff      	cmp	r3, #255	; 0xff
    ef44:	d110      	bne.n	ef68 <send_gps_pos+0x5e0>
    ef46:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ef4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef4e:	2200      	movs	r2, #0
    ef50:	701a      	strb	r2, [r3, #0]
    ef52:	e009      	b.n	ef68 <send_gps_pos+0x5e0>
    ef54:	2000b055 	.word	0x2000b055
    ef58:	2000b056 	.word	0x2000b056
    ef5c:	2000b057 	.word	0x2000b057
    ef60:	2000b059 	.word	0x2000b059
    ef64:	2000b05a 	.word	0x2000b05a
    ef68:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ef6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef70:	781b      	ldrb	r3, [r3, #0]
    ef72:	461a      	mov	r2, r3
    ef74:	f24b 0358 	movw	r3, #45144	; 0xb058
    ef78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef7c:	78d9      	ldrb	r1, [r3, #3]
    ef7e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ef82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef86:	5499      	strb	r1, [r3, r2]
    ef88:	4bd3      	ldr	r3, [pc, #844]	; (f2d8 <send_gps_pos+0x950>)
    ef8a:	781a      	ldrb	r2, [r3, #0]
    ef8c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ef90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef94:	781b      	ldrb	r3, [r3, #0]
    ef96:	4413      	add	r3, r2
    ef98:	b2da      	uxtb	r2, r3
    ef9a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ef9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efa2:	701a      	strb	r2, [r3, #0]
    efa4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    efa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efac:	781a      	ldrb	r2, [r3, #0]
    efae:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    efb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efb6:	781b      	ldrb	r3, [r3, #0]
    efb8:	4413      	add	r3, r2
    efba:	b2da      	uxtb	r2, r3
    efbc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    efc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efc4:	701a      	strb	r2, [r3, #0]
    efc6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    efca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efce:	781b      	ldrb	r3, [r3, #0]
    efd0:	3301      	adds	r3, #1
    efd2:	b2da      	uxtb	r2, r3
    efd4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    efd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efdc:	701a      	strb	r2, [r3, #0]
    efde:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    efe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efe6:	781b      	ldrb	r3, [r3, #0]
    efe8:	2bff      	cmp	r3, #255	; 0xff
    efea:	d105      	bne.n	eff8 <send_gps_pos+0x670>
    efec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eff4:	2200      	movs	r2, #0
    eff6:	701a      	strb	r2, [r3, #0]
    eff8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    effc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f000:	781b      	ldrb	r3, [r3, #0]
    f002:	461a      	mov	r2, r3
    f004:	f24b 0350 	movw	r3, #45136	; 0xb050
    f008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f00c:	7819      	ldrb	r1, [r3, #0]
    f00e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f016:	5499      	strb	r1, [r3, r2]
    f018:	f24b 0350 	movw	r3, #45136	; 0xb050
    f01c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f020:	781a      	ldrb	r2, [r3, #0]
    f022:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f02a:	781b      	ldrb	r3, [r3, #0]
    f02c:	4413      	add	r3, r2
    f02e:	b2da      	uxtb	r2, r3
    f030:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f038:	701a      	strb	r2, [r3, #0]
    f03a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f03e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f042:	781a      	ldrb	r2, [r3, #0]
    f044:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f04c:	781b      	ldrb	r3, [r3, #0]
    f04e:	4413      	add	r3, r2
    f050:	b2da      	uxtb	r2, r3
    f052:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f05a:	701a      	strb	r2, [r3, #0]
    f05c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f060:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f064:	781b      	ldrb	r3, [r3, #0]
    f066:	3301      	adds	r3, #1
    f068:	b2da      	uxtb	r2, r3
    f06a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f06e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f072:	701a      	strb	r2, [r3, #0]
    f074:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f07c:	781b      	ldrb	r3, [r3, #0]
    f07e:	2bff      	cmp	r3, #255	; 0xff
    f080:	d105      	bne.n	f08e <send_gps_pos+0x706>
    f082:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f08a:	2200      	movs	r2, #0
    f08c:	701a      	strb	r2, [r3, #0]
    f08e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f096:	781b      	ldrb	r3, [r3, #0]
    f098:	461a      	mov	r2, r3
    f09a:	f24b 0350 	movw	r3, #45136	; 0xb050
    f09e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0a2:	7859      	ldrb	r1, [r3, #1]
    f0a4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f0a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0ac:	5499      	strb	r1, [r3, r2]
    f0ae:	4b8b      	ldr	r3, [pc, #556]	; (f2dc <send_gps_pos+0x954>)
    f0b0:	781a      	ldrb	r2, [r3, #0]
    f0b2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f0b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0ba:	781b      	ldrb	r3, [r3, #0]
    f0bc:	4413      	add	r3, r2
    f0be:	b2da      	uxtb	r2, r3
    f0c0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0c8:	701a      	strb	r2, [r3, #0]
    f0ca:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f0ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0d2:	781a      	ldrb	r2, [r3, #0]
    f0d4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f0d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0dc:	781b      	ldrb	r3, [r3, #0]
    f0de:	4413      	add	r3, r2
    f0e0:	b2da      	uxtb	r2, r3
    f0e2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f0e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0ea:	701a      	strb	r2, [r3, #0]
    f0ec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f0f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0f4:	781b      	ldrb	r3, [r3, #0]
    f0f6:	3301      	adds	r3, #1
    f0f8:	b2da      	uxtb	r2, r3
    f0fa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f0fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f102:	701a      	strb	r2, [r3, #0]
    f104:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f10c:	781b      	ldrb	r3, [r3, #0]
    f10e:	2bff      	cmp	r3, #255	; 0xff
    f110:	d105      	bne.n	f11e <send_gps_pos+0x796>
    f112:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f11a:	2200      	movs	r2, #0
    f11c:	701a      	strb	r2, [r3, #0]
    f11e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f126:	781b      	ldrb	r3, [r3, #0]
    f128:	461a      	mov	r2, r3
    f12a:	f24b 0350 	movw	r3, #45136	; 0xb050
    f12e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f132:	7899      	ldrb	r1, [r3, #2]
    f134:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f13c:	5499      	strb	r1, [r3, r2]
    f13e:	4b68      	ldr	r3, [pc, #416]	; (f2e0 <send_gps_pos+0x958>)
    f140:	781a      	ldrb	r2, [r3, #0]
    f142:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f146:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f14a:	781b      	ldrb	r3, [r3, #0]
    f14c:	4413      	add	r3, r2
    f14e:	b2da      	uxtb	r2, r3
    f150:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f158:	701a      	strb	r2, [r3, #0]
    f15a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f15e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f162:	781a      	ldrb	r2, [r3, #0]
    f164:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f16c:	781b      	ldrb	r3, [r3, #0]
    f16e:	4413      	add	r3, r2
    f170:	b2da      	uxtb	r2, r3
    f172:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f17a:	701a      	strb	r2, [r3, #0]
    f17c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f180:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f184:	781b      	ldrb	r3, [r3, #0]
    f186:	3301      	adds	r3, #1
    f188:	b2da      	uxtb	r2, r3
    f18a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f18e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f192:	701a      	strb	r2, [r3, #0]
    f194:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f19c:	781b      	ldrb	r3, [r3, #0]
    f19e:	2bff      	cmp	r3, #255	; 0xff
    f1a0:	d105      	bne.n	f1ae <send_gps_pos+0x826>
    f1a2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f1a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1aa:	2200      	movs	r2, #0
    f1ac:	701a      	strb	r2, [r3, #0]
    f1ae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f1b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1b6:	781b      	ldrb	r3, [r3, #0]
    f1b8:	461a      	mov	r2, r3
    f1ba:	f24b 0350 	movw	r3, #45136	; 0xb050
    f1be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1c2:	78d9      	ldrb	r1, [r3, #3]
    f1c4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f1c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1cc:	5499      	strb	r1, [r3, r2]
    f1ce:	4b45      	ldr	r3, [pc, #276]	; (f2e4 <send_gps_pos+0x95c>)
    f1d0:	781a      	ldrb	r2, [r3, #0]
    f1d2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f1d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1da:	781b      	ldrb	r3, [r3, #0]
    f1dc:	4413      	add	r3, r2
    f1de:	b2da      	uxtb	r2, r3
    f1e0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f1e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1e8:	701a      	strb	r2, [r3, #0]
    f1ea:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f1ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1f2:	781a      	ldrb	r2, [r3, #0]
    f1f4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f1f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1fc:	781b      	ldrb	r3, [r3, #0]
    f1fe:	4413      	add	r3, r2
    f200:	b2da      	uxtb	r2, r3
    f202:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f20a:	701a      	strb	r2, [r3, #0]
    f20c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f210:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f214:	781b      	ldrb	r3, [r3, #0]
    f216:	3301      	adds	r3, #1
    f218:	b2da      	uxtb	r2, r3
    f21a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f21e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f222:	701a      	strb	r2, [r3, #0]
    f224:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f228:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f22c:	781b      	ldrb	r3, [r3, #0]
    f22e:	2bff      	cmp	r3, #255	; 0xff
    f230:	d105      	bne.n	f23e <send_gps_pos+0x8b6>
    f232:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f236:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f23a:	2200      	movs	r2, #0
    f23c:	701a      	strb	r2, [r3, #0]
    f23e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f246:	781b      	ldrb	r3, [r3, #0]
    f248:	461a      	mov	r2, r3
    f24a:	f24b 0344 	movw	r3, #45124	; 0xb044
    f24e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f252:	7819      	ldrb	r1, [r3, #0]
    f254:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f25c:	5499      	strb	r1, [r3, r2]
    f25e:	f24b 0344 	movw	r3, #45124	; 0xb044
    f262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f266:	781a      	ldrb	r2, [r3, #0]
    f268:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f26c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f270:	781b      	ldrb	r3, [r3, #0]
    f272:	4413      	add	r3, r2
    f274:	b2da      	uxtb	r2, r3
    f276:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f27a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f27e:	701a      	strb	r2, [r3, #0]
    f280:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f288:	781a      	ldrb	r2, [r3, #0]
    f28a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f28e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f292:	781b      	ldrb	r3, [r3, #0]
    f294:	4413      	add	r3, r2
    f296:	b2da      	uxtb	r2, r3
    f298:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f29c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2a0:	701a      	strb	r2, [r3, #0]
    f2a2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f2a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2aa:	781b      	ldrb	r3, [r3, #0]
    f2ac:	3301      	adds	r3, #1
    f2ae:	b2da      	uxtb	r2, r3
    f2b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f2b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2b8:	701a      	strb	r2, [r3, #0]
    f2ba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f2be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2c2:	781b      	ldrb	r3, [r3, #0]
    f2c4:	2bff      	cmp	r3, #255	; 0xff
    f2c6:	d10f      	bne.n	f2e8 <send_gps_pos+0x960>
    f2c8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f2cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2d0:	2200      	movs	r2, #0
    f2d2:	701a      	strb	r2, [r3, #0]
    f2d4:	e008      	b.n	f2e8 <send_gps_pos+0x960>
    f2d6:	bf00      	nop
    f2d8:	2000b05b 	.word	0x2000b05b
    f2dc:	2000b051 	.word	0x2000b051
    f2e0:	2000b052 	.word	0x2000b052
    f2e4:	2000b053 	.word	0x2000b053
    f2e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f2ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2f0:	781b      	ldrb	r3, [r3, #0]
    f2f2:	461a      	mov	r2, r3
    f2f4:	f24b 0344 	movw	r3, #45124	; 0xb044
    f2f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2fc:	7859      	ldrb	r1, [r3, #1]
    f2fe:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f306:	5499      	strb	r1, [r3, r2]
    f308:	4bd1      	ldr	r3, [pc, #836]	; (f650 <send_gps_pos+0xcc8>)
    f30a:	781a      	ldrb	r2, [r3, #0]
    f30c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f314:	781b      	ldrb	r3, [r3, #0]
    f316:	4413      	add	r3, r2
    f318:	b2da      	uxtb	r2, r3
    f31a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f31e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f322:	701a      	strb	r2, [r3, #0]
    f324:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f32c:	781a      	ldrb	r2, [r3, #0]
    f32e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f336:	781b      	ldrb	r3, [r3, #0]
    f338:	4413      	add	r3, r2
    f33a:	b2da      	uxtb	r2, r3
    f33c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f344:	701a      	strb	r2, [r3, #0]
    f346:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f34a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f34e:	781b      	ldrb	r3, [r3, #0]
    f350:	3301      	adds	r3, #1
    f352:	b2da      	uxtb	r2, r3
    f354:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f35c:	701a      	strb	r2, [r3, #0]
    f35e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f366:	781b      	ldrb	r3, [r3, #0]
    f368:	2bff      	cmp	r3, #255	; 0xff
    f36a:	d105      	bne.n	f378 <send_gps_pos+0x9f0>
    f36c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f370:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f374:	2200      	movs	r2, #0
    f376:	701a      	strb	r2, [r3, #0]
    f378:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f37c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f380:	781b      	ldrb	r3, [r3, #0]
    f382:	461a      	mov	r2, r3
    f384:	f24b 0344 	movw	r3, #45124	; 0xb044
    f388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f38c:	7899      	ldrb	r1, [r3, #2]
    f38e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f396:	5499      	strb	r1, [r3, r2]
    f398:	4bae      	ldr	r3, [pc, #696]	; (f654 <send_gps_pos+0xccc>)
    f39a:	781a      	ldrb	r2, [r3, #0]
    f39c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f3a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3a4:	781b      	ldrb	r3, [r3, #0]
    f3a6:	4413      	add	r3, r2
    f3a8:	b2da      	uxtb	r2, r3
    f3aa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f3ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3b2:	701a      	strb	r2, [r3, #0]
    f3b4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f3b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3bc:	781a      	ldrb	r2, [r3, #0]
    f3be:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f3c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3c6:	781b      	ldrb	r3, [r3, #0]
    f3c8:	4413      	add	r3, r2
    f3ca:	b2da      	uxtb	r2, r3
    f3cc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f3d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3d4:	701a      	strb	r2, [r3, #0]
    f3d6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f3da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3de:	781b      	ldrb	r3, [r3, #0]
    f3e0:	3301      	adds	r3, #1
    f3e2:	b2da      	uxtb	r2, r3
    f3e4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f3e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3ec:	701a      	strb	r2, [r3, #0]
    f3ee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f3f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3f6:	781b      	ldrb	r3, [r3, #0]
    f3f8:	2bff      	cmp	r3, #255	; 0xff
    f3fa:	d105      	bne.n	f408 <send_gps_pos+0xa80>
    f3fc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f400:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f404:	2200      	movs	r2, #0
    f406:	701a      	strb	r2, [r3, #0]
    f408:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f40c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f410:	781b      	ldrb	r3, [r3, #0]
    f412:	461a      	mov	r2, r3
    f414:	f24b 0344 	movw	r3, #45124	; 0xb044
    f418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f41c:	78d9      	ldrb	r1, [r3, #3]
    f41e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f422:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f426:	5499      	strb	r1, [r3, r2]
    f428:	4b8b      	ldr	r3, [pc, #556]	; (f658 <send_gps_pos+0xcd0>)
    f42a:	781a      	ldrb	r2, [r3, #0]
    f42c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f434:	781b      	ldrb	r3, [r3, #0]
    f436:	4413      	add	r3, r2
    f438:	b2da      	uxtb	r2, r3
    f43a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f43e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f442:	701a      	strb	r2, [r3, #0]
    f444:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f448:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f44c:	781a      	ldrb	r2, [r3, #0]
    f44e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f456:	781b      	ldrb	r3, [r3, #0]
    f458:	4413      	add	r3, r2
    f45a:	b2da      	uxtb	r2, r3
    f45c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f464:	701a      	strb	r2, [r3, #0]
    f466:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f46a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f46e:	781b      	ldrb	r3, [r3, #0]
    f470:	3301      	adds	r3, #1
    f472:	b2da      	uxtb	r2, r3
    f474:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f47c:	701a      	strb	r2, [r3, #0]
    f47e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f486:	781b      	ldrb	r3, [r3, #0]
    f488:	2bff      	cmp	r3, #255	; 0xff
    f48a:	d105      	bne.n	f498 <send_gps_pos+0xb10>
    f48c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f490:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f494:	2200      	movs	r2, #0
    f496:	701a      	strb	r2, [r3, #0]
    f498:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f49c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4a0:	781b      	ldrb	r3, [r3, #0]
    f4a2:	461a      	mov	r2, r3
    f4a4:	f24b 0348 	movw	r3, #45128	; 0xb048
    f4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4ac:	7819      	ldrb	r1, [r3, #0]
    f4ae:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f4b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4b6:	5499      	strb	r1, [r3, r2]
    f4b8:	f24b 0348 	movw	r3, #45128	; 0xb048
    f4bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4c0:	781a      	ldrb	r2, [r3, #0]
    f4c2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f4c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4ca:	781b      	ldrb	r3, [r3, #0]
    f4cc:	4413      	add	r3, r2
    f4ce:	b2da      	uxtb	r2, r3
    f4d0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f4d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4d8:	701a      	strb	r2, [r3, #0]
    f4da:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f4de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4e2:	781a      	ldrb	r2, [r3, #0]
    f4e4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f4e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4ec:	781b      	ldrb	r3, [r3, #0]
    f4ee:	4413      	add	r3, r2
    f4f0:	b2da      	uxtb	r2, r3
    f4f2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f4f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4fa:	701a      	strb	r2, [r3, #0]
    f4fc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f500:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f504:	781b      	ldrb	r3, [r3, #0]
    f506:	3301      	adds	r3, #1
    f508:	b2da      	uxtb	r2, r3
    f50a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f50e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f512:	701a      	strb	r2, [r3, #0]
    f514:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f51c:	781b      	ldrb	r3, [r3, #0]
    f51e:	2bff      	cmp	r3, #255	; 0xff
    f520:	d105      	bne.n	f52e <send_gps_pos+0xba6>
    f522:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f526:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f52a:	2200      	movs	r2, #0
    f52c:	701a      	strb	r2, [r3, #0]
    f52e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f536:	781b      	ldrb	r3, [r3, #0]
    f538:	461a      	mov	r2, r3
    f53a:	f24b 0348 	movw	r3, #45128	; 0xb048
    f53e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f542:	7859      	ldrb	r1, [r3, #1]
    f544:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f54c:	5499      	strb	r1, [r3, r2]
    f54e:	4b43      	ldr	r3, [pc, #268]	; (f65c <send_gps_pos+0xcd4>)
    f550:	781a      	ldrb	r2, [r3, #0]
    f552:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f55a:	781b      	ldrb	r3, [r3, #0]
    f55c:	4413      	add	r3, r2
    f55e:	b2da      	uxtb	r2, r3
    f560:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f568:	701a      	strb	r2, [r3, #0]
    f56a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f56e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f572:	781a      	ldrb	r2, [r3, #0]
    f574:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f578:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f57c:	781b      	ldrb	r3, [r3, #0]
    f57e:	4413      	add	r3, r2
    f580:	b2da      	uxtb	r2, r3
    f582:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f586:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f58a:	701a      	strb	r2, [r3, #0]
    f58c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f594:	781b      	ldrb	r3, [r3, #0]
    f596:	3301      	adds	r3, #1
    f598:	b2da      	uxtb	r2, r3
    f59a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f59e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5a2:	701a      	strb	r2, [r3, #0]
    f5a4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f5a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5ac:	781b      	ldrb	r3, [r3, #0]
    f5ae:	2bff      	cmp	r3, #255	; 0xff
    f5b0:	d105      	bne.n	f5be <send_gps_pos+0xc36>
    f5b2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f5b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5ba:	2200      	movs	r2, #0
    f5bc:	701a      	strb	r2, [r3, #0]
    f5be:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f5c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5c6:	781b      	ldrb	r3, [r3, #0]
    f5c8:	461a      	mov	r2, r3
    f5ca:	f24b 0348 	movw	r3, #45128	; 0xb048
    f5ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5d2:	7899      	ldrb	r1, [r3, #2]
    f5d4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f5d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5dc:	5499      	strb	r1, [r3, r2]
    f5de:	4b20      	ldr	r3, [pc, #128]	; (f660 <send_gps_pos+0xcd8>)
    f5e0:	781a      	ldrb	r2, [r3, #0]
    f5e2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f5e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5ea:	781b      	ldrb	r3, [r3, #0]
    f5ec:	4413      	add	r3, r2
    f5ee:	b2da      	uxtb	r2, r3
    f5f0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f5f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5f8:	701a      	strb	r2, [r3, #0]
    f5fa:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f5fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f602:	781a      	ldrb	r2, [r3, #0]
    f604:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f608:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f60c:	781b      	ldrb	r3, [r3, #0]
    f60e:	4413      	add	r3, r2
    f610:	b2da      	uxtb	r2, r3
    f612:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f616:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f61a:	701a      	strb	r2, [r3, #0]
    f61c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f624:	781b      	ldrb	r3, [r3, #0]
    f626:	3301      	adds	r3, #1
    f628:	b2da      	uxtb	r2, r3
    f62a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f62e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f632:	701a      	strb	r2, [r3, #0]
    f634:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f63c:	781b      	ldrb	r3, [r3, #0]
    f63e:	2bff      	cmp	r3, #255	; 0xff
    f640:	d110      	bne.n	f664 <send_gps_pos+0xcdc>
    f642:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f646:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f64a:	2200      	movs	r2, #0
    f64c:	701a      	strb	r2, [r3, #0]
    f64e:	e009      	b.n	f664 <send_gps_pos+0xcdc>
    f650:	2000b045 	.word	0x2000b045
    f654:	2000b046 	.word	0x2000b046
    f658:	2000b047 	.word	0x2000b047
    f65c:	2000b049 	.word	0x2000b049
    f660:	2000b04a 	.word	0x2000b04a
    f664:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f668:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f66c:	781b      	ldrb	r3, [r3, #0]
    f66e:	461a      	mov	r2, r3
    f670:	f24b 0348 	movw	r3, #45128	; 0xb048
    f674:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f678:	78d9      	ldrb	r1, [r3, #3]
    f67a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f67e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f682:	5499      	strb	r1, [r3, r2]
    f684:	4bd3      	ldr	r3, [pc, #844]	; (f9d4 <send_gps_pos+0x104c>)
    f686:	781a      	ldrb	r2, [r3, #0]
    f688:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f68c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f690:	781b      	ldrb	r3, [r3, #0]
    f692:	4413      	add	r3, r2
    f694:	b2da      	uxtb	r2, r3
    f696:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f69a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f69e:	701a      	strb	r2, [r3, #0]
    f6a0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f6a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6a8:	781a      	ldrb	r2, [r3, #0]
    f6aa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f6ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6b2:	781b      	ldrb	r3, [r3, #0]
    f6b4:	4413      	add	r3, r2
    f6b6:	b2da      	uxtb	r2, r3
    f6b8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f6bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6c0:	701a      	strb	r2, [r3, #0]
    f6c2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f6c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6ca:	781b      	ldrb	r3, [r3, #0]
    f6cc:	3301      	adds	r3, #1
    f6ce:	b2da      	uxtb	r2, r3
    f6d0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f6d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6d8:	701a      	strb	r2, [r3, #0]
    f6da:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f6de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6e2:	781b      	ldrb	r3, [r3, #0]
    f6e4:	2bff      	cmp	r3, #255	; 0xff
    f6e6:	d105      	bne.n	f6f4 <send_gps_pos+0xd6c>
    f6e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f6ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6f0:	2200      	movs	r2, #0
    f6f2:	701a      	strb	r2, [r3, #0]
    f6f4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f6f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6fc:	781b      	ldrb	r3, [r3, #0]
    f6fe:	461a      	mov	r2, r3
    f700:	f24b 034c 	movw	r3, #45132	; 0xb04c
    f704:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f708:	7819      	ldrb	r1, [r3, #0]
    f70a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f70e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f712:	5499      	strb	r1, [r3, r2]
    f714:	f24b 034c 	movw	r3, #45132	; 0xb04c
    f718:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f71c:	781a      	ldrb	r2, [r3, #0]
    f71e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f722:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f726:	781b      	ldrb	r3, [r3, #0]
    f728:	4413      	add	r3, r2
    f72a:	b2da      	uxtb	r2, r3
    f72c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f734:	701a      	strb	r2, [r3, #0]
    f736:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f73a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f73e:	781a      	ldrb	r2, [r3, #0]
    f740:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f748:	781b      	ldrb	r3, [r3, #0]
    f74a:	4413      	add	r3, r2
    f74c:	b2da      	uxtb	r2, r3
    f74e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f756:	701a      	strb	r2, [r3, #0]
    f758:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f75c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f760:	781b      	ldrb	r3, [r3, #0]
    f762:	3301      	adds	r3, #1
    f764:	b2da      	uxtb	r2, r3
    f766:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f76a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f76e:	701a      	strb	r2, [r3, #0]
    f770:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f778:	781b      	ldrb	r3, [r3, #0]
    f77a:	2bff      	cmp	r3, #255	; 0xff
    f77c:	d105      	bne.n	f78a <send_gps_pos+0xe02>
    f77e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f786:	2200      	movs	r2, #0
    f788:	701a      	strb	r2, [r3, #0]
    f78a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f78e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f792:	781b      	ldrb	r3, [r3, #0]
    f794:	461a      	mov	r2, r3
    f796:	f24b 034c 	movw	r3, #45132	; 0xb04c
    f79a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f79e:	7859      	ldrb	r1, [r3, #1]
    f7a0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f7a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7a8:	5499      	strb	r1, [r3, r2]
    f7aa:	4b8b      	ldr	r3, [pc, #556]	; (f9d8 <send_gps_pos+0x1050>)
    f7ac:	781a      	ldrb	r2, [r3, #0]
    f7ae:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f7b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7b6:	781b      	ldrb	r3, [r3, #0]
    f7b8:	4413      	add	r3, r2
    f7ba:	b2da      	uxtb	r2, r3
    f7bc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f7c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7c4:	701a      	strb	r2, [r3, #0]
    f7c6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f7ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7ce:	781a      	ldrb	r2, [r3, #0]
    f7d0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f7d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7d8:	781b      	ldrb	r3, [r3, #0]
    f7da:	4413      	add	r3, r2
    f7dc:	b2da      	uxtb	r2, r3
    f7de:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f7e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7e6:	701a      	strb	r2, [r3, #0]
    f7e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f7ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7f0:	781b      	ldrb	r3, [r3, #0]
    f7f2:	3301      	adds	r3, #1
    f7f4:	b2da      	uxtb	r2, r3
    f7f6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f7fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7fe:	701a      	strb	r2, [r3, #0]
    f800:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f808:	781b      	ldrb	r3, [r3, #0]
    f80a:	2bff      	cmp	r3, #255	; 0xff
    f80c:	d105      	bne.n	f81a <send_gps_pos+0xe92>
    f80e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f816:	2200      	movs	r2, #0
    f818:	701a      	strb	r2, [r3, #0]
    f81a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f81e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f822:	781b      	ldrb	r3, [r3, #0]
    f824:	461a      	mov	r2, r3
    f826:	f24b 034c 	movw	r3, #45132	; 0xb04c
    f82a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f82e:	7899      	ldrb	r1, [r3, #2]
    f830:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f834:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f838:	5499      	strb	r1, [r3, r2]
    f83a:	4b68      	ldr	r3, [pc, #416]	; (f9dc <send_gps_pos+0x1054>)
    f83c:	781a      	ldrb	r2, [r3, #0]
    f83e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f846:	781b      	ldrb	r3, [r3, #0]
    f848:	4413      	add	r3, r2
    f84a:	b2da      	uxtb	r2, r3
    f84c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f854:	701a      	strb	r2, [r3, #0]
    f856:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f85a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f85e:	781a      	ldrb	r2, [r3, #0]
    f860:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f864:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f868:	781b      	ldrb	r3, [r3, #0]
    f86a:	4413      	add	r3, r2
    f86c:	b2da      	uxtb	r2, r3
    f86e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f876:	701a      	strb	r2, [r3, #0]
    f878:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f87c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f880:	781b      	ldrb	r3, [r3, #0]
    f882:	3301      	adds	r3, #1
    f884:	b2da      	uxtb	r2, r3
    f886:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f88a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f88e:	701a      	strb	r2, [r3, #0]
    f890:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f898:	781b      	ldrb	r3, [r3, #0]
    f89a:	2bff      	cmp	r3, #255	; 0xff
    f89c:	d105      	bne.n	f8aa <send_gps_pos+0xf22>
    f89e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f8a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8a6:	2200      	movs	r2, #0
    f8a8:	701a      	strb	r2, [r3, #0]
    f8aa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f8ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8b2:	781b      	ldrb	r3, [r3, #0]
    f8b4:	461a      	mov	r2, r3
    f8b6:	f24b 034c 	movw	r3, #45132	; 0xb04c
    f8ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8be:	78d9      	ldrb	r1, [r3, #3]
    f8c0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f8c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8c8:	5499      	strb	r1, [r3, r2]
    f8ca:	4b45      	ldr	r3, [pc, #276]	; (f9e0 <send_gps_pos+0x1058>)
    f8cc:	781a      	ldrb	r2, [r3, #0]
    f8ce:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f8d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8d6:	781b      	ldrb	r3, [r3, #0]
    f8d8:	4413      	add	r3, r2
    f8da:	b2da      	uxtb	r2, r3
    f8dc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f8e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8e4:	701a      	strb	r2, [r3, #0]
    f8e6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f8ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8ee:	781a      	ldrb	r2, [r3, #0]
    f8f0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f8f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8f8:	781b      	ldrb	r3, [r3, #0]
    f8fa:	4413      	add	r3, r2
    f8fc:	b2da      	uxtb	r2, r3
    f8fe:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f902:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f906:	701a      	strb	r2, [r3, #0]
    f908:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f90c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f910:	781b      	ldrb	r3, [r3, #0]
    f912:	3301      	adds	r3, #1
    f914:	b2da      	uxtb	r2, r3
    f916:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f91a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f91e:	701a      	strb	r2, [r3, #0]
    f920:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f928:	781b      	ldrb	r3, [r3, #0]
    f92a:	2bff      	cmp	r3, #255	; 0xff
    f92c:	d105      	bne.n	f93a <send_gps_pos+0xfb2>
    f92e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f936:	2200      	movs	r2, #0
    f938:	701a      	strb	r2, [r3, #0]
    f93a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f93e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f942:	781b      	ldrb	r3, [r3, #0]
    f944:	461a      	mov	r2, r3
    f946:	f24b 0340 	movw	r3, #45120	; 0xb040
    f94a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f94e:	7819      	ldrb	r1, [r3, #0]
    f950:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f958:	5499      	strb	r1, [r3, r2]
    f95a:	f24b 0340 	movw	r3, #45120	; 0xb040
    f95e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f962:	781a      	ldrb	r2, [r3, #0]
    f964:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f96c:	781b      	ldrb	r3, [r3, #0]
    f96e:	4413      	add	r3, r2
    f970:	b2da      	uxtb	r2, r3
    f972:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f976:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f97a:	701a      	strb	r2, [r3, #0]
    f97c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f984:	781a      	ldrb	r2, [r3, #0]
    f986:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f98a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f98e:	781b      	ldrb	r3, [r3, #0]
    f990:	4413      	add	r3, r2
    f992:	b2da      	uxtb	r2, r3
    f994:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f99c:	701a      	strb	r2, [r3, #0]
    f99e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f9a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9a6:	781b      	ldrb	r3, [r3, #0]
    f9a8:	3301      	adds	r3, #1
    f9aa:	b2da      	uxtb	r2, r3
    f9ac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f9b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9b4:	701a      	strb	r2, [r3, #0]
    f9b6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f9ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9be:	781b      	ldrb	r3, [r3, #0]
    f9c0:	2bff      	cmp	r3, #255	; 0xff
    f9c2:	d10f      	bne.n	f9e4 <send_gps_pos+0x105c>
    f9c4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f9c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9cc:	2200      	movs	r2, #0
    f9ce:	701a      	strb	r2, [r3, #0]
    f9d0:	e008      	b.n	f9e4 <send_gps_pos+0x105c>
    f9d2:	bf00      	nop
    f9d4:	2000b04b 	.word	0x2000b04b
    f9d8:	2000b04d 	.word	0x2000b04d
    f9dc:	2000b04e 	.word	0x2000b04e
    f9e0:	2000b04f 	.word	0x2000b04f
    f9e4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f9e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9ec:	781b      	ldrb	r3, [r3, #0]
    f9ee:	461a      	mov	r2, r3
    f9f0:	f24b 0340 	movw	r3, #45120	; 0xb040
    f9f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9f8:	7859      	ldrb	r1, [r3, #1]
    f9fa:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f9fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa02:	5499      	strb	r1, [r3, r2]
    fa04:	4bc0      	ldr	r3, [pc, #768]	; (fd08 <send_gps_pos+0x1380>)
    fa06:	781a      	ldrb	r2, [r3, #0]
    fa08:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fa0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa10:	781b      	ldrb	r3, [r3, #0]
    fa12:	4413      	add	r3, r2
    fa14:	b2da      	uxtb	r2, r3
    fa16:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fa1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa1e:	701a      	strb	r2, [r3, #0]
    fa20:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fa24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa28:	781a      	ldrb	r2, [r3, #0]
    fa2a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fa2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa32:	781b      	ldrb	r3, [r3, #0]
    fa34:	4413      	add	r3, r2
    fa36:	b2da      	uxtb	r2, r3
    fa38:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fa3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa40:	701a      	strb	r2, [r3, #0]
    fa42:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fa46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa4a:	781b      	ldrb	r3, [r3, #0]
    fa4c:	3301      	adds	r3, #1
    fa4e:	b2da      	uxtb	r2, r3
    fa50:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fa54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa58:	701a      	strb	r2, [r3, #0]
    fa5a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fa5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa62:	781b      	ldrb	r3, [r3, #0]
    fa64:	2bff      	cmp	r3, #255	; 0xff
    fa66:	d105      	bne.n	fa74 <send_gps_pos+0x10ec>
    fa68:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fa6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa70:	2200      	movs	r2, #0
    fa72:	701a      	strb	r2, [r3, #0]
    fa74:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fa78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa7c:	781b      	ldrb	r3, [r3, #0]
    fa7e:	461a      	mov	r2, r3
    fa80:	f24b 0340 	movw	r3, #45120	; 0xb040
    fa84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa88:	7899      	ldrb	r1, [r3, #2]
    fa8a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fa8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa92:	5499      	strb	r1, [r3, r2]
    fa94:	4b9d      	ldr	r3, [pc, #628]	; (fd0c <send_gps_pos+0x1384>)
    fa96:	781a      	ldrb	r2, [r3, #0]
    fa98:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fa9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faa0:	781b      	ldrb	r3, [r3, #0]
    faa2:	4413      	add	r3, r2
    faa4:	b2da      	uxtb	r2, r3
    faa6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    faaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faae:	701a      	strb	r2, [r3, #0]
    fab0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fab8:	781a      	ldrb	r2, [r3, #0]
    faba:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fabe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fac2:	781b      	ldrb	r3, [r3, #0]
    fac4:	4413      	add	r3, r2
    fac6:	b2da      	uxtb	r2, r3
    fac8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    facc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fad0:	701a      	strb	r2, [r3, #0]
    fad2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fada:	781b      	ldrb	r3, [r3, #0]
    fadc:	3301      	adds	r3, #1
    fade:	b2da      	uxtb	r2, r3
    fae0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fae8:	701a      	strb	r2, [r3, #0]
    faea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    faee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faf2:	781b      	ldrb	r3, [r3, #0]
    faf4:	2bff      	cmp	r3, #255	; 0xff
    faf6:	d105      	bne.n	fb04 <send_gps_pos+0x117c>
    faf8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fafc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb00:	2200      	movs	r2, #0
    fb02:	701a      	strb	r2, [r3, #0]
    fb04:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fb08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb0c:	781b      	ldrb	r3, [r3, #0]
    fb0e:	461a      	mov	r2, r3
    fb10:	f24b 0340 	movw	r3, #45120	; 0xb040
    fb14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb18:	78d9      	ldrb	r1, [r3, #3]
    fb1a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fb1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb22:	5499      	strb	r1, [r3, r2]
    fb24:	4b7a      	ldr	r3, [pc, #488]	; (fd10 <send_gps_pos+0x1388>)
    fb26:	781a      	ldrb	r2, [r3, #0]
    fb28:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fb2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb30:	781b      	ldrb	r3, [r3, #0]
    fb32:	4413      	add	r3, r2
    fb34:	b2da      	uxtb	r2, r3
    fb36:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fb3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb3e:	701a      	strb	r2, [r3, #0]
    fb40:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fb44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb48:	781a      	ldrb	r2, [r3, #0]
    fb4a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fb4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb52:	781b      	ldrb	r3, [r3, #0]
    fb54:	4413      	add	r3, r2
    fb56:	b2da      	uxtb	r2, r3
    fb58:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fb5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb60:	701a      	strb	r2, [r3, #0]
    fb62:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fb66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb6a:	781b      	ldrb	r3, [r3, #0]
    fb6c:	3301      	adds	r3, #1
    fb6e:	b2da      	uxtb	r2, r3
    fb70:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fb74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb78:	701a      	strb	r2, [r3, #0]
    fb7a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fb7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb82:	781b      	ldrb	r3, [r3, #0]
    fb84:	2bff      	cmp	r3, #255	; 0xff
    fb86:	d105      	bne.n	fb94 <send_gps_pos+0x120c>
    fb88:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fb8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb90:	2200      	movs	r2, #0
    fb92:	701a      	strb	r2, [r3, #0]
    fb94:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fb98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb9c:	781b      	ldrb	r3, [r3, #0]
    fb9e:	461a      	mov	r2, r3
    fba0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fba8:	7819      	ldrb	r1, [r3, #0]
    fbaa:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fbae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbb2:	5499      	strb	r1, [r3, r2]
    fbb4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fbb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbbc:	781b      	ldrb	r3, [r3, #0]
    fbbe:	3301      	adds	r3, #1
    fbc0:	b2da      	uxtb	r2, r3
    fbc2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fbc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbca:	701a      	strb	r2, [r3, #0]
    fbcc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fbd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbd4:	781b      	ldrb	r3, [r3, #0]
    fbd6:	2bff      	cmp	r3, #255	; 0xff
    fbd8:	d105      	bne.n	fbe6 <send_gps_pos+0x125e>
    fbda:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fbde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbe2:	2200      	movs	r2, #0
    fbe4:	701a      	strb	r2, [r3, #0]
    fbe6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fbea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbee:	781b      	ldrb	r3, [r3, #0]
    fbf0:	461a      	mov	r2, r3
    fbf2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fbf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbfa:	7819      	ldrb	r1, [r3, #0]
    fbfc:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fc00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc04:	5499      	strb	r1, [r3, r2]
    fc06:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fc0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc0e:	781b      	ldrb	r3, [r3, #0]
    fc10:	3301      	adds	r3, #1
    fc12:	b2da      	uxtb	r2, r3
    fc14:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fc18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc1c:	701a      	strb	r2, [r3, #0]
    fc1e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fc22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc26:	781b      	ldrb	r3, [r3, #0]
    fc28:	2bff      	cmp	r3, #255	; 0xff
    fc2a:	d105      	bne.n	fc38 <send_gps_pos+0x12b0>
    fc2c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fc30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc34:	2200      	movs	r2, #0
    fc36:	701a      	strb	r2, [r3, #0]
    fc38:	f242 0339 	movw	r3, #8249	; 0x2039
    fc3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc40:	781b      	ldrb	r3, [r3, #0]
    fc42:	b2db      	uxtb	r3, r3
    fc44:	f003 0310 	and.w	r3, r3, #16
    fc48:	2b00      	cmp	r3, #0
    fc4a:	d15a      	bne.n	fd02 <send_gps_pos+0x137a>
    fc4c:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    fc50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc54:	781b      	ldrb	r3, [r3, #0]
    fc56:	b2db      	uxtb	r3, r3
    fc58:	461a      	mov	r2, r3
    fc5a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fc5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc62:	5c9a      	ldrb	r2, [r3, r2]
    fc64:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    fc68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc6c:	701a      	strb	r2, [r3, #0]
    fc6e:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    fc72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc76:	2200      	movs	r2, #0
    fc78:	701a      	strb	r2, [r3, #0]
    fc7a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    fc7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc82:	781b      	ldrb	r3, [r3, #0]
    fc84:	b2db      	uxtb	r3, r3
    fc86:	3301      	adds	r3, #1
    fc88:	b2da      	uxtb	r2, r3
    fc8a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    fc8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc92:	701a      	strb	r2, [r3, #0]
    fc94:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    fc98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc9c:	781b      	ldrb	r3, [r3, #0]
    fc9e:	b2db      	uxtb	r3, r3
    fca0:	2bff      	cmp	r3, #255	; 0xff
    fca2:	d105      	bne.n	fcb0 <send_gps_pos+0x1328>
    fca4:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    fca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcac:	2200      	movs	r2, #0
    fcae:	701a      	strb	r2, [r3, #0]
    fcb0:	f242 0338 	movw	r3, #8248	; 0x2038
    fcb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcb8:	f242 0238 	movw	r2, #8248	; 0x2038
    fcbc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fcc0:	7812      	ldrb	r2, [r2, #0]
    fcc2:	b2d2      	uxtb	r2, r2
    fcc4:	f042 0201 	orr.w	r2, r2, #1
    fcc8:	b2d2      	uxtb	r2, r2
    fcca:	701a      	strb	r2, [r3, #0]
    fccc:	f242 0339 	movw	r3, #8249	; 0x2039
    fcd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcd4:	f242 0239 	movw	r2, #8249	; 0x2039
    fcd8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fcdc:	7812      	ldrb	r2, [r2, #0]
    fcde:	b2d2      	uxtb	r2, r2
    fce0:	f042 0210 	orr.w	r2, r2, #16
    fce4:	b2d2      	uxtb	r2, r2
    fce6:	701a      	strb	r2, [r3, #0]
    fce8:	e00b      	b.n	fd02 <send_gps_pos+0x137a>
    fcea:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    fcee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcf2:	781b      	ldrb	r3, [r3, #0]
    fcf4:	3301      	adds	r3, #1
    fcf6:	b2da      	uxtb	r2, r3
    fcf8:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    fcfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd00:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
    fd02:	f005 fbfd 	bl	15500 <estimator_update_state_gps>
  }
}
    fd06:	bd80      	pop	{r7, pc}
    fd08:	2000b041 	.word	0x2000b041
    fd0c:	2000b042 	.word	0x2000b042
    fd10:	2000b043 	.word	0x2000b043

0000fd14 <send_radIR>:

void send_radIR(void){
    fd14:	b480      	push	{r7}
    fd16:	af00      	add	r7, sp, #0
  if (gps_pos_available)
    fd18:	f24b 0366 	movw	r3, #45158	; 0xb066
    fd1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd20:	781b      	ldrb	r3, [r3, #0]
    fd22:	2b00      	cmp	r3, #0
    fd24:	f000 85e8 	beq.w	108f8 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    fd28:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fd2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd30:	781a      	ldrb	r2, [r3, #0]
    fd32:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    fd36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd3a:	781b      	ldrb	r3, [r3, #0]
    fd3c:	b2db      	uxtb	r3, r3
    fd3e:	429a      	cmp	r2, r3
    fd40:	d313      	bcc.n	fd6a <send_radIR+0x56>
    fd42:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    fd46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd4a:	781b      	ldrb	r3, [r3, #0]
    fd4c:	b2db      	uxtb	r3, r3
    fd4e:	461a      	mov	r2, r3
    fd50:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fd54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd58:	781b      	ldrb	r3, [r3, #0]
    fd5a:	1ad3      	subs	r3, r2, r3
    fd5c:	33ff      	adds	r3, #255	; 0xff
    fd5e:	2b14      	cmp	r3, #20
    fd60:	bfd4      	ite	le
    fd62:	2300      	movle	r3, #0
    fd64:	2301      	movgt	r3, #1
    fd66:	b2db      	uxtb	r3, r3
    fd68:	e011      	b.n	fd8e <send_radIR+0x7a>
    fd6a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    fd6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd72:	781b      	ldrb	r3, [r3, #0]
    fd74:	b2db      	uxtb	r3, r3
    fd76:	461a      	mov	r2, r3
    fd78:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fd7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd80:	781b      	ldrb	r3, [r3, #0]
    fd82:	1ad3      	subs	r3, r2, r3
    fd84:	2b14      	cmp	r3, #20
    fd86:	bfd4      	ite	le
    fd88:	2300      	movle	r3, #0
    fd8a:	2301      	movgt	r3, #1
    fd8c:	b2db      	uxtb	r3, r3
    fd8e:	2b00      	cmp	r3, #0
    fd90:	f000 85a6 	beq.w	108e0 <send_radIR+0xbcc>
    fd94:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fd98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd9c:	781b      	ldrb	r3, [r3, #0]
    fd9e:	461a      	mov	r2, r3
    fda0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fda4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fda8:	2105      	movs	r1, #5
    fdaa:	5499      	strb	r1, [r3, r2]
    fdac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fdb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdb4:	781b      	ldrb	r3, [r3, #0]
    fdb6:	3301      	adds	r3, #1
    fdb8:	b2da      	uxtb	r2, r3
    fdba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fdbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdc2:	701a      	strb	r2, [r3, #0]
    fdc4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fdc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdcc:	781b      	ldrb	r3, [r3, #0]
    fdce:	2bff      	cmp	r3, #255	; 0xff
    fdd0:	d105      	bne.n	fdde <send_radIR+0xca>
    fdd2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fdd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdda:	2200      	movs	r2, #0
    fddc:	701a      	strb	r2, [r3, #0]
    fdde:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fde2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fde6:	781b      	ldrb	r3, [r3, #0]
    fde8:	461a      	mov	r2, r3
    fdea:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fdee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdf2:	2105      	movs	r1, #5
    fdf4:	5499      	strb	r1, [r3, r2]
    fdf6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fdfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdfe:	781b      	ldrb	r3, [r3, #0]
    fe00:	3301      	adds	r3, #1
    fe02:	b2da      	uxtb	r2, r3
    fe04:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fe08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe0c:	701a      	strb	r2, [r3, #0]
    fe0e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fe12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe16:	781b      	ldrb	r3, [r3, #0]
    fe18:	2bff      	cmp	r3, #255	; 0xff
    fe1a:	d105      	bne.n	fe28 <send_radIR+0x114>
    fe1c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fe20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe24:	2200      	movs	r2, #0
    fe26:	701a      	strb	r2, [r3, #0]
    fe28:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fe2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe30:	2205      	movs	r2, #5
    fe32:	701a      	strb	r2, [r3, #0]
    fe34:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fe38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe3c:	2205      	movs	r2, #5
    fe3e:	701a      	strb	r2, [r3, #0]
    fe40:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fe44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe48:	781b      	ldrb	r3, [r3, #0]
    fe4a:	461a      	mov	r2, r3
    fe4c:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    fe50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe54:	7819      	ldrb	r1, [r3, #0]
    fe56:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fe5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe5e:	5499      	strb	r1, [r3, r2]
    fe60:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    fe64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe68:	781a      	ldrb	r2, [r3, #0]
    fe6a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fe6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe72:	781b      	ldrb	r3, [r3, #0]
    fe74:	4413      	add	r3, r2
    fe76:	b2da      	uxtb	r2, r3
    fe78:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fe7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe80:	701a      	strb	r2, [r3, #0]
    fe82:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fe86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe8a:	781a      	ldrb	r2, [r3, #0]
    fe8c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fe90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe94:	781b      	ldrb	r3, [r3, #0]
    fe96:	4413      	add	r3, r2
    fe98:	b2da      	uxtb	r2, r3
    fe9a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fe9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fea2:	701a      	strb	r2, [r3, #0]
    fea4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feac:	781b      	ldrb	r3, [r3, #0]
    feae:	3301      	adds	r3, #1
    feb0:	b2da      	uxtb	r2, r3
    feb2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    feb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feba:	701a      	strb	r2, [r3, #0]
    febc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fec4:	781b      	ldrb	r3, [r3, #0]
    fec6:	2bff      	cmp	r3, #255	; 0xff
    fec8:	d105      	bne.n	fed6 <send_radIR+0x1c2>
    feca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fece:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fed2:	2200      	movs	r2, #0
    fed4:	701a      	strb	r2, [r3, #0]
    fed6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    feda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fede:	781b      	ldrb	r3, [r3, #0]
    fee0:	461a      	mov	r2, r3
    fee2:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    fee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feea:	7859      	ldrb	r1, [r3, #1]
    feec:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fef4:	5499      	strb	r1, [r3, r2]
    fef6:	4bd2      	ldr	r3, [pc, #840]	; (10240 <send_radIR+0x52c>)
    fef8:	781a      	ldrb	r2, [r3, #0]
    fefa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fefe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff02:	781b      	ldrb	r3, [r3, #0]
    ff04:	4413      	add	r3, r2
    ff06:	b2da      	uxtb	r2, r3
    ff08:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ff0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff10:	701a      	strb	r2, [r3, #0]
    ff12:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ff16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff1a:	781a      	ldrb	r2, [r3, #0]
    ff1c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ff20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff24:	781b      	ldrb	r3, [r3, #0]
    ff26:	4413      	add	r3, r2
    ff28:	b2da      	uxtb	r2, r3
    ff2a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ff2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff32:	701a      	strb	r2, [r3, #0]
    ff34:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ff38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff3c:	781b      	ldrb	r3, [r3, #0]
    ff3e:	3301      	adds	r3, #1
    ff40:	b2da      	uxtb	r2, r3
    ff42:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ff46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff4a:	701a      	strb	r2, [r3, #0]
    ff4c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ff50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff54:	781b      	ldrb	r3, [r3, #0]
    ff56:	2bff      	cmp	r3, #255	; 0xff
    ff58:	d105      	bne.n	ff66 <send_radIR+0x252>
    ff5a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ff5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff62:	2200      	movs	r2, #0
    ff64:	701a      	strb	r2, [r3, #0]
    ff66:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ff6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff6e:	781b      	ldrb	r3, [r3, #0]
    ff70:	461a      	mov	r2, r3
    ff72:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    ff76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff7a:	7899      	ldrb	r1, [r3, #2]
    ff7c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ff80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff84:	5499      	strb	r1, [r3, r2]
    ff86:	4baf      	ldr	r3, [pc, #700]	; (10244 <send_radIR+0x530>)
    ff88:	781a      	ldrb	r2, [r3, #0]
    ff8a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ff8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff92:	781b      	ldrb	r3, [r3, #0]
    ff94:	4413      	add	r3, r2
    ff96:	b2da      	uxtb	r2, r3
    ff98:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ff9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffa0:	701a      	strb	r2, [r3, #0]
    ffa2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ffa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffaa:	781a      	ldrb	r2, [r3, #0]
    ffac:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ffb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffb4:	781b      	ldrb	r3, [r3, #0]
    ffb6:	4413      	add	r3, r2
    ffb8:	b2da      	uxtb	r2, r3
    ffba:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ffbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffc2:	701a      	strb	r2, [r3, #0]
    ffc4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ffc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffcc:	781b      	ldrb	r3, [r3, #0]
    ffce:	3301      	adds	r3, #1
    ffd0:	b2da      	uxtb	r2, r3
    ffd2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ffd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffda:	701a      	strb	r2, [r3, #0]
    ffdc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ffe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffe4:	781b      	ldrb	r3, [r3, #0]
    ffe6:	2bff      	cmp	r3, #255	; 0xff
    ffe8:	d105      	bne.n	fff6 <send_radIR+0x2e2>
    ffea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ffee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fff2:	2200      	movs	r2, #0
    fff4:	701a      	strb	r2, [r3, #0]
    fff6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fffe:	781b      	ldrb	r3, [r3, #0]
   10000:	461a      	mov	r2, r3
   10002:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
   10006:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1000a:	78d9      	ldrb	r1, [r3, #3]
   1000c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10010:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10014:	5499      	strb	r1, [r3, r2]
   10016:	4b8c      	ldr	r3, [pc, #560]	; (10248 <send_radIR+0x534>)
   10018:	781a      	ldrb	r2, [r3, #0]
   1001a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1001e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10022:	781b      	ldrb	r3, [r3, #0]
   10024:	4413      	add	r3, r2
   10026:	b2da      	uxtb	r2, r3
   10028:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1002c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10030:	701a      	strb	r2, [r3, #0]
   10032:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10036:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1003a:	781a      	ldrb	r2, [r3, #0]
   1003c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10040:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10044:	781b      	ldrb	r3, [r3, #0]
   10046:	4413      	add	r3, r2
   10048:	b2da      	uxtb	r2, r3
   1004a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   1004e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10052:	701a      	strb	r2, [r3, #0]
   10054:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10058:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1005c:	781b      	ldrb	r3, [r3, #0]
   1005e:	3301      	adds	r3, #1
   10060:	b2da      	uxtb	r2, r3
   10062:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10066:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1006a:	701a      	strb	r2, [r3, #0]
   1006c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10070:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10074:	781b      	ldrb	r3, [r3, #0]
   10076:	2bff      	cmp	r3, #255	; 0xff
   10078:	d105      	bne.n	10086 <send_radIR+0x372>
   1007a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1007e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10082:	2200      	movs	r2, #0
   10084:	701a      	strb	r2, [r3, #0]
   10086:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1008a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1008e:	781b      	ldrb	r3, [r3, #0]
   10090:	461a      	mov	r2, r3
   10092:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   10096:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1009a:	7819      	ldrb	r1, [r3, #0]
   1009c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   100a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100a4:	5499      	strb	r1, [r3, r2]
   100a6:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   100aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100ae:	781a      	ldrb	r2, [r3, #0]
   100b0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   100b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100b8:	781b      	ldrb	r3, [r3, #0]
   100ba:	4413      	add	r3, r2
   100bc:	b2da      	uxtb	r2, r3
   100be:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   100c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100c6:	701a      	strb	r2, [r3, #0]
   100c8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   100cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100d0:	781a      	ldrb	r2, [r3, #0]
   100d2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   100d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100da:	781b      	ldrb	r3, [r3, #0]
   100dc:	4413      	add	r3, r2
   100de:	b2da      	uxtb	r2, r3
   100e0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   100e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100e8:	701a      	strb	r2, [r3, #0]
   100ea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   100ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100f2:	781b      	ldrb	r3, [r3, #0]
   100f4:	3301      	adds	r3, #1
   100f6:	b2da      	uxtb	r2, r3
   100f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   100fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10100:	701a      	strb	r2, [r3, #0]
   10102:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10106:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1010a:	781b      	ldrb	r3, [r3, #0]
   1010c:	2bff      	cmp	r3, #255	; 0xff
   1010e:	d105      	bne.n	1011c <send_radIR+0x408>
   10110:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10114:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10118:	2200      	movs	r2, #0
   1011a:	701a      	strb	r2, [r3, #0]
   1011c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10120:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10124:	781b      	ldrb	r3, [r3, #0]
   10126:	461a      	mov	r2, r3
   10128:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   1012c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10130:	7859      	ldrb	r1, [r3, #1]
   10132:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10136:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1013a:	5499      	strb	r1, [r3, r2]
   1013c:	4b43      	ldr	r3, [pc, #268]	; (1024c <send_radIR+0x538>)
   1013e:	781a      	ldrb	r2, [r3, #0]
   10140:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10144:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10148:	781b      	ldrb	r3, [r3, #0]
   1014a:	4413      	add	r3, r2
   1014c:	b2da      	uxtb	r2, r3
   1014e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10152:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10156:	701a      	strb	r2, [r3, #0]
   10158:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   1015c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10160:	781a      	ldrb	r2, [r3, #0]
   10162:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10166:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1016a:	781b      	ldrb	r3, [r3, #0]
   1016c:	4413      	add	r3, r2
   1016e:	b2da      	uxtb	r2, r3
   10170:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10174:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10178:	701a      	strb	r2, [r3, #0]
   1017a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1017e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10182:	781b      	ldrb	r3, [r3, #0]
   10184:	3301      	adds	r3, #1
   10186:	b2da      	uxtb	r2, r3
   10188:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1018c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10190:	701a      	strb	r2, [r3, #0]
   10192:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10196:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1019a:	781b      	ldrb	r3, [r3, #0]
   1019c:	2bff      	cmp	r3, #255	; 0xff
   1019e:	d105      	bne.n	101ac <send_radIR+0x498>
   101a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   101a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101a8:	2200      	movs	r2, #0
   101aa:	701a      	strb	r2, [r3, #0]
   101ac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   101b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101b4:	781b      	ldrb	r3, [r3, #0]
   101b6:	461a      	mov	r2, r3
   101b8:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   101bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101c0:	7899      	ldrb	r1, [r3, #2]
   101c2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   101c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101ca:	5499      	strb	r1, [r3, r2]
   101cc:	4b20      	ldr	r3, [pc, #128]	; (10250 <send_radIR+0x53c>)
   101ce:	781a      	ldrb	r2, [r3, #0]
   101d0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   101d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101d8:	781b      	ldrb	r3, [r3, #0]
   101da:	4413      	add	r3, r2
   101dc:	b2da      	uxtb	r2, r3
   101de:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   101e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101e6:	701a      	strb	r2, [r3, #0]
   101e8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   101ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101f0:	781a      	ldrb	r2, [r3, #0]
   101f2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   101f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101fa:	781b      	ldrb	r3, [r3, #0]
   101fc:	4413      	add	r3, r2
   101fe:	b2da      	uxtb	r2, r3
   10200:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10204:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10208:	701a      	strb	r2, [r3, #0]
   1020a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1020e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10212:	781b      	ldrb	r3, [r3, #0]
   10214:	3301      	adds	r3, #1
   10216:	b2da      	uxtb	r2, r3
   10218:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1021c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10220:	701a      	strb	r2, [r3, #0]
   10222:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10226:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1022a:	781b      	ldrb	r3, [r3, #0]
   1022c:	2bff      	cmp	r3, #255	; 0xff
   1022e:	d111      	bne.n	10254 <send_radIR+0x540>
   10230:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10234:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10238:	2200      	movs	r2, #0
   1023a:	701a      	strb	r2, [r3, #0]
   1023c:	e00a      	b.n	10254 <send_radIR+0x540>
   1023e:	bf00      	nop
   10240:	2000b4c9 	.word	0x2000b4c9
   10244:	2000b4ca 	.word	0x2000b4ca
   10248:	2000b4cb 	.word	0x2000b4cb
   1024c:	2000b4cd 	.word	0x2000b4cd
   10250:	2000b4ce 	.word	0x2000b4ce
   10254:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10258:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1025c:	781b      	ldrb	r3, [r3, #0]
   1025e:	461a      	mov	r2, r3
   10260:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   10264:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10268:	78d9      	ldrb	r1, [r3, #3]
   1026a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   1026e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10272:	5499      	strb	r1, [r3, r2]
   10274:	4bd3      	ldr	r3, [pc, #844]	; (105c4 <send_radIR+0x8b0>)
   10276:	781a      	ldrb	r2, [r3, #0]
   10278:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1027c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10280:	781b      	ldrb	r3, [r3, #0]
   10282:	4413      	add	r3, r2
   10284:	b2da      	uxtb	r2, r3
   10286:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1028a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1028e:	701a      	strb	r2, [r3, #0]
   10290:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10294:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10298:	781a      	ldrb	r2, [r3, #0]
   1029a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1029e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102a2:	781b      	ldrb	r3, [r3, #0]
   102a4:	4413      	add	r3, r2
   102a6:	b2da      	uxtb	r2, r3
   102a8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   102ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102b0:	701a      	strb	r2, [r3, #0]
   102b2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   102b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102ba:	781b      	ldrb	r3, [r3, #0]
   102bc:	3301      	adds	r3, #1
   102be:	b2da      	uxtb	r2, r3
   102c0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   102c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102c8:	701a      	strb	r2, [r3, #0]
   102ca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   102ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102d2:	781b      	ldrb	r3, [r3, #0]
   102d4:	2bff      	cmp	r3, #255	; 0xff
   102d6:	d105      	bne.n	102e4 <send_radIR+0x5d0>
   102d8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   102dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102e0:	2200      	movs	r2, #0
   102e2:	701a      	strb	r2, [r3, #0]
   102e4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   102e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102ec:	781b      	ldrb	r3, [r3, #0]
   102ee:	461a      	mov	r2, r3
   102f0:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   102f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102f8:	7819      	ldrb	r1, [r3, #0]
   102fa:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   102fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10302:	5499      	strb	r1, [r3, r2]
   10304:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   10308:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1030c:	781a      	ldrb	r2, [r3, #0]
   1030e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10312:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10316:	781b      	ldrb	r3, [r3, #0]
   10318:	4413      	add	r3, r2
   1031a:	b2da      	uxtb	r2, r3
   1031c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10320:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10324:	701a      	strb	r2, [r3, #0]
   10326:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   1032a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1032e:	781a      	ldrb	r2, [r3, #0]
   10330:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10334:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10338:	781b      	ldrb	r3, [r3, #0]
   1033a:	4413      	add	r3, r2
   1033c:	b2da      	uxtb	r2, r3
   1033e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10342:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10346:	701a      	strb	r2, [r3, #0]
   10348:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1034c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10350:	781b      	ldrb	r3, [r3, #0]
   10352:	3301      	adds	r3, #1
   10354:	b2da      	uxtb	r2, r3
   10356:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1035a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1035e:	701a      	strb	r2, [r3, #0]
   10360:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10364:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10368:	781b      	ldrb	r3, [r3, #0]
   1036a:	2bff      	cmp	r3, #255	; 0xff
   1036c:	d105      	bne.n	1037a <send_radIR+0x666>
   1036e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10372:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10376:	2200      	movs	r2, #0
   10378:	701a      	strb	r2, [r3, #0]
   1037a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1037e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10382:	781b      	ldrb	r3, [r3, #0]
   10384:	461a      	mov	r2, r3
   10386:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   1038a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1038e:	7859      	ldrb	r1, [r3, #1]
   10390:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10394:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10398:	5499      	strb	r1, [r3, r2]
   1039a:	4b8b      	ldr	r3, [pc, #556]	; (105c8 <send_radIR+0x8b4>)
   1039c:	781a      	ldrb	r2, [r3, #0]
   1039e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   103a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103a6:	781b      	ldrb	r3, [r3, #0]
   103a8:	4413      	add	r3, r2
   103aa:	b2da      	uxtb	r2, r3
   103ac:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   103b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103b4:	701a      	strb	r2, [r3, #0]
   103b6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   103ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103be:	781a      	ldrb	r2, [r3, #0]
   103c0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   103c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103c8:	781b      	ldrb	r3, [r3, #0]
   103ca:	4413      	add	r3, r2
   103cc:	b2da      	uxtb	r2, r3
   103ce:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   103d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103d6:	701a      	strb	r2, [r3, #0]
   103d8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   103dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103e0:	781b      	ldrb	r3, [r3, #0]
   103e2:	3301      	adds	r3, #1
   103e4:	b2da      	uxtb	r2, r3
   103e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   103ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103ee:	701a      	strb	r2, [r3, #0]
   103f0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   103f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103f8:	781b      	ldrb	r3, [r3, #0]
   103fa:	2bff      	cmp	r3, #255	; 0xff
   103fc:	d105      	bne.n	1040a <send_radIR+0x6f6>
   103fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10402:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10406:	2200      	movs	r2, #0
   10408:	701a      	strb	r2, [r3, #0]
   1040a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1040e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10412:	781b      	ldrb	r3, [r3, #0]
   10414:	461a      	mov	r2, r3
   10416:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   1041a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1041e:	7899      	ldrb	r1, [r3, #2]
   10420:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10424:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10428:	5499      	strb	r1, [r3, r2]
   1042a:	4b68      	ldr	r3, [pc, #416]	; (105cc <send_radIR+0x8b8>)
   1042c:	781a      	ldrb	r2, [r3, #0]
   1042e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10432:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10436:	781b      	ldrb	r3, [r3, #0]
   10438:	4413      	add	r3, r2
   1043a:	b2da      	uxtb	r2, r3
   1043c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10440:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10444:	701a      	strb	r2, [r3, #0]
   10446:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   1044a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1044e:	781a      	ldrb	r2, [r3, #0]
   10450:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10454:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10458:	781b      	ldrb	r3, [r3, #0]
   1045a:	4413      	add	r3, r2
   1045c:	b2da      	uxtb	r2, r3
   1045e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10462:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10466:	701a      	strb	r2, [r3, #0]
   10468:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1046c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10470:	781b      	ldrb	r3, [r3, #0]
   10472:	3301      	adds	r3, #1
   10474:	b2da      	uxtb	r2, r3
   10476:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1047a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1047e:	701a      	strb	r2, [r3, #0]
   10480:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10484:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10488:	781b      	ldrb	r3, [r3, #0]
   1048a:	2bff      	cmp	r3, #255	; 0xff
   1048c:	d105      	bne.n	1049a <send_radIR+0x786>
   1048e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10492:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10496:	2200      	movs	r2, #0
   10498:	701a      	strb	r2, [r3, #0]
   1049a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1049e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104a2:	781b      	ldrb	r3, [r3, #0]
   104a4:	461a      	mov	r2, r3
   104a6:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   104aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104ae:	78d9      	ldrb	r1, [r3, #3]
   104b0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   104b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104b8:	5499      	strb	r1, [r3, r2]
   104ba:	4b45      	ldr	r3, [pc, #276]	; (105d0 <send_radIR+0x8bc>)
   104bc:	781a      	ldrb	r2, [r3, #0]
   104be:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   104c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104c6:	781b      	ldrb	r3, [r3, #0]
   104c8:	4413      	add	r3, r2
   104ca:	b2da      	uxtb	r2, r3
   104cc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   104d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104d4:	701a      	strb	r2, [r3, #0]
   104d6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   104da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104de:	781a      	ldrb	r2, [r3, #0]
   104e0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   104e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104e8:	781b      	ldrb	r3, [r3, #0]
   104ea:	4413      	add	r3, r2
   104ec:	b2da      	uxtb	r2, r3
   104ee:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   104f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104f6:	701a      	strb	r2, [r3, #0]
   104f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   104fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10500:	781b      	ldrb	r3, [r3, #0]
   10502:	3301      	adds	r3, #1
   10504:	b2da      	uxtb	r2, r3
   10506:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1050a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1050e:	701a      	strb	r2, [r3, #0]
   10510:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10514:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10518:	781b      	ldrb	r3, [r3, #0]
   1051a:	2bff      	cmp	r3, #255	; 0xff
   1051c:	d105      	bne.n	1052a <send_radIR+0x816>
   1051e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10522:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10526:	2200      	movs	r2, #0
   10528:	701a      	strb	r2, [r3, #0]
   1052a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1052e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10532:	781b      	ldrb	r3, [r3, #0]
   10534:	461a      	mov	r2, r3
   10536:	f240 33f2 	movw	r3, #1010	; 0x3f2
   1053a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1053e:	7819      	ldrb	r1, [r3, #0]
   10540:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10544:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10548:	5499      	strb	r1, [r3, r2]
   1054a:	f240 33f2 	movw	r3, #1010	; 0x3f2
   1054e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10552:	781a      	ldrb	r2, [r3, #0]
   10554:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10558:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1055c:	781b      	ldrb	r3, [r3, #0]
   1055e:	4413      	add	r3, r2
   10560:	b2da      	uxtb	r2, r3
   10562:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10566:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1056a:	701a      	strb	r2, [r3, #0]
   1056c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10570:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10574:	781a      	ldrb	r2, [r3, #0]
   10576:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1057a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1057e:	781b      	ldrb	r3, [r3, #0]
   10580:	4413      	add	r3, r2
   10582:	b2da      	uxtb	r2, r3
   10584:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10588:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1058c:	701a      	strb	r2, [r3, #0]
   1058e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10592:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10596:	781b      	ldrb	r3, [r3, #0]
   10598:	3301      	adds	r3, #1
   1059a:	b2da      	uxtb	r2, r3
   1059c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   105a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105a4:	701a      	strb	r2, [r3, #0]
   105a6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   105aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105ae:	781b      	ldrb	r3, [r3, #0]
   105b0:	2bff      	cmp	r3, #255	; 0xff
   105b2:	d10f      	bne.n	105d4 <send_radIR+0x8c0>
   105b4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   105b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105bc:	2200      	movs	r2, #0
   105be:	701a      	strb	r2, [r3, #0]
   105c0:	e008      	b.n	105d4 <send_radIR+0x8c0>
   105c2:	bf00      	nop
   105c4:	2000b4cf 	.word	0x2000b4cf
   105c8:	2000b4c5 	.word	0x2000b4c5
   105cc:	2000b4c6 	.word	0x2000b4c6
   105d0:	2000b4c7 	.word	0x2000b4c7
   105d4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   105d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105dc:	781b      	ldrb	r3, [r3, #0]
   105de:	461a      	mov	r2, r3
   105e0:	f240 33f2 	movw	r3, #1010	; 0x3f2
   105e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105e8:	7859      	ldrb	r1, [r3, #1]
   105ea:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   105ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105f2:	5499      	strb	r1, [r3, r2]
   105f4:	4bc2      	ldr	r3, [pc, #776]	; (10900 <send_radIR+0xbec>)
   105f6:	781a      	ldrb	r2, [r3, #0]
   105f8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   105fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10600:	781b      	ldrb	r3, [r3, #0]
   10602:	4413      	add	r3, r2
   10604:	b2da      	uxtb	r2, r3
   10606:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1060a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1060e:	701a      	strb	r2, [r3, #0]
   10610:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10614:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10618:	781a      	ldrb	r2, [r3, #0]
   1061a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1061e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10622:	781b      	ldrb	r3, [r3, #0]
   10624:	4413      	add	r3, r2
   10626:	b2da      	uxtb	r2, r3
   10628:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   1062c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10630:	701a      	strb	r2, [r3, #0]
   10632:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10636:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1063a:	781b      	ldrb	r3, [r3, #0]
   1063c:	3301      	adds	r3, #1
   1063e:	b2da      	uxtb	r2, r3
   10640:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10644:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10648:	701a      	strb	r2, [r3, #0]
   1064a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1064e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10652:	781b      	ldrb	r3, [r3, #0]
   10654:	2bff      	cmp	r3, #255	; 0xff
   10656:	d105      	bne.n	10664 <send_radIR+0x950>
   10658:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1065c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10660:	2200      	movs	r2, #0
   10662:	701a      	strb	r2, [r3, #0]
   10664:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10668:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1066c:	781b      	ldrb	r3, [r3, #0]
   1066e:	461a      	mov	r2, r3
   10670:	f240 33f4 	movw	r3, #1012	; 0x3f4
   10674:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10678:	7819      	ldrb	r1, [r3, #0]
   1067a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   1067e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10682:	5499      	strb	r1, [r3, r2]
   10684:	f240 33f4 	movw	r3, #1012	; 0x3f4
   10688:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1068c:	781a      	ldrb	r2, [r3, #0]
   1068e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10692:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10696:	781b      	ldrb	r3, [r3, #0]
   10698:	4413      	add	r3, r2
   1069a:	b2da      	uxtb	r2, r3
   1069c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   106a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106a4:	701a      	strb	r2, [r3, #0]
   106a6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   106aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106ae:	781a      	ldrb	r2, [r3, #0]
   106b0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   106b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106b8:	781b      	ldrb	r3, [r3, #0]
   106ba:	4413      	add	r3, r2
   106bc:	b2da      	uxtb	r2, r3
   106be:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   106c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106c6:	701a      	strb	r2, [r3, #0]
   106c8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   106cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106d0:	781b      	ldrb	r3, [r3, #0]
   106d2:	3301      	adds	r3, #1
   106d4:	b2da      	uxtb	r2, r3
   106d6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   106da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106de:	701a      	strb	r2, [r3, #0]
   106e0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   106e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106e8:	781b      	ldrb	r3, [r3, #0]
   106ea:	2bff      	cmp	r3, #255	; 0xff
   106ec:	d105      	bne.n	106fa <send_radIR+0x9e6>
   106ee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   106f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106f6:	2200      	movs	r2, #0
   106f8:	701a      	strb	r2, [r3, #0]
   106fa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   106fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10702:	781b      	ldrb	r3, [r3, #0]
   10704:	461a      	mov	r2, r3
   10706:	f240 33f4 	movw	r3, #1012	; 0x3f4
   1070a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1070e:	7859      	ldrb	r1, [r3, #1]
   10710:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10714:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10718:	5499      	strb	r1, [r3, r2]
   1071a:	4b7a      	ldr	r3, [pc, #488]	; (10904 <send_radIR+0xbf0>)
   1071c:	781a      	ldrb	r2, [r3, #0]
   1071e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10722:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10726:	781b      	ldrb	r3, [r3, #0]
   10728:	4413      	add	r3, r2
   1072a:	b2da      	uxtb	r2, r3
   1072c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10730:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10734:	701a      	strb	r2, [r3, #0]
   10736:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   1073a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1073e:	781a      	ldrb	r2, [r3, #0]
   10740:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10744:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10748:	781b      	ldrb	r3, [r3, #0]
   1074a:	4413      	add	r3, r2
   1074c:	b2da      	uxtb	r2, r3
   1074e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10752:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10756:	701a      	strb	r2, [r3, #0]
   10758:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1075c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10760:	781b      	ldrb	r3, [r3, #0]
   10762:	3301      	adds	r3, #1
   10764:	b2da      	uxtb	r2, r3
   10766:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1076a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1076e:	701a      	strb	r2, [r3, #0]
   10770:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10774:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10778:	781b      	ldrb	r3, [r3, #0]
   1077a:	2bff      	cmp	r3, #255	; 0xff
   1077c:	d105      	bne.n	1078a <send_radIR+0xa76>
   1077e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10782:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10786:	2200      	movs	r2, #0
   10788:	701a      	strb	r2, [r3, #0]
   1078a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1078e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10792:	781b      	ldrb	r3, [r3, #0]
   10794:	461a      	mov	r2, r3
   10796:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1079a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1079e:	7819      	ldrb	r1, [r3, #0]
   107a0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   107a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107a8:	5499      	strb	r1, [r3, r2]
   107aa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   107ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107b2:	781b      	ldrb	r3, [r3, #0]
   107b4:	3301      	adds	r3, #1
   107b6:	b2da      	uxtb	r2, r3
   107b8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   107bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107c0:	701a      	strb	r2, [r3, #0]
   107c2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   107c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107ca:	781b      	ldrb	r3, [r3, #0]
   107cc:	2bff      	cmp	r3, #255	; 0xff
   107ce:	d105      	bne.n	107dc <send_radIR+0xac8>
   107d0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   107d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107d8:	2200      	movs	r2, #0
   107da:	701a      	strb	r2, [r3, #0]
   107dc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   107e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107e4:	781b      	ldrb	r3, [r3, #0]
   107e6:	461a      	mov	r2, r3
   107e8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   107ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107f0:	7819      	ldrb	r1, [r3, #0]
   107f2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   107f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107fa:	5499      	strb	r1, [r3, r2]
   107fc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10800:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10804:	781b      	ldrb	r3, [r3, #0]
   10806:	3301      	adds	r3, #1
   10808:	b2da      	uxtb	r2, r3
   1080a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1080e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10812:	701a      	strb	r2, [r3, #0]
   10814:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10818:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1081c:	781b      	ldrb	r3, [r3, #0]
   1081e:	2bff      	cmp	r3, #255	; 0xff
   10820:	d105      	bne.n	1082e <send_radIR+0xb1a>
   10822:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10826:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1082a:	2200      	movs	r2, #0
   1082c:	701a      	strb	r2, [r3, #0]
   1082e:	f242 0339 	movw	r3, #8249	; 0x2039
   10832:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10836:	781b      	ldrb	r3, [r3, #0]
   10838:	b2db      	uxtb	r3, r3
   1083a:	f003 0310 	and.w	r3, r3, #16
   1083e:	2b00      	cmp	r3, #0
   10840:	d15a      	bne.n	108f8 <send_radIR+0xbe4>
   10842:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10846:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1084a:	781b      	ldrb	r3, [r3, #0]
   1084c:	b2db      	uxtb	r3, r3
   1084e:	461a      	mov	r2, r3
   10850:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10854:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10858:	5c9a      	ldrb	r2, [r3, r2]
   1085a:	f64a 73d3 	movw	r3, #45011	; 0xafd3
   1085e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10862:	701a      	strb	r2, [r3, #0]
   10864:	f64a 73d4 	movw	r3, #45012	; 0xafd4
   10868:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1086c:	2200      	movs	r2, #0
   1086e:	701a      	strb	r2, [r3, #0]
   10870:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10874:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10878:	781b      	ldrb	r3, [r3, #0]
   1087a:	b2db      	uxtb	r3, r3
   1087c:	3301      	adds	r3, #1
   1087e:	b2da      	uxtb	r2, r3
   10880:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10884:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10888:	701a      	strb	r2, [r3, #0]
   1088a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   1088e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10892:	781b      	ldrb	r3, [r3, #0]
   10894:	b2db      	uxtb	r3, r3
   10896:	2bff      	cmp	r3, #255	; 0xff
   10898:	d105      	bne.n	108a6 <send_radIR+0xb92>
   1089a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   1089e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108a2:	2200      	movs	r2, #0
   108a4:	701a      	strb	r2, [r3, #0]
   108a6:	f242 0338 	movw	r3, #8248	; 0x2038
   108aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108ae:	f242 0238 	movw	r2, #8248	; 0x2038
   108b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   108b6:	7812      	ldrb	r2, [r2, #0]
   108b8:	b2d2      	uxtb	r2, r2
   108ba:	f042 0201 	orr.w	r2, r2, #1
   108be:	b2d2      	uxtb	r2, r2
   108c0:	701a      	strb	r2, [r3, #0]
   108c2:	f242 0339 	movw	r3, #8249	; 0x2039
   108c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108ca:	f242 0239 	movw	r2, #8249	; 0x2039
   108ce:	f2c2 0200 	movt	r2, #8192	; 0x2000
   108d2:	7812      	ldrb	r2, [r2, #0]
   108d4:	b2d2      	uxtb	r2, r2
   108d6:	f042 0210 	orr.w	r2, r2, #16
   108da:	b2d2      	uxtb	r2, r2
   108dc:	701a      	strb	r2, [r3, #0]
   108de:	e00b      	b.n	108f8 <send_radIR+0xbe4>
   108e0:	f64a 63d0 	movw	r3, #44752	; 0xaed0
   108e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108e8:	781b      	ldrb	r3, [r3, #0]
   108ea:	3301      	adds	r3, #1
   108ec:	b2da      	uxtb	r2, r3
   108ee:	f64a 63d0 	movw	r3, #44752	; 0xaed0
   108f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108f6:	701a      	strb	r2, [r3, #0]
}
   108f8:	46bd      	mov	sp, r7
   108fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   108fe:	4770      	bx	lr
   10900:	200003f3 	.word	0x200003f3
   10904:	200003f5 	.word	0x200003f5

00010908 <send_takeOff>:

void send_takeOff(void){
   10908:	b580      	push	{r7, lr}
   1090a:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   1090c:	f24b 0366 	movw	r3, #45158	; 0xb066
   10910:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10914:	781b      	ldrb	r3, [r3, #0]
   10916:	2b00      	cmp	r3, #0
   10918:	f000 8200 	beq.w	10d1c <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   1091c:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
   10920:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10924:	881b      	ldrh	r3, [r3, #0]
   10926:	2b00      	cmp	r3, #0
   10928:	f040 81f2 	bne.w	10d10 <send_takeOff+0x408>
   1092c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   10930:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10934:	681b      	ldr	r3, [r3, #0]
   10936:	4618      	mov	r0, r3
   10938:	f04f 0100 	mov.w	r1, #0
   1093c:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   10940:	f007 fe12 	bl	18568 <__aeabi_fcmpgt>
   10944:	4603      	mov	r3, r0
   10946:	2b00      	cmp	r3, #0
   10948:	f000 81e2 	beq.w	10d10 <send_takeOff+0x408>
        estimator_flight_time = 1;
   1094c:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
   10950:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10954:	2201      	movs	r2, #1
   10956:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   10958:	f64a 63c8 	movw	r3, #44744	; 0xaec8
   1095c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10960:	2201      	movs	r2, #1
   10962:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   10964:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10968:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1096c:	781a      	ldrb	r2, [r3, #0]
   1096e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10972:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10976:	781b      	ldrb	r3, [r3, #0]
   10978:	b2db      	uxtb	r3, r3
   1097a:	429a      	cmp	r2, r3
   1097c:	d313      	bcc.n	109a6 <send_takeOff+0x9e>
   1097e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10982:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10986:	781b      	ldrb	r3, [r3, #0]
   10988:	b2db      	uxtb	r3, r3
   1098a:	461a      	mov	r2, r3
   1098c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10990:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10994:	781b      	ldrb	r3, [r3, #0]
   10996:	1ad3      	subs	r3, r2, r3
   10998:	33ff      	adds	r3, #255	; 0xff
   1099a:	2b06      	cmp	r3, #6
   1099c:	bfd4      	ite	le
   1099e:	2300      	movle	r3, #0
   109a0:	2301      	movgt	r3, #1
   109a2:	b2db      	uxtb	r3, r3
   109a4:	e011      	b.n	109ca <send_takeOff+0xc2>
   109a6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   109aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109ae:	781b      	ldrb	r3, [r3, #0]
   109b0:	b2db      	uxtb	r3, r3
   109b2:	461a      	mov	r2, r3
   109b4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   109b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109bc:	781b      	ldrb	r3, [r3, #0]
   109be:	1ad3      	subs	r3, r2, r3
   109c0:	2b06      	cmp	r3, #6
   109c2:	bfd4      	ite	le
   109c4:	2300      	movle	r3, #0
   109c6:	2301      	movgt	r3, #1
   109c8:	b2db      	uxtb	r3, r3
   109ca:	2b00      	cmp	r3, #0
   109cc:	f000 8194 	beq.w	10cf8 <send_takeOff+0x3f0>
   109d0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   109d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109d8:	781b      	ldrb	r3, [r3, #0]
   109da:	461a      	mov	r2, r3
   109dc:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   109e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109e4:	2105      	movs	r1, #5
   109e6:	5499      	strb	r1, [r3, r2]
   109e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   109ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109f0:	781b      	ldrb	r3, [r3, #0]
   109f2:	3301      	adds	r3, #1
   109f4:	b2da      	uxtb	r2, r3
   109f6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   109fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109fe:	701a      	strb	r2, [r3, #0]
   10a00:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a08:	781b      	ldrb	r3, [r3, #0]
   10a0a:	2bff      	cmp	r3, #255	; 0xff
   10a0c:	d105      	bne.n	10a1a <send_takeOff+0x112>
   10a0e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a16:	2200      	movs	r2, #0
   10a18:	701a      	strb	r2, [r3, #0]
   10a1a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a22:	781b      	ldrb	r3, [r3, #0]
   10a24:	461a      	mov	r2, r3
   10a26:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a2e:	2104      	movs	r1, #4
   10a30:	5499      	strb	r1, [r3, r2]
   10a32:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a3a:	781b      	ldrb	r3, [r3, #0]
   10a3c:	3301      	adds	r3, #1
   10a3e:	b2da      	uxtb	r2, r3
   10a40:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10a44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a48:	701a      	strb	r2, [r3, #0]
   10a4a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10a4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a52:	781b      	ldrb	r3, [r3, #0]
   10a54:	2bff      	cmp	r3, #255	; 0xff
   10a56:	d105      	bne.n	10a64 <send_takeOff+0x15c>
   10a58:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a60:	2200      	movs	r2, #0
   10a62:	701a      	strb	r2, [r3, #0]
   10a64:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a6c:	2204      	movs	r2, #4
   10a6e:	701a      	strb	r2, [r3, #0]
   10a70:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a78:	2204      	movs	r2, #4
   10a7a:	701a      	strb	r2, [r3, #0]
   10a7c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a84:	781b      	ldrb	r3, [r3, #0]
   10a86:	461a      	mov	r2, r3
   10a88:	f64a 63b2 	movw	r3, #44722	; 0xaeb2
   10a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a90:	7819      	ldrb	r1, [r3, #0]
   10a92:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a9a:	5499      	strb	r1, [r3, r2]
   10a9c:	f64a 63b2 	movw	r3, #44722	; 0xaeb2
   10aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10aa4:	781a      	ldrb	r2, [r3, #0]
   10aa6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10aae:	781b      	ldrb	r3, [r3, #0]
   10ab0:	4413      	add	r3, r2
   10ab2:	b2da      	uxtb	r2, r3
   10ab4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10abc:	701a      	strb	r2, [r3, #0]
   10abe:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ac6:	781a      	ldrb	r2, [r3, #0]
   10ac8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ad0:	781b      	ldrb	r3, [r3, #0]
   10ad2:	4413      	add	r3, r2
   10ad4:	b2da      	uxtb	r2, r3
   10ad6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10ada:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ade:	701a      	strb	r2, [r3, #0]
   10ae0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ae8:	781b      	ldrb	r3, [r3, #0]
   10aea:	3301      	adds	r3, #1
   10aec:	b2da      	uxtb	r2, r3
   10aee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10af6:	701a      	strb	r2, [r3, #0]
   10af8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b00:	781b      	ldrb	r3, [r3, #0]
   10b02:	2bff      	cmp	r3, #255	; 0xff
   10b04:	d105      	bne.n	10b12 <send_takeOff+0x20a>
   10b06:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b0e:	2200      	movs	r2, #0
   10b10:	701a      	strb	r2, [r3, #0]
   10b12:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b1a:	781b      	ldrb	r3, [r3, #0]
   10b1c:	461a      	mov	r2, r3
   10b1e:	f64a 63b2 	movw	r3, #44722	; 0xaeb2
   10b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b26:	7859      	ldrb	r1, [r3, #1]
   10b28:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b30:	5499      	strb	r1, [r3, r2]
   10b32:	4b7b      	ldr	r3, [pc, #492]	; (10d20 <send_takeOff+0x418>)
   10b34:	781a      	ldrb	r2, [r3, #0]
   10b36:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b3e:	781b      	ldrb	r3, [r3, #0]
   10b40:	4413      	add	r3, r2
   10b42:	b2da      	uxtb	r2, r3
   10b44:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b4c:	701a      	strb	r2, [r3, #0]
   10b4e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b56:	781a      	ldrb	r2, [r3, #0]
   10b58:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b60:	781b      	ldrb	r3, [r3, #0]
   10b62:	4413      	add	r3, r2
   10b64:	b2da      	uxtb	r2, r3
   10b66:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b6e:	701a      	strb	r2, [r3, #0]
   10b70:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b78:	781b      	ldrb	r3, [r3, #0]
   10b7a:	3301      	adds	r3, #1
   10b7c:	b2da      	uxtb	r2, r3
   10b7e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b86:	701a      	strb	r2, [r3, #0]
   10b88:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b90:	781b      	ldrb	r3, [r3, #0]
   10b92:	2bff      	cmp	r3, #255	; 0xff
   10b94:	d105      	bne.n	10ba2 <send_takeOff+0x29a>
   10b96:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b9e:	2200      	movs	r2, #0
   10ba0:	701a      	strb	r2, [r3, #0]
   10ba2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10baa:	781b      	ldrb	r3, [r3, #0]
   10bac:	461a      	mov	r2, r3
   10bae:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bb6:	7819      	ldrb	r1, [r3, #0]
   10bb8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10bbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bc0:	5499      	strb	r1, [r3, r2]
   10bc2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bca:	781b      	ldrb	r3, [r3, #0]
   10bcc:	3301      	adds	r3, #1
   10bce:	b2da      	uxtb	r2, r3
   10bd0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bd8:	701a      	strb	r2, [r3, #0]
   10bda:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10be2:	781b      	ldrb	r3, [r3, #0]
   10be4:	2bff      	cmp	r3, #255	; 0xff
   10be6:	d105      	bne.n	10bf4 <send_takeOff+0x2ec>
   10be8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bf0:	2200      	movs	r2, #0
   10bf2:	701a      	strb	r2, [r3, #0]
   10bf4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bfc:	781b      	ldrb	r3, [r3, #0]
   10bfe:	461a      	mov	r2, r3
   10c00:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c08:	7819      	ldrb	r1, [r3, #0]
   10c0a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10c0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c12:	5499      	strb	r1, [r3, r2]
   10c14:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c1c:	781b      	ldrb	r3, [r3, #0]
   10c1e:	3301      	adds	r3, #1
   10c20:	b2da      	uxtb	r2, r3
   10c22:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c2a:	701a      	strb	r2, [r3, #0]
   10c2c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c34:	781b      	ldrb	r3, [r3, #0]
   10c36:	2bff      	cmp	r3, #255	; 0xff
   10c38:	d105      	bne.n	10c46 <send_takeOff+0x33e>
   10c3a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c42:	2200      	movs	r2, #0
   10c44:	701a      	strb	r2, [r3, #0]
   10c46:	f242 0339 	movw	r3, #8249	; 0x2039
   10c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c4e:	781b      	ldrb	r3, [r3, #0]
   10c50:	b2db      	uxtb	r3, r3
   10c52:	f003 0310 	and.w	r3, r3, #16
   10c56:	2b00      	cmp	r3, #0
   10c58:	d15a      	bne.n	10d10 <send_takeOff+0x408>
   10c5a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c62:	781b      	ldrb	r3, [r3, #0]
   10c64:	b2db      	uxtb	r3, r3
   10c66:	461a      	mov	r2, r3
   10c68:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c70:	5c9a      	ldrb	r2, [r3, r2]
   10c72:	f64a 73d3 	movw	r3, #45011	; 0xafd3
   10c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c7a:	701a      	strb	r2, [r3, #0]
   10c7c:	f64a 73d4 	movw	r3, #45012	; 0xafd4
   10c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c84:	2200      	movs	r2, #0
   10c86:	701a      	strb	r2, [r3, #0]
   10c88:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c90:	781b      	ldrb	r3, [r3, #0]
   10c92:	b2db      	uxtb	r3, r3
   10c94:	3301      	adds	r3, #1
   10c96:	b2da      	uxtb	r2, r3
   10c98:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ca0:	701a      	strb	r2, [r3, #0]
   10ca2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10caa:	781b      	ldrb	r3, [r3, #0]
   10cac:	b2db      	uxtb	r3, r3
   10cae:	2bff      	cmp	r3, #255	; 0xff
   10cb0:	d105      	bne.n	10cbe <send_takeOff+0x3b6>
   10cb2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cba:	2200      	movs	r2, #0
   10cbc:	701a      	strb	r2, [r3, #0]
   10cbe:	f242 0338 	movw	r3, #8248	; 0x2038
   10cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cc6:	f242 0238 	movw	r2, #8248	; 0x2038
   10cca:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10cce:	7812      	ldrb	r2, [r2, #0]
   10cd0:	b2d2      	uxtb	r2, r2
   10cd2:	f042 0201 	orr.w	r2, r2, #1
   10cd6:	b2d2      	uxtb	r2, r2
   10cd8:	701a      	strb	r2, [r3, #0]
   10cda:	f242 0339 	movw	r3, #8249	; 0x2039
   10cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ce2:	f242 0239 	movw	r2, #8249	; 0x2039
   10ce6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10cea:	7812      	ldrb	r2, [r2, #0]
   10cec:	b2d2      	uxtb	r2, r2
   10cee:	f042 0210 	orr.w	r2, r2, #16
   10cf2:	b2d2      	uxtb	r2, r2
   10cf4:	701a      	strb	r2, [r3, #0]
   10cf6:	e00b      	b.n	10d10 <send_takeOff+0x408>
   10cf8:	f64a 63d0 	movw	r3, #44752	; 0xaed0
   10cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d00:	781b      	ldrb	r3, [r3, #0]
   10d02:	3301      	adds	r3, #1
   10d04:	b2da      	uxtb	r2, r3
   10d06:	f64a 63d0 	movw	r3, #44752	; 0xaed0
   10d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d0e:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   10d10:	f24b 0366 	movw	r3, #45158	; 0xb066
   10d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d18:	2200      	movs	r2, #0
   10d1a:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   10d1c:	bd80      	pop	{r7, pc}
   10d1e:	bf00      	nop
   10d20:	2000aeb3 	.word	0x2000aeb3
   10d24:	f3af 8000 	nop.w

00010d28 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   10d28:	b480      	push	{r7}
   10d2a:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   10d2c:	f242 0317 	movw	r3, #8215	; 0x2017
   10d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d34:	f242 0217 	movw	r2, #8215	; 0x2017
   10d38:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d3c:	7812      	ldrb	r2, [r2, #0]
   10d3e:	b2d2      	uxtb	r2, r2
   10d40:	f042 0210 	orr.w	r2, r2, #16
   10d44:	b2d2      	uxtb	r2, r2
   10d46:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   10d48:	f242 0331 	movw	r3, #8241	; 0x2031
   10d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d50:	2201      	movs	r2, #1
   10d52:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   10d54:	f242 0333 	movw	r3, #8243	; 0x2033
   10d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d5c:	2219      	movs	r2, #25
   10d5e:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   10d60:	f242 0311 	movw	r3, #8209	; 0x2011
   10d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d68:	f242 0211 	movw	r2, #8209	; 0x2011
   10d6c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d70:	7812      	ldrb	r2, [r2, #0]
   10d72:	b2d2      	uxtb	r2, r2
   10d74:	f062 023f 	orn	r2, r2, #63	; 0x3f
   10d78:	b2d2      	uxtb	r2, r2
   10d7a:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10d7c:	f242 0312 	movw	r3, #8210	; 0x2012
   10d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d84:	f242 0212 	movw	r2, #8210	; 0x2012
   10d88:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d8c:	7812      	ldrb	r2, [r2, #0]
   10d8e:	b2d2      	uxtb	r2, r2
   10d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10d94:	b2d2      	uxtb	r2, r2
   10d96:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   10d98:	f242 0312 	movw	r3, #8210	; 0x2012
   10d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10da0:	f242 0212 	movw	r2, #8210	; 0x2012
   10da4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10da8:	7812      	ldrb	r2, [r2, #0]
   10daa:	b2d2      	uxtb	r2, r2
   10dac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10db0:	b2d2      	uxtb	r2, r2
   10db2:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   10db4:	f242 033a 	movw	r3, #8250	; 0x203a
   10db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dbc:	f242 023a 	movw	r2, #8250	; 0x203a
   10dc0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10dc4:	7812      	ldrb	r2, [r2, #0]
   10dc6:	b2d2      	uxtb	r2, r2
   10dc8:	f042 0202 	orr.w	r2, r2, #2
   10dcc:	b2d2      	uxtb	r2, r2
   10dce:	701a      	strb	r2, [r3, #0]
}
   10dd0:	46bd      	mov	sp, r7
   10dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
   10dd6:	4770      	bx	lr

00010dd8 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   10dd8:	b480      	push	{r7}
   10dda:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   10ddc:	f64a 73d4 	movw	r3, #45012	; 0xafd4
   10de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10de4:	781b      	ldrb	r3, [r3, #0]
   10de6:	2b00      	cmp	r3, #0
   10de8:	d10e      	bne.n	10e08 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10dea:	f242 0312 	movw	r3, #8210	; 0x2012
   10dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10df2:	f242 0212 	movw	r2, #8210	; 0x2012
   10df6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10dfa:	7812      	ldrb	r2, [r2, #0]
   10dfc:	b2d2      	uxtb	r2, r2
   10dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10e02:	b2d2      	uxtb	r2, r2
   10e04:	701a      	strb	r2, [r3, #0]
   10e06:	e047      	b.n	10e98 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   10e08:	f64a 73d4 	movw	r3, #45012	; 0xafd4
   10e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e10:	781b      	ldrb	r3, [r3, #0]
   10e12:	2b08      	cmp	r3, #8
   10e14:	d832      	bhi.n	10e7c <__vector_5+0xa4>
    if (tx_byte & 0x01)
   10e16:	f64a 73d3 	movw	r3, #45011	; 0xafd3
   10e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e1e:	781b      	ldrb	r3, [r3, #0]
   10e20:	f003 0301 	and.w	r3, r3, #1
   10e24:	2b00      	cmp	r3, #0
   10e26:	d00e      	beq.n	10e46 <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10e28:	f242 0312 	movw	r3, #8210	; 0x2012
   10e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e30:	f242 0212 	movw	r2, #8210	; 0x2012
   10e34:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e38:	7812      	ldrb	r2, [r2, #0]
   10e3a:	b2d2      	uxtb	r2, r2
   10e3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10e40:	b2d2      	uxtb	r2, r2
   10e42:	701a      	strb	r2, [r3, #0]
   10e44:	e00d      	b.n	10e62 <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10e46:	f242 0312 	movw	r3, #8210	; 0x2012
   10e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e4e:	f242 0212 	movw	r2, #8210	; 0x2012
   10e52:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e56:	7812      	ldrb	r2, [r2, #0]
   10e58:	b2d2      	uxtb	r2, r2
   10e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10e5e:	b2d2      	uxtb	r2, r2
   10e60:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   10e62:	f64a 73d3 	movw	r3, #45011	; 0xafd3
   10e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e6a:	781b      	ldrb	r3, [r3, #0]
   10e6c:	085b      	lsrs	r3, r3, #1
   10e6e:	b2da      	uxtb	r2, r3
   10e70:	f64a 73d3 	movw	r3, #45011	; 0xafd3
   10e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e78:	701a      	strb	r2, [r3, #0]
   10e7a:	e00d      	b.n	10e98 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   10e7c:	f242 0312 	movw	r3, #8210	; 0x2012
   10e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e84:	f242 0212 	movw	r2, #8210	; 0x2012
   10e88:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e8c:	7812      	ldrb	r2, [r2, #0]
   10e8e:	b2d2      	uxtb	r2, r2
   10e90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10e94:	b2d2      	uxtb	r2, r2
   10e96:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   10e98:	f64a 73d4 	movw	r3, #45012	; 0xafd4
   10e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ea0:	781b      	ldrb	r3, [r3, #0]
   10ea2:	3301      	adds	r3, #1
   10ea4:	b2da      	uxtb	r2, r3
   10ea6:	f64a 73d4 	movw	r3, #45012	; 0xafd4
   10eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eae:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   10eb0:	f64a 73d4 	movw	r3, #45012	; 0xafd4
   10eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eb8:	781b      	ldrb	r3, [r3, #0]
   10eba:	2b09      	cmp	r3, #9
   10ebc:	d94d      	bls.n	10f5a <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   10ebe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ec6:	781a      	ldrb	r2, [r3, #0]
   10ec8:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ed0:	781b      	ldrb	r3, [r3, #0]
   10ed2:	b2db      	uxtb	r3, r3
   10ed4:	429a      	cmp	r2, r3
   10ed6:	d10e      	bne.n	10ef6 <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   10ed8:	f242 0339 	movw	r3, #8249	; 0x2039
   10edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ee0:	f242 0239 	movw	r2, #8249	; 0x2039
   10ee4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ee8:	7812      	ldrb	r2, [r2, #0]
   10eea:	b2d2      	uxtb	r2, r2
   10eec:	f022 0210 	bic.w	r2, r2, #16
   10ef0:	b2d2      	uxtb	r2, r2
   10ef2:	701a      	strb	r2, [r3, #0]
   10ef4:	e031      	b.n	10f5a <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   10ef6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10efe:	781b      	ldrb	r3, [r3, #0]
   10f00:	b2db      	uxtb	r3, r3
   10f02:	461a      	mov	r2, r3
   10f04:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f0c:	5c9a      	ldrb	r2, [r3, r2]
   10f0e:	f64a 73d3 	movw	r3, #45011	; 0xafd3
   10f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f16:	701a      	strb	r2, [r3, #0]
   10f18:	f64a 73d4 	movw	r3, #45012	; 0xafd4
   10f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f20:	2200      	movs	r2, #0
   10f22:	701a      	strb	r2, [r3, #0]
   10f24:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f2c:	781b      	ldrb	r3, [r3, #0]
   10f2e:	b2db      	uxtb	r3, r3
   10f30:	3301      	adds	r3, #1
   10f32:	b2da      	uxtb	r2, r3
   10f34:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f3c:	701a      	strb	r2, [r3, #0]
   10f3e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f46:	781b      	ldrb	r3, [r3, #0]
   10f48:	b2db      	uxtb	r3, r3
   10f4a:	2bff      	cmp	r3, #255	; 0xff
   10f4c:	d105      	bne.n	10f5a <__vector_5+0x182>
   10f4e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f56:	2200      	movs	r2, #0
   10f58:	701a      	strb	r2, [r3, #0]
    }
  }
}
   10f5a:	46bd      	mov	sp, r7
   10f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
   10f60:	4770      	bx	lr
   10f62:	bf00      	nop

00010f64 <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   10f64:	b480      	push	{r7}
   10f66:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   10f68:	f24b 0307 	movw	r3, #45063	; 0xb007
   10f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f70:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   10f72:	f240 33ee 	movw	r3, #1006	; 0x3ee
   10f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f7a:	2200      	movs	r2, #0
   10f7c:	701a      	strb	r2, [r3, #0]
}
   10f7e:	46bd      	mov	sp, r7
   10f80:	f85d 7b04 	ldr.w	r7, [sp], #4
   10f84:	4770      	bx	lr
   10f86:	bf00      	nop

00010f88 <link_fbw_send>:

void link_fbw_send(void) {
   10f88:	b480      	push	{r7}
   10f8a:	b083      	sub	sp, #12
   10f8c:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   10f8e:	f24b 030c 	movw	r3, #45068	; 0xb00c
   10f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f96:	781b      	ldrb	r3, [r3, #0]
   10f98:	b2db      	uxtb	r3, r3
   10f9a:	2b00      	cmp	r3, #0
   10f9c:	d00c      	beq.n	10fb8 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   10f9e:	f24b 030d 	movw	r3, #45069	; 0xb00d
   10fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fa6:	781b      	ldrb	r3, [r3, #0]
   10fa8:	3301      	adds	r3, #1
   10faa:	b2da      	uxtb	r2, r3
   10fac:	f24b 030d 	movw	r3, #45069	; 0xb00d
   10fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fb4:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   10fb6:	e064      	b.n	11082 <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   10fb8:	f242 030d 	movw	r3, #8205	; 0x200d
   10fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fc0:	2251      	movs	r2, #81	; 0x51
   10fc2:	701a      	strb	r2, [r3, #0]
   10fc4:	f242 030e 	movw	r3, #8206	; 0x200e
   10fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fcc:	781b      	ldrb	r3, [r3, #0]
   10fce:	b2db      	uxtb	r3, r3
   10fd0:	b2db      	uxtb	r3, r3
   10fd2:	b25b      	sxtb	r3, r3
   10fd4:	2b00      	cmp	r3, #0
   10fd6:	da05      	bge.n	10fe4 <link_fbw_send+0x5c>
   10fd8:	f242 030f 	movw	r3, #8207	; 0x200f
   10fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fe0:	781b      	ldrb	r3, [r3, #0]
   10fe2:	71fb      	strb	r3, [r7, #7]
   10fe4:	f242 030d 	movw	r3, #8205	; 0x200d
   10fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fec:	f242 020d 	movw	r2, #8205	; 0x200d
   10ff0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ff4:	7812      	ldrb	r2, [r2, #0]
   10ff6:	b2d2      	uxtb	r2, r2
   10ff8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10ffc:	b2d2      	uxtb	r2, r2
   10ffe:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   11000:	f24b 030c 	movw	r3, #45068	; 0xb00c
   11004:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11008:	2201      	movs	r2, #1
   1100a:	701a      	strb	r2, [r3, #0]
   1100c:	f242 0318 	movw	r3, #8216	; 0x2018
   11010:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11014:	f242 0218 	movw	r2, #8216	; 0x2018
   11018:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1101c:	7812      	ldrb	r2, [r2, #0]
   1101e:	b2d2      	uxtb	r2, r2
   11020:	f022 0201 	bic.w	r2, r2, #1
   11024:	b2d2      	uxtb	r2, r2
   11026:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   11028:	f24b 0309 	movw	r3, #45065	; 0xb009
   1102c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11030:	2200      	movs	r2, #0
   11032:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   11034:	f24b 030a 	movw	r3, #45066	; 0xb00a
   11038:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1103c:	2200      	movs	r2, #0
   1103e:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   11040:	f24b 0309 	movw	r3, #45065	; 0xb009
   11044:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11048:	781b      	ldrb	r3, [r3, #0]
   1104a:	461a      	mov	r2, r3
   1104c:	f64a 73f0 	movw	r3, #45040	; 0xaff0
   11050:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11054:	4413      	add	r3, r2
   11056:	781a      	ldrb	r2, [r3, #0]
   11058:	f24b 030b 	movw	r3, #45067	; 0xb00b
   1105c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11060:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   11062:	f242 030f 	movw	r3, #8207	; 0x200f
   11066:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1106a:	f24b 020b 	movw	r2, #45067	; 0xb00b
   1106e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11072:	7812      	ldrb	r2, [r2, #0]
   11074:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   11076:	f24b 0306 	movw	r3, #45062	; 0xb006
   1107a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1107e:	2200      	movs	r2, #0
   11080:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   11082:	370c      	adds	r7, #12
   11084:	46bd      	mov	sp, r7
   11086:	f85d 7b04 	ldr.w	r7, [sp], #4
   1108a:	4770      	bx	lr

0001108c <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   1108c:	b480      	push	{r7}
   1108e:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   11090:	f242 032a 	movw	r3, #8234	; 0x202a
   11094:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11098:	f242 022c 	movw	r2, #8236	; 0x202c
   1109c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110a0:	8812      	ldrh	r2, [r2, #0]
   110a2:	b292      	uxth	r2, r2
   110a4:	32c8      	adds	r2, #200	; 0xc8
   110a6:	b292      	uxth	r2, r2
   110a8:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   110aa:	f242 0336 	movw	r3, #8246	; 0x2036
   110ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110b2:	f242 0236 	movw	r2, #8246	; 0x2036
   110b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110ba:	7812      	ldrb	r2, [r2, #0]
   110bc:	b2d2      	uxtb	r2, r2
   110be:	f042 0210 	orr.w	r2, r2, #16
   110c2:	b2d2      	uxtb	r2, r2
   110c4:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   110c6:	f242 0337 	movw	r3, #8247	; 0x2037
   110ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110ce:	f242 0237 	movw	r2, #8247	; 0x2037
   110d2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110d6:	7812      	ldrb	r2, [r2, #0]
   110d8:	b2d2      	uxtb	r2, r2
   110da:	f042 0210 	orr.w	r2, r2, #16
   110de:	b2d2      	uxtb	r2, r2
   110e0:	701a      	strb	r2, [r3, #0]
}
   110e2:	46bd      	mov	sp, r7
   110e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   110e8:	4770      	bx	lr
   110ea:	bf00      	nop

000110ec <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   110ec:	b480      	push	{r7}
   110ee:	b083      	sub	sp, #12
   110f0:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   110f2:	f242 0337 	movw	r3, #8247	; 0x2037
   110f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110fa:	f242 0237 	movw	r2, #8247	; 0x2037
   110fe:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11102:	7812      	ldrb	r2, [r2, #0]
   11104:	b2d2      	uxtb	r2, r2
   11106:	f022 0210 	bic.w	r2, r2, #16
   1110a:	b2d2      	uxtb	r2, r2
   1110c:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   1110e:	f24b 0309 	movw	r3, #45065	; 0xb009
   11112:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11116:	781b      	ldrb	r3, [r3, #0]
   11118:	3301      	adds	r3, #1
   1111a:	b2da      	uxtb	r2, r3
   1111c:	f24b 0309 	movw	r3, #45065	; 0xb009
   11120:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11124:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   11126:	f24b 0309 	movw	r3, #45065	; 0xb009
   1112a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1112e:	781b      	ldrb	r3, [r3, #0]
   11130:	2b17      	cmp	r3, #23
   11132:	d162      	bne.n	111fa <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   11134:	f242 030f 	movw	r3, #8207	; 0x200f
   11138:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1113c:	781b      	ldrb	r3, [r3, #0]
   1113e:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   11140:	f24b 030a 	movw	r3, #45066	; 0xb00a
   11144:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11148:	781b      	ldrb	r3, [r3, #0]
   1114a:	79fa      	ldrb	r2, [r7, #7]
   1114c:	429a      	cmp	r2, r3
   1114e:	d110      	bne.n	11172 <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   11150:	f24b 0306 	movw	r3, #45062	; 0xb006
   11154:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11158:	2201      	movs	r2, #1
   1115a:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   1115c:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   11160:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11164:	7d1a      	ldrb	r2, [r3, #20]
   11166:	f24b 0308 	movw	r3, #45064	; 0xb008
   1116a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1116e:	701a      	strb	r2, [r3, #0]
   11170:	e00c      	b.n	1118c <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   11172:	f24b 0307 	movw	r3, #45063	; 0xb007
   11176:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1117a:	781b      	ldrb	r3, [r3, #0]
   1117c:	b2db      	uxtb	r3, r3
   1117e:	3301      	adds	r3, #1
   11180:	b2da      	uxtb	r2, r3
   11182:	f24b 0307 	movw	r3, #45063	; 0xb007
   11186:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1118a:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   1118c:	f240 33ee 	movw	r3, #1006	; 0x3ee
   11190:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11194:	2201      	movs	r2, #1
   11196:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   11198:	f24b 030c 	movw	r3, #45068	; 0xb00c
   1119c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111a0:	2200      	movs	r2, #0
   111a2:	701a      	strb	r2, [r3, #0]
   111a4:	f242 0318 	movw	r3, #8216	; 0x2018
   111a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111ac:	f242 0218 	movw	r2, #8216	; 0x2018
   111b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111b4:	7812      	ldrb	r2, [r2, #0]
   111b6:	b2d2      	uxtb	r2, r2
   111b8:	f042 0201 	orr.w	r2, r2, #1
   111bc:	b2d2      	uxtb	r2, r2
   111be:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   111c0:	f242 030d 	movw	r3, #8205	; 0x200d
   111c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111c8:	f242 020d 	movw	r2, #8205	; 0x200d
   111cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111d0:	7812      	ldrb	r2, [r2, #0]
   111d2:	b2d2      	uxtb	r2, r2
   111d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   111d8:	b2d2      	uxtb	r2, r2
   111da:	701a      	strb	r2, [r3, #0]
   111dc:	f242 030d 	movw	r3, #8205	; 0x200d
   111e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111e4:	f242 020d 	movw	r2, #8205	; 0x200d
   111e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111ec:	7812      	ldrb	r2, [r2, #0]
   111ee:	b2d2      	uxtb	r2, r2
   111f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   111f4:	b2d2      	uxtb	r2, r2
   111f6:	701a      	strb	r2, [r3, #0]
    return;
   111f8:	e051      	b.n	1129e <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   111fa:	f24b 0309 	movw	r3, #45065	; 0xb009
   111fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11202:	781b      	ldrb	r3, [r3, #0]
   11204:	2b15      	cmp	r3, #21
   11206:	d820      	bhi.n	1124a <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   11208:	f24b 0309 	movw	r3, #45065	; 0xb009
   1120c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11210:	781b      	ldrb	r3, [r3, #0]
   11212:	461a      	mov	r2, r3
   11214:	f64a 73f0 	movw	r3, #45040	; 0xaff0
   11218:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1121c:	4413      	add	r3, r2
   1121e:	781b      	ldrb	r3, [r3, #0]
   11220:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   11222:	f242 030f 	movw	r3, #8207	; 0x200f
   11226:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1122a:	79fa      	ldrb	r2, [r7, #7]
   1122c:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   1122e:	f24b 030b 	movw	r3, #45067	; 0xb00b
   11232:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11236:	781a      	ldrb	r2, [r3, #0]
   11238:	79fb      	ldrb	r3, [r7, #7]
   1123a:	4053      	eors	r3, r2
   1123c:	b2da      	uxtb	r2, r3
   1123e:	f24b 030b 	movw	r3, #45067	; 0xb00b
   11242:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11246:	701a      	strb	r2, [r3, #0]
   11248:	e009      	b.n	1125e <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   1124a:	f242 030f 	movw	r3, #8207	; 0x200f
   1124e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11252:	f24b 020b 	movw	r2, #45067	; 0xb00b
   11256:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1125a:	7812      	ldrb	r2, [r2, #0]
   1125c:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   1125e:	f242 030f 	movw	r3, #8207	; 0x200f
   11262:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11266:	781b      	ldrb	r3, [r3, #0]
   11268:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   1126a:	f24b 0309 	movw	r3, #45065	; 0xb009
   1126e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11272:	781b      	ldrb	r3, [r3, #0]
   11274:	1e5a      	subs	r2, r3, #1
   11276:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   1127a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1127e:	4413      	add	r3, r2
   11280:	79fa      	ldrb	r2, [r7, #7]
   11282:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   11284:	f24b 030a 	movw	r3, #45066	; 0xb00a
   11288:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1128c:	781a      	ldrb	r2, [r3, #0]
   1128e:	79fb      	ldrb	r3, [r7, #7]
   11290:	4053      	eors	r3, r2
   11292:	b2da      	uxtb	r2, r3
   11294:	f24b 030a 	movw	r3, #45066	; 0xb00a
   11298:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1129c:	701a      	strb	r2, [r3, #0]
}
   1129e:	370c      	adds	r7, #12
   112a0:	46bd      	mov	sp, r7
   112a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   112a6:	4770      	bx	lr

000112a8 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   112a8:	b480      	push	{r7}
   112aa:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   112ac:	f242 0317 	movw	r3, #8215	; 0x2017
   112b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112b4:	f242 0217 	movw	r2, #8215	; 0x2017
   112b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   112bc:	7812      	ldrb	r2, [r2, #0]
   112be:	b2d2      	uxtb	r2, r2
   112c0:	f042 0206 	orr.w	r2, r2, #6
   112c4:	b2d2      	uxtb	r2, r2
   112c6:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   112c8:	f242 0317 	movw	r3, #8215	; 0x2017
   112cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112d0:	f242 0217 	movw	r2, #8215	; 0x2017
   112d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   112d8:	7812      	ldrb	r2, [r2, #0]
   112da:	b2d2      	uxtb	r2, r2
   112dc:	f042 0201 	orr.w	r2, r2, #1
   112e0:	b2d2      	uxtb	r2, r2
   112e2:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   112e4:	f24b 030c 	movw	r3, #45068	; 0xb00c
   112e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112ec:	2200      	movs	r2, #0
   112ee:	701a      	strb	r2, [r3, #0]
   112f0:	f242 0318 	movw	r3, #8216	; 0x2018
   112f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112f8:	f242 0218 	movw	r2, #8216	; 0x2018
   112fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11300:	7812      	ldrb	r2, [r2, #0]
   11302:	b2d2      	uxtb	r2, r2
   11304:	f042 0201 	orr.w	r2, r2, #1
   11308:	b2d2      	uxtb	r2, r2
   1130a:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   1130c:	f242 0302 	movw	r3, #8194	; 0x2002
   11310:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11314:	f242 0202 	movw	r2, #8194	; 0x2002
   11318:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1131c:	7812      	ldrb	r2, [r2, #0]
   1131e:	b2d2      	uxtb	r2, r2
   11320:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11324:	b2d2      	uxtb	r2, r2
   11326:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   11328:	f24b 030c 	movw	r3, #45068	; 0xb00c
   1132c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11330:	2200      	movs	r2, #0
   11332:	701a      	strb	r2, [r3, #0]
   11334:	f242 0303 	movw	r3, #8195	; 0x2003
   11338:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1133c:	f242 0203 	movw	r2, #8195	; 0x2003
   11340:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11344:	7812      	ldrb	r2, [r2, #0]
   11346:	b2d2      	uxtb	r2, r2
   11348:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1134c:	b2d2      	uxtb	r2, r2
   1134e:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   11350:	f24b 030c 	movw	r3, #45068	; 0xb00c
   11354:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11358:	2200      	movs	r2, #0
   1135a:	701a      	strb	r2, [r3, #0]
}
   1135c:	46bd      	mov	sp, r7
   1135e:	f85d 7b04 	ldr.w	r7, [sp], #4
   11362:	4770      	bx	lr

00011364 <__vector_17>:


SIGNAL(SIG_SPI) {
   11364:	b580      	push	{r7, lr}
   11366:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   11368:	f24b 030c 	movw	r3, #45068	; 0xb00c
   1136c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11370:	781b      	ldrb	r3, [r3, #0]
   11372:	b2db      	uxtb	r3, r3
   11374:	2b01      	cmp	r3, #1
   11376:	d102      	bne.n	1137e <__vector_17+0x1a>
    link_fbw_on_spi_it();
   11378:	f7ff fe88 	bl	1108c <link_fbw_on_spi_it>
   1137c:	e00b      	b.n	11396 <__vector_17+0x32>
  else
    fatal_error_nb++;
   1137e:	f64a 63b0 	movw	r3, #44720	; 0xaeb0
   11382:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11386:	781b      	ldrb	r3, [r3, #0]
   11388:	3301      	adds	r3, #1
   1138a:	b2da      	uxtb	r2, r3
   1138c:	f64a 63b0 	movw	r3, #44720	; 0xaeb0
   11390:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11394:	701a      	strb	r2, [r3, #0]
}
   11396:	bd80      	pop	{r7, pc}

00011398 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   11398:	b480      	push	{r7}
   1139a:	b083      	sub	sp, #12
   1139c:	af00      	add	r7, sp, #0
   1139e:	4603      	mov	r3, r0
   113a0:	6039      	str	r1, [r7, #0]
   113a2:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   113a4:	79fa      	ldrb	r2, [r7, #7]
   113a6:	f24b 0320 	movw	r3, #45088	; 0xb020
   113aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113ae:	6839      	ldr	r1, [r7, #0]
   113b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   113b4:	370c      	adds	r7, #12
   113b6:	46bd      	mov	sp, r7
   113b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   113bc:	4770      	bx	lr
   113be:	bf00      	nop

000113c0 <adc_init>:

void 
adc_init( void )
{
   113c0:	b480      	push	{r7}
   113c2:	b083      	sub	sp, #12
   113c4:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   113c6:	f242 0362 	movw	r3, #8290	; 0x2062
   113ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113ce:	2200      	movs	r2, #0
   113d0:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   113d2:	f242 0361 	movw	r3, #8289	; 0x2061
   113d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113da:	2200      	movs	r2, #0
   113dc:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   113de:	f242 0307 	movw	r3, #8199	; 0x2007
   113e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113e6:	2240      	movs	r2, #64	; 0x40
   113e8:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   113ea:	f242 0308 	movw	r3, #8200	; 0x2008
   113ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113f2:	f242 0208 	movw	r2, #8200	; 0x2008
   113f6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   113fa:	7812      	ldrb	r2, [r2, #0]
   113fc:	b2d2      	uxtb	r2, r2
   113fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11402:	b2d2      	uxtb	r2, r2
   11404:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   11406:	f242 0306 	movw	r3, #8198	; 0x2006
   1140a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1140e:	22cf      	movs	r2, #207	; 0xcf
   11410:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11412:	2300      	movs	r3, #0
   11414:	71fb      	strb	r3, [r7, #7]
   11416:	e00a      	b.n	1142e <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   11418:	79fa      	ldrb	r2, [r7, #7]
   1141a:	f24b 0320 	movw	r3, #45088	; 0xb020
   1141e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11422:	2100      	movs	r1, #0
   11424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11428:	79fb      	ldrb	r3, [r7, #7]
   1142a:	3301      	adds	r3, #1
   1142c:	71fb      	strb	r3, [r7, #7]
   1142e:	79fb      	ldrb	r3, [r7, #7]
   11430:	2b07      	cmp	r3, #7
   11432:	d9f1      	bls.n	11418 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   11434:	370c      	adds	r7, #12
   11436:	46bd      	mov	sp, r7
   11438:	f85d 7b04 	ldr.w	r7, [sp], #4
   1143c:	4770      	bx	lr
   1143e:	bf00      	nop

00011440 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   11440:	b480      	push	{r7}
   11442:	b085      	sub	sp, #20
   11444:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   11446:	f242 0307 	movw	r3, #8199	; 0x2007
   1144a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1144e:	781b      	ldrb	r3, [r3, #0]
   11450:	b2db      	uxtb	r3, r3
   11452:	f003 0307 	and.w	r3, r3, #7
   11456:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   11458:	7bfa      	ldrb	r2, [r7, #15]
   1145a:	f24b 0320 	movw	r3, #45088	; 0xb020
   1145e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11466:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   11468:	f242 0304 	movw	r3, #8196	; 0x2004
   1146c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11470:	881b      	ldrh	r3, [r3, #0]
   11472:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   11474:	7bfa      	ldrb	r2, [r7, #15]
   11476:	f24b 0310 	movw	r3, #45072	; 0xb010
   1147a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1147e:	88f9      	ldrh	r1, [r7, #6]
   11480:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   11484:	68bb      	ldr	r3, [r7, #8]
   11486:	2b00      	cmp	r3, #0
   11488:	d025      	beq.n	114d6 <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   1148a:	68bb      	ldr	r3, [r7, #8]
   1148c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   11490:	3301      	adds	r3, #1
   11492:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   11494:	7bbb      	ldrb	r3, [r7, #14]
   11496:	2b1f      	cmp	r3, #31
   11498:	d901      	bls.n	1149e <__vector_21+0x5e>
   1149a:	2300      	movs	r3, #0
   1149c:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   1149e:	68bb      	ldr	r3, [r7, #8]
   114a0:	881a      	ldrh	r2, [r3, #0]
   114a2:	7bbb      	ldrb	r3, [r7, #14]
   114a4:	68b9      	ldr	r1, [r7, #8]
   114a6:	005b      	lsls	r3, r3, #1
   114a8:	440b      	add	r3, r1
   114aa:	885b      	ldrh	r3, [r3, #2]
   114ac:	1ad3      	subs	r3, r2, r3
   114ae:	b29a      	uxth	r2, r3
   114b0:	68bb      	ldr	r3, [r7, #8]
   114b2:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   114b4:	7bbb      	ldrb	r3, [r7, #14]
   114b6:	68ba      	ldr	r2, [r7, #8]
   114b8:	005b      	lsls	r3, r3, #1
   114ba:	4413      	add	r3, r2
   114bc:	88fa      	ldrh	r2, [r7, #6]
   114be:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   114c0:	68bb      	ldr	r3, [r7, #8]
   114c2:	881a      	ldrh	r2, [r3, #0]
   114c4:	88fb      	ldrh	r3, [r7, #6]
   114c6:	4413      	add	r3, r2
   114c8:	b29a      	uxth	r2, r3
   114ca:	68bb      	ldr	r3, [r7, #8]
   114cc:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   114ce:	68bb      	ldr	r3, [r7, #8]
   114d0:	7bba      	ldrb	r2, [r7, #14]
   114d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   114d6:	7bfb      	ldrb	r3, [r7, #15]
   114d8:	3301      	adds	r3, #1
   114da:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   114dc:	7bfb      	ldrb	r3, [r7, #15]
   114de:	2b07      	cmp	r3, #7
   114e0:	d901      	bls.n	114e6 <__vector_21+0xa6>
    adc_input = 0;
   114e2:	2300      	movs	r3, #0
   114e4:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   114e6:	f242 0307 	movw	r3, #8199	; 0x2007
   114ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114ee:	7bfa      	ldrb	r2, [r7, #15]
   114f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   114f4:	b2d2      	uxtb	r2, r2
   114f6:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   114f8:	f242 0306 	movw	r3, #8198	; 0x2006
   114fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11500:	f242 0206 	movw	r2, #8198	; 0x2006
   11504:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11508:	7812      	ldrb	r2, [r2, #0]
   1150a:	b2d2      	uxtb	r2, r2
   1150c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11510:	b2d2      	uxtb	r2, r2
   11512:	701a      	strb	r2, [r3, #0]
  
}
   11514:	3714      	adds	r7, #20
   11516:	46bd      	mov	sp, r7
   11518:	f85d 7b04 	ldr.w	r7, [sp], #4
   1151c:	4770      	bx	lr
   1151e:	bf00      	nop

00011520 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   11520:	b580      	push	{r7, lr}
   11522:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   11524:	f003 fca8 	bl	14e78 <uart1_init>
#endif
  ubx_status = UNINIT;
   11528:	f24b 1367 	movw	r3, #45415	; 0xb167
   1152c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11530:	2200      	movs	r2, #0
   11532:	701a      	strb	r2, [r3, #0]
}
   11534:	bd80      	pop	{r7, pc}
   11536:	bf00      	nop

00011538 <parse_gps_msg>:

void parse_gps_msg( void ) {
   11538:	b580      	push	{r7, lr}
   1153a:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   1153c:	f24b 136e 	movw	r3, #45422	; 0xb16e
   11540:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11544:	781b      	ldrb	r3, [r3, #0]
   11546:	2b01      	cmp	r3, #1
   11548:	f040 80f9 	bne.w	1173e <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   1154c:	f24b 136d 	movw	r3, #45421	; 0xb16d
   11550:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11554:	781b      	ldrb	r3, [r3, #0]
   11556:	2b08      	cmp	r3, #8
   11558:	d128      	bne.n	115ac <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   1155a:	f24b 0368 	movw	r3, #45160	; 0xb068
   1155e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11562:	685a      	ldr	r2, [r3, #4]
   11564:	f24b 0354 	movw	r3, #45140	; 0xb054
   11568:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1156c:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   1156e:	f24b 0368 	movw	r3, #45160	; 0xb068
   11572:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11576:	689a      	ldr	r2, [r3, #8]
   11578:	f24b 0358 	movw	r3, #45144	; 0xb058
   1157c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11580:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   11582:	4b73      	ldr	r3, [pc, #460]	; (11750 <parse_gps_msg+0x218>)
   11584:	681b      	ldr	r3, [r3, #0]
   11586:	4618      	mov	r0, r3
   11588:	f006 fdde 	bl	18148 <__aeabi_i2f>
   1158c:	4603      	mov	r3, r0
   1158e:	4618      	mov	r0, r3
   11590:	f04f 0100 	mov.w	r1, #0
   11594:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11598:	f006 fede 	bl	18358 <__aeabi_fdiv>
   1159c:	4603      	mov	r3, r0
   1159e:	461a      	mov	r2, r3
   115a0:	f24b 0344 	movw	r3, #45124	; 0xb044
   115a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115a8:	601a      	str	r2, [r3, #0]
   115aa:	e0c8      	b.n	1173e <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   115ac:	f24b 136d 	movw	r3, #45421	; 0xb16d
   115b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115b4:	781b      	ldrb	r3, [r3, #0]
   115b6:	2b03      	cmp	r3, #3
   115b8:	d10a      	bne.n	115d0 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   115ba:	f24b 0368 	movw	r3, #45160	; 0xb068
   115be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115c2:	791a      	ldrb	r2, [r3, #4]
   115c4:	f24b 0364 	movw	r3, #45156	; 0xb064
   115c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115cc:	701a      	strb	r2, [r3, #0]
   115ce:	e0b6      	b.n	1173e <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   115d0:	f24b 136d 	movw	r3, #45421	; 0xb16d
   115d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115d8:	781b      	ldrb	r3, [r3, #0]
   115da:	2b12      	cmp	r3, #18
   115dc:	f040 80af 	bne.w	1173e <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   115e0:	4b5c      	ldr	r3, [pc, #368]	; (11754 <parse_gps_msg+0x21c>)
   115e2:	681b      	ldr	r3, [r3, #0]
   115e4:	4618      	mov	r0, r3
   115e6:	f006 fdab 	bl	18140 <__aeabi_ui2f>
   115ea:	4603      	mov	r3, r0
   115ec:	4618      	mov	r0, r3
   115ee:	f04f 0100 	mov.w	r1, #0
   115f2:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   115f6:	f006 feaf 	bl	18358 <__aeabi_fdiv>
   115fa:	4603      	mov	r3, r0
   115fc:	461a      	mov	r2, r3
   115fe:	f24b 0348 	movw	r3, #45128	; 0xb048
   11602:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11606:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   11608:	4b51      	ldr	r3, [pc, #324]	; (11750 <parse_gps_msg+0x218>)
   1160a:	681b      	ldr	r3, [r3, #0]
   1160c:	4618      	mov	r0, r3
   1160e:	f006 fd9b 	bl	18148 <__aeabi_i2f>
   11612:	4603      	mov	r3, r0
   11614:	4618      	mov	r0, r3
   11616:	f04f 0100 	mov.w	r1, #0
   1161a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1161e:	f006 fe9b 	bl	18358 <__aeabi_fdiv>
   11622:	4603      	mov	r3, r0
   11624:	461a      	mov	r2, r3
   11626:	f24b 034c 	movw	r3, #45132	; 0xb04c
   1162a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1162e:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   11630:	4b49      	ldr	r3, [pc, #292]	; (11758 <parse_gps_msg+0x220>)
   11632:	681b      	ldr	r3, [r3, #0]
   11634:	4618      	mov	r0, r3
   11636:	f006 fd87 	bl	18148 <__aeabi_i2f>
   1163a:	4603      	mov	r3, r0
   1163c:	4618      	mov	r0, r3
   1163e:	f006 f943 	bl	178c8 <__aeabi_f2d>
   11642:	4602      	mov	r2, r0
   11644:	460b      	mov	r3, r1
   11646:	4610      	mov	r0, r2
   11648:	4619      	mov	r1, r3
   1164a:	a33d      	add	r3, pc, #244	; (adr r3, 11740 <parse_gps_msg+0x208>)
   1164c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11650:	f006 fab8 	bl	17bc4 <__aeabi_ddiv>
   11654:	4602      	mov	r2, r0
   11656:	460b      	mov	r3, r1
   11658:	4610      	mov	r0, r2
   1165a:	4619      	mov	r1, r3
   1165c:	f04f 0200 	mov.w	r2, #0
   11660:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   11664:	f2c4 0366 	movt	r3, #16486	; 0x4066
   11668:	f006 faac 	bl	17bc4 <__aeabi_ddiv>
   1166c:	4602      	mov	r2, r0
   1166e:	460b      	mov	r3, r1
   11670:	4610      	mov	r0, r2
   11672:	4619      	mov	r1, r3
   11674:	a334      	add	r3, pc, #208	; (adr r3, 11748 <parse_gps_msg+0x210>)
   11676:	e9d3 2300 	ldrd	r2, r3, [r3]
   1167a:	f006 f979 	bl	17970 <__aeabi_dmul>
   1167e:	4602      	mov	r2, r0
   11680:	460b      	mov	r3, r1
   11682:	4610      	mov	r0, r2
   11684:	4619      	mov	r1, r3
   11686:	f006 fc55 	bl	17f34 <__aeabi_d2f>
   1168a:	4602      	mov	r2, r0
   1168c:	f24b 0350 	movw	r3, #45136	; 0xb050
   11690:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11694:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   11696:	f24b 0368 	movw	r3, #45160	; 0xb068
   1169a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1169e:	681b      	ldr	r3, [r3, #0]
   116a0:	4618      	mov	r0, r3
   116a2:	f006 fd4d 	bl	18140 <__aeabi_ui2f>
   116a6:	4603      	mov	r3, r0
   116a8:	4618      	mov	r0, r3
   116aa:	f04f 0100 	mov.w	r1, #0
   116ae:	f2c4 417a 	movt	r1, #17530	; 0x447a
   116b2:	f006 fe51 	bl	18358 <__aeabi_fdiv>
   116b6:	4603      	mov	r3, r0
   116b8:	461a      	mov	r2, r3
   116ba:	f24b 0340 	movw	r3, #45120	; 0xb040
   116be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116c2:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   116c4:	f24b 0354 	movw	r3, #45140	; 0xb054
   116c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116cc:	681a      	ldr	r2, [r3, #0]
   116ce:	f248 531f 	movw	r3, #34079	; 0x851f
   116d2:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   116d6:	fb83 1302 	smull	r1, r3, r3, r2
   116da:	1159      	asrs	r1, r3, #5
   116dc:	17d3      	asrs	r3, r2, #31
   116de:	1acb      	subs	r3, r1, r3
   116e0:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   116e4:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   116e8:	4618      	mov	r0, r3
   116ea:	f006 fd2d 	bl	18148 <__aeabi_i2f>
   116ee:	4602      	mov	r2, r0
   116f0:	f24b 035c 	movw	r3, #45148	; 0xb05c
   116f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116f8:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   116fa:	f24b 0358 	movw	r3, #45144	; 0xb058
   116fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11702:	681a      	ldr	r2, [r3, #0]
   11704:	f248 531f 	movw	r3, #34079	; 0x851f
   11708:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   1170c:	fb83 1302 	smull	r1, r3, r3, r2
   11710:	1159      	asrs	r1, r3, #5
   11712:	17d3      	asrs	r3, r2, #31
   11714:	1aca      	subs	r2, r1, r3
   11716:	f648 231a 	movw	r3, #35354	; 0x8a1a
   1171a:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   1171e:	4413      	add	r3, r2
   11720:	4618      	mov	r0, r3
   11722:	f006 fd11 	bl	18148 <__aeabi_i2f>
   11726:	4602      	mov	r2, r0
   11728:	f24b 0360 	movw	r3, #45152	; 0xb060
   1172c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11730:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   11732:	f24b 0366 	movw	r3, #45158	; 0xb066
   11736:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1173a:	2201      	movs	r2, #1
   1173c:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   1173e:	bd80      	pop	{r7, pc}
   11740:	00000000 	.word	0x00000000
   11744:	40f86a00 	.word	0x40f86a00
   11748:	5a7ed197 	.word	0x5a7ed197
   1174c:	400921fb 	.word	0x400921fb
   11750:	2000b074 	.word	0x2000b074
   11754:	2000b07c 	.word	0x2000b07c
   11758:	2000b080 	.word	0x2000b080

0001175c <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   1175c:	b480      	push	{r7}
   1175e:	b083      	sub	sp, #12
   11760:	af00      	add	r7, sp, #0
   11762:	4603      	mov	r3, r0
   11764:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   11766:	f24b 1367 	movw	r3, #45415	; 0xb167
   1176a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1176e:	781b      	ldrb	r3, [r3, #0]
   11770:	2b06      	cmp	r3, #6
   11772:	d81d      	bhi.n	117b0 <parse_ubx+0x54>
    ck_a += c;
   11774:	f24b 136b 	movw	r3, #45419	; 0xb16b
   11778:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1177c:	781a      	ldrb	r2, [r3, #0]
   1177e:	79fb      	ldrb	r3, [r7, #7]
   11780:	4413      	add	r3, r2
   11782:	b2da      	uxtb	r2, r3
   11784:	f24b 136b 	movw	r3, #45419	; 0xb16b
   11788:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1178c:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   1178e:	f24b 136c 	movw	r3, #45420	; 0xb16c
   11792:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11796:	781a      	ldrb	r2, [r3, #0]
   11798:	f24b 136b 	movw	r3, #45419	; 0xb16b
   1179c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117a0:	781b      	ldrb	r3, [r3, #0]
   117a2:	4413      	add	r3, r2
   117a4:	b2da      	uxtb	r2, r3
   117a6:	f24b 136c 	movw	r3, #45420	; 0xb16c
   117aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117ae:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   117b0:	f24b 1367 	movw	r3, #45415	; 0xb167
   117b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117b8:	781b      	ldrb	r3, [r3, #0]
   117ba:	2b00      	cmp	r3, #0
   117bc:	d110      	bne.n	117e0 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   117be:	79fb      	ldrb	r3, [r7, #7]
   117c0:	2bb5      	cmp	r3, #181	; 0xb5
   117c2:	f040 8135 	bne.w	11a30 <parse_ubx+0x2d4>
      ubx_status++;
   117c6:	f24b 1367 	movw	r3, #45415	; 0xb167
   117ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117ce:	781b      	ldrb	r3, [r3, #0]
   117d0:	3301      	adds	r3, #1
   117d2:	b2da      	uxtb	r2, r3
   117d4:	f24b 1367 	movw	r3, #45415	; 0xb167
   117d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117dc:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   117de:	e12f      	b.n	11a40 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   117e0:	f24b 1367 	movw	r3, #45415	; 0xb167
   117e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117e8:	781b      	ldrb	r3, [r3, #0]
   117ea:	2b01      	cmp	r3, #1
   117ec:	d11c      	bne.n	11828 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   117ee:	79fb      	ldrb	r3, [r7, #7]
   117f0:	2b62      	cmp	r3, #98	; 0x62
   117f2:	d000      	beq.n	117f6 <parse_ubx+0x9a>
      goto error;
   117f4:	e11d      	b.n	11a32 <parse_ubx+0x2d6>
    ck_a = 0;
   117f6:	f24b 136b 	movw	r3, #45419	; 0xb16b
   117fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117fe:	2200      	movs	r2, #0
   11800:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   11802:	f24b 136c 	movw	r3, #45420	; 0xb16c
   11806:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1180a:	2200      	movs	r2, #0
   1180c:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   1180e:	f24b 1367 	movw	r3, #45415	; 0xb167
   11812:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11816:	781b      	ldrb	r3, [r3, #0]
   11818:	3301      	adds	r3, #1
   1181a:	b2da      	uxtb	r2, r3
   1181c:	f24b 1367 	movw	r3, #45415	; 0xb167
   11820:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11824:	701a      	strb	r2, [r3, #0]
   11826:	e103      	b.n	11a30 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11828:	f24b 1367 	movw	r3, #45415	; 0xb167
   1182c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11830:	781b      	ldrb	r3, [r3, #0]
   11832:	2b02      	cmp	r3, #2
   11834:	d127      	bne.n	11886 <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   11836:	f24b 0365 	movw	r3, #45157	; 0xb065
   1183a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1183e:	781b      	ldrb	r3, [r3, #0]
   11840:	b2db      	uxtb	r3, r3
   11842:	2b00      	cmp	r3, #0
   11844:	d00c      	beq.n	11860 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   11846:	f24b 136f 	movw	r3, #45423	; 0xb16f
   1184a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1184e:	781b      	ldrb	r3, [r3, #0]
   11850:	3301      	adds	r3, #1
   11852:	b2da      	uxtb	r2, r3
   11854:	f24b 136f 	movw	r3, #45423	; 0xb16f
   11858:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1185c:	701a      	strb	r2, [r3, #0]
      goto error;
   1185e:	e0e8      	b.n	11a32 <parse_ubx+0x2d6>
    }
    ubx_class = c;
   11860:	f24b 136e 	movw	r3, #45422	; 0xb16e
   11864:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11868:	79fa      	ldrb	r2, [r7, #7]
   1186a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   1186c:	f24b 1367 	movw	r3, #45415	; 0xb167
   11870:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11874:	781b      	ldrb	r3, [r3, #0]
   11876:	3301      	adds	r3, #1
   11878:	b2da      	uxtb	r2, r3
   1187a:	f24b 1367 	movw	r3, #45415	; 0xb167
   1187e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11882:	701a      	strb	r2, [r3, #0]
   11884:	e0d4      	b.n	11a30 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   11886:	f24b 1367 	movw	r3, #45415	; 0xb167
   1188a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1188e:	781b      	ldrb	r3, [r3, #0]
   11890:	2b03      	cmp	r3, #3
   11892:	d112      	bne.n	118ba <parse_ubx+0x15e>
  {
    ubx_id = c;
   11894:	f24b 136d 	movw	r3, #45421	; 0xb16d
   11898:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1189c:	79fa      	ldrb	r2, [r7, #7]
   1189e:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   118a0:	f24b 1367 	movw	r3, #45415	; 0xb167
   118a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118a8:	781b      	ldrb	r3, [r3, #0]
   118aa:	3301      	adds	r3, #1
   118ac:	b2da      	uxtb	r2, r3
   118ae:	f24b 1367 	movw	r3, #45415	; 0xb167
   118b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118b6:	701a      	strb	r2, [r3, #0]
   118b8:	e0ba      	b.n	11a30 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   118ba:	f24b 1367 	movw	r3, #45415	; 0xb167
   118be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118c2:	781b      	ldrb	r3, [r3, #0]
   118c4:	2b04      	cmp	r3, #4
   118c6:	d113      	bne.n	118f0 <parse_ubx+0x194>
  {
    ubx_len = c;
   118c8:	79fb      	ldrb	r3, [r7, #7]
   118ca:	b29a      	uxth	r2, r3
   118cc:	f24b 1368 	movw	r3, #45416	; 0xb168
   118d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118d4:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   118d6:	f24b 1367 	movw	r3, #45415	; 0xb167
   118da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118de:	781b      	ldrb	r3, [r3, #0]
   118e0:	3301      	adds	r3, #1
   118e2:	b2da      	uxtb	r2, r3
   118e4:	f24b 1367 	movw	r3, #45415	; 0xb167
   118e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118ec:	701a      	strb	r2, [r3, #0]
   118ee:	e09f      	b.n	11a30 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   118f0:	f24b 1367 	movw	r3, #45415	; 0xb167
   118f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118f8:	781b      	ldrb	r3, [r3, #0]
   118fa:	2b05      	cmp	r3, #5
   118fc:	d12b      	bne.n	11956 <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   118fe:	79fb      	ldrb	r3, [r7, #7]
   11900:	021b      	lsls	r3, r3, #8
   11902:	b29a      	uxth	r2, r3
   11904:	f24b 1368 	movw	r3, #45416	; 0xb168
   11908:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1190c:	881b      	ldrh	r3, [r3, #0]
   1190e:	b29b      	uxth	r3, r3
   11910:	4313      	orrs	r3, r2
   11912:	b29b      	uxth	r3, r3
   11914:	b29a      	uxth	r2, r3
   11916:	f24b 1368 	movw	r3, #45416	; 0xb168
   1191a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1191e:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11920:	f24b 1368 	movw	r3, #45416	; 0xb168
   11924:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11928:	881b      	ldrh	r3, [r3, #0]
   1192a:	2bff      	cmp	r3, #255	; 0xff
   1192c:	d900      	bls.n	11930 <parse_ubx+0x1d4>
      goto error;
   1192e:	e080      	b.n	11a32 <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11930:	f24b 136a 	movw	r3, #45418	; 0xb16a
   11934:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11938:	2200      	movs	r2, #0
   1193a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   1193c:	f24b 1367 	movw	r3, #45415	; 0xb167
   11940:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11944:	781b      	ldrb	r3, [r3, #0]
   11946:	3301      	adds	r3, #1
   11948:	b2da      	uxtb	r2, r3
   1194a:	f24b 1367 	movw	r3, #45415	; 0xb167
   1194e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11952:	701a      	strb	r2, [r3, #0]
   11954:	e06c      	b.n	11a30 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   11956:	f24b 1367 	movw	r3, #45415	; 0xb167
   1195a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1195e:	781b      	ldrb	r3, [r3, #0]
   11960:	2b06      	cmp	r3, #6
   11962:	d131      	bne.n	119c8 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   11964:	f24b 136a 	movw	r3, #45418	; 0xb16a
   11968:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1196c:	781b      	ldrb	r3, [r3, #0]
   1196e:	461a      	mov	r2, r3
   11970:	f24b 0368 	movw	r3, #45160	; 0xb068
   11974:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11978:	79f9      	ldrb	r1, [r7, #7]
   1197a:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   1197c:	f24b 136a 	movw	r3, #45418	; 0xb16a
   11980:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11984:	781b      	ldrb	r3, [r3, #0]
   11986:	3301      	adds	r3, #1
   11988:	b2da      	uxtb	r2, r3
   1198a:	f24b 136a 	movw	r3, #45418	; 0xb16a
   1198e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11992:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   11994:	f24b 136a 	movw	r3, #45418	; 0xb16a
   11998:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1199c:	781b      	ldrb	r3, [r3, #0]
   1199e:	461a      	mov	r2, r3
   119a0:	f24b 1368 	movw	r3, #45416	; 0xb168
   119a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119a8:	881b      	ldrh	r3, [r3, #0]
   119aa:	429a      	cmp	r2, r3
   119ac:	d340      	bcc.n	11a30 <parse_ubx+0x2d4>
      ubx_status++;
   119ae:	f24b 1367 	movw	r3, #45415	; 0xb167
   119b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119b6:	781b      	ldrb	r3, [r3, #0]
   119b8:	3301      	adds	r3, #1
   119ba:	b2da      	uxtb	r2, r3
   119bc:	f24b 1367 	movw	r3, #45415	; 0xb167
   119c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119c4:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   119c6:	e03b      	b.n	11a40 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   119c8:	f24b 1367 	movw	r3, #45415	; 0xb167
   119cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119d0:	781b      	ldrb	r3, [r3, #0]
   119d2:	2b07      	cmp	r3, #7
   119d4:	d115      	bne.n	11a02 <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   119d6:	f24b 136b 	movw	r3, #45419	; 0xb16b
   119da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119de:	781b      	ldrb	r3, [r3, #0]
   119e0:	79fa      	ldrb	r2, [r7, #7]
   119e2:	429a      	cmp	r2, r3
   119e4:	d000      	beq.n	119e8 <parse_ubx+0x28c>
      goto error;
   119e6:	e024      	b.n	11a32 <parse_ubx+0x2d6>
    ubx_status++;
   119e8:	f24b 1367 	movw	r3, #45415	; 0xb167
   119ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119f0:	781b      	ldrb	r3, [r3, #0]
   119f2:	3301      	adds	r3, #1
   119f4:	b2da      	uxtb	r2, r3
   119f6:	f24b 1367 	movw	r3, #45415	; 0xb167
   119fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119fe:	701a      	strb	r2, [r3, #0]
   11a00:	e016      	b.n	11a30 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   11a02:	f24b 1367 	movw	r3, #45415	; 0xb167
   11a06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a0a:	781b      	ldrb	r3, [r3, #0]
   11a0c:	2b08      	cmp	r3, #8
   11a0e:	d10f      	bne.n	11a30 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11a10:	f24b 136c 	movw	r3, #45420	; 0xb16c
   11a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a18:	781b      	ldrb	r3, [r3, #0]
   11a1a:	79fa      	ldrb	r2, [r7, #7]
   11a1c:	429a      	cmp	r2, r3
   11a1e:	d000      	beq.n	11a22 <parse_ubx+0x2c6>
      goto error;
   11a20:	e007      	b.n	11a32 <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   11a22:	f24b 0365 	movw	r3, #45157	; 0xb065
   11a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a2a:	2201      	movs	r2, #1
   11a2c:	701a      	strb	r2, [r3, #0]
    goto restart;
   11a2e:	e000      	b.n	11a32 <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11a30:	e006      	b.n	11a40 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   11a32:	f24b 1367 	movw	r3, #45415	; 0xb167
   11a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a3a:	2200      	movs	r2, #0
   11a3c:	701a      	strb	r2, [r3, #0]
  return;
   11a3e:	bf00      	nop
}
   11a40:	370c      	adds	r7, #12
   11a42:	46bd      	mov	sp, r7
   11a44:	f85d 7b04 	ldr.w	r7, [sp], #4
   11a48:	4770      	bx	lr
   11a4a:	bf00      	nop

00011a4c <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   11a4c:	b580      	push	{r7, lr}
   11a4e:	b082      	sub	sp, #8
   11a50:	af00      	add	r7, sp, #0
   11a52:	f242 039c 	movw	r3, #8348	; 0x209c
   11a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a5a:	781b      	ldrb	r3, [r3, #0]
   11a5c:	71fb      	strb	r3, [r7, #7]
   11a5e:	79fb      	ldrb	r3, [r7, #7]
   11a60:	4618      	mov	r0, r3
   11a62:	f7ff fe7b 	bl	1175c <parse_ubx>
   11a66:	3708      	adds	r7, #8
   11a68:	46bd      	mov	sp, r7
   11a6a:	bd80      	pop	{r7, pc}
   11a6c:	f3af 8000 	nop.w

00011a70 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   11a70:	b580      	push	{r7, lr}
   11a72:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   11a74:	f240 33f8 	movw	r3, #1016	; 0x3f8
   11a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a7c:	f24c 228f 	movw	r2, #49807	; 0xc28f
   11a80:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   11a84:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   11a86:	2001      	movs	r0, #1
   11a88:	f24b 1174 	movw	r1, #45428	; 0xb174
   11a8c:	f2c2 0100 	movt	r1, #8192	; 0x2000
   11a90:	f7ff fc82 	bl	11398 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   11a94:	2002      	movs	r0, #2
   11a96:	f24b 11b8 	movw	r1, #45496	; 0xb1b8
   11a9a:	f2c2 0100 	movt	r1, #8192	; 0x2000
   11a9e:	f7ff fc7b 	bl	11398 <adc_buf_channel>
}
   11aa2:	bd80      	pop	{r7, pc}

00011aa4 <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   11aa4:	b480      	push	{r7}
   11aa6:	b083      	sub	sp, #12
   11aa8:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   11aaa:	f24b 1374 	movw	r3, #45428	; 0xb174
   11aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ab2:	881b      	ldrh	r3, [r3, #0]
   11ab4:	095b      	lsrs	r3, r3, #5
   11ab6:	b29b      	uxth	r3, r3
   11ab8:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   11aba:	f24b 13b8 	movw	r3, #45496	; 0xb1b8
   11abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ac2:	881b      	ldrh	r3, [r3, #0]
   11ac4:	095b      	lsrs	r3, r3, #5
   11ac6:	b29b      	uxth	r3, r3
   11ac8:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   11aca:	88fb      	ldrh	r3, [r7, #6]
   11acc:	425b      	negs	r3, r3
   11ace:	b29a      	uxth	r2, r3
   11ad0:	88bb      	ldrh	r3, [r7, #4]
   11ad2:	1ad3      	subs	r3, r2, r3
   11ad4:	b29a      	uxth	r2, r3
   11ad6:	f240 33f2 	movw	r3, #1010	; 0x3f2
   11ada:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ade:	881b      	ldrh	r3, [r3, #0]
   11ae0:	b29b      	uxth	r3, r3
   11ae2:	1ad3      	subs	r3, r2, r3
   11ae4:	b29b      	uxth	r3, r3
   11ae6:	b29a      	uxth	r2, r3
   11ae8:	f24b 1370 	movw	r3, #45424	; 0xb170
   11aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11af0:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   11af2:	88ba      	ldrh	r2, [r7, #4]
   11af4:	88fb      	ldrh	r3, [r7, #6]
   11af6:	1ad3      	subs	r3, r2, r3
   11af8:	b29a      	uxth	r2, r3
   11afa:	f240 33f4 	movw	r3, #1012	; 0x3f4
   11afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b02:	881b      	ldrh	r3, [r3, #0]
   11b04:	b29b      	uxth	r3, r3
   11b06:	1ad3      	subs	r3, r2, r3
   11b08:	b29b      	uxth	r3, r3
   11b0a:	b29a      	uxth	r2, r3
   11b0c:	f24b 1372 	movw	r3, #45426	; 0xb172
   11b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b14:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   11b16:	370c      	adds	r7, #12
   11b18:	46bd      	mov	sp, r7
   11b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   11b1e:	4770      	bx	lr

00011b20 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11b20:	b580      	push	{r7, lr}
   11b22:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   11b24:	f24b 1372 	movw	r3, #45426	; 0xb172
   11b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b2c:	881b      	ldrh	r3, [r3, #0]
   11b2e:	b29b      	uxth	r3, r3
   11b30:	425b      	negs	r3, r3
   11b32:	b29b      	uxth	r3, r3
   11b34:	b29a      	uxth	r2, r3
   11b36:	f240 33f0 	movw	r3, #1008	; 0x3f0
   11b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b3e:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   11b40:	f240 33f0 	movw	r3, #1008	; 0x3f0
   11b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b48:	881b      	ldrh	r3, [r3, #0]
   11b4a:	b21b      	sxth	r3, r3
   11b4c:	4618      	mov	r0, r3
   11b4e:	f005 fea9 	bl	178a4 <__aeabi_i2d>
   11b52:	4602      	mov	r2, r0
   11b54:	460b      	mov	r3, r1
   11b56:	f04f 0000 	mov.w	r0, #0
   11b5a:	f04f 0100 	mov.w	r1, #0
   11b5e:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   11b62:	f006 f82f 	bl	17bc4 <__aeabi_ddiv>
   11b66:	4602      	mov	r2, r0
   11b68:	460b      	mov	r3, r1
   11b6a:	4610      	mov	r0, r2
   11b6c:	4619      	mov	r1, r3
   11b6e:	f006 f9e1 	bl	17f34 <__aeabi_d2f>
   11b72:	4602      	mov	r2, r0
   11b74:	f240 33f8 	movw	r3, #1016	; 0x3f8
   11b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b7c:	601a      	str	r2, [r3, #0]
}
   11b7e:	bd80      	pop	{r7, pc}

00011b80 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   11b80:	b590      	push	{r4, r7, lr}
   11b82:	b083      	sub	sp, #12
   11b84:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   11b86:	f24b 4390 	movw	r3, #46224	; 0xb490
   11b8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b8e:	681a      	ldr	r2, [r3, #0]
   11b90:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
   11b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b98:	681b      	ldr	r3, [r3, #0]
   11b9a:	4610      	mov	r0, r2
   11b9c:	4619      	mov	r1, r3
   11b9e:	f006 fa1d 	bl	17fdc <__aeabi_fsub>
   11ba2:	4603      	mov	r3, r0
   11ba4:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   11ba6:	f240 33fc 	movw	r3, #1020	; 0x3fc
   11baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bae:	681b      	ldr	r3, [r3, #0]
   11bb0:	4618      	mov	r0, r3
   11bb2:	6879      	ldr	r1, [r7, #4]
   11bb4:	f006 fb1c 	bl	181f0 <__aeabi_fmul>
   11bb8:	4603      	mov	r3, r0
   11bba:	4618      	mov	r0, r3
   11bbc:	f04f 0100 	mov.w	r1, #0
   11bc0:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11bc4:	f006 fcb2 	bl	1852c <__aeabi_fcmplt>
   11bc8:	4603      	mov	r3, r0
   11bca:	2b00      	cmp	r3, #0
   11bcc:	d002      	beq.n	11bd4 <roll_pitch_pid_run+0x54>
   11bce:	f64d 2280 	movw	r2, #55936	; 0xda80
   11bd2:	e026      	b.n	11c22 <roll_pitch_pid_run+0xa2>
   11bd4:	f240 33fc 	movw	r3, #1020	; 0x3fc
   11bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bdc:	681b      	ldr	r3, [r3, #0]
   11bde:	4618      	mov	r0, r3
   11be0:	6879      	ldr	r1, [r7, #4]
   11be2:	f006 fb05 	bl	181f0 <__aeabi_fmul>
   11be6:	4603      	mov	r3, r0
   11be8:	4618      	mov	r0, r3
   11bea:	f04f 0100 	mov.w	r1, #0
   11bee:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11bf2:	f006 fcb9 	bl	18568 <__aeabi_fcmpgt>
   11bf6:	4603      	mov	r3, r0
   11bf8:	2b00      	cmp	r3, #0
   11bfa:	d002      	beq.n	11c02 <roll_pitch_pid_run+0x82>
   11bfc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11c00:	e00e      	b.n	11c20 <roll_pitch_pid_run+0xa0>
   11c02:	f240 33fc 	movw	r3, #1020	; 0x3fc
   11c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c0a:	681b      	ldr	r3, [r3, #0]
   11c0c:	4618      	mov	r0, r3
   11c0e:	6879      	ldr	r1, [r7, #4]
   11c10:	f006 faee 	bl	181f0 <__aeabi_fmul>
   11c14:	4603      	mov	r3, r0
   11c16:	4618      	mov	r0, r3
   11c18:	f006 fcb0 	bl	1857c <__aeabi_f2iz>
   11c1c:	4603      	mov	r3, r0
   11c1e:	b29b      	uxth	r3, r3
   11c20:	b29a      	uxth	r2, r3
   11c22:	f24b 2306 	movw	r3, #45574	; 0xb206
   11c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c2a:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   11c2c:	f24b 230c 	movw	r3, #45580	; 0xb20c
   11c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c34:	681b      	ldr	r3, [r3, #0]
   11c36:	4618      	mov	r0, r3
   11c38:	f04f 0100 	mov.w	r1, #0
   11c3c:	f006 fc76 	bl	1852c <__aeabi_fcmplt>
   11c40:	4603      	mov	r3, r0
   11c42:	2b00      	cmp	r3, #0
   11c44:	d006      	beq.n	11c54 <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   11c46:	f24b 230c 	movw	r3, #45580	; 0xb20c
   11c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c4e:	f04f 0200 	mov.w	r2, #0
   11c52:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   11c54:	f24b 4398 	movw	r3, #46232	; 0xb498
   11c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c5c:	681a      	ldr	r2, [r3, #0]
   11c5e:	f24b 2300 	movw	r3, #45568	; 0xb200
   11c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c66:	681b      	ldr	r3, [r3, #0]
   11c68:	4610      	mov	r0, r2
   11c6a:	4619      	mov	r1, r3
   11c6c:	f006 f9b6 	bl	17fdc <__aeabi_fsub>
   11c70:	4603      	mov	r3, r0
   11c72:	461c      	mov	r4, r3
   11c74:	f24b 4390 	movw	r3, #46224	; 0xb490
   11c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c7c:	681b      	ldr	r3, [r3, #0]
   11c7e:	4618      	mov	r0, r3
   11c80:	f04f 0100 	mov.w	r1, #0
   11c84:	f006 fc52 	bl	1852c <__aeabi_fcmplt>
   11c88:	4603      	mov	r3, r0
   11c8a:	2b00      	cmp	r3, #0
   11c8c:	d007      	beq.n	11c9e <roll_pitch_pid_run+0x11e>
   11c8e:	f24b 4390 	movw	r3, #46224	; 0xb490
   11c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c96:	681b      	ldr	r3, [r3, #0]
   11c98:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11c9c:	e004      	b.n	11ca8 <roll_pitch_pid_run+0x128>
   11c9e:	f24b 4390 	movw	r3, #46224	; 0xb490
   11ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ca6:	681a      	ldr	r2, [r3, #0]
   11ca8:	f24b 230c 	movw	r3, #45580	; 0xb20c
   11cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cb0:	681b      	ldr	r3, [r3, #0]
   11cb2:	4610      	mov	r0, r2
   11cb4:	4619      	mov	r1, r3
   11cb6:	f006 fa9b 	bl	181f0 <__aeabi_fmul>
   11cba:	4603      	mov	r3, r0
   11cbc:	4620      	mov	r0, r4
   11cbe:	4619      	mov	r1, r3
   11cc0:	f006 f98c 	bl	17fdc <__aeabi_fsub>
   11cc4:	4603      	mov	r3, r0
   11cc6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   11cca:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   11ccc:	f240 4300 	movw	r3, #1024	; 0x400
   11cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cd4:	681b      	ldr	r3, [r3, #0]
   11cd6:	4618      	mov	r0, r3
   11cd8:	6879      	ldr	r1, [r7, #4]
   11cda:	f006 fa89 	bl	181f0 <__aeabi_fmul>
   11cde:	4603      	mov	r3, r0
   11ce0:	4618      	mov	r0, r3
   11ce2:	f04f 0100 	mov.w	r1, #0
   11ce6:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11cea:	f006 fc1f 	bl	1852c <__aeabi_fcmplt>
   11cee:	4603      	mov	r3, r0
   11cf0:	2b00      	cmp	r3, #0
   11cf2:	d002      	beq.n	11cfa <roll_pitch_pid_run+0x17a>
   11cf4:	f64d 2280 	movw	r2, #55936	; 0xda80
   11cf8:	e026      	b.n	11d48 <roll_pitch_pid_run+0x1c8>
   11cfa:	f240 4300 	movw	r3, #1024	; 0x400
   11cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d02:	681b      	ldr	r3, [r3, #0]
   11d04:	4618      	mov	r0, r3
   11d06:	6879      	ldr	r1, [r7, #4]
   11d08:	f006 fa72 	bl	181f0 <__aeabi_fmul>
   11d0c:	4603      	mov	r3, r0
   11d0e:	4618      	mov	r0, r3
   11d10:	f04f 0100 	mov.w	r1, #0
   11d14:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11d18:	f006 fc26 	bl	18568 <__aeabi_fcmpgt>
   11d1c:	4603      	mov	r3, r0
   11d1e:	2b00      	cmp	r3, #0
   11d20:	d002      	beq.n	11d28 <roll_pitch_pid_run+0x1a8>
   11d22:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11d26:	e00e      	b.n	11d46 <roll_pitch_pid_run+0x1c6>
   11d28:	f240 4300 	movw	r3, #1024	; 0x400
   11d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d30:	681b      	ldr	r3, [r3, #0]
   11d32:	4618      	mov	r0, r3
   11d34:	6879      	ldr	r1, [r7, #4]
   11d36:	f006 fa5b 	bl	181f0 <__aeabi_fmul>
   11d3a:	4603      	mov	r3, r0
   11d3c:	4618      	mov	r0, r3
   11d3e:	f006 fc1d 	bl	1857c <__aeabi_f2iz>
   11d42:	4603      	mov	r3, r0
   11d44:	b29b      	uxth	r3, r3
   11d46:	b29a      	uxth	r2, r3
   11d48:	f24b 2308 	movw	r3, #45576	; 0xb208
   11d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d50:	801a      	strh	r2, [r3, #0]
}
   11d52:	370c      	adds	r7, #12
   11d54:	46bd      	mov	sp, r7
   11d56:	bd90      	pop	{r4, r7, pc}

00011d58 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   11d58:	b580      	push	{r7, lr}
   11d5a:	b082      	sub	sp, #8
   11d5c:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   11d5e:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
   11d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d66:	681a      	ldr	r2, [r3, #0]
   11d68:	f24b 2314 	movw	r3, #45588	; 0xb214
   11d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d70:	681b      	ldr	r3, [r3, #0]
   11d72:	4610      	mov	r0, r2
   11d74:	4619      	mov	r1, r3
   11d76:	f006 f931 	bl	17fdc <__aeabi_fsub>
   11d7a:	4603      	mov	r3, r0
   11d7c:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   11d7e:	e013      	b.n	11da8 <course_pid_run+0x50>
   11d80:	6878      	ldr	r0, [r7, #4]
   11d82:	f005 fda1 	bl	178c8 <__aeabi_f2d>
   11d86:	4602      	mov	r2, r0
   11d88:	460b      	mov	r3, r1
   11d8a:	4610      	mov	r0, r2
   11d8c:	4619      	mov	r1, r3
   11d8e:	a348      	add	r3, pc, #288	; (adr r3, 11eb0 <course_pid_run+0x158>)
   11d90:	e9d3 2300 	ldrd	r2, r3, [r3]
   11d94:	f005 fc38 	bl	17608 <__aeabi_dsub>
   11d98:	4602      	mov	r2, r0
   11d9a:	460b      	mov	r3, r1
   11d9c:	4610      	mov	r0, r2
   11d9e:	4619      	mov	r1, r3
   11da0:	f006 f8c8 	bl	17f34 <__aeabi_d2f>
   11da4:	4603      	mov	r3, r0
   11da6:	607b      	str	r3, [r7, #4]
   11da8:	6878      	ldr	r0, [r7, #4]
   11daa:	f005 fd8d 	bl	178c8 <__aeabi_f2d>
   11dae:	4602      	mov	r2, r0
   11db0:	460b      	mov	r3, r1
   11db2:	4610      	mov	r0, r2
   11db4:	4619      	mov	r1, r3
   11db6:	a340      	add	r3, pc, #256	; (adr r3, 11eb8 <course_pid_run+0x160>)
   11db8:	e9d3 2300 	ldrd	r2, r3, [r3]
   11dbc:	f006 f868 	bl	17e90 <__aeabi_dcmpgt>
   11dc0:	4603      	mov	r3, r0
   11dc2:	2b00      	cmp	r3, #0
   11dc4:	d1dc      	bne.n	11d80 <course_pid_run+0x28>
   11dc6:	e013      	b.n	11df0 <course_pid_run+0x98>
   11dc8:	6878      	ldr	r0, [r7, #4]
   11dca:	f005 fd7d 	bl	178c8 <__aeabi_f2d>
   11dce:	4602      	mov	r2, r0
   11dd0:	460b      	mov	r3, r1
   11dd2:	4610      	mov	r0, r2
   11dd4:	4619      	mov	r1, r3
   11dd6:	a336      	add	r3, pc, #216	; (adr r3, 11eb0 <course_pid_run+0x158>)
   11dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   11ddc:	f005 fc16 	bl	1760c <__adddf3>
   11de0:	4602      	mov	r2, r0
   11de2:	460b      	mov	r3, r1
   11de4:	4610      	mov	r0, r2
   11de6:	4619      	mov	r1, r3
   11de8:	f006 f8a4 	bl	17f34 <__aeabi_d2f>
   11dec:	4603      	mov	r3, r0
   11dee:	607b      	str	r3, [r7, #4]
   11df0:	6878      	ldr	r0, [r7, #4]
   11df2:	f005 fd69 	bl	178c8 <__aeabi_f2d>
   11df6:	4602      	mov	r2, r0
   11df8:	460b      	mov	r3, r1
   11dfa:	4610      	mov	r0, r2
   11dfc:	4619      	mov	r1, r3
   11dfe:	a330      	add	r3, pc, #192	; (adr r3, 11ec0 <course_pid_run+0x168>)
   11e00:	e9d3 2300 	ldrd	r2, r3, [r3]
   11e04:	f006 f826 	bl	17e54 <__aeabi_dcmplt>
   11e08:	4603      	mov	r3, r0
   11e0a:	2b00      	cmp	r3, #0
   11e0c:	d1dc      	bne.n	11dc8 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   11e0e:	f240 4308 	movw	r3, #1032	; 0x408
   11e12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e16:	681b      	ldr	r3, [r3, #0]
   11e18:	4618      	mov	r0, r3
   11e1a:	6879      	ldr	r1, [r7, #4]
   11e1c:	f006 f9e8 	bl	181f0 <__aeabi_fmul>
   11e20:	4603      	mov	r3, r0
   11e22:	461a      	mov	r2, r3
   11e24:	f24b 2358 	movw	r3, #45656	; 0xb258
   11e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e2c:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   11e2e:	f24b 2358 	movw	r3, #45656	; 0xb258
   11e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e36:	681a      	ldr	r2, [r3, #0]
   11e38:	f240 430c 	movw	r3, #1036	; 0x40c
   11e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e40:	681b      	ldr	r3, [r3, #0]
   11e42:	4610      	mov	r0, r2
   11e44:	4619      	mov	r1, r3
   11e46:	f006 fb8f 	bl	18568 <__aeabi_fcmpgt>
   11e4a:	4603      	mov	r3, r0
   11e4c:	2b00      	cmp	r3, #0
   11e4e:	d00a      	beq.n	11e66 <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   11e50:	f240 430c 	movw	r3, #1036	; 0x40c
   11e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e58:	681a      	ldr	r2, [r3, #0]
   11e5a:	f24b 2358 	movw	r3, #45656	; 0xb258
   11e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e62:	601a      	str	r2, [r3, #0]
   11e64:	e01e      	b.n	11ea4 <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   11e66:	f240 430c 	movw	r3, #1036	; 0x40c
   11e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e6e:	681b      	ldr	r3, [r3, #0]
   11e70:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11e74:	f24b 2358 	movw	r3, #45656	; 0xb258
   11e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e7c:	681b      	ldr	r3, [r3, #0]
   11e7e:	4610      	mov	r0, r2
   11e80:	4619      	mov	r1, r3
   11e82:	f006 fb71 	bl	18568 <__aeabi_fcmpgt>
   11e86:	4603      	mov	r3, r0
   11e88:	2b00      	cmp	r3, #0
   11e8a:	d00b      	beq.n	11ea4 <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   11e8c:	f240 430c 	movw	r3, #1036	; 0x40c
   11e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e94:	681b      	ldr	r3, [r3, #0]
   11e96:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11e9a:	f24b 2358 	movw	r3, #45656	; 0xb258
   11e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ea2:	601a      	str	r2, [r3, #0]
}
   11ea4:	3708      	adds	r7, #8
   11ea6:	46bd      	mov	sp, r7
   11ea8:	bd80      	pop	{r7, pc}
   11eaa:	bf00      	nop
   11eac:	f3af 8000 	nop.w
   11eb0:	54442d18 	.word	0x54442d18
   11eb4:	401921fb 	.word	0x401921fb
   11eb8:	54442d18 	.word	0x54442d18
   11ebc:	400921fb 	.word	0x400921fb
   11ec0:	54442d18 	.word	0x54442d18
   11ec4:	c00921fb 	.word	0xc00921fb

00011ec8 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   11ec8:	b5b0      	push	{r4, r5, r7, lr}
   11eca:	b082      	sub	sp, #8
   11ecc:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   11ece:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
   11ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ed6:	681a      	ldr	r2, [r3, #0]
   11ed8:	f24b 2318 	movw	r3, #45592	; 0xb218
   11edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ee0:	681b      	ldr	r3, [r3, #0]
   11ee2:	4610      	mov	r0, r2
   11ee4:	4619      	mov	r1, r3
   11ee6:	f006 f879 	bl	17fdc <__aeabi_fsub>
   11eea:	4603      	mov	r3, r0
   11eec:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   11eee:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   11ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ef6:	781b      	ldrb	r3, [r3, #0]
   11ef8:	2b00      	cmp	r3, #0
   11efa:	f000 80a8 	beq.w	1204e <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   11efe:	f24b 2350 	movw	r3, #45648	; 0xb250
   11f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f06:	881b      	ldrh	r3, [r3, #0]
   11f08:	b29a      	uxth	r2, r3
   11f0a:	f24b 2304 	movw	r3, #45572	; 0xb204
   11f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f12:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   11f14:	f240 4314 	movw	r3, #1044	; 0x414
   11f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f1c:	681a      	ldr	r2, [r3, #0]
   11f1e:	f24b 2324 	movw	r3, #45604	; 0xb224
   11f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f26:	681b      	ldr	r3, [r3, #0]
   11f28:	4610      	mov	r0, r2
   11f2a:	4619      	mov	r1, r3
   11f2c:	f006 f960 	bl	181f0 <__aeabi_fmul>
   11f30:	4603      	mov	r3, r0
   11f32:	4618      	mov	r0, r3
   11f34:	6879      	ldr	r1, [r7, #4]
   11f36:	f006 f853 	bl	17fe0 <__addsf3>
   11f3a:	4603      	mov	r3, r0
   11f3c:	461a      	mov	r2, r3
   11f3e:	f240 4310 	movw	r3, #1040	; 0x410
   11f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f46:	681b      	ldr	r3, [r3, #0]
   11f48:	4610      	mov	r0, r2
   11f4a:	4619      	mov	r1, r3
   11f4c:	f006 f950 	bl	181f0 <__aeabi_fmul>
   11f50:	4603      	mov	r3, r0
   11f52:	461a      	mov	r2, r3
   11f54:	f24b 2300 	movw	r3, #45568	; 0xb200
   11f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f5c:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   11f5e:	f24b 2300 	movw	r3, #45568	; 0xb200
   11f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f66:	681a      	ldr	r2, [r3, #0]
   11f68:	f240 4318 	movw	r3, #1048	; 0x418
   11f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f70:	681b      	ldr	r3, [r3, #0]
   11f72:	4610      	mov	r0, r2
   11f74:	4619      	mov	r1, r3
   11f76:	f006 faf7 	bl	18568 <__aeabi_fcmpgt>
   11f7a:	4603      	mov	r3, r0
   11f7c:	2b00      	cmp	r3, #0
   11f7e:	d009      	beq.n	11f94 <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   11f80:	f240 4318 	movw	r3, #1048	; 0x418
   11f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f88:	681a      	ldr	r2, [r3, #0]
   11f8a:	f24b 2300 	movw	r3, #45568	; 0xb200
   11f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f92:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   11f94:	f24b 2300 	movw	r3, #45568	; 0xb200
   11f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f9c:	681a      	ldr	r2, [r3, #0]
   11f9e:	f240 431c 	movw	r3, #1052	; 0x41c
   11fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fa6:	681b      	ldr	r3, [r3, #0]
   11fa8:	4610      	mov	r0, r2
   11faa:	4619      	mov	r1, r3
   11fac:	f006 fabe 	bl	1852c <__aeabi_fcmplt>
   11fb0:	4603      	mov	r3, r0
   11fb2:	2b00      	cmp	r3, #0
   11fb4:	d009      	beq.n	11fca <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   11fb6:	f240 431c 	movw	r3, #1052	; 0x41c
   11fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fbe:	681a      	ldr	r2, [r3, #0]
   11fc0:	f24b 2300 	movw	r3, #45568	; 0xb200
   11fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fc8:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   11fca:	f24b 2324 	movw	r3, #45604	; 0xb224
   11fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fd2:	681b      	ldr	r3, [r3, #0]
   11fd4:	4618      	mov	r0, r3
   11fd6:	6879      	ldr	r1, [r7, #4]
   11fd8:	f006 f802 	bl	17fe0 <__addsf3>
   11fdc:	4603      	mov	r3, r0
   11fde:	461a      	mov	r2, r3
   11fe0:	f24b 2324 	movw	r3, #45604	; 0xb224
   11fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fe8:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   11fea:	f24b 2324 	movw	r3, #45604	; 0xb224
   11fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ff2:	681b      	ldr	r3, [r3, #0]
   11ff4:	4618      	mov	r0, r3
   11ff6:	f04f 0100 	mov.w	r1, #0
   11ffa:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11ffe:	f006 fab3 	bl	18568 <__aeabi_fcmpgt>
   12002:	4603      	mov	r3, r0
   12004:	2b00      	cmp	r3, #0
   12006:	d008      	beq.n	1201a <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   12008:	f24b 2324 	movw	r3, #45604	; 0xb224
   1200c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12010:	f04f 0200 	mov.w	r2, #0
   12014:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   12018:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   1201a:	f24b 2324 	movw	r3, #45604	; 0xb224
   1201e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12022:	681b      	ldr	r3, [r3, #0]
   12024:	4618      	mov	r0, r3
   12026:	f04f 0100 	mov.w	r1, #0
   1202a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1202e:	f006 fa7d 	bl	1852c <__aeabi_fcmplt>
   12032:	4603      	mov	r3, r0
   12034:	2b00      	cmp	r3, #0
   12036:	d100      	bne.n	1203a <climb_pid_run+0x172>
   12038:	e109      	b.n	1224e <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   1203a:	f24b 2324 	movw	r3, #45604	; 0xb224
   1203e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12042:	f04f 0200 	mov.w	r2, #0
   12046:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   1204a:	601a      	str	r2, [r3, #0]
   1204c:	e0ff      	b.n	1224e <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   1204e:	f24b 2318 	movw	r3, #45592	; 0xb218
   12052:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12056:	681b      	ldr	r3, [r3, #0]
   12058:	4618      	mov	r0, r3
   1205a:	f04f 0100 	mov.w	r1, #0
   1205e:	f006 fa83 	bl	18568 <__aeabi_fcmpgt>
   12062:	4603      	mov	r3, r0
   12064:	2b00      	cmp	r3, #0
   12066:	d010      	beq.n	1208a <climb_pid_run+0x1c2>
   12068:	f24b 2318 	movw	r3, #45592	; 0xb218
   1206c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12070:	681a      	ldr	r2, [r3, #0]
   12072:	f240 4304 	movw	r3, #1028	; 0x404
   12076:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1207a:	681b      	ldr	r3, [r3, #0]
   1207c:	4610      	mov	r0, r2
   1207e:	4619      	mov	r1, r3
   12080:	f006 f8b6 	bl	181f0 <__aeabi_fmul>
   12084:	4603      	mov	r3, r0
   12086:	461a      	mov	r2, r3
   12088:	e001      	b.n	1208e <climb_pid_run+0x1c6>
   1208a:	f04f 0200 	mov.w	r2, #0
   1208e:	f24b 2310 	movw	r3, #45584	; 0xb210
   12092:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12096:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   12098:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   1209c:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   120a0:	f24b 2320 	movw	r3, #45600	; 0xb220
   120a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120a8:	681b      	ldr	r3, [r3, #0]
   120aa:	4610      	mov	r0, r2
   120ac:	4619      	mov	r1, r3
   120ae:	f006 f89f 	bl	181f0 <__aeabi_fmul>
   120b2:	4603      	mov	r3, r0
   120b4:	4618      	mov	r0, r3
   120b6:	6879      	ldr	r1, [r7, #4]
   120b8:	f005 ff92 	bl	17fe0 <__addsf3>
   120bc:	4603      	mov	r3, r0
   120be:	461a      	mov	r2, r3
   120c0:	f24c 238f 	movw	r3, #49807	; 0xc28f
   120c4:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   120c8:	4610      	mov	r0, r2
   120ca:	4619      	mov	r1, r3
   120cc:	f006 f890 	bl	181f0 <__aeabi_fmul>
   120d0:	4603      	mov	r3, r0
   120d2:	4618      	mov	r0, r3
   120d4:	f005 fbf8 	bl	178c8 <__aeabi_f2d>
   120d8:	4602      	mov	r2, r0
   120da:	460b      	mov	r3, r1
   120dc:	4610      	mov	r0, r2
   120de:	4619      	mov	r1, r3
   120e0:	a35d      	add	r3, pc, #372	; (adr r3, 12258 <climb_pid_run+0x390>)
   120e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   120e6:	f005 fa91 	bl	1760c <__adddf3>
   120ea:	4602      	mov	r2, r0
   120ec:	460b      	mov	r3, r1
   120ee:	4614      	mov	r4, r2
   120f0:	461d      	mov	r5, r3
   120f2:	f24b 2318 	movw	r3, #45592	; 0xb218
   120f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120fa:	681b      	ldr	r3, [r3, #0]
   120fc:	4618      	mov	r0, r3
   120fe:	f005 fbe3 	bl	178c8 <__aeabi_f2d>
   12102:	4602      	mov	r2, r0
   12104:	460b      	mov	r3, r1
   12106:	4610      	mov	r0, r2
   12108:	4619      	mov	r1, r3
   1210a:	a355      	add	r3, pc, #340	; (adr r3, 12260 <climb_pid_run+0x398>)
   1210c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12110:	f005 fc2e 	bl	17970 <__aeabi_dmul>
   12114:	4602      	mov	r2, r0
   12116:	460b      	mov	r3, r1
   12118:	4620      	mov	r0, r4
   1211a:	4629      	mov	r1, r5
   1211c:	f005 fa76 	bl	1760c <__adddf3>
   12120:	4602      	mov	r2, r0
   12122:	460b      	mov	r3, r1
   12124:	4610      	mov	r0, r2
   12126:	4619      	mov	r1, r3
   12128:	f005 ff04 	bl	17f34 <__aeabi_d2f>
   1212c:	4603      	mov	r3, r0
   1212e:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   12130:	f24b 2320 	movw	r3, #45600	; 0xb220
   12134:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12138:	681b      	ldr	r3, [r3, #0]
   1213a:	4618      	mov	r0, r3
   1213c:	6879      	ldr	r1, [r7, #4]
   1213e:	f005 ff4f 	bl	17fe0 <__addsf3>
   12142:	4603      	mov	r3, r0
   12144:	461a      	mov	r2, r3
   12146:	f24b 2320 	movw	r3, #45600	; 0xb220
   1214a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1214e:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   12150:	f24b 2320 	movw	r3, #45600	; 0xb220
   12154:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12158:	681b      	ldr	r3, [r3, #0]
   1215a:	4618      	mov	r0, r3
   1215c:	f04f 0100 	mov.w	r1, #0
   12160:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   12164:	f006 fa00 	bl	18568 <__aeabi_fcmpgt>
   12168:	4603      	mov	r3, r0
   1216a:	2b00      	cmp	r3, #0
   1216c:	d008      	beq.n	12180 <climb_pid_run+0x2b8>
   1216e:	f24b 2320 	movw	r3, #45600	; 0xb220
   12172:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12176:	f04f 0200 	mov.w	r2, #0
   1217a:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   1217e:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   12180:	f24b 2320 	movw	r3, #45600	; 0xb220
   12184:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12188:	681b      	ldr	r3, [r3, #0]
   1218a:	4618      	mov	r0, r3
   1218c:	f04f 0100 	mov.w	r1, #0
   12190:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   12194:	f006 f9ca 	bl	1852c <__aeabi_fcmplt>
   12198:	4603      	mov	r3, r0
   1219a:	2b00      	cmp	r3, #0
   1219c:	d008      	beq.n	121b0 <climb_pid_run+0x2e8>
   1219e:	f24b 2320 	movw	r3, #45600	; 0xb220
   121a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121a6:	f04f 0200 	mov.w	r2, #0
   121aa:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   121ae:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   121b0:	6838      	ldr	r0, [r7, #0]
   121b2:	f04f 0100 	mov.w	r1, #0
   121b6:	f2c4 6116 	movt	r1, #17942	; 0x4616
   121ba:	f006 f819 	bl	181f0 <__aeabi_fmul>
   121be:	4603      	mov	r3, r0
   121c0:	4618      	mov	r0, r3
   121c2:	f04f 0100 	mov.w	r1, #0
   121c6:	f006 f9b1 	bl	1852c <__aeabi_fcmplt>
   121ca:	4603      	mov	r3, r0
   121cc:	2b00      	cmp	r3, #0
   121ce:	d001      	beq.n	121d4 <climb_pid_run+0x30c>
   121d0:	2200      	movs	r2, #0
   121d2:	e022      	b.n	1221a <climb_pid_run+0x352>
   121d4:	6838      	ldr	r0, [r7, #0]
   121d6:	f04f 0100 	mov.w	r1, #0
   121da:	f2c4 6116 	movt	r1, #17942	; 0x4616
   121de:	f006 f807 	bl	181f0 <__aeabi_fmul>
   121e2:	4603      	mov	r3, r0
   121e4:	4618      	mov	r0, r3
   121e6:	f04f 0100 	mov.w	r1, #0
   121ea:	f2c4 6116 	movt	r1, #17942	; 0x4616
   121ee:	f006 f9bb 	bl	18568 <__aeabi_fcmpgt>
   121f2:	4603      	mov	r3, r0
   121f4:	2b00      	cmp	r3, #0
   121f6:	d002      	beq.n	121fe <climb_pid_run+0x336>
   121f8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   121fc:	e00c      	b.n	12218 <climb_pid_run+0x350>
   121fe:	6838      	ldr	r0, [r7, #0]
   12200:	f04f 0100 	mov.w	r1, #0
   12204:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12208:	f005 fff2 	bl	181f0 <__aeabi_fmul>
   1220c:	4603      	mov	r3, r0
   1220e:	4618      	mov	r0, r3
   12210:	f006 f9b4 	bl	1857c <__aeabi_f2iz>
   12214:	4603      	mov	r3, r0
   12216:	b29b      	uxth	r3, r3
   12218:	b29a      	uxth	r2, r3
   1221a:	f24b 2304 	movw	r3, #45572	; 0xb204
   1221e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12222:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   12224:	f24b 2354 	movw	r3, #45652	; 0xb254
   12228:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1222c:	681a      	ldr	r2, [r3, #0]
   1222e:	f24b 2310 	movw	r3, #45584	; 0xb210
   12232:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12236:	681b      	ldr	r3, [r3, #0]
   12238:	4610      	mov	r0, r2
   1223a:	4619      	mov	r1, r3
   1223c:	f005 fed0 	bl	17fe0 <__addsf3>
   12240:	4603      	mov	r3, r0
   12242:	461a      	mov	r2, r3
   12244:	f24b 2300 	movw	r3, #45568	; 0xb200
   12248:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1224c:	601a      	str	r2, [r3, #0]
  }
}
   1224e:	3708      	adds	r7, #8
   12250:	46bd      	mov	sp, r7
   12252:	bdb0      	pop	{r4, r5, r7, pc}
   12254:	f3af 8000 	nop.w
   12258:	3d70a3d7 	.word	0x3d70a3d7
   1225c:	3fd3d70a 	.word	0x3fd3d70a
   12260:	9999999a 	.word	0x9999999a
   12264:	3fc99999 	.word	0x3fc99999

00012268 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   12268:	b580      	push	{r7, lr}
   1226a:	b082      	sub	sp, #8
   1226c:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   1226e:	f24b 438c 	movw	r3, #46220	; 0xb48c
   12272:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12276:	681a      	ldr	r2, [r3, #0]
   12278:	f240 4324 	movw	r3, #1060	; 0x424
   1227c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12280:	681b      	ldr	r3, [r3, #0]
   12282:	4610      	mov	r0, r2
   12284:	4619      	mov	r1, r3
   12286:	f005 fea9 	bl	17fdc <__aeabi_fsub>
   1228a:	4603      	mov	r3, r0
   1228c:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   1228e:	f240 4320 	movw	r3, #1056	; 0x420
   12292:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12296:	681b      	ldr	r3, [r3, #0]
   12298:	4618      	mov	r0, r3
   1229a:	6879      	ldr	r1, [r7, #4]
   1229c:	f005 ffa8 	bl	181f0 <__aeabi_fmul>
   122a0:	4603      	mov	r3, r0
   122a2:	461a      	mov	r2, r3
   122a4:	f24b 231c 	movw	r3, #45596	; 0xb21c
   122a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122ac:	681b      	ldr	r3, [r3, #0]
   122ae:	4610      	mov	r0, r2
   122b0:	4619      	mov	r1, r3
   122b2:	f005 fe95 	bl	17fe0 <__addsf3>
   122b6:	4603      	mov	r3, r0
   122b8:	461a      	mov	r2, r3
   122ba:	f24b 2318 	movw	r3, #45592	; 0xb218
   122be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122c2:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   122c4:	f24b 2318 	movw	r3, #45592	; 0xb218
   122c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122cc:	681b      	ldr	r3, [r3, #0]
   122ce:	4618      	mov	r0, r3
   122d0:	f04f 0100 	mov.w	r1, #0
   122d4:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   122d8:	f006 f928 	bl	1852c <__aeabi_fcmplt>
   122dc:	4603      	mov	r3, r0
   122de:	2b00      	cmp	r3, #0
   122e0:	d008      	beq.n	122f4 <altitude_pid_run+0x8c>
   122e2:	f24b 2318 	movw	r3, #45592	; 0xb218
   122e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122ea:	f04f 0200 	mov.w	r2, #0
   122ee:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   122f2:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   122f4:	f24b 2318 	movw	r3, #45592	; 0xb218
   122f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122fc:	681b      	ldr	r3, [r3, #0]
   122fe:	4618      	mov	r0, r3
   12300:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   12304:	f006 f930 	bl	18568 <__aeabi_fcmpgt>
   12308:	4603      	mov	r3, r0
   1230a:	2b00      	cmp	r3, #0
   1230c:	d006      	beq.n	1231c <altitude_pid_run+0xb4>
   1230e:	f24b 2318 	movw	r3, #45592	; 0xb218
   12312:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12316:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   1231a:	601a      	str	r2, [r3, #0]
}
   1231c:	3708      	adds	r7, #8
   1231e:	46bd      	mov	sp, r7
   12320:	bd80      	pop	{r7, pc}
   12322:	bf00      	nop
   12324:	f3af 8000 	nop.w

00012328 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   12328:	b5f0      	push	{r4, r5, r6, r7, lr}
   1232a:	b08b      	sub	sp, #44	; 0x2c
   1232c:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   1232e:	f24b 2329 	movw	r3, #45609	; 0xb229
   12332:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12336:	781b      	ldrb	r3, [r3, #0]
   12338:	2b00      	cmp	r3, #0
   1233a:	f040 8169 	bne.w	12610 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   1233e:	f24b 2328 	movw	r3, #45608	; 0xb228
   12342:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12346:	781b      	ldrb	r3, [r3, #0]
   12348:	2b00      	cmp	r3, #0
   1234a:	d13c      	bne.n	123c6 <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   1234c:	f24b 2328 	movw	r3, #45608	; 0xb228
   12350:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12354:	2200      	movs	r2, #0
   12356:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   12358:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
   1235c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12360:	881b      	ldrh	r3, [r3, #0]
   12362:	2b00      	cmp	r3, #0
   12364:	d000      	beq.n	12368 <auto_nav+0x40>
   12366:	e03d      	b.n	123e4 <auto_nav+0xbc>
	else NextStage(); 
   12368:	f24b 2328 	movw	r3, #45608	; 0xb228
   1236c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12370:	781b      	ldrb	r3, [r3, #0]
   12372:	3301      	adds	r3, #1
   12374:	b2da      	uxtb	r2, r3
   12376:	f24b 2328 	movw	r3, #45608	; 0xb228
   1237a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1237e:	701a      	strb	r2, [r3, #0]
   12380:	f24b 4384 	movw	r3, #46212	; 0xb484
   12384:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12388:	681a      	ldr	r2, [r3, #0]
   1238a:	f24b 232c 	movw	r3, #45612	; 0xb22c
   1238e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12392:	601a      	str	r2, [r3, #0]
   12394:	f24b 4388 	movw	r3, #46216	; 0xb488
   12398:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1239c:	681a      	ldr	r2, [r3, #0]
   1239e:	f24b 2330 	movw	r3, #45616	; 0xb230
   123a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123a6:	601a      	str	r2, [r3, #0]
   123a8:	f24b 233c 	movw	r3, #45628	; 0xb23c
   123ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123b0:	2200      	movs	r2, #0
   123b2:	801a      	strh	r2, [r3, #0]
   123b4:	f24b 2340 	movw	r3, #45632	; 0xb240
   123b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123bc:	f04f 0200 	mov.w	r2, #0
   123c0:	601a      	str	r2, [r3, #0]
   123c2:	f002 b883 	b.w	144cc <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   123c6:	f24b 2328 	movw	r3, #45608	; 0xb228
   123ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123ce:	781b      	ldrb	r3, [r3, #0]
   123d0:	2b01      	cmp	r3, #1
   123d2:	d100      	bne.n	123d6 <auto_nav+0xae>
    {   Goto(while_1)}
   123d4:	e7ba      	b.n	1234c <auto_nav+0x24>
    else if (nav_stage == 2)
   123d6:	f24b 2328 	movw	r3, #45608	; 0xb228
   123da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123de:	781b      	ldrb	r3, [r3, #0]
   123e0:	2b02      	cmp	r3, #2
   123e2:	d162      	bne.n	124aa <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   123e4:	f24b 2328 	movw	r3, #45608	; 0xb228
   123e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123ec:	2202      	movs	r2, #2
   123ee:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   123f0:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
   123f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123f8:	881b      	ldrh	r3, [r3, #0]
   123fa:	2b08      	cmp	r3, #8
   123fc:	d92e      	bls.n	1245c <auto_nav+0x134>
   123fe:	f24b 2328 	movw	r3, #45608	; 0xb228
   12402:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12406:	781b      	ldrb	r3, [r3, #0]
   12408:	3301      	adds	r3, #1
   1240a:	b2da      	uxtb	r2, r3
   1240c:	f24b 2328 	movw	r3, #45608	; 0xb228
   12410:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12414:	701a      	strb	r2, [r3, #0]
   12416:	f24b 4384 	movw	r3, #46212	; 0xb484
   1241a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1241e:	681a      	ldr	r2, [r3, #0]
   12420:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12424:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12428:	601a      	str	r2, [r3, #0]
   1242a:	f24b 4388 	movw	r3, #46216	; 0xb488
   1242e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12432:	681a      	ldr	r2, [r3, #0]
   12434:	f24b 2330 	movw	r3, #45616	; 0xb230
   12438:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1243c:	601a      	str	r2, [r3, #0]
   1243e:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12442:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12446:	2200      	movs	r2, #0
   12448:	801a      	strh	r2, [r3, #0]
   1244a:	f24b 2340 	movw	r3, #45632	; 0xb240
   1244e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12452:	f04f 0200 	mov.w	r2, #0
   12456:	601a      	str	r2, [r3, #0]
   12458:	f002 b838 	b.w	144cc <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   1245c:	f24b 2314 	movw	r3, #45588	; 0xb214
   12460:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12464:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12468:	f2c4 0296 	movt	r2, #16534	; 0x4096
   1246c:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   1246e:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   12472:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12476:	2200      	movs	r2, #0
   12478:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   1247a:	f24b 2354 	movw	r3, #45652	; 0xb254
   1247e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12482:	f649 129a 	movw	r2, #39322	; 0x999a
   12486:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   1248a:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   1248c:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   12490:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12494:	2201      	movs	r2, #1
   12496:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   12498:	f24b 2350 	movw	r3, #45648	; 0xb250
   1249c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124a0:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   124a4:	801a      	strh	r2, [r3, #0]
        }
        return;
   124a6:	f002 b811 	b.w	144cc <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   124aa:	f24b 2328 	movw	r3, #45608	; 0xb228
   124ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124b2:	781b      	ldrb	r3, [r3, #0]
   124b4:	2b03      	cmp	r3, #3
   124b6:	d168      	bne.n	1258a <auto_nav+0x262>
     {
	nav_stage = 3;	
   124b8:	f24b 2328 	movw	r3, #45608	; 0xb228
   124bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124c0:	2203      	movs	r2, #3
   124c2:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   124c4:	f24b 438c 	movw	r3, #46220	; 0xb48c
   124c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124cc:	681b      	ldr	r3, [r3, #0]
   124ce:	4618      	mov	r0, r3
   124d0:	f04f 0100 	mov.w	r1, #0
   124d4:	f2c4 3116 	movt	r1, #17174	; 0x4316
   124d8:	f006 f846 	bl	18568 <__aeabi_fcmpgt>
   124dc:	4603      	mov	r3, r0
   124de:	2b00      	cmp	r3, #0
   124e0:	d02e      	beq.n	12540 <auto_nav+0x218>
   124e2:	f24b 2328 	movw	r3, #45608	; 0xb228
   124e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124ea:	781b      	ldrb	r3, [r3, #0]
   124ec:	3301      	adds	r3, #1
   124ee:	b2da      	uxtb	r2, r3
   124f0:	f24b 2328 	movw	r3, #45608	; 0xb228
   124f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124f8:	701a      	strb	r2, [r3, #0]
   124fa:	f24b 4384 	movw	r3, #46212	; 0xb484
   124fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12502:	681a      	ldr	r2, [r3, #0]
   12504:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12508:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1250c:	601a      	str	r2, [r3, #0]
   1250e:	f24b 4388 	movw	r3, #46216	; 0xb488
   12512:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12516:	681a      	ldr	r2, [r3, #0]
   12518:	f24b 2330 	movw	r3, #45616	; 0xb230
   1251c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12520:	601a      	str	r2, [r3, #0]
   12522:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12526:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1252a:	2200      	movs	r2, #0
   1252c:	801a      	strh	r2, [r3, #0]
   1252e:	f24b 2340 	movw	r3, #45632	; 0xb240
   12532:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12536:	f04f 0200 	mov.w	r2, #0
   1253a:	601a      	str	r2, [r3, #0]
   1253c:	f001 bfc6 	b.w	144cc <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12540:	f24b 2314 	movw	r3, #45588	; 0xb214
   12544:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12548:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   1254c:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12550:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   12552:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   12556:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1255a:	2200      	movs	r2, #0
   1255c:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   1255e:	f24b 2354 	movw	r3, #45652	; 0xb254
   12562:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12566:	f04f 0200 	mov.w	r2, #0
   1256a:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   1256c:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   12570:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12574:	2202      	movs	r2, #2
   12576:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   12578:	f24b 2318 	movw	r3, #45592	; 0xb218
   1257c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12580:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12584:	601a      	str	r2, [r3, #0]
        }
        return;
   12586:	f001 bfa1 	b.w	144cc <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   1258a:	f24b 2328 	movw	r3, #45608	; 0xb228
   1258e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12592:	781b      	ldrb	r3, [r3, #0]
   12594:	2b04      	cmp	r3, #4
   12596:	f041 8799 	bne.w	144cc <auto_nav+0x21a4>
        NextBlock()
   1259a:	f24b 2329 	movw	r3, #45609	; 0xb229
   1259e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125a2:	781b      	ldrb	r3, [r3, #0]
   125a4:	3301      	adds	r3, #1
   125a6:	b2da      	uxtb	r2, r3
   125a8:	f24b 2329 	movw	r3, #45609	; 0xb229
   125ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125b0:	701a      	strb	r2, [r3, #0]
   125b2:	f24b 2328 	movw	r3, #45608	; 0xb228
   125b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125ba:	2200      	movs	r2, #0
   125bc:	701a      	strb	r2, [r3, #0]
   125be:	f24b 233e 	movw	r3, #45630	; 0xb23e
   125c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125c6:	2200      	movs	r2, #0
   125c8:	801a      	strh	r2, [r3, #0]
   125ca:	f24b 4384 	movw	r3, #46212	; 0xb484
   125ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125d2:	681a      	ldr	r2, [r3, #0]
   125d4:	f24b 232c 	movw	r3, #45612	; 0xb22c
   125d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125dc:	601a      	str	r2, [r3, #0]
   125de:	f24b 4388 	movw	r3, #46216	; 0xb488
   125e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125e6:	681a      	ldr	r2, [r3, #0]
   125e8:	f24b 2330 	movw	r3, #45616	; 0xb230
   125ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125f0:	601a      	str	r2, [r3, #0]
   125f2:	f24b 233c 	movw	r3, #45628	; 0xb23c
   125f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125fa:	2200      	movs	r2, #0
   125fc:	801a      	strh	r2, [r3, #0]
   125fe:	f24b 2340 	movw	r3, #45632	; 0xb240
   12602:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12606:	f04f 0200 	mov.w	r2, #0
   1260a:	601a      	str	r2, [r3, #0]
   1260c:	f001 bf5e 	b.w	144cc <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   12610:	f24b 2329 	movw	r3, #45609	; 0xb229
   12614:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12618:	781b      	ldrb	r3, [r3, #0]
   1261a:	2b01      	cmp	r3, #1
   1261c:	f040 81bc 	bne.w	12998 <auto_nav+0x670>
{
    nav_block = 1;
   12620:	f24b 2329 	movw	r3, #45609	; 0xb229
   12624:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12628:	2201      	movs	r2, #1
   1262a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   1262c:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   12630:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12634:	781b      	ldrb	r3, [r3, #0]
   12636:	2b00      	cmp	r3, #0
   12638:	d007      	beq.n	1264a <auto_nav+0x322>
   1263a:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   1263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12642:	2200      	movs	r2, #0
   12644:	701a      	strb	r2, [r3, #0]
   12646:	2301      	movs	r3, #1
   12648:	e000      	b.n	1264c <auto_nav+0x324>
   1264a:	2300      	movs	r3, #0
   1264c:	2b00      	cmp	r3, #0
   1264e:	d034      	beq.n	126ba <auto_nav+0x392>
	{ GotoBlock(2) }
   12650:	f24b 2329 	movw	r3, #45609	; 0xb229
   12654:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12658:	2202      	movs	r2, #2
   1265a:	701a      	strb	r2, [r3, #0]
   1265c:	f24b 2328 	movw	r3, #45608	; 0xb228
   12660:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12664:	2200      	movs	r2, #0
   12666:	701a      	strb	r2, [r3, #0]
   12668:	f24b 233e 	movw	r3, #45630	; 0xb23e
   1266c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12670:	2200      	movs	r2, #0
   12672:	801a      	strh	r2, [r3, #0]
   12674:	f24b 4384 	movw	r3, #46212	; 0xb484
   12678:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1267c:	681a      	ldr	r2, [r3, #0]
   1267e:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12682:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12686:	601a      	str	r2, [r3, #0]
   12688:	f24b 4388 	movw	r3, #46216	; 0xb488
   1268c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12690:	681a      	ldr	r2, [r3, #0]
   12692:	f24b 2330 	movw	r3, #45616	; 0xb230
   12696:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1269a:	601a      	str	r2, [r3, #0]
   1269c:	f24b 233c 	movw	r3, #45628	; 0xb23c
   126a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126a4:	2200      	movs	r2, #0
   126a6:	801a      	strh	r2, [r3, #0]
   126a8:	f24b 2340 	movw	r3, #45632	; 0xb240
   126ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126b0:	f04f 0200 	mov.w	r2, #0
   126b4:	601a      	str	r2, [r3, #0]
   126b6:	f001 bf09 	b.w	144cc <auto_nav+0x21a4>
    if(nav_stage == 0)
   126ba:	f24b 2328 	movw	r3, #45608	; 0xb228
   126be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126c2:	781b      	ldrb	r3, [r3, #0]
   126c4:	2b00      	cmp	r3, #0
   126c6:	d12e      	bne.n	12726 <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   126c8:	f24b 2328 	movw	r3, #45608	; 0xb228
   126cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126d0:	781b      	ldrb	r3, [r3, #0]
   126d2:	3301      	adds	r3, #1
   126d4:	b2da      	uxtb	r2, r3
   126d6:	f24b 2328 	movw	r3, #45608	; 0xb228
   126da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126de:	701a      	strb	r2, [r3, #0]
   126e0:	f24b 4384 	movw	r3, #46212	; 0xb484
   126e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126e8:	681a      	ldr	r2, [r3, #0]
   126ea:	f24b 232c 	movw	r3, #45612	; 0xb22c
   126ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126f2:	601a      	str	r2, [r3, #0]
   126f4:	f24b 4388 	movw	r3, #46216	; 0xb488
   126f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126fc:	681a      	ldr	r2, [r3, #0]
   126fe:	f24b 2330 	movw	r3, #45616	; 0xb230
   12702:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12706:	601a      	str	r2, [r3, #0]
   12708:	f24b 233c 	movw	r3, #45628	; 0xb23c
   1270c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12710:	2200      	movs	r2, #0
   12712:	801a      	strh	r2, [r3, #0]
   12714:	f24b 2340 	movw	r3, #45632	; 0xb240
   12718:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1271c:	f04f 0200 	mov.w	r2, #0
   12720:	601a      	str	r2, [r3, #0]
   12722:	f001 bed3 	b.w	144cc <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   12726:	f24b 2328 	movw	r3, #45608	; 0xb228
   1272a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1272e:	781b      	ldrb	r3, [r3, #0]
   12730:	2b01      	cmp	r3, #1
   12732:	d169      	bne.n	12808 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   12734:	f24b 2328 	movw	r3, #45608	; 0xb228
   12738:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1273c:	2201      	movs	r2, #1
   1273e:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   12740:	2001      	movs	r0, #1
   12742:	f001 fed1 	bl	144e8 <approaching>
   12746:	4603      	mov	r3, r0
   12748:	2b00      	cmp	r3, #0
   1274a:	d034      	beq.n	127b6 <auto_nav+0x48e>
   1274c:	f24b 2334 	movw	r3, #45620	; 0xb234
   12750:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12754:	2201      	movs	r2, #1
   12756:	701a      	strb	r2, [r3, #0]
   12758:	f24b 2328 	movw	r3, #45608	; 0xb228
   1275c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12760:	781b      	ldrb	r3, [r3, #0]
   12762:	3301      	adds	r3, #1
   12764:	b2da      	uxtb	r2, r3
   12766:	f24b 2328 	movw	r3, #45608	; 0xb228
   1276a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1276e:	701a      	strb	r2, [r3, #0]
   12770:	f24b 4384 	movw	r3, #46212	; 0xb484
   12774:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12778:	681a      	ldr	r2, [r3, #0]
   1277a:	f24b 232c 	movw	r3, #45612	; 0xb22c
   1277e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12782:	601a      	str	r2, [r3, #0]
   12784:	f24b 4388 	movw	r3, #46216	; 0xb488
   12788:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1278c:	681a      	ldr	r2, [r3, #0]
   1278e:	f24b 2330 	movw	r3, #45616	; 0xb230
   12792:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12796:	601a      	str	r2, [r3, #0]
   12798:	f24b 233c 	movw	r3, #45628	; 0xb23c
   1279c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127a0:	2200      	movs	r2, #0
   127a2:	801a      	strh	r2, [r3, #0]
   127a4:	f24b 2340 	movw	r3, #45632	; 0xb240
   127a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127ac:	f04f 0200 	mov.w	r2, #0
   127b0:	601a      	str	r2, [r3, #0]
   127b2:	f001 be8b 	b.w	144cc <auto_nav+0x21a4>
            fly_to(1);
   127b6:	2001      	movs	r0, #1
   127b8:	f001 ffca 	bl	14750 <fly_to>
            auto_pitch = FALSE;
   127bc:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   127c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127c4:	2200      	movs	r2, #0
   127c6:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   127c8:	f24b 2354 	movw	r3, #45652	; 0xb254
   127cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127d0:	f04f 0200 	mov.w	r2, #0
   127d4:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   127d6:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   127da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127de:	2203      	movs	r2, #3
   127e0:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   127e2:	f240 4328 	movw	r3, #1064	; 0x428
   127e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127ea:	695a      	ldr	r2, [r3, #20]
   127ec:	f240 4324 	movw	r3, #1060	; 0x424
   127f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127f4:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   127f6:	f24b 231c 	movw	r3, #45596	; 0xb21c
   127fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127fe:	f04f 0200 	mov.w	r2, #0
   12802:	601a      	str	r2, [r3, #0]
          }
          return;
   12804:	f001 be62 	b.w	144cc <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12808:	f24b 2328 	movw	r3, #45608	; 0xb228
   1280c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12810:	781b      	ldrb	r3, [r3, #0]
   12812:	2b02      	cmp	r3, #2
   12814:	d169      	bne.n	128ea <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   12816:	f24b 2328 	movw	r3, #45608	; 0xb228
   1281a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1281e:	2202      	movs	r2, #2
   12820:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12822:	2004      	movs	r0, #4
   12824:	f001 fe60 	bl	144e8 <approaching>
   12828:	4603      	mov	r3, r0
   1282a:	2b00      	cmp	r3, #0
   1282c:	d034      	beq.n	12898 <auto_nav+0x570>
   1282e:	f24b 2334 	movw	r3, #45620	; 0xb234
   12832:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12836:	2204      	movs	r2, #4
   12838:	701a      	strb	r2, [r3, #0]
   1283a:	f24b 2328 	movw	r3, #45608	; 0xb228
   1283e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12842:	781b      	ldrb	r3, [r3, #0]
   12844:	3301      	adds	r3, #1
   12846:	b2da      	uxtb	r2, r3
   12848:	f24b 2328 	movw	r3, #45608	; 0xb228
   1284c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12850:	701a      	strb	r2, [r3, #0]
   12852:	f24b 4384 	movw	r3, #46212	; 0xb484
   12856:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1285a:	681a      	ldr	r2, [r3, #0]
   1285c:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12860:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12864:	601a      	str	r2, [r3, #0]
   12866:	f24b 4388 	movw	r3, #46216	; 0xb488
   1286a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1286e:	681a      	ldr	r2, [r3, #0]
   12870:	f24b 2330 	movw	r3, #45616	; 0xb230
   12874:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12878:	601a      	str	r2, [r3, #0]
   1287a:	f24b 233c 	movw	r3, #45628	; 0xb23c
   1287e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12882:	2200      	movs	r2, #0
   12884:	801a      	strh	r2, [r3, #0]
   12886:	f24b 2340 	movw	r3, #45632	; 0xb240
   1288a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1288e:	f04f 0200 	mov.w	r2, #0
   12892:	601a      	str	r2, [r3, #0]
   12894:	f001 be1a 	b.w	144cc <auto_nav+0x21a4>
            fly_to(4);
   12898:	2004      	movs	r0, #4
   1289a:	f001 ff59 	bl	14750 <fly_to>
            auto_pitch = FALSE;
   1289e:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   128a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128a6:	2200      	movs	r2, #0
   128a8:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   128aa:	f24b 2354 	movw	r3, #45652	; 0xb254
   128ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128b2:	f04f 0200 	mov.w	r2, #0
   128b6:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   128b8:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   128bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128c0:	2203      	movs	r2, #3
   128c2:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   128c4:	f240 4328 	movw	r3, #1064	; 0x428
   128c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   128ce:	f240 4324 	movw	r3, #1060	; 0x424
   128d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128d6:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   128d8:	f24b 231c 	movw	r3, #45596	; 0xb21c
   128dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128e0:	f04f 0200 	mov.w	r2, #0
   128e4:	601a      	str	r2, [r3, #0]
          }
          return;
   128e6:	f001 bdf1 	b.w	144cc <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   128ea:	f24b 2328 	movw	r3, #45608	; 0xb228
   128ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128f2:	781b      	ldrb	r3, [r3, #0]
   128f4:	2b03      	cmp	r3, #3
   128f6:	d106      	bne.n	12906 <auto_nav+0x5de>
      {
	  nav_stage = 3;
   128f8:	f24b 2328 	movw	r3, #45608	; 0xb228
   128fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12900:	2203      	movs	r2, #3
   12902:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   12904:	e6e0      	b.n	126c8 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   12906:	f24b 2328 	movw	r3, #45608	; 0xb228
   1290a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1290e:	781b      	ldrb	r3, [r3, #0]
   12910:	2b04      	cmp	r3, #4
   12912:	f041 85db 	bne.w	144cc <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   12916:	f24b 2328 	movw	r3, #45608	; 0xb228
   1291a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1291e:	2204      	movs	r2, #4
   12920:	701a      	strb	r2, [r3, #0]
        NextBlock()
   12922:	f24b 2329 	movw	r3, #45609	; 0xb229
   12926:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1292a:	781b      	ldrb	r3, [r3, #0]
   1292c:	3301      	adds	r3, #1
   1292e:	b2da      	uxtb	r2, r3
   12930:	f24b 2329 	movw	r3, #45609	; 0xb229
   12934:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12938:	701a      	strb	r2, [r3, #0]
   1293a:	f24b 2328 	movw	r3, #45608	; 0xb228
   1293e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12942:	2200      	movs	r2, #0
   12944:	701a      	strb	r2, [r3, #0]
   12946:	f24b 233e 	movw	r3, #45630	; 0xb23e
   1294a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1294e:	2200      	movs	r2, #0
   12950:	801a      	strh	r2, [r3, #0]
   12952:	f24b 4384 	movw	r3, #46212	; 0xb484
   12956:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1295a:	681a      	ldr	r2, [r3, #0]
   1295c:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12960:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12964:	601a      	str	r2, [r3, #0]
   12966:	f24b 4388 	movw	r3, #46216	; 0xb488
   1296a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1296e:	681a      	ldr	r2, [r3, #0]
   12970:	f24b 2330 	movw	r3, #45616	; 0xb230
   12974:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12978:	601a      	str	r2, [r3, #0]
   1297a:	f24b 233c 	movw	r3, #45628	; 0xb23c
   1297e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12982:	2200      	movs	r2, #0
   12984:	801a      	strh	r2, [r3, #0]
   12986:	f24b 2340 	movw	r3, #45632	; 0xb240
   1298a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1298e:	f04f 0200 	mov.w	r2, #0
   12992:	601a      	str	r2, [r3, #0]
   12994:	f001 bd9a 	b.w	144cc <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   12998:	f24b 2329 	movw	r3, #45609	; 0xb229
   1299c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129a0:	781b      	ldrb	r3, [r3, #0]
   129a2:	2b02      	cmp	r3, #2
   129a4:	f040 8392 	bne.w	130cc <auto_nav+0xda4>
{
	nav_block = 2;
   129a8:	f24b 2329 	movw	r3, #45609	; 0xb229
   129ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129b0:	2202      	movs	r2, #2
   129b2:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   129b4:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   129b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129bc:	781b      	ldrb	r3, [r3, #0]
   129be:	2b00      	cmp	r3, #0
   129c0:	d007      	beq.n	129d2 <auto_nav+0x6aa>
   129c2:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   129c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129ca:	2200      	movs	r2, #0
   129cc:	701a      	strb	r2, [r3, #0]
   129ce:	2301      	movs	r3, #1
   129d0:	e000      	b.n	129d4 <auto_nav+0x6ac>
   129d2:	2300      	movs	r3, #0
   129d4:	2b00      	cmp	r3, #0
   129d6:	d034      	beq.n	12a42 <auto_nav+0x71a>
   129d8:	f24b 2329 	movw	r3, #45609	; 0xb229
   129dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129e0:	2203      	movs	r2, #3
   129e2:	701a      	strb	r2, [r3, #0]
   129e4:	f24b 2328 	movw	r3, #45608	; 0xb228
   129e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129ec:	2200      	movs	r2, #0
   129ee:	701a      	strb	r2, [r3, #0]
   129f0:	f24b 233e 	movw	r3, #45630	; 0xb23e
   129f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129f8:	2200      	movs	r2, #0
   129fa:	801a      	strh	r2, [r3, #0]
   129fc:	f24b 4384 	movw	r3, #46212	; 0xb484
   12a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a04:	681a      	ldr	r2, [r3, #0]
   12a06:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12a0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a0e:	601a      	str	r2, [r3, #0]
   12a10:	f24b 4388 	movw	r3, #46216	; 0xb488
   12a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a18:	681a      	ldr	r2, [r3, #0]
   12a1a:	f24b 2330 	movw	r3, #45616	; 0xb230
   12a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a22:	601a      	str	r2, [r3, #0]
   12a24:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a2c:	2200      	movs	r2, #0
   12a2e:	801a      	strh	r2, [r3, #0]
   12a30:	f24b 2340 	movw	r3, #45632	; 0xb240
   12a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a38:	f04f 0200 	mov.w	r2, #0
   12a3c:	601a      	str	r2, [r3, #0]
   12a3e:	f001 bd45 	b.w	144cc <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   12a42:	f24b 2328 	movw	r3, #45608	; 0xb228
   12a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a4a:	781b      	ldrb	r3, [r3, #0]
   12a4c:	2b00      	cmp	r3, #0
   12a4e:	d134      	bne.n	12aba <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   12a50:	f24b 2328 	movw	r3, #45608	; 0xb228
   12a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a58:	2200      	movs	r2, #0
   12a5a:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   12a5c:	f24b 2328 	movw	r3, #45608	; 0xb228
   12a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a64:	781b      	ldrb	r3, [r3, #0]
   12a66:	3301      	adds	r3, #1
   12a68:	b2da      	uxtb	r2, r3
   12a6a:	f24b 2328 	movw	r3, #45608	; 0xb228
   12a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a72:	701a      	strb	r2, [r3, #0]
   12a74:	f24b 4384 	movw	r3, #46212	; 0xb484
   12a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a7c:	681a      	ldr	r2, [r3, #0]
   12a7e:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a86:	601a      	str	r2, [r3, #0]
   12a88:	f24b 4388 	movw	r3, #46216	; 0xb488
   12a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a90:	681a      	ldr	r2, [r3, #0]
   12a92:	f24b 2330 	movw	r3, #45616	; 0xb230
   12a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a9a:	601a      	str	r2, [r3, #0]
   12a9c:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12aa4:	2200      	movs	r2, #0
   12aa6:	801a      	strh	r2, [r3, #0]
   12aa8:	f24b 2340 	movw	r3, #45632	; 0xb240
   12aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ab0:	f04f 0200 	mov.w	r2, #0
   12ab4:	601a      	str	r2, [r3, #0]
   12ab6:	f001 bd09 	b.w	144cc <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   12aba:	f24b 2328 	movw	r3, #45608	; 0xb228
   12abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ac2:	781b      	ldrb	r3, [r3, #0]
   12ac4:	2b01      	cmp	r3, #1
   12ac6:	d169      	bne.n	12b9c <auto_nav+0x874>
    {
         nav_stage =1;
   12ac8:	f24b 2328 	movw	r3, #45608	; 0xb228
   12acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ad0:	2201      	movs	r2, #1
   12ad2:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   12ad4:	2006      	movs	r0, #6
   12ad6:	f001 fd07 	bl	144e8 <approaching>
   12ada:	4603      	mov	r3, r0
   12adc:	2b00      	cmp	r3, #0
   12ade:	d034      	beq.n	12b4a <auto_nav+0x822>
   12ae0:	f24b 2334 	movw	r3, #45620	; 0xb234
   12ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ae8:	2206      	movs	r2, #6
   12aea:	701a      	strb	r2, [r3, #0]
   12aec:	f24b 2328 	movw	r3, #45608	; 0xb228
   12af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12af4:	781b      	ldrb	r3, [r3, #0]
   12af6:	3301      	adds	r3, #1
   12af8:	b2da      	uxtb	r2, r3
   12afa:	f24b 2328 	movw	r3, #45608	; 0xb228
   12afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b02:	701a      	strb	r2, [r3, #0]
   12b04:	f24b 4384 	movw	r3, #46212	; 0xb484
   12b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b0c:	681a      	ldr	r2, [r3, #0]
   12b0e:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b16:	601a      	str	r2, [r3, #0]
   12b18:	f24b 4388 	movw	r3, #46216	; 0xb488
   12b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b20:	681a      	ldr	r2, [r3, #0]
   12b22:	f24b 2330 	movw	r3, #45616	; 0xb230
   12b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b2a:	601a      	str	r2, [r3, #0]
   12b2c:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b34:	2200      	movs	r2, #0
   12b36:	801a      	strh	r2, [r3, #0]
   12b38:	f24b 2340 	movw	r3, #45632	; 0xb240
   12b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b40:	f04f 0200 	mov.w	r2, #0
   12b44:	601a      	str	r2, [r3, #0]
   12b46:	f001 bcc1 	b.w	144cc <auto_nav+0x21a4>
            fly_to(6);
   12b4a:	2006      	movs	r0, #6
   12b4c:	f001 fe00 	bl	14750 <fly_to>
            auto_pitch = FALSE;
   12b50:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   12b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b58:	2200      	movs	r2, #0
   12b5a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12b5c:	f24b 2354 	movw	r3, #45652	; 0xb254
   12b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b64:	f04f 0200 	mov.w	r2, #0
   12b68:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12b6a:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   12b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b72:	2203      	movs	r2, #3
   12b74:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   12b76:	f240 4328 	movw	r3, #1064	; 0x428
   12b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   12b80:	f240 4324 	movw	r3, #1060	; 0x424
   12b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b88:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12b8a:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b92:	f04f 0200 	mov.w	r2, #0
   12b96:	601a      	str	r2, [r3, #0]
          }
          return;
   12b98:	f001 bc98 	b.w	144cc <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12b9c:	f24b 2328 	movw	r3, #45608	; 0xb228
   12ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ba4:	781b      	ldrb	r3, [r3, #0]
   12ba6:	2b02      	cmp	r3, #2
   12ba8:	d169      	bne.n	12c7e <auto_nav+0x956>
     {
         nav_stage =2; 
   12baa:	f24b 2328 	movw	r3, #45608	; 0xb228
   12bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bb2:	2202      	movs	r2, #2
   12bb4:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   12bb6:	2001      	movs	r0, #1
   12bb8:	f001 fc96 	bl	144e8 <approaching>
   12bbc:	4603      	mov	r3, r0
   12bbe:	2b00      	cmp	r3, #0
   12bc0:	d034      	beq.n	12c2c <auto_nav+0x904>
   12bc2:	f24b 2334 	movw	r3, #45620	; 0xb234
   12bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bca:	2201      	movs	r2, #1
   12bcc:	701a      	strb	r2, [r3, #0]
   12bce:	f24b 2328 	movw	r3, #45608	; 0xb228
   12bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bd6:	781b      	ldrb	r3, [r3, #0]
   12bd8:	3301      	adds	r3, #1
   12bda:	b2da      	uxtb	r2, r3
   12bdc:	f24b 2328 	movw	r3, #45608	; 0xb228
   12be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12be4:	701a      	strb	r2, [r3, #0]
   12be6:	f24b 4384 	movw	r3, #46212	; 0xb484
   12bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bee:	681a      	ldr	r2, [r3, #0]
   12bf0:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bf8:	601a      	str	r2, [r3, #0]
   12bfa:	f24b 4388 	movw	r3, #46216	; 0xb488
   12bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c02:	681a      	ldr	r2, [r3, #0]
   12c04:	f24b 2330 	movw	r3, #45616	; 0xb230
   12c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c0c:	601a      	str	r2, [r3, #0]
   12c0e:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c16:	2200      	movs	r2, #0
   12c18:	801a      	strh	r2, [r3, #0]
   12c1a:	f24b 2340 	movw	r3, #45632	; 0xb240
   12c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c22:	f04f 0200 	mov.w	r2, #0
   12c26:	601a      	str	r2, [r3, #0]
   12c28:	f001 bc50 	b.w	144cc <auto_nav+0x21a4>
            fly_to(1);
   12c2c:	2001      	movs	r0, #1
   12c2e:	f001 fd8f 	bl	14750 <fly_to>
            auto_pitch = FALSE;
   12c32:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   12c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c3a:	2200      	movs	r2, #0
   12c3c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12c3e:	f24b 2354 	movw	r3, #45652	; 0xb254
   12c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c46:	f04f 0200 	mov.w	r2, #0
   12c4a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12c4c:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   12c50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c54:	2203      	movs	r2, #3
   12c56:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12c58:	f240 4328 	movw	r3, #1064	; 0x428
   12c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c60:	695a      	ldr	r2, [r3, #20]
   12c62:	f240 4324 	movw	r3, #1060	; 0x424
   12c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c6a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12c6c:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c74:	f04f 0200 	mov.w	r2, #0
   12c78:	601a      	str	r2, [r3, #0]
          }
          return;
   12c7a:	f001 bc27 	b.w	144cc <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12c7e:	f24b 2328 	movw	r3, #45608	; 0xb228
   12c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c86:	781b      	ldrb	r3, [r3, #0]
   12c88:	2b03      	cmp	r3, #3
   12c8a:	d16f      	bne.n	12d6c <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   12c8c:	f24b 2328 	movw	r3, #45608	; 0xb228
   12c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c94:	2203      	movs	r2, #3
   12c96:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   12c98:	2002      	movs	r0, #2
   12c9a:	f001 fc25 	bl	144e8 <approaching>
   12c9e:	4603      	mov	r3, r0
   12ca0:	2b00      	cmp	r3, #0
   12ca2:	d034      	beq.n	12d0e <auto_nav+0x9e6>
   12ca4:	f24b 2334 	movw	r3, #45620	; 0xb234
   12ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cac:	2202      	movs	r2, #2
   12cae:	701a      	strb	r2, [r3, #0]
   12cb0:	f24b 2328 	movw	r3, #45608	; 0xb228
   12cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cb8:	781b      	ldrb	r3, [r3, #0]
   12cba:	3301      	adds	r3, #1
   12cbc:	b2da      	uxtb	r2, r3
   12cbe:	f24b 2328 	movw	r3, #45608	; 0xb228
   12cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cc6:	701a      	strb	r2, [r3, #0]
   12cc8:	f24b 4384 	movw	r3, #46212	; 0xb484
   12ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cd0:	681a      	ldr	r2, [r3, #0]
   12cd2:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12cd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cda:	601a      	str	r2, [r3, #0]
   12cdc:	f24b 4388 	movw	r3, #46216	; 0xb488
   12ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ce4:	681a      	ldr	r2, [r3, #0]
   12ce6:	f24b 2330 	movw	r3, #45616	; 0xb230
   12cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cee:	601a      	str	r2, [r3, #0]
   12cf0:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cf8:	2200      	movs	r2, #0
   12cfa:	801a      	strh	r2, [r3, #0]
   12cfc:	f24b 2340 	movw	r3, #45632	; 0xb240
   12d00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d04:	f04f 0200 	mov.w	r2, #0
   12d08:	601a      	str	r2, [r3, #0]
   12d0a:	f001 bbdf 	b.w	144cc <auto_nav+0x21a4>
            route_to(last_wp, 2);
   12d0e:	f24b 2334 	movw	r3, #45620	; 0xb234
   12d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d16:	781b      	ldrb	r3, [r3, #0]
   12d18:	4618      	mov	r0, r3
   12d1a:	2102      	movs	r1, #2
   12d1c:	f001 fd3a 	bl	14794 <route_to>
            auto_pitch = FALSE;
   12d20:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   12d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d28:	2200      	movs	r2, #0
   12d2a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12d2c:	f24b 2354 	movw	r3, #45652	; 0xb254
   12d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d34:	f04f 0200 	mov.w	r2, #0
   12d38:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12d3a:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   12d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d42:	2203      	movs	r2, #3
   12d44:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   12d46:	f240 4328 	movw	r3, #1064	; 0x428
   12d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d4e:	6a1a      	ldr	r2, [r3, #32]
   12d50:	f240 4324 	movw	r3, #1060	; 0x424
   12d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d58:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12d5a:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d62:	f04f 0200 	mov.w	r2, #0
   12d66:	601a      	str	r2, [r3, #0]
          }
          return;
   12d68:	f001 bbb0 	b.w	144cc <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   12d6c:	f24b 2328 	movw	r3, #45608	; 0xb228
   12d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d74:	781b      	ldrb	r3, [r3, #0]
   12d76:	2b04      	cmp	r3, #4
   12d78:	d169      	bne.n	12e4e <auto_nav+0xb26>
       {
          nav_stage = 4;
   12d7a:	f24b 2328 	movw	r3, #45608	; 0xb228
   12d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d82:	2204      	movs	r2, #4
   12d84:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   12d86:	2003      	movs	r0, #3
   12d88:	f001 fbae 	bl	144e8 <approaching>
   12d8c:	4603      	mov	r3, r0
   12d8e:	2b00      	cmp	r3, #0
   12d90:	d034      	beq.n	12dfc <auto_nav+0xad4>
   12d92:	f24b 2334 	movw	r3, #45620	; 0xb234
   12d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d9a:	2203      	movs	r2, #3
   12d9c:	701a      	strb	r2, [r3, #0]
   12d9e:	f24b 2328 	movw	r3, #45608	; 0xb228
   12da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12da6:	781b      	ldrb	r3, [r3, #0]
   12da8:	3301      	adds	r3, #1
   12daa:	b2da      	uxtb	r2, r3
   12dac:	f24b 2328 	movw	r3, #45608	; 0xb228
   12db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12db4:	701a      	strb	r2, [r3, #0]
   12db6:	f24b 4384 	movw	r3, #46212	; 0xb484
   12dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dbe:	681a      	ldr	r2, [r3, #0]
   12dc0:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dc8:	601a      	str	r2, [r3, #0]
   12dca:	f24b 4388 	movw	r3, #46216	; 0xb488
   12dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dd2:	681a      	ldr	r2, [r3, #0]
   12dd4:	f24b 2330 	movw	r3, #45616	; 0xb230
   12dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ddc:	601a      	str	r2, [r3, #0]
   12dde:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12de2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12de6:	2200      	movs	r2, #0
   12de8:	801a      	strh	r2, [r3, #0]
   12dea:	f24b 2340 	movw	r3, #45632	; 0xb240
   12dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12df2:	f04f 0200 	mov.w	r2, #0
   12df6:	601a      	str	r2, [r3, #0]
   12df8:	f001 bb68 	b.w	144cc <auto_nav+0x21a4>
            fly_to(3);
   12dfc:	2003      	movs	r0, #3
   12dfe:	f001 fca7 	bl	14750 <fly_to>
            auto_pitch = FALSE;
   12e02:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   12e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e0a:	2200      	movs	r2, #0
   12e0c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12e0e:	f24b 2354 	movw	r3, #45652	; 0xb254
   12e12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e16:	f04f 0200 	mov.w	r2, #0
   12e1a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12e1c:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   12e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e24:	2203      	movs	r2, #3
   12e26:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   12e28:	f240 4328 	movw	r3, #1064	; 0x428
   12e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12e32:	f240 4324 	movw	r3, #1060	; 0x424
   12e36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e3a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12e3c:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e44:	f04f 0200 	mov.w	r2, #0
   12e48:	601a      	str	r2, [r3, #0]
          }
          return;
   12e4a:	f001 bb3f 	b.w	144cc <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   12e4e:	f24b 2328 	movw	r3, #45608	; 0xb228
   12e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e56:	781b      	ldrb	r3, [r3, #0]
   12e58:	2b05      	cmp	r3, #5
   12e5a:	d169      	bne.n	12f30 <auto_nav+0xc08>
       {
          nav_stage =5;
   12e5c:	f24b 2328 	movw	r3, #45608	; 0xb228
   12e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e64:	2205      	movs	r2, #5
   12e66:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12e68:	2004      	movs	r0, #4
   12e6a:	f001 fb3d 	bl	144e8 <approaching>
   12e6e:	4603      	mov	r3, r0
   12e70:	2b00      	cmp	r3, #0
   12e72:	d034      	beq.n	12ede <auto_nav+0xbb6>
   12e74:	f24b 2334 	movw	r3, #45620	; 0xb234
   12e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e7c:	2204      	movs	r2, #4
   12e7e:	701a      	strb	r2, [r3, #0]
   12e80:	f24b 2328 	movw	r3, #45608	; 0xb228
   12e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e88:	781b      	ldrb	r3, [r3, #0]
   12e8a:	3301      	adds	r3, #1
   12e8c:	b2da      	uxtb	r2, r3
   12e8e:	f24b 2328 	movw	r3, #45608	; 0xb228
   12e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e96:	701a      	strb	r2, [r3, #0]
   12e98:	f24b 4384 	movw	r3, #46212	; 0xb484
   12e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ea0:	681a      	ldr	r2, [r3, #0]
   12ea2:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12eaa:	601a      	str	r2, [r3, #0]
   12eac:	f24b 4388 	movw	r3, #46216	; 0xb488
   12eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12eb4:	681a      	ldr	r2, [r3, #0]
   12eb6:	f24b 2330 	movw	r3, #45616	; 0xb230
   12eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ebe:	601a      	str	r2, [r3, #0]
   12ec0:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ec8:	2200      	movs	r2, #0
   12eca:	801a      	strh	r2, [r3, #0]
   12ecc:	f24b 2340 	movw	r3, #45632	; 0xb240
   12ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ed4:	f04f 0200 	mov.w	r2, #0
   12ed8:	601a      	str	r2, [r3, #0]
   12eda:	f001 baf7 	b.w	144cc <auto_nav+0x21a4>
            fly_to(4);
   12ede:	2004      	movs	r0, #4
   12ee0:	f001 fc36 	bl	14750 <fly_to>
            auto_pitch = FALSE;
   12ee4:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   12ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12eec:	2200      	movs	r2, #0
   12eee:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12ef0:	f24b 2354 	movw	r3, #45652	; 0xb254
   12ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ef8:	f04f 0200 	mov.w	r2, #0
   12efc:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12efe:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   12f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f06:	2203      	movs	r2, #3
   12f08:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12f0a:	f240 4328 	movw	r3, #1064	; 0x428
   12f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12f14:	f240 4324 	movw	r3, #1060	; 0x424
   12f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f1c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12f1e:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f26:	f04f 0200 	mov.w	r2, #0
   12f2a:	601a      	str	r2, [r3, #0]
          }
          return;
   12f2c:	f001 bace 	b.w	144cc <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   12f30:	f24b 2328 	movw	r3, #45608	; 0xb228
   12f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f38:	781b      	ldrb	r3, [r3, #0]
   12f3a:	2b06      	cmp	r3, #6
   12f3c:	d16f      	bne.n	1301e <auto_nav+0xcf6>
       {
          nav_stage =6;
   12f3e:	f24b 2328 	movw	r3, #45608	; 0xb228
   12f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f46:	2206      	movs	r2, #6
   12f48:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   12f4a:	2005      	movs	r0, #5
   12f4c:	f001 facc 	bl	144e8 <approaching>
   12f50:	4603      	mov	r3, r0
   12f52:	2b00      	cmp	r3, #0
   12f54:	d034      	beq.n	12fc0 <auto_nav+0xc98>
   12f56:	f24b 2334 	movw	r3, #45620	; 0xb234
   12f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f5e:	2205      	movs	r2, #5
   12f60:	701a      	strb	r2, [r3, #0]
   12f62:	f24b 2328 	movw	r3, #45608	; 0xb228
   12f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f6a:	781b      	ldrb	r3, [r3, #0]
   12f6c:	3301      	adds	r3, #1
   12f6e:	b2da      	uxtb	r2, r3
   12f70:	f24b 2328 	movw	r3, #45608	; 0xb228
   12f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f78:	701a      	strb	r2, [r3, #0]
   12f7a:	f24b 4384 	movw	r3, #46212	; 0xb484
   12f7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f82:	681a      	ldr	r2, [r3, #0]
   12f84:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12f88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f8c:	601a      	str	r2, [r3, #0]
   12f8e:	f24b 4388 	movw	r3, #46216	; 0xb488
   12f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f96:	681a      	ldr	r2, [r3, #0]
   12f98:	f24b 2330 	movw	r3, #45616	; 0xb230
   12f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fa0:	601a      	str	r2, [r3, #0]
   12fa2:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12faa:	2200      	movs	r2, #0
   12fac:	801a      	strh	r2, [r3, #0]
   12fae:	f24b 2340 	movw	r3, #45632	; 0xb240
   12fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fb6:	f04f 0200 	mov.w	r2, #0
   12fba:	601a      	str	r2, [r3, #0]
   12fbc:	f001 ba86 	b.w	144cc <auto_nav+0x21a4>
            route_to(last_wp, 5);
   12fc0:	f24b 2334 	movw	r3, #45620	; 0xb234
   12fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fc8:	781b      	ldrb	r3, [r3, #0]
   12fca:	4618      	mov	r0, r3
   12fcc:	2105      	movs	r1, #5
   12fce:	f001 fbe1 	bl	14794 <route_to>
            auto_pitch = FALSE;
   12fd2:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   12fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fda:	2200      	movs	r2, #0
   12fdc:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12fde:	f24b 2354 	movw	r3, #45652	; 0xb254
   12fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fe6:	f04f 0200 	mov.w	r2, #0
   12fea:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12fec:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   12ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ff4:	2203      	movs	r2, #3
   12ff6:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   12ff8:	f240 4328 	movw	r3, #1064	; 0x428
   12ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   13002:	f240 4324 	movw	r3, #1060	; 0x424
   13006:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1300a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1300c:	f24b 231c 	movw	r3, #45596	; 0xb21c
   13010:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13014:	f04f 0200 	mov.w	r2, #0
   13018:	601a      	str	r2, [r3, #0]
          }
          return;
   1301a:	f001 ba57 	b.w	144cc <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   1301e:	f24b 2328 	movw	r3, #45608	; 0xb228
   13022:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13026:	781b      	ldrb	r3, [r3, #0]
   13028:	2b07      	cmp	r3, #7
   1302a:	d106      	bne.n	1303a <auto_nav+0xd12>
       {
	   nav_stage =7;
   1302c:	f24b 2328 	movw	r3, #45608	; 0xb228
   13030:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13034:	2207      	movs	r2, #7
   13036:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   13038:	e50a      	b.n	12a50 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   1303a:	f24b 2328 	movw	r3, #45608	; 0xb228
   1303e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13042:	781b      	ldrb	r3, [r3, #0]
   13044:	2b08      	cmp	r3, #8
   13046:	f041 8241 	bne.w	144cc <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   1304a:	f24b 2328 	movw	r3, #45608	; 0xb228
   1304e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13052:	2208      	movs	r2, #8
   13054:	701a      	strb	r2, [r3, #0]
          NextBlock();
   13056:	f24b 2329 	movw	r3, #45609	; 0xb229
   1305a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1305e:	781b      	ldrb	r3, [r3, #0]
   13060:	3301      	adds	r3, #1
   13062:	b2da      	uxtb	r2, r3
   13064:	f24b 2329 	movw	r3, #45609	; 0xb229
   13068:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1306c:	701a      	strb	r2, [r3, #0]
   1306e:	f24b 2328 	movw	r3, #45608	; 0xb228
   13072:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13076:	2200      	movs	r2, #0
   13078:	701a      	strb	r2, [r3, #0]
   1307a:	f24b 233e 	movw	r3, #45630	; 0xb23e
   1307e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13082:	2200      	movs	r2, #0
   13084:	801a      	strh	r2, [r3, #0]
   13086:	f24b 4384 	movw	r3, #46212	; 0xb484
   1308a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1308e:	681a      	ldr	r2, [r3, #0]
   13090:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13094:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13098:	601a      	str	r2, [r3, #0]
   1309a:	f24b 4388 	movw	r3, #46216	; 0xb488
   1309e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130a2:	681a      	ldr	r2, [r3, #0]
   130a4:	f24b 2330 	movw	r3, #45616	; 0xb230
   130a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130ac:	601a      	str	r2, [r3, #0]
   130ae:	f24b 233c 	movw	r3, #45628	; 0xb23c
   130b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130b6:	2200      	movs	r2, #0
   130b8:	801a      	strh	r2, [r3, #0]
   130ba:	f24b 2340 	movw	r3, #45632	; 0xb240
   130be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130c2:	f04f 0200 	mov.w	r2, #0
   130c6:	601a      	str	r2, [r3, #0]
   130c8:	f001 ba00 	b.w	144cc <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   130cc:	f24b 2329 	movw	r3, #45609	; 0xb229
   130d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130d4:	781b      	ldrb	r3, [r3, #0]
   130d6:	2b03      	cmp	r3, #3
   130d8:	f040 8388 	bne.w	137ec <auto_nav+0x14c4>
{
    nav_block = 3;
   130dc:	f24b 2329 	movw	r3, #45609	; 0xb229
   130e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130e4:	2203      	movs	r2, #3
   130e6:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   130e8:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   130ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130f0:	781b      	ldrb	r3, [r3, #0]
   130f2:	2b00      	cmp	r3, #0
   130f4:	d007      	beq.n	13106 <auto_nav+0xdde>
   130f6:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   130fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130fe:	2200      	movs	r2, #0
   13100:	701a      	strb	r2, [r3, #0]
   13102:	2301      	movs	r3, #1
   13104:	e000      	b.n	13108 <auto_nav+0xde0>
   13106:	2300      	movs	r3, #0
   13108:	2b00      	cmp	r3, #0
   1310a:	d034      	beq.n	13176 <auto_nav+0xe4e>
   1310c:	f24b 2329 	movw	r3, #45609	; 0xb229
   13110:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13114:	2204      	movs	r2, #4
   13116:	701a      	strb	r2, [r3, #0]
   13118:	f24b 2328 	movw	r3, #45608	; 0xb228
   1311c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13120:	2200      	movs	r2, #0
   13122:	701a      	strb	r2, [r3, #0]
   13124:	f24b 233e 	movw	r3, #45630	; 0xb23e
   13128:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1312c:	2200      	movs	r2, #0
   1312e:	801a      	strh	r2, [r3, #0]
   13130:	f24b 4384 	movw	r3, #46212	; 0xb484
   13134:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13138:	681a      	ldr	r2, [r3, #0]
   1313a:	f24b 232c 	movw	r3, #45612	; 0xb22c
   1313e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13142:	601a      	str	r2, [r3, #0]
   13144:	f24b 4388 	movw	r3, #46216	; 0xb488
   13148:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1314c:	681a      	ldr	r2, [r3, #0]
   1314e:	f24b 2330 	movw	r3, #45616	; 0xb230
   13152:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13156:	601a      	str	r2, [r3, #0]
   13158:	f24b 233c 	movw	r3, #45628	; 0xb23c
   1315c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13160:	2200      	movs	r2, #0
   13162:	801a      	strh	r2, [r3, #0]
   13164:	f24b 2340 	movw	r3, #45632	; 0xb240
   13168:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1316c:	f04f 0200 	mov.w	r2, #0
   13170:	601a      	str	r2, [r3, #0]
   13172:	f001 b9ab 	b.w	144cc <auto_nav+0x21a4>
    if(nav_stage == 0)
   13176:	f24b 2328 	movw	r3, #45608	; 0xb228
   1317a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1317e:	781b      	ldrb	r3, [r3, #0]
   13180:	2b00      	cmp	r3, #0
   13182:	f040 82ea 	bne.w	1375a <auto_nav+0x1432>
    {
        nav_stage = 0;
   13186:	f24b 2328 	movw	r3, #45608	; 0xb228
   1318a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1318e:	2200      	movs	r2, #0
   13190:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   13192:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
   13196:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1319a:	781b      	ldrb	r3, [r3, #0]
   1319c:	2b02      	cmp	r3, #2
   1319e:	f040 81a5 	bne.w	134ec <auto_nav+0x11c4>
   131a2:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   131a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131aa:	88db      	ldrh	r3, [r3, #6]
   131ac:	84fb      	strh	r3, [r7, #38]	; 0x26
   131ae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   131b2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   131b6:	dc04      	bgt.n	131c2 <auto_nav+0xe9a>
   131b8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   131bc:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   131c0:	da7e      	bge.n	132c0 <auto_nav+0xf98>
   131c2:	f24b 2374 	movw	r3, #45684	; 0xb274
   131c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131ca:	681b      	ldr	r3, [r3, #0]
   131cc:	4618      	mov	r0, r3
   131ce:	f004 fb7b 	bl	178c8 <__aeabi_f2d>
   131d2:	4604      	mov	r4, r0
   131d4:	460d      	mov	r5, r1
   131d6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   131da:	4618      	mov	r0, r3
   131dc:	f004 ffb4 	bl	18148 <__aeabi_i2f>
   131e0:	4603      	mov	r3, r0
   131e2:	4618      	mov	r0, r3
   131e4:	f04f 0100 	mov.w	r1, #0
   131e8:	f2c4 6116 	movt	r1, #17942	; 0x4616
   131ec:	f005 f8b4 	bl	18358 <__aeabi_fdiv>
   131f0:	4603      	mov	r3, r0
   131f2:	4618      	mov	r0, r3
   131f4:	f004 fb68 	bl	178c8 <__aeabi_f2d>
   131f8:	4602      	mov	r2, r0
   131fa:	460b      	mov	r3, r1
   131fc:	4610      	mov	r0, r2
   131fe:	4619      	mov	r1, r3
   13200:	f04f 0200 	mov.w	r2, #0
   13204:	f04f 0300 	mov.w	r3, #0
   13208:	f2cc 0334 	movt	r3, #49204	; 0xc034
   1320c:	f004 fbb0 	bl	17970 <__aeabi_dmul>
   13210:	4602      	mov	r2, r0
   13212:	460b      	mov	r3, r1
   13214:	4610      	mov	r0, r2
   13216:	4619      	mov	r1, r3
   13218:	f04f 0200 	mov.w	r2, #0
   1321c:	f04f 0300 	mov.w	r3, #0
   13220:	f004 f9f4 	bl	1760c <__adddf3>
   13224:	4602      	mov	r2, r0
   13226:	460b      	mov	r3, r1
   13228:	4620      	mov	r0, r4
   1322a:	4629      	mov	r1, r5
   1322c:	f004 f9ee 	bl	1760c <__adddf3>
   13230:	4602      	mov	r2, r0
   13232:	460b      	mov	r3, r1
   13234:	4610      	mov	r0, r2
   13236:	4619      	mov	r1, r3
   13238:	f004 fe7c 	bl	17f34 <__aeabi_d2f>
   1323c:	4602      	mov	r2, r0
   1323e:	f24b 2374 	movw	r3, #45684	; 0xb274
   13242:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13246:	601a      	str	r2, [r3, #0]
   13248:	f24b 2374 	movw	r3, #45684	; 0xb274
   1324c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13250:	681b      	ldr	r3, [r3, #0]
   13252:	4618      	mov	r0, r3
   13254:	f04f 0100 	mov.w	r1, #0
   13258:	f2c4 317a 	movt	r1, #17274	; 0x437a
   1325c:	f005 f970 	bl	18540 <__aeabi_fcmple>
   13260:	4603      	mov	r3, r0
   13262:	2b00      	cmp	r3, #0
   13264:	d005      	beq.n	13272 <auto_nav+0xf4a>
   13266:	f24b 2374 	movw	r3, #45684	; 0xb274
   1326a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1326e:	681a      	ldr	r2, [r3, #0]
   13270:	e003      	b.n	1327a <auto_nav+0xf52>
   13272:	f04f 0200 	mov.w	r2, #0
   13276:	f2c4 327a 	movt	r2, #17274	; 0x437a
   1327a:	f24b 2374 	movw	r3, #45684	; 0xb274
   1327e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13282:	601a      	str	r2, [r3, #0]
   13284:	f24b 2374 	movw	r3, #45684	; 0xb274
   13288:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1328c:	681b      	ldr	r3, [r3, #0]
   1328e:	4618      	mov	r0, r3
   13290:	f04f 0100 	mov.w	r1, #0
   13294:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   13298:	f005 f95c 	bl	18554 <__aeabi_fcmpge>
   1329c:	4603      	mov	r3, r0
   1329e:	2b00      	cmp	r3, #0
   132a0:	d005      	beq.n	132ae <auto_nav+0xf86>
   132a2:	f24b 2374 	movw	r3, #45684	; 0xb274
   132a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132aa:	681a      	ldr	r2, [r3, #0]
   132ac:	e003      	b.n	132b6 <auto_nav+0xf8e>
   132ae:	f04f 0200 	mov.w	r2, #0
   132b2:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   132b6:	f24b 2374 	movw	r3, #45684	; 0xb274
   132ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132be:	601a      	str	r2, [r3, #0]
   132c0:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   132c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132c8:	889b      	ldrh	r3, [r3, #4]
   132ca:	84bb      	strh	r3, [r7, #36]	; 0x24
   132cc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   132d0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   132d4:	dc04      	bgt.n	132e0 <auto_nav+0xfb8>
   132d6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   132da:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   132de:	da7e      	bge.n	133de <auto_nav+0x10b6>
   132e0:	f24b 2378 	movw	r3, #45688	; 0xb278
   132e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132e8:	681b      	ldr	r3, [r3, #0]
   132ea:	4618      	mov	r0, r3
   132ec:	f004 faec 	bl	178c8 <__aeabi_f2d>
   132f0:	4604      	mov	r4, r0
   132f2:	460d      	mov	r5, r1
   132f4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   132f8:	4618      	mov	r0, r3
   132fa:	f004 ff25 	bl	18148 <__aeabi_i2f>
   132fe:	4603      	mov	r3, r0
   13300:	4618      	mov	r0, r3
   13302:	f04f 0100 	mov.w	r1, #0
   13306:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1330a:	f005 f825 	bl	18358 <__aeabi_fdiv>
   1330e:	4603      	mov	r3, r0
   13310:	4618      	mov	r0, r3
   13312:	f004 fad9 	bl	178c8 <__aeabi_f2d>
   13316:	4602      	mov	r2, r0
   13318:	460b      	mov	r3, r1
   1331a:	4610      	mov	r0, r2
   1331c:	4619      	mov	r1, r3
   1331e:	f04f 0200 	mov.w	r2, #0
   13322:	f04f 0300 	mov.w	r3, #0
   13326:	f2cc 0334 	movt	r3, #49204	; 0xc034
   1332a:	f004 fb21 	bl	17970 <__aeabi_dmul>
   1332e:	4602      	mov	r2, r0
   13330:	460b      	mov	r3, r1
   13332:	4610      	mov	r0, r2
   13334:	4619      	mov	r1, r3
   13336:	f04f 0200 	mov.w	r2, #0
   1333a:	f04f 0300 	mov.w	r3, #0
   1333e:	f004 f965 	bl	1760c <__adddf3>
   13342:	4602      	mov	r2, r0
   13344:	460b      	mov	r3, r1
   13346:	4620      	mov	r0, r4
   13348:	4629      	mov	r1, r5
   1334a:	f004 f95f 	bl	1760c <__adddf3>
   1334e:	4602      	mov	r2, r0
   13350:	460b      	mov	r3, r1
   13352:	4610      	mov	r0, r2
   13354:	4619      	mov	r1, r3
   13356:	f004 fded 	bl	17f34 <__aeabi_d2f>
   1335a:	4602      	mov	r2, r0
   1335c:	f24b 2378 	movw	r3, #45688	; 0xb278
   13360:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13364:	601a      	str	r2, [r3, #0]
   13366:	f24b 2378 	movw	r3, #45688	; 0xb278
   1336a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1336e:	681b      	ldr	r3, [r3, #0]
   13370:	4618      	mov	r0, r3
   13372:	f04f 0100 	mov.w	r1, #0
   13376:	f2c4 317a 	movt	r1, #17274	; 0x437a
   1337a:	f005 f8e1 	bl	18540 <__aeabi_fcmple>
   1337e:	4603      	mov	r3, r0
   13380:	2b00      	cmp	r3, #0
   13382:	d005      	beq.n	13390 <auto_nav+0x1068>
   13384:	f24b 2378 	movw	r3, #45688	; 0xb278
   13388:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1338c:	681a      	ldr	r2, [r3, #0]
   1338e:	e003      	b.n	13398 <auto_nav+0x1070>
   13390:	f04f 0200 	mov.w	r2, #0
   13394:	f2c4 327a 	movt	r2, #17274	; 0x437a
   13398:	f24b 2378 	movw	r3, #45688	; 0xb278
   1339c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133a0:	601a      	str	r2, [r3, #0]
   133a2:	f24b 2378 	movw	r3, #45688	; 0xb278
   133a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133aa:	681b      	ldr	r3, [r3, #0]
   133ac:	4618      	mov	r0, r3
   133ae:	f04f 0100 	mov.w	r1, #0
   133b2:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   133b6:	f005 f8cd 	bl	18554 <__aeabi_fcmpge>
   133ba:	4603      	mov	r3, r0
   133bc:	2b00      	cmp	r3, #0
   133be:	d005      	beq.n	133cc <auto_nav+0x10a4>
   133c0:	f24b 2378 	movw	r3, #45688	; 0xb278
   133c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133c8:	681a      	ldr	r2, [r3, #0]
   133ca:	e003      	b.n	133d4 <auto_nav+0x10ac>
   133cc:	f04f 0200 	mov.w	r2, #0
   133d0:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   133d4:	f24b 2378 	movw	r3, #45688	; 0xb278
   133d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133dc:	601a      	str	r2, [r3, #0]
   133de:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   133e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133e6:	2203      	movs	r2, #3
   133e8:	701a      	strb	r2, [r3, #0]
   133ea:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   133ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133f2:	885b      	ldrh	r3, [r3, #2]
   133f4:	847b      	strh	r3, [r7, #34]	; 0x22
   133f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   133fa:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   133fe:	dc04      	bgt.n	1340a <auto_nav+0x10e2>
   13400:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13404:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13408:	da70      	bge.n	134ec <auto_nav+0x11c4>
   1340a:	f240 4324 	movw	r3, #1060	; 0x424
   1340e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13412:	681b      	ldr	r3, [r3, #0]
   13414:	4618      	mov	r0, r3
   13416:	f004 fa57 	bl	178c8 <__aeabi_f2d>
   1341a:	4604      	mov	r4, r0
   1341c:	460d      	mov	r5, r1
   1341e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13422:	4618      	mov	r0, r3
   13424:	f004 fe90 	bl	18148 <__aeabi_i2f>
   13428:	4603      	mov	r3, r0
   1342a:	4618      	mov	r0, r3
   1342c:	f04f 0100 	mov.w	r1, #0
   13430:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13434:	f004 ff90 	bl	18358 <__aeabi_fdiv>
   13438:	4603      	mov	r3, r0
   1343a:	4618      	mov	r0, r3
   1343c:	f004 fa44 	bl	178c8 <__aeabi_f2d>
   13440:	4602      	mov	r2, r0
   13442:	460b      	mov	r3, r1
   13444:	f04f 0000 	mov.w	r0, #0
   13448:	f04f 0100 	mov.w	r1, #0
   1344c:	f004 f8dc 	bl	17608 <__aeabi_dsub>
   13450:	4602      	mov	r2, r0
   13452:	460b      	mov	r3, r1
   13454:	4620      	mov	r0, r4
   13456:	4629      	mov	r1, r5
   13458:	f004 f8d8 	bl	1760c <__adddf3>
   1345c:	4602      	mov	r2, r0
   1345e:	460b      	mov	r3, r1
   13460:	4610      	mov	r0, r2
   13462:	4619      	mov	r1, r3
   13464:	f004 fd66 	bl	17f34 <__aeabi_d2f>
   13468:	4602      	mov	r2, r0
   1346a:	f240 4324 	movw	r3, #1060	; 0x424
   1346e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13472:	601a      	str	r2, [r3, #0]
   13474:	f240 4324 	movw	r3, #1060	; 0x424
   13478:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1347c:	681b      	ldr	r3, [r3, #0]
   1347e:	4618      	mov	r0, r3
   13480:	f04f 0100 	mov.w	r1, #0
   13484:	f2c4 312f 	movt	r1, #17199	; 0x432f
   13488:	f005 f864 	bl	18554 <__aeabi_fcmpge>
   1348c:	4603      	mov	r3, r0
   1348e:	2b00      	cmp	r3, #0
   13490:	d005      	beq.n	1349e <auto_nav+0x1176>
   13492:	f240 4324 	movw	r3, #1060	; 0x424
   13496:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1349a:	681a      	ldr	r2, [r3, #0]
   1349c:	e003      	b.n	134a6 <auto_nav+0x117e>
   1349e:	f04f 0200 	mov.w	r2, #0
   134a2:	f2c4 322f 	movt	r2, #17199	; 0x432f
   134a6:	f240 4324 	movw	r3, #1060	; 0x424
   134aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134ae:	601a      	str	r2, [r3, #0]
   134b0:	f240 4324 	movw	r3, #1060	; 0x424
   134b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134b8:	681b      	ldr	r3, [r3, #0]
   134ba:	4618      	mov	r0, r3
   134bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   134c0:	f2c4 3189 	movt	r1, #17289	; 0x4389
   134c4:	f005 f83c 	bl	18540 <__aeabi_fcmple>
   134c8:	4603      	mov	r3, r0
   134ca:	2b00      	cmp	r3, #0
   134cc:	d005      	beq.n	134da <auto_nav+0x11b2>
   134ce:	f240 4324 	movw	r3, #1060	; 0x424
   134d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134d6:	681a      	ldr	r2, [r3, #0]
   134d8:	e003      	b.n	134e2 <auto_nav+0x11ba>
   134da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   134de:	f2c4 3289 	movt	r2, #17289	; 0x4389
   134e2:	f240 4324 	movw	r3, #1060	; 0x424
   134e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134ea:	601a      	str	r2, [r3, #0]
   134ec:	f24b 4388 	movw	r3, #46216	; 0xb488
   134f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134f4:	681a      	ldr	r2, [r3, #0]
   134f6:	f24b 2378 	movw	r3, #45688	; 0xb278
   134fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134fe:	681b      	ldr	r3, [r3, #0]
   13500:	4610      	mov	r0, r2
   13502:	4619      	mov	r1, r3
   13504:	f004 fd6a 	bl	17fdc <__aeabi_fsub>
   13508:	4603      	mov	r3, r0
   1350a:	4618      	mov	r0, r3
   1350c:	f004 f9dc 	bl	178c8 <__aeabi_f2d>
   13510:	4604      	mov	r4, r0
   13512:	460d      	mov	r5, r1
   13514:	f24b 4384 	movw	r3, #46212	; 0xb484
   13518:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1351c:	681a      	ldr	r2, [r3, #0]
   1351e:	f24b 2374 	movw	r3, #45684	; 0xb274
   13522:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13526:	681b      	ldr	r3, [r3, #0]
   13528:	4610      	mov	r0, r2
   1352a:	4619      	mov	r1, r3
   1352c:	f004 fd56 	bl	17fdc <__aeabi_fsub>
   13530:	4603      	mov	r3, r0
   13532:	4618      	mov	r0, r3
   13534:	f004 f9c8 	bl	178c8 <__aeabi_f2d>
   13538:	4602      	mov	r2, r0
   1353a:	460b      	mov	r3, r1
   1353c:	4620      	mov	r0, r4
   1353e:	4629      	mov	r1, r5
   13540:	f002 fa12 	bl	15968 <pp_atan2>
   13544:	4602      	mov	r2, r0
   13546:	460b      	mov	r3, r1
   13548:	4610      	mov	r0, r2
   1354a:	4619      	mov	r1, r3
   1354c:	f004 fcf2 	bl	17f34 <__aeabi_d2f>
   13550:	4603      	mov	r3, r0
   13552:	61fb      	str	r3, [r7, #28]
   13554:	69f8      	ldr	r0, [r7, #28]
   13556:	f004 f9b7 	bl	178c8 <__aeabi_f2d>
   1355a:	4604      	mov	r4, r0
   1355c:	460d      	mov	r5, r1
   1355e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   13562:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13566:	681b      	ldr	r3, [r3, #0]
   13568:	4618      	mov	r0, r3
   1356a:	f04f 0100 	mov.w	r1, #0
   1356e:	f2cc 2148 	movt	r1, #49736	; 0xc248
   13572:	f004 fe3d 	bl	181f0 <__aeabi_fmul>
   13576:	4603      	mov	r3, r0
   13578:	4618      	mov	r0, r3
   1357a:	f004 f9a5 	bl	178c8 <__aeabi_f2d>
   1357e:	4602      	mov	r2, r0
   13580:	460b      	mov	r3, r1
   13582:	f04f 0000 	mov.w	r0, #0
   13586:	f04f 0100 	mov.w	r1, #0
   1358a:	f2c4 0114 	movt	r1, #16404	; 0x4014
   1358e:	f004 fb19 	bl	17bc4 <__aeabi_ddiv>
   13592:	4602      	mov	r2, r0
   13594:	460b      	mov	r3, r1
   13596:	4620      	mov	r0, r4
   13598:	4629      	mov	r1, r5
   1359a:	f004 f837 	bl	1760c <__adddf3>
   1359e:	4602      	mov	r2, r0
   135a0:	460b      	mov	r3, r1
   135a2:	4610      	mov	r0, r2
   135a4:	4619      	mov	r1, r3
   135a6:	f004 fcc5 	bl	17f34 <__aeabi_d2f>
   135aa:	4603      	mov	r3, r0
   135ac:	61bb      	str	r3, [r7, #24]
   135ae:	f24b 2374 	movw	r3, #45684	; 0xb274
   135b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135b6:	681b      	ldr	r3, [r3, #0]
   135b8:	4618      	mov	r0, r3
   135ba:	f004 f985 	bl	178c8 <__aeabi_f2d>
   135be:	4604      	mov	r4, r0
   135c0:	460d      	mov	r5, r1
   135c2:	69b8      	ldr	r0, [r7, #24]
   135c4:	f004 f980 	bl	178c8 <__aeabi_f2d>
   135c8:	4602      	mov	r2, r0
   135ca:	460b      	mov	r3, r1
   135cc:	4610      	mov	r0, r2
   135ce:	4619      	mov	r1, r3
   135d0:	a3b1      	add	r3, pc, #708	; (adr r3, 13898 <auto_nav+0x1570>)
   135d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   135d6:	f004 f819 	bl	1760c <__adddf3>
   135da:	4602      	mov	r2, r0
   135dc:	460b      	mov	r3, r1
   135de:	4610      	mov	r0, r2
   135e0:	4619      	mov	r1, r3
   135e2:	f002 fa81 	bl	15ae8 <pp_sin>
   135e6:	4602      	mov	r2, r0
   135e8:	460b      	mov	r3, r1
   135ea:	4610      	mov	r0, r2
   135ec:	4619      	mov	r1, r3
   135ee:	f04f 0200 	mov.w	r2, #0
   135f2:	f04f 0300 	mov.w	r3, #0
   135f6:	f2c4 0349 	movt	r3, #16457	; 0x4049
   135fa:	f004 f9b9 	bl	17970 <__aeabi_dmul>
   135fe:	4602      	mov	r2, r0
   13600:	460b      	mov	r3, r1
   13602:	4620      	mov	r0, r4
   13604:	4629      	mov	r1, r5
   13606:	f004 f801 	bl	1760c <__adddf3>
   1360a:	4602      	mov	r2, r0
   1360c:	460b      	mov	r3, r1
   1360e:	4610      	mov	r0, r2
   13610:	4619      	mov	r1, r3
   13612:	f004 fc8f 	bl	17f34 <__aeabi_d2f>
   13616:	4606      	mov	r6, r0
   13618:	f24b 2378 	movw	r3, #45688	; 0xb278
   1361c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13620:	681b      	ldr	r3, [r3, #0]
   13622:	4618      	mov	r0, r3
   13624:	f004 f950 	bl	178c8 <__aeabi_f2d>
   13628:	4604      	mov	r4, r0
   1362a:	460d      	mov	r5, r1
   1362c:	69b8      	ldr	r0, [r7, #24]
   1362e:	f004 f94b 	bl	178c8 <__aeabi_f2d>
   13632:	4602      	mov	r2, r0
   13634:	460b      	mov	r3, r1
   13636:	4610      	mov	r0, r2
   13638:	4619      	mov	r1, r3
   1363a:	f002 fa55 	bl	15ae8 <pp_sin>
   1363e:	4602      	mov	r2, r0
   13640:	460b      	mov	r3, r1
   13642:	4610      	mov	r0, r2
   13644:	4619      	mov	r1, r3
   13646:	f04f 0200 	mov.w	r2, #0
   1364a:	f04f 0300 	mov.w	r3, #0
   1364e:	f2c4 0349 	movt	r3, #16457	; 0x4049
   13652:	f004 f98d 	bl	17970 <__aeabi_dmul>
   13656:	4602      	mov	r2, r0
   13658:	460b      	mov	r3, r1
   1365a:	4620      	mov	r0, r4
   1365c:	4629      	mov	r1, r5
   1365e:	f003 ffd5 	bl	1760c <__adddf3>
   13662:	4602      	mov	r2, r0
   13664:	460b      	mov	r3, r1
   13666:	4610      	mov	r0, r2
   13668:	4619      	mov	r1, r3
   1366a:	f004 fc63 	bl	17f34 <__aeabi_d2f>
   1366e:	4603      	mov	r3, r0
   13670:	4630      	mov	r0, r6
   13672:	4619      	mov	r1, r3
   13674:	f001 f81c 	bl	146b0 <fly_to_xy>
   13678:	69b8      	ldr	r0, [r7, #24]
   1367a:	f004 f925 	bl	178c8 <__aeabi_f2d>
   1367e:	4602      	mov	r2, r0
   13680:	460b      	mov	r3, r1
   13682:	a185      	add	r1, pc, #532	; (adr r1, 13898 <auto_nav+0x1570>)
   13684:	e9d1 0100 	ldrd	r0, r1, [r1]
   13688:	f003 ffbe 	bl	17608 <__aeabi_dsub>
   1368c:	4602      	mov	r2, r0
   1368e:	460b      	mov	r3, r1
   13690:	4610      	mov	r0, r2
   13692:	4619      	mov	r1, r3
   13694:	a382      	add	r3, pc, #520	; (adr r3, 138a0 <auto_nav+0x1578>)
   13696:	e9d3 2300 	ldrd	r2, r3, [r3]
   1369a:	f004 fa93 	bl	17bc4 <__aeabi_ddiv>
   1369e:	4602      	mov	r2, r0
   136a0:	460b      	mov	r3, r1
   136a2:	4610      	mov	r0, r2
   136a4:	4619      	mov	r1, r3
   136a6:	f04f 0200 	mov.w	r2, #0
   136aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   136ae:	f2c4 0366 	movt	r3, #16486	; 0x4066
   136b2:	f004 f95d 	bl	17970 <__aeabi_dmul>
   136b6:	4602      	mov	r2, r0
   136b8:	460b      	mov	r3, r1
   136ba:	4610      	mov	r0, r2
   136bc:	4619      	mov	r1, r3
   136be:	f004 fc39 	bl	17f34 <__aeabi_d2f>
   136c2:	4602      	mov	r2, r0
   136c4:	f24b 2344 	movw	r3, #45636	; 0xb244
   136c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136cc:	601a      	str	r2, [r3, #0]
   136ce:	e012      	b.n	136f6 <auto_nav+0x13ce>
   136d0:	f24b 2344 	movw	r3, #45636	; 0xb244
   136d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136d8:	681b      	ldr	r3, [r3, #0]
   136da:	4618      	mov	r0, r3
   136dc:	f04f 0100 	mov.w	r1, #0
   136e0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   136e4:	f004 fc7c 	bl	17fe0 <__addsf3>
   136e8:	4603      	mov	r3, r0
   136ea:	461a      	mov	r2, r3
   136ec:	f24b 2344 	movw	r3, #45636	; 0xb244
   136f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136f4:	601a      	str	r2, [r3, #0]
   136f6:	f24b 2344 	movw	r3, #45636	; 0xb244
   136fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136fe:	681b      	ldr	r3, [r3, #0]
   13700:	4618      	mov	r0, r3
   13702:	f04f 0100 	mov.w	r1, #0
   13706:	f004 ff11 	bl	1852c <__aeabi_fcmplt>
   1370a:	4603      	mov	r3, r0
   1370c:	2b00      	cmp	r3, #0
   1370e:	d1df      	bne.n	136d0 <auto_nav+0x13a8>
   13710:	e012      	b.n	13738 <auto_nav+0x1410>
   13712:	f24b 2344 	movw	r3, #45636	; 0xb244
   13716:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1371a:	681b      	ldr	r3, [r3, #0]
   1371c:	4618      	mov	r0, r3
   1371e:	f04f 0100 	mov.w	r1, #0
   13722:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13726:	f004 fc59 	bl	17fdc <__aeabi_fsub>
   1372a:	4603      	mov	r3, r0
   1372c:	461a      	mov	r2, r3
   1372e:	f24b 2344 	movw	r3, #45636	; 0xb244
   13732:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13736:	601a      	str	r2, [r3, #0]
   13738:	f24b 2344 	movw	r3, #45636	; 0xb244
   1373c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13740:	681b      	ldr	r3, [r3, #0]
   13742:	4618      	mov	r0, r3
   13744:	f04f 0100 	mov.w	r1, #0
   13748:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1374c:	f004 ff02 	bl	18554 <__aeabi_fcmpge>
   13750:	4603      	mov	r3, r0
   13752:	2b00      	cmp	r3, #0
   13754:	d1dd      	bne.n	13712 <auto_nav+0x13ea>
        return;
   13756:	f000 beb9 	b.w	144cc <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   1375a:	f24b 2328 	movw	r3, #45608	; 0xb228
   1375e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13762:	781b      	ldrb	r3, [r3, #0]
   13764:	2b01      	cmp	r3, #1
   13766:	f040 86b1 	bne.w	144cc <auto_nav+0x21a4>
    {
        nav_stage = 1;
   1376a:	f24b 2328 	movw	r3, #45608	; 0xb228
   1376e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13772:	2201      	movs	r2, #1
   13774:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13776:	f24b 2329 	movw	r3, #45609	; 0xb229
   1377a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1377e:	781b      	ldrb	r3, [r3, #0]
   13780:	3301      	adds	r3, #1
   13782:	b2da      	uxtb	r2, r3
   13784:	f24b 2329 	movw	r3, #45609	; 0xb229
   13788:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1378c:	701a      	strb	r2, [r3, #0]
   1378e:	f24b 2328 	movw	r3, #45608	; 0xb228
   13792:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13796:	2200      	movs	r2, #0
   13798:	701a      	strb	r2, [r3, #0]
   1379a:	f24b 233e 	movw	r3, #45630	; 0xb23e
   1379e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137a2:	2200      	movs	r2, #0
   137a4:	801a      	strh	r2, [r3, #0]
   137a6:	f24b 4384 	movw	r3, #46212	; 0xb484
   137aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137ae:	681a      	ldr	r2, [r3, #0]
   137b0:	f24b 232c 	movw	r3, #45612	; 0xb22c
   137b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137b8:	601a      	str	r2, [r3, #0]
   137ba:	f24b 4388 	movw	r3, #46216	; 0xb488
   137be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137c2:	681a      	ldr	r2, [r3, #0]
   137c4:	f24b 2330 	movw	r3, #45616	; 0xb230
   137c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137cc:	601a      	str	r2, [r3, #0]
   137ce:	f24b 233c 	movw	r3, #45628	; 0xb23c
   137d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137d6:	2200      	movs	r2, #0
   137d8:	801a      	strh	r2, [r3, #0]
   137da:	f24b 2340 	movw	r3, #45632	; 0xb240
   137de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137e2:	f04f 0200 	mov.w	r2, #0
   137e6:	601a      	str	r2, [r3, #0]
   137e8:	f000 be70 	b.w	144cc <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   137ec:	f24b 2329 	movw	r3, #45609	; 0xb229
   137f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137f4:	781b      	ldrb	r3, [r3, #0]
   137f6:	2b04      	cmp	r3, #4
   137f8:	f040 8202 	bne.w	13c00 <auto_nav+0x18d8>
{
    nav_block = 4;
   137fc:	f24b 2329 	movw	r3, #45609	; 0xb229
   13800:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13804:	2204      	movs	r2, #4
   13806:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13808:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   1380c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13810:	781b      	ldrb	r3, [r3, #0]
   13812:	2b00      	cmp	r3, #0
   13814:	d007      	beq.n	13826 <auto_nav+0x14fe>
   13816:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   1381a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1381e:	2200      	movs	r2, #0
   13820:	701a      	strb	r2, [r3, #0]
   13822:	2301      	movs	r3, #1
   13824:	e000      	b.n	13828 <auto_nav+0x1500>
   13826:	2300      	movs	r3, #0
   13828:	2b00      	cmp	r3, #0
   1382a:	d03d      	beq.n	138a8 <auto_nav+0x1580>
   1382c:	f24b 2329 	movw	r3, #45609	; 0xb229
   13830:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13834:	2205      	movs	r2, #5
   13836:	701a      	strb	r2, [r3, #0]
   13838:	f24b 2328 	movw	r3, #45608	; 0xb228
   1383c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13840:	2200      	movs	r2, #0
   13842:	701a      	strb	r2, [r3, #0]
   13844:	f24b 233e 	movw	r3, #45630	; 0xb23e
   13848:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1384c:	2200      	movs	r2, #0
   1384e:	801a      	strh	r2, [r3, #0]
   13850:	f24b 4384 	movw	r3, #46212	; 0xb484
   13854:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13858:	681a      	ldr	r2, [r3, #0]
   1385a:	f24b 232c 	movw	r3, #45612	; 0xb22c
   1385e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13862:	601a      	str	r2, [r3, #0]
   13864:	f24b 4388 	movw	r3, #46216	; 0xb488
   13868:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1386c:	681a      	ldr	r2, [r3, #0]
   1386e:	f24b 2330 	movw	r3, #45616	; 0xb230
   13872:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13876:	601a      	str	r2, [r3, #0]
   13878:	f24b 233c 	movw	r3, #45628	; 0xb23c
   1387c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13880:	2200      	movs	r2, #0
   13882:	801a      	strh	r2, [r3, #0]
   13884:	f24b 2340 	movw	r3, #45632	; 0xb240
   13888:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1388c:	f04f 0200 	mov.w	r2, #0
   13890:	601a      	str	r2, [r3, #0]
   13892:	f000 be1b 	b.w	144cc <auto_nav+0x21a4>
   13896:	bf00      	nop
   13898:	54442d18 	.word	0x54442d18
   1389c:	3ff921fb 	.word	0x3ff921fb
   138a0:	54442d18 	.word	0x54442d18
   138a4:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   138a8:	f24b 2328 	movw	r3, #45608	; 0xb228
   138ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138b0:	781b      	ldrb	r3, [r3, #0]
   138b2:	2b00      	cmp	r3, #0
   138b4:	f040 815b 	bne.w	13b6e <auto_nav+0x1846>
    {
        nav_stage = 0;
   138b8:	f24b 2328 	movw	r3, #45608	; 0xb228
   138bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138c0:	2200      	movs	r2, #0
   138c2:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   138c4:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   138c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138cc:	2200      	movs	r2, #0
   138ce:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   138d0:	f24b 2354 	movw	r3, #45652	; 0xb254
   138d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138d8:	f04f 0200 	mov.w	r2, #0
   138dc:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   138de:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   138e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138e6:	2203      	movs	r2, #3
   138e8:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   138ea:	f240 4328 	movw	r3, #1064	; 0x428
   138ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138f2:	689a      	ldr	r2, [r3, #8]
   138f4:	f240 4324 	movw	r3, #1060	; 0x424
   138f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138fc:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   138fe:	f24b 231c 	movw	r3, #45596	; 0xb21c
   13902:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13906:	f04f 0200 	mov.w	r2, #0
   1390a:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   1390c:	f24b 4388 	movw	r3, #46216	; 0xb488
   13910:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13914:	681a      	ldr	r2, [r3, #0]
   13916:	f240 4328 	movw	r3, #1064	; 0x428
   1391a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1391e:	685b      	ldr	r3, [r3, #4]
   13920:	4610      	mov	r0, r2
   13922:	4619      	mov	r1, r3
   13924:	f004 fb5a 	bl	17fdc <__aeabi_fsub>
   13928:	4603      	mov	r3, r0
   1392a:	4618      	mov	r0, r3
   1392c:	f003 ffcc 	bl	178c8 <__aeabi_f2d>
   13930:	4604      	mov	r4, r0
   13932:	460d      	mov	r5, r1
   13934:	f24b 4384 	movw	r3, #46212	; 0xb484
   13938:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1393c:	681a      	ldr	r2, [r3, #0]
   1393e:	f240 4328 	movw	r3, #1064	; 0x428
   13942:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13946:	681b      	ldr	r3, [r3, #0]
   13948:	4610      	mov	r0, r2
   1394a:	4619      	mov	r1, r3
   1394c:	f004 fb46 	bl	17fdc <__aeabi_fsub>
   13950:	4603      	mov	r3, r0
   13952:	4618      	mov	r0, r3
   13954:	f003 ffb8 	bl	178c8 <__aeabi_f2d>
   13958:	4602      	mov	r2, r0
   1395a:	460b      	mov	r3, r1
   1395c:	4620      	mov	r0, r4
   1395e:	4629      	mov	r1, r5
   13960:	f002 f802 	bl	15968 <pp_atan2>
   13964:	4602      	mov	r2, r0
   13966:	460b      	mov	r3, r1
   13968:	4610      	mov	r0, r2
   1396a:	4619      	mov	r1, r3
   1396c:	f004 fae2 	bl	17f34 <__aeabi_d2f>
   13970:	4603      	mov	r3, r0
   13972:	617b      	str	r3, [r7, #20]
   13974:	6978      	ldr	r0, [r7, #20]
   13976:	f003 ffa7 	bl	178c8 <__aeabi_f2d>
   1397a:	4604      	mov	r4, r0
   1397c:	460d      	mov	r5, r1
   1397e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   13982:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13986:	681b      	ldr	r3, [r3, #0]
   13988:	4618      	mov	r0, r3
   1398a:	f04f 0100 	mov.w	r1, #0
   1398e:	f2cc 3116 	movt	r1, #49942	; 0xc316
   13992:	f004 fc2d 	bl	181f0 <__aeabi_fmul>
   13996:	4603      	mov	r3, r0
   13998:	4618      	mov	r0, r3
   1399a:	f003 ff95 	bl	178c8 <__aeabi_f2d>
   1399e:	4602      	mov	r2, r0
   139a0:	460b      	mov	r3, r1
   139a2:	f04f 0000 	mov.w	r0, #0
   139a6:	f04f 0100 	mov.w	r1, #0
   139aa:	f2c4 0114 	movt	r1, #16404	; 0x4014
   139ae:	f004 f909 	bl	17bc4 <__aeabi_ddiv>
   139b2:	4602      	mov	r2, r0
   139b4:	460b      	mov	r3, r1
   139b6:	4620      	mov	r0, r4
   139b8:	4629      	mov	r1, r5
   139ba:	f003 fe27 	bl	1760c <__adddf3>
   139be:	4602      	mov	r2, r0
   139c0:	460b      	mov	r3, r1
   139c2:	4610      	mov	r0, r2
   139c4:	4619      	mov	r1, r3
   139c6:	f004 fab5 	bl	17f34 <__aeabi_d2f>
   139ca:	4603      	mov	r3, r0
   139cc:	613b      	str	r3, [r7, #16]
   139ce:	f240 4328 	movw	r3, #1064	; 0x428
   139d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139d6:	681b      	ldr	r3, [r3, #0]
   139d8:	4618      	mov	r0, r3
   139da:	f003 ff75 	bl	178c8 <__aeabi_f2d>
   139de:	4604      	mov	r4, r0
   139e0:	460d      	mov	r5, r1
   139e2:	6938      	ldr	r0, [r7, #16]
   139e4:	f003 ff70 	bl	178c8 <__aeabi_f2d>
   139e8:	4602      	mov	r2, r0
   139ea:	460b      	mov	r3, r1
   139ec:	4610      	mov	r0, r2
   139ee:	4619      	mov	r1, r3
   139f0:	a3af      	add	r3, pc, #700	; (adr r3, 13cb0 <auto_nav+0x1988>)
   139f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   139f6:	f003 fe09 	bl	1760c <__adddf3>
   139fa:	4602      	mov	r2, r0
   139fc:	460b      	mov	r3, r1
   139fe:	4610      	mov	r0, r2
   13a00:	4619      	mov	r1, r3
   13a02:	f002 f871 	bl	15ae8 <pp_sin>
   13a06:	4602      	mov	r2, r0
   13a08:	460b      	mov	r3, r1
   13a0a:	4610      	mov	r0, r2
   13a0c:	4619      	mov	r1, r3
   13a0e:	a3aa      	add	r3, pc, #680	; (adr r3, 13cb8 <auto_nav+0x1990>)
   13a10:	e9d3 2300 	ldrd	r2, r3, [r3]
   13a14:	f003 ffac 	bl	17970 <__aeabi_dmul>
   13a18:	4602      	mov	r2, r0
   13a1a:	460b      	mov	r3, r1
   13a1c:	4620      	mov	r0, r4
   13a1e:	4629      	mov	r1, r5
   13a20:	f003 fdf4 	bl	1760c <__adddf3>
   13a24:	4602      	mov	r2, r0
   13a26:	460b      	mov	r3, r1
   13a28:	4610      	mov	r0, r2
   13a2a:	4619      	mov	r1, r3
   13a2c:	f004 fa82 	bl	17f34 <__aeabi_d2f>
   13a30:	4606      	mov	r6, r0
   13a32:	f240 4328 	movw	r3, #1064	; 0x428
   13a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a3a:	685b      	ldr	r3, [r3, #4]
   13a3c:	4618      	mov	r0, r3
   13a3e:	f003 ff43 	bl	178c8 <__aeabi_f2d>
   13a42:	4604      	mov	r4, r0
   13a44:	460d      	mov	r5, r1
   13a46:	6938      	ldr	r0, [r7, #16]
   13a48:	f003 ff3e 	bl	178c8 <__aeabi_f2d>
   13a4c:	4602      	mov	r2, r0
   13a4e:	460b      	mov	r3, r1
   13a50:	4610      	mov	r0, r2
   13a52:	4619      	mov	r1, r3
   13a54:	f002 f848 	bl	15ae8 <pp_sin>
   13a58:	4602      	mov	r2, r0
   13a5a:	460b      	mov	r3, r1
   13a5c:	4610      	mov	r0, r2
   13a5e:	4619      	mov	r1, r3
   13a60:	a395      	add	r3, pc, #596	; (adr r3, 13cb8 <auto_nav+0x1990>)
   13a62:	e9d3 2300 	ldrd	r2, r3, [r3]
   13a66:	f003 ff83 	bl	17970 <__aeabi_dmul>
   13a6a:	4602      	mov	r2, r0
   13a6c:	460b      	mov	r3, r1
   13a6e:	4620      	mov	r0, r4
   13a70:	4629      	mov	r1, r5
   13a72:	f003 fdcb 	bl	1760c <__adddf3>
   13a76:	4602      	mov	r2, r0
   13a78:	460b      	mov	r3, r1
   13a7a:	4610      	mov	r0, r2
   13a7c:	4619      	mov	r1, r3
   13a7e:	f004 fa59 	bl	17f34 <__aeabi_d2f>
   13a82:	4603      	mov	r3, r0
   13a84:	4630      	mov	r0, r6
   13a86:	4619      	mov	r1, r3
   13a88:	f000 fe12 	bl	146b0 <fly_to_xy>
   13a8c:	6938      	ldr	r0, [r7, #16]
   13a8e:	f003 ff1b 	bl	178c8 <__aeabi_f2d>
   13a92:	4602      	mov	r2, r0
   13a94:	460b      	mov	r3, r1
   13a96:	a186      	add	r1, pc, #536	; (adr r1, 13cb0 <auto_nav+0x1988>)
   13a98:	e9d1 0100 	ldrd	r0, r1, [r1]
   13a9c:	f003 fdb4 	bl	17608 <__aeabi_dsub>
   13aa0:	4602      	mov	r2, r0
   13aa2:	460b      	mov	r3, r1
   13aa4:	4610      	mov	r0, r2
   13aa6:	4619      	mov	r1, r3
   13aa8:	a385      	add	r3, pc, #532	; (adr r3, 13cc0 <auto_nav+0x1998>)
   13aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   13aae:	f004 f889 	bl	17bc4 <__aeabi_ddiv>
   13ab2:	4602      	mov	r2, r0
   13ab4:	460b      	mov	r3, r1
   13ab6:	4610      	mov	r0, r2
   13ab8:	4619      	mov	r1, r3
   13aba:	f04f 0200 	mov.w	r2, #0
   13abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13ac2:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13ac6:	f003 ff53 	bl	17970 <__aeabi_dmul>
   13aca:	4602      	mov	r2, r0
   13acc:	460b      	mov	r3, r1
   13ace:	4610      	mov	r0, r2
   13ad0:	4619      	mov	r1, r3
   13ad2:	f004 fa2f 	bl	17f34 <__aeabi_d2f>
   13ad6:	4602      	mov	r2, r0
   13ad8:	f24b 2344 	movw	r3, #45636	; 0xb244
   13adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ae0:	601a      	str	r2, [r3, #0]
   13ae2:	e012      	b.n	13b0a <auto_nav+0x17e2>
   13ae4:	f24b 2344 	movw	r3, #45636	; 0xb244
   13ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13aec:	681b      	ldr	r3, [r3, #0]
   13aee:	4618      	mov	r0, r3
   13af0:	f04f 0100 	mov.w	r1, #0
   13af4:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13af8:	f004 fa72 	bl	17fe0 <__addsf3>
   13afc:	4603      	mov	r3, r0
   13afe:	461a      	mov	r2, r3
   13b00:	f24b 2344 	movw	r3, #45636	; 0xb244
   13b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b08:	601a      	str	r2, [r3, #0]
   13b0a:	f24b 2344 	movw	r3, #45636	; 0xb244
   13b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b12:	681b      	ldr	r3, [r3, #0]
   13b14:	4618      	mov	r0, r3
   13b16:	f04f 0100 	mov.w	r1, #0
   13b1a:	f004 fd07 	bl	1852c <__aeabi_fcmplt>
   13b1e:	4603      	mov	r3, r0
   13b20:	2b00      	cmp	r3, #0
   13b22:	d1df      	bne.n	13ae4 <auto_nav+0x17bc>
   13b24:	e012      	b.n	13b4c <auto_nav+0x1824>
   13b26:	f24b 2344 	movw	r3, #45636	; 0xb244
   13b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b2e:	681b      	ldr	r3, [r3, #0]
   13b30:	4618      	mov	r0, r3
   13b32:	f04f 0100 	mov.w	r1, #0
   13b36:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13b3a:	f004 fa4f 	bl	17fdc <__aeabi_fsub>
   13b3e:	4603      	mov	r3, r0
   13b40:	461a      	mov	r2, r3
   13b42:	f24b 2344 	movw	r3, #45636	; 0xb244
   13b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b4a:	601a      	str	r2, [r3, #0]
   13b4c:	f24b 2344 	movw	r3, #45636	; 0xb244
   13b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b54:	681b      	ldr	r3, [r3, #0]
   13b56:	4618      	mov	r0, r3
   13b58:	f04f 0100 	mov.w	r1, #0
   13b5c:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13b60:	f004 fcf8 	bl	18554 <__aeabi_fcmpge>
   13b64:	4603      	mov	r3, r0
   13b66:	2b00      	cmp	r3, #0
   13b68:	d1dd      	bne.n	13b26 <auto_nav+0x17fe>
        return;
   13b6a:	f000 bcaf 	b.w	144cc <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13b6e:	f24b 2328 	movw	r3, #45608	; 0xb228
   13b72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b76:	781b      	ldrb	r3, [r3, #0]
   13b78:	2b01      	cmp	r3, #1
   13b7a:	f040 84a7 	bne.w	144cc <auto_nav+0x21a4>
    {
        nav_stage =1;
   13b7e:	f24b 2328 	movw	r3, #45608	; 0xb228
   13b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b86:	2201      	movs	r2, #1
   13b88:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13b8a:	f24b 2329 	movw	r3, #45609	; 0xb229
   13b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b92:	781b      	ldrb	r3, [r3, #0]
   13b94:	3301      	adds	r3, #1
   13b96:	b2da      	uxtb	r2, r3
   13b98:	f24b 2329 	movw	r3, #45609	; 0xb229
   13b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ba0:	701a      	strb	r2, [r3, #0]
   13ba2:	f24b 2328 	movw	r3, #45608	; 0xb228
   13ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13baa:	2200      	movs	r2, #0
   13bac:	701a      	strb	r2, [r3, #0]
   13bae:	f24b 233e 	movw	r3, #45630	; 0xb23e
   13bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bb6:	2200      	movs	r2, #0
   13bb8:	801a      	strh	r2, [r3, #0]
   13bba:	f24b 4384 	movw	r3, #46212	; 0xb484
   13bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bc2:	681a      	ldr	r2, [r3, #0]
   13bc4:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bcc:	601a      	str	r2, [r3, #0]
   13bce:	f24b 4388 	movw	r3, #46216	; 0xb488
   13bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bd6:	681a      	ldr	r2, [r3, #0]
   13bd8:	f24b 2330 	movw	r3, #45616	; 0xb230
   13bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13be0:	601a      	str	r2, [r3, #0]
   13be2:	f24b 233c 	movw	r3, #45628	; 0xb23c
   13be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bea:	2200      	movs	r2, #0
   13bec:	801a      	strh	r2, [r3, #0]
   13bee:	f24b 2340 	movw	r3, #45632	; 0xb240
   13bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bf6:	f04f 0200 	mov.w	r2, #0
   13bfa:	601a      	str	r2, [r3, #0]
   13bfc:	f000 bc66 	b.w	144cc <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13c00:	f24b 2329 	movw	r3, #45609	; 0xb229
   13c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c08:	781b      	ldrb	r3, [r3, #0]
   13c0a:	2b05      	cmp	r3, #5
   13c0c:	f040 845e 	bne.w	144cc <auto_nav+0x21a4>
{
    nav_block = 5;
   13c10:	f24b 2329 	movw	r3, #45609	; 0xb229
   13c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c18:	2205      	movs	r2, #5
   13c1a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   13c1c:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   13c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c24:	781b      	ldrb	r3, [r3, #0]
   13c26:	2b00      	cmp	r3, #0
   13c28:	d007      	beq.n	13c3a <auto_nav+0x1912>
   13c2a:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   13c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c32:	2200      	movs	r2, #0
   13c34:	701a      	strb	r2, [r3, #0]
   13c36:	2301      	movs	r3, #1
   13c38:	e000      	b.n	13c3c <auto_nav+0x1914>
   13c3a:	2300      	movs	r3, #0
   13c3c:	2b00      	cmp	r3, #0
   13c3e:	d043      	beq.n	13cc8 <auto_nav+0x19a0>
   13c40:	f24b 2329 	movw	r3, #45609	; 0xb229
   13c44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c48:	2201      	movs	r2, #1
   13c4a:	701a      	strb	r2, [r3, #0]
   13c4c:	f24b 2328 	movw	r3, #45608	; 0xb228
   13c50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c54:	2200      	movs	r2, #0
   13c56:	701a      	strb	r2, [r3, #0]
   13c58:	f24b 233e 	movw	r3, #45630	; 0xb23e
   13c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c60:	2200      	movs	r2, #0
   13c62:	801a      	strh	r2, [r3, #0]
   13c64:	f24b 4384 	movw	r3, #46212	; 0xb484
   13c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c6c:	681a      	ldr	r2, [r3, #0]
   13c6e:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c76:	601a      	str	r2, [r3, #0]
   13c78:	f24b 4388 	movw	r3, #46216	; 0xb488
   13c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c80:	681a      	ldr	r2, [r3, #0]
   13c82:	f24b 2330 	movw	r3, #45616	; 0xb230
   13c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c8a:	601a      	str	r2, [r3, #0]
   13c8c:	f24b 233c 	movw	r3, #45628	; 0xb23c
   13c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c94:	2200      	movs	r2, #0
   13c96:	801a      	strh	r2, [r3, #0]
   13c98:	f24b 2340 	movw	r3, #45632	; 0xb240
   13c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ca0:	f04f 0200 	mov.w	r2, #0
   13ca4:	601a      	str	r2, [r3, #0]
   13ca6:	f000 bc11 	b.w	144cc <auto_nav+0x21a4>
   13caa:	bf00      	nop
   13cac:	f3af 8000 	nop.w
   13cb0:	54442d18 	.word	0x54442d18
   13cb4:	3ff921fb 	.word	0x3ff921fb
   13cb8:	00000000 	.word	0x00000000
   13cbc:	4062c000 	.word	0x4062c000
   13cc0:	54442d18 	.word	0x54442d18
   13cc4:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   13cc8:	f24b 2328 	movw	r3, #45608	; 0xb228
   13ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cd0:	781b      	ldrb	r3, [r3, #0]
   13cd2:	2b00      	cmp	r3, #0
   13cd4:	d133      	bne.n	13d3e <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   13cd6:	f24b 2328 	movw	r3, #45608	; 0xb228
   13cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cde:	2200      	movs	r2, #0
   13ce0:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   13ce2:	f24b 2328 	movw	r3, #45608	; 0xb228
   13ce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cea:	781b      	ldrb	r3, [r3, #0]
   13cec:	3301      	adds	r3, #1
   13cee:	b2da      	uxtb	r2, r3
   13cf0:	f24b 2328 	movw	r3, #45608	; 0xb228
   13cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cf8:	701a      	strb	r2, [r3, #0]
   13cfa:	f24b 4384 	movw	r3, #46212	; 0xb484
   13cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d02:	681a      	ldr	r2, [r3, #0]
   13d04:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d0c:	601a      	str	r2, [r3, #0]
   13d0e:	f24b 4388 	movw	r3, #46216	; 0xb488
   13d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d16:	681a      	ldr	r2, [r3, #0]
   13d18:	f24b 2330 	movw	r3, #45616	; 0xb230
   13d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d20:	601a      	str	r2, [r3, #0]
   13d22:	f24b 233c 	movw	r3, #45628	; 0xb23c
   13d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d2a:	2200      	movs	r2, #0
   13d2c:	801a      	strh	r2, [r3, #0]
   13d2e:	f24b 2340 	movw	r3, #45632	; 0xb240
   13d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d36:	f04f 0200 	mov.w	r2, #0
   13d3a:	601a      	str	r2, [r3, #0]
   13d3c:	e3c6      	b.n	144cc <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   13d3e:	f24b 2328 	movw	r3, #45608	; 0xb228
   13d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d46:	781b      	ldrb	r3, [r3, #0]
   13d48:	2b01      	cmp	r3, #1
   13d4a:	f040 81b5 	bne.w	140b8 <auto_nav+0x1d90>
    {
        nav_stage =1;
   13d4e:	f24b 2328 	movw	r3, #45608	; 0xb228
   13d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d56:	2201      	movs	r2, #1
   13d58:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13d5a:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   13d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d62:	2200      	movs	r2, #0
   13d64:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13d66:	f24b 2354 	movw	r3, #45652	; 0xb254
   13d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d6e:	f04f 0200 	mov.w	r2, #0
   13d72:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13d74:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   13d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d7c:	2203      	movs	r2, #3
   13d7e:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   13d80:	f240 4328 	movw	r3, #1064	; 0x428
   13d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d88:	695a      	ldr	r2, [r3, #20]
   13d8a:	f240 4324 	movw	r3, #1060	; 0x424
   13d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d92:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13d94:	f24b 231c 	movw	r3, #45596	; 0xb21c
   13d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d9c:	f04f 0200 	mov.w	r2, #0
   13da0:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   13da2:	f24b 4388 	movw	r3, #46216	; 0xb488
   13da6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13daa:	681a      	ldr	r2, [r3, #0]
   13dac:	f240 4328 	movw	r3, #1064	; 0x428
   13db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13db4:	691b      	ldr	r3, [r3, #16]
   13db6:	4610      	mov	r0, r2
   13db8:	4619      	mov	r1, r3
   13dba:	f004 f90f 	bl	17fdc <__aeabi_fsub>
   13dbe:	4603      	mov	r3, r0
   13dc0:	4618      	mov	r0, r3
   13dc2:	f003 fd81 	bl	178c8 <__aeabi_f2d>
   13dc6:	4604      	mov	r4, r0
   13dc8:	460d      	mov	r5, r1
   13dca:	f24b 4384 	movw	r3, #46212	; 0xb484
   13dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dd2:	681a      	ldr	r2, [r3, #0]
   13dd4:	f240 4328 	movw	r3, #1064	; 0x428
   13dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ddc:	68db      	ldr	r3, [r3, #12]
   13dde:	4610      	mov	r0, r2
   13de0:	4619      	mov	r1, r3
   13de2:	f004 f8fb 	bl	17fdc <__aeabi_fsub>
   13de6:	4603      	mov	r3, r0
   13de8:	4618      	mov	r0, r3
   13dea:	f003 fd6d 	bl	178c8 <__aeabi_f2d>
   13dee:	4602      	mov	r2, r0
   13df0:	460b      	mov	r3, r1
   13df2:	4620      	mov	r0, r4
   13df4:	4629      	mov	r1, r5
   13df6:	f001 fdb7 	bl	15968 <pp_atan2>
   13dfa:	4602      	mov	r2, r0
   13dfc:	460b      	mov	r3, r1
   13dfe:	4610      	mov	r0, r2
   13e00:	4619      	mov	r1, r3
   13e02:	f004 f897 	bl	17f34 <__aeabi_d2f>
   13e06:	4603      	mov	r3, r0
   13e08:	60fb      	str	r3, [r7, #12]
   13e0a:	68f8      	ldr	r0, [r7, #12]
   13e0c:	f003 fd5c 	bl	178c8 <__aeabi_f2d>
   13e10:	4604      	mov	r4, r0
   13e12:	460d      	mov	r5, r1
   13e14:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   13e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e1c:	681b      	ldr	r3, [r3, #0]
   13e1e:	4618      	mov	r0, r3
   13e20:	f04f 0100 	mov.w	r1, #0
   13e24:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   13e28:	f004 f9e2 	bl	181f0 <__aeabi_fmul>
   13e2c:	4603      	mov	r3, r0
   13e2e:	4618      	mov	r0, r3
   13e30:	f003 fd4a 	bl	178c8 <__aeabi_f2d>
   13e34:	4602      	mov	r2, r0
   13e36:	460b      	mov	r3, r1
   13e38:	f04f 0000 	mov.w	r0, #0
   13e3c:	f04f 0100 	mov.w	r1, #0
   13e40:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13e44:	f003 febe 	bl	17bc4 <__aeabi_ddiv>
   13e48:	4602      	mov	r2, r0
   13e4a:	460b      	mov	r3, r1
   13e4c:	4620      	mov	r0, r4
   13e4e:	4629      	mov	r1, r5
   13e50:	f003 fbdc 	bl	1760c <__adddf3>
   13e54:	4602      	mov	r2, r0
   13e56:	460b      	mov	r3, r1
   13e58:	4610      	mov	r0, r2
   13e5a:	4619      	mov	r1, r3
   13e5c:	f004 f86a 	bl	17f34 <__aeabi_d2f>
   13e60:	4603      	mov	r3, r0
   13e62:	60bb      	str	r3, [r7, #8]
   13e64:	f240 4328 	movw	r3, #1064	; 0x428
   13e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e6c:	68db      	ldr	r3, [r3, #12]
   13e6e:	4618      	mov	r0, r3
   13e70:	f003 fd2a 	bl	178c8 <__aeabi_f2d>
   13e74:	4604      	mov	r4, r0
   13e76:	460d      	mov	r5, r1
   13e78:	68b8      	ldr	r0, [r7, #8]
   13e7a:	f003 fd25 	bl	178c8 <__aeabi_f2d>
   13e7e:	4602      	mov	r2, r0
   13e80:	460b      	mov	r3, r1
   13e82:	4610      	mov	r0, r2
   13e84:	4619      	mov	r1, r3
   13e86:	a388      	add	r3, pc, #544	; (adr r3, 140a8 <auto_nav+0x1d80>)
   13e88:	e9d3 2300 	ldrd	r2, r3, [r3]
   13e8c:	f003 fbbe 	bl	1760c <__adddf3>
   13e90:	4602      	mov	r2, r0
   13e92:	460b      	mov	r3, r1
   13e94:	4610      	mov	r0, r2
   13e96:	4619      	mov	r1, r3
   13e98:	f001 fe26 	bl	15ae8 <pp_sin>
   13e9c:	4602      	mov	r2, r0
   13e9e:	460b      	mov	r3, r1
   13ea0:	4610      	mov	r0, r2
   13ea2:	4619      	mov	r1, r3
   13ea4:	f04f 0200 	mov.w	r2, #0
   13ea8:	f04f 0300 	mov.w	r3, #0
   13eac:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13eb0:	f003 fd5e 	bl	17970 <__aeabi_dmul>
   13eb4:	4602      	mov	r2, r0
   13eb6:	460b      	mov	r3, r1
   13eb8:	4620      	mov	r0, r4
   13eba:	4629      	mov	r1, r5
   13ebc:	f003 fba6 	bl	1760c <__adddf3>
   13ec0:	4602      	mov	r2, r0
   13ec2:	460b      	mov	r3, r1
   13ec4:	4610      	mov	r0, r2
   13ec6:	4619      	mov	r1, r3
   13ec8:	f004 f834 	bl	17f34 <__aeabi_d2f>
   13ecc:	4606      	mov	r6, r0
   13ece:	f240 4328 	movw	r3, #1064	; 0x428
   13ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ed6:	691b      	ldr	r3, [r3, #16]
   13ed8:	4618      	mov	r0, r3
   13eda:	f003 fcf5 	bl	178c8 <__aeabi_f2d>
   13ede:	4604      	mov	r4, r0
   13ee0:	460d      	mov	r5, r1
   13ee2:	68b8      	ldr	r0, [r7, #8]
   13ee4:	f003 fcf0 	bl	178c8 <__aeabi_f2d>
   13ee8:	4602      	mov	r2, r0
   13eea:	460b      	mov	r3, r1
   13eec:	4610      	mov	r0, r2
   13eee:	4619      	mov	r1, r3
   13ef0:	f001 fdfa 	bl	15ae8 <pp_sin>
   13ef4:	4602      	mov	r2, r0
   13ef6:	460b      	mov	r3, r1
   13ef8:	4610      	mov	r0, r2
   13efa:	4619      	mov	r1, r3
   13efc:	f04f 0200 	mov.w	r2, #0
   13f00:	f04f 0300 	mov.w	r3, #0
   13f04:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13f08:	f003 fd32 	bl	17970 <__aeabi_dmul>
   13f0c:	4602      	mov	r2, r0
   13f0e:	460b      	mov	r3, r1
   13f10:	4620      	mov	r0, r4
   13f12:	4629      	mov	r1, r5
   13f14:	f003 fb7a 	bl	1760c <__adddf3>
   13f18:	4602      	mov	r2, r0
   13f1a:	460b      	mov	r3, r1
   13f1c:	4610      	mov	r0, r2
   13f1e:	4619      	mov	r1, r3
   13f20:	f004 f808 	bl	17f34 <__aeabi_d2f>
   13f24:	4603      	mov	r3, r0
   13f26:	4630      	mov	r0, r6
   13f28:	4619      	mov	r1, r3
   13f2a:	f000 fbc1 	bl	146b0 <fly_to_xy>
   13f2e:	68b8      	ldr	r0, [r7, #8]
   13f30:	f003 fcca 	bl	178c8 <__aeabi_f2d>
   13f34:	4602      	mov	r2, r0
   13f36:	460b      	mov	r3, r1
   13f38:	a15b      	add	r1, pc, #364	; (adr r1, 140a8 <auto_nav+0x1d80>)
   13f3a:	e9d1 0100 	ldrd	r0, r1, [r1]
   13f3e:	f003 fb63 	bl	17608 <__aeabi_dsub>
   13f42:	4602      	mov	r2, r0
   13f44:	460b      	mov	r3, r1
   13f46:	4610      	mov	r0, r2
   13f48:	4619      	mov	r1, r3
   13f4a:	a359      	add	r3, pc, #356	; (adr r3, 140b0 <auto_nav+0x1d88>)
   13f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   13f50:	f003 fe38 	bl	17bc4 <__aeabi_ddiv>
   13f54:	4602      	mov	r2, r0
   13f56:	460b      	mov	r3, r1
   13f58:	4610      	mov	r0, r2
   13f5a:	4619      	mov	r1, r3
   13f5c:	f04f 0200 	mov.w	r2, #0
   13f60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13f64:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13f68:	f003 fd02 	bl	17970 <__aeabi_dmul>
   13f6c:	4602      	mov	r2, r0
   13f6e:	460b      	mov	r3, r1
   13f70:	4610      	mov	r0, r2
   13f72:	4619      	mov	r1, r3
   13f74:	f003 ffde 	bl	17f34 <__aeabi_d2f>
   13f78:	4602      	mov	r2, r0
   13f7a:	f24b 2344 	movw	r3, #45636	; 0xb244
   13f7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f82:	601a      	str	r2, [r3, #0]
   13f84:	e012      	b.n	13fac <auto_nav+0x1c84>
   13f86:	f24b 2344 	movw	r3, #45636	; 0xb244
   13f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f8e:	681b      	ldr	r3, [r3, #0]
   13f90:	4618      	mov	r0, r3
   13f92:	f04f 0100 	mov.w	r1, #0
   13f96:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13f9a:	f004 f821 	bl	17fe0 <__addsf3>
   13f9e:	4603      	mov	r3, r0
   13fa0:	461a      	mov	r2, r3
   13fa2:	f24b 2344 	movw	r3, #45636	; 0xb244
   13fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13faa:	601a      	str	r2, [r3, #0]
   13fac:	f24b 2344 	movw	r3, #45636	; 0xb244
   13fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fb4:	681b      	ldr	r3, [r3, #0]
   13fb6:	4618      	mov	r0, r3
   13fb8:	f04f 0100 	mov.w	r1, #0
   13fbc:	f004 fab6 	bl	1852c <__aeabi_fcmplt>
   13fc0:	4603      	mov	r3, r0
   13fc2:	2b00      	cmp	r3, #0
   13fc4:	d1df      	bne.n	13f86 <auto_nav+0x1c5e>
   13fc6:	e012      	b.n	13fee <auto_nav+0x1cc6>
   13fc8:	f24b 2344 	movw	r3, #45636	; 0xb244
   13fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fd0:	681b      	ldr	r3, [r3, #0]
   13fd2:	4618      	mov	r0, r3
   13fd4:	f04f 0100 	mov.w	r1, #0
   13fd8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13fdc:	f003 fffe 	bl	17fdc <__aeabi_fsub>
   13fe0:	4603      	mov	r3, r0
   13fe2:	461a      	mov	r2, r3
   13fe4:	f24b 2344 	movw	r3, #45636	; 0xb244
   13fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fec:	601a      	str	r2, [r3, #0]
   13fee:	f24b 2344 	movw	r3, #45636	; 0xb244
   13ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ff6:	681b      	ldr	r3, [r3, #0]
   13ff8:	4618      	mov	r0, r3
   13ffa:	f04f 0100 	mov.w	r1, #0
   13ffe:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14002:	f004 faa7 	bl	18554 <__aeabi_fcmpge>
   14006:	4603      	mov	r3, r0
   14008:	2b00      	cmp	r3, #0
   1400a:	d1dd      	bne.n	13fc8 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   1400c:	f24b 2344 	movw	r3, #45636	; 0xb244
   14010:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14014:	681b      	ldr	r3, [r3, #0]
   14016:	4618      	mov	r0, r3
   14018:	f04f 0100 	mov.w	r1, #0
   1401c:	f004 faa4 	bl	18568 <__aeabi_fcmpgt>
   14020:	4603      	mov	r3, r0
   14022:	2b00      	cmp	r3, #0
   14024:	d100      	bne.n	14028 <auto_nav+0x1d00>
        return;
   14026:	e251      	b.n	144cc <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14028:	f24b 2344 	movw	r3, #45636	; 0xb244
   1402c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14030:	681b      	ldr	r3, [r3, #0]
   14032:	4618      	mov	r0, r3
   14034:	f04f 0100 	mov.w	r1, #0
   14038:	f2c4 1120 	movt	r1, #16672	; 0x4120
   1403c:	f004 fa76 	bl	1852c <__aeabi_fcmplt>
   14040:	4603      	mov	r3, r0
   14042:	2b00      	cmp	r3, #0
   14044:	d100      	bne.n	14048 <auto_nav+0x1d20>
        return;
   14046:	e241      	b.n	144cc <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14048:	f24b 2328 	movw	r3, #45608	; 0xb228
   1404c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14050:	781b      	ldrb	r3, [r3, #0]
   14052:	3301      	adds	r3, #1
   14054:	b2da      	uxtb	r2, r3
   14056:	f24b 2328 	movw	r3, #45608	; 0xb228
   1405a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1405e:	701a      	strb	r2, [r3, #0]
   14060:	f24b 4384 	movw	r3, #46212	; 0xb484
   14064:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14068:	681a      	ldr	r2, [r3, #0]
   1406a:	f24b 232c 	movw	r3, #45612	; 0xb22c
   1406e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14072:	601a      	str	r2, [r3, #0]
   14074:	f24b 4388 	movw	r3, #46216	; 0xb488
   14078:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1407c:	681a      	ldr	r2, [r3, #0]
   1407e:	f24b 2330 	movw	r3, #45616	; 0xb230
   14082:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14086:	601a      	str	r2, [r3, #0]
   14088:	f24b 233c 	movw	r3, #45628	; 0xb23c
   1408c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14090:	2200      	movs	r2, #0
   14092:	801a      	strh	r2, [r3, #0]
   14094:	f24b 2340 	movw	r3, #45632	; 0xb240
   14098:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1409c:	f04f 0200 	mov.w	r2, #0
   140a0:	601a      	str	r2, [r3, #0]
   140a2:	e213      	b.n	144cc <auto_nav+0x21a4>
   140a4:	f3af 8000 	nop.w
   140a8:	54442d18 	.word	0x54442d18
   140ac:	3ff921fb 	.word	0x3ff921fb
   140b0:	54442d18 	.word	0x54442d18
   140b4:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   140b8:	f24b 2328 	movw	r3, #45608	; 0xb228
   140bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140c0:	781b      	ldrb	r3, [r3, #0]
   140c2:	2b02      	cmp	r3, #2
   140c4:	f040 81ad 	bne.w	14422 <auto_nav+0x20fa>
    {
         nav_stage = 2;
   140c8:	f24b 2328 	movw	r3, #45608	; 0xb228
   140cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140d0:	2202      	movs	r2, #2
   140d2:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   140d4:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   140d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140dc:	2200      	movs	r2, #0
   140de:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   140e0:	f24b 2354 	movw	r3, #45652	; 0xb254
   140e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140e8:	f04f 0200 	mov.w	r2, #0
   140ec:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   140ee:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   140f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140f6:	2203      	movs	r2, #3
   140f8:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   140fa:	f240 4328 	movw	r3, #1064	; 0x428
   140fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   14104:	f240 4324 	movw	r3, #1060	; 0x424
   14108:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1410c:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   1410e:	f24b 231c 	movw	r3, #45596	; 0xb21c
   14112:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14116:	f04f 0200 	mov.w	r2, #0
   1411a:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   1411c:	f24b 4388 	movw	r3, #46216	; 0xb488
   14120:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14124:	681a      	ldr	r2, [r3, #0]
   14126:	f240 4328 	movw	r3, #1064	; 0x428
   1412a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1412e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14130:	4610      	mov	r0, r2
   14132:	4619      	mov	r1, r3
   14134:	f003 ff52 	bl	17fdc <__aeabi_fsub>
   14138:	4603      	mov	r3, r0
   1413a:	4618      	mov	r0, r3
   1413c:	f003 fbc4 	bl	178c8 <__aeabi_f2d>
   14140:	4604      	mov	r4, r0
   14142:	460d      	mov	r5, r1
   14144:	f24b 4384 	movw	r3, #46212	; 0xb484
   14148:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1414c:	681a      	ldr	r2, [r3, #0]
   1414e:	f240 4328 	movw	r3, #1064	; 0x428
   14152:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14158:	4610      	mov	r0, r2
   1415a:	4619      	mov	r1, r3
   1415c:	f003 ff3e 	bl	17fdc <__aeabi_fsub>
   14160:	4603      	mov	r3, r0
   14162:	4618      	mov	r0, r3
   14164:	f003 fbb0 	bl	178c8 <__aeabi_f2d>
   14168:	4602      	mov	r2, r0
   1416a:	460b      	mov	r3, r1
   1416c:	4620      	mov	r0, r4
   1416e:	4629      	mov	r1, r5
   14170:	f001 fbfa 	bl	15968 <pp_atan2>
   14174:	4602      	mov	r2, r0
   14176:	460b      	mov	r3, r1
   14178:	4610      	mov	r0, r2
   1417a:	4619      	mov	r1, r3
   1417c:	f003 feda 	bl	17f34 <__aeabi_d2f>
   14180:	4603      	mov	r3, r0
   14182:	607b      	str	r3, [r7, #4]
   14184:	6878      	ldr	r0, [r7, #4]
   14186:	f003 fb9f 	bl	178c8 <__aeabi_f2d>
   1418a:	4604      	mov	r4, r0
   1418c:	460d      	mov	r5, r1
   1418e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   14192:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14196:	681b      	ldr	r3, [r3, #0]
   14198:	4618      	mov	r0, r3
   1419a:	f04f 0100 	mov.w	r1, #0
   1419e:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   141a2:	f004 f825 	bl	181f0 <__aeabi_fmul>
   141a6:	4603      	mov	r3, r0
   141a8:	4618      	mov	r0, r3
   141aa:	f003 fb8d 	bl	178c8 <__aeabi_f2d>
   141ae:	4602      	mov	r2, r0
   141b0:	460b      	mov	r3, r1
   141b2:	f04f 0000 	mov.w	r0, #0
   141b6:	f04f 0100 	mov.w	r1, #0
   141ba:	f2c4 0114 	movt	r1, #16404	; 0x4014
   141be:	f003 fd01 	bl	17bc4 <__aeabi_ddiv>
   141c2:	4602      	mov	r2, r0
   141c4:	460b      	mov	r3, r1
   141c6:	4620      	mov	r0, r4
   141c8:	4629      	mov	r1, r5
   141ca:	f003 fa1f 	bl	1760c <__adddf3>
   141ce:	4602      	mov	r2, r0
   141d0:	460b      	mov	r3, r1
   141d2:	4610      	mov	r0, r2
   141d4:	4619      	mov	r1, r3
   141d6:	f003 fead 	bl	17f34 <__aeabi_d2f>
   141da:	4603      	mov	r3, r0
   141dc:	603b      	str	r3, [r7, #0]
   141de:	f240 4328 	movw	r3, #1064	; 0x428
   141e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   141e8:	4618      	mov	r0, r3
   141ea:	f003 fb6d 	bl	178c8 <__aeabi_f2d>
   141ee:	4604      	mov	r4, r0
   141f0:	460d      	mov	r5, r1
   141f2:	6838      	ldr	r0, [r7, #0]
   141f4:	f003 fb68 	bl	178c8 <__aeabi_f2d>
   141f8:	4602      	mov	r2, r0
   141fa:	460b      	mov	r3, r1
   141fc:	4610      	mov	r0, r2
   141fe:	4619      	mov	r1, r3
   14200:	a3b5      	add	r3, pc, #724	; (adr r3, 144d8 <auto_nav+0x21b0>)
   14202:	e9d3 2300 	ldrd	r2, r3, [r3]
   14206:	f003 fa01 	bl	1760c <__adddf3>
   1420a:	4602      	mov	r2, r0
   1420c:	460b      	mov	r3, r1
   1420e:	4610      	mov	r0, r2
   14210:	4619      	mov	r1, r3
   14212:	f001 fc69 	bl	15ae8 <pp_sin>
   14216:	4602      	mov	r2, r0
   14218:	460b      	mov	r3, r1
   1421a:	4610      	mov	r0, r2
   1421c:	4619      	mov	r1, r3
   1421e:	f04f 0200 	mov.w	r2, #0
   14222:	f04f 0300 	mov.w	r3, #0
   14226:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1422a:	f003 fba1 	bl	17970 <__aeabi_dmul>
   1422e:	4602      	mov	r2, r0
   14230:	460b      	mov	r3, r1
   14232:	4620      	mov	r0, r4
   14234:	4629      	mov	r1, r5
   14236:	f003 f9e9 	bl	1760c <__adddf3>
   1423a:	4602      	mov	r2, r0
   1423c:	460b      	mov	r3, r1
   1423e:	4610      	mov	r0, r2
   14240:	4619      	mov	r1, r3
   14242:	f003 fe77 	bl	17f34 <__aeabi_d2f>
   14246:	4606      	mov	r6, r0
   14248:	f240 4328 	movw	r3, #1064	; 0x428
   1424c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14252:	4618      	mov	r0, r3
   14254:	f003 fb38 	bl	178c8 <__aeabi_f2d>
   14258:	4604      	mov	r4, r0
   1425a:	460d      	mov	r5, r1
   1425c:	6838      	ldr	r0, [r7, #0]
   1425e:	f003 fb33 	bl	178c8 <__aeabi_f2d>
   14262:	4602      	mov	r2, r0
   14264:	460b      	mov	r3, r1
   14266:	4610      	mov	r0, r2
   14268:	4619      	mov	r1, r3
   1426a:	f001 fc3d 	bl	15ae8 <pp_sin>
   1426e:	4602      	mov	r2, r0
   14270:	460b      	mov	r3, r1
   14272:	4610      	mov	r0, r2
   14274:	4619      	mov	r1, r3
   14276:	f04f 0200 	mov.w	r2, #0
   1427a:	f04f 0300 	mov.w	r3, #0
   1427e:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14282:	f003 fb75 	bl	17970 <__aeabi_dmul>
   14286:	4602      	mov	r2, r0
   14288:	460b      	mov	r3, r1
   1428a:	4620      	mov	r0, r4
   1428c:	4629      	mov	r1, r5
   1428e:	f003 f9bd 	bl	1760c <__adddf3>
   14292:	4602      	mov	r2, r0
   14294:	460b      	mov	r3, r1
   14296:	4610      	mov	r0, r2
   14298:	4619      	mov	r1, r3
   1429a:	f003 fe4b 	bl	17f34 <__aeabi_d2f>
   1429e:	4603      	mov	r3, r0
   142a0:	4630      	mov	r0, r6
   142a2:	4619      	mov	r1, r3
   142a4:	f000 fa04 	bl	146b0 <fly_to_xy>
   142a8:	6838      	ldr	r0, [r7, #0]
   142aa:	f003 fb0d 	bl	178c8 <__aeabi_f2d>
   142ae:	4602      	mov	r2, r0
   142b0:	460b      	mov	r3, r1
   142b2:	a189      	add	r1, pc, #548	; (adr r1, 144d8 <auto_nav+0x21b0>)
   142b4:	e9d1 0100 	ldrd	r0, r1, [r1]
   142b8:	f003 f9a6 	bl	17608 <__aeabi_dsub>
   142bc:	4602      	mov	r2, r0
   142be:	460b      	mov	r3, r1
   142c0:	4610      	mov	r0, r2
   142c2:	4619      	mov	r1, r3
   142c4:	a386      	add	r3, pc, #536	; (adr r3, 144e0 <auto_nav+0x21b8>)
   142c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   142ca:	f003 fc7b 	bl	17bc4 <__aeabi_ddiv>
   142ce:	4602      	mov	r2, r0
   142d0:	460b      	mov	r3, r1
   142d2:	4610      	mov	r0, r2
   142d4:	4619      	mov	r1, r3
   142d6:	f04f 0200 	mov.w	r2, #0
   142da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   142de:	f2c4 0366 	movt	r3, #16486	; 0x4066
   142e2:	f003 fb45 	bl	17970 <__aeabi_dmul>
   142e6:	4602      	mov	r2, r0
   142e8:	460b      	mov	r3, r1
   142ea:	4610      	mov	r0, r2
   142ec:	4619      	mov	r1, r3
   142ee:	f003 fe21 	bl	17f34 <__aeabi_d2f>
   142f2:	4602      	mov	r2, r0
   142f4:	f24b 2344 	movw	r3, #45636	; 0xb244
   142f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142fc:	601a      	str	r2, [r3, #0]
   142fe:	e012      	b.n	14326 <auto_nav+0x1ffe>
   14300:	f24b 2344 	movw	r3, #45636	; 0xb244
   14304:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14308:	681b      	ldr	r3, [r3, #0]
   1430a:	4618      	mov	r0, r3
   1430c:	f04f 0100 	mov.w	r1, #0
   14310:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14314:	f003 fe64 	bl	17fe0 <__addsf3>
   14318:	4603      	mov	r3, r0
   1431a:	461a      	mov	r2, r3
   1431c:	f24b 2344 	movw	r3, #45636	; 0xb244
   14320:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14324:	601a      	str	r2, [r3, #0]
   14326:	f24b 2344 	movw	r3, #45636	; 0xb244
   1432a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1432e:	681b      	ldr	r3, [r3, #0]
   14330:	4618      	mov	r0, r3
   14332:	f04f 0100 	mov.w	r1, #0
   14336:	f004 f8f9 	bl	1852c <__aeabi_fcmplt>
   1433a:	4603      	mov	r3, r0
   1433c:	2b00      	cmp	r3, #0
   1433e:	d1df      	bne.n	14300 <auto_nav+0x1fd8>
   14340:	e012      	b.n	14368 <auto_nav+0x2040>
   14342:	f24b 2344 	movw	r3, #45636	; 0xb244
   14346:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1434a:	681b      	ldr	r3, [r3, #0]
   1434c:	4618      	mov	r0, r3
   1434e:	f04f 0100 	mov.w	r1, #0
   14352:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14356:	f003 fe41 	bl	17fdc <__aeabi_fsub>
   1435a:	4603      	mov	r3, r0
   1435c:	461a      	mov	r2, r3
   1435e:	f24b 2344 	movw	r3, #45636	; 0xb244
   14362:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14366:	601a      	str	r2, [r3, #0]
   14368:	f24b 2344 	movw	r3, #45636	; 0xb244
   1436c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14370:	681b      	ldr	r3, [r3, #0]
   14372:	4618      	mov	r0, r3
   14374:	f04f 0100 	mov.w	r1, #0
   14378:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1437c:	f004 f8ea 	bl	18554 <__aeabi_fcmpge>
   14380:	4603      	mov	r3, r0
   14382:	2b00      	cmp	r3, #0
   14384:	d1dd      	bne.n	14342 <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   14386:	f24b 2344 	movw	r3, #45636	; 0xb244
   1438a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1438e:	681b      	ldr	r3, [r3, #0]
   14390:	4618      	mov	r0, r3
   14392:	f04f 0100 	mov.w	r1, #0
   14396:	f2c4 3134 	movt	r1, #17204	; 0x4334
   1439a:	f004 f8e5 	bl	18568 <__aeabi_fcmpgt>
   1439e:	4603      	mov	r3, r0
   143a0:	2b00      	cmp	r3, #0
   143a2:	d100      	bne.n	143a6 <auto_nav+0x207e>
          return;
   143a4:	e092      	b.n	144cc <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   143a6:	f24b 2344 	movw	r3, #45636	; 0xb244
   143aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143ae:	681b      	ldr	r3, [r3, #0]
   143b0:	4618      	mov	r0, r3
   143b2:	f04f 0100 	mov.w	r1, #0
   143b6:	f2c4 313e 	movt	r1, #17214	; 0x433e
   143ba:	f004 f8b7 	bl	1852c <__aeabi_fcmplt>
   143be:	4603      	mov	r3, r0
   143c0:	2b00      	cmp	r3, #0
   143c2:	d100      	bne.n	143c6 <auto_nav+0x209e>
          return;
   143c4:	e082      	b.n	144cc <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   143c6:	f24b 2328 	movw	r3, #45608	; 0xb228
   143ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143ce:	781b      	ldrb	r3, [r3, #0]
   143d0:	3301      	adds	r3, #1
   143d2:	b2da      	uxtb	r2, r3
   143d4:	f24b 2328 	movw	r3, #45608	; 0xb228
   143d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143dc:	701a      	strb	r2, [r3, #0]
   143de:	f24b 4384 	movw	r3, #46212	; 0xb484
   143e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143e6:	681a      	ldr	r2, [r3, #0]
   143e8:	f24b 232c 	movw	r3, #45612	; 0xb22c
   143ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143f0:	601a      	str	r2, [r3, #0]
   143f2:	f24b 4388 	movw	r3, #46216	; 0xb488
   143f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143fa:	681a      	ldr	r2, [r3, #0]
   143fc:	f24b 2330 	movw	r3, #45616	; 0xb230
   14400:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14404:	601a      	str	r2, [r3, #0]
   14406:	f24b 233c 	movw	r3, #45628	; 0xb23c
   1440a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1440e:	2200      	movs	r2, #0
   14410:	801a      	strh	r2, [r3, #0]
   14412:	f24b 2340 	movw	r3, #45632	; 0xb240
   14416:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1441a:	f04f 0200 	mov.w	r2, #0
   1441e:	601a      	str	r2, [r3, #0]
   14420:	e054      	b.n	144cc <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   14422:	f24b 2328 	movw	r3, #45608	; 0xb228
   14426:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1442a:	781b      	ldrb	r3, [r3, #0]
   1442c:	2b03      	cmp	r3, #3
   1442e:	d106      	bne.n	1443e <auto_nav+0x2116>
    {
	  nav_stage = 3;
   14430:	f24b 2328 	movw	r3, #45608	; 0xb228
   14434:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14438:	2203      	movs	r2, #3
   1443a:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   1443c:	e44b      	b.n	13cd6 <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   1443e:	f24b 2328 	movw	r3, #45608	; 0xb228
   14442:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14446:	781b      	ldrb	r3, [r3, #0]
   14448:	2b04      	cmp	r3, #4
   1444a:	d13f      	bne.n	144cc <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   1444c:	f24b 2328 	movw	r3, #45608	; 0xb228
   14450:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14454:	2204      	movs	r2, #4
   14456:	701a      	strb	r2, [r3, #0]
        NextBlock()
   14458:	f24b 2329 	movw	r3, #45609	; 0xb229
   1445c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14460:	781b      	ldrb	r3, [r3, #0]
   14462:	3301      	adds	r3, #1
   14464:	b2da      	uxtb	r2, r3
   14466:	f24b 2329 	movw	r3, #45609	; 0xb229
   1446a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1446e:	701a      	strb	r2, [r3, #0]
   14470:	f24b 2328 	movw	r3, #45608	; 0xb228
   14474:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14478:	2200      	movs	r2, #0
   1447a:	701a      	strb	r2, [r3, #0]
   1447c:	f24b 233e 	movw	r3, #45630	; 0xb23e
   14480:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14484:	2200      	movs	r2, #0
   14486:	801a      	strh	r2, [r3, #0]
   14488:	f24b 4384 	movw	r3, #46212	; 0xb484
   1448c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14490:	681a      	ldr	r2, [r3, #0]
   14492:	f24b 232c 	movw	r3, #45612	; 0xb22c
   14496:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1449a:	601a      	str	r2, [r3, #0]
   1449c:	f24b 4388 	movw	r3, #46216	; 0xb488
   144a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144a4:	681a      	ldr	r2, [r3, #0]
   144a6:	f24b 2330 	movw	r3, #45616	; 0xb230
   144aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144ae:	601a      	str	r2, [r3, #0]
   144b0:	f24b 233c 	movw	r3, #45628	; 0xb23c
   144b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144b8:	2200      	movs	r2, #0
   144ba:	801a      	strh	r2, [r3, #0]
   144bc:	f24b 2340 	movw	r3, #45632	; 0xb240
   144c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144c4:	f04f 0200 	mov.w	r2, #0
   144c8:	601a      	str	r2, [r3, #0]
   144ca:	bf00      	nop
    else { }
}
else { }

//#endif
}
   144cc:	372c      	adds	r7, #44	; 0x2c
   144ce:	46bd      	mov	sp, r7
   144d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   144d2:	bf00      	nop
   144d4:	f3af 8000 	nop.w
   144d8:	54442d18 	.word	0x54442d18
   144dc:	3ff921fb 	.word	0x3ff921fb
   144e0:	54442d18 	.word	0x54442d18
   144e4:	400921fb 	.word	0x400921fb

000144e8 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   144e8:	b590      	push	{r4, r7, lr}
   144ea:	b087      	sub	sp, #28
   144ec:	af00      	add	r7, sp, #0
   144ee:	4603      	mov	r3, r0
   144f0:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   144f2:	79f9      	ldrb	r1, [r7, #7]
   144f4:	f240 4228 	movw	r2, #1064	; 0x428
   144f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   144fc:	460b      	mov	r3, r1
   144fe:	005b      	lsls	r3, r3, #1
   14500:	440b      	add	r3, r1
   14502:	009b      	lsls	r3, r3, #2
   14504:	4413      	add	r3, r2
   14506:	681a      	ldr	r2, [r3, #0]
   14508:	f24b 4384 	movw	r3, #46212	; 0xb484
   1450c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14510:	681b      	ldr	r3, [r3, #0]
   14512:	4610      	mov	r0, r2
   14514:	4619      	mov	r1, r3
   14516:	f003 fd61 	bl	17fdc <__aeabi_fsub>
   1451a:	4603      	mov	r3, r0
   1451c:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   1451e:	79f9      	ldrb	r1, [r7, #7]
   14520:	f240 4228 	movw	r2, #1064	; 0x428
   14524:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14528:	460b      	mov	r3, r1
   1452a:	005b      	lsls	r3, r3, #1
   1452c:	440b      	add	r3, r1
   1452e:	009b      	lsls	r3, r3, #2
   14530:	4413      	add	r3, r2
   14532:	3304      	adds	r3, #4
   14534:	681a      	ldr	r2, [r3, #0]
   14536:	f24b 4388 	movw	r3, #46216	; 0xb488
   1453a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1453e:	681b      	ldr	r3, [r3, #0]
   14540:	4610      	mov	r0, r2
   14542:	4619      	mov	r1, r3
   14544:	f003 fd4a 	bl	17fdc <__aeabi_fsub>
   14548:	4603      	mov	r3, r0
   1454a:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   1454c:	6978      	ldr	r0, [r7, #20]
   1454e:	6979      	ldr	r1, [r7, #20]
   14550:	f003 fe4e 	bl	181f0 <__aeabi_fmul>
   14554:	4603      	mov	r3, r0
   14556:	461c      	mov	r4, r3
   14558:	6938      	ldr	r0, [r7, #16]
   1455a:	6939      	ldr	r1, [r7, #16]
   1455c:	f003 fe48 	bl	181f0 <__aeabi_fmul>
   14560:	4603      	mov	r3, r0
   14562:	4620      	mov	r0, r4
   14564:	4619      	mov	r1, r3
   14566:	f003 fd3b 	bl	17fe0 <__addsf3>
   1456a:	4603      	mov	r3, r0
   1456c:	461a      	mov	r2, r3
   1456e:	f24b 235c 	movw	r3, #45660	; 0xb25c
   14572:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14576:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   14578:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   1457c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14580:	681b      	ldr	r3, [r3, #0]
   14582:	4618      	mov	r0, r3
   14584:	f04f 0100 	mov.w	r1, #0
   14588:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   1458c:	f003 fe30 	bl	181f0 <__aeabi_fmul>
   14590:	4603      	mov	r3, r0
   14592:	461a      	mov	r2, r3
   14594:	f24b 2368 	movw	r3, #45672	; 0xb268
   14598:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1459c:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   1459e:	f24b 2368 	movw	r3, #45672	; 0xb268
   145a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145a6:	681b      	ldr	r3, [r3, #0]
   145a8:	4618      	mov	r0, r3
   145aa:	f04f 0100 	mov.w	r1, #0
   145ae:	f2c4 2120 	movt	r1, #16928	; 0x4220
   145b2:	f003 ffbb 	bl	1852c <__aeabi_fcmplt>
   145b6:	4603      	mov	r3, r0
   145b8:	2b00      	cmp	r3, #0
   145ba:	d004      	beq.n	145c6 <approaching+0xde>
   145bc:	f04f 0200 	mov.w	r2, #0
   145c0:	f2c4 2220 	movt	r2, #16928	; 0x4220
   145c4:	e004      	b.n	145d0 <approaching+0xe8>
   145c6:	f24b 2368 	movw	r3, #45672	; 0xb268
   145ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145ce:	681a      	ldr	r2, [r3, #0]
   145d0:	f24b 2368 	movw	r3, #45672	; 0xb268
   145d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145d8:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   145da:	f24b 2368 	movw	r3, #45672	; 0xb268
   145de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145e2:	681a      	ldr	r2, [r3, #0]
   145e4:	f24b 2368 	movw	r3, #45672	; 0xb268
   145e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145ec:	681b      	ldr	r3, [r3, #0]
   145ee:	4610      	mov	r0, r2
   145f0:	4619      	mov	r1, r3
   145f2:	f003 fdfd 	bl	181f0 <__aeabi_fmul>
   145f6:	4603      	mov	r3, r0
   145f8:	461a      	mov	r2, r3
   145fa:	f24b 235c 	movw	r3, #45660	; 0xb25c
   145fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14602:	681b      	ldr	r3, [r3, #0]
   14604:	4610      	mov	r0, r2
   14606:	4619      	mov	r1, r3
   14608:	f003 ffae 	bl	18568 <__aeabi_fcmpgt>
   1460c:	4603      	mov	r3, r0
   1460e:	2b00      	cmp	r3, #0
   14610:	d001      	beq.n	14616 <approaching+0x12e>
    return TRUE;
   14612:	2301      	movs	r3, #1
   14614:	e048      	b.n	146a8 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   14616:	79f9      	ldrb	r1, [r7, #7]
   14618:	f240 4228 	movw	r2, #1064	; 0x428
   1461c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14620:	460b      	mov	r3, r1
   14622:	005b      	lsls	r3, r3, #1
   14624:	440b      	add	r3, r1
   14626:	009b      	lsls	r3, r3, #2
   14628:	4413      	add	r3, r2
   1462a:	681a      	ldr	r2, [r3, #0]
   1462c:	f24b 232c 	movw	r3, #45612	; 0xb22c
   14630:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14634:	681b      	ldr	r3, [r3, #0]
   14636:	4610      	mov	r0, r2
   14638:	4619      	mov	r1, r3
   1463a:	f003 fccf 	bl	17fdc <__aeabi_fsub>
   1463e:	4603      	mov	r3, r0
   14640:	4618      	mov	r0, r3
   14642:	6979      	ldr	r1, [r7, #20]
   14644:	f003 fdd4 	bl	181f0 <__aeabi_fmul>
   14648:	4603      	mov	r3, r0
   1464a:	461c      	mov	r4, r3
   1464c:	79f9      	ldrb	r1, [r7, #7]
   1464e:	f240 4228 	movw	r2, #1064	; 0x428
   14652:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14656:	460b      	mov	r3, r1
   14658:	005b      	lsls	r3, r3, #1
   1465a:	440b      	add	r3, r1
   1465c:	009b      	lsls	r3, r3, #2
   1465e:	4413      	add	r3, r2
   14660:	3304      	adds	r3, #4
   14662:	681a      	ldr	r2, [r3, #0]
   14664:	f24b 2330 	movw	r3, #45616	; 0xb230
   14668:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1466c:	681b      	ldr	r3, [r3, #0]
   1466e:	4610      	mov	r0, r2
   14670:	4619      	mov	r1, r3
   14672:	f003 fcb3 	bl	17fdc <__aeabi_fsub>
   14676:	4603      	mov	r3, r0
   14678:	4618      	mov	r0, r3
   1467a:	6939      	ldr	r1, [r7, #16]
   1467c:	f003 fdb8 	bl	181f0 <__aeabi_fmul>
   14680:	4603      	mov	r3, r0
   14682:	4620      	mov	r0, r4
   14684:	4619      	mov	r1, r3
   14686:	f003 fcab 	bl	17fe0 <__addsf3>
   1468a:	4603      	mov	r3, r0
   1468c:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   1468e:	2301      	movs	r3, #1
   14690:	461c      	mov	r4, r3
   14692:	68f8      	ldr	r0, [r7, #12]
   14694:	f04f 0100 	mov.w	r1, #0
   14698:	f003 ff48 	bl	1852c <__aeabi_fcmplt>
   1469c:	4603      	mov	r3, r0
   1469e:	2b00      	cmp	r3, #0
   146a0:	d101      	bne.n	146a6 <approaching+0x1be>
   146a2:	2300      	movs	r3, #0
   146a4:	461c      	mov	r4, r3
   146a6:	b2e3      	uxtb	r3, r4
}
   146a8:	4618      	mov	r0, r3
   146aa:	371c      	adds	r7, #28
   146ac:	46bd      	mov	sp, r7
   146ae:	bd90      	pop	{r4, r7, pc}

000146b0 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   146b0:	b5b0      	push	{r4, r5, r7, lr}
   146b2:	b082      	sub	sp, #8
   146b4:	af00      	add	r7, sp, #0
   146b6:	6078      	str	r0, [r7, #4]
   146b8:	6039      	str	r1, [r7, #0]
  desired_x = x;
   146ba:	f24b 2348 	movw	r3, #45640	; 0xb248
   146be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146c2:	687a      	ldr	r2, [r7, #4]
   146c4:	601a      	str	r2, [r3, #0]
  desired_y = y;
   146c6:	f24b 234c 	movw	r3, #45644	; 0xb24c
   146ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146ce:	683a      	ldr	r2, [r7, #0]
   146d0:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   146d2:	f24b 4388 	movw	r3, #46216	; 0xb488
   146d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146da:	681b      	ldr	r3, [r3, #0]
   146dc:	6838      	ldr	r0, [r7, #0]
   146de:	4619      	mov	r1, r3
   146e0:	f003 fc7c 	bl	17fdc <__aeabi_fsub>
   146e4:	4603      	mov	r3, r0
   146e6:	4618      	mov	r0, r3
   146e8:	f003 f8ee 	bl	178c8 <__aeabi_f2d>
   146ec:	4604      	mov	r4, r0
   146ee:	460d      	mov	r5, r1
   146f0:	f24b 4384 	movw	r3, #46212	; 0xb484
   146f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146f8:	681b      	ldr	r3, [r3, #0]
   146fa:	6878      	ldr	r0, [r7, #4]
   146fc:	4619      	mov	r1, r3
   146fe:	f003 fc6d 	bl	17fdc <__aeabi_fsub>
   14702:	4603      	mov	r3, r0
   14704:	4618      	mov	r0, r3
   14706:	f003 f8df 	bl	178c8 <__aeabi_f2d>
   1470a:	4602      	mov	r2, r0
   1470c:	460b      	mov	r3, r1
   1470e:	4620      	mov	r0, r4
   14710:	4629      	mov	r1, r5
   14712:	f001 f929 	bl	15968 <pp_atan2>
   14716:	4602      	mov	r2, r0
   14718:	460b      	mov	r3, r1
   1471a:	a10b      	add	r1, pc, #44	; (adr r1, 14748 <fly_to_xy+0x98>)
   1471c:	e9d1 0100 	ldrd	r0, r1, [r1]
   14720:	f002 ff72 	bl	17608 <__aeabi_dsub>
   14724:	4602      	mov	r2, r0
   14726:	460b      	mov	r3, r1
   14728:	4610      	mov	r0, r2
   1472a:	4619      	mov	r1, r3
   1472c:	f003 fc02 	bl	17f34 <__aeabi_d2f>
   14730:	4602      	mov	r2, r0
   14732:	f24b 2314 	movw	r3, #45588	; 0xb214
   14736:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1473a:	601a      	str	r2, [r3, #0]
}
   1473c:	3708      	adds	r7, #8
   1473e:	46bd      	mov	sp, r7
   14740:	bdb0      	pop	{r4, r5, r7, pc}
   14742:	bf00      	nop
   14744:	f3af 8000 	nop.w
   14748:	54442d18 	.word	0x54442d18
   1474c:	3ff921fb 	.word	0x3ff921fb

00014750 <fly_to>:

static void fly_to(uint8_t wp) { 
   14750:	b580      	push	{r7, lr}
   14752:	b082      	sub	sp, #8
   14754:	af00      	add	r7, sp, #0
   14756:	4603      	mov	r3, r0
   14758:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   1475a:	79f9      	ldrb	r1, [r7, #7]
   1475c:	f240 4228 	movw	r2, #1064	; 0x428
   14760:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14764:	460b      	mov	r3, r1
   14766:	005b      	lsls	r3, r3, #1
   14768:	440b      	add	r3, r1
   1476a:	009b      	lsls	r3, r3, #2
   1476c:	4413      	add	r3, r2
   1476e:	6818      	ldr	r0, [r3, #0]
   14770:	79f9      	ldrb	r1, [r7, #7]
   14772:	f240 4228 	movw	r2, #1064	; 0x428
   14776:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1477a:	460b      	mov	r3, r1
   1477c:	005b      	lsls	r3, r3, #1
   1477e:	440b      	add	r3, r1
   14780:	009b      	lsls	r3, r3, #2
   14782:	4413      	add	r3, r2
   14784:	3304      	adds	r3, #4
   14786:	681b      	ldr	r3, [r3, #0]
   14788:	4619      	mov	r1, r3
   1478a:	f7ff ff91 	bl	146b0 <fly_to_xy>
}
   1478e:	3708      	adds	r7, #8
   14790:	46bd      	mov	sp, r7
   14792:	bd80      	pop	{r7, pc}

00014794 <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   14794:	b5b0      	push	{r4, r5, r7, lr}
   14796:	b088      	sub	sp, #32
   14798:	af00      	add	r7, sp, #0
   1479a:	4602      	mov	r2, r0
   1479c:	460b      	mov	r3, r1
   1479e:	71fa      	strb	r2, [r7, #7]
   147a0:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   147a2:	79f9      	ldrb	r1, [r7, #7]
   147a4:	f240 4228 	movw	r2, #1064	; 0x428
   147a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   147ac:	460b      	mov	r3, r1
   147ae:	005b      	lsls	r3, r3, #1
   147b0:	440b      	add	r3, r1
   147b2:	009b      	lsls	r3, r3, #2
   147b4:	4413      	add	r3, r2
   147b6:	681b      	ldr	r3, [r3, #0]
   147b8:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   147ba:	79f9      	ldrb	r1, [r7, #7]
   147bc:	f240 4228 	movw	r2, #1064	; 0x428
   147c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   147c4:	460b      	mov	r3, r1
   147c6:	005b      	lsls	r3, r3, #1
   147c8:	440b      	add	r3, r1
   147ca:	009b      	lsls	r3, r3, #2
   147cc:	4413      	add	r3, r2
   147ce:	3304      	adds	r3, #4
   147d0:	681b      	ldr	r3, [r3, #0]
   147d2:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   147d4:	79b9      	ldrb	r1, [r7, #6]
   147d6:	f240 4228 	movw	r2, #1064	; 0x428
   147da:	f2c2 0200 	movt	r2, #8192	; 0x2000
   147de:	460b      	mov	r3, r1
   147e0:	005b      	lsls	r3, r3, #1
   147e2:	440b      	add	r3, r1
   147e4:	009b      	lsls	r3, r3, #2
   147e6:	4413      	add	r3, r2
   147e8:	681b      	ldr	r3, [r3, #0]
   147ea:	4618      	mov	r0, r3
   147ec:	69f9      	ldr	r1, [r7, #28]
   147ee:	f003 fbf5 	bl	17fdc <__aeabi_fsub>
   147f2:	4603      	mov	r3, r0
   147f4:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   147f6:	79b9      	ldrb	r1, [r7, #6]
   147f8:	f240 4228 	movw	r2, #1064	; 0x428
   147fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14800:	460b      	mov	r3, r1
   14802:	005b      	lsls	r3, r3, #1
   14804:	440b      	add	r3, r1
   14806:	009b      	lsls	r3, r3, #2
   14808:	4413      	add	r3, r2
   1480a:	3304      	adds	r3, #4
   1480c:	681b      	ldr	r3, [r3, #0]
   1480e:	4618      	mov	r0, r3
   14810:	69b9      	ldr	r1, [r7, #24]
   14812:	f003 fbe3 	bl	17fdc <__aeabi_fsub>
   14816:	4603      	mov	r3, r0
   14818:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   1481a:	6978      	ldr	r0, [r7, #20]
   1481c:	6979      	ldr	r1, [r7, #20]
   1481e:	f003 fce7 	bl	181f0 <__aeabi_fmul>
   14822:	4603      	mov	r3, r0
   14824:	461c      	mov	r4, r3
   14826:	6938      	ldr	r0, [r7, #16]
   14828:	6939      	ldr	r1, [r7, #16]
   1482a:	f003 fce1 	bl	181f0 <__aeabi_fmul>
   1482e:	4603      	mov	r3, r0
   14830:	4620      	mov	r0, r4
   14832:	4619      	mov	r1, r3
   14834:	f003 fbd4 	bl	17fe0 <__addsf3>
   14838:	4603      	mov	r3, r0
   1483a:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   1483c:	f24b 4384 	movw	r3, #46212	; 0xb484
   14840:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14844:	681b      	ldr	r3, [r3, #0]
   14846:	4618      	mov	r0, r3
   14848:	69f9      	ldr	r1, [r7, #28]
   1484a:	f003 fbc7 	bl	17fdc <__aeabi_fsub>
   1484e:	4603      	mov	r3, r0
   14850:	4618      	mov	r0, r3
   14852:	6979      	ldr	r1, [r7, #20]
   14854:	f003 fccc 	bl	181f0 <__aeabi_fmul>
   14858:	4603      	mov	r3, r0
   1485a:	461c      	mov	r4, r3
   1485c:	f24b 4388 	movw	r3, #46216	; 0xb488
   14860:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14864:	681b      	ldr	r3, [r3, #0]
   14866:	4618      	mov	r0, r3
   14868:	69b9      	ldr	r1, [r7, #24]
   1486a:	f003 fbb7 	bl	17fdc <__aeabi_fsub>
   1486e:	4603      	mov	r3, r0
   14870:	4618      	mov	r0, r3
   14872:	6939      	ldr	r1, [r7, #16]
   14874:	f003 fcbc 	bl	181f0 <__aeabi_fmul>
   14878:	4603      	mov	r3, r0
   1487a:	4620      	mov	r0, r4
   1487c:	4619      	mov	r1, r3
   1487e:	f003 fbaf 	bl	17fe0 <__addsf3>
   14882:	4603      	mov	r3, r0
   14884:	4618      	mov	r0, r3
   14886:	68f9      	ldr	r1, [r7, #12]
   14888:	f003 fd66 	bl	18358 <__aeabi_fdiv>
   1488c:	4603      	mov	r3, r0
   1488e:	461a      	mov	r2, r3
   14890:	f24b 236c 	movw	r3, #45676	; 0xb26c
   14894:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14898:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   1489a:	f24b 236c 	movw	r3, #45676	; 0xb26c
   1489e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148a2:	681b      	ldr	r3, [r3, #0]
   148a4:	4618      	mov	r0, r3
   148a6:	f04f 0100 	mov.w	r1, #0
   148aa:	f003 fe53 	bl	18554 <__aeabi_fcmpge>
   148ae:	4603      	mov	r3, r0
   148b0:	2b00      	cmp	r3, #0
   148b2:	d005      	beq.n	148c0 <route_to+0x12c>
   148b4:	f24b 236c 	movw	r3, #45676	; 0xb26c
   148b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148bc:	681a      	ldr	r2, [r3, #0]
   148be:	e001      	b.n	148c4 <route_to+0x130>
   148c0:	f04f 0200 	mov.w	r2, #0
   148c4:	f24b 236c 	movw	r3, #45676	; 0xb26c
   148c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148cc:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   148ce:	68f8      	ldr	r0, [r7, #12]
   148d0:	f002 fffa 	bl	178c8 <__aeabi_f2d>
   148d4:	4602      	mov	r2, r0
   148d6:	460b      	mov	r3, r1
   148d8:	4610      	mov	r0, r2
   148da:	4619      	mov	r1, r3
   148dc:	f001 f9f4 	bl	15cc8 <pp_sqrt>
   148e0:	4602      	mov	r2, r0
   148e2:	460b      	mov	r3, r1
   148e4:	4610      	mov	r0, r2
   148e6:	4619      	mov	r1, r3
   148e8:	f003 fb24 	bl	17f34 <__aeabi_d2f>
   148ec:	4602      	mov	r2, r0
   148ee:	f24b 2370 	movw	r3, #45680	; 0xb270
   148f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148f6:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   148f8:	f24b 236c 	movw	r3, #45676	; 0xb26c
   148fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14900:	681b      	ldr	r3, [r3, #0]
   14902:	4618      	mov	r0, r3
   14904:	f002 ffe0 	bl	178c8 <__aeabi_f2d>
   14908:	4604      	mov	r4, r0
   1490a:	460d      	mov	r5, r1
   1490c:	f24b 2368 	movw	r3, #45672	; 0xb268
   14910:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14914:	681a      	ldr	r2, [r3, #0]
   14916:	f24b 2370 	movw	r3, #45680	; 0xb270
   1491a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1491e:	681b      	ldr	r3, [r3, #0]
   14920:	4610      	mov	r0, r2
   14922:	4619      	mov	r1, r3
   14924:	f003 fd18 	bl	18358 <__aeabi_fdiv>
   14928:	4603      	mov	r3, r0
   1492a:	4618      	mov	r0, r3
   1492c:	f04f 0100 	mov.w	r1, #0
   14930:	f003 fe10 	bl	18554 <__aeabi_fcmpge>
   14934:	4603      	mov	r3, r0
   14936:	2b00      	cmp	r3, #0
   14938:	d014      	beq.n	14964 <route_to+0x1d0>
   1493a:	f24b 2368 	movw	r3, #45672	; 0xb268
   1493e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14942:	681a      	ldr	r2, [r3, #0]
   14944:	f24b 2370 	movw	r3, #45680	; 0xb270
   14948:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1494c:	681b      	ldr	r3, [r3, #0]
   1494e:	4610      	mov	r0, r2
   14950:	4619      	mov	r1, r3
   14952:	f003 fd01 	bl	18358 <__aeabi_fdiv>
   14956:	4603      	mov	r3, r0
   14958:	4618      	mov	r0, r3
   1495a:	f002 ffb5 	bl	178c8 <__aeabi_f2d>
   1495e:	4602      	mov	r2, r0
   14960:	460b      	mov	r3, r1
   14962:	e003      	b.n	1496c <route_to+0x1d8>
   14964:	f04f 0200 	mov.w	r2, #0
   14968:	f04f 0300 	mov.w	r3, #0
   1496c:	4620      	mov	r0, r4
   1496e:	4629      	mov	r1, r5
   14970:	f002 fe4c 	bl	1760c <__adddf3>
   14974:	4602      	mov	r2, r0
   14976:	460b      	mov	r3, r1
   14978:	4610      	mov	r0, r2
   1497a:	4619      	mov	r1, r3
   1497c:	f003 fada 	bl	17f34 <__aeabi_d2f>
   14980:	4602      	mov	r2, r0
   14982:	f24b 236c 	movw	r3, #45676	; 0xb26c
   14986:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1498a:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   1498c:	f24b 236c 	movw	r3, #45676	; 0xb26c
   14990:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14994:	681b      	ldr	r3, [r3, #0]
   14996:	4618      	mov	r0, r3
   14998:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   1499c:	f003 fdda 	bl	18554 <__aeabi_fcmpge>
   149a0:	4603      	mov	r3, r0
   149a2:	2b00      	cmp	r3, #0
   149a4:	d002      	beq.n	149ac <route_to+0x218>
   149a6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   149aa:	e004      	b.n	149b6 <route_to+0x222>
   149ac:	f24b 236c 	movw	r3, #45676	; 0xb26c
   149b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149b4:	681a      	ldr	r2, [r3, #0]
   149b6:	f24b 236c 	movw	r3, #45676	; 0xb26c
   149ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149be:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   149c0:	f24b 236c 	movw	r3, #45676	; 0xb26c
   149c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149c8:	681b      	ldr	r3, [r3, #0]
   149ca:	4618      	mov	r0, r3
   149cc:	6979      	ldr	r1, [r7, #20]
   149ce:	f003 fc0f 	bl	181f0 <__aeabi_fmul>
   149d2:	4603      	mov	r3, r0
   149d4:	4618      	mov	r0, r3
   149d6:	69f9      	ldr	r1, [r7, #28]
   149d8:	f003 fb02 	bl	17fe0 <__addsf3>
   149dc:	4603      	mov	r3, r0
   149de:	461c      	mov	r4, r3
   149e0:	f24b 236c 	movw	r3, #45676	; 0xb26c
   149e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149e8:	681b      	ldr	r3, [r3, #0]
   149ea:	4618      	mov	r0, r3
   149ec:	6939      	ldr	r1, [r7, #16]
   149ee:	f003 fbff 	bl	181f0 <__aeabi_fmul>
   149f2:	4603      	mov	r3, r0
   149f4:	4618      	mov	r0, r3
   149f6:	69b9      	ldr	r1, [r7, #24]
   149f8:	f003 faf2 	bl	17fe0 <__addsf3>
   149fc:	4603      	mov	r3, r0
   149fe:	4620      	mov	r0, r4
   14a00:	4619      	mov	r1, r3
   14a02:	f7ff fe55 	bl	146b0 <fly_to_xy>
}
   14a06:	3720      	adds	r7, #32
   14a08:	46bd      	mov	sp, r7
   14a0a:	bdb0      	pop	{r4, r5, r7, pc}

00014a0c <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   14a0c:	b590      	push	{r4, r7, lr}
   14a0e:	b083      	sub	sp, #12
   14a10:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   14a12:	f240 4328 	movw	r3, #1064	; 0x428
   14a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a1a:	681a      	ldr	r2, [r3, #0]
   14a1c:	f24b 4384 	movw	r3, #46212	; 0xb484
   14a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a24:	681b      	ldr	r3, [r3, #0]
   14a26:	4610      	mov	r0, r2
   14a28:	4619      	mov	r1, r3
   14a2a:	f003 fad7 	bl	17fdc <__aeabi_fsub>
   14a2e:	4603      	mov	r3, r0
   14a30:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   14a32:	f240 4328 	movw	r3, #1064	; 0x428
   14a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a3a:	685a      	ldr	r2, [r3, #4]
   14a3c:	f24b 4388 	movw	r3, #46216	; 0xb488
   14a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a44:	681b      	ldr	r3, [r3, #0]
   14a46:	4610      	mov	r0, r2
   14a48:	4619      	mov	r1, r3
   14a4a:	f003 fac7 	bl	17fdc <__aeabi_fsub>
   14a4e:	4603      	mov	r3, r0
   14a50:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   14a52:	6878      	ldr	r0, [r7, #4]
   14a54:	6879      	ldr	r1, [r7, #4]
   14a56:	f003 fbcb 	bl	181f0 <__aeabi_fmul>
   14a5a:	4603      	mov	r3, r0
   14a5c:	461c      	mov	r4, r3
   14a5e:	6838      	ldr	r0, [r7, #0]
   14a60:	6839      	ldr	r1, [r7, #0]
   14a62:	f003 fbc5 	bl	181f0 <__aeabi_fmul>
   14a66:	4603      	mov	r3, r0
   14a68:	4620      	mov	r0, r4
   14a6a:	4619      	mov	r1, r3
   14a6c:	f003 fab8 	bl	17fe0 <__addsf3>
   14a70:	4603      	mov	r3, r0
   14a72:	461a      	mov	r2, r3
   14a74:	f24b 2360 	movw	r3, #45664	; 0xb260
   14a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a7c:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   14a7e:	f24b 2360 	movw	r3, #45664	; 0xb260
   14a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a86:	681b      	ldr	r3, [r3, #0]
   14a88:	2201      	movs	r2, #1
   14a8a:	4614      	mov	r4, r2
   14a8c:	4618      	mov	r0, r3
   14a8e:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   14a92:	f6c4 0174 	movt	r1, #18548	; 0x4874
   14a96:	f003 fd67 	bl	18568 <__aeabi_fcmpgt>
   14a9a:	4603      	mov	r3, r0
   14a9c:	2b00      	cmp	r3, #0
   14a9e:	d101      	bne.n	14aa4 <compute_dist2_to_home+0x98>
   14aa0:	2300      	movs	r3, #0
   14aa2:	461c      	mov	r4, r3
   14aa4:	b2e3      	uxtb	r3, r4
   14aa6:	461a      	mov	r2, r3
   14aa8:	f24b 2364 	movw	r3, #45668	; 0xb264
   14aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ab0:	701a      	strb	r2, [r3, #0]
}
   14ab2:	370c      	adds	r7, #12
   14ab4:	46bd      	mov	sp, r7
   14ab6:	bd90      	pop	{r4, r7, pc}

00014ab8 <nav_home>:

void nav_home(void) {
   14ab8:	b580      	push	{r7, lr}
   14aba:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   14abc:	f24b 2354 	movw	r3, #45652	; 0xb254
   14ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ac4:	f04f 0200 	mov.w	r2, #0
   14ac8:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14aca:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   14ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ad2:	2203      	movs	r2, #3
   14ad4:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   14ad6:	f240 4324 	movw	r3, #1060	; 0x424
   14ada:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ade:	f04f 0200 	mov.w	r2, #0
   14ae2:	f2c4 322f 	movt	r2, #17199	; 0x432f
   14ae6:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14ae8:	f7ff ff90 	bl	14a0c <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   14aec:	f24b 2360 	movw	r3, #45664	; 0xb260
   14af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14af4:	681a      	ldr	r2, [r3, #0]
   14af6:	f24b 235c 	movw	r3, #45660	; 0xb25c
   14afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14afe:	601a      	str	r2, [r3, #0]
}
   14b00:	bd80      	pop	{r7, pc}
   14b02:	bf00      	nop

00014b04 <nav_update>:

void nav_update(void) {
   14b04:	b580      	push	{r7, lr}
   14b06:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14b08:	f7ff ff80 	bl	14a0c <compute_dist2_to_home>

  auto_nav();
   14b0c:	f7fd fc0c 	bl	12328 <auto_nav>
}
   14b10:	bd80      	pop	{r7, pc}
   14b12:	bf00      	nop

00014b14 <nav_init>:


void nav_init(void) {
   14b14:	b480      	push	{r7}
   14b16:	af00      	add	r7, sp, #0
  nav_block = 0;
   14b18:	f24b 2329 	movw	r3, #45609	; 0xb229
   14b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b20:	2200      	movs	r2, #0
   14b22:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   14b24:	f24b 2328 	movw	r3, #45608	; 0xb228
   14b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b2c:	2200      	movs	r2, #0
   14b2e:	701a      	strb	r2, [r3, #0]
}
   14b30:	46bd      	mov	sp, r7
   14b32:	f85d 7b04 	ldr.w	r7, [sp], #4
   14b36:	4770      	bx	lr

00014b38 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14b38:	b480      	push	{r7}
   14b3a:	b083      	sub	sp, #12
   14b3c:	af00      	add	r7, sp, #0
   14b3e:	4603      	mov	r3, r0
   14b40:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   14b42:	f242 030a 	movw	r3, #8202	; 0x200a
   14b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b4a:	781b      	ldrb	r3, [r3, #0]
   14b4c:	b2db      	uxtb	r3, r3
   14b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14b52:	2b00      	cmp	r3, #0
   14b54:	d028      	beq.n	14ba8 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   14b56:	f24b 237d 	movw	r3, #45693	; 0xb27d
   14b5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b5e:	781b      	ldrb	r3, [r3, #0]
   14b60:	b2db      	uxtb	r3, r3
   14b62:	461a      	mov	r2, r3
   14b64:	f24b 237c 	movw	r3, #45692	; 0xb27c
   14b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b6c:	781b      	ldrb	r3, [r3, #0]
   14b6e:	3301      	adds	r3, #1
   14b70:	429a      	cmp	r2, r3
   14b72:	d100      	bne.n	14b76 <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14b74:	e02c      	b.n	14bd0 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   14b76:	f24b 237c 	movw	r3, #45692	; 0xb27c
   14b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b7e:	781b      	ldrb	r3, [r3, #0]
   14b80:	461a      	mov	r2, r3
   14b82:	f24b 2380 	movw	r3, #45696	; 0xb280
   14b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b8a:	79f9      	ldrb	r1, [r7, #7]
   14b8c:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   14b8e:	f24b 237c 	movw	r3, #45692	; 0xb27c
   14b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b96:	781b      	ldrb	r3, [r3, #0]
   14b98:	3301      	adds	r3, #1
   14b9a:	b2da      	uxtb	r2, r3
   14b9c:	f24b 237c 	movw	r3, #45692	; 0xb27c
   14ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ba4:	701a      	strb	r2, [r3, #0]
   14ba6:	e013      	b.n	14bd0 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   14ba8:	f242 030c 	movw	r3, #8204	; 0x200c
   14bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bb0:	79fa      	ldrb	r2, [r7, #7]
   14bb2:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   14bb4:	f242 030a 	movw	r3, #8202	; 0x200a
   14bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bbc:	f242 020a 	movw	r2, #8202	; 0x200a
   14bc0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14bc4:	7812      	ldrb	r2, [r2, #0]
   14bc6:	b2d2      	uxtb	r2, r2
   14bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14bcc:	b2d2      	uxtb	r2, r2
   14bce:	701a      	strb	r2, [r3, #0]
  }
}
   14bd0:	370c      	adds	r7, #12
   14bd2:	46bd      	mov	sp, r7
   14bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
   14bd8:	4770      	bx	lr
   14bda:	bf00      	nop

00014bdc <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   14bdc:	b480      	push	{r7}
   14bde:	b083      	sub	sp, #12
   14be0:	af00      	add	r7, sp, #0
   14be2:	4603      	mov	r3, r0
   14be4:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   14be6:	f242 039a 	movw	r3, #8346	; 0x209a
   14bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bee:	781b      	ldrb	r3, [r3, #0]
   14bf0:	b2db      	uxtb	r3, r3
   14bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14bf6:	2b00      	cmp	r3, #0
   14bf8:	d028      	beq.n	14c4c <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   14bfa:	f24b 3381 	movw	r3, #45953	; 0xb381
   14bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c02:	781b      	ldrb	r3, [r3, #0]
   14c04:	b2db      	uxtb	r3, r3
   14c06:	461a      	mov	r2, r3
   14c08:	f24b 3380 	movw	r3, #45952	; 0xb380
   14c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c10:	781b      	ldrb	r3, [r3, #0]
   14c12:	3301      	adds	r3, #1
   14c14:	429a      	cmp	r2, r3
   14c16:	d100      	bne.n	14c1a <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14c18:	e02c      	b.n	14c74 <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   14c1a:	f24b 3380 	movw	r3, #45952	; 0xb380
   14c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c22:	781b      	ldrb	r3, [r3, #0]
   14c24:	461a      	mov	r2, r3
   14c26:	f24b 3384 	movw	r3, #45956	; 0xb384
   14c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c2e:	79f9      	ldrb	r1, [r7, #7]
   14c30:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   14c32:	f24b 3380 	movw	r3, #45952	; 0xb380
   14c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c3a:	781b      	ldrb	r3, [r3, #0]
   14c3c:	3301      	adds	r3, #1
   14c3e:	b2da      	uxtb	r2, r3
   14c40:	f24b 3380 	movw	r3, #45952	; 0xb380
   14c44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c48:	701a      	strb	r2, [r3, #0]
   14c4a:	e013      	b.n	14c74 <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   14c4c:	f242 039c 	movw	r3, #8348	; 0x209c
   14c50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c54:	79fa      	ldrb	r2, [r7, #7]
   14c56:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   14c58:	f242 039a 	movw	r3, #8346	; 0x209a
   14c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c60:	f242 029a 	movw	r2, #8346	; 0x209a
   14c64:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14c68:	7812      	ldrb	r2, [r2, #0]
   14c6a:	b2d2      	uxtb	r2, r2
   14c6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14c70:	b2d2      	uxtb	r2, r2
   14c72:	701a      	strb	r2, [r3, #0]
  }
}
   14c74:	370c      	adds	r7, #12
   14c76:	46bd      	mov	sp, r7
   14c78:	f85d 7b04 	ldr.w	r7, [sp], #4
   14c7c:	4770      	bx	lr
   14c7e:	bf00      	nop

00014c80 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   14c80:	b580      	push	{r7, lr}
   14c82:	b084      	sub	sp, #16
   14c84:	af00      	add	r7, sp, #0
   14c86:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   14c88:	2300      	movs	r3, #0
   14c8a:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   14c8c:	e009      	b.n	14ca2 <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   14c8e:	7bfb      	ldrb	r3, [r7, #15]
   14c90:	687a      	ldr	r2, [r7, #4]
   14c92:	4413      	add	r3, r2
   14c94:	781b      	ldrb	r3, [r3, #0]
   14c96:	4618      	mov	r0, r3
   14c98:	f7ff ff4e 	bl	14b38 <uart0_transmit>
    i++;
   14c9c:	7bfb      	ldrb	r3, [r7, #15]
   14c9e:	3301      	adds	r3, #1
   14ca0:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   14ca2:	7bfb      	ldrb	r3, [r7, #15]
   14ca4:	687a      	ldr	r2, [r7, #4]
   14ca6:	4413      	add	r3, r2
   14ca8:	781b      	ldrb	r3, [r3, #0]
   14caa:	2b00      	cmp	r3, #0
   14cac:	d1ef      	bne.n	14c8e <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   14cae:	3710      	adds	r7, #16
   14cb0:	46bd      	mov	sp, r7
   14cb2:	bd80      	pop	{r7, pc}

00014cb4 <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   14cb4:	b590      	push	{r4, r7, lr}
   14cb6:	b089      	sub	sp, #36	; 0x24
   14cb8:	af00      	add	r7, sp, #0
   14cba:	4603      	mov	r3, r0
   14cbc:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   14cbe:	f648 0380 	movw	r3, #34944	; 0x8880
   14cc2:	f2c0 0301 	movt	r3, #1
   14cc6:	f107 040c 	add.w	r4, r7, #12
   14cca:	6818      	ldr	r0, [r3, #0]
   14ccc:	6859      	ldr	r1, [r3, #4]
   14cce:	689a      	ldr	r2, [r3, #8]
   14cd0:	68db      	ldr	r3, [r3, #12]
   14cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   14cd4:	79fb      	ldrb	r3, [r7, #7]
   14cd6:	091b      	lsrs	r3, r3, #4
   14cd8:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   14cda:	79fb      	ldrb	r3, [r7, #7]
   14cdc:	f003 030f 	and.w	r3, r3, #15
   14ce0:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   14ce2:	230f      	movs	r3, #15
   14ce4:	77fb      	strb	r3, [r7, #31]
    low = 15;
   14ce6:	230f      	movs	r3, #15
   14ce8:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   14cea:	7ffb      	ldrb	r3, [r7, #31]
   14cec:	f107 0220 	add.w	r2, r7, #32
   14cf0:	4413      	add	r3, r2
   14cf2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14cf6:	4618      	mov	r0, r3
   14cf8:	f7ff ff1e 	bl	14b38 <uart0_transmit>
  uart0_transmit(hex[low]);
   14cfc:	7fbb      	ldrb	r3, [r7, #30]
   14cfe:	f107 0220 	add.w	r2, r7, #32
   14d02:	4413      	add	r3, r2
   14d04:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14d08:	4618      	mov	r0, r3
   14d0a:	f7ff ff15 	bl	14b38 <uart0_transmit>
}
   14d0e:	3724      	adds	r7, #36	; 0x24
   14d10:	46bd      	mov	sp, r7
   14d12:	bd90      	pop	{r4, r7, pc}

00014d14 <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   14d14:	b480      	push	{r7}
   14d16:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   14d18:	f24b 237c 	movw	r3, #45692	; 0xb27c
   14d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d20:	781a      	ldrb	r2, [r3, #0]
   14d22:	f24b 237d 	movw	r3, #45693	; 0xb27d
   14d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d2a:	781b      	ldrb	r3, [r3, #0]
   14d2c:	b2db      	uxtb	r3, r3
   14d2e:	429a      	cmp	r2, r3
   14d30:	d10e      	bne.n	14d50 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   14d32:	f242 030a 	movw	r3, #8202	; 0x200a
   14d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d3a:	f242 020a 	movw	r2, #8202	; 0x200a
   14d3e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14d42:	7812      	ldrb	r2, [r2, #0]
   14d44:	b2d2      	uxtb	r2, r2
   14d46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14d4a:	b2d2      	uxtb	r2, r2
   14d4c:	701a      	strb	r2, [r3, #0]
   14d4e:	e01d      	b.n	14d8c <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   14d50:	f242 030c 	movw	r3, #8204	; 0x200c
   14d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d58:	f24b 227d 	movw	r2, #45693	; 0xb27d
   14d5c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14d60:	7812      	ldrb	r2, [r2, #0]
   14d62:	b2d2      	uxtb	r2, r2
   14d64:	4611      	mov	r1, r2
   14d66:	f24b 2280 	movw	r2, #45696	; 0xb280
   14d6a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14d6e:	5c52      	ldrb	r2, [r2, r1]
   14d70:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   14d72:	f24b 237d 	movw	r3, #45693	; 0xb27d
   14d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d7a:	781b      	ldrb	r3, [r3, #0]
   14d7c:	b2db      	uxtb	r3, r3
   14d7e:	3301      	adds	r3, #1
   14d80:	b2da      	uxtb	r2, r3
   14d82:	f24b 237d 	movw	r3, #45693	; 0xb27d
   14d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d8a:	701a      	strb	r2, [r3, #0]
  }
}
   14d8c:	46bd      	mov	sp, r7
   14d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
   14d92:	4770      	bx	lr

00014d94 <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   14d94:	b480      	push	{r7}
   14d96:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   14d98:	f24b 3380 	movw	r3, #45952	; 0xb380
   14d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14da0:	781a      	ldrb	r2, [r3, #0]
   14da2:	f24b 3381 	movw	r3, #45953	; 0xb381
   14da6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14daa:	781b      	ldrb	r3, [r3, #0]
   14dac:	b2db      	uxtb	r3, r3
   14dae:	429a      	cmp	r2, r3
   14db0:	d10e      	bne.n	14dd0 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   14db2:	f242 039a 	movw	r3, #8346	; 0x209a
   14db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dba:	f242 029a 	movw	r2, #8346	; 0x209a
   14dbe:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14dc2:	7812      	ldrb	r2, [r2, #0]
   14dc4:	b2d2      	uxtb	r2, r2
   14dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14dca:	b2d2      	uxtb	r2, r2
   14dcc:	701a      	strb	r2, [r3, #0]
   14dce:	e01d      	b.n	14e0c <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   14dd0:	f242 039c 	movw	r3, #8348	; 0x209c
   14dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dd8:	f24b 3281 	movw	r2, #45953	; 0xb381
   14ddc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14de0:	7812      	ldrb	r2, [r2, #0]
   14de2:	b2d2      	uxtb	r2, r2
   14de4:	4611      	mov	r1, r2
   14de6:	f24b 3284 	movw	r2, #45956	; 0xb384
   14dea:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14dee:	5c52      	ldrb	r2, [r2, r1]
   14df0:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   14df2:	f24b 3381 	movw	r3, #45953	; 0xb381
   14df6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dfa:	781b      	ldrb	r3, [r3, #0]
   14dfc:	b2db      	uxtb	r3, r3
   14dfe:	3301      	adds	r3, #1
   14e00:	b2da      	uxtb	r2, r3
   14e02:	f24b 3381 	movw	r3, #45953	; 0xb381
   14e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e0a:	701a      	strb	r2, [r3, #0]
  }
}
   14e0c:	46bd      	mov	sp, r7
   14e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
   14e12:	4770      	bx	lr

00014e14 <uart0_init>:

void uart0_init( void ) {
   14e14:	b480      	push	{r7}
   14e16:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   14e18:	f242 0390 	movw	r3, #8336	; 0x2090
   14e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e20:	2200      	movs	r2, #0
   14e22:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   14e24:	f242 0309 	movw	r3, #8201	; 0x2009
   14e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e2c:	2219      	movs	r2, #25
   14e2e:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   14e30:	f242 030b 	movw	r3, #8203	; 0x200b
   14e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e38:	2200      	movs	r2, #0
   14e3a:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   14e3c:	f242 030a 	movw	r3, #8202	; 0x200a
   14e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e44:	2218      	movs	r2, #24
   14e46:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   14e48:	f242 0395 	movw	r3, #8341	; 0x2095
   14e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e50:	2206      	movs	r2, #6
   14e52:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   14e54:	f242 030a 	movw	r3, #8202	; 0x200a
   14e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e5c:	f242 020a 	movw	r2, #8202	; 0x200a
   14e60:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14e64:	7812      	ldrb	r2, [r2, #0]
   14e66:	b2d2      	uxtb	r2, r2
   14e68:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14e6c:	b2d2      	uxtb	r2, r2
   14e6e:	701a      	strb	r2, [r3, #0]
}
   14e70:	46bd      	mov	sp, r7
   14e72:	f85d 7b04 	ldr.w	r7, [sp], #4
   14e76:	4770      	bx	lr

00014e78 <uart1_init>:

void uart1_init( void ) {
   14e78:	b480      	push	{r7}
   14e7a:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   14e7c:	f242 0398 	movw	r3, #8344	; 0x2098
   14e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e84:	2200      	movs	r2, #0
   14e86:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   14e88:	f242 0399 	movw	r3, #8345	; 0x2099
   14e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e90:	2219      	movs	r2, #25
   14e92:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   14e94:	f242 039b 	movw	r3, #8347	; 0x209b
   14e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e9c:	2200      	movs	r2, #0
   14e9e:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   14ea0:	f242 039a 	movw	r3, #8346	; 0x209a
   14ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ea8:	2218      	movs	r2, #24
   14eaa:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   14eac:	f242 039d 	movw	r3, #8349	; 0x209d
   14eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14eb4:	2206      	movs	r2, #6
   14eb6:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   14eb8:	f242 039a 	movw	r3, #8346	; 0x209a
   14ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ec0:	f242 029a 	movw	r2, #8346	; 0x209a
   14ec4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ec8:	7812      	ldrb	r2, [r2, #0]
   14eca:	b2d2      	uxtb	r2, r2
   14ecc:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14ed0:	b2d2      	uxtb	r2, r2
   14ed2:	701a      	strb	r2, [r3, #0]
}
   14ed4:	46bd      	mov	sp, r7
   14ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
   14eda:	4770      	bx	lr
   14edc:	0000      	movs	r0, r0
	...

00014ee0 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   14ee0:	b480      	push	{r7}
   14ee2:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   14ee4:	f24b 4384 	movw	r3, #46212	; 0xb484
   14ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14eec:	f04f 0200 	mov.w	r2, #0
   14ef0:	601a      	str	r2, [r3, #0]
   14ef2:	f24b 4388 	movw	r3, #46216	; 0xb488
   14ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14efa:	f04f 0200 	mov.w	r2, #0
   14efe:	601a      	str	r2, [r3, #0]
   14f00:	f24b 438c 	movw	r3, #46220	; 0xb48c
   14f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f08:	f04f 0200 	mov.w	r2, #0
   14f0c:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   14f0e:	f24b 4390 	movw	r3, #46224	; 0xb490
   14f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f16:	f04f 0200 	mov.w	r2, #0
   14f1a:	601a      	str	r2, [r3, #0]
   14f1c:	f24b 4394 	movw	r3, #46228	; 0xb494
   14f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f24:	f04f 0200 	mov.w	r2, #0
   14f28:	601a      	str	r2, [r3, #0]
   14f2a:	f24b 4398 	movw	r3, #46232	; 0xb498
   14f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f32:	f04f 0200 	mov.w	r2, #0
   14f36:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   14f38:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   14f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f40:	f04f 0200 	mov.w	r2, #0
   14f44:	601a      	str	r2, [r3, #0]
   14f46:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
   14f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f4e:	f04f 0200 	mov.w	r2, #0
   14f52:	601a      	str	r2, [r3, #0]
   14f54:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
   14f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f5c:	f04f 0200 	mov.w	r2, #0
   14f60:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   14f62:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
   14f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f6a:	f04f 0200 	mov.w	r2, #0
   14f6e:	601a      	str	r2, [r3, #0]
   14f70:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
   14f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f78:	f04f 0200 	mov.w	r2, #0
   14f7c:	601a      	str	r2, [r3, #0]
   14f7e:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
   14f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f86:	f04f 0200 	mov.w	r2, #0
   14f8a:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   14f8c:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
   14f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f94:	2200      	movs	r2, #0
   14f96:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   14f98:	f240 33f8 	movw	r3, #1016	; 0x3f8
   14f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fa0:	681a      	ldr	r2, [r3, #0]
   14fa2:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   14fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14faa:	601a      	str	r2, [r3, #0]
}
   14fac:	46bd      	mov	sp, r7
   14fae:	f85d 7b04 	ldr.w	r7, [sp], #4
   14fb2:	4770      	bx	lr

00014fb4 <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   14fb4:	b580      	push	{r7, lr}
   14fb6:	b082      	sub	sp, #8
   14fb8:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   14fba:	f240 33ec 	movw	r3, #1004	; 0x3ec
   14fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fc2:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   14fc4:	2b01      	cmp	r3, #1
   14fc6:	d105      	bne.n	14fd4 <estimator_update_state_infrared+0x20>
   14fc8:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   14fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fd0:	681b      	ldr	r3, [r3, #0]
   14fd2:	e004      	b.n	14fde <estimator_update_state_infrared+0x2a>
   14fd4:	f240 33f8 	movw	r3, #1016	; 0x3f8
   14fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fdc:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   14fde:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   14fe0:	f24b 1370 	movw	r3, #45424	; 0xb170
   14fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fe8:	881b      	ldrh	r3, [r3, #0]
   14fea:	b21b      	sxth	r3, r3
   14fec:	4618      	mov	r0, r3
   14fee:	f003 f8ab 	bl	18148 <__aeabi_i2f>
   14ff2:	4603      	mov	r3, r0
   14ff4:	4618      	mov	r0, r3
   14ff6:	6879      	ldr	r1, [r7, #4]
   14ff8:	f003 f8fa 	bl	181f0 <__aeabi_fmul>
   14ffc:	4603      	mov	r3, r0
   14ffe:	461a      	mov	r2, r3
   15000:	f24b 4390 	movw	r3, #46224	; 0xb490
   15004:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15008:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   1500a:	f24b 1372 	movw	r3, #45426	; 0xb172
   1500e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15012:	881b      	ldrh	r3, [r3, #0]
   15014:	b21b      	sxth	r3, r3
   15016:	4618      	mov	r0, r3
   15018:	f003 f896 	bl	18148 <__aeabi_i2f>
   1501c:	4603      	mov	r3, r0
   1501e:	4618      	mov	r0, r3
   15020:	6879      	ldr	r1, [r7, #4]
   15022:	f003 f8e5 	bl	181f0 <__aeabi_fmul>
   15026:	4603      	mov	r3, r0
   15028:	461a      	mov	r2, r3
   1502a:	f24b 4398 	movw	r3, #46232	; 0xb498
   1502e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15032:	601a      	str	r2, [r3, #0]
}
   15034:	3708      	adds	r7, #8
   15036:	46bd      	mov	sp, r7
   15038:	bd80      	pop	{r7, pc}
   1503a:	bf00      	nop

0001503c <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   1503c:	b5b0      	push	{r4, r5, r7, lr}
   1503e:	b084      	sub	sp, #16
   15040:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   15042:	f24b 43d0 	movw	r3, #46288	; 0xb4d0
   15046:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1504a:	781b      	ldrb	r3, [r3, #0]
   1504c:	2b00      	cmp	r3, #0
   1504e:	f000 81e8 	beq.w	15422 <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   15052:	f24b 0340 	movw	r3, #45120	; 0xb040
   15056:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1505a:	681a      	ldr	r2, [r3, #0]
   1505c:	f24b 43d4 	movw	r3, #46292	; 0xb4d4
   15060:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15064:	681b      	ldr	r3, [r3, #0]
   15066:	4610      	mov	r0, r2
   15068:	4619      	mov	r1, r3
   1506a:	f002 ffb7 	bl	17fdc <__aeabi_fsub>
   1506e:	4603      	mov	r3, r0
   15070:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   15072:	68b8      	ldr	r0, [r7, #8]
   15074:	f002 fc28 	bl	178c8 <__aeabi_f2d>
   15078:	4602      	mov	r2, r0
   1507a:	460b      	mov	r3, r1
   1507c:	4610      	mov	r0, r2
   1507e:	4619      	mov	r1, r3
   15080:	a385      	add	r3, pc, #532	; (adr r3, 15298 <estimator_update_ir_estim+0x25c>)
   15082:	e9d3 2300 	ldrd	r2, r3, [r3]
   15086:	f002 ff03 	bl	17e90 <__aeabi_dcmpgt>
   1508a:	4603      	mov	r3, r0
   1508c:	2b00      	cmp	r3, #0
   1508e:	d100      	bne.n	15092 <estimator_update_ir_estim+0x56>
   15090:	e219      	b.n	154c6 <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   15092:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
   15096:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1509a:	681a      	ldr	r2, [r3, #0]
   1509c:	f24b 43d8 	movw	r3, #46296	; 0xb4d8
   150a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150a4:	681b      	ldr	r3, [r3, #0]
   150a6:	4610      	mov	r0, r2
   150a8:	4619      	mov	r1, r3
   150aa:	f002 ff97 	bl	17fdc <__aeabi_fsub>
   150ae:	4603      	mov	r3, r0
   150b0:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   150b2:	e013      	b.n	150dc <estimator_update_ir_estim+0xa0>
   150b4:	68f8      	ldr	r0, [r7, #12]
   150b6:	f002 fc07 	bl	178c8 <__aeabi_f2d>
   150ba:	4602      	mov	r2, r0
   150bc:	460b      	mov	r3, r1
   150be:	4610      	mov	r0, r2
   150c0:	4619      	mov	r1, r3
   150c2:	a377      	add	r3, pc, #476	; (adr r3, 152a0 <estimator_update_ir_estim+0x264>)
   150c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   150c8:	f002 fa9e 	bl	17608 <__aeabi_dsub>
   150cc:	4602      	mov	r2, r0
   150ce:	460b      	mov	r3, r1
   150d0:	4610      	mov	r0, r2
   150d2:	4619      	mov	r1, r3
   150d4:	f002 ff2e 	bl	17f34 <__aeabi_d2f>
   150d8:	4603      	mov	r3, r0
   150da:	60fb      	str	r3, [r7, #12]
   150dc:	68f8      	ldr	r0, [r7, #12]
   150de:	f002 fbf3 	bl	178c8 <__aeabi_f2d>
   150e2:	4602      	mov	r2, r0
   150e4:	460b      	mov	r3, r1
   150e6:	4610      	mov	r0, r2
   150e8:	4619      	mov	r1, r3
   150ea:	a36f      	add	r3, pc, #444	; (adr r3, 152a8 <estimator_update_ir_estim+0x26c>)
   150ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   150f0:	f002 fece 	bl	17e90 <__aeabi_dcmpgt>
   150f4:	4603      	mov	r3, r0
   150f6:	2b00      	cmp	r3, #0
   150f8:	d1dc      	bne.n	150b4 <estimator_update_ir_estim+0x78>
   150fa:	e013      	b.n	15124 <estimator_update_ir_estim+0xe8>
   150fc:	68f8      	ldr	r0, [r7, #12]
   150fe:	f002 fbe3 	bl	178c8 <__aeabi_f2d>
   15102:	4602      	mov	r2, r0
   15104:	460b      	mov	r3, r1
   15106:	4610      	mov	r0, r2
   15108:	4619      	mov	r1, r3
   1510a:	a365      	add	r3, pc, #404	; (adr r3, 152a0 <estimator_update_ir_estim+0x264>)
   1510c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15110:	f002 fa7c 	bl	1760c <__adddf3>
   15114:	4602      	mov	r2, r0
   15116:	460b      	mov	r3, r1
   15118:	4610      	mov	r0, r2
   1511a:	4619      	mov	r1, r3
   1511c:	f002 ff0a 	bl	17f34 <__aeabi_d2f>
   15120:	4603      	mov	r3, r0
   15122:	60fb      	str	r3, [r7, #12]
   15124:	68f8      	ldr	r0, [r7, #12]
   15126:	f002 fbcf 	bl	178c8 <__aeabi_f2d>
   1512a:	4602      	mov	r2, r0
   1512c:	460b      	mov	r3, r1
   1512e:	4610      	mov	r0, r2
   15130:	4619      	mov	r1, r3
   15132:	a35f      	add	r3, pc, #380	; (adr r3, 152b0 <estimator_update_ir_estim+0x274>)
   15134:	e9d3 2300 	ldrd	r2, r3, [r3]
   15138:	f002 fe8c 	bl	17e54 <__aeabi_dcmplt>
   1513c:	4603      	mov	r3, r0
   1513e:	2b00      	cmp	r3, #0
   15140:	d1dc      	bne.n	150fc <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   15142:	68f8      	ldr	r0, [r7, #12]
   15144:	68b9      	ldr	r1, [r7, #8]
   15146:	f003 f907 	bl	18358 <__aeabi_fdiv>
   1514a:	4603      	mov	r3, r0
   1514c:	4618      	mov	r0, r3
   1514e:	f002 fbbb 	bl	178c8 <__aeabi_f2d>
   15152:	4602      	mov	r2, r0
   15154:	460b      	mov	r3, r1
   15156:	4610      	mov	r0, r2
   15158:	4619      	mov	r1, r3
   1515a:	f04f 0200 	mov.w	r2, #0
   1515e:	f04f 0300 	mov.w	r3, #0
   15162:	f2c4 0324 	movt	r3, #16420	; 0x4024
   15166:	f002 fc03 	bl	17970 <__aeabi_dmul>
   1516a:	4602      	mov	r2, r0
   1516c:	460b      	mov	r3, r1
   1516e:	4610      	mov	r0, r2
   15170:	4619      	mov	r1, r3
   15172:	a351      	add	r3, pc, #324	; (adr r3, 152b8 <estimator_update_ir_estim+0x27c>)
   15174:	e9d3 2300 	ldrd	r2, r3, [r3]
   15178:	f002 fd24 	bl	17bc4 <__aeabi_ddiv>
   1517c:	4602      	mov	r2, r0
   1517e:	460b      	mov	r3, r1
   15180:	4610      	mov	r0, r2
   15182:	4619      	mov	r1, r3
   15184:	f002 fed6 	bl	17f34 <__aeabi_d2f>
   15188:	4603      	mov	r3, r0
   1518a:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   1518c:	e013      	b.n	151b6 <estimator_update_ir_estim+0x17a>
   1518e:	68f8      	ldr	r0, [r7, #12]
   15190:	f002 fb9a 	bl	178c8 <__aeabi_f2d>
   15194:	4602      	mov	r2, r0
   15196:	460b      	mov	r3, r1
   15198:	4610      	mov	r0, r2
   1519a:	4619      	mov	r1, r3
   1519c:	a340      	add	r3, pc, #256	; (adr r3, 152a0 <estimator_update_ir_estim+0x264>)
   1519e:	e9d3 2300 	ldrd	r2, r3, [r3]
   151a2:	f002 fa31 	bl	17608 <__aeabi_dsub>
   151a6:	4602      	mov	r2, r0
   151a8:	460b      	mov	r3, r1
   151aa:	4610      	mov	r0, r2
   151ac:	4619      	mov	r1, r3
   151ae:	f002 fec1 	bl	17f34 <__aeabi_d2f>
   151b2:	4603      	mov	r3, r0
   151b4:	60fb      	str	r3, [r7, #12]
   151b6:	68f8      	ldr	r0, [r7, #12]
   151b8:	f002 fb86 	bl	178c8 <__aeabi_f2d>
   151bc:	4602      	mov	r2, r0
   151be:	460b      	mov	r3, r1
   151c0:	4610      	mov	r0, r2
   151c2:	4619      	mov	r1, r3
   151c4:	a338      	add	r3, pc, #224	; (adr r3, 152a8 <estimator_update_ir_estim+0x26c>)
   151c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   151ca:	f002 fe61 	bl	17e90 <__aeabi_dcmpgt>
   151ce:	4603      	mov	r3, r0
   151d0:	2b00      	cmp	r3, #0
   151d2:	d1dc      	bne.n	1518e <estimator_update_ir_estim+0x152>
   151d4:	e013      	b.n	151fe <estimator_update_ir_estim+0x1c2>
   151d6:	68f8      	ldr	r0, [r7, #12]
   151d8:	f002 fb76 	bl	178c8 <__aeabi_f2d>
   151dc:	4602      	mov	r2, r0
   151de:	460b      	mov	r3, r1
   151e0:	4610      	mov	r0, r2
   151e2:	4619      	mov	r1, r3
   151e4:	a32e      	add	r3, pc, #184	; (adr r3, 152a0 <estimator_update_ir_estim+0x264>)
   151e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   151ea:	f002 fa0f 	bl	1760c <__adddf3>
   151ee:	4602      	mov	r2, r0
   151f0:	460b      	mov	r3, r1
   151f2:	4610      	mov	r0, r2
   151f4:	4619      	mov	r1, r3
   151f6:	f002 fe9d 	bl	17f34 <__aeabi_d2f>
   151fa:	4603      	mov	r3, r0
   151fc:	60fb      	str	r3, [r7, #12]
   151fe:	68f8      	ldr	r0, [r7, #12]
   15200:	f002 fb62 	bl	178c8 <__aeabi_f2d>
   15204:	4602      	mov	r2, r0
   15206:	460b      	mov	r3, r1
   15208:	4610      	mov	r0, r2
   1520a:	4619      	mov	r1, r3
   1520c:	a328      	add	r3, pc, #160	; (adr r3, 152b0 <estimator_update_ir_estim+0x274>)
   1520e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15212:	f002 fe1f 	bl	17e54 <__aeabi_dcmplt>
   15216:	4603      	mov	r3, r0
   15218:	2b00      	cmp	r3, #0
   1521a:	d1dc      	bne.n	151d6 <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   1521c:	f24b 1370 	movw	r3, #45424	; 0xb170
   15220:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15224:	881b      	ldrh	r3, [r3, #0]
   15226:	b21b      	sxth	r3, r3
   15228:	4618      	mov	r0, r3
   1522a:	f002 ff8d 	bl	18148 <__aeabi_i2f>
   1522e:	4602      	mov	r2, r0
   15230:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
   15234:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15238:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   1523a:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   1523e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15242:	68fa      	ldr	r2, [r7, #12]
   15244:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   15246:	68f8      	ldr	r0, [r7, #12]
   15248:	f04f 0100 	mov.w	r1, #0
   1524c:	f003 f96e 	bl	1852c <__aeabi_fcmplt>
   15250:	4603      	mov	r3, r0
   15252:	2b00      	cmp	r3, #0
   15254:	d003      	beq.n	1525e <estimator_update_ir_estim+0x222>
   15256:	68fb      	ldr	r3, [r7, #12]
   15258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   1525c:	e000      	b.n	15260 <estimator_update_ir_estim+0x224>
   1525e:	68fb      	ldr	r3, [r7, #12]
   15260:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   15262:	6878      	ldr	r0, [r7, #4]
   15264:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   15268:	f003 f960 	bl	1852c <__aeabi_fcmplt>
   1526c:	4603      	mov	r3, r0
   1526e:	2b00      	cmp	r3, #0
   15270:	d100      	bne.n	15274 <estimator_update_ir_estim+0x238>
   15272:	e128      	b.n	154c6 <estimator_update_ir_estim+0x48a>
   15274:	6878      	ldr	r0, [r7, #4]
   15276:	f002 fb27 	bl	178c8 <__aeabi_f2d>
   1527a:	4602      	mov	r2, r0
   1527c:	460b      	mov	r3, r1
   1527e:	4610      	mov	r0, r2
   15280:	4619      	mov	r1, r3
   15282:	a30f      	add	r3, pc, #60	; (adr r3, 152c0 <estimator_update_ir_estim+0x284>)
   15284:	e9d3 2300 	ldrd	r2, r3, [r3]
   15288:	f002 fe02 	bl	17e90 <__aeabi_dcmpgt>
   1528c:	4603      	mov	r3, r0
   1528e:	2b00      	cmp	r3, #0
   15290:	d11a      	bne.n	152c8 <estimator_update_ir_estim+0x28c>
   15292:	e118      	b.n	154c6 <estimator_update_ir_estim+0x48a>
   15294:	f3af 8000 	nop.w
   15298:	9999999a 	.word	0x9999999a
   1529c:	3fb99999 	.word	0x3fb99999
   152a0:	54442d18 	.word	0x54442d18
   152a4:	401921fb 	.word	0x401921fb
   152a8:	54442d18 	.word	0x54442d18
   152ac:	400921fb 	.word	0x400921fb
   152b0:	54442d18 	.word	0x54442d18
   152b4:	c00921fb 	.word	0xc00921fb
   152b8:	51eb851f 	.word	0x51eb851f
   152bc:	40239eb8 	.word	0x40239eb8
   152c0:	9999999a 	.word	0x9999999a
   152c4:	3fa99999 	.word	0x3fa99999
   152c8:	f240 33f0 	movw	r3, #1008	; 0x3f0
   152cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152d0:	881b      	ldrh	r3, [r3, #0]
   152d2:	b21b      	sxth	r3, r3
   152d4:	425b      	negs	r3, r3
   152d6:	0fda      	lsrs	r2, r3, #31
   152d8:	4413      	add	r3, r2
   152da:	105b      	asrs	r3, r3, #1
   152dc:	461a      	mov	r2, r3
   152de:	f24b 1370 	movw	r3, #45424	; 0xb170
   152e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152e6:	881b      	ldrh	r3, [r3, #0]
   152e8:	b21b      	sxth	r3, r3
   152ea:	429a      	cmp	r2, r3
   152ec:	f280 8098 	bge.w	15420 <estimator_update_ir_estim+0x3e4>
   152f0:	f240 33f0 	movw	r3, #1008	; 0x3f0
   152f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152f8:	881b      	ldrh	r3, [r3, #0]
   152fa:	b21b      	sxth	r3, r3
   152fc:	0fda      	lsrs	r2, r3, #31
   152fe:	4413      	add	r3, r2
   15300:	105b      	asrs	r3, r3, #1
   15302:	b29a      	uxth	r2, r3
   15304:	f24b 1370 	movw	r3, #45424	; 0xb170
   15308:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1530c:	881b      	ldrh	r3, [r3, #0]
   1530e:	b212      	sxth	r2, r2
   15310:	b21b      	sxth	r3, r3
   15312:	429a      	cmp	r2, r3
   15314:	f340 8084 	ble.w	15420 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   15318:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   1531c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15320:	681a      	ldr	r2, [r3, #0]
   15322:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
   15326:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1532a:	681b      	ldr	r3, [r3, #0]
   1532c:	4610      	mov	r0, r2
   1532e:	4619      	mov	r1, r3
   15330:	f002 ff5e 	bl	181f0 <__aeabi_fmul>
   15334:	4603      	mov	r3, r0
   15336:	4618      	mov	r0, r3
   15338:	f002 fac6 	bl	178c8 <__aeabi_f2d>
   1533c:	4604      	mov	r4, r0
   1533e:	460d      	mov	r5, r1
   15340:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
   15344:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15348:	681b      	ldr	r3, [r3, #0]
   1534a:	4618      	mov	r0, r3
   1534c:	f002 fabc 	bl	178c8 <__aeabi_f2d>
   15350:	4602      	mov	r2, r0
   15352:	460b      	mov	r3, r1
   15354:	4610      	mov	r0, r2
   15356:	4619      	mov	r1, r3
   15358:	a367      	add	r3, pc, #412	; (adr r3, 154f8 <estimator_update_ir_estim+0x4bc>)
   1535a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1535e:	f002 fb07 	bl	17970 <__aeabi_dmul>
   15362:	4602      	mov	r2, r0
   15364:	460b      	mov	r3, r1
   15366:	4620      	mov	r0, r4
   15368:	4629      	mov	r1, r5
   1536a:	f002 f94f 	bl	1760c <__adddf3>
   1536e:	4602      	mov	r2, r0
   15370:	460b      	mov	r3, r1
   15372:	4610      	mov	r0, r2
   15374:	4619      	mov	r1, r3
   15376:	f002 fddd 	bl	17f34 <__aeabi_d2f>
   1537a:	4602      	mov	r2, r0
   1537c:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
   15380:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15384:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   15386:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
   1538a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1538e:	681a      	ldr	r2, [r3, #0]
   15390:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
   15394:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15398:	681b      	ldr	r3, [r3, #0]
   1539a:	4610      	mov	r0, r2
   1539c:	4619      	mov	r1, r3
   1539e:	f002 ff27 	bl	181f0 <__aeabi_fmul>
   153a2:	4603      	mov	r3, r0
   153a4:	4618      	mov	r0, r3
   153a6:	f002 fa8f 	bl	178c8 <__aeabi_f2d>
   153aa:	4604      	mov	r4, r0
   153ac:	460d      	mov	r5, r1
   153ae:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
   153b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153b6:	681b      	ldr	r3, [r3, #0]
   153b8:	4618      	mov	r0, r3
   153ba:	f002 fa85 	bl	178c8 <__aeabi_f2d>
   153be:	4602      	mov	r2, r0
   153c0:	460b      	mov	r3, r1
   153c2:	4610      	mov	r0, r2
   153c4:	4619      	mov	r1, r3
   153c6:	a34c      	add	r3, pc, #304	; (adr r3, 154f8 <estimator_update_ir_estim+0x4bc>)
   153c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   153cc:	f002 fad0 	bl	17970 <__aeabi_dmul>
   153d0:	4602      	mov	r2, r0
   153d2:	460b      	mov	r3, r1
   153d4:	4620      	mov	r0, r4
   153d6:	4629      	mov	r1, r5
   153d8:	f002 f918 	bl	1760c <__adddf3>
   153dc:	4602      	mov	r2, r0
   153de:	460b      	mov	r3, r1
   153e0:	4610      	mov	r0, r2
   153e2:	4619      	mov	r1, r3
   153e4:	f002 fda6 	bl	17f34 <__aeabi_d2f>
   153e8:	4602      	mov	r2, r0
   153ea:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
   153ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153f2:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   153f4:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
   153f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153fc:	681a      	ldr	r2, [r3, #0]
   153fe:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
   15402:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15406:	681b      	ldr	r3, [r3, #0]
   15408:	4610      	mov	r0, r2
   1540a:	4619      	mov	r1, r3
   1540c:	f002 ffa4 	bl	18358 <__aeabi_fdiv>
   15410:	4603      	mov	r3, r0
   15412:	461a      	mov	r2, r3
   15414:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   15418:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1541c:	601a      	str	r2, [r3, #0]
   1541e:	e052      	b.n	154c6 <estimator_update_ir_estim+0x48a>
   15420:	e051      	b.n	154c6 <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   15422:	f24b 43d0 	movw	r3, #46288	; 0xb4d0
   15426:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1542a:	2201      	movs	r2, #1
   1542c:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   1542e:	f240 33f0 	movw	r3, #1008	; 0x3f0
   15432:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15436:	881b      	ldrh	r3, [r3, #0]
   15438:	b21b      	sxth	r3, r3
   1543a:	4618      	mov	r0, r3
   1543c:	f002 fe84 	bl	18148 <__aeabi_i2f>
   15440:	4603      	mov	r3, r0
   15442:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   15444:	6838      	ldr	r0, [r7, #0]
   15446:	6839      	ldr	r1, [r7, #0]
   15448:	f002 fed2 	bl	181f0 <__aeabi_fmul>
   1544c:	4603      	mov	r3, r0
   1544e:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   15450:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   15454:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15458:	681b      	ldr	r3, [r3, #0]
   1545a:	4618      	mov	r0, r3
   1545c:	f002 fa34 	bl	178c8 <__aeabi_f2d>
   15460:	4602      	mov	r2, r0
   15462:	460b      	mov	r3, r1
   15464:	4610      	mov	r0, r2
   15466:	4619      	mov	r1, r3
   15468:	f04f 0200 	mov.w	r2, #0
   1546c:	f04f 0300 	mov.w	r3, #0
   15470:	f2c4 0359 	movt	r3, #16473	; 0x4059
   15474:	f002 fa7c 	bl	17970 <__aeabi_dmul>
   15478:	4602      	mov	r2, r0
   1547a:	460b      	mov	r3, r1
   1547c:	4614      	mov	r4, r2
   1547e:	461d      	mov	r5, r3
   15480:	6838      	ldr	r0, [r7, #0]
   15482:	f002 fa21 	bl	178c8 <__aeabi_f2d>
   15486:	4602      	mov	r2, r0
   15488:	460b      	mov	r3, r1
   1548a:	4620      	mov	r0, r4
   1548c:	4629      	mov	r1, r5
   1548e:	f002 fa6f 	bl	17970 <__aeabi_dmul>
   15492:	4602      	mov	r2, r0
   15494:	460b      	mov	r3, r1
   15496:	4610      	mov	r0, r2
   15498:	4619      	mov	r1, r3
   1549a:	f002 fd4b 	bl	17f34 <__aeabi_d2f>
   1549e:	4602      	mov	r2, r0
   154a0:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
   154a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154a8:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   154aa:	6838      	ldr	r0, [r7, #0]
   154ac:	f04f 0100 	mov.w	r1, #0
   154b0:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   154b4:	f002 fe9c 	bl	181f0 <__aeabi_fmul>
   154b8:	4603      	mov	r3, r0
   154ba:	461a      	mov	r2, r3
   154bc:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
   154c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154c4:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   154c6:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
   154ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154ce:	681a      	ldr	r2, [r3, #0]
   154d0:	f24b 43d8 	movw	r3, #46296	; 0xb4d8
   154d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154d8:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   154da:	f24b 0340 	movw	r3, #45120	; 0xb040
   154de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154e2:	681a      	ldr	r2, [r3, #0]
   154e4:	f24b 43d4 	movw	r3, #46292	; 0xb4d4
   154e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154ec:	601a      	str	r2, [r3, #0]
}
   154ee:	3710      	adds	r7, #16
   154f0:	46bd      	mov	sp, r7
   154f2:	bdb0      	pop	{r4, r5, r7, pc}
   154f4:	f3af 8000 	nop.w
   154f8:	d916872b 	.word	0xd916872b
   154fc:	3feff7ce 	.word	0x3feff7ce

00015500 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   15500:	b580      	push	{r7, lr}
   15502:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   15504:	f24b 0364 	movw	r3, #45156	; 0xb064
   15508:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1550c:	781b      	ldrb	r3, [r3, #0]
   1550e:	f003 0320 	and.w	r3, r3, #32
   15512:	2b00      	cmp	r3, #0
   15514:	d044      	beq.n	155a0 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   15516:	f24b 035c 	movw	r3, #45148	; 0xb05c
   1551a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1551e:	681a      	ldr	r2, [r3, #0]
   15520:	f24b 4384 	movw	r3, #46212	; 0xb484
   15524:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15528:	601a      	str	r2, [r3, #0]
   1552a:	f24b 0360 	movw	r3, #45152	; 0xb060
   1552e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15532:	681a      	ldr	r2, [r3, #0]
   15534:	f24b 4388 	movw	r3, #46216	; 0xb488
   15538:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1553c:	601a      	str	r2, [r3, #0]
   1553e:	f24b 0344 	movw	r3, #45124	; 0xb044
   15542:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15546:	681a      	ldr	r2, [r3, #0]
   15548:	f24b 438c 	movw	r3, #46220	; 0xb48c
   1554c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15550:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   15552:	f24b 0348 	movw	r3, #45128	; 0xb048
   15556:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1555a:	681a      	ldr	r2, [r3, #0]
   1555c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   15560:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15564:	601a      	str	r2, [r3, #0]
   15566:	f24b 0350 	movw	r3, #45136	; 0xb050
   1556a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1556e:	681a      	ldr	r2, [r3, #0]
   15570:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
   15574:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15578:	601a      	str	r2, [r3, #0]
   1557a:	f24b 034c 	movw	r3, #45132	; 0xb04c
   1557e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15582:	681a      	ldr	r2, [r3, #0]
   15584:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
   15588:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1558c:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   1558e:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
   15592:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15596:	881b      	ldrh	r3, [r3, #0]
   15598:	2b00      	cmp	r3, #0
   1559a:	d001      	beq.n	155a0 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   1559c:	f7ff fd4e 	bl	1503c <estimator_update_ir_estim>
  }
}
   155a0:	bd80      	pop	{r7, pc}
   155a2:	bf00      	nop

000155a4 <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   155a4:	b480      	push	{r7}
   155a6:	af00      	add	r7, sp, #0
  
}
   155a8:	46bd      	mov	sp, r7
   155aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   155ae:	4770      	bx	lr

000155b0 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   155b0:	b5b0      	push	{r4, r5, r7, lr}
   155b2:	b082      	sub	sp, #8
   155b4:	af00      	add	r7, sp, #0
   155b6:	4603      	mov	r3, r0
   155b8:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   155ba:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
   155be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155c2:	781b      	ldrb	r3, [r3, #0]
   155c4:	2b01      	cmp	r3, #1
   155c6:	f040 80e0 	bne.w	1578a <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   155ca:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
   155ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155d2:	781b      	ldrb	r3, [r3, #0]
   155d4:	2b02      	cmp	r3, #2
   155d6:	d168      	bne.n	156aa <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   155d8:	79fb      	ldrb	r3, [r7, #7]
   155da:	2b00      	cmp	r3, #0
   155dc:	d013      	beq.n	15606 <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   155de:	f240 33f4 	movw	r3, #1012	; 0x3f4
   155e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155e6:	881a      	ldrh	r2, [r3, #0]
   155e8:	f24b 43ea 	movw	r3, #46314	; 0xb4ea
   155ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155f0:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   155f2:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   155f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155fa:	895a      	ldrh	r2, [r3, #10]
   155fc:	f24b 43e6 	movw	r3, #46310	; 0xb4e6
   15600:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15604:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15606:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   1560a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1560e:	895b      	ldrh	r3, [r3, #10]
   15610:	b21a      	sxth	r2, r3
   15612:	f24b 43e6 	movw	r3, #46310	; 0xb4e6
   15616:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1561a:	881b      	ldrh	r3, [r3, #0]
   1561c:	b21b      	sxth	r3, r3
   1561e:	1ad3      	subs	r3, r2, r3
   15620:	4618      	mov	r0, r3
   15622:	f002 fd91 	bl	18148 <__aeabi_i2f>
   15626:	4603      	mov	r3, r0
   15628:	4618      	mov	r0, r3
   1562a:	f002 f94d 	bl	178c8 <__aeabi_f2d>
   1562e:	4602      	mov	r2, r0
   15630:	460b      	mov	r3, r1
   15632:	4610      	mov	r0, r2
   15634:	4619      	mov	r1, r3
   15636:	f04f 0200 	mov.w	r2, #0
   1563a:	f04f 0300 	mov.w	r3, #0
   1563e:	f2c4 034e 	movt	r3, #16462	; 0x404e
   15642:	f002 f995 	bl	17970 <__aeabi_dmul>
   15646:	4602      	mov	r2, r0
   15648:	460b      	mov	r3, r1
   1564a:	4610      	mov	r0, r2
   1564c:	4619      	mov	r1, r3
   1564e:	f04f 0200 	mov.w	r2, #0
   15652:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15656:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1565a:	f002 fab3 	bl	17bc4 <__aeabi_ddiv>
   1565e:	4602      	mov	r2, r0
   15660:	460b      	mov	r3, r1
   15662:	4610      	mov	r0, r2
   15664:	4619      	mov	r1, r3
   15666:	f002 fc1d 	bl	17ea4 <__aeabi_d2iz>
   1566a:	4603      	mov	r3, r0
   1566c:	b29b      	uxth	r3, r3
   1566e:	b29a      	uxth	r2, r3
   15670:	f24b 43ea 	movw	r3, #46314	; 0xb4ea
   15674:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15678:	881b      	ldrh	r3, [r3, #0]
   1567a:	b29b      	uxth	r3, r3
   1567c:	4413      	add	r3, r2
   1567e:	b29b      	uxth	r3, r3
   15680:	b29a      	uxth	r2, r3
   15682:	f240 33f4 	movw	r3, #1012	; 0x3f4
   15686:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1568a:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   1568c:	f240 33f4 	movw	r3, #1012	; 0x3f4
   15690:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15694:	881b      	ldrh	r3, [r3, #0]
   15696:	b21b      	sxth	r3, r3
   15698:	4618      	mov	r0, r3
   1569a:	f002 fd55 	bl	18148 <__aeabi_i2f>
   1569e:	4602      	mov	r2, r0
   156a0:	f64a 63c0 	movw	r3, #44736	; 0xaec0
   156a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156a8:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   156aa:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
   156ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156b2:	781b      	ldrb	r3, [r3, #0]
   156b4:	2b02      	cmp	r3, #2
   156b6:	d168      	bne.n	1578a <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   156b8:	79fb      	ldrb	r3, [r7, #7]
   156ba:	2b00      	cmp	r3, #0
   156bc:	d013      	beq.n	156e6 <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   156be:	f240 33f2 	movw	r3, #1010	; 0x3f2
   156c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156c6:	881a      	ldrh	r2, [r3, #0]
   156c8:	f24b 43ec 	movw	r3, #46316	; 0xb4ec
   156cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156d0:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   156d2:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   156d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156da:	899a      	ldrh	r2, [r3, #12]
   156dc:	f24b 43e8 	movw	r3, #46312	; 0xb4e8
   156e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156e4:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   156e6:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   156ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156ee:	899b      	ldrh	r3, [r3, #12]
   156f0:	b21a      	sxth	r2, r3
   156f2:	f24b 43e8 	movw	r3, #46312	; 0xb4e8
   156f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156fa:	881b      	ldrh	r3, [r3, #0]
   156fc:	b21b      	sxth	r3, r3
   156fe:	1ad3      	subs	r3, r2, r3
   15700:	4618      	mov	r0, r3
   15702:	f002 fd21 	bl	18148 <__aeabi_i2f>
   15706:	4603      	mov	r3, r0
   15708:	4618      	mov	r0, r3
   1570a:	f002 f8dd 	bl	178c8 <__aeabi_f2d>
   1570e:	4602      	mov	r2, r0
   15710:	460b      	mov	r3, r1
   15712:	4610      	mov	r0, r2
   15714:	4619      	mov	r1, r3
   15716:	f04f 0200 	mov.w	r2, #0
   1571a:	f04f 0300 	mov.w	r3, #0
   1571e:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   15722:	f002 f925 	bl	17970 <__aeabi_dmul>
   15726:	4602      	mov	r2, r0
   15728:	460b      	mov	r3, r1
   1572a:	4610      	mov	r0, r2
   1572c:	4619      	mov	r1, r3
   1572e:	f04f 0200 	mov.w	r2, #0
   15732:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15736:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1573a:	f002 fa43 	bl	17bc4 <__aeabi_ddiv>
   1573e:	4602      	mov	r2, r0
   15740:	460b      	mov	r3, r1
   15742:	4610      	mov	r0, r2
   15744:	4619      	mov	r1, r3
   15746:	f002 fbad 	bl	17ea4 <__aeabi_d2iz>
   1574a:	4603      	mov	r3, r0
   1574c:	b29b      	uxth	r3, r3
   1574e:	b29a      	uxth	r2, r3
   15750:	f24b 43ec 	movw	r3, #46316	; 0xb4ec
   15754:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15758:	881b      	ldrh	r3, [r3, #0]
   1575a:	b29b      	uxth	r3, r3
   1575c:	4413      	add	r3, r2
   1575e:	b29b      	uxth	r3, r3
   15760:	b29a      	uxth	r2, r3
   15762:	f240 33f2 	movw	r3, #1010	; 0x3f2
   15766:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1576a:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   1576c:	f240 33f2 	movw	r3, #1010	; 0x3f2
   15770:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15774:	881b      	ldrh	r3, [r3, #0]
   15776:	b21b      	sxth	r3, r3
   15778:	4618      	mov	r0, r3
   1577a:	f002 fce5 	bl	18148 <__aeabi_i2f>
   1577e:	4602      	mov	r2, r0
   15780:	f64a 63c4 	movw	r3, #44740	; 0xaec4
   15784:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15788:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   1578a:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
   1578e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15792:	781b      	ldrb	r3, [r3, #0]
   15794:	2b02      	cmp	r3, #2
   15796:	f040 80da 	bne.w	1594e <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1579a:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
   1579e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157a2:	781b      	ldrb	r3, [r3, #0]
   157a4:	2b02      	cmp	r3, #2
   157a6:	d165      	bne.n	15874 <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   157a8:	79fb      	ldrb	r3, [r7, #7]
   157aa:	2b00      	cmp	r3, #0
   157ac:	d013      	beq.n	157d6 <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   157ae:	f240 4308 	movw	r3, #1032	; 0x408
   157b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157b6:	681a      	ldr	r2, [r3, #0]
   157b8:	f24b 43f0 	movw	r3, #46320	; 0xb4f0
   157bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157c0:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   157c2:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   157c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157ca:	895a      	ldrh	r2, [r3, #10]
   157cc:	f24b 43e6 	movw	r3, #46310	; 0xb4e6
   157d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157d4:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   157d6:	f24b 43f0 	movw	r3, #46320	; 0xb4f0
   157da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157de:	681b      	ldr	r3, [r3, #0]
   157e0:	4618      	mov	r0, r3
   157e2:	f002 f871 	bl	178c8 <__aeabi_f2d>
   157e6:	4604      	mov	r4, r0
   157e8:	460d      	mov	r5, r1
   157ea:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   157ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157f2:	895b      	ldrh	r3, [r3, #10]
   157f4:	b21a      	sxth	r2, r3
   157f6:	f24b 43e6 	movw	r3, #46310	; 0xb4e6
   157fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157fe:	881b      	ldrh	r3, [r3, #0]
   15800:	b21b      	sxth	r3, r3
   15802:	1ad3      	subs	r3, r2, r3
   15804:	4618      	mov	r0, r3
   15806:	f002 fc9f 	bl	18148 <__aeabi_i2f>
   1580a:	4603      	mov	r3, r0
   1580c:	4618      	mov	r0, r3
   1580e:	f002 f85b 	bl	178c8 <__aeabi_f2d>
   15812:	4602      	mov	r2, r0
   15814:	460b      	mov	r3, r1
   15816:	4610      	mov	r0, r2
   15818:	4619      	mov	r1, r3
   1581a:	a34f      	add	r3, pc, #316	; (adr r3, 15958 <inflight_calib+0x3a8>)
   1581c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15820:	f002 f8a6 	bl	17970 <__aeabi_dmul>
   15824:	4602      	mov	r2, r0
   15826:	460b      	mov	r3, r1
   15828:	4610      	mov	r0, r2
   1582a:	4619      	mov	r1, r3
   1582c:	f04f 0200 	mov.w	r2, #0
   15830:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15834:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15838:	f002 f9c4 	bl	17bc4 <__aeabi_ddiv>
   1583c:	4602      	mov	r2, r0
   1583e:	460b      	mov	r3, r1
   15840:	4620      	mov	r0, r4
   15842:	4629      	mov	r1, r5
   15844:	f001 fee2 	bl	1760c <__adddf3>
   15848:	4602      	mov	r2, r0
   1584a:	460b      	mov	r3, r1
   1584c:	4610      	mov	r0, r2
   1584e:	4619      	mov	r1, r3
   15850:	f002 fb70 	bl	17f34 <__aeabi_d2f>
   15854:	4602      	mov	r2, r0
   15856:	f240 4308 	movw	r3, #1032	; 0x408
   1585a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1585e:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   15860:	f240 4308 	movw	r3, #1032	; 0x408
   15864:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15868:	681a      	ldr	r2, [r3, #0]
   1586a:	f64a 63c0 	movw	r3, #44736	; 0xaec0
   1586e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15872:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15874:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
   15878:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1587c:	781b      	ldrb	r3, [r3, #0]
   1587e:	2b02      	cmp	r3, #2
   15880:	d165      	bne.n	1594e <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   15882:	79fb      	ldrb	r3, [r7, #7]
   15884:	2b00      	cmp	r3, #0
   15886:	d013      	beq.n	158b0 <inflight_calib+0x300>
        max_roll_init = max_roll;
   15888:	f240 430c 	movw	r3, #1036	; 0x40c
   1588c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15890:	681a      	ldr	r2, [r3, #0]
   15892:	f24b 43f4 	movw	r3, #46324	; 0xb4f4
   15896:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1589a:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   1589c:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   158a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158a4:	899a      	ldrh	r2, [r3, #12]
   158a6:	f24b 43e8 	movw	r3, #46312	; 0xb4e8
   158aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158ae:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   158b0:	f24b 43f4 	movw	r3, #46324	; 0xb4f4
   158b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158b8:	681b      	ldr	r3, [r3, #0]
   158ba:	4618      	mov	r0, r3
   158bc:	f002 f804 	bl	178c8 <__aeabi_f2d>
   158c0:	4604      	mov	r4, r0
   158c2:	460d      	mov	r5, r1
   158c4:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   158c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158cc:	899b      	ldrh	r3, [r3, #12]
   158ce:	b21a      	sxth	r2, r3
   158d0:	f24b 43e8 	movw	r3, #46312	; 0xb4e8
   158d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158d8:	881b      	ldrh	r3, [r3, #0]
   158da:	b21b      	sxth	r3, r3
   158dc:	1ad3      	subs	r3, r2, r3
   158de:	4618      	mov	r0, r3
   158e0:	f002 fc32 	bl	18148 <__aeabi_i2f>
   158e4:	4603      	mov	r3, r0
   158e6:	4618      	mov	r0, r3
   158e8:	f001 ffee 	bl	178c8 <__aeabi_f2d>
   158ec:	4602      	mov	r2, r0
   158ee:	460b      	mov	r3, r1
   158f0:	4610      	mov	r0, r2
   158f2:	4619      	mov	r1, r3
   158f4:	a31a      	add	r3, pc, #104	; (adr r3, 15960 <inflight_calib+0x3b0>)
   158f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   158fa:	f002 f839 	bl	17970 <__aeabi_dmul>
   158fe:	4602      	mov	r2, r0
   15900:	460b      	mov	r3, r1
   15902:	4610      	mov	r0, r2
   15904:	4619      	mov	r1, r3
   15906:	f04f 0200 	mov.w	r2, #0
   1590a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1590e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15912:	f002 f957 	bl	17bc4 <__aeabi_ddiv>
   15916:	4602      	mov	r2, r0
   15918:	460b      	mov	r3, r1
   1591a:	4620      	mov	r0, r4
   1591c:	4629      	mov	r1, r5
   1591e:	f001 fe75 	bl	1760c <__adddf3>
   15922:	4602      	mov	r2, r0
   15924:	460b      	mov	r3, r1
   15926:	4610      	mov	r0, r2
   15928:	4619      	mov	r1, r3
   1592a:	f002 fb03 	bl	17f34 <__aeabi_d2f>
   1592e:	4602      	mov	r2, r0
   15930:	f240 430c 	movw	r3, #1036	; 0x40c
   15934:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15938:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   1593a:	f240 430c 	movw	r3, #1036	; 0x40c
   1593e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15942:	681a      	ldr	r2, [r3, #0]
   15944:	f64a 63c4 	movw	r3, #44740	; 0xaec4
   15948:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1594c:	601a      	str	r2, [r3, #0]
    }
  }
}
   1594e:	3708      	adds	r7, #8
   15950:	46bd      	mov	sp, r7
   15952:	bdb0      	pop	{r4, r5, r7, pc}
   15954:	f3af 8000 	nop.w
   15958:	9999999a 	.word	0x9999999a
   1595c:	3fb99999 	.word	0x3fb99999
   15960:	9999999a 	.word	0x9999999a
   15964:	bfc99999 	.word	0xbfc99999

00015968 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   15968:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   1596c:	b08e      	sub	sp, #56	; 0x38
   1596e:	af00      	add	r7, sp, #0
   15970:	e9c7 0102 	strd	r0, r1, [r7, #8]
   15974:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   15978:	a357      	add	r3, pc, #348	; (adr r3, 15ad8 <pp_atan2+0x170>)
   1597a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1597e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   15982:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15986:	f04f 0200 	mov.w	r2, #0
   1598a:	f04f 0300 	mov.w	r3, #0
   1598e:	f2c4 0308 	movt	r3, #16392	; 0x4008
   15992:	f001 ffed 	bl	17970 <__aeabi_dmul>
   15996:	4602      	mov	r2, r0
   15998:	460b      	mov	r3, r1
   1599a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   1599e:	e9d7 0100 	ldrd	r0, r1, [r7]
   159a2:	f04f 0200 	mov.w	r2, #0
   159a6:	f04f 0300 	mov.w	r3, #0
   159aa:	f002 fa53 	bl	17e54 <__aeabi_dcmplt>
   159ae:	4603      	mov	r3, r0
   159b0:	2b00      	cmp	r3, #0
   159b2:	d009      	beq.n	159c8 <pp_atan2+0x60>
   159b4:	a14a      	add	r1, pc, #296	; (adr r1, 15ae0 <pp_atan2+0x178>)
   159b6:	e9d1 0100 	ldrd	r0, r1, [r1]
   159ba:	e9d7 2300 	ldrd	r2, r3, [r7]
   159be:	f001 fe23 	bl	17608 <__aeabi_dsub>
   159c2:	4602      	mov	r2, r0
   159c4:	460b      	mov	r3, r1
   159c6:	e008      	b.n	159da <pp_atan2+0x72>
   159c8:	e9d7 0100 	ldrd	r0, r1, [r7]
   159cc:	a344      	add	r3, pc, #272	; (adr r3, 15ae0 <pp_atan2+0x178>)
   159ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   159d2:	f001 fe1b 	bl	1760c <__adddf3>
   159d6:	4602      	mov	r2, r0
   159d8:	460b      	mov	r3, r1
   159da:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   159de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   159e2:	f04f 0200 	mov.w	r2, #0
   159e6:	f04f 0300 	mov.w	r3, #0
   159ea:	f002 fa51 	bl	17e90 <__aeabi_dcmpgt>
   159ee:	4603      	mov	r3, r0
   159f0:	2b00      	cmp	r3, #0
   159f2:	d02a      	beq.n	15a4a <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   159f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   159f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   159fc:	f001 fe04 	bl	17608 <__aeabi_dsub>
   15a00:	4602      	mov	r2, r0
   15a02:	460b      	mov	r3, r1
   15a04:	4690      	mov	r8, r2
   15a06:	4699      	mov	r9, r3
   15a08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15a10:	f001 fdfc 	bl	1760c <__adddf3>
   15a14:	4602      	mov	r2, r0
   15a16:	460b      	mov	r3, r1
   15a18:	4640      	mov	r0, r8
   15a1a:	4649      	mov	r1, r9
   15a1c:	f002 f8d2 	bl	17bc4 <__aeabi_ddiv>
   15a20:	4602      	mov	r2, r0
   15a22:	460b      	mov	r3, r1
   15a24:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15a28:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15a2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15a30:	f001 ff9e 	bl	17970 <__aeabi_dmul>
   15a34:	4602      	mov	r2, r0
   15a36:	460b      	mov	r3, r1
   15a38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15a3c:	f001 fde4 	bl	17608 <__aeabi_dsub>
   15a40:	4602      	mov	r2, r0
   15a42:	460b      	mov	r3, r1
   15a44:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15a48:	e029      	b.n	15a9e <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   15a4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15a4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15a52:	f001 fddb 	bl	1760c <__adddf3>
   15a56:	4602      	mov	r2, r0
   15a58:	460b      	mov	r3, r1
   15a5a:	4690      	mov	r8, r2
   15a5c:	4699      	mov	r9, r3
   15a5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15a62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   15a66:	f001 fdcf 	bl	17608 <__aeabi_dsub>
   15a6a:	4602      	mov	r2, r0
   15a6c:	460b      	mov	r3, r1
   15a6e:	4640      	mov	r0, r8
   15a70:	4649      	mov	r1, r9
   15a72:	f002 f8a7 	bl	17bc4 <__aeabi_ddiv>
   15a76:	4602      	mov	r2, r0
   15a78:	460b      	mov	r3, r1
   15a7a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   15a7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15a82:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15a86:	f001 ff73 	bl	17970 <__aeabi_dmul>
   15a8a:	4602      	mov	r2, r0
   15a8c:	460b      	mov	r3, r1
   15a8e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   15a92:	f001 fdb9 	bl	17608 <__aeabi_dsub>
   15a96:	4602      	mov	r2, r0
   15a98:	460b      	mov	r3, r1
   15a9a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   15a9e:	e9d7 0100 	ldrd	r0, r1, [r7]
   15aa2:	f04f 0200 	mov.w	r2, #0
   15aa6:	f04f 0300 	mov.w	r3, #0
   15aaa:	f002 f9d3 	bl	17e54 <__aeabi_dcmplt>
   15aae:	4603      	mov	r3, r0
   15ab0:	2b00      	cmp	r3, #0
   15ab2:	d004      	beq.n	15abe <pp_atan2+0x156>
		return (-angle);
   15ab4:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15ab8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15abc:	e001      	b.n	15ac2 <pp_atan2+0x15a>
	else
		return angle;
   15abe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   15ac2:	4622      	mov	r2, r4
   15ac4:	462b      	mov	r3, r5
}
   15ac6:	4610      	mov	r0, r2
   15ac8:	4619      	mov	r1, r3
   15aca:	3738      	adds	r7, #56	; 0x38
   15acc:	46bd      	mov	sp, r7
   15ace:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   15ad2:	bf00      	nop
   15ad4:	f3af 8000 	nop.w
   15ad8:	54442d18 	.word	0x54442d18
   15adc:	3fe921fb 	.word	0x3fe921fb
   15ae0:	d9d7bdbb 	.word	0xd9d7bdbb
   15ae4:	3ddb7cdf 	.word	0x3ddb7cdf

00015ae8 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15ae8:	b5b0      	push	{r4, r5, r7, lr}
   15aea:	b08c      	sub	sp, #48	; 0x30
   15aec:	af00      	add	r7, sp, #0
   15aee:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   15af2:	e9d7 2300 	ldrd	r2, r3, [r7]
   15af6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15afa:	2301      	movs	r3, #1
   15afc:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   15afe:	e00a      	b.n	15b16 <pp_sin+0x2e>
   15b00:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b04:	a35a      	add	r3, pc, #360	; (adr r3, 15c70 <pp_sin+0x188>)
   15b06:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b0a:	f001 fd7f 	bl	1760c <__adddf3>
   15b0e:	4602      	mov	r2, r0
   15b10:	460b      	mov	r3, r1
   15b12:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15b16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b1a:	a357      	add	r3, pc, #348	; (adr r3, 15c78 <pp_sin+0x190>)
   15b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b20:	f002 f998 	bl	17e54 <__aeabi_dcmplt>
   15b24:	4603      	mov	r3, r0
   15b26:	2b00      	cmp	r3, #0
   15b28:	d1ea      	bne.n	15b00 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   15b2a:	e00a      	b.n	15b42 <pp_sin+0x5a>
   15b2c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b30:	a34f      	add	r3, pc, #316	; (adr r3, 15c70 <pp_sin+0x188>)
   15b32:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b36:	f001 fd67 	bl	17608 <__aeabi_dsub>
   15b3a:	4602      	mov	r2, r0
   15b3c:	460b      	mov	r3, r1
   15b3e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15b42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b46:	a34e      	add	r3, pc, #312	; (adr r3, 15c80 <pp_sin+0x198>)
   15b48:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b4c:	f002 f9a0 	bl	17e90 <__aeabi_dcmpgt>
   15b50:	4603      	mov	r3, r0
   15b52:	2b00      	cmp	r3, #0
   15b54:	d1ea      	bne.n	15b2c <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   15b56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b5a:	a34b      	add	r3, pc, #300	; (adr r3, 15c88 <pp_sin+0x1a0>)
   15b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b60:	f002 f996 	bl	17e90 <__aeabi_dcmpgt>
   15b64:	4603      	mov	r3, r0
   15b66:	2b00      	cmp	r3, #0
   15b68:	d00d      	beq.n	15b86 <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   15b6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b6e:	a348      	add	r3, pc, #288	; (adr r3, 15c90 <pp_sin+0x1a8>)
   15b70:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b74:	f001 fd48 	bl	17608 <__aeabi_dsub>
   15b78:	4602      	mov	r2, r0
   15b7a:	460b      	mov	r3, r1
   15b7c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   15b80:	f04f 33ff 	mov.w	r3, #4294967295
   15b84:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   15b86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b8a:	a343      	add	r3, pc, #268	; (adr r3, 15c98 <pp_sin+0x1b0>)
   15b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b90:	f002 f818 	bl	17bc4 <__aeabi_ddiv>
   15b94:	4602      	mov	r2, r0
   15b96:	460b      	mov	r3, r1
   15b98:	e9c7 2306 	strd	r2, r3, [r7, #24]
   15b9c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15ba4:	f001 fee4 	bl	17970 <__aeabi_dmul>
   15ba8:	4602      	mov	r2, r0
   15baa:	460b      	mov	r3, r1
   15bac:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15bb0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15bb4:	a33a      	add	r3, pc, #232	; (adr r3, 15ca0 <pp_sin+0x1b8>)
   15bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   15bba:	f001 fed9 	bl	17970 <__aeabi_dmul>
   15bbe:	4602      	mov	r2, r0
   15bc0:	460b      	mov	r3, r1
	      - .00467376557) * q2
   15bc2:	4610      	mov	r0, r2
   15bc4:	4619      	mov	r1, r3
   15bc6:	a338      	add	r3, pc, #224	; (adr r3, 15ca8 <pp_sin+0x1c0>)
   15bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   15bcc:	f001 fd1c 	bl	17608 <__aeabi_dsub>
   15bd0:	4602      	mov	r2, r0
   15bd2:	460b      	mov	r3, r1
   15bd4:	4610      	mov	r0, r2
   15bd6:	4619      	mov	r1, r3
   15bd8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15bdc:	f001 fec8 	bl	17970 <__aeabi_dmul>
   15be0:	4602      	mov	r2, r0
   15be2:	460b      	mov	r3, r1
	      + .07968967928) * q2
   15be4:	4610      	mov	r0, r2
   15be6:	4619      	mov	r1, r3
   15be8:	a331      	add	r3, pc, #196	; (adr r3, 15cb0 <pp_sin+0x1c8>)
   15bea:	e9d3 2300 	ldrd	r2, r3, [r3]
   15bee:	f001 fd0d 	bl	1760c <__adddf3>
   15bf2:	4602      	mov	r2, r0
   15bf4:	460b      	mov	r3, r1
   15bf6:	4610      	mov	r0, r2
   15bf8:	4619      	mov	r1, r3
   15bfa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15bfe:	f001 feb7 	bl	17970 <__aeabi_dmul>
   15c02:	4602      	mov	r2, r0
   15c04:	460b      	mov	r3, r1
	      - .64596371106) * q2
   15c06:	4610      	mov	r0, r2
   15c08:	4619      	mov	r1, r3
   15c0a:	a32b      	add	r3, pc, #172	; (adr r3, 15cb8 <pp_sin+0x1d0>)
   15c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c10:	f001 fcfa 	bl	17608 <__aeabi_dsub>
   15c14:	4602      	mov	r2, r0
   15c16:	460b      	mov	r3, r1
   15c18:	4610      	mov	r0, r2
   15c1a:	4619      	mov	r1, r3
   15c1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15c20:	f001 fea6 	bl	17970 <__aeabi_dmul>
   15c24:	4602      	mov	r2, r0
   15c26:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15c28:	4610      	mov	r0, r2
   15c2a:	4619      	mov	r1, r3
   15c2c:	a324      	add	r3, pc, #144	; (adr r3, 15cc0 <pp_sin+0x1d8>)
   15c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c32:	f001 fceb 	bl	1760c <__adddf3>
   15c36:	4602      	mov	r2, r0
   15c38:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   15c3a:	4610      	mov	r0, r2
   15c3c:	4619      	mov	r1, r3
   15c3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15c42:	f001 fe95 	bl	17970 <__aeabi_dmul>
   15c46:	4602      	mov	r2, r0
   15c48:	460b      	mov	r3, r1
   15c4a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   15c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15c50:	2b00      	cmp	r3, #0
   15c52:	da04      	bge.n	15c5e <pp_sin+0x176>
   15c54:	68bc      	ldr	r4, [r7, #8]
   15c56:	68fb      	ldr	r3, [r7, #12]
   15c58:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15c5c:	e001      	b.n	15c62 <pp_sin+0x17a>
   15c5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   15c62:	4622      	mov	r2, r4
   15c64:	462b      	mov	r3, r5
}
   15c66:	4610      	mov	r0, r2
   15c68:	4619      	mov	r1, r3
   15c6a:	3730      	adds	r7, #48	; 0x30
   15c6c:	46bd      	mov	sp, r7
   15c6e:	bdb0      	pop	{r4, r5, r7, pc}
   15c70:	54442d18 	.word	0x54442d18
   15c74:	401921fb 	.word	0x401921fb
   15c78:	54442d18 	.word	0x54442d18
   15c7c:	bff921fb 	.word	0xbff921fb
   15c80:	7f3321d2 	.word	0x7f3321d2
   15c84:	4012d97c 	.word	0x4012d97c
   15c88:	54442d18 	.word	0x54442d18
   15c8c:	3ff921fb 	.word	0x3ff921fb
   15c90:	54442d18 	.word	0x54442d18
   15c94:	400921fb 	.word	0x400921fb
   15c98:	5443d6f4 	.word	0x5443d6f4
   15c9c:	3ff921fb 	.word	0x3ff921fb
   15ca0:	48a890af 	.word	0x48a890af
   15ca4:	3f23daf7 	.word	0x3f23daf7
   15ca8:	645b6d0e 	.word	0x645b6d0e
   15cac:	3f7324cc 	.word	0x3f7324cc
   15cb0:	f65619a5 	.word	0xf65619a5
   15cb4:	3fb4668a 	.word	0x3fb4668a
   15cb8:	16acf9cd 	.word	0x16acf9cd
   15cbc:	3fe4abbc 	.word	0x3fe4abbc
   15cc0:	520817f7 	.word	0x520817f7
   15cc4:	3ff921fb 	.word	0x3ff921fb

00015cc8 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   15cc8:	b480      	push	{r7}
   15cca:	b083      	sub	sp, #12
   15ccc:	af00      	add	r7, sp, #0
   15cce:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   15cd2:	4610      	mov	r0, r2
   15cd4:	4619      	mov	r1, r3
   15cd6:	370c      	adds	r7, #12
   15cd8:	46bd      	mov	sp, r7
   15cda:	f85d 7b04 	ldr.w	r7, [sp], #4
   15cde:	4770      	bx	lr

00015ce0 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   15ce0:	b480      	push	{r7}
   15ce2:	b083      	sub	sp, #12
   15ce4:	af00      	add	r7, sp, #0
   15ce6:	4603      	mov	r3, r0
   15ce8:	6039      	str	r1, [r7, #0]
   15cea:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   15cec:	79fa      	ldrb	r2, [r7, #7]
   15cee:	f24b 5308 	movw	r3, #46344	; 0xb508
   15cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cf6:	6839      	ldr	r1, [r7, #0]
   15cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   15cfc:	370c      	adds	r7, #12
   15cfe:	46bd      	mov	sp, r7
   15d00:	f85d 7b04 	ldr.w	r7, [sp], #4
   15d04:	4770      	bx	lr
   15d06:	bf00      	nop

00015d08 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   15d08:	b480      	push	{r7}
   15d0a:	b083      	sub	sp, #12
   15d0c:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   15d0e:	f242 0315 	movw	r3, #8213	; 0x2015
   15d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d16:	2200      	movs	r2, #0
   15d18:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   15d1a:	f242 0314 	movw	r3, #8212	; 0x2014
   15d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d22:	2200      	movs	r2, #0
   15d24:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   15d26:	f242 0307 	movw	r3, #8199	; 0x2007
   15d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d2e:	22c0      	movs	r2, #192	; 0xc0
   15d30:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   15d32:	f242 0306 	movw	r3, #8198	; 0x2006
   15d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d3a:	22cf      	movs	r2, #207	; 0xcf
   15d3c:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15d3e:	2300      	movs	r3, #0
   15d40:	71fb      	strb	r3, [r7, #7]
   15d42:	e00a      	b.n	15d5a <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   15d44:	79fa      	ldrb	r2, [r7, #7]
   15d46:	f24b 5308 	movw	r3, #46344	; 0xb508
   15d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d4e:	2100      	movs	r1, #0
   15d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15d54:	79fb      	ldrb	r3, [r7, #7]
   15d56:	3301      	adds	r3, #1
   15d58:	71fb      	strb	r3, [r7, #7]
   15d5a:	79fb      	ldrb	r3, [r7, #7]
   15d5c:	2b07      	cmp	r3, #7
   15d5e:	d9f1      	bls.n	15d44 <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   15d60:	370c      	adds	r7, #12
   15d62:	46bd      	mov	sp, r7
   15d64:	f85d 7b04 	ldr.w	r7, [sp], #4
   15d68:	4770      	bx	lr
   15d6a:	bf00      	nop

00015d6c <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   15d6c:	b480      	push	{r7}
   15d6e:	b083      	sub	sp, #12
   15d70:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   15d72:	f242 0326 	movw	r3, #8230	; 0x2026
   15d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d7a:	881b      	ldrh	r3, [r3, #0]
   15d7c:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   15d7e:	f24b 5364 	movw	r3, #46436	; 0xb564
   15d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d86:	881b      	ldrh	r3, [r3, #0]
   15d88:	88fa      	ldrh	r2, [r7, #6]
   15d8a:	1ad3      	subs	r3, r2, r3
   15d8c:	80bb      	strh	r3, [r7, #4]
  last		= this;
   15d8e:	f24b 5364 	movw	r3, #46436	; 0xb564
   15d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d96:	88fa      	ldrh	r2, [r7, #6]
   15d98:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   15d9a:	f24b 5366 	movw	r3, #46438	; 0xb566
   15d9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15da2:	781b      	ldrb	r3, [r3, #0]
   15da4:	2b00      	cmp	r3, #0
   15da6:	d11e      	bne.n	15de6 <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   15da8:	f242 0324 	movw	r3, #8228	; 0x2024
   15dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15db0:	781b      	ldrb	r3, [r3, #0]
   15db2:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   15db4:	f24b 5367 	movw	r3, #46439	; 0xb567
   15db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dbc:	781b      	ldrb	r3, [r3, #0]
   15dbe:	78fa      	ldrb	r2, [r7, #3]
   15dc0:	1ad3      	subs	r3, r2, r3
   15dc2:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   15dc4:	f24b 5367 	movw	r3, #46439	; 0xb567
   15dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dcc:	78fa      	ldrb	r2, [r7, #3]
   15dce:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   15dd0:	78bb      	ldrb	r3, [r7, #2]
   15dd2:	2b6d      	cmp	r3, #109	; 0x6d
   15dd4:	d906      	bls.n	15de4 <__vector_34+0x78>
      state = 1;
   15dd6:	f24b 5366 	movw	r3, #46438	; 0xb566
   15dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dde:	2201      	movs	r2, #1
   15de0:	701a      	strb	r2, [r3, #0]
   15de2:	e053      	b.n	15e8c <__vector_34+0x120>
   15de4:	e052      	b.n	15e8c <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   15de6:	88bb      	ldrh	r3, [r7, #4]
   15de8:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   15dec:	d304      	bcc.n	15df8 <__vector_34+0x8c>
   15dee:	88ba      	ldrh	r2, [r7, #4]
   15df0:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   15df4:	429a      	cmp	r2, r3
   15df6:	d911      	bls.n	15e1c <__vector_34+0xb0>
      RestartPpmCycle();
   15df8:	f24b 5366 	movw	r3, #46438	; 0xb566
   15dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e00:	2200      	movs	r2, #0
   15e02:	701a      	strb	r2, [r3, #0]
   15e04:	f242 0324 	movw	r3, #8228	; 0x2024
   15e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e0c:	781b      	ldrb	r3, [r3, #0]
   15e0e:	b2da      	uxtb	r2, r3
   15e10:	f24b 5367 	movw	r3, #46439	; 0xb567
   15e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e18:	701a      	strb	r2, [r3, #0]
   15e1a:	e038      	b.n	15e8e <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   15e1c:	f24b 5366 	movw	r3, #46438	; 0xb566
   15e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e24:	781b      	ldrb	r3, [r3, #0]
   15e26:	1e5a      	subs	r2, r3, #1
   15e28:	f24b 5328 	movw	r3, #46376	; 0xb528
   15e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e30:	88b9      	ldrh	r1, [r7, #4]
   15e32:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   15e36:	f24b 5366 	movw	r3, #46438	; 0xb566
   15e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e3e:	781b      	ldrb	r3, [r3, #0]
   15e40:	2b08      	cmp	r3, #8
   15e42:	d917      	bls.n	15e74 <__vector_34+0x108>
      ppm_valid	= 1;
   15e44:	f24b 5363 	movw	r3, #46435	; 0xb563
   15e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e4c:	2201      	movs	r2, #1
   15e4e:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   15e50:	f24b 5366 	movw	r3, #46438	; 0xb566
   15e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e58:	2200      	movs	r2, #0
   15e5a:	701a      	strb	r2, [r3, #0]
   15e5c:	f242 0324 	movw	r3, #8228	; 0x2024
   15e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e64:	781b      	ldrb	r3, [r3, #0]
   15e66:	b2da      	uxtb	r2, r3
   15e68:	f24b 5367 	movw	r3, #46439	; 0xb567
   15e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e70:	701a      	strb	r2, [r3, #0]
   15e72:	e00c      	b.n	15e8e <__vector_34+0x122>
    } else 
      state++;
   15e74:	f24b 5366 	movw	r3, #46438	; 0xb566
   15e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e7c:	781b      	ldrb	r3, [r3, #0]
   15e7e:	3301      	adds	r3, #1
   15e80:	b2da      	uxtb	r2, r3
   15e82:	f24b 5366 	movw	r3, #46438	; 0xb566
   15e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e8a:	701a      	strb	r2, [r3, #0]
  }
  return;
   15e8c:	bf00      	nop
}
   15e8e:	370c      	adds	r7, #12
   15e90:	46bd      	mov	sp, r7
   15e92:	f85d 7b04 	ldr.w	r7, [sp], #4
   15e96:	4770      	bx	lr

00015e98 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   15e98:	b590      	push	{r4, r7, lr}
   15e9a:	b083      	sub	sp, #12
   15e9c:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   15e9e:	f24b 5328 	movw	r3, #46376	; 0xb528
   15ea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ea6:	881b      	ldrh	r3, [r3, #0]
   15ea8:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   15eac:	b29b      	uxth	r3, r3
   15eae:	80fb      	strh	r3, [r7, #6]
   15eb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15eb4:	4618      	mov	r0, r3
   15eb6:	f002 f947 	bl	18148 <__aeabi_i2f>
   15eba:	4603      	mov	r3, r0
   15ebc:	4618      	mov	r0, r3
   15ebe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   15ec2:	f002 f995 	bl	181f0 <__aeabi_fmul>
   15ec6:	4603      	mov	r3, r0
   15ec8:	4618      	mov	r0, r3
   15eca:	f002 fb57 	bl	1857c <__aeabi_f2iz>
   15ece:	4603      	mov	r3, r0
   15ed0:	b29a      	uxth	r2, r3
   15ed2:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15eda:	801a      	strh	r2, [r3, #0]
   15edc:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ee4:	881b      	ldrh	r3, [r3, #0]
   15ee6:	b21b      	sxth	r3, r3
   15ee8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15eec:	dd07      	ble.n	15efe <last_radio_from_ppm+0x66>
   15eee:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ef6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15efa:	801a      	strh	r2, [r3, #0]
   15efc:	e00d      	b.n	15f1a <last_radio_from_ppm+0x82>
   15efe:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f06:	881b      	ldrh	r3, [r3, #0]
   15f08:	b21b      	sxth	r3, r3
   15f0a:	2b00      	cmp	r3, #0
   15f0c:	da05      	bge.n	15f1a <last_radio_from_ppm+0x82>
   15f0e:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f16:	2200      	movs	r2, #0
   15f18:	801a      	strh	r2, [r3, #0]
   15f1a:	f24b 5328 	movw	r3, #46376	; 0xb528
   15f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f22:	885b      	ldrh	r3, [r3, #2]
   15f24:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15f28:	b29b      	uxth	r3, r3
   15f2a:	80fb      	strh	r3, [r7, #6]
   15f2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15f30:	4618      	mov	r0, r3
   15f32:	f002 f909 	bl	18148 <__aeabi_i2f>
   15f36:	4603      	mov	r3, r0
   15f38:	4618      	mov	r0, r3
   15f3a:	f002 fb1f 	bl	1857c <__aeabi_f2iz>
   15f3e:	4603      	mov	r3, r0
   15f40:	b29a      	uxth	r2, r3
   15f42:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f4a:	805a      	strh	r2, [r3, #2]
   15f4c:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f54:	885b      	ldrh	r3, [r3, #2]
   15f56:	b21b      	sxth	r3, r3
   15f58:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15f5c:	dd07      	ble.n	15f6e <last_radio_from_ppm+0xd6>
   15f5e:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f66:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15f6a:	805a      	strh	r2, [r3, #2]
   15f6c:	e00f      	b.n	15f8e <last_radio_from_ppm+0xf6>
   15f6e:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15f72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f76:	885b      	ldrh	r3, [r3, #2]
   15f78:	b21b      	sxth	r3, r3
   15f7a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15f7e:	da06      	bge.n	15f8e <last_radio_from_ppm+0xf6>
   15f80:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f88:	f64d 2280 	movw	r2, #55936	; 0xda80
   15f8c:	805a      	strh	r2, [r3, #2]
   15f8e:	f24b 5328 	movw	r3, #46376	; 0xb528
   15f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f96:	889b      	ldrh	r3, [r3, #4]
   15f98:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15f9c:	b29b      	uxth	r3, r3
   15f9e:	80fb      	strh	r3, [r7, #6]
   15fa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15fa4:	4618      	mov	r0, r3
   15fa6:	f002 f8cf 	bl	18148 <__aeabi_i2f>
   15faa:	4603      	mov	r3, r0
   15fac:	4618      	mov	r0, r3
   15fae:	f002 fae5 	bl	1857c <__aeabi_f2iz>
   15fb2:	4603      	mov	r3, r0
   15fb4:	b29a      	uxth	r2, r3
   15fb6:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fbe:	809a      	strh	r2, [r3, #4]
   15fc0:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fc8:	889b      	ldrh	r3, [r3, #4]
   15fca:	b21b      	sxth	r3, r3
   15fcc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15fd0:	dd07      	ble.n	15fe2 <last_radio_from_ppm+0x14a>
   15fd2:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fda:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15fde:	809a      	strh	r2, [r3, #4]
   15fe0:	e00f      	b.n	16002 <last_radio_from_ppm+0x16a>
   15fe2:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fea:	889b      	ldrh	r3, [r3, #4]
   15fec:	b21b      	sxth	r3, r3
   15fee:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15ff2:	da06      	bge.n	16002 <last_radio_from_ppm+0x16a>
   15ff4:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15ff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ffc:	f64d 2280 	movw	r2, #55936	; 0xda80
   16000:	809a      	strh	r2, [r3, #4]
   16002:	f24b 5328 	movw	r3, #46376	; 0xb528
   16006:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1600a:	88db      	ldrh	r3, [r3, #6]
   1600c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16010:	b29b      	uxth	r3, r3
   16012:	80fb      	strh	r3, [r7, #6]
   16014:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16018:	4618      	mov	r0, r3
   1601a:	f002 f895 	bl	18148 <__aeabi_i2f>
   1601e:	4603      	mov	r3, r0
   16020:	4618      	mov	r0, r3
   16022:	f002 faab 	bl	1857c <__aeabi_f2iz>
   16026:	4603      	mov	r3, r0
   16028:	b29a      	uxth	r2, r3
   1602a:	f24b 533c 	movw	r3, #46396	; 0xb53c
   1602e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16032:	80da      	strh	r2, [r3, #6]
   16034:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16038:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1603c:	88db      	ldrh	r3, [r3, #6]
   1603e:	b21b      	sxth	r3, r3
   16040:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16044:	dd07      	ble.n	16056 <last_radio_from_ppm+0x1be>
   16046:	f24b 533c 	movw	r3, #46396	; 0xb53c
   1604a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1604e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16052:	80da      	strh	r2, [r3, #6]
   16054:	e00f      	b.n	16076 <last_radio_from_ppm+0x1de>
   16056:	f24b 533c 	movw	r3, #46396	; 0xb53c
   1605a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1605e:	88db      	ldrh	r3, [r3, #6]
   16060:	b21b      	sxth	r3, r3
   16062:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16066:	da06      	bge.n	16076 <last_radio_from_ppm+0x1de>
   16068:	f24b 533c 	movw	r3, #46396	; 0xb53c
   1606c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16070:	f64d 2280 	movw	r2, #55936	; 0xda80
   16074:	80da      	strh	r2, [r3, #6]
   16076:	f24b 5328 	movw	r3, #46376	; 0xb528
   1607a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1607e:	891b      	ldrh	r3, [r3, #8]
   16080:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16084:	b29b      	uxth	r3, r3
   16086:	80fb      	strh	r3, [r7, #6]
   16088:	f24b 5350 	movw	r3, #46416	; 0xb550
   1608c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16090:	891b      	ldrh	r3, [r3, #8]
   16092:	b21b      	sxth	r3, r3
   16094:	4618      	mov	r0, r3
   16096:	f002 f857 	bl	18148 <__aeabi_i2f>
   1609a:	4604      	mov	r4, r0
   1609c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   160a0:	4618      	mov	r0, r3
   160a2:	f002 f851 	bl	18148 <__aeabi_i2f>
   160a6:	4603      	mov	r3, r0
   160a8:	4618      	mov	r0, r3
   160aa:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   160ae:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   160b2:	f002 f89d 	bl	181f0 <__aeabi_fmul>
   160b6:	4603      	mov	r3, r0
   160b8:	4620      	mov	r0, r4
   160ba:	4619      	mov	r1, r3
   160bc:	f001 ff90 	bl	17fe0 <__addsf3>
   160c0:	4603      	mov	r3, r0
   160c2:	4618      	mov	r0, r3
   160c4:	f002 fa5a 	bl	1857c <__aeabi_f2iz>
   160c8:	4603      	mov	r3, r0
   160ca:	b29a      	uxth	r2, r3
   160cc:	f24b 5350 	movw	r3, #46416	; 0xb550
   160d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160d4:	811a      	strh	r2, [r3, #8]
   160d6:	f24b 5328 	movw	r3, #46376	; 0xb528
   160da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160de:	895b      	ldrh	r3, [r3, #10]
   160e0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   160e4:	b29b      	uxth	r3, r3
   160e6:	80fb      	strh	r3, [r7, #6]
   160e8:	f24b 5350 	movw	r3, #46416	; 0xb550
   160ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160f0:	895b      	ldrh	r3, [r3, #10]
   160f2:	b21b      	sxth	r3, r3
   160f4:	4618      	mov	r0, r3
   160f6:	f002 f827 	bl	18148 <__aeabi_i2f>
   160fa:	4604      	mov	r4, r0
   160fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16100:	4618      	mov	r0, r3
   16102:	f002 f821 	bl	18148 <__aeabi_i2f>
   16106:	4603      	mov	r3, r0
   16108:	4618      	mov	r0, r3
   1610a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1610e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16112:	f002 f86d 	bl	181f0 <__aeabi_fmul>
   16116:	4603      	mov	r3, r0
   16118:	4620      	mov	r0, r4
   1611a:	4619      	mov	r1, r3
   1611c:	f001 ff60 	bl	17fe0 <__addsf3>
   16120:	4603      	mov	r3, r0
   16122:	4618      	mov	r0, r3
   16124:	f002 fa2a 	bl	1857c <__aeabi_f2iz>
   16128:	4603      	mov	r3, r0
   1612a:	b29a      	uxth	r2, r3
   1612c:	f24b 5350 	movw	r3, #46416	; 0xb550
   16130:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16134:	815a      	strh	r2, [r3, #10]
   16136:	f24b 5328 	movw	r3, #46376	; 0xb528
   1613a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1613e:	899b      	ldrh	r3, [r3, #12]
   16140:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16144:	b29b      	uxth	r3, r3
   16146:	80fb      	strh	r3, [r7, #6]
   16148:	f24b 5350 	movw	r3, #46416	; 0xb550
   1614c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16150:	899b      	ldrh	r3, [r3, #12]
   16152:	b21b      	sxth	r3, r3
   16154:	4618      	mov	r0, r3
   16156:	f001 fff7 	bl	18148 <__aeabi_i2f>
   1615a:	4604      	mov	r4, r0
   1615c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16160:	4618      	mov	r0, r3
   16162:	f001 fff1 	bl	18148 <__aeabi_i2f>
   16166:	4603      	mov	r3, r0
   16168:	4618      	mov	r0, r3
   1616a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1616e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16172:	f002 f83d 	bl	181f0 <__aeabi_fmul>
   16176:	4603      	mov	r3, r0
   16178:	4620      	mov	r0, r4
   1617a:	4619      	mov	r1, r3
   1617c:	f001 ff30 	bl	17fe0 <__addsf3>
   16180:	4603      	mov	r3, r0
   16182:	4618      	mov	r0, r3
   16184:	f002 f9fa 	bl	1857c <__aeabi_f2iz>
   16188:	4603      	mov	r3, r0
   1618a:	b29a      	uxth	r2, r3
   1618c:	f24b 5350 	movw	r3, #46416	; 0xb550
   16190:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16194:	819a      	strh	r2, [r3, #12]
   16196:	f24b 5328 	movw	r3, #46376	; 0xb528
   1619a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1619e:	89db      	ldrh	r3, [r3, #14]
   161a0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   161a4:	b29b      	uxth	r3, r3
   161a6:	80fb      	strh	r3, [r7, #6]
   161a8:	f24b 5350 	movw	r3, #46416	; 0xb550
   161ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161b0:	89db      	ldrh	r3, [r3, #14]
   161b2:	b21b      	sxth	r3, r3
   161b4:	4618      	mov	r0, r3
   161b6:	f001 ffc7 	bl	18148 <__aeabi_i2f>
   161ba:	4604      	mov	r4, r0
   161bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   161c0:	4618      	mov	r0, r3
   161c2:	f001 ffc1 	bl	18148 <__aeabi_i2f>
   161c6:	4603      	mov	r3, r0
   161c8:	4618      	mov	r0, r3
   161ca:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   161ce:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   161d2:	f002 f80d 	bl	181f0 <__aeabi_fmul>
   161d6:	4603      	mov	r3, r0
   161d8:	4620      	mov	r0, r4
   161da:	4619      	mov	r1, r3
   161dc:	f001 ff00 	bl	17fe0 <__addsf3>
   161e0:	4603      	mov	r3, r0
   161e2:	4618      	mov	r0, r3
   161e4:	f002 f9ca 	bl	1857c <__aeabi_f2iz>
   161e8:	4603      	mov	r3, r0
   161ea:	b29a      	uxth	r2, r3
   161ec:	f24b 5350 	movw	r3, #46416	; 0xb550
   161f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161f4:	81da      	strh	r2, [r3, #14]
   161f6:	f24b 5328 	movw	r3, #46376	; 0xb528
   161fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161fe:	8a1b      	ldrh	r3, [r3, #16]
   16200:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16204:	b29b      	uxth	r3, r3
   16206:	80fb      	strh	r3, [r7, #6]
   16208:	f24b 5350 	movw	r3, #46416	; 0xb550
   1620c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16210:	8a1b      	ldrh	r3, [r3, #16]
   16212:	b21b      	sxth	r3, r3
   16214:	4618      	mov	r0, r3
   16216:	f001 ff97 	bl	18148 <__aeabi_i2f>
   1621a:	4604      	mov	r4, r0
   1621c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16220:	4618      	mov	r0, r3
   16222:	f001 ff91 	bl	18148 <__aeabi_i2f>
   16226:	4603      	mov	r3, r0
   16228:	4618      	mov	r0, r3
   1622a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1622e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16232:	f001 ffdd 	bl	181f0 <__aeabi_fmul>
   16236:	4603      	mov	r3, r0
   16238:	4620      	mov	r0, r4
   1623a:	4619      	mov	r1, r3
   1623c:	f001 fed0 	bl	17fe0 <__addsf3>
   16240:	4603      	mov	r3, r0
   16242:	4618      	mov	r0, r3
   16244:	f002 f99a 	bl	1857c <__aeabi_f2iz>
   16248:	4603      	mov	r3, r0
   1624a:	b29a      	uxth	r2, r3
   1624c:	f24b 5350 	movw	r3, #46416	; 0xb550
   16250:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16254:	821a      	strh	r2, [r3, #16]
   16256:	f24b 5368 	movw	r3, #46440	; 0xb568
   1625a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1625e:	781b      	ldrb	r3, [r3, #0]
   16260:	3301      	adds	r3, #1
   16262:	b2da      	uxtb	r2, r3
   16264:	f24b 5368 	movw	r3, #46440	; 0xb568
   16268:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1626c:	701a      	strb	r2, [r3, #0]
   1626e:	f24b 5368 	movw	r3, #46440	; 0xb568
   16272:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16276:	781b      	ldrb	r3, [r3, #0]
   16278:	2b0a      	cmp	r3, #10
   1627a:	f040 8101 	bne.w	16480 <last_radio_from_ppm+0x5e8>
   1627e:	f24b 5368 	movw	r3, #46440	; 0xb568
   16282:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16286:	2200      	movs	r2, #0
   16288:	701a      	strb	r2, [r3, #0]
   1628a:	f24b 5350 	movw	r3, #46416	; 0xb550
   1628e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16292:	891a      	ldrh	r2, [r3, #8]
   16294:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16298:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1629c:	811a      	strh	r2, [r3, #8]
   1629e:	f24b 5350 	movw	r3, #46416	; 0xb550
   162a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162a6:	2200      	movs	r2, #0
   162a8:	811a      	strh	r2, [r3, #8]
   162aa:	f24b 533c 	movw	r3, #46396	; 0xb53c
   162ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162b2:	891b      	ldrh	r3, [r3, #8]
   162b4:	b21b      	sxth	r3, r3
   162b6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   162ba:	dd07      	ble.n	162cc <last_radio_from_ppm+0x434>
   162bc:	f24b 533c 	movw	r3, #46396	; 0xb53c
   162c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   162c8:	811a      	strh	r2, [r3, #8]
   162ca:	e00f      	b.n	162ec <last_radio_from_ppm+0x454>
   162cc:	f24b 533c 	movw	r3, #46396	; 0xb53c
   162d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162d4:	891b      	ldrh	r3, [r3, #8]
   162d6:	b21b      	sxth	r3, r3
   162d8:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   162dc:	da06      	bge.n	162ec <last_radio_from_ppm+0x454>
   162de:	f24b 533c 	movw	r3, #46396	; 0xb53c
   162e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162e6:	f64d 2280 	movw	r2, #55936	; 0xda80
   162ea:	811a      	strh	r2, [r3, #8]
   162ec:	f24b 5350 	movw	r3, #46416	; 0xb550
   162f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162f4:	895a      	ldrh	r2, [r3, #10]
   162f6:	f24b 533c 	movw	r3, #46396	; 0xb53c
   162fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162fe:	815a      	strh	r2, [r3, #10]
   16300:	f24b 5350 	movw	r3, #46416	; 0xb550
   16304:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16308:	2200      	movs	r2, #0
   1630a:	815a      	strh	r2, [r3, #10]
   1630c:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16310:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16314:	895b      	ldrh	r3, [r3, #10]
   16316:	b21b      	sxth	r3, r3
   16318:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1631c:	dd07      	ble.n	1632e <last_radio_from_ppm+0x496>
   1631e:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16322:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16326:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1632a:	815a      	strh	r2, [r3, #10]
   1632c:	e00f      	b.n	1634e <last_radio_from_ppm+0x4b6>
   1632e:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16332:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16336:	895b      	ldrh	r3, [r3, #10]
   16338:	b21b      	sxth	r3, r3
   1633a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1633e:	da06      	bge.n	1634e <last_radio_from_ppm+0x4b6>
   16340:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16344:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16348:	f64d 2280 	movw	r2, #55936	; 0xda80
   1634c:	815a      	strh	r2, [r3, #10]
   1634e:	f24b 5350 	movw	r3, #46416	; 0xb550
   16352:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16356:	899a      	ldrh	r2, [r3, #12]
   16358:	f24b 533c 	movw	r3, #46396	; 0xb53c
   1635c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16360:	819a      	strh	r2, [r3, #12]
   16362:	f24b 5350 	movw	r3, #46416	; 0xb550
   16366:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1636a:	2200      	movs	r2, #0
   1636c:	819a      	strh	r2, [r3, #12]
   1636e:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16372:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16376:	899b      	ldrh	r3, [r3, #12]
   16378:	b21b      	sxth	r3, r3
   1637a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1637e:	dd07      	ble.n	16390 <last_radio_from_ppm+0x4f8>
   16380:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16384:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16388:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1638c:	819a      	strh	r2, [r3, #12]
   1638e:	e00f      	b.n	163b0 <last_radio_from_ppm+0x518>
   16390:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16394:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16398:	899b      	ldrh	r3, [r3, #12]
   1639a:	b21b      	sxth	r3, r3
   1639c:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   163a0:	da06      	bge.n	163b0 <last_radio_from_ppm+0x518>
   163a2:	f24b 533c 	movw	r3, #46396	; 0xb53c
   163a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163aa:	f64d 2280 	movw	r2, #55936	; 0xda80
   163ae:	819a      	strh	r2, [r3, #12]
   163b0:	f24b 5350 	movw	r3, #46416	; 0xb550
   163b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163b8:	89da      	ldrh	r2, [r3, #14]
   163ba:	f24b 533c 	movw	r3, #46396	; 0xb53c
   163be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163c2:	81da      	strh	r2, [r3, #14]
   163c4:	f24b 5350 	movw	r3, #46416	; 0xb550
   163c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163cc:	2200      	movs	r2, #0
   163ce:	81da      	strh	r2, [r3, #14]
   163d0:	f24b 533c 	movw	r3, #46396	; 0xb53c
   163d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163d8:	89db      	ldrh	r3, [r3, #14]
   163da:	b21b      	sxth	r3, r3
   163dc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   163e0:	dd07      	ble.n	163f2 <last_radio_from_ppm+0x55a>
   163e2:	f24b 533c 	movw	r3, #46396	; 0xb53c
   163e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163ea:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   163ee:	81da      	strh	r2, [r3, #14]
   163f0:	e00f      	b.n	16412 <last_radio_from_ppm+0x57a>
   163f2:	f24b 533c 	movw	r3, #46396	; 0xb53c
   163f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163fa:	89db      	ldrh	r3, [r3, #14]
   163fc:	b21b      	sxth	r3, r3
   163fe:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16402:	da06      	bge.n	16412 <last_radio_from_ppm+0x57a>
   16404:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16408:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1640c:	f64d 2280 	movw	r2, #55936	; 0xda80
   16410:	81da      	strh	r2, [r3, #14]
   16412:	f24b 5350 	movw	r3, #46416	; 0xb550
   16416:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1641a:	8a1a      	ldrh	r2, [r3, #16]
   1641c:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16420:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16424:	821a      	strh	r2, [r3, #16]
   16426:	f24b 5350 	movw	r3, #46416	; 0xb550
   1642a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1642e:	2200      	movs	r2, #0
   16430:	821a      	strh	r2, [r3, #16]
   16432:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16436:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1643a:	8a1b      	ldrh	r3, [r3, #16]
   1643c:	b21b      	sxth	r3, r3
   1643e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16442:	dd07      	ble.n	16454 <last_radio_from_ppm+0x5bc>
   16444:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16448:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1644c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16450:	821a      	strh	r2, [r3, #16]
   16452:	e00f      	b.n	16474 <last_radio_from_ppm+0x5dc>
   16454:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16458:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1645c:	8a1b      	ldrh	r3, [r3, #16]
   1645e:	b21b      	sxth	r3, r3
   16460:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16464:	da06      	bge.n	16474 <last_radio_from_ppm+0x5dc>
   16466:	f24b 533c 	movw	r3, #46396	; 0xb53c
   1646a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1646e:	f64d 2280 	movw	r2, #55936	; 0xda80
   16472:	821a      	strh	r2, [r3, #16]
   16474:	f24b 5362 	movw	r3, #46434	; 0xb562
   16478:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1647c:	2201      	movs	r2, #1
   1647e:	701a      	strb	r2, [r3, #0]
}
   16480:	370c      	adds	r7, #12
   16482:	46bd      	mov	sp, r7
   16484:	bd90      	pop	{r4, r7, pc}
   16486:	bf00      	nop

00016488 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   16488:	b480      	push	{r7}
   1648a:	af00      	add	r7, sp, #0
  idx_buf = 0;
   1648c:	f24b 539c 	movw	r3, #46492	; 0xb59c
   16490:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16494:	2200      	movs	r2, #0
   16496:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   16498:	f24b 539d 	movw	r3, #46493	; 0xb59d
   1649c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164a0:	2200      	movs	r2, #0
   164a2:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   164a4:	f24b 539c 	movw	r3, #46492	; 0xb59c
   164a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164ac:	781b      	ldrb	r3, [r3, #0]
   164ae:	b2db      	uxtb	r3, r3
   164b0:	461a      	mov	r2, r3
   164b2:	f24b 5384 	movw	r3, #46468	; 0xb584
   164b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164ba:	4413      	add	r3, r2
   164bc:	781a      	ldrb	r2, [r3, #0]
   164be:	f24b 539e 	movw	r3, #46494	; 0xb59e
   164c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164c6:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   164c8:	f242 030f 	movw	r3, #8207	; 0x200f
   164cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164d0:	f24b 529e 	movw	r2, #46494	; 0xb59e
   164d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   164d8:	7812      	ldrb	r2, [r2, #0]
   164da:	b2d2      	uxtb	r2, r2
   164dc:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   164de:	f24b 539a 	movw	r3, #46490	; 0xb59a
   164e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164e6:	2200      	movs	r2, #0
   164e8:	701a      	strb	r2, [r3, #0]
}
   164ea:	46bd      	mov	sp, r7
   164ec:	f85d 7b04 	ldr.w	r7, [sp], #4
   164f0:	4770      	bx	lr
   164f2:	bf00      	nop

000164f4 <fbw_spi_init>:

void fbw_spi_init(void) {
   164f4:	b480      	push	{r7}
   164f6:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   164f8:	f24b 5384 	movw	r3, #46468	; 0xb584
   164fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16500:	2200      	movs	r2, #0
   16502:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   16504:	f24b 5384 	movw	r3, #46468	; 0xb584
   16508:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1650c:	2200      	movs	r2, #0
   1650e:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   16510:	f242 0317 	movw	r3, #8215	; 0x2017
   16514:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16518:	f242 0217 	movw	r2, #8215	; 0x2017
   1651c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16520:	7812      	ldrb	r2, [r2, #0]
   16522:	b2d2      	uxtb	r2, r2
   16524:	f042 0210 	orr.w	r2, r2, #16
   16528:	b2d2      	uxtb	r2, r2
   1652a:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   1652c:	f242 030d 	movw	r3, #8205	; 0x200d
   16530:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16534:	2240      	movs	r2, #64	; 0x40
   16536:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   16538:	f242 030d 	movw	r3, #8205	; 0x200d
   1653c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16540:	f242 020d 	movw	r2, #8205	; 0x200d
   16544:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16548:	7812      	ldrb	r2, [r2, #0]
   1654a:	b2d2      	uxtb	r2, r2
   1654c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16550:	b2d2      	uxtb	r2, r2
   16552:	701a      	strb	r2, [r3, #0]
}
   16554:	46bd      	mov	sp, r7
   16556:	f85d 7b04 	ldr.w	r7, [sp], #4
   1655a:	4770      	bx	lr
   1655c:	0000      	movs	r0, r0
	...

00016560 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   16560:	b480      	push	{r7}
   16562:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   16564:	f242 032f 	movw	r3, #8239	; 0x202f
   16568:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1656c:	2200      	movs	r2, #0
   1656e:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   16570:	f242 032e 	movw	r3, #8238	; 0x202e
   16574:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16578:	2201      	movs	r2, #1
   1657a:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   1657c:	f242 0325 	movw	r3, #8229	; 0x2025
   16580:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16584:	2207      	movs	r2, #7
   16586:	701a      	strb	r2, [r3, #0]
}
   16588:	46bd      	mov	sp, r7
   1658a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1658e:	4770      	bx	lr

00016590 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   16590:	b480      	push	{r7}
   16592:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   16594:	f242 032e 	movw	r3, #8238	; 0x202e
   16598:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1659c:	f242 022e 	movw	r2, #8238	; 0x202e
   165a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   165a4:	7812      	ldrb	r2, [r2, #0]
   165a6:	b2d2      	uxtb	r2, r2
   165a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   165ac:	b2d2      	uxtb	r2, r2
   165ae:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   165b0:	f242 032e 	movw	r3, #8238	; 0x202e
   165b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165b8:	f242 022e 	movw	r2, #8238	; 0x202e
   165bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   165c0:	7812      	ldrb	r2, [r2, #0]
   165c2:	b2d2      	uxtb	r2, r2
   165c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   165c8:	b2d2      	uxtb	r2, r2
   165ca:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   165cc:	f242 0317 	movw	r3, #8215	; 0x2017
   165d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165d4:	f242 0217 	movw	r2, #8215	; 0x2017
   165d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   165dc:	7812      	ldrb	r2, [r2, #0]
   165de:	b2d2      	uxtb	r2, r2
   165e0:	f022 0201 	bic.w	r2, r2, #1
   165e4:	b2d2      	uxtb	r2, r2
   165e6:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   165e8:	f242 0337 	movw	r3, #8247	; 0x2037
   165ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165f0:	f242 0237 	movw	r2, #8247	; 0x2037
   165f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   165f8:	7812      	ldrb	r2, [r2, #0]
   165fa:	b2d2      	uxtb	r2, r2
   165fc:	f042 0220 	orr.w	r2, r2, #32
   16600:	b2d2      	uxtb	r2, r2
   16602:	701a      	strb	r2, [r3, #0]
}
   16604:	46bd      	mov	sp, r7
   16606:	f85d 7b04 	ldr.w	r7, [sp], #4
   1660a:	4770      	bx	lr

0001660c <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   1660c:	b580      	push	{r7, lr}
   1660e:	b082      	sub	sp, #8
   16610:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16612:	2300      	movs	r3, #0
   16614:	71fb      	strb	r3, [r7, #7]
   16616:	e010      	b.n	1663a <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   16618:	79fa      	ldrb	r2, [r7, #7]
   1661a:	79f9      	ldrb	r1, [r7, #7]
   1661c:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16620:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16624:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   16628:	f24b 5384 	movw	r3, #46468	; 0xb584
   1662c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16630:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16634:	79fb      	ldrb	r3, [r7, #7]
   16636:	3301      	adds	r3, #1
   16638:	71fb      	strb	r3, [r7, #7]
   1663a:	79fb      	ldrb	r3, [r7, #7]
   1663c:	2b08      	cmp	r3, #8
   1663e:	d9eb      	bls.n	16618 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   16640:	f24b 632c 	movw	r3, #46636	; 0xb62c
   16644:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16648:	781b      	ldrb	r3, [r3, #0]
   1664a:	2b00      	cmp	r3, #0
   1664c:	bf0c      	ite	eq
   1664e:	2300      	moveq	r3, #0
   16650:	2301      	movne	r3, #1
   16652:	b2db      	uxtb	r3, r3
   16654:	461a      	mov	r2, r3
   16656:	f24b 5384 	movw	r3, #46468	; 0xb584
   1665a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1665e:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   16660:	f24b 5384 	movw	r3, #46468	; 0xb584
   16664:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16668:	7cdb      	ldrb	r3, [r3, #19]
   1666a:	b2da      	uxtb	r2, r3
   1666c:	f24b 632e 	movw	r3, #46638	; 0xb62e
   16670:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16674:	781b      	ldrb	r3, [r3, #0]
   16676:	2b00      	cmp	r3, #0
   16678:	d001      	beq.n	1667e <to_autopilot_from_last_radio+0x72>
   1667a:	2302      	movs	r3, #2
   1667c:	e000      	b.n	16680 <to_autopilot_from_last_radio+0x74>
   1667e:	2300      	movs	r3, #0
   16680:	4313      	orrs	r3, r2
   16682:	b2db      	uxtb	r3, r3
   16684:	b2da      	uxtb	r2, r3
   16686:	f24b 5384 	movw	r3, #46468	; 0xb584
   1668a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1668e:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   16690:	f24b 5362 	movw	r3, #46434	; 0xb562
   16694:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16698:	781b      	ldrb	r3, [r3, #0]
   1669a:	2b00      	cmp	r3, #0
   1669c:	d012      	beq.n	166c4 <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   1669e:	f24b 5384 	movw	r3, #46468	; 0xb584
   166a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166a6:	7cdb      	ldrb	r3, [r3, #19]
   166a8:	f043 0304 	orr.w	r3, r3, #4
   166ac:	b2da      	uxtb	r2, r3
   166ae:	f24b 5384 	movw	r3, #46468	; 0xb584
   166b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166b6:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   166b8:	f24b 5362 	movw	r3, #46434	; 0xb562
   166bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166c0:	2200      	movs	r2, #0
   166c2:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   166c4:	f24b 6330 	movw	r3, #46640	; 0xb630
   166c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166cc:	781a      	ldrb	r2, [r3, #0]
   166ce:	f24b 5384 	movw	r3, #46468	; 0xb584
   166d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166d6:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   166d8:	f24b 53a0 	movw	r3, #46496	; 0xb5a0
   166dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166e0:	881b      	ldrh	r3, [r3, #0]
   166e2:	4618      	mov	r0, r3
   166e4:	f001 f8de 	bl	178a4 <__aeabi_i2d>
   166e8:	4602      	mov	r2, r0
   166ea:	460b      	mov	r3, r1
   166ec:	4610      	mov	r0, r2
   166ee:	4619      	mov	r1, r3
   166f0:	a31b      	add	r3, pc, #108	; (adr r3, 16760 <to_autopilot_from_last_radio+0x154>)
   166f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   166f6:	f001 f93b 	bl	17970 <__aeabi_dmul>
   166fa:	4602      	mov	r2, r0
   166fc:	460b      	mov	r3, r1
   166fe:	4610      	mov	r0, r2
   16700:	4619      	mov	r1, r3
   16702:	f04f 0200 	mov.w	r2, #0
   16706:	f04f 0300 	mov.w	r3, #0
   1670a:	f2c4 0340 	movt	r3, #16448	; 0x4040
   1670e:	f001 fa59 	bl	17bc4 <__aeabi_ddiv>
   16712:	4602      	mov	r2, r0
   16714:	460b      	mov	r3, r1
   16716:	4610      	mov	r0, r2
   16718:	4619      	mov	r1, r3
   1671a:	a313      	add	r3, pc, #76	; (adr r3, 16768 <to_autopilot_from_last_radio+0x15c>)
   1671c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16720:	f000 ff74 	bl	1760c <__adddf3>
   16724:	4602      	mov	r2, r0
   16726:	460b      	mov	r3, r1
   16728:	4610      	mov	r0, r2
   1672a:	4619      	mov	r1, r3
   1672c:	f04f 0200 	mov.w	r2, #0
   16730:	f04f 0300 	mov.w	r3, #0
   16734:	f2c4 0324 	movt	r3, #16420	; 0x4024
   16738:	f001 f91a 	bl	17970 <__aeabi_dmul>
   1673c:	4602      	mov	r2, r0
   1673e:	460b      	mov	r3, r1
   16740:	4610      	mov	r0, r2
   16742:	4619      	mov	r1, r3
   16744:	f001 fbd6 	bl	17ef4 <__aeabi_d2uiz>
   16748:	4603      	mov	r3, r0
   1674a:	b2da      	uxtb	r2, r3
   1674c:	f24b 5384 	movw	r3, #46468	; 0xb584
   16750:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16754:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   16756:	3708      	adds	r7, #8
   16758:	46bd      	mov	sp, r7
   1675a:	bd80      	pop	{r7, pc}
   1675c:	f3af 8000 	nop.w
   16760:	1eb851ec 	.word	0x1eb851ec
   16764:	3f91eb85 	.word	0x3f91eb85
   16768:	020c49ba 	.word	0x020c49ba
   1676c:	3fb6872b 	.word	0x3fb6872b

00016770 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   16770:	b580      	push	{r7, lr}
   16772:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
//   if ( !SpiIsSelected() && spi_was_interrupted ) 
   {
      spi_was_interrupted = FALSE;
   16774:	f24b 539b 	movw	r3, #46491	; 0xb59b
   16778:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1677c:	2200      	movs	r2, #0
   1677e:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   16780:	f7ff ff44 	bl	1660c <to_autopilot_from_last_radio>
      spi_reset();
   16784:	f7ff fe80 	bl	16488 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   16788:	bd80      	pop	{r7, pc}
   1678a:	bf00      	nop

0001678c <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   1678c:	b580      	push	{r7, lr}
   1678e:	af00      	add	r7, sp, #0
  uart_init_tx();
   16790:	f000 fb02 	bl	16d98 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   16794:	f648 00a4 	movw	r0, #34980	; 0x88a4
   16798:	f2c0 0001 	movt	r0, #1
   1679c:	f000 fbda 	bl	16f54 <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   167a0:	f7ff fab2 	bl	15d08 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   167a4:	2003      	movs	r0, #3
   167a6:	f24b 51a0 	movw	r1, #46496	; 0xb5a0
   167aa:	f2c2 0100 	movt	r1, #8192	; 0x2000
   167ae:	f7ff fa97 	bl	15ce0 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   167b2:	2006      	movs	r0, #6
   167b4:	f24b 51e4 	movw	r1, #46564	; 0xb5e4
   167b8:	f2c2 0100 	movt	r1, #8192	; 0x2000
   167bc:	f7ff fa90 	bl	15ce0 <fbw_adc_buf_channel>
#endif
  timer_init();
   167c0:	f7ff fece 	bl	16560 <timer_init>
  servo_init();
   167c4:	f000 f894 	bl	168f0 <servo_init>
  ppm_init();
   167c8:	f7ff fee2 	bl	16590 <ppm_init>
  fbw_spi_init();
   167cc:	f7ff fe92 	bl	164f4 <fbw_spi_init>
  //sei(); //FN
}
   167d0:	bd80      	pop	{r7, pc}
   167d2:	bf00      	nop

000167d4 <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   167d4:	b580      	push	{r7, lr}
   167d6:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    //if( ppm_valid ) 
    {
      ppm_valid = FALSE;
   167d8:	f24b 5363 	movw	r3, #46435	; 0xb563
   167dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167e0:	2200      	movs	r2, #0
   167e2:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   167e4:	f24b 632f 	movw	r3, #46639	; 0xb62f
   167e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167ec:	781b      	ldrb	r3, [r3, #0]
   167ee:	3301      	adds	r3, #1
   167f0:	b2da      	uxtb	r2, r3
   167f2:	f24b 632f 	movw	r3, #46639	; 0xb62f
   167f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167fa:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   167fc:	f24b 632c 	movw	r3, #46636	; 0xb62c
   16800:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16804:	2201      	movs	r2, #1
   16806:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16808:	f24b 632e 	movw	r3, #46638	; 0xb62e
   1680c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16810:	2200      	movs	r2, #0
   16812:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   16814:	f24b 632a 	movw	r3, #46634	; 0xb62a
   16818:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1681c:	2200      	movs	r2, #0
   1681e:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16820:	f7ff fb3a 	bl	15e98 <last_radio_from_ppm>
      //if (last_radio_contains_avg_channels) 
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   16824:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16828:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1682c:	891b      	ldrh	r3, [r3, #8]
   1682e:	b21b      	sxth	r3, r3
   16830:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   16834:	bfb4      	ite	lt
   16836:	2300      	movlt	r3, #0
   16838:	2301      	movge	r3, #1
   1683a:	b2db      	uxtb	r3, r3
   1683c:	461a      	mov	r2, r3
   1683e:	f24b 6328 	movw	r3, #46632	; 0xb628
   16842:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16846:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   16848:	f24b 6328 	movw	r3, #46632	; 0xb628
   1684c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16850:	781b      	ldrb	r3, [r3, #0]
   16852:	2b00      	cmp	r3, #0
   16854:	d105      	bne.n	16862 <test_ppm_task+0x8e>
      {
	servo_set(last_radio);
   16856:	f24b 503c 	movw	r0, #46396	; 0xb53c
   1685a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1685e:	f000 f925 	bl	16aac <servo_set>
      }
    } 
    //else if (mode == MODE_MANUAL && radio_really_lost) 
    {
      mode = MODE_AUTO;
   16862:	f24b 6328 	movw	r3, #46632	; 0xb628
   16866:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1686a:	2201      	movs	r2, #1
   1686c:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= STALLED_TIME) 
    {
      radio_ok = FALSE;
   1686e:	f24b 632c 	movw	r3, #46636	; 0xb62c
   16872:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16876:	2200      	movs	r2, #0
   16878:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= REALLY_STALLED_TIME) 
    {
      radio_really_lost = TRUE;
   1687a:	f24b 632e 	movw	r3, #46638	; 0xb62e
   1687e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16882:	2201      	movs	r2, #1
   16884:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   16886:	bd80      	pop	{r7, pc}

00016888 <check_failsafe_task>:
void check_failsafe_task(void)
{
   16888:	b580      	push	{r7, lr}
   1688a:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    //if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
    {
      servo_set(failsafe);
   1688c:	f648 0090 	movw	r0, #34960	; 0x8890
   16890:	f2c0 0001 	movt	r0, #1
   16894:	f000 f90a 	bl	16aac <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   16898:	bd80      	pop	{r7, pc}
   1689a:	bf00      	nop

0001689c <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   1689c:	b580      	push	{r7, lr}
   1689e:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     //if ( !SpiIsSelected() && spi_was_interrupted ) 
     {
         if (mega128_receive_valid)
   168a0:	f24b 539a 	movw	r3, #46490	; 0xb59a
   168a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168a8:	781b      	ldrb	r3, [r3, #0]
   168aa:	b2db      	uxtb	r3, r3
   168ac:	2b00      	cmp	r3, #0
   168ae:	d018      	beq.n	168e2 <check_mega128_values_task+0x46>
         { 
             time_since_last_mega128 = 0;
   168b0:	f24b 6329 	movw	r3, #46633	; 0xb629
   168b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168b8:	2200      	movs	r2, #0
   168ba:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   168bc:	f24b 632d 	movw	r3, #46637	; 0xb62d
   168c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168c4:	2201      	movs	r2, #1
   168c6:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   168c8:	f24b 6328 	movw	r3, #46632	; 0xb628
   168cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168d0:	781b      	ldrb	r3, [r3, #0]
   168d2:	2b01      	cmp	r3, #1
   168d4:	d105      	bne.n	168e2 <check_mega128_values_task+0x46>
                 servo_set(from_mega128.channels);
   168d6:	f24b 506c 	movw	r0, #46444	; 0xb56c
   168da:	f2c2 0000 	movt	r0, #8192	; 0x2000
   168de:	f000 f8e5 	bl	16aac <servo_set>
         }
     }
     //if (time_since_last_mega128 == STALLED_TIME) 
     {
         mega128_ok = FALSE;
   168e2:	f24b 632d 	movw	r3, #46637	; 0xb62d
   168e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168ea:	2200      	movs	r2, #0
   168ec:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   168ee:	bd80      	pop	{r7, pc}

000168f0 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   168f0:	b480      	push	{r7}
   168f2:	b083      	sub	sp, #12
   168f4:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   168f6:	f242 0311 	movw	r3, #8209	; 0x2011
   168fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168fe:	f242 0211 	movw	r2, #8209	; 0x2011
   16902:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16906:	7812      	ldrb	r2, [r2, #0]
   16908:	b2d2      	uxtb	r2, r2
   1690a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1690e:	b2d2      	uxtb	r2, r2
   16910:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   16912:	f242 0317 	movw	r3, #8215	; 0x2017
   16916:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1691a:	f242 0217 	movw	r2, #8215	; 0x2017
   1691e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16922:	7812      	ldrb	r2, [r2, #0]
   16924:	b2d2      	uxtb	r2, r2
   16926:	f042 0202 	orr.w	r2, r2, #2
   1692a:	b2d2      	uxtb	r2, r2
   1692c:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   1692e:	f242 0312 	movw	r3, #8210	; 0x2012
   16932:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16936:	f242 0212 	movw	r2, #8210	; 0x2012
   1693a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1693e:	7812      	ldrb	r2, [r2, #0]
   16940:	b2d2      	uxtb	r2, r2
   16942:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16946:	b2d2      	uxtb	r2, r2
   16948:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   1694a:	f242 0318 	movw	r3, #8216	; 0x2018
   1694e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16952:	f242 0218 	movw	r2, #8216	; 0x2018
   16956:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1695a:	7812      	ldrb	r2, [r2, #0]
   1695c:	b2d2      	uxtb	r2, r2
   1695e:	f022 0202 	bic.w	r2, r2, #2
   16962:	b2d2      	uxtb	r2, r2
   16964:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16966:	2300      	movs	r3, #0
   16968:	71fb      	strb	r3, [r7, #7]
   1696a:	e00b      	b.n	16984 <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   1696c:	79fa      	ldrb	r2, [r7, #7]
   1696e:	f24b 6334 	movw	r3, #46644	; 0xb634
   16972:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16976:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   1697a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   1697e:	79fb      	ldrb	r3, [r7, #7]
   16980:	3301      	adds	r3, #1
   16982:	71fb      	strb	r3, [r7, #7]
   16984:	79fb      	ldrb	r3, [r7, #7]
   16986:	2b09      	cmp	r3, #9
   16988:	d9f0      	bls.n	1696c <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   1698a:	f242 032a 	movw	r3, #8234	; 0x202a
   1698e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16992:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   16996:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   16998:	f242 032f 	movw	r3, #8239	; 0x202f
   1699c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   169a0:	f242 022f 	movw	r2, #8239	; 0x202f
   169a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   169a8:	7812      	ldrb	r2, [r2, #0]
   169aa:	b2d2      	uxtb	r2, r2
   169ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   169b0:	b2d2      	uxtb	r2, r2
   169b2:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   169b4:	f242 0336 	movw	r3, #8246	; 0x2036
   169b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   169bc:	2210      	movs	r2, #16
   169be:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   169c0:	f242 0312 	movw	r3, #8210	; 0x2012
   169c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   169c8:	f242 0212 	movw	r2, #8210	; 0x2012
   169cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   169d0:	7812      	ldrb	r2, [r2, #0]
   169d2:	b2d2      	uxtb	r2, r2
   169d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   169d8:	b2d2      	uxtb	r2, r2
   169da:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   169dc:	f242 0337 	movw	r3, #8247	; 0x2037
   169e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   169e4:	f242 0237 	movw	r2, #8247	; 0x2037
   169e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   169ec:	7812      	ldrb	r2, [r2, #0]
   169ee:	b2d2      	uxtb	r2, r2
   169f0:	f042 0210 	orr.w	r2, r2, #16
   169f4:	b2d2      	uxtb	r2, r2
   169f6:	701a      	strb	r2, [r3, #0]
}
   169f8:	370c      	adds	r7, #12
   169fa:	46bd      	mov	sp, r7
   169fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   16a00:	4770      	bx	lr
   16a02:	bf00      	nop

00016a04 <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   16a04:	b480      	push	{r7}
   16a06:	b083      	sub	sp, #12
   16a08:	af00      	add	r7, sp, #0
   16a0a:	4602      	mov	r2, r0
   16a0c:	460b      	mov	r3, r1
   16a0e:	71fa      	strb	r2, [r7, #7]
   16a10:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   16a12:	79f9      	ldrb	r1, [r7, #7]
   16a14:	88bb      	ldrh	r3, [r7, #4]
   16a16:	011b      	lsls	r3, r3, #4
   16a18:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16a1c:	d308      	bcc.n	16a30 <servo_set_one+0x2c>
   16a1e:	88bb      	ldrh	r3, [r7, #4]
   16a20:	011b      	lsls	r3, r3, #4
   16a22:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16a26:	bf28      	it	cs
   16a28:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16a2c:	b29a      	uxth	r2, r3
   16a2e:	e001      	b.n	16a34 <servo_set_one+0x30>
   16a30:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16a34:	f24b 6334 	movw	r3, #46644	; 0xb634
   16a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a3c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   16a40:	370c      	adds	r7, #12
   16a42:	46bd      	mov	sp, r7
   16a44:	f85d 7b04 	ldr.w	r7, [sp], #4
   16a48:	4770      	bx	lr
   16a4a:	bf00      	nop

00016a4c <servo_transmit>:

void 
servo_transmit(void) {
   16a4c:	b580      	push	{r7, lr}
   16a4e:	b082      	sub	sp, #8
   16a50:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   16a52:	2000      	movs	r0, #0
   16a54:	f000 f9e6 	bl	16e24 <uart_transmit>
   16a58:	2000      	movs	r0, #0
   16a5a:	f000 f9e3 	bl	16e24 <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16a5e:	2300      	movs	r3, #0
   16a60:	71fb      	strb	r3, [r7, #7]
   16a62:	e01a      	b.n	16a9a <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   16a64:	79fa      	ldrb	r2, [r7, #7]
   16a66:	f24b 6334 	movw	r3, #46644	; 0xb634
   16a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16a72:	0a1b      	lsrs	r3, r3, #8
   16a74:	b29b      	uxth	r3, r3
   16a76:	b2db      	uxtb	r3, r3
   16a78:	4618      	mov	r0, r3
   16a7a:	f000 f9d3 	bl	16e24 <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   16a7e:	79fa      	ldrb	r2, [r7, #7]
   16a80:	f24b 6334 	movw	r3, #46644	; 0xb634
   16a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a88:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16a8c:	b2db      	uxtb	r3, r3
   16a8e:	4618      	mov	r0, r3
   16a90:	f000 f9c8 	bl	16e24 <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16a94:	79fb      	ldrb	r3, [r7, #7]
   16a96:	3301      	adds	r3, #1
   16a98:	71fb      	strb	r3, [r7, #7]
   16a9a:	79fb      	ldrb	r3, [r7, #7]
   16a9c:	2b09      	cmp	r3, #9
   16a9e:	d9e1      	bls.n	16a64 <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   16aa0:	200a      	movs	r0, #10
   16aa2:	f000 f9bf 	bl	16e24 <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   16aa6:	3708      	adds	r7, #8
   16aa8:	46bd      	mov	sp, r7
   16aaa:	bd80      	pop	{r7, pc}

00016aac <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   16aac:	b5b0      	push	{r4, r5, r7, lr}
   16aae:	b084      	sub	sp, #16
   16ab0:	af00      	add	r7, sp, #0
   16ab2:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   16ab4:	687b      	ldr	r3, [r7, #4]
   16ab6:	330a      	adds	r3, #10
   16ab8:	881b      	ldrh	r3, [r3, #0]
   16aba:	b21b      	sxth	r3, r3
   16abc:	005b      	lsls	r3, r3, #1
   16abe:	4618      	mov	r0, r3
   16ac0:	f000 fef0 	bl	178a4 <__aeabi_i2d>
   16ac4:	4602      	mov	r2, r0
   16ac6:	460b      	mov	r3, r1
   16ac8:	4610      	mov	r0, r2
   16aca:	4619      	mov	r1, r3
   16acc:	a3a6      	add	r3, pc, #664	; (adr r3, 16d68 <servo_set+0x2bc>)
   16ace:	e9d3 2300 	ldrd	r2, r3, [r3]
   16ad2:	f000 ff4d 	bl	17970 <__aeabi_dmul>
   16ad6:	4602      	mov	r2, r0
   16ad8:	460b      	mov	r3, r1
   16ada:	4610      	mov	r0, r2
   16adc:	4619      	mov	r1, r3
   16ade:	f001 f9e1 	bl	17ea4 <__aeabi_d2iz>
   16ae2:	4603      	mov	r3, r0
   16ae4:	b29b      	uxth	r3, r3
   16ae6:	b29b      	uxth	r3, r3
   16ae8:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16aec:	81fb      	strh	r3, [r7, #14]
   16aee:	89fb      	ldrh	r3, [r7, #14]
   16af0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16af4:	d307      	bcc.n	16b06 <servo_set+0x5a>
   16af6:	89fb      	ldrh	r3, [r7, #14]
   16af8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16afc:	bf28      	it	cs
   16afe:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16b02:	b29a      	uxth	r2, r3
   16b04:	e001      	b.n	16b0a <servo_set+0x5e>
   16b06:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16b0a:	f24b 6334 	movw	r3, #46644	; 0xb634
   16b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b12:	80da      	strh	r2, [r3, #6]
   16b14:	687b      	ldr	r3, [r7, #4]
   16b16:	881b      	ldrh	r3, [r3, #0]
   16b18:	b21b      	sxth	r3, r3
   16b1a:	005b      	lsls	r3, r3, #1
   16b1c:	4618      	mov	r0, r3
   16b1e:	f000 fec1 	bl	178a4 <__aeabi_i2d>
   16b22:	4602      	mov	r2, r0
   16b24:	460b      	mov	r3, r1
   16b26:	4610      	mov	r0, r2
   16b28:	4619      	mov	r1, r3
   16b2a:	a38f      	add	r3, pc, #572	; (adr r3, 16d68 <servo_set+0x2bc>)
   16b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16b30:	f000 ff1e 	bl	17970 <__aeabi_dmul>
   16b34:	4602      	mov	r2, r0
   16b36:	460b      	mov	r3, r1
   16b38:	4610      	mov	r0, r2
   16b3a:	4619      	mov	r1, r3
   16b3c:	f001 f9b2 	bl	17ea4 <__aeabi_d2iz>
   16b40:	4603      	mov	r3, r0
   16b42:	b29b      	uxth	r3, r3
   16b44:	b29b      	uxth	r3, r3
   16b46:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16b4a:	81fb      	strh	r3, [r7, #14]
   16b4c:	89fb      	ldrh	r3, [r7, #14]
   16b4e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16b52:	d307      	bcc.n	16b64 <servo_set+0xb8>
   16b54:	89fb      	ldrh	r3, [r7, #14]
   16b56:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16b5a:	bf28      	it	cs
   16b5c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16b60:	b29a      	uxth	r2, r3
   16b62:	e001      	b.n	16b68 <servo_set+0xbc>
   16b64:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16b68:	f24b 6334 	movw	r3, #46644	; 0xb634
   16b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b70:	825a      	strh	r2, [r3, #18]
   16b72:	687b      	ldr	r3, [r7, #4]
   16b74:	3304      	adds	r3, #4
   16b76:	881b      	ldrh	r3, [r3, #0]
   16b78:	b21b      	sxth	r3, r3
   16b7a:	4618      	mov	r0, r3
   16b7c:	f000 fe92 	bl	178a4 <__aeabi_i2d>
   16b80:	4602      	mov	r2, r0
   16b82:	460b      	mov	r3, r1
   16b84:	4610      	mov	r0, r2
   16b86:	4619      	mov	r1, r3
   16b88:	a379      	add	r3, pc, #484	; (adr r3, 16d70 <servo_set+0x2c4>)
   16b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   16b8e:	f000 feef 	bl	17970 <__aeabi_dmul>
   16b92:	4602      	mov	r2, r0
   16b94:	460b      	mov	r3, r1
   16b96:	4610      	mov	r0, r2
   16b98:	4619      	mov	r1, r3
   16b9a:	f001 f983 	bl	17ea4 <__aeabi_d2iz>
   16b9e:	4603      	mov	r3, r0
   16ba0:	b29b      	uxth	r3, r3
   16ba2:	b29b      	uxth	r3, r3
   16ba4:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   16ba8:	3320      	adds	r3, #32
   16baa:	81fb      	strh	r3, [r7, #14]
   16bac:	89fb      	ldrh	r3, [r7, #14]
   16bae:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16bb2:	d307      	bcc.n	16bc4 <servo_set+0x118>
   16bb4:	89fb      	ldrh	r3, [r7, #14]
   16bb6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16bba:	bf28      	it	cs
   16bbc:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16bc0:	b29a      	uxth	r2, r3
   16bc2:	e001      	b.n	16bc8 <servo_set+0x11c>
   16bc4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16bc8:	f24b 6334 	movw	r3, #46644	; 0xb634
   16bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16bd0:	819a      	strh	r2, [r3, #12]
   16bd2:	687b      	ldr	r3, [r7, #4]
   16bd4:	885b      	ldrh	r3, [r3, #2]
   16bd6:	81bb      	strh	r3, [r7, #12]
   16bd8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16bdc:	2b00      	cmp	r3, #0
   16bde:	dd06      	ble.n	16bee <servo_set+0x142>
   16be0:	f04f 0400 	mov.w	r4, #0
   16be4:	f04f 0500 	mov.w	r5, #0
   16be8:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16bec:	e002      	b.n	16bf4 <servo_set+0x148>
   16bee:	a562      	add	r5, pc, #392	; (adr r5, 16d78 <servo_set+0x2cc>)
   16bf0:	e9d5 4500 	ldrd	r4, r5, [r5]
   16bf4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16bf8:	4618      	mov	r0, r3
   16bfa:	f000 fe53 	bl	178a4 <__aeabi_i2d>
   16bfe:	4602      	mov	r2, r0
   16c00:	460b      	mov	r3, r1
   16c02:	4620      	mov	r0, r4
   16c04:	4629      	mov	r1, r5
   16c06:	f000 feb3 	bl	17970 <__aeabi_dmul>
   16c0a:	4602      	mov	r2, r0
   16c0c:	460b      	mov	r3, r1
   16c0e:	4610      	mov	r0, r2
   16c10:	4619      	mov	r1, r3
   16c12:	a35b      	add	r3, pc, #364	; (adr r3, 16d80 <servo_set+0x2d4>)
   16c14:	e9d3 2300 	ldrd	r2, r3, [r3]
   16c18:	f000 feaa 	bl	17970 <__aeabi_dmul>
   16c1c:	4602      	mov	r2, r0
   16c1e:	460b      	mov	r3, r1
   16c20:	4610      	mov	r0, r2
   16c22:	4619      	mov	r1, r3
   16c24:	f001 f93e 	bl	17ea4 <__aeabi_d2iz>
   16c28:	4603      	mov	r3, r0
   16c2a:	b29b      	uxth	r3, r3
   16c2c:	b29b      	uxth	r3, r3
   16c2e:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   16c32:	81fb      	strh	r3, [r7, #14]
   16c34:	89fb      	ldrh	r3, [r7, #14]
   16c36:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16c3a:	d307      	bcc.n	16c4c <servo_set+0x1a0>
   16c3c:	89fb      	ldrh	r3, [r7, #14]
   16c3e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16c42:	bf28      	it	cs
   16c44:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16c48:	b29a      	uxth	r2, r3
   16c4a:	e001      	b.n	16c50 <servo_set+0x1a4>
   16c4c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16c50:	f24b 6334 	movw	r3, #46644	; 0xb634
   16c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c58:	801a      	strh	r2, [r3, #0]
   16c5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16c5e:	2b00      	cmp	r3, #0
   16c60:	dd03      	ble.n	16c6a <servo_set+0x1be>
   16c62:	a545      	add	r5, pc, #276	; (adr r5, 16d78 <servo_set+0x2cc>)
   16c64:	e9d5 4500 	ldrd	r4, r5, [r5]
   16c68:	e005      	b.n	16c76 <servo_set+0x1ca>
   16c6a:	f04f 0400 	mov.w	r4, #0
   16c6e:	f04f 0500 	mov.w	r5, #0
   16c72:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16c76:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16c7a:	4618      	mov	r0, r3
   16c7c:	f000 fe12 	bl	178a4 <__aeabi_i2d>
   16c80:	4602      	mov	r2, r0
   16c82:	460b      	mov	r3, r1
   16c84:	4620      	mov	r0, r4
   16c86:	4629      	mov	r1, r5
   16c88:	f000 fe72 	bl	17970 <__aeabi_dmul>
   16c8c:	4602      	mov	r2, r0
   16c8e:	460b      	mov	r3, r1
   16c90:	4610      	mov	r0, r2
   16c92:	4619      	mov	r1, r3
   16c94:	a33c      	add	r3, pc, #240	; (adr r3, 16d88 <servo_set+0x2dc>)
   16c96:	e9d3 2300 	ldrd	r2, r3, [r3]
   16c9a:	f000 fe69 	bl	17970 <__aeabi_dmul>
   16c9e:	4602      	mov	r2, r0
   16ca0:	460b      	mov	r3, r1
   16ca2:	4610      	mov	r0, r2
   16ca4:	4619      	mov	r1, r3
   16ca6:	f001 f8fd 	bl	17ea4 <__aeabi_d2iz>
   16caa:	4603      	mov	r3, r0
   16cac:	b29b      	uxth	r3, r3
   16cae:	b29b      	uxth	r3, r3
   16cb0:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   16cb4:	3320      	adds	r3, #32
   16cb6:	81fb      	strh	r3, [r7, #14]
   16cb8:	89fb      	ldrh	r3, [r7, #14]
   16cba:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16cbe:	d307      	bcc.n	16cd0 <servo_set+0x224>
   16cc0:	89fb      	ldrh	r3, [r7, #14]
   16cc2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16cc6:	bf28      	it	cs
   16cc8:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16ccc:	b29a      	uxth	r2, r3
   16cce:	e001      	b.n	16cd4 <servo_set+0x228>
   16cd0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16cd4:	f24b 6334 	movw	r3, #46644	; 0xb634
   16cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cdc:	809a      	strh	r2, [r3, #4]
   16cde:	687b      	ldr	r3, [r7, #4]
   16ce0:	3306      	adds	r3, #6
   16ce2:	881b      	ldrh	r3, [r3, #0]
   16ce4:	b21b      	sxth	r3, r3
   16ce6:	4618      	mov	r0, r3
   16ce8:	f000 fddc 	bl	178a4 <__aeabi_i2d>
   16cec:	4604      	mov	r4, r0
   16cee:	460d      	mov	r5, r1
   16cf0:	687b      	ldr	r3, [r7, #4]
   16cf2:	3302      	adds	r3, #2
   16cf4:	881b      	ldrh	r3, [r3, #0]
   16cf6:	b21b      	sxth	r3, r3
   16cf8:	4618      	mov	r0, r3
   16cfa:	f000 fdd3 	bl	178a4 <__aeabi_i2d>
   16cfe:	4602      	mov	r2, r0
   16d00:	460b      	mov	r3, r1
   16d02:	4620      	mov	r0, r4
   16d04:	4629      	mov	r1, r5
   16d06:	f000 fc81 	bl	1760c <__adddf3>
   16d0a:	4602      	mov	r2, r0
   16d0c:	460b      	mov	r3, r1
   16d0e:	4610      	mov	r0, r2
   16d10:	4619      	mov	r1, r3
   16d12:	a31f      	add	r3, pc, #124	; (adr r3, 16d90 <servo_set+0x2e4>)
   16d14:	e9d3 2300 	ldrd	r2, r3, [r3]
   16d18:	f000 fe2a 	bl	17970 <__aeabi_dmul>
   16d1c:	4602      	mov	r2, r0
   16d1e:	460b      	mov	r3, r1
   16d20:	4610      	mov	r0, r2
   16d22:	4619      	mov	r1, r3
   16d24:	f001 f8be 	bl	17ea4 <__aeabi_d2iz>
   16d28:	4603      	mov	r3, r0
   16d2a:	b29b      	uxth	r3, r3
   16d2c:	b29b      	uxth	r3, r3
   16d2e:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   16d32:	3320      	adds	r3, #32
   16d34:	81fb      	strh	r3, [r7, #14]
   16d36:	89fb      	ldrh	r3, [r7, #14]
   16d38:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16d3c:	d307      	bcc.n	16d4e <servo_set+0x2a2>
   16d3e:	89fb      	ldrh	r3, [r7, #14]
   16d40:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16d44:	bf28      	it	cs
   16d46:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16d4a:	b29a      	uxth	r2, r3
   16d4c:	e001      	b.n	16d52 <servo_set+0x2a6>
   16d4e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16d52:	f24b 6334 	movw	r3, #46644	; 0xb634
   16d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d5a:	81da      	strh	r2, [r3, #14]
}
   16d5c:	3710      	adds	r7, #16
   16d5e:	46bd      	mov	sp, r7
   16d60:	bdb0      	pop	{r4, r5, r7, pc}
   16d62:	bf00      	nop
   16d64:	f3af 8000 	nop.w
   16d68:	aaaa9ef0 	.word	0xaaaa9ef0
   16d6c:	3feaaaaa 	.word	0x3feaaaaa
   16d70:	fc96473e 	.word	0xfc96473e
   16d74:	3fdfc962 	.word	0x3fdfc962
   16d78:	51eb851f 	.word	0x51eb851f
   16d7c:	3fe51eb8 	.word	0x3fe51eb8
   16d80:	9999999a 	.word	0x9999999a
   16d84:	bfe19999 	.word	0xbfe19999
   16d88:	aaaa9ef0 	.word	0xaaaa9ef0
   16d8c:	bfe0aaaa 	.word	0xbfe0aaaa
   16d90:	eeeed77a 	.word	0xeeeed77a
   16d94:	bfdeeeee 	.word	0xbfdeeeee

00016d98 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   16d98:	b480      	push	{r7}
   16d9a:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   16d9c:	f242 0320 	movw	r3, #8224	; 0x2020
   16da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16da4:	2200      	movs	r2, #0
   16da6:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   16da8:	f242 0309 	movw	r3, #8201	; 0x2009
   16dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16db0:	2219      	movs	r2, #25
   16db2:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   16db4:	f242 030b 	movw	r3, #8203	; 0x200b
   16db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16dbc:	2200      	movs	r2, #0
   16dbe:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   16dc0:	f242 030a 	movw	r3, #8202	; 0x200a
   16dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16dc8:	2208      	movs	r2, #8
   16dca:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   16dcc:	f242 0320 	movw	r3, #8224	; 0x2020
   16dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16dd4:	2286      	movs	r2, #134	; 0x86
   16dd6:	701a      	strb	r2, [r3, #0]
}
   16dd8:	46bd      	mov	sp, r7
   16dda:	f85d 7b04 	ldr.w	r7, [sp], #4
   16dde:	4770      	bx	lr

00016de0 <uart_init_rx>:

void uart_init_rx() {
   16de0:	b480      	push	{r7}
   16de2:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   16de4:	f242 030a 	movw	r3, #8202	; 0x200a
   16de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16dec:	f242 020a 	movw	r2, #8202	; 0x200a
   16df0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16df4:	7812      	ldrb	r2, [r2, #0]
   16df6:	b2d2      	uxtb	r2, r2
   16df8:	f042 0210 	orr.w	r2, r2, #16
   16dfc:	b2d2      	uxtb	r2, r2
   16dfe:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   16e00:	f242 030a 	movw	r3, #8202	; 0x200a
   16e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e08:	f242 020a 	movw	r2, #8202	; 0x200a
   16e0c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16e10:	7812      	ldrb	r2, [r2, #0]
   16e12:	b2d2      	uxtb	r2, r2
   16e14:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16e18:	b2d2      	uxtb	r2, r2
   16e1a:	701a      	strb	r2, [r3, #0]
}
   16e1c:	46bd      	mov	sp, r7
   16e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16e22:	4770      	bx	lr

00016e24 <uart_transmit>:

void uart_transmit( unsigned char data ) {
   16e24:	b480      	push	{r7}
   16e26:	b083      	sub	sp, #12
   16e28:	af00      	add	r7, sp, #0
   16e2a:	4603      	mov	r3, r0
   16e2c:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   16e2e:	f242 030a 	movw	r3, #8202	; 0x200a
   16e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e36:	781b      	ldrb	r3, [r3, #0]
   16e38:	b2db      	uxtb	r3, r3
   16e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   16e3e:	2b00      	cmp	r3, #0
   16e40:	d028      	beq.n	16e94 <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   16e42:	f24b 6349 	movw	r3, #46665	; 0xb649
   16e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e4a:	781b      	ldrb	r3, [r3, #0]
   16e4c:	b2db      	uxtb	r3, r3
   16e4e:	461a      	mov	r2, r3
   16e50:	f24b 6348 	movw	r3, #46664	; 0xb648
   16e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e58:	781b      	ldrb	r3, [r3, #0]
   16e5a:	3301      	adds	r3, #1
   16e5c:	429a      	cmp	r2, r3
   16e5e:	d100      	bne.n	16e62 <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   16e60:	e02c      	b.n	16ebc <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   16e62:	f24b 6348 	movw	r3, #46664	; 0xb648
   16e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e6a:	781b      	ldrb	r3, [r3, #0]
   16e6c:	461a      	mov	r2, r3
   16e6e:	f24b 634c 	movw	r3, #46668	; 0xb64c
   16e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e76:	79f9      	ldrb	r1, [r7, #7]
   16e78:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   16e7a:	f24b 6348 	movw	r3, #46664	; 0xb648
   16e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e82:	781b      	ldrb	r3, [r3, #0]
   16e84:	3301      	adds	r3, #1
   16e86:	b2da      	uxtb	r2, r3
   16e88:	f24b 6348 	movw	r3, #46664	; 0xb648
   16e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e90:	701a      	strb	r2, [r3, #0]
   16e92:	e013      	b.n	16ebc <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   16e94:	f242 030c 	movw	r3, #8204	; 0x200c
   16e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e9c:	79fa      	ldrb	r2, [r7, #7]
   16e9e:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   16ea0:	f242 030a 	movw	r3, #8202	; 0x200a
   16ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ea8:	f242 020a 	movw	r2, #8202	; 0x200a
   16eac:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16eb0:	7812      	ldrb	r2, [r2, #0]
   16eb2:	b2d2      	uxtb	r2, r2
   16eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16eb8:	b2d2      	uxtb	r2, r2
   16eba:	701a      	strb	r2, [r3, #0]
  }
}
   16ebc:	370c      	adds	r7, #12
   16ebe:	46bd      	mov	sp, r7
   16ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
   16ec4:	4770      	bx	lr
   16ec6:	bf00      	nop

00016ec8 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   16ec8:	b590      	push	{r4, r7, lr}
   16eca:	b089      	sub	sp, #36	; 0x24
   16ecc:	af00      	add	r7, sp, #0
   16ece:	4603      	mov	r3, r0
   16ed0:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   16ed2:	f648 03e4 	movw	r3, #35044	; 0x88e4
   16ed6:	f2c0 0301 	movt	r3, #1
   16eda:	f107 040c 	add.w	r4, r7, #12
   16ede:	6818      	ldr	r0, [r3, #0]
   16ee0:	6859      	ldr	r1, [r3, #4]
   16ee2:	689a      	ldr	r2, [r3, #8]
   16ee4:	68db      	ldr	r3, [r3, #12]
   16ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   16ee8:	79fb      	ldrb	r3, [r7, #7]
   16eea:	091b      	lsrs	r3, r3, #4
   16eec:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   16eee:	79fb      	ldrb	r3, [r7, #7]
   16ef0:	f003 030f 	and.w	r3, r3, #15
   16ef4:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   16ef6:	230f      	movs	r3, #15
   16ef8:	77fb      	strb	r3, [r7, #31]
        low = 15;
   16efa:	230f      	movs	r3, #15
   16efc:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   16efe:	7ffb      	ldrb	r3, [r7, #31]
   16f00:	f107 0220 	add.w	r2, r7, #32
   16f04:	4413      	add	r3, r2
   16f06:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   16f0a:	4618      	mov	r0, r3
   16f0c:	f7ff ff8a 	bl	16e24 <uart_transmit>
  uart_transmit(hex[low]);
   16f10:	7fbb      	ldrb	r3, [r7, #30]
   16f12:	f107 0220 	add.w	r2, r7, #32
   16f16:	4413      	add	r3, r2
   16f18:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   16f1c:	4618      	mov	r0, r3
   16f1e:	f7ff ff81 	bl	16e24 <uart_transmit>
} 
   16f22:	3724      	adds	r7, #36	; 0x24
   16f24:	46bd      	mov	sp, r7
   16f26:	bd90      	pop	{r4, r7, pc}

00016f28 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   16f28:	b580      	push	{r7, lr}
   16f2a:	b084      	sub	sp, #16
   16f2c:	af00      	add	r7, sp, #0
   16f2e:	4603      	mov	r3, r0
   16f30:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   16f32:	88fb      	ldrh	r3, [r7, #6]
   16f34:	0a1b      	lsrs	r3, r3, #8
   16f36:	b29b      	uxth	r3, r3
   16f38:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   16f3a:	88fb      	ldrh	r3, [r7, #6]
   16f3c:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   16f3e:	7bfb      	ldrb	r3, [r7, #15]
   16f40:	4618      	mov	r0, r3
   16f42:	f7ff ffc1 	bl	16ec8 <uart_print_hex>
  uart_print_hex(low);
   16f46:	7bbb      	ldrb	r3, [r7, #14]
   16f48:	4618      	mov	r0, r3
   16f4a:	f7ff ffbd 	bl	16ec8 <uart_print_hex>
}
   16f4e:	3710      	adds	r7, #16
   16f50:	46bd      	mov	sp, r7
   16f52:	bd80      	pop	{r7, pc}

00016f54 <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   16f54:	b580      	push	{r7, lr}
   16f56:	b084      	sub	sp, #16
   16f58:	af00      	add	r7, sp, #0
   16f5a:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   16f5c:	2300      	movs	r3, #0
   16f5e:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   16f60:	e009      	b.n	16f76 <uart_print_string+0x22>
    uart_transmit(s[i]);
   16f62:	7bfb      	ldrb	r3, [r7, #15]
   16f64:	687a      	ldr	r2, [r7, #4]
   16f66:	4413      	add	r3, r2
   16f68:	781b      	ldrb	r3, [r3, #0]
   16f6a:	4618      	mov	r0, r3
   16f6c:	f7ff ff5a 	bl	16e24 <uart_transmit>
    i++;
   16f70:	7bfb      	ldrb	r3, [r7, #15]
   16f72:	3301      	adds	r3, #1
   16f74:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   16f76:	7bfb      	ldrb	r3, [r7, #15]
   16f78:	687a      	ldr	r2, [r7, #4]
   16f7a:	4413      	add	r3, r2
   16f7c:	781b      	ldrb	r3, [r3, #0]
   16f7e:	2b00      	cmp	r3, #0
   16f80:	d1ef      	bne.n	16f62 <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   16f82:	3710      	adds	r7, #16
   16f84:	46bd      	mov	sp, r7
   16f86:	bd80      	pop	{r7, pc}

00016f88 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   16f88:	b480      	push	{r7}
   16f8a:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   16f8c:	f24b 6348 	movw	r3, #46664	; 0xb648
   16f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16f94:	781a      	ldrb	r2, [r3, #0]
   16f96:	f24b 6349 	movw	r3, #46665	; 0xb649
   16f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16f9e:	781b      	ldrb	r3, [r3, #0]
   16fa0:	b2db      	uxtb	r3, r3
   16fa2:	429a      	cmp	r2, r3
   16fa4:	d10e      	bne.n	16fc4 <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   16fa6:	f242 030a 	movw	r3, #8202	; 0x200a
   16faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16fae:	f242 020a 	movw	r2, #8202	; 0x200a
   16fb2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16fb6:	7812      	ldrb	r2, [r2, #0]
   16fb8:	b2d2      	uxtb	r2, r2
   16fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   16fbe:	b2d2      	uxtb	r2, r2
   16fc0:	701a      	strb	r2, [r3, #0]
   16fc2:	e01d      	b.n	17000 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   16fc4:	f242 030c 	movw	r3, #8204	; 0x200c
   16fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16fcc:	f24b 6249 	movw	r2, #46665	; 0xb649
   16fd0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16fd4:	7812      	ldrb	r2, [r2, #0]
   16fd6:	b2d2      	uxtb	r2, r2
   16fd8:	4611      	mov	r1, r2
   16fda:	f24b 624c 	movw	r2, #46668	; 0xb64c
   16fde:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16fe2:	5c52      	ldrb	r2, [r2, r1]
   16fe4:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   16fe6:	f24b 6349 	movw	r3, #46665	; 0xb649
   16fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16fee:	781b      	ldrb	r3, [r3, #0]
   16ff0:	b2db      	uxtb	r3, r3
   16ff2:	3301      	adds	r3, #1
   16ff4:	b2da      	uxtb	r2, r3
   16ff6:	f24b 6349 	movw	r3, #46665	; 0xb649
   16ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ffe:	701a      	strb	r2, [r3, #0]
  }
}
   17000:	46bd      	mov	sp, r7
   17002:	f85d 7b04 	ldr.w	r7, [sp], #4
   17006:	4770      	bx	lr

00017008 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   17008:	b580      	push	{r7, lr}
   1700a:	b082      	sub	sp, #8
   1700c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   1700e:	2010      	movs	r0, #16
   17010:	2101      	movs	r1, #1
   17012:	f7e9 fed5 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   17016:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1701a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1701e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   17022:	2201      	movs	r2, #1
   17024:	f7ea f9dc 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   17028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1702c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   1702e:	2310      	movs	r3, #16
   17030:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17032:	2303      	movs	r3, #3
   17034:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   17036:	1d3b      	adds	r3, r7, #4
   17038:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1703c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17040:	4619      	mov	r1, r3
   17042:	f7ea f891 	bl	1168 <GPIO_Init>
}
   17046:	3708      	adds	r7, #8
   17048:	46bd      	mov	sp, r7
   1704a:	bd80      	pop	{r7, pc}

0001704c <init_button>:

void init_button(void)
{
   1704c:	b580      	push	{r7, lr}
   1704e:	b082      	sub	sp, #8
   17050:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   17052:	2004      	movs	r0, #4
   17054:	2101      	movs	r1, #1
   17056:	f7e9 feb3 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   1705a:	2301      	movs	r3, #1
   1705c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   1705e:	2304      	movs	r3, #4
   17060:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17062:	2303      	movs	r3, #3
   17064:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   17066:	1d3b      	adds	r3, r7, #4
   17068:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1706c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17070:	4619      	mov	r1, r3
   17072:	f7ea f879 	bl	1168 <GPIO_Init>
}
   17076:	3708      	adds	r7, #8
   17078:	46bd      	mov	sp, r7
   1707a:	bd80      	pop	{r7, pc}

0001707c <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   1707c:	b580      	push	{r7, lr}
   1707e:	b084      	sub	sp, #16
   17080:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   17082:	2001      	movs	r0, #1
   17084:	2101      	movs	r1, #1
   17086:	f7e9 fe9b 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   1708a:	2000      	movs	r0, #0
   1708c:	2100      	movs	r1, #0
   1708e:	f7ea fa9f 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   17092:	2301      	movs	r3, #1
   17094:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   17096:	2300      	movs	r3, #0
   17098:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   1709a:	2308      	movs	r3, #8
   1709c:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   1709e:	2301      	movs	r3, #1
   170a0:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   170a2:	f107 0308 	add.w	r3, r7, #8
   170a6:	4618      	mov	r0, r3
   170a8:	f7ea ff98 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   170ac:	2306      	movs	r3, #6
   170ae:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   170b0:	230f      	movs	r3, #15
   170b2:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   170b4:	230f      	movs	r3, #15
   170b6:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   170b8:	2301      	movs	r3, #1
   170ba:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   170bc:	1d3b      	adds	r3, r7, #4
   170be:	4618      	mov	r0, r3
   170c0:	f7eb f8c6 	bl	2250 <NVIC_Init>
}
   170c4:	3710      	adds	r7, #16
   170c6:	46bd      	mov	sp, r7
   170c8:	bd80      	pop	{r7, pc}
   170ca:	bf00      	nop

000170cc <init_rs232>:

void init_rs232(void)
{
   170cc:	b580      	push	{r7, lr}
   170ce:	b086      	sub	sp, #24
   170d0:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   170d2:	2005      	movs	r0, #5
   170d4:	2101      	movs	r1, #1
   170d6:	f7e9 fe73 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   170da:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   170de:	2101      	movs	r1, #1
   170e0:	f7e9 fe96 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   170e4:	2308      	movs	r3, #8
   170e6:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   170e8:	2304      	movs	r3, #4
   170ea:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   170ec:	1d3b      	adds	r3, r7, #4
   170ee:	f44f 6000 	mov.w	r0, #2048	; 0x800
   170f2:	f2c4 0001 	movt	r0, #16385	; 0x4001
   170f6:	4619      	mov	r1, r3
   170f8:	f7ea f836 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   170fc:	2304      	movs	r3, #4
   170fe:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17100:	2303      	movs	r3, #3
   17102:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   17104:	2318      	movs	r3, #24
   17106:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   17108:	1d3b      	adds	r3, r7, #4
   1710a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1710e:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17112:	4619      	mov	r1, r3
   17114:	f7ea f828 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   17118:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1711c:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   1711e:	2300      	movs	r3, #0
   17120:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   17122:	2300      	movs	r3, #0
   17124:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   17126:	2300      	movs	r3, #0
   17128:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   1712a:	2300      	movs	r3, #0
   1712c:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   1712e:	230c      	movs	r3, #12
   17130:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   17132:	f107 0308 	add.w	r3, r7, #8
   17136:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1713a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1713e:	4619      	mov	r1, r3
   17140:	f7ea fafa 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   17144:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17148:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1714c:	2101      	movs	r1, #1
   1714e:	f7ea fc11 	bl	1974 <USART_Cmd>
}
   17152:	3718      	adds	r7, #24
   17154:	46bd      	mov	sp, r7
   17156:	bd80      	pop	{r7, pc}

00017158 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   17158:	b580      	push	{r7, lr}
   1715a:	b082      	sub	sp, #8
   1715c:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   1715e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17162:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17166:	f240 7127 	movw	r1, #1831	; 0x727
   1716a:	2200      	movs	r2, #0
   1716c:	f7ea fc22 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   17170:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17174:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17178:	f240 5125 	movw	r1, #1317	; 0x525
   1717c:	2201      	movs	r2, #1
   1717e:	f7ea fc19 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   17182:	2326      	movs	r3, #38	; 0x26
   17184:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   17186:	2300      	movs	r3, #0
   17188:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   1718a:	2301      	movs	r3, #1
   1718c:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   1718e:	1d3b      	adds	r3, r7, #4
   17190:	4618      	mov	r0, r3
   17192:	f7eb f85d 	bl	2250 <NVIC_Init>
}
   17196:	3708      	adds	r7, #8
   17198:	46bd      	mov	sp, r7
   1719a:	bd80      	pop	{r7, pc}

0001719c <enable_rs232>:

void enable_rs232(void)
{
   1719c:	b580      	push	{r7, lr}
   1719e:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   171a0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   171a4:	f2c4 0000 	movt	r0, #16384	; 0x4000
   171a8:	2101      	movs	r1, #1
   171aa:	f7ea fbe3 	bl	1974 <USART_Cmd>
}
   171ae:	bd80      	pop	{r7, pc}

000171b0 <send_byte>:

void send_byte(uint8_t b)
{
   171b0:	b580      	push	{r7, lr}
   171b2:	b082      	sub	sp, #8
   171b4:	af00      	add	r7, sp, #0
   171b6:	4603      	mov	r3, r0
   171b8:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   171ba:	bf00      	nop
   171bc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   171c0:	f2c4 0000 	movt	r0, #16384	; 0x4000
   171c4:	2180      	movs	r1, #128	; 0x80
   171c6:	f7ea fe41 	bl	1e4c <USART_GetFlagStatus>
   171ca:	4603      	mov	r3, r0
   171cc:	2b00      	cmp	r3, #0
   171ce:	d0f5      	beq.n	171bc <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   171d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   171d4:	f2c4 0301 	movt	r3, #16385	; 0x4001
   171d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   171dc:	f2c4 0201 	movt	r2, #16385	; 0x4001
   171e0:	68d2      	ldr	r2, [r2, #12]
   171e2:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   171e6:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   171e8:	79fb      	ldrb	r3, [r7, #7]
   171ea:	b29b      	uxth	r3, r3
   171ec:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   171f0:	f2c4 0000 	movt	r0, #16384	; 0x4000
   171f4:	4619      	mov	r1, r3
   171f6:	f7ea fcdd 	bl	1bb4 <USART_SendData>
}
   171fa:	3708      	adds	r7, #8
   171fc:	46bd      	mov	sp, r7
   171fe:	bd80      	pop	{r7, pc}

00017200 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   17200:	b580      	push	{r7, lr}
   17202:	b082      	sub	sp, #8
   17204:	af00      	add	r7, sp, #0
   17206:	4603      	mov	r3, r0
   17208:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   1720a:	79fb      	ldrb	r3, [r7, #7]
   1720c:	3330      	adds	r3, #48	; 0x30
   1720e:	b2db      	uxtb	r3, r3
   17210:	4618      	mov	r0, r3
   17212:	f7ff ffcd 	bl	171b0 <send_byte>
}
   17216:	3708      	adds	r7, #8
   17218:	46bd      	mov	sp, r7
   1721a:	bd80      	pop	{r7, pc}

0001721c <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   1721c:	b580      	push	{r7, lr}
   1721e:	b084      	sub	sp, #16
   17220:	af00      	add	r7, sp, #0
   17222:	6078      	str	r0, [r7, #4]
    int i = 0;
   17224:	2300      	movs	r3, #0
   17226:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   17228:	e009      	b.n	1723e <vPrintString+0x22>
    {
        send_byte(string[i]);
   1722a:	68fb      	ldr	r3, [r7, #12]
   1722c:	687a      	ldr	r2, [r7, #4]
   1722e:	4413      	add	r3, r2
   17230:	781b      	ldrb	r3, [r3, #0]
   17232:	4618      	mov	r0, r3
   17234:	f7ff ffbc 	bl	171b0 <send_byte>
        i++;
   17238:	68fb      	ldr	r3, [r7, #12]
   1723a:	3301      	adds	r3, #1
   1723c:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   1723e:	68fb      	ldr	r3, [r7, #12]
   17240:	687a      	ldr	r2, [r7, #4]
   17242:	4413      	add	r3, r2
   17244:	781b      	ldrb	r3, [r3, #0]
   17246:	2b00      	cmp	r3, #0
   17248:	d1ef      	bne.n	1722a <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   1724a:	3710      	adds	r7, #16
   1724c:	46bd      	mov	sp, r7
   1724e:	bd80      	pop	{r7, pc}

00017250 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   17250:	b580      	push	{r7, lr}
   17252:	b08a      	sub	sp, #40	; 0x28
   17254:	af00      	add	r7, sp, #0
   17256:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   17258:	2300      	movs	r3, #0
   1725a:	623b      	str	r3, [r7, #32]
    long num = c_num;
   1725c:	687b      	ldr	r3, [r7, #4]
   1725e:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   17260:	69fb      	ldr	r3, [r7, #28]
   17262:	2b00      	cmp	r3, #0
   17264:	d106      	bne.n	17274 <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   17266:	f648 00f4 	movw	r0, #35060	; 0x88f4
   1726a:	f2c0 0001 	movt	r0, #1
   1726e:	f7ff ffd5 	bl	1721c <vPrintString>
   17272:	e062      	b.n	1733a <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   17274:	e024      	b.n	172c0 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   17276:	69f9      	ldr	r1, [r7, #28]
   17278:	f246 6367 	movw	r3, #26215	; 0x6667
   1727c:	f2c6 6366 	movt	r3, #26214	; 0x6666
   17280:	fb83 2301 	smull	r2, r3, r3, r1
   17284:	109a      	asrs	r2, r3, #2
   17286:	17cb      	asrs	r3, r1, #31
   17288:	1ad2      	subs	r2, r2, r3
   1728a:	4613      	mov	r3, r2
   1728c:	009b      	lsls	r3, r3, #2
   1728e:	4413      	add	r3, r2
   17290:	005b      	lsls	r3, r3, #1
   17292:	1aca      	subs	r2, r1, r3
   17294:	b2d3      	uxtb	r3, r2
   17296:	3330      	adds	r3, #48	; 0x30
   17298:	b2da      	uxtb	r2, r3
   1729a:	f107 010c 	add.w	r1, r7, #12
   1729e:	6a3b      	ldr	r3, [r7, #32]
   172a0:	440b      	add	r3, r1
   172a2:	701a      	strb	r2, [r3, #0]
            count ++;
   172a4:	6a3b      	ldr	r3, [r7, #32]
   172a6:	3301      	adds	r3, #1
   172a8:	623b      	str	r3, [r7, #32]
            num /= 10;
   172aa:	69fa      	ldr	r2, [r7, #28]
   172ac:	f246 6367 	movw	r3, #26215	; 0x6667
   172b0:	f2c6 6366 	movt	r3, #26214	; 0x6666
   172b4:	fb83 1302 	smull	r1, r3, r3, r2
   172b8:	1099      	asrs	r1, r3, #2
   172ba:	17d3      	asrs	r3, r2, #31
   172bc:	1acb      	subs	r3, r1, r3
   172be:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   172c0:	69fb      	ldr	r3, [r7, #28]
   172c2:	2b00      	cmp	r3, #0
   172c4:	d1d7      	bne.n	17276 <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   172c6:	f107 020c 	add.w	r2, r7, #12
   172ca:	6a3b      	ldr	r3, [r7, #32]
   172cc:	4413      	add	r3, r2
   172ce:	2200      	movs	r2, #0
   172d0:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   172d2:	2300      	movs	r3, #0
   172d4:	627b      	str	r3, [r7, #36]	; 0x24
   172d6:	e020      	b.n	1731a <vPrintNumber+0xca>
        {
            tmp = time[i];
   172d8:	f107 020c 	add.w	r2, r7, #12
   172dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   172de:	4413      	add	r3, r2
   172e0:	781b      	ldrb	r3, [r3, #0]
   172e2:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   172e4:	6a3a      	ldr	r2, [r7, #32]
   172e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   172e8:	1ad3      	subs	r3, r2, r3
   172ea:	3b01      	subs	r3, #1
   172ec:	f107 0228 	add.w	r2, r7, #40	; 0x28
   172f0:	4413      	add	r3, r2
   172f2:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   172f6:	f107 010c 	add.w	r1, r7, #12
   172fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   172fc:	440b      	add	r3, r1
   172fe:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   17300:	6a3a      	ldr	r2, [r7, #32]
   17302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17304:	1ad3      	subs	r3, r2, r3
   17306:	3b01      	subs	r3, #1
   17308:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1730c:	440b      	add	r3, r1
   1730e:	7efa      	ldrb	r2, [r7, #27]
   17310:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   17314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17316:	3301      	adds	r3, #1
   17318:	627b      	str	r3, [r7, #36]	; 0x24
   1731a:	6a3b      	ldr	r3, [r7, #32]
   1731c:	085a      	lsrs	r2, r3, #1
   1731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17320:	429a      	cmp	r2, r3
   17322:	d8d9      	bhi.n	172d8 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   17324:	f107 030c 	add.w	r3, r7, #12
   17328:	4618      	mov	r0, r3
   1732a:	f7ff ff77 	bl	1721c <vPrintString>
        vPrintString("\n\r");
   1732e:	f648 00f8 	movw	r0, #35064	; 0x88f8
   17332:	f2c0 0001 	movt	r0, #1
   17336:	f7ff ff71 	bl	1721c <vPrintString>
    }
}
   1733a:	3728      	adds	r7, #40	; 0x28
   1733c:	46bd      	mov	sp, r7
   1733e:	bd80      	pop	{r7, pc}

00017340 <vInitInitialise>:

extern xTaskComplete[NUMBEROFTASK];


void vInitInitialise()
{
   17340:	b480      	push	{r7}
   17342:	b083      	sub	sp, #12
   17344:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    for(i = 0; i < NUMBEROFTASK; ++ i)
   17346:	2300      	movs	r3, #0
   17348:	607b      	str	r3, [r7, #4]
   1734a:	e00a      	b.n	17362 <vInitInitialise+0x22>
    {
        IS_INIT[i] = 0;
   1734c:	f24b 734c 	movw	r3, #46924	; 0xb74c
   17350:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17354:	687a      	ldr	r2, [r7, #4]
   17356:	2100      	movs	r1, #0
   17358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


void vInitInitialise()
{
    portBASE_TYPE i;
    for(i = 0; i < NUMBEROFTASK; ++ i)
   1735c:	687b      	ldr	r3, [r7, #4]
   1735e:	3301      	adds	r3, #1
   17360:	607b      	str	r3, [r7, #4]
   17362:	687b      	ldr	r3, [r7, #4]
   17364:	2b0c      	cmp	r3, #12
   17366:	ddf1      	ble.n	1734c <vInitInitialise+0xc>
    {
        IS_INIT[i] = 0;
    }
}
   17368:	370c      	adds	r7, #12
   1736a:	46bd      	mov	sp, r7
   1736c:	f85d 7b04 	ldr.w	r7, [sp], #4
   17370:	4770      	bx	lr
   17372:	bf00      	nop

00017374 <main>:

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   17374:	b590      	push	{r4, r7, lr}
   17376:	b089      	sub	sp, #36	; 0x24
   17378:	af04      	add	r7, sp, #16
    init_led();
   1737a:	f7ff fe45 	bl	17008 <init_led>
    init_rs232();
   1737e:	f7ff fea5 	bl	170cc <init_rs232>
    enable_rs232_interrupts();
   17382:	f7ff fee9 	bl	17158 <enable_rs232_interrupts>
    enable_rs232();
   17386:	f7ff ff09 	bl	1719c <enable_rs232>

    //vTaskCompleteInitialise();
    vInitInitialise();
   1738a:	f7ff ffd9 	bl	17340 <vInitInitialise>
    vSemaphoreInitialise();
   1738e:	f7eb fdf7 	bl	2f80 <vSemaphoreInitialise>
    vParameterInitialise();
   17392:	f7eb fe35 	bl	3000 <vParameterInitialise>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;
   17396:	2300      	movs	r3, #0
   17398:	607b      	str	r3, [r7, #4]

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);
   1739a:	2301      	movs	r3, #1
   1739c:	9300      	str	r3, [sp, #0]
   1739e:	4b42      	ldr	r3, [pc, #264]	; (174a8 <main+0x134>)
   173a0:	9301      	str	r3, [sp, #4]
   173a2:	2300      	movs	r3, #0
   173a4:	9302      	str	r3, [sp, #8]
   173a6:	2300      	movs	r3, #0
   173a8:	9303      	str	r3, [sp, #12]
   173aa:	f643 00f9 	movw	r0, #14585	; 0x38f9
   173ae:	f2c0 0000 	movt	r0, #0
   173b2:	f648 01fc 	movw	r1, #35068	; 0x88fc
   173b6:	f2c0 0101 	movt	r1, #1
   173ba:	2280      	movs	r2, #128	; 0x80
   173bc:	4b3b      	ldr	r3, [pc, #236]	; (174ac <main+0x138>)
   173be:	f7ed fa07 	bl	47d0 <xTaskGenericCreate>

    for( i = 0; i < NUMBEROFSERVANT-1; ++ i )
   173c2:	2300      	movs	r3, #0
   173c4:	60fb      	str	r3, [r7, #12]
   173c6:	e064      	b.n	17492 <main+0x11e>
    {
        for(j = 0; j < NUMBEROFTASK; ++ j)
   173c8:	2300      	movs	r3, #0
   173ca:	60bb      	str	r3, [r7, #8]
   173cc:	e00f      	b.n	173ee <main+0x7a>
        {
            if( i == xSensorOfTask[j] )
   173ce:	f240 0360 	movw	r3, #96	; 0x60
   173d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   173d6:	68ba      	ldr	r2, [r7, #8]
   173d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   173dc:	68fb      	ldr	r3, [r7, #12]
   173de:	429a      	cmp	r2, r3
   173e0:	d102      	bne.n	173e8 <main+0x74>
            {
                flag = 1;  // sensor 
   173e2:	2301      	movs	r3, #1
   173e4:	607b      	str	r3, [r7, #4]
                break;
   173e6:	e005      	b.n	173f4 <main+0x80>

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);

    for( i = 0; i < NUMBEROFSERVANT-1; ++ i )
    {
        for(j = 0; j < NUMBEROFTASK; ++ j)
   173e8:	68bb      	ldr	r3, [r7, #8]
   173ea:	3301      	adds	r3, #1
   173ec:	60bb      	str	r3, [r7, #8]
   173ee:	68bb      	ldr	r3, [r7, #8]
   173f0:	2b0c      	cmp	r3, #12
   173f2:	ddec      	ble.n	173ce <main+0x5a>
                flag = 1;  // sensor 
                break;
            }
        }
        // create sensor 
        if(flag == 1)
   173f4:	687b      	ldr	r3, [r7, #4]
   173f6:	2b01      	cmp	r3, #1
   173f8:	d125      	bne.n	17446 <main+0xd2>
        {
            flag = 0; 
   173fa:	2300      	movs	r3, #0
   173fc:	607b      	str	r3, [r7, #4]
            xTaskCreate( vSensor, "sensor", SERVANT_STACK_SIZE, (void *)&pvParameters[i], tskIDLE_PRIORITY + 2, &xTaskOfHandle[i] );
   173fe:	68fb      	ldr	r3, [r7, #12]
   17400:	222c      	movs	r2, #44	; 0x2c
   17402:	fb02 f203 	mul.w	r2, r2, r3
   17406:	f240 5350 	movw	r3, #1360	; 0x550
   1740a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1740e:	18d4      	adds	r4, r2, r3
   17410:	68fb      	ldr	r3, [r7, #12]
   17412:	009a      	lsls	r2, r3, #2
   17414:	f640 33e0 	movw	r3, #3040	; 0xbe0
   17418:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1741c:	4413      	add	r3, r2
   1741e:	2202      	movs	r2, #2
   17420:	9200      	str	r2, [sp, #0]
   17422:	9301      	str	r3, [sp, #4]
   17424:	2300      	movs	r3, #0
   17426:	9302      	str	r3, [sp, #8]
   17428:	2300      	movs	r3, #0
   1742a:	9303      	str	r3, [sp, #12]
   1742c:	f243 4079 	movw	r0, #13433	; 0x3479
   17430:	f2c0 0000 	movt	r0, #0
   17434:	f648 1108 	movw	r1, #35080	; 0x8908
   17438:	f2c0 0101 	movt	r1, #1
   1743c:	2280      	movs	r2, #128	; 0x80
   1743e:	4623      	mov	r3, r4
   17440:	f7ed f9c6 	bl	47d0 <xTaskGenericCreate>
   17444:	e022      	b.n	1748c <main+0x118>
        }
        else  // create servant
        {
            xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[i], tskIDLE_PRIORITY + 2, &xTaskOfHandle[i] );
   17446:	68fb      	ldr	r3, [r7, #12]
   17448:	222c      	movs	r2, #44	; 0x2c
   1744a:	fb02 f203 	mul.w	r2, r2, r3
   1744e:	f240 5350 	movw	r3, #1360	; 0x550
   17452:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17456:	18d4      	adds	r4, r2, r3
   17458:	68fb      	ldr	r3, [r7, #12]
   1745a:	009a      	lsls	r2, r3, #2
   1745c:	f640 33e0 	movw	r3, #3040	; 0xbe0
   17460:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17464:	4413      	add	r3, r2
   17466:	2202      	movs	r2, #2
   17468:	9200      	str	r2, [sp, #0]
   1746a:	9301      	str	r3, [sp, #4]
   1746c:	2300      	movs	r3, #0
   1746e:	9302      	str	r3, [sp, #8]
   17470:	2300      	movs	r3, #0
   17472:	9303      	str	r3, [sp, #12]
   17474:	f243 60dd 	movw	r0, #14045	; 0x36dd
   17478:	f2c0 0000 	movt	r0, #0
   1747c:	f648 1110 	movw	r1, #35088	; 0x8910
   17480:	f2c0 0101 	movt	r1, #1
   17484:	2280      	movs	r2, #128	; 0x80
   17486:	4623      	mov	r3, r4
   17488:	f7ed f9a2 	bl	47d0 <xTaskGenericCreate>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);

    for( i = 0; i < NUMBEROFSERVANT-1; ++ i )
   1748c:	68fb      	ldr	r3, [r7, #12]
   1748e:	3301      	adds	r3, #1
   17490:	60fb      	str	r3, [r7, #12]
   17492:	68fb      	ldr	r3, [r7, #12]
   17494:	2b21      	cmp	r3, #33	; 0x21
   17496:	dd97      	ble.n	173c8 <main+0x54>
        {
            xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[i], tskIDLE_PRIORITY + 2, &xTaskOfHandle[i] );
        }
    }
    /* Start running the task. */
    vTaskStartScheduler();
   17498:	f7ed fd18 	bl	4ecc <vTaskStartScheduler>

    return 0;
   1749c:	2300      	movs	r3, #0
}
   1749e:	4618      	mov	r0, r3
   174a0:	3714      	adds	r7, #20
   174a2:	46bd      	mov	sp, r7
   174a4:	bd90      	pop	{r4, r7, pc}
   174a6:	bf00      	nop
   174a8:	20000c68 	.word	0x20000c68
   174ac:	20000b28 	.word	0x20000b28

000174b0 <myTraceCreate>:

void myTraceCreate      (){
   174b0:	b480      	push	{r7}
   174b2:	af00      	add	r7, sp, #0
}
   174b4:	46bd      	mov	sp, r7
   174b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   174ba:	4770      	bx	lr

000174bc <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   174bc:	b480      	push	{r7}
   174be:	af00      	add	r7, sp, #0
}
   174c0:	46bd      	mov	sp, r7
   174c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   174c6:	4770      	bx	lr

000174c8 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   174c8:	b480      	push	{r7}
   174ca:	af00      	add	r7, sp, #0
}
   174cc:	46bd      	mov	sp, r7
   174ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   174d2:	4770      	bx	lr

000174d4 <vApplicationTickHook>:
 *
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   174d4:	b580      	push	{r7, lr}
   174d6:	b082      	sub	sp, #8
   174d8:	af00      	add	r7, sp, #0
    portTickType xCurrentTime = xTaskGetTickCount();
   174da:	f7ed fde1 	bl	50a0 <xTaskGetTickCount>
   174de:	6038      	str	r0, [r7, #0]
    portBASE_TYPE i;
    /* init task */
    if(xCurrentTime > 0 && xCurrentTime < 1001)
   174e0:	683b      	ldr	r3, [r7, #0]
   174e2:	2b00      	cmp	r3, #0
   174e4:	d03f      	beq.n	17566 <vApplicationTickHook+0x92>
   174e6:	683b      	ldr	r3, [r7, #0]
   174e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   174ec:	d83b      	bhi.n	17566 <vApplicationTickHook+0x92>
    {
        for(i = 0; i < NUMBEROFTASK; ++i)
   174ee:	2300      	movs	r3, #0
   174f0:	607b      	str	r3, [r7, #4]
   174f2:	e035      	b.n	17560 <vApplicationTickHook+0x8c>
        {
            if( IS_INIT[i] == 0 && xCurrentTime % xPeriodOfTask[i] == 0 )
   174f4:	f24b 734c 	movw	r3, #46924	; 0xb74c
   174f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   174fc:	687a      	ldr	r2, [r7, #4]
   174fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   17502:	2b00      	cmp	r3, #0
   17504:	d129      	bne.n	1755a <vApplicationTickHook+0x86>
   17506:	f240 032c 	movw	r3, #44	; 0x2c
   1750a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1750e:	687a      	ldr	r2, [r7, #4]
   17510:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   17514:	683b      	ldr	r3, [r7, #0]
   17516:	fbb3 f1f2 	udiv	r1, r3, r2
   1751a:	fb02 f201 	mul.w	r2, r2, r1
   1751e:	1a9b      	subs	r3, r3, r2
   17520:	2b00      	cmp	r3, #0
   17522:	d11a      	bne.n	1755a <vApplicationTickHook+0x86>
            {
                IS_INIT[i] = 1;
   17524:	f24b 734c 	movw	r3, #46924	; 0xb74c
   17528:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1752c:	687a      	ldr	r2, [r7, #4]
   1752e:	2101      	movs	r1, #1
   17530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xSemaphoreGive( xBinarySemaphore[xSensorOfTask[i]] );
   17534:	f240 0360 	movw	r3, #96	; 0x60
   17538:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1753c:	687a      	ldr	r2, [r7, #4]
   1753e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   17542:	f640 3354 	movw	r3, #2900	; 0xb54
   17546:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1754a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1754e:	4618      	mov	r0, r3
   17550:	2100      	movs	r1, #0
   17552:	2200      	movs	r2, #0
   17554:	2300      	movs	r3, #0
   17556:	f7ec fe29 	bl	41ac <xQueueGenericSend>
    portTickType xCurrentTime = xTaskGetTickCount();
    portBASE_TYPE i;
    /* init task */
    if(xCurrentTime > 0 && xCurrentTime < 1001)
    {
        for(i = 0; i < NUMBEROFTASK; ++i)
   1755a:	687b      	ldr	r3, [r7, #4]
   1755c:	3301      	adds	r3, #1
   1755e:	607b      	str	r3, [r7, #4]
   17560:	687b      	ldr	r3, [r7, #4]
   17562:	2b0c      	cmp	r3, #12
   17564:	ddc6      	ble.n	174f4 <vApplicationTickHook+0x20>
    }
    
    // R-Servant will be suspend when no events need to be proceeded.
    // As a result, we need to send semaphore to R-Servant to triggered it processing events 
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
   17566:	f240 032c 	movw	r3, #44	; 0x2c
   1756a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1756e:	681b      	ldr	r3, [r3, #0]
   17570:	005a      	lsls	r2, r3, #1
   17572:	683b      	ldr	r3, [r7, #0]
   17574:	429a      	cmp	r2, r3
   17576:	d83f      	bhi.n	175f8 <vApplicationTickHook+0x124>
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
   17578:	f240 032c 	movw	r3, #44	; 0x2c
   1757c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17580:	681a      	ldr	r2, [r3, #0]
   17582:	683b      	ldr	r3, [r7, #0]
   17584:	fbb3 f1f2 	udiv	r1, r3, r2
   17588:	fb02 f201 	mul.w	r2, r2, r1
   1758c:	1a9b      	subs	r3, r3, r2
   1758e:	2b00      	cmp	r3, #0
   17590:	d026      	beq.n	175e0 <vApplicationTickHook+0x10c>
            xCurrentTime % xPeriodOfTask[2] == 0 ||
   17592:	f240 032c 	movw	r3, #44	; 0x2c
   17596:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1759a:	689a      	ldr	r2, [r3, #8]
   1759c:	683b      	ldr	r3, [r7, #0]
   1759e:	fbb3 f1f2 	udiv	r1, r3, r2
   175a2:	fb02 f201 	mul.w	r2, r2, r1
   175a6:	1a9b      	subs	r3, r3, r2
    // R-Servant will be suspend when no events need to be proceeded.
    // As a result, we need to send semaphore to R-Servant to triggered it processing events 
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
   175a8:	2b00      	cmp	r3, #0
   175aa:	d019      	beq.n	175e0 <vApplicationTickHook+0x10c>
            xCurrentTime % xPeriodOfTask[2] == 0 ||
            xCurrentTime % xPeriodOfTask[8] == 0 ||
   175ac:	f240 032c 	movw	r3, #44	; 0x2c
   175b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175b4:	6a1a      	ldr	r2, [r3, #32]
   175b6:	683b      	ldr	r3, [r7, #0]
   175b8:	fbb3 f1f2 	udiv	r1, r3, r2
   175bc:	fb02 f201 	mul.w	r2, r2, r1
   175c0:	1a9b      	subs	r3, r3, r2
    // As a result, we need to send semaphore to R-Servant to triggered it processing events 
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
            xCurrentTime % xPeriodOfTask[2] == 0 ||
   175c2:	2b00      	cmp	r3, #0
   175c4:	d00c      	beq.n	175e0 <vApplicationTickHook+0x10c>
            xCurrentTime % xPeriodOfTask[8] == 0 ||
            xCurrentTime % xPeriodOfTask[12] == 0)
   175c6:	f240 032c 	movw	r3, #44	; 0x2c
   175ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   175d0:	683b      	ldr	r3, [r7, #0]
   175d2:	fbb3 f1f2 	udiv	r1, r3, r2
   175d6:	fb02 f201 	mul.w	r2, r2, r1
   175da:	1a9b      	subs	r3, r3, r2
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
            xCurrentTime % xPeriodOfTask[2] == 0 ||
            xCurrentTime % xPeriodOfTask[8] == 0 ||
   175dc:	2b00      	cmp	r3, #0
   175de:	d10b      	bne.n	175f8 <vApplicationTickHook+0x124>
            xCurrentTime % xPeriodOfTask[12] == 0)
        {
           xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT - 1] ); 
   175e0:	f640 3354 	movw	r3, #2900	; 0xb54
   175e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   175ec:	4618      	mov	r0, r3
   175ee:	2100      	movs	r1, #0
   175f0:	2200      	movs	r2, #0
   175f2:	2300      	movs	r3, #0
   175f4:	f7ec fdda 	bl	41ac <xQueueGenericSend>
        }
    }
}
   175f8:	3708      	adds	r7, #8
   175fa:	46bd      	mov	sp, r7
   175fc:	bd80      	pop	{r7, pc}
   175fe:	bf00      	nop

00017600 <__aeabi_drsub>:
   17600:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   17604:	e002      	b.n	1760c <__adddf3>
   17606:	bf00      	nop

00017608 <__aeabi_dsub>:
   17608:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001760c <__adddf3>:
   1760c:	b530      	push	{r4, r5, lr}
   1760e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   17612:	ea4f 0543 	mov.w	r5, r3, lsl #1
   17616:	ea94 0f05 	teq	r4, r5
   1761a:	bf08      	it	eq
   1761c:	ea90 0f02 	teqeq	r0, r2
   17620:	bf1f      	itttt	ne
   17622:	ea54 0c00 	orrsne.w	ip, r4, r0
   17626:	ea55 0c02 	orrsne.w	ip, r5, r2
   1762a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1762e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17632:	f000 80e2 	beq.w	177fa <__adddf3+0x1ee>
   17636:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1763a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1763e:	bfb8      	it	lt
   17640:	426d      	neglt	r5, r5
   17642:	dd0c      	ble.n	1765e <__adddf3+0x52>
   17644:	442c      	add	r4, r5
   17646:	ea80 0202 	eor.w	r2, r0, r2
   1764a:	ea81 0303 	eor.w	r3, r1, r3
   1764e:	ea82 0000 	eor.w	r0, r2, r0
   17652:	ea83 0101 	eor.w	r1, r3, r1
   17656:	ea80 0202 	eor.w	r2, r0, r2
   1765a:	ea81 0303 	eor.w	r3, r1, r3
   1765e:	2d36      	cmp	r5, #54	; 0x36
   17660:	bf88      	it	hi
   17662:	bd30      	pophi	{r4, r5, pc}
   17664:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17668:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1766c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   17670:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   17674:	d002      	beq.n	1767c <__adddf3+0x70>
   17676:	4240      	negs	r0, r0
   17678:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1767c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   17680:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17684:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   17688:	d002      	beq.n	17690 <__adddf3+0x84>
   1768a:	4252      	negs	r2, r2
   1768c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   17690:	ea94 0f05 	teq	r4, r5
   17694:	f000 80a7 	beq.w	177e6 <__adddf3+0x1da>
   17698:	f1a4 0401 	sub.w	r4, r4, #1
   1769c:	f1d5 0e20 	rsbs	lr, r5, #32
   176a0:	db0d      	blt.n	176be <__adddf3+0xb2>
   176a2:	fa02 fc0e 	lsl.w	ip, r2, lr
   176a6:	fa22 f205 	lsr.w	r2, r2, r5
   176aa:	1880      	adds	r0, r0, r2
   176ac:	f141 0100 	adc.w	r1, r1, #0
   176b0:	fa03 f20e 	lsl.w	r2, r3, lr
   176b4:	1880      	adds	r0, r0, r2
   176b6:	fa43 f305 	asr.w	r3, r3, r5
   176ba:	4159      	adcs	r1, r3
   176bc:	e00e      	b.n	176dc <__adddf3+0xd0>
   176be:	f1a5 0520 	sub.w	r5, r5, #32
   176c2:	f10e 0e20 	add.w	lr, lr, #32
   176c6:	2a01      	cmp	r2, #1
   176c8:	fa03 fc0e 	lsl.w	ip, r3, lr
   176cc:	bf28      	it	cs
   176ce:	f04c 0c02 	orrcs.w	ip, ip, #2
   176d2:	fa43 f305 	asr.w	r3, r3, r5
   176d6:	18c0      	adds	r0, r0, r3
   176d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   176dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   176e0:	d507      	bpl.n	176f2 <__adddf3+0xe6>
   176e2:	f04f 0e00 	mov.w	lr, #0
   176e6:	f1dc 0c00 	rsbs	ip, ip, #0
   176ea:	eb7e 0000 	sbcs.w	r0, lr, r0
   176ee:	eb6e 0101 	sbc.w	r1, lr, r1
   176f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   176f6:	d31b      	bcc.n	17730 <__adddf3+0x124>
   176f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   176fc:	d30c      	bcc.n	17718 <__adddf3+0x10c>
   176fe:	0849      	lsrs	r1, r1, #1
   17700:	ea5f 0030 	movs.w	r0, r0, rrx
   17704:	ea4f 0c3c 	mov.w	ip, ip, rrx
   17708:	f104 0401 	add.w	r4, r4, #1
   1770c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   17710:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   17714:	f080 809a 	bcs.w	1784c <__adddf3+0x240>
   17718:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1771c:	bf08      	it	eq
   1771e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17722:	f150 0000 	adcs.w	r0, r0, #0
   17726:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1772a:	ea41 0105 	orr.w	r1, r1, r5
   1772e:	bd30      	pop	{r4, r5, pc}
   17730:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   17734:	4140      	adcs	r0, r0
   17736:	eb41 0101 	adc.w	r1, r1, r1
   1773a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1773e:	f1a4 0401 	sub.w	r4, r4, #1
   17742:	d1e9      	bne.n	17718 <__adddf3+0x10c>
   17744:	f091 0f00 	teq	r1, #0
   17748:	bf04      	itt	eq
   1774a:	4601      	moveq	r1, r0
   1774c:	2000      	moveq	r0, #0
   1774e:	fab1 f381 	clz	r3, r1
   17752:	bf08      	it	eq
   17754:	3320      	addeq	r3, #32
   17756:	f1a3 030b 	sub.w	r3, r3, #11
   1775a:	f1b3 0220 	subs.w	r2, r3, #32
   1775e:	da0c      	bge.n	1777a <__adddf3+0x16e>
   17760:	320c      	adds	r2, #12
   17762:	dd08      	ble.n	17776 <__adddf3+0x16a>
   17764:	f102 0c14 	add.w	ip, r2, #20
   17768:	f1c2 020c 	rsb	r2, r2, #12
   1776c:	fa01 f00c 	lsl.w	r0, r1, ip
   17770:	fa21 f102 	lsr.w	r1, r1, r2
   17774:	e00c      	b.n	17790 <__adddf3+0x184>
   17776:	f102 0214 	add.w	r2, r2, #20
   1777a:	bfd8      	it	le
   1777c:	f1c2 0c20 	rsble	ip, r2, #32
   17780:	fa01 f102 	lsl.w	r1, r1, r2
   17784:	fa20 fc0c 	lsr.w	ip, r0, ip
   17788:	bfdc      	itt	le
   1778a:	ea41 010c 	orrle.w	r1, r1, ip
   1778e:	4090      	lslle	r0, r2
   17790:	1ae4      	subs	r4, r4, r3
   17792:	bfa2      	ittt	ge
   17794:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   17798:	4329      	orrge	r1, r5
   1779a:	bd30      	popge	{r4, r5, pc}
   1779c:	ea6f 0404 	mvn.w	r4, r4
   177a0:	3c1f      	subs	r4, #31
   177a2:	da1c      	bge.n	177de <__adddf3+0x1d2>
   177a4:	340c      	adds	r4, #12
   177a6:	dc0e      	bgt.n	177c6 <__adddf3+0x1ba>
   177a8:	f104 0414 	add.w	r4, r4, #20
   177ac:	f1c4 0220 	rsb	r2, r4, #32
   177b0:	fa20 f004 	lsr.w	r0, r0, r4
   177b4:	fa01 f302 	lsl.w	r3, r1, r2
   177b8:	ea40 0003 	orr.w	r0, r0, r3
   177bc:	fa21 f304 	lsr.w	r3, r1, r4
   177c0:	ea45 0103 	orr.w	r1, r5, r3
   177c4:	bd30      	pop	{r4, r5, pc}
   177c6:	f1c4 040c 	rsb	r4, r4, #12
   177ca:	f1c4 0220 	rsb	r2, r4, #32
   177ce:	fa20 f002 	lsr.w	r0, r0, r2
   177d2:	fa01 f304 	lsl.w	r3, r1, r4
   177d6:	ea40 0003 	orr.w	r0, r0, r3
   177da:	4629      	mov	r1, r5
   177dc:	bd30      	pop	{r4, r5, pc}
   177de:	fa21 f004 	lsr.w	r0, r1, r4
   177e2:	4629      	mov	r1, r5
   177e4:	bd30      	pop	{r4, r5, pc}
   177e6:	f094 0f00 	teq	r4, #0
   177ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   177ee:	bf06      	itte	eq
   177f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   177f4:	3401      	addeq	r4, #1
   177f6:	3d01      	subne	r5, #1
   177f8:	e74e      	b.n	17698 <__adddf3+0x8c>
   177fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   177fe:	bf18      	it	ne
   17800:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17804:	d029      	beq.n	1785a <__adddf3+0x24e>
   17806:	ea94 0f05 	teq	r4, r5
   1780a:	bf08      	it	eq
   1780c:	ea90 0f02 	teqeq	r0, r2
   17810:	d005      	beq.n	1781e <__adddf3+0x212>
   17812:	ea54 0c00 	orrs.w	ip, r4, r0
   17816:	bf04      	itt	eq
   17818:	4619      	moveq	r1, r3
   1781a:	4610      	moveq	r0, r2
   1781c:	bd30      	pop	{r4, r5, pc}
   1781e:	ea91 0f03 	teq	r1, r3
   17822:	bf1e      	ittt	ne
   17824:	2100      	movne	r1, #0
   17826:	2000      	movne	r0, #0
   17828:	bd30      	popne	{r4, r5, pc}
   1782a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1782e:	d105      	bne.n	1783c <__adddf3+0x230>
   17830:	0040      	lsls	r0, r0, #1
   17832:	4149      	adcs	r1, r1
   17834:	bf28      	it	cs
   17836:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1783a:	bd30      	pop	{r4, r5, pc}
   1783c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17840:	bf3c      	itt	cc
   17842:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   17846:	bd30      	popcc	{r4, r5, pc}
   17848:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1784c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   17850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17854:	f04f 0000 	mov.w	r0, #0
   17858:	bd30      	pop	{r4, r5, pc}
   1785a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1785e:	bf1a      	itte	ne
   17860:	4619      	movne	r1, r3
   17862:	4610      	movne	r0, r2
   17864:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   17868:	bf1c      	itt	ne
   1786a:	460b      	movne	r3, r1
   1786c:	4602      	movne	r2, r0
   1786e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17872:	bf06      	itte	eq
   17874:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   17878:	ea91 0f03 	teqeq	r1, r3
   1787c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   17880:	bd30      	pop	{r4, r5, pc}
   17882:	bf00      	nop

00017884 <__aeabi_ui2d>:
   17884:	f090 0f00 	teq	r0, #0
   17888:	bf04      	itt	eq
   1788a:	2100      	moveq	r1, #0
   1788c:	4770      	bxeq	lr
   1788e:	b530      	push	{r4, r5, lr}
   17890:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17894:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17898:	f04f 0500 	mov.w	r5, #0
   1789c:	f04f 0100 	mov.w	r1, #0
   178a0:	e750      	b.n	17744 <__adddf3+0x138>
   178a2:	bf00      	nop

000178a4 <__aeabi_i2d>:
   178a4:	f090 0f00 	teq	r0, #0
   178a8:	bf04      	itt	eq
   178aa:	2100      	moveq	r1, #0
   178ac:	4770      	bxeq	lr
   178ae:	b530      	push	{r4, r5, lr}
   178b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   178b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   178b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   178bc:	bf48      	it	mi
   178be:	4240      	negmi	r0, r0
   178c0:	f04f 0100 	mov.w	r1, #0
   178c4:	e73e      	b.n	17744 <__adddf3+0x138>
   178c6:	bf00      	nop

000178c8 <__aeabi_f2d>:
   178c8:	0042      	lsls	r2, r0, #1
   178ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
   178ce:	ea4f 0131 	mov.w	r1, r1, rrx
   178d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   178d6:	bf1f      	itttt	ne
   178d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   178dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   178e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   178e4:	4770      	bxne	lr
   178e6:	f092 0f00 	teq	r2, #0
   178ea:	bf14      	ite	ne
   178ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   178f0:	4770      	bxeq	lr
   178f2:	b530      	push	{r4, r5, lr}
   178f4:	f44f 7460 	mov.w	r4, #896	; 0x380
   178f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   178fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17900:	e720      	b.n	17744 <__adddf3+0x138>
   17902:	bf00      	nop

00017904 <__aeabi_ul2d>:
   17904:	ea50 0201 	orrs.w	r2, r0, r1
   17908:	bf08      	it	eq
   1790a:	4770      	bxeq	lr
   1790c:	b530      	push	{r4, r5, lr}
   1790e:	f04f 0500 	mov.w	r5, #0
   17912:	e00a      	b.n	1792a <__aeabi_l2d+0x16>

00017914 <__aeabi_l2d>:
   17914:	ea50 0201 	orrs.w	r2, r0, r1
   17918:	bf08      	it	eq
   1791a:	4770      	bxeq	lr
   1791c:	b530      	push	{r4, r5, lr}
   1791e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   17922:	d502      	bpl.n	1792a <__aeabi_l2d+0x16>
   17924:	4240      	negs	r0, r0
   17926:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1792a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1792e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17932:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   17936:	f43f aedc 	beq.w	176f2 <__adddf3+0xe6>
   1793a:	f04f 0203 	mov.w	r2, #3
   1793e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17942:	bf18      	it	ne
   17944:	3203      	addne	r2, #3
   17946:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1794a:	bf18      	it	ne
   1794c:	3203      	addne	r2, #3
   1794e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   17952:	f1c2 0320 	rsb	r3, r2, #32
   17956:	fa00 fc03 	lsl.w	ip, r0, r3
   1795a:	fa20 f002 	lsr.w	r0, r0, r2
   1795e:	fa01 fe03 	lsl.w	lr, r1, r3
   17962:	ea40 000e 	orr.w	r0, r0, lr
   17966:	fa21 f102 	lsr.w	r1, r1, r2
   1796a:	4414      	add	r4, r2
   1796c:	e6c1      	b.n	176f2 <__adddf3+0xe6>
   1796e:	bf00      	nop

00017970 <__aeabi_dmul>:
   17970:	b570      	push	{r4, r5, r6, lr}
   17972:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17976:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1797a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1797e:	bf1d      	ittte	ne
   17980:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17984:	ea94 0f0c 	teqne	r4, ip
   17988:	ea95 0f0c 	teqne	r5, ip
   1798c:	f000 f8de 	bleq	17b4c <__aeabi_dmul+0x1dc>
   17990:	442c      	add	r4, r5
   17992:	ea81 0603 	eor.w	r6, r1, r3
   17996:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1799a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1799e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   179a2:	bf18      	it	ne
   179a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   179a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   179ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   179b0:	d038      	beq.n	17a24 <__aeabi_dmul+0xb4>
   179b2:	fba0 ce02 	umull	ip, lr, r0, r2
   179b6:	f04f 0500 	mov.w	r5, #0
   179ba:	fbe1 e502 	umlal	lr, r5, r1, r2
   179be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   179c2:	fbe0 e503 	umlal	lr, r5, r0, r3
   179c6:	f04f 0600 	mov.w	r6, #0
   179ca:	fbe1 5603 	umlal	r5, r6, r1, r3
   179ce:	f09c 0f00 	teq	ip, #0
   179d2:	bf18      	it	ne
   179d4:	f04e 0e01 	orrne.w	lr, lr, #1
   179d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   179dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   179e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   179e4:	d204      	bcs.n	179f0 <__aeabi_dmul+0x80>
   179e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   179ea:	416d      	adcs	r5, r5
   179ec:	eb46 0606 	adc.w	r6, r6, r6
   179f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   179f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   179f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   179fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17a00:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17a04:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17a08:	bf88      	it	hi
   17a0a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17a0e:	d81e      	bhi.n	17a4e <__aeabi_dmul+0xde>
   17a10:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17a14:	bf08      	it	eq
   17a16:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17a1a:	f150 0000 	adcs.w	r0, r0, #0
   17a1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17a22:	bd70      	pop	{r4, r5, r6, pc}
   17a24:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17a28:	ea46 0101 	orr.w	r1, r6, r1
   17a2c:	ea40 0002 	orr.w	r0, r0, r2
   17a30:	ea81 0103 	eor.w	r1, r1, r3
   17a34:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17a38:	bfc2      	ittt	gt
   17a3a:	ebd4 050c 	rsbsgt	r5, r4, ip
   17a3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17a42:	bd70      	popgt	{r4, r5, r6, pc}
   17a44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17a48:	f04f 0e00 	mov.w	lr, #0
   17a4c:	3c01      	subs	r4, #1
   17a4e:	f300 80ab 	bgt.w	17ba8 <__aeabi_dmul+0x238>
   17a52:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17a56:	bfde      	ittt	le
   17a58:	2000      	movle	r0, #0
   17a5a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17a5e:	bd70      	pople	{r4, r5, r6, pc}
   17a60:	f1c4 0400 	rsb	r4, r4, #0
   17a64:	3c20      	subs	r4, #32
   17a66:	da35      	bge.n	17ad4 <__aeabi_dmul+0x164>
   17a68:	340c      	adds	r4, #12
   17a6a:	dc1b      	bgt.n	17aa4 <__aeabi_dmul+0x134>
   17a6c:	f104 0414 	add.w	r4, r4, #20
   17a70:	f1c4 0520 	rsb	r5, r4, #32
   17a74:	fa00 f305 	lsl.w	r3, r0, r5
   17a78:	fa20 f004 	lsr.w	r0, r0, r4
   17a7c:	fa01 f205 	lsl.w	r2, r1, r5
   17a80:	ea40 0002 	orr.w	r0, r0, r2
   17a84:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   17a88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17a8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17a90:	fa21 f604 	lsr.w	r6, r1, r4
   17a94:	eb42 0106 	adc.w	r1, r2, r6
   17a98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17a9c:	bf08      	it	eq
   17a9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17aa2:	bd70      	pop	{r4, r5, r6, pc}
   17aa4:	f1c4 040c 	rsb	r4, r4, #12
   17aa8:	f1c4 0520 	rsb	r5, r4, #32
   17aac:	fa00 f304 	lsl.w	r3, r0, r4
   17ab0:	fa20 f005 	lsr.w	r0, r0, r5
   17ab4:	fa01 f204 	lsl.w	r2, r1, r4
   17ab8:	ea40 0002 	orr.w	r0, r0, r2
   17abc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17ac0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17ac4:	f141 0100 	adc.w	r1, r1, #0
   17ac8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17acc:	bf08      	it	eq
   17ace:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17ad2:	bd70      	pop	{r4, r5, r6, pc}
   17ad4:	f1c4 0520 	rsb	r5, r4, #32
   17ad8:	fa00 f205 	lsl.w	r2, r0, r5
   17adc:	ea4e 0e02 	orr.w	lr, lr, r2
   17ae0:	fa20 f304 	lsr.w	r3, r0, r4
   17ae4:	fa01 f205 	lsl.w	r2, r1, r5
   17ae8:	ea43 0302 	orr.w	r3, r3, r2
   17aec:	fa21 f004 	lsr.w	r0, r1, r4
   17af0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17af4:	fa21 f204 	lsr.w	r2, r1, r4
   17af8:	ea20 0002 	bic.w	r0, r0, r2
   17afc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17b00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17b04:	bf08      	it	eq
   17b06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17b0a:	bd70      	pop	{r4, r5, r6, pc}
   17b0c:	f094 0f00 	teq	r4, #0
   17b10:	d10f      	bne.n	17b32 <__aeabi_dmul+0x1c2>
   17b12:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17b16:	0040      	lsls	r0, r0, #1
   17b18:	eb41 0101 	adc.w	r1, r1, r1
   17b1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17b20:	bf08      	it	eq
   17b22:	3c01      	subeq	r4, #1
   17b24:	d0f7      	beq.n	17b16 <__aeabi_dmul+0x1a6>
   17b26:	ea41 0106 	orr.w	r1, r1, r6
   17b2a:	f095 0f00 	teq	r5, #0
   17b2e:	bf18      	it	ne
   17b30:	4770      	bxne	lr
   17b32:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17b36:	0052      	lsls	r2, r2, #1
   17b38:	eb43 0303 	adc.w	r3, r3, r3
   17b3c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17b40:	bf08      	it	eq
   17b42:	3d01      	subeq	r5, #1
   17b44:	d0f7      	beq.n	17b36 <__aeabi_dmul+0x1c6>
   17b46:	ea43 0306 	orr.w	r3, r3, r6
   17b4a:	4770      	bx	lr
   17b4c:	ea94 0f0c 	teq	r4, ip
   17b50:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17b54:	bf18      	it	ne
   17b56:	ea95 0f0c 	teqne	r5, ip
   17b5a:	d00c      	beq.n	17b76 <__aeabi_dmul+0x206>
   17b5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17b60:	bf18      	it	ne
   17b62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17b66:	d1d1      	bne.n	17b0c <__aeabi_dmul+0x19c>
   17b68:	ea81 0103 	eor.w	r1, r1, r3
   17b6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17b70:	f04f 0000 	mov.w	r0, #0
   17b74:	bd70      	pop	{r4, r5, r6, pc}
   17b76:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17b7a:	bf06      	itte	eq
   17b7c:	4610      	moveq	r0, r2
   17b7e:	4619      	moveq	r1, r3
   17b80:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17b84:	d019      	beq.n	17bba <__aeabi_dmul+0x24a>
   17b86:	ea94 0f0c 	teq	r4, ip
   17b8a:	d102      	bne.n	17b92 <__aeabi_dmul+0x222>
   17b8c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17b90:	d113      	bne.n	17bba <__aeabi_dmul+0x24a>
   17b92:	ea95 0f0c 	teq	r5, ip
   17b96:	d105      	bne.n	17ba4 <__aeabi_dmul+0x234>
   17b98:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17b9c:	bf1c      	itt	ne
   17b9e:	4610      	movne	r0, r2
   17ba0:	4619      	movne	r1, r3
   17ba2:	d10a      	bne.n	17bba <__aeabi_dmul+0x24a>
   17ba4:	ea81 0103 	eor.w	r1, r1, r3
   17ba8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17bac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17bb0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17bb4:	f04f 0000 	mov.w	r0, #0
   17bb8:	bd70      	pop	{r4, r5, r6, pc}
   17bba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17bbe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17bc2:	bd70      	pop	{r4, r5, r6, pc}

00017bc4 <__aeabi_ddiv>:
   17bc4:	b570      	push	{r4, r5, r6, lr}
   17bc6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17bca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17bce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17bd2:	bf1d      	ittte	ne
   17bd4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17bd8:	ea94 0f0c 	teqne	r4, ip
   17bdc:	ea95 0f0c 	teqne	r5, ip
   17be0:	f000 f8a7 	bleq	17d32 <__aeabi_ddiv+0x16e>
   17be4:	eba4 0405 	sub.w	r4, r4, r5
   17be8:	ea81 0e03 	eor.w	lr, r1, r3
   17bec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17bf0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17bf4:	f000 8088 	beq.w	17d08 <__aeabi_ddiv+0x144>
   17bf8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17bfc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17c00:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17c04:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17c08:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17c0c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17c10:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17c14:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17c18:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17c1c:	429d      	cmp	r5, r3
   17c1e:	bf08      	it	eq
   17c20:	4296      	cmpeq	r6, r2
   17c22:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17c26:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17c2a:	d202      	bcs.n	17c32 <__aeabi_ddiv+0x6e>
   17c2c:	085b      	lsrs	r3, r3, #1
   17c2e:	ea4f 0232 	mov.w	r2, r2, rrx
   17c32:	1ab6      	subs	r6, r6, r2
   17c34:	eb65 0503 	sbc.w	r5, r5, r3
   17c38:	085b      	lsrs	r3, r3, #1
   17c3a:	ea4f 0232 	mov.w	r2, r2, rrx
   17c3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   17c42:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17c46:	ebb6 0e02 	subs.w	lr, r6, r2
   17c4a:	eb75 0e03 	sbcs.w	lr, r5, r3
   17c4e:	bf22      	ittt	cs
   17c50:	1ab6      	subcs	r6, r6, r2
   17c52:	4675      	movcs	r5, lr
   17c54:	ea40 000c 	orrcs.w	r0, r0, ip
   17c58:	085b      	lsrs	r3, r3, #1
   17c5a:	ea4f 0232 	mov.w	r2, r2, rrx
   17c5e:	ebb6 0e02 	subs.w	lr, r6, r2
   17c62:	eb75 0e03 	sbcs.w	lr, r5, r3
   17c66:	bf22      	ittt	cs
   17c68:	1ab6      	subcs	r6, r6, r2
   17c6a:	4675      	movcs	r5, lr
   17c6c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   17c70:	085b      	lsrs	r3, r3, #1
   17c72:	ea4f 0232 	mov.w	r2, r2, rrx
   17c76:	ebb6 0e02 	subs.w	lr, r6, r2
   17c7a:	eb75 0e03 	sbcs.w	lr, r5, r3
   17c7e:	bf22      	ittt	cs
   17c80:	1ab6      	subcs	r6, r6, r2
   17c82:	4675      	movcs	r5, lr
   17c84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   17c88:	085b      	lsrs	r3, r3, #1
   17c8a:	ea4f 0232 	mov.w	r2, r2, rrx
   17c8e:	ebb6 0e02 	subs.w	lr, r6, r2
   17c92:	eb75 0e03 	sbcs.w	lr, r5, r3
   17c96:	bf22      	ittt	cs
   17c98:	1ab6      	subcs	r6, r6, r2
   17c9a:	4675      	movcs	r5, lr
   17c9c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   17ca0:	ea55 0e06 	orrs.w	lr, r5, r6
   17ca4:	d018      	beq.n	17cd8 <__aeabi_ddiv+0x114>
   17ca6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   17caa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   17cae:	ea4f 1606 	mov.w	r6, r6, lsl #4
   17cb2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   17cb6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   17cba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   17cbe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   17cc2:	d1c0      	bne.n	17c46 <__aeabi_ddiv+0x82>
   17cc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17cc8:	d10b      	bne.n	17ce2 <__aeabi_ddiv+0x11e>
   17cca:	ea41 0100 	orr.w	r1, r1, r0
   17cce:	f04f 0000 	mov.w	r0, #0
   17cd2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   17cd6:	e7b6      	b.n	17c46 <__aeabi_ddiv+0x82>
   17cd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17cdc:	bf04      	itt	eq
   17cde:	4301      	orreq	r1, r0
   17ce0:	2000      	moveq	r0, #0
   17ce2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17ce6:	bf88      	it	hi
   17ce8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17cec:	f63f aeaf 	bhi.w	17a4e <__aeabi_dmul+0xde>
   17cf0:	ebb5 0c03 	subs.w	ip, r5, r3
   17cf4:	bf04      	itt	eq
   17cf6:	ebb6 0c02 	subseq.w	ip, r6, r2
   17cfa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17cfe:	f150 0000 	adcs.w	r0, r0, #0
   17d02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17d06:	bd70      	pop	{r4, r5, r6, pc}
   17d08:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   17d0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   17d10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   17d14:	bfc2      	ittt	gt
   17d16:	ebd4 050c 	rsbsgt	r5, r4, ip
   17d1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17d1e:	bd70      	popgt	{r4, r5, r6, pc}
   17d20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17d24:	f04f 0e00 	mov.w	lr, #0
   17d28:	3c01      	subs	r4, #1
   17d2a:	e690      	b.n	17a4e <__aeabi_dmul+0xde>
   17d2c:	ea45 0e06 	orr.w	lr, r5, r6
   17d30:	e68d      	b.n	17a4e <__aeabi_dmul+0xde>
   17d32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17d36:	ea94 0f0c 	teq	r4, ip
   17d3a:	bf08      	it	eq
   17d3c:	ea95 0f0c 	teqeq	r5, ip
   17d40:	f43f af3b 	beq.w	17bba <__aeabi_dmul+0x24a>
   17d44:	ea94 0f0c 	teq	r4, ip
   17d48:	d10a      	bne.n	17d60 <__aeabi_ddiv+0x19c>
   17d4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17d4e:	f47f af34 	bne.w	17bba <__aeabi_dmul+0x24a>
   17d52:	ea95 0f0c 	teq	r5, ip
   17d56:	f47f af25 	bne.w	17ba4 <__aeabi_dmul+0x234>
   17d5a:	4610      	mov	r0, r2
   17d5c:	4619      	mov	r1, r3
   17d5e:	e72c      	b.n	17bba <__aeabi_dmul+0x24a>
   17d60:	ea95 0f0c 	teq	r5, ip
   17d64:	d106      	bne.n	17d74 <__aeabi_ddiv+0x1b0>
   17d66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17d6a:	f43f aefd 	beq.w	17b68 <__aeabi_dmul+0x1f8>
   17d6e:	4610      	mov	r0, r2
   17d70:	4619      	mov	r1, r3
   17d72:	e722      	b.n	17bba <__aeabi_dmul+0x24a>
   17d74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17d78:	bf18      	it	ne
   17d7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17d7e:	f47f aec5 	bne.w	17b0c <__aeabi_dmul+0x19c>
   17d82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   17d86:	f47f af0d 	bne.w	17ba4 <__aeabi_dmul+0x234>
   17d8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   17d8e:	f47f aeeb 	bne.w	17b68 <__aeabi_dmul+0x1f8>
   17d92:	e712      	b.n	17bba <__aeabi_dmul+0x24a>

00017d94 <__gedf2>:
   17d94:	f04f 3cff 	mov.w	ip, #4294967295
   17d98:	e006      	b.n	17da8 <__cmpdf2+0x4>
   17d9a:	bf00      	nop

00017d9c <__ledf2>:
   17d9c:	f04f 0c01 	mov.w	ip, #1
   17da0:	e002      	b.n	17da8 <__cmpdf2+0x4>
   17da2:	bf00      	nop

00017da4 <__cmpdf2>:
   17da4:	f04f 0c01 	mov.w	ip, #1
   17da8:	f84d cd04 	str.w	ip, [sp, #-4]!
   17dac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17db0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17db4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17db8:	bf18      	it	ne
   17dba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   17dbe:	d01b      	beq.n	17df8 <__cmpdf2+0x54>
   17dc0:	b001      	add	sp, #4
   17dc2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   17dc6:	bf0c      	ite	eq
   17dc8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   17dcc:	ea91 0f03 	teqne	r1, r3
   17dd0:	bf02      	ittt	eq
   17dd2:	ea90 0f02 	teqeq	r0, r2
   17dd6:	2000      	moveq	r0, #0
   17dd8:	4770      	bxeq	lr
   17dda:	f110 0f00 	cmn.w	r0, #0
   17dde:	ea91 0f03 	teq	r1, r3
   17de2:	bf58      	it	pl
   17de4:	4299      	cmppl	r1, r3
   17de6:	bf08      	it	eq
   17de8:	4290      	cmpeq	r0, r2
   17dea:	bf2c      	ite	cs
   17dec:	17d8      	asrcs	r0, r3, #31
   17dee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   17df2:	f040 0001 	orr.w	r0, r0, #1
   17df6:	4770      	bx	lr
   17df8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17dfc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17e00:	d102      	bne.n	17e08 <__cmpdf2+0x64>
   17e02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   17e06:	d107      	bne.n	17e18 <__cmpdf2+0x74>
   17e08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17e0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17e10:	d1d6      	bne.n	17dc0 <__cmpdf2+0x1c>
   17e12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   17e16:	d0d3      	beq.n	17dc0 <__cmpdf2+0x1c>
   17e18:	f85d 0b04 	ldr.w	r0, [sp], #4
   17e1c:	4770      	bx	lr
   17e1e:	bf00      	nop

00017e20 <__aeabi_cdrcmple>:
   17e20:	4684      	mov	ip, r0
   17e22:	4610      	mov	r0, r2
   17e24:	4662      	mov	r2, ip
   17e26:	468c      	mov	ip, r1
   17e28:	4619      	mov	r1, r3
   17e2a:	4663      	mov	r3, ip
   17e2c:	e000      	b.n	17e30 <__aeabi_cdcmpeq>
   17e2e:	bf00      	nop

00017e30 <__aeabi_cdcmpeq>:
   17e30:	b501      	push	{r0, lr}
   17e32:	f7ff ffb7 	bl	17da4 <__cmpdf2>
   17e36:	2800      	cmp	r0, #0
   17e38:	bf48      	it	mi
   17e3a:	f110 0f00 	cmnmi.w	r0, #0
   17e3e:	bd01      	pop	{r0, pc}

00017e40 <__aeabi_dcmpeq>:
   17e40:	f84d ed08 	str.w	lr, [sp, #-8]!
   17e44:	f7ff fff4 	bl	17e30 <__aeabi_cdcmpeq>
   17e48:	bf0c      	ite	eq
   17e4a:	2001      	moveq	r0, #1
   17e4c:	2000      	movne	r0, #0
   17e4e:	f85d fb08 	ldr.w	pc, [sp], #8
   17e52:	bf00      	nop

00017e54 <__aeabi_dcmplt>:
   17e54:	f84d ed08 	str.w	lr, [sp, #-8]!
   17e58:	f7ff ffea 	bl	17e30 <__aeabi_cdcmpeq>
   17e5c:	bf34      	ite	cc
   17e5e:	2001      	movcc	r0, #1
   17e60:	2000      	movcs	r0, #0
   17e62:	f85d fb08 	ldr.w	pc, [sp], #8
   17e66:	bf00      	nop

00017e68 <__aeabi_dcmple>:
   17e68:	f84d ed08 	str.w	lr, [sp, #-8]!
   17e6c:	f7ff ffe0 	bl	17e30 <__aeabi_cdcmpeq>
   17e70:	bf94      	ite	ls
   17e72:	2001      	movls	r0, #1
   17e74:	2000      	movhi	r0, #0
   17e76:	f85d fb08 	ldr.w	pc, [sp], #8
   17e7a:	bf00      	nop

00017e7c <__aeabi_dcmpge>:
   17e7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   17e80:	f7ff ffce 	bl	17e20 <__aeabi_cdrcmple>
   17e84:	bf94      	ite	ls
   17e86:	2001      	movls	r0, #1
   17e88:	2000      	movhi	r0, #0
   17e8a:	f85d fb08 	ldr.w	pc, [sp], #8
   17e8e:	bf00      	nop

00017e90 <__aeabi_dcmpgt>:
   17e90:	f84d ed08 	str.w	lr, [sp, #-8]!
   17e94:	f7ff ffc4 	bl	17e20 <__aeabi_cdrcmple>
   17e98:	bf34      	ite	cc
   17e9a:	2001      	movcc	r0, #1
   17e9c:	2000      	movcs	r0, #0
   17e9e:	f85d fb08 	ldr.w	pc, [sp], #8
   17ea2:	bf00      	nop

00017ea4 <__aeabi_d2iz>:
   17ea4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17ea8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17eac:	d215      	bcs.n	17eda <__aeabi_d2iz+0x36>
   17eae:	d511      	bpl.n	17ed4 <__aeabi_d2iz+0x30>
   17eb0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17eb4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17eb8:	d912      	bls.n	17ee0 <__aeabi_d2iz+0x3c>
   17eba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17ebe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17ec2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   17ec6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17eca:	fa23 f002 	lsr.w	r0, r3, r2
   17ece:	bf18      	it	ne
   17ed0:	4240      	negne	r0, r0
   17ed2:	4770      	bx	lr
   17ed4:	f04f 0000 	mov.w	r0, #0
   17ed8:	4770      	bx	lr
   17eda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   17ede:	d105      	bne.n	17eec <__aeabi_d2iz+0x48>
   17ee0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   17ee4:	bf08      	it	eq
   17ee6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   17eea:	4770      	bx	lr
   17eec:	f04f 0000 	mov.w	r0, #0
   17ef0:	4770      	bx	lr
   17ef2:	bf00      	nop

00017ef4 <__aeabi_d2uiz>:
   17ef4:	004a      	lsls	r2, r1, #1
   17ef6:	d211      	bcs.n	17f1c <__aeabi_d2uiz+0x28>
   17ef8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17efc:	d211      	bcs.n	17f22 <__aeabi_d2uiz+0x2e>
   17efe:	d50d      	bpl.n	17f1c <__aeabi_d2uiz+0x28>
   17f00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17f04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17f08:	d40e      	bmi.n	17f28 <__aeabi_d2uiz+0x34>
   17f0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17f0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17f12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   17f16:	fa23 f002 	lsr.w	r0, r3, r2
   17f1a:	4770      	bx	lr
   17f1c:	f04f 0000 	mov.w	r0, #0
   17f20:	4770      	bx	lr
   17f22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   17f26:	d102      	bne.n	17f2e <__aeabi_d2uiz+0x3a>
   17f28:	f04f 30ff 	mov.w	r0, #4294967295
   17f2c:	4770      	bx	lr
   17f2e:	f04f 0000 	mov.w	r0, #0
   17f32:	4770      	bx	lr

00017f34 <__aeabi_d2f>:
   17f34:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17f38:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   17f3c:	bf24      	itt	cs
   17f3e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   17f42:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   17f46:	d90d      	bls.n	17f64 <__aeabi_d2f+0x30>
   17f48:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   17f4c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   17f50:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   17f54:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   17f58:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   17f5c:	bf08      	it	eq
   17f5e:	f020 0001 	biceq.w	r0, r0, #1
   17f62:	4770      	bx	lr
   17f64:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   17f68:	d121      	bne.n	17fae <__aeabi_d2f+0x7a>
   17f6a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   17f6e:	bfbc      	itt	lt
   17f70:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   17f74:	4770      	bxlt	lr
   17f76:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17f7a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   17f7e:	f1c2 0218 	rsb	r2, r2, #24
   17f82:	f1c2 0c20 	rsb	ip, r2, #32
   17f86:	fa10 f30c 	lsls.w	r3, r0, ip
   17f8a:	fa20 f002 	lsr.w	r0, r0, r2
   17f8e:	bf18      	it	ne
   17f90:	f040 0001 	orrne.w	r0, r0, #1
   17f94:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17f98:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   17f9c:	fa03 fc0c 	lsl.w	ip, r3, ip
   17fa0:	ea40 000c 	orr.w	r0, r0, ip
   17fa4:	fa23 f302 	lsr.w	r3, r3, r2
   17fa8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   17fac:	e7cc      	b.n	17f48 <__aeabi_d2f+0x14>
   17fae:	ea7f 5362 	mvns.w	r3, r2, asr #21
   17fb2:	d107      	bne.n	17fc4 <__aeabi_d2f+0x90>
   17fb4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   17fb8:	bf1e      	ittt	ne
   17fba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   17fbe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   17fc2:	4770      	bxne	lr
   17fc4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   17fc8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   17fcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   17fd0:	4770      	bx	lr
   17fd2:	bf00      	nop

00017fd4 <__aeabi_frsub>:
   17fd4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   17fd8:	e002      	b.n	17fe0 <__addsf3>
   17fda:	bf00      	nop

00017fdc <__aeabi_fsub>:
   17fdc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00017fe0 <__addsf3>:
   17fe0:	0042      	lsls	r2, r0, #1
   17fe2:	bf1f      	itttt	ne
   17fe4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   17fe8:	ea92 0f03 	teqne	r2, r3
   17fec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   17ff0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   17ff4:	d06a      	beq.n	180cc <__addsf3+0xec>
   17ff6:	ea4f 6212 	mov.w	r2, r2, lsr #24
   17ffa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   17ffe:	bfc1      	itttt	gt
   18000:	18d2      	addgt	r2, r2, r3
   18002:	4041      	eorgt	r1, r0
   18004:	4048      	eorgt	r0, r1
   18006:	4041      	eorgt	r1, r0
   18008:	bfb8      	it	lt
   1800a:	425b      	neglt	r3, r3
   1800c:	2b19      	cmp	r3, #25
   1800e:	bf88      	it	hi
   18010:	4770      	bxhi	lr
   18012:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18016:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1801a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1801e:	bf18      	it	ne
   18020:	4240      	negne	r0, r0
   18022:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18026:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1802a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1802e:	bf18      	it	ne
   18030:	4249      	negne	r1, r1
   18032:	ea92 0f03 	teq	r2, r3
   18036:	d03f      	beq.n	180b8 <__addsf3+0xd8>
   18038:	f1a2 0201 	sub.w	r2, r2, #1
   1803c:	fa41 fc03 	asr.w	ip, r1, r3
   18040:	eb10 000c 	adds.w	r0, r0, ip
   18044:	f1c3 0320 	rsb	r3, r3, #32
   18048:	fa01 f103 	lsl.w	r1, r1, r3
   1804c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18050:	d502      	bpl.n	18058 <__addsf3+0x78>
   18052:	4249      	negs	r1, r1
   18054:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   18058:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1805c:	d313      	bcc.n	18086 <__addsf3+0xa6>
   1805e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   18062:	d306      	bcc.n	18072 <__addsf3+0x92>
   18064:	0840      	lsrs	r0, r0, #1
   18066:	ea4f 0131 	mov.w	r1, r1, rrx
   1806a:	f102 0201 	add.w	r2, r2, #1
   1806e:	2afe      	cmp	r2, #254	; 0xfe
   18070:	d251      	bcs.n	18116 <__addsf3+0x136>
   18072:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   18076:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1807a:	bf08      	it	eq
   1807c:	f020 0001 	biceq.w	r0, r0, #1
   18080:	ea40 0003 	orr.w	r0, r0, r3
   18084:	4770      	bx	lr
   18086:	0049      	lsls	r1, r1, #1
   18088:	eb40 0000 	adc.w	r0, r0, r0
   1808c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   18090:	f1a2 0201 	sub.w	r2, r2, #1
   18094:	d1ed      	bne.n	18072 <__addsf3+0x92>
   18096:	fab0 fc80 	clz	ip, r0
   1809a:	f1ac 0c08 	sub.w	ip, ip, #8
   1809e:	ebb2 020c 	subs.w	r2, r2, ip
   180a2:	fa00 f00c 	lsl.w	r0, r0, ip
   180a6:	bfaa      	itet	ge
   180a8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   180ac:	4252      	neglt	r2, r2
   180ae:	4318      	orrge	r0, r3
   180b0:	bfbc      	itt	lt
   180b2:	40d0      	lsrlt	r0, r2
   180b4:	4318      	orrlt	r0, r3
   180b6:	4770      	bx	lr
   180b8:	f092 0f00 	teq	r2, #0
   180bc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   180c0:	bf06      	itte	eq
   180c2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   180c6:	3201      	addeq	r2, #1
   180c8:	3b01      	subne	r3, #1
   180ca:	e7b5      	b.n	18038 <__addsf3+0x58>
   180cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   180d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   180d4:	bf18      	it	ne
   180d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   180da:	d021      	beq.n	18120 <__addsf3+0x140>
   180dc:	ea92 0f03 	teq	r2, r3
   180e0:	d004      	beq.n	180ec <__addsf3+0x10c>
   180e2:	f092 0f00 	teq	r2, #0
   180e6:	bf08      	it	eq
   180e8:	4608      	moveq	r0, r1
   180ea:	4770      	bx	lr
   180ec:	ea90 0f01 	teq	r0, r1
   180f0:	bf1c      	itt	ne
   180f2:	2000      	movne	r0, #0
   180f4:	4770      	bxne	lr
   180f6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   180fa:	d104      	bne.n	18106 <__addsf3+0x126>
   180fc:	0040      	lsls	r0, r0, #1
   180fe:	bf28      	it	cs
   18100:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   18104:	4770      	bx	lr
   18106:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1810a:	bf3c      	itt	cc
   1810c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   18110:	4770      	bxcc	lr
   18112:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18116:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1811a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1811e:	4770      	bx	lr
   18120:	ea7f 6222 	mvns.w	r2, r2, asr #24
   18124:	bf16      	itet	ne
   18126:	4608      	movne	r0, r1
   18128:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1812c:	4601      	movne	r1, r0
   1812e:	0242      	lsls	r2, r0, #9
   18130:	bf06      	itte	eq
   18132:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   18136:	ea90 0f01 	teqeq	r0, r1
   1813a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1813e:	4770      	bx	lr

00018140 <__aeabi_ui2f>:
   18140:	f04f 0300 	mov.w	r3, #0
   18144:	e004      	b.n	18150 <__aeabi_i2f+0x8>
   18146:	bf00      	nop

00018148 <__aeabi_i2f>:
   18148:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1814c:	bf48      	it	mi
   1814e:	4240      	negmi	r0, r0
   18150:	ea5f 0c00 	movs.w	ip, r0
   18154:	bf08      	it	eq
   18156:	4770      	bxeq	lr
   18158:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1815c:	4601      	mov	r1, r0
   1815e:	f04f 0000 	mov.w	r0, #0
   18162:	e01c      	b.n	1819e <__aeabi_l2f+0x2a>

00018164 <__aeabi_ul2f>:
   18164:	ea50 0201 	orrs.w	r2, r0, r1
   18168:	bf08      	it	eq
   1816a:	4770      	bxeq	lr
   1816c:	f04f 0300 	mov.w	r3, #0
   18170:	e00a      	b.n	18188 <__aeabi_l2f+0x14>
   18172:	bf00      	nop

00018174 <__aeabi_l2f>:
   18174:	ea50 0201 	orrs.w	r2, r0, r1
   18178:	bf08      	it	eq
   1817a:	4770      	bxeq	lr
   1817c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   18180:	d502      	bpl.n	18188 <__aeabi_l2f+0x14>
   18182:	4240      	negs	r0, r0
   18184:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18188:	ea5f 0c01 	movs.w	ip, r1
   1818c:	bf02      	ittt	eq
   1818e:	4684      	moveq	ip, r0
   18190:	4601      	moveq	r1, r0
   18192:	2000      	moveq	r0, #0
   18194:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   18198:	bf08      	it	eq
   1819a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1819e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   181a2:	fabc f28c 	clz	r2, ip
   181a6:	3a08      	subs	r2, #8
   181a8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   181ac:	db10      	blt.n	181d0 <__aeabi_l2f+0x5c>
   181ae:	fa01 fc02 	lsl.w	ip, r1, r2
   181b2:	4463      	add	r3, ip
   181b4:	fa00 fc02 	lsl.w	ip, r0, r2
   181b8:	f1c2 0220 	rsb	r2, r2, #32
   181bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   181c0:	fa20 f202 	lsr.w	r2, r0, r2
   181c4:	eb43 0002 	adc.w	r0, r3, r2
   181c8:	bf08      	it	eq
   181ca:	f020 0001 	biceq.w	r0, r0, #1
   181ce:	4770      	bx	lr
   181d0:	f102 0220 	add.w	r2, r2, #32
   181d4:	fa01 fc02 	lsl.w	ip, r1, r2
   181d8:	f1c2 0220 	rsb	r2, r2, #32
   181dc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   181e0:	fa21 f202 	lsr.w	r2, r1, r2
   181e4:	eb43 0002 	adc.w	r0, r3, r2
   181e8:	bf08      	it	eq
   181ea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   181ee:	4770      	bx	lr

000181f0 <__aeabi_fmul>:
   181f0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   181f4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   181f8:	bf1e      	ittt	ne
   181fa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   181fe:	ea92 0f0c 	teqne	r2, ip
   18202:	ea93 0f0c 	teqne	r3, ip
   18206:	d06f      	beq.n	182e8 <__aeabi_fmul+0xf8>
   18208:	441a      	add	r2, r3
   1820a:	ea80 0c01 	eor.w	ip, r0, r1
   1820e:	0240      	lsls	r0, r0, #9
   18210:	bf18      	it	ne
   18212:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   18216:	d01e      	beq.n	18256 <__aeabi_fmul+0x66>
   18218:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1821c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   18220:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   18224:	fba0 3101 	umull	r3, r1, r0, r1
   18228:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1822c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   18230:	bf3e      	ittt	cc
   18232:	0049      	lslcc	r1, r1, #1
   18234:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18238:	005b      	lslcc	r3, r3, #1
   1823a:	ea40 0001 	orr.w	r0, r0, r1
   1823e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   18242:	2afd      	cmp	r2, #253	; 0xfd
   18244:	d81d      	bhi.n	18282 <__aeabi_fmul+0x92>
   18246:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1824a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1824e:	bf08      	it	eq
   18250:	f020 0001 	biceq.w	r0, r0, #1
   18254:	4770      	bx	lr
   18256:	f090 0f00 	teq	r0, #0
   1825a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1825e:	bf08      	it	eq
   18260:	0249      	lsleq	r1, r1, #9
   18262:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18266:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1826a:	3a7f      	subs	r2, #127	; 0x7f
   1826c:	bfc2      	ittt	gt
   1826e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   18272:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   18276:	4770      	bxgt	lr
   18278:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1827c:	f04f 0300 	mov.w	r3, #0
   18280:	3a01      	subs	r2, #1
   18282:	dc5d      	bgt.n	18340 <__aeabi_fmul+0x150>
   18284:	f112 0f19 	cmn.w	r2, #25
   18288:	bfdc      	itt	le
   1828a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1828e:	4770      	bxle	lr
   18290:	f1c2 0200 	rsb	r2, r2, #0
   18294:	0041      	lsls	r1, r0, #1
   18296:	fa21 f102 	lsr.w	r1, r1, r2
   1829a:	f1c2 0220 	rsb	r2, r2, #32
   1829e:	fa00 fc02 	lsl.w	ip, r0, r2
   182a2:	ea5f 0031 	movs.w	r0, r1, rrx
   182a6:	f140 0000 	adc.w	r0, r0, #0
   182aa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   182ae:	bf08      	it	eq
   182b0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   182b4:	4770      	bx	lr
   182b6:	f092 0f00 	teq	r2, #0
   182ba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   182be:	bf02      	ittt	eq
   182c0:	0040      	lsleq	r0, r0, #1
   182c2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   182c6:	3a01      	subeq	r2, #1
   182c8:	d0f9      	beq.n	182be <__aeabi_fmul+0xce>
   182ca:	ea40 000c 	orr.w	r0, r0, ip
   182ce:	f093 0f00 	teq	r3, #0
   182d2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   182d6:	bf02      	ittt	eq
   182d8:	0049      	lsleq	r1, r1, #1
   182da:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   182de:	3b01      	subeq	r3, #1
   182e0:	d0f9      	beq.n	182d6 <__aeabi_fmul+0xe6>
   182e2:	ea41 010c 	orr.w	r1, r1, ip
   182e6:	e78f      	b.n	18208 <__aeabi_fmul+0x18>
   182e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   182ec:	ea92 0f0c 	teq	r2, ip
   182f0:	bf18      	it	ne
   182f2:	ea93 0f0c 	teqne	r3, ip
   182f6:	d00a      	beq.n	1830e <__aeabi_fmul+0x11e>
   182f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   182fc:	bf18      	it	ne
   182fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   18302:	d1d8      	bne.n	182b6 <__aeabi_fmul+0xc6>
   18304:	ea80 0001 	eor.w	r0, r0, r1
   18308:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1830c:	4770      	bx	lr
   1830e:	f090 0f00 	teq	r0, #0
   18312:	bf17      	itett	ne
   18314:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18318:	4608      	moveq	r0, r1
   1831a:	f091 0f00 	teqne	r1, #0
   1831e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   18322:	d014      	beq.n	1834e <__aeabi_fmul+0x15e>
   18324:	ea92 0f0c 	teq	r2, ip
   18328:	d101      	bne.n	1832e <__aeabi_fmul+0x13e>
   1832a:	0242      	lsls	r2, r0, #9
   1832c:	d10f      	bne.n	1834e <__aeabi_fmul+0x15e>
   1832e:	ea93 0f0c 	teq	r3, ip
   18332:	d103      	bne.n	1833c <__aeabi_fmul+0x14c>
   18334:	024b      	lsls	r3, r1, #9
   18336:	bf18      	it	ne
   18338:	4608      	movne	r0, r1
   1833a:	d108      	bne.n	1834e <__aeabi_fmul+0x15e>
   1833c:	ea80 0001 	eor.w	r0, r0, r1
   18340:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18344:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18348:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1834c:	4770      	bx	lr
   1834e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18352:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   18356:	4770      	bx	lr

00018358 <__aeabi_fdiv>:
   18358:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1835c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18360:	bf1e      	ittt	ne
   18362:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   18366:	ea92 0f0c 	teqne	r2, ip
   1836a:	ea93 0f0c 	teqne	r3, ip
   1836e:	d069      	beq.n	18444 <__aeabi_fdiv+0xec>
   18370:	eba2 0203 	sub.w	r2, r2, r3
   18374:	ea80 0c01 	eor.w	ip, r0, r1
   18378:	0249      	lsls	r1, r1, #9
   1837a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1837e:	d037      	beq.n	183f0 <__aeabi_fdiv+0x98>
   18380:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18384:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   18388:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   1838c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18390:	428b      	cmp	r3, r1
   18392:	bf38      	it	cc
   18394:	005b      	lslcc	r3, r3, #1
   18396:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1839a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1839e:	428b      	cmp	r3, r1
   183a0:	bf24      	itt	cs
   183a2:	1a5b      	subcs	r3, r3, r1
   183a4:	ea40 000c 	orrcs.w	r0, r0, ip
   183a8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   183ac:	bf24      	itt	cs
   183ae:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   183b2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   183b6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   183ba:	bf24      	itt	cs
   183bc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   183c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   183c4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   183c8:	bf24      	itt	cs
   183ca:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   183ce:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   183d2:	011b      	lsls	r3, r3, #4
   183d4:	bf18      	it	ne
   183d6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   183da:	d1e0      	bne.n	1839e <__aeabi_fdiv+0x46>
   183dc:	2afd      	cmp	r2, #253	; 0xfd
   183de:	f63f af50 	bhi.w	18282 <__aeabi_fmul+0x92>
   183e2:	428b      	cmp	r3, r1
   183e4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   183e8:	bf08      	it	eq
   183ea:	f020 0001 	biceq.w	r0, r0, #1
   183ee:	4770      	bx	lr
   183f0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   183f4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   183f8:	327f      	adds	r2, #127	; 0x7f
   183fa:	bfc2      	ittt	gt
   183fc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   18400:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   18404:	4770      	bxgt	lr
   18406:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1840a:	f04f 0300 	mov.w	r3, #0
   1840e:	3a01      	subs	r2, #1
   18410:	e737      	b.n	18282 <__aeabi_fmul+0x92>
   18412:	f092 0f00 	teq	r2, #0
   18416:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1841a:	bf02      	ittt	eq
   1841c:	0040      	lsleq	r0, r0, #1
   1841e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   18422:	3a01      	subeq	r2, #1
   18424:	d0f9      	beq.n	1841a <__aeabi_fdiv+0xc2>
   18426:	ea40 000c 	orr.w	r0, r0, ip
   1842a:	f093 0f00 	teq	r3, #0
   1842e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18432:	bf02      	ittt	eq
   18434:	0049      	lsleq	r1, r1, #1
   18436:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1843a:	3b01      	subeq	r3, #1
   1843c:	d0f9      	beq.n	18432 <__aeabi_fdiv+0xda>
   1843e:	ea41 010c 	orr.w	r1, r1, ip
   18442:	e795      	b.n	18370 <__aeabi_fdiv+0x18>
   18444:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18448:	ea92 0f0c 	teq	r2, ip
   1844c:	d108      	bne.n	18460 <__aeabi_fdiv+0x108>
   1844e:	0242      	lsls	r2, r0, #9
   18450:	f47f af7d 	bne.w	1834e <__aeabi_fmul+0x15e>
   18454:	ea93 0f0c 	teq	r3, ip
   18458:	f47f af70 	bne.w	1833c <__aeabi_fmul+0x14c>
   1845c:	4608      	mov	r0, r1
   1845e:	e776      	b.n	1834e <__aeabi_fmul+0x15e>
   18460:	ea93 0f0c 	teq	r3, ip
   18464:	d104      	bne.n	18470 <__aeabi_fdiv+0x118>
   18466:	024b      	lsls	r3, r1, #9
   18468:	f43f af4c 	beq.w	18304 <__aeabi_fmul+0x114>
   1846c:	4608      	mov	r0, r1
   1846e:	e76e      	b.n	1834e <__aeabi_fmul+0x15e>
   18470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18474:	bf18      	it	ne
   18476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1847a:	d1ca      	bne.n	18412 <__aeabi_fdiv+0xba>
   1847c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   18480:	f47f af5c 	bne.w	1833c <__aeabi_fmul+0x14c>
   18484:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   18488:	f47f af3c 	bne.w	18304 <__aeabi_fmul+0x114>
   1848c:	e75f      	b.n	1834e <__aeabi_fmul+0x15e>
   1848e:	bf00      	nop

00018490 <__gesf2>:
   18490:	f04f 3cff 	mov.w	ip, #4294967295
   18494:	e006      	b.n	184a4 <__cmpsf2+0x4>
   18496:	bf00      	nop

00018498 <__lesf2>:
   18498:	f04f 0c01 	mov.w	ip, #1
   1849c:	e002      	b.n	184a4 <__cmpsf2+0x4>
   1849e:	bf00      	nop

000184a0 <__cmpsf2>:
   184a0:	f04f 0c01 	mov.w	ip, #1
   184a4:	f84d cd04 	str.w	ip, [sp, #-4]!
   184a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
   184ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
   184b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   184b4:	bf18      	it	ne
   184b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   184ba:	d011      	beq.n	184e0 <__cmpsf2+0x40>
   184bc:	b001      	add	sp, #4
   184be:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   184c2:	bf18      	it	ne
   184c4:	ea90 0f01 	teqne	r0, r1
   184c8:	bf58      	it	pl
   184ca:	ebb2 0003 	subspl.w	r0, r2, r3
   184ce:	bf88      	it	hi
   184d0:	17c8      	asrhi	r0, r1, #31
   184d2:	bf38      	it	cc
   184d4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   184d8:	bf18      	it	ne
   184da:	f040 0001 	orrne.w	r0, r0, #1
   184de:	4770      	bx	lr
   184e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   184e4:	d102      	bne.n	184ec <__cmpsf2+0x4c>
   184e6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   184ea:	d105      	bne.n	184f8 <__cmpsf2+0x58>
   184ec:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   184f0:	d1e4      	bne.n	184bc <__cmpsf2+0x1c>
   184f2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   184f6:	d0e1      	beq.n	184bc <__cmpsf2+0x1c>
   184f8:	f85d 0b04 	ldr.w	r0, [sp], #4
   184fc:	4770      	bx	lr
   184fe:	bf00      	nop

00018500 <__aeabi_cfrcmple>:
   18500:	4684      	mov	ip, r0
   18502:	4608      	mov	r0, r1
   18504:	4661      	mov	r1, ip
   18506:	e7ff      	b.n	18508 <__aeabi_cfcmpeq>

00018508 <__aeabi_cfcmpeq>:
   18508:	b50f      	push	{r0, r1, r2, r3, lr}
   1850a:	f7ff ffc9 	bl	184a0 <__cmpsf2>
   1850e:	2800      	cmp	r0, #0
   18510:	bf48      	it	mi
   18512:	f110 0f00 	cmnmi.w	r0, #0
   18516:	bd0f      	pop	{r0, r1, r2, r3, pc}

00018518 <__aeabi_fcmpeq>:
   18518:	f84d ed08 	str.w	lr, [sp, #-8]!
   1851c:	f7ff fff4 	bl	18508 <__aeabi_cfcmpeq>
   18520:	bf0c      	ite	eq
   18522:	2001      	moveq	r0, #1
   18524:	2000      	movne	r0, #0
   18526:	f85d fb08 	ldr.w	pc, [sp], #8
   1852a:	bf00      	nop

0001852c <__aeabi_fcmplt>:
   1852c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18530:	f7ff ffea 	bl	18508 <__aeabi_cfcmpeq>
   18534:	bf34      	ite	cc
   18536:	2001      	movcc	r0, #1
   18538:	2000      	movcs	r0, #0
   1853a:	f85d fb08 	ldr.w	pc, [sp], #8
   1853e:	bf00      	nop

00018540 <__aeabi_fcmple>:
   18540:	f84d ed08 	str.w	lr, [sp, #-8]!
   18544:	f7ff ffe0 	bl	18508 <__aeabi_cfcmpeq>
   18548:	bf94      	ite	ls
   1854a:	2001      	movls	r0, #1
   1854c:	2000      	movhi	r0, #0
   1854e:	f85d fb08 	ldr.w	pc, [sp], #8
   18552:	bf00      	nop

00018554 <__aeabi_fcmpge>:
   18554:	f84d ed08 	str.w	lr, [sp, #-8]!
   18558:	f7ff ffd2 	bl	18500 <__aeabi_cfrcmple>
   1855c:	bf94      	ite	ls
   1855e:	2001      	movls	r0, #1
   18560:	2000      	movhi	r0, #0
   18562:	f85d fb08 	ldr.w	pc, [sp], #8
   18566:	bf00      	nop

00018568 <__aeabi_fcmpgt>:
   18568:	f84d ed08 	str.w	lr, [sp, #-8]!
   1856c:	f7ff ffc8 	bl	18500 <__aeabi_cfrcmple>
   18570:	bf34      	ite	cc
   18572:	2001      	movcc	r0, #1
   18574:	2000      	movcs	r0, #0
   18576:	f85d fb08 	ldr.w	pc, [sp], #8
   1857a:	bf00      	nop

0001857c <__aeabi_f2iz>:
   1857c:	ea4f 0240 	mov.w	r2, r0, lsl #1
   18580:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   18584:	d30f      	bcc.n	185a6 <__aeabi_f2iz+0x2a>
   18586:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1858a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1858e:	d90d      	bls.n	185ac <__aeabi_f2iz+0x30>
   18590:	ea4f 2300 	mov.w	r3, r0, lsl #8
   18594:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18598:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1859c:	fa23 f002 	lsr.w	r0, r3, r2
   185a0:	bf18      	it	ne
   185a2:	4240      	negne	r0, r0
   185a4:	4770      	bx	lr
   185a6:	f04f 0000 	mov.w	r0, #0
   185aa:	4770      	bx	lr
   185ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
   185b0:	d101      	bne.n	185b6 <__aeabi_f2iz+0x3a>
   185b2:	0242      	lsls	r2, r0, #9
   185b4:	d105      	bne.n	185c2 <__aeabi_f2iz+0x46>
   185b6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   185ba:	bf08      	it	eq
   185bc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   185c0:	4770      	bx	lr
   185c2:	f04f 0000 	mov.w	r0, #0
   185c6:	4770      	bx	lr

000185c8 <memcpy>:
   185c8:	2a0f      	cmp	r2, #15
   185ca:	b4f0      	push	{r4, r5, r6, r7}
   185cc:	d945      	bls.n	1865a <memcpy+0x92>
   185ce:	ea40 0301 	orr.w	r3, r0, r1
   185d2:	079b      	lsls	r3, r3, #30
   185d4:	d145      	bne.n	18662 <memcpy+0x9a>
   185d6:	f1a2 0710 	sub.w	r7, r2, #16
   185da:	460c      	mov	r4, r1
   185dc:	4603      	mov	r3, r0
   185de:	093f      	lsrs	r7, r7, #4
   185e0:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   185e4:	3610      	adds	r6, #16
   185e6:	6825      	ldr	r5, [r4, #0]
   185e8:	3310      	adds	r3, #16
   185ea:	3410      	adds	r4, #16
   185ec:	f843 5c10 	str.w	r5, [r3, #-16]
   185f0:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   185f4:	f843 5c0c 	str.w	r5, [r3, #-12]
   185f8:	f854 5c08 	ldr.w	r5, [r4, #-8]
   185fc:	f843 5c08 	str.w	r5, [r3, #-8]
   18600:	f854 5c04 	ldr.w	r5, [r4, #-4]
   18604:	f843 5c04 	str.w	r5, [r3, #-4]
   18608:	42b3      	cmp	r3, r6
   1860a:	d1ec      	bne.n	185e6 <memcpy+0x1e>
   1860c:	1c7b      	adds	r3, r7, #1
   1860e:	f002 0c0f 	and.w	ip, r2, #15
   18612:	f1bc 0f03 	cmp.w	ip, #3
   18616:	ea4f 1303 	mov.w	r3, r3, lsl #4
   1861a:	4419      	add	r1, r3
   1861c:	4403      	add	r3, r0
   1861e:	d922      	bls.n	18666 <memcpy+0x9e>
   18620:	460e      	mov	r6, r1
   18622:	461d      	mov	r5, r3
   18624:	4664      	mov	r4, ip
   18626:	f856 7b04 	ldr.w	r7, [r6], #4
   1862a:	3c04      	subs	r4, #4
   1862c:	2c03      	cmp	r4, #3
   1862e:	f845 7b04 	str.w	r7, [r5], #4
   18632:	d8f8      	bhi.n	18626 <memcpy+0x5e>
   18634:	f1ac 0404 	sub.w	r4, ip, #4
   18638:	f002 0203 	and.w	r2, r2, #3
   1863c:	f024 0403 	bic.w	r4, r4, #3
   18640:	3404      	adds	r4, #4
   18642:	4423      	add	r3, r4
   18644:	4421      	add	r1, r4
   18646:	b132      	cbz	r2, 18656 <memcpy+0x8e>
   18648:	440a      	add	r2, r1
   1864a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1864e:	4291      	cmp	r1, r2
   18650:	f803 4b01 	strb.w	r4, [r3], #1
   18654:	d1f9      	bne.n	1864a <memcpy+0x82>
   18656:	bcf0      	pop	{r4, r5, r6, r7}
   18658:	4770      	bx	lr
   1865a:	4603      	mov	r3, r0
   1865c:	2a00      	cmp	r2, #0
   1865e:	d1f3      	bne.n	18648 <memcpy+0x80>
   18660:	e7f9      	b.n	18656 <memcpy+0x8e>
   18662:	4603      	mov	r3, r0
   18664:	e7f0      	b.n	18648 <memcpy+0x80>
   18666:	4662      	mov	r2, ip
   18668:	2a00      	cmp	r2, #0
   1866a:	d1ed      	bne.n	18648 <memcpy+0x80>
   1866c:	e7f3      	b.n	18656 <memcpy+0x8e>
   1866e:	bf00      	nop

00018670 <memset>:
   18670:	0783      	lsls	r3, r0, #30
   18672:	b4f0      	push	{r4, r5, r6, r7}
   18674:	d048      	beq.n	18708 <memset+0x98>
   18676:	1e54      	subs	r4, r2, #1
   18678:	2a00      	cmp	r2, #0
   1867a:	d043      	beq.n	18704 <memset+0x94>
   1867c:	b2cd      	uxtb	r5, r1
   1867e:	4603      	mov	r3, r0
   18680:	e002      	b.n	18688 <memset+0x18>
   18682:	2c00      	cmp	r4, #0
   18684:	d03e      	beq.n	18704 <memset+0x94>
   18686:	4614      	mov	r4, r2
   18688:	f803 5b01 	strb.w	r5, [r3], #1
   1868c:	f013 0f03 	tst.w	r3, #3
   18690:	f104 32ff 	add.w	r2, r4, #4294967295
   18694:	d1f5      	bne.n	18682 <memset+0x12>
   18696:	2c03      	cmp	r4, #3
   18698:	d92d      	bls.n	186f6 <memset+0x86>
   1869a:	b2cd      	uxtb	r5, r1
   1869c:	2c0f      	cmp	r4, #15
   1869e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   186a2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   186a6:	d918      	bls.n	186da <memset+0x6a>
   186a8:	f1a4 0710 	sub.w	r7, r4, #16
   186ac:	f103 0610 	add.w	r6, r3, #16
   186b0:	461a      	mov	r2, r3
   186b2:	093f      	lsrs	r7, r7, #4
   186b4:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   186b8:	6015      	str	r5, [r2, #0]
   186ba:	3210      	adds	r2, #16
   186bc:	f842 5c0c 	str.w	r5, [r2, #-12]
   186c0:	f842 5c08 	str.w	r5, [r2, #-8]
   186c4:	f842 5c04 	str.w	r5, [r2, #-4]
   186c8:	42b2      	cmp	r2, r6
   186ca:	d1f5      	bne.n	186b8 <memset+0x48>
   186cc:	f004 040f 	and.w	r4, r4, #15
   186d0:	3701      	adds	r7, #1
   186d2:	2c03      	cmp	r4, #3
   186d4:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   186d8:	d90d      	bls.n	186f6 <memset+0x86>
   186da:	461e      	mov	r6, r3
   186dc:	4622      	mov	r2, r4
   186de:	3a04      	subs	r2, #4
   186e0:	f846 5b04 	str.w	r5, [r6], #4
   186e4:	2a03      	cmp	r2, #3
   186e6:	d8fa      	bhi.n	186de <memset+0x6e>
   186e8:	1f22      	subs	r2, r4, #4
   186ea:	f004 0403 	and.w	r4, r4, #3
   186ee:	f022 0203 	bic.w	r2, r2, #3
   186f2:	3204      	adds	r2, #4
   186f4:	4413      	add	r3, r2
   186f6:	b12c      	cbz	r4, 18704 <memset+0x94>
   186f8:	b2c9      	uxtb	r1, r1
   186fa:	441c      	add	r4, r3
   186fc:	f803 1b01 	strb.w	r1, [r3], #1
   18700:	42a3      	cmp	r3, r4
   18702:	d1fb      	bne.n	186fc <memset+0x8c>
   18704:	bcf0      	pop	{r4, r5, r6, r7}
   18706:	4770      	bx	lr
   18708:	4614      	mov	r4, r2
   1870a:	4603      	mov	r3, r0
   1870c:	e7c3      	b.n	18696 <memset+0x26>
   1870e:	bf00      	nop

00018710 <strncpy>:
   18710:	ea40 0301 	orr.w	r3, r0, r1
   18714:	079b      	lsls	r3, r3, #30
   18716:	b470      	push	{r4, r5, r6}
   18718:	d12b      	bne.n	18772 <strncpy+0x62>
   1871a:	2a03      	cmp	r2, #3
   1871c:	bf84      	itt	hi
   1871e:	460b      	movhi	r3, r1
   18720:	4605      	movhi	r5, r0
   18722:	d926      	bls.n	18772 <strncpy+0x62>
   18724:	4619      	mov	r1, r3
   18726:	f853 4b04 	ldr.w	r4, [r3], #4
   1872a:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   1872e:	ea26 0604 	bic.w	r6, r6, r4
   18732:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   18736:	d105      	bne.n	18744 <strncpy+0x34>
   18738:	3a04      	subs	r2, #4
   1873a:	f845 4b04 	str.w	r4, [r5], #4
   1873e:	2a03      	cmp	r2, #3
   18740:	4619      	mov	r1, r3
   18742:	d8ef      	bhi.n	18724 <strncpy+0x14>
   18744:	b19a      	cbz	r2, 1876e <strncpy+0x5e>
   18746:	780c      	ldrb	r4, [r1, #0]
   18748:	3a01      	subs	r2, #1
   1874a:	1c6b      	adds	r3, r5, #1
   1874c:	702c      	strb	r4, [r5, #0]
   1874e:	b13c      	cbz	r4, 18760 <strncpy+0x50>
   18750:	b16a      	cbz	r2, 1876e <strncpy+0x5e>
   18752:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   18756:	3a01      	subs	r2, #1
   18758:	f803 4b01 	strb.w	r4, [r3], #1
   1875c:	2c00      	cmp	r4, #0
   1875e:	d1f7      	bne.n	18750 <strncpy+0x40>
   18760:	b12a      	cbz	r2, 1876e <strncpy+0x5e>
   18762:	441a      	add	r2, r3
   18764:	2100      	movs	r1, #0
   18766:	f803 1b01 	strb.w	r1, [r3], #1
   1876a:	4293      	cmp	r3, r2
   1876c:	d1fb      	bne.n	18766 <strncpy+0x56>
   1876e:	bc70      	pop	{r4, r5, r6}
   18770:	4770      	bx	lr
   18772:	4605      	mov	r5, r0
   18774:	e7e6      	b.n	18744 <strncpy+0x34>
   18776:	bf00      	nop

00018778 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   18778:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   1877a:	e003      	b.n	18784 <LoopCopyDataInit>

0001877c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   1877c:	4b0a      	ldr	r3, [pc, #40]	; (187a8 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   1877e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   18780:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   18782:	3104      	adds	r1, #4

00018784 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18784:	4809      	ldr	r0, [pc, #36]	; (187ac <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   18786:	4b0a      	ldr	r3, [pc, #40]	; (187b0 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   18788:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   1878a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   1878c:	d3f6      	bcc.n	1877c <CopyDataInit>
	ldr	r2, =_sbss
   1878e:	4a09      	ldr	r2, [pc, #36]	; (187b4 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   18790:	e002      	b.n	18798 <LoopFillZerobss>

00018792 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   18792:	2300      	movs	r3, #0
	str	r3, [r2], #4
   18794:	f842 3b04 	str.w	r3, [r2], #4

00018798 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18798:	4b07      	ldr	r3, [pc, #28]	; (187b8 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   1879a:	429a      	cmp	r2, r3
	bcc	FillZerobss
   1879c:	d3f9      	bcc.n	18792 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   1879e:	f7e7 fdcd 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   187a2:	f7fe fde7 	bl	17374 <main>
	bx	lr    
   187a6:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   187a8:	00018918 	.word	0x00018918
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   187ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   187b0:	20000488 	.word	0x20000488
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   187b4:	20000488 	.word	0x20000488
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   187b8:	2000b780 	.word	0x2000b780

000187bc <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   187bc:	e7fe      	b.n	187bc <ADC1_2_IRQHandler>
   187be:	0000      	movs	r0, r0
   187c0:	6c6c616d 	.word	0x6c6c616d
   187c4:	6620636f 	.word	0x6620636f
   187c8:	6520726f 	.word	0x6520726f
   187cc:	746e6576 	.word	0x746e6576
   187d0:	61747320 	.word	0x61747320
   187d4:	66206b63 	.word	0x66206b63
   187d8:	656c6961 	.word	0x656c6961
   187dc:	000d0a64 	.word	0x000d0a64
   187e0:	72656874 	.word	0x72656874
   187e4:	72612065 	.word	0x72612065
   187e8:	65732065 	.word	0x65732065
   187ec:	726f736e 	.word	0x726f736e
   187f0:	73696d20 	.word	0x73696d20
   187f4:	676e6973 	.word	0x676e6973
   187f8:	61656420 	.word	0x61656420
   187fc:	6e696c64 	.word	0x6e696c64
   18800:	000d0a65 	.word	0x000d0a65
   18804:	72656874 	.word	0x72656874
   18808:	72612065 	.word	0x72612065
   1880c:	65732065 	.word	0x65732065
   18810:	6e617672 	.word	0x6e617672
   18814:	6d207374 	.word	0x6d207374
   18818:	69737369 	.word	0x69737369
   1881c:	6420676e 	.word	0x6420676e
   18820:	6c646165 	.word	0x6c646165
   18824:	0a656e69 	.word	0x0a656e69
   18828:	0000000d 	.word	0x0000000d
   1882c:	6f727245 	.word	0x6f727245
   18830:	54203a72 	.word	0x54203a72
   18834:	20736968 	.word	0x20736968
   18838:	6e657665 	.word	0x6e657665
   1883c:	61682074 	.word	0x61682074
   18840:	72612073 	.word	0x72612073
   18844:	65766972 	.word	0x65766972
   18848:	0a212164 	.word	0x0a212164
   1884c:	0000000d 	.word	0x0000000d
   18850:	454c4449 	.word	0x454c4449
   18854:	00000000 	.word	0x00000000

00018858 <ulKernelPriority>:
   18858:	0000007f                                ....

0001885c <heapSTRUCT_SIZE>:
   1885c:	00010010                                         ..

0001885e <version>:
   1885e:	3d5a0001                                         ..

00018860 <utm_east0>:
   18860:	00093d5a                                Z=..

00018864 <utm_north0>:
   18864:	005875e6                                .uX.

00018868 <climb_pgain>:
   18868:	bcf5c28f                                ....

0001886c <climb_igain>:
   1886c:	3dcccccd                                ...=

00018870 <level_gaz>:
   18870:	3e9eb852                                R..>

00018874 <nav_east0>:
   18874:	00093d5a                                Z=..

00018878 <nav_north0>:
   18878:	005875e6                                .uX.

0001887c <nb_waypoint>:
   1887c:	00000007 33323130 37363534 42413938     ....0123456789AB
   1888c:	46454443                                CDEF

00018890 <failsafe>:
	...
   188a4:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   188b4:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   188c4:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   188d4:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   188e4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   188f4:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   18904:	00000074 736e6573 0000726f 76726573     t...sensor..serv
   18914:	00746e61                                ant.
