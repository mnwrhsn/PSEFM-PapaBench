
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 05 20 75 8a 01 00 b9 8a 01 00 b9 8a 01 00     .P. u...........
      10:	b9 8a 01 00 b9 8a 01 00 b9 8a 01 00 00 00 00 00     ................
	...
      2c:	41 5c 00 00 b9 8a 01 00 00 00 00 00 4d 5d 00 00     A\..........M]..
      3c:	89 5d 00 00 b9 8a 01 00 b9 8a 01 00 b9 8a 01 00     .]..............
      4c:	b9 8a 01 00 b9 8a 01 00 b9 8a 01 00 b9 8a 01 00     ................
      5c:	b9 8a 01 00 b9 8a 01 00 b9 8a 01 00 b9 8a 01 00     ................
      6c:	b9 8a 01 00 b9 8a 01 00 b9 8a 01 00 b9 8a 01 00     ................
      7c:	b9 8a 01 00 b9 8a 01 00 b9 8a 01 00 b9 8a 01 00     ................
      8c:	b9 8a 01 00 b9 8a 01 00 b9 8a 01 00 b9 8a 01 00     ................
      9c:	b9 8a 01 00 b9 8a 01 00 b9 8a 01 00 b9 8a 01 00     ................
      ac:	b9 8a 01 00 b9 8a 01 00 b9 8a 01 00 b9 8a 01 00     ................
      bc:	b9 8a 01 00 b9 8a 01 00 b9 8a 01 00 b9 8a 01 00     ................
      cc:	b9 8a 01 00 b9 8a 01 00 b9 8a 01 00 b9 8a 01 00     ................
      dc:	b9 8a 01 00 b9 8a 01 00 b9 8a 01 00 b9 8a 01 00     ................
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00018ba0 	.word	0x00018ba0
     6d0:	20000000 	.word	0x20000000
     6d4:	200005d8 	.word	0x200005d8
     6d8:	200005d8 	.word	0x200005d8
     6dc:	2004cdd8 	.word	0x2004cdd8

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fcef 	bl	5ddc <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 6344 	movw	r3, #1604	; 0x644
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 6344 	movw	r3, #1604	; 0x644
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fe94 	bl	4178 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fe8f 	bl	4178 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0205 	rsb	r2, r3, #5
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 6348 	movw	r3, #1608	; 0x648
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 6348 	movw	r3, #1608	; 0x648
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fe6f 	bl	4190 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 634c 	movw	r3, #1612	; 0x64c
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 6344 	movw	r3, #1604	; 0x644
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 feae 	bl	4250 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 6344 	movw	r3, #1604	; 0x644
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 634c 	movw	r3, #1612	; 0x64c
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 632c 	movw	r3, #1580	; 0x62c
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 6344 	movw	r3, #1604	; 0x644
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fe58 	bl	41e0 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 6328 	movw	r3, #1576	; 0x628
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 6344 	movw	r3, #1604	; 0x644
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fe48 	bl	41e0 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 6344 	movw	r3, #1604	; 0x644
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fe3b 	bl	41e0 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 6330 	movw	r3, #1584	; 0x630
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fe5c 	bl	4250 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fe53 	bl	4250 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 6348 	movw	r3, #1608	; 0x648
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 6348 	movw	r3, #1608	; 0x648
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fdd2 	bl	4190 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 6330 	movw	r3, #1584	; 0x630
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fea1 	bl	534c <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 6350 	movw	r3, #1616	; 0x650
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 6354 	movw	r3, #1620	; 0x654
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 634c 	movw	r3, #1612	; 0x64c
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 634c 	movw	r3, #1612	; 0x64c
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 6354 	movw	r3, #1620	; 0x654
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 6354 	movw	r3, #1620	; 0x654
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 634c 	movw	r3, #1612	; 0x64c
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 6328 	movw	r3, #1576	; 0x628
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 632c 	movw	r3, #1580	; 0x62c
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 6328 	movw	r3, #1576	; 0x628
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 632c 	movw	r3, #1580	; 0x62c
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 6328 	movw	r3, #1576	; 0x628
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 634c 	movw	r3, #1612	; 0x64c
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fdc6 	bl	4250 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fdbd 	bl	4250 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 6348 	movw	r3, #1608	; 0x648
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 6348 	movw	r3, #1608	; 0x648
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fd38 	bl	4190 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 6328 	movw	r3, #1576	; 0x628
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 6354 	movw	r3, #1620	; 0x654
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 634c 	movw	r3, #1612	; 0x64c
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 6350 	movw	r3, #1616	; 0x650
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 6348 	movw	r3, #1608	; 0x648
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 6348 	movw	r3, #1608	; 0x648
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 6348 	movw	r3, #1608	; 0x648
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 6348 	movw	r3, #1608	; 0x648
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 6348 	movw	r3, #1608	; 0x648
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 6344 	movw	r3, #1604	; 0x644
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 6344 	movw	r3, #1604	; 0x644
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 6344 	movw	r3, #1604	; 0x644
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 6344 	movw	r3, #1604	; 0x644
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 fc6f 	bl	4138 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 6000 	movw	r0, #1536	; 0x600
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 fc63 	bl	4138 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 6014 	movw	r0, #1556	; 0x614
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 fc5d 	bl	4138 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 6030 	movw	r0, #1584	; 0x630
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 fc57 	bl	4138 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 6328 	movw	r3, #1576	; 0x628
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 6200 	movw	r2, #1536	; 0x600
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 632c 	movw	r3, #1580	; 0x62c
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 6214 	movw	r2, #1556	; 0x614
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 fcc1 	bl	4250 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 6030 	movw	r0, #1584	; 0x630
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 fc58 	bl	4190 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 6344 	movw	r3, #1604	; 0x644
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <xIsERLNull>:
static void vEventSetxTag(portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent );

// if xEventReadyList is not null,
// then return the type of destination servant of the first event
portBASE_TYPE xIsERLNull()
{
    2908:	b580      	push	{r7, lr}
    290a:	b082      	sub	sp, #8
    290c:	af00      	add	r7, sp, #0
    portBASE_TYPE pxDestination;
    struct tag * xTag;
    if(listCURRENT_LIST_LENGTH(&xEventReadyList) > 0)
    290e:	f640 03f8 	movw	r3, #2296	; 0x8f8
    2912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2916:	681b      	ldr	r3, [r3, #0]
    2918:	2b00      	cmp	r3, #0
    291a:	d029      	beq.n	2970 <xIsERLNull+0x68>
    {
        pxDestination = xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); 
    291c:	f640 03f8 	movw	r3, #2296	; 0x8f8
    2920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2924:	68db      	ldr	r3, [r3, #12]
    2926:	68db      	ldr	r3, [r3, #12]
    2928:	4618      	mov	r0, r3
    292a:	f000 f833 	bl	2994 <xEventGetpxDestination>
    292e:	6078      	str	r0, [r7, #4]
        xTag = xEventGetxTag(xEventReadyList.xListEnd.pxNext->pvOwner);
    2930:	f640 03f8 	movw	r3, #2296	; 0x8f8
    2934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2938:	68db      	ldr	r3, [r3, #12]
    293a:	68db      	ldr	r3, [r3, #12]
    293c:	4618      	mov	r0, r3
    293e:	f000 f835 	bl	29ac <xEventGetxTag>
    2942:	6038      	str	r0, [r7, #0]
        if( xTaskGetTickCount() >= xTag->xTimestamp )
    2944:	f002 fd02 	bl	534c <xTaskGetTickCount>
    2948:	4602      	mov	r2, r0
    294a:	683b      	ldr	r3, [r7, #0]
    294c:	685b      	ldr	r3, [r3, #4]
    294e:	429a      	cmp	r2, r3
    2950:	d30c      	bcc.n	296c <xIsERLNull+0x64>
            return xContexts[pxDestination].xType; 
    2952:	f640 120c 	movw	r2, #2316	; 0x90c
    2956:	f2c2 0200 	movt	r2, #8192	; 0x2000
    295a:	6879      	ldr	r1, [r7, #4]
    295c:	460b      	mov	r3, r1
    295e:	00db      	lsls	r3, r3, #3
    2960:	1a5b      	subs	r3, r3, r1
    2962:	00db      	lsls	r3, r3, #3
    2964:	4413      	add	r3, r2
    2966:	3304      	adds	r3, #4
    2968:	681b      	ldr	r3, [r3, #0]
    296a:	e003      	b.n	2974 <xIsERLNull+0x6c>
        else
            return 0;
    296c:	2300      	movs	r3, #0
    296e:	e001      	b.n	2974 <xIsERLNull+0x6c>
    }
    return -1;
    2970:	f04f 33ff 	mov.w	r3, #4294967295
}
    2974:	4618      	mov	r0, r3
    2976:	3708      	adds	r7, #8
    2978:	46bd      	mov	sp, r7
    297a:	bd80      	pop	{r7, pc}

0000297c <xEventGetpxSource>:

portBASE_TYPE xEventGetpxSource( xEventHandle pxEvent )
{
    297c:	b480      	push	{r7}
    297e:	b083      	sub	sp, #12
    2980:	af00      	add	r7, sp, #0
    2982:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	681b      	ldr	r3, [r3, #0]
}
    2988:	4618      	mov	r0, r3
    298a:	370c      	adds	r7, #12
    298c:	46bd      	mov	sp, r7
    298e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2992:	4770      	bx	lr

00002994 <xEventGetpxDestination>:

portBASE_TYPE xEventGetpxDestination( xEventHandle pxEvent)
{
    2994:	b480      	push	{r7}
    2996:	b083      	sub	sp, #12
    2998:	af00      	add	r7, sp, #0
    299a:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    299c:	687b      	ldr	r3, [r7, #4]
    299e:	685b      	ldr	r3, [r3, #4]
}
    29a0:	4618      	mov	r0, r3
    29a2:	370c      	adds	r7, #12
    29a4:	46bd      	mov	sp, r7
    29a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29aa:	4770      	bx	lr

000029ac <xEventGetxTag>:

struct tag * xEventGetxTag( xEventHandle pxEvent)
{
    29ac:	b480      	push	{r7}
    29ae:	b083      	sub	sp, #12
    29b0:	af00      	add	r7, sp, #0
    29b2:	6078      	str	r0, [r7, #4]
    return (struct tag *)&((eveECB *) pxEvent)->xTag;
    29b4:	687b      	ldr	r3, [r7, #4]
    29b6:	3308      	adds	r3, #8
}
    29b8:	4618      	mov	r0, r3
    29ba:	370c      	adds	r7, #12
    29bc:	46bd      	mov	sp, r7
    29be:	f85d 7b04 	ldr.w	r7, [sp], #4
    29c2:	4770      	bx	lr

000029c4 <xEventGetxData>:

struct eventData * xEventGetxData( xEventHandle pxEvent)
{
    29c4:	b480      	push	{r7}
    29c6:	b083      	sub	sp, #12
    29c8:	af00      	add	r7, sp, #0
    29ca:	6078      	str	r0, [r7, #4]
    return (struct eventData *)&((eveECB *) pxEvent)->xData;
    29cc:	687b      	ldr	r3, [r7, #4]
    29ce:	3318      	adds	r3, #24
}
    29d0:	4618      	mov	r0, r3
    29d2:	370c      	adds	r7, #12
    29d4:	46bd      	mov	sp, r7
    29d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29da:	4770      	bx	lr

000029dc <getGCD>:

static portBASE_TYPE getGCD(portTickType t1, portTickType t2)
{
    29dc:	b580      	push	{r7, lr}
    29de:	b082      	sub	sp, #8
    29e0:	af00      	add	r7, sp, #0
    29e2:	6078      	str	r0, [r7, #4]
    29e4:	6039      	str	r1, [r7, #0]
    return t1%t2==0 ? t2 : getGCD(t2, t1 % t2);
    29e6:	687b      	ldr	r3, [r7, #4]
    29e8:	683a      	ldr	r2, [r7, #0]
    29ea:	fbb3 f2f2 	udiv	r2, r3, r2
    29ee:	6839      	ldr	r1, [r7, #0]
    29f0:	fb01 f202 	mul.w	r2, r1, r2
    29f4:	1a9b      	subs	r3, r3, r2
    29f6:	2b00      	cmp	r3, #0
    29f8:	d00d      	beq.n	2a16 <getGCD+0x3a>
    29fa:	687b      	ldr	r3, [r7, #4]
    29fc:	683a      	ldr	r2, [r7, #0]
    29fe:	fbb3 f2f2 	udiv	r2, r3, r2
    2a02:	6839      	ldr	r1, [r7, #0]
    2a04:	fb01 f202 	mul.w	r2, r1, r2
    2a08:	1a9b      	subs	r3, r3, r2
    2a0a:	6838      	ldr	r0, [r7, #0]
    2a0c:	4619      	mov	r1, r3
    2a0e:	f7ff ffe5 	bl	29dc <getGCD>
    2a12:	4603      	mov	r3, r0
    2a14:	e000      	b.n	2a18 <getGCD+0x3c>
    2a16:	683b      	ldr	r3, [r7, #0]
}
    2a18:	4618      	mov	r0, r3
    2a1a:	3708      	adds	r7, #8
    2a1c:	46bd      	mov	sp, r7
    2a1e:	bd80      	pop	{r7, pc}

00002a20 <GCDOfTaskPeriod>:

static portTickType GCDOfTaskPeriod()
{
    2a20:	b580      	push	{r7, lr}
    2a22:	b082      	sub	sp, #8
    2a24:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];
    2a26:	f240 0328 	movw	r3, #40	; 0x28
    2a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a2e:	681b      	ldr	r3, [r3, #0]
    2a30:	603b      	str	r3, [r7, #0]

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a32:	2301      	movs	r3, #1
    2a34:	607b      	str	r3, [r7, #4]
    2a36:	e00f      	b.n	2a58 <GCDOfTaskPeriod+0x38>
    {
        result = getGCD(result , xPeriodOfTask[i]); 
    2a38:	f240 0328 	movw	r3, #40	; 0x28
    2a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a40:	687a      	ldr	r2, [r7, #4]
    2a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2a46:	6838      	ldr	r0, [r7, #0]
    2a48:	4619      	mov	r1, r3
    2a4a:	f7ff ffc7 	bl	29dc <getGCD>
    2a4e:	4603      	mov	r3, r0
    2a50:	603b      	str	r3, [r7, #0]
static portTickType GCDOfTaskPeriod()
{
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a52:	687b      	ldr	r3, [r7, #4]
    2a54:	3301      	adds	r3, #1
    2a56:	607b      	str	r3, [r7, #4]
    2a58:	687b      	ldr	r3, [r7, #4]
    2a5a:	2b0c      	cmp	r3, #12
    2a5c:	ddec      	ble.n	2a38 <GCDOfTaskPeriod+0x18>
    {
        result = getGCD(result , xPeriodOfTask[i]); 
    }
    return result;
    2a5e:	683b      	ldr	r3, [r7, #0]
}
    2a60:	4618      	mov	r0, r3
    2a62:	3708      	adds	r7, #8
    2a64:	46bd      	mov	sp, r7
    2a66:	bd80      	pop	{r7, pc}

00002a68 <vInitialiseEventLists>:

void vInitialiseEventLists() 
{
    2a68:	b590      	push	{r4, r7, lr}
    2a6a:	b091      	sub	sp, #68	; 0x44
    2a6c:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU, i;
    eveECB * pxIdleEvents[NUMBEROFEVENTS];
    eveECB * pxEndFlagEvent;

    // init the GCD of Task period;
    GCDPeriod = GCDOfTaskPeriod();
    2a6e:	f7ff ffd7 	bl	2a20 <GCDOfTaskPeriod>
    2a72:	4602      	mov	r2, r0
    2a74:	f240 6358 	movw	r3, #1624	; 0x658
    2a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a7c:	601a      	str	r2, [r3, #0]

    vListInitialise( ( xList * ) &xEventIdleList);
    2a7e:	f640 0094 	movw	r0, #2196	; 0x894
    2a82:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a86:	f001 fb57 	bl	4138 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutablePool );
    2a8a:	f640 00a8 	movw	r0, #2216	; 0x8a8
    2a8e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a92:	f001 fb51 	bl	4138 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    2a96:	f640 00bc 	movw	r0, #2236	; 0x8bc
    2a9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a9e:	f001 fb4b 	bl	4138 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutablePool );
    2aa2:	f640 00d0 	movw	r0, #2256	; 0x8d0
    2aa6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2aaa:	f001 fb45 	bl	4138 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutableList );
    2aae:	f640 00e4 	movw	r0, #2276	; 0x8e4
    2ab2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ab6:	f001 fb3f 	bl	4138 <vListInitialise>
    vListInitialise( (xList * ) & xEventReadyList);
    2aba:	f640 00f8 	movw	r0, #2296	; 0x8f8
    2abe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ac2:	f001 fb39 	bl	4138 <vListInitialise>

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2ac6:	2300      	movs	r3, #0
    2ac8:	63bb      	str	r3, [r7, #56]	; 0x38
    2aca:	e02b      	b.n	2b24 <vInitialiseEventLists+0xbc>
    {
        pxIdleEvents[i] = (eveECB *) pvPortMalloc(sizeof(eveECB)); 
    2acc:	6bbc      	ldr	r4, [r7, #56]	; 0x38
    2ace:	2034      	movs	r0, #52	; 0x34
    2ad0:	f003 f984 	bl	5ddc <pvPortMalloc>
    2ad4:	4602      	mov	r2, r0
    2ad6:	00a3      	lsls	r3, r4, #2
    2ad8:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2adc:	440b      	add	r3, r1
    2ade:	f843 2c3c 	str.w	r2, [r3, #-60]
        listSET_LIST_ITEM_OWNER( (xListItem *) & (pxIdleEvents[i]->xEventListItem), pxIdleEvents[i]);
    2ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2ae4:	009b      	lsls	r3, r3, #2
    2ae6:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2aea:	4413      	add	r3, r2
    2aec:	f853 2c3c 	ldr.w	r2, [r3, #-60]
    2af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2af2:	009b      	lsls	r3, r3, #2
    2af4:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2af8:	440b      	add	r3, r1
    2afa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
    2afe:	62d3      	str	r3, [r2, #44]	; 0x2c
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    2b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b02:	009b      	lsls	r3, r3, #2
    2b04:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2b08:	4413      	add	r3, r2
    2b0a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
    2b0e:	3320      	adds	r3, #32
    2b10:	f640 0094 	movw	r0, #2196	; 0x894
    2b14:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b18:	4619      	mov	r1, r3
    2b1a:	f001 fb39 	bl	4190 <vListInsertEnd>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    vListInitialise( ( xList * ) &xEventExecutablePool );
    vListInitialise( ( xList * ) &xEventExecutableList );
    vListInitialise( (xList * ) & xEventReadyList);

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b20:	3301      	adds	r3, #1
    2b22:	63bb      	str	r3, [r7, #56]	; 0x38
    2b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b26:	2b0c      	cmp	r3, #12
    2b28:	ddd0      	ble.n	2acc <vInitialiseEventLists+0x64>
        listSET_LIST_ITEM_OWNER( (xListItem *) & (pxIdleEvents[i]->xEventListItem), pxIdleEvents[i]);
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    }

    // Creating an End FLag Event and insert into the end of xEventList, which needs sorted events
}
    2b2a:	3744      	adds	r7, #68	; 0x44
    2b2c:	46bd      	mov	sp, r7
    2b2e:	bd90      	pop	{r4, r7, pc}

00002b30 <xIsExecutableEventArrive>:

portBASE_TYPE xIsExecutableEventArrive()
{
    2b30:	b580      	push	{r7, lr}
    2b32:	b086      	sub	sp, #24
    2b34:	af00      	add	r7, sp, #0
    volatile xListItem * pxIterator;
    portTickType xCurrentTime;
    portBASE_TYPE xLen, i;
    struct tag * xTag;
    
    if((xLen = listCURRENT_LIST_LENGTH(&xEventNonExecutablePool)) > 0)
    2b36:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b3e:	681b      	ldr	r3, [r3, #0]
    2b40:	60fb      	str	r3, [r7, #12]
    2b42:	68fb      	ldr	r3, [r7, #12]
    2b44:	2b00      	cmp	r3, #0
    2b46:	dd22      	ble.n	2b8e <xIsExecutableEventArrive+0x5e>
    {

        pxIterator = (xListItem *)(xEventNonExecutablePool.xListEnd.pxNext);
    2b48:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b50:	68db      	ldr	r3, [r3, #12]
    2b52:	617b      	str	r3, [r7, #20]
        xCurrentTime = xTaskGetTickCount();
    2b54:	f002 fbfa 	bl	534c <xTaskGetTickCount>
    2b58:	60b8      	str	r0, [r7, #8]
        for( i = 0; i < xLen ; i++ ) 
    2b5a:	2300      	movs	r3, #0
    2b5c:	613b      	str	r3, [r7, #16]
    2b5e:	e012      	b.n	2b86 <xIsExecutableEventArrive+0x56>
        {
            xTag = xEventGetxTag( pxIterator->pvOwner );
    2b60:	697b      	ldr	r3, [r7, #20]
    2b62:	68db      	ldr	r3, [r3, #12]
    2b64:	4618      	mov	r0, r3
    2b66:	f7ff ff21 	bl	29ac <xEventGetxTag>
    2b6a:	6078      	str	r0, [r7, #4]
            if(xTag->xTimestamp <= xCurrentTime) return pdTRUE;
    2b6c:	687b      	ldr	r3, [r7, #4]
    2b6e:	685a      	ldr	r2, [r3, #4]
    2b70:	68bb      	ldr	r3, [r7, #8]
    2b72:	429a      	cmp	r2, r3
    2b74:	d801      	bhi.n	2b7a <xIsExecutableEventArrive+0x4a>
    2b76:	2301      	movs	r3, #1
    2b78:	e00a      	b.n	2b90 <xIsExecutableEventArrive+0x60>
            pxIterator = pxIterator->pxNext;
    2b7a:	697b      	ldr	r3, [r7, #20]
    2b7c:	685b      	ldr	r3, [r3, #4]
    2b7e:	617b      	str	r3, [r7, #20]
    if((xLen = listCURRENT_LIST_LENGTH(&xEventNonExecutablePool)) > 0)
    {

        pxIterator = (xListItem *)(xEventNonExecutablePool.xListEnd.pxNext);
        xCurrentTime = xTaskGetTickCount();
        for( i = 0; i < xLen ; i++ ) 
    2b80:	693b      	ldr	r3, [r7, #16]
    2b82:	3301      	adds	r3, #1
    2b84:	613b      	str	r3, [r7, #16]
    2b86:	693a      	ldr	r2, [r7, #16]
    2b88:	68fb      	ldr	r3, [r7, #12]
    2b8a:	429a      	cmp	r2, r3
    2b8c:	dbe8      	blt.n	2b60 <xIsExecutableEventArrive+0x30>
            xTag = xEventGetxTag( pxIterator->pvOwner );
            if(xTag->xTimestamp <= xCurrentTime) return pdTRUE;
            pxIterator = pxIterator->pxNext;
        }
    }
    return pdFALSE;
    2b8e:	2300      	movs	r3, #0
}
    2b90:	4618      	mov	r0, r3
    2b92:	3718      	adds	r7, #24
    2b94:	46bd      	mov	sp, r7
    2b96:	bd80      	pop	{r7, pc}

00002b98 <xCompareFunction>:

/* executable event comparison function is used in xEventExecutableList. 
 * The event with earlist deadline will be scheduled to execute first */
static portBASE_TYPE xCompareFunction( const struct tag * t1, const struct tag * t2 )
{
    2b98:	b480      	push	{r7}
    2b9a:	b083      	sub	sp, #12
    2b9c:	af00      	add	r7, sp, #0
    2b9e:	6078      	str	r0, [r7, #4]
    2ba0:	6039      	str	r1, [r7, #0]
    if( t1->xDeadline < t2->xDeadline)
    2ba2:	687b      	ldr	r3, [r7, #4]
    2ba4:	681a      	ldr	r2, [r3, #0]
    2ba6:	683b      	ldr	r3, [r7, #0]
    2ba8:	681b      	ldr	r3, [r3, #0]
    2baa:	429a      	cmp	r2, r3
    2bac:	d201      	bcs.n	2bb2 <xCompareFunction+0x1a>
    {
        return pdTRUE;
    2bae:	2301      	movs	r3, #1
    2bb0:	e02a      	b.n	2c08 <xCompareFunction+0x70>
    }
    else if( t1->xDeadline == t2->xDeadline)
    2bb2:	687b      	ldr	r3, [r7, #4]
    2bb4:	681a      	ldr	r2, [r3, #0]
    2bb6:	683b      	ldr	r3, [r7, #0]
    2bb8:	681b      	ldr	r3, [r3, #0]
    2bba:	429a      	cmp	r2, r3
    2bbc:	d123      	bne.n	2c06 <xCompareFunction+0x6e>
    {
        if( t1->xTimestamp < t2->xTimestamp)
    2bbe:	687b      	ldr	r3, [r7, #4]
    2bc0:	685a      	ldr	r2, [r3, #4]
    2bc2:	683b      	ldr	r3, [r7, #0]
    2bc4:	685b      	ldr	r3, [r3, #4]
    2bc6:	429a      	cmp	r2, r3
    2bc8:	d201      	bcs.n	2bce <xCompareFunction+0x36>
        {
            return pdTRUE;
    2bca:	2301      	movs	r3, #1
    2bcc:	e01c      	b.n	2c08 <xCompareFunction+0x70>
        }
        else if( t1->xTimestamp == t2->xTimestamp )
    2bce:	687b      	ldr	r3, [r7, #4]
    2bd0:	685a      	ldr	r2, [r3, #4]
    2bd2:	683b      	ldr	r3, [r7, #0]
    2bd4:	685b      	ldr	r3, [r3, #4]
    2bd6:	429a      	cmp	r2, r3
    2bd8:	d115      	bne.n	2c06 <xCompareFunction+0x6e>
        {
            if( t1->xMicroStep < t2->xMicroStep)
    2bda:	687b      	ldr	r3, [r7, #4]
    2bdc:	68da      	ldr	r2, [r3, #12]
    2bde:	683b      	ldr	r3, [r7, #0]
    2be0:	68db      	ldr	r3, [r3, #12]
    2be2:	429a      	cmp	r2, r3
    2be4:	da01      	bge.n	2bea <xCompareFunction+0x52>
            {
                return pdTRUE;
    2be6:	2301      	movs	r3, #1
    2be8:	e00e      	b.n	2c08 <xCompareFunction+0x70>
            }
            else if(t1->xMicroStep == t2->xMicroStep && t1->xLevel < t2->xLevel )
    2bea:	687b      	ldr	r3, [r7, #4]
    2bec:	68da      	ldr	r2, [r3, #12]
    2bee:	683b      	ldr	r3, [r7, #0]
    2bf0:	68db      	ldr	r3, [r3, #12]
    2bf2:	429a      	cmp	r2, r3
    2bf4:	d107      	bne.n	2c06 <xCompareFunction+0x6e>
    2bf6:	687b      	ldr	r3, [r7, #4]
    2bf8:	689a      	ldr	r2, [r3, #8]
    2bfa:	683b      	ldr	r3, [r7, #0]
    2bfc:	689b      	ldr	r3, [r3, #8]
    2bfe:	429a      	cmp	r2, r3
    2c00:	da01      	bge.n	2c06 <xCompareFunction+0x6e>
            {
                return pdTRUE;
    2c02:	2301      	movs	r3, #1
    2c04:	e000      	b.n	2c08 <xCompareFunction+0x70>
            }
        }
    }

    return pdFALSE;
    2c06:	2300      	movs	r3, #0
}
    2c08:	4618      	mov	r0, r3
    2c0a:	370c      	adds	r7, #12
    2c0c:	46bd      	mov	sp, r7
    2c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c12:	4770      	bx	lr

00002c14 <vEventSetxTag>:

static void vEventSetxTag( portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent )
{
    2c14:	b480      	push	{r7}
    2c16:	b087      	sub	sp, #28
    2c18:	af00      	add	r7, sp, #0
    2c1a:	60f8      	str	r0, [r7, #12]
    2c1c:	60b9      	str	r1, [r7, #8]
    2c1e:	607a      	str	r2, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2c20:	687b      	ldr	r3, [r7, #4]
    2c22:	617b      	str	r3, [r7, #20]

    /* EDF scheduling algorithm */
    pxEvent->xTag.xDeadline = xDeadline ;
    2c24:	697b      	ldr	r3, [r7, #20]
    2c26:	68fa      	ldr	r2, [r7, #12]
    2c28:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp;
    2c2a:	697b      	ldr	r3, [r7, #20]
    2c2c:	68ba      	ldr	r2, [r7, #8]
    2c2e:	60da      	str	r2, [r3, #12]

    /*the microstep is not used now*/
    pxEvent->xTag.xMicroStep = 0;
    2c30:	697b      	ldr	r3, [r7, #20]
    2c32:	2200      	movs	r2, #0
    2c34:	615a      	str	r2, [r3, #20]
}
    2c36:	371c      	adds	r7, #28
    2c38:	46bd      	mov	sp, r7
    2c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c3e:	4770      	bx	lr

00002c40 <prvEventListGenericInsert>:

/* insert event to xEventNonExecutableList in terms of comparison function 1 */
static void prvEventListGenericInsert( xListItem *pxNewListItem )
{
    2c40:	b580      	push	{r7, lr}
    2c42:	b088      	sub	sp, #32
    2c44:	af00      	add	r7, sp, #0
    2c46:	6078      	str	r0, [r7, #4]
    struct tag * xTagOfInsertion;
    xList * pxList = &xEventExecutableList; 
    2c48:	f640 03e4 	movw	r3, #2276	; 0x8e4
    2c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c50:	617b      	str	r3, [r7, #20]
    volatile xListItem *pxIterator;
    portBASE_TYPE xLen, i;

    xTagOfInsertion = xEventGetxTag(pxNewListItem->pvOwner);
    2c52:	687b      	ldr	r3, [r7, #4]
    2c54:	68db      	ldr	r3, [r3, #12]
    2c56:	4618      	mov	r0, r3
    2c58:	f7ff fea8 	bl	29ac <xEventGetxTag>
    2c5c:	6138      	str	r0, [r7, #16]

    taskENTER_CRITICAL();
    2c5e:	f003 f843 	bl	5ce8 <vPortEnterCritical>
    // inserting start from the ending of list
    xLen = listCURRENT_LIST_LENGTH(&xEventExecutableList);
    2c62:	f640 03e4 	movw	r3, #2276	; 0x8e4
    2c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c6a:	681b      	ldr	r3, [r3, #0]
    2c6c:	60fb      	str	r3, [r7, #12]
    pxIterator = (xListItem *)&(pxList->xListEnd);
    2c6e:	697b      	ldr	r3, [r7, #20]
    2c70:	3308      	adds	r3, #8
    2c72:	61fb      	str	r3, [r7, #28]
    for( i = 0; i < xLen && xCompareFunction( xTagOfInsertion, xEventGetxTag( pxIterator->pxPrevious->pvOwner )); i ++)
    2c74:	2300      	movs	r3, #0
    2c76:	61bb      	str	r3, [r7, #24]
    2c78:	e005      	b.n	2c86 <prvEventListGenericInsert+0x46>
    { 
        pxIterator = pxIterator->pxPrevious;
    2c7a:	69fb      	ldr	r3, [r7, #28]
    2c7c:	689b      	ldr	r3, [r3, #8]
    2c7e:	61fb      	str	r3, [r7, #28]

    taskENTER_CRITICAL();
    // inserting start from the ending of list
    xLen = listCURRENT_LIST_LENGTH(&xEventExecutableList);
    pxIterator = (xListItem *)&(pxList->xListEnd);
    for( i = 0; i < xLen && xCompareFunction( xTagOfInsertion, xEventGetxTag( pxIterator->pxPrevious->pvOwner )); i ++)
    2c80:	69bb      	ldr	r3, [r7, #24]
    2c82:	3301      	adds	r3, #1
    2c84:	61bb      	str	r3, [r7, #24]
    2c86:	69ba      	ldr	r2, [r7, #24]
    2c88:	68fb      	ldr	r3, [r7, #12]
    2c8a:	429a      	cmp	r2, r3
    2c8c:	da0d      	bge.n	2caa <prvEventListGenericInsert+0x6a>
    2c8e:	69fb      	ldr	r3, [r7, #28]
    2c90:	689b      	ldr	r3, [r3, #8]
    2c92:	68db      	ldr	r3, [r3, #12]
    2c94:	4618      	mov	r0, r3
    2c96:	f7ff fe89 	bl	29ac <xEventGetxTag>
    2c9a:	4603      	mov	r3, r0
    2c9c:	6938      	ldr	r0, [r7, #16]
    2c9e:	4619      	mov	r1, r3
    2ca0:	f7ff ff7a 	bl	2b98 <xCompareFunction>
    2ca4:	4603      	mov	r3, r0
    2ca6:	2b00      	cmp	r3, #0
    2ca8:	d1e7      	bne.n	2c7a <prvEventListGenericInsert+0x3a>
    { 
        pxIterator = pxIterator->pxPrevious;
    } 
    //vPrintString("hello,world\n\r");

    taskEXIT_CRITICAL();
    2caa:	f003 f833 	bl	5d14 <vPortExitCritical>

    pxIterator = pxIterator->pxPrevious;
    2cae:	69fb      	ldr	r3, [r7, #28]
    2cb0:	689b      	ldr	r3, [r3, #8]
    2cb2:	61fb      	str	r3, [r7, #28]
    
    // insert the new event after a smaller one from the back of list
    pxNewListItem->pxNext = pxIterator->pxNext;
    2cb4:	69fb      	ldr	r3, [r7, #28]
    2cb6:	685a      	ldr	r2, [r3, #4]
    2cb8:	687b      	ldr	r3, [r7, #4]
    2cba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2cbc:	687b      	ldr	r3, [r7, #4]
    2cbe:	685b      	ldr	r3, [r3, #4]
    2cc0:	687a      	ldr	r2, [r7, #4]
    2cc2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2cc4:	687b      	ldr	r3, [r7, #4]
    2cc6:	69fa      	ldr	r2, [r7, #28]
    2cc8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2cca:	69fb      	ldr	r3, [r7, #28]
    2ccc:	687a      	ldr	r2, [r7, #4]
    2cce:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2cd0:	687b      	ldr	r3, [r7, #4]
    2cd2:	697a      	ldr	r2, [r7, #20]
    2cd4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2cd6:	697b      	ldr	r3, [r7, #20]
    2cd8:	681b      	ldr	r3, [r3, #0]
    2cda:	1c5a      	adds	r2, r3, #1
    2cdc:	697b      	ldr	r3, [r7, #20]
    2cde:	601a      	str	r2, [r3, #0]
}
    2ce0:	3720      	adds	r7, #32
    2ce2:	46bd      	mov	sp, r7
    2ce4:	bd80      	pop	{r7, pc}
    2ce6:	bf00      	nop

00002ce8 <pxEventGenericCreate>:


xEventHandle pxEventGenericCreate( portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData * pdData)
{
    2ce8:	b580      	push	{r7, lr}
    2cea:	b086      	sub	sp, #24
    2cec:	af00      	add	r7, sp, #0
    2cee:	60f8      	str	r0, [r7, #12]
    2cf0:	60b9      	str	r1, [r7, #8]
    2cf2:	607a      	str	r2, [r7, #4]
    2cf4:	603b      	str	r3, [r7, #0]
    eveECB * pxNewEvent = NULL;
    2cf6:	2300      	movs	r3, #0
    2cf8:	617b      	str	r3, [r7, #20]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2cfa:	f002 fff5 	bl	5ce8 <vPortEnterCritical>

    pxNewEvent = (eveECB *)xEventIdleList.xListEnd.pxNext->pvOwner;
    2cfe:	f640 0394 	movw	r3, #2196	; 0x894
    2d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d06:	68db      	ldr	r3, [r3, #12]
    2d08:	68db      	ldr	r3, [r3, #12]
    2d0a:	617b      	str	r3, [r7, #20]
    vListRemove( (xListItem *)&pxNewEvent->xEventListItem );
    2d0c:	697b      	ldr	r3, [r7, #20]
    2d0e:	3320      	adds	r3, #32
    2d10:	4618      	mov	r0, r3
    2d12:	f001 fa9d 	bl	4250 <vListRemove>

    pxNewEvent->pxSource = pxSource;
    2d16:	697b      	ldr	r3, [r7, #20]
    2d18:	68fa      	ldr	r2, [r7, #12]
    2d1a:	601a      	str	r2, [r3, #0]
    vEventSetxTag( xDeadline, xTimestamp, pxNewEvent );
    2d1c:	68b8      	ldr	r0, [r7, #8]
    2d1e:	6879      	ldr	r1, [r7, #4]
    2d20:	697a      	ldr	r2, [r7, #20]
    2d22:	f7ff ff77 	bl	2c14 <vEventSetxTag>
    ((eveECB *) pxNewEvent)->xData = *pdData;
    2d26:	697b      	ldr	r3, [r7, #20]
    2d28:	683a      	ldr	r2, [r7, #0]
    2d2a:	3318      	adds	r3, #24
    2d2c:	e892 0003 	ldmia.w	r2, {r0, r1}
    2d30:	e883 0003 	stmia.w	r3, {r0, r1}
    listSET_LIST_ITEM_OWNER( (xListItem *) &pxNewEvent->xEventListItem, pxNewEvent);
    2d34:	697b      	ldr	r3, [r7, #20]
    2d36:	697a      	ldr	r2, [r7, #20]
    2d38:	62da      	str	r2, [r3, #44]	; 0x2c

    taskEXIT_CRITICAL();
    2d3a:	f002 ffeb 	bl	5d14 <vPortExitCritical>

    return pxNewEvent;
    2d3e:	697b      	ldr	r3, [r7, #20]
}
    2d40:	4618      	mov	r0, r3
    2d42:	3718      	adds	r7, #24
    2d44:	46bd      	mov	sp, r7
    2d46:	bd80      	pop	{r7, pc}

00002d48 <vEventGenericScatter>:


// find the executable events from xEventNonExecutablePool.
// scatter the events and transit them into xEventExecutablePool
void vEventGenericScatter()
{
    2d48:	b580      	push	{r7, lr}
    2d4a:	b08c      	sub	sp, #48	; 0x30
    2d4c:	af00      	add	r7, sp, #0
    portBASE_TYPE pxSource, pxDestination, outs;
    struct tag * xTag;
    eveECB * pxEvent , * pxCopyEvent; 
    xListItem * temp_pxEventListItem;
    portTickType xCurrentTime;
    volatile xListItem * pxIterator = xEventNonExecutablePool.xListEnd.pxNext;
    2d4e:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d56:	68db      	ldr	r3, [r3, #12]
    2d58:	627b      	str	r3, [r7, #36]	; 0x24

    // event scatter
    if( (xLen = listCURRENT_LIST_LENGTH( &xEventNonExecutablePool )) > 0)
    2d5a:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d62:	681b      	ldr	r3, [r3, #0]
    2d64:	623b      	str	r3, [r7, #32]
    2d66:	6a3b      	ldr	r3, [r7, #32]
    2d68:	2b00      	cmp	r3, #0
    2d6a:	f340 80d1 	ble.w	2f10 <vEventGenericScatter+0x1c8>
    {
        xCurrentTime = xTaskGetTickCount();
    2d6e:	f002 faed 	bl	534c <xTaskGetTickCount>
    2d72:	61f8      	str	r0, [r7, #28]
        // search executable event from nonexecutable pool
        for(j = 0; j < xLen; j ++ )
    2d74:	2300      	movs	r3, #0
    2d76:	62bb      	str	r3, [r7, #40]	; 0x28
    2d78:	e0c5      	b.n	2f06 <vEventGenericScatter+0x1be>
        {
            xTag = xEventGetxTag( pxIterator->pvOwner ); 
    2d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d7c:	68db      	ldr	r3, [r3, #12]
    2d7e:	4618      	mov	r0, r3
    2d80:	f7ff fe14 	bl	29ac <xEventGetxTag>
    2d84:	61b8      	str	r0, [r7, #24]
            // find one
            if( xTag->xTimestamp <= xCurrentTime )
    2d86:	69bb      	ldr	r3, [r7, #24]
    2d88:	685a      	ldr	r2, [r3, #4]
    2d8a:	69fb      	ldr	r3, [r7, #28]
    2d8c:	429a      	cmp	r2, r3
    2d8e:	f200 80b4 	bhi.w	2efa <vEventGenericScatter+0x1b2>
            {
                pxEvent = (eveECB *) pxIterator->pvOwner;
    2d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d94:	68db      	ldr	r3, [r3, #12]
    2d96:	617b      	str	r3, [r7, #20]
                outs = xContexts[ pxEvent->pxSource ].xNumOfOut; // used for cloning
    2d98:	697b      	ldr	r3, [r7, #20]
    2d9a:	6819      	ldr	r1, [r3, #0]
    2d9c:	f640 120c 	movw	r2, #2316	; 0x90c
    2da0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2da4:	460b      	mov	r3, r1
    2da6:	00db      	lsls	r3, r3, #3
    2da8:	1a5b      	subs	r3, r3, r1
    2daa:	00db      	lsls	r3, r3, #3
    2dac:	4413      	add	r3, r2
    2dae:	3310      	adds	r3, #16
    2db0:	681b      	ldr	r3, [r3, #0]
    2db2:	613b      	str	r3, [r7, #16]

                taskENTER_CRITICAL();
    2db4:	f002 ff98 	bl	5ce8 <vPortEnterCritical>
                temp_pxEventListItem = (xListItem *) pxIterator;
    2db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dba:	60fb      	str	r3, [r7, #12]
                pxIterator = pxIterator->pxNext;
    2dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dbe:	685b      	ldr	r3, [r3, #4]
    2dc0:	627b      	str	r3, [r7, #36]	; 0x24
                vListRemove(temp_pxEventListItem);
    2dc2:	68f8      	ldr	r0, [r7, #12]
    2dc4:	f001 fa44 	bl	4250 <vListRemove>
                // complete the information of the origin event.
                pxEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[0];
    2dc8:	697b      	ldr	r3, [r7, #20]
    2dca:	6819      	ldr	r1, [r3, #0]
    2dcc:	f640 120c 	movw	r2, #2316	; 0x90c
    2dd0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2dd4:	460b      	mov	r3, r1
    2dd6:	00db      	lsls	r3, r3, #3
    2dd8:	1a5b      	subs	r3, r3, r1
    2dda:	00db      	lsls	r3, r3, #3
    2ddc:	4413      	add	r3, r2
    2dde:	331c      	adds	r3, #28
    2de0:	681a      	ldr	r2, [r3, #0]
    2de2:	697b      	ldr	r3, [r7, #20]
    2de4:	605a      	str	r2, [r3, #4]
                xContexts[pxEvent->pxDestination].xInBoolCount++;
    2de6:	697b      	ldr	r3, [r7, #20]
    2de8:	685a      	ldr	r2, [r3, #4]
    2dea:	f640 110c 	movw	r1, #2316	; 0x90c
    2dee:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2df2:	4613      	mov	r3, r2
    2df4:	00db      	lsls	r3, r3, #3
    2df6:	1a9b      	subs	r3, r3, r2
    2df8:	00db      	lsls	r3, r3, #3
    2dfa:	440b      	add	r3, r1
    2dfc:	3334      	adds	r3, #52	; 0x34
    2dfe:	681b      	ldr	r3, [r3, #0]
    2e00:	1c58      	adds	r0, r3, #1
    2e02:	f640 110c 	movw	r1, #2316	; 0x90c
    2e06:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2e0a:	4613      	mov	r3, r2
    2e0c:	00db      	lsls	r3, r3, #3
    2e0e:	1a9b      	subs	r3, r3, r2
    2e10:	00db      	lsls	r3, r3, #3
    2e12:	440b      	add	r3, r1
    2e14:	3334      	adds	r3, #52	; 0x34
    2e16:	6018      	str	r0, [r3, #0]
                pxEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xMyFlag;
    2e18:	697b      	ldr	r3, [r7, #20]
    2e1a:	6859      	ldr	r1, [r3, #4]
    2e1c:	f640 120c 	movw	r2, #2316	; 0x90c
    2e20:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2e24:	460b      	mov	r3, r1
    2e26:	00db      	lsls	r3, r3, #3
    2e28:	1a5b      	subs	r3, r3, r1
    2e2a:	00db      	lsls	r3, r3, #3
    2e2c:	4413      	add	r3, r2
    2e2e:	681a      	ldr	r2, [r3, #0]
    2e30:	697b      	ldr	r3, [r7, #20]
    2e32:	611a      	str	r2, [r3, #16]
                vListInsertEnd(&xEventExecutablePool, temp_pxEventListItem);
    2e34:	f640 00d0 	movw	r0, #2256	; 0x8d0
    2e38:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2e3c:	68f9      	ldr	r1, [r7, #12]
    2e3e:	f001 f9a7 	bl	4190 <vListInsertEnd>

                // copy one event to multiples
                for(i = 1; i < outs; ++ i)
    2e42:	2301      	movs	r3, #1
    2e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    2e46:	e051      	b.n	2eec <vEventGenericScatter+0x1a4>
                {
                    pxCopyEvent = (eveECB *)pxEventGenericCreate(pxSource, pxEvent->xTag.xDeadline, pxEvent->xTag.xTimestamp, &pxEvent->xData);
    2e48:	697b      	ldr	r3, [r7, #20]
    2e4a:	6899      	ldr	r1, [r3, #8]
    2e4c:	697b      	ldr	r3, [r7, #20]
    2e4e:	68da      	ldr	r2, [r3, #12]
    2e50:	697b      	ldr	r3, [r7, #20]
    2e52:	3318      	adds	r3, #24
    2e54:	68b8      	ldr	r0, [r7, #8]
    2e56:	f7ff ff47 	bl	2ce8 <pxEventGenericCreate>
    2e5a:	6078      	str	r0, [r7, #4]
                    // complete the information of the copied event.
                    pxCopyEvent->xTag.xMicroStep = i;
    2e5c:	687b      	ldr	r3, [r7, #4]
    2e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2e60:	615a      	str	r2, [r3, #20]

                    pxCopyEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[i];
    2e62:	697b      	ldr	r3, [r7, #20]
    2e64:	6819      	ldr	r1, [r3, #0]
    2e66:	f640 120c 	movw	r2, #2316	; 0x90c
    2e6a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2e6e:	460b      	mov	r3, r1
    2e70:	00db      	lsls	r3, r3, #3
    2e72:	1a5b      	subs	r3, r3, r1
    2e74:	005b      	lsls	r3, r3, #1
    2e76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    2e78:	440b      	add	r3, r1
    2e7a:	3306      	adds	r3, #6
    2e7c:	009b      	lsls	r3, r3, #2
    2e7e:	4413      	add	r3, r2
    2e80:	685a      	ldr	r2, [r3, #4]
    2e82:	687b      	ldr	r3, [r7, #4]
    2e84:	605a      	str	r2, [r3, #4]
                    xContexts[pxCopyEvent->pxDestination].xInBoolCount++;
    2e86:	687b      	ldr	r3, [r7, #4]
    2e88:	685a      	ldr	r2, [r3, #4]
    2e8a:	f640 110c 	movw	r1, #2316	; 0x90c
    2e8e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2e92:	4613      	mov	r3, r2
    2e94:	00db      	lsls	r3, r3, #3
    2e96:	1a9b      	subs	r3, r3, r2
    2e98:	00db      	lsls	r3, r3, #3
    2e9a:	440b      	add	r3, r1
    2e9c:	3334      	adds	r3, #52	; 0x34
    2e9e:	681b      	ldr	r3, [r3, #0]
    2ea0:	1c58      	adds	r0, r3, #1
    2ea2:	f640 110c 	movw	r1, #2316	; 0x90c
    2ea6:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2eaa:	4613      	mov	r3, r2
    2eac:	00db      	lsls	r3, r3, #3
    2eae:	1a9b      	subs	r3, r3, r2
    2eb0:	00db      	lsls	r3, r3, #3
    2eb2:	440b      	add	r3, r1
    2eb4:	3334      	adds	r3, #52	; 0x34
    2eb6:	6018      	str	r0, [r3, #0]
                    pxCopyEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xMyFlag; 
    2eb8:	697b      	ldr	r3, [r7, #20]
    2eba:	6859      	ldr	r1, [r3, #4]
    2ebc:	f640 120c 	movw	r2, #2316	; 0x90c
    2ec0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2ec4:	460b      	mov	r3, r1
    2ec6:	00db      	lsls	r3, r3, #3
    2ec8:	1a5b      	subs	r3, r3, r1
    2eca:	00db      	lsls	r3, r3, #3
    2ecc:	4413      	add	r3, r2
    2ece:	681a      	ldr	r2, [r3, #0]
    2ed0:	687b      	ldr	r3, [r7, #4]
    2ed2:	611a      	str	r2, [r3, #16]
                    vListInsertEnd(&xEventExecutablePool, &pxCopyEvent->xEventListItem);
    2ed4:	687b      	ldr	r3, [r7, #4]
    2ed6:	3320      	adds	r3, #32
    2ed8:	f640 00d0 	movw	r0, #2256	; 0x8d0
    2edc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ee0:	4619      	mov	r1, r3
    2ee2:	f001 f955 	bl	4190 <vListInsertEnd>
                xContexts[pxEvent->pxDestination].xInBoolCount++;
                pxEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xMyFlag;
                vListInsertEnd(&xEventExecutablePool, temp_pxEventListItem);

                // copy one event to multiples
                for(i = 1; i < outs; ++ i)
    2ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ee8:	3301      	adds	r3, #1
    2eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    2eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2eee:	693b      	ldr	r3, [r7, #16]
    2ef0:	429a      	cmp	r2, r3
    2ef2:	dba9      	blt.n	2e48 <vEventGenericScatter+0x100>
                    pxCopyEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[i];
                    xContexts[pxCopyEvent->pxDestination].xInBoolCount++;
                    pxCopyEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xMyFlag; 
                    vListInsertEnd(&xEventExecutablePool, &pxCopyEvent->xEventListItem);
                }
                taskEXIT_CRITICAL();
    2ef4:	f002 ff0e 	bl	5d14 <vPortExitCritical>
    2ef8:	e002      	b.n	2f00 <vEventGenericScatter+0x1b8>
            }
            else
            {
                pxIterator = pxIterator->pxNext;
    2efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2efc:	685b      	ldr	r3, [r3, #4]
    2efe:	627b      	str	r3, [r7, #36]	; 0x24
    // event scatter
    if( (xLen = listCURRENT_LIST_LENGTH( &xEventNonExecutablePool )) > 0)
    {
        xCurrentTime = xTaskGetTickCount();
        // search executable event from nonexecutable pool
        for(j = 0; j < xLen; j ++ )
    2f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2f02:	3301      	adds	r3, #1
    2f04:	62bb      	str	r3, [r7, #40]	; 0x28
    2f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2f08:	6a3b      	ldr	r3, [r7, #32]
    2f0a:	429a      	cmp	r2, r3
    2f0c:	f6ff af35 	blt.w	2d7a <vEventGenericScatter+0x32>
            {
                pxIterator = pxIterator->pxNext;
            }
        }
    }
}
    2f10:	3730      	adds	r7, #48	; 0x30
    2f12:	46bd      	mov	sp, r7
    2f14:	bd80      	pop	{r7, pc}
    2f16:	bf00      	nop

00002f18 <clearEventReduceTrack>:


static void clearEventReduceTrack()
{
    2f18:	b480      	push	{r7}
    2f1a:	b083      	sub	sp, #12
    2f1c:	af00      	add	r7, sp, #0
    portBASE_TYPE i = NUMBEROFSERVANT;
    2f1e:	232f      	movs	r3, #47	; 0x2f
    2f20:	607b      	str	r3, [r7, #4]
    while(i--)
    2f22:	e030      	b.n	2f86 <clearEventReduceTrack+0x6e>
    {
        xEventReduceTrack[i].pxEvent = NULL; 
    2f24:	f240 6260 	movw	r2, #1632	; 0x660
    2f28:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f2c:	6879      	ldr	r1, [r7, #4]
    2f2e:	460b      	mov	r3, r1
    2f30:	005b      	lsls	r3, r3, #1
    2f32:	440b      	add	r3, r1
    2f34:	009b      	lsls	r3, r3, #2
    2f36:	4413      	add	r3, r2
    2f38:	2200      	movs	r2, #0
    2f3a:	601a      	str	r2, [r3, #0]
        xEventReduceTrack[i].xNumOfEvent = xEventReduceTrack[i].AllArrive = 0;
    2f3c:	f240 6260 	movw	r2, #1632	; 0x660
    2f40:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f44:	6879      	ldr	r1, [r7, #4]
    2f46:	460b      	mov	r3, r1
    2f48:	005b      	lsls	r3, r3, #1
    2f4a:	440b      	add	r3, r1
    2f4c:	009b      	lsls	r3, r3, #2
    2f4e:	4413      	add	r3, r2
    2f50:	3308      	adds	r3, #8
    2f52:	2200      	movs	r2, #0
    2f54:	601a      	str	r2, [r3, #0]
    2f56:	f240 6260 	movw	r2, #1632	; 0x660
    2f5a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f5e:	6879      	ldr	r1, [r7, #4]
    2f60:	460b      	mov	r3, r1
    2f62:	005b      	lsls	r3, r3, #1
    2f64:	440b      	add	r3, r1
    2f66:	009b      	lsls	r3, r3, #2
    2f68:	4413      	add	r3, r2
    2f6a:	3308      	adds	r3, #8
    2f6c:	6818      	ldr	r0, [r3, #0]
    2f6e:	f240 6260 	movw	r2, #1632	; 0x660
    2f72:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f76:	6879      	ldr	r1, [r7, #4]
    2f78:	460b      	mov	r3, r1
    2f7a:	005b      	lsls	r3, r3, #1
    2f7c:	440b      	add	r3, r1
    2f7e:	009b      	lsls	r3, r3, #2
    2f80:	4413      	add	r3, r2
    2f82:	3304      	adds	r3, #4
    2f84:	6018      	str	r0, [r3, #0]


static void clearEventReduceTrack()
{
    portBASE_TYPE i = NUMBEROFSERVANT;
    while(i--)
    2f86:	687b      	ldr	r3, [r7, #4]
    2f88:	1e5a      	subs	r2, r3, #1
    2f8a:	607a      	str	r2, [r7, #4]
    2f8c:	2b00      	cmp	r3, #0
    2f8e:	d1c9      	bne.n	2f24 <clearEventReduceTrack+0xc>
    {
        xEventReduceTrack[i].pxEvent = NULL; 
        xEventReduceTrack[i].xNumOfEvent = xEventReduceTrack[i].AllArrive = 0;
    }
}
    2f90:	370c      	adds	r7, #12
    2f92:	46bd      	mov	sp, r7
    2f94:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f98:	4770      	bx	lr
    2f9a:	bf00      	nop

00002f9c <vEventGenericReduce>:

void vEventGenericReduce()
{
    2f9c:	b580      	push	{r7, lr}
    2f9e:	b08a      	sub	sp, #40	; 0x28
    2fa0:	af00      	add	r7, sp, #0
    struct tag * temp_tag;
    struct eventData * temp_data;
    volatile xListItem * pxIterator;
    eveRT * temp_RT;

    if( (xLen = listCURRENT_LIST_LENGTH( &xEventExecutablePool )) > 0 )
    2fa2:	f640 03d0 	movw	r3, #2256	; 0x8d0
    2fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2faa:	681b      	ldr	r3, [r3, #0]
    2fac:	61fb      	str	r3, [r7, #28]
    2fae:	69fb      	ldr	r3, [r7, #28]
    2fb0:	2b00      	cmp	r3, #0
    2fb2:	f340 80ea 	ble.w	318a <vEventGenericReduce+0x1ee>
    {
        clearEventReduceTrack();
    2fb6:	f7ff ffaf 	bl	2f18 <clearEventReduceTrack>
        pxIterator = (xListItem *) xEventExecutablePool.xListEnd.pxNext;
    2fba:	f640 03d0 	movw	r3, #2256	; 0x8d0
    2fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fc2:	68db      	ldr	r3, [r3, #12]
    2fc4:	623b      	str	r3, [r7, #32]
        for( i = 0; i < xLen; i++)
    2fc6:	2300      	movs	r3, #0
    2fc8:	627b      	str	r3, [r7, #36]	; 0x24
    2fca:	e0a6      	b.n	311a <vEventGenericReduce+0x17e>
        {
            pxDestination = xEventGetpxDestination( pxIterator->pvOwner );
    2fcc:	6a3b      	ldr	r3, [r7, #32]
    2fce:	68db      	ldr	r3, [r3, #12]
    2fd0:	4618      	mov	r0, r3
    2fd2:	f7ff fcdf 	bl	2994 <xEventGetpxDestination>
    2fd6:	61b8      	str	r0, [r7, #24]
            if(xContexts[pxDestination].xInBoolCount == xContexts[pxDestination].xNumOfIn )
    2fd8:	f640 120c 	movw	r2, #2316	; 0x90c
    2fdc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fe0:	69b9      	ldr	r1, [r7, #24]
    2fe2:	460b      	mov	r3, r1
    2fe4:	00db      	lsls	r3, r3, #3
    2fe6:	1a5b      	subs	r3, r3, r1
    2fe8:	00db      	lsls	r3, r3, #3
    2fea:	4413      	add	r3, r2
    2fec:	3334      	adds	r3, #52	; 0x34
    2fee:	6818      	ldr	r0, [r3, #0]
    2ff0:	f640 120c 	movw	r2, #2316	; 0x90c
    2ff4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2ff8:	69b9      	ldr	r1, [r7, #24]
    2ffa:	460b      	mov	r3, r1
    2ffc:	00db      	lsls	r3, r3, #3
    2ffe:	1a5b      	subs	r3, r3, r1
    3000:	00db      	lsls	r3, r3, #3
    3002:	4413      	add	r3, r2
    3004:	330c      	adds	r3, #12
    3006:	681b      	ldr	r3, [r3, #0]
    3008:	4298      	cmp	r0, r3
    300a:	f040 8083 	bne.w	3114 <vEventGenericReduce+0x178>
            {
                temp_RT = &xEventReduceTrack[pxDestination];
    300e:	69ba      	ldr	r2, [r7, #24]
    3010:	4613      	mov	r3, r2
    3012:	005b      	lsls	r3, r3, #1
    3014:	4413      	add	r3, r2
    3016:	009b      	lsls	r3, r3, #2
    3018:	f240 6260 	movw	r2, #1632	; 0x660
    301c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3020:	4413      	add	r3, r2
    3022:	617b      	str	r3, [r7, #20]
                if(xContexts[pxDestination].xInBoolCount > 1)
    3024:	f640 120c 	movw	r2, #2316	; 0x90c
    3028:	f2c2 0200 	movt	r2, #8192	; 0x2000
    302c:	69b9      	ldr	r1, [r7, #24]
    302e:	460b      	mov	r3, r1
    3030:	00db      	lsls	r3, r3, #3
    3032:	1a5b      	subs	r3, r3, r1
    3034:	00db      	lsls	r3, r3, #3
    3036:	4413      	add	r3, r2
    3038:	3334      	adds	r3, #52	; 0x34
    303a:	681b      	ldr	r3, [r3, #0]
    303c:	2b01      	cmp	r3, #1
    303e:	dd57      	ble.n	30f0 <vEventGenericReduce+0x154>
                {
                    if( (temp_count = temp_RT->xNumOfEvent) > 0 )
    3040:	697b      	ldr	r3, [r7, #20]
    3042:	685b      	ldr	r3, [r3, #4]
    3044:	613b      	str	r3, [r7, #16]
    3046:	693b      	ldr	r3, [r7, #16]
    3048:	2b00      	cmp	r3, #0
    304a:	dd41      	ble.n	30d0 <vEventGenericReduce+0x134>
                    {
                        temp_data = xEventGetxData( pxIterator->pvOwner );  
    304c:	6a3b      	ldr	r3, [r7, #32]
    304e:	68db      	ldr	r3, [r3, #12]
    3050:	4618      	mov	r0, r3
    3052:	f7ff fcb7 	bl	29c4 <xEventGetxData>
    3056:	60f8      	str	r0, [r7, #12]
                        temp_tag = xEventGetxTag( pxIterator->pvOwner );
    3058:	6a3b      	ldr	r3, [r7, #32]
    305a:	68db      	ldr	r3, [r3, #12]
    305c:	4618      	mov	r0, r3
    305e:	f7ff fca5 	bl	29ac <xEventGetxTag>
    3062:	60b8      	str	r0, [r7, #8]
                        ((eveECB *)temp_RT->pxEvent)->xData.xDataArray[temp_count] = temp_data->xDataArray[0];
    3064:	697b      	ldr	r3, [r7, #20]
    3066:	681b      	ldr	r3, [r3, #0]
    3068:	68fa      	ldr	r2, [r7, #12]
    306a:	6811      	ldr	r1, [r2, #0]
    306c:	693a      	ldr	r2, [r7, #16]
    306e:	3206      	adds	r2, #6
    3070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                        if( temp_RT->xNumOfEvent++ == xContexts[pxDestination].xInBoolCount - 1)
    3074:	697b      	ldr	r3, [r7, #20]
    3076:	6859      	ldr	r1, [r3, #4]
    3078:	1c4a      	adds	r2, r1, #1
    307a:	697b      	ldr	r3, [r7, #20]
    307c:	605a      	str	r2, [r3, #4]
    307e:	f640 120c 	movw	r2, #2316	; 0x90c
    3082:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3086:	69b8      	ldr	r0, [r7, #24]
    3088:	4603      	mov	r3, r0
    308a:	00db      	lsls	r3, r3, #3
    308c:	1a1b      	subs	r3, r3, r0
    308e:	00db      	lsls	r3, r3, #3
    3090:	4413      	add	r3, r2
    3092:	3334      	adds	r3, #52	; 0x34
    3094:	681b      	ldr	r3, [r3, #0]
    3096:	3b01      	subs	r3, #1
    3098:	4299      	cmp	r1, r3
    309a:	d102      	bne.n	30a2 <vEventGenericReduce+0x106>
                        {
                            temp_RT->AllArrive = 1;
    309c:	697b      	ldr	r3, [r7, #20]
    309e:	2201      	movs	r2, #1
    30a0:	609a      	str	r2, [r3, #8]
                        }
                        if(((eveECB *)temp_RT->pxEvent)->xTag.xTimestamp < temp_tag->xTimestamp)
    30a2:	697b      	ldr	r3, [r7, #20]
    30a4:	681b      	ldr	r3, [r3, #0]
    30a6:	68da      	ldr	r2, [r3, #12]
    30a8:	68bb      	ldr	r3, [r7, #8]
    30aa:	685b      	ldr	r3, [r3, #4]
    30ac:	429a      	cmp	r2, r3
    30ae:	d204      	bcs.n	30ba <vEventGenericReduce+0x11e>
                        {
                            ((eveECB *)temp_RT->pxEvent)->xTag.xTimestamp = temp_tag->xTimestamp;
    30b0:	697b      	ldr	r3, [r7, #20]
    30b2:	681b      	ldr	r3, [r3, #0]
    30b4:	68ba      	ldr	r2, [r7, #8]
    30b6:	6852      	ldr	r2, [r2, #4]
    30b8:	60da      	str	r2, [r3, #12]
                        }

                        temp_pxEventListItem = (xListItem *) pxIterator;
    30ba:	6a3b      	ldr	r3, [r7, #32]
    30bc:	607b      	str	r3, [r7, #4]
                        pxIterator = pxIterator->pxNext;
    30be:	6a3b      	ldr	r3, [r7, #32]
    30c0:	685b      	ldr	r3, [r3, #4]
    30c2:	623b      	str	r3, [r7, #32]
                        vEventGenericDelete(temp_pxEventListItem->pvOwner);  // delete the redundant events
    30c4:	687b      	ldr	r3, [r7, #4]
    30c6:	68db      	ldr	r3, [r3, #12]
    30c8:	4618      	mov	r0, r3
    30ca:	f000 fa1d 	bl	3508 <vEventGenericDelete>
    30ce:	e021      	b.n	3114 <vEventGenericReduce+0x178>
                    }
                    else  // the fist one of reduce event
                    {
                        temp_RT->pxEvent = pxIterator->pvOwner; 
    30d0:	6a3b      	ldr	r3, [r7, #32]
    30d2:	68da      	ldr	r2, [r3, #12]
    30d4:	697b      	ldr	r3, [r7, #20]
    30d6:	601a      	str	r2, [r3, #0]
                        temp_RT->xNumOfEvent = 1;
    30d8:	697b      	ldr	r3, [r7, #20]
    30da:	2201      	movs	r2, #1
    30dc:	605a      	str	r2, [r3, #4]
                        
                        temp_pxEventListItem = (xListItem *) pxIterator;
    30de:	6a3b      	ldr	r3, [r7, #32]
    30e0:	607b      	str	r3, [r7, #4]
                        pxIterator = pxIterator->pxNext;
    30e2:	6a3b      	ldr	r3, [r7, #32]
    30e4:	685b      	ldr	r3, [r3, #4]
    30e6:	623b      	str	r3, [r7, #32]
                        vListRemove(temp_pxEventListItem);
    30e8:	6878      	ldr	r0, [r7, #4]
    30ea:	f001 f8b1 	bl	4250 <vListRemove>
    30ee:	e011      	b.n	3114 <vEventGenericReduce+0x178>
                    }
                }
                else // only one event for the target servant
                {
                    temp_RT->pxEvent = pxIterator->pvOwner; 
    30f0:	6a3b      	ldr	r3, [r7, #32]
    30f2:	68da      	ldr	r2, [r3, #12]
    30f4:	697b      	ldr	r3, [r7, #20]
    30f6:	601a      	str	r2, [r3, #0]
                    temp_RT->xNumOfEvent = 1;
    30f8:	697b      	ldr	r3, [r7, #20]
    30fa:	2201      	movs	r2, #1
    30fc:	605a      	str	r2, [r3, #4]
                    temp_RT->AllArrive = 1;
    30fe:	697b      	ldr	r3, [r7, #20]
    3100:	2201      	movs	r2, #1
    3102:	609a      	str	r2, [r3, #8]
                 
                    temp_pxEventListItem = (xListItem *) pxIterator;
    3104:	6a3b      	ldr	r3, [r7, #32]
    3106:	607b      	str	r3, [r7, #4]
                    pxIterator = pxIterator->pxNext;
    3108:	6a3b      	ldr	r3, [r7, #32]
    310a:	685b      	ldr	r3, [r3, #4]
    310c:	623b      	str	r3, [r7, #32]
                    vListRemove(temp_pxEventListItem);
    310e:	6878      	ldr	r0, [r7, #4]
    3110:	f001 f89e 	bl	4250 <vListRemove>

    if( (xLen = listCURRENT_LIST_LENGTH( &xEventExecutablePool )) > 0 )
    {
        clearEventReduceTrack();
        pxIterator = (xListItem *) xEventExecutablePool.xListEnd.pxNext;
        for( i = 0; i < xLen; i++)
    3114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3116:	3301      	adds	r3, #1
    3118:	627b      	str	r3, [r7, #36]	; 0x24
    311a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    311c:	69fb      	ldr	r3, [r7, #28]
    311e:	429a      	cmp	r2, r3
    3120:	f6ff af54 	blt.w	2fcc <vEventGenericReduce+0x30>
                    vListRemove(temp_pxEventListItem);
                }

            }
        } // end for
        for(i=0; i<NUMBEROFSERVANT; ++i)
    3124:	2300      	movs	r3, #0
    3126:	627b      	str	r3, [r7, #36]	; 0x24
    3128:	e02c      	b.n	3184 <vEventGenericReduce+0x1e8>
        {
            if(xEventReduceTrack[i].AllArrive)
    312a:	f240 6260 	movw	r2, #1632	; 0x660
    312e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3132:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3134:	460b      	mov	r3, r1
    3136:	005b      	lsls	r3, r3, #1
    3138:	440b      	add	r3, r1
    313a:	009b      	lsls	r3, r3, #2
    313c:	4413      	add	r3, r2
    313e:	3308      	adds	r3, #8
    3140:	681b      	ldr	r3, [r3, #0]
    3142:	2b00      	cmp	r3, #0
    3144:	d01b      	beq.n	317e <vEventGenericReduce+0x1e2>
            {
                prvEventListGenericInsert(&((eveECB *)xEventReduceTrack[i].pxEvent)->xEventListItem);
    3146:	f240 6260 	movw	r2, #1632	; 0x660
    314a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    314e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3150:	460b      	mov	r3, r1
    3152:	005b      	lsls	r3, r3, #1
    3154:	440b      	add	r3, r1
    3156:	009b      	lsls	r3, r3, #2
    3158:	4413      	add	r3, r2
    315a:	681b      	ldr	r3, [r3, #0]
    315c:	3320      	adds	r3, #32
    315e:	4618      	mov	r0, r3
    3160:	f7ff fd6e 	bl	2c40 <prvEventListGenericInsert>
                xContexts[i].xInBoolCount = 0;  // important recovery !!!!!
    3164:	f640 120c 	movw	r2, #2316	; 0x90c
    3168:	f2c2 0200 	movt	r2, #8192	; 0x2000
    316c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    316e:	460b      	mov	r3, r1
    3170:	00db      	lsls	r3, r3, #3
    3172:	1a5b      	subs	r3, r3, r1
    3174:	00db      	lsls	r3, r3, #3
    3176:	4413      	add	r3, r2
    3178:	3334      	adds	r3, #52	; 0x34
    317a:	2200      	movs	r2, #0
    317c:	601a      	str	r2, [r3, #0]
                    vListRemove(temp_pxEventListItem);
                }

            }
        } // end for
        for(i=0; i<NUMBEROFSERVANT; ++i)
    317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3180:	3301      	adds	r3, #1
    3182:	627b      	str	r3, [r7, #36]	; 0x24
    3184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3186:	2b2e      	cmp	r3, #46	; 0x2e
    3188:	ddcf      	ble.n	312a <vEventGenericReduce+0x18e>
                prvEventListGenericInsert(&((eveECB *)xEventReduceTrack[i].pxEvent)->xEventListItem);
                xContexts[i].xInBoolCount = 0;  // important recovery !!!!!
            }
        } // end for
    } // end if
}
    318a:	3728      	adds	r7, #40	; 0x28
    318c:	46bd      	mov	sp, r7
    318e:	bd80      	pop	{r7, pc}

00003190 <pOverLap>:


static portBASE_TYPE pOverLap( xListItem * pxEventListItem)
{
    3190:	b480      	push	{r7}
    3192:	b087      	sub	sp, #28
    3194:	af00      	add	r7, sp, #0
    3196:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent = (eveECB *)pxEventListItem->pvOwner;
    3198:	687b      	ldr	r3, [r7, #4]
    319a:	68db      	ldr	r3, [r3, #12]
    319c:	617b      	str	r3, [r7, #20]
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    319e:	697b      	ldr	r3, [r7, #20]
    31a0:	685b      	ldr	r3, [r3, #4]
    31a2:	613b      	str	r3, [r7, #16]
    portTickType start = pxEvent->xTag.xTimestamp;
    31a4:	697b      	ldr	r3, [r7, #20]
    31a6:	68db      	ldr	r3, [r3, #12]
    31a8:	60fb      	str	r3, [r7, #12]
    portTickType end   = start + xContexts[pxDestination].xLet;
    31aa:	f640 120c 	movw	r2, #2316	; 0x90c
    31ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
    31b2:	6939      	ldr	r1, [r7, #16]
    31b4:	460b      	mov	r3, r1
    31b6:	00db      	lsls	r3, r3, #3
    31b8:	1a5b      	subs	r3, r3, r1
    31ba:	00db      	lsls	r3, r3, #3
    31bc:	4413      	add	r3, r2
    31be:	3324      	adds	r3, #36	; 0x24
    31c0:	681a      	ldr	r2, [r3, #0]
    31c2:	68fb      	ldr	r3, [r7, #12]
    31c4:	4413      	add	r3, r2
    31c6:	60bb      	str	r3, [r7, #8]

    // different execution time overlaped
    if( start % GCDPeriod < INPUT || start % GCDPeriod > (GCDPeriod - OUTPUT) || 
    31c8:	f240 6358 	movw	r3, #1624	; 0x658
    31cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31d0:	681a      	ldr	r2, [r3, #0]
    31d2:	68fb      	ldr	r3, [r7, #12]
    31d4:	fbb3 f1f2 	udiv	r1, r3, r2
    31d8:	fb02 f201 	mul.w	r2, r2, r1
    31dc:	1a9b      	subs	r3, r3, r2
    31de:	2b02      	cmp	r3, #2
    31e0:	d932      	bls.n	3248 <pOverLap+0xb8>
    31e2:	f240 6358 	movw	r3, #1624	; 0x658
    31e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31ea:	681a      	ldr	r2, [r3, #0]
    31ec:	68fb      	ldr	r3, [r7, #12]
    31ee:	fbb3 f1f2 	udiv	r1, r3, r2
    31f2:	fb02 f201 	mul.w	r2, r2, r1
    31f6:	1a9a      	subs	r2, r3, r2
    31f8:	f240 6358 	movw	r3, #1624	; 0x658
    31fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3200:	681b      	ldr	r3, [r3, #0]
    3202:	3b03      	subs	r3, #3
    3204:	429a      	cmp	r2, r3
    3206:	d81f      	bhi.n	3248 <pOverLap+0xb8>
            end % GCDPeriod < INPUT || end % GCDPeriod > (GCDPeriod - OUTPUT))
    3208:	f240 6358 	movw	r3, #1624	; 0x658
    320c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3210:	681a      	ldr	r2, [r3, #0]
    3212:	68bb      	ldr	r3, [r7, #8]
    3214:	fbb3 f1f2 	udiv	r1, r3, r2
    3218:	fb02 f201 	mul.w	r2, r2, r1
    321c:	1a9b      	subs	r3, r3, r2
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    portTickType start = pxEvent->xTag.xTimestamp;
    portTickType end   = start + xContexts[pxDestination].xLet;

    // different execution time overlaped
    if( start % GCDPeriod < INPUT || start % GCDPeriod > (GCDPeriod - OUTPUT) || 
    321e:	2b02      	cmp	r3, #2
    3220:	d912      	bls.n	3248 <pOverLap+0xb8>
            end % GCDPeriod < INPUT || end % GCDPeriod > (GCDPeriod - OUTPUT))
    3222:	f240 6358 	movw	r3, #1624	; 0x658
    3226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    322a:	681a      	ldr	r2, [r3, #0]
    322c:	68bb      	ldr	r3, [r7, #8]
    322e:	fbb3 f1f2 	udiv	r1, r3, r2
    3232:	fb02 f201 	mul.w	r2, r2, r1
    3236:	1a9a      	subs	r2, r3, r2
    3238:	f240 6358 	movw	r3, #1624	; 0x658
    323c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3240:	681b      	ldr	r3, [r3, #0]
    3242:	3b03      	subs	r3, #3
    3244:	429a      	cmp	r2, r3
    3246:	d901      	bls.n	324c <pOverLap+0xbc>
    {
        return 1;
    3248:	2301      	movs	r3, #1
    324a:	e000      	b.n	324e <pOverLap+0xbe>
    }
    return 0;
    324c:	2300      	movs	r3, #0
}
    324e:	4618      	mov	r0, r3
    3250:	371c      	adds	r7, #28
    3252:	46bd      	mov	sp, r7
    3254:	f85d 7b04 	ldr.w	r7, [sp], #4
    3258:	4770      	bx	lr
    325a:	bf00      	nop

0000325c <vSetTimestamp>:

static void vSetTimestamp( xListItem * pxEventListItem)
{
    325c:	b580      	push	{r7, lr}
    325e:	b086      	sub	sp, #24
    3260:	af00      	add	r7, sp, #0
    3262:	6078      	str	r0, [r7, #4]
    portBASE_TYPE i, flag;
    portTickType nextComputingStart;
    eveECB *pxEvent;  
    
    pxEvent = (eveECB *) pxEventListItem->pvOwner;
    3264:	687b      	ldr	r3, [r7, #4]
    3266:	68db      	ldr	r3, [r3, #12]
    3268:	617b      	str	r3, [r7, #20]
    pxEvent->xTag.xTimestamp = xFutureModelTime;// update model time
    326a:	f240 635c 	movw	r3, #1628	; 0x65c
    326e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3272:	681a      	ldr	r2, [r3, #0]
    3274:	697b      	ldr	r3, [r7, #20]
    3276:	60da      	str	r2, [r3, #12]
    nextComputingStart = (xFutureModelTime/GCDPeriod) * GCDPeriod + GCDPeriod + INPUT;
    3278:	f240 635c 	movw	r3, #1628	; 0x65c
    327c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3280:	681a      	ldr	r2, [r3, #0]
    3282:	f240 6358 	movw	r3, #1624	; 0x658
    3286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    328a:	681b      	ldr	r3, [r3, #0]
    328c:	fbb2 f3f3 	udiv	r3, r2, r3
    3290:	1c5a      	adds	r2, r3, #1
    3292:	f240 6358 	movw	r3, #1624	; 0x658
    3296:	f2c2 0300 	movt	r3, #8192	; 0x2000
    329a:	681b      	ldr	r3, [r3, #0]
    329c:	fb03 f302 	mul.w	r3, r3, r2
    32a0:	3303      	adds	r3, #3
    32a2:	613b      	str	r3, [r7, #16]
    flag = pOverLap(pxEventListItem);
    32a4:	6878      	ldr	r0, [r7, #4]
    32a6:	f7ff ff73 	bl	3190 <pOverLap>
    32aa:	60f8      	str	r0, [r7, #12]

    if( !flag  && xFutureModelTime < nextComputingStart) // not overlaped
    32ac:	68fb      	ldr	r3, [r7, #12]
    32ae:	2b00      	cmp	r3, #0
    32b0:	d112      	bne.n	32d8 <vSetTimestamp+0x7c>
    32b2:	f240 635c 	movw	r3, #1628	; 0x65c
    32b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32ba:	681a      	ldr	r2, [r3, #0]
    32bc:	693b      	ldr	r3, [r7, #16]
    32be:	429a      	cmp	r2, r3
    32c0:	d20a      	bcs.n	32d8 <vSetTimestamp+0x7c>
    {
        vListRemove( pxEventListItem); 
    32c2:	6878      	ldr	r0, [r7, #4]
    32c4:	f000 ffc4 	bl	4250 <vListRemove>
        vListInsertEnd(&xEventReadyList, pxEventListItem);
    32c8:	f640 00f8 	movw	r0, #2296	; 0x8f8
    32cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    32d0:	6879      	ldr	r1, [r7, #4]
    32d2:	f000 ff5d 	bl	4190 <vListInsertEnd>
    32d6:	e02c      	b.n	3332 <vSetTimestamp+0xd6>
    }
    else if ( flag && xFutureModelTime < nextComputingStart ) 
    32d8:	68fb      	ldr	r3, [r7, #12]
    32da:	2b00      	cmp	r3, #0
    32dc:	d01f      	beq.n	331e <vSetTimestamp+0xc2>
    32de:	f240 635c 	movw	r3, #1628	; 0x65c
    32e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32e6:	681a      	ldr	r2, [r3, #0]
    32e8:	693b      	ldr	r3, [r7, #16]
    32ea:	429a      	cmp	r2, r3
    32ec:	d217      	bcs.n	331e <vSetTimestamp+0xc2>
    {
        // set the future model time to start time of next LET
        xFutureModelTime = nextComputingStart; 
    32ee:	f240 635c 	movw	r3, #1628	; 0x65c
    32f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32f6:	693a      	ldr	r2, [r7, #16]
    32f8:	601a      	str	r2, [r3, #0]
        pxEvent->xTag.xTimestamp = xFutureModelTime;
    32fa:	f240 635c 	movw	r3, #1628	; 0x65c
    32fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3302:	681a      	ldr	r2, [r3, #0]
    3304:	697b      	ldr	r3, [r7, #20]
    3306:	60da      	str	r2, [r3, #12]

        vListRemove( pxEventListItem); 
    3308:	6878      	ldr	r0, [r7, #4]
    330a:	f000 ffa1 	bl	4250 <vListRemove>
        vListInsertEnd(&xEventNonExecutablePool, pxEventListItem);
    330e:	f640 00a8 	movw	r0, #2216	; 0x8a8
    3312:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3316:	6879      	ldr	r1, [r7, #4]
    3318:	f000 ff3a 	bl	4190 <vListInsertEnd>
    331c:	e009      	b.n	3332 <vSetTimestamp+0xd6>
    }
    else
    {
        vListRemove( pxEventListItem); 
    331e:	6878      	ldr	r0, [r7, #4]
    3320:	f000 ff96 	bl	4250 <vListRemove>
        vListInsertEnd(&xEventNonExecutablePool, pxEventListItem);
    3324:	f640 00a8 	movw	r0, #2216	; 0x8a8
    3328:	f2c2 0000 	movt	r0, #8192	; 0x2000
    332c:	6879      	ldr	r1, [r7, #4]
    332e:	f000 ff2f 	bl	4190 <vListInsertEnd>
    }
    xFutureModelTime += xContexts[pxEvent->pxDestination].xLet;  
    3332:	697b      	ldr	r3, [r7, #20]
    3334:	6859      	ldr	r1, [r3, #4]
    3336:	f640 120c 	movw	r2, #2316	; 0x90c
    333a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    333e:	460b      	mov	r3, r1
    3340:	00db      	lsls	r3, r3, #3
    3342:	1a5b      	subs	r3, r3, r1
    3344:	00db      	lsls	r3, r3, #3
    3346:	4413      	add	r3, r2
    3348:	3324      	adds	r3, #36	; 0x24
    334a:	681a      	ldr	r2, [r3, #0]
    334c:	f240 635c 	movw	r3, #1628	; 0x65c
    3350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3354:	681b      	ldr	r3, [r3, #0]
    3356:	441a      	add	r2, r3
    3358:	f240 635c 	movw	r3, #1628	; 0x65c
    335c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3360:	601a      	str	r2, [r3, #0]
}
    3362:	3718      	adds	r7, #24
    3364:	46bd      	mov	sp, r7
    3366:	bd80      	pop	{r7, pc}

00003368 <pEqualxDeadline>:

static portBASE_TYPE pEqualxDeadline(struct tag * xTag1, struct tag * xTag2)
{
    3368:	b480      	push	{r7}
    336a:	b083      	sub	sp, #12
    336c:	af00      	add	r7, sp, #0
    336e:	6078      	str	r0, [r7, #4]
    3370:	6039      	str	r1, [r7, #0]
    return (xTag1->xDeadline == xTag2->xDeadline);
    3372:	687b      	ldr	r3, [r7, #4]
    3374:	681a      	ldr	r2, [r3, #0]
    3376:	683b      	ldr	r3, [r7, #0]
    3378:	681b      	ldr	r3, [r3, #0]
    337a:	429a      	cmp	r2, r3
    337c:	bf14      	ite	ne
    337e:	2300      	movne	r3, #0
    3380:	2301      	moveq	r3, #1
    3382:	b2db      	uxtb	r3, r3
}
    3384:	4618      	mov	r0, r3
    3386:	370c      	adds	r7, #12
    3388:	46bd      	mov	sp, r7
    338a:	f85d 7b04 	ldr.w	r7, [sp], #4
    338e:	4770      	bx	lr

00003390 <xEventGenericSerialize>:

// update the timestamp of event in xEventExecutableList in terms of xFutureModelTime
portBASE_TYPE xEventGenericSerialize()
{
    3390:	b580      	push	{r7, lr}
    3392:	b084      	sub	sp, #16
    3394:	af00      	add	r7, sp, #0
    xListItem * flag_pxEventListItem;
    struct tag * origin_tag;
    portBASE_TYPE count = 1;
    3396:	2301      	movs	r3, #1
    3398:	60bb      	str	r3, [r7, #8]

    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 0 )
    339a:	f640 03e4 	movw	r3, #2276	; 0x8e4
    339e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33a2:	681b      	ldr	r3, [r3, #0]
    33a4:	2b00      	cmp	r3, #0
    33a6:	d00a      	beq.n	33be <xEventGenericSerialize+0x2e>
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    33a8:	f640 03e4 	movw	r3, #2276	; 0x8e4
    33ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33b0:	68db      	ldr	r3, [r3, #12]
    33b2:	68db      	ldr	r3, [r3, #12]
    33b4:	4618      	mov	r0, r3
    33b6:	f7ff faf9 	bl	29ac <xEventGetxTag>
    33ba:	60f8      	str	r0, [r7, #12]
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 0 )
    33bc:	e035      	b.n	342a <xEventGenericSerialize+0x9a>
    33be:	e034      	b.n	342a <xEventGenericSerialize+0x9a>
    {
        flag_pxEventListItem = (xListItem *) xEventExecutableList.xListEnd.pxNext;
    33c0:	f640 03e4 	movw	r3, #2276	; 0x8e4
    33c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33c8:	68db      	ldr	r3, [r3, #12]
    33ca:	607b      	str	r3, [r7, #4]
        // only the timestamp of c_servant need updating
        // only remove events that have same xDeadline with the first event in xEventExecutableList to xEventReadyList

        if( xContexts[xEventGetpxDestination(flag_pxEventListItem->pvOwner)].xType == 2 )
    33cc:	687b      	ldr	r3, [r7, #4]
    33ce:	68db      	ldr	r3, [r3, #12]
    33d0:	4618      	mov	r0, r3
    33d2:	f7ff fadf 	bl	2994 <xEventGetpxDestination>
    33d6:	4601      	mov	r1, r0
    33d8:	f640 120c 	movw	r2, #2316	; 0x90c
    33dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    33e0:	460b      	mov	r3, r1
    33e2:	00db      	lsls	r3, r3, #3
    33e4:	1a5b      	subs	r3, r3, r1
    33e6:	00db      	lsls	r3, r3, #3
    33e8:	4413      	add	r3, r2
    33ea:	3304      	adds	r3, #4
    33ec:	681b      	ldr	r3, [r3, #0]
    33ee:	2b02      	cmp	r3, #2
    33f0:	d111      	bne.n	3416 <xEventGenericSerialize+0x86>
        {
            if( pEqualxDeadline( xEventGetxTag( flag_pxEventListItem->pvOwner ), origin_tag ))
    33f2:	687b      	ldr	r3, [r7, #4]
    33f4:	68db      	ldr	r3, [r3, #12]
    33f6:	4618      	mov	r0, r3
    33f8:	f7ff fad8 	bl	29ac <xEventGetxTag>
    33fc:	4603      	mov	r3, r0
    33fe:	4618      	mov	r0, r3
    3400:	68f9      	ldr	r1, [r7, #12]
    3402:	f7ff ffb1 	bl	3368 <pEqualxDeadline>
    3406:	4603      	mov	r3, r0
    3408:	2b00      	cmp	r3, #0
    340a:	d003      	beq.n	3414 <xEventGenericSerialize+0x84>
            {
                // update the timestamp of event
                // if overlaped, then remove the event to xEventNonExecutablePool
                // else, remove the event to xEvenReadyList
                vSetTimestamp( flag_pxEventListItem);
    340c:	6878      	ldr	r0, [r7, #4]
    340e:	f7ff ff25 	bl	325c <vSetTimestamp>
    3412:	e00a      	b.n	342a <xEventGenericSerialize+0x9a>
            }
            else
            {
                break;
    3414:	e010      	b.n	3438 <xEventGenericSerialize+0xa8>
            }
        }
        else
        {
            vListRemove( flag_pxEventListItem );
    3416:	6878      	ldr	r0, [r7, #4]
    3418:	f000 ff1a 	bl	4250 <vListRemove>
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
    341c:	f640 00f8 	movw	r0, #2296	; 0x8f8
    3420:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3424:	6879      	ldr	r1, [r7, #4]
    3426:	f000 feb3 	bl	4190 <vListInsertEnd>
    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 0 )
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 0 )
    342a:	f640 03e4 	movw	r3, #2276	; 0x8e4
    342e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3432:	681b      	ldr	r3, [r3, #0]
    3434:	2b00      	cmp	r3, #0
    3436:	d1c3      	bne.n	33c0 <xEventGenericSerialize+0x30>
            vListRemove( flag_pxEventListItem );
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
        }
    }

    if( listCURRENT_LIST_LENGTH( &xEventReadyList ) > 0 )
    3438:	f640 03f8 	movw	r3, #2296	; 0x8f8
    343c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3440:	681b      	ldr	r3, [r3, #0]
    3442:	2b00      	cmp	r3, #0
    3444:	d00a      	beq.n	345c <xEventGenericSerialize+0xcc>
    {
        return xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); //  the first one repsenting the type of events
    3446:	f640 03f8 	movw	r3, #2296	; 0x8f8
    344a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    344e:	68db      	ldr	r3, [r3, #12]
    3450:	68db      	ldr	r3, [r3, #12]
    3452:	4618      	mov	r0, r3
    3454:	f7ff fa9e 	bl	2994 <xEventGetpxDestination>
    3458:	4603      	mov	r3, r0
    345a:	e001      	b.n	3460 <xEventGenericSerialize+0xd0>
    }
    return -1; // no event avaliable
    345c:	f04f 33ff 	mov.w	r3, #4294967295
}
    3460:	4618      	mov	r0, r3
    3462:	3710      	adds	r7, #16
    3464:	46bd      	mov	sp, r7
    3466:	bd80      	pop	{r7, pc}

00003468 <vEventGenericSend>:

void vEventGenericSend( xEventHandle pxEvent )
{
    3468:	b580      	push	{r7, lr}
    346a:	b082      	sub	sp, #8
    346c:	af00      	add	r7, sp, #0
    346e:	6078      	str	r0, [r7, #4]
    vListInsertEnd(&xEventNonExecutablePool, (xListItem *)&((eveECB *)pxEvent)->xEventListItem);
    3470:	687b      	ldr	r3, [r7, #4]
    3472:	3320      	adds	r3, #32
    3474:	f640 00a8 	movw	r0, #2216	; 0x8a8
    3478:	f2c2 0000 	movt	r0, #8192	; 0x2000
    347c:	4619      	mov	r1, r3
    347e:	f000 fe87 	bl	4190 <vListInsertEnd>
}
    3482:	3708      	adds	r7, #8
    3484:	46bd      	mov	sp, r7
    3486:	bd80      	pop	{r7, pc}

00003488 <pxEventGenericReceive>:

xEventHandle pxEventGenericReceive()
{
    3488:	b580      	push	{r7, lr}
    348a:	b082      	sub	sp, #8
    348c:	af00      	add	r7, sp, #0
    // xEventReadyList must not be null, which is ensured by servant
    xListItem * pxEventList;

    taskENTER_CRITICAL();
    348e:	f002 fc2b 	bl	5ce8 <vPortEnterCritical>
    pxEventList= (xListItem *)xEventReadyList.xListEnd.pxNext;
    3492:	f640 03f8 	movw	r3, #2296	; 0x8f8
    3496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    349a:	68db      	ldr	r3, [r3, #12]
    349c:	607b      	str	r3, [r7, #4]
    vListRemove(pxEventList);
    349e:	6878      	ldr	r0, [r7, #4]
    34a0:	f000 fed6 	bl	4250 <vListRemove>
    vListInsertEnd(&xEventNonExecutablePool, pxEventList);  // reuse event, which will be update by servant 
    34a4:	f640 00a8 	movw	r0, #2216	; 0x8a8
    34a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    34ac:	6879      	ldr	r1, [r7, #4]
    34ae:	f000 fe6f 	bl	4190 <vListInsertEnd>
    taskEXIT_CRITICAL();
    34b2:	f002 fc2f 	bl	5d14 <vPortExitCritical>

    return (xEventHandle) pxEventList->pvOwner;
    34b6:	687b      	ldr	r3, [r7, #4]
    34b8:	68db      	ldr	r3, [r3, #12]
}
    34ba:	4618      	mov	r0, r3
    34bc:	3708      	adds	r7, #8
    34be:	46bd      	mov	sp, r7
    34c0:	bd80      	pop	{r7, pc}
    34c2:	bf00      	nop

000034c4 <vEventGenericUpdate>:

void vEventGenericUpdate( xEventHandle xEvent, portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData * xData)
{
    34c4:	b480      	push	{r7}
    34c6:	b087      	sub	sp, #28
    34c8:	af00      	add	r7, sp, #0
    34ca:	60f8      	str	r0, [r7, #12]
    34cc:	60b9      	str	r1, [r7, #8]
    34ce:	607a      	str	r2, [r7, #4]
    34d0:	603b      	str	r3, [r7, #0]
    eveECB * pxEvent = (eveECB *)xEvent;
    34d2:	68fb      	ldr	r3, [r7, #12]
    34d4:	617b      	str	r3, [r7, #20]
    pxEvent->pxSource = pxSource;
    34d6:	697b      	ldr	r3, [r7, #20]
    34d8:	68ba      	ldr	r2, [r7, #8]
    34da:	601a      	str	r2, [r3, #0]
    pxEvent->xTag.xDeadline = xDeadline;
    34dc:	697b      	ldr	r3, [r7, #20]
    34de:	687a      	ldr	r2, [r7, #4]
    34e0:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp; 
    34e2:	697b      	ldr	r3, [r7, #20]
    34e4:	683a      	ldr	r2, [r7, #0]
    34e6:	60da      	str	r2, [r3, #12]
    pxEvent->xTag.xMicroStep = 0;
    34e8:	697b      	ldr	r3, [r7, #20]
    34ea:	2200      	movs	r2, #0
    34ec:	615a      	str	r2, [r3, #20]
    pxEvent->xData = *xData;
    34ee:	697b      	ldr	r3, [r7, #20]
    34f0:	6a3a      	ldr	r2, [r7, #32]
    34f2:	3318      	adds	r3, #24
    34f4:	e892 0003 	ldmia.w	r2, {r0, r1}
    34f8:	e883 0003 	stmia.w	r3, {r0, r1}
}
    34fc:	371c      	adds	r7, #28
    34fe:	46bd      	mov	sp, r7
    3500:	f85d 7b04 	ldr.w	r7, [sp], #4
    3504:	4770      	bx	lr
    3506:	bf00      	nop

00003508 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    3508:	b580      	push	{r7, lr}
    350a:	b084      	sub	sp, #16
    350c:	af00      	add	r7, sp, #0
    350e:	6078      	str	r0, [r7, #4]
    xListItem * pxEventItem;
    taskENTER_CRITICAL();
    3510:	f002 fbea 	bl	5ce8 <vPortEnterCritical>

    pxEventItem = &((eveECB *)xEvent)->xEventListItem;
    3514:	687b      	ldr	r3, [r7, #4]
    3516:	3320      	adds	r3, #32
    3518:	60fb      	str	r3, [r7, #12]
    vListRemove (pxEventItem);
    351a:	68f8      	ldr	r0, [r7, #12]
    351c:	f000 fe98 	bl	4250 <vListRemove>
    vListInsertEnd( &xEventIdleList, pxEventItem );
    3520:	f640 0094 	movw	r0, #2196	; 0x894
    3524:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3528:	68f9      	ldr	r1, [r7, #12]
    352a:	f000 fe31 	bl	4190 <vListInsertEnd>

    taskEXIT_CRITICAL();
    352e:	f002 fbf1 	bl	5d14 <vPortExitCritical>
}
    3532:	3710      	adds	r7, #16
    3534:	46bd      	mov	sp, r7
    3536:	bd80      	pop	{r7, pc}

00003538 <vSemaphoreInitialise>:

extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    3538:	b580      	push	{r7, lr}
    353a:	b082      	sub	sp, #8
    353c:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    353e:	2300      	movs	r3, #0
    3540:	607b      	str	r3, [r7, #4]
    3542:	e033      	b.n	35ac <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    3544:	2001      	movs	r0, #1
    3546:	2100      	movs	r1, #0
    3548:	2203      	movs	r2, #3
    354a:	f000 fef7 	bl	433c <xQueueGenericCreate>
    354e:	4601      	mov	r1, r0
    3550:	f241 3354 	movw	r3, #4948	; 0x1354
    3554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3558:	687a      	ldr	r2, [r7, #4]
    355a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    355e:	f241 3354 	movw	r3, #4948	; 0x1354
    3562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3566:	687a      	ldr	r2, [r7, #4]
    3568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    356c:	2b00      	cmp	r3, #0
    356e:	d00c      	beq.n	358a <vSemaphoreInitialise+0x52>
    3570:	f241 3354 	movw	r3, #4948	; 0x1354
    3574:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3578:	687a      	ldr	r2, [r7, #4]
    357a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    357e:	4618      	mov	r0, r3
    3580:	2100      	movs	r1, #0
    3582:	2200      	movs	r2, #0
    3584:	2300      	movs	r3, #0
    3586:	f000 ff67 	bl	4458 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    358a:	f241 3354 	movw	r3, #4948	; 0x1354
    358e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3592:	687a      	ldr	r2, [r7, #4]
    3594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3598:	4618      	mov	r0, r3
    359a:	2100      	movs	r1, #0
    359c:	f04f 32ff 	mov.w	r2, #4294967295
    35a0:	2300      	movs	r3, #0
    35a2:	f001 f81f 	bl	45e4 <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    35a6:	687b      	ldr	r3, [r7, #4]
    35a8:	3301      	adds	r3, #1
    35aa:	607b      	str	r3, [r7, #4]
    35ac:	687b      	ldr	r3, [r7, #4]
    35ae:	2b03      	cmp	r3, #3
    35b0:	ddc8      	ble.n	3544 <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    35b2:	3708      	adds	r7, #8
    35b4:	46bd      	mov	sp, r7
    35b6:	bd80      	pop	{r7, pc}

000035b8 <vContextInit>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vContextInit()
{
    35b8:	b480      	push	{r7}
    35ba:	b085      	sub	sp, #20
    35bc:	af00      	add	r7, sp, #0
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    35be:	2300      	movs	r3, #0
    35c0:	60fb      	str	r3, [r7, #12]
    35c2:	e0a1      	b.n	3708 <vContextInit+0x150>
    {
        xContexts[i].xMyFlag = i;
    35c4:	f640 120c 	movw	r2, #2316	; 0x90c
    35c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35cc:	68f9      	ldr	r1, [r7, #12]
    35ce:	460b      	mov	r3, r1
    35d0:	00db      	lsls	r3, r3, #3
    35d2:	1a5b      	subs	r3, r3, r1
    35d4:	00db      	lsls	r3, r3, #3
    35d6:	4413      	add	r3, r2
    35d8:	68fa      	ldr	r2, [r7, #12]
    35da:	601a      	str	r2, [r3, #0]
        xContexts[i].xType = 2;
    35dc:	f640 120c 	movw	r2, #2316	; 0x90c
    35e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35e4:	68f9      	ldr	r1, [r7, #12]
    35e6:	460b      	mov	r3, r1
    35e8:	00db      	lsls	r3, r3, #3
    35ea:	1a5b      	subs	r3, r3, r1
    35ec:	00db      	lsls	r3, r3, #3
    35ee:	4413      	add	r3, r2
    35f0:	3304      	adds	r3, #4
    35f2:	2202      	movs	r2, #2
    35f4:	601a      	str	r2, [r3, #0]
        xContexts[i].xCount = 1; // the first period of task is used to init system
    35f6:	f640 120c 	movw	r2, #2316	; 0x90c
    35fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35fe:	68f9      	ldr	r1, [r7, #12]
    3600:	460b      	mov	r3, r1
    3602:	00db      	lsls	r3, r3, #3
    3604:	1a5b      	subs	r3, r3, r1
    3606:	00db      	lsls	r3, r3, #3
    3608:	4413      	add	r3, r2
    360a:	3308      	adds	r3, #8
    360c:	2201      	movs	r2, #1
    360e:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfIn = 0;
    3610:	f640 120c 	movw	r2, #2316	; 0x90c
    3614:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3618:	68f9      	ldr	r1, [r7, #12]
    361a:	460b      	mov	r3, r1
    361c:	00db      	lsls	r3, r3, #3
    361e:	1a5b      	subs	r3, r3, r1
    3620:	00db      	lsls	r3, r3, #3
    3622:	4413      	add	r3, r2
    3624:	330c      	adds	r3, #12
    3626:	2200      	movs	r2, #0
    3628:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfOut = 0;
    362a:	f640 120c 	movw	r2, #2316	; 0x90c
    362e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3632:	68f9      	ldr	r1, [r7, #12]
    3634:	460b      	mov	r3, r1
    3636:	00db      	lsls	r3, r3, #3
    3638:	1a5b      	subs	r3, r3, r1
    363a:	00db      	lsls	r3, r3, #3
    363c:	4413      	add	r3, r2
    363e:	3310      	adds	r3, #16
    3640:	2200      	movs	r2, #0
    3642:	601a      	str	r2, [r3, #0]
        xContexts[i].xLet = xLetOfServant[i];
    3644:	f240 03c4 	movw	r3, #196	; 0xc4
    3648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    364c:	68fa      	ldr	r2, [r7, #12]
    364e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3652:	f640 120c 	movw	r2, #2316	; 0x90c
    3656:	f2c2 0200 	movt	r2, #8192	; 0x2000
    365a:	68f9      	ldr	r1, [r7, #12]
    365c:	460b      	mov	r3, r1
    365e:	00db      	lsls	r3, r3, #3
    3660:	1a5b      	subs	r3, r3, r1
    3662:	00db      	lsls	r3, r3, #3
    3664:	4413      	add	r3, r2
    3666:	3324      	adds	r3, #36	; 0x24
    3668:	6018      	str	r0, [r3, #0]
        xContexts[i].xFp = xServantTable[i];
    366a:	f240 4374 	movw	r3, #1140	; 0x474
    366e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3672:	68fa      	ldr	r2, [r7, #12]
    3674:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3678:	f640 120c 	movw	r2, #2316	; 0x90c
    367c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3680:	68f9      	ldr	r1, [r7, #12]
    3682:	460b      	mov	r3, r1
    3684:	00db      	lsls	r3, r3, #3
    3686:	1a5b      	subs	r3, r3, r1
    3688:	00db      	lsls	r3, r3, #3
    368a:	4413      	add	r3, r2
    368c:	3328      	adds	r3, #40	; 0x28
    368e:	6018      	str	r0, [r3, #0]
        xContexts[i].xTaskId = xTaskOfServant[i];
    3690:	f240 1380 	movw	r3, #384	; 0x180
    3694:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3698:	68fa      	ldr	r2, [r7, #12]
    369a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    369e:	f640 120c 	movw	r2, #2316	; 0x90c
    36a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36a6:	68f9      	ldr	r1, [r7, #12]
    36a8:	460b      	mov	r3, r1
    36aa:	00db      	lsls	r3, r3, #3
    36ac:	1a5b      	subs	r3, r3, r1
    36ae:	00db      	lsls	r3, r3, #3
    36b0:	4413      	add	r3, r2
    36b2:	3330      	adds	r3, #48	; 0x30
    36b4:	6018      	str	r0, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
    36b6:	f240 1380 	movw	r3, #384	; 0x180
    36ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36be:	68fa      	ldr	r2, [r7, #12]
    36c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    36c4:	f240 0328 	movw	r3, #40	; 0x28
    36c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36cc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    36d0:	f640 120c 	movw	r2, #2316	; 0x90c
    36d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36d8:	68f9      	ldr	r1, [r7, #12]
    36da:	460b      	mov	r3, r1
    36dc:	00db      	lsls	r3, r3, #3
    36de:	1a5b      	subs	r3, r3, r1
    36e0:	00db      	lsls	r3, r3, #3
    36e2:	4413      	add	r3, r2
    36e4:	332c      	adds	r3, #44	; 0x2c
    36e6:	6018      	str	r0, [r3, #0]
        xContexts[i].xInBoolCount = 0;
    36e8:	f640 120c 	movw	r2, #2316	; 0x90c
    36ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36f0:	68f9      	ldr	r1, [r7, #12]
    36f2:	460b      	mov	r3, r1
    36f4:	00db      	lsls	r3, r3, #3
    36f6:	1a5b      	subs	r3, r3, r1
    36f8:	00db      	lsls	r3, r3, #3
    36fa:	4413      	add	r3, r2
    36fc:	3334      	adds	r3, #52	; 0x34
    36fe:	2200      	movs	r2, #0
    3700:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    3702:	68fb      	ldr	r3, [r7, #12]
    3704:	3301      	adds	r3, #1
    3706:	60fb      	str	r3, [r7, #12]
    3708:	68fb      	ldr	r3, [r7, #12]
    370a:	2b2e      	cmp	r3, #46	; 0x2e
    370c:	f77f af5a 	ble.w	35c4 <vContextInit+0xc>
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    3710:	2300      	movs	r3, #0
    3712:	60fb      	str	r3, [r7, #12]
    3714:	e028      	b.n	3768 <vContextInit+0x1b0>
    {
        xContexts[xSensorOfTask[i]].xType = 1;
    3716:	f240 035c 	movw	r3, #92	; 0x5c
    371a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    371e:	68fa      	ldr	r2, [r7, #12]
    3720:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3724:	f640 120c 	movw	r2, #2316	; 0x90c
    3728:	f2c2 0200 	movt	r2, #8192	; 0x2000
    372c:	460b      	mov	r3, r1
    372e:	00db      	lsls	r3, r3, #3
    3730:	1a5b      	subs	r3, r3, r1
    3732:	00db      	lsls	r3, r3, #3
    3734:	4413      	add	r3, r2
    3736:	3304      	adds	r3, #4
    3738:	2201      	movs	r2, #1
    373a:	601a      	str	r2, [r3, #0]
        xContexts[xActuatorOfTask[i]].xType = 3;
    373c:	f240 0390 	movw	r3, #144	; 0x90
    3740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3744:	68fa      	ldr	r2, [r7, #12]
    3746:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    374a:	f640 120c 	movw	r2, #2316	; 0x90c
    374e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3752:	460b      	mov	r3, r1
    3754:	00db      	lsls	r3, r3, #3
    3756:	1a5b      	subs	r3, r3, r1
    3758:	00db      	lsls	r3, r3, #3
    375a:	4413      	add	r3, r2
    375c:	3304      	adds	r3, #4
    375e:	2203      	movs	r2, #3
    3760:	601a      	str	r2, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    3762:	68fb      	ldr	r3, [r7, #12]
    3764:	3301      	adds	r3, #1
    3766:	60fb      	str	r3, [r7, #12]
    3768:	68fb      	ldr	r3, [r7, #12]
    376a:	2b0c      	cmp	r3, #12
    376c:	ddd3      	ble.n	3716 <vContextInit+0x15e>
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    376e:	2300      	movs	r3, #0
    3770:	60fb      	str	r3, [r7, #12]
    3772:	e084      	b.n	387e <vContextInit+0x2c6>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    3774:	f240 223c 	movw	r2, #572	; 0x23c
    3778:	f2c2 0200 	movt	r2, #8192	; 0x2000
    377c:	68f9      	ldr	r1, [r7, #12]
    377e:	460b      	mov	r3, r1
    3780:	005b      	lsls	r3, r3, #1
    3782:	440b      	add	r3, r1
    3784:	009b      	lsls	r3, r3, #2
    3786:	4413      	add	r3, r2
    3788:	3304      	adds	r3, #4
    378a:	681b      	ldr	r3, [r3, #0]
    378c:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    378e:	f240 223c 	movw	r2, #572	; 0x23c
    3792:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3796:	68f9      	ldr	r1, [r7, #12]
    3798:	460b      	mov	r3, r1
    379a:	005b      	lsls	r3, r3, #1
    379c:	440b      	add	r3, r1
    379e:	009b      	lsls	r3, r3, #2
    37a0:	4413      	add	r3, r2
    37a2:	3308      	adds	r3, #8
    37a4:	681b      	ldr	r3, [r3, #0]
    37a6:	607b      	str	r3, [r7, #4]

        xContexts[xSource].xOutFlag[xContexts[xSource].xNumOfOut] = xDest;
    37a8:	f640 120c 	movw	r2, #2316	; 0x90c
    37ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37b0:	68b9      	ldr	r1, [r7, #8]
    37b2:	460b      	mov	r3, r1
    37b4:	00db      	lsls	r3, r3, #3
    37b6:	1a5b      	subs	r3, r3, r1
    37b8:	00db      	lsls	r3, r3, #3
    37ba:	4413      	add	r3, r2
    37bc:	3310      	adds	r3, #16
    37be:	6818      	ldr	r0, [r3, #0]
    37c0:	f640 120c 	movw	r2, #2316	; 0x90c
    37c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37c8:	68b9      	ldr	r1, [r7, #8]
    37ca:	460b      	mov	r3, r1
    37cc:	00db      	lsls	r3, r3, #3
    37ce:	1a5b      	subs	r3, r3, r1
    37d0:	005b      	lsls	r3, r3, #1
    37d2:	4403      	add	r3, r0
    37d4:	3306      	adds	r3, #6
    37d6:	009b      	lsls	r3, r3, #2
    37d8:	4413      	add	r3, r2
    37da:	687a      	ldr	r2, [r7, #4]
    37dc:	605a      	str	r2, [r3, #4]
        xContexts[xSource].xNumOfOut ++;
    37de:	f640 120c 	movw	r2, #2316	; 0x90c
    37e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37e6:	68b9      	ldr	r1, [r7, #8]
    37e8:	460b      	mov	r3, r1
    37ea:	00db      	lsls	r3, r3, #3
    37ec:	1a5b      	subs	r3, r3, r1
    37ee:	00db      	lsls	r3, r3, #3
    37f0:	4413      	add	r3, r2
    37f2:	3310      	adds	r3, #16
    37f4:	681b      	ldr	r3, [r3, #0]
    37f6:	1c58      	adds	r0, r3, #1
    37f8:	f640 120c 	movw	r2, #2316	; 0x90c
    37fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3800:	68b9      	ldr	r1, [r7, #8]
    3802:	460b      	mov	r3, r1
    3804:	00db      	lsls	r3, r3, #3
    3806:	1a5b      	subs	r3, r3, r1
    3808:	00db      	lsls	r3, r3, #3
    380a:	4413      	add	r3, r2
    380c:	3310      	adds	r3, #16
    380e:	6018      	str	r0, [r3, #0]

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
    3810:	f640 120c 	movw	r2, #2316	; 0x90c
    3814:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3818:	6879      	ldr	r1, [r7, #4]
    381a:	460b      	mov	r3, r1
    381c:	00db      	lsls	r3, r3, #3
    381e:	1a5b      	subs	r3, r3, r1
    3820:	00db      	lsls	r3, r3, #3
    3822:	4413      	add	r3, r2
    3824:	330c      	adds	r3, #12
    3826:	6818      	ldr	r0, [r3, #0]
    3828:	f640 120c 	movw	r2, #2316	; 0x90c
    382c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3830:	6879      	ldr	r1, [r7, #4]
    3832:	460b      	mov	r3, r1
    3834:	00db      	lsls	r3, r3, #3
    3836:	1a5b      	subs	r3, r3, r1
    3838:	005b      	lsls	r3, r3, #1
    383a:	4403      	add	r3, r0
    383c:	3304      	adds	r3, #4
    383e:	009b      	lsls	r3, r3, #2
    3840:	4413      	add	r3, r2
    3842:	68ba      	ldr	r2, [r7, #8]
    3844:	605a      	str	r2, [r3, #4]
        xContexts[xDest].xNumOfIn ++;
    3846:	f640 120c 	movw	r2, #2316	; 0x90c
    384a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    384e:	6879      	ldr	r1, [r7, #4]
    3850:	460b      	mov	r3, r1
    3852:	00db      	lsls	r3, r3, #3
    3854:	1a5b      	subs	r3, r3, r1
    3856:	00db      	lsls	r3, r3, #3
    3858:	4413      	add	r3, r2
    385a:	330c      	adds	r3, #12
    385c:	681b      	ldr	r3, [r3, #0]
    385e:	1c58      	adds	r0, r3, #1
    3860:	f640 120c 	movw	r2, #2316	; 0x90c
    3864:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3868:	6879      	ldr	r1, [r7, #4]
    386a:	460b      	mov	r3, r1
    386c:	00db      	lsls	r3, r3, #3
    386e:	1a5b      	subs	r3, r3, r1
    3870:	00db      	lsls	r3, r3, #3
    3872:	4413      	add	r3, r2
    3874:	330c      	adds	r3, #12
    3876:	6018      	str	r0, [r3, #0]
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3878:	68fb      	ldr	r3, [r7, #12]
    387a:	3301      	adds	r3, #1
    387c:	60fb      	str	r3, [r7, #12]
    387e:	f240 233c 	movw	r3, #572	; 0x23c
    3882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3886:	681a      	ldr	r2, [r3, #0]
    3888:	68fb      	ldr	r3, [r7, #12]
    388a:	429a      	cmp	r2, r3
    388c:	f73f af72 	bgt.w	3774 <vContextInit+0x1bc>
        xContexts[xSource].xNumOfOut ++;

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
        xContexts[xDest].xNumOfIn ++;
    }
}
    3890:	3714      	adds	r7, #20
    3892:	46bd      	mov	sp, r7
    3894:	f85d 7b04 	ldr.w	r7, [sp], #4
    3898:	4770      	bx	lr
    389a:	bf00      	nop

0000389c <vSensor>:

void vSensor( void * pvParameter )
{
    389c:	b580      	push	{r7, lr}
    389e:	b08c      	sub	sp, #48	; 0x30
    38a0:	af02      	add	r7, sp, #8
    38a2:	6078      	str	r0, [r7, #4]
    struct tag * xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );
    38a4:	f241 3354 	movw	r3, #4948	; 0x1354
    38a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38ac:	685b      	ldr	r3, [r3, #4]
    38ae:	4618      	mov	r0, r3
    38b0:	2100      	movs	r1, #0
    38b2:	f04f 32ff 	mov.w	r2, #4294967295
    38b6:	2300      	movs	r3, #0
    38b8:	f000 fe94 	bl	45e4 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    38bc:	e06f      	b.n	399e <vSensor+0x102>
        {
            if(boolFlag == 0)
    38be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    38c0:	2b00      	cmp	r3, #0
    38c2:	d100      	bne.n	38c6 <vSensor+0x2a>
                continue;
    38c4:	e06b      	b.n	399e <vSensor+0x102>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    38c6:	f7ff fddf 	bl	3488 <pxEventGenericReceive>
    38ca:	6238      	str	r0, [r7, #32]
            xMyFlag = xEventGetpxDestination( pxEvent );
    38cc:	6a38      	ldr	r0, [r7, #32]
    38ce:	f7ff f861 	bl	2994 <xEventGetpxDestination>
    38d2:	61f8      	str	r0, [r7, #28]
            xMyData = xEventGetxData( pxEvent );
    38d4:	6a38      	ldr	r0, [r7, #32]
    38d6:	f7ff f875 	bl	29c4 <xEventGetxData>
    38da:	61b8      	str	r0, [r7, #24]
            xMyTag = xEventGetxTag( pxEvent );
    38dc:	6a38      	ldr	r0, [r7, #32]
    38de:	f7ff f865 	bl	29ac <xEventGetxTag>
    38e2:	6178      	str	r0, [r7, #20]
            xContexts[xMyFlag].xCount ++;
    38e4:	f640 120c 	movw	r2, #2316	; 0x90c
    38e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38ec:	69f9      	ldr	r1, [r7, #28]
    38ee:	460b      	mov	r3, r1
    38f0:	00db      	lsls	r3, r3, #3
    38f2:	1a5b      	subs	r3, r3, r1
    38f4:	00db      	lsls	r3, r3, #3
    38f6:	4413      	add	r3, r2
    38f8:	3308      	adds	r3, #8
    38fa:	681b      	ldr	r3, [r3, #0]
    38fc:	1c58      	adds	r0, r3, #1
    38fe:	f640 120c 	movw	r2, #2316	; 0x90c
    3902:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3906:	69f9      	ldr	r1, [r7, #28]
    3908:	460b      	mov	r3, r1
    390a:	00db      	lsls	r3, r3, #3
    390c:	1a5b      	subs	r3, r3, r1
    390e:	00db      	lsls	r3, r3, #3
    3910:	4413      	add	r3, r2
    3912:	3308      	adds	r3, #8
    3914:	6018      	str	r0, [r3, #0]
            xDeadline= xContexts[xMyFlag].xPeriod * xContexts[xMyFlag].xCount;
    3916:	f640 120c 	movw	r2, #2316	; 0x90c
    391a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    391e:	69f9      	ldr	r1, [r7, #28]
    3920:	460b      	mov	r3, r1
    3922:	00db      	lsls	r3, r3, #3
    3924:	1a5b      	subs	r3, r3, r1
    3926:	00db      	lsls	r3, r3, #3
    3928:	4413      	add	r3, r2
    392a:	332c      	adds	r3, #44	; 0x2c
    392c:	6818      	ldr	r0, [r3, #0]
    392e:	f640 120c 	movw	r2, #2316	; 0x90c
    3932:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3936:	69f9      	ldr	r1, [r7, #28]
    3938:	460b      	mov	r3, r1
    393a:	00db      	lsls	r3, r3, #3
    393c:	1a5b      	subs	r3, r3, r1
    393e:	00db      	lsls	r3, r3, #3
    3940:	4413      	add	r3, r2
    3942:	3308      	adds	r3, #8
    3944:	681b      	ldr	r3, [r3, #0]
    3946:	fb03 f300 	mul.w	r3, r3, r0
    394a:	613b      	str	r3, [r7, #16]
            xTimestamp = xMyTag->xTimestamp + INPUT;   
    394c:	697b      	ldr	r3, [r7, #20]
    394e:	685b      	ldr	r3, [r3, #4]
    3950:	3303      	adds	r3, #3
    3952:	60fb      	str	r3, [r7, #12]
            xFutureModelTime = xTimestamp;  // init the future model time to the start of LET execution duration.
    3954:	f240 635c 	movw	r3, #1628	; 0x65c
    3958:	f2c2 0300 	movt	r3, #8192	; 0x2000
    395c:	68fa      	ldr	r2, [r7, #12]
    395e:	601a      	str	r2, [r3, #0]
            vPrintNumber(xMyFlag);
    3960:	69f8      	ldr	r0, [r7, #28]
    3962:	f013 fe39 	bl	175d8 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3966:	f001 fcf1 	bl	534c <xTaskGetTickCount>
    396a:	4603      	mov	r3, r0
    396c:	4618      	mov	r0, r3
    396e:	f013 fe33 	bl	175d8 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
    3972:	f640 120c 	movw	r2, #2316	; 0x90c
    3976:	f2c2 0200 	movt	r2, #8192	; 0x2000
    397a:	69f9      	ldr	r1, [r7, #28]
    397c:	460b      	mov	r3, r1
    397e:	00db      	lsls	r3, r3, #3
    3980:	1a5b      	subs	r3, r3, r1
    3982:	00db      	lsls	r3, r3, #3
    3984:	4413      	add	r3, r2
    3986:	3328      	adds	r3, #40	; 0x28
    3988:	681b      	ldr	r3, [r3, #0]
    398a:	69b8      	ldr	r0, [r7, #24]
    398c:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData );  // reuse event
    398e:	69bb      	ldr	r3, [r7, #24]
    3990:	9300      	str	r3, [sp, #0]
    3992:	6a38      	ldr	r0, [r7, #32]
    3994:	69f9      	ldr	r1, [r7, #28]
    3996:	693a      	ldr	r2, [r7, #16]
    3998:	68fb      	ldr	r3, [r7, #12]
    399a:	f7ff fd93 	bl	34c4 <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    399e:	f7fe ffb3 	bl	2908 <xIsERLNull>
    39a2:	6278      	str	r0, [r7, #36]	; 0x24
    39a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    39a6:	f1b3 3fff 	cmp.w	r3, #4294967295
    39aa:	d188      	bne.n	38be <vSensor+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData );  // reuse event
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    39ac:	f241 3354 	movw	r3, #4948	; 0x1354
    39b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39b4:	681b      	ldr	r3, [r3, #0]
    39b6:	4618      	mov	r0, r3
    39b8:	2100      	movs	r1, #0
    39ba:	2200      	movs	r2, #0
    39bc:	2300      	movs	r3, #0
    39be:	f000 fd4b 	bl	4458 <xQueueGenericSend>
    }
    39c2:	e76f      	b.n	38a4 <vSensor+0x8>

000039c4 <vServant>:
}

void vServant( void * pvParameter )
{
    39c4:	b580      	push	{r7, lr}
    39c6:	b08c      	sub	sp, #48	; 0x30
    39c8:	af02      	add	r7, sp, #8
    39ca:	6078      	str	r0, [r7, #4]
    struct eventData * xMyData;
    struct tag * xMyTag;
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );
    39cc:	f241 3354 	movw	r3, #4948	; 0x1354
    39d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39d4:	689b      	ldr	r3, [r3, #8]
    39d6:	4618      	mov	r0, r3
    39d8:	2100      	movs	r1, #0
    39da:	f04f 32ff 	mov.w	r2, #4294967295
    39de:	2300      	movs	r3, #0
    39e0:	f000 fe00 	bl	45e4 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    39e4:	e098      	b.n	3b18 <vServant+0x154>
        {
            if(boolFlag == 0)
    39e6:	6a3b      	ldr	r3, [r7, #32]
    39e8:	2b00      	cmp	r3, #0
    39ea:	d100      	bne.n	39ee <vServant+0x2a>
                continue;
    39ec:	e094      	b.n	3b18 <vServant+0x154>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    39ee:	f7ff fd4b 	bl	3488 <pxEventGenericReceive>
    39f2:	61f8      	str	r0, [r7, #28]
            xMyFlag = xEventGetpxDestination( pxEvent );
    39f4:	69f8      	ldr	r0, [r7, #28]
    39f6:	f7fe ffcd 	bl	2994 <xEventGetpxDestination>
    39fa:	61b8      	str	r0, [r7, #24]
            xMyData = xEventGetxData( pxEvent );
    39fc:	69f8      	ldr	r0, [r7, #28]
    39fe:	f7fe ffe1 	bl	29c4 <xEventGetxData>
    3a02:	6178      	str	r0, [r7, #20]
            xMyTag = xEventGetxTag( pxEvent );
    3a04:	69f8      	ldr	r0, [r7, #28]
    3a06:	f7fe ffd1 	bl	29ac <xEventGetxTag>
    3a0a:	6138      	str	r0, [r7, #16]
            xContexts[xMyFlag].xCount ++;
    3a0c:	f640 120c 	movw	r2, #2316	; 0x90c
    3a10:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a14:	69b9      	ldr	r1, [r7, #24]
    3a16:	460b      	mov	r3, r1
    3a18:	00db      	lsls	r3, r3, #3
    3a1a:	1a5b      	subs	r3, r3, r1
    3a1c:	00db      	lsls	r3, r3, #3
    3a1e:	4413      	add	r3, r2
    3a20:	3308      	adds	r3, #8
    3a22:	681b      	ldr	r3, [r3, #0]
    3a24:	1c58      	adds	r0, r3, #1
    3a26:	f640 120c 	movw	r2, #2316	; 0x90c
    3a2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a2e:	69b9      	ldr	r1, [r7, #24]
    3a30:	460b      	mov	r3, r1
    3a32:	00db      	lsls	r3, r3, #3
    3a34:	1a5b      	subs	r3, r3, r1
    3a36:	00db      	lsls	r3, r3, #3
    3a38:	4413      	add	r3, r2
    3a3a:	3308      	adds	r3, #8
    3a3c:	6018      	str	r0, [r3, #0]
            xDeadline = xContexts[xMyFlag].xPeriod * xContexts[xMyFlag].xCount;
    3a3e:	f640 120c 	movw	r2, #2316	; 0x90c
    3a42:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a46:	69b9      	ldr	r1, [r7, #24]
    3a48:	460b      	mov	r3, r1
    3a4a:	00db      	lsls	r3, r3, #3
    3a4c:	1a5b      	subs	r3, r3, r1
    3a4e:	00db      	lsls	r3, r3, #3
    3a50:	4413      	add	r3, r2
    3a52:	332c      	adds	r3, #44	; 0x2c
    3a54:	6818      	ldr	r0, [r3, #0]
    3a56:	f640 120c 	movw	r2, #2316	; 0x90c
    3a5a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a5e:	69b9      	ldr	r1, [r7, #24]
    3a60:	460b      	mov	r3, r1
    3a62:	00db      	lsls	r3, r3, #3
    3a64:	1a5b      	subs	r3, r3, r1
    3a66:	00db      	lsls	r3, r3, #3
    3a68:	4413      	add	r3, r2
    3a6a:	3308      	adds	r3, #8
    3a6c:	681b      	ldr	r3, [r3, #0]
    3a6e:	fb03 f300 	mul.w	r3, r3, r0
    3a72:	60fb      	str	r3, [r7, #12]
            // set the timestamp of event in terms of destination servant
            // if destination is actuator, then set as the EndOfLET
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
    3a74:	f640 120c 	movw	r2, #2316	; 0x90c
    3a78:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a7c:	69b9      	ldr	r1, [r7, #24]
    3a7e:	460b      	mov	r3, r1
    3a80:	00db      	lsls	r3, r3, #3
    3a82:	1a5b      	subs	r3, r3, r1
    3a84:	00db      	lsls	r3, r3, #3
    3a86:	4413      	add	r3, r2
    3a88:	331c      	adds	r3, #28
    3a8a:	681b      	ldr	r3, [r3, #0]
    3a8c:	60bb      	str	r3, [r7, #8]
            switch(xContexts[pxDestination].xType)
    3a8e:	f640 120c 	movw	r2, #2316	; 0x90c
    3a92:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a96:	68b9      	ldr	r1, [r7, #8]
    3a98:	460b      	mov	r3, r1
    3a9a:	00db      	lsls	r3, r3, #3
    3a9c:	1a5b      	subs	r3, r3, r1
    3a9e:	00db      	lsls	r3, r3, #3
    3aa0:	4413      	add	r3, r2
    3aa2:	3304      	adds	r3, #4
    3aa4:	681b      	ldr	r3, [r3, #0]
    3aa6:	2b02      	cmp	r3, #2
    3aa8:	d002      	beq.n	3ab0 <vServant+0xec>
    3aaa:	2b03      	cmp	r3, #3
    3aac:	d011      	beq.n	3ad2 <vServant+0x10e>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xDeadline - OUTPUT; 
                    break;
                default:
                    break;
    3aae:	e014      	b.n	3ada <vServant+0x116>
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
            switch(xContexts[pxDestination].xType)
            {
                case 2:
                    xTimestamp = xMyTag->xTimestamp + xContexts[xMyFlag].xLet;
    3ab0:	693b      	ldr	r3, [r7, #16]
    3ab2:	6858      	ldr	r0, [r3, #4]
    3ab4:	f640 120c 	movw	r2, #2316	; 0x90c
    3ab8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3abc:	69b9      	ldr	r1, [r7, #24]
    3abe:	460b      	mov	r3, r1
    3ac0:	00db      	lsls	r3, r3, #3
    3ac2:	1a5b      	subs	r3, r3, r1
    3ac4:	00db      	lsls	r3, r3, #3
    3ac6:	4413      	add	r3, r2
    3ac8:	3324      	adds	r3, #36	; 0x24
    3aca:	681b      	ldr	r3, [r3, #0]
    3acc:	4403      	add	r3, r0
    3ace:	627b      	str	r3, [r7, #36]	; 0x24
                    break;
    3ad0:	e003      	b.n	3ada <vServant+0x116>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xDeadline - OUTPUT; 
    3ad2:	68fb      	ldr	r3, [r7, #12]
    3ad4:	3b03      	subs	r3, #3
    3ad6:	627b      	str	r3, [r7, #36]	; 0x24
                    break;
    3ad8:	bf00      	nop
                default:
                    break;
                    // wrong events type
            }
            vPrintNumber(xMyFlag);
    3ada:	69b8      	ldr	r0, [r7, #24]
    3adc:	f013 fd7c 	bl	175d8 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3ae0:	f001 fc34 	bl	534c <xTaskGetTickCount>
    3ae4:	4603      	mov	r3, r0
    3ae6:	4618      	mov	r0, r3
    3ae8:	f013 fd76 	bl	175d8 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
    3aec:	f640 120c 	movw	r2, #2316	; 0x90c
    3af0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3af4:	69b9      	ldr	r1, [r7, #24]
    3af6:	460b      	mov	r3, r1
    3af8:	00db      	lsls	r3, r3, #3
    3afa:	1a5b      	subs	r3, r3, r1
    3afc:	00db      	lsls	r3, r3, #3
    3afe:	4413      	add	r3, r2
    3b00:	3328      	adds	r3, #40	; 0x28
    3b02:	681b      	ldr	r3, [r3, #0]
    3b04:	6978      	ldr	r0, [r7, #20]
    3b06:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData );
    3b08:	697b      	ldr	r3, [r7, #20]
    3b0a:	9300      	str	r3, [sp, #0]
    3b0c:	69f8      	ldr	r0, [r7, #28]
    3b0e:	69b9      	ldr	r1, [r7, #24]
    3b10:	68fa      	ldr	r2, [r7, #12]
    3b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3b14:	f7ff fcd6 	bl	34c4 <vEventGenericUpdate>
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3b18:	f7fe fef6 	bl	2908 <xIsERLNull>
    3b1c:	6238      	str	r0, [r7, #32]
    3b1e:	6a3b      	ldr	r3, [r7, #32]
    3b20:	f1b3 3fff 	cmp.w	r3, #4294967295
    3b24:	f47f af5f 	bne.w	39e6 <vServant+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData );
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3b28:	f241 3354 	movw	r3, #4948	; 0x1354
    3b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b30:	681b      	ldr	r3, [r3, #0]
    3b32:	4618      	mov	r0, r3
    3b34:	2100      	movs	r1, #0
    3b36:	2200      	movs	r2, #0
    3b38:	2300      	movs	r3, #0
    3b3a:	f000 fc8d 	bl	4458 <xQueueGenericSend>
    }
    3b3e:	e745      	b.n	39cc <vServant+0x8>

00003b40 <vActuator>:

}

void vActuator( void * pvParameter )
{
    3b40:	b580      	push	{r7, lr}
    3b42:	b08c      	sub	sp, #48	; 0x30
    3b44:	af02      	add	r7, sp, #8
    3b46:	6078      	str	r0, [r7, #4]
    struct tag * xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );
    3b48:	f241 3354 	movw	r3, #4948	; 0x1354
    3b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b50:	68db      	ldr	r3, [r3, #12]
    3b52:	4618      	mov	r0, r3
    3b54:	2100      	movs	r1, #0
    3b56:	f04f 32ff 	mov.w	r2, #4294967295
    3b5a:	2300      	movs	r3, #0
    3b5c:	f000 fd42 	bl	45e4 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3b60:	e069      	b.n	3c36 <vActuator+0xf6>
        {
            if(boolFlag == 0)
    3b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3b64:	2b00      	cmp	r3, #0
    3b66:	d100      	bne.n	3b6a <vActuator+0x2a>
                continue;
    3b68:	e065      	b.n	3c36 <vActuator+0xf6>

            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    3b6a:	f7ff fc8d 	bl	3488 <pxEventGenericReceive>
    3b6e:	6238      	str	r0, [r7, #32]
            xMyFlag = xEventGetpxDestination( pxEvent );
    3b70:	6a38      	ldr	r0, [r7, #32]
    3b72:	f7fe ff0f 	bl	2994 <xEventGetpxDestination>
    3b76:	61f8      	str	r0, [r7, #28]
            xMyData = xEventGetxData( pxEvent );
    3b78:	6a38      	ldr	r0, [r7, #32]
    3b7a:	f7fe ff23 	bl	29c4 <xEventGetxData>
    3b7e:	61b8      	str	r0, [r7, #24]
            xMyTag = xEventGetxTag( pxEvent );
    3b80:	6a38      	ldr	r0, [r7, #32]
    3b82:	f7fe ff13 	bl	29ac <xEventGetxTag>
    3b86:	6178      	str	r0, [r7, #20]
            xContexts[xMyFlag].xCount ++;
    3b88:	f640 120c 	movw	r2, #2316	; 0x90c
    3b8c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b90:	69f9      	ldr	r1, [r7, #28]
    3b92:	460b      	mov	r3, r1
    3b94:	00db      	lsls	r3, r3, #3
    3b96:	1a5b      	subs	r3, r3, r1
    3b98:	00db      	lsls	r3, r3, #3
    3b9a:	4413      	add	r3, r2
    3b9c:	3308      	adds	r3, #8
    3b9e:	681b      	ldr	r3, [r3, #0]
    3ba0:	1c58      	adds	r0, r3, #1
    3ba2:	f640 120c 	movw	r2, #2316	; 0x90c
    3ba6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3baa:	69f9      	ldr	r1, [r7, #28]
    3bac:	460b      	mov	r3, r1
    3bae:	00db      	lsls	r3, r3, #3
    3bb0:	1a5b      	subs	r3, r3, r1
    3bb2:	00db      	lsls	r3, r3, #3
    3bb4:	4413      	add	r3, r2
    3bb6:	3308      	adds	r3, #8
    3bb8:	6018      	str	r0, [r3, #0]
            xDeadline = xContexts[xMyFlag].xPeriod * xContexts[xMyFlag].xCount;
    3bba:	f640 120c 	movw	r2, #2316	; 0x90c
    3bbe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3bc2:	69f9      	ldr	r1, [r7, #28]
    3bc4:	460b      	mov	r3, r1
    3bc6:	00db      	lsls	r3, r3, #3
    3bc8:	1a5b      	subs	r3, r3, r1
    3bca:	00db      	lsls	r3, r3, #3
    3bcc:	4413      	add	r3, r2
    3bce:	332c      	adds	r3, #44	; 0x2c
    3bd0:	6818      	ldr	r0, [r3, #0]
    3bd2:	f640 120c 	movw	r2, #2316	; 0x90c
    3bd6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3bda:	69f9      	ldr	r1, [r7, #28]
    3bdc:	460b      	mov	r3, r1
    3bde:	00db      	lsls	r3, r3, #3
    3be0:	1a5b      	subs	r3, r3, r1
    3be2:	00db      	lsls	r3, r3, #3
    3be4:	4413      	add	r3, r2
    3be6:	3308      	adds	r3, #8
    3be8:	681b      	ldr	r3, [r3, #0]
    3bea:	fb03 f300 	mul.w	r3, r3, r0
    3bee:	613b      	str	r3, [r7, #16]
            xTimestamp = xMyTag->xTimestamp + OUTPUT;  // all sensor are scheduled to execute start from 0 to 4 ms of every period
    3bf0:	697b      	ldr	r3, [r7, #20]
    3bf2:	685b      	ldr	r3, [r3, #4]
    3bf4:	3303      	adds	r3, #3
    3bf6:	60fb      	str	r3, [r7, #12]
            vPrintNumber(xMyFlag);
    3bf8:	69f8      	ldr	r0, [r7, #28]
    3bfa:	f013 fced 	bl	175d8 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3bfe:	f001 fba5 	bl	534c <xTaskGetTickCount>
    3c02:	4603      	mov	r3, r0
    3c04:	4618      	mov	r0, r3
    3c06:	f013 fce7 	bl	175d8 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
    3c0a:	f640 120c 	movw	r2, #2316	; 0x90c
    3c0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3c12:	69f9      	ldr	r1, [r7, #28]
    3c14:	460b      	mov	r3, r1
    3c16:	00db      	lsls	r3, r3, #3
    3c18:	1a5b      	subs	r3, r3, r1
    3c1a:	00db      	lsls	r3, r3, #3
    3c1c:	4413      	add	r3, r2
    3c1e:	3328      	adds	r3, #40	; 0x28
    3c20:	681b      	ldr	r3, [r3, #0]
    3c22:	69b8      	ldr	r0, [r7, #24]
    3c24:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData ); // update the information of output event 
    3c26:	69bb      	ldr	r3, [r7, #24]
    3c28:	9300      	str	r3, [sp, #0]
    3c2a:	6a38      	ldr	r0, [r7, #32]
    3c2c:	69f9      	ldr	r1, [r7, #28]
    3c2e:	693a      	ldr	r2, [r7, #16]
    3c30:	68fb      	ldr	r3, [r7, #12]
    3c32:	f7ff fc47 	bl	34c4 <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3c36:	f7fe fe67 	bl	2908 <xIsERLNull>
    3c3a:	6278      	str	r0, [r7, #36]	; 0x24
    3c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
    3c42:	d18e      	bne.n	3b62 <vActuator+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData ); // update the information of output event 
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3c44:	f241 3354 	movw	r3, #4948	; 0x1354
    3c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c4c:	681b      	ldr	r3, [r3, #0]
    3c4e:	4618      	mov	r0, r3
    3c50:	2100      	movs	r1, #0
    3c52:	2200      	movs	r2, #0
    3c54:	2300      	movs	r3, #0
    3c56:	f000 fbff 	bl	4458 <xQueueGenericSend>
    }
    3c5a:	e775      	b.n	3b48 <vActuator+0x8>

00003c5c <vR_Servant>:
}


void vR_Servant( void * pvParameter)
{
    3c5c:	b580      	push	{r7, lr}
    3c5e:	b084      	sub	sp, #16
    3c60:	af00      	add	r7, sp, #0
    3c62:	6078      	str	r0, [r7, #4]
    portBASE_TYPE pxDestination;
    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[0], portMAX_DELAY );
    3c64:	f241 3354 	movw	r3, #4948	; 0x1354
    3c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c6c:	681b      	ldr	r3, [r3, #0]
    3c6e:	4618      	mov	r0, r3
    3c70:	2100      	movs	r1, #0
    3c72:	f04f 32ff 	mov.w	r2, #4294967295
    3c76:	2300      	movs	r3, #0
    3c78:	f000 fcb4 	bl	45e4 <xQueueGenericReceive>
        //vPrintString("Actuator\n\r");

        // transit the events from events pool to nonexecutable event list
        // Copy one event to multiple when communication mode is 1 to N
        vEventScatter();
    3c7c:	f7ff f864 	bl	2d48 <vEventGenericScatter>

        // reduce multiple event for destination to one when communication mode is N to 1,
        // and transit the event from executable event pool to executable event list
        vEventReduce(); 
    3c80:	f7ff f98c 	bl	2f9c <vEventGenericReduce>

        // serialize the timestamp of simulataneous events,
        // and transit the ready events to ready list
        // return the pxDestination of the first ready event in ready list
        pxDestination = xEventSerialize(); 
    3c84:	f7ff fb84 	bl	3390 <xEventGenericSerialize>
    3c88:	60f8      	str	r0, [r7, #12]
        if(pxDestination != -1)
    3c8a:	68fb      	ldr	r3, [r7, #12]
    3c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3c90:	d036      	beq.n	3d00 <vR_Servant+0xa4>
        {
            switch(xContexts[pxDestination].xType)
    3c92:	f640 120c 	movw	r2, #2316	; 0x90c
    3c96:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3c9a:	68f9      	ldr	r1, [r7, #12]
    3c9c:	460b      	mov	r3, r1
    3c9e:	00db      	lsls	r3, r3, #3
    3ca0:	1a5b      	subs	r3, r3, r1
    3ca2:	00db      	lsls	r3, r3, #3
    3ca4:	4413      	add	r3, r2
    3ca6:	3304      	adds	r3, #4
    3ca8:	681b      	ldr	r3, [r3, #0]
    3caa:	2b02      	cmp	r3, #2
    3cac:	d010      	beq.n	3cd0 <vR_Servant+0x74>
    3cae:	2b03      	cmp	r3, #3
    3cb0:	d01a      	beq.n	3ce8 <vR_Servant+0x8c>
    3cb2:	2b01      	cmp	r3, #1
    3cb4:	d000      	beq.n	3cb8 <vR_Servant+0x5c>
                    break;
                case 3:
                    xSemaphoreGive( xBinarySemaphore[3] );
                    break;
                default:
                    break;
    3cb6:	e023      	b.n	3d00 <vR_Servant+0xa4>
        if(pxDestination != -1)
        {
            switch(xContexts[pxDestination].xType)
            {
                case 1:
                    xSemaphoreGive( xBinarySemaphore[1] );
    3cb8:	f241 3354 	movw	r3, #4948	; 0x1354
    3cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cc0:	685b      	ldr	r3, [r3, #4]
    3cc2:	4618      	mov	r0, r3
    3cc4:	2100      	movs	r1, #0
    3cc6:	2200      	movs	r2, #0
    3cc8:	2300      	movs	r3, #0
    3cca:	f000 fbc5 	bl	4458 <xQueueGenericSend>
                    break;
    3cce:	e017      	b.n	3d00 <vR_Servant+0xa4>
                case 2:
                    xSemaphoreGive( xBinarySemaphore[2] );
    3cd0:	f241 3354 	movw	r3, #4948	; 0x1354
    3cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cd8:	689b      	ldr	r3, [r3, #8]
    3cda:	4618      	mov	r0, r3
    3cdc:	2100      	movs	r1, #0
    3cde:	2200      	movs	r2, #0
    3ce0:	2300      	movs	r3, #0
    3ce2:	f000 fbb9 	bl	4458 <xQueueGenericSend>
                    break;
    3ce6:	e00b      	b.n	3d00 <vR_Servant+0xa4>
                case 3:
                    xSemaphoreGive( xBinarySemaphore[3] );
    3ce8:	f241 3354 	movw	r3, #4948	; 0x1354
    3cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cf0:	68db      	ldr	r3, [r3, #12]
    3cf2:	4618      	mov	r0, r3
    3cf4:	2100      	movs	r1, #0
    3cf6:	2200      	movs	r2, #0
    3cf8:	2300      	movs	r3, #0
    3cfa:	f000 fbad 	bl	4458 <xQueueGenericSend>
                    break;
    3cfe:	bf00      	nop
                default:
                    break;
                    // no event available 
            }
        }
    }
    3d00:	e7b0      	b.n	3c64 <vR_Servant+0x8>
    3d02:	bf00      	nop

00003d04 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
    3d04:	b480      	push	{r7}
    3d06:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
    3d08:	f242 032f 	movw	r3, #8239	; 0x202f
    3d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d10:	2200      	movs	r2, #0
    3d12:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
    3d14:	f242 032e 	movw	r3, #8238	; 0x202e
    3d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d1c:	2201      	movs	r2, #1
    3d1e:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
    3d20:	f242 0325 	movw	r3, #8229	; 0x2025
    3d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d28:	2207      	movs	r2, #7
    3d2a:	701a      	strb	r2, [r3, #0]
}
    3d2c:	46bd      	mov	sp, r7
    3d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d32:	4770      	bx	lr

00003d34 <PapabenchInit>:
extern void ir_init();
extern void estimator_init();
extern void fbw_init();

void PapabenchInit()
{
    3d34:	b580      	push	{r7, lr}
    3d36:	af00      	add	r7, sp, #0
    timer_init();
    3d38:	f7ff ffe4 	bl	3d04 <timer_init>
    modem_init();
    3d3c:	f00d f940 	bl	10fc0 <modem_init>
    adc_init();
    3d40:	f00d fc8a 	bl	11658 <adc_init>
#ifdef CTL_BRD_V1_1
    adc_buf_channel(ADC_CHANNEL_BAT, &buf_bat);
#endif
    spi_init();
    3d44:	f00d fbfc 	bl	11540 <spi_init>
    link_fbw_init();
    3d48:	f00d fa58 	bl	111fc <link_fbw_init>
    gps_init();
    3d4c:	f00d fd34 	bl	117b8 <gps_init>
    nav_init();
    3d50:	f011 f82c 	bl	14dac <nav_init>
    ir_init();
    3d54:	f00d ffd8 	bl	11d08 <ir_init>
    estimator_init();
    3d58:	f011 fa0e 	bl	15178 <estimator_init>
#ifdef PAPABENCH_SINGLE
    fbw_init();
#endif
}
    3d5c:	bd80      	pop	{r7, pc}
    3d5e:	bf00      	nop

00003d60 <s_0>:
#define SUNNYBEIKE 1
#ifdef SUNNYBEIKE

/*task0*/
void s_0(struct eventData * pxDataArray) 
{
    3d60:	b480      	push	{r7}
    3d62:	b083      	sub	sp, #12
    3d64:	af00      	add	r7, sp, #0
    3d66:	6078      	str	r0, [r7, #4]
    // do actuator
    // do sensor
}
    3d68:	370c      	adds	r7, #12
    3d6a:	46bd      	mov	sp, r7
    3d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d70:	4770      	bx	lr
    3d72:	bf00      	nop

00003d74 <s_1>:
void s_1(struct eventData * pxDataArray) 
{
    3d74:	b580      	push	{r7, lr}
    3d76:	b082      	sub	sp, #8
    3d78:	af00      	add	r7, sp, #0
    3d7a:	6078      	str	r0, [r7, #4]
    last_radio_from_ppm(); // ppm.h
    3d7c:	f012 f9d8 	bl	16130 <last_radio_from_ppm>
}
    3d80:	3708      	adds	r7, #8
    3d82:	46bd      	mov	sp, r7
    3d84:	bd80      	pop	{r7, pc}
    3d86:	bf00      	nop

00003d88 <s_2>:
void s_2(struct eventData * pxDataArray) 
{
    3d88:	b480      	push	{r7}
    3d8a:	b083      	sub	sp, #12
    3d8c:	af00      	add	r7, sp, #0
    3d8e:	6078      	str	r0, [r7, #4]
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    3d90:	370c      	adds	r7, #12
    3d92:	46bd      	mov	sp, r7
    3d94:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d98:	4770      	bx	lr
    3d9a:	bf00      	nop

00003d9c <s_3>:
void s_3(struct eventData * pxDataArray) 
{
    3d9c:	b480      	push	{r7}
    3d9e:	b083      	sub	sp, #12
    3da0:	af00      	add	r7, sp, #0
    3da2:	6078      	str	r0, [r7, #4]
}
    3da4:	370c      	adds	r7, #12
    3da6:	46bd      	mov	sp, r7
    3da8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dac:	4770      	bx	lr
    3dae:	bf00      	nop

00003db0 <s_4>:

/*task1*/
void s_4(struct eventData * pxDataArray) 
{
    3db0:	b480      	push	{r7}
    3db2:	b083      	sub	sp, #12
    3db4:	af00      	add	r7, sp, #0
    3db6:	6078      	str	r0, [r7, #4]
}
    3db8:	370c      	adds	r7, #12
    3dba:	46bd      	mov	sp, r7
    3dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dc0:	4770      	bx	lr
    3dc2:	bf00      	nop

00003dc4 <s_5>:
void s_5(struct eventData * pxDataArray) 
{
    3dc4:	b580      	push	{r7, lr}
    3dc6:	b082      	sub	sp, #8
    3dc8:	af00      	add	r7, sp, #0
    3dca:	6078      	str	r0, [r7, #4]
    to_autopilot_from_last_radio(); // main.c
    3dcc:	f012 fd6a 	bl	168a4 <to_autopilot_from_last_radio>
}
    3dd0:	3708      	adds	r7, #8
    3dd2:	46bd      	mov	sp, r7
    3dd4:	bd80      	pop	{r7, pc}
    3dd6:	bf00      	nop

00003dd8 <s_6>:
void s_6(struct eventData * pxDataArray) 
{
    3dd8:	b580      	push	{r7, lr}
    3dda:	b082      	sub	sp, #8
    3ddc:	af00      	add	r7, sp, #0
    3dde:	6078      	str	r0, [r7, #4]
    spi_reset(); // spi_fbw.h
    3de0:	f012 fc9e 	bl	16720 <spi_reset>
}
    3de4:	3708      	adds	r7, #8
    3de6:	46bd      	mov	sp, r7
    3de8:	bd80      	pop	{r7, pc}
    3dea:	bf00      	nop

00003dec <s_7>:
void s_7(struct eventData * pxDataArray) 
{
    3dec:	b480      	push	{r7}
    3dee:	b083      	sub	sp, #12
    3df0:	af00      	add	r7, sp, #0
    3df2:	6078      	str	r0, [r7, #4]
}
    3df4:	370c      	adds	r7, #12
    3df6:	46bd      	mov	sp, r7
    3df8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dfc:	4770      	bx	lr
    3dfe:	bf00      	nop

00003e00 <s_8>:

/*task 2*/ 
void s_8(struct eventData * pxDataArray) 
{
    3e00:	b480      	push	{r7}
    3e02:	b083      	sub	sp, #12
    3e04:	af00      	add	r7, sp, #0
    3e06:	6078      	str	r0, [r7, #4]
}
    3e08:	370c      	adds	r7, #12
    3e0a:	46bd      	mov	sp, r7
    3e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e10:	4770      	bx	lr
    3e12:	bf00      	nop

00003e14 <s_9>:
void s_9(struct eventData * pxDataArray) 
{
    3e14:	b580      	push	{r7, lr}
    3e16:	b082      	sub	sp, #8
    3e18:	af00      	add	r7, sp, #0
    3e1a:	6078      	str	r0, [r7, #4]
    check_mega128_values_task(); // main.c
    3e1c:	f012 fee6 	bl	16bec <check_mega128_values_task>
}
    3e20:	3708      	adds	r7, #8
    3e22:	46bd      	mov	sp, r7
    3e24:	bd80      	pop	{r7, pc}
    3e26:	bf00      	nop

00003e28 <s_10>:
void s_10(struct eventData * pxDataArray) 
{
    3e28:	b480      	push	{r7}
    3e2a:	b083      	sub	sp, #12
    3e2c:	af00      	add	r7, sp, #0
    3e2e:	6078      	str	r0, [r7, #4]
}
    3e30:	370c      	adds	r7, #12
    3e32:	46bd      	mov	sp, r7
    3e34:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e38:	4770      	bx	lr
    3e3a:	bf00      	nop

00003e3c <s_11>:

/*task 3, servant 8, 9*/ 
void s_11(struct eventData * pxDataArray) 
{
    3e3c:	b480      	push	{r7}
    3e3e:	b083      	sub	sp, #12
    3e40:	af00      	add	r7, sp, #0
    3e42:	6078      	str	r0, [r7, #4]
}
    3e44:	370c      	adds	r7, #12
    3e46:	46bd      	mov	sp, r7
    3e48:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e4c:	4770      	bx	lr
    3e4e:	bf00      	nop

00003e50 <s_12>:
void s_12(struct eventData * pxDataArray) 
{
    3e50:	b580      	push	{r7, lr}
    3e52:	b082      	sub	sp, #8
    3e54:	af00      	add	r7, sp, #0
    3e56:	6078      	str	r0, [r7, #4]
    servo_transmit(); //servo.h
    3e58:	f012 ffbc 	bl	16dd4 <servo_transmit>
}
    3e5c:	3708      	adds	r7, #8
    3e5e:	46bd      	mov	sp, r7
    3e60:	bd80      	pop	{r7, pc}
    3e62:	bf00      	nop

00003e64 <s_13>:
void s_13(struct eventData * pxDataArray) 
{
    3e64:	b480      	push	{r7}
    3e66:	b083      	sub	sp, #12
    3e68:	af00      	add	r7, sp, #0
    3e6a:	6078      	str	r0, [r7, #4]
}
    3e6c:	370c      	adds	r7, #12
    3e6e:	46bd      	mov	sp, r7
    3e70:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e74:	4770      	bx	lr
    3e76:	bf00      	nop

00003e78 <s_14>:

/*task 4, servant 10, 11*/
void s_14(struct eventData * pxDataArray) 
{
    3e78:	b480      	push	{r7}
    3e7a:	b083      	sub	sp, #12
    3e7c:	af00      	add	r7, sp, #0
    3e7e:	6078      	str	r0, [r7, #4]
}
    3e80:	370c      	adds	r7, #12
    3e82:	46bd      	mov	sp, r7
    3e84:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e88:	4770      	bx	lr
    3e8a:	bf00      	nop

00003e8c <s_15>:
void s_15(struct eventData * pxDataArray) 
{
    3e8c:	b580      	push	{r7, lr}
    3e8e:	b082      	sub	sp, #8
    3e90:	af00      	add	r7, sp, #0
    3e92:	6078      	str	r0, [r7, #4]
    check_failsafe_task(); // main.c
    3e94:	f012 fe84 	bl	16ba0 <check_failsafe_task>
}
    3e98:	3708      	adds	r7, #8
    3e9a:	46bd      	mov	sp, r7
    3e9c:	bd80      	pop	{r7, pc}
    3e9e:	bf00      	nop

00003ea0 <s_16>:
void s_16(struct eventData * pxDataArray) 
{
    3ea0:	b480      	push	{r7}
    3ea2:	b083      	sub	sp, #12
    3ea4:	af00      	add	r7, sp, #0
    3ea6:	6078      	str	r0, [r7, #4]
}
    3ea8:	370c      	adds	r7, #12
    3eaa:	46bd      	mov	sp, r7
    3eac:	f85d 7b04 	ldr.w	r7, [sp], #4
    3eb0:	4770      	bx	lr
    3eb2:	bf00      	nop

00003eb4 <s_17>:

/*task 5, servant 12, 13, 14*/
void s_17(struct eventData * pxDataArray) 
{
    3eb4:	b480      	push	{r7}
    3eb6:	b083      	sub	sp, #12
    3eb8:	af00      	add	r7, sp, #0
    3eba:	6078      	str	r0, [r7, #4]
}
    3ebc:	370c      	adds	r7, #12
    3ebe:	46bd      	mov	sp, r7
    3ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ec4:	4770      	bx	lr
    3ec6:	bf00      	nop

00003ec8 <s_18>:
void s_18(struct eventData * pxDataArray) 
{
    3ec8:	b580      	push	{r7, lr}
    3eca:	b082      	sub	sp, #8
    3ecc:	af00      	add	r7, sp, #0
    3ece:	6078      	str	r0, [r7, #4]
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    3ed0:	f009 f8b8 	bl	d044 <radio_control_task>
}
    3ed4:	3708      	adds	r7, #8
    3ed6:	46bd      	mov	sp, r7
    3ed8:	bd80      	pop	{r7, pc}
    3eda:	bf00      	nop

00003edc <s_19>:
void s_19(struct eventData * pxDataArray) 
{
    3edc:	b580      	push	{r7, lr}
    3ede:	b082      	sub	sp, #8
    3ee0:	af00      	add	r7, sp, #0
    3ee2:	6078      	str	r0, [r7, #4]
    ir_gain_calib(); //infrared.h
    3ee4:	f00d ff68 	bl	11db8 <ir_gain_calib>
}
    3ee8:	3708      	adds	r7, #8
    3eea:	46bd      	mov	sp, r7
    3eec:	bd80      	pop	{r7, pc}
    3eee:	bf00      	nop

00003ef0 <s_20>:
void s_20(struct eventData * pxDataArray) 
{
    3ef0:	b480      	push	{r7}
    3ef2:	b083      	sub	sp, #12
    3ef4:	af00      	add	r7, sp, #0
    3ef6:	6078      	str	r0, [r7, #4]
}
    3ef8:	370c      	adds	r7, #12
    3efa:	46bd      	mov	sp, r7
    3efc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f00:	4770      	bx	lr
    3f02:	bf00      	nop

00003f04 <s_21>:

/*task 6, servant 15,16,17,18*/ 
void s_21(struct eventData * pxDataArray) 
{
    3f04:	b480      	push	{r7}
    3f06:	b083      	sub	sp, #12
    3f08:	af00      	add	r7, sp, #0
    3f0a:	6078      	str	r0, [r7, #4]
}
    3f0c:	370c      	adds	r7, #12
    3f0e:	46bd      	mov	sp, r7
    3f10:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f14:	4770      	bx	lr
    3f16:	bf00      	nop

00003f18 <s_22>:
void s_22(struct eventData * pxDataArray) 
{
    3f18:	b580      	push	{r7, lr}
    3f1a:	b082      	sub	sp, #8
    3f1c:	af00      	add	r7, sp, #0
    3f1e:	6078      	str	r0, [r7, #4]
    ir_update(); // infrared.h
    3f20:	f00d ff0c 	bl	11d3c <ir_update>
}
    3f24:	3708      	adds	r7, #8
    3f26:	46bd      	mov	sp, r7
    3f28:	bd80      	pop	{r7, pc}
    3f2a:	bf00      	nop

00003f2c <s_23>:
void s_23(struct eventData * pxDataArray) 
{
    3f2c:	b580      	push	{r7, lr}
    3f2e:	b082      	sub	sp, #8
    3f30:	af00      	add	r7, sp, #0
    3f32:	6078      	str	r0, [r7, #4]
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3f34:	f011 f98a 	bl	1524c <estimator_update_state_infrared>
}
    3f38:	3708      	adds	r7, #8
    3f3a:	46bd      	mov	sp, r7
    3f3c:	bd80      	pop	{r7, pc}
    3f3e:	bf00      	nop

00003f40 <s_24>:
void s_24(struct eventData * pxDataArray) 
{
    3f40:	b580      	push	{r7, lr}
    3f42:	b082      	sub	sp, #8
    3f44:	af00      	add	r7, sp, #0
    3f46:	6078      	str	r0, [r7, #4]
    roll_pitch_pid_run(); // pid.h
    3f48:	f00d ff66 	bl	11e18 <roll_pitch_pid_run>
}
    3f4c:	3708      	adds	r7, #8
    3f4e:	46bd      	mov	sp, r7
    3f50:	bd80      	pop	{r7, pc}
    3f52:	bf00      	nop

00003f54 <s_25>:
void s_25(struct eventData * pxDataArray) 
{
    3f54:	b480      	push	{r7}
    3f56:	b083      	sub	sp, #12
    3f58:	af00      	add	r7, sp, #0
    3f5a:	6078      	str	r0, [r7, #4]
}
    3f5c:	370c      	adds	r7, #12
    3f5e:	46bd      	mov	sp, r7
    3f60:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f64:	4770      	bx	lr
    3f66:	bf00      	nop

00003f68 <s_26>:

/*task 7, servant 19, 20*/
void s_26(struct eventData * pxDataArray) 
{
    3f68:	b480      	push	{r7}
    3f6a:	b083      	sub	sp, #12
    3f6c:	af00      	add	r7, sp, #0
    3f6e:	6078      	str	r0, [r7, #4]
}
    3f70:	370c      	adds	r7, #12
    3f72:	46bd      	mov	sp, r7
    3f74:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f78:	4770      	bx	lr
    3f7a:	bf00      	nop

00003f7c <s_27>:
void s_27(struct eventData * pxDataArray) 
{
    3f7c:	b580      	push	{r7, lr}
    3f7e:	b082      	sub	sp, #8
    3f80:	af00      	add	r7, sp, #0
    3f82:	6078      	str	r0, [r7, #4]
    link_fbw_send(); //link_fbw.h
    3f84:	f00d f94c 	bl	11220 <link_fbw_send>
}
    3f88:	3708      	adds	r7, #8
    3f8a:	46bd      	mov	sp, r7
    3f8c:	bd80      	pop	{r7, pc}
    3f8e:	bf00      	nop

00003f90 <s_28>:
void s_28(struct eventData * pxDataArray) 
{}
    3f90:	b480      	push	{r7}
    3f92:	b083      	sub	sp, #12
    3f94:	af00      	add	r7, sp, #0
    3f96:	6078      	str	r0, [r7, #4]
    3f98:	370c      	adds	r7, #12
    3f9a:	46bd      	mov	sp, r7
    3f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fa0:	4770      	bx	lr
    3fa2:	bf00      	nop

00003fa4 <s_29>:

/*task 8, sevrvant 21,22,23*/
void s_29(struct eventData * pxDataArray) 
{
    3fa4:	b480      	push	{r7}
    3fa6:	b083      	sub	sp, #12
    3fa8:	af00      	add	r7, sp, #0
    3faa:	6078      	str	r0, [r7, #4]
}
    3fac:	370c      	adds	r7, #12
    3fae:	46bd      	mov	sp, r7
    3fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fb4:	4770      	bx	lr
    3fb6:	bf00      	nop

00003fb8 <s_30>:
void s_30(struct eventData * pxDataArray) 
{
    3fb8:	b580      	push	{r7, lr}
    3fba:	b082      	sub	sp, #8
    3fbc:	af00      	add	r7, sp, #0
    3fbe:	6078      	str	r0, [r7, #4]
    parse_gps_msg(); //gps.h
    3fc0:	f00d fc06 	bl	117d0 <parse_gps_msg>
}
    3fc4:	3708      	adds	r7, #8
    3fc6:	46bd      	mov	sp, r7
    3fc8:	bd80      	pop	{r7, pc}
    3fca:	bf00      	nop

00003fcc <s_31>:
void s_31(struct eventData * pxDataArray) 
{
    3fcc:	b580      	push	{r7, lr}
    3fce:	b082      	sub	sp, #8
    3fd0:	af00      	add	r7, sp, #0
    3fd2:	6078      	str	r0, [r7, #4]
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    3fd4:	f00a fe24 	bl	ec20 <send_gps_pos>
    send_radIR();
    3fd8:	f00b ffe8 	bl	ffac <send_radIR>
    send_takeOff();
    3fdc:	f00c fde0 	bl	10ba0 <send_takeOff>
}
    3fe0:	3708      	adds	r7, #8
    3fe2:	46bd      	mov	sp, r7
    3fe4:	bd80      	pop	{r7, pc}
    3fe6:	bf00      	nop

00003fe8 <s_32>:
void s_32(struct eventData * pxDataArray) 
{}
    3fe8:	b480      	push	{r7}
    3fea:	b083      	sub	sp, #12
    3fec:	af00      	add	r7, sp, #0
    3fee:	6078      	str	r0, [r7, #4]
    3ff0:	370c      	adds	r7, #12
    3ff2:	46bd      	mov	sp, r7
    3ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ff8:	4770      	bx	lr
    3ffa:	bf00      	nop

00003ffc <s_33>:

/*task 9, servant 24, 25, 26, 27*/
void s_33(struct eventData * pxDataArray) 
{
    3ffc:	b480      	push	{r7}
    3ffe:	b083      	sub	sp, #12
    4000:	af00      	add	r7, sp, #0
    4002:	6078      	str	r0, [r7, #4]
}
    4004:	370c      	adds	r7, #12
    4006:	46bd      	mov	sp, r7
    4008:	f85d 7b04 	ldr.w	r7, [sp], #4
    400c:	4770      	bx	lr
    400e:	bf00      	nop

00004010 <s_34>:
void s_34(struct eventData * pxDataArray) 
{
    4010:	b580      	push	{r7, lr}
    4012:	b082      	sub	sp, #8
    4014:	af00      	add	r7, sp, #0
    4016:	6078      	str	r0, [r7, #4]
    nav_home(); // nav.h
    4018:	f010 fe9a 	bl	14d50 <nav_home>
}
    401c:	3708      	adds	r7, #8
    401e:	46bd      	mov	sp, r7
    4020:	bd80      	pop	{r7, pc}
    4022:	bf00      	nop

00004024 <s_35>:
void s_35(struct eventData * pxDataArray) 
{
    4024:	b580      	push	{r7, lr}
    4026:	b082      	sub	sp, #8
    4028:	af00      	add	r7, sp, #0
    402a:	6078      	str	r0, [r7, #4]
    nav_update(); // nav.h
    402c:	f010 feb6 	bl	14d9c <nav_update>
}
    4030:	3708      	adds	r7, #8
    4032:	46bd      	mov	sp, r7
    4034:	bd80      	pop	{r7, pc}
    4036:	bf00      	nop

00004038 <s_36>:
void s_36(struct eventData * pxDataArray) 
{
    4038:	b580      	push	{r7, lr}
    403a:	b082      	sub	sp, #8
    403c:	af00      	add	r7, sp, #0
    403e:	6078      	str	r0, [r7, #4]
    course_pid_run(); // pid.h
    4040:	f00d ffd6 	bl	11ff0 <course_pid_run>
}
    4044:	3708      	adds	r7, #8
    4046:	46bd      	mov	sp, r7
    4048:	bd80      	pop	{r7, pc}
    404a:	bf00      	nop

0000404c <s_37>:
void s_37(struct eventData * pxDataArray) 
{}
    404c:	b480      	push	{r7}
    404e:	b083      	sub	sp, #12
    4050:	af00      	add	r7, sp, #0
    4052:	6078      	str	r0, [r7, #4]
    4054:	370c      	adds	r7, #12
    4056:	46bd      	mov	sp, r7
    4058:	f85d 7b04 	ldr.w	r7, [sp], #4
    405c:	4770      	bx	lr
    405e:	bf00      	nop

00004060 <s_38>:

/*task 10, servant 28, 29*/
void s_38(struct eventData * pxDataArray) 
{
    4060:	b480      	push	{r7}
    4062:	b083      	sub	sp, #12
    4064:	af00      	add	r7, sp, #0
    4066:	6078      	str	r0, [r7, #4]
}
    4068:	370c      	adds	r7, #12
    406a:	46bd      	mov	sp, r7
    406c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4070:	4770      	bx	lr
    4072:	bf00      	nop

00004074 <s_39>:
void s_39(struct eventData * pxDataArray) 
{
    4074:	b580      	push	{r7, lr}
    4076:	b082      	sub	sp, #8
    4078:	af00      	add	r7, sp, #0
    407a:	6078      	str	r0, [r7, #4]
    altitude_pid_run(); // pid.h
    407c:	f00e fa40 	bl	12500 <altitude_pid_run>
}
    4080:	3708      	adds	r7, #8
    4082:	46bd      	mov	sp, r7
    4084:	bd80      	pop	{r7, pc}
    4086:	bf00      	nop

00004088 <s_40>:
void s_40(struct eventData * pxDataArray) 
{}
    4088:	b480      	push	{r7}
    408a:	b083      	sub	sp, #12
    408c:	af00      	add	r7, sp, #0
    408e:	6078      	str	r0, [r7, #4]
    4090:	370c      	adds	r7, #12
    4092:	46bd      	mov	sp, r7
    4094:	f85d 7b04 	ldr.w	r7, [sp], #4
    4098:	4770      	bx	lr
    409a:	bf00      	nop

0000409c <s_41>:

/*task 11, servant 30, 31*/
void s_41(struct eventData * pxDataArray) 
{
    409c:	b480      	push	{r7}
    409e:	b083      	sub	sp, #12
    40a0:	af00      	add	r7, sp, #0
    40a2:	6078      	str	r0, [r7, #4]
}
    40a4:	370c      	adds	r7, #12
    40a6:	46bd      	mov	sp, r7
    40a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    40ac:	4770      	bx	lr
    40ae:	bf00      	nop

000040b0 <s_42>:
void s_42(struct eventData * pxDataArray) 
{
    40b0:	b580      	push	{r7, lr}
    40b2:	b082      	sub	sp, #8
    40b4:	af00      	add	r7, sp, #0
    40b6:	6078      	str	r0, [r7, #4]
    climb_pid_run(); // pid.h
    40b8:	f00e f852 	bl	12160 <climb_pid_run>
}
    40bc:	3708      	adds	r7, #8
    40be:	46bd      	mov	sp, r7
    40c0:	bd80      	pop	{r7, pc}
    40c2:	bf00      	nop

000040c4 <s_43>:
void s_43(struct eventData * pxDataArray) 
{}
    40c4:	b480      	push	{r7}
    40c6:	b083      	sub	sp, #12
    40c8:	af00      	add	r7, sp, #0
    40ca:	6078      	str	r0, [r7, #4]
    40cc:	370c      	adds	r7, #12
    40ce:	46bd      	mov	sp, r7
    40d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    40d4:	4770      	bx	lr
    40d6:	bf00      	nop

000040d8 <s_44>:

/*task 12, servant 32, 33*/
void s_44(struct eventData * pxDataArray) 
{
    40d8:	b480      	push	{r7}
    40da:	b083      	sub	sp, #12
    40dc:	af00      	add	r7, sp, #0
    40de:	6078      	str	r0, [r7, #4]
}
    40e0:	370c      	adds	r7, #12
    40e2:	46bd      	mov	sp, r7
    40e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    40e8:	4770      	bx	lr
    40ea:	bf00      	nop

000040ec <s_45>:
void s_45(struct eventData * pxDataArray) 
{
    40ec:	b580      	push	{r7, lr}
    40ee:	b082      	sub	sp, #8
    40f0:	af00      	add	r7, sp, #0
    40f2:	6078      	str	r0, [r7, #4]
    // main.c
    send_boot();
    40f4:	f003 fa1e 	bl	7534 <send_boot>
    send_attitude();
    40f8:	f004 f9f4 	bl	84e4 <send_attitude>
    send_adc();
    40fc:	f004 feee 	bl	8edc <send_adc>
    send_settings();
    4100:	f005 f97c 	bl	93fc <send_settings>
    send_desired();
    4104:	f005 fd86 	bl	9c14 <send_desired>
    send_bat();
    4108:	f006 fcbc 	bl	aa84 <send_bat>
    send_climb();
    410c:	f007 f878 	bl	b200 <send_climb>
    send_mode();
    4110:	f007 fdf0 	bl	bcf4 <send_mode>
    send_debug();
    4114:	f008 f8ca 	bl	c2ac <send_debug>
    send_nav_ref();
    4118:	f008 fba6 	bl	c868 <send_nav_ref>
}
    411c:	3708      	adds	r7, #8
    411e:	46bd      	mov	sp, r7
    4120:	bd80      	pop	{r7, pc}
    4122:	bf00      	nop

00004124 <s_46>:
void s_46(struct eventData * pxDataArray) 
{}
    4124:	b480      	push	{r7}
    4126:	b083      	sub	sp, #12
    4128:	af00      	add	r7, sp, #0
    412a:	6078      	str	r0, [r7, #4]
    412c:	370c      	adds	r7, #12
    412e:	46bd      	mov	sp, r7
    4130:	f85d 7b04 	ldr.w	r7, [sp], #4
    4134:	4770      	bx	lr
    4136:	bf00      	nop

00004138 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    4138:	b480      	push	{r7}
    413a:	b083      	sub	sp, #12
    413c:	af00      	add	r7, sp, #0
    413e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    4140:	687b      	ldr	r3, [r7, #4]
    4142:	f103 0208 	add.w	r2, r3, #8
    4146:	687b      	ldr	r3, [r7, #4]
    4148:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    414a:	687b      	ldr	r3, [r7, #4]
    414c:	f04f 32ff 	mov.w	r2, #4294967295
    4150:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    4152:	687b      	ldr	r3, [r7, #4]
    4154:	f103 0208 	add.w	r2, r3, #8
    4158:	687b      	ldr	r3, [r7, #4]
    415a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    415c:	687b      	ldr	r3, [r7, #4]
    415e:	f103 0208 	add.w	r2, r3, #8
    4162:	687b      	ldr	r3, [r7, #4]
    4164:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    4166:	687b      	ldr	r3, [r7, #4]
    4168:	2200      	movs	r2, #0
    416a:	601a      	str	r2, [r3, #0]
}
    416c:	370c      	adds	r7, #12
    416e:	46bd      	mov	sp, r7
    4170:	f85d 7b04 	ldr.w	r7, [sp], #4
    4174:	4770      	bx	lr
    4176:	bf00      	nop

00004178 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    4178:	b480      	push	{r7}
    417a:	b083      	sub	sp, #12
    417c:	af00      	add	r7, sp, #0
    417e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    4180:	687b      	ldr	r3, [r7, #4]
    4182:	2200      	movs	r2, #0
    4184:	611a      	str	r2, [r3, #16]
}
    4186:	370c      	adds	r7, #12
    4188:	46bd      	mov	sp, r7
    418a:	f85d 7b04 	ldr.w	r7, [sp], #4
    418e:	4770      	bx	lr

00004190 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    4190:	b480      	push	{r7}
    4192:	b085      	sub	sp, #20
    4194:	af00      	add	r7, sp, #0
    4196:	6078      	str	r0, [r7, #4]
    4198:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    419a:	687b      	ldr	r3, [r7, #4]
    419c:	685b      	ldr	r3, [r3, #4]
    419e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    41a0:	68fb      	ldr	r3, [r7, #12]
    41a2:	685a      	ldr	r2, [r3, #4]
    41a4:	683b      	ldr	r3, [r7, #0]
    41a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    41a8:	687b      	ldr	r3, [r7, #4]
    41aa:	685a      	ldr	r2, [r3, #4]
    41ac:	683b      	ldr	r3, [r7, #0]
    41ae:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    41b0:	68fb      	ldr	r3, [r7, #12]
    41b2:	685b      	ldr	r3, [r3, #4]
    41b4:	683a      	ldr	r2, [r7, #0]
    41b6:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    41b8:	68fb      	ldr	r3, [r7, #12]
    41ba:	683a      	ldr	r2, [r7, #0]
    41bc:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    41be:	687b      	ldr	r3, [r7, #4]
    41c0:	683a      	ldr	r2, [r7, #0]
    41c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    41c4:	683b      	ldr	r3, [r7, #0]
    41c6:	687a      	ldr	r2, [r7, #4]
    41c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    41ca:	687b      	ldr	r3, [r7, #4]
    41cc:	681b      	ldr	r3, [r3, #0]
    41ce:	1c5a      	adds	r2, r3, #1
    41d0:	687b      	ldr	r3, [r7, #4]
    41d2:	601a      	str	r2, [r3, #0]
}
    41d4:	3714      	adds	r7, #20
    41d6:	46bd      	mov	sp, r7
    41d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    41dc:	4770      	bx	lr
    41de:	bf00      	nop

000041e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    41e0:	b480      	push	{r7}
    41e2:	b085      	sub	sp, #20
    41e4:	af00      	add	r7, sp, #0
    41e6:	6078      	str	r0, [r7, #4]
    41e8:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    41ea:	683b      	ldr	r3, [r7, #0]
    41ec:	681b      	ldr	r3, [r3, #0]
    41ee:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    41f0:	68bb      	ldr	r3, [r7, #8]
    41f2:	f1b3 3fff 	cmp.w	r3, #4294967295
    41f6:	d103      	bne.n	4200 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    41f8:	687b      	ldr	r3, [r7, #4]
    41fa:	691b      	ldr	r3, [r3, #16]
    41fc:	60fb      	str	r3, [r7, #12]
    41fe:	e00c      	b.n	421a <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    4200:	687b      	ldr	r3, [r7, #4]
    4202:	3308      	adds	r3, #8
    4204:	60fb      	str	r3, [r7, #12]
    4206:	e002      	b.n	420e <vListInsert+0x2e>
    4208:	68fb      	ldr	r3, [r7, #12]
    420a:	685b      	ldr	r3, [r3, #4]
    420c:	60fb      	str	r3, [r7, #12]
    420e:	68fb      	ldr	r3, [r7, #12]
    4210:	685b      	ldr	r3, [r3, #4]
    4212:	681a      	ldr	r2, [r3, #0]
    4214:	68bb      	ldr	r3, [r7, #8]
    4216:	429a      	cmp	r2, r3
    4218:	d9f6      	bls.n	4208 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    421a:	68fb      	ldr	r3, [r7, #12]
    421c:	685a      	ldr	r2, [r3, #4]
    421e:	683b      	ldr	r3, [r7, #0]
    4220:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    4222:	683b      	ldr	r3, [r7, #0]
    4224:	685b      	ldr	r3, [r3, #4]
    4226:	683a      	ldr	r2, [r7, #0]
    4228:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    422a:	683b      	ldr	r3, [r7, #0]
    422c:	68fa      	ldr	r2, [r7, #12]
    422e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    4230:	68fb      	ldr	r3, [r7, #12]
    4232:	683a      	ldr	r2, [r7, #0]
    4234:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    4236:	683b      	ldr	r3, [r7, #0]
    4238:	687a      	ldr	r2, [r7, #4]
    423a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    423c:	687b      	ldr	r3, [r7, #4]
    423e:	681b      	ldr	r3, [r3, #0]
    4240:	1c5a      	adds	r2, r3, #1
    4242:	687b      	ldr	r3, [r7, #4]
    4244:	601a      	str	r2, [r3, #0]
}
    4246:	3714      	adds	r7, #20
    4248:	46bd      	mov	sp, r7
    424a:	f85d 7b04 	ldr.w	r7, [sp], #4
    424e:	4770      	bx	lr

00004250 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    4250:	b480      	push	{r7}
    4252:	b085      	sub	sp, #20
    4254:	af00      	add	r7, sp, #0
    4256:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    4258:	687b      	ldr	r3, [r7, #4]
    425a:	685b      	ldr	r3, [r3, #4]
    425c:	687a      	ldr	r2, [r7, #4]
    425e:	6892      	ldr	r2, [r2, #8]
    4260:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    4262:	687b      	ldr	r3, [r7, #4]
    4264:	689b      	ldr	r3, [r3, #8]
    4266:	687a      	ldr	r2, [r7, #4]
    4268:	6852      	ldr	r2, [r2, #4]
    426a:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    426c:	687b      	ldr	r3, [r7, #4]
    426e:	691b      	ldr	r3, [r3, #16]
    4270:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    4272:	68fb      	ldr	r3, [r7, #12]
    4274:	685a      	ldr	r2, [r3, #4]
    4276:	687b      	ldr	r3, [r7, #4]
    4278:	429a      	cmp	r2, r3
    427a:	d103      	bne.n	4284 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    427c:	687b      	ldr	r3, [r7, #4]
    427e:	689a      	ldr	r2, [r3, #8]
    4280:	68fb      	ldr	r3, [r7, #12]
    4282:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    4284:	687b      	ldr	r3, [r7, #4]
    4286:	2200      	movs	r2, #0
    4288:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    428a:	68fb      	ldr	r3, [r7, #12]
    428c:	681b      	ldr	r3, [r3, #0]
    428e:	1e5a      	subs	r2, r3, #1
    4290:	68fb      	ldr	r3, [r7, #12]
    4292:	601a      	str	r2, [r3, #0]
}
    4294:	3714      	adds	r7, #20
    4296:	46bd      	mov	sp, r7
    4298:	f85d 7b04 	ldr.w	r7, [sp], #4
    429c:	4770      	bx	lr
    429e:	bf00      	nop

000042a0 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    42a0:	b580      	push	{r7, lr}
    42a2:	b084      	sub	sp, #16
    42a4:	af00      	add	r7, sp, #0
    42a6:	6078      	str	r0, [r7, #4]
    42a8:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    42aa:	2301      	movs	r3, #1
    42ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    42ae:	683b      	ldr	r3, [r7, #0]
    42b0:	2b01      	cmp	r3, #1
    42b2:	d00b      	beq.n	42cc <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    42b4:	687b      	ldr	r3, [r7, #4]
    42b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    42b8:	2b00      	cmp	r3, #0
    42ba:	d001      	beq.n	42c0 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    42bc:	2300      	movs	r3, #0
    42be:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    42c0:	687b      	ldr	r3, [r7, #4]
    42c2:	691b      	ldr	r3, [r3, #16]
    42c4:	2b00      	cmp	r3, #0
    42c6:	d001      	beq.n	42cc <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    42c8:	2300      	movs	r3, #0
    42ca:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    42cc:	68fb      	ldr	r3, [r7, #12]
    42ce:	2b01      	cmp	r3, #1
    42d0:	d12f      	bne.n	4332 <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    42d2:	687b      	ldr	r3, [r7, #4]
    42d4:	681a      	ldr	r2, [r3, #0]
    42d6:	687b      	ldr	r3, [r7, #4]
    42d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    42da:	6879      	ldr	r1, [r7, #4]
    42dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
    42de:	fb01 f303 	mul.w	r3, r1, r3
    42e2:	441a      	add	r2, r3
    42e4:	687b      	ldr	r3, [r7, #4]
    42e6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    42e8:	687b      	ldr	r3, [r7, #4]
    42ea:	2200      	movs	r2, #0
    42ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    42ee:	687b      	ldr	r3, [r7, #4]
    42f0:	681a      	ldr	r2, [r3, #0]
    42f2:	687b      	ldr	r3, [r7, #4]
    42f4:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    42f6:	687b      	ldr	r3, [r7, #4]
    42f8:	681a      	ldr	r2, [r3, #0]
    42fa:	687b      	ldr	r3, [r7, #4]
    42fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    42fe:	3b01      	subs	r3, #1
    4300:	6879      	ldr	r1, [r7, #4]
    4302:	6c09      	ldr	r1, [r1, #64]	; 0x40
    4304:	fb01 f303 	mul.w	r3, r1, r3
    4308:	441a      	add	r2, r3
    430a:	687b      	ldr	r3, [r7, #4]
    430c:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    430e:	687b      	ldr	r3, [r7, #4]
    4310:	f04f 32ff 	mov.w	r2, #4294967295
    4314:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    4316:	687b      	ldr	r3, [r7, #4]
    4318:	f04f 32ff 	mov.w	r2, #4294967295
    431c:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    431e:	687b      	ldr	r3, [r7, #4]
    4320:	3310      	adds	r3, #16
    4322:	4618      	mov	r0, r3
    4324:	f7ff ff08 	bl	4138 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    4328:	687b      	ldr	r3, [r7, #4]
    432a:	3324      	adds	r3, #36	; 0x24
    432c:	4618      	mov	r0, r3
    432e:	f7ff ff03 	bl	4138 <vListInitialise>
	}

	return xReturn;
    4332:	68fb      	ldr	r3, [r7, #12]
}
    4334:	4618      	mov	r0, r3
    4336:	3710      	adds	r7, #16
    4338:	46bd      	mov	sp, r7
    433a:	bd80      	pop	{r7, pc}

0000433c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    433c:	b580      	push	{r7, lr}
    433e:	b088      	sub	sp, #32
    4340:	af00      	add	r7, sp, #0
    4342:	60f8      	str	r0, [r7, #12]
    4344:	60b9      	str	r1, [r7, #8]
    4346:	4613      	mov	r3, r2
    4348:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    434a:	2300      	movs	r3, #0
    434c:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    434e:	68fb      	ldr	r3, [r7, #12]
    4350:	2b00      	cmp	r3, #0
    4352:	d026      	beq.n	43a2 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    4354:	204c      	movs	r0, #76	; 0x4c
    4356:	f001 fd41 	bl	5ddc <pvPortMalloc>
    435a:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    435c:	69bb      	ldr	r3, [r7, #24]
    435e:	2b00      	cmp	r3, #0
    4360:	d01f      	beq.n	43a2 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    4362:	68fb      	ldr	r3, [r7, #12]
    4364:	68ba      	ldr	r2, [r7, #8]
    4366:	fb02 f303 	mul.w	r3, r2, r3
    436a:	3301      	adds	r3, #1
    436c:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    436e:	6978      	ldr	r0, [r7, #20]
    4370:	f001 fd34 	bl	5ddc <pvPortMalloc>
    4374:	4602      	mov	r2, r0
    4376:	69bb      	ldr	r3, [r7, #24]
    4378:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    437a:	69bb      	ldr	r3, [r7, #24]
    437c:	681b      	ldr	r3, [r3, #0]
    437e:	2b00      	cmp	r3, #0
    4380:	d00c      	beq.n	439c <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    4382:	69bb      	ldr	r3, [r7, #24]
    4384:	68fa      	ldr	r2, [r7, #12]
    4386:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    4388:	69bb      	ldr	r3, [r7, #24]
    438a:	68ba      	ldr	r2, [r7, #8]
    438c:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    438e:	69b8      	ldr	r0, [r7, #24]
    4390:	2101      	movs	r1, #1
    4392:	f7ff ff85 	bl	42a0 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    4396:	69bb      	ldr	r3, [r7, #24]
    4398:	61fb      	str	r3, [r7, #28]
    439a:	e002      	b.n	43a2 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    439c:	69b8      	ldr	r0, [r7, #24]
    439e:	f001 fde1 	bl	5f64 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    43a2:	69fb      	ldr	r3, [r7, #28]
}
    43a4:	4618      	mov	r0, r3
    43a6:	3720      	adds	r7, #32
    43a8:	46bd      	mov	sp, r7
    43aa:	bd80      	pop	{r7, pc}

000043ac <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    43ac:	b580      	push	{r7, lr}
    43ae:	b084      	sub	sp, #16
    43b0:	af00      	add	r7, sp, #0
    43b2:	4603      	mov	r3, r0
    43b4:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    43b6:	204c      	movs	r0, #76	; 0x4c
    43b8:	f001 fd10 	bl	5ddc <pvPortMalloc>
    43bc:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    43be:	68fb      	ldr	r3, [r7, #12]
    43c0:	2b00      	cmp	r3, #0
    43c2:	d02c      	beq.n	441e <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    43c4:	68fb      	ldr	r3, [r7, #12]
    43c6:	2200      	movs	r2, #0
    43c8:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    43ca:	68fb      	ldr	r3, [r7, #12]
    43cc:	2200      	movs	r2, #0
    43ce:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    43d0:	68fb      	ldr	r3, [r7, #12]
    43d2:	2200      	movs	r2, #0
    43d4:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    43d6:	68fb      	ldr	r3, [r7, #12]
    43d8:	2200      	movs	r2, #0
    43da:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    43dc:	68fb      	ldr	r3, [r7, #12]
    43de:	2200      	movs	r2, #0
    43e0:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    43e2:	68fb      	ldr	r3, [r7, #12]
    43e4:	2201      	movs	r2, #1
    43e6:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    43e8:	68fb      	ldr	r3, [r7, #12]
    43ea:	2200      	movs	r2, #0
    43ec:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    43ee:	68fb      	ldr	r3, [r7, #12]
    43f0:	f04f 32ff 	mov.w	r2, #4294967295
    43f4:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    43f6:	68fb      	ldr	r3, [r7, #12]
    43f8:	f04f 32ff 	mov.w	r2, #4294967295
    43fc:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    43fe:	68fb      	ldr	r3, [r7, #12]
    4400:	3310      	adds	r3, #16
    4402:	4618      	mov	r0, r3
    4404:	f7ff fe98 	bl	4138 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    4408:	68fb      	ldr	r3, [r7, #12]
    440a:	3324      	adds	r3, #36	; 0x24
    440c:	4618      	mov	r0, r3
    440e:	f7ff fe93 	bl	4138 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    4412:	68f8      	ldr	r0, [r7, #12]
    4414:	2100      	movs	r1, #0
    4416:	2200      	movs	r2, #0
    4418:	2300      	movs	r3, #0
    441a:	f000 f81d 	bl	4458 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    441e:	68fb      	ldr	r3, [r7, #12]
	}
    4420:	4618      	mov	r0, r3
    4422:	3710      	adds	r7, #16
    4424:	46bd      	mov	sp, r7
    4426:	bd80      	pop	{r7, pc}

00004428 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    4428:	b580      	push	{r7, lr}
    442a:	b084      	sub	sp, #16
    442c:	af00      	add	r7, sp, #0
    442e:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    4430:	f001 fc5a 	bl	5ce8 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    4434:	687b      	ldr	r3, [r7, #4]
    4436:	681b      	ldr	r3, [r3, #0]
    4438:	2b00      	cmp	r3, #0
    443a:	d103      	bne.n	4444 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    443c:	687b      	ldr	r3, [r7, #4]
    443e:	685b      	ldr	r3, [r3, #4]
    4440:	60fb      	str	r3, [r7, #12]
    4442:	e001      	b.n	4448 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    4444:	2300      	movs	r3, #0
    4446:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    4448:	f001 fc64 	bl	5d14 <vPortExitCritical>
		
		return pxReturn;
    444c:	68fb      	ldr	r3, [r7, #12]
	}
    444e:	4618      	mov	r0, r3
    4450:	3710      	adds	r7, #16
    4452:	46bd      	mov	sp, r7
    4454:	bd80      	pop	{r7, pc}
    4456:	bf00      	nop

00004458 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    4458:	b580      	push	{r7, lr}
    445a:	b088      	sub	sp, #32
    445c:	af00      	add	r7, sp, #0
    445e:	60f8      	str	r0, [r7, #12]
    4460:	60b9      	str	r1, [r7, #8]
    4462:	607a      	str	r2, [r7, #4]
    4464:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    4466:	2300      	movs	r3, #0
    4468:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    446a:	f001 fc3d 	bl	5ce8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    446e:	68fb      	ldr	r3, [r7, #12]
    4470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4472:	68fb      	ldr	r3, [r7, #12]
    4474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4476:	429a      	cmp	r2, r3
    4478:	d216      	bcs.n	44a8 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    447a:	68f8      	ldr	r0, [r7, #12]
    447c:	68b9      	ldr	r1, [r7, #8]
    447e:	683a      	ldr	r2, [r7, #0]
    4480:	f000 f9d6 	bl	4830 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4484:	68fb      	ldr	r3, [r7, #12]
    4486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4488:	2b00      	cmp	r3, #0
    448a:	d009      	beq.n	44a0 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    448c:	68fb      	ldr	r3, [r7, #12]
    448e:	3324      	adds	r3, #36	; 0x24
    4490:	4618      	mov	r0, r3
    4492:	f001 f89f 	bl	55d4 <xTaskRemoveFromEventList>
    4496:	4603      	mov	r3, r0
    4498:	2b01      	cmp	r3, #1
    449a:	d101      	bne.n	44a0 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    449c:	f001 fc16 	bl	5ccc <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    44a0:	f001 fc38 	bl	5d14 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    44a4:	2301      	movs	r3, #1
    44a6:	e059      	b.n	455c <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    44a8:	687b      	ldr	r3, [r7, #4]
    44aa:	2b00      	cmp	r3, #0
    44ac:	d103      	bne.n	44b6 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    44ae:	f001 fc31 	bl	5d14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    44b2:	2300      	movs	r3, #0
    44b4:	e052      	b.n	455c <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    44b6:	69fb      	ldr	r3, [r7, #28]
    44b8:	2b00      	cmp	r3, #0
    44ba:	d106      	bne.n	44ca <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    44bc:	f107 0314 	add.w	r3, r7, #20
    44c0:	4618      	mov	r0, r3
    44c2:	f001 f8df 	bl	5684 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    44c6:	2301      	movs	r3, #1
    44c8:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    44ca:	f001 fc23 	bl	5d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    44ce:	f000 fe93 	bl	51f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    44d2:	f001 fc09 	bl	5ce8 <vPortEnterCritical>
    44d6:	68fb      	ldr	r3, [r7, #12]
    44d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    44da:	f1b3 3fff 	cmp.w	r3, #4294967295
    44de:	d102      	bne.n	44e6 <xQueueGenericSend+0x8e>
    44e0:	68fb      	ldr	r3, [r7, #12]
    44e2:	2200      	movs	r2, #0
    44e4:	645a      	str	r2, [r3, #68]	; 0x44
    44e6:	68fb      	ldr	r3, [r7, #12]
    44e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    44ea:	f1b3 3fff 	cmp.w	r3, #4294967295
    44ee:	d102      	bne.n	44f6 <xQueueGenericSend+0x9e>
    44f0:	68fb      	ldr	r3, [r7, #12]
    44f2:	2200      	movs	r2, #0
    44f4:	649a      	str	r2, [r3, #72]	; 0x48
    44f6:	f001 fc0d 	bl	5d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    44fa:	f107 0214 	add.w	r2, r7, #20
    44fe:	1d3b      	adds	r3, r7, #4
    4500:	4610      	mov	r0, r2
    4502:	4619      	mov	r1, r3
    4504:	f001 f8d6 	bl	56b4 <xTaskCheckForTimeOut>
    4508:	4603      	mov	r3, r0
    450a:	2b00      	cmp	r3, #0
    450c:	d11e      	bne.n	454c <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    450e:	68f8      	ldr	r0, [r7, #12]
    4510:	f000 fa86 	bl	4a20 <prvIsQueueFull>
    4514:	4603      	mov	r3, r0
    4516:	2b00      	cmp	r3, #0
    4518:	d012      	beq.n	4540 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    451a:	68fb      	ldr	r3, [r7, #12]
    451c:	f103 0210 	add.w	r2, r3, #16
    4520:	687b      	ldr	r3, [r7, #4]
    4522:	4610      	mov	r0, r2
    4524:	4619      	mov	r1, r3
    4526:	f001 f81d 	bl	5564 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    452a:	68f8      	ldr	r0, [r7, #12]
    452c:	f000 fa02 	bl	4934 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    4530:	f000 fe74 	bl	521c <xTaskResumeAll>
    4534:	4603      	mov	r3, r0
    4536:	2b00      	cmp	r3, #0
    4538:	d10f      	bne.n	455a <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    453a:	f001 fbc7 	bl	5ccc <vPortYieldFromISR>
    453e:	e00c      	b.n	455a <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    4540:	68f8      	ldr	r0, [r7, #12]
    4542:	f000 f9f7 	bl	4934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    4546:	f000 fe69 	bl	521c <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    454a:	e78e      	b.n	446a <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    454c:	68f8      	ldr	r0, [r7, #12]
    454e:	f000 f9f1 	bl	4934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    4552:	f000 fe63 	bl	521c <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    4556:	2300      	movs	r3, #0
    4558:	e000      	b.n	455c <xQueueGenericSend+0x104>
		}
	}
    455a:	e786      	b.n	446a <xQueueGenericSend+0x12>
}
    455c:	4618      	mov	r0, r3
    455e:	3720      	adds	r7, #32
    4560:	46bd      	mov	sp, r7
    4562:	bd80      	pop	{r7, pc}

00004564 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    4564:	b580      	push	{r7, lr}
    4566:	b086      	sub	sp, #24
    4568:	af00      	add	r7, sp, #0
    456a:	60f8      	str	r0, [r7, #12]
    456c:	60b9      	str	r1, [r7, #8]
    456e:	607a      	str	r2, [r7, #4]
    4570:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4572:	2300      	movs	r3, #0
    4574:	613b      	str	r3, [r7, #16]
    4576:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    457a:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    457e:	68fb      	ldr	r3, [r7, #12]
    4580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4582:	68fb      	ldr	r3, [r7, #12]
    4584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4586:	429a      	cmp	r2, r3
    4588:	d221      	bcs.n	45ce <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    458a:	68f8      	ldr	r0, [r7, #12]
    458c:	68b9      	ldr	r1, [r7, #8]
    458e:	683a      	ldr	r2, [r7, #0]
    4590:	f000 f94e 	bl	4830 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    4594:	68fb      	ldr	r3, [r7, #12]
    4596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4598:	f1b3 3fff 	cmp.w	r3, #4294967295
    459c:	d10f      	bne.n	45be <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    459e:	68fb      	ldr	r3, [r7, #12]
    45a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    45a2:	2b00      	cmp	r3, #0
    45a4:	d010      	beq.n	45c8 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    45a6:	68fb      	ldr	r3, [r7, #12]
    45a8:	3324      	adds	r3, #36	; 0x24
    45aa:	4618      	mov	r0, r3
    45ac:	f001 f812 	bl	55d4 <xTaskRemoveFromEventList>
    45b0:	4603      	mov	r3, r0
    45b2:	2b00      	cmp	r3, #0
    45b4:	d008      	beq.n	45c8 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    45b6:	687b      	ldr	r3, [r7, #4]
    45b8:	2201      	movs	r2, #1
    45ba:	601a      	str	r2, [r3, #0]
    45bc:	e004      	b.n	45c8 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    45be:	68fb      	ldr	r3, [r7, #12]
    45c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    45c2:	1c5a      	adds	r2, r3, #1
    45c4:	68fb      	ldr	r3, [r7, #12]
    45c6:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    45c8:	2301      	movs	r3, #1
    45ca:	617b      	str	r3, [r7, #20]
    45cc:	e001      	b.n	45d2 <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    45ce:	2300      	movs	r3, #0
    45d0:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    45d2:	f04f 0000 	mov.w	r0, #0
    45d6:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    45da:	697b      	ldr	r3, [r7, #20]
}
    45dc:	4618      	mov	r0, r3
    45de:	3718      	adds	r7, #24
    45e0:	46bd      	mov	sp, r7
    45e2:	bd80      	pop	{r7, pc}

000045e4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    45e4:	b580      	push	{r7, lr}
    45e6:	b088      	sub	sp, #32
    45e8:	af00      	add	r7, sp, #0
    45ea:	60f8      	str	r0, [r7, #12]
    45ec:	60b9      	str	r1, [r7, #8]
    45ee:	607a      	str	r2, [r7, #4]
    45f0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    45f2:	2300      	movs	r3, #0
    45f4:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    45f6:	f001 fb77 	bl	5ce8 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    45fa:	68fb      	ldr	r3, [r7, #12]
    45fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    45fe:	2b00      	cmp	r3, #0
    4600:	d03b      	beq.n	467a <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    4602:	68fb      	ldr	r3, [r7, #12]
    4604:	68db      	ldr	r3, [r3, #12]
    4606:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    4608:	68f8      	ldr	r0, [r7, #12]
    460a:	68b9      	ldr	r1, [r7, #8]
    460c:	f000 f96c 	bl	48e8 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    4610:	683b      	ldr	r3, [r7, #0]
    4612:	2b00      	cmp	r3, #0
    4614:	d11c      	bne.n	4650 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    4616:	68fb      	ldr	r3, [r7, #12]
    4618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    461a:	1e5a      	subs	r2, r3, #1
    461c:	68fb      	ldr	r3, [r7, #12]
    461e:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4620:	68fb      	ldr	r3, [r7, #12]
    4622:	681b      	ldr	r3, [r3, #0]
    4624:	2b00      	cmp	r3, #0
    4626:	d104      	bne.n	4632 <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    4628:	f001 f9f6 	bl	5a18 <xTaskGetCurrentTaskHandle>
    462c:	4602      	mov	r2, r0
    462e:	68fb      	ldr	r3, [r7, #12]
    4630:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4632:	68fb      	ldr	r3, [r7, #12]
    4634:	691b      	ldr	r3, [r3, #16]
    4636:	2b00      	cmp	r3, #0
    4638:	d01b      	beq.n	4672 <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    463a:	68fb      	ldr	r3, [r7, #12]
    463c:	3310      	adds	r3, #16
    463e:	4618      	mov	r0, r3
    4640:	f000 ffc8 	bl	55d4 <xTaskRemoveFromEventList>
    4644:	4603      	mov	r3, r0
    4646:	2b01      	cmp	r3, #1
    4648:	d113      	bne.n	4672 <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    464a:	f001 fb3f 	bl	5ccc <vPortYieldFromISR>
    464e:	e010      	b.n	4672 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    4650:	68fb      	ldr	r3, [r7, #12]
    4652:	69ba      	ldr	r2, [r7, #24]
    4654:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4656:	68fb      	ldr	r3, [r7, #12]
    4658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    465a:	2b00      	cmp	r3, #0
    465c:	d009      	beq.n	4672 <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    465e:	68fb      	ldr	r3, [r7, #12]
    4660:	3324      	adds	r3, #36	; 0x24
    4662:	4618      	mov	r0, r3
    4664:	f000 ffb6 	bl	55d4 <xTaskRemoveFromEventList>
    4668:	4603      	mov	r3, r0
    466a:	2b00      	cmp	r3, #0
    466c:	d001      	beq.n	4672 <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    466e:	f001 fb2d 	bl	5ccc <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    4672:	f001 fb4f 	bl	5d14 <vPortExitCritical>
				return pdPASS;
    4676:	2301      	movs	r3, #1
    4678:	e066      	b.n	4748 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    467a:	687b      	ldr	r3, [r7, #4]
    467c:	2b00      	cmp	r3, #0
    467e:	d103      	bne.n	4688 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4680:	f001 fb48 	bl	5d14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    4684:	2300      	movs	r3, #0
    4686:	e05f      	b.n	4748 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    4688:	69fb      	ldr	r3, [r7, #28]
    468a:	2b00      	cmp	r3, #0
    468c:	d106      	bne.n	469c <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    468e:	f107 0310 	add.w	r3, r7, #16
    4692:	4618      	mov	r0, r3
    4694:	f000 fff6 	bl	5684 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4698:	2301      	movs	r3, #1
    469a:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    469c:	f001 fb3a 	bl	5d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    46a0:	f000 fdaa 	bl	51f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    46a4:	f001 fb20 	bl	5ce8 <vPortEnterCritical>
    46a8:	68fb      	ldr	r3, [r7, #12]
    46aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    46ac:	f1b3 3fff 	cmp.w	r3, #4294967295
    46b0:	d102      	bne.n	46b8 <xQueueGenericReceive+0xd4>
    46b2:	68fb      	ldr	r3, [r7, #12]
    46b4:	2200      	movs	r2, #0
    46b6:	645a      	str	r2, [r3, #68]	; 0x44
    46b8:	68fb      	ldr	r3, [r7, #12]
    46ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    46bc:	f1b3 3fff 	cmp.w	r3, #4294967295
    46c0:	d102      	bne.n	46c8 <xQueueGenericReceive+0xe4>
    46c2:	68fb      	ldr	r3, [r7, #12]
    46c4:	2200      	movs	r2, #0
    46c6:	649a      	str	r2, [r3, #72]	; 0x48
    46c8:	f001 fb24 	bl	5d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    46cc:	f107 0210 	add.w	r2, r7, #16
    46d0:	1d3b      	adds	r3, r7, #4
    46d2:	4610      	mov	r0, r2
    46d4:	4619      	mov	r1, r3
    46d6:	f000 ffed 	bl	56b4 <xTaskCheckForTimeOut>
    46da:	4603      	mov	r3, r0
    46dc:	2b00      	cmp	r3, #0
    46de:	d12b      	bne.n	4738 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    46e0:	68f8      	ldr	r0, [r7, #12]
    46e2:	f000 f973 	bl	49cc <prvIsQueueEmpty>
    46e6:	4603      	mov	r3, r0
    46e8:	2b00      	cmp	r3, #0
    46ea:	d01f      	beq.n	472c <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    46ec:	68fb      	ldr	r3, [r7, #12]
    46ee:	681b      	ldr	r3, [r3, #0]
    46f0:	2b00      	cmp	r3, #0
    46f2:	d108      	bne.n	4706 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    46f4:	f001 faf8 	bl	5ce8 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    46f8:	68fb      	ldr	r3, [r7, #12]
    46fa:	685b      	ldr	r3, [r3, #4]
    46fc:	4618      	mov	r0, r3
    46fe:	f001 f99b 	bl	5a38 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    4702:	f001 fb07 	bl	5d14 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    4706:	68fb      	ldr	r3, [r7, #12]
    4708:	f103 0224 	add.w	r2, r3, #36	; 0x24
    470c:	687b      	ldr	r3, [r7, #4]
    470e:	4610      	mov	r0, r2
    4710:	4619      	mov	r1, r3
    4712:	f000 ff27 	bl	5564 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    4716:	68f8      	ldr	r0, [r7, #12]
    4718:	f000 f90c 	bl	4934 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    471c:	f000 fd7e 	bl	521c <xTaskResumeAll>
    4720:	4603      	mov	r3, r0
    4722:	2b00      	cmp	r3, #0
    4724:	d10f      	bne.n	4746 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    4726:	f001 fad1 	bl	5ccc <vPortYieldFromISR>
    472a:	e00c      	b.n	4746 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    472c:	68f8      	ldr	r0, [r7, #12]
    472e:	f000 f901 	bl	4934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    4732:	f000 fd73 	bl	521c <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    4736:	e75e      	b.n	45f6 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    4738:	68f8      	ldr	r0, [r7, #12]
    473a:	f000 f8fb 	bl	4934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    473e:	f000 fd6d 	bl	521c <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    4742:	2300      	movs	r3, #0
    4744:	e000      	b.n	4748 <xQueueGenericReceive+0x164>
		}
	}
    4746:	e756      	b.n	45f6 <xQueueGenericReceive+0x12>
}
    4748:	4618      	mov	r0, r3
    474a:	3720      	adds	r7, #32
    474c:	46bd      	mov	sp, r7
    474e:	bd80      	pop	{r7, pc}

00004750 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    4750:	b580      	push	{r7, lr}
    4752:	b086      	sub	sp, #24
    4754:	af00      	add	r7, sp, #0
    4756:	60f8      	str	r0, [r7, #12]
    4758:	60b9      	str	r1, [r7, #8]
    475a:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    475c:	2300      	movs	r3, #0
    475e:	613b      	str	r3, [r7, #16]
    4760:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4764:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    4768:	68fb      	ldr	r3, [r7, #12]
    476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    476c:	2b00      	cmp	r3, #0
    476e:	d025      	beq.n	47bc <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    4770:	68f8      	ldr	r0, [r7, #12]
    4772:	68b9      	ldr	r1, [r7, #8]
    4774:	f000 f8b8 	bl	48e8 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    4778:	68fb      	ldr	r3, [r7, #12]
    477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    477c:	1e5a      	subs	r2, r3, #1
    477e:	68fb      	ldr	r3, [r7, #12]
    4780:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    4782:	68fb      	ldr	r3, [r7, #12]
    4784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4786:	f1b3 3fff 	cmp.w	r3, #4294967295
    478a:	d10f      	bne.n	47ac <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    478c:	68fb      	ldr	r3, [r7, #12]
    478e:	691b      	ldr	r3, [r3, #16]
    4790:	2b00      	cmp	r3, #0
    4792:	d010      	beq.n	47b6 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4794:	68fb      	ldr	r3, [r7, #12]
    4796:	3310      	adds	r3, #16
    4798:	4618      	mov	r0, r3
    479a:	f000 ff1b 	bl	55d4 <xTaskRemoveFromEventList>
    479e:	4603      	mov	r3, r0
    47a0:	2b00      	cmp	r3, #0
    47a2:	d008      	beq.n	47b6 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    47a4:	687b      	ldr	r3, [r7, #4]
    47a6:	2201      	movs	r2, #1
    47a8:	601a      	str	r2, [r3, #0]
    47aa:	e004      	b.n	47b6 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    47ac:	68fb      	ldr	r3, [r7, #12]
    47ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    47b0:	1c5a      	adds	r2, r3, #1
    47b2:	68fb      	ldr	r3, [r7, #12]
    47b4:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    47b6:	2301      	movs	r3, #1
    47b8:	617b      	str	r3, [r7, #20]
    47ba:	e001      	b.n	47c0 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    47bc:	2300      	movs	r3, #0
    47be:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    47c0:	f04f 0000 	mov.w	r0, #0
    47c4:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    47c8:	697b      	ldr	r3, [r7, #20]
}
    47ca:	4618      	mov	r0, r3
    47cc:	3718      	adds	r7, #24
    47ce:	46bd      	mov	sp, r7
    47d0:	bd80      	pop	{r7, pc}
    47d2:	bf00      	nop

000047d4 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    47d4:	b580      	push	{r7, lr}
    47d6:	b084      	sub	sp, #16
    47d8:	af00      	add	r7, sp, #0
    47da:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    47dc:	f001 fa84 	bl	5ce8 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    47e0:	687b      	ldr	r3, [r7, #4]
    47e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47e4:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    47e6:	f001 fa95 	bl	5d14 <vPortExitCritical>

	return uxReturn;
    47ea:	68fb      	ldr	r3, [r7, #12]
}
    47ec:	4618      	mov	r0, r3
    47ee:	3710      	adds	r7, #16
    47f0:	46bd      	mov	sp, r7
    47f2:	bd80      	pop	{r7, pc}

000047f4 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    47f4:	b480      	push	{r7}
    47f6:	b085      	sub	sp, #20
    47f8:	af00      	add	r7, sp, #0
    47fa:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    47fc:	687b      	ldr	r3, [r7, #4]
    47fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4800:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    4802:	68fb      	ldr	r3, [r7, #12]
}
    4804:	4618      	mov	r0, r3
    4806:	3714      	adds	r7, #20
    4808:	46bd      	mov	sp, r7
    480a:	f85d 7b04 	ldr.w	r7, [sp], #4
    480e:	4770      	bx	lr

00004810 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    4810:	b580      	push	{r7, lr}
    4812:	b082      	sub	sp, #8
    4814:	af00      	add	r7, sp, #0
    4816:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    4818:	687b      	ldr	r3, [r7, #4]
    481a:	681b      	ldr	r3, [r3, #0]
    481c:	4618      	mov	r0, r3
    481e:	f001 fba1 	bl	5f64 <vPortFree>
	vPortFree( pxQueue );
    4822:	6878      	ldr	r0, [r7, #4]
    4824:	f001 fb9e 	bl	5f64 <vPortFree>
}
    4828:	3708      	adds	r7, #8
    482a:	46bd      	mov	sp, r7
    482c:	bd80      	pop	{r7, pc}
    482e:	bf00      	nop

00004830 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    4830:	b580      	push	{r7, lr}
    4832:	b084      	sub	sp, #16
    4834:	af00      	add	r7, sp, #0
    4836:	60f8      	str	r0, [r7, #12]
    4838:	60b9      	str	r1, [r7, #8]
    483a:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    483c:	68fb      	ldr	r3, [r7, #12]
    483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4840:	2b00      	cmp	r3, #0
    4842:	d10c      	bne.n	485e <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4844:	68fb      	ldr	r3, [r7, #12]
    4846:	681b      	ldr	r3, [r3, #0]
    4848:	2b00      	cmp	r3, #0
    484a:	d145      	bne.n	48d8 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    484c:	68fb      	ldr	r3, [r7, #12]
    484e:	685b      	ldr	r3, [r3, #4]
    4850:	4618      	mov	r0, r3
    4852:	f001 f955 	bl	5b00 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    4856:	68fb      	ldr	r3, [r7, #12]
    4858:	2200      	movs	r2, #0
    485a:	605a      	str	r2, [r3, #4]
    485c:	e03c      	b.n	48d8 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    485e:	687b      	ldr	r3, [r7, #4]
    4860:	2b00      	cmp	r3, #0
    4862:	d11a      	bne.n	489a <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4864:	68fb      	ldr	r3, [r7, #12]
    4866:	689a      	ldr	r2, [r3, #8]
    4868:	68fb      	ldr	r3, [r7, #12]
    486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    486c:	4610      	mov	r0, r2
    486e:	68b9      	ldr	r1, [r7, #8]
    4870:	461a      	mov	r2, r3
    4872:	f014 f827 	bl	188c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    4876:	68fb      	ldr	r3, [r7, #12]
    4878:	689a      	ldr	r2, [r3, #8]
    487a:	68fb      	ldr	r3, [r7, #12]
    487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    487e:	441a      	add	r2, r3
    4880:	68fb      	ldr	r3, [r7, #12]
    4882:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    4884:	68fb      	ldr	r3, [r7, #12]
    4886:	689a      	ldr	r2, [r3, #8]
    4888:	68fb      	ldr	r3, [r7, #12]
    488a:	685b      	ldr	r3, [r3, #4]
    488c:	429a      	cmp	r2, r3
    488e:	d323      	bcc.n	48d8 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    4890:	68fb      	ldr	r3, [r7, #12]
    4892:	681a      	ldr	r2, [r3, #0]
    4894:	68fb      	ldr	r3, [r7, #12]
    4896:	609a      	str	r2, [r3, #8]
    4898:	e01e      	b.n	48d8 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    489a:	68fb      	ldr	r3, [r7, #12]
    489c:	68da      	ldr	r2, [r3, #12]
    489e:	68fb      	ldr	r3, [r7, #12]
    48a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48a2:	4610      	mov	r0, r2
    48a4:	68b9      	ldr	r1, [r7, #8]
    48a6:	461a      	mov	r2, r3
    48a8:	f014 f80c 	bl	188c4 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    48ac:	68fb      	ldr	r3, [r7, #12]
    48ae:	68da      	ldr	r2, [r3, #12]
    48b0:	68fb      	ldr	r3, [r7, #12]
    48b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48b4:	425b      	negs	r3, r3
    48b6:	441a      	add	r2, r3
    48b8:	68fb      	ldr	r3, [r7, #12]
    48ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    48bc:	68fb      	ldr	r3, [r7, #12]
    48be:	68da      	ldr	r2, [r3, #12]
    48c0:	68fb      	ldr	r3, [r7, #12]
    48c2:	681b      	ldr	r3, [r3, #0]
    48c4:	429a      	cmp	r2, r3
    48c6:	d207      	bcs.n	48d8 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    48c8:	68fb      	ldr	r3, [r7, #12]
    48ca:	685a      	ldr	r2, [r3, #4]
    48cc:	68fb      	ldr	r3, [r7, #12]
    48ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48d0:	425b      	negs	r3, r3
    48d2:	441a      	add	r2, r3
    48d4:	68fb      	ldr	r3, [r7, #12]
    48d6:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    48d8:	68fb      	ldr	r3, [r7, #12]
    48da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    48dc:	1c5a      	adds	r2, r3, #1
    48de:	68fb      	ldr	r3, [r7, #12]
    48e0:	639a      	str	r2, [r3, #56]	; 0x38
}
    48e2:	3710      	adds	r7, #16
    48e4:	46bd      	mov	sp, r7
    48e6:	bd80      	pop	{r7, pc}

000048e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    48e8:	b580      	push	{r7, lr}
    48ea:	b082      	sub	sp, #8
    48ec:	af00      	add	r7, sp, #0
    48ee:	6078      	str	r0, [r7, #4]
    48f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    48f2:	687b      	ldr	r3, [r7, #4]
    48f4:	681b      	ldr	r3, [r3, #0]
    48f6:	2b00      	cmp	r3, #0
    48f8:	d019      	beq.n	492e <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    48fa:	687b      	ldr	r3, [r7, #4]
    48fc:	68da      	ldr	r2, [r3, #12]
    48fe:	687b      	ldr	r3, [r7, #4]
    4900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4902:	441a      	add	r2, r3
    4904:	687b      	ldr	r3, [r7, #4]
    4906:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    4908:	687b      	ldr	r3, [r7, #4]
    490a:	68da      	ldr	r2, [r3, #12]
    490c:	687b      	ldr	r3, [r7, #4]
    490e:	685b      	ldr	r3, [r3, #4]
    4910:	429a      	cmp	r2, r3
    4912:	d303      	bcc.n	491c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    4914:	687b      	ldr	r3, [r7, #4]
    4916:	681a      	ldr	r2, [r3, #0]
    4918:	687b      	ldr	r3, [r7, #4]
    491a:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    491c:	687b      	ldr	r3, [r7, #4]
    491e:	68da      	ldr	r2, [r3, #12]
    4920:	687b      	ldr	r3, [r7, #4]
    4922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4924:	6838      	ldr	r0, [r7, #0]
    4926:	4611      	mov	r1, r2
    4928:	461a      	mov	r2, r3
    492a:	f013 ffcb 	bl	188c4 <memcpy>
	}
}
    492e:	3708      	adds	r7, #8
    4930:	46bd      	mov	sp, r7
    4932:	bd80      	pop	{r7, pc}

00004934 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    4934:	b580      	push	{r7, lr}
    4936:	b082      	sub	sp, #8
    4938:	af00      	add	r7, sp, #0
    493a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    493c:	f001 f9d4 	bl	5ce8 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    4940:	e014      	b.n	496c <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4942:	687b      	ldr	r3, [r7, #4]
    4944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4946:	2b00      	cmp	r3, #0
    4948:	d00f      	beq.n	496a <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    494a:	687b      	ldr	r3, [r7, #4]
    494c:	3324      	adds	r3, #36	; 0x24
    494e:	4618      	mov	r0, r3
    4950:	f000 fe40 	bl	55d4 <xTaskRemoveFromEventList>
    4954:	4603      	mov	r3, r0
    4956:	2b00      	cmp	r3, #0
    4958:	d001      	beq.n	495e <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    495a:	f000 fef7 	bl	574c <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    495e:	687b      	ldr	r3, [r7, #4]
    4960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4962:	1e5a      	subs	r2, r3, #1
    4964:	687b      	ldr	r3, [r7, #4]
    4966:	649a      	str	r2, [r3, #72]	; 0x48
    4968:	e000      	b.n	496c <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    496a:	e003      	b.n	4974 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    496c:	687b      	ldr	r3, [r7, #4]
    496e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4970:	2b00      	cmp	r3, #0
    4972:	dce6      	bgt.n	4942 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    4974:	687b      	ldr	r3, [r7, #4]
    4976:	f04f 32ff 	mov.w	r2, #4294967295
    497a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    497c:	f001 f9ca 	bl	5d14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    4980:	f001 f9b2 	bl	5ce8 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4984:	e014      	b.n	49b0 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4986:	687b      	ldr	r3, [r7, #4]
    4988:	691b      	ldr	r3, [r3, #16]
    498a:	2b00      	cmp	r3, #0
    498c:	d00f      	beq.n	49ae <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    498e:	687b      	ldr	r3, [r7, #4]
    4990:	3310      	adds	r3, #16
    4992:	4618      	mov	r0, r3
    4994:	f000 fe1e 	bl	55d4 <xTaskRemoveFromEventList>
    4998:	4603      	mov	r3, r0
    499a:	2b00      	cmp	r3, #0
    499c:	d001      	beq.n	49a2 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    499e:	f000 fed5 	bl	574c <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    49a2:	687b      	ldr	r3, [r7, #4]
    49a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    49a6:	1e5a      	subs	r2, r3, #1
    49a8:	687b      	ldr	r3, [r7, #4]
    49aa:	645a      	str	r2, [r3, #68]	; 0x44
    49ac:	e000      	b.n	49b0 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    49ae:	e003      	b.n	49b8 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    49b0:	687b      	ldr	r3, [r7, #4]
    49b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    49b4:	2b00      	cmp	r3, #0
    49b6:	dce6      	bgt.n	4986 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    49b8:	687b      	ldr	r3, [r7, #4]
    49ba:	f04f 32ff 	mov.w	r2, #4294967295
    49be:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    49c0:	f001 f9a8 	bl	5d14 <vPortExitCritical>
}
    49c4:	3708      	adds	r7, #8
    49c6:	46bd      	mov	sp, r7
    49c8:	bd80      	pop	{r7, pc}
    49ca:	bf00      	nop

000049cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    49cc:	b580      	push	{r7, lr}
    49ce:	b084      	sub	sp, #16
    49d0:	af00      	add	r7, sp, #0
    49d2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    49d4:	f001 f988 	bl	5ce8 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    49d8:	687b      	ldr	r3, [r7, #4]
    49da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    49dc:	2b00      	cmp	r3, #0
    49de:	bf14      	ite	ne
    49e0:	2300      	movne	r3, #0
    49e2:	2301      	moveq	r3, #1
    49e4:	b2db      	uxtb	r3, r3
    49e6:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    49e8:	f001 f994 	bl	5d14 <vPortExitCritical>

	return xReturn;
    49ec:	68fb      	ldr	r3, [r7, #12]
}
    49ee:	4618      	mov	r0, r3
    49f0:	3710      	adds	r7, #16
    49f2:	46bd      	mov	sp, r7
    49f4:	bd80      	pop	{r7, pc}
    49f6:	bf00      	nop

000049f8 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    49f8:	b480      	push	{r7}
    49fa:	b085      	sub	sp, #20
    49fc:	af00      	add	r7, sp, #0
    49fe:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4a00:	687b      	ldr	r3, [r7, #4]
    4a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4a04:	2b00      	cmp	r3, #0
    4a06:	bf14      	ite	ne
    4a08:	2300      	movne	r3, #0
    4a0a:	2301      	moveq	r3, #1
    4a0c:	b2db      	uxtb	r3, r3
    4a0e:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4a10:	68fb      	ldr	r3, [r7, #12]
}
    4a12:	4618      	mov	r0, r3
    4a14:	3714      	adds	r7, #20
    4a16:	46bd      	mov	sp, r7
    4a18:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a1c:	4770      	bx	lr
    4a1e:	bf00      	nop

00004a20 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    4a20:	b580      	push	{r7, lr}
    4a22:	b084      	sub	sp, #16
    4a24:	af00      	add	r7, sp, #0
    4a26:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4a28:	f001 f95e 	bl	5ce8 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4a2c:	687b      	ldr	r3, [r7, #4]
    4a2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4a30:	687b      	ldr	r3, [r7, #4]
    4a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4a34:	429a      	cmp	r2, r3
    4a36:	bf14      	ite	ne
    4a38:	2300      	movne	r3, #0
    4a3a:	2301      	moveq	r3, #1
    4a3c:	b2db      	uxtb	r3, r3
    4a3e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4a40:	f001 f968 	bl	5d14 <vPortExitCritical>

	return xReturn;
    4a44:	68fb      	ldr	r3, [r7, #12]
}
    4a46:	4618      	mov	r0, r3
    4a48:	3710      	adds	r7, #16
    4a4a:	46bd      	mov	sp, r7
    4a4c:	bd80      	pop	{r7, pc}
    4a4e:	bf00      	nop

00004a50 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    4a50:	b480      	push	{r7}
    4a52:	b085      	sub	sp, #20
    4a54:	af00      	add	r7, sp, #0
    4a56:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4a58:	687b      	ldr	r3, [r7, #4]
    4a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4a5c:	687b      	ldr	r3, [r7, #4]
    4a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4a60:	429a      	cmp	r2, r3
    4a62:	bf14      	ite	ne
    4a64:	2300      	movne	r3, #0
    4a66:	2301      	moveq	r3, #1
    4a68:	b2db      	uxtb	r3, r3
    4a6a:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4a6c:	68fb      	ldr	r3, [r7, #12]
}
    4a6e:	4618      	mov	r0, r3
    4a70:	3714      	adds	r7, #20
    4a72:	46bd      	mov	sp, r7
    4a74:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a78:	4770      	bx	lr
    4a7a:	bf00      	nop

00004a7c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    4a7c:	b580      	push	{r7, lr}
    4a7e:	b08a      	sub	sp, #40	; 0x28
    4a80:	af02      	add	r7, sp, #8
    4a82:	60f8      	str	r0, [r7, #12]
    4a84:	60b9      	str	r1, [r7, #8]
    4a86:	603b      	str	r3, [r7, #0]
    4a88:	4613      	mov	r3, r2
    4a8a:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    4a8c:	88fb      	ldrh	r3, [r7, #6]
    4a8e:	4618      	mov	r0, r3
    4a90:	6b39      	ldr	r1, [r7, #48]	; 0x30
    4a92:	f000 ff7f 	bl	5994 <prvAllocateTCBAndStack>
    4a96:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4a98:	69bb      	ldr	r3, [r7, #24]
    4a9a:	2b00      	cmp	r3, #0
    4a9c:	f000 80a1 	beq.w	4be2 <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    4aa0:	69bb      	ldr	r3, [r7, #24]
    4aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4aa4:	88fb      	ldrh	r3, [r7, #6]
    4aa6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4aaa:	3b01      	subs	r3, #1
    4aac:	009b      	lsls	r3, r3, #2
    4aae:	4413      	add	r3, r2
    4ab0:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    4ab2:	697b      	ldr	r3, [r7, #20]
    4ab4:	f023 0307 	bic.w	r3, r3, #7
    4ab8:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    4aba:	88fb      	ldrh	r3, [r7, #6]
    4abc:	9300      	str	r3, [sp, #0]
    4abe:	69b8      	ldr	r0, [r7, #24]
    4ac0:	68b9      	ldr	r1, [r7, #8]
    4ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4ac6:	f000 fe57 	bl	5778 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4aca:	6978      	ldr	r0, [r7, #20]
    4acc:	68f9      	ldr	r1, [r7, #12]
    4ace:	683a      	ldr	r2, [r7, #0]
    4ad0:	f001 f88c 	bl	5bec <pxPortInitialiseStack>
    4ad4:	4602      	mov	r2, r0
    4ad6:	69bb      	ldr	r3, [r7, #24]
    4ad8:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    4ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4adc:	2b00      	cmp	r3, #0
    4ade:	d002      	beq.n	4ae6 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4ae2:	69ba      	ldr	r2, [r7, #24]
    4ae4:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4ae6:	f001 f8ff 	bl	5ce8 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    4aea:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4af2:	681b      	ldr	r3, [r3, #0]
    4af4:	1c5a      	adds	r2, r3, #1
    4af6:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4afe:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    4b00:	f241 4310 	movw	r3, #5136	; 0x1410
    4b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b08:	681b      	ldr	r3, [r3, #0]
    4b0a:	2b00      	cmp	r3, #0
    4b0c:	d10f      	bne.n	4b2e <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    4b0e:	f241 4310 	movw	r3, #5136	; 0x1410
    4b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b16:	69ba      	ldr	r2, [r7, #24]
    4b18:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    4b1a:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b22:	681b      	ldr	r3, [r3, #0]
    4b24:	2b01      	cmp	r3, #1
    4b26:	d118      	bne.n	4b5a <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    4b28:	f000 fe5c 	bl	57e4 <prvInitialiseTaskLists>
    4b2c:	e015      	b.n	4b5a <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    4b2e:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b36:	681b      	ldr	r3, [r3, #0]
    4b38:	2b00      	cmp	r3, #0
    4b3a:	d10e      	bne.n	4b5a <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    4b3c:	f241 4310 	movw	r3, #5136	; 0x1410
    4b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b44:	681b      	ldr	r3, [r3, #0]
    4b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4b4a:	429a      	cmp	r2, r3
    4b4c:	d805      	bhi.n	4b5a <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    4b4e:	f241 4310 	movw	r3, #5136	; 0x1410
    4b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b56:	69ba      	ldr	r2, [r7, #24]
    4b58:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    4b5a:	69bb      	ldr	r3, [r7, #24]
    4b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b5e:	f241 43f0 	movw	r3, #5360	; 0x14f0
    4b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b66:	681b      	ldr	r3, [r3, #0]
    4b68:	429a      	cmp	r2, r3
    4b6a:	d906      	bls.n	4b7a <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    4b6c:	69bb      	ldr	r3, [r7, #24]
    4b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b70:	f241 43f0 	movw	r3, #5360	; 0x14f0
    4b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b78:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    4b7a:	f241 530c 	movw	r3, #5388	; 0x150c
    4b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b82:	681b      	ldr	r3, [r3, #0]
    4b84:	1c5a      	adds	r2, r3, #1
    4b86:	f241 530c 	movw	r3, #5388	; 0x150c
    4b8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b8e:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    4b90:	69bb      	ldr	r3, [r7, #24]
    4b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b94:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b9c:	681b      	ldr	r3, [r3, #0]
    4b9e:	429a      	cmp	r2, r3
    4ba0:	d906      	bls.n	4bb0 <xTaskGenericCreate+0x134>
    4ba2:	69bb      	ldr	r3, [r7, #24]
    4ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ba6:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bae:	601a      	str	r2, [r3, #0]
    4bb0:	69bb      	ldr	r3, [r7, #24]
    4bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bb4:	4613      	mov	r3, r2
    4bb6:	009b      	lsls	r3, r3, #2
    4bb8:	4413      	add	r3, r2
    4bba:	009b      	lsls	r3, r3, #2
    4bbc:	f241 4214 	movw	r2, #5140	; 0x1414
    4bc0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4bc4:	441a      	add	r2, r3
    4bc6:	69bb      	ldr	r3, [r7, #24]
    4bc8:	3304      	adds	r3, #4
    4bca:	4610      	mov	r0, r2
    4bcc:	4619      	mov	r1, r3
    4bce:	f7ff fadf 	bl	4190 <vListInsertEnd>

			xReturn = pdPASS;
    4bd2:	2301      	movs	r3, #1
    4bd4:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    4bd6:	69b8      	ldr	r0, [r7, #24]
    4bd8:	f012 fe78 	bl	178cc <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    4bdc:	f001 f89a 	bl	5d14 <vPortExitCritical>
    4be0:	e002      	b.n	4be8 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4be2:	f04f 33ff 	mov.w	r3, #4294967295
    4be6:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4be8:	69fb      	ldr	r3, [r7, #28]
    4bea:	2b01      	cmp	r3, #1
    4bec:	d111      	bne.n	4c12 <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    4bee:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bf6:	681b      	ldr	r3, [r3, #0]
    4bf8:	2b00      	cmp	r3, #0
    4bfa:	d00a      	beq.n	4c12 <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    4bfc:	f241 4310 	movw	r3, #5136	; 0x1410
    4c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c04:	681b      	ldr	r3, [r3, #0]
    4c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4c0a:	429a      	cmp	r2, r3
    4c0c:	d201      	bcs.n	4c12 <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    4c0e:	f001 f85d 	bl	5ccc <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    4c12:	69fb      	ldr	r3, [r7, #28]
}
    4c14:	4618      	mov	r0, r3
    4c16:	3720      	adds	r7, #32
    4c18:	46bd      	mov	sp, r7
    4c1a:	bd80      	pop	{r7, pc}

00004c1c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    4c1c:	b580      	push	{r7, lr}
    4c1e:	b084      	sub	sp, #16
    4c20:	af00      	add	r7, sp, #0
    4c22:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4c24:	f001 f860 	bl	5ce8 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    4c28:	f241 4310 	movw	r3, #5136	; 0x1410
    4c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c30:	681b      	ldr	r3, [r3, #0]
    4c32:	687a      	ldr	r2, [r7, #4]
    4c34:	429a      	cmp	r2, r3
    4c36:	d101      	bne.n	4c3c <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    4c38:	2300      	movs	r3, #0
    4c3a:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    4c3c:	687b      	ldr	r3, [r7, #4]
    4c3e:	2b00      	cmp	r3, #0
    4c40:	d105      	bne.n	4c4e <vTaskDelete+0x32>
    4c42:	f241 4310 	movw	r3, #5136	; 0x1410
    4c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c4a:	681b      	ldr	r3, [r3, #0]
    4c4c:	e000      	b.n	4c50 <vTaskDelete+0x34>
    4c4e:	687b      	ldr	r3, [r7, #4]
    4c50:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4c52:	68fb      	ldr	r3, [r7, #12]
    4c54:	3304      	adds	r3, #4
    4c56:	4618      	mov	r0, r3
    4c58:	f7ff fafa 	bl	4250 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4c5c:	68fb      	ldr	r3, [r7, #12]
    4c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c60:	2b00      	cmp	r3, #0
    4c62:	d004      	beq.n	4c6e <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4c64:	68fb      	ldr	r3, [r7, #12]
    4c66:	3318      	adds	r3, #24
    4c68:	4618      	mov	r0, r3
    4c6a:	f7ff faf1 	bl	4250 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    4c6e:	68fb      	ldr	r3, [r7, #12]
    4c70:	3304      	adds	r3, #4
    4c72:	f241 40bc 	movw	r0, #5308	; 0x14bc
    4c76:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4c7a:	4619      	mov	r1, r3
    4c7c:	f7ff fa88 	bl	4190 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4c80:	f241 43d0 	movw	r3, #5328	; 0x14d0
    4c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c88:	681b      	ldr	r3, [r3, #0]
    4c8a:	1c5a      	adds	r2, r3, #1
    4c8c:	f241 43d0 	movw	r3, #5328	; 0x14d0
    4c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c94:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4c96:	f241 530c 	movw	r3, #5388	; 0x150c
    4c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c9e:	681b      	ldr	r3, [r3, #0]
    4ca0:	1c5a      	adds	r2, r3, #1
    4ca2:	f241 530c 	movw	r3, #5388	; 0x150c
    4ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4caa:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4cac:	f001 f832 	bl	5d14 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4cb0:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cb8:	681b      	ldr	r3, [r3, #0]
    4cba:	2b00      	cmp	r3, #0
    4cbc:	d004      	beq.n	4cc8 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4cbe:	687b      	ldr	r3, [r7, #4]
    4cc0:	2b00      	cmp	r3, #0
    4cc2:	d101      	bne.n	4cc8 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    4cc4:	f001 f802 	bl	5ccc <vPortYieldFromISR>
			}
		}
	}
    4cc8:	3710      	adds	r7, #16
    4cca:	46bd      	mov	sp, r7
    4ccc:	bd80      	pop	{r7, pc}
    4cce:	bf00      	nop

00004cd0 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4cd0:	b580      	push	{r7, lr}
    4cd2:	b086      	sub	sp, #24
    4cd4:	af00      	add	r7, sp, #0
    4cd6:	6078      	str	r0, [r7, #4]
    4cd8:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4cda:	2300      	movs	r3, #0
    4cdc:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    4cde:	f000 fa8b 	bl	51f8 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4ce2:	687b      	ldr	r3, [r7, #4]
    4ce4:	681a      	ldr	r2, [r3, #0]
    4ce6:	683b      	ldr	r3, [r7, #0]
    4ce8:	4413      	add	r3, r2
    4cea:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    4cec:	687b      	ldr	r3, [r7, #4]
    4cee:	681a      	ldr	r2, [r3, #0]
    4cf0:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cf8:	681b      	ldr	r3, [r3, #0]
    4cfa:	429a      	cmp	r2, r3
    4cfc:	d90f      	bls.n	4d1e <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    4cfe:	687b      	ldr	r3, [r7, #4]
    4d00:	681a      	ldr	r2, [r3, #0]
    4d02:	693b      	ldr	r3, [r7, #16]
    4d04:	429a      	cmp	r2, r3
    4d06:	d919      	bls.n	4d3c <vTaskDelayUntil+0x6c>
    4d08:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d10:	681b      	ldr	r3, [r3, #0]
    4d12:	693a      	ldr	r2, [r7, #16]
    4d14:	429a      	cmp	r2, r3
    4d16:	d911      	bls.n	4d3c <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4d18:	2301      	movs	r3, #1
    4d1a:	617b      	str	r3, [r7, #20]
    4d1c:	e00e      	b.n	4d3c <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4d1e:	687b      	ldr	r3, [r7, #4]
    4d20:	681a      	ldr	r2, [r3, #0]
    4d22:	693b      	ldr	r3, [r7, #16]
    4d24:	429a      	cmp	r2, r3
    4d26:	d807      	bhi.n	4d38 <vTaskDelayUntil+0x68>
    4d28:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d30:	681b      	ldr	r3, [r3, #0]
    4d32:	693a      	ldr	r2, [r7, #16]
    4d34:	429a      	cmp	r2, r3
    4d36:	d901      	bls.n	4d3c <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4d38:	2301      	movs	r3, #1
    4d3a:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4d3c:	687b      	ldr	r3, [r7, #4]
    4d3e:	693a      	ldr	r2, [r7, #16]
    4d40:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    4d42:	697b      	ldr	r3, [r7, #20]
    4d44:	2b00      	cmp	r3, #0
    4d46:	d00b      	beq.n	4d60 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4d48:	f241 4310 	movw	r3, #5136	; 0x1410
    4d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d50:	681b      	ldr	r3, [r3, #0]
    4d52:	3304      	adds	r3, #4
    4d54:	4618      	mov	r0, r3
    4d56:	f7ff fa7b 	bl	4250 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4d5a:	6938      	ldr	r0, [r7, #16]
    4d5c:	f000 fdd6 	bl	590c <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4d60:	f000 fa5c 	bl	521c <xTaskResumeAll>
    4d64:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4d66:	68fb      	ldr	r3, [r7, #12]
    4d68:	2b00      	cmp	r3, #0
    4d6a:	d101      	bne.n	4d70 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    4d6c:	f000 ffae 	bl	5ccc <vPortYieldFromISR>
		}
	}
    4d70:	3718      	adds	r7, #24
    4d72:	46bd      	mov	sp, r7
    4d74:	bd80      	pop	{r7, pc}
    4d76:	bf00      	nop

00004d78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4d78:	b580      	push	{r7, lr}
    4d7a:	b084      	sub	sp, #16
    4d7c:	af00      	add	r7, sp, #0
    4d7e:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4d80:	2300      	movs	r3, #0
    4d82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4d84:	687b      	ldr	r3, [r7, #4]
    4d86:	2b00      	cmp	r3, #0
    4d88:	d018      	beq.n	4dbc <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4d8a:	f000 fa35 	bl	51f8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4d8e:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d96:	681a      	ldr	r2, [r3, #0]
    4d98:	687b      	ldr	r3, [r7, #4]
    4d9a:	4413      	add	r3, r2
    4d9c:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4d9e:	f241 4310 	movw	r3, #5136	; 0x1410
    4da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4da6:	681b      	ldr	r3, [r3, #0]
    4da8:	3304      	adds	r3, #4
    4daa:	4618      	mov	r0, r3
    4dac:	f7ff fa50 	bl	4250 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4db0:	68b8      	ldr	r0, [r7, #8]
    4db2:	f000 fdab 	bl	590c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4db6:	f000 fa31 	bl	521c <xTaskResumeAll>
    4dba:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4dbc:	68fb      	ldr	r3, [r7, #12]
    4dbe:	2b00      	cmp	r3, #0
    4dc0:	d101      	bne.n	4dc6 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    4dc2:	f000 ff83 	bl	5ccc <vPortYieldFromISR>
		}
	}
    4dc6:	3710      	adds	r7, #16
    4dc8:	46bd      	mov	sp, r7
    4dca:	bd80      	pop	{r7, pc}

00004dcc <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4dcc:	b580      	push	{r7, lr}
    4dce:	b084      	sub	sp, #16
    4dd0:	af00      	add	r7, sp, #0
    4dd2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4dd4:	f000 ff88 	bl	5ce8 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4dd8:	687b      	ldr	r3, [r7, #4]
    4dda:	2b00      	cmp	r3, #0
    4ddc:	d105      	bne.n	4dea <uxTaskPriorityGet+0x1e>
    4dde:	f241 4310 	movw	r3, #5136	; 0x1410
    4de2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4de6:	681b      	ldr	r3, [r3, #0]
    4de8:	e000      	b.n	4dec <uxTaskPriorityGet+0x20>
    4dea:	687b      	ldr	r3, [r7, #4]
    4dec:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    4dee:	68fb      	ldr	r3, [r7, #12]
    4df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4df2:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    4df4:	f000 ff8e 	bl	5d14 <vPortExitCritical>

		return uxReturn;
    4df8:	68bb      	ldr	r3, [r7, #8]
	}
    4dfa:	4618      	mov	r0, r3
    4dfc:	3710      	adds	r7, #16
    4dfe:	46bd      	mov	sp, r7
    4e00:	bd80      	pop	{r7, pc}
    4e02:	bf00      	nop

00004e04 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    4e04:	b580      	push	{r7, lr}
    4e06:	b086      	sub	sp, #24
    4e08:	af00      	add	r7, sp, #0
    4e0a:	6078      	str	r0, [r7, #4]
    4e0c:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4e0e:	2300      	movs	r3, #0
    4e10:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    4e12:	683b      	ldr	r3, [r7, #0]
    4e14:	2b04      	cmp	r3, #4
    4e16:	d901      	bls.n	4e1c <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4e18:	2304      	movs	r3, #4
    4e1a:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4e1c:	f000 ff64 	bl	5ce8 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4e20:	f241 4310 	movw	r3, #5136	; 0x1410
    4e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e28:	681b      	ldr	r3, [r3, #0]
    4e2a:	687a      	ldr	r2, [r7, #4]
    4e2c:	429a      	cmp	r2, r3
    4e2e:	d101      	bne.n	4e34 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4e30:	2300      	movs	r3, #0
    4e32:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4e34:	687b      	ldr	r3, [r7, #4]
    4e36:	2b00      	cmp	r3, #0
    4e38:	d105      	bne.n	4e46 <vTaskPrioritySet+0x42>
    4e3a:	f241 4310 	movw	r3, #5136	; 0x1410
    4e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e42:	681b      	ldr	r3, [r3, #0]
    4e44:	e000      	b.n	4e48 <vTaskPrioritySet+0x44>
    4e46:	687b      	ldr	r3, [r7, #4]
    4e48:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    4e4a:	693b      	ldr	r3, [r7, #16]
    4e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4e4e:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    4e50:	68fa      	ldr	r2, [r7, #12]
    4e52:	683b      	ldr	r3, [r7, #0]
    4e54:	429a      	cmp	r2, r3
    4e56:	d058      	beq.n	4f0a <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4e58:	683a      	ldr	r2, [r7, #0]
    4e5a:	68fb      	ldr	r3, [r7, #12]
    4e5c:	429a      	cmp	r2, r3
    4e5e:	d905      	bls.n	4e6c <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4e60:	687b      	ldr	r3, [r7, #4]
    4e62:	2b00      	cmp	r3, #0
    4e64:	d007      	beq.n	4e76 <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    4e66:	2301      	movs	r3, #1
    4e68:	617b      	str	r3, [r7, #20]
    4e6a:	e004      	b.n	4e76 <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4e6c:	687b      	ldr	r3, [r7, #4]
    4e6e:	2b00      	cmp	r3, #0
    4e70:	d101      	bne.n	4e76 <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    4e72:	2301      	movs	r3, #1
    4e74:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4e76:	693b      	ldr	r3, [r7, #16]
    4e78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4e7a:	693b      	ldr	r3, [r7, #16]
    4e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e7e:	429a      	cmp	r2, r3
    4e80:	d102      	bne.n	4e88 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    4e82:	693b      	ldr	r3, [r7, #16]
    4e84:	683a      	ldr	r2, [r7, #0]
    4e86:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4e88:	693b      	ldr	r3, [r7, #16]
    4e8a:	683a      	ldr	r2, [r7, #0]
    4e8c:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    4e8e:	683b      	ldr	r3, [r7, #0]
    4e90:	f1c3 0205 	rsb	r2, r3, #5
    4e94:	693b      	ldr	r3, [r7, #16]
    4e96:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4e98:	693b      	ldr	r3, [r7, #16]
    4e9a:	6959      	ldr	r1, [r3, #20]
    4e9c:	68fa      	ldr	r2, [r7, #12]
    4e9e:	4613      	mov	r3, r2
    4ea0:	009b      	lsls	r3, r3, #2
    4ea2:	4413      	add	r3, r2
    4ea4:	009b      	lsls	r3, r3, #2
    4ea6:	f241 4214 	movw	r2, #5140	; 0x1414
    4eaa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4eae:	4413      	add	r3, r2
    4eb0:	4299      	cmp	r1, r3
    4eb2:	d125      	bne.n	4f00 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4eb4:	693b      	ldr	r3, [r7, #16]
    4eb6:	3304      	adds	r3, #4
    4eb8:	4618      	mov	r0, r3
    4eba:	f7ff f9c9 	bl	4250 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4ebe:	693b      	ldr	r3, [r7, #16]
    4ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ec2:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eca:	681b      	ldr	r3, [r3, #0]
    4ecc:	429a      	cmp	r2, r3
    4ece:	d906      	bls.n	4ede <vTaskPrioritySet+0xda>
    4ed0:	693b      	ldr	r3, [r7, #16]
    4ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ed4:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4edc:	601a      	str	r2, [r3, #0]
    4ede:	693b      	ldr	r3, [r7, #16]
    4ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ee2:	4613      	mov	r3, r2
    4ee4:	009b      	lsls	r3, r3, #2
    4ee6:	4413      	add	r3, r2
    4ee8:	009b      	lsls	r3, r3, #2
    4eea:	f241 4214 	movw	r2, #5140	; 0x1414
    4eee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4ef2:	441a      	add	r2, r3
    4ef4:	693b      	ldr	r3, [r7, #16]
    4ef6:	3304      	adds	r3, #4
    4ef8:	4610      	mov	r0, r2
    4efa:	4619      	mov	r1, r3
    4efc:	f7ff f948 	bl	4190 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4f00:	697b      	ldr	r3, [r7, #20]
    4f02:	2b01      	cmp	r3, #1
    4f04:	d101      	bne.n	4f0a <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    4f06:	f000 fee1 	bl	5ccc <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4f0a:	f000 ff03 	bl	5d14 <vPortExitCritical>
	}
    4f0e:	3718      	adds	r7, #24
    4f10:	46bd      	mov	sp, r7
    4f12:	bd80      	pop	{r7, pc}

00004f14 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    4f14:	b580      	push	{r7, lr}
    4f16:	b084      	sub	sp, #16
    4f18:	af00      	add	r7, sp, #0
    4f1a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4f1c:	f000 fee4 	bl	5ce8 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4f20:	f241 4310 	movw	r3, #5136	; 0x1410
    4f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f28:	681b      	ldr	r3, [r3, #0]
    4f2a:	687a      	ldr	r2, [r7, #4]
    4f2c:	429a      	cmp	r2, r3
    4f2e:	d101      	bne.n	4f34 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4f30:	2300      	movs	r3, #0
    4f32:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4f34:	687b      	ldr	r3, [r7, #4]
    4f36:	2b00      	cmp	r3, #0
    4f38:	d105      	bne.n	4f46 <vTaskSuspend+0x32>
    4f3a:	f241 4310 	movw	r3, #5136	; 0x1410
    4f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f42:	681b      	ldr	r3, [r3, #0]
    4f44:	e000      	b.n	4f48 <vTaskSuspend+0x34>
    4f46:	687b      	ldr	r3, [r7, #4]
    4f48:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4f4a:	68fb      	ldr	r3, [r7, #12]
    4f4c:	3304      	adds	r3, #4
    4f4e:	4618      	mov	r0, r3
    4f50:	f7ff f97e 	bl	4250 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4f54:	68fb      	ldr	r3, [r7, #12]
    4f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f58:	2b00      	cmp	r3, #0
    4f5a:	d004      	beq.n	4f66 <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4f5c:	68fb      	ldr	r3, [r7, #12]
    4f5e:	3318      	adds	r3, #24
    4f60:	4618      	mov	r0, r3
    4f62:	f7ff f975 	bl	4250 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4f66:	68fb      	ldr	r3, [r7, #12]
    4f68:	3304      	adds	r3, #4
    4f6a:	f241 40d4 	movw	r0, #5332	; 0x14d4
    4f6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4f72:	4619      	mov	r1, r3
    4f74:	f7ff f90c 	bl	4190 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4f78:	f000 fecc 	bl	5d14 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4f7c:	687b      	ldr	r3, [r7, #4]
    4f7e:	2b00      	cmp	r3, #0
    4f80:	d11e      	bne.n	4fc0 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4f82:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f8a:	681b      	ldr	r3, [r3, #0]
    4f8c:	2b00      	cmp	r3, #0
    4f8e:	d002      	beq.n	4f96 <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4f90:	f000 fe9c 	bl	5ccc <vPortYieldFromISR>
    4f94:	e014      	b.n	4fc0 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4f96:	f241 43d4 	movw	r3, #5332	; 0x14d4
    4f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f9e:	681a      	ldr	r2, [r3, #0]
    4fa0:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fa8:	681b      	ldr	r3, [r3, #0]
    4faa:	429a      	cmp	r2, r3
    4fac:	d106      	bne.n	4fbc <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4fae:	f241 4310 	movw	r3, #5136	; 0x1410
    4fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fb6:	2200      	movs	r2, #0
    4fb8:	601a      	str	r2, [r3, #0]
    4fba:	e001      	b.n	4fc0 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    4fbc:	f000 fa76 	bl	54ac <vTaskSwitchContext>
				}
			}
		}
	}
    4fc0:	3710      	adds	r7, #16
    4fc2:	46bd      	mov	sp, r7
    4fc4:	bd80      	pop	{r7, pc}
    4fc6:	bf00      	nop

00004fc8 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4fc8:	b480      	push	{r7}
    4fca:	b085      	sub	sp, #20
    4fcc:	af00      	add	r7, sp, #0
    4fce:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4fd0:	2300      	movs	r3, #0
    4fd2:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    4fd4:	687b      	ldr	r3, [r7, #4]
    4fd6:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4fd8:	68bb      	ldr	r3, [r7, #8]
    4fda:	695a      	ldr	r2, [r3, #20]
    4fdc:	f241 43d4 	movw	r3, #5332	; 0x14d4
    4fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fe4:	429a      	cmp	r2, r3
    4fe6:	d10d      	bne.n	5004 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    4fe8:	68bb      	ldr	r3, [r7, #8]
    4fea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4fec:	f241 43a8 	movw	r3, #5288	; 0x14a8
    4ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ff4:	429a      	cmp	r2, r3
    4ff6:	d005      	beq.n	5004 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4ff8:	68bb      	ldr	r3, [r7, #8]
    4ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ffc:	2b00      	cmp	r3, #0
    4ffe:	d101      	bne.n	5004 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    5000:	2301      	movs	r3, #1
    5002:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    5004:	68fb      	ldr	r3, [r7, #12]
	}
    5006:	4618      	mov	r0, r3
    5008:	3714      	adds	r7, #20
    500a:	46bd      	mov	sp, r7
    500c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5010:	4770      	bx	lr
    5012:	bf00      	nop

00005014 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    5014:	b580      	push	{r7, lr}
    5016:	b084      	sub	sp, #16
    5018:	af00      	add	r7, sp, #0
    501a:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    501c:	687b      	ldr	r3, [r7, #4]
    501e:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    5020:	68fb      	ldr	r3, [r7, #12]
    5022:	2b00      	cmp	r3, #0
    5024:	d043      	beq.n	50ae <vTaskResume+0x9a>
    5026:	f241 4310 	movw	r3, #5136	; 0x1410
    502a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    502e:	681b      	ldr	r3, [r3, #0]
    5030:	68fa      	ldr	r2, [r7, #12]
    5032:	429a      	cmp	r2, r3
    5034:	d03b      	beq.n	50ae <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    5036:	f000 fe57 	bl	5ce8 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    503a:	68f8      	ldr	r0, [r7, #12]
    503c:	f7ff ffc4 	bl	4fc8 <xTaskIsTaskSuspended>
    5040:	4603      	mov	r3, r0
    5042:	2b01      	cmp	r3, #1
    5044:	d131      	bne.n	50aa <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    5046:	68fb      	ldr	r3, [r7, #12]
    5048:	3304      	adds	r3, #4
    504a:	4618      	mov	r0, r3
    504c:	f7ff f900 	bl	4250 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5050:	68fb      	ldr	r3, [r7, #12]
    5052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5054:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5058:	f2c2 0300 	movt	r3, #8192	; 0x2000
    505c:	681b      	ldr	r3, [r3, #0]
    505e:	429a      	cmp	r2, r3
    5060:	d906      	bls.n	5070 <vTaskResume+0x5c>
    5062:	68fb      	ldr	r3, [r7, #12]
    5064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5066:	f241 43f4 	movw	r3, #5364	; 0x14f4
    506a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    506e:	601a      	str	r2, [r3, #0]
    5070:	68fb      	ldr	r3, [r7, #12]
    5072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5074:	4613      	mov	r3, r2
    5076:	009b      	lsls	r3, r3, #2
    5078:	4413      	add	r3, r2
    507a:	009b      	lsls	r3, r3, #2
    507c:	f241 4214 	movw	r2, #5140	; 0x1414
    5080:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5084:	441a      	add	r2, r3
    5086:	68fb      	ldr	r3, [r7, #12]
    5088:	3304      	adds	r3, #4
    508a:	4610      	mov	r0, r2
    508c:	4619      	mov	r1, r3
    508e:	f7ff f87f 	bl	4190 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5092:	68fb      	ldr	r3, [r7, #12]
    5094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5096:	f241 4310 	movw	r3, #5136	; 0x1410
    509a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    509e:	681b      	ldr	r3, [r3, #0]
    50a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    50a2:	429a      	cmp	r2, r3
    50a4:	d301      	bcc.n	50aa <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    50a6:	f000 fe11 	bl	5ccc <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    50aa:	f000 fe33 	bl	5d14 <vPortExitCritical>
		}
	}
    50ae:	3710      	adds	r7, #16
    50b0:	46bd      	mov	sp, r7
    50b2:	bd80      	pop	{r7, pc}

000050b4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    50b4:	b580      	push	{r7, lr}
    50b6:	b086      	sub	sp, #24
    50b8:	af00      	add	r7, sp, #0
    50ba:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    50bc:	2300      	movs	r3, #0
    50be:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    50c0:	687b      	ldr	r3, [r7, #4]
    50c2:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    50c4:	2300      	movs	r3, #0
    50c6:	60fb      	str	r3, [r7, #12]
    50c8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    50cc:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    50d0:	6938      	ldr	r0, [r7, #16]
    50d2:	f7ff ff79 	bl	4fc8 <xTaskIsTaskSuspended>
    50d6:	4603      	mov	r3, r0
    50d8:	2b01      	cmp	r3, #1
    50da:	d144      	bne.n	5166 <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    50dc:	f241 43fc 	movw	r3, #5372	; 0x14fc
    50e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50e4:	681b      	ldr	r3, [r3, #0]
    50e6:	2b00      	cmp	r3, #0
    50e8:	d134      	bne.n	5154 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    50ea:	693b      	ldr	r3, [r7, #16]
    50ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50ee:	f241 4310 	movw	r3, #5136	; 0x1410
    50f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50f6:	681b      	ldr	r3, [r3, #0]
    50f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    50fa:	429a      	cmp	r2, r3
    50fc:	bf34      	ite	cc
    50fe:	2300      	movcc	r3, #0
    5100:	2301      	movcs	r3, #1
    5102:	b2db      	uxtb	r3, r3
    5104:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    5106:	693b      	ldr	r3, [r7, #16]
    5108:	3304      	adds	r3, #4
    510a:	4618      	mov	r0, r3
    510c:	f7ff f8a0 	bl	4250 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5110:	693b      	ldr	r3, [r7, #16]
    5112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5114:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    511c:	681b      	ldr	r3, [r3, #0]
    511e:	429a      	cmp	r2, r3
    5120:	d906      	bls.n	5130 <xTaskResumeFromISR+0x7c>
    5122:	693b      	ldr	r3, [r7, #16]
    5124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5126:	f241 43f4 	movw	r3, #5364	; 0x14f4
    512a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    512e:	601a      	str	r2, [r3, #0]
    5130:	693b      	ldr	r3, [r7, #16]
    5132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5134:	4613      	mov	r3, r2
    5136:	009b      	lsls	r3, r3, #2
    5138:	4413      	add	r3, r2
    513a:	009b      	lsls	r3, r3, #2
    513c:	f241 4214 	movw	r2, #5140	; 0x1414
    5140:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5144:	441a      	add	r2, r3
    5146:	693b      	ldr	r3, [r7, #16]
    5148:	3304      	adds	r3, #4
    514a:	4610      	mov	r0, r2
    514c:	4619      	mov	r1, r3
    514e:	f7ff f81f 	bl	4190 <vListInsertEnd>
    5152:	e008      	b.n	5166 <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    5154:	693b      	ldr	r3, [r7, #16]
    5156:	3318      	adds	r3, #24
    5158:	f241 40a8 	movw	r0, #5288	; 0x14a8
    515c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5160:	4619      	mov	r1, r3
    5162:	f7ff f815 	bl	4190 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    5166:	f04f 0000 	mov.w	r0, #0
    516a:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    516e:	697b      	ldr	r3, [r7, #20]
	}
    5170:	4618      	mov	r0, r3
    5172:	3718      	adds	r7, #24
    5174:	46bd      	mov	sp, r7
    5176:	bd80      	pop	{r7, pc}

00005178 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    5178:	b580      	push	{r7, lr}
    517a:	b086      	sub	sp, #24
    517c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    517e:	2300      	movs	r3, #0
    5180:	9300      	str	r3, [sp, #0]
    5182:	2300      	movs	r3, #0
    5184:	9301      	str	r3, [sp, #4]
    5186:	2300      	movs	r3, #0
    5188:	9302      	str	r3, [sp, #8]
    518a:	2300      	movs	r3, #0
    518c:	9303      	str	r3, [sp, #12]
    518e:	f245 7065 	movw	r0, #22373	; 0x5765
    5192:	f2c0 0000 	movt	r0, #0
    5196:	f648 21bc 	movw	r1, #35516	; 0x8abc
    519a:	f2c0 0101 	movt	r1, #1
    519e:	2280      	movs	r2, #128	; 0x80
    51a0:	2300      	movs	r3, #0
    51a2:	f7ff fc6b 	bl	4a7c <xTaskGenericCreate>
    51a6:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    51a8:	687b      	ldr	r3, [r7, #4]
    51aa:	2b01      	cmp	r3, #1
    51ac:	d111      	bne.n	51d2 <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    51ae:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    51b2:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    51b6:	f241 43f8 	movw	r3, #5368	; 0x14f8
    51ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51be:	2201      	movs	r2, #1
    51c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    51c2:	f241 43ec 	movw	r3, #5356	; 0x14ec
    51c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ca:	2200      	movs	r2, #0
    51cc:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    51ce:	f000 fd4f 	bl	5c70 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    51d2:	3708      	adds	r7, #8
    51d4:	46bd      	mov	sp, r7
    51d6:	bd80      	pop	{r7, pc}

000051d8 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    51d8:	b580      	push	{r7, lr}
    51da:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    51dc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    51e0:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    51e4:	f241 43f8 	movw	r3, #5368	; 0x14f8
    51e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ec:	2200      	movs	r2, #0
    51ee:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    51f0:	f000 fd66 	bl	5cc0 <vPortEndScheduler>
}
    51f4:	bd80      	pop	{r7, pc}
    51f6:	bf00      	nop

000051f8 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    51f8:	b480      	push	{r7}
    51fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    51fc:	f241 43fc 	movw	r3, #5372	; 0x14fc
    5200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5204:	681b      	ldr	r3, [r3, #0]
    5206:	1c5a      	adds	r2, r3, #1
    5208:	f241 43fc 	movw	r3, #5372	; 0x14fc
    520c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5210:	601a      	str	r2, [r3, #0]
}
    5212:	46bd      	mov	sp, r7
    5214:	f85d 7b04 	ldr.w	r7, [sp], #4
    5218:	4770      	bx	lr
    521a:	bf00      	nop

0000521c <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    521c:	b590      	push	{r4, r7, lr}
    521e:	b083      	sub	sp, #12
    5220:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    5222:	2300      	movs	r3, #0
    5224:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    5226:	f000 fd5f 	bl	5ce8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    522a:	f241 43fc 	movw	r3, #5372	; 0x14fc
    522e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5232:	681b      	ldr	r3, [r3, #0]
    5234:	1e5a      	subs	r2, r3, #1
    5236:	f241 43fc 	movw	r3, #5372	; 0x14fc
    523a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    523e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5240:	f241 43fc 	movw	r3, #5372	; 0x14fc
    5244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5248:	681b      	ldr	r3, [r3, #0]
    524a:	2b00      	cmp	r3, #0
    524c:	d177      	bne.n	533e <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    524e:	f241 43e8 	movw	r3, #5352	; 0x14e8
    5252:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5256:	681b      	ldr	r3, [r3, #0]
    5258:	2b00      	cmp	r3, #0
    525a:	d070      	beq.n	533e <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    525c:	2300      	movs	r3, #0
    525e:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    5260:	e036      	b.n	52d0 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    5262:	f241 43a8 	movw	r3, #5288	; 0x14a8
    5266:	f2c2 0300 	movt	r3, #8192	; 0x2000
    526a:	68db      	ldr	r3, [r3, #12]
    526c:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    526e:	f104 0318 	add.w	r3, r4, #24
    5272:	4618      	mov	r0, r3
    5274:	f7fe ffec 	bl	4250 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    5278:	1d23      	adds	r3, r4, #4
    527a:	4618      	mov	r0, r3
    527c:	f7fe ffe8 	bl	4250 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5280:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5282:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    528a:	681b      	ldr	r3, [r3, #0]
    528c:	429a      	cmp	r2, r3
    528e:	d905      	bls.n	529c <xTaskResumeAll+0x80>
    5290:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5292:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5296:	f2c2 0300 	movt	r3, #8192	; 0x2000
    529a:	601a      	str	r2, [r3, #0]
    529c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    529e:	4613      	mov	r3, r2
    52a0:	009b      	lsls	r3, r3, #2
    52a2:	4413      	add	r3, r2
    52a4:	009b      	lsls	r3, r3, #2
    52a6:	f241 4214 	movw	r2, #5140	; 0x1414
    52aa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    52ae:	441a      	add	r2, r3
    52b0:	1d23      	adds	r3, r4, #4
    52b2:	4610      	mov	r0, r2
    52b4:	4619      	mov	r1, r3
    52b6:	f7fe ff6b 	bl	4190 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    52ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    52bc:	f241 4310 	movw	r3, #5136	; 0x1410
    52c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52c4:	681b      	ldr	r3, [r3, #0]
    52c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    52c8:	429a      	cmp	r2, r3
    52ca:	d301      	bcc.n	52d0 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    52cc:	2301      	movs	r3, #1
    52ce:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    52d0:	f241 43a8 	movw	r3, #5288	; 0x14a8
    52d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52d8:	681b      	ldr	r3, [r3, #0]
    52da:	2b00      	cmp	r3, #0
    52dc:	d1c1      	bne.n	5262 <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    52de:	f241 5300 	movw	r3, #5376	; 0x1500
    52e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52e6:	681b      	ldr	r3, [r3, #0]
    52e8:	2b00      	cmp	r3, #0
    52ea:	d014      	beq.n	5316 <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    52ec:	e00c      	b.n	5308 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    52ee:	f000 f865 	bl	53bc <vTaskIncrementTick>
						--uxMissedTicks;
    52f2:	f241 5300 	movw	r3, #5376	; 0x1500
    52f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52fa:	681b      	ldr	r3, [r3, #0]
    52fc:	1e5a      	subs	r2, r3, #1
    52fe:	f241 5300 	movw	r3, #5376	; 0x1500
    5302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5306:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5308:	f241 5300 	movw	r3, #5376	; 0x1500
    530c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5310:	681b      	ldr	r3, [r3, #0]
    5312:	2b00      	cmp	r3, #0
    5314:	d1eb      	bne.n	52ee <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    5316:	683b      	ldr	r3, [r7, #0]
    5318:	2b01      	cmp	r3, #1
    531a:	d006      	beq.n	532a <xTaskResumeAll+0x10e>
    531c:	f241 5304 	movw	r3, #5380	; 0x1504
    5320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5324:	681b      	ldr	r3, [r3, #0]
    5326:	2b01      	cmp	r3, #1
    5328:	d109      	bne.n	533e <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    532a:	2301      	movs	r3, #1
    532c:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    532e:	f241 5304 	movw	r3, #5380	; 0x1504
    5332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5336:	2200      	movs	r2, #0
    5338:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    533a:	f000 fcc7 	bl	5ccc <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    533e:	f000 fce9 	bl	5d14 <vPortExitCritical>

	return xAlreadyYielded;
    5342:	687b      	ldr	r3, [r7, #4]
}
    5344:	4618      	mov	r0, r3
    5346:	370c      	adds	r7, #12
    5348:	46bd      	mov	sp, r7
    534a:	bd90      	pop	{r4, r7, pc}

0000534c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    534c:	b580      	push	{r7, lr}
    534e:	b082      	sub	sp, #8
    5350:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    5352:	f000 fcc9 	bl	5ce8 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    5356:	f241 43ec 	movw	r3, #5356	; 0x14ec
    535a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    535e:	681b      	ldr	r3, [r3, #0]
    5360:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    5362:	f000 fcd7 	bl	5d14 <vPortExitCritical>

	return xTicks;
    5366:	687b      	ldr	r3, [r7, #4]
}
    5368:	4618      	mov	r0, r3
    536a:	3708      	adds	r7, #8
    536c:	46bd      	mov	sp, r7
    536e:	bd80      	pop	{r7, pc}

00005370 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    5370:	b480      	push	{r7}
    5372:	b083      	sub	sp, #12
    5374:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5376:	2300      	movs	r3, #0
    5378:	607b      	str	r3, [r7, #4]
    537a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    537e:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    5382:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5386:	f2c2 0300 	movt	r3, #8192	; 0x2000
    538a:	681b      	ldr	r3, [r3, #0]
    538c:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    538e:	f04f 0000 	mov.w	r0, #0
    5392:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    5396:	683b      	ldr	r3, [r7, #0]
}
    5398:	4618      	mov	r0, r3
    539a:	370c      	adds	r7, #12
    539c:	46bd      	mov	sp, r7
    539e:	f85d 7b04 	ldr.w	r7, [sp], #4
    53a2:	4770      	bx	lr

000053a4 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    53a4:	b480      	push	{r7}
    53a6:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    53a8:	f241 43e8 	movw	r3, #5352	; 0x14e8
    53ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53b0:	681b      	ldr	r3, [r3, #0]
}
    53b2:	4618      	mov	r0, r3
    53b4:	46bd      	mov	sp, r7
    53b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    53ba:	4770      	bx	lr

000053bc <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    53bc:	b580      	push	{r7, lr}
    53be:	b082      	sub	sp, #8
    53c0:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    53c2:	f241 43fc 	movw	r3, #5372	; 0x14fc
    53c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ca:	681b      	ldr	r3, [r3, #0]
    53cc:	2b00      	cmp	r3, #0
    53ce:	d153      	bne.n	5478 <vTaskIncrementTick+0xbc>
	{
		++xTickCount;
    53d0:	f241 43ec 	movw	r3, #5356	; 0x14ec
    53d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53d8:	681b      	ldr	r3, [r3, #0]
    53da:	1c5a      	adds	r2, r3, #1
    53dc:	f241 43ec 	movw	r3, #5356	; 0x14ec
    53e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53e4:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    53e6:	f241 43ec 	movw	r3, #5356	; 0x14ec
    53ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ee:	681b      	ldr	r3, [r3, #0]
    53f0:	2b00      	cmp	r3, #0
    53f2:	d140      	bne.n	5476 <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    53f4:	f241 43a0 	movw	r3, #5280	; 0x14a0
    53f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53fc:	681b      	ldr	r3, [r3, #0]
    53fe:	607b      	str	r3, [r7, #4]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    5400:	f241 43a4 	movw	r3, #5284	; 0x14a4
    5404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5408:	681a      	ldr	r2, [r3, #0]
    540a:	f241 43a0 	movw	r3, #5280	; 0x14a0
    540e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5412:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    5414:	f241 43a4 	movw	r3, #5284	; 0x14a4
    5418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    541c:	687a      	ldr	r2, [r7, #4]
    541e:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    5420:	f241 5308 	movw	r3, #5384	; 0x1508
    5424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5428:	681b      	ldr	r3, [r3, #0]
    542a:	1c5a      	adds	r2, r3, #1
    542c:	f241 5308 	movw	r3, #5384	; 0x1508
    5430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5434:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    5436:	f241 43a0 	movw	r3, #5280	; 0x14a0
    543a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    543e:	681b      	ldr	r3, [r3, #0]
    5440:	681b      	ldr	r3, [r3, #0]
    5442:	2b00      	cmp	r3, #0
    5444:	d107      	bne.n	5456 <vTaskIncrementTick+0x9a>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    5446:	f240 5330 	movw	r3, #1328	; 0x530
    544a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    544e:	f04f 32ff 	mov.w	r2, #4294967295
    5452:	601a      	str	r2, [r3, #0]
    5454:	e00f      	b.n	5476 <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    5456:	f241 43a0 	movw	r3, #5280	; 0x14a0
    545a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    545e:	681b      	ldr	r3, [r3, #0]
    5460:	68db      	ldr	r3, [r3, #12]
    5462:	68db      	ldr	r3, [r3, #12]
    5464:	603b      	str	r3, [r7, #0]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    5466:	683b      	ldr	r3, [r7, #0]
    5468:	685a      	ldr	r2, [r3, #4]
    546a:	f240 5330 	movw	r3, #1328	; 0x530
    546e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5472:	601a      	str	r2, [r3, #0]
    5474:	e00d      	b.n	5492 <vTaskIncrementTick+0xd6>
    5476:	e00c      	b.n	5492 <vTaskIncrementTick+0xd6>
		/* See if this tick has made a timeout expire. */
		//prvCheckDelayedTasks();
	}
	else
	{
		++uxMissedTicks;
    5478:	f241 5300 	movw	r3, #5376	; 0x1500
    547c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5480:	681b      	ldr	r3, [r3, #0]
    5482:	1c5a      	adds	r2, r3, #1
    5484:	f241 5300 	movw	r3, #5376	; 0x1500
    5488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    548c:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    548e:	f012 fa2f 	bl	178f0 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    5492:	f241 5300 	movw	r3, #5376	; 0x1500
    5496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    549a:	681b      	ldr	r3, [r3, #0]
    549c:	2b00      	cmp	r3, #0
    549e:	d101      	bne.n	54a4 <vTaskIncrementTick+0xe8>
		{
			vApplicationTickHook();
    54a0:	f012 fa26 	bl	178f0 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    54a4:	3708      	adds	r7, #8
    54a6:	46bd      	mov	sp, r7
    54a8:	bd80      	pop	{r7, pc}
    54aa:	bf00      	nop

000054ac <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    54ac:	b580      	push	{r7, lr}
    54ae:	b082      	sub	sp, #8
    54b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    54b2:	f241 43fc 	movw	r3, #5372	; 0x14fc
    54b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54ba:	681b      	ldr	r3, [r3, #0]
    54bc:	2b00      	cmp	r3, #0
    54be:	d006      	beq.n	54ce <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    54c0:	f241 5304 	movw	r3, #5380	; 0x1504
    54c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54c8:	2201      	movs	r2, #1
    54ca:	601a      	str	r2, [r3, #0]
    54cc:	e047      	b.n	555e <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    54ce:	f012 fa09 	bl	178e4 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    54d2:	e00a      	b.n	54ea <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    54d4:	f241 43f4 	movw	r3, #5364	; 0x14f4
    54d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54dc:	681b      	ldr	r3, [r3, #0]
    54de:	1e5a      	subs	r2, r3, #1
    54e0:	f241 43f4 	movw	r3, #5364	; 0x14f4
    54e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54e8:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    54ea:	f241 43f4 	movw	r3, #5364	; 0x14f4
    54ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54f2:	6819      	ldr	r1, [r3, #0]
    54f4:	f241 4214 	movw	r2, #5140	; 0x1414
    54f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    54fc:	460b      	mov	r3, r1
    54fe:	009b      	lsls	r3, r3, #2
    5500:	440b      	add	r3, r1
    5502:	009b      	lsls	r3, r3, #2
    5504:	4413      	add	r3, r2
    5506:	681b      	ldr	r3, [r3, #0]
    5508:	2b00      	cmp	r3, #0
    550a:	d0e3      	beq.n	54d4 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    550c:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5514:	681a      	ldr	r2, [r3, #0]
    5516:	4613      	mov	r3, r2
    5518:	009b      	lsls	r3, r3, #2
    551a:	4413      	add	r3, r2
    551c:	009b      	lsls	r3, r3, #2
    551e:	f241 4214 	movw	r2, #5140	; 0x1414
    5522:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5526:	4413      	add	r3, r2
    5528:	607b      	str	r3, [r7, #4]
    552a:	687b      	ldr	r3, [r7, #4]
    552c:	685b      	ldr	r3, [r3, #4]
    552e:	685a      	ldr	r2, [r3, #4]
    5530:	687b      	ldr	r3, [r7, #4]
    5532:	605a      	str	r2, [r3, #4]
    5534:	687b      	ldr	r3, [r7, #4]
    5536:	685a      	ldr	r2, [r3, #4]
    5538:	687b      	ldr	r3, [r7, #4]
    553a:	3308      	adds	r3, #8
    553c:	429a      	cmp	r2, r3
    553e:	d104      	bne.n	554a <vTaskSwitchContext+0x9e>
    5540:	687b      	ldr	r3, [r7, #4]
    5542:	685b      	ldr	r3, [r3, #4]
    5544:	685a      	ldr	r2, [r3, #4]
    5546:	687b      	ldr	r3, [r7, #4]
    5548:	605a      	str	r2, [r3, #4]
    554a:	687b      	ldr	r3, [r7, #4]
    554c:	685b      	ldr	r3, [r3, #4]
    554e:	68da      	ldr	r2, [r3, #12]
    5550:	f241 4310 	movw	r3, #5136	; 0x1410
    5554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5558:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    555a:	f012 f9bd 	bl	178d8 <myTraceSwitchedIn>
	}
}
    555e:	3708      	adds	r7, #8
    5560:	46bd      	mov	sp, r7
    5562:	bd80      	pop	{r7, pc}

00005564 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    5564:	b580      	push	{r7, lr}
    5566:	b084      	sub	sp, #16
    5568:	af00      	add	r7, sp, #0
    556a:	6078      	str	r0, [r7, #4]
    556c:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    556e:	f241 4310 	movw	r3, #5136	; 0x1410
    5572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5576:	681b      	ldr	r3, [r3, #0]
    5578:	3318      	adds	r3, #24
    557a:	6878      	ldr	r0, [r7, #4]
    557c:	4619      	mov	r1, r3
    557e:	f7fe fe2f 	bl	41e0 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5582:	f241 4310 	movw	r3, #5136	; 0x1410
    5586:	f2c2 0300 	movt	r3, #8192	; 0x2000
    558a:	681b      	ldr	r3, [r3, #0]
    558c:	3304      	adds	r3, #4
    558e:	4618      	mov	r0, r3
    5590:	f7fe fe5e 	bl	4250 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    5594:	683b      	ldr	r3, [r7, #0]
    5596:	f1b3 3fff 	cmp.w	r3, #4294967295
    559a:	d10d      	bne.n	55b8 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    559c:	f241 4310 	movw	r3, #5136	; 0x1410
    55a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55a4:	681b      	ldr	r3, [r3, #0]
    55a6:	3304      	adds	r3, #4
    55a8:	f241 40d4 	movw	r0, #5332	; 0x14d4
    55ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
    55b0:	4619      	mov	r1, r3
    55b2:	f7fe fded 	bl	4190 <vListInsertEnd>
    55b6:	e00a      	b.n	55ce <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    55b8:	f241 43ec 	movw	r3, #5356	; 0x14ec
    55bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55c0:	681a      	ldr	r2, [r3, #0]
    55c2:	683b      	ldr	r3, [r7, #0]
    55c4:	4413      	add	r3, r2
    55c6:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    55c8:	68f8      	ldr	r0, [r7, #12]
    55ca:	f000 f99f 	bl	590c <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    55ce:	3710      	adds	r7, #16
    55d0:	46bd      	mov	sp, r7
    55d2:	bd80      	pop	{r7, pc}

000055d4 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    55d4:	b580      	push	{r7, lr}
    55d6:	b084      	sub	sp, #16
    55d8:	af00      	add	r7, sp, #0
    55da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    55dc:	687b      	ldr	r3, [r7, #4]
    55de:	68db      	ldr	r3, [r3, #12]
    55e0:	68db      	ldr	r3, [r3, #12]
    55e2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    55e4:	68bb      	ldr	r3, [r7, #8]
    55e6:	3318      	adds	r3, #24
    55e8:	4618      	mov	r0, r3
    55ea:	f7fe fe31 	bl	4250 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    55ee:	f241 43fc 	movw	r3, #5372	; 0x14fc
    55f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55f6:	681b      	ldr	r3, [r3, #0]
    55f8:	2b00      	cmp	r3, #0
    55fa:	d126      	bne.n	564a <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    55fc:	68bb      	ldr	r3, [r7, #8]
    55fe:	3304      	adds	r3, #4
    5600:	4618      	mov	r0, r3
    5602:	f7fe fe25 	bl	4250 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    5606:	68bb      	ldr	r3, [r7, #8]
    5608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    560a:	f241 43f4 	movw	r3, #5364	; 0x14f4
    560e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5612:	681b      	ldr	r3, [r3, #0]
    5614:	429a      	cmp	r2, r3
    5616:	d906      	bls.n	5626 <xTaskRemoveFromEventList+0x52>
    5618:	68bb      	ldr	r3, [r7, #8]
    561a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    561c:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5624:	601a      	str	r2, [r3, #0]
    5626:	68bb      	ldr	r3, [r7, #8]
    5628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    562a:	4613      	mov	r3, r2
    562c:	009b      	lsls	r3, r3, #2
    562e:	4413      	add	r3, r2
    5630:	009b      	lsls	r3, r3, #2
    5632:	f241 4214 	movw	r2, #5140	; 0x1414
    5636:	f2c2 0200 	movt	r2, #8192	; 0x2000
    563a:	441a      	add	r2, r3
    563c:	68bb      	ldr	r3, [r7, #8]
    563e:	3304      	adds	r3, #4
    5640:	4610      	mov	r0, r2
    5642:	4619      	mov	r1, r3
    5644:	f7fe fda4 	bl	4190 <vListInsertEnd>
    5648:	e008      	b.n	565c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    564a:	68bb      	ldr	r3, [r7, #8]
    564c:	3318      	adds	r3, #24
    564e:	f241 40a8 	movw	r0, #5288	; 0x14a8
    5652:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5656:	4619      	mov	r1, r3
    5658:	f7fe fd9a 	bl	4190 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    565c:	68bb      	ldr	r3, [r7, #8]
    565e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5660:	f241 4310 	movw	r3, #5136	; 0x1410
    5664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5668:	681b      	ldr	r3, [r3, #0]
    566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    566c:	429a      	cmp	r2, r3
    566e:	d302      	bcc.n	5676 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    5670:	2301      	movs	r3, #1
    5672:	60fb      	str	r3, [r7, #12]
    5674:	e001      	b.n	567a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    5676:	2300      	movs	r3, #0
    5678:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    567a:	68fb      	ldr	r3, [r7, #12]
}
    567c:	4618      	mov	r0, r3
    567e:	3710      	adds	r7, #16
    5680:	46bd      	mov	sp, r7
    5682:	bd80      	pop	{r7, pc}

00005684 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    5684:	b480      	push	{r7}
    5686:	b083      	sub	sp, #12
    5688:	af00      	add	r7, sp, #0
    568a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    568c:	f241 5308 	movw	r3, #5384	; 0x1508
    5690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5694:	681a      	ldr	r2, [r3, #0]
    5696:	687b      	ldr	r3, [r7, #4]
    5698:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    569a:	f241 43ec 	movw	r3, #5356	; 0x14ec
    569e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56a2:	681a      	ldr	r2, [r3, #0]
    56a4:	687b      	ldr	r3, [r7, #4]
    56a6:	605a      	str	r2, [r3, #4]
}
    56a8:	370c      	adds	r7, #12
    56aa:	46bd      	mov	sp, r7
    56ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    56b0:	4770      	bx	lr
    56b2:	bf00      	nop

000056b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    56b4:	b580      	push	{r7, lr}
    56b6:	b084      	sub	sp, #16
    56b8:	af00      	add	r7, sp, #0
    56ba:	6078      	str	r0, [r7, #4]
    56bc:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    56be:	f000 fb13 	bl	5ce8 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    56c2:	683b      	ldr	r3, [r7, #0]
    56c4:	681b      	ldr	r3, [r3, #0]
    56c6:	f1b3 3fff 	cmp.w	r3, #4294967295
    56ca:	d102      	bne.n	56d2 <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    56cc:	2300      	movs	r3, #0
    56ce:	60fb      	str	r3, [r7, #12]
    56d0:	e035      	b.n	573e <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    56d2:	687b      	ldr	r3, [r7, #4]
    56d4:	681a      	ldr	r2, [r3, #0]
    56d6:	f241 5308 	movw	r3, #5384	; 0x1508
    56da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56de:	681b      	ldr	r3, [r3, #0]
    56e0:	429a      	cmp	r2, r3
    56e2:	d00b      	beq.n	56fc <xTaskCheckForTimeOut+0x48>
    56e4:	687b      	ldr	r3, [r7, #4]
    56e6:	685a      	ldr	r2, [r3, #4]
    56e8:	f241 43ec 	movw	r3, #5356	; 0x14ec
    56ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56f0:	681b      	ldr	r3, [r3, #0]
    56f2:	429a      	cmp	r2, r3
    56f4:	d802      	bhi.n	56fc <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    56f6:	2301      	movs	r3, #1
    56f8:	60fb      	str	r3, [r7, #12]
    56fa:	e020      	b.n	573e <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    56fc:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5704:	681a      	ldr	r2, [r3, #0]
    5706:	687b      	ldr	r3, [r7, #4]
    5708:	685b      	ldr	r3, [r3, #4]
    570a:	1ad2      	subs	r2, r2, r3
    570c:	683b      	ldr	r3, [r7, #0]
    570e:	681b      	ldr	r3, [r3, #0]
    5710:	429a      	cmp	r2, r3
    5712:	d212      	bcs.n	573a <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    5714:	683b      	ldr	r3, [r7, #0]
    5716:	681a      	ldr	r2, [r3, #0]
    5718:	687b      	ldr	r3, [r7, #4]
    571a:	6859      	ldr	r1, [r3, #4]
    571c:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5724:	681b      	ldr	r3, [r3, #0]
    5726:	1acb      	subs	r3, r1, r3
    5728:	441a      	add	r2, r3
    572a:	683b      	ldr	r3, [r7, #0]
    572c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    572e:	6878      	ldr	r0, [r7, #4]
    5730:	f7ff ffa8 	bl	5684 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    5734:	2300      	movs	r3, #0
    5736:	60fb      	str	r3, [r7, #12]
    5738:	e001      	b.n	573e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    573a:	2301      	movs	r3, #1
    573c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    573e:	f000 fae9 	bl	5d14 <vPortExitCritical>

	return xReturn;
    5742:	68fb      	ldr	r3, [r7, #12]
}
    5744:	4618      	mov	r0, r3
    5746:	3710      	adds	r7, #16
    5748:	46bd      	mov	sp, r7
    574a:	bd80      	pop	{r7, pc}

0000574c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    574c:	b480      	push	{r7}
    574e:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    5750:	f241 5304 	movw	r3, #5380	; 0x1504
    5754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5758:	2201      	movs	r2, #1
    575a:	601a      	str	r2, [r3, #0]
}
    575c:	46bd      	mov	sp, r7
    575e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5762:	4770      	bx	lr

00005764 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    5764:	b580      	push	{r7, lr}
    5766:	b082      	sub	sp, #8
    5768:	af00      	add	r7, sp, #0
    576a:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    576c:	f000 f886 	bl	587c <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    5770:	f000 faac 	bl	5ccc <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    5774:	e7fa      	b.n	576c <prvIdleTask+0x8>
    5776:	bf00      	nop

00005778 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    5778:	b580      	push	{r7, lr}
    577a:	b084      	sub	sp, #16
    577c:	af00      	add	r7, sp, #0
    577e:	60f8      	str	r0, [r7, #12]
    5780:	60b9      	str	r1, [r7, #8]
    5782:	607a      	str	r2, [r7, #4]
    5784:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    5786:	68fb      	ldr	r3, [r7, #12]
    5788:	3334      	adds	r3, #52	; 0x34
    578a:	4618      	mov	r0, r3
    578c:	68b9      	ldr	r1, [r7, #8]
    578e:	2210      	movs	r2, #16
    5790:	f013 f93c 	bl	18a0c <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    5794:	68fb      	ldr	r3, [r7, #12]
    5796:	2200      	movs	r2, #0
    5798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    579c:	687b      	ldr	r3, [r7, #4]
    579e:	2b04      	cmp	r3, #4
    57a0:	d901      	bls.n	57a6 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    57a2:	2304      	movs	r3, #4
    57a4:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    57a6:	68fb      	ldr	r3, [r7, #12]
    57a8:	687a      	ldr	r2, [r7, #4]
    57aa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    57ac:	68fb      	ldr	r3, [r7, #12]
    57ae:	687a      	ldr	r2, [r7, #4]
    57b0:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    57b2:	68fb      	ldr	r3, [r7, #12]
    57b4:	3304      	adds	r3, #4
    57b6:	4618      	mov	r0, r3
    57b8:	f7fe fcde 	bl	4178 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    57bc:	68fb      	ldr	r3, [r7, #12]
    57be:	3318      	adds	r3, #24
    57c0:	4618      	mov	r0, r3
    57c2:	f7fe fcd9 	bl	4178 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    57c6:	68fb      	ldr	r3, [r7, #12]
    57c8:	68fa      	ldr	r2, [r7, #12]
    57ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    57cc:	687b      	ldr	r3, [r7, #4]
    57ce:	f1c3 0205 	rsb	r2, r3, #5
    57d2:	68fb      	ldr	r3, [r7, #12]
    57d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    57d6:	68fb      	ldr	r3, [r7, #12]
    57d8:	68fa      	ldr	r2, [r7, #12]
    57da:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    57dc:	3710      	adds	r7, #16
    57de:	46bd      	mov	sp, r7
    57e0:	bd80      	pop	{r7, pc}
    57e2:	bf00      	nop

000057e4 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    57e4:	b580      	push	{r7, lr}
    57e6:	b082      	sub	sp, #8
    57e8:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    57ea:	2300      	movs	r3, #0
    57ec:	607b      	str	r3, [r7, #4]
    57ee:	e00f      	b.n	5810 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    57f0:	687a      	ldr	r2, [r7, #4]
    57f2:	4613      	mov	r3, r2
    57f4:	009b      	lsls	r3, r3, #2
    57f6:	4413      	add	r3, r2
    57f8:	009b      	lsls	r3, r3, #2
    57fa:	f241 4214 	movw	r2, #5140	; 0x1414
    57fe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5802:	4413      	add	r3, r2
    5804:	4618      	mov	r0, r3
    5806:	f7fe fc97 	bl	4138 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    580a:	687b      	ldr	r3, [r7, #4]
    580c:	3301      	adds	r3, #1
    580e:	607b      	str	r3, [r7, #4]
    5810:	687b      	ldr	r3, [r7, #4]
    5812:	2b04      	cmp	r3, #4
    5814:	d9ec      	bls.n	57f0 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    5816:	f241 4078 	movw	r0, #5240	; 0x1478
    581a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    581e:	f7fe fc8b 	bl	4138 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    5822:	f241 408c 	movw	r0, #5260	; 0x148c
    5826:	f2c2 0000 	movt	r0, #8192	; 0x2000
    582a:	f7fe fc85 	bl	4138 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    582e:	f241 40a8 	movw	r0, #5288	; 0x14a8
    5832:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5836:	f7fe fc7f 	bl	4138 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    583a:	f241 40bc 	movw	r0, #5308	; 0x14bc
    583e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5842:	f7fe fc79 	bl	4138 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    5846:	f241 40d4 	movw	r0, #5332	; 0x14d4
    584a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    584e:	f7fe fc73 	bl	4138 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    5852:	f241 43a0 	movw	r3, #5280	; 0x14a0
    5856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    585a:	f241 4278 	movw	r2, #5240	; 0x1478
    585e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5862:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    5864:	f241 43a4 	movw	r3, #5284	; 0x14a4
    5868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    586c:	f241 428c 	movw	r2, #5260	; 0x148c
    5870:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5874:	601a      	str	r2, [r3, #0]
}
    5876:	3708      	adds	r7, #8
    5878:	46bd      	mov	sp, r7
    587a:	bd80      	pop	{r7, pc}

0000587c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    587c:	b580      	push	{r7, lr}
    587e:	b082      	sub	sp, #8
    5880:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    5882:	f241 43d0 	movw	r3, #5328	; 0x14d0
    5886:	f2c2 0300 	movt	r3, #8192	; 0x2000
    588a:	681b      	ldr	r3, [r3, #0]
    588c:	2b00      	cmp	r3, #0
    588e:	d03a      	beq.n	5906 <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    5890:	f7ff fcb2 	bl	51f8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    5894:	f241 43bc 	movw	r3, #5308	; 0x14bc
    5898:	f2c2 0300 	movt	r3, #8192	; 0x2000
    589c:	681b      	ldr	r3, [r3, #0]
    589e:	2b00      	cmp	r3, #0
    58a0:	bf14      	ite	ne
    58a2:	2300      	movne	r3, #0
    58a4:	2301      	moveq	r3, #1
    58a6:	b2db      	uxtb	r3, r3
    58a8:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    58aa:	f7ff fcb7 	bl	521c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    58ae:	687b      	ldr	r3, [r7, #4]
    58b0:	2b00      	cmp	r3, #0
    58b2:	d128      	bne.n	5906 <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    58b4:	f000 fa18 	bl	5ce8 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    58b8:	f241 43bc 	movw	r3, #5308	; 0x14bc
    58bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58c0:	68db      	ldr	r3, [r3, #12]
    58c2:	68db      	ldr	r3, [r3, #12]
    58c4:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    58c6:	683b      	ldr	r3, [r7, #0]
    58c8:	3304      	adds	r3, #4
    58ca:	4618      	mov	r0, r3
    58cc:	f7fe fcc0 	bl	4250 <vListRemove>
					--uxCurrentNumberOfTasks;
    58d0:	f241 43e8 	movw	r3, #5352	; 0x14e8
    58d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58d8:	681b      	ldr	r3, [r3, #0]
    58da:	1e5a      	subs	r2, r3, #1
    58dc:	f241 43e8 	movw	r3, #5352	; 0x14e8
    58e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58e4:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    58e6:	f241 43d0 	movw	r3, #5328	; 0x14d0
    58ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58ee:	681b      	ldr	r3, [r3, #0]
    58f0:	1e5a      	subs	r2, r3, #1
    58f2:	f241 43d0 	movw	r3, #5328	; 0x14d0
    58f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58fa:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    58fc:	f000 fa0a 	bl	5d14 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    5900:	6838      	ldr	r0, [r7, #0]
    5902:	f000 f879 	bl	59f8 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    5906:	3708      	adds	r7, #8
    5908:	46bd      	mov	sp, r7
    590a:	bd80      	pop	{r7, pc}

0000590c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    590c:	b580      	push	{r7, lr}
    590e:	b082      	sub	sp, #8
    5910:	af00      	add	r7, sp, #0
    5912:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    5914:	f241 4310 	movw	r3, #5136	; 0x1410
    5918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    591c:	681b      	ldr	r3, [r3, #0]
    591e:	687a      	ldr	r2, [r7, #4]
    5920:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    5922:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5926:	f2c2 0300 	movt	r3, #8192	; 0x2000
    592a:	681b      	ldr	r3, [r3, #0]
    592c:	687a      	ldr	r2, [r7, #4]
    592e:	429a      	cmp	r2, r3
    5930:	d20f      	bcs.n	5952 <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5932:	f241 43a4 	movw	r3, #5284	; 0x14a4
    5936:	f2c2 0300 	movt	r3, #8192	; 0x2000
    593a:	681a      	ldr	r2, [r3, #0]
    593c:	f241 4310 	movw	r3, #5136	; 0x1410
    5940:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5944:	681b      	ldr	r3, [r3, #0]
    5946:	3304      	adds	r3, #4
    5948:	4610      	mov	r0, r2
    594a:	4619      	mov	r1, r3
    594c:	f7fe fc48 	bl	41e0 <vListInsert>
    5950:	e01c      	b.n	598c <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5952:	f241 43a0 	movw	r3, #5280	; 0x14a0
    5956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    595a:	681a      	ldr	r2, [r3, #0]
    595c:	f241 4310 	movw	r3, #5136	; 0x1410
    5960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5964:	681b      	ldr	r3, [r3, #0]
    5966:	3304      	adds	r3, #4
    5968:	4610      	mov	r0, r2
    596a:	4619      	mov	r1, r3
    596c:	f7fe fc38 	bl	41e0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    5970:	f240 5330 	movw	r3, #1328	; 0x530
    5974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5978:	681b      	ldr	r3, [r3, #0]
    597a:	687a      	ldr	r2, [r7, #4]
    597c:	429a      	cmp	r2, r3
    597e:	d205      	bcs.n	598c <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    5980:	f240 5330 	movw	r3, #1328	; 0x530
    5984:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5988:	687a      	ldr	r2, [r7, #4]
    598a:	601a      	str	r2, [r3, #0]
		}
	}
}
    598c:	3708      	adds	r7, #8
    598e:	46bd      	mov	sp, r7
    5990:	bd80      	pop	{r7, pc}
    5992:	bf00      	nop

00005994 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    5994:	b580      	push	{r7, lr}
    5996:	b084      	sub	sp, #16
    5998:	af00      	add	r7, sp, #0
    599a:	4603      	mov	r3, r0
    599c:	6039      	str	r1, [r7, #0]
    599e:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    59a0:	2050      	movs	r0, #80	; 0x50
    59a2:	f000 fa1b 	bl	5ddc <pvPortMalloc>
    59a6:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    59a8:	68fb      	ldr	r3, [r7, #12]
    59aa:	2b00      	cmp	r3, #0
    59ac:	d01f      	beq.n	59ee <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    59ae:	683b      	ldr	r3, [r7, #0]
    59b0:	2b00      	cmp	r3, #0
    59b2:	d106      	bne.n	59c2 <prvAllocateTCBAndStack+0x2e>
    59b4:	88fb      	ldrh	r3, [r7, #6]
    59b6:	009b      	lsls	r3, r3, #2
    59b8:	4618      	mov	r0, r3
    59ba:	f000 fa0f 	bl	5ddc <pvPortMalloc>
    59be:	4603      	mov	r3, r0
    59c0:	e000      	b.n	59c4 <prvAllocateTCBAndStack+0x30>
    59c2:	683b      	ldr	r3, [r7, #0]
    59c4:	68fa      	ldr	r2, [r7, #12]
    59c6:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    59c8:	68fb      	ldr	r3, [r7, #12]
    59ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    59cc:	2b00      	cmp	r3, #0
    59ce:	d105      	bne.n	59dc <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    59d0:	68f8      	ldr	r0, [r7, #12]
    59d2:	f000 fac7 	bl	5f64 <vPortFree>
			pxNewTCB = NULL;
    59d6:	2300      	movs	r3, #0
    59d8:	60fb      	str	r3, [r7, #12]
    59da:	e008      	b.n	59ee <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    59dc:	68fb      	ldr	r3, [r7, #12]
    59de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    59e0:	88fb      	ldrh	r3, [r7, #6]
    59e2:	009b      	lsls	r3, r3, #2
    59e4:	4610      	mov	r0, r2
    59e6:	21a5      	movs	r1, #165	; 0xa5
    59e8:	461a      	mov	r2, r3
    59ea:	f012 ffbf 	bl	1896c <memset>
		}
	}

	return pxNewTCB;
    59ee:	68fb      	ldr	r3, [r7, #12]
}
    59f0:	4618      	mov	r0, r3
    59f2:	3710      	adds	r7, #16
    59f4:	46bd      	mov	sp, r7
    59f6:	bd80      	pop	{r7, pc}

000059f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    59f8:	b580      	push	{r7, lr}
    59fa:	b082      	sub	sp, #8
    59fc:	af00      	add	r7, sp, #0
    59fe:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    5a00:	687b      	ldr	r3, [r7, #4]
    5a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5a04:	4618      	mov	r0, r3
    5a06:	f000 faad 	bl	5f64 <vPortFree>
		vPortFree( pxTCB );
    5a0a:	6878      	ldr	r0, [r7, #4]
    5a0c:	f000 faaa 	bl	5f64 <vPortFree>
	}
    5a10:	3708      	adds	r7, #8
    5a12:	46bd      	mov	sp, r7
    5a14:	bd80      	pop	{r7, pc}
    5a16:	bf00      	nop

00005a18 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    5a18:	b480      	push	{r7}
    5a1a:	b083      	sub	sp, #12
    5a1c:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    5a1e:	f241 4310 	movw	r3, #5136	; 0x1410
    5a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a26:	681b      	ldr	r3, [r3, #0]
    5a28:	607b      	str	r3, [r7, #4]

		return xReturn;
    5a2a:	687b      	ldr	r3, [r7, #4]
	}
    5a2c:	4618      	mov	r0, r3
    5a2e:	370c      	adds	r7, #12
    5a30:	46bd      	mov	sp, r7
    5a32:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a36:	4770      	bx	lr

00005a38 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    5a38:	b580      	push	{r7, lr}
    5a3a:	b084      	sub	sp, #16
    5a3c:	af00      	add	r7, sp, #0
    5a3e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5a40:	687b      	ldr	r3, [r7, #4]
    5a42:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    5a44:	68fb      	ldr	r3, [r7, #12]
    5a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a48:	f241 4310 	movw	r3, #5136	; 0x1410
    5a4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a50:	681b      	ldr	r3, [r3, #0]
    5a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5a54:	429a      	cmp	r2, r3
    5a56:	d24f      	bcs.n	5af8 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    5a58:	f241 4310 	movw	r3, #5136	; 0x1410
    5a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a60:	681b      	ldr	r3, [r3, #0]
    5a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5a64:	f1c3 0205 	rsb	r2, r3, #5
    5a68:	68fb      	ldr	r3, [r7, #12]
    5a6a:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    5a6c:	68fb      	ldr	r3, [r7, #12]
    5a6e:	6959      	ldr	r1, [r3, #20]
    5a70:	68fb      	ldr	r3, [r7, #12]
    5a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a74:	4613      	mov	r3, r2
    5a76:	009b      	lsls	r3, r3, #2
    5a78:	4413      	add	r3, r2
    5a7a:	009b      	lsls	r3, r3, #2
    5a7c:	f241 4214 	movw	r2, #5140	; 0x1414
    5a80:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5a84:	4413      	add	r3, r2
    5a86:	4299      	cmp	r1, r3
    5a88:	d12e      	bne.n	5ae8 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    5a8a:	68fb      	ldr	r3, [r7, #12]
    5a8c:	3304      	adds	r3, #4
    5a8e:	4618      	mov	r0, r3
    5a90:	f7fe fbde 	bl	4250 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5a94:	f241 4310 	movw	r3, #5136	; 0x1410
    5a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a9c:	681b      	ldr	r3, [r3, #0]
    5a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5aa0:	68fb      	ldr	r3, [r7, #12]
    5aa2:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    5aa4:	68fb      	ldr	r3, [r7, #12]
    5aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5aa8:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ab0:	681b      	ldr	r3, [r3, #0]
    5ab2:	429a      	cmp	r2, r3
    5ab4:	d906      	bls.n	5ac4 <vTaskPriorityInherit+0x8c>
    5ab6:	68fb      	ldr	r3, [r7, #12]
    5ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5aba:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ac2:	601a      	str	r2, [r3, #0]
    5ac4:	68fb      	ldr	r3, [r7, #12]
    5ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5ac8:	4613      	mov	r3, r2
    5aca:	009b      	lsls	r3, r3, #2
    5acc:	4413      	add	r3, r2
    5ace:	009b      	lsls	r3, r3, #2
    5ad0:	f241 4214 	movw	r2, #5140	; 0x1414
    5ad4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5ad8:	441a      	add	r2, r3
    5ada:	68fb      	ldr	r3, [r7, #12]
    5adc:	3304      	adds	r3, #4
    5ade:	4610      	mov	r0, r2
    5ae0:	4619      	mov	r1, r3
    5ae2:	f7fe fb55 	bl	4190 <vListInsertEnd>
    5ae6:	e007      	b.n	5af8 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5ae8:	f241 4310 	movw	r3, #5136	; 0x1410
    5aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5af0:	681b      	ldr	r3, [r3, #0]
    5af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5af4:	68fb      	ldr	r3, [r7, #12]
    5af6:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    5af8:	3710      	adds	r7, #16
    5afa:	46bd      	mov	sp, r7
    5afc:	bd80      	pop	{r7, pc}
    5afe:	bf00      	nop

00005b00 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    5b00:	b580      	push	{r7, lr}
    5b02:	b084      	sub	sp, #16
    5b04:	af00      	add	r7, sp, #0
    5b06:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5b08:	687b      	ldr	r3, [r7, #4]
    5b0a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5b0c:	687b      	ldr	r3, [r7, #4]
    5b0e:	2b00      	cmp	r3, #0
    5b10:	d035      	beq.n	5b7e <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    5b12:	68fb      	ldr	r3, [r7, #12]
    5b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b16:	68fb      	ldr	r3, [r7, #12]
    5b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5b1a:	429a      	cmp	r2, r3
    5b1c:	d02f      	beq.n	5b7e <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    5b1e:	68fb      	ldr	r3, [r7, #12]
    5b20:	3304      	adds	r3, #4
    5b22:	4618      	mov	r0, r3
    5b24:	f7fe fb94 	bl	4250 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5b28:	68fb      	ldr	r3, [r7, #12]
    5b2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5b2c:	68fb      	ldr	r3, [r7, #12]
    5b2e:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    5b30:	68fb      	ldr	r3, [r7, #12]
    5b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5b34:	f1c3 0205 	rsb	r2, r3, #5
    5b38:	68fb      	ldr	r3, [r7, #12]
    5b3a:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    5b3c:	68fb      	ldr	r3, [r7, #12]
    5b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b40:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b48:	681b      	ldr	r3, [r3, #0]
    5b4a:	429a      	cmp	r2, r3
    5b4c:	d906      	bls.n	5b5c <vTaskPriorityDisinherit+0x5c>
    5b4e:	68fb      	ldr	r3, [r7, #12]
    5b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b52:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b5a:	601a      	str	r2, [r3, #0]
    5b5c:	68fb      	ldr	r3, [r7, #12]
    5b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b60:	4613      	mov	r3, r2
    5b62:	009b      	lsls	r3, r3, #2
    5b64:	4413      	add	r3, r2
    5b66:	009b      	lsls	r3, r3, #2
    5b68:	f241 4214 	movw	r2, #5140	; 0x1414
    5b6c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5b70:	441a      	add	r2, r3
    5b72:	68fb      	ldr	r3, [r7, #12]
    5b74:	3304      	adds	r3, #4
    5b76:	4610      	mov	r0, r2
    5b78:	4619      	mov	r1, r3
    5b7a:	f7fe fb09 	bl	4190 <vListInsertEnd>
			}
		}
	}
    5b7e:	3710      	adds	r7, #16
    5b80:	46bd      	mov	sp, r7
    5b82:	bd80      	pop	{r7, pc}

00005b84 <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    5b84:	b480      	push	{r7}
    5b86:	b083      	sub	sp, #12
    5b88:	af00      	add	r7, sp, #0
    5b8a:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    5b8c:	687b      	ldr	r3, [r7, #4]
    5b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    5b90:	4618      	mov	r0, r3
    5b92:	370c      	adds	r7, #12
    5b94:	46bd      	mov	sp, r7
    5b96:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b9a:	4770      	bx	lr

00005b9c <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    5b9c:	b480      	push	{r7}
    5b9e:	b083      	sub	sp, #12
    5ba0:	af00      	add	r7, sp, #0
    5ba2:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    5ba4:	687b      	ldr	r3, [r7, #4]
    5ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    5ba8:	4618      	mov	r0, r3
    5baa:	370c      	adds	r7, #12
    5bac:	46bd      	mov	sp, r7
    5bae:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bb2:	4770      	bx	lr

00005bb4 <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    5bb4:	b480      	push	{r7}
    5bb6:	b083      	sub	sp, #12
    5bb8:	af00      	add	r7, sp, #0
    5bba:	6078      	str	r0, [r7, #4]
    5bbc:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    5bbe:	687b      	ldr	r3, [r7, #4]
    5bc0:	683a      	ldr	r2, [r7, #0]
    5bc2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    5bc4:	370c      	adds	r7, #12
    5bc6:	46bd      	mov	sp, r7
    5bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bcc:	4770      	bx	lr
    5bce:	bf00      	nop

00005bd0 <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    5bd0:	b480      	push	{r7}
    5bd2:	b083      	sub	sp, #12
    5bd4:	af00      	add	r7, sp, #0
    5bd6:	6078      	str	r0, [r7, #4]
    5bd8:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    5bda:	687b      	ldr	r3, [r7, #4]
    5bdc:	683a      	ldr	r2, [r7, #0]
    5bde:	649a      	str	r2, [r3, #72]	; 0x48
    }
    5be0:	370c      	adds	r7, #12
    5be2:	46bd      	mov	sp, r7
    5be4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5be8:	4770      	bx	lr
    5bea:	bf00      	nop

00005bec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5bec:	b480      	push	{r7}
    5bee:	b085      	sub	sp, #20
    5bf0:	af00      	add	r7, sp, #0
    5bf2:	60f8      	str	r0, [r7, #12]
    5bf4:	60b9      	str	r1, [r7, #8]
    5bf6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5bf8:	68fb      	ldr	r3, [r7, #12]
    5bfa:	3b04      	subs	r3, #4
    5bfc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5bfe:	68fb      	ldr	r3, [r7, #12]
    5c00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5c04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5c06:	68fb      	ldr	r3, [r7, #12]
    5c08:	3b04      	subs	r3, #4
    5c0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5c0c:	68ba      	ldr	r2, [r7, #8]
    5c0e:	68fb      	ldr	r3, [r7, #12]
    5c10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5c12:	68fb      	ldr	r3, [r7, #12]
    5c14:	3b04      	subs	r3, #4
    5c16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    5c18:	68fb      	ldr	r3, [r7, #12]
    5c1a:	2200      	movs	r2, #0
    5c1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5c1e:	68fb      	ldr	r3, [r7, #12]
    5c20:	3b14      	subs	r3, #20
    5c22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    5c24:	687a      	ldr	r2, [r7, #4]
    5c26:	68fb      	ldr	r3, [r7, #12]
    5c28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5c2a:	68fb      	ldr	r3, [r7, #12]
    5c2c:	3b20      	subs	r3, #32
    5c2e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5c30:	68fb      	ldr	r3, [r7, #12]
}
    5c32:	4618      	mov	r0, r3
    5c34:	3714      	adds	r7, #20
    5c36:	46bd      	mov	sp, r7
    5c38:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c3c:	4770      	bx	lr
    5c3e:	bf00      	nop

00005c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5c40:	4b06      	ldr	r3, [pc, #24]	; (5c5c <pxCurrentTCBConst2>)
    5c42:	6819      	ldr	r1, [r3, #0]
    5c44:	6808      	ldr	r0, [r1, #0]
    5c46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5c4a:	f380 8809 	msr	PSP, r0
    5c4e:	f04f 0000 	mov.w	r0, #0
    5c52:	f380 8811 	msr	BASEPRI, r0
    5c56:	f04e 0e0d 	orr.w	lr, lr, #13
    5c5a:	4770      	bx	lr

00005c5c <pxCurrentTCBConst2>:
    5c5c:	20001410 	.word	0x20001410

00005c60 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    5c60:	485d      	ldr	r0, [pc, #372]	; (5dd8 <prvSetupTimerInterrupt+0x2c>)
    5c62:	6800      	ldr	r0, [r0, #0]
    5c64:	6800      	ldr	r0, [r0, #0]
    5c66:	f380 8808 	msr	MSP, r0
    5c6a:	b662      	cpsie	i
    5c6c:	df00      	svc	0
    5c6e:	bf00      	nop

00005c70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    5c70:	b580      	push	{r7, lr}
    5c72:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    5c74:	f64e 5320 	movw	r3, #60704	; 0xed20
    5c78:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5c7c:	f64e 5220 	movw	r2, #60704	; 0xed20
    5c80:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5c84:	6812      	ldr	r2, [r2, #0]
    5c86:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    5c8a:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5c8c:	f64e 5320 	movw	r3, #60704	; 0xed20
    5c90:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5c94:	f64e 5220 	movw	r2, #60704	; 0xed20
    5c98:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5c9c:	6812      	ldr	r2, [r2, #0]
    5c9e:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    5ca2:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5ca4:	f000 f882 	bl	5dac <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5ca8:	f240 5334 	movw	r3, #1332	; 0x534
    5cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cb0:	2200      	movs	r2, #0
    5cb2:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5cb4:	f7ff ffd4 	bl	5c60 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5cb8:	2300      	movs	r3, #0
}
    5cba:	4618      	mov	r0, r3
    5cbc:	bd80      	pop	{r7, pc}
    5cbe:	bf00      	nop

00005cc0 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5cc0:	b480      	push	{r7}
    5cc2:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5cc4:	46bd      	mov	sp, r7
    5cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cca:	4770      	bx	lr

00005ccc <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5ccc:	b480      	push	{r7}
    5cce:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5cd0:	f64e 5304 	movw	r3, #60676	; 0xed04
    5cd4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5cdc:	601a      	str	r2, [r3, #0]
}
    5cde:	46bd      	mov	sp, r7
    5ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ce4:	4770      	bx	lr
    5ce6:	bf00      	nop

00005ce8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5ce8:	b480      	push	{r7}
    5cea:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5cec:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5cf0:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5cf4:	f240 5334 	movw	r3, #1332	; 0x534
    5cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cfc:	681b      	ldr	r3, [r3, #0]
    5cfe:	1c5a      	adds	r2, r3, #1
    5d00:	f240 5334 	movw	r3, #1332	; 0x534
    5d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d08:	601a      	str	r2, [r3, #0]
}
    5d0a:	46bd      	mov	sp, r7
    5d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d10:	4770      	bx	lr
    5d12:	bf00      	nop

00005d14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5d14:	b480      	push	{r7}
    5d16:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5d18:	f240 5334 	movw	r3, #1332	; 0x534
    5d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d20:	681b      	ldr	r3, [r3, #0]
    5d22:	1e5a      	subs	r2, r3, #1
    5d24:	f240 5334 	movw	r3, #1332	; 0x534
    5d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d2c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5d2e:	f240 5334 	movw	r3, #1332	; 0x534
    5d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d36:	681b      	ldr	r3, [r3, #0]
    5d38:	2b00      	cmp	r3, #0
    5d3a:	d103      	bne.n	5d44 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5d3c:	f04f 0000 	mov.w	r0, #0
    5d40:	f380 8811 	msr	BASEPRI, r0
	}
}
    5d44:	46bd      	mov	sp, r7
    5d46:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d4a:	4770      	bx	lr

00005d4c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5d4c:	f3ef 8009 	mrs	r0, PSP
    5d50:	4b0c      	ldr	r3, [pc, #48]	; (5d84 <pxCurrentTCBConst>)
    5d52:	681a      	ldr	r2, [r3, #0]
    5d54:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5d58:	6010      	str	r0, [r2, #0]
    5d5a:	e92d 4008 	stmdb	sp!, {r3, lr}
    5d5e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5d62:	f380 8811 	msr	BASEPRI, r0
    5d66:	f7ff fba1 	bl	54ac <vTaskSwitchContext>
    5d6a:	f04f 0000 	mov.w	r0, #0
    5d6e:	f380 8811 	msr	BASEPRI, r0
    5d72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5d76:	6819      	ldr	r1, [r3, #0]
    5d78:	6808      	ldr	r0, [r1, #0]
    5d7a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5d7e:	f380 8809 	msr	PSP, r0
    5d82:	4770      	bx	lr

00005d84 <pxCurrentTCBConst>:
    5d84:	20001410 	.word	0x20001410

00005d88 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5d88:	b580      	push	{r7, lr}
    5d8a:	b082      	sub	sp, #8
    5d8c:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5d8e:	2300      	movs	r3, #0
    5d90:	607b      	str	r3, [r7, #4]
    5d92:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5d96:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    5d9a:	f7ff fb0f 	bl	53bc <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5d9e:	f04f 0000 	mov.w	r0, #0
    5da2:	f380 8811 	msr	BASEPRI, r0
}
    5da6:	3708      	adds	r7, #8
    5da8:	46bd      	mov	sp, r7
    5daa:	bd80      	pop	{r7, pc}

00005dac <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5dac:	b480      	push	{r7}
    5dae:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5db0:	f24e 0314 	movw	r3, #57364	; 0xe014
    5db4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5db8:	f644 32bf 	movw	r2, #19391	; 0x4bbf
    5dbc:	f2c0 0203 	movt	r2, #3
    5dc0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5dc2:	f24e 0310 	movw	r3, #57360	; 0xe010
    5dc6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5dca:	2207      	movs	r2, #7
    5dcc:	601a      	str	r2, [r3, #0]
}
    5dce:	46bd      	mov	sp, r7
    5dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dd4:	4770      	bx	lr
    5dd6:	0000      	.short	0x0000
    5dd8:	e000ed08 	.word	0xe000ed08

00005ddc <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5ddc:	b580      	push	{r7, lr}
    5dde:	b08a      	sub	sp, #40	; 0x28
    5de0:	af00      	add	r7, sp, #0
    5de2:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5de4:	2300      	movs	r3, #0
    5de6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5de8:	f7ff fa06 	bl	51f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5dec:	f24c 5320 	movw	r3, #50464	; 0xc520
    5df0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5df4:	681b      	ldr	r3, [r3, #0]
    5df6:	2b00      	cmp	r3, #0
    5df8:	d130      	bne.n	5e5c <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5dfa:	f24c 5310 	movw	r3, #50448	; 0xc510
    5dfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e02:	f241 5210 	movw	r2, #5392	; 0x1510
    5e06:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5e0a:	601a      	str	r2, [r3, #0]
    5e0c:	f24c 5310 	movw	r3, #50448	; 0xc510
    5e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e14:	2200      	movs	r2, #0
    5e16:	605a      	str	r2, [r3, #4]
    5e18:	f24c 5318 	movw	r3, #50456	; 0xc518
    5e1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e20:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5e24:	605a      	str	r2, [r3, #4]
    5e26:	f24c 5318 	movw	r3, #50456	; 0xc518
    5e2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e2e:	2200      	movs	r2, #0
    5e30:	601a      	str	r2, [r3, #0]
    5e32:	f241 5310 	movw	r3, #5392	; 0x1510
    5e36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e3a:	617b      	str	r3, [r7, #20]
    5e3c:	697b      	ldr	r3, [r7, #20]
    5e3e:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5e42:	605a      	str	r2, [r3, #4]
    5e44:	697a      	ldr	r2, [r7, #20]
    5e46:	f24c 5318 	movw	r3, #50456	; 0xc518
    5e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e4e:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5e50:	f24c 5320 	movw	r3, #50464	; 0xc520
    5e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e58:	2201      	movs	r2, #1
    5e5a:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5e5c:	687b      	ldr	r3, [r7, #4]
    5e5e:	2b00      	cmp	r3, #0
    5e60:	d00d      	beq.n	5e7e <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5e62:	2310      	movs	r3, #16
    5e64:	687a      	ldr	r2, [r7, #4]
    5e66:	4413      	add	r3, r2
    5e68:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5e6a:	687b      	ldr	r3, [r7, #4]
    5e6c:	f003 0307 	and.w	r3, r3, #7
    5e70:	2b00      	cmp	r3, #0
    5e72:	d004      	beq.n	5e7e <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5e74:	687b      	ldr	r3, [r7, #4]
    5e76:	f023 0307 	bic.w	r3, r3, #7
    5e7a:	3308      	adds	r3, #8
    5e7c:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5e7e:	687b      	ldr	r3, [r7, #4]
    5e80:	2b00      	cmp	r3, #0
    5e82:	d068      	beq.n	5f56 <pvPortMalloc+0x17a>
    5e84:	687b      	ldr	r3, [r7, #4]
    5e86:	f5b3 2f96 	cmp.w	r3, #307200	; 0x4b000
    5e8a:	d264      	bcs.n	5f56 <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5e8c:	f24c 5310 	movw	r3, #50448	; 0xc510
    5e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e94:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5e96:	f24c 5310 	movw	r3, #50448	; 0xc510
    5e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e9e:	681b      	ldr	r3, [r3, #0]
    5ea0:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5ea2:	e004      	b.n	5eae <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ea6:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5eaa:	681b      	ldr	r3, [r3, #0]
    5eac:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5eb0:	685a      	ldr	r2, [r3, #4]
    5eb2:	687b      	ldr	r3, [r7, #4]
    5eb4:	429a      	cmp	r2, r3
    5eb6:	d203      	bcs.n	5ec0 <pvPortMalloc+0xe4>
    5eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5eba:	681b      	ldr	r3, [r3, #0]
    5ebc:	2b00      	cmp	r3, #0
    5ebe:	d1f1      	bne.n	5ea4 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5ec2:	f24c 5318 	movw	r3, #50456	; 0xc518
    5ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eca:	429a      	cmp	r2, r3
    5ecc:	d043      	beq.n	5f56 <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5ece:	6a3b      	ldr	r3, [r7, #32]
    5ed0:	681a      	ldr	r2, [r3, #0]
    5ed2:	2310      	movs	r3, #16
    5ed4:	4413      	add	r3, r2
    5ed6:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    5ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5eda:	681a      	ldr	r2, [r3, #0]
    5edc:	6a3b      	ldr	r3, [r7, #32]
    5ede:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    5ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ee2:	685a      	ldr	r2, [r3, #4]
    5ee4:	687b      	ldr	r3, [r7, #4]
    5ee6:	1ad2      	subs	r2, r2, r3
    5ee8:	2310      	movs	r3, #16
    5eea:	005b      	lsls	r3, r3, #1
    5eec:	429a      	cmp	r2, r3
    5eee:	d925      	bls.n	5f3c <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    5ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5ef2:	687b      	ldr	r3, [r7, #4]
    5ef4:	4413      	add	r3, r2
    5ef6:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5efa:	685a      	ldr	r2, [r3, #4]
    5efc:	687b      	ldr	r3, [r7, #4]
    5efe:	1ad2      	subs	r2, r2, r3
    5f00:	693b      	ldr	r3, [r7, #16]
    5f02:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f06:	687a      	ldr	r2, [r7, #4]
    5f08:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    5f0a:	693b      	ldr	r3, [r7, #16]
    5f0c:	685b      	ldr	r3, [r3, #4]
    5f0e:	60fb      	str	r3, [r7, #12]
    5f10:	f24c 5310 	movw	r3, #50448	; 0xc510
    5f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f18:	61bb      	str	r3, [r7, #24]
    5f1a:	e002      	b.n	5f22 <pvPortMalloc+0x146>
    5f1c:	69bb      	ldr	r3, [r7, #24]
    5f1e:	681b      	ldr	r3, [r3, #0]
    5f20:	61bb      	str	r3, [r7, #24]
    5f22:	69bb      	ldr	r3, [r7, #24]
    5f24:	681b      	ldr	r3, [r3, #0]
    5f26:	685a      	ldr	r2, [r3, #4]
    5f28:	68fb      	ldr	r3, [r7, #12]
    5f2a:	429a      	cmp	r2, r3
    5f2c:	d3f6      	bcc.n	5f1c <pvPortMalloc+0x140>
    5f2e:	69bb      	ldr	r3, [r7, #24]
    5f30:	681a      	ldr	r2, [r3, #0]
    5f32:	693b      	ldr	r3, [r7, #16]
    5f34:	601a      	str	r2, [r3, #0]
    5f36:	69bb      	ldr	r3, [r7, #24]
    5f38:	693a      	ldr	r2, [r7, #16]
    5f3a:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5f3c:	f240 5338 	movw	r3, #1336	; 0x538
    5f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f44:	681a      	ldr	r2, [r3, #0]
    5f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f48:	685b      	ldr	r3, [r3, #4]
    5f4a:	1ad2      	subs	r2, r2, r3
    5f4c:	f240 5338 	movw	r3, #1336	; 0x538
    5f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f54:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    5f56:	f7ff f961 	bl	521c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    5f5a:	69fb      	ldr	r3, [r7, #28]
}
    5f5c:	4618      	mov	r0, r3
    5f5e:	3728      	adds	r7, #40	; 0x28
    5f60:	46bd      	mov	sp, r7
    5f62:	bd80      	pop	{r7, pc}

00005f64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    5f64:	b580      	push	{r7, lr}
    5f66:	b086      	sub	sp, #24
    5f68:	af00      	add	r7, sp, #0
    5f6a:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    5f6c:	687b      	ldr	r3, [r7, #4]
    5f6e:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    5f70:	687b      	ldr	r3, [r7, #4]
    5f72:	2b00      	cmp	r3, #0
    5f74:	d030      	beq.n	5fd8 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    5f76:	2310      	movs	r3, #16
    5f78:	425b      	negs	r3, r3
    5f7a:	693a      	ldr	r2, [r7, #16]
    5f7c:	4413      	add	r3, r2
    5f7e:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    5f80:	693b      	ldr	r3, [r7, #16]
    5f82:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    5f84:	f7ff f938 	bl	51f8 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    5f88:	68fb      	ldr	r3, [r7, #12]
    5f8a:	685b      	ldr	r3, [r3, #4]
    5f8c:	60bb      	str	r3, [r7, #8]
    5f8e:	f24c 5310 	movw	r3, #50448	; 0xc510
    5f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f96:	617b      	str	r3, [r7, #20]
    5f98:	e002      	b.n	5fa0 <vPortFree+0x3c>
    5f9a:	697b      	ldr	r3, [r7, #20]
    5f9c:	681b      	ldr	r3, [r3, #0]
    5f9e:	617b      	str	r3, [r7, #20]
    5fa0:	697b      	ldr	r3, [r7, #20]
    5fa2:	681b      	ldr	r3, [r3, #0]
    5fa4:	685a      	ldr	r2, [r3, #4]
    5fa6:	68bb      	ldr	r3, [r7, #8]
    5fa8:	429a      	cmp	r2, r3
    5faa:	d3f6      	bcc.n	5f9a <vPortFree+0x36>
    5fac:	697b      	ldr	r3, [r7, #20]
    5fae:	681a      	ldr	r2, [r3, #0]
    5fb0:	68fb      	ldr	r3, [r7, #12]
    5fb2:	601a      	str	r2, [r3, #0]
    5fb4:	697b      	ldr	r3, [r7, #20]
    5fb6:	68fa      	ldr	r2, [r7, #12]
    5fb8:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    5fba:	68fb      	ldr	r3, [r7, #12]
    5fbc:	685a      	ldr	r2, [r3, #4]
    5fbe:	f240 5338 	movw	r3, #1336	; 0x538
    5fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fc6:	681b      	ldr	r3, [r3, #0]
    5fc8:	441a      	add	r2, r3
    5fca:	f240 5338 	movw	r3, #1336	; 0x538
    5fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fd2:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    5fd4:	f7ff f922 	bl	521c <xTaskResumeAll>
	}
}
    5fd8:	3718      	adds	r7, #24
    5fda:	46bd      	mov	sp, r7
    5fdc:	bd80      	pop	{r7, pc}
    5fde:	bf00      	nop

00005fe0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    5fe0:	b480      	push	{r7}
    5fe2:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    5fe4:	f240 5338 	movw	r3, #1336	; 0x538
    5fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fec:	681b      	ldr	r3, [r3, #0]
}
    5fee:	4618      	mov	r0, r3
    5ff0:	46bd      	mov	sp, r7
    5ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ff6:	4770      	bx	lr

00005ff8 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    5ff8:	b480      	push	{r7}
    5ffa:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    5ffc:	46bd      	mov	sp, r7
    5ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
    6002:	4770      	bx	lr
    6004:	0000      	movs	r0, r0
	...

00006008 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    6008:	b580      	push	{r7, lr}
    600a:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    600c:	f24c 5342 	movw	r3, #50498	; 0xc542
    6010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6014:	781b      	ldrb	r3, [r3, #0]
    6016:	2b00      	cmp	r3, #0
    6018:	f040 815d 	bne.w	62d6 <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    601c:	f24c 532a 	movw	r3, #50474	; 0xc52a
    6020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6024:	881b      	ldrh	r3, [r3, #0]
    6026:	2b09      	cmp	r3, #9
    6028:	f201 8145 	bhi.w	72b6 <ground_calibrate+0x12ae>
    602c:	f24c 532c 	movw	r3, #50476	; 0xc52c
    6030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6034:	781b      	ldrb	r3, [r3, #0]
    6036:	2b01      	cmp	r3, #1
    6038:	f041 813d 	bne.w	72b6 <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    603c:	f24c 5342 	movw	r3, #50498	; 0xc542
    6040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6044:	2201      	movs	r2, #1
    6046:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    6048:	f24c 5349 	movw	r3, #50505	; 0xc549
    604c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6050:	781a      	ldrb	r2, [r3, #0]
    6052:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    605a:	781b      	ldrb	r3, [r3, #0]
    605c:	b2db      	uxtb	r3, r3
    605e:	429a      	cmp	r2, r3
    6060:	d313      	bcc.n	608a <ground_calibrate+0x82>
    6062:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    606a:	781b      	ldrb	r3, [r3, #0]
    606c:	b2db      	uxtb	r3, r3
    606e:	461a      	mov	r2, r3
    6070:	f24c 5349 	movw	r3, #50505	; 0xc549
    6074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6078:	781b      	ldrb	r3, [r3, #0]
    607a:	1ad3      	subs	r3, r2, r3
    607c:	33ff      	adds	r3, #255	; 0xff
    607e:	2b04      	cmp	r3, #4
    6080:	bfd4      	ite	le
    6082:	2300      	movle	r3, #0
    6084:	2301      	movgt	r3, #1
    6086:	b2db      	uxtb	r3, r3
    6088:	e011      	b.n	60ae <ground_calibrate+0xa6>
    608a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    608e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6092:	781b      	ldrb	r3, [r3, #0]
    6094:	b2db      	uxtb	r3, r3
    6096:	461a      	mov	r2, r3
    6098:	f24c 5349 	movw	r3, #50505	; 0xc549
    609c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60a0:	781b      	ldrb	r3, [r3, #0]
    60a2:	1ad3      	subs	r3, r2, r3
    60a4:	2b04      	cmp	r3, #4
    60a6:	bfd4      	ite	le
    60a8:	2300      	movle	r3, #0
    60aa:	2301      	movgt	r3, #1
    60ac:	b2db      	uxtb	r3, r3
    60ae:	2b00      	cmp	r3, #0
    60b0:	f000 8103 	beq.w	62ba <ground_calibrate+0x2b2>
    60b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    60b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60bc:	781b      	ldrb	r3, [r3, #0]
    60be:	461a      	mov	r2, r3
    60c0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    60c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60c8:	2105      	movs	r1, #5
    60ca:	5499      	strb	r1, [r3, r2]
    60cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    60d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60d4:	781b      	ldrb	r3, [r3, #0]
    60d6:	3301      	adds	r3, #1
    60d8:	b2da      	uxtb	r2, r3
    60da:	f24c 5349 	movw	r3, #50505	; 0xc549
    60de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60e2:	701a      	strb	r2, [r3, #0]
    60e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    60e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60ec:	781b      	ldrb	r3, [r3, #0]
    60ee:	2bff      	cmp	r3, #255	; 0xff
    60f0:	d105      	bne.n	60fe <ground_calibrate+0xf6>
    60f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    60f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60fa:	2200      	movs	r2, #0
    60fc:	701a      	strb	r2, [r3, #0]
    60fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    6102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6106:	781b      	ldrb	r3, [r3, #0]
    6108:	461a      	mov	r2, r3
    610a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    610e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6112:	2102      	movs	r1, #2
    6114:	5499      	strb	r1, [r3, r2]
    6116:	f24c 5349 	movw	r3, #50505	; 0xc549
    611a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    611e:	781b      	ldrb	r3, [r3, #0]
    6120:	3301      	adds	r3, #1
    6122:	b2da      	uxtb	r2, r3
    6124:	f24c 5349 	movw	r3, #50505	; 0xc549
    6128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    612c:	701a      	strb	r2, [r3, #0]
    612e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6136:	781b      	ldrb	r3, [r3, #0]
    6138:	2bff      	cmp	r3, #255	; 0xff
    613a:	d105      	bne.n	6148 <ground_calibrate+0x140>
    613c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6144:	2200      	movs	r2, #0
    6146:	701a      	strb	r2, [r3, #0]
    6148:	f24c 634d 	movw	r3, #50765	; 0xc64d
    614c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6150:	2202      	movs	r2, #2
    6152:	701a      	strb	r2, [r3, #0]
    6154:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    615c:	2202      	movs	r2, #2
    615e:	701a      	strb	r2, [r3, #0]
    6160:	f24c 5349 	movw	r3, #50505	; 0xc549
    6164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6168:	781b      	ldrb	r3, [r3, #0]
    616a:	461a      	mov	r2, r3
    616c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6170:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6174:	7819      	ldrb	r1, [r3, #0]
    6176:	f24c 534c 	movw	r3, #50508	; 0xc54c
    617a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    617e:	5499      	strb	r1, [r3, r2]
    6180:	f24c 5349 	movw	r3, #50505	; 0xc549
    6184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6188:	781b      	ldrb	r3, [r3, #0]
    618a:	3301      	adds	r3, #1
    618c:	b2da      	uxtb	r2, r3
    618e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6196:	701a      	strb	r2, [r3, #0]
    6198:	f24c 5349 	movw	r3, #50505	; 0xc549
    619c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61a0:	781b      	ldrb	r3, [r3, #0]
    61a2:	2bff      	cmp	r3, #255	; 0xff
    61a4:	d105      	bne.n	61b2 <ground_calibrate+0x1aa>
    61a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    61aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ae:	2200      	movs	r2, #0
    61b0:	701a      	strb	r2, [r3, #0]
    61b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    61b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ba:	781b      	ldrb	r3, [r3, #0]
    61bc:	461a      	mov	r2, r3
    61be:	f24c 634e 	movw	r3, #50766	; 0xc64e
    61c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61c6:	7819      	ldrb	r1, [r3, #0]
    61c8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    61cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61d0:	5499      	strb	r1, [r3, r2]
    61d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    61d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61da:	781b      	ldrb	r3, [r3, #0]
    61dc:	3301      	adds	r3, #1
    61de:	b2da      	uxtb	r2, r3
    61e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    61e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61e8:	701a      	strb	r2, [r3, #0]
    61ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    61ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61f2:	781b      	ldrb	r3, [r3, #0]
    61f4:	2bff      	cmp	r3, #255	; 0xff
    61f6:	d105      	bne.n	6204 <ground_calibrate+0x1fc>
    61f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    61fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6200:	2200      	movs	r2, #0
    6202:	701a      	strb	r2, [r3, #0]
    6204:	f242 0339 	movw	r3, #8249	; 0x2039
    6208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    620c:	781b      	ldrb	r3, [r3, #0]
    620e:	b2db      	uxtb	r3, r3
    6210:	f003 0310 	and.w	r3, r3, #16
    6214:	2b00      	cmp	r3, #0
    6216:	f041 804e 	bne.w	72b6 <ground_calibrate+0x12ae>
    621a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    621e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6222:	781b      	ldrb	r3, [r3, #0]
    6224:	b2db      	uxtb	r3, r3
    6226:	461a      	mov	r2, r3
    6228:	f24c 534c 	movw	r3, #50508	; 0xc54c
    622c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6230:	5c9a      	ldrb	r2, [r3, r2]
    6232:	f24c 634b 	movw	r3, #50763	; 0xc64b
    6236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    623a:	701a      	strb	r2, [r3, #0]
    623c:	f24c 634c 	movw	r3, #50764	; 0xc64c
    6240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6244:	2200      	movs	r2, #0
    6246:	701a      	strb	r2, [r3, #0]
    6248:	f24c 534a 	movw	r3, #50506	; 0xc54a
    624c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6250:	781b      	ldrb	r3, [r3, #0]
    6252:	b2db      	uxtb	r3, r3
    6254:	3301      	adds	r3, #1
    6256:	b2da      	uxtb	r2, r3
    6258:	f24c 534a 	movw	r3, #50506	; 0xc54a
    625c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6260:	701a      	strb	r2, [r3, #0]
    6262:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    626a:	781b      	ldrb	r3, [r3, #0]
    626c:	b2db      	uxtb	r3, r3
    626e:	2bff      	cmp	r3, #255	; 0xff
    6270:	d105      	bne.n	627e <ground_calibrate+0x276>
    6272:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    627a:	2200      	movs	r2, #0
    627c:	701a      	strb	r2, [r3, #0]
    627e:	f242 0338 	movw	r3, #8248	; 0x2038
    6282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6286:	f242 0238 	movw	r2, #8248	; 0x2038
    628a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    628e:	7812      	ldrb	r2, [r2, #0]
    6290:	b2d2      	uxtb	r2, r2
    6292:	f042 0201 	orr.w	r2, r2, #1
    6296:	b2d2      	uxtb	r2, r2
    6298:	701a      	strb	r2, [r3, #0]
    629a:	f242 0339 	movw	r3, #8249	; 0x2039
    629e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62a2:	f242 0239 	movw	r2, #8249	; 0x2039
    62a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    62aa:	7812      	ldrb	r2, [r2, #0]
    62ac:	b2d2      	uxtb	r2, r2
    62ae:	f042 0210 	orr.w	r2, r2, #16
    62b2:	b2d2      	uxtb	r2, r2
    62b4:	701a      	strb	r2, [r3, #0]
    62b6:	f000 bffe 	b.w	72b6 <ground_calibrate+0x12ae>
    62ba:	f24c 5348 	movw	r3, #50504	; 0xc548
    62be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62c2:	781b      	ldrb	r3, [r3, #0]
    62c4:	3301      	adds	r3, #1
    62c6:	b2da      	uxtb	r2, r3
    62c8:	f24c 5348 	movw	r3, #50504	; 0xc548
    62cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62d0:	701a      	strb	r2, [r3, #0]
    62d2:	f000 bff0 	b.w	72b6 <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    62d6:	f24c 5342 	movw	r3, #50498	; 0xc542
    62da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62de:	781b      	ldrb	r3, [r3, #0]
    62e0:	2b01      	cmp	r3, #1
    62e2:	f040 87e8 	bne.w	72b6 <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    62e6:	f24c 6350 	movw	r3, #50768	; 0xc650
    62ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ee:	885b      	ldrh	r3, [r3, #2]
    62f0:	b21b      	sxth	r3, r3
    62f2:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    62f6:	db09      	blt.n	630c <ground_calibrate+0x304>
    62f8:	f24c 6350 	movw	r3, #50768	; 0xc650
    62fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6300:	885b      	ldrh	r3, [r3, #2]
    6302:	b21b      	sxth	r3, r3
    6304:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    6308:	f340 87d5 	ble.w	72b6 <ground_calibrate+0x12ae>
      ir_gain_calib();
    630c:	f00b fd54 	bl	11db8 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    6310:	f240 5348 	movw	r3, #1352	; 0x548
    6314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6318:	681a      	ldr	r2, [r3, #0]
    631a:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    631e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6322:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    6324:	f24c 5349 	movw	r3, #50505	; 0xc549
    6328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    632c:	781a      	ldrb	r2, [r3, #0]
    632e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6336:	781b      	ldrb	r3, [r3, #0]
    6338:	b2db      	uxtb	r3, r3
    633a:	429a      	cmp	r2, r3
    633c:	d313      	bcc.n	6366 <ground_calibrate+0x35e>
    633e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6346:	781b      	ldrb	r3, [r3, #0]
    6348:	b2db      	uxtb	r3, r3
    634a:	461a      	mov	r2, r3
    634c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6354:	781b      	ldrb	r3, [r3, #0]
    6356:	1ad3      	subs	r3, r2, r3
    6358:	33ff      	adds	r3, #255	; 0xff
    635a:	2b14      	cmp	r3, #20
    635c:	bfd4      	ite	le
    635e:	2300      	movle	r3, #0
    6360:	2301      	movgt	r3, #1
    6362:	b2db      	uxtb	r3, r3
    6364:	e011      	b.n	638a <ground_calibrate+0x382>
    6366:	f24c 534a 	movw	r3, #50506	; 0xc54a
    636a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    636e:	781b      	ldrb	r3, [r3, #0]
    6370:	b2db      	uxtb	r3, r3
    6372:	461a      	mov	r2, r3
    6374:	f24c 5349 	movw	r3, #50505	; 0xc549
    6378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    637c:	781b      	ldrb	r3, [r3, #0]
    637e:	1ad3      	subs	r3, r2, r3
    6380:	2b14      	cmp	r3, #20
    6382:	bfd4      	ite	le
    6384:	2300      	movle	r3, #0
    6386:	2301      	movgt	r3, #1
    6388:	b2db      	uxtb	r3, r3
    638a:	2b00      	cmp	r3, #0
    638c:	f000 85a6 	beq.w	6edc <ground_calibrate+0xed4>
    6390:	f24c 5349 	movw	r3, #50505	; 0xc549
    6394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6398:	781b      	ldrb	r3, [r3, #0]
    639a:	461a      	mov	r2, r3
    639c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    63a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63a4:	2105      	movs	r1, #5
    63a6:	5499      	strb	r1, [r3, r2]
    63a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    63ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63b0:	781b      	ldrb	r3, [r3, #0]
    63b2:	3301      	adds	r3, #1
    63b4:	b2da      	uxtb	r2, r3
    63b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    63ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63be:	701a      	strb	r2, [r3, #0]
    63c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    63c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63c8:	781b      	ldrb	r3, [r3, #0]
    63ca:	2bff      	cmp	r3, #255	; 0xff
    63cc:	d105      	bne.n	63da <ground_calibrate+0x3d2>
    63ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    63d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63d6:	2200      	movs	r2, #0
    63d8:	701a      	strb	r2, [r3, #0]
    63da:	f24c 5349 	movw	r3, #50505	; 0xc549
    63de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63e2:	781b      	ldrb	r3, [r3, #0]
    63e4:	461a      	mov	r2, r3
    63e6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    63ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ee:	2105      	movs	r1, #5
    63f0:	5499      	strb	r1, [r3, r2]
    63f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    63f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63fa:	781b      	ldrb	r3, [r3, #0]
    63fc:	3301      	adds	r3, #1
    63fe:	b2da      	uxtb	r2, r3
    6400:	f24c 5349 	movw	r3, #50505	; 0xc549
    6404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6408:	701a      	strb	r2, [r3, #0]
    640a:	f24c 5349 	movw	r3, #50505	; 0xc549
    640e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6412:	781b      	ldrb	r3, [r3, #0]
    6414:	2bff      	cmp	r3, #255	; 0xff
    6416:	d105      	bne.n	6424 <ground_calibrate+0x41c>
    6418:	f24c 5349 	movw	r3, #50505	; 0xc549
    641c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6420:	2200      	movs	r2, #0
    6422:	701a      	strb	r2, [r3, #0]
    6424:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    642c:	2205      	movs	r2, #5
    642e:	701a      	strb	r2, [r3, #0]
    6430:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6438:	2205      	movs	r2, #5
    643a:	701a      	strb	r2, [r3, #0]
    643c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6444:	781b      	ldrb	r3, [r3, #0]
    6446:	461a      	mov	r2, r3
    6448:	f64c 3340 	movw	r3, #52032	; 0xcb40
    644c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6450:	7819      	ldrb	r1, [r3, #0]
    6452:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    645a:	5499      	strb	r1, [r3, r2]
    645c:	f64c 3340 	movw	r3, #52032	; 0xcb40
    6460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6464:	781a      	ldrb	r2, [r3, #0]
    6466:	f24c 634d 	movw	r3, #50765	; 0xc64d
    646a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    646e:	781b      	ldrb	r3, [r3, #0]
    6470:	4413      	add	r3, r2
    6472:	b2da      	uxtb	r2, r3
    6474:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    647c:	701a      	strb	r2, [r3, #0]
    647e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6486:	781a      	ldrb	r2, [r3, #0]
    6488:	f24c 634d 	movw	r3, #50765	; 0xc64d
    648c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6490:	781b      	ldrb	r3, [r3, #0]
    6492:	4413      	add	r3, r2
    6494:	b2da      	uxtb	r2, r3
    6496:	f24c 634e 	movw	r3, #50766	; 0xc64e
    649a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    649e:	701a      	strb	r2, [r3, #0]
    64a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    64a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64a8:	781b      	ldrb	r3, [r3, #0]
    64aa:	3301      	adds	r3, #1
    64ac:	b2da      	uxtb	r2, r3
    64ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    64b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64b6:	701a      	strb	r2, [r3, #0]
    64b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    64bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64c0:	781b      	ldrb	r3, [r3, #0]
    64c2:	2bff      	cmp	r3, #255	; 0xff
    64c4:	d105      	bne.n	64d2 <ground_calibrate+0x4ca>
    64c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    64ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64ce:	2200      	movs	r2, #0
    64d0:	701a      	strb	r2, [r3, #0]
    64d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    64d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64da:	781b      	ldrb	r3, [r3, #0]
    64dc:	461a      	mov	r2, r3
    64de:	f64c 3340 	movw	r3, #52032	; 0xcb40
    64e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64e6:	7859      	ldrb	r1, [r3, #1]
    64e8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    64ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64f0:	5499      	strb	r1, [r3, r2]
    64f2:	4bd2      	ldr	r3, [pc, #840]	; (683c <ground_calibrate+0x834>)
    64f4:	781a      	ldrb	r2, [r3, #0]
    64f6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    64fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64fe:	781b      	ldrb	r3, [r3, #0]
    6500:	4413      	add	r3, r2
    6502:	b2da      	uxtb	r2, r3
    6504:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    650c:	701a      	strb	r2, [r3, #0]
    650e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6516:	781a      	ldrb	r2, [r3, #0]
    6518:	f24c 634d 	movw	r3, #50765	; 0xc64d
    651c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6520:	781b      	ldrb	r3, [r3, #0]
    6522:	4413      	add	r3, r2
    6524:	b2da      	uxtb	r2, r3
    6526:	f24c 634e 	movw	r3, #50766	; 0xc64e
    652a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    652e:	701a      	strb	r2, [r3, #0]
    6530:	f24c 5349 	movw	r3, #50505	; 0xc549
    6534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6538:	781b      	ldrb	r3, [r3, #0]
    653a:	3301      	adds	r3, #1
    653c:	b2da      	uxtb	r2, r3
    653e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6546:	701a      	strb	r2, [r3, #0]
    6548:	f24c 5349 	movw	r3, #50505	; 0xc549
    654c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6550:	781b      	ldrb	r3, [r3, #0]
    6552:	2bff      	cmp	r3, #255	; 0xff
    6554:	d105      	bne.n	6562 <ground_calibrate+0x55a>
    6556:	f24c 5349 	movw	r3, #50505	; 0xc549
    655a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    655e:	2200      	movs	r2, #0
    6560:	701a      	strb	r2, [r3, #0]
    6562:	f24c 5349 	movw	r3, #50505	; 0xc549
    6566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    656a:	781b      	ldrb	r3, [r3, #0]
    656c:	461a      	mov	r2, r3
    656e:	f64c 3340 	movw	r3, #52032	; 0xcb40
    6572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6576:	7899      	ldrb	r1, [r3, #2]
    6578:	f24c 534c 	movw	r3, #50508	; 0xc54c
    657c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6580:	5499      	strb	r1, [r3, r2]
    6582:	4baf      	ldr	r3, [pc, #700]	; (6840 <ground_calibrate+0x838>)
    6584:	781a      	ldrb	r2, [r3, #0]
    6586:	f24c 634d 	movw	r3, #50765	; 0xc64d
    658a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    658e:	781b      	ldrb	r3, [r3, #0]
    6590:	4413      	add	r3, r2
    6592:	b2da      	uxtb	r2, r3
    6594:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    659c:	701a      	strb	r2, [r3, #0]
    659e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    65a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65a6:	781a      	ldrb	r2, [r3, #0]
    65a8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    65ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65b0:	781b      	ldrb	r3, [r3, #0]
    65b2:	4413      	add	r3, r2
    65b4:	b2da      	uxtb	r2, r3
    65b6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    65ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65be:	701a      	strb	r2, [r3, #0]
    65c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    65c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65c8:	781b      	ldrb	r3, [r3, #0]
    65ca:	3301      	adds	r3, #1
    65cc:	b2da      	uxtb	r2, r3
    65ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    65d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65d6:	701a      	strb	r2, [r3, #0]
    65d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    65dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65e0:	781b      	ldrb	r3, [r3, #0]
    65e2:	2bff      	cmp	r3, #255	; 0xff
    65e4:	d105      	bne.n	65f2 <ground_calibrate+0x5ea>
    65e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    65ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ee:	2200      	movs	r2, #0
    65f0:	701a      	strb	r2, [r3, #0]
    65f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    65f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65fa:	781b      	ldrb	r3, [r3, #0]
    65fc:	461a      	mov	r2, r3
    65fe:	f64c 3340 	movw	r3, #52032	; 0xcb40
    6602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6606:	78d9      	ldrb	r1, [r3, #3]
    6608:	f24c 534c 	movw	r3, #50508	; 0xc54c
    660c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6610:	5499      	strb	r1, [r3, r2]
    6612:	4b8c      	ldr	r3, [pc, #560]	; (6844 <ground_calibrate+0x83c>)
    6614:	781a      	ldrb	r2, [r3, #0]
    6616:	f24c 634d 	movw	r3, #50765	; 0xc64d
    661a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    661e:	781b      	ldrb	r3, [r3, #0]
    6620:	4413      	add	r3, r2
    6622:	b2da      	uxtb	r2, r3
    6624:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    662c:	701a      	strb	r2, [r3, #0]
    662e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6636:	781a      	ldrb	r2, [r3, #0]
    6638:	f24c 634d 	movw	r3, #50765	; 0xc64d
    663c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6640:	781b      	ldrb	r3, [r3, #0]
    6642:	4413      	add	r3, r2
    6644:	b2da      	uxtb	r2, r3
    6646:	f24c 634e 	movw	r3, #50766	; 0xc64e
    664a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    664e:	701a      	strb	r2, [r3, #0]
    6650:	f24c 5349 	movw	r3, #50505	; 0xc549
    6654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6658:	781b      	ldrb	r3, [r3, #0]
    665a:	3301      	adds	r3, #1
    665c:	b2da      	uxtb	r2, r3
    665e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6666:	701a      	strb	r2, [r3, #0]
    6668:	f24c 5349 	movw	r3, #50505	; 0xc549
    666c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6670:	781b      	ldrb	r3, [r3, #0]
    6672:	2bff      	cmp	r3, #255	; 0xff
    6674:	d105      	bne.n	6682 <ground_calibrate+0x67a>
    6676:	f24c 5349 	movw	r3, #50505	; 0xc549
    667a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    667e:	2200      	movs	r2, #0
    6680:	701a      	strb	r2, [r3, #0]
    6682:	f24c 5349 	movw	r3, #50505	; 0xc549
    6686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    668a:	781b      	ldrb	r3, [r3, #0]
    668c:	461a      	mov	r2, r3
    668e:	f64c 3344 	movw	r3, #52036	; 0xcb44
    6692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6696:	7819      	ldrb	r1, [r3, #0]
    6698:	f24c 534c 	movw	r3, #50508	; 0xc54c
    669c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66a0:	5499      	strb	r1, [r3, r2]
    66a2:	f64c 3344 	movw	r3, #52036	; 0xcb44
    66a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66aa:	781a      	ldrb	r2, [r3, #0]
    66ac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    66b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66b4:	781b      	ldrb	r3, [r3, #0]
    66b6:	4413      	add	r3, r2
    66b8:	b2da      	uxtb	r2, r3
    66ba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    66be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66c2:	701a      	strb	r2, [r3, #0]
    66c4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    66c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66cc:	781a      	ldrb	r2, [r3, #0]
    66ce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    66d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66d6:	781b      	ldrb	r3, [r3, #0]
    66d8:	4413      	add	r3, r2
    66da:	b2da      	uxtb	r2, r3
    66dc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    66e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66e4:	701a      	strb	r2, [r3, #0]
    66e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    66ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ee:	781b      	ldrb	r3, [r3, #0]
    66f0:	3301      	adds	r3, #1
    66f2:	b2da      	uxtb	r2, r3
    66f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    66f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66fc:	701a      	strb	r2, [r3, #0]
    66fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    6702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6706:	781b      	ldrb	r3, [r3, #0]
    6708:	2bff      	cmp	r3, #255	; 0xff
    670a:	d105      	bne.n	6718 <ground_calibrate+0x710>
    670c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6714:	2200      	movs	r2, #0
    6716:	701a      	strb	r2, [r3, #0]
    6718:	f24c 5349 	movw	r3, #50505	; 0xc549
    671c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6720:	781b      	ldrb	r3, [r3, #0]
    6722:	461a      	mov	r2, r3
    6724:	f64c 3344 	movw	r3, #52036	; 0xcb44
    6728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    672c:	7859      	ldrb	r1, [r3, #1]
    672e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6736:	5499      	strb	r1, [r3, r2]
    6738:	4b43      	ldr	r3, [pc, #268]	; (6848 <ground_calibrate+0x840>)
    673a:	781a      	ldrb	r2, [r3, #0]
    673c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6744:	781b      	ldrb	r3, [r3, #0]
    6746:	4413      	add	r3, r2
    6748:	b2da      	uxtb	r2, r3
    674a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    674e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6752:	701a      	strb	r2, [r3, #0]
    6754:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    675c:	781a      	ldrb	r2, [r3, #0]
    675e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6766:	781b      	ldrb	r3, [r3, #0]
    6768:	4413      	add	r3, r2
    676a:	b2da      	uxtb	r2, r3
    676c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6774:	701a      	strb	r2, [r3, #0]
    6776:	f24c 5349 	movw	r3, #50505	; 0xc549
    677a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    677e:	781b      	ldrb	r3, [r3, #0]
    6780:	3301      	adds	r3, #1
    6782:	b2da      	uxtb	r2, r3
    6784:	f24c 5349 	movw	r3, #50505	; 0xc549
    6788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    678c:	701a      	strb	r2, [r3, #0]
    678e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6796:	781b      	ldrb	r3, [r3, #0]
    6798:	2bff      	cmp	r3, #255	; 0xff
    679a:	d105      	bne.n	67a8 <ground_calibrate+0x7a0>
    679c:	f24c 5349 	movw	r3, #50505	; 0xc549
    67a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67a4:	2200      	movs	r2, #0
    67a6:	701a      	strb	r2, [r3, #0]
    67a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    67ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67b0:	781b      	ldrb	r3, [r3, #0]
    67b2:	461a      	mov	r2, r3
    67b4:	f64c 3344 	movw	r3, #52036	; 0xcb44
    67b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67bc:	7899      	ldrb	r1, [r3, #2]
    67be:	f24c 534c 	movw	r3, #50508	; 0xc54c
    67c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67c6:	5499      	strb	r1, [r3, r2]
    67c8:	4b20      	ldr	r3, [pc, #128]	; (684c <ground_calibrate+0x844>)
    67ca:	781a      	ldrb	r2, [r3, #0]
    67cc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    67d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67d4:	781b      	ldrb	r3, [r3, #0]
    67d6:	4413      	add	r3, r2
    67d8:	b2da      	uxtb	r2, r3
    67da:	f24c 634d 	movw	r3, #50765	; 0xc64d
    67de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67e2:	701a      	strb	r2, [r3, #0]
    67e4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    67e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ec:	781a      	ldrb	r2, [r3, #0]
    67ee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    67f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67f6:	781b      	ldrb	r3, [r3, #0]
    67f8:	4413      	add	r3, r2
    67fa:	b2da      	uxtb	r2, r3
    67fc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6804:	701a      	strb	r2, [r3, #0]
    6806:	f24c 5349 	movw	r3, #50505	; 0xc549
    680a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    680e:	781b      	ldrb	r3, [r3, #0]
    6810:	3301      	adds	r3, #1
    6812:	b2da      	uxtb	r2, r3
    6814:	f24c 5349 	movw	r3, #50505	; 0xc549
    6818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    681c:	701a      	strb	r2, [r3, #0]
    681e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6826:	781b      	ldrb	r3, [r3, #0]
    6828:	2bff      	cmp	r3, #255	; 0xff
    682a:	d111      	bne.n	6850 <ground_calibrate+0x848>
    682c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6834:	2200      	movs	r2, #0
    6836:	701a      	strb	r2, [r3, #0]
    6838:	e00a      	b.n	6850 <ground_calibrate+0x848>
    683a:	bf00      	nop
    683c:	2004cb41 	.word	0x2004cb41
    6840:	2004cb42 	.word	0x2004cb42
    6844:	2004cb43 	.word	0x2004cb43
    6848:	2004cb45 	.word	0x2004cb45
    684c:	2004cb46 	.word	0x2004cb46
    6850:	f24c 5349 	movw	r3, #50505	; 0xc549
    6854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6858:	781b      	ldrb	r3, [r3, #0]
    685a:	461a      	mov	r2, r3
    685c:	f64c 3344 	movw	r3, #52036	; 0xcb44
    6860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6864:	78d9      	ldrb	r1, [r3, #3]
    6866:	f24c 534c 	movw	r3, #50508	; 0xc54c
    686a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    686e:	5499      	strb	r1, [r3, r2]
    6870:	4bd3      	ldr	r3, [pc, #844]	; (6bc0 <ground_calibrate+0xbb8>)
    6872:	781a      	ldrb	r2, [r3, #0]
    6874:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    687c:	781b      	ldrb	r3, [r3, #0]
    687e:	4413      	add	r3, r2
    6880:	b2da      	uxtb	r2, r3
    6882:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    688a:	701a      	strb	r2, [r3, #0]
    688c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6894:	781a      	ldrb	r2, [r3, #0]
    6896:	f24c 634d 	movw	r3, #50765	; 0xc64d
    689a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    689e:	781b      	ldrb	r3, [r3, #0]
    68a0:	4413      	add	r3, r2
    68a2:	b2da      	uxtb	r2, r3
    68a4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    68a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ac:	701a      	strb	r2, [r3, #0]
    68ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    68b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68b6:	781b      	ldrb	r3, [r3, #0]
    68b8:	3301      	adds	r3, #1
    68ba:	b2da      	uxtb	r2, r3
    68bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    68c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68c4:	701a      	strb	r2, [r3, #0]
    68c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    68ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ce:	781b      	ldrb	r3, [r3, #0]
    68d0:	2bff      	cmp	r3, #255	; 0xff
    68d2:	d105      	bne.n	68e0 <ground_calibrate+0x8d8>
    68d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    68d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68dc:	2200      	movs	r2, #0
    68de:	701a      	strb	r2, [r3, #0]
    68e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    68e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68e8:	781b      	ldrb	r3, [r3, #0]
    68ea:	461a      	mov	r2, r3
    68ec:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    68f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68f4:	7819      	ldrb	r1, [r3, #0]
    68f6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    68fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68fe:	5499      	strb	r1, [r3, r2]
    6900:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6908:	781a      	ldrb	r2, [r3, #0]
    690a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    690e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6912:	781b      	ldrb	r3, [r3, #0]
    6914:	4413      	add	r3, r2
    6916:	b2da      	uxtb	r2, r3
    6918:	f24c 634d 	movw	r3, #50765	; 0xc64d
    691c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6920:	701a      	strb	r2, [r3, #0]
    6922:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    692a:	781a      	ldrb	r2, [r3, #0]
    692c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6934:	781b      	ldrb	r3, [r3, #0]
    6936:	4413      	add	r3, r2
    6938:	b2da      	uxtb	r2, r3
    693a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    693e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6942:	701a      	strb	r2, [r3, #0]
    6944:	f24c 5349 	movw	r3, #50505	; 0xc549
    6948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    694c:	781b      	ldrb	r3, [r3, #0]
    694e:	3301      	adds	r3, #1
    6950:	b2da      	uxtb	r2, r3
    6952:	f24c 5349 	movw	r3, #50505	; 0xc549
    6956:	f2c2 0304 	movt	r3, #8196	; 0x2004
    695a:	701a      	strb	r2, [r3, #0]
    695c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6964:	781b      	ldrb	r3, [r3, #0]
    6966:	2bff      	cmp	r3, #255	; 0xff
    6968:	d105      	bne.n	6976 <ground_calibrate+0x96e>
    696a:	f24c 5349 	movw	r3, #50505	; 0xc549
    696e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6972:	2200      	movs	r2, #0
    6974:	701a      	strb	r2, [r3, #0]
    6976:	f24c 5349 	movw	r3, #50505	; 0xc549
    697a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    697e:	781b      	ldrb	r3, [r3, #0]
    6980:	461a      	mov	r2, r3
    6982:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    698a:	7859      	ldrb	r1, [r3, #1]
    698c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6994:	5499      	strb	r1, [r3, r2]
    6996:	4b8b      	ldr	r3, [pc, #556]	; (6bc4 <ground_calibrate+0xbbc>)
    6998:	781a      	ldrb	r2, [r3, #0]
    699a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    699e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69a2:	781b      	ldrb	r3, [r3, #0]
    69a4:	4413      	add	r3, r2
    69a6:	b2da      	uxtb	r2, r3
    69a8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    69ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69b0:	701a      	strb	r2, [r3, #0]
    69b2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    69b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ba:	781a      	ldrb	r2, [r3, #0]
    69bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    69c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69c4:	781b      	ldrb	r3, [r3, #0]
    69c6:	4413      	add	r3, r2
    69c8:	b2da      	uxtb	r2, r3
    69ca:	f24c 634e 	movw	r3, #50766	; 0xc64e
    69ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69d2:	701a      	strb	r2, [r3, #0]
    69d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    69d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69dc:	781b      	ldrb	r3, [r3, #0]
    69de:	3301      	adds	r3, #1
    69e0:	b2da      	uxtb	r2, r3
    69e2:	f24c 5349 	movw	r3, #50505	; 0xc549
    69e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ea:	701a      	strb	r2, [r3, #0]
    69ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    69f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69f4:	781b      	ldrb	r3, [r3, #0]
    69f6:	2bff      	cmp	r3, #255	; 0xff
    69f8:	d105      	bne.n	6a06 <ground_calibrate+0x9fe>
    69fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    69fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a02:	2200      	movs	r2, #0
    6a04:	701a      	strb	r2, [r3, #0]
    6a06:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a0e:	781b      	ldrb	r3, [r3, #0]
    6a10:	461a      	mov	r2, r3
    6a12:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a1a:	7899      	ldrb	r1, [r3, #2]
    6a1c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a24:	5499      	strb	r1, [r3, r2]
    6a26:	4b68      	ldr	r3, [pc, #416]	; (6bc8 <ground_calibrate+0xbc0>)
    6a28:	781a      	ldrb	r2, [r3, #0]
    6a2a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a32:	781b      	ldrb	r3, [r3, #0]
    6a34:	4413      	add	r3, r2
    6a36:	b2da      	uxtb	r2, r3
    6a38:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a40:	701a      	strb	r2, [r3, #0]
    6a42:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6a46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a4a:	781a      	ldrb	r2, [r3, #0]
    6a4c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a54:	781b      	ldrb	r3, [r3, #0]
    6a56:	4413      	add	r3, r2
    6a58:	b2da      	uxtb	r2, r3
    6a5a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6a5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a62:	701a      	strb	r2, [r3, #0]
    6a64:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a6c:	781b      	ldrb	r3, [r3, #0]
    6a6e:	3301      	adds	r3, #1
    6a70:	b2da      	uxtb	r2, r3
    6a72:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a7a:	701a      	strb	r2, [r3, #0]
    6a7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a84:	781b      	ldrb	r3, [r3, #0]
    6a86:	2bff      	cmp	r3, #255	; 0xff
    6a88:	d105      	bne.n	6a96 <ground_calibrate+0xa8e>
    6a8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a92:	2200      	movs	r2, #0
    6a94:	701a      	strb	r2, [r3, #0]
    6a96:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a9e:	781b      	ldrb	r3, [r3, #0]
    6aa0:	461a      	mov	r2, r3
    6aa2:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aaa:	78d9      	ldrb	r1, [r3, #3]
    6aac:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ab4:	5499      	strb	r1, [r3, r2]
    6ab6:	4b45      	ldr	r3, [pc, #276]	; (6bcc <ground_calibrate+0xbc4>)
    6ab8:	781a      	ldrb	r2, [r3, #0]
    6aba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ac2:	781b      	ldrb	r3, [r3, #0]
    6ac4:	4413      	add	r3, r2
    6ac6:	b2da      	uxtb	r2, r3
    6ac8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ad0:	701a      	strb	r2, [r3, #0]
    6ad2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ada:	781a      	ldrb	r2, [r3, #0]
    6adc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ae4:	781b      	ldrb	r3, [r3, #0]
    6ae6:	4413      	add	r3, r2
    6ae8:	b2da      	uxtb	r2, r3
    6aea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6af2:	701a      	strb	r2, [r3, #0]
    6af4:	f24c 5349 	movw	r3, #50505	; 0xc549
    6af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6afc:	781b      	ldrb	r3, [r3, #0]
    6afe:	3301      	adds	r3, #1
    6b00:	b2da      	uxtb	r2, r3
    6b02:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b0a:	701a      	strb	r2, [r3, #0]
    6b0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b14:	781b      	ldrb	r3, [r3, #0]
    6b16:	2bff      	cmp	r3, #255	; 0xff
    6b18:	d105      	bne.n	6b26 <ground_calibrate+0xb1e>
    6b1a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b22:	2200      	movs	r2, #0
    6b24:	701a      	strb	r2, [r3, #0]
    6b26:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b2e:	781b      	ldrb	r3, [r3, #0]
    6b30:	461a      	mov	r2, r3
    6b32:	f240 5342 	movw	r3, #1346	; 0x542
    6b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b3a:	7819      	ldrb	r1, [r3, #0]
    6b3c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b44:	5499      	strb	r1, [r3, r2]
    6b46:	f240 5342 	movw	r3, #1346	; 0x542
    6b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b4e:	781a      	ldrb	r2, [r3, #0]
    6b50:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b58:	781b      	ldrb	r3, [r3, #0]
    6b5a:	4413      	add	r3, r2
    6b5c:	b2da      	uxtb	r2, r3
    6b5e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b66:	701a      	strb	r2, [r3, #0]
    6b68:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b70:	781a      	ldrb	r2, [r3, #0]
    6b72:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b7a:	781b      	ldrb	r3, [r3, #0]
    6b7c:	4413      	add	r3, r2
    6b7e:	b2da      	uxtb	r2, r3
    6b80:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b88:	701a      	strb	r2, [r3, #0]
    6b8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b92:	781b      	ldrb	r3, [r3, #0]
    6b94:	3301      	adds	r3, #1
    6b96:	b2da      	uxtb	r2, r3
    6b98:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ba0:	701a      	strb	r2, [r3, #0]
    6ba2:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6baa:	781b      	ldrb	r3, [r3, #0]
    6bac:	2bff      	cmp	r3, #255	; 0xff
    6bae:	d10f      	bne.n	6bd0 <ground_calibrate+0xbc8>
    6bb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    6bb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bb8:	2200      	movs	r2, #0
    6bba:	701a      	strb	r2, [r3, #0]
    6bbc:	e008      	b.n	6bd0 <ground_calibrate+0xbc8>
    6bbe:	bf00      	nop
    6bc0:	2004cb47 	.word	0x2004cb47
    6bc4:	2004cb3d 	.word	0x2004cb3d
    6bc8:	2004cb3e 	.word	0x2004cb3e
    6bcc:	2004cb3f 	.word	0x2004cb3f
    6bd0:	f24c 5349 	movw	r3, #50505	; 0xc549
    6bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bd8:	781b      	ldrb	r3, [r3, #0]
    6bda:	461a      	mov	r2, r3
    6bdc:	f240 5342 	movw	r3, #1346	; 0x542
    6be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6be4:	7859      	ldrb	r1, [r3, #1]
    6be6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bee:	5499      	strb	r1, [r3, r2]
    6bf0:	4bd4      	ldr	r3, [pc, #848]	; (6f44 <ground_calibrate+0xf3c>)
    6bf2:	781a      	ldrb	r2, [r3, #0]
    6bf4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bfc:	781b      	ldrb	r3, [r3, #0]
    6bfe:	4413      	add	r3, r2
    6c00:	b2da      	uxtb	r2, r3
    6c02:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c0a:	701a      	strb	r2, [r3, #0]
    6c0c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6c10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c14:	781a      	ldrb	r2, [r3, #0]
    6c16:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c1e:	781b      	ldrb	r3, [r3, #0]
    6c20:	4413      	add	r3, r2
    6c22:	b2da      	uxtb	r2, r3
    6c24:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c2c:	701a      	strb	r2, [r3, #0]
    6c2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c36:	781b      	ldrb	r3, [r3, #0]
    6c38:	3301      	adds	r3, #1
    6c3a:	b2da      	uxtb	r2, r3
    6c3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c44:	701a      	strb	r2, [r3, #0]
    6c46:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c4e:	781b      	ldrb	r3, [r3, #0]
    6c50:	2bff      	cmp	r3, #255	; 0xff
    6c52:	d105      	bne.n	6c60 <ground_calibrate+0xc58>
    6c54:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c5c:	2200      	movs	r2, #0
    6c5e:	701a      	strb	r2, [r3, #0]
    6c60:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c68:	781b      	ldrb	r3, [r3, #0]
    6c6a:	461a      	mov	r2, r3
    6c6c:	f240 5344 	movw	r3, #1348	; 0x544
    6c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c74:	7819      	ldrb	r1, [r3, #0]
    6c76:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c7e:	5499      	strb	r1, [r3, r2]
    6c80:	f240 5344 	movw	r3, #1348	; 0x544
    6c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c88:	781a      	ldrb	r2, [r3, #0]
    6c8a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c92:	781b      	ldrb	r3, [r3, #0]
    6c94:	4413      	add	r3, r2
    6c96:	b2da      	uxtb	r2, r3
    6c98:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ca0:	701a      	strb	r2, [r3, #0]
    6ca2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6ca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6caa:	781a      	ldrb	r2, [r3, #0]
    6cac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cb4:	781b      	ldrb	r3, [r3, #0]
    6cb6:	4413      	add	r3, r2
    6cb8:	b2da      	uxtb	r2, r3
    6cba:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6cbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cc2:	701a      	strb	r2, [r3, #0]
    6cc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    6cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ccc:	781b      	ldrb	r3, [r3, #0]
    6cce:	3301      	adds	r3, #1
    6cd0:	b2da      	uxtb	r2, r3
    6cd2:	f24c 5349 	movw	r3, #50505	; 0xc549
    6cd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cda:	701a      	strb	r2, [r3, #0]
    6cdc:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ce4:	781b      	ldrb	r3, [r3, #0]
    6ce6:	2bff      	cmp	r3, #255	; 0xff
    6ce8:	d105      	bne.n	6cf6 <ground_calibrate+0xcee>
    6cea:	f24c 5349 	movw	r3, #50505	; 0xc549
    6cee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cf2:	2200      	movs	r2, #0
    6cf4:	701a      	strb	r2, [r3, #0]
    6cf6:	f24c 5349 	movw	r3, #50505	; 0xc549
    6cfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cfe:	781b      	ldrb	r3, [r3, #0]
    6d00:	461a      	mov	r2, r3
    6d02:	f240 5344 	movw	r3, #1348	; 0x544
    6d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d0a:	7859      	ldrb	r1, [r3, #1]
    6d0c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d14:	5499      	strb	r1, [r3, r2]
    6d16:	4b8c      	ldr	r3, [pc, #560]	; (6f48 <ground_calibrate+0xf40>)
    6d18:	781a      	ldrb	r2, [r3, #0]
    6d1a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d22:	781b      	ldrb	r3, [r3, #0]
    6d24:	4413      	add	r3, r2
    6d26:	b2da      	uxtb	r2, r3
    6d28:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6d2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d30:	701a      	strb	r2, [r3, #0]
    6d32:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6d36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d3a:	781a      	ldrb	r2, [r3, #0]
    6d3c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d44:	781b      	ldrb	r3, [r3, #0]
    6d46:	4413      	add	r3, r2
    6d48:	b2da      	uxtb	r2, r3
    6d4a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d52:	701a      	strb	r2, [r3, #0]
    6d54:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d5c:	781b      	ldrb	r3, [r3, #0]
    6d5e:	3301      	adds	r3, #1
    6d60:	b2da      	uxtb	r2, r3
    6d62:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d6a:	701a      	strb	r2, [r3, #0]
    6d6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d74:	781b      	ldrb	r3, [r3, #0]
    6d76:	2bff      	cmp	r3, #255	; 0xff
    6d78:	d105      	bne.n	6d86 <ground_calibrate+0xd7e>
    6d7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d82:	2200      	movs	r2, #0
    6d84:	701a      	strb	r2, [r3, #0]
    6d86:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d8e:	781b      	ldrb	r3, [r3, #0]
    6d90:	461a      	mov	r2, r3
    6d92:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d9a:	7819      	ldrb	r1, [r3, #0]
    6d9c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6da4:	5499      	strb	r1, [r3, r2]
    6da6:	f24c 5349 	movw	r3, #50505	; 0xc549
    6daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dae:	781b      	ldrb	r3, [r3, #0]
    6db0:	3301      	adds	r3, #1
    6db2:	b2da      	uxtb	r2, r3
    6db4:	f24c 5349 	movw	r3, #50505	; 0xc549
    6db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dbc:	701a      	strb	r2, [r3, #0]
    6dbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    6dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dc6:	781b      	ldrb	r3, [r3, #0]
    6dc8:	2bff      	cmp	r3, #255	; 0xff
    6dca:	d105      	bne.n	6dd8 <ground_calibrate+0xdd0>
    6dcc:	f24c 5349 	movw	r3, #50505	; 0xc549
    6dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dd4:	2200      	movs	r2, #0
    6dd6:	701a      	strb	r2, [r3, #0]
    6dd8:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6de0:	781b      	ldrb	r3, [r3, #0]
    6de2:	461a      	mov	r2, r3
    6de4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6de8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dec:	7819      	ldrb	r1, [r3, #0]
    6dee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6df2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6df6:	5499      	strb	r1, [r3, r2]
    6df8:	f24c 5349 	movw	r3, #50505	; 0xc549
    6dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e00:	781b      	ldrb	r3, [r3, #0]
    6e02:	3301      	adds	r3, #1
    6e04:	b2da      	uxtb	r2, r3
    6e06:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e0e:	701a      	strb	r2, [r3, #0]
    6e10:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e18:	781b      	ldrb	r3, [r3, #0]
    6e1a:	2bff      	cmp	r3, #255	; 0xff
    6e1c:	d105      	bne.n	6e2a <ground_calibrate+0xe22>
    6e1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e26:	2200      	movs	r2, #0
    6e28:	701a      	strb	r2, [r3, #0]
    6e2a:	f242 0339 	movw	r3, #8249	; 0x2039
    6e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e32:	781b      	ldrb	r3, [r3, #0]
    6e34:	b2db      	uxtb	r3, r3
    6e36:	f003 0310 	and.w	r3, r3, #16
    6e3a:	2b00      	cmp	r3, #0
    6e3c:	d15a      	bne.n	6ef4 <ground_calibrate+0xeec>
    6e3e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e46:	781b      	ldrb	r3, [r3, #0]
    6e48:	b2db      	uxtb	r3, r3
    6e4a:	461a      	mov	r2, r3
    6e4c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6e50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e54:	5c9a      	ldrb	r2, [r3, r2]
    6e56:	f24c 634b 	movw	r3, #50763	; 0xc64b
    6e5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e5e:	701a      	strb	r2, [r3, #0]
    6e60:	f24c 634c 	movw	r3, #50764	; 0xc64c
    6e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e68:	2200      	movs	r2, #0
    6e6a:	701a      	strb	r2, [r3, #0]
    6e6c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e74:	781b      	ldrb	r3, [r3, #0]
    6e76:	b2db      	uxtb	r3, r3
    6e78:	3301      	adds	r3, #1
    6e7a:	b2da      	uxtb	r2, r3
    6e7c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e84:	701a      	strb	r2, [r3, #0]
    6e86:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e8e:	781b      	ldrb	r3, [r3, #0]
    6e90:	b2db      	uxtb	r3, r3
    6e92:	2bff      	cmp	r3, #255	; 0xff
    6e94:	d105      	bne.n	6ea2 <ground_calibrate+0xe9a>
    6e96:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e9e:	2200      	movs	r2, #0
    6ea0:	701a      	strb	r2, [r3, #0]
    6ea2:	f242 0338 	movw	r3, #8248	; 0x2038
    6ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eaa:	f242 0238 	movw	r2, #8248	; 0x2038
    6eae:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6eb2:	7812      	ldrb	r2, [r2, #0]
    6eb4:	b2d2      	uxtb	r2, r2
    6eb6:	f042 0201 	orr.w	r2, r2, #1
    6eba:	b2d2      	uxtb	r2, r2
    6ebc:	701a      	strb	r2, [r3, #0]
    6ebe:	f242 0339 	movw	r3, #8249	; 0x2039
    6ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ec6:	f242 0239 	movw	r2, #8249	; 0x2039
    6eca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6ece:	7812      	ldrb	r2, [r2, #0]
    6ed0:	b2d2      	uxtb	r2, r2
    6ed2:	f042 0210 	orr.w	r2, r2, #16
    6ed6:	b2d2      	uxtb	r2, r2
    6ed8:	701a      	strb	r2, [r3, #0]
    6eda:	e00b      	b.n	6ef4 <ground_calibrate+0xeec>
    6edc:	f24c 5348 	movw	r3, #50504	; 0xc548
    6ee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ee4:	781b      	ldrb	r3, [r3, #0]
    6ee6:	3301      	adds	r3, #1
    6ee8:	b2da      	uxtb	r2, r3
    6eea:	f24c 5348 	movw	r3, #50504	; 0xc548
    6eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ef2:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    6ef4:	f24c 5342 	movw	r3, #50498	; 0xc542
    6ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6efc:	2202      	movs	r2, #2
    6efe:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    6f00:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f08:	781a      	ldrb	r2, [r3, #0]
    6f0a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f12:	781b      	ldrb	r3, [r3, #0]
    6f14:	b2db      	uxtb	r3, r3
    6f16:	429a      	cmp	r2, r3
    6f18:	d318      	bcc.n	6f4c <ground_calibrate+0xf44>
    6f1a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6f1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f22:	781b      	ldrb	r3, [r3, #0]
    6f24:	b2db      	uxtb	r3, r3
    6f26:	461a      	mov	r2, r3
    6f28:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f30:	781b      	ldrb	r3, [r3, #0]
    6f32:	1ad3      	subs	r3, r2, r3
    6f34:	33ff      	adds	r3, #255	; 0xff
    6f36:	2b06      	cmp	r3, #6
    6f38:	bfd4      	ite	le
    6f3a:	2300      	movle	r3, #0
    6f3c:	2301      	movgt	r3, #1
    6f3e:	b2db      	uxtb	r3, r3
    6f40:	e016      	b.n	6f70 <ground_calibrate+0xf68>
    6f42:	bf00      	nop
    6f44:	20000543 	.word	0x20000543
    6f48:	20000545 	.word	0x20000545
    6f4c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6f50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f54:	781b      	ldrb	r3, [r3, #0]
    6f56:	b2db      	uxtb	r3, r3
    6f58:	461a      	mov	r2, r3
    6f5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f62:	781b      	ldrb	r3, [r3, #0]
    6f64:	1ad3      	subs	r3, r2, r3
    6f66:	2b06      	cmp	r3, #6
    6f68:	bfd4      	ite	le
    6f6a:	2300      	movle	r3, #0
    6f6c:	2301      	movgt	r3, #1
    6f6e:	b2db      	uxtb	r3, r3
    6f70:	2b00      	cmp	r3, #0
    6f72:	f000 8194 	beq.w	729e <ground_calibrate+0x1296>
    6f76:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f7e:	781b      	ldrb	r3, [r3, #0]
    6f80:	461a      	mov	r2, r3
    6f82:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f8a:	2105      	movs	r1, #5
    6f8c:	5499      	strb	r1, [r3, r2]
    6f8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f96:	781b      	ldrb	r3, [r3, #0]
    6f98:	3301      	adds	r3, #1
    6f9a:	b2da      	uxtb	r2, r3
    6f9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fa4:	701a      	strb	r2, [r3, #0]
    6fa6:	f24c 5349 	movw	r3, #50505	; 0xc549
    6faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fae:	781b      	ldrb	r3, [r3, #0]
    6fb0:	2bff      	cmp	r3, #255	; 0xff
    6fb2:	d105      	bne.n	6fc0 <ground_calibrate+0xfb8>
    6fb4:	f24c 5349 	movw	r3, #50505	; 0xc549
    6fb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fbc:	2200      	movs	r2, #0
    6fbe:	701a      	strb	r2, [r3, #0]
    6fc0:	f24c 5349 	movw	r3, #50505	; 0xc549
    6fc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fc8:	781b      	ldrb	r3, [r3, #0]
    6fca:	461a      	mov	r2, r3
    6fcc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6fd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fd4:	2103      	movs	r1, #3
    6fd6:	5499      	strb	r1, [r3, r2]
    6fd8:	f24c 5349 	movw	r3, #50505	; 0xc549
    6fdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fe0:	781b      	ldrb	r3, [r3, #0]
    6fe2:	3301      	adds	r3, #1
    6fe4:	b2da      	uxtb	r2, r3
    6fe6:	f24c 5349 	movw	r3, #50505	; 0xc549
    6fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fee:	701a      	strb	r2, [r3, #0]
    6ff0:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ff8:	781b      	ldrb	r3, [r3, #0]
    6ffa:	2bff      	cmp	r3, #255	; 0xff
    6ffc:	d105      	bne.n	700a <ground_calibrate+0x1002>
    6ffe:	f24c 5349 	movw	r3, #50505	; 0xc549
    7002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7006:	2200      	movs	r2, #0
    7008:	701a      	strb	r2, [r3, #0]
    700a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    700e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7012:	2203      	movs	r2, #3
    7014:	701a      	strb	r2, [r3, #0]
    7016:	f24c 634e 	movw	r3, #50766	; 0xc64e
    701a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    701e:	2203      	movs	r2, #3
    7020:	701a      	strb	r2, [r3, #0]
    7022:	f24c 5349 	movw	r3, #50505	; 0xc549
    7026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    702a:	781b      	ldrb	r3, [r3, #0]
    702c:	461a      	mov	r2, r3
    702e:	f240 5340 	movw	r3, #1344	; 0x540
    7032:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7036:	7819      	ldrb	r1, [r3, #0]
    7038:	f24c 534c 	movw	r3, #50508	; 0xc54c
    703c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7040:	5499      	strb	r1, [r3, r2]
    7042:	f240 5340 	movw	r3, #1344	; 0x540
    7046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    704a:	781a      	ldrb	r2, [r3, #0]
    704c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7054:	781b      	ldrb	r3, [r3, #0]
    7056:	4413      	add	r3, r2
    7058:	b2da      	uxtb	r2, r3
    705a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    705e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7062:	701a      	strb	r2, [r3, #0]
    7064:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    706c:	781a      	ldrb	r2, [r3, #0]
    706e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7076:	781b      	ldrb	r3, [r3, #0]
    7078:	4413      	add	r3, r2
    707a:	b2da      	uxtb	r2, r3
    707c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7084:	701a      	strb	r2, [r3, #0]
    7086:	f24c 5349 	movw	r3, #50505	; 0xc549
    708a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    708e:	781b      	ldrb	r3, [r3, #0]
    7090:	3301      	adds	r3, #1
    7092:	b2da      	uxtb	r2, r3
    7094:	f24c 5349 	movw	r3, #50505	; 0xc549
    7098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    709c:	701a      	strb	r2, [r3, #0]
    709e:	f24c 5349 	movw	r3, #50505	; 0xc549
    70a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70a6:	781b      	ldrb	r3, [r3, #0]
    70a8:	2bff      	cmp	r3, #255	; 0xff
    70aa:	d105      	bne.n	70b8 <ground_calibrate+0x10b0>
    70ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    70b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70b4:	2200      	movs	r2, #0
    70b6:	701a      	strb	r2, [r3, #0]
    70b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    70bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70c0:	781b      	ldrb	r3, [r3, #0]
    70c2:	461a      	mov	r2, r3
    70c4:	f240 5340 	movw	r3, #1344	; 0x540
    70c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70cc:	7859      	ldrb	r1, [r3, #1]
    70ce:	f24c 534c 	movw	r3, #50508	; 0xc54c
    70d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70d6:	5499      	strb	r1, [r3, r2]
    70d8:	4b77      	ldr	r3, [pc, #476]	; (72b8 <ground_calibrate+0x12b0>)
    70da:	781a      	ldrb	r2, [r3, #0]
    70dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    70e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70e4:	781b      	ldrb	r3, [r3, #0]
    70e6:	4413      	add	r3, r2
    70e8:	b2da      	uxtb	r2, r3
    70ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    70ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70f2:	701a      	strb	r2, [r3, #0]
    70f4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    70f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70fc:	781a      	ldrb	r2, [r3, #0]
    70fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7106:	781b      	ldrb	r3, [r3, #0]
    7108:	4413      	add	r3, r2
    710a:	b2da      	uxtb	r2, r3
    710c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7114:	701a      	strb	r2, [r3, #0]
    7116:	f24c 5349 	movw	r3, #50505	; 0xc549
    711a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    711e:	781b      	ldrb	r3, [r3, #0]
    7120:	3301      	adds	r3, #1
    7122:	b2da      	uxtb	r2, r3
    7124:	f24c 5349 	movw	r3, #50505	; 0xc549
    7128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    712c:	701a      	strb	r2, [r3, #0]
    712e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7136:	781b      	ldrb	r3, [r3, #0]
    7138:	2bff      	cmp	r3, #255	; 0xff
    713a:	d105      	bne.n	7148 <ground_calibrate+0x1140>
    713c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7144:	2200      	movs	r2, #0
    7146:	701a      	strb	r2, [r3, #0]
    7148:	f24c 5349 	movw	r3, #50505	; 0xc549
    714c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7150:	781b      	ldrb	r3, [r3, #0]
    7152:	461a      	mov	r2, r3
    7154:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    715c:	7819      	ldrb	r1, [r3, #0]
    715e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7162:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7166:	5499      	strb	r1, [r3, r2]
    7168:	f24c 5349 	movw	r3, #50505	; 0xc549
    716c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7170:	781b      	ldrb	r3, [r3, #0]
    7172:	3301      	adds	r3, #1
    7174:	b2da      	uxtb	r2, r3
    7176:	f24c 5349 	movw	r3, #50505	; 0xc549
    717a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    717e:	701a      	strb	r2, [r3, #0]
    7180:	f24c 5349 	movw	r3, #50505	; 0xc549
    7184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7188:	781b      	ldrb	r3, [r3, #0]
    718a:	2bff      	cmp	r3, #255	; 0xff
    718c:	d105      	bne.n	719a <ground_calibrate+0x1192>
    718e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7196:	2200      	movs	r2, #0
    7198:	701a      	strb	r2, [r3, #0]
    719a:	f24c 5349 	movw	r3, #50505	; 0xc549
    719e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71a2:	781b      	ldrb	r3, [r3, #0]
    71a4:	461a      	mov	r2, r3
    71a6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    71aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ae:	7819      	ldrb	r1, [r3, #0]
    71b0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    71b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71b8:	5499      	strb	r1, [r3, r2]
    71ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    71be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71c2:	781b      	ldrb	r3, [r3, #0]
    71c4:	3301      	adds	r3, #1
    71c6:	b2da      	uxtb	r2, r3
    71c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    71cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71d0:	701a      	strb	r2, [r3, #0]
    71d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    71d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71da:	781b      	ldrb	r3, [r3, #0]
    71dc:	2bff      	cmp	r3, #255	; 0xff
    71de:	d105      	bne.n	71ec <ground_calibrate+0x11e4>
    71e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    71e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71e8:	2200      	movs	r2, #0
    71ea:	701a      	strb	r2, [r3, #0]
    71ec:	f242 0339 	movw	r3, #8249	; 0x2039
    71f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71f4:	781b      	ldrb	r3, [r3, #0]
    71f6:	b2db      	uxtb	r3, r3
    71f8:	f003 0310 	and.w	r3, r3, #16
    71fc:	2b00      	cmp	r3, #0
    71fe:	d15a      	bne.n	72b6 <ground_calibrate+0x12ae>
    7200:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7208:	781b      	ldrb	r3, [r3, #0]
    720a:	b2db      	uxtb	r3, r3
    720c:	461a      	mov	r2, r3
    720e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7216:	5c9a      	ldrb	r2, [r3, r2]
    7218:	f24c 634b 	movw	r3, #50763	; 0xc64b
    721c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7220:	701a      	strb	r2, [r3, #0]
    7222:	f24c 634c 	movw	r3, #50764	; 0xc64c
    7226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    722a:	2200      	movs	r2, #0
    722c:	701a      	strb	r2, [r3, #0]
    722e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7236:	781b      	ldrb	r3, [r3, #0]
    7238:	b2db      	uxtb	r3, r3
    723a:	3301      	adds	r3, #1
    723c:	b2da      	uxtb	r2, r3
    723e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7246:	701a      	strb	r2, [r3, #0]
    7248:	f24c 534a 	movw	r3, #50506	; 0xc54a
    724c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7250:	781b      	ldrb	r3, [r3, #0]
    7252:	b2db      	uxtb	r3, r3
    7254:	2bff      	cmp	r3, #255	; 0xff
    7256:	d105      	bne.n	7264 <ground_calibrate+0x125c>
    7258:	f24c 534a 	movw	r3, #50506	; 0xc54a
    725c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7260:	2200      	movs	r2, #0
    7262:	701a      	strb	r2, [r3, #0]
    7264:	f242 0338 	movw	r3, #8248	; 0x2038
    7268:	f2c2 0300 	movt	r3, #8192	; 0x2000
    726c:	f242 0238 	movw	r2, #8248	; 0x2038
    7270:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7274:	7812      	ldrb	r2, [r2, #0]
    7276:	b2d2      	uxtb	r2, r2
    7278:	f042 0201 	orr.w	r2, r2, #1
    727c:	b2d2      	uxtb	r2, r2
    727e:	701a      	strb	r2, [r3, #0]
    7280:	f242 0339 	movw	r3, #8249	; 0x2039
    7284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7288:	f242 0239 	movw	r2, #8249	; 0x2039
    728c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7290:	7812      	ldrb	r2, [r2, #0]
    7292:	b2d2      	uxtb	r2, r2
    7294:	f042 0210 	orr.w	r2, r2, #16
    7298:	b2d2      	uxtb	r2, r2
    729a:	701a      	strb	r2, [r3, #0]
    729c:	e00b      	b.n	72b6 <ground_calibrate+0x12ae>
    729e:	f24c 5348 	movw	r3, #50504	; 0xc548
    72a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72a6:	781b      	ldrb	r3, [r3, #0]
    72a8:	3301      	adds	r3, #1
    72aa:	b2da      	uxtb	r2, r3
    72ac:	f24c 5348 	movw	r3, #50504	; 0xc548
    72b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72b4:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    72b6:	bd80      	pop	{r7, pc}
    72b8:	20000541 	.word	0x20000541

000072bc <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    72bc:	b480      	push	{r7}
    72be:	b083      	sub	sp, #12
    72c0:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    72c2:	f24c 532c 	movw	r3, #50476	; 0xc52c
    72c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72ca:	781b      	ldrb	r3, [r3, #0]
    72cc:	2b03      	cmp	r3, #3
    72ce:	d10c      	bne.n	72ea <pprz_mode_update+0x2e>
    72d0:	f24c 5330 	movw	r3, #50480	; 0xc530
    72d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72d8:	781b      	ldrb	r3, [r3, #0]
    72da:	2b00      	cmp	r3, #0
    72dc:	d032      	beq.n	7344 <pprz_mode_update+0x88>
    72de:	f24c 5330 	movw	r3, #50480	; 0xc530
    72e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72e6:	2200      	movs	r2, #0
    72e8:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    72ea:	f24c 6350 	movw	r3, #50768	; 0xc650
    72ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72f2:	891b      	ldrh	r3, [r3, #8]
    72f4:	b21b      	sxth	r3, r3
    72f6:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    72fa:	dc0f      	bgt.n	731c <pprz_mode_update+0x60>
    72fc:	f24c 6350 	movw	r3, #50768	; 0xc650
    7300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7304:	891b      	ldrh	r3, [r3, #8]
    7306:	b21a      	sxth	r2, r3
    7308:	f64e 5341 	movw	r3, #60737	; 0xed41
    730c:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    7310:	429a      	cmp	r2, r3
    7312:	bfb4      	ite	lt
    7314:	2300      	movlt	r3, #0
    7316:	2301      	movge	r3, #1
    7318:	b2db      	uxtb	r3, r3
    731a:	e000      	b.n	731e <pprz_mode_update+0x62>
    731c:	2302      	movs	r3, #2
    731e:	71fb      	strb	r3, [r7, #7]
    7320:	f24c 532c 	movw	r3, #50476	; 0xc52c
    7324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7328:	781b      	ldrb	r3, [r3, #0]
    732a:	79fa      	ldrb	r2, [r7, #7]
    732c:	429a      	cmp	r2, r3
    732e:	d007      	beq.n	7340 <pprz_mode_update+0x84>
    7330:	f24c 532c 	movw	r3, #50476	; 0xc52c
    7334:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7338:	79fa      	ldrb	r2, [r7, #7]
    733a:	701a      	strb	r2, [r3, #0]
    733c:	2301      	movs	r3, #1
    733e:	e002      	b.n	7346 <pprz_mode_update+0x8a>
    7340:	2300      	movs	r3, #0
    7342:	e000      	b.n	7346 <pprz_mode_update+0x8a>
  } else
    return FALSE;
    7344:	2300      	movs	r3, #0
}
    7346:	4618      	mov	r0, r3
    7348:	370c      	adds	r7, #12
    734a:	46bd      	mov	sp, r7
    734c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7350:	4770      	bx	lr
    7352:	bf00      	nop

00007354 <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    7354:	b480      	push	{r7}
    7356:	b083      	sub	sp, #12
    7358:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    735a:	f24c 6350 	movw	r3, #50768	; 0xc650
    735e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7362:	89db      	ldrh	r3, [r3, #14]
    7364:	b21a      	sxth	r2, r3
    7366:	f640 437f 	movw	r3, #3199	; 0xc7f
    736a:	429a      	cmp	r2, r3
    736c:	bfd4      	ite	le
    736e:	2300      	movle	r3, #0
    7370:	2301      	movgt	r3, #1
    7372:	b2db      	uxtb	r3, r3
    7374:	71fb      	strb	r3, [r7, #7]
    7376:	f240 533c 	movw	r3, #1340	; 0x53c
    737a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    737e:	781b      	ldrb	r3, [r3, #0]
    7380:	79fa      	ldrb	r2, [r7, #7]
    7382:	429a      	cmp	r2, r3
    7384:	d007      	beq.n	7396 <ir_estim_mode_update+0x42>
    7386:	f240 533c 	movw	r3, #1340	; 0x53c
    738a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    738e:	79fa      	ldrb	r2, [r7, #7]
    7390:	701a      	strb	r2, [r3, #0]
    7392:	2301      	movs	r3, #1
    7394:	e000      	b.n	7398 <ir_estim_mode_update+0x44>
    7396:	2300      	movs	r3, #0
}
    7398:	4618      	mov	r0, r3
    739a:	370c      	adds	r7, #12
    739c:	46bd      	mov	sp, r7
    739e:	f85d 7b04 	ldr.w	r7, [sp], #4
    73a2:	4770      	bx	lr

000073a4 <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    73a4:	b480      	push	{r7}
    73a6:	b083      	sub	sp, #12
    73a8:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    73aa:	f24c 6350 	movw	r3, #50768	; 0xc650
    73ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73b2:	7cdb      	ldrb	r3, [r3, #19]
    73b4:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    73b6:	f24c 5333 	movw	r3, #50483	; 0xc533
    73ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73be:	781b      	ldrb	r3, [r3, #0]
    73c0:	79fa      	ldrb	r2, [r7, #7]
    73c2:	429a      	cmp	r2, r3
    73c4:	d017      	beq.n	73f6 <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    73c6:	f24c 5333 	movw	r3, #50483	; 0xc533
    73ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73ce:	781b      	ldrb	r3, [r3, #0]
    73d0:	461a      	mov	r2, r3
    73d2:	79fb      	ldrb	r3, [r7, #7]
    73d4:	4053      	eors	r3, r2
    73d6:	f003 0303 	and.w	r3, r3, #3
    73da:	2b00      	cmp	r3, #0
    73dc:	bf0c      	ite	eq
    73de:	2300      	moveq	r3, #0
    73e0:	2301      	movne	r3, #1
    73e2:	b2db      	uxtb	r3, r3
    73e4:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    73e6:	f24c 5333 	movw	r3, #50483	; 0xc533
    73ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73ee:	79fa      	ldrb	r2, [r7, #7]
    73f0:	701a      	strb	r2, [r3, #0]
    return changed;
    73f2:	79bb      	ldrb	r3, [r7, #6]
    73f4:	e000      	b.n	73f8 <mcu1_status_update+0x54>
  }
  return FALSE;
    73f6:	2300      	movs	r3, #0
}
    73f8:	4618      	mov	r0, r3
    73fa:	370c      	adds	r7, #12
    73fc:	46bd      	mov	sp, r7
    73fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7402:	4770      	bx	lr

00007404 <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    7404:	b480      	push	{r7}
    7406:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    7408:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    740c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7410:	781b      	ldrb	r3, [r3, #0]
    7412:	2b00      	cmp	r3, #0
    7414:	d12a      	bne.n	746c <events_update+0x68>
    7416:	f24c 6350 	movw	r3, #50768	; 0xc650
    741a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    741e:	895b      	ldrh	r3, [r3, #10]
    7420:	b21b      	sxth	r3, r3
    7422:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    7426:	dd21      	ble.n	746c <events_update+0x68>
    7428:	f24c 5344 	movw	r3, #50500	; 0xc544
    742c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7430:	881b      	ldrh	r3, [r3, #0]
    7432:	2b13      	cmp	r3, #19
    7434:	d819      	bhi.n	746a <events_update+0x66>
    7436:	f24c 5344 	movw	r3, #50500	; 0xc544
    743a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    743e:	881b      	ldrh	r3, [r3, #0]
    7440:	3301      	adds	r3, #1
    7442:	b29a      	uxth	r2, r3
    7444:	f24c 5344 	movw	r3, #50500	; 0xc544
    7448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    744c:	801a      	strh	r2, [r3, #0]
    744e:	f24c 5344 	movw	r3, #50500	; 0xc544
    7452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7456:	881b      	ldrh	r3, [r3, #0]
    7458:	2b14      	cmp	r3, #20
    745a:	d106      	bne.n	746a <events_update+0x66>
    745c:	f24c 5330 	movw	r3, #50480	; 0xc530
    7460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7464:	2201      	movs	r2, #1
    7466:	701a      	strb	r2, [r3, #0]
    7468:	e00c      	b.n	7484 <events_update+0x80>
    746a:	e00b      	b.n	7484 <events_update+0x80>
    746c:	f24c 5344 	movw	r3, #50500	; 0xc544
    7470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7474:	2200      	movs	r2, #0
    7476:	801a      	strh	r2, [r3, #0]
    7478:	f24c 5330 	movw	r3, #50480	; 0xc530
    747c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7480:	2200      	movs	r2, #0
    7482:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    7484:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    7488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    748c:	781b      	ldrb	r3, [r3, #0]
    748e:	2b00      	cmp	r3, #0
    7490:	d12a      	bne.n	74e8 <events_update+0xe4>
    7492:	f24c 6350 	movw	r3, #50768	; 0xc650
    7496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    749a:	895b      	ldrh	r3, [r3, #10]
    749c:	b21b      	sxth	r3, r3
    749e:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    74a2:	da21      	bge.n	74e8 <events_update+0xe4>
    74a4:	f24c 5346 	movw	r3, #50502	; 0xc546
    74a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74ac:	881b      	ldrh	r3, [r3, #0]
    74ae:	2b13      	cmp	r3, #19
    74b0:	d819      	bhi.n	74e6 <events_update+0xe2>
    74b2:	f24c 5346 	movw	r3, #50502	; 0xc546
    74b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74ba:	881b      	ldrh	r3, [r3, #0]
    74bc:	3301      	adds	r3, #1
    74be:	b29a      	uxth	r2, r3
    74c0:	f24c 5346 	movw	r3, #50502	; 0xc546
    74c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74c8:	801a      	strh	r2, [r3, #0]
    74ca:	f24c 5346 	movw	r3, #50502	; 0xc546
    74ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74d2:	881b      	ldrh	r3, [r3, #0]
    74d4:	2b14      	cmp	r3, #20
    74d6:	d106      	bne.n	74e6 <events_update+0xe2>
    74d8:	f24c 5331 	movw	r3, #50481	; 0xc531
    74dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74e0:	2201      	movs	r2, #1
    74e2:	701a      	strb	r2, [r3, #0]
    74e4:	e00c      	b.n	7500 <events_update+0xfc>
    74e6:	e00b      	b.n	7500 <events_update+0xfc>
    74e8:	f24c 5346 	movw	r3, #50502	; 0xc546
    74ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74f0:	2200      	movs	r2, #0
    74f2:	801a      	strh	r2, [r3, #0]
    74f4:	f24c 5331 	movw	r3, #50481	; 0xc531
    74f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74fc:	2200      	movs	r2, #0
    74fe:	701a      	strb	r2, [r3, #0]
}  
    7500:	46bd      	mov	sp, r7
    7502:	f85d 7b04 	ldr.w	r7, [sp], #4
    7506:	4770      	bx	lr

00007508 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    7508:	b480      	push	{r7}
    750a:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    750c:	f24c 6350 	movw	r3, #50768	; 0xc650
    7510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7514:	88da      	ldrh	r2, [r3, #6]
    7516:	f24c 6368 	movw	r3, #50792	; 0xc668
    751a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    751e:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    7520:	f24c 6368 	movw	r3, #50792	; 0xc668
    7524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7528:	2200      	movs	r2, #0
    752a:	74da      	strb	r2, [r3, #19]
}
    752c:	46bd      	mov	sp, r7
    752e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7532:	4770      	bx	lr

00007534 <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    7534:	b480      	push	{r7}
    7536:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  if (boot) 
    7538:	f240 533d 	movw	r3, #1341	; 0x53d
    753c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7540:	781b      	ldrb	r3, [r3, #0]
    7542:	2b00      	cmp	r3, #0
    7544:	f000 87c6 	beq.w	84d4 <send_boot+0xfa0>
  {
      DOWNLINK_SEND_BOOT(&version);
    7548:	f24c 5349 	movw	r3, #50505	; 0xc549
    754c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7550:	781a      	ldrb	r2, [r3, #0]
    7552:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    755a:	781b      	ldrb	r3, [r3, #0]
    755c:	b2db      	uxtb	r3, r3
    755e:	429a      	cmp	r2, r3
    7560:	d313      	bcc.n	758a <send_boot+0x56>
    7562:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    756a:	781b      	ldrb	r3, [r3, #0]
    756c:	b2db      	uxtb	r3, r3
    756e:	461a      	mov	r2, r3
    7570:	f24c 5349 	movw	r3, #50505	; 0xc549
    7574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7578:	781b      	ldrb	r3, [r3, #0]
    757a:	1ad3      	subs	r3, r2, r3
    757c:	33ff      	adds	r3, #255	; 0xff
    757e:	2b06      	cmp	r3, #6
    7580:	bfd4      	ite	le
    7582:	2300      	movle	r3, #0
    7584:	2301      	movgt	r3, #1
    7586:	b2db      	uxtb	r3, r3
    7588:	e011      	b.n	75ae <send_boot+0x7a>
    758a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    758e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7592:	781b      	ldrb	r3, [r3, #0]
    7594:	b2db      	uxtb	r3, r3
    7596:	461a      	mov	r2, r3
    7598:	f24c 5349 	movw	r3, #50505	; 0xc549
    759c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75a0:	781b      	ldrb	r3, [r3, #0]
    75a2:	1ad3      	subs	r3, r2, r3
    75a4:	2b06      	cmp	r3, #6
    75a6:	bfd4      	ite	le
    75a8:	2300      	movle	r3, #0
    75aa:	2301      	movgt	r3, #1
    75ac:	b2db      	uxtb	r3, r3
    75ae:	2b00      	cmp	r3, #0
    75b0:	f000 8194 	beq.w	78dc <send_boot+0x3a8>
    75b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    75b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75bc:	781b      	ldrb	r3, [r3, #0]
    75be:	461a      	mov	r2, r3
    75c0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    75c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75c8:	2105      	movs	r1, #5
    75ca:	5499      	strb	r1, [r3, r2]
    75cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    75d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75d4:	781b      	ldrb	r3, [r3, #0]
    75d6:	3301      	adds	r3, #1
    75d8:	b2da      	uxtb	r2, r3
    75da:	f24c 5349 	movw	r3, #50505	; 0xc549
    75de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75e2:	701a      	strb	r2, [r3, #0]
    75e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    75e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75ec:	781b      	ldrb	r3, [r3, #0]
    75ee:	2bff      	cmp	r3, #255	; 0xff
    75f0:	d105      	bne.n	75fe <send_boot+0xca>
    75f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    75f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75fa:	2200      	movs	r2, #0
    75fc:	701a      	strb	r2, [r3, #0]
    75fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    7602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7606:	781b      	ldrb	r3, [r3, #0]
    7608:	461a      	mov	r2, r3
    760a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    760e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7612:	2101      	movs	r1, #1
    7614:	5499      	strb	r1, [r3, r2]
    7616:	f24c 5349 	movw	r3, #50505	; 0xc549
    761a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    761e:	781b      	ldrb	r3, [r3, #0]
    7620:	3301      	adds	r3, #1
    7622:	b2da      	uxtb	r2, r3
    7624:	f24c 5349 	movw	r3, #50505	; 0xc549
    7628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    762c:	701a      	strb	r2, [r3, #0]
    762e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7636:	781b      	ldrb	r3, [r3, #0]
    7638:	2bff      	cmp	r3, #255	; 0xff
    763a:	d105      	bne.n	7648 <send_boot+0x114>
    763c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7644:	2200      	movs	r2, #0
    7646:	701a      	strb	r2, [r3, #0]
    7648:	f24c 634d 	movw	r3, #50765	; 0xc64d
    764c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7650:	2201      	movs	r2, #1
    7652:	701a      	strb	r2, [r3, #0]
    7654:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    765c:	2201      	movs	r2, #1
    765e:	701a      	strb	r2, [r3, #0]
    7660:	f24c 5349 	movw	r3, #50505	; 0xc549
    7664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7668:	781b      	ldrb	r3, [r3, #0]
    766a:	461a      	mov	r2, r3
    766c:	f648 23ca 	movw	r3, #35530	; 0x8aca
    7670:	f2c0 0301 	movt	r3, #1
    7674:	7819      	ldrb	r1, [r3, #0]
    7676:	f24c 534c 	movw	r3, #50508	; 0xc54c
    767a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    767e:	5499      	strb	r1, [r3, r2]
    7680:	f648 23ca 	movw	r3, #35530	; 0x8aca
    7684:	f2c0 0301 	movt	r3, #1
    7688:	781a      	ldrb	r2, [r3, #0]
    768a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    768e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7692:	781b      	ldrb	r3, [r3, #0]
    7694:	4413      	add	r3, r2
    7696:	b2da      	uxtb	r2, r3
    7698:	f24c 634d 	movw	r3, #50765	; 0xc64d
    769c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76a0:	701a      	strb	r2, [r3, #0]
    76a2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    76a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76aa:	781a      	ldrb	r2, [r3, #0]
    76ac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    76b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76b4:	781b      	ldrb	r3, [r3, #0]
    76b6:	4413      	add	r3, r2
    76b8:	b2da      	uxtb	r2, r3
    76ba:	f24c 634e 	movw	r3, #50766	; 0xc64e
    76be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76c2:	701a      	strb	r2, [r3, #0]
    76c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    76c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76cc:	781b      	ldrb	r3, [r3, #0]
    76ce:	3301      	adds	r3, #1
    76d0:	b2da      	uxtb	r2, r3
    76d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    76d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76da:	701a      	strb	r2, [r3, #0]
    76dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    76e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76e4:	781b      	ldrb	r3, [r3, #0]
    76e6:	2bff      	cmp	r3, #255	; 0xff
    76e8:	d105      	bne.n	76f6 <send_boot+0x1c2>
    76ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    76ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76f2:	2200      	movs	r2, #0
    76f4:	701a      	strb	r2, [r3, #0]
    76f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    76fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76fe:	781b      	ldrb	r3, [r3, #0]
    7700:	461a      	mov	r2, r3
    7702:	f648 23ca 	movw	r3, #35530	; 0x8aca
    7706:	f2c0 0301 	movt	r3, #1
    770a:	7859      	ldrb	r1, [r3, #1]
    770c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7714:	5499      	strb	r1, [r3, r2]
    7716:	4b88      	ldr	r3, [pc, #544]	; (7938 <send_boot+0x404>)
    7718:	781a      	ldrb	r2, [r3, #0]
    771a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    771e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7722:	781b      	ldrb	r3, [r3, #0]
    7724:	4413      	add	r3, r2
    7726:	b2da      	uxtb	r2, r3
    7728:	f24c 634d 	movw	r3, #50765	; 0xc64d
    772c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7730:	701a      	strb	r2, [r3, #0]
    7732:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    773a:	781a      	ldrb	r2, [r3, #0]
    773c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7744:	781b      	ldrb	r3, [r3, #0]
    7746:	4413      	add	r3, r2
    7748:	b2da      	uxtb	r2, r3
    774a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    774e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7752:	701a      	strb	r2, [r3, #0]
    7754:	f24c 5349 	movw	r3, #50505	; 0xc549
    7758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    775c:	781b      	ldrb	r3, [r3, #0]
    775e:	3301      	adds	r3, #1
    7760:	b2da      	uxtb	r2, r3
    7762:	f24c 5349 	movw	r3, #50505	; 0xc549
    7766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    776a:	701a      	strb	r2, [r3, #0]
    776c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7774:	781b      	ldrb	r3, [r3, #0]
    7776:	2bff      	cmp	r3, #255	; 0xff
    7778:	d105      	bne.n	7786 <send_boot+0x252>
    777a:	f24c 5349 	movw	r3, #50505	; 0xc549
    777e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7782:	2200      	movs	r2, #0
    7784:	701a      	strb	r2, [r3, #0]
    7786:	f24c 5349 	movw	r3, #50505	; 0xc549
    778a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    778e:	781b      	ldrb	r3, [r3, #0]
    7790:	461a      	mov	r2, r3
    7792:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    779a:	7819      	ldrb	r1, [r3, #0]
    779c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    77a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77a4:	5499      	strb	r1, [r3, r2]
    77a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    77aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ae:	781b      	ldrb	r3, [r3, #0]
    77b0:	3301      	adds	r3, #1
    77b2:	b2da      	uxtb	r2, r3
    77b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    77b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77bc:	701a      	strb	r2, [r3, #0]
    77be:	f24c 5349 	movw	r3, #50505	; 0xc549
    77c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77c6:	781b      	ldrb	r3, [r3, #0]
    77c8:	2bff      	cmp	r3, #255	; 0xff
    77ca:	d105      	bne.n	77d8 <send_boot+0x2a4>
    77cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    77d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77d4:	2200      	movs	r2, #0
    77d6:	701a      	strb	r2, [r3, #0]
    77d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    77dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77e0:	781b      	ldrb	r3, [r3, #0]
    77e2:	461a      	mov	r2, r3
    77e4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    77e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ec:	7819      	ldrb	r1, [r3, #0]
    77ee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    77f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77f6:	5499      	strb	r1, [r3, r2]
    77f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    77fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7800:	781b      	ldrb	r3, [r3, #0]
    7802:	3301      	adds	r3, #1
    7804:	b2da      	uxtb	r2, r3
    7806:	f24c 5349 	movw	r3, #50505	; 0xc549
    780a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    780e:	701a      	strb	r2, [r3, #0]
    7810:	f24c 5349 	movw	r3, #50505	; 0xc549
    7814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7818:	781b      	ldrb	r3, [r3, #0]
    781a:	2bff      	cmp	r3, #255	; 0xff
    781c:	d105      	bne.n	782a <send_boot+0x2f6>
    781e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7826:	2200      	movs	r2, #0
    7828:	701a      	strb	r2, [r3, #0]
    782a:	f242 0339 	movw	r3, #8249	; 0x2039
    782e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7832:	781b      	ldrb	r3, [r3, #0]
    7834:	b2db      	uxtb	r3, r3
    7836:	f003 0310 	and.w	r3, r3, #16
    783a:	2b00      	cmp	r3, #0
    783c:	d15a      	bne.n	78f4 <send_boot+0x3c0>
    783e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7846:	781b      	ldrb	r3, [r3, #0]
    7848:	b2db      	uxtb	r3, r3
    784a:	461a      	mov	r2, r3
    784c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7854:	5c9a      	ldrb	r2, [r3, r2]
    7856:	f24c 634b 	movw	r3, #50763	; 0xc64b
    785a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    785e:	701a      	strb	r2, [r3, #0]
    7860:	f24c 634c 	movw	r3, #50764	; 0xc64c
    7864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7868:	2200      	movs	r2, #0
    786a:	701a      	strb	r2, [r3, #0]
    786c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7874:	781b      	ldrb	r3, [r3, #0]
    7876:	b2db      	uxtb	r3, r3
    7878:	3301      	adds	r3, #1
    787a:	b2da      	uxtb	r2, r3
    787c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7884:	701a      	strb	r2, [r3, #0]
    7886:	f24c 534a 	movw	r3, #50506	; 0xc54a
    788a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    788e:	781b      	ldrb	r3, [r3, #0]
    7890:	b2db      	uxtb	r3, r3
    7892:	2bff      	cmp	r3, #255	; 0xff
    7894:	d105      	bne.n	78a2 <send_boot+0x36e>
    7896:	f24c 534a 	movw	r3, #50506	; 0xc54a
    789a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    789e:	2200      	movs	r2, #0
    78a0:	701a      	strb	r2, [r3, #0]
    78a2:	f242 0338 	movw	r3, #8248	; 0x2038
    78a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78aa:	f242 0238 	movw	r2, #8248	; 0x2038
    78ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
    78b2:	7812      	ldrb	r2, [r2, #0]
    78b4:	b2d2      	uxtb	r2, r2
    78b6:	f042 0201 	orr.w	r2, r2, #1
    78ba:	b2d2      	uxtb	r2, r2
    78bc:	701a      	strb	r2, [r3, #0]
    78be:	f242 0339 	movw	r3, #8249	; 0x2039
    78c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78c6:	f242 0239 	movw	r2, #8249	; 0x2039
    78ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    78ce:	7812      	ldrb	r2, [r2, #0]
    78d0:	b2d2      	uxtb	r2, r2
    78d2:	f042 0210 	orr.w	r2, r2, #16
    78d6:	b2d2      	uxtb	r2, r2
    78d8:	701a      	strb	r2, [r3, #0]
    78da:	e00b      	b.n	78f4 <send_boot+0x3c0>
    78dc:	f24c 5348 	movw	r3, #50504	; 0xc548
    78e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78e4:	781b      	ldrb	r3, [r3, #0]
    78e6:	3301      	adds	r3, #1
    78e8:	b2da      	uxtb	r2, r3
    78ea:	f24c 5348 	movw	r3, #50504	; 0xc548
    78ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78f2:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    78f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    78f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78fc:	781a      	ldrb	r2, [r3, #0]
    78fe:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7906:	781b      	ldrb	r3, [r3, #0]
    7908:	b2db      	uxtb	r3, r3
    790a:	429a      	cmp	r2, r3
    790c:	d316      	bcc.n	793c <send_boot+0x408>
    790e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7916:	781b      	ldrb	r3, [r3, #0]
    7918:	b2db      	uxtb	r3, r3
    791a:	461a      	mov	r2, r3
    791c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7924:	781b      	ldrb	r3, [r3, #0]
    7926:	1ad3      	subs	r3, r2, r3
    7928:	33ff      	adds	r3, #255	; 0xff
    792a:	2b14      	cmp	r3, #20
    792c:	bfd4      	ite	le
    792e:	2300      	movle	r3, #0
    7930:	2301      	movgt	r3, #1
    7932:	b2db      	uxtb	r3, r3
    7934:	e014      	b.n	7960 <send_boot+0x42c>
    7936:	bf00      	nop
    7938:	00018acb 	.word	0x00018acb
    793c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7944:	781b      	ldrb	r3, [r3, #0]
    7946:	b2db      	uxtb	r3, r3
    7948:	461a      	mov	r2, r3
    794a:	f24c 5349 	movw	r3, #50505	; 0xc549
    794e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7952:	781b      	ldrb	r3, [r3, #0]
    7954:	1ad3      	subs	r3, r2, r3
    7956:	2b14      	cmp	r3, #20
    7958:	bfd4      	ite	le
    795a:	2300      	movle	r3, #0
    795c:	2301      	movgt	r3, #1
    795e:	b2db      	uxtb	r3, r3
    7960:	2b00      	cmp	r3, #0
    7962:	f000 85a5 	beq.w	84b0 <send_boot+0xf7c>
    7966:	f24c 5349 	movw	r3, #50505	; 0xc549
    796a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    796e:	781b      	ldrb	r3, [r3, #0]
    7970:	461a      	mov	r2, r3
    7972:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    797a:	2105      	movs	r1, #5
    797c:	5499      	strb	r1, [r3, r2]
    797e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7986:	781b      	ldrb	r3, [r3, #0]
    7988:	3301      	adds	r3, #1
    798a:	b2da      	uxtb	r2, r3
    798c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7994:	701a      	strb	r2, [r3, #0]
    7996:	f24c 5349 	movw	r3, #50505	; 0xc549
    799a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    799e:	781b      	ldrb	r3, [r3, #0]
    79a0:	2bff      	cmp	r3, #255	; 0xff
    79a2:	d105      	bne.n	79b0 <send_boot+0x47c>
    79a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    79a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ac:	2200      	movs	r2, #0
    79ae:	701a      	strb	r2, [r3, #0]
    79b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    79b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79b8:	781b      	ldrb	r3, [r3, #0]
    79ba:	461a      	mov	r2, r3
    79bc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    79c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79c4:	2105      	movs	r1, #5
    79c6:	5499      	strb	r1, [r3, r2]
    79c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    79cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79d0:	781b      	ldrb	r3, [r3, #0]
    79d2:	3301      	adds	r3, #1
    79d4:	b2da      	uxtb	r2, r3
    79d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    79da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79de:	701a      	strb	r2, [r3, #0]
    79e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    79e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79e8:	781b      	ldrb	r3, [r3, #0]
    79ea:	2bff      	cmp	r3, #255	; 0xff
    79ec:	d105      	bne.n	79fa <send_boot+0x4c6>
    79ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    79f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79f6:	2200      	movs	r2, #0
    79f8:	701a      	strb	r2, [r3, #0]
    79fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    79fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a02:	2205      	movs	r2, #5
    7a04:	701a      	strb	r2, [r3, #0]
    7a06:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a0e:	2205      	movs	r2, #5
    7a10:	701a      	strb	r2, [r3, #0]
    7a12:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a1a:	781b      	ldrb	r3, [r3, #0]
    7a1c:	461a      	mov	r2, r3
    7a1e:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a26:	7819      	ldrb	r1, [r3, #0]
    7a28:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a30:	5499      	strb	r1, [r3, r2]
    7a32:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a3a:	781a      	ldrb	r2, [r3, #0]
    7a3c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a44:	781b      	ldrb	r3, [r3, #0]
    7a46:	4413      	add	r3, r2
    7a48:	b2da      	uxtb	r2, r3
    7a4a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a52:	701a      	strb	r2, [r3, #0]
    7a54:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a5c:	781a      	ldrb	r2, [r3, #0]
    7a5e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a66:	781b      	ldrb	r3, [r3, #0]
    7a68:	4413      	add	r3, r2
    7a6a:	b2da      	uxtb	r2, r3
    7a6c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a74:	701a      	strb	r2, [r3, #0]
    7a76:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a7e:	781b      	ldrb	r3, [r3, #0]
    7a80:	3301      	adds	r3, #1
    7a82:	b2da      	uxtb	r2, r3
    7a84:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a8c:	701a      	strb	r2, [r3, #0]
    7a8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a96:	781b      	ldrb	r3, [r3, #0]
    7a98:	2bff      	cmp	r3, #255	; 0xff
    7a9a:	d105      	bne.n	7aa8 <send_boot+0x574>
    7a9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7aa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aa4:	2200      	movs	r2, #0
    7aa6:	701a      	strb	r2, [r3, #0]
    7aa8:	f24c 5349 	movw	r3, #50505	; 0xc549
    7aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ab0:	781b      	ldrb	r3, [r3, #0]
    7ab2:	461a      	mov	r2, r3
    7ab4:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7abc:	7859      	ldrb	r1, [r3, #1]
    7abe:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ac6:	5499      	strb	r1, [r3, r2]
    7ac8:	4bd1      	ldr	r3, [pc, #836]	; (7e10 <send_boot+0x8dc>)
    7aca:	781a      	ldrb	r2, [r3, #0]
    7acc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ad4:	781b      	ldrb	r3, [r3, #0]
    7ad6:	4413      	add	r3, r2
    7ad8:	b2da      	uxtb	r2, r3
    7ada:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ae2:	701a      	strb	r2, [r3, #0]
    7ae4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aec:	781a      	ldrb	r2, [r3, #0]
    7aee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7af6:	781b      	ldrb	r3, [r3, #0]
    7af8:	4413      	add	r3, r2
    7afa:	b2da      	uxtb	r2, r3
    7afc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b04:	701a      	strb	r2, [r3, #0]
    7b06:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b0e:	781b      	ldrb	r3, [r3, #0]
    7b10:	3301      	adds	r3, #1
    7b12:	b2da      	uxtb	r2, r3
    7b14:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b1c:	701a      	strb	r2, [r3, #0]
    7b1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b26:	781b      	ldrb	r3, [r3, #0]
    7b28:	2bff      	cmp	r3, #255	; 0xff
    7b2a:	d105      	bne.n	7b38 <send_boot+0x604>
    7b2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b34:	2200      	movs	r2, #0
    7b36:	701a      	strb	r2, [r3, #0]
    7b38:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b40:	781b      	ldrb	r3, [r3, #0]
    7b42:	461a      	mov	r2, r3
    7b44:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b4c:	7899      	ldrb	r1, [r3, #2]
    7b4e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b56:	5499      	strb	r1, [r3, r2]
    7b58:	4bae      	ldr	r3, [pc, #696]	; (7e14 <send_boot+0x8e0>)
    7b5a:	781a      	ldrb	r2, [r3, #0]
    7b5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b64:	781b      	ldrb	r3, [r3, #0]
    7b66:	4413      	add	r3, r2
    7b68:	b2da      	uxtb	r2, r3
    7b6a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b72:	701a      	strb	r2, [r3, #0]
    7b74:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b7c:	781a      	ldrb	r2, [r3, #0]
    7b7e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b86:	781b      	ldrb	r3, [r3, #0]
    7b88:	4413      	add	r3, r2
    7b8a:	b2da      	uxtb	r2, r3
    7b8c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b94:	701a      	strb	r2, [r3, #0]
    7b96:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b9e:	781b      	ldrb	r3, [r3, #0]
    7ba0:	3301      	adds	r3, #1
    7ba2:	b2da      	uxtb	r2, r3
    7ba4:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bac:	701a      	strb	r2, [r3, #0]
    7bae:	f24c 5349 	movw	r3, #50505	; 0xc549
    7bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bb6:	781b      	ldrb	r3, [r3, #0]
    7bb8:	2bff      	cmp	r3, #255	; 0xff
    7bba:	d105      	bne.n	7bc8 <send_boot+0x694>
    7bbc:	f24c 5349 	movw	r3, #50505	; 0xc549
    7bc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bc4:	2200      	movs	r2, #0
    7bc6:	701a      	strb	r2, [r3, #0]
    7bc8:	f24c 5349 	movw	r3, #50505	; 0xc549
    7bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bd0:	781b      	ldrb	r3, [r3, #0]
    7bd2:	461a      	mov	r2, r3
    7bd4:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bdc:	78d9      	ldrb	r1, [r3, #3]
    7bde:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7be6:	5499      	strb	r1, [r3, r2]
    7be8:	4b8b      	ldr	r3, [pc, #556]	; (7e18 <send_boot+0x8e4>)
    7bea:	781a      	ldrb	r2, [r3, #0]
    7bec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7bf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bf4:	781b      	ldrb	r3, [r3, #0]
    7bf6:	4413      	add	r3, r2
    7bf8:	b2da      	uxtb	r2, r3
    7bfa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7bfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c02:	701a      	strb	r2, [r3, #0]
    7c04:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c0c:	781a      	ldrb	r2, [r3, #0]
    7c0e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c16:	781b      	ldrb	r3, [r3, #0]
    7c18:	4413      	add	r3, r2
    7c1a:	b2da      	uxtb	r2, r3
    7c1c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c24:	701a      	strb	r2, [r3, #0]
    7c26:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c2e:	781b      	ldrb	r3, [r3, #0]
    7c30:	3301      	adds	r3, #1
    7c32:	b2da      	uxtb	r2, r3
    7c34:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c3c:	701a      	strb	r2, [r3, #0]
    7c3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c46:	781b      	ldrb	r3, [r3, #0]
    7c48:	2bff      	cmp	r3, #255	; 0xff
    7c4a:	d105      	bne.n	7c58 <send_boot+0x724>
    7c4c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c54:	2200      	movs	r2, #0
    7c56:	701a      	strb	r2, [r3, #0]
    7c58:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c60:	781b      	ldrb	r3, [r3, #0]
    7c62:	461a      	mov	r2, r3
    7c64:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7c68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c6c:	7819      	ldrb	r1, [r3, #0]
    7c6e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c76:	5499      	strb	r1, [r3, r2]
    7c78:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c80:	781a      	ldrb	r2, [r3, #0]
    7c82:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c8a:	781b      	ldrb	r3, [r3, #0]
    7c8c:	4413      	add	r3, r2
    7c8e:	b2da      	uxtb	r2, r3
    7c90:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c98:	701a      	strb	r2, [r3, #0]
    7c9a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ca2:	781a      	ldrb	r2, [r3, #0]
    7ca4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cac:	781b      	ldrb	r3, [r3, #0]
    7cae:	4413      	add	r3, r2
    7cb0:	b2da      	uxtb	r2, r3
    7cb2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7cb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cba:	701a      	strb	r2, [r3, #0]
    7cbc:	f24c 5349 	movw	r3, #50505	; 0xc549
    7cc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cc4:	781b      	ldrb	r3, [r3, #0]
    7cc6:	3301      	adds	r3, #1
    7cc8:	b2da      	uxtb	r2, r3
    7cca:	f24c 5349 	movw	r3, #50505	; 0xc549
    7cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cd2:	701a      	strb	r2, [r3, #0]
    7cd4:	f24c 5349 	movw	r3, #50505	; 0xc549
    7cd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cdc:	781b      	ldrb	r3, [r3, #0]
    7cde:	2bff      	cmp	r3, #255	; 0xff
    7ce0:	d105      	bne.n	7cee <send_boot+0x7ba>
    7ce2:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ce6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cea:	2200      	movs	r2, #0
    7cec:	701a      	strb	r2, [r3, #0]
    7cee:	f24c 5349 	movw	r3, #50505	; 0xc549
    7cf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cf6:	781b      	ldrb	r3, [r3, #0]
    7cf8:	461a      	mov	r2, r3
    7cfa:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7cfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d02:	7859      	ldrb	r1, [r3, #1]
    7d04:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7d08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d0c:	5499      	strb	r1, [r3, r2]
    7d0e:	4b43      	ldr	r3, [pc, #268]	; (7e1c <send_boot+0x8e8>)
    7d10:	781a      	ldrb	r2, [r3, #0]
    7d12:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d1a:	781b      	ldrb	r3, [r3, #0]
    7d1c:	4413      	add	r3, r2
    7d1e:	b2da      	uxtb	r2, r3
    7d20:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d28:	701a      	strb	r2, [r3, #0]
    7d2a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d32:	781a      	ldrb	r2, [r3, #0]
    7d34:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d3c:	781b      	ldrb	r3, [r3, #0]
    7d3e:	4413      	add	r3, r2
    7d40:	b2da      	uxtb	r2, r3
    7d42:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d4a:	701a      	strb	r2, [r3, #0]
    7d4c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d54:	781b      	ldrb	r3, [r3, #0]
    7d56:	3301      	adds	r3, #1
    7d58:	b2da      	uxtb	r2, r3
    7d5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d62:	701a      	strb	r2, [r3, #0]
    7d64:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d6c:	781b      	ldrb	r3, [r3, #0]
    7d6e:	2bff      	cmp	r3, #255	; 0xff
    7d70:	d105      	bne.n	7d7e <send_boot+0x84a>
    7d72:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d7a:	2200      	movs	r2, #0
    7d7c:	701a      	strb	r2, [r3, #0]
    7d7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d86:	781b      	ldrb	r3, [r3, #0]
    7d88:	461a      	mov	r2, r3
    7d8a:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7d8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d92:	7899      	ldrb	r1, [r3, #2]
    7d94:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7d98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d9c:	5499      	strb	r1, [r3, r2]
    7d9e:	4b20      	ldr	r3, [pc, #128]	; (7e20 <send_boot+0x8ec>)
    7da0:	781a      	ldrb	r2, [r3, #0]
    7da2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7daa:	781b      	ldrb	r3, [r3, #0]
    7dac:	4413      	add	r3, r2
    7dae:	b2da      	uxtb	r2, r3
    7db0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7db8:	701a      	strb	r2, [r3, #0]
    7dba:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dc2:	781a      	ldrb	r2, [r3, #0]
    7dc4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dcc:	781b      	ldrb	r3, [r3, #0]
    7dce:	4413      	add	r3, r2
    7dd0:	b2da      	uxtb	r2, r3
    7dd2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7dd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dda:	701a      	strb	r2, [r3, #0]
    7ddc:	f24c 5349 	movw	r3, #50505	; 0xc549
    7de0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7de4:	781b      	ldrb	r3, [r3, #0]
    7de6:	3301      	adds	r3, #1
    7de8:	b2da      	uxtb	r2, r3
    7dea:	f24c 5349 	movw	r3, #50505	; 0xc549
    7dee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7df2:	701a      	strb	r2, [r3, #0]
    7df4:	f24c 5349 	movw	r3, #50505	; 0xc549
    7df8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dfc:	781b      	ldrb	r3, [r3, #0]
    7dfe:	2bff      	cmp	r3, #255	; 0xff
    7e00:	d110      	bne.n	7e24 <send_boot+0x8f0>
    7e02:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e0a:	2200      	movs	r2, #0
    7e0c:	701a      	strb	r2, [r3, #0]
    7e0e:	e009      	b.n	7e24 <send_boot+0x8f0>
    7e10:	2004cb41 	.word	0x2004cb41
    7e14:	2004cb42 	.word	0x2004cb42
    7e18:	2004cb43 	.word	0x2004cb43
    7e1c:	2004cb45 	.word	0x2004cb45
    7e20:	2004cb46 	.word	0x2004cb46
    7e24:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e2c:	781b      	ldrb	r3, [r3, #0]
    7e2e:	461a      	mov	r2, r3
    7e30:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7e34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e38:	78d9      	ldrb	r1, [r3, #3]
    7e3a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7e3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e42:	5499      	strb	r1, [r3, r2]
    7e44:	4bd3      	ldr	r3, [pc, #844]	; (8194 <send_boot+0xc60>)
    7e46:	781a      	ldrb	r2, [r3, #0]
    7e48:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e50:	781b      	ldrb	r3, [r3, #0]
    7e52:	4413      	add	r3, r2
    7e54:	b2da      	uxtb	r2, r3
    7e56:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e5e:	701a      	strb	r2, [r3, #0]
    7e60:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e68:	781a      	ldrb	r2, [r3, #0]
    7e6a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e72:	781b      	ldrb	r3, [r3, #0]
    7e74:	4413      	add	r3, r2
    7e76:	b2da      	uxtb	r2, r3
    7e78:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e80:	701a      	strb	r2, [r3, #0]
    7e82:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e8a:	781b      	ldrb	r3, [r3, #0]
    7e8c:	3301      	adds	r3, #1
    7e8e:	b2da      	uxtb	r2, r3
    7e90:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e98:	701a      	strb	r2, [r3, #0]
    7e9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ea2:	781b      	ldrb	r3, [r3, #0]
    7ea4:	2bff      	cmp	r3, #255	; 0xff
    7ea6:	d105      	bne.n	7eb4 <send_boot+0x980>
    7ea8:	f24c 5349 	movw	r3, #50505	; 0xc549
    7eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eb0:	2200      	movs	r2, #0
    7eb2:	701a      	strb	r2, [r3, #0]
    7eb4:	f24c 5349 	movw	r3, #50505	; 0xc549
    7eb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ebc:	781b      	ldrb	r3, [r3, #0]
    7ebe:	461a      	mov	r2, r3
    7ec0:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7ec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ec8:	7819      	ldrb	r1, [r3, #0]
    7eca:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ed2:	5499      	strb	r1, [r3, r2]
    7ed4:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7ed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7edc:	781a      	ldrb	r2, [r3, #0]
    7ede:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ee6:	781b      	ldrb	r3, [r3, #0]
    7ee8:	4413      	add	r3, r2
    7eea:	b2da      	uxtb	r2, r3
    7eec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ef4:	701a      	strb	r2, [r3, #0]
    7ef6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7efe:	781a      	ldrb	r2, [r3, #0]
    7f00:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f08:	781b      	ldrb	r3, [r3, #0]
    7f0a:	4413      	add	r3, r2
    7f0c:	b2da      	uxtb	r2, r3
    7f0e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7f12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f16:	701a      	strb	r2, [r3, #0]
    7f18:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f20:	781b      	ldrb	r3, [r3, #0]
    7f22:	3301      	adds	r3, #1
    7f24:	b2da      	uxtb	r2, r3
    7f26:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f2e:	701a      	strb	r2, [r3, #0]
    7f30:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f38:	781b      	ldrb	r3, [r3, #0]
    7f3a:	2bff      	cmp	r3, #255	; 0xff
    7f3c:	d105      	bne.n	7f4a <send_boot+0xa16>
    7f3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f46:	2200      	movs	r2, #0
    7f48:	701a      	strb	r2, [r3, #0]
    7f4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f52:	781b      	ldrb	r3, [r3, #0]
    7f54:	461a      	mov	r2, r3
    7f56:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7f5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f5e:	7859      	ldrb	r1, [r3, #1]
    7f60:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7f64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f68:	5499      	strb	r1, [r3, r2]
    7f6a:	4b8b      	ldr	r3, [pc, #556]	; (8198 <send_boot+0xc64>)
    7f6c:	781a      	ldrb	r2, [r3, #0]
    7f6e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f76:	781b      	ldrb	r3, [r3, #0]
    7f78:	4413      	add	r3, r2
    7f7a:	b2da      	uxtb	r2, r3
    7f7c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f84:	701a      	strb	r2, [r3, #0]
    7f86:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f8e:	781a      	ldrb	r2, [r3, #0]
    7f90:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f98:	781b      	ldrb	r3, [r3, #0]
    7f9a:	4413      	add	r3, r2
    7f9c:	b2da      	uxtb	r2, r3
    7f9e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fa6:	701a      	strb	r2, [r3, #0]
    7fa8:	f24c 5349 	movw	r3, #50505	; 0xc549
    7fac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fb0:	781b      	ldrb	r3, [r3, #0]
    7fb2:	3301      	adds	r3, #1
    7fb4:	b2da      	uxtb	r2, r3
    7fb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    7fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fbe:	701a      	strb	r2, [r3, #0]
    7fc0:	f24c 5349 	movw	r3, #50505	; 0xc549
    7fc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fc8:	781b      	ldrb	r3, [r3, #0]
    7fca:	2bff      	cmp	r3, #255	; 0xff
    7fcc:	d105      	bne.n	7fda <send_boot+0xaa6>
    7fce:	f24c 5349 	movw	r3, #50505	; 0xc549
    7fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fd6:	2200      	movs	r2, #0
    7fd8:	701a      	strb	r2, [r3, #0]
    7fda:	f24c 5349 	movw	r3, #50505	; 0xc549
    7fde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fe2:	781b      	ldrb	r3, [r3, #0]
    7fe4:	461a      	mov	r2, r3
    7fe6:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fee:	7899      	ldrb	r1, [r3, #2]
    7ff0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7ff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ff8:	5499      	strb	r1, [r3, r2]
    7ffa:	4b68      	ldr	r3, [pc, #416]	; (819c <send_boot+0xc68>)
    7ffc:	781a      	ldrb	r2, [r3, #0]
    7ffe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8006:	781b      	ldrb	r3, [r3, #0]
    8008:	4413      	add	r3, r2
    800a:	b2da      	uxtb	r2, r3
    800c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8014:	701a      	strb	r2, [r3, #0]
    8016:	f24c 634e 	movw	r3, #50766	; 0xc64e
    801a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    801e:	781a      	ldrb	r2, [r3, #0]
    8020:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8028:	781b      	ldrb	r3, [r3, #0]
    802a:	4413      	add	r3, r2
    802c:	b2da      	uxtb	r2, r3
    802e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8036:	701a      	strb	r2, [r3, #0]
    8038:	f24c 5349 	movw	r3, #50505	; 0xc549
    803c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8040:	781b      	ldrb	r3, [r3, #0]
    8042:	3301      	adds	r3, #1
    8044:	b2da      	uxtb	r2, r3
    8046:	f24c 5349 	movw	r3, #50505	; 0xc549
    804a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    804e:	701a      	strb	r2, [r3, #0]
    8050:	f24c 5349 	movw	r3, #50505	; 0xc549
    8054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8058:	781b      	ldrb	r3, [r3, #0]
    805a:	2bff      	cmp	r3, #255	; 0xff
    805c:	d105      	bne.n	806a <send_boot+0xb36>
    805e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8066:	2200      	movs	r2, #0
    8068:	701a      	strb	r2, [r3, #0]
    806a:	f24c 5349 	movw	r3, #50505	; 0xc549
    806e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8072:	781b      	ldrb	r3, [r3, #0]
    8074:	461a      	mov	r2, r3
    8076:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    807a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    807e:	78d9      	ldrb	r1, [r3, #3]
    8080:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8088:	5499      	strb	r1, [r3, r2]
    808a:	4b45      	ldr	r3, [pc, #276]	; (81a0 <send_boot+0xc6c>)
    808c:	781a      	ldrb	r2, [r3, #0]
    808e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8096:	781b      	ldrb	r3, [r3, #0]
    8098:	4413      	add	r3, r2
    809a:	b2da      	uxtb	r2, r3
    809c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    80a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80a4:	701a      	strb	r2, [r3, #0]
    80a6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    80aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ae:	781a      	ldrb	r2, [r3, #0]
    80b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    80b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80b8:	781b      	ldrb	r3, [r3, #0]
    80ba:	4413      	add	r3, r2
    80bc:	b2da      	uxtb	r2, r3
    80be:	f24c 634e 	movw	r3, #50766	; 0xc64e
    80c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80c6:	701a      	strb	r2, [r3, #0]
    80c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    80cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80d0:	781b      	ldrb	r3, [r3, #0]
    80d2:	3301      	adds	r3, #1
    80d4:	b2da      	uxtb	r2, r3
    80d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    80da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80de:	701a      	strb	r2, [r3, #0]
    80e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    80e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80e8:	781b      	ldrb	r3, [r3, #0]
    80ea:	2bff      	cmp	r3, #255	; 0xff
    80ec:	d105      	bne.n	80fa <send_boot+0xbc6>
    80ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    80f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80f6:	2200      	movs	r2, #0
    80f8:	701a      	strb	r2, [r3, #0]
    80fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    80fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8102:	781b      	ldrb	r3, [r3, #0]
    8104:	461a      	mov	r2, r3
    8106:	f240 5342 	movw	r3, #1346	; 0x542
    810a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    810e:	7819      	ldrb	r1, [r3, #0]
    8110:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8118:	5499      	strb	r1, [r3, r2]
    811a:	f240 5342 	movw	r3, #1346	; 0x542
    811e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8122:	781a      	ldrb	r2, [r3, #0]
    8124:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    812c:	781b      	ldrb	r3, [r3, #0]
    812e:	4413      	add	r3, r2
    8130:	b2da      	uxtb	r2, r3
    8132:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    813a:	701a      	strb	r2, [r3, #0]
    813c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8144:	781a      	ldrb	r2, [r3, #0]
    8146:	f24c 634d 	movw	r3, #50765	; 0xc64d
    814a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    814e:	781b      	ldrb	r3, [r3, #0]
    8150:	4413      	add	r3, r2
    8152:	b2da      	uxtb	r2, r3
    8154:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    815c:	701a      	strb	r2, [r3, #0]
    815e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8162:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8166:	781b      	ldrb	r3, [r3, #0]
    8168:	3301      	adds	r3, #1
    816a:	b2da      	uxtb	r2, r3
    816c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8170:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8174:	701a      	strb	r2, [r3, #0]
    8176:	f24c 5349 	movw	r3, #50505	; 0xc549
    817a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    817e:	781b      	ldrb	r3, [r3, #0]
    8180:	2bff      	cmp	r3, #255	; 0xff
    8182:	d10f      	bne.n	81a4 <send_boot+0xc70>
    8184:	f24c 5349 	movw	r3, #50505	; 0xc549
    8188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    818c:	2200      	movs	r2, #0
    818e:	701a      	strb	r2, [r3, #0]
    8190:	e008      	b.n	81a4 <send_boot+0xc70>
    8192:	bf00      	nop
    8194:	2004cb47 	.word	0x2004cb47
    8198:	2004cb3d 	.word	0x2004cb3d
    819c:	2004cb3e 	.word	0x2004cb3e
    81a0:	2004cb3f 	.word	0x2004cb3f
    81a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    81a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81ac:	781b      	ldrb	r3, [r3, #0]
    81ae:	461a      	mov	r2, r3
    81b0:	f240 5342 	movw	r3, #1346	; 0x542
    81b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81b8:	7859      	ldrb	r1, [r3, #1]
    81ba:	f24c 534c 	movw	r3, #50508	; 0xc54c
    81be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81c2:	5499      	strb	r1, [r3, r2]
    81c4:	4bc5      	ldr	r3, [pc, #788]	; (84dc <send_boot+0xfa8>)
    81c6:	781a      	ldrb	r2, [r3, #0]
    81c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    81cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81d0:	781b      	ldrb	r3, [r3, #0]
    81d2:	4413      	add	r3, r2
    81d4:	b2da      	uxtb	r2, r3
    81d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    81da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81de:	701a      	strb	r2, [r3, #0]
    81e0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    81e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81e8:	781a      	ldrb	r2, [r3, #0]
    81ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    81ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81f2:	781b      	ldrb	r3, [r3, #0]
    81f4:	4413      	add	r3, r2
    81f6:	b2da      	uxtb	r2, r3
    81f8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    81fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8200:	701a      	strb	r2, [r3, #0]
    8202:	f24c 5349 	movw	r3, #50505	; 0xc549
    8206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    820a:	781b      	ldrb	r3, [r3, #0]
    820c:	3301      	adds	r3, #1
    820e:	b2da      	uxtb	r2, r3
    8210:	f24c 5349 	movw	r3, #50505	; 0xc549
    8214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8218:	701a      	strb	r2, [r3, #0]
    821a:	f24c 5349 	movw	r3, #50505	; 0xc549
    821e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8222:	781b      	ldrb	r3, [r3, #0]
    8224:	2bff      	cmp	r3, #255	; 0xff
    8226:	d105      	bne.n	8234 <send_boot+0xd00>
    8228:	f24c 5349 	movw	r3, #50505	; 0xc549
    822c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8230:	2200      	movs	r2, #0
    8232:	701a      	strb	r2, [r3, #0]
    8234:	f24c 5349 	movw	r3, #50505	; 0xc549
    8238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    823c:	781b      	ldrb	r3, [r3, #0]
    823e:	461a      	mov	r2, r3
    8240:	f240 5344 	movw	r3, #1348	; 0x544
    8244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8248:	7819      	ldrb	r1, [r3, #0]
    824a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    824e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8252:	5499      	strb	r1, [r3, r2]
    8254:	f240 5344 	movw	r3, #1348	; 0x544
    8258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    825c:	781a      	ldrb	r2, [r3, #0]
    825e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8266:	781b      	ldrb	r3, [r3, #0]
    8268:	4413      	add	r3, r2
    826a:	b2da      	uxtb	r2, r3
    826c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8274:	701a      	strb	r2, [r3, #0]
    8276:	f24c 634e 	movw	r3, #50766	; 0xc64e
    827a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    827e:	781a      	ldrb	r2, [r3, #0]
    8280:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8288:	781b      	ldrb	r3, [r3, #0]
    828a:	4413      	add	r3, r2
    828c:	b2da      	uxtb	r2, r3
    828e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8296:	701a      	strb	r2, [r3, #0]
    8298:	f24c 5349 	movw	r3, #50505	; 0xc549
    829c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82a0:	781b      	ldrb	r3, [r3, #0]
    82a2:	3301      	adds	r3, #1
    82a4:	b2da      	uxtb	r2, r3
    82a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    82aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ae:	701a      	strb	r2, [r3, #0]
    82b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    82b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82b8:	781b      	ldrb	r3, [r3, #0]
    82ba:	2bff      	cmp	r3, #255	; 0xff
    82bc:	d105      	bne.n	82ca <send_boot+0xd96>
    82be:	f24c 5349 	movw	r3, #50505	; 0xc549
    82c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82c6:	2200      	movs	r2, #0
    82c8:	701a      	strb	r2, [r3, #0]
    82ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    82ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	461a      	mov	r2, r3
    82d6:	f240 5344 	movw	r3, #1348	; 0x544
    82da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82de:	7859      	ldrb	r1, [r3, #1]
    82e0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    82e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82e8:	5499      	strb	r1, [r3, r2]
    82ea:	4b7d      	ldr	r3, [pc, #500]	; (84e0 <send_boot+0xfac>)
    82ec:	781a      	ldrb	r2, [r3, #0]
    82ee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    82f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82f6:	781b      	ldrb	r3, [r3, #0]
    82f8:	4413      	add	r3, r2
    82fa:	b2da      	uxtb	r2, r3
    82fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8304:	701a      	strb	r2, [r3, #0]
    8306:	f24c 634e 	movw	r3, #50766	; 0xc64e
    830a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    830e:	781a      	ldrb	r2, [r3, #0]
    8310:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8318:	781b      	ldrb	r3, [r3, #0]
    831a:	4413      	add	r3, r2
    831c:	b2da      	uxtb	r2, r3
    831e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8326:	701a      	strb	r2, [r3, #0]
    8328:	f24c 5349 	movw	r3, #50505	; 0xc549
    832c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8330:	781b      	ldrb	r3, [r3, #0]
    8332:	3301      	adds	r3, #1
    8334:	b2da      	uxtb	r2, r3
    8336:	f24c 5349 	movw	r3, #50505	; 0xc549
    833a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    833e:	701a      	strb	r2, [r3, #0]
    8340:	f24c 5349 	movw	r3, #50505	; 0xc549
    8344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8348:	781b      	ldrb	r3, [r3, #0]
    834a:	2bff      	cmp	r3, #255	; 0xff
    834c:	d105      	bne.n	835a <send_boot+0xe26>
    834e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8352:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8356:	2200      	movs	r2, #0
    8358:	701a      	strb	r2, [r3, #0]
    835a:	f24c 5349 	movw	r3, #50505	; 0xc549
    835e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8362:	781b      	ldrb	r3, [r3, #0]
    8364:	461a      	mov	r2, r3
    8366:	f24c 634d 	movw	r3, #50765	; 0xc64d
    836a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    836e:	7819      	ldrb	r1, [r3, #0]
    8370:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8378:	5499      	strb	r1, [r3, r2]
    837a:	f24c 5349 	movw	r3, #50505	; 0xc549
    837e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8382:	781b      	ldrb	r3, [r3, #0]
    8384:	3301      	adds	r3, #1
    8386:	b2da      	uxtb	r2, r3
    8388:	f24c 5349 	movw	r3, #50505	; 0xc549
    838c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8390:	701a      	strb	r2, [r3, #0]
    8392:	f24c 5349 	movw	r3, #50505	; 0xc549
    8396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    839a:	781b      	ldrb	r3, [r3, #0]
    839c:	2bff      	cmp	r3, #255	; 0xff
    839e:	d105      	bne.n	83ac <send_boot+0xe78>
    83a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    83a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83a8:	2200      	movs	r2, #0
    83aa:	701a      	strb	r2, [r3, #0]
    83ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    83b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83b4:	781b      	ldrb	r3, [r3, #0]
    83b6:	461a      	mov	r2, r3
    83b8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    83bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83c0:	7819      	ldrb	r1, [r3, #0]
    83c2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    83c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ca:	5499      	strb	r1, [r3, r2]
    83cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    83d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83d4:	781b      	ldrb	r3, [r3, #0]
    83d6:	3301      	adds	r3, #1
    83d8:	b2da      	uxtb	r2, r3
    83da:	f24c 5349 	movw	r3, #50505	; 0xc549
    83de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83e2:	701a      	strb	r2, [r3, #0]
    83e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    83e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ec:	781b      	ldrb	r3, [r3, #0]
    83ee:	2bff      	cmp	r3, #255	; 0xff
    83f0:	d105      	bne.n	83fe <send_boot+0xeca>
    83f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    83f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83fa:	2200      	movs	r2, #0
    83fc:	701a      	strb	r2, [r3, #0]
    83fe:	f242 0339 	movw	r3, #8249	; 0x2039
    8402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8406:	781b      	ldrb	r3, [r3, #0]
    8408:	b2db      	uxtb	r3, r3
    840a:	f003 0310 	and.w	r3, r3, #16
    840e:	2b00      	cmp	r3, #0
    8410:	d15a      	bne.n	84c8 <send_boot+0xf94>
    8412:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    841a:	781b      	ldrb	r3, [r3, #0]
    841c:	b2db      	uxtb	r3, r3
    841e:	461a      	mov	r2, r3
    8420:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8428:	5c9a      	ldrb	r2, [r3, r2]
    842a:	f24c 634b 	movw	r3, #50763	; 0xc64b
    842e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8432:	701a      	strb	r2, [r3, #0]
    8434:	f24c 634c 	movw	r3, #50764	; 0xc64c
    8438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    843c:	2200      	movs	r2, #0
    843e:	701a      	strb	r2, [r3, #0]
    8440:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8448:	781b      	ldrb	r3, [r3, #0]
    844a:	b2db      	uxtb	r3, r3
    844c:	3301      	adds	r3, #1
    844e:	b2da      	uxtb	r2, r3
    8450:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8458:	701a      	strb	r2, [r3, #0]
    845a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    845e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8462:	781b      	ldrb	r3, [r3, #0]
    8464:	b2db      	uxtb	r3, r3
    8466:	2bff      	cmp	r3, #255	; 0xff
    8468:	d105      	bne.n	8476 <send_boot+0xf42>
    846a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    846e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8472:	2200      	movs	r2, #0
    8474:	701a      	strb	r2, [r3, #0]
    8476:	f242 0338 	movw	r3, #8248	; 0x2038
    847a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    847e:	f242 0238 	movw	r2, #8248	; 0x2038
    8482:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8486:	7812      	ldrb	r2, [r2, #0]
    8488:	b2d2      	uxtb	r2, r2
    848a:	f042 0201 	orr.w	r2, r2, #1
    848e:	b2d2      	uxtb	r2, r2
    8490:	701a      	strb	r2, [r3, #0]
    8492:	f242 0339 	movw	r3, #8249	; 0x2039
    8496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    849a:	f242 0239 	movw	r2, #8249	; 0x2039
    849e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    84a2:	7812      	ldrb	r2, [r2, #0]
    84a4:	b2d2      	uxtb	r2, r2
    84a6:	f042 0210 	orr.w	r2, r2, #16
    84aa:	b2d2      	uxtb	r2, r2
    84ac:	701a      	strb	r2, [r3, #0]
    84ae:	e00b      	b.n	84c8 <send_boot+0xf94>
    84b0:	f24c 5348 	movw	r3, #50504	; 0xc548
    84b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84b8:	781b      	ldrb	r3, [r3, #0]
    84ba:	3301      	adds	r3, #1
    84bc:	b2da      	uxtb	r2, r3
    84be:	f24c 5348 	movw	r3, #50504	; 0xc548
    84c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84c6:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    84c8:	f240 533d 	movw	r3, #1341	; 0x53d
    84cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84d0:	2200      	movs	r2, #0
    84d2:	701a      	strb	r2, [r3, #0]
  }
}
    84d4:	46bd      	mov	sp, r7
    84d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    84da:	4770      	bx	lr
    84dc:	20000543 	.word	0x20000543
    84e0:	20000545 	.word	0x20000545

000084e4 <send_attitude>:
void send_attitude(void){ //499ms
    84e4:	b480      	push	{r7}
    84e6:	af00      	add	r7, sp, #0
    // add by wanbo
  if(!boot)
    84e8:	f240 533d 	movw	r3, #1341	; 0x53d
    84ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84f0:	781b      	ldrb	r3, [r3, #0]
    84f2:	2b00      	cmp	r3, #0
    84f4:	f040 84ee 	bne.w	8ed4 <send_attitude+0x9f0>
  {
    count++;
    84f8:	f24c 5341 	movw	r3, #50497	; 0xc541
    84fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8500:	781b      	ldrb	r3, [r3, #0]
    8502:	3301      	adds	r3, #1
    8504:	b2da      	uxtb	r2, r3
    8506:	f24c 5341 	movw	r3, #50497	; 0xc541
    850a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    850e:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    8510:	f24c 5341 	movw	r3, #50497	; 0xc541
    8514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8518:	781b      	ldrb	r3, [r3, #0]
    851a:	2bfa      	cmp	r3, #250	; 0xfa
    851c:	d105      	bne.n	852a <send_attitude+0x46>
    851e:	f24c 5341 	movw	r3, #50497	; 0xc541
    8522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8526:	2200      	movs	r2, #0
    8528:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    852a:	f24c 5341 	movw	r3, #50497	; 0xc541
    852e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8532:	781a      	ldrb	r2, [r3, #0]
    8534:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8538:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    853c:	fba3 1302 	umull	r1, r3, r3, r2
    8540:	0899      	lsrs	r1, r3, #2
    8542:	460b      	mov	r3, r1
    8544:	009b      	lsls	r3, r3, #2
    8546:	440b      	add	r3, r1
    8548:	1ad3      	subs	r3, r2, r3
    854a:	b2db      	uxtb	r3, r3
    854c:	2b00      	cmp	r3, #0
    854e:	f040 84c1 	bne.w	8ed4 <send_attitude+0x9f0>
       PERIODIC_SEND_ATTITUDE(); 
    8552:	f24c 5349 	movw	r3, #50505	; 0xc549
    8556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    855a:	781a      	ldrb	r2, [r3, #0]
    855c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8564:	781b      	ldrb	r3, [r3, #0]
    8566:	b2db      	uxtb	r3, r3
    8568:	429a      	cmp	r2, r3
    856a:	d313      	bcc.n	8594 <send_attitude+0xb0>
    856c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8574:	781b      	ldrb	r3, [r3, #0]
    8576:	b2db      	uxtb	r3, r3
    8578:	461a      	mov	r2, r3
    857a:	f24c 5349 	movw	r3, #50505	; 0xc549
    857e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8582:	781b      	ldrb	r3, [r3, #0]
    8584:	1ad3      	subs	r3, r2, r3
    8586:	33ff      	adds	r3, #255	; 0xff
    8588:	2b10      	cmp	r3, #16
    858a:	bfd4      	ite	le
    858c:	2300      	movle	r3, #0
    858e:	2301      	movgt	r3, #1
    8590:	b2db      	uxtb	r3, r3
    8592:	e011      	b.n	85b8 <send_attitude+0xd4>
    8594:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    859c:	781b      	ldrb	r3, [r3, #0]
    859e:	b2db      	uxtb	r3, r3
    85a0:	461a      	mov	r2, r3
    85a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    85a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85aa:	781b      	ldrb	r3, [r3, #0]
    85ac:	1ad3      	subs	r3, r2, r3
    85ae:	2b10      	cmp	r3, #16
    85b0:	bfd4      	ite	le
    85b2:	2300      	movle	r3, #0
    85b4:	2301      	movgt	r3, #1
    85b6:	b2db      	uxtb	r3, r3
    85b8:	2b00      	cmp	r3, #0
    85ba:	f000 847f 	beq.w	8ebc <send_attitude+0x9d8>
    85be:	f24c 5349 	movw	r3, #50505	; 0xc549
    85c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85c6:	781b      	ldrb	r3, [r3, #0]
    85c8:	461a      	mov	r2, r3
    85ca:	f24c 534c 	movw	r3, #50508	; 0xc54c
    85ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85d2:	2105      	movs	r1, #5
    85d4:	5499      	strb	r1, [r3, r2]
    85d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    85da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85de:	781b      	ldrb	r3, [r3, #0]
    85e0:	3301      	adds	r3, #1
    85e2:	b2da      	uxtb	r2, r3
    85e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    85e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ec:	701a      	strb	r2, [r3, #0]
    85ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    85f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85f6:	781b      	ldrb	r3, [r3, #0]
    85f8:	2bff      	cmp	r3, #255	; 0xff
    85fa:	d105      	bne.n	8608 <send_attitude+0x124>
    85fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    8600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8604:	2200      	movs	r2, #0
    8606:	701a      	strb	r2, [r3, #0]
    8608:	f24c 5349 	movw	r3, #50505	; 0xc549
    860c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8610:	781b      	ldrb	r3, [r3, #0]
    8612:	461a      	mov	r2, r3
    8614:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    861c:	2106      	movs	r1, #6
    861e:	5499      	strb	r1, [r3, r2]
    8620:	f24c 5349 	movw	r3, #50505	; 0xc549
    8624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8628:	781b      	ldrb	r3, [r3, #0]
    862a:	3301      	adds	r3, #1
    862c:	b2da      	uxtb	r2, r3
    862e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8636:	701a      	strb	r2, [r3, #0]
    8638:	f24c 5349 	movw	r3, #50505	; 0xc549
    863c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8640:	781b      	ldrb	r3, [r3, #0]
    8642:	2bff      	cmp	r3, #255	; 0xff
    8644:	d105      	bne.n	8652 <send_attitude+0x16e>
    8646:	f24c 5349 	movw	r3, #50505	; 0xc549
    864a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    864e:	2200      	movs	r2, #0
    8650:	701a      	strb	r2, [r3, #0]
    8652:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    865a:	2206      	movs	r2, #6
    865c:	701a      	strb	r2, [r3, #0]
    865e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8666:	2206      	movs	r2, #6
    8668:	701a      	strb	r2, [r3, #0]
    866a:	f24c 5349 	movw	r3, #50505	; 0xc549
    866e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8672:	781b      	ldrb	r3, [r3, #0]
    8674:	461a      	mov	r2, r3
    8676:	f64c 3308 	movw	r3, #51976	; 0xcb08
    867a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    867e:	7819      	ldrb	r1, [r3, #0]
    8680:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8688:	5499      	strb	r1, [r3, r2]
    868a:	f64c 3308 	movw	r3, #51976	; 0xcb08
    868e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8692:	781a      	ldrb	r2, [r3, #0]
    8694:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    869c:	781b      	ldrb	r3, [r3, #0]
    869e:	4413      	add	r3, r2
    86a0:	b2da      	uxtb	r2, r3
    86a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    86a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86aa:	701a      	strb	r2, [r3, #0]
    86ac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    86b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86b4:	781a      	ldrb	r2, [r3, #0]
    86b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    86ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86be:	781b      	ldrb	r3, [r3, #0]
    86c0:	4413      	add	r3, r2
    86c2:	b2da      	uxtb	r2, r3
    86c4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    86c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86cc:	701a      	strb	r2, [r3, #0]
    86ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    86d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86d6:	781b      	ldrb	r3, [r3, #0]
    86d8:	3301      	adds	r3, #1
    86da:	b2da      	uxtb	r2, r3
    86dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    86e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86e4:	701a      	strb	r2, [r3, #0]
    86e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    86ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ee:	781b      	ldrb	r3, [r3, #0]
    86f0:	2bff      	cmp	r3, #255	; 0xff
    86f2:	d105      	bne.n	8700 <send_attitude+0x21c>
    86f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    86f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86fc:	2200      	movs	r2, #0
    86fe:	701a      	strb	r2, [r3, #0]
    8700:	f24c 5349 	movw	r3, #50505	; 0xc549
    8704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8708:	781b      	ldrb	r3, [r3, #0]
    870a:	461a      	mov	r2, r3
    870c:	f64c 3308 	movw	r3, #51976	; 0xcb08
    8710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8714:	7859      	ldrb	r1, [r3, #1]
    8716:	f24c 534c 	movw	r3, #50508	; 0xc54c
    871a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    871e:	5499      	strb	r1, [r3, r2]
    8720:	4bd1      	ldr	r3, [pc, #836]	; (8a68 <send_attitude+0x584>)
    8722:	781a      	ldrb	r2, [r3, #0]
    8724:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    872c:	781b      	ldrb	r3, [r3, #0]
    872e:	4413      	add	r3, r2
    8730:	b2da      	uxtb	r2, r3
    8732:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    873a:	701a      	strb	r2, [r3, #0]
    873c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8744:	781a      	ldrb	r2, [r3, #0]
    8746:	f24c 634d 	movw	r3, #50765	; 0xc64d
    874a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    874e:	781b      	ldrb	r3, [r3, #0]
    8750:	4413      	add	r3, r2
    8752:	b2da      	uxtb	r2, r3
    8754:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    875c:	701a      	strb	r2, [r3, #0]
    875e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8766:	781b      	ldrb	r3, [r3, #0]
    8768:	3301      	adds	r3, #1
    876a:	b2da      	uxtb	r2, r3
    876c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8774:	701a      	strb	r2, [r3, #0]
    8776:	f24c 5349 	movw	r3, #50505	; 0xc549
    877a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    877e:	781b      	ldrb	r3, [r3, #0]
    8780:	2bff      	cmp	r3, #255	; 0xff
    8782:	d105      	bne.n	8790 <send_attitude+0x2ac>
    8784:	f24c 5349 	movw	r3, #50505	; 0xc549
    8788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    878c:	2200      	movs	r2, #0
    878e:	701a      	strb	r2, [r3, #0]
    8790:	f24c 5349 	movw	r3, #50505	; 0xc549
    8794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8798:	781b      	ldrb	r3, [r3, #0]
    879a:	461a      	mov	r2, r3
    879c:	f64c 3308 	movw	r3, #51976	; 0xcb08
    87a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87a4:	7899      	ldrb	r1, [r3, #2]
    87a6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    87aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ae:	5499      	strb	r1, [r3, r2]
    87b0:	4bae      	ldr	r3, [pc, #696]	; (8a6c <send_attitude+0x588>)
    87b2:	781a      	ldrb	r2, [r3, #0]
    87b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    87b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87bc:	781b      	ldrb	r3, [r3, #0]
    87be:	4413      	add	r3, r2
    87c0:	b2da      	uxtb	r2, r3
    87c2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    87c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ca:	701a      	strb	r2, [r3, #0]
    87cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    87d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87d4:	781a      	ldrb	r2, [r3, #0]
    87d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    87da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87de:	781b      	ldrb	r3, [r3, #0]
    87e0:	4413      	add	r3, r2
    87e2:	b2da      	uxtb	r2, r3
    87e4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    87e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ec:	701a      	strb	r2, [r3, #0]
    87ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    87f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87f6:	781b      	ldrb	r3, [r3, #0]
    87f8:	3301      	adds	r3, #1
    87fa:	b2da      	uxtb	r2, r3
    87fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    8800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8804:	701a      	strb	r2, [r3, #0]
    8806:	f24c 5349 	movw	r3, #50505	; 0xc549
    880a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    880e:	781b      	ldrb	r3, [r3, #0]
    8810:	2bff      	cmp	r3, #255	; 0xff
    8812:	d105      	bne.n	8820 <send_attitude+0x33c>
    8814:	f24c 5349 	movw	r3, #50505	; 0xc549
    8818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    881c:	2200      	movs	r2, #0
    881e:	701a      	strb	r2, [r3, #0]
    8820:	f24c 5349 	movw	r3, #50505	; 0xc549
    8824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8828:	781b      	ldrb	r3, [r3, #0]
    882a:	461a      	mov	r2, r3
    882c:	f64c 3308 	movw	r3, #51976	; 0xcb08
    8830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8834:	78d9      	ldrb	r1, [r3, #3]
    8836:	f24c 534c 	movw	r3, #50508	; 0xc54c
    883a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    883e:	5499      	strb	r1, [r3, r2]
    8840:	4b8b      	ldr	r3, [pc, #556]	; (8a70 <send_attitude+0x58c>)
    8842:	781a      	ldrb	r2, [r3, #0]
    8844:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    884c:	781b      	ldrb	r3, [r3, #0]
    884e:	4413      	add	r3, r2
    8850:	b2da      	uxtb	r2, r3
    8852:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    885a:	701a      	strb	r2, [r3, #0]
    885c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8864:	781a      	ldrb	r2, [r3, #0]
    8866:	f24c 634d 	movw	r3, #50765	; 0xc64d
    886a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    886e:	781b      	ldrb	r3, [r3, #0]
    8870:	4413      	add	r3, r2
    8872:	b2da      	uxtb	r2, r3
    8874:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    887c:	701a      	strb	r2, [r3, #0]
    887e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8886:	781b      	ldrb	r3, [r3, #0]
    8888:	3301      	adds	r3, #1
    888a:	b2da      	uxtb	r2, r3
    888c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8894:	701a      	strb	r2, [r3, #0]
    8896:	f24c 5349 	movw	r3, #50505	; 0xc549
    889a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    889e:	781b      	ldrb	r3, [r3, #0]
    88a0:	2bff      	cmp	r3, #255	; 0xff
    88a2:	d105      	bne.n	88b0 <send_attitude+0x3cc>
    88a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    88a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ac:	2200      	movs	r2, #0
    88ae:	701a      	strb	r2, [r3, #0]
    88b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    88b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88b8:	781b      	ldrb	r3, [r3, #0]
    88ba:	461a      	mov	r2, r3
    88bc:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    88c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88c4:	7819      	ldrb	r1, [r3, #0]
    88c6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    88ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ce:	5499      	strb	r1, [r3, r2]
    88d0:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    88d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88d8:	781a      	ldrb	r2, [r3, #0]
    88da:	f24c 634d 	movw	r3, #50765	; 0xc64d
    88de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88e2:	781b      	ldrb	r3, [r3, #0]
    88e4:	4413      	add	r3, r2
    88e6:	b2da      	uxtb	r2, r3
    88e8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    88ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88f0:	701a      	strb	r2, [r3, #0]
    88f2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    88f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88fa:	781a      	ldrb	r2, [r3, #0]
    88fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8900:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8904:	781b      	ldrb	r3, [r3, #0]
    8906:	4413      	add	r3, r2
    8908:	b2da      	uxtb	r2, r3
    890a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    890e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8912:	701a      	strb	r2, [r3, #0]
    8914:	f24c 5349 	movw	r3, #50505	; 0xc549
    8918:	f2c2 0304 	movt	r3, #8196	; 0x2004
    891c:	781b      	ldrb	r3, [r3, #0]
    891e:	3301      	adds	r3, #1
    8920:	b2da      	uxtb	r2, r3
    8922:	f24c 5349 	movw	r3, #50505	; 0xc549
    8926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    892a:	701a      	strb	r2, [r3, #0]
    892c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8934:	781b      	ldrb	r3, [r3, #0]
    8936:	2bff      	cmp	r3, #255	; 0xff
    8938:	d105      	bne.n	8946 <send_attitude+0x462>
    893a:	f24c 5349 	movw	r3, #50505	; 0xc549
    893e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8942:	2200      	movs	r2, #0
    8944:	701a      	strb	r2, [r3, #0]
    8946:	f24c 5349 	movw	r3, #50505	; 0xc549
    894a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    894e:	781b      	ldrb	r3, [r3, #0]
    8950:	461a      	mov	r2, r3
    8952:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    8956:	f2c2 0304 	movt	r3, #8196	; 0x2004
    895a:	7859      	ldrb	r1, [r3, #1]
    895c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8964:	5499      	strb	r1, [r3, r2]
    8966:	4b43      	ldr	r3, [pc, #268]	; (8a74 <send_attitude+0x590>)
    8968:	781a      	ldrb	r2, [r3, #0]
    896a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    896e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8972:	781b      	ldrb	r3, [r3, #0]
    8974:	4413      	add	r3, r2
    8976:	b2da      	uxtb	r2, r3
    8978:	f24c 634d 	movw	r3, #50765	; 0xc64d
    897c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8980:	701a      	strb	r2, [r3, #0]
    8982:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    898a:	781a      	ldrb	r2, [r3, #0]
    898c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8994:	781b      	ldrb	r3, [r3, #0]
    8996:	4413      	add	r3, r2
    8998:	b2da      	uxtb	r2, r3
    899a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    899e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89a2:	701a      	strb	r2, [r3, #0]
    89a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    89a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ac:	781b      	ldrb	r3, [r3, #0]
    89ae:	3301      	adds	r3, #1
    89b0:	b2da      	uxtb	r2, r3
    89b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    89b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ba:	701a      	strb	r2, [r3, #0]
    89bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    89c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89c4:	781b      	ldrb	r3, [r3, #0]
    89c6:	2bff      	cmp	r3, #255	; 0xff
    89c8:	d105      	bne.n	89d6 <send_attitude+0x4f2>
    89ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    89ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89d2:	2200      	movs	r2, #0
    89d4:	701a      	strb	r2, [r3, #0]
    89d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    89da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89de:	781b      	ldrb	r3, [r3, #0]
    89e0:	461a      	mov	r2, r3
    89e2:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    89e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ea:	7899      	ldrb	r1, [r3, #2]
    89ec:	f24c 534c 	movw	r3, #50508	; 0xc54c
    89f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89f4:	5499      	strb	r1, [r3, r2]
    89f6:	4b20      	ldr	r3, [pc, #128]	; (8a78 <send_attitude+0x594>)
    89f8:	781a      	ldrb	r2, [r3, #0]
    89fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    89fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a02:	781b      	ldrb	r3, [r3, #0]
    8a04:	4413      	add	r3, r2
    8a06:	b2da      	uxtb	r2, r3
    8a08:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a10:	701a      	strb	r2, [r3, #0]
    8a12:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a1a:	781a      	ldrb	r2, [r3, #0]
    8a1c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a24:	781b      	ldrb	r3, [r3, #0]
    8a26:	4413      	add	r3, r2
    8a28:	b2da      	uxtb	r2, r3
    8a2a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8a2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a32:	701a      	strb	r2, [r3, #0]
    8a34:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a3c:	781b      	ldrb	r3, [r3, #0]
    8a3e:	3301      	adds	r3, #1
    8a40:	b2da      	uxtb	r2, r3
    8a42:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a4a:	701a      	strb	r2, [r3, #0]
    8a4c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a54:	781b      	ldrb	r3, [r3, #0]
    8a56:	2bff      	cmp	r3, #255	; 0xff
    8a58:	d110      	bne.n	8a7c <send_attitude+0x598>
    8a5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a62:	2200      	movs	r2, #0
    8a64:	701a      	strb	r2, [r3, #0]
    8a66:	e009      	b.n	8a7c <send_attitude+0x598>
    8a68:	2004cb09 	.word	0x2004cb09
    8a6c:	2004cb0a 	.word	0x2004cb0a
    8a70:	2004cb0b 	.word	0x2004cb0b
    8a74:	2004cb0d 	.word	0x2004cb0d
    8a78:	2004cb0e 	.word	0x2004cb0e
    8a7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a84:	781b      	ldrb	r3, [r3, #0]
    8a86:	461a      	mov	r2, r3
    8a88:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    8a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a90:	78d9      	ldrb	r1, [r3, #3]
    8a92:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a9a:	5499      	strb	r1, [r3, r2]
    8a9c:	4bc2      	ldr	r3, [pc, #776]	; (8da8 <send_attitude+0x8c4>)
    8a9e:	781a      	ldrb	r2, [r3, #0]
    8aa0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aa8:	781b      	ldrb	r3, [r3, #0]
    8aaa:	4413      	add	r3, r2
    8aac:	b2da      	uxtb	r2, r3
    8aae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ab6:	701a      	strb	r2, [r3, #0]
    8ab8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8abc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ac0:	781a      	ldrb	r2, [r3, #0]
    8ac2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8ac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aca:	781b      	ldrb	r3, [r3, #0]
    8acc:	4413      	add	r3, r2
    8ace:	b2da      	uxtb	r2, r3
    8ad0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ad8:	701a      	strb	r2, [r3, #0]
    8ada:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ae2:	781b      	ldrb	r3, [r3, #0]
    8ae4:	3301      	adds	r3, #1
    8ae6:	b2da      	uxtb	r2, r3
    8ae8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8af0:	701a      	strb	r2, [r3, #0]
    8af2:	f24c 5349 	movw	r3, #50505	; 0xc549
    8af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8afa:	781b      	ldrb	r3, [r3, #0]
    8afc:	2bff      	cmp	r3, #255	; 0xff
    8afe:	d105      	bne.n	8b0c <send_attitude+0x628>
    8b00:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b08:	2200      	movs	r2, #0
    8b0a:	701a      	strb	r2, [r3, #0]
    8b0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b14:	781b      	ldrb	r3, [r3, #0]
    8b16:	461a      	mov	r2, r3
    8b18:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b20:	7819      	ldrb	r1, [r3, #0]
    8b22:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b2a:	5499      	strb	r1, [r3, r2]
    8b2c:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b34:	781a      	ldrb	r2, [r3, #0]
    8b36:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b3e:	781b      	ldrb	r3, [r3, #0]
    8b40:	4413      	add	r3, r2
    8b42:	b2da      	uxtb	r2, r3
    8b44:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b4c:	701a      	strb	r2, [r3, #0]
    8b4e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b56:	781a      	ldrb	r2, [r3, #0]
    8b58:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b60:	781b      	ldrb	r3, [r3, #0]
    8b62:	4413      	add	r3, r2
    8b64:	b2da      	uxtb	r2, r3
    8b66:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b6e:	701a      	strb	r2, [r3, #0]
    8b70:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b78:	781b      	ldrb	r3, [r3, #0]
    8b7a:	3301      	adds	r3, #1
    8b7c:	b2da      	uxtb	r2, r3
    8b7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b86:	701a      	strb	r2, [r3, #0]
    8b88:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b90:	781b      	ldrb	r3, [r3, #0]
    8b92:	2bff      	cmp	r3, #255	; 0xff
    8b94:	d105      	bne.n	8ba2 <send_attitude+0x6be>
    8b96:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b9e:	2200      	movs	r2, #0
    8ba0:	701a      	strb	r2, [r3, #0]
    8ba2:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8baa:	781b      	ldrb	r3, [r3, #0]
    8bac:	461a      	mov	r2, r3
    8bae:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bb6:	7859      	ldrb	r1, [r3, #1]
    8bb8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bc0:	5499      	strb	r1, [r3, r2]
    8bc2:	4b7a      	ldr	r3, [pc, #488]	; (8dac <send_attitude+0x8c8>)
    8bc4:	781a      	ldrb	r2, [r3, #0]
    8bc6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bce:	781b      	ldrb	r3, [r3, #0]
    8bd0:	4413      	add	r3, r2
    8bd2:	b2da      	uxtb	r2, r3
    8bd4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bdc:	701a      	strb	r2, [r3, #0]
    8bde:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8be6:	781a      	ldrb	r2, [r3, #0]
    8be8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8bec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bf0:	781b      	ldrb	r3, [r3, #0]
    8bf2:	4413      	add	r3, r2
    8bf4:	b2da      	uxtb	r2, r3
    8bf6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8bfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bfe:	701a      	strb	r2, [r3, #0]
    8c00:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c08:	781b      	ldrb	r3, [r3, #0]
    8c0a:	3301      	adds	r3, #1
    8c0c:	b2da      	uxtb	r2, r3
    8c0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c16:	701a      	strb	r2, [r3, #0]
    8c18:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c20:	781b      	ldrb	r3, [r3, #0]
    8c22:	2bff      	cmp	r3, #255	; 0xff
    8c24:	d105      	bne.n	8c32 <send_attitude+0x74e>
    8c26:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c2e:	2200      	movs	r2, #0
    8c30:	701a      	strb	r2, [r3, #0]
    8c32:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c3a:	781b      	ldrb	r3, [r3, #0]
    8c3c:	461a      	mov	r2, r3
    8c3e:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c46:	7899      	ldrb	r1, [r3, #2]
    8c48:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c50:	5499      	strb	r1, [r3, r2]
    8c52:	4b57      	ldr	r3, [pc, #348]	; (8db0 <send_attitude+0x8cc>)
    8c54:	781a      	ldrb	r2, [r3, #0]
    8c56:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c5e:	781b      	ldrb	r3, [r3, #0]
    8c60:	4413      	add	r3, r2
    8c62:	b2da      	uxtb	r2, r3
    8c64:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c6c:	701a      	strb	r2, [r3, #0]
    8c6e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c76:	781a      	ldrb	r2, [r3, #0]
    8c78:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c80:	781b      	ldrb	r3, [r3, #0]
    8c82:	4413      	add	r3, r2
    8c84:	b2da      	uxtb	r2, r3
    8c86:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8c8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c8e:	701a      	strb	r2, [r3, #0]
    8c90:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c98:	781b      	ldrb	r3, [r3, #0]
    8c9a:	3301      	adds	r3, #1
    8c9c:	b2da      	uxtb	r2, r3
    8c9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ca6:	701a      	strb	r2, [r3, #0]
    8ca8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cb0:	781b      	ldrb	r3, [r3, #0]
    8cb2:	2bff      	cmp	r3, #255	; 0xff
    8cb4:	d105      	bne.n	8cc2 <send_attitude+0x7de>
    8cb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cbe:	2200      	movs	r2, #0
    8cc0:	701a      	strb	r2, [r3, #0]
    8cc2:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cca:	781b      	ldrb	r3, [r3, #0]
    8ccc:	461a      	mov	r2, r3
    8cce:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8cd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cd6:	78d9      	ldrb	r1, [r3, #3]
    8cd8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ce0:	5499      	strb	r1, [r3, r2]
    8ce2:	4b34      	ldr	r3, [pc, #208]	; (8db4 <send_attitude+0x8d0>)
    8ce4:	781a      	ldrb	r2, [r3, #0]
    8ce6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cee:	781b      	ldrb	r3, [r3, #0]
    8cf0:	4413      	add	r3, r2
    8cf2:	b2da      	uxtb	r2, r3
    8cf4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cfc:	701a      	strb	r2, [r3, #0]
    8cfe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d06:	781a      	ldrb	r2, [r3, #0]
    8d08:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8d0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d10:	781b      	ldrb	r3, [r3, #0]
    8d12:	4413      	add	r3, r2
    8d14:	b2da      	uxtb	r2, r3
    8d16:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d1e:	701a      	strb	r2, [r3, #0]
    8d20:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d28:	781b      	ldrb	r3, [r3, #0]
    8d2a:	3301      	adds	r3, #1
    8d2c:	b2da      	uxtb	r2, r3
    8d2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d36:	701a      	strb	r2, [r3, #0]
    8d38:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d40:	781b      	ldrb	r3, [r3, #0]
    8d42:	2bff      	cmp	r3, #255	; 0xff
    8d44:	d105      	bne.n	8d52 <send_attitude+0x86e>
    8d46:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d4e:	2200      	movs	r2, #0
    8d50:	701a      	strb	r2, [r3, #0]
    8d52:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d5a:	781b      	ldrb	r3, [r3, #0]
    8d5c:	461a      	mov	r2, r3
    8d5e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d66:	7819      	ldrb	r1, [r3, #0]
    8d68:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d70:	5499      	strb	r1, [r3, r2]
    8d72:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d7a:	781b      	ldrb	r3, [r3, #0]
    8d7c:	3301      	adds	r3, #1
    8d7e:	b2da      	uxtb	r2, r3
    8d80:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d88:	701a      	strb	r2, [r3, #0]
    8d8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d92:	781b      	ldrb	r3, [r3, #0]
    8d94:	2bff      	cmp	r3, #255	; 0xff
    8d96:	d10f      	bne.n	8db8 <send_attitude+0x8d4>
    8d98:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8da0:	2200      	movs	r2, #0
    8da2:	701a      	strb	r2, [r3, #0]
    8da4:	e008      	b.n	8db8 <send_attitude+0x8d4>
    8da6:	bf00      	nop
    8da8:	2004cb0f 	.word	0x2004cb0f
    8dac:	2004cb11 	.word	0x2004cb11
    8db0:	2004cb12 	.word	0x2004cb12
    8db4:	2004cb13 	.word	0x2004cb13
    8db8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8dbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dc0:	781b      	ldrb	r3, [r3, #0]
    8dc2:	461a      	mov	r2, r3
    8dc4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dcc:	7819      	ldrb	r1, [r3, #0]
    8dce:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dd6:	5499      	strb	r1, [r3, r2]
    8dd8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8de0:	781b      	ldrb	r3, [r3, #0]
    8de2:	3301      	adds	r3, #1
    8de4:	b2da      	uxtb	r2, r3
    8de6:	f24c 5349 	movw	r3, #50505	; 0xc549
    8dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dee:	701a      	strb	r2, [r3, #0]
    8df0:	f24c 5349 	movw	r3, #50505	; 0xc549
    8df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8df8:	781b      	ldrb	r3, [r3, #0]
    8dfa:	2bff      	cmp	r3, #255	; 0xff
    8dfc:	d105      	bne.n	8e0a <send_attitude+0x926>
    8dfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e06:	2200      	movs	r2, #0
    8e08:	701a      	strb	r2, [r3, #0]
    8e0a:	f242 0339 	movw	r3, #8249	; 0x2039
    8e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e12:	781b      	ldrb	r3, [r3, #0]
    8e14:	b2db      	uxtb	r3, r3
    8e16:	f003 0310 	and.w	r3, r3, #16
    8e1a:	2b00      	cmp	r3, #0
    8e1c:	d15a      	bne.n	8ed4 <send_attitude+0x9f0>
    8e1e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e26:	781b      	ldrb	r3, [r3, #0]
    8e28:	b2db      	uxtb	r3, r3
    8e2a:	461a      	mov	r2, r3
    8e2c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8e30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e34:	5c9a      	ldrb	r2, [r3, r2]
    8e36:	f24c 634b 	movw	r3, #50763	; 0xc64b
    8e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e3e:	701a      	strb	r2, [r3, #0]
    8e40:	f24c 634c 	movw	r3, #50764	; 0xc64c
    8e44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e48:	2200      	movs	r2, #0
    8e4a:	701a      	strb	r2, [r3, #0]
    8e4c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8e50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e54:	781b      	ldrb	r3, [r3, #0]
    8e56:	b2db      	uxtb	r3, r3
    8e58:	3301      	adds	r3, #1
    8e5a:	b2da      	uxtb	r2, r3
    8e5c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e64:	701a      	strb	r2, [r3, #0]
    8e66:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e6e:	781b      	ldrb	r3, [r3, #0]
    8e70:	b2db      	uxtb	r3, r3
    8e72:	2bff      	cmp	r3, #255	; 0xff
    8e74:	d105      	bne.n	8e82 <send_attitude+0x99e>
    8e76:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e7e:	2200      	movs	r2, #0
    8e80:	701a      	strb	r2, [r3, #0]
    8e82:	f242 0338 	movw	r3, #8248	; 0x2038
    8e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e8a:	f242 0238 	movw	r2, #8248	; 0x2038
    8e8e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8e92:	7812      	ldrb	r2, [r2, #0]
    8e94:	b2d2      	uxtb	r2, r2
    8e96:	f042 0201 	orr.w	r2, r2, #1
    8e9a:	b2d2      	uxtb	r2, r2
    8e9c:	701a      	strb	r2, [r3, #0]
    8e9e:	f242 0339 	movw	r3, #8249	; 0x2039
    8ea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ea6:	f242 0239 	movw	r2, #8249	; 0x2039
    8eaa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8eae:	7812      	ldrb	r2, [r2, #0]
    8eb0:	b2d2      	uxtb	r2, r2
    8eb2:	f042 0210 	orr.w	r2, r2, #16
    8eb6:	b2d2      	uxtb	r2, r2
    8eb8:	701a      	strb	r2, [r3, #0]
    8eba:	e00b      	b.n	8ed4 <send_attitude+0x9f0>
    8ebc:	f24c 5348 	movw	r3, #50504	; 0xc548
    8ec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ec4:	781b      	ldrb	r3, [r3, #0]
    8ec6:	3301      	adds	r3, #1
    8ec8:	b2da      	uxtb	r2, r3
    8eca:	f24c 5348 	movw	r3, #50504	; 0xc548
    8ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ed2:	701a      	strb	r2, [r3, #0]
  }
}
    8ed4:	46bd      	mov	sp, r7
    8ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eda:	4770      	bx	lr

00008edc <send_adc>:
  
void send_adc(void){  //500ms
    8edc:	b480      	push	{r7}
    8ede:	af00      	add	r7, sp, #0
  if(!boot)
    8ee0:	f240 533d 	movw	r3, #1341	; 0x53d
    8ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ee8:	781b      	ldrb	r3, [r3, #0]
    8eea:	2b00      	cmp	r3, #0
    8eec:	f040 827d 	bne.w	93ea <send_adc+0x50e>
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    8ef0:	f24c 5341 	movw	r3, #50497	; 0xc541
    8ef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ef8:	781a      	ldrb	r2, [r3, #0]
    8efa:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8efe:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8f02:	fba3 1302 	umull	r1, r3, r3, r2
    8f06:	0899      	lsrs	r1, r3, #2
    8f08:	460b      	mov	r3, r1
    8f0a:	009b      	lsls	r3, r3, #2
    8f0c:	440b      	add	r3, r1
    8f0e:	1ad3      	subs	r3, r2, r3
    8f10:	b2db      	uxtb	r3, r3
    8f12:	2b01      	cmp	r3, #1
    8f14:	f040 8269 	bne.w	93ea <send_adc+0x50e>
    8f18:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f20:	781a      	ldrb	r2, [r3, #0]
    8f22:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8f26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f2a:	781b      	ldrb	r3, [r3, #0]
    8f2c:	b2db      	uxtb	r3, r3
    8f2e:	429a      	cmp	r2, r3
    8f30:	d313      	bcc.n	8f5a <send_adc+0x7e>
    8f32:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8f36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f3a:	781b      	ldrb	r3, [r3, #0]
    8f3c:	b2db      	uxtb	r3, r3
    8f3e:	461a      	mov	r2, r3
    8f40:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f48:	781b      	ldrb	r3, [r3, #0]
    8f4a:	1ad3      	subs	r3, r2, r3
    8f4c:	33ff      	adds	r3, #255	; 0xff
    8f4e:	2b08      	cmp	r3, #8
    8f50:	bfd4      	ite	le
    8f52:	2300      	movle	r3, #0
    8f54:	2301      	movgt	r3, #1
    8f56:	b2db      	uxtb	r3, r3
    8f58:	e011      	b.n	8f7e <send_adc+0xa2>
    8f5a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8f5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f62:	781b      	ldrb	r3, [r3, #0]
    8f64:	b2db      	uxtb	r3, r3
    8f66:	461a      	mov	r2, r3
    8f68:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f70:	781b      	ldrb	r3, [r3, #0]
    8f72:	1ad3      	subs	r3, r2, r3
    8f74:	2b08      	cmp	r3, #8
    8f76:	bfd4      	ite	le
    8f78:	2300      	movle	r3, #0
    8f7a:	2301      	movgt	r3, #1
    8f7c:	b2db      	uxtb	r3, r3
    8f7e:	2b00      	cmp	r3, #0
    8f80:	f000 8227 	beq.w	93d2 <send_adc+0x4f6>
    8f84:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f8c:	781b      	ldrb	r3, [r3, #0]
    8f8e:	461a      	mov	r2, r3
    8f90:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f98:	2105      	movs	r1, #5
    8f9a:	5499      	strb	r1, [r3, r2]
    8f9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fa4:	781b      	ldrb	r3, [r3, #0]
    8fa6:	3301      	adds	r3, #1
    8fa8:	b2da      	uxtb	r2, r3
    8faa:	f24c 5349 	movw	r3, #50505	; 0xc549
    8fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fb2:	701a      	strb	r2, [r3, #0]
    8fb4:	f24c 5349 	movw	r3, #50505	; 0xc549
    8fb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fbc:	781b      	ldrb	r3, [r3, #0]
    8fbe:	2bff      	cmp	r3, #255	; 0xff
    8fc0:	d105      	bne.n	8fce <send_adc+0xf2>
    8fc2:	f24c 5349 	movw	r3, #50505	; 0xc549
    8fc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fca:	2200      	movs	r2, #0
    8fcc:	701a      	strb	r2, [r3, #0]
    8fce:	f24c 5349 	movw	r3, #50505	; 0xc549
    8fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fd6:	781b      	ldrb	r3, [r3, #0]
    8fd8:	461a      	mov	r2, r3
    8fda:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8fde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fe2:	2107      	movs	r1, #7
    8fe4:	5499      	strb	r1, [r3, r2]
    8fe6:	f24c 5349 	movw	r3, #50505	; 0xc549
    8fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fee:	781b      	ldrb	r3, [r3, #0]
    8ff0:	3301      	adds	r3, #1
    8ff2:	b2da      	uxtb	r2, r3
    8ff4:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ffc:	701a      	strb	r2, [r3, #0]
    8ffe:	f24c 5349 	movw	r3, #50505	; 0xc549
    9002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9006:	781b      	ldrb	r3, [r3, #0]
    9008:	2bff      	cmp	r3, #255	; 0xff
    900a:	d105      	bne.n	9018 <send_adc+0x13c>
    900c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9014:	2200      	movs	r2, #0
    9016:	701a      	strb	r2, [r3, #0]
    9018:	f24c 634d 	movw	r3, #50765	; 0xc64d
    901c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9020:	2207      	movs	r2, #7
    9022:	701a      	strb	r2, [r3, #0]
    9024:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    902c:	2207      	movs	r2, #7
    902e:	701a      	strb	r2, [r3, #0]
    9030:	f24c 5349 	movw	r3, #50505	; 0xc549
    9034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9038:	781b      	ldrb	r3, [r3, #0]
    903a:	461a      	mov	r2, r3
    903c:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    9040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9044:	7819      	ldrb	r1, [r3, #0]
    9046:	f24c 534c 	movw	r3, #50508	; 0xc54c
    904a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    904e:	5499      	strb	r1, [r3, r2]
    9050:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    9054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9058:	781a      	ldrb	r2, [r3, #0]
    905a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    905e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9062:	781b      	ldrb	r3, [r3, #0]
    9064:	4413      	add	r3, r2
    9066:	b2da      	uxtb	r2, r3
    9068:	f24c 634d 	movw	r3, #50765	; 0xc64d
    906c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9070:	701a      	strb	r2, [r3, #0]
    9072:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    907a:	781a      	ldrb	r2, [r3, #0]
    907c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9084:	781b      	ldrb	r3, [r3, #0]
    9086:	4413      	add	r3, r2
    9088:	b2da      	uxtb	r2, r3
    908a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    908e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9092:	701a      	strb	r2, [r3, #0]
    9094:	f24c 5349 	movw	r3, #50505	; 0xc549
    9098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    909c:	781b      	ldrb	r3, [r3, #0]
    909e:	3301      	adds	r3, #1
    90a0:	b2da      	uxtb	r2, r3
    90a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    90a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90aa:	701a      	strb	r2, [r3, #0]
    90ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    90b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90b4:	781b      	ldrb	r3, [r3, #0]
    90b6:	2bff      	cmp	r3, #255	; 0xff
    90b8:	d105      	bne.n	90c6 <send_adc+0x1ea>
    90ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    90be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90c2:	2200      	movs	r2, #0
    90c4:	701a      	strb	r2, [r3, #0]
    90c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    90ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90ce:	781b      	ldrb	r3, [r3, #0]
    90d0:	461a      	mov	r2, r3
    90d2:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    90d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90da:	7859      	ldrb	r1, [r3, #1]
    90dc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    90e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90e4:	5499      	strb	r1, [r3, r2]
    90e6:	4bc3      	ldr	r3, [pc, #780]	; (93f4 <send_adc+0x518>)
    90e8:	781a      	ldrb	r2, [r3, #0]
    90ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    90ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90f2:	781b      	ldrb	r3, [r3, #0]
    90f4:	4413      	add	r3, r2
    90f6:	b2da      	uxtb	r2, r3
    90f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    90fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9100:	701a      	strb	r2, [r3, #0]
    9102:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    910a:	781a      	ldrb	r2, [r3, #0]
    910c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9114:	781b      	ldrb	r3, [r3, #0]
    9116:	4413      	add	r3, r2
    9118:	b2da      	uxtb	r2, r3
    911a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    911e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9122:	701a      	strb	r2, [r3, #0]
    9124:	f24c 5349 	movw	r3, #50505	; 0xc549
    9128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    912c:	781b      	ldrb	r3, [r3, #0]
    912e:	3301      	adds	r3, #1
    9130:	b2da      	uxtb	r2, r3
    9132:	f24c 5349 	movw	r3, #50505	; 0xc549
    9136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    913a:	701a      	strb	r2, [r3, #0]
    913c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9144:	781b      	ldrb	r3, [r3, #0]
    9146:	2bff      	cmp	r3, #255	; 0xff
    9148:	d105      	bne.n	9156 <send_adc+0x27a>
    914a:	f24c 5349 	movw	r3, #50505	; 0xc549
    914e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9152:	2200      	movs	r2, #0
    9154:	701a      	strb	r2, [r3, #0]
    9156:	f24c 5349 	movw	r3, #50505	; 0xc549
    915a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    915e:	781b      	ldrb	r3, [r3, #0]
    9160:	461a      	mov	r2, r3
    9162:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
    9166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    916a:	7819      	ldrb	r1, [r3, #0]
    916c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9170:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9174:	5499      	strb	r1, [r3, r2]
    9176:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
    917a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    917e:	781a      	ldrb	r2, [r3, #0]
    9180:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9188:	781b      	ldrb	r3, [r3, #0]
    918a:	4413      	add	r3, r2
    918c:	b2da      	uxtb	r2, r3
    918e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9196:	701a      	strb	r2, [r3, #0]
    9198:	f24c 634e 	movw	r3, #50766	; 0xc64e
    919c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91a0:	781a      	ldrb	r2, [r3, #0]
    91a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    91a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91aa:	781b      	ldrb	r3, [r3, #0]
    91ac:	4413      	add	r3, r2
    91ae:	b2da      	uxtb	r2, r3
    91b0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    91b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91b8:	701a      	strb	r2, [r3, #0]
    91ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    91be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91c2:	781b      	ldrb	r3, [r3, #0]
    91c4:	3301      	adds	r3, #1
    91c6:	b2da      	uxtb	r2, r3
    91c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    91cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91d0:	701a      	strb	r2, [r3, #0]
    91d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    91d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91da:	781b      	ldrb	r3, [r3, #0]
    91dc:	2bff      	cmp	r3, #255	; 0xff
    91de:	d105      	bne.n	91ec <send_adc+0x310>
    91e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    91e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91e8:	2200      	movs	r2, #0
    91ea:	701a      	strb	r2, [r3, #0]
    91ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    91f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91f4:	781b      	ldrb	r3, [r3, #0]
    91f6:	461a      	mov	r2, r3
    91f8:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
    91fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9200:	7859      	ldrb	r1, [r3, #1]
    9202:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    920a:	5499      	strb	r1, [r3, r2]
    920c:	4b7a      	ldr	r3, [pc, #488]	; (93f8 <send_adc+0x51c>)
    920e:	781a      	ldrb	r2, [r3, #0]
    9210:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9218:	781b      	ldrb	r3, [r3, #0]
    921a:	4413      	add	r3, r2
    921c:	b2da      	uxtb	r2, r3
    921e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9226:	701a      	strb	r2, [r3, #0]
    9228:	f24c 634e 	movw	r3, #50766	; 0xc64e
    922c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9230:	781a      	ldrb	r2, [r3, #0]
    9232:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    923a:	781b      	ldrb	r3, [r3, #0]
    923c:	4413      	add	r3, r2
    923e:	b2da      	uxtb	r2, r3
    9240:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9248:	701a      	strb	r2, [r3, #0]
    924a:	f24c 5349 	movw	r3, #50505	; 0xc549
    924e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9252:	781b      	ldrb	r3, [r3, #0]
    9254:	3301      	adds	r3, #1
    9256:	b2da      	uxtb	r2, r3
    9258:	f24c 5349 	movw	r3, #50505	; 0xc549
    925c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9260:	701a      	strb	r2, [r3, #0]
    9262:	f24c 5349 	movw	r3, #50505	; 0xc549
    9266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    926a:	781b      	ldrb	r3, [r3, #0]
    926c:	2bff      	cmp	r3, #255	; 0xff
    926e:	d105      	bne.n	927c <send_adc+0x3a0>
    9270:	f24c 5349 	movw	r3, #50505	; 0xc549
    9274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9278:	2200      	movs	r2, #0
    927a:	701a      	strb	r2, [r3, #0]
    927c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9284:	781b      	ldrb	r3, [r3, #0]
    9286:	461a      	mov	r2, r3
    9288:	f24c 634d 	movw	r3, #50765	; 0xc64d
    928c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9290:	7819      	ldrb	r1, [r3, #0]
    9292:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    929a:	5499      	strb	r1, [r3, r2]
    929c:	f24c 5349 	movw	r3, #50505	; 0xc549
    92a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92a4:	781b      	ldrb	r3, [r3, #0]
    92a6:	3301      	adds	r3, #1
    92a8:	b2da      	uxtb	r2, r3
    92aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    92ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92b2:	701a      	strb	r2, [r3, #0]
    92b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    92b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92bc:	781b      	ldrb	r3, [r3, #0]
    92be:	2bff      	cmp	r3, #255	; 0xff
    92c0:	d105      	bne.n	92ce <send_adc+0x3f2>
    92c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    92c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ca:	2200      	movs	r2, #0
    92cc:	701a      	strb	r2, [r3, #0]
    92ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    92d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92d6:	781b      	ldrb	r3, [r3, #0]
    92d8:	461a      	mov	r2, r3
    92da:	f24c 634e 	movw	r3, #50766	; 0xc64e
    92de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92e2:	7819      	ldrb	r1, [r3, #0]
    92e4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    92e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ec:	5499      	strb	r1, [r3, r2]
    92ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    92f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92f6:	781b      	ldrb	r3, [r3, #0]
    92f8:	3301      	adds	r3, #1
    92fa:	b2da      	uxtb	r2, r3
    92fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    9300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9304:	701a      	strb	r2, [r3, #0]
    9306:	f24c 5349 	movw	r3, #50505	; 0xc549
    930a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    930e:	781b      	ldrb	r3, [r3, #0]
    9310:	2bff      	cmp	r3, #255	; 0xff
    9312:	d105      	bne.n	9320 <send_adc+0x444>
    9314:	f24c 5349 	movw	r3, #50505	; 0xc549
    9318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    931c:	2200      	movs	r2, #0
    931e:	701a      	strb	r2, [r3, #0]
    9320:	f242 0339 	movw	r3, #8249	; 0x2039
    9324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9328:	781b      	ldrb	r3, [r3, #0]
    932a:	b2db      	uxtb	r3, r3
    932c:	f003 0310 	and.w	r3, r3, #16
    9330:	2b00      	cmp	r3, #0
    9332:	d15a      	bne.n	93ea <send_adc+0x50e>
    9334:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    933c:	781b      	ldrb	r3, [r3, #0]
    933e:	b2db      	uxtb	r3, r3
    9340:	461a      	mov	r2, r3
    9342:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9346:	f2c2 0304 	movt	r3, #8196	; 0x2004
    934a:	5c9a      	ldrb	r2, [r3, r2]
    934c:	f24c 634b 	movw	r3, #50763	; 0xc64b
    9350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9354:	701a      	strb	r2, [r3, #0]
    9356:	f24c 634c 	movw	r3, #50764	; 0xc64c
    935a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    935e:	2200      	movs	r2, #0
    9360:	701a      	strb	r2, [r3, #0]
    9362:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    936a:	781b      	ldrb	r3, [r3, #0]
    936c:	b2db      	uxtb	r3, r3
    936e:	3301      	adds	r3, #1
    9370:	b2da      	uxtb	r2, r3
    9372:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9376:	f2c2 0304 	movt	r3, #8196	; 0x2004
    937a:	701a      	strb	r2, [r3, #0]
    937c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9380:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9384:	781b      	ldrb	r3, [r3, #0]
    9386:	b2db      	uxtb	r3, r3
    9388:	2bff      	cmp	r3, #255	; 0xff
    938a:	d105      	bne.n	9398 <send_adc+0x4bc>
    938c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9394:	2200      	movs	r2, #0
    9396:	701a      	strb	r2, [r3, #0]
    9398:	f242 0338 	movw	r3, #8248	; 0x2038
    939c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93a0:	f242 0238 	movw	r2, #8248	; 0x2038
    93a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    93a8:	7812      	ldrb	r2, [r2, #0]
    93aa:	b2d2      	uxtb	r2, r2
    93ac:	f042 0201 	orr.w	r2, r2, #1
    93b0:	b2d2      	uxtb	r2, r2
    93b2:	701a      	strb	r2, [r3, #0]
    93b4:	f242 0339 	movw	r3, #8249	; 0x2039
    93b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93bc:	f242 0239 	movw	r2, #8249	; 0x2039
    93c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    93c4:	7812      	ldrb	r2, [r2, #0]
    93c6:	b2d2      	uxtb	r2, r2
    93c8:	f042 0210 	orr.w	r2, r2, #16
    93cc:	b2d2      	uxtb	r2, r2
    93ce:	701a      	strb	r2, [r3, #0]
    93d0:	e00b      	b.n	93ea <send_adc+0x50e>
    93d2:	f24c 5348 	movw	r3, #50504	; 0xc548
    93d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93da:	781b      	ldrb	r3, [r3, #0]
    93dc:	3301      	adds	r3, #1
    93de:	b2da      	uxtb	r2, r3
    93e0:	f24c 5348 	movw	r3, #50504	; 0xc548
    93e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93e8:	701a      	strb	r2, [r3, #0]
}
    93ea:	46bd      	mov	sp, r7
    93ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    93f0:	4770      	bx	lr
    93f2:	bf00      	nop
    93f4:	2004c7e9 	.word	0x2004c7e9
    93f8:	2004c7eb 	.word	0x2004c7eb

000093fc <send_settings>:
void send_settings(void){ //500ms
    93fc:	b480      	push	{r7}
    93fe:	af00      	add	r7, sp, #0
  if(!boot)
    9400:	f240 533d 	movw	r3, #1341	; 0x53d
    9404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9408:	781b      	ldrb	r3, [r3, #0]
    940a:	2b00      	cmp	r3, #0
    940c:	f040 83fb 	bne.w	9c06 <send_settings+0x80a>
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    9410:	f24c 5341 	movw	r3, #50497	; 0xc541
    9414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9418:	781a      	ldrb	r2, [r3, #0]
    941a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    941e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9422:	fba3 1302 	umull	r1, r3, r3, r2
    9426:	0899      	lsrs	r1, r3, #2
    9428:	460b      	mov	r3, r1
    942a:	009b      	lsls	r3, r3, #2
    942c:	440b      	add	r3, r1
    942e:	1ad3      	subs	r3, r2, r3
    9430:	b2db      	uxtb	r3, r3
    9432:	2b02      	cmp	r3, #2
    9434:	f040 83e7 	bne.w	9c06 <send_settings+0x80a>
    9438:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    943c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9440:	781b      	ldrb	r3, [r3, #0]
    9442:	2b00      	cmp	r3, #0
    9444:	f000 83df 	beq.w	9c06 <send_settings+0x80a>
    9448:	f24c 5349 	movw	r3, #50505	; 0xc549
    944c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9450:	781a      	ldrb	r2, [r3, #0]
    9452:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    945a:	781b      	ldrb	r3, [r3, #0]
    945c:	b2db      	uxtb	r3, r3
    945e:	429a      	cmp	r2, r3
    9460:	d313      	bcc.n	948a <send_settings+0x8e>
    9462:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    946a:	781b      	ldrb	r3, [r3, #0]
    946c:	b2db      	uxtb	r3, r3
    946e:	461a      	mov	r2, r3
    9470:	f24c 5349 	movw	r3, #50505	; 0xc549
    9474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9478:	781b      	ldrb	r3, [r3, #0]
    947a:	1ad3      	subs	r3, r2, r3
    947c:	33ff      	adds	r3, #255	; 0xff
    947e:	2b0d      	cmp	r3, #13
    9480:	bfd4      	ite	le
    9482:	2300      	movle	r3, #0
    9484:	2301      	movgt	r3, #1
    9486:	b2db      	uxtb	r3, r3
    9488:	e011      	b.n	94ae <send_settings+0xb2>
    948a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    948e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9492:	781b      	ldrb	r3, [r3, #0]
    9494:	b2db      	uxtb	r3, r3
    9496:	461a      	mov	r2, r3
    9498:	f24c 5349 	movw	r3, #50505	; 0xc549
    949c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94a0:	781b      	ldrb	r3, [r3, #0]
    94a2:	1ad3      	subs	r3, r2, r3
    94a4:	2b0d      	cmp	r3, #13
    94a6:	bfd4      	ite	le
    94a8:	2300      	movle	r3, #0
    94aa:	2301      	movgt	r3, #1
    94ac:	b2db      	uxtb	r3, r3
    94ae:	2b00      	cmp	r3, #0
    94b0:	f000 839d 	beq.w	9bee <send_settings+0x7f2>
    94b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    94b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94bc:	781b      	ldrb	r3, [r3, #0]
    94be:	461a      	mov	r2, r3
    94c0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    94c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94c8:	2105      	movs	r1, #5
    94ca:	5499      	strb	r1, [r3, r2]
    94cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    94d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94d4:	781b      	ldrb	r3, [r3, #0]
    94d6:	3301      	adds	r3, #1
    94d8:	b2da      	uxtb	r2, r3
    94da:	f24c 5349 	movw	r3, #50505	; 0xc549
    94de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94e2:	701a      	strb	r2, [r3, #0]
    94e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    94e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94ec:	781b      	ldrb	r3, [r3, #0]
    94ee:	2bff      	cmp	r3, #255	; 0xff
    94f0:	d105      	bne.n	94fe <send_settings+0x102>
    94f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    94f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94fa:	2200      	movs	r2, #0
    94fc:	701a      	strb	r2, [r3, #0]
    94fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    9502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9506:	781b      	ldrb	r3, [r3, #0]
    9508:	461a      	mov	r2, r3
    950a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    950e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9512:	2111      	movs	r1, #17
    9514:	5499      	strb	r1, [r3, r2]
    9516:	f24c 5349 	movw	r3, #50505	; 0xc549
    951a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    951e:	781b      	ldrb	r3, [r3, #0]
    9520:	3301      	adds	r3, #1
    9522:	b2da      	uxtb	r2, r3
    9524:	f24c 5349 	movw	r3, #50505	; 0xc549
    9528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    952c:	701a      	strb	r2, [r3, #0]
    952e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9536:	781b      	ldrb	r3, [r3, #0]
    9538:	2bff      	cmp	r3, #255	; 0xff
    953a:	d105      	bne.n	9548 <send_settings+0x14c>
    953c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9544:	2200      	movs	r2, #0
    9546:	701a      	strb	r2, [r3, #0]
    9548:	f24c 634d 	movw	r3, #50765	; 0xc64d
    954c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9550:	2211      	movs	r2, #17
    9552:	701a      	strb	r2, [r3, #0]
    9554:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    955c:	2211      	movs	r2, #17
    955e:	701a      	strb	r2, [r3, #0]
    9560:	f24c 5349 	movw	r3, #50505	; 0xc549
    9564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9568:	781b      	ldrb	r3, [r3, #0]
    956a:	461a      	mov	r2, r3
    956c:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    9570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9574:	7819      	ldrb	r1, [r3, #0]
    9576:	f24c 534c 	movw	r3, #50508	; 0xc54c
    957a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    957e:	5499      	strb	r1, [r3, r2]
    9580:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9588:	781a      	ldrb	r2, [r3, #0]
    958a:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    958e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9592:	781b      	ldrb	r3, [r3, #0]
    9594:	4413      	add	r3, r2
    9596:	b2da      	uxtb	r2, r3
    9598:	f24c 634d 	movw	r3, #50765	; 0xc64d
    959c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95a0:	701a      	strb	r2, [r3, #0]
    95a2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    95a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95aa:	781a      	ldrb	r2, [r3, #0]
    95ac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    95b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95b4:	781b      	ldrb	r3, [r3, #0]
    95b6:	4413      	add	r3, r2
    95b8:	b2da      	uxtb	r2, r3
    95ba:	f24c 634e 	movw	r3, #50766	; 0xc64e
    95be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95c2:	701a      	strb	r2, [r3, #0]
    95c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    95c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95cc:	781b      	ldrb	r3, [r3, #0]
    95ce:	3301      	adds	r3, #1
    95d0:	b2da      	uxtb	r2, r3
    95d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    95d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95da:	701a      	strb	r2, [r3, #0]
    95dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    95e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95e4:	781b      	ldrb	r3, [r3, #0]
    95e6:	2bff      	cmp	r3, #255	; 0xff
    95e8:	d105      	bne.n	95f6 <send_settings+0x1fa>
    95ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    95ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95f2:	2200      	movs	r2, #0
    95f4:	701a      	strb	r2, [r3, #0]
    95f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    95fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95fe:	781b      	ldrb	r3, [r3, #0]
    9600:	461a      	mov	r2, r3
    9602:	f24c 5338 	movw	r3, #50488	; 0xc538
    9606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    960a:	7819      	ldrb	r1, [r3, #0]
    960c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9614:	5499      	strb	r1, [r3, r2]
    9616:	f24c 5338 	movw	r3, #50488	; 0xc538
    961a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    961e:	781a      	ldrb	r2, [r3, #0]
    9620:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9628:	781b      	ldrb	r3, [r3, #0]
    962a:	4413      	add	r3, r2
    962c:	b2da      	uxtb	r2, r3
    962e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9636:	701a      	strb	r2, [r3, #0]
    9638:	f24c 634e 	movw	r3, #50766	; 0xc64e
    963c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9640:	781a      	ldrb	r2, [r3, #0]
    9642:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    964a:	781b      	ldrb	r3, [r3, #0]
    964c:	4413      	add	r3, r2
    964e:	b2da      	uxtb	r2, r3
    9650:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9658:	701a      	strb	r2, [r3, #0]
    965a:	f24c 5349 	movw	r3, #50505	; 0xc549
    965e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9662:	781b      	ldrb	r3, [r3, #0]
    9664:	3301      	adds	r3, #1
    9666:	b2da      	uxtb	r2, r3
    9668:	f24c 5349 	movw	r3, #50505	; 0xc549
    966c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9670:	701a      	strb	r2, [r3, #0]
    9672:	f24c 5349 	movw	r3, #50505	; 0xc549
    9676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    967a:	781b      	ldrb	r3, [r3, #0]
    967c:	2bff      	cmp	r3, #255	; 0xff
    967e:	d105      	bne.n	968c <send_settings+0x290>
    9680:	f24c 5349 	movw	r3, #50505	; 0xc549
    9684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9688:	2200      	movs	r2, #0
    968a:	701a      	strb	r2, [r3, #0]
    968c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9690:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9694:	781b      	ldrb	r3, [r3, #0]
    9696:	461a      	mov	r2, r3
    9698:	f24c 5338 	movw	r3, #50488	; 0xc538
    969c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96a0:	7859      	ldrb	r1, [r3, #1]
    96a2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    96a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96aa:	5499      	strb	r1, [r3, r2]
    96ac:	4bd1      	ldr	r3, [pc, #836]	; (99f4 <send_settings+0x5f8>)
    96ae:	781a      	ldrb	r2, [r3, #0]
    96b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    96b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96b8:	781b      	ldrb	r3, [r3, #0]
    96ba:	4413      	add	r3, r2
    96bc:	b2da      	uxtb	r2, r3
    96be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    96c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96c6:	701a      	strb	r2, [r3, #0]
    96c8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    96cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96d0:	781a      	ldrb	r2, [r3, #0]
    96d2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    96d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96da:	781b      	ldrb	r3, [r3, #0]
    96dc:	4413      	add	r3, r2
    96de:	b2da      	uxtb	r2, r3
    96e0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    96e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96e8:	701a      	strb	r2, [r3, #0]
    96ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    96ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96f2:	781b      	ldrb	r3, [r3, #0]
    96f4:	3301      	adds	r3, #1
    96f6:	b2da      	uxtb	r2, r3
    96f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    96fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9700:	701a      	strb	r2, [r3, #0]
    9702:	f24c 5349 	movw	r3, #50505	; 0xc549
    9706:	f2c2 0304 	movt	r3, #8196	; 0x2004
    970a:	781b      	ldrb	r3, [r3, #0]
    970c:	2bff      	cmp	r3, #255	; 0xff
    970e:	d105      	bne.n	971c <send_settings+0x320>
    9710:	f24c 5349 	movw	r3, #50505	; 0xc549
    9714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9718:	2200      	movs	r2, #0
    971a:	701a      	strb	r2, [r3, #0]
    971c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9724:	781b      	ldrb	r3, [r3, #0]
    9726:	461a      	mov	r2, r3
    9728:	f24c 5338 	movw	r3, #50488	; 0xc538
    972c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9730:	7899      	ldrb	r1, [r3, #2]
    9732:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    973a:	5499      	strb	r1, [r3, r2]
    973c:	4bae      	ldr	r3, [pc, #696]	; (99f8 <send_settings+0x5fc>)
    973e:	781a      	ldrb	r2, [r3, #0]
    9740:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9748:	781b      	ldrb	r3, [r3, #0]
    974a:	4413      	add	r3, r2
    974c:	b2da      	uxtb	r2, r3
    974e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9756:	701a      	strb	r2, [r3, #0]
    9758:	f24c 634e 	movw	r3, #50766	; 0xc64e
    975c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9760:	781a      	ldrb	r2, [r3, #0]
    9762:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    976a:	781b      	ldrb	r3, [r3, #0]
    976c:	4413      	add	r3, r2
    976e:	b2da      	uxtb	r2, r3
    9770:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9778:	701a      	strb	r2, [r3, #0]
    977a:	f24c 5349 	movw	r3, #50505	; 0xc549
    977e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9782:	781b      	ldrb	r3, [r3, #0]
    9784:	3301      	adds	r3, #1
    9786:	b2da      	uxtb	r2, r3
    9788:	f24c 5349 	movw	r3, #50505	; 0xc549
    978c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9790:	701a      	strb	r2, [r3, #0]
    9792:	f24c 5349 	movw	r3, #50505	; 0xc549
    9796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    979a:	781b      	ldrb	r3, [r3, #0]
    979c:	2bff      	cmp	r3, #255	; 0xff
    979e:	d105      	bne.n	97ac <send_settings+0x3b0>
    97a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    97a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97a8:	2200      	movs	r2, #0
    97aa:	701a      	strb	r2, [r3, #0]
    97ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    97b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97b4:	781b      	ldrb	r3, [r3, #0]
    97b6:	461a      	mov	r2, r3
    97b8:	f24c 5338 	movw	r3, #50488	; 0xc538
    97bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97c0:	78d9      	ldrb	r1, [r3, #3]
    97c2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    97c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ca:	5499      	strb	r1, [r3, r2]
    97cc:	4b8b      	ldr	r3, [pc, #556]	; (99fc <send_settings+0x600>)
    97ce:	781a      	ldrb	r2, [r3, #0]
    97d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    97d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97d8:	781b      	ldrb	r3, [r3, #0]
    97da:	4413      	add	r3, r2
    97dc:	b2da      	uxtb	r2, r3
    97de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    97e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97e6:	701a      	strb	r2, [r3, #0]
    97e8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    97ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97f0:	781a      	ldrb	r2, [r3, #0]
    97f2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    97f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97fa:	781b      	ldrb	r3, [r3, #0]
    97fc:	4413      	add	r3, r2
    97fe:	b2da      	uxtb	r2, r3
    9800:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9808:	701a      	strb	r2, [r3, #0]
    980a:	f24c 5349 	movw	r3, #50505	; 0xc549
    980e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9812:	781b      	ldrb	r3, [r3, #0]
    9814:	3301      	adds	r3, #1
    9816:	b2da      	uxtb	r2, r3
    9818:	f24c 5349 	movw	r3, #50505	; 0xc549
    981c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9820:	701a      	strb	r2, [r3, #0]
    9822:	f24c 5349 	movw	r3, #50505	; 0xc549
    9826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    982a:	781b      	ldrb	r3, [r3, #0]
    982c:	2bff      	cmp	r3, #255	; 0xff
    982e:	d105      	bne.n	983c <send_settings+0x440>
    9830:	f24c 5349 	movw	r3, #50505	; 0xc549
    9834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9838:	2200      	movs	r2, #0
    983a:	701a      	strb	r2, [r3, #0]
    983c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9844:	781b      	ldrb	r3, [r3, #0]
    9846:	461a      	mov	r2, r3
    9848:	f24c 533c 	movw	r3, #50492	; 0xc53c
    984c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9850:	7819      	ldrb	r1, [r3, #0]
    9852:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    985a:	5499      	strb	r1, [r3, r2]
    985c:	f24c 533c 	movw	r3, #50492	; 0xc53c
    9860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9864:	781a      	ldrb	r2, [r3, #0]
    9866:	f24c 634d 	movw	r3, #50765	; 0xc64d
    986a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    986e:	781b      	ldrb	r3, [r3, #0]
    9870:	4413      	add	r3, r2
    9872:	b2da      	uxtb	r2, r3
    9874:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    987c:	701a      	strb	r2, [r3, #0]
    987e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9886:	781a      	ldrb	r2, [r3, #0]
    9888:	f24c 634d 	movw	r3, #50765	; 0xc64d
    988c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9890:	781b      	ldrb	r3, [r3, #0]
    9892:	4413      	add	r3, r2
    9894:	b2da      	uxtb	r2, r3
    9896:	f24c 634e 	movw	r3, #50766	; 0xc64e
    989a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    989e:	701a      	strb	r2, [r3, #0]
    98a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    98a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98a8:	781b      	ldrb	r3, [r3, #0]
    98aa:	3301      	adds	r3, #1
    98ac:	b2da      	uxtb	r2, r3
    98ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    98b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98b6:	701a      	strb	r2, [r3, #0]
    98b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    98bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98c0:	781b      	ldrb	r3, [r3, #0]
    98c2:	2bff      	cmp	r3, #255	; 0xff
    98c4:	d105      	bne.n	98d2 <send_settings+0x4d6>
    98c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    98ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ce:	2200      	movs	r2, #0
    98d0:	701a      	strb	r2, [r3, #0]
    98d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    98d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98da:	781b      	ldrb	r3, [r3, #0]
    98dc:	461a      	mov	r2, r3
    98de:	f24c 533c 	movw	r3, #50492	; 0xc53c
    98e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98e6:	7859      	ldrb	r1, [r3, #1]
    98e8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    98ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98f0:	5499      	strb	r1, [r3, r2]
    98f2:	4b43      	ldr	r3, [pc, #268]	; (9a00 <send_settings+0x604>)
    98f4:	781a      	ldrb	r2, [r3, #0]
    98f6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    98fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98fe:	781b      	ldrb	r3, [r3, #0]
    9900:	4413      	add	r3, r2
    9902:	b2da      	uxtb	r2, r3
    9904:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    990c:	701a      	strb	r2, [r3, #0]
    990e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9916:	781a      	ldrb	r2, [r3, #0]
    9918:	f24c 634d 	movw	r3, #50765	; 0xc64d
    991c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9920:	781b      	ldrb	r3, [r3, #0]
    9922:	4413      	add	r3, r2
    9924:	b2da      	uxtb	r2, r3
    9926:	f24c 634e 	movw	r3, #50766	; 0xc64e
    992a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    992e:	701a      	strb	r2, [r3, #0]
    9930:	f24c 5349 	movw	r3, #50505	; 0xc549
    9934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9938:	781b      	ldrb	r3, [r3, #0]
    993a:	3301      	adds	r3, #1
    993c:	b2da      	uxtb	r2, r3
    993e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9946:	701a      	strb	r2, [r3, #0]
    9948:	f24c 5349 	movw	r3, #50505	; 0xc549
    994c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9950:	781b      	ldrb	r3, [r3, #0]
    9952:	2bff      	cmp	r3, #255	; 0xff
    9954:	d105      	bne.n	9962 <send_settings+0x566>
    9956:	f24c 5349 	movw	r3, #50505	; 0xc549
    995a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    995e:	2200      	movs	r2, #0
    9960:	701a      	strb	r2, [r3, #0]
    9962:	f24c 5349 	movw	r3, #50505	; 0xc549
    9966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    996a:	781b      	ldrb	r3, [r3, #0]
    996c:	461a      	mov	r2, r3
    996e:	f24c 533c 	movw	r3, #50492	; 0xc53c
    9972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9976:	7899      	ldrb	r1, [r3, #2]
    9978:	f24c 534c 	movw	r3, #50508	; 0xc54c
    997c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9980:	5499      	strb	r1, [r3, r2]
    9982:	4b20      	ldr	r3, [pc, #128]	; (9a04 <send_settings+0x608>)
    9984:	781a      	ldrb	r2, [r3, #0]
    9986:	f24c 634d 	movw	r3, #50765	; 0xc64d
    998a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    998e:	781b      	ldrb	r3, [r3, #0]
    9990:	4413      	add	r3, r2
    9992:	b2da      	uxtb	r2, r3
    9994:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    999c:	701a      	strb	r2, [r3, #0]
    999e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    99a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99a6:	781a      	ldrb	r2, [r3, #0]
    99a8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    99ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99b0:	781b      	ldrb	r3, [r3, #0]
    99b2:	4413      	add	r3, r2
    99b4:	b2da      	uxtb	r2, r3
    99b6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    99ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99be:	701a      	strb	r2, [r3, #0]
    99c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    99c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99c8:	781b      	ldrb	r3, [r3, #0]
    99ca:	3301      	adds	r3, #1
    99cc:	b2da      	uxtb	r2, r3
    99ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    99d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99d6:	701a      	strb	r2, [r3, #0]
    99d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    99dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99e0:	781b      	ldrb	r3, [r3, #0]
    99e2:	2bff      	cmp	r3, #255	; 0xff
    99e4:	d110      	bne.n	9a08 <send_settings+0x60c>
    99e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    99ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99ee:	2200      	movs	r2, #0
    99f0:	701a      	strb	r2, [r3, #0]
    99f2:	e009      	b.n	9a08 <send_settings+0x60c>
    99f4:	2004c539 	.word	0x2004c539
    99f8:	2004c53a 	.word	0x2004c53a
    99fc:	2004c53b 	.word	0x2004c53b
    9a00:	2004c53d 	.word	0x2004c53d
    9a04:	2004c53e 	.word	0x2004c53e
    9a08:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a10:	781b      	ldrb	r3, [r3, #0]
    9a12:	461a      	mov	r2, r3
    9a14:	f24c 533c 	movw	r3, #50492	; 0xc53c
    9a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a1c:	78d9      	ldrb	r1, [r3, #3]
    9a1e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a26:	5499      	strb	r1, [r3, r2]
    9a28:	4b79      	ldr	r3, [pc, #484]	; (9c10 <send_settings+0x814>)
    9a2a:	781a      	ldrb	r2, [r3, #0]
    9a2c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9a30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a34:	781b      	ldrb	r3, [r3, #0]
    9a36:	4413      	add	r3, r2
    9a38:	b2da      	uxtb	r2, r3
    9a3a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9a3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a42:	701a      	strb	r2, [r3, #0]
    9a44:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9a48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a4c:	781a      	ldrb	r2, [r3, #0]
    9a4e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a56:	781b      	ldrb	r3, [r3, #0]
    9a58:	4413      	add	r3, r2
    9a5a:	b2da      	uxtb	r2, r3
    9a5c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a64:	701a      	strb	r2, [r3, #0]
    9a66:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a6e:	781b      	ldrb	r3, [r3, #0]
    9a70:	3301      	adds	r3, #1
    9a72:	b2da      	uxtb	r2, r3
    9a74:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a7c:	701a      	strb	r2, [r3, #0]
    9a7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a86:	781b      	ldrb	r3, [r3, #0]
    9a88:	2bff      	cmp	r3, #255	; 0xff
    9a8a:	d105      	bne.n	9a98 <send_settings+0x69c>
    9a8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a94:	2200      	movs	r2, #0
    9a96:	701a      	strb	r2, [r3, #0]
    9a98:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aa0:	781b      	ldrb	r3, [r3, #0]
    9aa2:	461a      	mov	r2, r3
    9aa4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aac:	7819      	ldrb	r1, [r3, #0]
    9aae:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ab6:	5499      	strb	r1, [r3, r2]
    9ab8:	f24c 5349 	movw	r3, #50505	; 0xc549
    9abc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ac0:	781b      	ldrb	r3, [r3, #0]
    9ac2:	3301      	adds	r3, #1
    9ac4:	b2da      	uxtb	r2, r3
    9ac6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9aca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ace:	701a      	strb	r2, [r3, #0]
    9ad0:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ad8:	781b      	ldrb	r3, [r3, #0]
    9ada:	2bff      	cmp	r3, #255	; 0xff
    9adc:	d105      	bne.n	9aea <send_settings+0x6ee>
    9ade:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ae6:	2200      	movs	r2, #0
    9ae8:	701a      	strb	r2, [r3, #0]
    9aea:	f24c 5349 	movw	r3, #50505	; 0xc549
    9aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9af2:	781b      	ldrb	r3, [r3, #0]
    9af4:	461a      	mov	r2, r3
    9af6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9afe:	7819      	ldrb	r1, [r3, #0]
    9b00:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b08:	5499      	strb	r1, [r3, r2]
    9b0a:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b12:	781b      	ldrb	r3, [r3, #0]
    9b14:	3301      	adds	r3, #1
    9b16:	b2da      	uxtb	r2, r3
    9b18:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b20:	701a      	strb	r2, [r3, #0]
    9b22:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b2a:	781b      	ldrb	r3, [r3, #0]
    9b2c:	2bff      	cmp	r3, #255	; 0xff
    9b2e:	d105      	bne.n	9b3c <send_settings+0x740>
    9b30:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b38:	2200      	movs	r2, #0
    9b3a:	701a      	strb	r2, [r3, #0]
    9b3c:	f242 0339 	movw	r3, #8249	; 0x2039
    9b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b44:	781b      	ldrb	r3, [r3, #0]
    9b46:	b2db      	uxtb	r3, r3
    9b48:	f003 0310 	and.w	r3, r3, #16
    9b4c:	2b00      	cmp	r3, #0
    9b4e:	d15a      	bne.n	9c06 <send_settings+0x80a>
    9b50:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9b54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b58:	781b      	ldrb	r3, [r3, #0]
    9b5a:	b2db      	uxtb	r3, r3
    9b5c:	461a      	mov	r2, r3
    9b5e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9b62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b66:	5c9a      	ldrb	r2, [r3, r2]
    9b68:	f24c 634b 	movw	r3, #50763	; 0xc64b
    9b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b70:	701a      	strb	r2, [r3, #0]
    9b72:	f24c 634c 	movw	r3, #50764	; 0xc64c
    9b76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b7a:	2200      	movs	r2, #0
    9b7c:	701a      	strb	r2, [r3, #0]
    9b7e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b86:	781b      	ldrb	r3, [r3, #0]
    9b88:	b2db      	uxtb	r3, r3
    9b8a:	3301      	adds	r3, #1
    9b8c:	b2da      	uxtb	r2, r3
    9b8e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b96:	701a      	strb	r2, [r3, #0]
    9b98:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9b9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ba0:	781b      	ldrb	r3, [r3, #0]
    9ba2:	b2db      	uxtb	r3, r3
    9ba4:	2bff      	cmp	r3, #255	; 0xff
    9ba6:	d105      	bne.n	9bb4 <send_settings+0x7b8>
    9ba8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9bac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bb0:	2200      	movs	r2, #0
    9bb2:	701a      	strb	r2, [r3, #0]
    9bb4:	f242 0338 	movw	r3, #8248	; 0x2038
    9bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bbc:	f242 0238 	movw	r2, #8248	; 0x2038
    9bc0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9bc4:	7812      	ldrb	r2, [r2, #0]
    9bc6:	b2d2      	uxtb	r2, r2
    9bc8:	f042 0201 	orr.w	r2, r2, #1
    9bcc:	b2d2      	uxtb	r2, r2
    9bce:	701a      	strb	r2, [r3, #0]
    9bd0:	f242 0339 	movw	r3, #8249	; 0x2039
    9bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bd8:	f242 0239 	movw	r2, #8249	; 0x2039
    9bdc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9be0:	7812      	ldrb	r2, [r2, #0]
    9be2:	b2d2      	uxtb	r2, r2
    9be4:	f042 0210 	orr.w	r2, r2, #16
    9be8:	b2d2      	uxtb	r2, r2
    9bea:	701a      	strb	r2, [r3, #0]
    9bec:	e00b      	b.n	9c06 <send_settings+0x80a>
    9bee:	f24c 5348 	movw	r3, #50504	; 0xc548
    9bf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bf6:	781b      	ldrb	r3, [r3, #0]
    9bf8:	3301      	adds	r3, #1
    9bfa:	b2da      	uxtb	r2, r3
    9bfc:	f24c 5348 	movw	r3, #50504	; 0xc548
    9c00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c04:	701a      	strb	r2, [r3, #0]
}
    9c06:	46bd      	mov	sp, r7
    9c08:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c0c:	4770      	bx	lr
    9c0e:	bf00      	nop
    9c10:	2004c53f 	.word	0x2004c53f

00009c14 <send_desired>:
void send_desired(void){  //1000ms
    9c14:	b480      	push	{r7}
    9c16:	af00      	add	r7, sp, #0
  if(!boot)
    9c18:	f240 533d 	movw	r3, #1341	; 0x53d
    9c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c20:	781b      	ldrb	r3, [r3, #0]
    9c22:	2b00      	cmp	r3, #0
    9c24:	f040 8727 	bne.w	aa76 <send_desired+0xe62>
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9c28:	f24c 5341 	movw	r3, #50497	; 0xc541
    9c2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c30:	781a      	ldrb	r2, [r3, #0]
    9c32:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9c36:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9c3a:	fba3 1302 	umull	r1, r3, r3, r2
    9c3e:	08d9      	lsrs	r1, r3, #3
    9c40:	460b      	mov	r3, r1
    9c42:	009b      	lsls	r3, r3, #2
    9c44:	440b      	add	r3, r1
    9c46:	005b      	lsls	r3, r3, #1
    9c48:	1ad3      	subs	r3, r2, r3
    9c4a:	b2db      	uxtb	r3, r3
    9c4c:	2b03      	cmp	r3, #3
    9c4e:	f040 8712 	bne.w	aa76 <send_desired+0xe62>
    9c52:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c5a:	781a      	ldrb	r2, [r3, #0]
    9c5c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c64:	781b      	ldrb	r3, [r3, #0]
    9c66:	b2db      	uxtb	r3, r3
    9c68:	429a      	cmp	r2, r3
    9c6a:	d313      	bcc.n	9c94 <send_desired+0x80>
    9c6c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c74:	781b      	ldrb	r3, [r3, #0]
    9c76:	b2db      	uxtb	r3, r3
    9c78:	461a      	mov	r2, r3
    9c7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c82:	781b      	ldrb	r3, [r3, #0]
    9c84:	1ad3      	subs	r3, r2, r3
    9c86:	33ff      	adds	r3, #255	; 0xff
    9c88:	2b18      	cmp	r3, #24
    9c8a:	bfd4      	ite	le
    9c8c:	2300      	movle	r3, #0
    9c8e:	2301      	movgt	r3, #1
    9c90:	b2db      	uxtb	r3, r3
    9c92:	e011      	b.n	9cb8 <send_desired+0xa4>
    9c94:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c9c:	781b      	ldrb	r3, [r3, #0]
    9c9e:	b2db      	uxtb	r3, r3
    9ca0:	461a      	mov	r2, r3
    9ca2:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9caa:	781b      	ldrb	r3, [r3, #0]
    9cac:	1ad3      	subs	r3, r2, r3
    9cae:	2b18      	cmp	r3, #24
    9cb0:	bfd4      	ite	le
    9cb2:	2300      	movle	r3, #0
    9cb4:	2301      	movgt	r3, #1
    9cb6:	b2db      	uxtb	r3, r3
    9cb8:	2b00      	cmp	r3, #0
    9cba:	f000 86d0 	beq.w	aa5e <send_desired+0xe4a>
    9cbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    9cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cc6:	781b      	ldrb	r3, [r3, #0]
    9cc8:	461a      	mov	r2, r3
    9cca:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cd2:	2105      	movs	r1, #5
    9cd4:	5499      	strb	r1, [r3, r2]
    9cd6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9cda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cde:	781b      	ldrb	r3, [r3, #0]
    9ce0:	3301      	adds	r3, #1
    9ce2:	b2da      	uxtb	r2, r3
    9ce4:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cec:	701a      	strb	r2, [r3, #0]
    9cee:	f24c 5349 	movw	r3, #50505	; 0xc549
    9cf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cf6:	781b      	ldrb	r3, [r3, #0]
    9cf8:	2bff      	cmp	r3, #255	; 0xff
    9cfa:	d105      	bne.n	9d08 <send_desired+0xf4>
    9cfc:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d04:	2200      	movs	r2, #0
    9d06:	701a      	strb	r2, [r3, #0]
    9d08:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d10:	781b      	ldrb	r3, [r3, #0]
    9d12:	461a      	mov	r2, r3
    9d14:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9d18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d1c:	2112      	movs	r1, #18
    9d1e:	5499      	strb	r1, [r3, r2]
    9d20:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d28:	781b      	ldrb	r3, [r3, #0]
    9d2a:	3301      	adds	r3, #1
    9d2c:	b2da      	uxtb	r2, r3
    9d2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d36:	701a      	strb	r2, [r3, #0]
    9d38:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d40:	781b      	ldrb	r3, [r3, #0]
    9d42:	2bff      	cmp	r3, #255	; 0xff
    9d44:	d105      	bne.n	9d52 <send_desired+0x13e>
    9d46:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d4e:	2200      	movs	r2, #0
    9d50:	701a      	strb	r2, [r3, #0]
    9d52:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d5a:	2212      	movs	r2, #18
    9d5c:	701a      	strb	r2, [r3, #0]
    9d5e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d66:	2212      	movs	r2, #18
    9d68:	701a      	strb	r2, [r3, #0]
    9d6a:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d72:	781b      	ldrb	r3, [r3, #0]
    9d74:	461a      	mov	r2, r3
    9d76:	f64c 0374 	movw	r3, #51316	; 0xc874
    9d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d7e:	7819      	ldrb	r1, [r3, #0]
    9d80:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d88:	5499      	strb	r1, [r3, r2]
    9d8a:	f64c 0374 	movw	r3, #51316	; 0xc874
    9d8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d92:	781a      	ldrb	r2, [r3, #0]
    9d94:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9d98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d9c:	781b      	ldrb	r3, [r3, #0]
    9d9e:	4413      	add	r3, r2
    9da0:	b2da      	uxtb	r2, r3
    9da2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9daa:	701a      	strb	r2, [r3, #0]
    9dac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9db4:	781a      	ldrb	r2, [r3, #0]
    9db6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dbe:	781b      	ldrb	r3, [r3, #0]
    9dc0:	4413      	add	r3, r2
    9dc2:	b2da      	uxtb	r2, r3
    9dc4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dcc:	701a      	strb	r2, [r3, #0]
    9dce:	f24c 5349 	movw	r3, #50505	; 0xc549
    9dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dd6:	781b      	ldrb	r3, [r3, #0]
    9dd8:	3301      	adds	r3, #1
    9dda:	b2da      	uxtb	r2, r3
    9ddc:	f24c 5349 	movw	r3, #50505	; 0xc549
    9de0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9de4:	701a      	strb	r2, [r3, #0]
    9de6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dee:	781b      	ldrb	r3, [r3, #0]
    9df0:	2bff      	cmp	r3, #255	; 0xff
    9df2:	d105      	bne.n	9e00 <send_desired+0x1ec>
    9df4:	f24c 5349 	movw	r3, #50505	; 0xc549
    9df8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dfc:	2200      	movs	r2, #0
    9dfe:	701a      	strb	r2, [r3, #0]
    9e00:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e08:	781b      	ldrb	r3, [r3, #0]
    9e0a:	461a      	mov	r2, r3
    9e0c:	f64c 0374 	movw	r3, #51316	; 0xc874
    9e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e14:	7859      	ldrb	r1, [r3, #1]
    9e16:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e1e:	5499      	strb	r1, [r3, r2]
    9e20:	4bd1      	ldr	r3, [pc, #836]	; (a168 <send_desired+0x554>)
    9e22:	781a      	ldrb	r2, [r3, #0]
    9e24:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e2c:	781b      	ldrb	r3, [r3, #0]
    9e2e:	4413      	add	r3, r2
    9e30:	b2da      	uxtb	r2, r3
    9e32:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e3a:	701a      	strb	r2, [r3, #0]
    9e3c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e44:	781a      	ldrb	r2, [r3, #0]
    9e46:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e4e:	781b      	ldrb	r3, [r3, #0]
    9e50:	4413      	add	r3, r2
    9e52:	b2da      	uxtb	r2, r3
    9e54:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9e58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e5c:	701a      	strb	r2, [r3, #0]
    9e5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e66:	781b      	ldrb	r3, [r3, #0]
    9e68:	3301      	adds	r3, #1
    9e6a:	b2da      	uxtb	r2, r3
    9e6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e74:	701a      	strb	r2, [r3, #0]
    9e76:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e7e:	781b      	ldrb	r3, [r3, #0]
    9e80:	2bff      	cmp	r3, #255	; 0xff
    9e82:	d105      	bne.n	9e90 <send_desired+0x27c>
    9e84:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e8c:	2200      	movs	r2, #0
    9e8e:	701a      	strb	r2, [r3, #0]
    9e90:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e98:	781b      	ldrb	r3, [r3, #0]
    9e9a:	461a      	mov	r2, r3
    9e9c:	f64c 0374 	movw	r3, #51316	; 0xc874
    9ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ea4:	7899      	ldrb	r1, [r3, #2]
    9ea6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eae:	5499      	strb	r1, [r3, r2]
    9eb0:	4bae      	ldr	r3, [pc, #696]	; (a16c <send_desired+0x558>)
    9eb2:	781a      	ldrb	r2, [r3, #0]
    9eb4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9eb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ebc:	781b      	ldrb	r3, [r3, #0]
    9ebe:	4413      	add	r3, r2
    9ec0:	b2da      	uxtb	r2, r3
    9ec2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eca:	701a      	strb	r2, [r3, #0]
    9ecc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9ed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ed4:	781a      	ldrb	r2, [r3, #0]
    9ed6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ede:	781b      	ldrb	r3, [r3, #0]
    9ee0:	4413      	add	r3, r2
    9ee2:	b2da      	uxtb	r2, r3
    9ee4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9ee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eec:	701a      	strb	r2, [r3, #0]
    9eee:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ef6:	781b      	ldrb	r3, [r3, #0]
    9ef8:	3301      	adds	r3, #1
    9efa:	b2da      	uxtb	r2, r3
    9efc:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f04:	701a      	strb	r2, [r3, #0]
    9f06:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f0e:	781b      	ldrb	r3, [r3, #0]
    9f10:	2bff      	cmp	r3, #255	; 0xff
    9f12:	d105      	bne.n	9f20 <send_desired+0x30c>
    9f14:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f1c:	2200      	movs	r2, #0
    9f1e:	701a      	strb	r2, [r3, #0]
    9f20:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f28:	781b      	ldrb	r3, [r3, #0]
    9f2a:	461a      	mov	r2, r3
    9f2c:	f64c 0374 	movw	r3, #51316	; 0xc874
    9f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f34:	78d9      	ldrb	r1, [r3, #3]
    9f36:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9f3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f3e:	5499      	strb	r1, [r3, r2]
    9f40:	4b8b      	ldr	r3, [pc, #556]	; (a170 <send_desired+0x55c>)
    9f42:	781a      	ldrb	r2, [r3, #0]
    9f44:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f4c:	781b      	ldrb	r3, [r3, #0]
    9f4e:	4413      	add	r3, r2
    9f50:	b2da      	uxtb	r2, r3
    9f52:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f5a:	701a      	strb	r2, [r3, #0]
    9f5c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9f60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f64:	781a      	ldrb	r2, [r3, #0]
    9f66:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f6e:	781b      	ldrb	r3, [r3, #0]
    9f70:	4413      	add	r3, r2
    9f72:	b2da      	uxtb	r2, r3
    9f74:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f7c:	701a      	strb	r2, [r3, #0]
    9f7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f86:	781b      	ldrb	r3, [r3, #0]
    9f88:	3301      	adds	r3, #1
    9f8a:	b2da      	uxtb	r2, r3
    9f8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f94:	701a      	strb	r2, [r3, #0]
    9f96:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f9e:	781b      	ldrb	r3, [r3, #0]
    9fa0:	2bff      	cmp	r3, #255	; 0xff
    9fa2:	d105      	bne.n	9fb0 <send_desired+0x39c>
    9fa4:	f24c 5349 	movw	r3, #50505	; 0xc549
    9fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fac:	2200      	movs	r2, #0
    9fae:	701a      	strb	r2, [r3, #0]
    9fb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    9fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fb8:	781b      	ldrb	r3, [r3, #0]
    9fba:	461a      	mov	r2, r3
    9fbc:	f64c 0378 	movw	r3, #51320	; 0xc878
    9fc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fc4:	7819      	ldrb	r1, [r3, #0]
    9fc6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fce:	5499      	strb	r1, [r3, r2]
    9fd0:	f64c 0378 	movw	r3, #51320	; 0xc878
    9fd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fd8:	781a      	ldrb	r2, [r3, #0]
    9fda:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9fde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fe2:	781b      	ldrb	r3, [r3, #0]
    9fe4:	4413      	add	r3, r2
    9fe6:	b2da      	uxtb	r2, r3
    9fe8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ff0:	701a      	strb	r2, [r3, #0]
    9ff2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9ff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ffa:	781a      	ldrb	r2, [r3, #0]
    9ffc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a004:	781b      	ldrb	r3, [r3, #0]
    a006:	4413      	add	r3, r2
    a008:	b2da      	uxtb	r2, r3
    a00a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a00e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a012:	701a      	strb	r2, [r3, #0]
    a014:	f24c 5349 	movw	r3, #50505	; 0xc549
    a018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a01c:	781b      	ldrb	r3, [r3, #0]
    a01e:	3301      	adds	r3, #1
    a020:	b2da      	uxtb	r2, r3
    a022:	f24c 5349 	movw	r3, #50505	; 0xc549
    a026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a02a:	701a      	strb	r2, [r3, #0]
    a02c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a034:	781b      	ldrb	r3, [r3, #0]
    a036:	2bff      	cmp	r3, #255	; 0xff
    a038:	d105      	bne.n	a046 <send_desired+0x432>
    a03a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a03e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a042:	2200      	movs	r2, #0
    a044:	701a      	strb	r2, [r3, #0]
    a046:	f24c 5349 	movw	r3, #50505	; 0xc549
    a04a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a04e:	781b      	ldrb	r3, [r3, #0]
    a050:	461a      	mov	r2, r3
    a052:	f64c 0378 	movw	r3, #51320	; 0xc878
    a056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a05a:	7859      	ldrb	r1, [r3, #1]
    a05c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a064:	5499      	strb	r1, [r3, r2]
    a066:	4b43      	ldr	r3, [pc, #268]	; (a174 <send_desired+0x560>)
    a068:	781a      	ldrb	r2, [r3, #0]
    a06a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a06e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a072:	781b      	ldrb	r3, [r3, #0]
    a074:	4413      	add	r3, r2
    a076:	b2da      	uxtb	r2, r3
    a078:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a07c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a080:	701a      	strb	r2, [r3, #0]
    a082:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a08a:	781a      	ldrb	r2, [r3, #0]
    a08c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a090:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a094:	781b      	ldrb	r3, [r3, #0]
    a096:	4413      	add	r3, r2
    a098:	b2da      	uxtb	r2, r3
    a09a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a09e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0a2:	701a      	strb	r2, [r3, #0]
    a0a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ac:	781b      	ldrb	r3, [r3, #0]
    a0ae:	3301      	adds	r3, #1
    a0b0:	b2da      	uxtb	r2, r3
    a0b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ba:	701a      	strb	r2, [r3, #0]
    a0bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0c4:	781b      	ldrb	r3, [r3, #0]
    a0c6:	2bff      	cmp	r3, #255	; 0xff
    a0c8:	d105      	bne.n	a0d6 <send_desired+0x4c2>
    a0ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0d2:	2200      	movs	r2, #0
    a0d4:	701a      	strb	r2, [r3, #0]
    a0d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0de:	781b      	ldrb	r3, [r3, #0]
    a0e0:	461a      	mov	r2, r3
    a0e2:	f64c 0378 	movw	r3, #51320	; 0xc878
    a0e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ea:	7899      	ldrb	r1, [r3, #2]
    a0ec:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0f4:	5499      	strb	r1, [r3, r2]
    a0f6:	4b20      	ldr	r3, [pc, #128]	; (a178 <send_desired+0x564>)
    a0f8:	781a      	ldrb	r2, [r3, #0]
    a0fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a0fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a102:	781b      	ldrb	r3, [r3, #0]
    a104:	4413      	add	r3, r2
    a106:	b2da      	uxtb	r2, r3
    a108:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a10c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a110:	701a      	strb	r2, [r3, #0]
    a112:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a11a:	781a      	ldrb	r2, [r3, #0]
    a11c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a124:	781b      	ldrb	r3, [r3, #0]
    a126:	4413      	add	r3, r2
    a128:	b2da      	uxtb	r2, r3
    a12a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a12e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a132:	701a      	strb	r2, [r3, #0]
    a134:	f24c 5349 	movw	r3, #50505	; 0xc549
    a138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a13c:	781b      	ldrb	r3, [r3, #0]
    a13e:	3301      	adds	r3, #1
    a140:	b2da      	uxtb	r2, r3
    a142:	f24c 5349 	movw	r3, #50505	; 0xc549
    a146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a14a:	701a      	strb	r2, [r3, #0]
    a14c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a154:	781b      	ldrb	r3, [r3, #0]
    a156:	2bff      	cmp	r3, #255	; 0xff
    a158:	d110      	bne.n	a17c <send_desired+0x568>
    a15a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a15e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a162:	2200      	movs	r2, #0
    a164:	701a      	strb	r2, [r3, #0]
    a166:	e009      	b.n	a17c <send_desired+0x568>
    a168:	2004c875 	.word	0x2004c875
    a16c:	2004c876 	.word	0x2004c876
    a170:	2004c877 	.word	0x2004c877
    a174:	2004c879 	.word	0x2004c879
    a178:	2004c87a 	.word	0x2004c87a
    a17c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a184:	781b      	ldrb	r3, [r3, #0]
    a186:	461a      	mov	r2, r3
    a188:	f64c 0378 	movw	r3, #51320	; 0xc878
    a18c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a190:	78d9      	ldrb	r1, [r3, #3]
    a192:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a19a:	5499      	strb	r1, [r3, r2]
    a19c:	4bd3      	ldr	r3, [pc, #844]	; (a4ec <send_desired+0x8d8>)
    a19e:	781a      	ldrb	r2, [r3, #0]
    a1a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a1a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1a8:	781b      	ldrb	r3, [r3, #0]
    a1aa:	4413      	add	r3, r2
    a1ac:	b2da      	uxtb	r2, r3
    a1ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a1b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1b6:	701a      	strb	r2, [r3, #0]
    a1b8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1c0:	781a      	ldrb	r2, [r3, #0]
    a1c2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a1c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ca:	781b      	ldrb	r3, [r3, #0]
    a1cc:	4413      	add	r3, r2
    a1ce:	b2da      	uxtb	r2, r3
    a1d0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a1d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1d8:	701a      	strb	r2, [r3, #0]
    a1da:	f24c 5349 	movw	r3, #50505	; 0xc549
    a1de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1e2:	781b      	ldrb	r3, [r3, #0]
    a1e4:	3301      	adds	r3, #1
    a1e6:	b2da      	uxtb	r2, r3
    a1e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a1ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1f0:	701a      	strb	r2, [r3, #0]
    a1f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a1f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1fa:	781b      	ldrb	r3, [r3, #0]
    a1fc:	2bff      	cmp	r3, #255	; 0xff
    a1fe:	d105      	bne.n	a20c <send_desired+0x5f8>
    a200:	f24c 5349 	movw	r3, #50505	; 0xc549
    a204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a208:	2200      	movs	r2, #0
    a20a:	701a      	strb	r2, [r3, #0]
    a20c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a214:	781b      	ldrb	r3, [r3, #0]
    a216:	461a      	mov	r2, r3
    a218:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a21c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a220:	7819      	ldrb	r1, [r3, #0]
    a222:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a22a:	5499      	strb	r1, [r3, r2]
    a22c:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a234:	781a      	ldrb	r2, [r3, #0]
    a236:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a23e:	781b      	ldrb	r3, [r3, #0]
    a240:	4413      	add	r3, r2
    a242:	b2da      	uxtb	r2, r3
    a244:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a24c:	701a      	strb	r2, [r3, #0]
    a24e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a256:	781a      	ldrb	r2, [r3, #0]
    a258:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a25c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a260:	781b      	ldrb	r3, [r3, #0]
    a262:	4413      	add	r3, r2
    a264:	b2da      	uxtb	r2, r3
    a266:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a26e:	701a      	strb	r2, [r3, #0]
    a270:	f24c 5349 	movw	r3, #50505	; 0xc549
    a274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a278:	781b      	ldrb	r3, [r3, #0]
    a27a:	3301      	adds	r3, #1
    a27c:	b2da      	uxtb	r2, r3
    a27e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a286:	701a      	strb	r2, [r3, #0]
    a288:	f24c 5349 	movw	r3, #50505	; 0xc549
    a28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a290:	781b      	ldrb	r3, [r3, #0]
    a292:	2bff      	cmp	r3, #255	; 0xff
    a294:	d105      	bne.n	a2a2 <send_desired+0x68e>
    a296:	f24c 5349 	movw	r3, #50505	; 0xc549
    a29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a29e:	2200      	movs	r2, #0
    a2a0:	701a      	strb	r2, [r3, #0]
    a2a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2aa:	781b      	ldrb	r3, [r3, #0]
    a2ac:	461a      	mov	r2, r3
    a2ae:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a2b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2b6:	7859      	ldrb	r1, [r3, #1]
    a2b8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a2bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2c0:	5499      	strb	r1, [r3, r2]
    a2c2:	4b8b      	ldr	r3, [pc, #556]	; (a4f0 <send_desired+0x8dc>)
    a2c4:	781a      	ldrb	r2, [r3, #0]
    a2c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a2ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2ce:	781b      	ldrb	r3, [r3, #0]
    a2d0:	4413      	add	r3, r2
    a2d2:	b2da      	uxtb	r2, r3
    a2d4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a2d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2dc:	701a      	strb	r2, [r3, #0]
    a2de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2e6:	781a      	ldrb	r2, [r3, #0]
    a2e8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a2ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2f0:	781b      	ldrb	r3, [r3, #0]
    a2f2:	4413      	add	r3, r2
    a2f4:	b2da      	uxtb	r2, r3
    a2f6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2fe:	701a      	strb	r2, [r3, #0]
    a300:	f24c 5349 	movw	r3, #50505	; 0xc549
    a304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a308:	781b      	ldrb	r3, [r3, #0]
    a30a:	3301      	adds	r3, #1
    a30c:	b2da      	uxtb	r2, r3
    a30e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a316:	701a      	strb	r2, [r3, #0]
    a318:	f24c 5349 	movw	r3, #50505	; 0xc549
    a31c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a320:	781b      	ldrb	r3, [r3, #0]
    a322:	2bff      	cmp	r3, #255	; 0xff
    a324:	d105      	bne.n	a332 <send_desired+0x71e>
    a326:	f24c 5349 	movw	r3, #50505	; 0xc549
    a32a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a32e:	2200      	movs	r2, #0
    a330:	701a      	strb	r2, [r3, #0]
    a332:	f24c 5349 	movw	r3, #50505	; 0xc549
    a336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a33a:	781b      	ldrb	r3, [r3, #0]
    a33c:	461a      	mov	r2, r3
    a33e:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a346:	7899      	ldrb	r1, [r3, #2]
    a348:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a34c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a350:	5499      	strb	r1, [r3, r2]
    a352:	4b68      	ldr	r3, [pc, #416]	; (a4f4 <send_desired+0x8e0>)
    a354:	781a      	ldrb	r2, [r3, #0]
    a356:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a35e:	781b      	ldrb	r3, [r3, #0]
    a360:	4413      	add	r3, r2
    a362:	b2da      	uxtb	r2, r3
    a364:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a36c:	701a      	strb	r2, [r3, #0]
    a36e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a376:	781a      	ldrb	r2, [r3, #0]
    a378:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a37c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a380:	781b      	ldrb	r3, [r3, #0]
    a382:	4413      	add	r3, r2
    a384:	b2da      	uxtb	r2, r3
    a386:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a38a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a38e:	701a      	strb	r2, [r3, #0]
    a390:	f24c 5349 	movw	r3, #50505	; 0xc549
    a394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a398:	781b      	ldrb	r3, [r3, #0]
    a39a:	3301      	adds	r3, #1
    a39c:	b2da      	uxtb	r2, r3
    a39e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3a6:	701a      	strb	r2, [r3, #0]
    a3a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3b0:	781b      	ldrb	r3, [r3, #0]
    a3b2:	2bff      	cmp	r3, #255	; 0xff
    a3b4:	d105      	bne.n	a3c2 <send_desired+0x7ae>
    a3b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3be:	2200      	movs	r2, #0
    a3c0:	701a      	strb	r2, [r3, #0]
    a3c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ca:	781b      	ldrb	r3, [r3, #0]
    a3cc:	461a      	mov	r2, r3
    a3ce:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a3d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3d6:	78d9      	ldrb	r1, [r3, #3]
    a3d8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a3dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3e0:	5499      	strb	r1, [r3, r2]
    a3e2:	4b45      	ldr	r3, [pc, #276]	; (a4f8 <send_desired+0x8e4>)
    a3e4:	781a      	ldrb	r2, [r3, #0]
    a3e6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a3ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ee:	781b      	ldrb	r3, [r3, #0]
    a3f0:	4413      	add	r3, r2
    a3f2:	b2da      	uxtb	r2, r3
    a3f4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3fc:	701a      	strb	r2, [r3, #0]
    a3fe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a406:	781a      	ldrb	r2, [r3, #0]
    a408:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a40c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a410:	781b      	ldrb	r3, [r3, #0]
    a412:	4413      	add	r3, r2
    a414:	b2da      	uxtb	r2, r3
    a416:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a41a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a41e:	701a      	strb	r2, [r3, #0]
    a420:	f24c 5349 	movw	r3, #50505	; 0xc549
    a424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a428:	781b      	ldrb	r3, [r3, #0]
    a42a:	3301      	adds	r3, #1
    a42c:	b2da      	uxtb	r2, r3
    a42e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a436:	701a      	strb	r2, [r3, #0]
    a438:	f24c 5349 	movw	r3, #50505	; 0xc549
    a43c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a440:	781b      	ldrb	r3, [r3, #0]
    a442:	2bff      	cmp	r3, #255	; 0xff
    a444:	d105      	bne.n	a452 <send_desired+0x83e>
    a446:	f24c 5349 	movw	r3, #50505	; 0xc549
    a44a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a44e:	2200      	movs	r2, #0
    a450:	701a      	strb	r2, [r3, #0]
    a452:	f24c 5349 	movw	r3, #50505	; 0xc549
    a456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a45a:	781b      	ldrb	r3, [r3, #0]
    a45c:	461a      	mov	r2, r3
    a45e:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a466:	7819      	ldrb	r1, [r3, #0]
    a468:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a46c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a470:	5499      	strb	r1, [r3, r2]
    a472:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a47a:	781a      	ldrb	r2, [r3, #0]
    a47c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a484:	781b      	ldrb	r3, [r3, #0]
    a486:	4413      	add	r3, r2
    a488:	b2da      	uxtb	r2, r3
    a48a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a48e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a492:	701a      	strb	r2, [r3, #0]
    a494:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a49c:	781a      	ldrb	r2, [r3, #0]
    a49e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a4a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4a6:	781b      	ldrb	r3, [r3, #0]
    a4a8:	4413      	add	r3, r2
    a4aa:	b2da      	uxtb	r2, r3
    a4ac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a4b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4b4:	701a      	strb	r2, [r3, #0]
    a4b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a4ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4be:	781b      	ldrb	r3, [r3, #0]
    a4c0:	3301      	adds	r3, #1
    a4c2:	b2da      	uxtb	r2, r3
    a4c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    a4c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4cc:	701a      	strb	r2, [r3, #0]
    a4ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    a4d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4d6:	781b      	ldrb	r3, [r3, #0]
    a4d8:	2bff      	cmp	r3, #255	; 0xff
    a4da:	d10f      	bne.n	a4fc <send_desired+0x8e8>
    a4dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    a4e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4e4:	2200      	movs	r2, #0
    a4e6:	701a      	strb	r2, [r3, #0]
    a4e8:	e008      	b.n	a4fc <send_desired+0x8e8>
    a4ea:	bf00      	nop
    a4ec:	2004c87b 	.word	0x2004c87b
    a4f0:	2004c8c1 	.word	0x2004c8c1
    a4f4:	2004c8c2 	.word	0x2004c8c2
    a4f8:	2004c8c3 	.word	0x2004c8c3
    a4fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    a500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a504:	781b      	ldrb	r3, [r3, #0]
    a506:	461a      	mov	r2, r3
    a508:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a50c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a510:	7859      	ldrb	r1, [r3, #1]
    a512:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a51a:	5499      	strb	r1, [r3, r2]
    a51c:	4bd1      	ldr	r3, [pc, #836]	; (a864 <send_desired+0xc50>)
    a51e:	781a      	ldrb	r2, [r3, #0]
    a520:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a528:	781b      	ldrb	r3, [r3, #0]
    a52a:	4413      	add	r3, r2
    a52c:	b2da      	uxtb	r2, r3
    a52e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a536:	701a      	strb	r2, [r3, #0]
    a538:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a53c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a540:	781a      	ldrb	r2, [r3, #0]
    a542:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a54a:	781b      	ldrb	r3, [r3, #0]
    a54c:	4413      	add	r3, r2
    a54e:	b2da      	uxtb	r2, r3
    a550:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a558:	701a      	strb	r2, [r3, #0]
    a55a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a562:	781b      	ldrb	r3, [r3, #0]
    a564:	3301      	adds	r3, #1
    a566:	b2da      	uxtb	r2, r3
    a568:	f24c 5349 	movw	r3, #50505	; 0xc549
    a56c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a570:	701a      	strb	r2, [r3, #0]
    a572:	f24c 5349 	movw	r3, #50505	; 0xc549
    a576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a57a:	781b      	ldrb	r3, [r3, #0]
    a57c:	2bff      	cmp	r3, #255	; 0xff
    a57e:	d105      	bne.n	a58c <send_desired+0x978>
    a580:	f24c 5349 	movw	r3, #50505	; 0xc549
    a584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a588:	2200      	movs	r2, #0
    a58a:	701a      	strb	r2, [r3, #0]
    a58c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a594:	781b      	ldrb	r3, [r3, #0]
    a596:	461a      	mov	r2, r3
    a598:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a59c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5a0:	7899      	ldrb	r1, [r3, #2]
    a5a2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a5a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5aa:	5499      	strb	r1, [r3, r2]
    a5ac:	4bae      	ldr	r3, [pc, #696]	; (a868 <send_desired+0xc54>)
    a5ae:	781a      	ldrb	r2, [r3, #0]
    a5b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a5b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5b8:	781b      	ldrb	r3, [r3, #0]
    a5ba:	4413      	add	r3, r2
    a5bc:	b2da      	uxtb	r2, r3
    a5be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a5c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5c6:	701a      	strb	r2, [r3, #0]
    a5c8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a5cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5d0:	781a      	ldrb	r2, [r3, #0]
    a5d2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a5d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5da:	781b      	ldrb	r3, [r3, #0]
    a5dc:	4413      	add	r3, r2
    a5de:	b2da      	uxtb	r2, r3
    a5e0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a5e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5e8:	701a      	strb	r2, [r3, #0]
    a5ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    a5ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5f2:	781b      	ldrb	r3, [r3, #0]
    a5f4:	3301      	adds	r3, #1
    a5f6:	b2da      	uxtb	r2, r3
    a5f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a5fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a600:	701a      	strb	r2, [r3, #0]
    a602:	f24c 5349 	movw	r3, #50505	; 0xc549
    a606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a60a:	781b      	ldrb	r3, [r3, #0]
    a60c:	2bff      	cmp	r3, #255	; 0xff
    a60e:	d105      	bne.n	a61c <send_desired+0xa08>
    a610:	f24c 5349 	movw	r3, #50505	; 0xc549
    a614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a618:	2200      	movs	r2, #0
    a61a:	701a      	strb	r2, [r3, #0]
    a61c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a624:	781b      	ldrb	r3, [r3, #0]
    a626:	461a      	mov	r2, r3
    a628:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a630:	78d9      	ldrb	r1, [r3, #3]
    a632:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a63a:	5499      	strb	r1, [r3, r2]
    a63c:	4b8b      	ldr	r3, [pc, #556]	; (a86c <send_desired+0xc58>)
    a63e:	781a      	ldrb	r2, [r3, #0]
    a640:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a648:	781b      	ldrb	r3, [r3, #0]
    a64a:	4413      	add	r3, r2
    a64c:	b2da      	uxtb	r2, r3
    a64e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a656:	701a      	strb	r2, [r3, #0]
    a658:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a65c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a660:	781a      	ldrb	r2, [r3, #0]
    a662:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a666:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a66a:	781b      	ldrb	r3, [r3, #0]
    a66c:	4413      	add	r3, r2
    a66e:	b2da      	uxtb	r2, r3
    a670:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a678:	701a      	strb	r2, [r3, #0]
    a67a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a67e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a682:	781b      	ldrb	r3, [r3, #0]
    a684:	3301      	adds	r3, #1
    a686:	b2da      	uxtb	r2, r3
    a688:	f24c 5349 	movw	r3, #50505	; 0xc549
    a68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a690:	701a      	strb	r2, [r3, #0]
    a692:	f24c 5349 	movw	r3, #50505	; 0xc549
    a696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a69a:	781b      	ldrb	r3, [r3, #0]
    a69c:	2bff      	cmp	r3, #255	; 0xff
    a69e:	d105      	bne.n	a6ac <send_desired+0xa98>
    a6a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6a8:	2200      	movs	r2, #0
    a6aa:	701a      	strb	r2, [r3, #0]
    a6ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6b4:	781b      	ldrb	r3, [r3, #0]
    a6b6:	461a      	mov	r2, r3
    a6b8:	f240 5374 	movw	r3, #1396	; 0x574
    a6bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6c0:	7819      	ldrb	r1, [r3, #0]
    a6c2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a6c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ca:	5499      	strb	r1, [r3, r2]
    a6cc:	f240 5374 	movw	r3, #1396	; 0x574
    a6d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6d4:	781a      	ldrb	r2, [r3, #0]
    a6d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a6da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6de:	781b      	ldrb	r3, [r3, #0]
    a6e0:	4413      	add	r3, r2
    a6e2:	b2da      	uxtb	r2, r3
    a6e4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a6e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ec:	701a      	strb	r2, [r3, #0]
    a6ee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a6f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6f6:	781a      	ldrb	r2, [r3, #0]
    a6f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a6fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a700:	781b      	ldrb	r3, [r3, #0]
    a702:	4413      	add	r3, r2
    a704:	b2da      	uxtb	r2, r3
    a706:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a70a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a70e:	701a      	strb	r2, [r3, #0]
    a710:	f24c 5349 	movw	r3, #50505	; 0xc549
    a714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a718:	781b      	ldrb	r3, [r3, #0]
    a71a:	3301      	adds	r3, #1
    a71c:	b2da      	uxtb	r2, r3
    a71e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a726:	701a      	strb	r2, [r3, #0]
    a728:	f24c 5349 	movw	r3, #50505	; 0xc549
    a72c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a730:	781b      	ldrb	r3, [r3, #0]
    a732:	2bff      	cmp	r3, #255	; 0xff
    a734:	d105      	bne.n	a742 <send_desired+0xb2e>
    a736:	f24c 5349 	movw	r3, #50505	; 0xc549
    a73a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a73e:	2200      	movs	r2, #0
    a740:	701a      	strb	r2, [r3, #0]
    a742:	f24c 5349 	movw	r3, #50505	; 0xc549
    a746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a74a:	781b      	ldrb	r3, [r3, #0]
    a74c:	461a      	mov	r2, r3
    a74e:	f240 5374 	movw	r3, #1396	; 0x574
    a752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a756:	7859      	ldrb	r1, [r3, #1]
    a758:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a75c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a760:	5499      	strb	r1, [r3, r2]
    a762:	4b43      	ldr	r3, [pc, #268]	; (a870 <send_desired+0xc5c>)
    a764:	781a      	ldrb	r2, [r3, #0]
    a766:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a76a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a76e:	781b      	ldrb	r3, [r3, #0]
    a770:	4413      	add	r3, r2
    a772:	b2da      	uxtb	r2, r3
    a774:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a77c:	701a      	strb	r2, [r3, #0]
    a77e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a786:	781a      	ldrb	r2, [r3, #0]
    a788:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a78c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a790:	781b      	ldrb	r3, [r3, #0]
    a792:	4413      	add	r3, r2
    a794:	b2da      	uxtb	r2, r3
    a796:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a79a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a79e:	701a      	strb	r2, [r3, #0]
    a7a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7a8:	781b      	ldrb	r3, [r3, #0]
    a7aa:	3301      	adds	r3, #1
    a7ac:	b2da      	uxtb	r2, r3
    a7ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7b6:	701a      	strb	r2, [r3, #0]
    a7b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7c0:	781b      	ldrb	r3, [r3, #0]
    a7c2:	2bff      	cmp	r3, #255	; 0xff
    a7c4:	d105      	bne.n	a7d2 <send_desired+0xbbe>
    a7c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7ce:	2200      	movs	r2, #0
    a7d0:	701a      	strb	r2, [r3, #0]
    a7d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7da:	781b      	ldrb	r3, [r3, #0]
    a7dc:	461a      	mov	r2, r3
    a7de:	f240 5374 	movw	r3, #1396	; 0x574
    a7e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7e6:	7899      	ldrb	r1, [r3, #2]
    a7e8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7f0:	5499      	strb	r1, [r3, r2]
    a7f2:	4b20      	ldr	r3, [pc, #128]	; (a874 <send_desired+0xc60>)
    a7f4:	781a      	ldrb	r2, [r3, #0]
    a7f6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a7fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7fe:	781b      	ldrb	r3, [r3, #0]
    a800:	4413      	add	r3, r2
    a802:	b2da      	uxtb	r2, r3
    a804:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a80c:	701a      	strb	r2, [r3, #0]
    a80e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a816:	781a      	ldrb	r2, [r3, #0]
    a818:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a81c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a820:	781b      	ldrb	r3, [r3, #0]
    a822:	4413      	add	r3, r2
    a824:	b2da      	uxtb	r2, r3
    a826:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a82a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a82e:	701a      	strb	r2, [r3, #0]
    a830:	f24c 5349 	movw	r3, #50505	; 0xc549
    a834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a838:	781b      	ldrb	r3, [r3, #0]
    a83a:	3301      	adds	r3, #1
    a83c:	b2da      	uxtb	r2, r3
    a83e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a846:	701a      	strb	r2, [r3, #0]
    a848:	f24c 5349 	movw	r3, #50505	; 0xc549
    a84c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a850:	781b      	ldrb	r3, [r3, #0]
    a852:	2bff      	cmp	r3, #255	; 0xff
    a854:	d110      	bne.n	a878 <send_desired+0xc64>
    a856:	f24c 5349 	movw	r3, #50505	; 0xc549
    a85a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a85e:	2200      	movs	r2, #0
    a860:	701a      	strb	r2, [r3, #0]
    a862:	e009      	b.n	a878 <send_desired+0xc64>
    a864:	2004c8c5 	.word	0x2004c8c5
    a868:	2004c8c6 	.word	0x2004c8c6
    a86c:	2004c8c7 	.word	0x2004c8c7
    a870:	20000575 	.word	0x20000575
    a874:	20000576 	.word	0x20000576
    a878:	f24c 5349 	movw	r3, #50505	; 0xc549
    a87c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a880:	781b      	ldrb	r3, [r3, #0]
    a882:	461a      	mov	r2, r3
    a884:	f240 5374 	movw	r3, #1396	; 0x574
    a888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a88c:	78d9      	ldrb	r1, [r3, #3]
    a88e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a896:	5499      	strb	r1, [r3, r2]
    a898:	4b79      	ldr	r3, [pc, #484]	; (aa80 <send_desired+0xe6c>)
    a89a:	781a      	ldrb	r2, [r3, #0]
    a89c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a8a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8a4:	781b      	ldrb	r3, [r3, #0]
    a8a6:	4413      	add	r3, r2
    a8a8:	b2da      	uxtb	r2, r3
    a8aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a8ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8b2:	701a      	strb	r2, [r3, #0]
    a8b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a8b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8bc:	781a      	ldrb	r2, [r3, #0]
    a8be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8c6:	781b      	ldrb	r3, [r3, #0]
    a8c8:	4413      	add	r3, r2
    a8ca:	b2da      	uxtb	r2, r3
    a8cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a8d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8d4:	701a      	strb	r2, [r3, #0]
    a8d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8de:	781b      	ldrb	r3, [r3, #0]
    a8e0:	3301      	adds	r3, #1
    a8e2:	b2da      	uxtb	r2, r3
    a8e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8ec:	701a      	strb	r2, [r3, #0]
    a8ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8f6:	781b      	ldrb	r3, [r3, #0]
    a8f8:	2bff      	cmp	r3, #255	; 0xff
    a8fa:	d105      	bne.n	a908 <send_desired+0xcf4>
    a8fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    a900:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a904:	2200      	movs	r2, #0
    a906:	701a      	strb	r2, [r3, #0]
    a908:	f24c 5349 	movw	r3, #50505	; 0xc549
    a90c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a910:	781b      	ldrb	r3, [r3, #0]
    a912:	461a      	mov	r2, r3
    a914:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a918:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a91c:	7819      	ldrb	r1, [r3, #0]
    a91e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a926:	5499      	strb	r1, [r3, r2]
    a928:	f24c 5349 	movw	r3, #50505	; 0xc549
    a92c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a930:	781b      	ldrb	r3, [r3, #0]
    a932:	3301      	adds	r3, #1
    a934:	b2da      	uxtb	r2, r3
    a936:	f24c 5349 	movw	r3, #50505	; 0xc549
    a93a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a93e:	701a      	strb	r2, [r3, #0]
    a940:	f24c 5349 	movw	r3, #50505	; 0xc549
    a944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a948:	781b      	ldrb	r3, [r3, #0]
    a94a:	2bff      	cmp	r3, #255	; 0xff
    a94c:	d105      	bne.n	a95a <send_desired+0xd46>
    a94e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a956:	2200      	movs	r2, #0
    a958:	701a      	strb	r2, [r3, #0]
    a95a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a95e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a962:	781b      	ldrb	r3, [r3, #0]
    a964:	461a      	mov	r2, r3
    a966:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a96e:	7819      	ldrb	r1, [r3, #0]
    a970:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a978:	5499      	strb	r1, [r3, r2]
    a97a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a97e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a982:	781b      	ldrb	r3, [r3, #0]
    a984:	3301      	adds	r3, #1
    a986:	b2da      	uxtb	r2, r3
    a988:	f24c 5349 	movw	r3, #50505	; 0xc549
    a98c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a990:	701a      	strb	r2, [r3, #0]
    a992:	f24c 5349 	movw	r3, #50505	; 0xc549
    a996:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a99a:	781b      	ldrb	r3, [r3, #0]
    a99c:	2bff      	cmp	r3, #255	; 0xff
    a99e:	d105      	bne.n	a9ac <send_desired+0xd98>
    a9a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9a8:	2200      	movs	r2, #0
    a9aa:	701a      	strb	r2, [r3, #0]
    a9ac:	f242 0339 	movw	r3, #8249	; 0x2039
    a9b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9b4:	781b      	ldrb	r3, [r3, #0]
    a9b6:	b2db      	uxtb	r3, r3
    a9b8:	f003 0310 	and.w	r3, r3, #16
    a9bc:	2b00      	cmp	r3, #0
    a9be:	d15a      	bne.n	aa76 <send_desired+0xe62>
    a9c0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    a9c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9c8:	781b      	ldrb	r3, [r3, #0]
    a9ca:	b2db      	uxtb	r3, r3
    a9cc:	461a      	mov	r2, r3
    a9ce:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a9d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9d6:	5c9a      	ldrb	r2, [r3, r2]
    a9d8:	f24c 634b 	movw	r3, #50763	; 0xc64b
    a9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9e0:	701a      	strb	r2, [r3, #0]
    a9e2:	f24c 634c 	movw	r3, #50764	; 0xc64c
    a9e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9ea:	2200      	movs	r2, #0
    a9ec:	701a      	strb	r2, [r3, #0]
    a9ee:	f24c 534a 	movw	r3, #50506	; 0xc54a
    a9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9f6:	781b      	ldrb	r3, [r3, #0]
    a9f8:	b2db      	uxtb	r3, r3
    a9fa:	3301      	adds	r3, #1
    a9fc:	b2da      	uxtb	r2, r3
    a9fe:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aa02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa06:	701a      	strb	r2, [r3, #0]
    aa08:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aa0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa10:	781b      	ldrb	r3, [r3, #0]
    aa12:	b2db      	uxtb	r3, r3
    aa14:	2bff      	cmp	r3, #255	; 0xff
    aa16:	d105      	bne.n	aa24 <send_desired+0xe10>
    aa18:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aa1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa20:	2200      	movs	r2, #0
    aa22:	701a      	strb	r2, [r3, #0]
    aa24:	f242 0338 	movw	r3, #8248	; 0x2038
    aa28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa2c:	f242 0238 	movw	r2, #8248	; 0x2038
    aa30:	f2c2 0200 	movt	r2, #8192	; 0x2000
    aa34:	7812      	ldrb	r2, [r2, #0]
    aa36:	b2d2      	uxtb	r2, r2
    aa38:	f042 0201 	orr.w	r2, r2, #1
    aa3c:	b2d2      	uxtb	r2, r2
    aa3e:	701a      	strb	r2, [r3, #0]
    aa40:	f242 0339 	movw	r3, #8249	; 0x2039
    aa44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa48:	f242 0239 	movw	r2, #8249	; 0x2039
    aa4c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    aa50:	7812      	ldrb	r2, [r2, #0]
    aa52:	b2d2      	uxtb	r2, r2
    aa54:	f042 0210 	orr.w	r2, r2, #16
    aa58:	b2d2      	uxtb	r2, r2
    aa5a:	701a      	strb	r2, [r3, #0]
    aa5c:	e00b      	b.n	aa76 <send_desired+0xe62>
    aa5e:	f24c 5348 	movw	r3, #50504	; 0xc548
    aa62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa66:	781b      	ldrb	r3, [r3, #0]
    aa68:	3301      	adds	r3, #1
    aa6a:	b2da      	uxtb	r2, r3
    aa6c:	f24c 5348 	movw	r3, #50504	; 0xc548
    aa70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa74:	701a      	strb	r2, [r3, #0]
}
    aa76:	46bd      	mov	sp, r7
    aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa7c:	4770      	bx	lr
    aa7e:	bf00      	nop
    aa80:	20000577 	.word	0x20000577

0000aa84 <send_bat>:
void send_bat(void){  //2000ms
    aa84:	b480      	push	{r7}
    aa86:	af00      	add	r7, sp, #0
  if(!boot)
    aa88:	f240 533d 	movw	r3, #1341	; 0x53d
    aa8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa90:	781b      	ldrb	r3, [r3, #0]
    aa92:	2b00      	cmp	r3, #0
    aa94:	f040 83af 	bne.w	b1f6 <send_bat+0x772>
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    aa98:	f24c 5341 	movw	r3, #50497	; 0xc541
    aa9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaa0:	781a      	ldrb	r2, [r3, #0]
    aaa2:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    aaa6:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    aaaa:	fba3 1302 	umull	r1, r3, r3, r2
    aaae:	0919      	lsrs	r1, r3, #4
    aab0:	460b      	mov	r3, r1
    aab2:	009b      	lsls	r3, r3, #2
    aab4:	440b      	add	r3, r1
    aab6:	009b      	lsls	r3, r3, #2
    aab8:	1ad3      	subs	r3, r2, r3
    aaba:	b2db      	uxtb	r3, r3
    aabc:	2b08      	cmp	r3, #8
    aabe:	f040 839a 	bne.w	b1f6 <send_bat+0x772>
    aac2:	f24c 5349 	movw	r3, #50505	; 0xc549
    aac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaca:	781a      	ldrb	r2, [r3, #0]
    aacc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aad4:	781b      	ldrb	r3, [r3, #0]
    aad6:	b2db      	uxtb	r3, r3
    aad8:	429a      	cmp	r2, r3
    aada:	d313      	bcc.n	ab04 <send_bat+0x80>
    aadc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aae4:	781b      	ldrb	r3, [r3, #0]
    aae6:	b2db      	uxtb	r3, r3
    aae8:	461a      	mov	r2, r3
    aaea:	f24c 5349 	movw	r3, #50505	; 0xc549
    aaee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaf2:	781b      	ldrb	r3, [r3, #0]
    aaf4:	1ad3      	subs	r3, r2, r3
    aaf6:	33ff      	adds	r3, #255	; 0xff
    aaf8:	2b0c      	cmp	r3, #12
    aafa:	bfd4      	ite	le
    aafc:	2300      	movle	r3, #0
    aafe:	2301      	movgt	r3, #1
    ab00:	b2db      	uxtb	r3, r3
    ab02:	e011      	b.n	ab28 <send_bat+0xa4>
    ab04:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ab08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab0c:	781b      	ldrb	r3, [r3, #0]
    ab0e:	b2db      	uxtb	r3, r3
    ab10:	461a      	mov	r2, r3
    ab12:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab1a:	781b      	ldrb	r3, [r3, #0]
    ab1c:	1ad3      	subs	r3, r2, r3
    ab1e:	2b0c      	cmp	r3, #12
    ab20:	bfd4      	ite	le
    ab22:	2300      	movle	r3, #0
    ab24:	2301      	movgt	r3, #1
    ab26:	b2db      	uxtb	r3, r3
    ab28:	2b00      	cmp	r3, #0
    ab2a:	f000 8358 	beq.w	b1de <send_bat+0x75a>
    ab2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab36:	781b      	ldrb	r3, [r3, #0]
    ab38:	461a      	mov	r2, r3
    ab3a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ab3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab42:	2105      	movs	r1, #5
    ab44:	5499      	strb	r1, [r3, r2]
    ab46:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab4e:	781b      	ldrb	r3, [r3, #0]
    ab50:	3301      	adds	r3, #1
    ab52:	b2da      	uxtb	r2, r3
    ab54:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab5c:	701a      	strb	r2, [r3, #0]
    ab5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab66:	781b      	ldrb	r3, [r3, #0]
    ab68:	2bff      	cmp	r3, #255	; 0xff
    ab6a:	d105      	bne.n	ab78 <send_bat+0xf4>
    ab6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab74:	2200      	movs	r2, #0
    ab76:	701a      	strb	r2, [r3, #0]
    ab78:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab80:	781b      	ldrb	r3, [r3, #0]
    ab82:	461a      	mov	r2, r3
    ab84:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ab88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab8c:	210c      	movs	r1, #12
    ab8e:	5499      	strb	r1, [r3, r2]
    ab90:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab98:	781b      	ldrb	r3, [r3, #0]
    ab9a:	3301      	adds	r3, #1
    ab9c:	b2da      	uxtb	r2, r3
    ab9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    aba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aba6:	701a      	strb	r2, [r3, #0]
    aba8:	f24c 5349 	movw	r3, #50505	; 0xc549
    abac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abb0:	781b      	ldrb	r3, [r3, #0]
    abb2:	2bff      	cmp	r3, #255	; 0xff
    abb4:	d105      	bne.n	abc2 <send_bat+0x13e>
    abb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    abba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abbe:	2200      	movs	r2, #0
    abc0:	701a      	strb	r2, [r3, #0]
    abc2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    abc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abca:	220c      	movs	r2, #12
    abcc:	701a      	strb	r2, [r3, #0]
    abce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    abd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abd6:	220c      	movs	r2, #12
    abd8:	701a      	strb	r2, [r3, #0]
    abda:	f24c 5349 	movw	r3, #50505	; 0xc549
    abde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abe2:	781b      	ldrb	r3, [r3, #0]
    abe4:	461a      	mov	r2, r3
    abe6:	f24c 5332 	movw	r3, #50482	; 0xc532
    abea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abee:	7819      	ldrb	r1, [r3, #0]
    abf0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    abf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abf8:	5499      	strb	r1, [r3, r2]
    abfa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    abfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac02:	781a      	ldrb	r2, [r3, #0]
    ac04:	f24c 5332 	movw	r3, #50482	; 0xc532
    ac08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac0c:	781b      	ldrb	r3, [r3, #0]
    ac0e:	4413      	add	r3, r2
    ac10:	b2da      	uxtb	r2, r3
    ac12:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ac16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac1a:	701a      	strb	r2, [r3, #0]
    ac1c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ac20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac24:	781a      	ldrb	r2, [r3, #0]
    ac26:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ac2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac2e:	781b      	ldrb	r3, [r3, #0]
    ac30:	4413      	add	r3, r2
    ac32:	b2da      	uxtb	r2, r3
    ac34:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ac38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac3c:	701a      	strb	r2, [r3, #0]
    ac3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac46:	781b      	ldrb	r3, [r3, #0]
    ac48:	3301      	adds	r3, #1
    ac4a:	b2da      	uxtb	r2, r3
    ac4c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac54:	701a      	strb	r2, [r3, #0]
    ac56:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac5e:	781b      	ldrb	r3, [r3, #0]
    ac60:	2bff      	cmp	r3, #255	; 0xff
    ac62:	d105      	bne.n	ac70 <send_bat+0x1ec>
    ac64:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac6c:	2200      	movs	r2, #0
    ac6e:	701a      	strb	r2, [r3, #0]
    ac70:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac78:	781b      	ldrb	r3, [r3, #0]
    ac7a:	461a      	mov	r2, r3
    ac7c:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    ac80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac84:	7819      	ldrb	r1, [r3, #0]
    ac86:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ac8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac8e:	5499      	strb	r1, [r3, r2]
    ac90:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    ac94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac98:	781a      	ldrb	r2, [r3, #0]
    ac9a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ac9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aca2:	781b      	ldrb	r3, [r3, #0]
    aca4:	4413      	add	r3, r2
    aca6:	b2da      	uxtb	r2, r3
    aca8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    acac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acb0:	701a      	strb	r2, [r3, #0]
    acb2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    acb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acba:	781a      	ldrb	r2, [r3, #0]
    acbc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    acc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acc4:	781b      	ldrb	r3, [r3, #0]
    acc6:	4413      	add	r3, r2
    acc8:	b2da      	uxtb	r2, r3
    acca:	f24c 634e 	movw	r3, #50766	; 0xc64e
    acce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acd2:	701a      	strb	r2, [r3, #0]
    acd4:	f24c 5349 	movw	r3, #50505	; 0xc549
    acd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acdc:	781b      	ldrb	r3, [r3, #0]
    acde:	3301      	adds	r3, #1
    ace0:	b2da      	uxtb	r2, r3
    ace2:	f24c 5349 	movw	r3, #50505	; 0xc549
    ace6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acea:	701a      	strb	r2, [r3, #0]
    acec:	f24c 5349 	movw	r3, #50505	; 0xc549
    acf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acf4:	781b      	ldrb	r3, [r3, #0]
    acf6:	2bff      	cmp	r3, #255	; 0xff
    acf8:	d105      	bne.n	ad06 <send_bat+0x282>
    acfa:	f24c 5349 	movw	r3, #50505	; 0xc549
    acfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad02:	2200      	movs	r2, #0
    ad04:	701a      	strb	r2, [r3, #0]
    ad06:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad0e:	781b      	ldrb	r3, [r3, #0]
    ad10:	461a      	mov	r2, r3
    ad12:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    ad16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad1a:	7859      	ldrb	r1, [r3, #1]
    ad1c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ad20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad24:	5499      	strb	r1, [r3, r2]
    ad26:	4bd5      	ldr	r3, [pc, #852]	; (b07c <send_bat+0x5f8>)
    ad28:	781a      	ldrb	r2, [r3, #0]
    ad2a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad32:	781b      	ldrb	r3, [r3, #0]
    ad34:	4413      	add	r3, r2
    ad36:	b2da      	uxtb	r2, r3
    ad38:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad40:	701a      	strb	r2, [r3, #0]
    ad42:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ad46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad4a:	781a      	ldrb	r2, [r3, #0]
    ad4c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad54:	781b      	ldrb	r3, [r3, #0]
    ad56:	4413      	add	r3, r2
    ad58:	b2da      	uxtb	r2, r3
    ad5a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ad5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad62:	701a      	strb	r2, [r3, #0]
    ad64:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad6c:	781b      	ldrb	r3, [r3, #0]
    ad6e:	3301      	adds	r3, #1
    ad70:	b2da      	uxtb	r2, r3
    ad72:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad7a:	701a      	strb	r2, [r3, #0]
    ad7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad84:	781b      	ldrb	r3, [r3, #0]
    ad86:	2bff      	cmp	r3, #255	; 0xff
    ad88:	d105      	bne.n	ad96 <send_bat+0x312>
    ad8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad92:	2200      	movs	r2, #0
    ad94:	701a      	strb	r2, [r3, #0]
    ad96:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad9e:	781b      	ldrb	r3, [r3, #0]
    ada0:	461a      	mov	r2, r3
    ada2:	f24c 5335 	movw	r3, #50485	; 0xc535
    ada6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adaa:	7819      	ldrb	r1, [r3, #0]
    adac:	f24c 534c 	movw	r3, #50508	; 0xc54c
    adb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adb4:	5499      	strb	r1, [r3, r2]
    adb6:	f24c 5335 	movw	r3, #50485	; 0xc535
    adba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adbe:	781a      	ldrb	r2, [r3, #0]
    adc0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    adc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adc8:	781b      	ldrb	r3, [r3, #0]
    adca:	4413      	add	r3, r2
    adcc:	b2da      	uxtb	r2, r3
    adce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    add2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    add6:	701a      	strb	r2, [r3, #0]
    add8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    addc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ade0:	781a      	ldrb	r2, [r3, #0]
    ade2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ade6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adea:	781b      	ldrb	r3, [r3, #0]
    adec:	4413      	add	r3, r2
    adee:	b2da      	uxtb	r2, r3
    adf0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    adf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adf8:	701a      	strb	r2, [r3, #0]
    adfa:	f24c 5349 	movw	r3, #50505	; 0xc549
    adfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae02:	781b      	ldrb	r3, [r3, #0]
    ae04:	3301      	adds	r3, #1
    ae06:	b2da      	uxtb	r2, r3
    ae08:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae10:	701a      	strb	r2, [r3, #0]
    ae12:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae1a:	781b      	ldrb	r3, [r3, #0]
    ae1c:	2bff      	cmp	r3, #255	; 0xff
    ae1e:	d105      	bne.n	ae2c <send_bat+0x3a8>
    ae20:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae28:	2200      	movs	r2, #0
    ae2a:	701a      	strb	r2, [r3, #0]
    ae2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae34:	781b      	ldrb	r3, [r3, #0]
    ae36:	461a      	mov	r2, r3
    ae38:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
    ae3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae40:	7819      	ldrb	r1, [r3, #0]
    ae42:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ae46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae4a:	5499      	strb	r1, [r3, r2]
    ae4c:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
    ae50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae54:	781a      	ldrb	r2, [r3, #0]
    ae56:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae5e:	781b      	ldrb	r3, [r3, #0]
    ae60:	4413      	add	r3, r2
    ae62:	b2da      	uxtb	r2, r3
    ae64:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae6c:	701a      	strb	r2, [r3, #0]
    ae6e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ae72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae76:	781a      	ldrb	r2, [r3, #0]
    ae78:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae80:	781b      	ldrb	r3, [r3, #0]
    ae82:	4413      	add	r3, r2
    ae84:	b2da      	uxtb	r2, r3
    ae86:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ae8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae8e:	701a      	strb	r2, [r3, #0]
    ae90:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae98:	781b      	ldrb	r3, [r3, #0]
    ae9a:	3301      	adds	r3, #1
    ae9c:	b2da      	uxtb	r2, r3
    ae9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    aea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aea6:	701a      	strb	r2, [r3, #0]
    aea8:	f24c 5349 	movw	r3, #50505	; 0xc549
    aeac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeb0:	781b      	ldrb	r3, [r3, #0]
    aeb2:	2bff      	cmp	r3, #255	; 0xff
    aeb4:	d105      	bne.n	aec2 <send_bat+0x43e>
    aeb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    aeba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aebe:	2200      	movs	r2, #0
    aec0:	701a      	strb	r2, [r3, #0]
    aec2:	f24c 5349 	movw	r3, #50505	; 0xc549
    aec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeca:	781b      	ldrb	r3, [r3, #0]
    aecc:	461a      	mov	r2, r3
    aece:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
    aed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aed6:	7859      	ldrb	r1, [r3, #1]
    aed8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    aedc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aee0:	5499      	strb	r1, [r3, r2]
    aee2:	4b67      	ldr	r3, [pc, #412]	; (b080 <send_bat+0x5fc>)
    aee4:	781a      	ldrb	r2, [r3, #0]
    aee6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    aeea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeee:	781b      	ldrb	r3, [r3, #0]
    aef0:	4413      	add	r3, r2
    aef2:	b2da      	uxtb	r2, r3
    aef4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    aef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aefc:	701a      	strb	r2, [r3, #0]
    aefe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    af02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af06:	781a      	ldrb	r2, [r3, #0]
    af08:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af10:	781b      	ldrb	r3, [r3, #0]
    af12:	4413      	add	r3, r2
    af14:	b2da      	uxtb	r2, r3
    af16:	f24c 634e 	movw	r3, #50766	; 0xc64e
    af1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af1e:	701a      	strb	r2, [r3, #0]
    af20:	f24c 5349 	movw	r3, #50505	; 0xc549
    af24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af28:	781b      	ldrb	r3, [r3, #0]
    af2a:	3301      	adds	r3, #1
    af2c:	b2da      	uxtb	r2, r3
    af2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    af32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af36:	701a      	strb	r2, [r3, #0]
    af38:	f24c 5349 	movw	r3, #50505	; 0xc549
    af3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af40:	781b      	ldrb	r3, [r3, #0]
    af42:	2bff      	cmp	r3, #255	; 0xff
    af44:	d105      	bne.n	af52 <send_bat+0x4ce>
    af46:	f24c 5349 	movw	r3, #50505	; 0xc549
    af4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af4e:	2200      	movs	r2, #0
    af50:	701a      	strb	r2, [r3, #0]
    af52:	f24c 5349 	movw	r3, #50505	; 0xc549
    af56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af5a:	781b      	ldrb	r3, [r3, #0]
    af5c:	461a      	mov	r2, r3
    af5e:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    af62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af66:	7819      	ldrb	r1, [r3, #0]
    af68:	f24c 534c 	movw	r3, #50508	; 0xc54c
    af6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af70:	5499      	strb	r1, [r3, r2]
    af72:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    af76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af7a:	781a      	ldrb	r2, [r3, #0]
    af7c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af84:	781b      	ldrb	r3, [r3, #0]
    af86:	4413      	add	r3, r2
    af88:	b2da      	uxtb	r2, r3
    af8a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af92:	701a      	strb	r2, [r3, #0]
    af94:	f24c 634e 	movw	r3, #50766	; 0xc64e
    af98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af9c:	781a      	ldrb	r2, [r3, #0]
    af9e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    afa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afa6:	781b      	ldrb	r3, [r3, #0]
    afa8:	4413      	add	r3, r2
    afaa:	b2da      	uxtb	r2, r3
    afac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    afb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afb4:	701a      	strb	r2, [r3, #0]
    afb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    afba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afbe:	781b      	ldrb	r3, [r3, #0]
    afc0:	3301      	adds	r3, #1
    afc2:	b2da      	uxtb	r2, r3
    afc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    afc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afcc:	701a      	strb	r2, [r3, #0]
    afce:	f24c 5349 	movw	r3, #50505	; 0xc549
    afd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afd6:	781b      	ldrb	r3, [r3, #0]
    afd8:	2bff      	cmp	r3, #255	; 0xff
    afda:	d105      	bne.n	afe8 <send_bat+0x564>
    afdc:	f24c 5349 	movw	r3, #50505	; 0xc549
    afe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afe4:	2200      	movs	r2, #0
    afe6:	701a      	strb	r2, [r3, #0]
    afe8:	f24c 5349 	movw	r3, #50505	; 0xc549
    afec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aff0:	781b      	ldrb	r3, [r3, #0]
    aff2:	461a      	mov	r2, r3
    aff4:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    aff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    affc:	7859      	ldrb	r1, [r3, #1]
    affe:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b006:	5499      	strb	r1, [r3, r2]
    b008:	4b1e      	ldr	r3, [pc, #120]	; (b084 <send_bat+0x600>)
    b00a:	781a      	ldrb	r2, [r3, #0]
    b00c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b014:	781b      	ldrb	r3, [r3, #0]
    b016:	4413      	add	r3, r2
    b018:	b2da      	uxtb	r2, r3
    b01a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b01e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b022:	701a      	strb	r2, [r3, #0]
    b024:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b02c:	781a      	ldrb	r2, [r3, #0]
    b02e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b036:	781b      	ldrb	r3, [r3, #0]
    b038:	4413      	add	r3, r2
    b03a:	b2da      	uxtb	r2, r3
    b03c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b044:	701a      	strb	r2, [r3, #0]
    b046:	f24c 5349 	movw	r3, #50505	; 0xc549
    b04a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b04e:	781b      	ldrb	r3, [r3, #0]
    b050:	3301      	adds	r3, #1
    b052:	b2da      	uxtb	r2, r3
    b054:	f24c 5349 	movw	r3, #50505	; 0xc549
    b058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b05c:	701a      	strb	r2, [r3, #0]
    b05e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b066:	781b      	ldrb	r3, [r3, #0]
    b068:	2bff      	cmp	r3, #255	; 0xff
    b06a:	d10d      	bne.n	b088 <send_bat+0x604>
    b06c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b074:	2200      	movs	r2, #0
    b076:	701a      	strb	r2, [r3, #0]
    b078:	e006      	b.n	b088 <send_bat+0x604>
    b07a:	bf00      	nop
    b07c:	2004cb2d 	.word	0x2004cb2d
    b080:	2004c8b7 	.word	0x2004c8b7
    b084:	2004c8b5 	.word	0x2004c8b5
    b088:	f24c 5349 	movw	r3, #50505	; 0xc549
    b08c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b090:	781b      	ldrb	r3, [r3, #0]
    b092:	461a      	mov	r2, r3
    b094:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b09c:	7819      	ldrb	r1, [r3, #0]
    b09e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b0a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0a6:	5499      	strb	r1, [r3, r2]
    b0a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b0ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0b0:	781b      	ldrb	r3, [r3, #0]
    b0b2:	3301      	adds	r3, #1
    b0b4:	b2da      	uxtb	r2, r3
    b0b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b0ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0be:	701a      	strb	r2, [r3, #0]
    b0c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b0c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0c8:	781b      	ldrb	r3, [r3, #0]
    b0ca:	2bff      	cmp	r3, #255	; 0xff
    b0cc:	d105      	bne.n	b0da <send_bat+0x656>
    b0ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    b0d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0d6:	2200      	movs	r2, #0
    b0d8:	701a      	strb	r2, [r3, #0]
    b0da:	f24c 5349 	movw	r3, #50505	; 0xc549
    b0de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0e2:	781b      	ldrb	r3, [r3, #0]
    b0e4:	461a      	mov	r2, r3
    b0e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b0ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ee:	7819      	ldrb	r1, [r3, #0]
    b0f0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b0f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0f8:	5499      	strb	r1, [r3, r2]
    b0fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    b0fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b102:	781b      	ldrb	r3, [r3, #0]
    b104:	3301      	adds	r3, #1
    b106:	b2da      	uxtb	r2, r3
    b108:	f24c 5349 	movw	r3, #50505	; 0xc549
    b10c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b110:	701a      	strb	r2, [r3, #0]
    b112:	f24c 5349 	movw	r3, #50505	; 0xc549
    b116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b11a:	781b      	ldrb	r3, [r3, #0]
    b11c:	2bff      	cmp	r3, #255	; 0xff
    b11e:	d105      	bne.n	b12c <send_bat+0x6a8>
    b120:	f24c 5349 	movw	r3, #50505	; 0xc549
    b124:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b128:	2200      	movs	r2, #0
    b12a:	701a      	strb	r2, [r3, #0]
    b12c:	f242 0339 	movw	r3, #8249	; 0x2039
    b130:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b134:	781b      	ldrb	r3, [r3, #0]
    b136:	b2db      	uxtb	r3, r3
    b138:	f003 0310 	and.w	r3, r3, #16
    b13c:	2b00      	cmp	r3, #0
    b13e:	d15a      	bne.n	b1f6 <send_bat+0x772>
    b140:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b148:	781b      	ldrb	r3, [r3, #0]
    b14a:	b2db      	uxtb	r3, r3
    b14c:	461a      	mov	r2, r3
    b14e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b156:	5c9a      	ldrb	r2, [r3, r2]
    b158:	f24c 634b 	movw	r3, #50763	; 0xc64b
    b15c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b160:	701a      	strb	r2, [r3, #0]
    b162:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b16a:	2200      	movs	r2, #0
    b16c:	701a      	strb	r2, [r3, #0]
    b16e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b176:	781b      	ldrb	r3, [r3, #0]
    b178:	b2db      	uxtb	r3, r3
    b17a:	3301      	adds	r3, #1
    b17c:	b2da      	uxtb	r2, r3
    b17e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b186:	701a      	strb	r2, [r3, #0]
    b188:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b18c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b190:	781b      	ldrb	r3, [r3, #0]
    b192:	b2db      	uxtb	r3, r3
    b194:	2bff      	cmp	r3, #255	; 0xff
    b196:	d105      	bne.n	b1a4 <send_bat+0x720>
    b198:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b19c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1a0:	2200      	movs	r2, #0
    b1a2:	701a      	strb	r2, [r3, #0]
    b1a4:	f242 0338 	movw	r3, #8248	; 0x2038
    b1a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1ac:	f242 0238 	movw	r2, #8248	; 0x2038
    b1b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b1b4:	7812      	ldrb	r2, [r2, #0]
    b1b6:	b2d2      	uxtb	r2, r2
    b1b8:	f042 0201 	orr.w	r2, r2, #1
    b1bc:	b2d2      	uxtb	r2, r2
    b1be:	701a      	strb	r2, [r3, #0]
    b1c0:	f242 0339 	movw	r3, #8249	; 0x2039
    b1c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1c8:	f242 0239 	movw	r2, #8249	; 0x2039
    b1cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b1d0:	7812      	ldrb	r2, [r2, #0]
    b1d2:	b2d2      	uxtb	r2, r2
    b1d4:	f042 0210 	orr.w	r2, r2, #16
    b1d8:	b2d2      	uxtb	r2, r2
    b1da:	701a      	strb	r2, [r3, #0]
    b1dc:	e00b      	b.n	b1f6 <send_bat+0x772>
    b1de:	f24c 5348 	movw	r3, #50504	; 0xc548
    b1e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1e6:	781b      	ldrb	r3, [r3, #0]
    b1e8:	3301      	adds	r3, #1
    b1ea:	b2da      	uxtb	r2, r3
    b1ec:	f24c 5348 	movw	r3, #50504	; 0xc548
    b1f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1f4:	701a      	strb	r2, [r3, #0]
}
    b1f6:	46bd      	mov	sp, r7
    b1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1fc:	4770      	bx	lr
    b1fe:	bf00      	nop

0000b200 <send_climb>:
void send_climb(void){  //2000ms
    b200:	b480      	push	{r7}
    b202:	af00      	add	r7, sp, #0
  if(!boot)
    b204:	f240 533d 	movw	r3, #1341	; 0x53d
    b208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b20c:	781b      	ldrb	r3, [r3, #0]
    b20e:	2b00      	cmp	r3, #0
    b210:	f040 8569 	bne.w	bce6 <send_climb+0xae6>
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    b214:	f24c 5341 	movw	r3, #50497	; 0xc541
    b218:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b21c:	781a      	ldrb	r2, [r3, #0]
    b21e:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    b222:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    b226:	fba3 1302 	umull	r1, r3, r3, r2
    b22a:	0919      	lsrs	r1, r3, #4
    b22c:	460b      	mov	r3, r1
    b22e:	009b      	lsls	r3, r3, #2
    b230:	440b      	add	r3, r1
    b232:	009b      	lsls	r3, r3, #2
    b234:	1ad3      	subs	r3, r2, r3
    b236:	b2db      	uxtb	r3, r3
    b238:	2b12      	cmp	r3, #18
    b23a:	f040 8554 	bne.w	bce6 <send_climb+0xae6>
    b23e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b246:	781a      	ldrb	r2, [r3, #0]
    b248:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b24c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b250:	781b      	ldrb	r3, [r3, #0]
    b252:	b2db      	uxtb	r3, r3
    b254:	429a      	cmp	r2, r3
    b256:	d313      	bcc.n	b280 <send_climb+0x80>
    b258:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b25c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b260:	781b      	ldrb	r3, [r3, #0]
    b262:	b2db      	uxtb	r3, r3
    b264:	461a      	mov	r2, r3
    b266:	f24c 5349 	movw	r3, #50505	; 0xc549
    b26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b26e:	781b      	ldrb	r3, [r3, #0]
    b270:	1ad3      	subs	r3, r2, r3
    b272:	33ff      	adds	r3, #255	; 0xff
    b274:	2b12      	cmp	r3, #18
    b276:	bfd4      	ite	le
    b278:	2300      	movle	r3, #0
    b27a:	2301      	movgt	r3, #1
    b27c:	b2db      	uxtb	r3, r3
    b27e:	e011      	b.n	b2a4 <send_climb+0xa4>
    b280:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b288:	781b      	ldrb	r3, [r3, #0]
    b28a:	b2db      	uxtb	r3, r3
    b28c:	461a      	mov	r2, r3
    b28e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b296:	781b      	ldrb	r3, [r3, #0]
    b298:	1ad3      	subs	r3, r2, r3
    b29a:	2b12      	cmp	r3, #18
    b29c:	bfd4      	ite	le
    b29e:	2300      	movle	r3, #0
    b2a0:	2301      	movgt	r3, #1
    b2a2:	b2db      	uxtb	r3, r3
    b2a4:	2b00      	cmp	r3, #0
    b2a6:	f000 8512 	beq.w	bcce <send_climb+0xace>
    b2aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    b2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2b2:	781b      	ldrb	r3, [r3, #0]
    b2b4:	461a      	mov	r2, r3
    b2b6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b2ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2be:	2105      	movs	r1, #5
    b2c0:	5499      	strb	r1, [r3, r2]
    b2c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b2c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2ca:	781b      	ldrb	r3, [r3, #0]
    b2cc:	3301      	adds	r3, #1
    b2ce:	b2da      	uxtb	r2, r3
    b2d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b2d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2d8:	701a      	strb	r2, [r3, #0]
    b2da:	f24c 5349 	movw	r3, #50505	; 0xc549
    b2de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2e2:	781b      	ldrb	r3, [r3, #0]
    b2e4:	2bff      	cmp	r3, #255	; 0xff
    b2e6:	d105      	bne.n	b2f4 <send_climb+0xf4>
    b2e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b2ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2f0:	2200      	movs	r2, #0
    b2f2:	701a      	strb	r2, [r3, #0]
    b2f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    b2f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2fc:	781b      	ldrb	r3, [r3, #0]
    b2fe:	461a      	mov	r2, r3
    b300:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b308:	210e      	movs	r1, #14
    b30a:	5499      	strb	r1, [r3, r2]
    b30c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b310:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b314:	781b      	ldrb	r3, [r3, #0]
    b316:	3301      	adds	r3, #1
    b318:	b2da      	uxtb	r2, r3
    b31a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b31e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b322:	701a      	strb	r2, [r3, #0]
    b324:	f24c 5349 	movw	r3, #50505	; 0xc549
    b328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b32c:	781b      	ldrb	r3, [r3, #0]
    b32e:	2bff      	cmp	r3, #255	; 0xff
    b330:	d105      	bne.n	b33e <send_climb+0x13e>
    b332:	f24c 5349 	movw	r3, #50505	; 0xc549
    b336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b33a:	2200      	movs	r2, #0
    b33c:	701a      	strb	r2, [r3, #0]
    b33e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b346:	220e      	movs	r2, #14
    b348:	701a      	strb	r2, [r3, #0]
    b34a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b34e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b352:	220e      	movs	r2, #14
    b354:	701a      	strb	r2, [r3, #0]
    b356:	f24c 5349 	movw	r3, #50505	; 0xc549
    b35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b35e:	781b      	ldrb	r3, [r3, #0]
    b360:	461a      	mov	r2, r3
    b362:	f64c 037c 	movw	r3, #51324	; 0xc87c
    b366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b36a:	7819      	ldrb	r1, [r3, #0]
    b36c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b374:	5499      	strb	r1, [r3, r2]
    b376:	f64c 037c 	movw	r3, #51324	; 0xc87c
    b37a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b37e:	781a      	ldrb	r2, [r3, #0]
    b380:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b388:	781b      	ldrb	r3, [r3, #0]
    b38a:	4413      	add	r3, r2
    b38c:	b2da      	uxtb	r2, r3
    b38e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b396:	701a      	strb	r2, [r3, #0]
    b398:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b39c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3a0:	781a      	ldrb	r2, [r3, #0]
    b3a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b3a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3aa:	781b      	ldrb	r3, [r3, #0]
    b3ac:	4413      	add	r3, r2
    b3ae:	b2da      	uxtb	r2, r3
    b3b0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b3b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3b8:	701a      	strb	r2, [r3, #0]
    b3ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3c2:	781b      	ldrb	r3, [r3, #0]
    b3c4:	3301      	adds	r3, #1
    b3c6:	b2da      	uxtb	r2, r3
    b3c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3d0:	701a      	strb	r2, [r3, #0]
    b3d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3da:	781b      	ldrb	r3, [r3, #0]
    b3dc:	2bff      	cmp	r3, #255	; 0xff
    b3de:	d105      	bne.n	b3ec <send_climb+0x1ec>
    b3e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3e8:	2200      	movs	r2, #0
    b3ea:	701a      	strb	r2, [r3, #0]
    b3ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3f4:	781b      	ldrb	r3, [r3, #0]
    b3f6:	461a      	mov	r2, r3
    b3f8:	f64c 037c 	movw	r3, #51324	; 0xc87c
    b3fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b400:	7859      	ldrb	r1, [r3, #1]
    b402:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b406:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b40a:	5499      	strb	r1, [r3, r2]
    b40c:	4bd3      	ldr	r3, [pc, #844]	; (b75c <send_climb+0x55c>)
    b40e:	781a      	ldrb	r2, [r3, #0]
    b410:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b418:	781b      	ldrb	r3, [r3, #0]
    b41a:	4413      	add	r3, r2
    b41c:	b2da      	uxtb	r2, r3
    b41e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b426:	701a      	strb	r2, [r3, #0]
    b428:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b42c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b430:	781a      	ldrb	r2, [r3, #0]
    b432:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b436:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b43a:	781b      	ldrb	r3, [r3, #0]
    b43c:	4413      	add	r3, r2
    b43e:	b2da      	uxtb	r2, r3
    b440:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b448:	701a      	strb	r2, [r3, #0]
    b44a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b44e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b452:	781b      	ldrb	r3, [r3, #0]
    b454:	3301      	adds	r3, #1
    b456:	b2da      	uxtb	r2, r3
    b458:	f24c 5349 	movw	r3, #50505	; 0xc549
    b45c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b460:	701a      	strb	r2, [r3, #0]
    b462:	f24c 5349 	movw	r3, #50505	; 0xc549
    b466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b46a:	781b      	ldrb	r3, [r3, #0]
    b46c:	2bff      	cmp	r3, #255	; 0xff
    b46e:	d105      	bne.n	b47c <send_climb+0x27c>
    b470:	f24c 5349 	movw	r3, #50505	; 0xc549
    b474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b478:	2200      	movs	r2, #0
    b47a:	701a      	strb	r2, [r3, #0]
    b47c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b484:	781b      	ldrb	r3, [r3, #0]
    b486:	461a      	mov	r2, r3
    b488:	f64c 0390 	movw	r3, #51344	; 0xc890
    b48c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b490:	7819      	ldrb	r1, [r3, #0]
    b492:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b49a:	5499      	strb	r1, [r3, r2]
    b49c:	f64c 0390 	movw	r3, #51344	; 0xc890
    b4a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4a4:	781a      	ldrb	r2, [r3, #0]
    b4a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ae:	781b      	ldrb	r3, [r3, #0]
    b4b0:	4413      	add	r3, r2
    b4b2:	b2da      	uxtb	r2, r3
    b4b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4bc:	701a      	strb	r2, [r3, #0]
    b4be:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b4c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4c6:	781a      	ldrb	r2, [r3, #0]
    b4c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b4cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4d0:	781b      	ldrb	r3, [r3, #0]
    b4d2:	4413      	add	r3, r2
    b4d4:	b2da      	uxtb	r2, r3
    b4d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4de:	701a      	strb	r2, [r3, #0]
    b4e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4e8:	781b      	ldrb	r3, [r3, #0]
    b4ea:	3301      	adds	r3, #1
    b4ec:	b2da      	uxtb	r2, r3
    b4ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4f6:	701a      	strb	r2, [r3, #0]
    b4f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b500:	781b      	ldrb	r3, [r3, #0]
    b502:	2bff      	cmp	r3, #255	; 0xff
    b504:	d105      	bne.n	b512 <send_climb+0x312>
    b506:	f24c 5349 	movw	r3, #50505	; 0xc549
    b50a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b50e:	2200      	movs	r2, #0
    b510:	701a      	strb	r2, [r3, #0]
    b512:	f24c 5349 	movw	r3, #50505	; 0xc549
    b516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b51a:	781b      	ldrb	r3, [r3, #0]
    b51c:	461a      	mov	r2, r3
    b51e:	f64c 0390 	movw	r3, #51344	; 0xc890
    b522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b526:	7859      	ldrb	r1, [r3, #1]
    b528:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b52c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b530:	5499      	strb	r1, [r3, r2]
    b532:	4b8b      	ldr	r3, [pc, #556]	; (b760 <send_climb+0x560>)
    b534:	781a      	ldrb	r2, [r3, #0]
    b536:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b53a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b53e:	781b      	ldrb	r3, [r3, #0]
    b540:	4413      	add	r3, r2
    b542:	b2da      	uxtb	r2, r3
    b544:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b54c:	701a      	strb	r2, [r3, #0]
    b54e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b556:	781a      	ldrb	r2, [r3, #0]
    b558:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b55c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b560:	781b      	ldrb	r3, [r3, #0]
    b562:	4413      	add	r3, r2
    b564:	b2da      	uxtb	r2, r3
    b566:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b56a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b56e:	701a      	strb	r2, [r3, #0]
    b570:	f24c 5349 	movw	r3, #50505	; 0xc549
    b574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b578:	781b      	ldrb	r3, [r3, #0]
    b57a:	3301      	adds	r3, #1
    b57c:	b2da      	uxtb	r2, r3
    b57e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b582:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b586:	701a      	strb	r2, [r3, #0]
    b588:	f24c 5349 	movw	r3, #50505	; 0xc549
    b58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b590:	781b      	ldrb	r3, [r3, #0]
    b592:	2bff      	cmp	r3, #255	; 0xff
    b594:	d105      	bne.n	b5a2 <send_climb+0x3a2>
    b596:	f24c 5349 	movw	r3, #50505	; 0xc549
    b59a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b59e:	2200      	movs	r2, #0
    b5a0:	701a      	strb	r2, [r3, #0]
    b5a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5aa:	781b      	ldrb	r3, [r3, #0]
    b5ac:	461a      	mov	r2, r3
    b5ae:	f64c 0390 	movw	r3, #51344	; 0xc890
    b5b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5b6:	7899      	ldrb	r1, [r3, #2]
    b5b8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b5bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5c0:	5499      	strb	r1, [r3, r2]
    b5c2:	4b68      	ldr	r3, [pc, #416]	; (b764 <send_climb+0x564>)
    b5c4:	781a      	ldrb	r2, [r3, #0]
    b5c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b5ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ce:	781b      	ldrb	r3, [r3, #0]
    b5d0:	4413      	add	r3, r2
    b5d2:	b2da      	uxtb	r2, r3
    b5d4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b5d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5dc:	701a      	strb	r2, [r3, #0]
    b5de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b5e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5e6:	781a      	ldrb	r2, [r3, #0]
    b5e8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b5ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5f0:	781b      	ldrb	r3, [r3, #0]
    b5f2:	4413      	add	r3, r2
    b5f4:	b2da      	uxtb	r2, r3
    b5f6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b5fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5fe:	701a      	strb	r2, [r3, #0]
    b600:	f24c 5349 	movw	r3, #50505	; 0xc549
    b604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b608:	781b      	ldrb	r3, [r3, #0]
    b60a:	3301      	adds	r3, #1
    b60c:	b2da      	uxtb	r2, r3
    b60e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b616:	701a      	strb	r2, [r3, #0]
    b618:	f24c 5349 	movw	r3, #50505	; 0xc549
    b61c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b620:	781b      	ldrb	r3, [r3, #0]
    b622:	2bff      	cmp	r3, #255	; 0xff
    b624:	d105      	bne.n	b632 <send_climb+0x432>
    b626:	f24c 5349 	movw	r3, #50505	; 0xc549
    b62a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b62e:	2200      	movs	r2, #0
    b630:	701a      	strb	r2, [r3, #0]
    b632:	f24c 5349 	movw	r3, #50505	; 0xc549
    b636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b63a:	781b      	ldrb	r3, [r3, #0]
    b63c:	461a      	mov	r2, r3
    b63e:	f64c 0390 	movw	r3, #51344	; 0xc890
    b642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b646:	78d9      	ldrb	r1, [r3, #3]
    b648:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b64c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b650:	5499      	strb	r1, [r3, r2]
    b652:	4b45      	ldr	r3, [pc, #276]	; (b768 <send_climb+0x568>)
    b654:	781a      	ldrb	r2, [r3, #0]
    b656:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b65a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b65e:	781b      	ldrb	r3, [r3, #0]
    b660:	4413      	add	r3, r2
    b662:	b2da      	uxtb	r2, r3
    b664:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b66c:	701a      	strb	r2, [r3, #0]
    b66e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b676:	781a      	ldrb	r2, [r3, #0]
    b678:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b67c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b680:	781b      	ldrb	r3, [r3, #0]
    b682:	4413      	add	r3, r2
    b684:	b2da      	uxtb	r2, r3
    b686:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b68a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b68e:	701a      	strb	r2, [r3, #0]
    b690:	f24c 5349 	movw	r3, #50505	; 0xc549
    b694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b698:	781b      	ldrb	r3, [r3, #0]
    b69a:	3301      	adds	r3, #1
    b69c:	b2da      	uxtb	r2, r3
    b69e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6a6:	701a      	strb	r2, [r3, #0]
    b6a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6b0:	781b      	ldrb	r3, [r3, #0]
    b6b2:	2bff      	cmp	r3, #255	; 0xff
    b6b4:	d105      	bne.n	b6c2 <send_climb+0x4c2>
    b6b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6be:	2200      	movs	r2, #0
    b6c0:	701a      	strb	r2, [r3, #0]
    b6c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6ca:	781b      	ldrb	r3, [r3, #0]
    b6cc:	461a      	mov	r2, r3
    b6ce:	f64c 0398 	movw	r3, #51352	; 0xc898
    b6d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6d6:	7819      	ldrb	r1, [r3, #0]
    b6d8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b6dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6e0:	5499      	strb	r1, [r3, r2]
    b6e2:	f64c 0398 	movw	r3, #51352	; 0xc898
    b6e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6ea:	781a      	ldrb	r2, [r3, #0]
    b6ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b6f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6f4:	781b      	ldrb	r3, [r3, #0]
    b6f6:	4413      	add	r3, r2
    b6f8:	b2da      	uxtb	r2, r3
    b6fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b6fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b702:	701a      	strb	r2, [r3, #0]
    b704:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b70c:	781a      	ldrb	r2, [r3, #0]
    b70e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b716:	781b      	ldrb	r3, [r3, #0]
    b718:	4413      	add	r3, r2
    b71a:	b2da      	uxtb	r2, r3
    b71c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b724:	701a      	strb	r2, [r3, #0]
    b726:	f24c 5349 	movw	r3, #50505	; 0xc549
    b72a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b72e:	781b      	ldrb	r3, [r3, #0]
    b730:	3301      	adds	r3, #1
    b732:	b2da      	uxtb	r2, r3
    b734:	f24c 5349 	movw	r3, #50505	; 0xc549
    b738:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b73c:	701a      	strb	r2, [r3, #0]
    b73e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b746:	781b      	ldrb	r3, [r3, #0]
    b748:	2bff      	cmp	r3, #255	; 0xff
    b74a:	d10f      	bne.n	b76c <send_climb+0x56c>
    b74c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b754:	2200      	movs	r2, #0
    b756:	701a      	strb	r2, [r3, #0]
    b758:	e008      	b.n	b76c <send_climb+0x56c>
    b75a:	bf00      	nop
    b75c:	2004c87d 	.word	0x2004c87d
    b760:	2004c891 	.word	0x2004c891
    b764:	2004c892 	.word	0x2004c892
    b768:	2004c893 	.word	0x2004c893
    b76c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b774:	781b      	ldrb	r3, [r3, #0]
    b776:	461a      	mov	r2, r3
    b778:	f64c 0398 	movw	r3, #51352	; 0xc898
    b77c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b780:	7859      	ldrb	r1, [r3, #1]
    b782:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b78a:	5499      	strb	r1, [r3, r2]
    b78c:	4bd1      	ldr	r3, [pc, #836]	; (bad4 <send_climb+0x8d4>)
    b78e:	781a      	ldrb	r2, [r3, #0]
    b790:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b798:	781b      	ldrb	r3, [r3, #0]
    b79a:	4413      	add	r3, r2
    b79c:	b2da      	uxtb	r2, r3
    b79e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b7a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7a6:	701a      	strb	r2, [r3, #0]
    b7a8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b7ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7b0:	781a      	ldrb	r2, [r3, #0]
    b7b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b7b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ba:	781b      	ldrb	r3, [r3, #0]
    b7bc:	4413      	add	r3, r2
    b7be:	b2da      	uxtb	r2, r3
    b7c0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b7c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7c8:	701a      	strb	r2, [r3, #0]
    b7ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7d2:	781b      	ldrb	r3, [r3, #0]
    b7d4:	3301      	adds	r3, #1
    b7d6:	b2da      	uxtb	r2, r3
    b7d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7e0:	701a      	strb	r2, [r3, #0]
    b7e2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ea:	781b      	ldrb	r3, [r3, #0]
    b7ec:	2bff      	cmp	r3, #255	; 0xff
    b7ee:	d105      	bne.n	b7fc <send_climb+0x5fc>
    b7f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7f8:	2200      	movs	r2, #0
    b7fa:	701a      	strb	r2, [r3, #0]
    b7fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    b800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b804:	781b      	ldrb	r3, [r3, #0]
    b806:	461a      	mov	r2, r3
    b808:	f64c 0398 	movw	r3, #51352	; 0xc898
    b80c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b810:	7899      	ldrb	r1, [r3, #2]
    b812:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b816:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b81a:	5499      	strb	r1, [r3, r2]
    b81c:	4bae      	ldr	r3, [pc, #696]	; (bad8 <send_climb+0x8d8>)
    b81e:	781a      	ldrb	r2, [r3, #0]
    b820:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b828:	781b      	ldrb	r3, [r3, #0]
    b82a:	4413      	add	r3, r2
    b82c:	b2da      	uxtb	r2, r3
    b82e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b836:	701a      	strb	r2, [r3, #0]
    b838:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b83c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b840:	781a      	ldrb	r2, [r3, #0]
    b842:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b84a:	781b      	ldrb	r3, [r3, #0]
    b84c:	4413      	add	r3, r2
    b84e:	b2da      	uxtb	r2, r3
    b850:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b858:	701a      	strb	r2, [r3, #0]
    b85a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b85e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b862:	781b      	ldrb	r3, [r3, #0]
    b864:	3301      	adds	r3, #1
    b866:	b2da      	uxtb	r2, r3
    b868:	f24c 5349 	movw	r3, #50505	; 0xc549
    b86c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b870:	701a      	strb	r2, [r3, #0]
    b872:	f24c 5349 	movw	r3, #50505	; 0xc549
    b876:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b87a:	781b      	ldrb	r3, [r3, #0]
    b87c:	2bff      	cmp	r3, #255	; 0xff
    b87e:	d105      	bne.n	b88c <send_climb+0x68c>
    b880:	f24c 5349 	movw	r3, #50505	; 0xc549
    b884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b888:	2200      	movs	r2, #0
    b88a:	701a      	strb	r2, [r3, #0]
    b88c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b894:	781b      	ldrb	r3, [r3, #0]
    b896:	461a      	mov	r2, r3
    b898:	f64c 0398 	movw	r3, #51352	; 0xc898
    b89c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8a0:	78d9      	ldrb	r1, [r3, #3]
    b8a2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b8a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8aa:	5499      	strb	r1, [r3, r2]
    b8ac:	4b8b      	ldr	r3, [pc, #556]	; (badc <send_climb+0x8dc>)
    b8ae:	781a      	ldrb	r2, [r3, #0]
    b8b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b8b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8b8:	781b      	ldrb	r3, [r3, #0]
    b8ba:	4413      	add	r3, r2
    b8bc:	b2da      	uxtb	r2, r3
    b8be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8c6:	701a      	strb	r2, [r3, #0]
    b8c8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8d0:	781a      	ldrb	r2, [r3, #0]
    b8d2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b8d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8da:	781b      	ldrb	r3, [r3, #0]
    b8dc:	4413      	add	r3, r2
    b8de:	b2da      	uxtb	r2, r3
    b8e0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8e8:	701a      	strb	r2, [r3, #0]
    b8ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8f2:	781b      	ldrb	r3, [r3, #0]
    b8f4:	3301      	adds	r3, #1
    b8f6:	b2da      	uxtb	r2, r3
    b8f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b900:	701a      	strb	r2, [r3, #0]
    b902:	f24c 5349 	movw	r3, #50505	; 0xc549
    b906:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b90a:	781b      	ldrb	r3, [r3, #0]
    b90c:	2bff      	cmp	r3, #255	; 0xff
    b90e:	d105      	bne.n	b91c <send_climb+0x71c>
    b910:	f24c 5349 	movw	r3, #50505	; 0xc549
    b914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b918:	2200      	movs	r2, #0
    b91a:	701a      	strb	r2, [r3, #0]
    b91c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b924:	781b      	ldrb	r3, [r3, #0]
    b926:	461a      	mov	r2, r3
    b928:	f648 23d4 	movw	r3, #35540	; 0x8ad4
    b92c:	f2c0 0301 	movt	r3, #1
    b930:	7819      	ldrb	r1, [r3, #0]
    b932:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b93a:	5499      	strb	r1, [r3, r2]
    b93c:	f648 23d4 	movw	r3, #35540	; 0x8ad4
    b940:	f2c0 0301 	movt	r3, #1
    b944:	781a      	ldrb	r2, [r3, #0]
    b946:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b94e:	781b      	ldrb	r3, [r3, #0]
    b950:	4413      	add	r3, r2
    b952:	b2da      	uxtb	r2, r3
    b954:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b95c:	701a      	strb	r2, [r3, #0]
    b95e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b966:	781a      	ldrb	r2, [r3, #0]
    b968:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b970:	781b      	ldrb	r3, [r3, #0]
    b972:	4413      	add	r3, r2
    b974:	b2da      	uxtb	r2, r3
    b976:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b97a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b97e:	701a      	strb	r2, [r3, #0]
    b980:	f24c 5349 	movw	r3, #50505	; 0xc549
    b984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b988:	781b      	ldrb	r3, [r3, #0]
    b98a:	3301      	adds	r3, #1
    b98c:	b2da      	uxtb	r2, r3
    b98e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b996:	701a      	strb	r2, [r3, #0]
    b998:	f24c 5349 	movw	r3, #50505	; 0xc549
    b99c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9a0:	781b      	ldrb	r3, [r3, #0]
    b9a2:	2bff      	cmp	r3, #255	; 0xff
    b9a4:	d105      	bne.n	b9b2 <send_climb+0x7b2>
    b9a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9ae:	2200      	movs	r2, #0
    b9b0:	701a      	strb	r2, [r3, #0]
    b9b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9ba:	781b      	ldrb	r3, [r3, #0]
    b9bc:	461a      	mov	r2, r3
    b9be:	f648 23d4 	movw	r3, #35540	; 0x8ad4
    b9c2:	f2c0 0301 	movt	r3, #1
    b9c6:	7859      	ldrb	r1, [r3, #1]
    b9c8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b9cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9d0:	5499      	strb	r1, [r3, r2]
    b9d2:	4b43      	ldr	r3, [pc, #268]	; (bae0 <send_climb+0x8e0>)
    b9d4:	781a      	ldrb	r2, [r3, #0]
    b9d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b9da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9de:	781b      	ldrb	r3, [r3, #0]
    b9e0:	4413      	add	r3, r2
    b9e2:	b2da      	uxtb	r2, r3
    b9e4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b9e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9ec:	701a      	strb	r2, [r3, #0]
    b9ee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9f6:	781a      	ldrb	r2, [r3, #0]
    b9f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b9fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba00:	781b      	ldrb	r3, [r3, #0]
    ba02:	4413      	add	r3, r2
    ba04:	b2da      	uxtb	r2, r3
    ba06:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ba0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba0e:	701a      	strb	r2, [r3, #0]
    ba10:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba18:	781b      	ldrb	r3, [r3, #0]
    ba1a:	3301      	adds	r3, #1
    ba1c:	b2da      	uxtb	r2, r3
    ba1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba26:	701a      	strb	r2, [r3, #0]
    ba28:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba30:	781b      	ldrb	r3, [r3, #0]
    ba32:	2bff      	cmp	r3, #255	; 0xff
    ba34:	d105      	bne.n	ba42 <send_climb+0x842>
    ba36:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba3e:	2200      	movs	r2, #0
    ba40:	701a      	strb	r2, [r3, #0]
    ba42:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba4a:	781b      	ldrb	r3, [r3, #0]
    ba4c:	461a      	mov	r2, r3
    ba4e:	f648 23d4 	movw	r3, #35540	; 0x8ad4
    ba52:	f2c0 0301 	movt	r3, #1
    ba56:	7899      	ldrb	r1, [r3, #2]
    ba58:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ba5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba60:	5499      	strb	r1, [r3, r2]
    ba62:	4b20      	ldr	r3, [pc, #128]	; (bae4 <send_climb+0x8e4>)
    ba64:	781a      	ldrb	r2, [r3, #0]
    ba66:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba6e:	781b      	ldrb	r3, [r3, #0]
    ba70:	4413      	add	r3, r2
    ba72:	b2da      	uxtb	r2, r3
    ba74:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba7c:	701a      	strb	r2, [r3, #0]
    ba7e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ba82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba86:	781a      	ldrb	r2, [r3, #0]
    ba88:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba90:	781b      	ldrb	r3, [r3, #0]
    ba92:	4413      	add	r3, r2
    ba94:	b2da      	uxtb	r2, r3
    ba96:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ba9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba9e:	701a      	strb	r2, [r3, #0]
    baa0:	f24c 5349 	movw	r3, #50505	; 0xc549
    baa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baa8:	781b      	ldrb	r3, [r3, #0]
    baaa:	3301      	adds	r3, #1
    baac:	b2da      	uxtb	r2, r3
    baae:	f24c 5349 	movw	r3, #50505	; 0xc549
    bab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bab6:	701a      	strb	r2, [r3, #0]
    bab8:	f24c 5349 	movw	r3, #50505	; 0xc549
    babc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bac0:	781b      	ldrb	r3, [r3, #0]
    bac2:	2bff      	cmp	r3, #255	; 0xff
    bac4:	d110      	bne.n	bae8 <send_climb+0x8e8>
    bac6:	f24c 5349 	movw	r3, #50505	; 0xc549
    baca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bace:	2200      	movs	r2, #0
    bad0:	701a      	strb	r2, [r3, #0]
    bad2:	e009      	b.n	bae8 <send_climb+0x8e8>
    bad4:	2004c899 	.word	0x2004c899
    bad8:	2004c89a 	.word	0x2004c89a
    badc:	2004c89b 	.word	0x2004c89b
    bae0:	00018ad5 	.word	0x00018ad5
    bae4:	00018ad6 	.word	0x00018ad6
    bae8:	f24c 5349 	movw	r3, #50505	; 0xc549
    baec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baf0:	781b      	ldrb	r3, [r3, #0]
    baf2:	461a      	mov	r2, r3
    baf4:	f648 23d4 	movw	r3, #35540	; 0x8ad4
    baf8:	f2c0 0301 	movt	r3, #1
    bafc:	78d9      	ldrb	r1, [r3, #3]
    bafe:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bb02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb06:	5499      	strb	r1, [r3, r2]
    bb08:	4b79      	ldr	r3, [pc, #484]	; (bcf0 <send_climb+0xaf0>)
    bb0a:	781a      	ldrb	r2, [r3, #0]
    bb0c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bb10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb14:	781b      	ldrb	r3, [r3, #0]
    bb16:	4413      	add	r3, r2
    bb18:	b2da      	uxtb	r2, r3
    bb1a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bb1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb22:	701a      	strb	r2, [r3, #0]
    bb24:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bb28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb2c:	781a      	ldrb	r2, [r3, #0]
    bb2e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bb32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb36:	781b      	ldrb	r3, [r3, #0]
    bb38:	4413      	add	r3, r2
    bb3a:	b2da      	uxtb	r2, r3
    bb3c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bb40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb44:	701a      	strb	r2, [r3, #0]
    bb46:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb4e:	781b      	ldrb	r3, [r3, #0]
    bb50:	3301      	adds	r3, #1
    bb52:	b2da      	uxtb	r2, r3
    bb54:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb5c:	701a      	strb	r2, [r3, #0]
    bb5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb66:	781b      	ldrb	r3, [r3, #0]
    bb68:	2bff      	cmp	r3, #255	; 0xff
    bb6a:	d105      	bne.n	bb78 <send_climb+0x978>
    bb6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb74:	2200      	movs	r2, #0
    bb76:	701a      	strb	r2, [r3, #0]
    bb78:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb80:	781b      	ldrb	r3, [r3, #0]
    bb82:	461a      	mov	r2, r3
    bb84:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bb88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb8c:	7819      	ldrb	r1, [r3, #0]
    bb8e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bb92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb96:	5499      	strb	r1, [r3, r2]
    bb98:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bba0:	781b      	ldrb	r3, [r3, #0]
    bba2:	3301      	adds	r3, #1
    bba4:	b2da      	uxtb	r2, r3
    bba6:	f24c 5349 	movw	r3, #50505	; 0xc549
    bbaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbae:	701a      	strb	r2, [r3, #0]
    bbb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    bbb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbb8:	781b      	ldrb	r3, [r3, #0]
    bbba:	2bff      	cmp	r3, #255	; 0xff
    bbbc:	d105      	bne.n	bbca <send_climb+0x9ca>
    bbbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    bbc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbc6:	2200      	movs	r2, #0
    bbc8:	701a      	strb	r2, [r3, #0]
    bbca:	f24c 5349 	movw	r3, #50505	; 0xc549
    bbce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbd2:	781b      	ldrb	r3, [r3, #0]
    bbd4:	461a      	mov	r2, r3
    bbd6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bbda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbde:	7819      	ldrb	r1, [r3, #0]
    bbe0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bbe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbe8:	5499      	strb	r1, [r3, r2]
    bbea:	f24c 5349 	movw	r3, #50505	; 0xc549
    bbee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbf2:	781b      	ldrb	r3, [r3, #0]
    bbf4:	3301      	adds	r3, #1
    bbf6:	b2da      	uxtb	r2, r3
    bbf8:	f24c 5349 	movw	r3, #50505	; 0xc549
    bbfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc00:	701a      	strb	r2, [r3, #0]
    bc02:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc0a:	781b      	ldrb	r3, [r3, #0]
    bc0c:	2bff      	cmp	r3, #255	; 0xff
    bc0e:	d105      	bne.n	bc1c <send_climb+0xa1c>
    bc10:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc18:	2200      	movs	r2, #0
    bc1a:	701a      	strb	r2, [r3, #0]
    bc1c:	f242 0339 	movw	r3, #8249	; 0x2039
    bc20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc24:	781b      	ldrb	r3, [r3, #0]
    bc26:	b2db      	uxtb	r3, r3
    bc28:	f003 0310 	and.w	r3, r3, #16
    bc2c:	2b00      	cmp	r3, #0
    bc2e:	d15a      	bne.n	bce6 <send_climb+0xae6>
    bc30:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bc34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc38:	781b      	ldrb	r3, [r3, #0]
    bc3a:	b2db      	uxtb	r3, r3
    bc3c:	461a      	mov	r2, r3
    bc3e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bc42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc46:	5c9a      	ldrb	r2, [r3, r2]
    bc48:	f24c 634b 	movw	r3, #50763	; 0xc64b
    bc4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc50:	701a      	strb	r2, [r3, #0]
    bc52:	f24c 634c 	movw	r3, #50764	; 0xc64c
    bc56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc5a:	2200      	movs	r2, #0
    bc5c:	701a      	strb	r2, [r3, #0]
    bc5e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bc62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc66:	781b      	ldrb	r3, [r3, #0]
    bc68:	b2db      	uxtb	r3, r3
    bc6a:	3301      	adds	r3, #1
    bc6c:	b2da      	uxtb	r2, r3
    bc6e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bc72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc76:	701a      	strb	r2, [r3, #0]
    bc78:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bc7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc80:	781b      	ldrb	r3, [r3, #0]
    bc82:	b2db      	uxtb	r3, r3
    bc84:	2bff      	cmp	r3, #255	; 0xff
    bc86:	d105      	bne.n	bc94 <send_climb+0xa94>
    bc88:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bc8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc90:	2200      	movs	r2, #0
    bc92:	701a      	strb	r2, [r3, #0]
    bc94:	f242 0338 	movw	r3, #8248	; 0x2038
    bc98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc9c:	f242 0238 	movw	r2, #8248	; 0x2038
    bca0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bca4:	7812      	ldrb	r2, [r2, #0]
    bca6:	b2d2      	uxtb	r2, r2
    bca8:	f042 0201 	orr.w	r2, r2, #1
    bcac:	b2d2      	uxtb	r2, r2
    bcae:	701a      	strb	r2, [r3, #0]
    bcb0:	f242 0339 	movw	r3, #8249	; 0x2039
    bcb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcb8:	f242 0239 	movw	r2, #8249	; 0x2039
    bcbc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bcc0:	7812      	ldrb	r2, [r2, #0]
    bcc2:	b2d2      	uxtb	r2, r2
    bcc4:	f042 0210 	orr.w	r2, r2, #16
    bcc8:	b2d2      	uxtb	r2, r2
    bcca:	701a      	strb	r2, [r3, #0]
    bccc:	e00b      	b.n	bce6 <send_climb+0xae6>
    bcce:	f24c 5348 	movw	r3, #50504	; 0xc548
    bcd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcd6:	781b      	ldrb	r3, [r3, #0]
    bcd8:	3301      	adds	r3, #1
    bcda:	b2da      	uxtb	r2, r3
    bcdc:	f24c 5348 	movw	r3, #50504	; 0xc548
    bce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bce4:	701a      	strb	r2, [r3, #0]
}
    bce6:	46bd      	mov	sp, r7
    bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
    bcec:	4770      	bx	lr
    bcee:	bf00      	nop
    bcf0:	00018ad7 	.word	0x00018ad7

0000bcf4 <send_mode>:
void send_mode(void){  //5000ms
    bcf4:	b480      	push	{r7}
    bcf6:	af00      	add	r7, sp, #0
  if(!boot)
    bcf8:	f240 533d 	movw	r3, #1341	; 0x53d
    bcfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd00:	781b      	ldrb	r3, [r3, #0]
    bd02:	2b00      	cmp	r3, #0
    bd04:	f040 82ce 	bne.w	c2a4 <send_mode+0x5b0>
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    bd08:	f24c 5341 	movw	r3, #50497	; 0xc541
    bd0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd10:	781a      	ldrb	r2, [r3, #0]
    bd12:	f248 531f 	movw	r3, #34079	; 0x851f
    bd16:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    bd1a:	fba3 1302 	umull	r1, r3, r3, r2
    bd1e:	091b      	lsrs	r3, r3, #4
    bd20:	2132      	movs	r1, #50	; 0x32
    bd22:	fb01 f303 	mul.w	r3, r1, r3
    bd26:	1ad3      	subs	r3, r2, r3
    bd28:	b2db      	uxtb	r3, r3
    bd2a:	2b09      	cmp	r3, #9
    bd2c:	f040 82ba 	bne.w	c2a4 <send_mode+0x5b0>
    bd30:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd38:	781a      	ldrb	r2, [r3, #0]
    bd3a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bd3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd42:	781b      	ldrb	r3, [r3, #0]
    bd44:	b2db      	uxtb	r3, r3
    bd46:	429a      	cmp	r2, r3
    bd48:	d313      	bcc.n	bd72 <send_mode+0x7e>
    bd4a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bd4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd52:	781b      	ldrb	r3, [r3, #0]
    bd54:	b2db      	uxtb	r3, r3
    bd56:	461a      	mov	r2, r3
    bd58:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd60:	781b      	ldrb	r3, [r3, #0]
    bd62:	1ad3      	subs	r3, r2, r3
    bd64:	33ff      	adds	r3, #255	; 0xff
    bd66:	2b09      	cmp	r3, #9
    bd68:	bfd4      	ite	le
    bd6a:	2300      	movle	r3, #0
    bd6c:	2301      	movgt	r3, #1
    bd6e:	b2db      	uxtb	r3, r3
    bd70:	e011      	b.n	bd96 <send_mode+0xa2>
    bd72:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bd76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd7a:	781b      	ldrb	r3, [r3, #0]
    bd7c:	b2db      	uxtb	r3, r3
    bd7e:	461a      	mov	r2, r3
    bd80:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd88:	781b      	ldrb	r3, [r3, #0]
    bd8a:	1ad3      	subs	r3, r2, r3
    bd8c:	2b09      	cmp	r3, #9
    bd8e:	bfd4      	ite	le
    bd90:	2300      	movle	r3, #0
    bd92:	2301      	movgt	r3, #1
    bd94:	b2db      	uxtb	r3, r3
    bd96:	2b00      	cmp	r3, #0
    bd98:	f000 8278 	beq.w	c28c <send_mode+0x598>
    bd9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    bda0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bda4:	781b      	ldrb	r3, [r3, #0]
    bda6:	461a      	mov	r2, r3
    bda8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bdac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdb0:	2105      	movs	r1, #5
    bdb2:	5499      	strb	r1, [r3, r2]
    bdb4:	f24c 5349 	movw	r3, #50505	; 0xc549
    bdb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdbc:	781b      	ldrb	r3, [r3, #0]
    bdbe:	3301      	adds	r3, #1
    bdc0:	b2da      	uxtb	r2, r3
    bdc2:	f24c 5349 	movw	r3, #50505	; 0xc549
    bdc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdca:	701a      	strb	r2, [r3, #0]
    bdcc:	f24c 5349 	movw	r3, #50505	; 0xc549
    bdd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdd4:	781b      	ldrb	r3, [r3, #0]
    bdd6:	2bff      	cmp	r3, #255	; 0xff
    bdd8:	d105      	bne.n	bde6 <send_mode+0xf2>
    bdda:	f24c 5349 	movw	r3, #50505	; 0xc549
    bdde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bde2:	2200      	movs	r2, #0
    bde4:	701a      	strb	r2, [r3, #0]
    bde6:	f24c 5349 	movw	r3, #50505	; 0xc549
    bdea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdee:	781b      	ldrb	r3, [r3, #0]
    bdf0:	461a      	mov	r2, r3
    bdf2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bdf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdfa:	210b      	movs	r1, #11
    bdfc:	5499      	strb	r1, [r3, r2]
    bdfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    be02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be06:	781b      	ldrb	r3, [r3, #0]
    be08:	3301      	adds	r3, #1
    be0a:	b2da      	uxtb	r2, r3
    be0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    be10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be14:	701a      	strb	r2, [r3, #0]
    be16:	f24c 5349 	movw	r3, #50505	; 0xc549
    be1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be1e:	781b      	ldrb	r3, [r3, #0]
    be20:	2bff      	cmp	r3, #255	; 0xff
    be22:	d105      	bne.n	be30 <send_mode+0x13c>
    be24:	f24c 5349 	movw	r3, #50505	; 0xc549
    be28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be2c:	2200      	movs	r2, #0
    be2e:	701a      	strb	r2, [r3, #0]
    be30:	f24c 634d 	movw	r3, #50765	; 0xc64d
    be34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be38:	220b      	movs	r2, #11
    be3a:	701a      	strb	r2, [r3, #0]
    be3c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    be40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be44:	220b      	movs	r2, #11
    be46:	701a      	strb	r2, [r3, #0]
    be48:	f24c 5349 	movw	r3, #50505	; 0xc549
    be4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be50:	781b      	ldrb	r3, [r3, #0]
    be52:	461a      	mov	r2, r3
    be54:	f24c 532c 	movw	r3, #50476	; 0xc52c
    be58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be5c:	7819      	ldrb	r1, [r3, #0]
    be5e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    be62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be66:	5499      	strb	r1, [r3, r2]
    be68:	f24c 634d 	movw	r3, #50765	; 0xc64d
    be6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be70:	781a      	ldrb	r2, [r3, #0]
    be72:	f24c 532c 	movw	r3, #50476	; 0xc52c
    be76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be7a:	781b      	ldrb	r3, [r3, #0]
    be7c:	4413      	add	r3, r2
    be7e:	b2da      	uxtb	r2, r3
    be80:	f24c 634d 	movw	r3, #50765	; 0xc64d
    be84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be88:	701a      	strb	r2, [r3, #0]
    be8a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    be8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be92:	781a      	ldrb	r2, [r3, #0]
    be94:	f24c 634d 	movw	r3, #50765	; 0xc64d
    be98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be9c:	781b      	ldrb	r3, [r3, #0]
    be9e:	4413      	add	r3, r2
    bea0:	b2da      	uxtb	r2, r3
    bea2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beaa:	701a      	strb	r2, [r3, #0]
    beac:	f24c 5349 	movw	r3, #50505	; 0xc549
    beb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beb4:	781b      	ldrb	r3, [r3, #0]
    beb6:	3301      	adds	r3, #1
    beb8:	b2da      	uxtb	r2, r3
    beba:	f24c 5349 	movw	r3, #50505	; 0xc549
    bebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bec2:	701a      	strb	r2, [r3, #0]
    bec4:	f24c 5349 	movw	r3, #50505	; 0xc549
    bec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    becc:	781b      	ldrb	r3, [r3, #0]
    bece:	2bff      	cmp	r3, #255	; 0xff
    bed0:	d105      	bne.n	bede <send_mode+0x1ea>
    bed2:	f24c 5349 	movw	r3, #50505	; 0xc549
    bed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beda:	2200      	movs	r2, #0
    bedc:	701a      	strb	r2, [r3, #0]
    bede:	f24c 5349 	movw	r3, #50505	; 0xc549
    bee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bee6:	781b      	ldrb	r3, [r3, #0]
    bee8:	461a      	mov	r2, r3
    beea:	f24c 532d 	movw	r3, #50477	; 0xc52d
    beee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bef2:	7819      	ldrb	r1, [r3, #0]
    bef4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    befc:	5499      	strb	r1, [r3, r2]
    befe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf06:	781a      	ldrb	r2, [r3, #0]
    bf08:	f24c 532d 	movw	r3, #50477	; 0xc52d
    bf0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf10:	781b      	ldrb	r3, [r3, #0]
    bf12:	4413      	add	r3, r2
    bf14:	b2da      	uxtb	r2, r3
    bf16:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf1e:	701a      	strb	r2, [r3, #0]
    bf20:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bf24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf28:	781a      	ldrb	r2, [r3, #0]
    bf2a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf32:	781b      	ldrb	r3, [r3, #0]
    bf34:	4413      	add	r3, r2
    bf36:	b2da      	uxtb	r2, r3
    bf38:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bf3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf40:	701a      	strb	r2, [r3, #0]
    bf42:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf4a:	781b      	ldrb	r3, [r3, #0]
    bf4c:	3301      	adds	r3, #1
    bf4e:	b2da      	uxtb	r2, r3
    bf50:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf58:	701a      	strb	r2, [r3, #0]
    bf5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf62:	781b      	ldrb	r3, [r3, #0]
    bf64:	2bff      	cmp	r3, #255	; 0xff
    bf66:	d105      	bne.n	bf74 <send_mode+0x280>
    bf68:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf70:	2200      	movs	r2, #0
    bf72:	701a      	strb	r2, [r3, #0]
    bf74:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf7c:	781b      	ldrb	r3, [r3, #0]
    bf7e:	461a      	mov	r2, r3
    bf80:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    bf84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf88:	7819      	ldrb	r1, [r3, #0]
    bf8a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bf8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf92:	5499      	strb	r1, [r3, r2]
    bf94:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf9c:	781a      	ldrb	r2, [r3, #0]
    bf9e:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    bfa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfa6:	781b      	ldrb	r3, [r3, #0]
    bfa8:	4413      	add	r3, r2
    bfaa:	b2da      	uxtb	r2, r3
    bfac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bfb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfb4:	701a      	strb	r2, [r3, #0]
    bfb6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bfba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfbe:	781a      	ldrb	r2, [r3, #0]
    bfc0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bfc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfc8:	781b      	ldrb	r3, [r3, #0]
    bfca:	4413      	add	r3, r2
    bfcc:	b2da      	uxtb	r2, r3
    bfce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bfd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfd6:	701a      	strb	r2, [r3, #0]
    bfd8:	f24c 5349 	movw	r3, #50505	; 0xc549
    bfdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfe0:	781b      	ldrb	r3, [r3, #0]
    bfe2:	3301      	adds	r3, #1
    bfe4:	b2da      	uxtb	r2, r3
    bfe6:	f24c 5349 	movw	r3, #50505	; 0xc549
    bfea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfee:	701a      	strb	r2, [r3, #0]
    bff0:	f24c 5349 	movw	r3, #50505	; 0xc549
    bff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bff8:	781b      	ldrb	r3, [r3, #0]
    bffa:	2bff      	cmp	r3, #255	; 0xff
    bffc:	d105      	bne.n	c00a <send_mode+0x316>
    bffe:	f24c 5349 	movw	r3, #50505	; 0xc549
    c002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c006:	2200      	movs	r2, #0
    c008:	701a      	strb	r2, [r3, #0]
    c00a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c00e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c012:	781b      	ldrb	r3, [r3, #0]
    c014:	461a      	mov	r2, r3
    c016:	f24c 5333 	movw	r3, #50483	; 0xc533
    c01a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c01e:	7819      	ldrb	r1, [r3, #0]
    c020:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c028:	5499      	strb	r1, [r3, r2]
    c02a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c02e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c032:	781a      	ldrb	r2, [r3, #0]
    c034:	f24c 5333 	movw	r3, #50483	; 0xc533
    c038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c03c:	781b      	ldrb	r3, [r3, #0]
    c03e:	4413      	add	r3, r2
    c040:	b2da      	uxtb	r2, r3
    c042:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c04a:	701a      	strb	r2, [r3, #0]
    c04c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c054:	781a      	ldrb	r2, [r3, #0]
    c056:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c05a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c05e:	781b      	ldrb	r3, [r3, #0]
    c060:	4413      	add	r3, r2
    c062:	b2da      	uxtb	r2, r3
    c064:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c06c:	701a      	strb	r2, [r3, #0]
    c06e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c076:	781b      	ldrb	r3, [r3, #0]
    c078:	3301      	adds	r3, #1
    c07a:	b2da      	uxtb	r2, r3
    c07c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c084:	701a      	strb	r2, [r3, #0]
    c086:	f24c 5349 	movw	r3, #50505	; 0xc549
    c08a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c08e:	781b      	ldrb	r3, [r3, #0]
    c090:	2bff      	cmp	r3, #255	; 0xff
    c092:	d105      	bne.n	c0a0 <send_mode+0x3ac>
    c094:	f24c 5349 	movw	r3, #50505	; 0xc549
    c098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c09c:	2200      	movs	r2, #0
    c09e:	701a      	strb	r2, [r3, #0]
    c0a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0a8:	781b      	ldrb	r3, [r3, #0]
    c0aa:	461a      	mov	r2, r3
    c0ac:	f240 533c 	movw	r3, #1340	; 0x53c
    c0b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0b4:	7819      	ldrb	r1, [r3, #0]
    c0b6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c0ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0be:	5499      	strb	r1, [r3, r2]
    c0c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c0c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0c8:	781a      	ldrb	r2, [r3, #0]
    c0ca:	f240 533c 	movw	r3, #1340	; 0x53c
    c0ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0d2:	781b      	ldrb	r3, [r3, #0]
    c0d4:	4413      	add	r3, r2
    c0d6:	b2da      	uxtb	r2, r3
    c0d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c0dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0e0:	701a      	strb	r2, [r3, #0]
    c0e2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c0e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0ea:	781a      	ldrb	r2, [r3, #0]
    c0ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0f4:	781b      	ldrb	r3, [r3, #0]
    c0f6:	4413      	add	r3, r2
    c0f8:	b2da      	uxtb	r2, r3
    c0fa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c0fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c102:	701a      	strb	r2, [r3, #0]
    c104:	f24c 5349 	movw	r3, #50505	; 0xc549
    c108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c10c:	781b      	ldrb	r3, [r3, #0]
    c10e:	3301      	adds	r3, #1
    c110:	b2da      	uxtb	r2, r3
    c112:	f24c 5349 	movw	r3, #50505	; 0xc549
    c116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c11a:	701a      	strb	r2, [r3, #0]
    c11c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c124:	781b      	ldrb	r3, [r3, #0]
    c126:	2bff      	cmp	r3, #255	; 0xff
    c128:	d105      	bne.n	c136 <send_mode+0x442>
    c12a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c12e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c132:	2200      	movs	r2, #0
    c134:	701a      	strb	r2, [r3, #0]
    c136:	f24c 5349 	movw	r3, #50505	; 0xc549
    c13a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c13e:	781b      	ldrb	r3, [r3, #0]
    c140:	461a      	mov	r2, r3
    c142:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c14a:	7819      	ldrb	r1, [r3, #0]
    c14c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c154:	5499      	strb	r1, [r3, r2]
    c156:	f24c 5349 	movw	r3, #50505	; 0xc549
    c15a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c15e:	781b      	ldrb	r3, [r3, #0]
    c160:	3301      	adds	r3, #1
    c162:	b2da      	uxtb	r2, r3
    c164:	f24c 5349 	movw	r3, #50505	; 0xc549
    c168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c16c:	701a      	strb	r2, [r3, #0]
    c16e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c176:	781b      	ldrb	r3, [r3, #0]
    c178:	2bff      	cmp	r3, #255	; 0xff
    c17a:	d105      	bne.n	c188 <send_mode+0x494>
    c17c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c184:	2200      	movs	r2, #0
    c186:	701a      	strb	r2, [r3, #0]
    c188:	f24c 5349 	movw	r3, #50505	; 0xc549
    c18c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c190:	781b      	ldrb	r3, [r3, #0]
    c192:	461a      	mov	r2, r3
    c194:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c19c:	7819      	ldrb	r1, [r3, #0]
    c19e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c1a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1a6:	5499      	strb	r1, [r3, r2]
    c1a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1b0:	781b      	ldrb	r3, [r3, #0]
    c1b2:	3301      	adds	r3, #1
    c1b4:	b2da      	uxtb	r2, r3
    c1b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1be:	701a      	strb	r2, [r3, #0]
    c1c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1c8:	781b      	ldrb	r3, [r3, #0]
    c1ca:	2bff      	cmp	r3, #255	; 0xff
    c1cc:	d105      	bne.n	c1da <send_mode+0x4e6>
    c1ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1d6:	2200      	movs	r2, #0
    c1d8:	701a      	strb	r2, [r3, #0]
    c1da:	f242 0339 	movw	r3, #8249	; 0x2039
    c1de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1e2:	781b      	ldrb	r3, [r3, #0]
    c1e4:	b2db      	uxtb	r3, r3
    c1e6:	f003 0310 	and.w	r3, r3, #16
    c1ea:	2b00      	cmp	r3, #0
    c1ec:	d15a      	bne.n	c2a4 <send_mode+0x5b0>
    c1ee:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c1f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1f6:	781b      	ldrb	r3, [r3, #0]
    c1f8:	b2db      	uxtb	r3, r3
    c1fa:	461a      	mov	r2, r3
    c1fc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c204:	5c9a      	ldrb	r2, [r3, r2]
    c206:	f24c 634b 	movw	r3, #50763	; 0xc64b
    c20a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c20e:	701a      	strb	r2, [r3, #0]
    c210:	f24c 634c 	movw	r3, #50764	; 0xc64c
    c214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c218:	2200      	movs	r2, #0
    c21a:	701a      	strb	r2, [r3, #0]
    c21c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c224:	781b      	ldrb	r3, [r3, #0]
    c226:	b2db      	uxtb	r3, r3
    c228:	3301      	adds	r3, #1
    c22a:	b2da      	uxtb	r2, r3
    c22c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c234:	701a      	strb	r2, [r3, #0]
    c236:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c23e:	781b      	ldrb	r3, [r3, #0]
    c240:	b2db      	uxtb	r3, r3
    c242:	2bff      	cmp	r3, #255	; 0xff
    c244:	d105      	bne.n	c252 <send_mode+0x55e>
    c246:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c24a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c24e:	2200      	movs	r2, #0
    c250:	701a      	strb	r2, [r3, #0]
    c252:	f242 0338 	movw	r3, #8248	; 0x2038
    c256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c25a:	f242 0238 	movw	r2, #8248	; 0x2038
    c25e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c262:	7812      	ldrb	r2, [r2, #0]
    c264:	b2d2      	uxtb	r2, r2
    c266:	f042 0201 	orr.w	r2, r2, #1
    c26a:	b2d2      	uxtb	r2, r2
    c26c:	701a      	strb	r2, [r3, #0]
    c26e:	f242 0339 	movw	r3, #8249	; 0x2039
    c272:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c276:	f242 0239 	movw	r2, #8249	; 0x2039
    c27a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c27e:	7812      	ldrb	r2, [r2, #0]
    c280:	b2d2      	uxtb	r2, r2
    c282:	f042 0210 	orr.w	r2, r2, #16
    c286:	b2d2      	uxtb	r2, r2
    c288:	701a      	strb	r2, [r3, #0]
    c28a:	e00b      	b.n	c2a4 <send_mode+0x5b0>
    c28c:	f24c 5348 	movw	r3, #50504	; 0xc548
    c290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c294:	781b      	ldrb	r3, [r3, #0]
    c296:	3301      	adds	r3, #1
    c298:	b2da      	uxtb	r2, r3
    c29a:	f24c 5348 	movw	r3, #50504	; 0xc548
    c29e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2a2:	701a      	strb	r2, [r3, #0]
}
    c2a4:	46bd      	mov	sp, r7
    c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2aa:	4770      	bx	lr

0000c2ac <send_debug>:
void send_debug(void){  //5000ms
    c2ac:	b480      	push	{r7}
    c2ae:	af00      	add	r7, sp, #0
  if(!boot)
    c2b0:	f240 533d 	movw	r3, #1341	; 0x53d
    c2b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2b8:	781b      	ldrb	r3, [r3, #0]
    c2ba:	2b00      	cmp	r3, #0
    c2bc:	f040 82cf 	bne.w	c85e <send_debug+0x5b2>
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    c2c0:	f24c 5341 	movw	r3, #50497	; 0xc541
    c2c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2c8:	781a      	ldrb	r2, [r3, #0]
    c2ca:	f248 531f 	movw	r3, #34079	; 0x851f
    c2ce:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c2d2:	fba3 1302 	umull	r1, r3, r3, r2
    c2d6:	091b      	lsrs	r3, r3, #4
    c2d8:	2132      	movs	r1, #50	; 0x32
    c2da:	fb01 f303 	mul.w	r3, r1, r3
    c2de:	1ad3      	subs	r3, r2, r3
    c2e0:	b2db      	uxtb	r3, r3
    c2e2:	2b1d      	cmp	r3, #29
    c2e4:	f040 82bb 	bne.w	c85e <send_debug+0x5b2>
    c2e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c2ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2f0:	781a      	ldrb	r2, [r3, #0]
    c2f2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c2f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2fa:	781b      	ldrb	r3, [r3, #0]
    c2fc:	b2db      	uxtb	r3, r3
    c2fe:	429a      	cmp	r2, r3
    c300:	d313      	bcc.n	c32a <send_debug+0x7e>
    c302:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c30a:	781b      	ldrb	r3, [r3, #0]
    c30c:	b2db      	uxtb	r3, r3
    c30e:	461a      	mov	r2, r3
    c310:	f24c 5349 	movw	r3, #50505	; 0xc549
    c314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c318:	781b      	ldrb	r3, [r3, #0]
    c31a:	1ad3      	subs	r3, r2, r3
    c31c:	33ff      	adds	r3, #255	; 0xff
    c31e:	2b09      	cmp	r3, #9
    c320:	bfd4      	ite	le
    c322:	2300      	movle	r3, #0
    c324:	2301      	movgt	r3, #1
    c326:	b2db      	uxtb	r3, r3
    c328:	e011      	b.n	c34e <send_debug+0xa2>
    c32a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c32e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c332:	781b      	ldrb	r3, [r3, #0]
    c334:	b2db      	uxtb	r3, r3
    c336:	461a      	mov	r2, r3
    c338:	f24c 5349 	movw	r3, #50505	; 0xc549
    c33c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c340:	781b      	ldrb	r3, [r3, #0]
    c342:	1ad3      	subs	r3, r2, r3
    c344:	2b09      	cmp	r3, #9
    c346:	bfd4      	ite	le
    c348:	2300      	movle	r3, #0
    c34a:	2301      	movgt	r3, #1
    c34c:	b2db      	uxtb	r3, r3
    c34e:	2b00      	cmp	r3, #0
    c350:	f000 8279 	beq.w	c846 <send_debug+0x59a>
    c354:	f24c 5349 	movw	r3, #50505	; 0xc549
    c358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c35c:	781b      	ldrb	r3, [r3, #0]
    c35e:	461a      	mov	r2, r3
    c360:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c368:	2105      	movs	r1, #5
    c36a:	5499      	strb	r1, [r3, r2]
    c36c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c374:	781b      	ldrb	r3, [r3, #0]
    c376:	3301      	adds	r3, #1
    c378:	b2da      	uxtb	r2, r3
    c37a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c37e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c382:	701a      	strb	r2, [r3, #0]
    c384:	f24c 5349 	movw	r3, #50505	; 0xc549
    c388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c38c:	781b      	ldrb	r3, [r3, #0]
    c38e:	2bff      	cmp	r3, #255	; 0xff
    c390:	d105      	bne.n	c39e <send_debug+0xf2>
    c392:	f24c 5349 	movw	r3, #50505	; 0xc549
    c396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c39a:	2200      	movs	r2, #0
    c39c:	701a      	strb	r2, [r3, #0]
    c39e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3a6:	781b      	ldrb	r3, [r3, #0]
    c3a8:	461a      	mov	r2, r3
    c3aa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3b2:	210d      	movs	r1, #13
    c3b4:	5499      	strb	r1, [r3, r2]
    c3b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3be:	781b      	ldrb	r3, [r3, #0]
    c3c0:	3301      	adds	r3, #1
    c3c2:	b2da      	uxtb	r2, r3
    c3c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3cc:	701a      	strb	r2, [r3, #0]
    c3ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3d6:	781b      	ldrb	r3, [r3, #0]
    c3d8:	2bff      	cmp	r3, #255	; 0xff
    c3da:	d105      	bne.n	c3e8 <send_debug+0x13c>
    c3dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3e4:	2200      	movs	r2, #0
    c3e6:	701a      	strb	r2, [r3, #0]
    c3e8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c3ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3f0:	220d      	movs	r2, #13
    c3f2:	701a      	strb	r2, [r3, #0]
    c3f4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3fc:	220d      	movs	r2, #13
    c3fe:	701a      	strb	r2, [r3, #0]
    c400:	f24c 5349 	movw	r3, #50505	; 0xc549
    c404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c408:	781b      	ldrb	r3, [r3, #0]
    c40a:	461a      	mov	r2, r3
    c40c:	f24c 637f 	movw	r3, #50815	; 0xc67f
    c410:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c414:	781b      	ldrb	r3, [r3, #0]
    c416:	b2d9      	uxtb	r1, r3
    c418:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c41c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c420:	5499      	strb	r1, [r3, r2]
    c422:	f24c 637f 	movw	r3, #50815	; 0xc67f
    c426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c42a:	781a      	ldrb	r2, [r3, #0]
    c42c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c434:	781b      	ldrb	r3, [r3, #0]
    c436:	4413      	add	r3, r2
    c438:	b2da      	uxtb	r2, r3
    c43a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c43e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c442:	701a      	strb	r2, [r3, #0]
    c444:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c44c:	781a      	ldrb	r2, [r3, #0]
    c44e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c456:	781b      	ldrb	r3, [r3, #0]
    c458:	4413      	add	r3, r2
    c45a:	b2da      	uxtb	r2, r3
    c45c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c464:	701a      	strb	r2, [r3, #0]
    c466:	f24c 5349 	movw	r3, #50505	; 0xc549
    c46a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c46e:	781b      	ldrb	r3, [r3, #0]
    c470:	3301      	adds	r3, #1
    c472:	b2da      	uxtb	r2, r3
    c474:	f24c 5349 	movw	r3, #50505	; 0xc549
    c478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c47c:	701a      	strb	r2, [r3, #0]
    c47e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c486:	781b      	ldrb	r3, [r3, #0]
    c488:	2bff      	cmp	r3, #255	; 0xff
    c48a:	d105      	bne.n	c498 <send_debug+0x1ec>
    c48c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c494:	2200      	movs	r2, #0
    c496:	701a      	strb	r2, [r3, #0]
    c498:	f24c 5349 	movw	r3, #50505	; 0xc549
    c49c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4a0:	781b      	ldrb	r3, [r3, #0]
    c4a2:	461a      	mov	r2, r3
    c4a4:	f24c 6380 	movw	r3, #50816	; 0xc680
    c4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ac:	7819      	ldrb	r1, [r3, #0]
    c4ae:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c4b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4b6:	5499      	strb	r1, [r3, r2]
    c4b8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c4bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4c0:	781a      	ldrb	r2, [r3, #0]
    c4c2:	f24c 6380 	movw	r3, #50816	; 0xc680
    c4c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ca:	781b      	ldrb	r3, [r3, #0]
    c4cc:	4413      	add	r3, r2
    c4ce:	b2da      	uxtb	r2, r3
    c4d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c4d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4d8:	701a      	strb	r2, [r3, #0]
    c4da:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c4de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4e2:	781a      	ldrb	r2, [r3, #0]
    c4e4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c4e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ec:	781b      	ldrb	r3, [r3, #0]
    c4ee:	4413      	add	r3, r2
    c4f0:	b2da      	uxtb	r2, r3
    c4f2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4fa:	701a      	strb	r2, [r3, #0]
    c4fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    c500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c504:	781b      	ldrb	r3, [r3, #0]
    c506:	3301      	adds	r3, #1
    c508:	b2da      	uxtb	r2, r3
    c50a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c50e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c512:	701a      	strb	r2, [r3, #0]
    c514:	f24c 5349 	movw	r3, #50505	; 0xc549
    c518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c51c:	781b      	ldrb	r3, [r3, #0]
    c51e:	2bff      	cmp	r3, #255	; 0xff
    c520:	d105      	bne.n	c52e <send_debug+0x282>
    c522:	f24c 5349 	movw	r3, #50505	; 0xc549
    c526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c52a:	2200      	movs	r2, #0
    c52c:	701a      	strb	r2, [r3, #0]
    c52e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c536:	781b      	ldrb	r3, [r3, #0]
    c538:	461a      	mov	r2, r3
    c53a:	f24c 5348 	movw	r3, #50504	; 0xc548
    c53e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c542:	7819      	ldrb	r1, [r3, #0]
    c544:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c54c:	5499      	strb	r1, [r3, r2]
    c54e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c556:	781a      	ldrb	r2, [r3, #0]
    c558:	f24c 5348 	movw	r3, #50504	; 0xc548
    c55c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c560:	781b      	ldrb	r3, [r3, #0]
    c562:	4413      	add	r3, r2
    c564:	b2da      	uxtb	r2, r3
    c566:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c56a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c56e:	701a      	strb	r2, [r3, #0]
    c570:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c578:	781a      	ldrb	r2, [r3, #0]
    c57a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c57e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c582:	781b      	ldrb	r3, [r3, #0]
    c584:	4413      	add	r3, r2
    c586:	b2da      	uxtb	r2, r3
    c588:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c590:	701a      	strb	r2, [r3, #0]
    c592:	f24c 5349 	movw	r3, #50505	; 0xc549
    c596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c59a:	781b      	ldrb	r3, [r3, #0]
    c59c:	3301      	adds	r3, #1
    c59e:	b2da      	uxtb	r2, r3
    c5a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5a8:	701a      	strb	r2, [r3, #0]
    c5aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5b2:	781b      	ldrb	r3, [r3, #0]
    c5b4:	2bff      	cmp	r3, #255	; 0xff
    c5b6:	d105      	bne.n	c5c4 <send_debug+0x318>
    c5b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5c0:	2200      	movs	r2, #0
    c5c2:	701a      	strb	r2, [r3, #0]
    c5c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5cc:	781b      	ldrb	r3, [r3, #0]
    c5ce:	461a      	mov	r2, r3
    c5d0:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
    c5d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5d8:	7819      	ldrb	r1, [r3, #0]
    c5da:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c5de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5e2:	5499      	strb	r1, [r3, r2]
    c5e4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c5e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5ec:	781a      	ldrb	r2, [r3, #0]
    c5ee:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
    c5f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5f6:	781b      	ldrb	r3, [r3, #0]
    c5f8:	4413      	add	r3, r2
    c5fa:	b2da      	uxtb	r2, r3
    c5fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c604:	701a      	strb	r2, [r3, #0]
    c606:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c60a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c60e:	781a      	ldrb	r2, [r3, #0]
    c610:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c618:	781b      	ldrb	r3, [r3, #0]
    c61a:	4413      	add	r3, r2
    c61c:	b2da      	uxtb	r2, r3
    c61e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c626:	701a      	strb	r2, [r3, #0]
    c628:	f24c 5349 	movw	r3, #50505	; 0xc549
    c62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c630:	781b      	ldrb	r3, [r3, #0]
    c632:	3301      	adds	r3, #1
    c634:	b2da      	uxtb	r2, r3
    c636:	f24c 5349 	movw	r3, #50505	; 0xc549
    c63a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c63e:	701a      	strb	r2, [r3, #0]
    c640:	f24c 5349 	movw	r3, #50505	; 0xc549
    c644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c648:	781b      	ldrb	r3, [r3, #0]
    c64a:	2bff      	cmp	r3, #255	; 0xff
    c64c:	d105      	bne.n	c65a <send_debug+0x3ae>
    c64e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c656:	2200      	movs	r2, #0
    c658:	701a      	strb	r2, [r3, #0]
    c65a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c65e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c662:	781b      	ldrb	r3, [r3, #0]
    c664:	461a      	mov	r2, r3
    c666:	f24c 5334 	movw	r3, #50484	; 0xc534
    c66a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c66e:	7819      	ldrb	r1, [r3, #0]
    c670:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c678:	5499      	strb	r1, [r3, r2]
    c67a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c67e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c682:	781a      	ldrb	r2, [r3, #0]
    c684:	f24c 5334 	movw	r3, #50484	; 0xc534
    c688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c68c:	781b      	ldrb	r3, [r3, #0]
    c68e:	4413      	add	r3, r2
    c690:	b2da      	uxtb	r2, r3
    c692:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c69a:	701a      	strb	r2, [r3, #0]
    c69c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c6a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6a4:	781a      	ldrb	r2, [r3, #0]
    c6a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c6aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6ae:	781b      	ldrb	r3, [r3, #0]
    c6b0:	4413      	add	r3, r2
    c6b2:	b2da      	uxtb	r2, r3
    c6b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c6b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6bc:	701a      	strb	r2, [r3, #0]
    c6be:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6c6:	781b      	ldrb	r3, [r3, #0]
    c6c8:	3301      	adds	r3, #1
    c6ca:	b2da      	uxtb	r2, r3
    c6cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6d4:	701a      	strb	r2, [r3, #0]
    c6d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6de:	781b      	ldrb	r3, [r3, #0]
    c6e0:	2bff      	cmp	r3, #255	; 0xff
    c6e2:	d105      	bne.n	c6f0 <send_debug+0x444>
    c6e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6ec:	2200      	movs	r2, #0
    c6ee:	701a      	strb	r2, [r3, #0]
    c6f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6f8:	781b      	ldrb	r3, [r3, #0]
    c6fa:	461a      	mov	r2, r3
    c6fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c704:	7819      	ldrb	r1, [r3, #0]
    c706:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c70a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c70e:	5499      	strb	r1, [r3, r2]
    c710:	f24c 5349 	movw	r3, #50505	; 0xc549
    c714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c718:	781b      	ldrb	r3, [r3, #0]
    c71a:	3301      	adds	r3, #1
    c71c:	b2da      	uxtb	r2, r3
    c71e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c726:	701a      	strb	r2, [r3, #0]
    c728:	f24c 5349 	movw	r3, #50505	; 0xc549
    c72c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c730:	781b      	ldrb	r3, [r3, #0]
    c732:	2bff      	cmp	r3, #255	; 0xff
    c734:	d105      	bne.n	c742 <send_debug+0x496>
    c736:	f24c 5349 	movw	r3, #50505	; 0xc549
    c73a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c73e:	2200      	movs	r2, #0
    c740:	701a      	strb	r2, [r3, #0]
    c742:	f24c 5349 	movw	r3, #50505	; 0xc549
    c746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c74a:	781b      	ldrb	r3, [r3, #0]
    c74c:	461a      	mov	r2, r3
    c74e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c756:	7819      	ldrb	r1, [r3, #0]
    c758:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c75c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c760:	5499      	strb	r1, [r3, r2]
    c762:	f24c 5349 	movw	r3, #50505	; 0xc549
    c766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c76a:	781b      	ldrb	r3, [r3, #0]
    c76c:	3301      	adds	r3, #1
    c76e:	b2da      	uxtb	r2, r3
    c770:	f24c 5349 	movw	r3, #50505	; 0xc549
    c774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c778:	701a      	strb	r2, [r3, #0]
    c77a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c77e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c782:	781b      	ldrb	r3, [r3, #0]
    c784:	2bff      	cmp	r3, #255	; 0xff
    c786:	d105      	bne.n	c794 <send_debug+0x4e8>
    c788:	f24c 5349 	movw	r3, #50505	; 0xc549
    c78c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c790:	2200      	movs	r2, #0
    c792:	701a      	strb	r2, [r3, #0]
    c794:	f242 0339 	movw	r3, #8249	; 0x2039
    c798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c79c:	781b      	ldrb	r3, [r3, #0]
    c79e:	b2db      	uxtb	r3, r3
    c7a0:	f003 0310 	and.w	r3, r3, #16
    c7a4:	2b00      	cmp	r3, #0
    c7a6:	d15a      	bne.n	c85e <send_debug+0x5b2>
    c7a8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c7ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7b0:	781b      	ldrb	r3, [r3, #0]
    c7b2:	b2db      	uxtb	r3, r3
    c7b4:	461a      	mov	r2, r3
    c7b6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c7ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7be:	5c9a      	ldrb	r2, [r3, r2]
    c7c0:	f24c 634b 	movw	r3, #50763	; 0xc64b
    c7c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7c8:	701a      	strb	r2, [r3, #0]
    c7ca:	f24c 634c 	movw	r3, #50764	; 0xc64c
    c7ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7d2:	2200      	movs	r2, #0
    c7d4:	701a      	strb	r2, [r3, #0]
    c7d6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c7da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7de:	781b      	ldrb	r3, [r3, #0]
    c7e0:	b2db      	uxtb	r3, r3
    c7e2:	3301      	adds	r3, #1
    c7e4:	b2da      	uxtb	r2, r3
    c7e6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c7ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7ee:	701a      	strb	r2, [r3, #0]
    c7f0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c7f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7f8:	781b      	ldrb	r3, [r3, #0]
    c7fa:	b2db      	uxtb	r3, r3
    c7fc:	2bff      	cmp	r3, #255	; 0xff
    c7fe:	d105      	bne.n	c80c <send_debug+0x560>
    c800:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c808:	2200      	movs	r2, #0
    c80a:	701a      	strb	r2, [r3, #0]
    c80c:	f242 0338 	movw	r3, #8248	; 0x2038
    c810:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c814:	f242 0238 	movw	r2, #8248	; 0x2038
    c818:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c81c:	7812      	ldrb	r2, [r2, #0]
    c81e:	b2d2      	uxtb	r2, r2
    c820:	f042 0201 	orr.w	r2, r2, #1
    c824:	b2d2      	uxtb	r2, r2
    c826:	701a      	strb	r2, [r3, #0]
    c828:	f242 0339 	movw	r3, #8249	; 0x2039
    c82c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c830:	f242 0239 	movw	r2, #8249	; 0x2039
    c834:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c838:	7812      	ldrb	r2, [r2, #0]
    c83a:	b2d2      	uxtb	r2, r2
    c83c:	f042 0210 	orr.w	r2, r2, #16
    c840:	b2d2      	uxtb	r2, r2
    c842:	701a      	strb	r2, [r3, #0]
    c844:	e00b      	b.n	c85e <send_debug+0x5b2>
    c846:	f24c 5348 	movw	r3, #50504	; 0xc548
    c84a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c84e:	781b      	ldrb	r3, [r3, #0]
    c850:	3301      	adds	r3, #1
    c852:	b2da      	uxtb	r2, r3
    c854:	f24c 5348 	movw	r3, #50504	; 0xc548
    c858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c85c:	701a      	strb	r2, [r3, #0]
}
    c85e:	46bd      	mov	sp, r7
    c860:	f85d 7b04 	ldr.w	r7, [sp], #4
    c864:	4770      	bx	lr
    c866:	bf00      	nop

0000c868 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c868:	b480      	push	{r7}
    c86a:	af00      	add	r7, sp, #0
  if(!boot)
    c86c:	f240 533d 	movw	r3, #1341	; 0x53d
    c870:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c874:	781b      	ldrb	r3, [r3, #0]
    c876:	2b00      	cmp	r3, #0
    c878:	f040 83a9 	bne.w	cfce <send_nav_ref+0x766>
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c87c:	f24c 5341 	movw	r3, #50497	; 0xc541
    c880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c884:	781a      	ldrb	r2, [r3, #0]
    c886:	f248 531f 	movw	r3, #34079	; 0x851f
    c88a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c88e:	fba3 1302 	umull	r1, r3, r3, r2
    c892:	095b      	lsrs	r3, r3, #5
    c894:	2164      	movs	r1, #100	; 0x64
    c896:	fb01 f303 	mul.w	r3, r1, r3
    c89a:	1ad3      	subs	r3, r2, r3
    c89c:	b2db      	uxtb	r3, r3
    c89e:	2b31      	cmp	r3, #49	; 0x31
    c8a0:	f040 8395 	bne.w	cfce <send_nav_ref+0x766>
    c8a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c8a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8ac:	781a      	ldrb	r2, [r3, #0]
    c8ae:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8b6:	781b      	ldrb	r3, [r3, #0]
    c8b8:	b2db      	uxtb	r3, r3
    c8ba:	429a      	cmp	r2, r3
    c8bc:	d313      	bcc.n	c8e6 <send_nav_ref+0x7e>
    c8be:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8c6:	781b      	ldrb	r3, [r3, #0]
    c8c8:	b2db      	uxtb	r3, r3
    c8ca:	461a      	mov	r2, r3
    c8cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    c8d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8d4:	781b      	ldrb	r3, [r3, #0]
    c8d6:	1ad3      	subs	r3, r2, r3
    c8d8:	33ff      	adds	r3, #255	; 0xff
    c8da:	2b0c      	cmp	r3, #12
    c8dc:	bfd4      	ite	le
    c8de:	2300      	movle	r3, #0
    c8e0:	2301      	movgt	r3, #1
    c8e2:	b2db      	uxtb	r3, r3
    c8e4:	e011      	b.n	c90a <send_nav_ref+0xa2>
    c8e6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c8ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8ee:	781b      	ldrb	r3, [r3, #0]
    c8f0:	b2db      	uxtb	r3, r3
    c8f2:	461a      	mov	r2, r3
    c8f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c8f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8fc:	781b      	ldrb	r3, [r3, #0]
    c8fe:	1ad3      	subs	r3, r2, r3
    c900:	2b0c      	cmp	r3, #12
    c902:	bfd4      	ite	le
    c904:	2300      	movle	r3, #0
    c906:	2301      	movgt	r3, #1
    c908:	b2db      	uxtb	r3, r3
    c90a:	2b00      	cmp	r3, #0
    c90c:	f000 8353 	beq.w	cfb6 <send_nav_ref+0x74e>
    c910:	f24c 5349 	movw	r3, #50505	; 0xc549
    c914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c918:	781b      	ldrb	r3, [r3, #0]
    c91a:	461a      	mov	r2, r3
    c91c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c924:	2105      	movs	r1, #5
    c926:	5499      	strb	r1, [r3, r2]
    c928:	f24c 5349 	movw	r3, #50505	; 0xc549
    c92c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c930:	781b      	ldrb	r3, [r3, #0]
    c932:	3301      	adds	r3, #1
    c934:	b2da      	uxtb	r2, r3
    c936:	f24c 5349 	movw	r3, #50505	; 0xc549
    c93a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c93e:	701a      	strb	r2, [r3, #0]
    c940:	f24c 5349 	movw	r3, #50505	; 0xc549
    c944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c948:	781b      	ldrb	r3, [r3, #0]
    c94a:	2bff      	cmp	r3, #255	; 0xff
    c94c:	d105      	bne.n	c95a <send_nav_ref+0xf2>
    c94e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c956:	2200      	movs	r2, #0
    c958:	701a      	strb	r2, [r3, #0]
    c95a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c95e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c962:	781b      	ldrb	r3, [r3, #0]
    c964:	461a      	mov	r2, r3
    c966:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c96e:	2109      	movs	r1, #9
    c970:	5499      	strb	r1, [r3, r2]
    c972:	f24c 5349 	movw	r3, #50505	; 0xc549
    c976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c97a:	781b      	ldrb	r3, [r3, #0]
    c97c:	3301      	adds	r3, #1
    c97e:	b2da      	uxtb	r2, r3
    c980:	f24c 5349 	movw	r3, #50505	; 0xc549
    c984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c988:	701a      	strb	r2, [r3, #0]
    c98a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c98e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c992:	781b      	ldrb	r3, [r3, #0]
    c994:	2bff      	cmp	r3, #255	; 0xff
    c996:	d105      	bne.n	c9a4 <send_nav_ref+0x13c>
    c998:	f24c 5349 	movw	r3, #50505	; 0xc549
    c99c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9a0:	2200      	movs	r2, #0
    c9a2:	701a      	strb	r2, [r3, #0]
    c9a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c9a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ac:	2209      	movs	r2, #9
    c9ae:	701a      	strb	r2, [r3, #0]
    c9b0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c9b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9b8:	2209      	movs	r2, #9
    c9ba:	701a      	strb	r2, [r3, #0]
    c9bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9c4:	781b      	ldrb	r3, [r3, #0]
    c9c6:	461a      	mov	r2, r3
    c9c8:	f648 23cc 	movw	r3, #35532	; 0x8acc
    c9cc:	f2c0 0301 	movt	r3, #1
    c9d0:	7819      	ldrb	r1, [r3, #0]
    c9d2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c9d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9da:	5499      	strb	r1, [r3, r2]
    c9dc:	f648 23cc 	movw	r3, #35532	; 0x8acc
    c9e0:	f2c0 0301 	movt	r3, #1
    c9e4:	781a      	ldrb	r2, [r3, #0]
    c9e6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c9ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ee:	781b      	ldrb	r3, [r3, #0]
    c9f0:	4413      	add	r3, r2
    c9f2:	b2da      	uxtb	r2, r3
    c9f4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c9f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9fc:	701a      	strb	r2, [r3, #0]
    c9fe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ca02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca06:	781a      	ldrb	r2, [r3, #0]
    ca08:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ca0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca10:	781b      	ldrb	r3, [r3, #0]
    ca12:	4413      	add	r3, r2
    ca14:	b2da      	uxtb	r2, r3
    ca16:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ca1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca1e:	701a      	strb	r2, [r3, #0]
    ca20:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca28:	781b      	ldrb	r3, [r3, #0]
    ca2a:	3301      	adds	r3, #1
    ca2c:	b2da      	uxtb	r2, r3
    ca2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca36:	701a      	strb	r2, [r3, #0]
    ca38:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca40:	781b      	ldrb	r3, [r3, #0]
    ca42:	2bff      	cmp	r3, #255	; 0xff
    ca44:	d105      	bne.n	ca52 <send_nav_ref+0x1ea>
    ca46:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca4e:	2200      	movs	r2, #0
    ca50:	701a      	strb	r2, [r3, #0]
    ca52:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca5a:	781b      	ldrb	r3, [r3, #0]
    ca5c:	461a      	mov	r2, r3
    ca5e:	f648 23cc 	movw	r3, #35532	; 0x8acc
    ca62:	f2c0 0301 	movt	r3, #1
    ca66:	7859      	ldrb	r1, [r3, #1]
    ca68:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ca6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca70:	5499      	strb	r1, [r3, r2]
    ca72:	4bd2      	ldr	r3, [pc, #840]	; (cdbc <send_nav_ref+0x554>)
    ca74:	781a      	ldrb	r2, [r3, #0]
    ca76:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ca7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca7e:	781b      	ldrb	r3, [r3, #0]
    ca80:	4413      	add	r3, r2
    ca82:	b2da      	uxtb	r2, r3
    ca84:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ca88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca8c:	701a      	strb	r2, [r3, #0]
    ca8e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ca92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca96:	781a      	ldrb	r2, [r3, #0]
    ca98:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ca9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caa0:	781b      	ldrb	r3, [r3, #0]
    caa2:	4413      	add	r3, r2
    caa4:	b2da      	uxtb	r2, r3
    caa6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    caaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caae:	701a      	strb	r2, [r3, #0]
    cab0:	f24c 5349 	movw	r3, #50505	; 0xc549
    cab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cab8:	781b      	ldrb	r3, [r3, #0]
    caba:	3301      	adds	r3, #1
    cabc:	b2da      	uxtb	r2, r3
    cabe:	f24c 5349 	movw	r3, #50505	; 0xc549
    cac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cac6:	701a      	strb	r2, [r3, #0]
    cac8:	f24c 5349 	movw	r3, #50505	; 0xc549
    cacc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cad0:	781b      	ldrb	r3, [r3, #0]
    cad2:	2bff      	cmp	r3, #255	; 0xff
    cad4:	d105      	bne.n	cae2 <send_nav_ref+0x27a>
    cad6:	f24c 5349 	movw	r3, #50505	; 0xc549
    cada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cade:	2200      	movs	r2, #0
    cae0:	701a      	strb	r2, [r3, #0]
    cae2:	f24c 5349 	movw	r3, #50505	; 0xc549
    cae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caea:	781b      	ldrb	r3, [r3, #0]
    caec:	461a      	mov	r2, r3
    caee:	f648 23cc 	movw	r3, #35532	; 0x8acc
    caf2:	f2c0 0301 	movt	r3, #1
    caf6:	7899      	ldrb	r1, [r3, #2]
    caf8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cafc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb00:	5499      	strb	r1, [r3, r2]
    cb02:	4baf      	ldr	r3, [pc, #700]	; (cdc0 <send_nav_ref+0x558>)
    cb04:	781a      	ldrb	r2, [r3, #0]
    cb06:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb0e:	781b      	ldrb	r3, [r3, #0]
    cb10:	4413      	add	r3, r2
    cb12:	b2da      	uxtb	r2, r3
    cb14:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb1c:	701a      	strb	r2, [r3, #0]
    cb1e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cb22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb26:	781a      	ldrb	r2, [r3, #0]
    cb28:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb30:	781b      	ldrb	r3, [r3, #0]
    cb32:	4413      	add	r3, r2
    cb34:	b2da      	uxtb	r2, r3
    cb36:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cb3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb3e:	701a      	strb	r2, [r3, #0]
    cb40:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb48:	781b      	ldrb	r3, [r3, #0]
    cb4a:	3301      	adds	r3, #1
    cb4c:	b2da      	uxtb	r2, r3
    cb4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb56:	701a      	strb	r2, [r3, #0]
    cb58:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb60:	781b      	ldrb	r3, [r3, #0]
    cb62:	2bff      	cmp	r3, #255	; 0xff
    cb64:	d105      	bne.n	cb72 <send_nav_ref+0x30a>
    cb66:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb6e:	2200      	movs	r2, #0
    cb70:	701a      	strb	r2, [r3, #0]
    cb72:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb7a:	781b      	ldrb	r3, [r3, #0]
    cb7c:	461a      	mov	r2, r3
    cb7e:	f648 23cc 	movw	r3, #35532	; 0x8acc
    cb82:	f2c0 0301 	movt	r3, #1
    cb86:	78d9      	ldrb	r1, [r3, #3]
    cb88:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cb8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb90:	5499      	strb	r1, [r3, r2]
    cb92:	4b8c      	ldr	r3, [pc, #560]	; (cdc4 <send_nav_ref+0x55c>)
    cb94:	781a      	ldrb	r2, [r3, #0]
    cb96:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb9e:	781b      	ldrb	r3, [r3, #0]
    cba0:	4413      	add	r3, r2
    cba2:	b2da      	uxtb	r2, r3
    cba4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbac:	701a      	strb	r2, [r3, #0]
    cbae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cbb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbb6:	781a      	ldrb	r2, [r3, #0]
    cbb8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cbbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbc0:	781b      	ldrb	r3, [r3, #0]
    cbc2:	4413      	add	r3, r2
    cbc4:	b2da      	uxtb	r2, r3
    cbc6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cbca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbce:	701a      	strb	r2, [r3, #0]
    cbd0:	f24c 5349 	movw	r3, #50505	; 0xc549
    cbd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbd8:	781b      	ldrb	r3, [r3, #0]
    cbda:	3301      	adds	r3, #1
    cbdc:	b2da      	uxtb	r2, r3
    cbde:	f24c 5349 	movw	r3, #50505	; 0xc549
    cbe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbe6:	701a      	strb	r2, [r3, #0]
    cbe8:	f24c 5349 	movw	r3, #50505	; 0xc549
    cbec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbf0:	781b      	ldrb	r3, [r3, #0]
    cbf2:	2bff      	cmp	r3, #255	; 0xff
    cbf4:	d105      	bne.n	cc02 <send_nav_ref+0x39a>
    cbf6:	f24c 5349 	movw	r3, #50505	; 0xc549
    cbfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbfe:	2200      	movs	r2, #0
    cc00:	701a      	strb	r2, [r3, #0]
    cc02:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc0a:	781b      	ldrb	r3, [r3, #0]
    cc0c:	461a      	mov	r2, r3
    cc0e:	f648 23d0 	movw	r3, #35536	; 0x8ad0
    cc12:	f2c0 0301 	movt	r3, #1
    cc16:	7819      	ldrb	r1, [r3, #0]
    cc18:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cc1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc20:	5499      	strb	r1, [r3, r2]
    cc22:	f648 23d0 	movw	r3, #35536	; 0x8ad0
    cc26:	f2c0 0301 	movt	r3, #1
    cc2a:	781a      	ldrb	r2, [r3, #0]
    cc2c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc34:	781b      	ldrb	r3, [r3, #0]
    cc36:	4413      	add	r3, r2
    cc38:	b2da      	uxtb	r2, r3
    cc3a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc42:	701a      	strb	r2, [r3, #0]
    cc44:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cc48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc4c:	781a      	ldrb	r2, [r3, #0]
    cc4e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc56:	781b      	ldrb	r3, [r3, #0]
    cc58:	4413      	add	r3, r2
    cc5a:	b2da      	uxtb	r2, r3
    cc5c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cc60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc64:	701a      	strb	r2, [r3, #0]
    cc66:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc6e:	781b      	ldrb	r3, [r3, #0]
    cc70:	3301      	adds	r3, #1
    cc72:	b2da      	uxtb	r2, r3
    cc74:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc7c:	701a      	strb	r2, [r3, #0]
    cc7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc86:	781b      	ldrb	r3, [r3, #0]
    cc88:	2bff      	cmp	r3, #255	; 0xff
    cc8a:	d105      	bne.n	cc98 <send_nav_ref+0x430>
    cc8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc94:	2200      	movs	r2, #0
    cc96:	701a      	strb	r2, [r3, #0]
    cc98:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cca0:	781b      	ldrb	r3, [r3, #0]
    cca2:	461a      	mov	r2, r3
    cca4:	f648 23d0 	movw	r3, #35536	; 0x8ad0
    cca8:	f2c0 0301 	movt	r3, #1
    ccac:	7859      	ldrb	r1, [r3, #1]
    ccae:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ccb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccb6:	5499      	strb	r1, [r3, r2]
    ccb8:	4b43      	ldr	r3, [pc, #268]	; (cdc8 <send_nav_ref+0x560>)
    ccba:	781a      	ldrb	r2, [r3, #0]
    ccbc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ccc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccc4:	781b      	ldrb	r3, [r3, #0]
    ccc6:	4413      	add	r3, r2
    ccc8:	b2da      	uxtb	r2, r3
    ccca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ccce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccd2:	701a      	strb	r2, [r3, #0]
    ccd4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ccd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccdc:	781a      	ldrb	r2, [r3, #0]
    ccde:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cce6:	781b      	ldrb	r3, [r3, #0]
    cce8:	4413      	add	r3, r2
    ccea:	b2da      	uxtb	r2, r3
    ccec:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ccf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccf4:	701a      	strb	r2, [r3, #0]
    ccf6:	f24c 5349 	movw	r3, #50505	; 0xc549
    ccfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccfe:	781b      	ldrb	r3, [r3, #0]
    cd00:	3301      	adds	r3, #1
    cd02:	b2da      	uxtb	r2, r3
    cd04:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd0c:	701a      	strb	r2, [r3, #0]
    cd0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd16:	781b      	ldrb	r3, [r3, #0]
    cd18:	2bff      	cmp	r3, #255	; 0xff
    cd1a:	d105      	bne.n	cd28 <send_nav_ref+0x4c0>
    cd1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd24:	2200      	movs	r2, #0
    cd26:	701a      	strb	r2, [r3, #0]
    cd28:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd30:	781b      	ldrb	r3, [r3, #0]
    cd32:	461a      	mov	r2, r3
    cd34:	f648 23d0 	movw	r3, #35536	; 0x8ad0
    cd38:	f2c0 0301 	movt	r3, #1
    cd3c:	7899      	ldrb	r1, [r3, #2]
    cd3e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cd42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd46:	5499      	strb	r1, [r3, r2]
    cd48:	4b20      	ldr	r3, [pc, #128]	; (cdcc <send_nav_ref+0x564>)
    cd4a:	781a      	ldrb	r2, [r3, #0]
    cd4c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd54:	781b      	ldrb	r3, [r3, #0]
    cd56:	4413      	add	r3, r2
    cd58:	b2da      	uxtb	r2, r3
    cd5a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd62:	701a      	strb	r2, [r3, #0]
    cd64:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cd68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd6c:	781a      	ldrb	r2, [r3, #0]
    cd6e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd76:	781b      	ldrb	r3, [r3, #0]
    cd78:	4413      	add	r3, r2
    cd7a:	b2da      	uxtb	r2, r3
    cd7c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cd80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd84:	701a      	strb	r2, [r3, #0]
    cd86:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd8e:	781b      	ldrb	r3, [r3, #0]
    cd90:	3301      	adds	r3, #1
    cd92:	b2da      	uxtb	r2, r3
    cd94:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd9c:	701a      	strb	r2, [r3, #0]
    cd9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cda2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cda6:	781b      	ldrb	r3, [r3, #0]
    cda8:	2bff      	cmp	r3, #255	; 0xff
    cdaa:	d111      	bne.n	cdd0 <send_nav_ref+0x568>
    cdac:	f24c 5349 	movw	r3, #50505	; 0xc549
    cdb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdb4:	2200      	movs	r2, #0
    cdb6:	701a      	strb	r2, [r3, #0]
    cdb8:	e00a      	b.n	cdd0 <send_nav_ref+0x568>
    cdba:	bf00      	nop
    cdbc:	00018acd 	.word	0x00018acd
    cdc0:	00018ace 	.word	0x00018ace
    cdc4:	00018acf 	.word	0x00018acf
    cdc8:	00018ad1 	.word	0x00018ad1
    cdcc:	00018ad2 	.word	0x00018ad2
    cdd0:	f24c 5349 	movw	r3, #50505	; 0xc549
    cdd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdd8:	781b      	ldrb	r3, [r3, #0]
    cdda:	461a      	mov	r2, r3
    cddc:	f648 23d0 	movw	r3, #35536	; 0x8ad0
    cde0:	f2c0 0301 	movt	r3, #1
    cde4:	78d9      	ldrb	r1, [r3, #3]
    cde6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cdea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdee:	5499      	strb	r1, [r3, r2]
    cdf0:	4b79      	ldr	r3, [pc, #484]	; (cfd8 <send_nav_ref+0x770>)
    cdf2:	781a      	ldrb	r2, [r3, #0]
    cdf4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cdf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdfc:	781b      	ldrb	r3, [r3, #0]
    cdfe:	4413      	add	r3, r2
    ce00:	b2da      	uxtb	r2, r3
    ce02:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ce06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce0a:	701a      	strb	r2, [r3, #0]
    ce0c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ce10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce14:	781a      	ldrb	r2, [r3, #0]
    ce16:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ce1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce1e:	781b      	ldrb	r3, [r3, #0]
    ce20:	4413      	add	r3, r2
    ce22:	b2da      	uxtb	r2, r3
    ce24:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ce28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce2c:	701a      	strb	r2, [r3, #0]
    ce2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce36:	781b      	ldrb	r3, [r3, #0]
    ce38:	3301      	adds	r3, #1
    ce3a:	b2da      	uxtb	r2, r3
    ce3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce44:	701a      	strb	r2, [r3, #0]
    ce46:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce4e:	781b      	ldrb	r3, [r3, #0]
    ce50:	2bff      	cmp	r3, #255	; 0xff
    ce52:	d105      	bne.n	ce60 <send_nav_ref+0x5f8>
    ce54:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce5c:	2200      	movs	r2, #0
    ce5e:	701a      	strb	r2, [r3, #0]
    ce60:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce68:	781b      	ldrb	r3, [r3, #0]
    ce6a:	461a      	mov	r2, r3
    ce6c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ce70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce74:	7819      	ldrb	r1, [r3, #0]
    ce76:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ce7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce7e:	5499      	strb	r1, [r3, r2]
    ce80:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce88:	781b      	ldrb	r3, [r3, #0]
    ce8a:	3301      	adds	r3, #1
    ce8c:	b2da      	uxtb	r2, r3
    ce8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce96:	701a      	strb	r2, [r3, #0]
    ce98:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cea0:	781b      	ldrb	r3, [r3, #0]
    cea2:	2bff      	cmp	r3, #255	; 0xff
    cea4:	d105      	bne.n	ceb2 <send_nav_ref+0x64a>
    cea6:	f24c 5349 	movw	r3, #50505	; 0xc549
    ceaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceae:	2200      	movs	r2, #0
    ceb0:	701a      	strb	r2, [r3, #0]
    ceb2:	f24c 5349 	movw	r3, #50505	; 0xc549
    ceb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceba:	781b      	ldrb	r3, [r3, #0]
    cebc:	461a      	mov	r2, r3
    cebe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cec6:	7819      	ldrb	r1, [r3, #0]
    cec8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ced0:	5499      	strb	r1, [r3, r2]
    ced2:	f24c 5349 	movw	r3, #50505	; 0xc549
    ced6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceda:	781b      	ldrb	r3, [r3, #0]
    cedc:	3301      	adds	r3, #1
    cede:	b2da      	uxtb	r2, r3
    cee0:	f24c 5349 	movw	r3, #50505	; 0xc549
    cee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cee8:	701a      	strb	r2, [r3, #0]
    ceea:	f24c 5349 	movw	r3, #50505	; 0xc549
    ceee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cef2:	781b      	ldrb	r3, [r3, #0]
    cef4:	2bff      	cmp	r3, #255	; 0xff
    cef6:	d105      	bne.n	cf04 <send_nav_ref+0x69c>
    cef8:	f24c 5349 	movw	r3, #50505	; 0xc549
    cefc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf00:	2200      	movs	r2, #0
    cf02:	701a      	strb	r2, [r3, #0]
    cf04:	f242 0339 	movw	r3, #8249	; 0x2039
    cf08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf0c:	781b      	ldrb	r3, [r3, #0]
    cf0e:	b2db      	uxtb	r3, r3
    cf10:	f003 0310 	and.w	r3, r3, #16
    cf14:	2b00      	cmp	r3, #0
    cf16:	d15a      	bne.n	cfce <send_nav_ref+0x766>
    cf18:	f24c 534a 	movw	r3, #50506	; 0xc54a
    cf1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf20:	781b      	ldrb	r3, [r3, #0]
    cf22:	b2db      	uxtb	r3, r3
    cf24:	461a      	mov	r2, r3
    cf26:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cf2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf2e:	5c9a      	ldrb	r2, [r3, r2]
    cf30:	f24c 634b 	movw	r3, #50763	; 0xc64b
    cf34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf38:	701a      	strb	r2, [r3, #0]
    cf3a:	f24c 634c 	movw	r3, #50764	; 0xc64c
    cf3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf42:	2200      	movs	r2, #0
    cf44:	701a      	strb	r2, [r3, #0]
    cf46:	f24c 534a 	movw	r3, #50506	; 0xc54a
    cf4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf4e:	781b      	ldrb	r3, [r3, #0]
    cf50:	b2db      	uxtb	r3, r3
    cf52:	3301      	adds	r3, #1
    cf54:	b2da      	uxtb	r2, r3
    cf56:	f24c 534a 	movw	r3, #50506	; 0xc54a
    cf5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf5e:	701a      	strb	r2, [r3, #0]
    cf60:	f24c 534a 	movw	r3, #50506	; 0xc54a
    cf64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf68:	781b      	ldrb	r3, [r3, #0]
    cf6a:	b2db      	uxtb	r3, r3
    cf6c:	2bff      	cmp	r3, #255	; 0xff
    cf6e:	d105      	bne.n	cf7c <send_nav_ref+0x714>
    cf70:	f24c 534a 	movw	r3, #50506	; 0xc54a
    cf74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf78:	2200      	movs	r2, #0
    cf7a:	701a      	strb	r2, [r3, #0]
    cf7c:	f242 0338 	movw	r3, #8248	; 0x2038
    cf80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf84:	f242 0238 	movw	r2, #8248	; 0x2038
    cf88:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cf8c:	7812      	ldrb	r2, [r2, #0]
    cf8e:	b2d2      	uxtb	r2, r2
    cf90:	f042 0201 	orr.w	r2, r2, #1
    cf94:	b2d2      	uxtb	r2, r2
    cf96:	701a      	strb	r2, [r3, #0]
    cf98:	f242 0339 	movw	r3, #8249	; 0x2039
    cf9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfa0:	f242 0239 	movw	r2, #8249	; 0x2039
    cfa4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cfa8:	7812      	ldrb	r2, [r2, #0]
    cfaa:	b2d2      	uxtb	r2, r2
    cfac:	f042 0210 	orr.w	r2, r2, #16
    cfb0:	b2d2      	uxtb	r2, r2
    cfb2:	701a      	strb	r2, [r3, #0]
    cfb4:	e00b      	b.n	cfce <send_nav_ref+0x766>
    cfb6:	f24c 5348 	movw	r3, #50504	; 0xc548
    cfba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfbe:	781b      	ldrb	r3, [r3, #0]
    cfc0:	3301      	adds	r3, #1
    cfc2:	b2da      	uxtb	r2, r3
    cfc4:	f24c 5348 	movw	r3, #50504	; 0xc548
    cfc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfcc:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    cfce:	46bd      	mov	sp, r7
    cfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    cfd4:	4770      	bx	lr
    cfd6:	bf00      	nop
    cfd8:	00018ad3 	.word	0x00018ad3

0000cfdc <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    cfdc:	b480      	push	{r7}
    cfde:	b083      	sub	sp, #12
    cfe0:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    cfe2:	f24c 6350 	movw	r3, #50768	; 0xc650
    cfe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfea:	8a1b      	ldrh	r3, [r3, #16]
    cfec:	b21b      	sxth	r3, r3
    cfee:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    cff2:	db0d      	blt.n	d010 <inflight_calib_mode_update+0x34>
    cff4:	f24c 6350 	movw	r3, #50768	; 0xc650
    cff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cffc:	8a1b      	ldrh	r3, [r3, #16]
    cffe:	b21a      	sxth	r2, r3
    d000:	f640 437f 	movw	r3, #3199	; 0xc7f
    d004:	429a      	cmp	r2, r3
    d006:	bfd4      	ite	le
    d008:	2300      	movle	r3, #0
    d00a:	2301      	movgt	r3, #1
    d00c:	b2db      	uxtb	r3, r3
    d00e:	e000      	b.n	d012 <inflight_calib_mode_update+0x36>
    d010:	2302      	movs	r3, #2
    d012:	71fb      	strb	r3, [r7, #7]
    d014:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d01c:	781b      	ldrb	r3, [r3, #0]
    d01e:	79fa      	ldrb	r2, [r7, #7]
    d020:	429a      	cmp	r2, r3
    d022:	d007      	beq.n	d034 <inflight_calib_mode_update+0x58>
    d024:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d02c:	79fa      	ldrb	r2, [r7, #7]
    d02e:	701a      	strb	r2, [r3, #0]
    d030:	2301      	movs	r3, #1
    d032:	e000      	b.n	d036 <inflight_calib_mode_update+0x5a>
    d034:	2300      	movs	r3, #0
}
    d036:	4618      	mov	r0, r3
    d038:	370c      	adds	r7, #12
    d03a:	46bd      	mov	sp, r7
    d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d040:	4770      	bx	lr
    d042:	bf00      	nop

0000d044 <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    d044:	b580      	push	{r7, lr}
    d046:	b082      	sub	sp, #8
    d048:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    d04a:	f24c 637e 	movw	r3, #50814	; 0xc67e
    d04e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d052:	2201      	movs	r2, #1
    d054:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    d056:	f24c 637e 	movw	r3, #50814	; 0xc67e
    d05a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d05e:	781b      	ldrb	r3, [r3, #0]
    d060:	b2db      	uxtb	r3, r3
    d062:	2b00      	cmp	r3, #0
    d064:	f000 83c0 	beq.w	d7e8 <radio_control_task+0x7a4>
    uint8_t mode_changed = FALSE;
    d068:	2300      	movs	r3, #0
    d06a:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    d06c:	f7fa fa4c 	bl	7508 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    d070:	4b3e      	ldr	r3, [pc, #248]	; (d16c <radio_control_task+0x128>)
    d072:	781b      	ldrb	r3, [r3, #0]
    d074:	b2db      	uxtb	r3, r3
    d076:	f003 0302 	and.w	r3, r3, #2
    d07a:	2b00      	cmp	r3, #0
    d07c:	d00d      	beq.n	d09a <radio_control_task+0x56>
    d07e:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d086:	781b      	ldrb	r3, [r3, #0]
    d088:	2b01      	cmp	r3, #1
    d08a:	d00d      	beq.n	d0a8 <radio_control_task+0x64>
    d08c:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d090:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d094:	781b      	ldrb	r3, [r3, #0]
    d096:	2b00      	cmp	r3, #0
    d098:	d006      	beq.n	d0a8 <radio_control_task+0x64>
    d09a:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    d09e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0a2:	781b      	ldrb	r3, [r3, #0]
    d0a4:	2b00      	cmp	r3, #0
    d0a6:	d007      	beq.n	d0b8 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    d0a8:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d0ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0b0:	2203      	movs	r2, #3
    d0b2:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    d0b4:	2301      	movs	r3, #1
    d0b6:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    d0b8:	4b2c      	ldr	r3, [pc, #176]	; (d16c <radio_control_task+0x128>)
    d0ba:	781b      	ldrb	r3, [r3, #0]
    d0bc:	b2db      	uxtb	r3, r3
    d0be:	f003 0304 	and.w	r3, r3, #4
    d0c2:	2b00      	cmp	r3, #0
    d0c4:	d023      	beq.n	d10e <radio_control_task+0xca>
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    d0c6:	f7fa f8f9 	bl	72bc <pprz_mode_update>
    d0ca:	4603      	mov	r3, r0
    d0cc:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    d0ce:	79fa      	ldrb	r2, [r7, #7]
    d0d0:	79bb      	ldrb	r3, [r7, #6]
    d0d2:	4313      	orrs	r3, r2
    d0d4:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    d0d6:	f7fa f93d 	bl	7354 <ir_estim_mode_update>
    d0da:	4603      	mov	r3, r0
    d0dc:	461a      	mov	r2, r3
    d0de:	79fb      	ldrb	r3, [r7, #7]
    d0e0:	4313      	orrs	r3, r2
    d0e2:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    d0e4:	f7ff ff7a 	bl	cfdc <inflight_calib_mode_update>
    d0e8:	4603      	mov	r3, r0
    d0ea:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    d0ec:	797b      	ldrb	r3, [r7, #5]
    d0ee:	2b00      	cmp	r3, #0
    d0f0:	d102      	bne.n	d0f8 <radio_control_task+0xb4>
    d0f2:	79bb      	ldrb	r3, [r7, #6]
    d0f4:	2b00      	cmp	r3, #0
    d0f6:	d001      	beq.n	d0fc <radio_control_task+0xb8>
    d0f8:	2301      	movs	r3, #1
    d0fa:	e000      	b.n	d0fe <radio_control_task+0xba>
    d0fc:	2300      	movs	r3, #0
    d0fe:	b2db      	uxtb	r3, r3
    d100:	4618      	mov	r0, r3
    d102:	f008 fba1 	bl	15848 <inflight_calib>
      mode_changed |= calib_mode_changed;
    d106:	79fa      	ldrb	r2, [r7, #7]
    d108:	797b      	ldrb	r3, [r7, #5]
    d10a:	4313      	orrs	r3, r2
    d10c:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    d10e:	f7fa f949 	bl	73a4 <mcu1_status_update>
    d112:	4603      	mov	r3, r0
    d114:	461a      	mov	r2, r3
    d116:	79fb      	ldrb	r3, [r7, #7]
    d118:	4313      	orrs	r3, r2
    d11a:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    d11c:	2301      	movs	r3, #1
    d11e:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    d120:	79fb      	ldrb	r3, [r7, #7]
    d122:	2b00      	cmp	r3, #0
    d124:	f000 82bd 	beq.w	d6a2 <radio_control_task+0x65e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    d128:	f24c 5349 	movw	r3, #50505	; 0xc549
    d12c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d130:	781a      	ldrb	r2, [r3, #0]
    d132:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d13a:	781b      	ldrb	r3, [r3, #0]
    d13c:	b2db      	uxtb	r3, r3
    d13e:	429a      	cmp	r2, r3
    d140:	d316      	bcc.n	d170 <radio_control_task+0x12c>
    d142:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d14a:	781b      	ldrb	r3, [r3, #0]
    d14c:	b2db      	uxtb	r3, r3
    d14e:	461a      	mov	r2, r3
    d150:	f24c 5349 	movw	r3, #50505	; 0xc549
    d154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d158:	781b      	ldrb	r3, [r3, #0]
    d15a:	1ad3      	subs	r3, r2, r3
    d15c:	33ff      	adds	r3, #255	; 0xff
    d15e:	2b09      	cmp	r3, #9
    d160:	bfd4      	ite	le
    d162:	2300      	movle	r3, #0
    d164:	2301      	movgt	r3, #1
    d166:	b2db      	uxtb	r3, r3
    d168:	e014      	b.n	d194 <radio_control_task+0x150>
    d16a:	bf00      	nop
    d16c:	2004c663 	.word	0x2004c663
    d170:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d178:	781b      	ldrb	r3, [r3, #0]
    d17a:	b2db      	uxtb	r3, r3
    d17c:	461a      	mov	r2, r3
    d17e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d186:	781b      	ldrb	r3, [r3, #0]
    d188:	1ad3      	subs	r3, r2, r3
    d18a:	2b09      	cmp	r3, #9
    d18c:	bfd4      	ite	le
    d18e:	2300      	movle	r3, #0
    d190:	2301      	movgt	r3, #1
    d192:	b2db      	uxtb	r3, r3
    d194:	2b00      	cmp	r3, #0
    d196:	f000 8278 	beq.w	d68a <radio_control_task+0x646>
    d19a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d19e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1a2:	781b      	ldrb	r3, [r3, #0]
    d1a4:	461a      	mov	r2, r3
    d1a6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d1aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1ae:	2105      	movs	r1, #5
    d1b0:	5499      	strb	r1, [r3, r2]
    d1b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    d1b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1ba:	781b      	ldrb	r3, [r3, #0]
    d1bc:	3301      	adds	r3, #1
    d1be:	b2da      	uxtb	r2, r3
    d1c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d1c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1c8:	701a      	strb	r2, [r3, #0]
    d1ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    d1ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1d2:	781b      	ldrb	r3, [r3, #0]
    d1d4:	2bff      	cmp	r3, #255	; 0xff
    d1d6:	d105      	bne.n	d1e4 <radio_control_task+0x1a0>
    d1d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    d1dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1e0:	2200      	movs	r2, #0
    d1e2:	701a      	strb	r2, [r3, #0]
    d1e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d1e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1ec:	781b      	ldrb	r3, [r3, #0]
    d1ee:	461a      	mov	r2, r3
    d1f0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d1f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1f8:	210b      	movs	r1, #11
    d1fa:	5499      	strb	r1, [r3, r2]
    d1fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    d200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d204:	781b      	ldrb	r3, [r3, #0]
    d206:	3301      	adds	r3, #1
    d208:	b2da      	uxtb	r2, r3
    d20a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d20e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d212:	701a      	strb	r2, [r3, #0]
    d214:	f24c 5349 	movw	r3, #50505	; 0xc549
    d218:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d21c:	781b      	ldrb	r3, [r3, #0]
    d21e:	2bff      	cmp	r3, #255	; 0xff
    d220:	d105      	bne.n	d22e <radio_control_task+0x1ea>
    d222:	f24c 5349 	movw	r3, #50505	; 0xc549
    d226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d22a:	2200      	movs	r2, #0
    d22c:	701a      	strb	r2, [r3, #0]
    d22e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d236:	220b      	movs	r2, #11
    d238:	701a      	strb	r2, [r3, #0]
    d23a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d23e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d242:	220b      	movs	r2, #11
    d244:	701a      	strb	r2, [r3, #0]
    d246:	f24c 5349 	movw	r3, #50505	; 0xc549
    d24a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d24e:	781b      	ldrb	r3, [r3, #0]
    d250:	461a      	mov	r2, r3
    d252:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d256:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d25a:	7819      	ldrb	r1, [r3, #0]
    d25c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d264:	5499      	strb	r1, [r3, r2]
    d266:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d26e:	781a      	ldrb	r2, [r3, #0]
    d270:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d278:	781b      	ldrb	r3, [r3, #0]
    d27a:	4413      	add	r3, r2
    d27c:	b2da      	uxtb	r2, r3
    d27e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d286:	701a      	strb	r2, [r3, #0]
    d288:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d290:	781a      	ldrb	r2, [r3, #0]
    d292:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d29a:	781b      	ldrb	r3, [r3, #0]
    d29c:	4413      	add	r3, r2
    d29e:	b2da      	uxtb	r2, r3
    d2a0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d2a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2a8:	701a      	strb	r2, [r3, #0]
    d2aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2b2:	781b      	ldrb	r3, [r3, #0]
    d2b4:	3301      	adds	r3, #1
    d2b6:	b2da      	uxtb	r2, r3
    d2b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2c0:	701a      	strb	r2, [r3, #0]
    d2c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ca:	781b      	ldrb	r3, [r3, #0]
    d2cc:	2bff      	cmp	r3, #255	; 0xff
    d2ce:	d105      	bne.n	d2dc <radio_control_task+0x298>
    d2d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2d8:	2200      	movs	r2, #0
    d2da:	701a      	strb	r2, [r3, #0]
    d2dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2e4:	781b      	ldrb	r3, [r3, #0]
    d2e6:	461a      	mov	r2, r3
    d2e8:	f24c 532d 	movw	r3, #50477	; 0xc52d
    d2ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2f0:	7819      	ldrb	r1, [r3, #0]
    d2f2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d2f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2fa:	5499      	strb	r1, [r3, r2]
    d2fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d304:	781a      	ldrb	r2, [r3, #0]
    d306:	f24c 532d 	movw	r3, #50477	; 0xc52d
    d30a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d30e:	781b      	ldrb	r3, [r3, #0]
    d310:	4413      	add	r3, r2
    d312:	b2da      	uxtb	r2, r3
    d314:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d31c:	701a      	strb	r2, [r3, #0]
    d31e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d326:	781a      	ldrb	r2, [r3, #0]
    d328:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d32c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d330:	781b      	ldrb	r3, [r3, #0]
    d332:	4413      	add	r3, r2
    d334:	b2da      	uxtb	r2, r3
    d336:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d33a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d33e:	701a      	strb	r2, [r3, #0]
    d340:	f24c 5349 	movw	r3, #50505	; 0xc549
    d344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d348:	781b      	ldrb	r3, [r3, #0]
    d34a:	3301      	adds	r3, #1
    d34c:	b2da      	uxtb	r2, r3
    d34e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d352:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d356:	701a      	strb	r2, [r3, #0]
    d358:	f24c 5349 	movw	r3, #50505	; 0xc549
    d35c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d360:	781b      	ldrb	r3, [r3, #0]
    d362:	2bff      	cmp	r3, #255	; 0xff
    d364:	d105      	bne.n	d372 <radio_control_task+0x32e>
    d366:	f24c 5349 	movw	r3, #50505	; 0xc549
    d36a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d36e:	2200      	movs	r2, #0
    d370:	701a      	strb	r2, [r3, #0]
    d372:	f24c 5349 	movw	r3, #50505	; 0xc549
    d376:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d37a:	781b      	ldrb	r3, [r3, #0]
    d37c:	461a      	mov	r2, r3
    d37e:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d386:	7819      	ldrb	r1, [r3, #0]
    d388:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d38c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d390:	5499      	strb	r1, [r3, r2]
    d392:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d39a:	781a      	ldrb	r2, [r3, #0]
    d39c:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d3a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3a4:	781b      	ldrb	r3, [r3, #0]
    d3a6:	4413      	add	r3, r2
    d3a8:	b2da      	uxtb	r2, r3
    d3aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3b2:	701a      	strb	r2, [r3, #0]
    d3b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3bc:	781a      	ldrb	r2, [r3, #0]
    d3be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d3c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3c6:	781b      	ldrb	r3, [r3, #0]
    d3c8:	4413      	add	r3, r2
    d3ca:	b2da      	uxtb	r2, r3
    d3cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d3d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3d4:	701a      	strb	r2, [r3, #0]
    d3d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    d3da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3de:	781b      	ldrb	r3, [r3, #0]
    d3e0:	3301      	adds	r3, #1
    d3e2:	b2da      	uxtb	r2, r3
    d3e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d3e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3ec:	701a      	strb	r2, [r3, #0]
    d3ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    d3f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3f6:	781b      	ldrb	r3, [r3, #0]
    d3f8:	2bff      	cmp	r3, #255	; 0xff
    d3fa:	d105      	bne.n	d408 <radio_control_task+0x3c4>
    d3fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    d400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d404:	2200      	movs	r2, #0
    d406:	701a      	strb	r2, [r3, #0]
    d408:	f24c 5349 	movw	r3, #50505	; 0xc549
    d40c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d410:	781b      	ldrb	r3, [r3, #0]
    d412:	461a      	mov	r2, r3
    d414:	f24c 5333 	movw	r3, #50483	; 0xc533
    d418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d41c:	7819      	ldrb	r1, [r3, #0]
    d41e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d426:	5499      	strb	r1, [r3, r2]
    d428:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d42c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d430:	781a      	ldrb	r2, [r3, #0]
    d432:	f24c 5333 	movw	r3, #50483	; 0xc533
    d436:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d43a:	781b      	ldrb	r3, [r3, #0]
    d43c:	4413      	add	r3, r2
    d43e:	b2da      	uxtb	r2, r3
    d440:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d448:	701a      	strb	r2, [r3, #0]
    d44a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d44e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d452:	781a      	ldrb	r2, [r3, #0]
    d454:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d45c:	781b      	ldrb	r3, [r3, #0]
    d45e:	4413      	add	r3, r2
    d460:	b2da      	uxtb	r2, r3
    d462:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d46a:	701a      	strb	r2, [r3, #0]
    d46c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d474:	781b      	ldrb	r3, [r3, #0]
    d476:	3301      	adds	r3, #1
    d478:	b2da      	uxtb	r2, r3
    d47a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d47e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d482:	701a      	strb	r2, [r3, #0]
    d484:	f24c 5349 	movw	r3, #50505	; 0xc549
    d488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d48c:	781b      	ldrb	r3, [r3, #0]
    d48e:	2bff      	cmp	r3, #255	; 0xff
    d490:	d105      	bne.n	d49e <radio_control_task+0x45a>
    d492:	f24c 5349 	movw	r3, #50505	; 0xc549
    d496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d49a:	2200      	movs	r2, #0
    d49c:	701a      	strb	r2, [r3, #0]
    d49e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4a6:	781b      	ldrb	r3, [r3, #0]
    d4a8:	461a      	mov	r2, r3
    d4aa:	f240 533c 	movw	r3, #1340	; 0x53c
    d4ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4b2:	7819      	ldrb	r1, [r3, #0]
    d4b4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4bc:	5499      	strb	r1, [r3, r2]
    d4be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d4c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4c6:	781a      	ldrb	r2, [r3, #0]
    d4c8:	f240 533c 	movw	r3, #1340	; 0x53c
    d4cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4d0:	781b      	ldrb	r3, [r3, #0]
    d4d2:	4413      	add	r3, r2
    d4d4:	b2da      	uxtb	r2, r3
    d4d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4de:	701a      	strb	r2, [r3, #0]
    d4e0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d4e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4e8:	781a      	ldrb	r2, [r3, #0]
    d4ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d4ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4f2:	781b      	ldrb	r3, [r3, #0]
    d4f4:	4413      	add	r3, r2
    d4f6:	b2da      	uxtb	r2, r3
    d4f8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d4fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d500:	701a      	strb	r2, [r3, #0]
    d502:	f24c 5349 	movw	r3, #50505	; 0xc549
    d506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d50a:	781b      	ldrb	r3, [r3, #0]
    d50c:	3301      	adds	r3, #1
    d50e:	b2da      	uxtb	r2, r3
    d510:	f24c 5349 	movw	r3, #50505	; 0xc549
    d514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d518:	701a      	strb	r2, [r3, #0]
    d51a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d51e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d522:	781b      	ldrb	r3, [r3, #0]
    d524:	2bff      	cmp	r3, #255	; 0xff
    d526:	d105      	bne.n	d534 <radio_control_task+0x4f0>
    d528:	f24c 5349 	movw	r3, #50505	; 0xc549
    d52c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d530:	2200      	movs	r2, #0
    d532:	701a      	strb	r2, [r3, #0]
    d534:	f24c 5349 	movw	r3, #50505	; 0xc549
    d538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d53c:	781b      	ldrb	r3, [r3, #0]
    d53e:	461a      	mov	r2, r3
    d540:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d548:	7819      	ldrb	r1, [r3, #0]
    d54a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d54e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d552:	5499      	strb	r1, [r3, r2]
    d554:	f24c 5349 	movw	r3, #50505	; 0xc549
    d558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d55c:	781b      	ldrb	r3, [r3, #0]
    d55e:	3301      	adds	r3, #1
    d560:	b2da      	uxtb	r2, r3
    d562:	f24c 5349 	movw	r3, #50505	; 0xc549
    d566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d56a:	701a      	strb	r2, [r3, #0]
    d56c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d574:	781b      	ldrb	r3, [r3, #0]
    d576:	2bff      	cmp	r3, #255	; 0xff
    d578:	d105      	bne.n	d586 <radio_control_task+0x542>
    d57a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d57e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d582:	2200      	movs	r2, #0
    d584:	701a      	strb	r2, [r3, #0]
    d586:	f24c 5349 	movw	r3, #50505	; 0xc549
    d58a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d58e:	781b      	ldrb	r3, [r3, #0]
    d590:	461a      	mov	r2, r3
    d592:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d59a:	7819      	ldrb	r1, [r3, #0]
    d59c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d5a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5a4:	5499      	strb	r1, [r3, r2]
    d5a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ae:	781b      	ldrb	r3, [r3, #0]
    d5b0:	3301      	adds	r3, #1
    d5b2:	b2da      	uxtb	r2, r3
    d5b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5bc:	701a      	strb	r2, [r3, #0]
    d5be:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5c6:	781b      	ldrb	r3, [r3, #0]
    d5c8:	2bff      	cmp	r3, #255	; 0xff
    d5ca:	d105      	bne.n	d5d8 <radio_control_task+0x594>
    d5cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5d4:	2200      	movs	r2, #0
    d5d6:	701a      	strb	r2, [r3, #0]
    d5d8:	f242 0339 	movw	r3, #8249	; 0x2039
    d5dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5e0:	781b      	ldrb	r3, [r3, #0]
    d5e2:	b2db      	uxtb	r3, r3
    d5e4:	f003 0310 	and.w	r3, r3, #16
    d5e8:	2b00      	cmp	r3, #0
    d5ea:	d15a      	bne.n	d6a2 <radio_control_task+0x65e>
    d5ec:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d5f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5f4:	781b      	ldrb	r3, [r3, #0]
    d5f6:	b2db      	uxtb	r3, r3
    d5f8:	461a      	mov	r2, r3
    d5fa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d5fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d602:	5c9a      	ldrb	r2, [r3, r2]
    d604:	f24c 634b 	movw	r3, #50763	; 0xc64b
    d608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d60c:	701a      	strb	r2, [r3, #0]
    d60e:	f24c 634c 	movw	r3, #50764	; 0xc64c
    d612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d616:	2200      	movs	r2, #0
    d618:	701a      	strb	r2, [r3, #0]
    d61a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d61e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d622:	781b      	ldrb	r3, [r3, #0]
    d624:	b2db      	uxtb	r3, r3
    d626:	3301      	adds	r3, #1
    d628:	b2da      	uxtb	r2, r3
    d62a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d62e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d632:	701a      	strb	r2, [r3, #0]
    d634:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d63c:	781b      	ldrb	r3, [r3, #0]
    d63e:	b2db      	uxtb	r3, r3
    d640:	2bff      	cmp	r3, #255	; 0xff
    d642:	d105      	bne.n	d650 <radio_control_task+0x60c>
    d644:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d64c:	2200      	movs	r2, #0
    d64e:	701a      	strb	r2, [r3, #0]
    d650:	f242 0338 	movw	r3, #8248	; 0x2038
    d654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d658:	f242 0238 	movw	r2, #8248	; 0x2038
    d65c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d660:	7812      	ldrb	r2, [r2, #0]
    d662:	b2d2      	uxtb	r2, r2
    d664:	f042 0201 	orr.w	r2, r2, #1
    d668:	b2d2      	uxtb	r2, r2
    d66a:	701a      	strb	r2, [r3, #0]
    d66c:	f242 0339 	movw	r3, #8249	; 0x2039
    d670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d674:	f242 0239 	movw	r2, #8249	; 0x2039
    d678:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d67c:	7812      	ldrb	r2, [r2, #0]
    d67e:	b2d2      	uxtb	r2, r2
    d680:	f042 0210 	orr.w	r2, r2, #16
    d684:	b2d2      	uxtb	r2, r2
    d686:	701a      	strb	r2, [r3, #0]
    d688:	e00b      	b.n	d6a2 <radio_control_task+0x65e>
    d68a:	f24c 5348 	movw	r3, #50504	; 0xc548
    d68e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d692:	781b      	ldrb	r3, [r3, #0]
    d694:	3301      	adds	r3, #1
    d696:	b2da      	uxtb	r2, r3
    d698:	f24c 5348 	movw	r3, #50504	; 0xc548
    d69c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6a0:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d6a2:	f24c 6350 	movw	r3, #50768	; 0xc650
    d6a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6aa:	885b      	ldrh	r3, [r3, #2]
    d6ac:	b21b      	sxth	r3, r3
    d6ae:	4618      	mov	r0, r3
    d6b0:	f00a fec8 	bl	18444 <__aeabi_i2f>
    d6b4:	4603      	mov	r3, r0
    d6b6:	4618      	mov	r0, r3
    d6b8:	f04f 0100 	mov.w	r1, #0
    d6bc:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d6c0:	f00a ffc8 	bl	18654 <__aeabi_fdiv>
    d6c4:	4603      	mov	r3, r0
    d6c6:	4618      	mov	r0, r3
    d6c8:	f00a fa7c 	bl	17bc4 <__aeabi_f2d>
    d6cc:	4602      	mov	r2, r0
    d6ce:	460b      	mov	r3, r1
    d6d0:	4610      	mov	r0, r2
    d6d2:	4619      	mov	r1, r3
    d6d4:	a346      	add	r3, pc, #280	; (adr r3, d7f0 <radio_control_task+0x7ac>)
    d6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    d6da:	f00a fac7 	bl	17c6c <__aeabi_dmul>
    d6de:	4602      	mov	r2, r0
    d6e0:	460b      	mov	r3, r1
    d6e2:	4610      	mov	r0, r2
    d6e4:	4619      	mov	r1, r3
    d6e6:	f04f 0200 	mov.w	r2, #0
    d6ea:	f04f 0300 	mov.w	r3, #0
    d6ee:	f00a f90b 	bl	17908 <__adddf3>
    d6f2:	4602      	mov	r2, r0
    d6f4:	460b      	mov	r3, r1
    d6f6:	4610      	mov	r0, r2
    d6f8:	4619      	mov	r1, r3
    d6fa:	f00a fd99 	bl	18230 <__aeabi_d2f>
    d6fe:	4602      	mov	r2, r0
    d700:	f64c 0374 	movw	r3, #51316	; 0xc874
    d704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d708:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d70a:	f24c 6350 	movw	r3, #50768	; 0xc650
    d70e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d712:	889b      	ldrh	r3, [r3, #4]
    d714:	b21b      	sxth	r3, r3
    d716:	4618      	mov	r0, r3
    d718:	f00a fe94 	bl	18444 <__aeabi_i2f>
    d71c:	4603      	mov	r3, r0
    d71e:	4618      	mov	r0, r3
    d720:	f04f 0100 	mov.w	r1, #0
    d724:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d728:	f00a ff94 	bl	18654 <__aeabi_fdiv>
    d72c:	4603      	mov	r3, r0
    d72e:	4618      	mov	r0, r3
    d730:	f00a fa48 	bl	17bc4 <__aeabi_f2d>
    d734:	4602      	mov	r2, r0
    d736:	460b      	mov	r3, r1
    d738:	4610      	mov	r0, r2
    d73a:	4619      	mov	r1, r3
    d73c:	f04f 0200 	mov.w	r2, #0
    d740:	f04f 0300 	mov.w	r3, #0
    d744:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d748:	f00a fa90 	bl	17c6c <__aeabi_dmul>
    d74c:	4602      	mov	r2, r0
    d74e:	460b      	mov	r3, r1
    d750:	4610      	mov	r0, r2
    d752:	4619      	mov	r1, r3
    d754:	f04f 0200 	mov.w	r2, #0
    d758:	f04f 0300 	mov.w	r3, #0
    d75c:	f00a f8d4 	bl	17908 <__adddf3>
    d760:	4602      	mov	r2, r0
    d762:	460b      	mov	r3, r1
    d764:	4610      	mov	r0, r2
    d766:	4619      	mov	r1, r3
    d768:	f00a fd62 	bl	18230 <__aeabi_d2f>
    d76c:	4602      	mov	r2, r0
    d76e:	f64c 0378 	movw	r3, #51320	; 0xc878
    d772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d776:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d778:	f24c 6350 	movw	r3, #50768	; 0xc650
    d77c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d780:	881a      	ldrh	r2, [r3, #0]
    d782:	f64c 037c 	movw	r3, #51324	; 0xc87c
    d786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d78a:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d78c:	f24c 6350 	movw	r3, #50768	; 0xc650
    d790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d794:	7c9a      	ldrb	r2, [r3, #18]
    d796:	f24c 5334 	movw	r3, #50484	; 0xc534
    d79a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d79e:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d7a0:	f24c 6350 	movw	r3, #50768	; 0xc650
    d7a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7a8:	7d5a      	ldrb	r2, [r3, #21]
    d7aa:	f24c 5332 	movw	r3, #50482	; 0xc532
    d7ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7b2:	701a      	strb	r2, [r3, #0]

    events_update();
    d7b4:	f7f9 fe26 	bl	7404 <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d7b8:	f7f8 fc26 	bl	6008 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d7bc:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d7c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7c4:	781b      	ldrb	r3, [r3, #0]
    d7c6:	2b02      	cmp	r3, #2
    d7c8:	d10e      	bne.n	d7e8 <radio_control_task+0x7a4>
    d7ca:	f24c 6350 	movw	r3, #50768	; 0xc650
    d7ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7d2:	881b      	ldrh	r3, [r3, #0]
    d7d4:	b21b      	sxth	r3, r3
    d7d6:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d7da:	dd05      	ble.n	d7e8 <radio_control_task+0x7a4>
	launch = TRUE;
    d7dc:	f24c 5340 	movw	r3, #50496	; 0xc540
    d7e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7e4:	2201      	movs	r2, #1
    d7e6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d7e8:	3708      	adds	r7, #8
    d7ea:	46bd      	mov	sp, r7
    d7ec:	bd80      	pop	{r7, pc}
    d7ee:	bf00      	nop
    d7f0:	33333333 	.word	0x33333333
    d7f4:	bfe33333 	.word	0xbfe33333

0000d7f8 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d7f8:	b580      	push	{r7, lr}
    d7fa:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d7fc:	f24c 532e 	movw	r3, #50478	; 0xc52e
    d800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d804:	2203      	movs	r2, #3
    d806:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d808:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d80c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d810:	781b      	ldrb	r3, [r3, #0]
    d812:	2b03      	cmp	r3, #3
    d814:	d102      	bne.n	d81c <navigation_update+0x24>
    nav_home();
    d816:	f007 fa9b 	bl	14d50 <nav_home>
    d81a:	e001      	b.n	d820 <navigation_update+0x28>
  else
    nav_update();
    d81c:	f007 fabe 	bl	14d9c <nav_update>
}
    d820:	bd80      	pop	{r7, pc}
    d822:	bf00      	nop

0000d824 <send_nav_values>:

void send_nav_values(void){
    d824:	b480      	push	{r7}
    d826:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d828:	f24c 5349 	movw	r3, #50505	; 0xc549
    d82c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d830:	781a      	ldrb	r2, [r3, #0]
    d832:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d83a:	781b      	ldrb	r3, [r3, #0]
    d83c:	b2db      	uxtb	r3, r3
    d83e:	429a      	cmp	r2, r3
    d840:	d313      	bcc.n	d86a <send_nav_values+0x46>
    d842:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d84a:	781b      	ldrb	r3, [r3, #0]
    d84c:	b2db      	uxtb	r3, r3
    d84e:	461a      	mov	r2, r3
    d850:	f24c 5349 	movw	r3, #50505	; 0xc549
    d854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d858:	781b      	ldrb	r3, [r3, #0]
    d85a:	1ad3      	subs	r3, r2, r3
    d85c:	33ff      	adds	r3, #255	; 0xff
    d85e:	2b1e      	cmp	r3, #30
    d860:	bfd4      	ite	le
    d862:	2300      	movle	r3, #0
    d864:	2301      	movgt	r3, #1
    d866:	b2db      	uxtb	r3, r3
    d868:	e011      	b.n	d88e <send_nav_values+0x6a>
    d86a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d86e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d872:	781b      	ldrb	r3, [r3, #0]
    d874:	b2db      	uxtb	r3, r3
    d876:	461a      	mov	r2, r3
    d878:	f24c 5349 	movw	r3, #50505	; 0xc549
    d87c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d880:	781b      	ldrb	r3, [r3, #0]
    d882:	1ad3      	subs	r3, r2, r3
    d884:	2b1e      	cmp	r3, #30
    d886:	bfd4      	ite	le
    d888:	2300      	movle	r3, #0
    d88a:	2301      	movgt	r3, #1
    d88c:	b2db      	uxtb	r3, r3
    d88e:	2b00      	cmp	r3, #0
    d890:	f001 8094 	beq.w	e9bc <send_nav_values+0x1198>
    d894:	f24c 5349 	movw	r3, #50505	; 0xc549
    d898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d89c:	781b      	ldrb	r3, [r3, #0]
    d89e:	461a      	mov	r2, r3
    d8a0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8a8:	2105      	movs	r1, #5
    d8aa:	5499      	strb	r1, [r3, r2]
    d8ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    d8b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8b4:	781b      	ldrb	r3, [r3, #0]
    d8b6:	3301      	adds	r3, #1
    d8b8:	b2da      	uxtb	r2, r3
    d8ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    d8be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8c2:	701a      	strb	r2, [r3, #0]
    d8c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d8c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8cc:	781b      	ldrb	r3, [r3, #0]
    d8ce:	2bff      	cmp	r3, #255	; 0xff
    d8d0:	d105      	bne.n	d8de <send_nav_values+0xba>
    d8d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    d8d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8da:	2200      	movs	r2, #0
    d8dc:	701a      	strb	r2, [r3, #0]
    d8de:	f24c 5349 	movw	r3, #50505	; 0xc549
    d8e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8e6:	781b      	ldrb	r3, [r3, #0]
    d8e8:	461a      	mov	r2, r3
    d8ea:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d8ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8f2:	210a      	movs	r1, #10
    d8f4:	5499      	strb	r1, [r3, r2]
    d8f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    d8fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8fe:	781b      	ldrb	r3, [r3, #0]
    d900:	3301      	adds	r3, #1
    d902:	b2da      	uxtb	r2, r3
    d904:	f24c 5349 	movw	r3, #50505	; 0xc549
    d908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d90c:	701a      	strb	r2, [r3, #0]
    d90e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d916:	781b      	ldrb	r3, [r3, #0]
    d918:	2bff      	cmp	r3, #255	; 0xff
    d91a:	d105      	bne.n	d928 <send_nav_values+0x104>
    d91c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d924:	2200      	movs	r2, #0
    d926:	701a      	strb	r2, [r3, #0]
    d928:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d92c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d930:	220a      	movs	r2, #10
    d932:	701a      	strb	r2, [r3, #0]
    d934:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d93c:	220a      	movs	r2, #10
    d93e:	701a      	strb	r2, [r3, #0]
    d940:	f24c 5349 	movw	r3, #50505	; 0xc549
    d944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d948:	781b      	ldrb	r3, [r3, #0]
    d94a:	461a      	mov	r2, r3
    d94c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
    d950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d954:	7819      	ldrb	r1, [r3, #0]
    d956:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d95a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d95e:	5499      	strb	r1, [r3, r2]
    d960:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d968:	781a      	ldrb	r2, [r3, #0]
    d96a:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
    d96e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d972:	781b      	ldrb	r3, [r3, #0]
    d974:	4413      	add	r3, r2
    d976:	b2da      	uxtb	r2, r3
    d978:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d980:	701a      	strb	r2, [r3, #0]
    d982:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d98a:	781a      	ldrb	r2, [r3, #0]
    d98c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d994:	781b      	ldrb	r3, [r3, #0]
    d996:	4413      	add	r3, r2
    d998:	b2da      	uxtb	r2, r3
    d99a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d99e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9a2:	701a      	strb	r2, [r3, #0]
    d9a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ac:	781b      	ldrb	r3, [r3, #0]
    d9ae:	3301      	adds	r3, #1
    d9b0:	b2da      	uxtb	r2, r3
    d9b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ba:	701a      	strb	r2, [r3, #0]
    d9bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9c4:	781b      	ldrb	r3, [r3, #0]
    d9c6:	2bff      	cmp	r3, #255	; 0xff
    d9c8:	d105      	bne.n	d9d6 <send_nav_values+0x1b2>
    d9ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9d2:	2200      	movs	r2, #0
    d9d4:	701a      	strb	r2, [r3, #0]
    d9d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9de:	781b      	ldrb	r3, [r3, #0]
    d9e0:	461a      	mov	r2, r3
    d9e2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
    d9e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ea:	7819      	ldrb	r1, [r3, #0]
    d9ec:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d9f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9f4:	5499      	strb	r1, [r3, r2]
    d9f6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9fe:	781a      	ldrb	r2, [r3, #0]
    da00:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
    da04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da08:	781b      	ldrb	r3, [r3, #0]
    da0a:	4413      	add	r3, r2
    da0c:	b2da      	uxtb	r2, r3
    da0e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da16:	701a      	strb	r2, [r3, #0]
    da18:	f24c 634e 	movw	r3, #50766	; 0xc64e
    da1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da20:	781a      	ldrb	r2, [r3, #0]
    da22:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da2a:	781b      	ldrb	r3, [r3, #0]
    da2c:	4413      	add	r3, r2
    da2e:	b2da      	uxtb	r2, r3
    da30:	f24c 634e 	movw	r3, #50766	; 0xc64e
    da34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da38:	701a      	strb	r2, [r3, #0]
    da3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    da3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da42:	781b      	ldrb	r3, [r3, #0]
    da44:	3301      	adds	r3, #1
    da46:	b2da      	uxtb	r2, r3
    da48:	f24c 5349 	movw	r3, #50505	; 0xc549
    da4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da50:	701a      	strb	r2, [r3, #0]
    da52:	f24c 5349 	movw	r3, #50505	; 0xc549
    da56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da5a:	781b      	ldrb	r3, [r3, #0]
    da5c:	2bff      	cmp	r3, #255	; 0xff
    da5e:	d105      	bne.n	da6c <send_nav_values+0x248>
    da60:	f24c 5349 	movw	r3, #50505	; 0xc549
    da64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da68:	2200      	movs	r2, #0
    da6a:	701a      	strb	r2, [r3, #0]
    da6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    da70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da74:	781b      	ldrb	r3, [r3, #0]
    da76:	461a      	mov	r2, r3
    da78:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    da7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da80:	7819      	ldrb	r1, [r3, #0]
    da82:	f24c 534c 	movw	r3, #50508	; 0xc54c
    da86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da8a:	5499      	strb	r1, [r3, r2]
    da8c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    da90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da94:	781a      	ldrb	r2, [r3, #0]
    da96:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da9e:	781b      	ldrb	r3, [r3, #0]
    daa0:	4413      	add	r3, r2
    daa2:	b2da      	uxtb	r2, r3
    daa4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    daa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daac:	701a      	strb	r2, [r3, #0]
    daae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dab6:	781a      	ldrb	r2, [r3, #0]
    dab8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dabc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dac0:	781b      	ldrb	r3, [r3, #0]
    dac2:	4413      	add	r3, r2
    dac4:	b2da      	uxtb	r2, r3
    dac6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    daca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dace:	701a      	strb	r2, [r3, #0]
    dad0:	f24c 5349 	movw	r3, #50505	; 0xc549
    dad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dad8:	781b      	ldrb	r3, [r3, #0]
    dada:	3301      	adds	r3, #1
    dadc:	b2da      	uxtb	r2, r3
    dade:	f24c 5349 	movw	r3, #50505	; 0xc549
    dae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dae6:	701a      	strb	r2, [r3, #0]
    dae8:	f24c 5349 	movw	r3, #50505	; 0xc549
    daec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daf0:	781b      	ldrb	r3, [r3, #0]
    daf2:	2bff      	cmp	r3, #255	; 0xff
    daf4:	d105      	bne.n	db02 <send_nav_values+0x2de>
    daf6:	f24c 5349 	movw	r3, #50505	; 0xc549
    dafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dafe:	2200      	movs	r2, #0
    db00:	701a      	strb	r2, [r3, #0]
    db02:	f24c 5349 	movw	r3, #50505	; 0xc549
    db06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db0a:	781b      	ldrb	r3, [r3, #0]
    db0c:	461a      	mov	r2, r3
    db0e:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    db12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db16:	7859      	ldrb	r1, [r3, #1]
    db18:	f24c 534c 	movw	r3, #50508	; 0xc54c
    db1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db20:	5499      	strb	r1, [r3, r2]
    db22:	4bd2      	ldr	r3, [pc, #840]	; (de6c <send_nav_values+0x648>)
    db24:	781a      	ldrb	r2, [r3, #0]
    db26:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db2e:	781b      	ldrb	r3, [r3, #0]
    db30:	4413      	add	r3, r2
    db32:	b2da      	uxtb	r2, r3
    db34:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db3c:	701a      	strb	r2, [r3, #0]
    db3e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    db42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db46:	781a      	ldrb	r2, [r3, #0]
    db48:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db50:	781b      	ldrb	r3, [r3, #0]
    db52:	4413      	add	r3, r2
    db54:	b2da      	uxtb	r2, r3
    db56:	f24c 634e 	movw	r3, #50766	; 0xc64e
    db5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db5e:	701a      	strb	r2, [r3, #0]
    db60:	f24c 5349 	movw	r3, #50505	; 0xc549
    db64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db68:	781b      	ldrb	r3, [r3, #0]
    db6a:	3301      	adds	r3, #1
    db6c:	b2da      	uxtb	r2, r3
    db6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    db72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db76:	701a      	strb	r2, [r3, #0]
    db78:	f24c 5349 	movw	r3, #50505	; 0xc549
    db7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db80:	781b      	ldrb	r3, [r3, #0]
    db82:	2bff      	cmp	r3, #255	; 0xff
    db84:	d105      	bne.n	db92 <send_nav_values+0x36e>
    db86:	f24c 5349 	movw	r3, #50505	; 0xc549
    db8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db8e:	2200      	movs	r2, #0
    db90:	701a      	strb	r2, [r3, #0]
    db92:	f24c 5349 	movw	r3, #50505	; 0xc549
    db96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db9a:	781b      	ldrb	r3, [r3, #0]
    db9c:	461a      	mov	r2, r3
    db9e:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    dba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dba6:	7899      	ldrb	r1, [r3, #2]
    dba8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dbac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbb0:	5499      	strb	r1, [r3, r2]
    dbb2:	4baf      	ldr	r3, [pc, #700]	; (de70 <send_nav_values+0x64c>)
    dbb4:	781a      	ldrb	r2, [r3, #0]
    dbb6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dbba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbbe:	781b      	ldrb	r3, [r3, #0]
    dbc0:	4413      	add	r3, r2
    dbc2:	b2da      	uxtb	r2, r3
    dbc4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dbc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbcc:	701a      	strb	r2, [r3, #0]
    dbce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dbd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbd6:	781a      	ldrb	r2, [r3, #0]
    dbd8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dbdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbe0:	781b      	ldrb	r3, [r3, #0]
    dbe2:	4413      	add	r3, r2
    dbe4:	b2da      	uxtb	r2, r3
    dbe6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dbea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbee:	701a      	strb	r2, [r3, #0]
    dbf0:	f24c 5349 	movw	r3, #50505	; 0xc549
    dbf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbf8:	781b      	ldrb	r3, [r3, #0]
    dbfa:	3301      	adds	r3, #1
    dbfc:	b2da      	uxtb	r2, r3
    dbfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc06:	701a      	strb	r2, [r3, #0]
    dc08:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc10:	781b      	ldrb	r3, [r3, #0]
    dc12:	2bff      	cmp	r3, #255	; 0xff
    dc14:	d105      	bne.n	dc22 <send_nav_values+0x3fe>
    dc16:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc1e:	2200      	movs	r2, #0
    dc20:	701a      	strb	r2, [r3, #0]
    dc22:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc2a:	781b      	ldrb	r3, [r3, #0]
    dc2c:	461a      	mov	r2, r3
    dc2e:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    dc32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc36:	78d9      	ldrb	r1, [r3, #3]
    dc38:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dc3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc40:	5499      	strb	r1, [r3, r2]
    dc42:	4b8c      	ldr	r3, [pc, #560]	; (de74 <send_nav_values+0x650>)
    dc44:	781a      	ldrb	r2, [r3, #0]
    dc46:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc4e:	781b      	ldrb	r3, [r3, #0]
    dc50:	4413      	add	r3, r2
    dc52:	b2da      	uxtb	r2, r3
    dc54:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc5c:	701a      	strb	r2, [r3, #0]
    dc5e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dc62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc66:	781a      	ldrb	r2, [r3, #0]
    dc68:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc70:	781b      	ldrb	r3, [r3, #0]
    dc72:	4413      	add	r3, r2
    dc74:	b2da      	uxtb	r2, r3
    dc76:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dc7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc7e:	701a      	strb	r2, [r3, #0]
    dc80:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc88:	781b      	ldrb	r3, [r3, #0]
    dc8a:	3301      	adds	r3, #1
    dc8c:	b2da      	uxtb	r2, r3
    dc8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc96:	701a      	strb	r2, [r3, #0]
    dc98:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dca0:	781b      	ldrb	r3, [r3, #0]
    dca2:	2bff      	cmp	r3, #255	; 0xff
    dca4:	d105      	bne.n	dcb2 <send_nav_values+0x48e>
    dca6:	f24c 5349 	movw	r3, #50505	; 0xc549
    dcaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcae:	2200      	movs	r2, #0
    dcb0:	701a      	strb	r2, [r3, #0]
    dcb2:	f24c 5349 	movw	r3, #50505	; 0xc549
    dcb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcba:	781b      	ldrb	r3, [r3, #0]
    dcbc:	461a      	mov	r2, r3
    dcbe:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dcc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcc6:	7819      	ldrb	r1, [r3, #0]
    dcc8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcd0:	5499      	strb	r1, [r3, r2]
    dcd2:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dcd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcda:	781a      	ldrb	r2, [r3, #0]
    dcdc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dce4:	781b      	ldrb	r3, [r3, #0]
    dce6:	4413      	add	r3, r2
    dce8:	b2da      	uxtb	r2, r3
    dcea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dcee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcf2:	701a      	strb	r2, [r3, #0]
    dcf4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dcf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcfc:	781a      	ldrb	r2, [r3, #0]
    dcfe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd06:	781b      	ldrb	r3, [r3, #0]
    dd08:	4413      	add	r3, r2
    dd0a:	b2da      	uxtb	r2, r3
    dd0c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dd10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd14:	701a      	strb	r2, [r3, #0]
    dd16:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd1e:	781b      	ldrb	r3, [r3, #0]
    dd20:	3301      	adds	r3, #1
    dd22:	b2da      	uxtb	r2, r3
    dd24:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd2c:	701a      	strb	r2, [r3, #0]
    dd2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd36:	781b      	ldrb	r3, [r3, #0]
    dd38:	2bff      	cmp	r3, #255	; 0xff
    dd3a:	d105      	bne.n	dd48 <send_nav_values+0x524>
    dd3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd44:	2200      	movs	r2, #0
    dd46:	701a      	strb	r2, [r3, #0]
    dd48:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd50:	781b      	ldrb	r3, [r3, #0]
    dd52:	461a      	mov	r2, r3
    dd54:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dd58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd5c:	7859      	ldrb	r1, [r3, #1]
    dd5e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dd62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd66:	5499      	strb	r1, [r3, r2]
    dd68:	4b43      	ldr	r3, [pc, #268]	; (de78 <send_nav_values+0x654>)
    dd6a:	781a      	ldrb	r2, [r3, #0]
    dd6c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd74:	781b      	ldrb	r3, [r3, #0]
    dd76:	4413      	add	r3, r2
    dd78:	b2da      	uxtb	r2, r3
    dd7a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd82:	701a      	strb	r2, [r3, #0]
    dd84:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dd88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd8c:	781a      	ldrb	r2, [r3, #0]
    dd8e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd96:	781b      	ldrb	r3, [r3, #0]
    dd98:	4413      	add	r3, r2
    dd9a:	b2da      	uxtb	r2, r3
    dd9c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dda0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dda4:	701a      	strb	r2, [r3, #0]
    dda6:	f24c 5349 	movw	r3, #50505	; 0xc549
    ddaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddae:	781b      	ldrb	r3, [r3, #0]
    ddb0:	3301      	adds	r3, #1
    ddb2:	b2da      	uxtb	r2, r3
    ddb4:	f24c 5349 	movw	r3, #50505	; 0xc549
    ddb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddbc:	701a      	strb	r2, [r3, #0]
    ddbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    ddc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddc6:	781b      	ldrb	r3, [r3, #0]
    ddc8:	2bff      	cmp	r3, #255	; 0xff
    ddca:	d105      	bne.n	ddd8 <send_nav_values+0x5b4>
    ddcc:	f24c 5349 	movw	r3, #50505	; 0xc549
    ddd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddd4:	2200      	movs	r2, #0
    ddd6:	701a      	strb	r2, [r3, #0]
    ddd8:	f24c 5349 	movw	r3, #50505	; 0xc549
    dddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dde0:	781b      	ldrb	r3, [r3, #0]
    dde2:	461a      	mov	r2, r3
    dde4:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dde8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddec:	7899      	ldrb	r1, [r3, #2]
    ddee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ddf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddf6:	5499      	strb	r1, [r3, r2]
    ddf8:	4b20      	ldr	r3, [pc, #128]	; (de7c <send_nav_values+0x658>)
    ddfa:	781a      	ldrb	r2, [r3, #0]
    ddfc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de04:	781b      	ldrb	r3, [r3, #0]
    de06:	4413      	add	r3, r2
    de08:	b2da      	uxtb	r2, r3
    de0a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de12:	701a      	strb	r2, [r3, #0]
    de14:	f24c 634e 	movw	r3, #50766	; 0xc64e
    de18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de1c:	781a      	ldrb	r2, [r3, #0]
    de1e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de26:	781b      	ldrb	r3, [r3, #0]
    de28:	4413      	add	r3, r2
    de2a:	b2da      	uxtb	r2, r3
    de2c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    de30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de34:	701a      	strb	r2, [r3, #0]
    de36:	f24c 5349 	movw	r3, #50505	; 0xc549
    de3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de3e:	781b      	ldrb	r3, [r3, #0]
    de40:	3301      	adds	r3, #1
    de42:	b2da      	uxtb	r2, r3
    de44:	f24c 5349 	movw	r3, #50505	; 0xc549
    de48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de4c:	701a      	strb	r2, [r3, #0]
    de4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    de52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de56:	781b      	ldrb	r3, [r3, #0]
    de58:	2bff      	cmp	r3, #255	; 0xff
    de5a:	d111      	bne.n	de80 <send_nav_values+0x65c>
    de5c:	f24c 5349 	movw	r3, #50505	; 0xc549
    de60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de64:	2200      	movs	r2, #0
    de66:	701a      	strb	r2, [r3, #0]
    de68:	e00a      	b.n	de80 <send_nav_values+0x65c>
    de6a:	bf00      	nop
    de6c:	2004cafd 	.word	0x2004cafd
    de70:	2004cafe 	.word	0x2004cafe
    de74:	2004caff 	.word	0x2004caff
    de78:	2004cb01 	.word	0x2004cb01
    de7c:	2004cb02 	.word	0x2004cb02
    de80:	f24c 5349 	movw	r3, #50505	; 0xc549
    de84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de88:	781b      	ldrb	r3, [r3, #0]
    de8a:	461a      	mov	r2, r3
    de8c:	f64c 3300 	movw	r3, #51968	; 0xcb00
    de90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de94:	78d9      	ldrb	r1, [r3, #3]
    de96:	f24c 534c 	movw	r3, #50508	; 0xc54c
    de9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de9e:	5499      	strb	r1, [r3, r2]
    dea0:	4bd3      	ldr	r3, [pc, #844]	; (e1f0 <send_nav_values+0x9cc>)
    dea2:	781a      	ldrb	r2, [r3, #0]
    dea4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deac:	781b      	ldrb	r3, [r3, #0]
    deae:	4413      	add	r3, r2
    deb0:	b2da      	uxtb	r2, r3
    deb2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    deb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deba:	701a      	strb	r2, [r3, #0]
    debc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dec4:	781a      	ldrb	r2, [r3, #0]
    dec6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    deca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dece:	781b      	ldrb	r3, [r3, #0]
    ded0:	4413      	add	r3, r2
    ded2:	b2da      	uxtb	r2, r3
    ded4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ded8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dedc:	701a      	strb	r2, [r3, #0]
    dede:	f24c 5349 	movw	r3, #50505	; 0xc549
    dee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dee6:	781b      	ldrb	r3, [r3, #0]
    dee8:	3301      	adds	r3, #1
    deea:	b2da      	uxtb	r2, r3
    deec:	f24c 5349 	movw	r3, #50505	; 0xc549
    def0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    def4:	701a      	strb	r2, [r3, #0]
    def6:	f24c 5349 	movw	r3, #50505	; 0xc549
    defa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    defe:	781b      	ldrb	r3, [r3, #0]
    df00:	2bff      	cmp	r3, #255	; 0xff
    df02:	d105      	bne.n	df10 <send_nav_values+0x6ec>
    df04:	f24c 5349 	movw	r3, #50505	; 0xc549
    df08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df0c:	2200      	movs	r2, #0
    df0e:	701a      	strb	r2, [r3, #0]
    df10:	f24c 5349 	movw	r3, #50505	; 0xc549
    df14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df18:	781b      	ldrb	r3, [r3, #0]
    df1a:	461a      	mov	r2, r3
    df1c:	f64c 038c 	movw	r3, #51340	; 0xc88c
    df20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df24:	7819      	ldrb	r1, [r3, #0]
    df26:	f24c 534c 	movw	r3, #50508	; 0xc54c
    df2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df2e:	5499      	strb	r1, [r3, r2]
    df30:	f64c 038c 	movw	r3, #51340	; 0xc88c
    df34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df38:	781a      	ldrb	r2, [r3, #0]
    df3a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df42:	781b      	ldrb	r3, [r3, #0]
    df44:	4413      	add	r3, r2
    df46:	b2da      	uxtb	r2, r3
    df48:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df50:	701a      	strb	r2, [r3, #0]
    df52:	f24c 634e 	movw	r3, #50766	; 0xc64e
    df56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df5a:	781a      	ldrb	r2, [r3, #0]
    df5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df64:	781b      	ldrb	r3, [r3, #0]
    df66:	4413      	add	r3, r2
    df68:	b2da      	uxtb	r2, r3
    df6a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    df6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df72:	701a      	strb	r2, [r3, #0]
    df74:	f24c 5349 	movw	r3, #50505	; 0xc549
    df78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df7c:	781b      	ldrb	r3, [r3, #0]
    df7e:	3301      	adds	r3, #1
    df80:	b2da      	uxtb	r2, r3
    df82:	f24c 5349 	movw	r3, #50505	; 0xc549
    df86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df8a:	701a      	strb	r2, [r3, #0]
    df8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    df90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df94:	781b      	ldrb	r3, [r3, #0]
    df96:	2bff      	cmp	r3, #255	; 0xff
    df98:	d105      	bne.n	dfa6 <send_nav_values+0x782>
    df9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    df9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfa2:	2200      	movs	r2, #0
    dfa4:	701a      	strb	r2, [r3, #0]
    dfa6:	f24c 5349 	movw	r3, #50505	; 0xc549
    dfaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfae:	781b      	ldrb	r3, [r3, #0]
    dfb0:	461a      	mov	r2, r3
    dfb2:	f64c 038c 	movw	r3, #51340	; 0xc88c
    dfb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfba:	7859      	ldrb	r1, [r3, #1]
    dfbc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dfc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfc4:	5499      	strb	r1, [r3, r2]
    dfc6:	4b8b      	ldr	r3, [pc, #556]	; (e1f4 <send_nav_values+0x9d0>)
    dfc8:	781a      	ldrb	r2, [r3, #0]
    dfca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dfce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfd2:	781b      	ldrb	r3, [r3, #0]
    dfd4:	4413      	add	r3, r2
    dfd6:	b2da      	uxtb	r2, r3
    dfd8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dfdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfe0:	701a      	strb	r2, [r3, #0]
    dfe2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dfe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfea:	781a      	ldrb	r2, [r3, #0]
    dfec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dff4:	781b      	ldrb	r3, [r3, #0]
    dff6:	4413      	add	r3, r2
    dff8:	b2da      	uxtb	r2, r3
    dffa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e002:	701a      	strb	r2, [r3, #0]
    e004:	f24c 5349 	movw	r3, #50505	; 0xc549
    e008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e00c:	781b      	ldrb	r3, [r3, #0]
    e00e:	3301      	adds	r3, #1
    e010:	b2da      	uxtb	r2, r3
    e012:	f24c 5349 	movw	r3, #50505	; 0xc549
    e016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e01a:	701a      	strb	r2, [r3, #0]
    e01c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e024:	781b      	ldrb	r3, [r3, #0]
    e026:	2bff      	cmp	r3, #255	; 0xff
    e028:	d105      	bne.n	e036 <send_nav_values+0x812>
    e02a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e02e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e032:	2200      	movs	r2, #0
    e034:	701a      	strb	r2, [r3, #0]
    e036:	f24c 5349 	movw	r3, #50505	; 0xc549
    e03a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e03e:	781b      	ldrb	r3, [r3, #0]
    e040:	461a      	mov	r2, r3
    e042:	f64c 038c 	movw	r3, #51340	; 0xc88c
    e046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e04a:	7899      	ldrb	r1, [r3, #2]
    e04c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e054:	5499      	strb	r1, [r3, r2]
    e056:	4b68      	ldr	r3, [pc, #416]	; (e1f8 <send_nav_values+0x9d4>)
    e058:	781a      	ldrb	r2, [r3, #0]
    e05a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e05e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e062:	781b      	ldrb	r3, [r3, #0]
    e064:	4413      	add	r3, r2
    e066:	b2da      	uxtb	r2, r3
    e068:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e06c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e070:	701a      	strb	r2, [r3, #0]
    e072:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e07a:	781a      	ldrb	r2, [r3, #0]
    e07c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e084:	781b      	ldrb	r3, [r3, #0]
    e086:	4413      	add	r3, r2
    e088:	b2da      	uxtb	r2, r3
    e08a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e08e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e092:	701a      	strb	r2, [r3, #0]
    e094:	f24c 5349 	movw	r3, #50505	; 0xc549
    e098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e09c:	781b      	ldrb	r3, [r3, #0]
    e09e:	3301      	adds	r3, #1
    e0a0:	b2da      	uxtb	r2, r3
    e0a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0aa:	701a      	strb	r2, [r3, #0]
    e0ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0b4:	781b      	ldrb	r3, [r3, #0]
    e0b6:	2bff      	cmp	r3, #255	; 0xff
    e0b8:	d105      	bne.n	e0c6 <send_nav_values+0x8a2>
    e0ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0c2:	2200      	movs	r2, #0
    e0c4:	701a      	strb	r2, [r3, #0]
    e0c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ce:	781b      	ldrb	r3, [r3, #0]
    e0d0:	461a      	mov	r2, r3
    e0d2:	f64c 038c 	movw	r3, #51340	; 0xc88c
    e0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0da:	78d9      	ldrb	r1, [r3, #3]
    e0dc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0e4:	5499      	strb	r1, [r3, r2]
    e0e6:	4b45      	ldr	r3, [pc, #276]	; (e1fc <send_nav_values+0x9d8>)
    e0e8:	781a      	ldrb	r2, [r3, #0]
    e0ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e0ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0f2:	781b      	ldrb	r3, [r3, #0]
    e0f4:	4413      	add	r3, r2
    e0f6:	b2da      	uxtb	r2, r3
    e0f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e0fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e100:	701a      	strb	r2, [r3, #0]
    e102:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e10a:	781a      	ldrb	r2, [r3, #0]
    e10c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e114:	781b      	ldrb	r3, [r3, #0]
    e116:	4413      	add	r3, r2
    e118:	b2da      	uxtb	r2, r3
    e11a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e11e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e122:	701a      	strb	r2, [r3, #0]
    e124:	f24c 5349 	movw	r3, #50505	; 0xc549
    e128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e12c:	781b      	ldrb	r3, [r3, #0]
    e12e:	3301      	adds	r3, #1
    e130:	b2da      	uxtb	r2, r3
    e132:	f24c 5349 	movw	r3, #50505	; 0xc549
    e136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e13a:	701a      	strb	r2, [r3, #0]
    e13c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e144:	781b      	ldrb	r3, [r3, #0]
    e146:	2bff      	cmp	r3, #255	; 0xff
    e148:	d105      	bne.n	e156 <send_nav_values+0x932>
    e14a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e14e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e152:	2200      	movs	r2, #0
    e154:	701a      	strb	r2, [r3, #0]
    e156:	f24c 5349 	movw	r3, #50505	; 0xc549
    e15a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e15e:	781b      	ldrb	r3, [r3, #0]
    e160:	461a      	mov	r2, r3
    e162:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e16a:	7819      	ldrb	r1, [r3, #0]
    e16c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e170:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e174:	5499      	strb	r1, [r3, r2]
    e176:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e17a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e17e:	781a      	ldrb	r2, [r3, #0]
    e180:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e188:	781b      	ldrb	r3, [r3, #0]
    e18a:	4413      	add	r3, r2
    e18c:	b2da      	uxtb	r2, r3
    e18e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e196:	701a      	strb	r2, [r3, #0]
    e198:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e19c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1a0:	781a      	ldrb	r2, [r3, #0]
    e1a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e1a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1aa:	781b      	ldrb	r3, [r3, #0]
    e1ac:	4413      	add	r3, r2
    e1ae:	b2da      	uxtb	r2, r3
    e1b0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e1b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1b8:	701a      	strb	r2, [r3, #0]
    e1ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    e1be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1c2:	781b      	ldrb	r3, [r3, #0]
    e1c4:	3301      	adds	r3, #1
    e1c6:	b2da      	uxtb	r2, r3
    e1c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e1cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1d0:	701a      	strb	r2, [r3, #0]
    e1d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e1d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1da:	781b      	ldrb	r3, [r3, #0]
    e1dc:	2bff      	cmp	r3, #255	; 0xff
    e1de:	d10f      	bne.n	e200 <send_nav_values+0x9dc>
    e1e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    e1e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1e8:	2200      	movs	r2, #0
    e1ea:	701a      	strb	r2, [r3, #0]
    e1ec:	e008      	b.n	e200 <send_nav_values+0x9dc>
    e1ee:	bf00      	nop
    e1f0:	2004cb03 	.word	0x2004cb03
    e1f4:	2004c88d 	.word	0x2004c88d
    e1f8:	2004c88e 	.word	0x2004c88e
    e1fc:	2004c88f 	.word	0x2004c88f
    e200:	f24c 5349 	movw	r3, #50505	; 0xc549
    e204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e208:	781b      	ldrb	r3, [r3, #0]
    e20a:	461a      	mov	r2, r3
    e20c:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e214:	7859      	ldrb	r1, [r3, #1]
    e216:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e21a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e21e:	5499      	strb	r1, [r3, r2]
    e220:	4bd1      	ldr	r3, [pc, #836]	; (e568 <send_nav_values+0xd44>)
    e222:	781a      	ldrb	r2, [r3, #0]
    e224:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e22c:	781b      	ldrb	r3, [r3, #0]
    e22e:	4413      	add	r3, r2
    e230:	b2da      	uxtb	r2, r3
    e232:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e23a:	701a      	strb	r2, [r3, #0]
    e23c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e244:	781a      	ldrb	r2, [r3, #0]
    e246:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e24a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e24e:	781b      	ldrb	r3, [r3, #0]
    e250:	4413      	add	r3, r2
    e252:	b2da      	uxtb	r2, r3
    e254:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e25c:	701a      	strb	r2, [r3, #0]
    e25e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e266:	781b      	ldrb	r3, [r3, #0]
    e268:	3301      	adds	r3, #1
    e26a:	b2da      	uxtb	r2, r3
    e26c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e274:	701a      	strb	r2, [r3, #0]
    e276:	f24c 5349 	movw	r3, #50505	; 0xc549
    e27a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e27e:	781b      	ldrb	r3, [r3, #0]
    e280:	2bff      	cmp	r3, #255	; 0xff
    e282:	d105      	bne.n	e290 <send_nav_values+0xa6c>
    e284:	f24c 5349 	movw	r3, #50505	; 0xc549
    e288:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e28c:	2200      	movs	r2, #0
    e28e:	701a      	strb	r2, [r3, #0]
    e290:	f24c 5349 	movw	r3, #50505	; 0xc549
    e294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e298:	781b      	ldrb	r3, [r3, #0]
    e29a:	461a      	mov	r2, r3
    e29c:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e2a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2a4:	7899      	ldrb	r1, [r3, #2]
    e2a6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e2aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ae:	5499      	strb	r1, [r3, r2]
    e2b0:	4bae      	ldr	r3, [pc, #696]	; (e56c <send_nav_values+0xd48>)
    e2b2:	781a      	ldrb	r2, [r3, #0]
    e2b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e2b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2bc:	781b      	ldrb	r3, [r3, #0]
    e2be:	4413      	add	r3, r2
    e2c0:	b2da      	uxtb	r2, r3
    e2c2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e2c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ca:	701a      	strb	r2, [r3, #0]
    e2cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2d4:	781a      	ldrb	r2, [r3, #0]
    e2d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e2da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2de:	781b      	ldrb	r3, [r3, #0]
    e2e0:	4413      	add	r3, r2
    e2e2:	b2da      	uxtb	r2, r3
    e2e4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ec:	701a      	strb	r2, [r3, #0]
    e2ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    e2f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2f6:	781b      	ldrb	r3, [r3, #0]
    e2f8:	3301      	adds	r3, #1
    e2fa:	b2da      	uxtb	r2, r3
    e2fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    e300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e304:	701a      	strb	r2, [r3, #0]
    e306:	f24c 5349 	movw	r3, #50505	; 0xc549
    e30a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e30e:	781b      	ldrb	r3, [r3, #0]
    e310:	2bff      	cmp	r3, #255	; 0xff
    e312:	d105      	bne.n	e320 <send_nav_values+0xafc>
    e314:	f24c 5349 	movw	r3, #50505	; 0xc549
    e318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e31c:	2200      	movs	r2, #0
    e31e:	701a      	strb	r2, [r3, #0]
    e320:	f24c 5349 	movw	r3, #50505	; 0xc549
    e324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e328:	781b      	ldrb	r3, [r3, #0]
    e32a:	461a      	mov	r2, r3
    e32c:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e334:	78d9      	ldrb	r1, [r3, #3]
    e336:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e33a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e33e:	5499      	strb	r1, [r3, r2]
    e340:	4b8b      	ldr	r3, [pc, #556]	; (e570 <send_nav_values+0xd4c>)
    e342:	781a      	ldrb	r2, [r3, #0]
    e344:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e34c:	781b      	ldrb	r3, [r3, #0]
    e34e:	4413      	add	r3, r2
    e350:	b2da      	uxtb	r2, r3
    e352:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e35a:	701a      	strb	r2, [r3, #0]
    e35c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e364:	781a      	ldrb	r2, [r3, #0]
    e366:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e36a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e36e:	781b      	ldrb	r3, [r3, #0]
    e370:	4413      	add	r3, r2
    e372:	b2da      	uxtb	r2, r3
    e374:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e37c:	701a      	strb	r2, [r3, #0]
    e37e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e386:	781b      	ldrb	r3, [r3, #0]
    e388:	3301      	adds	r3, #1
    e38a:	b2da      	uxtb	r2, r3
    e38c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e394:	701a      	strb	r2, [r3, #0]
    e396:	f24c 5349 	movw	r3, #50505	; 0xc549
    e39a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e39e:	781b      	ldrb	r3, [r3, #0]
    e3a0:	2bff      	cmp	r3, #255	; 0xff
    e3a2:	d105      	bne.n	e3b0 <send_nav_values+0xb8c>
    e3a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ac:	2200      	movs	r2, #0
    e3ae:	701a      	strb	r2, [r3, #0]
    e3b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3b8:	781b      	ldrb	r3, [r3, #0]
    e3ba:	461a      	mov	r2, r3
    e3bc:	f240 5358 	movw	r3, #1368	; 0x558
    e3c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3c4:	7819      	ldrb	r1, [r3, #0]
    e3c6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e3ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ce:	5499      	strb	r1, [r3, r2]
    e3d0:	f240 5358 	movw	r3, #1368	; 0x558
    e3d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3d8:	781a      	ldrb	r2, [r3, #0]
    e3da:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e3de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3e2:	781b      	ldrb	r3, [r3, #0]
    e3e4:	4413      	add	r3, r2
    e3e6:	b2da      	uxtb	r2, r3
    e3e8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e3ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3f0:	701a      	strb	r2, [r3, #0]
    e3f2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e3f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3fa:	781a      	ldrb	r2, [r3, #0]
    e3fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e404:	781b      	ldrb	r3, [r3, #0]
    e406:	4413      	add	r3, r2
    e408:	b2da      	uxtb	r2, r3
    e40a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e40e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e412:	701a      	strb	r2, [r3, #0]
    e414:	f24c 5349 	movw	r3, #50505	; 0xc549
    e418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e41c:	781b      	ldrb	r3, [r3, #0]
    e41e:	3301      	adds	r3, #1
    e420:	b2da      	uxtb	r2, r3
    e422:	f24c 5349 	movw	r3, #50505	; 0xc549
    e426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e42a:	701a      	strb	r2, [r3, #0]
    e42c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e434:	781b      	ldrb	r3, [r3, #0]
    e436:	2bff      	cmp	r3, #255	; 0xff
    e438:	d105      	bne.n	e446 <send_nav_values+0xc22>
    e43a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e43e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e442:	2200      	movs	r2, #0
    e444:	701a      	strb	r2, [r3, #0]
    e446:	f24c 5349 	movw	r3, #50505	; 0xc549
    e44a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e44e:	781b      	ldrb	r3, [r3, #0]
    e450:	461a      	mov	r2, r3
    e452:	f240 5358 	movw	r3, #1368	; 0x558
    e456:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e45a:	7859      	ldrb	r1, [r3, #1]
    e45c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e464:	5499      	strb	r1, [r3, r2]
    e466:	4b43      	ldr	r3, [pc, #268]	; (e574 <send_nav_values+0xd50>)
    e468:	781a      	ldrb	r2, [r3, #0]
    e46a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e46e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e472:	781b      	ldrb	r3, [r3, #0]
    e474:	4413      	add	r3, r2
    e476:	b2da      	uxtb	r2, r3
    e478:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e47c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e480:	701a      	strb	r2, [r3, #0]
    e482:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e48a:	781a      	ldrb	r2, [r3, #0]
    e48c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e494:	781b      	ldrb	r3, [r3, #0]
    e496:	4413      	add	r3, r2
    e498:	b2da      	uxtb	r2, r3
    e49a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4a2:	701a      	strb	r2, [r3, #0]
    e4a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ac:	781b      	ldrb	r3, [r3, #0]
    e4ae:	3301      	adds	r3, #1
    e4b0:	b2da      	uxtb	r2, r3
    e4b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ba:	701a      	strb	r2, [r3, #0]
    e4bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4c4:	781b      	ldrb	r3, [r3, #0]
    e4c6:	2bff      	cmp	r3, #255	; 0xff
    e4c8:	d105      	bne.n	e4d6 <send_nav_values+0xcb2>
    e4ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4d2:	2200      	movs	r2, #0
    e4d4:	701a      	strb	r2, [r3, #0]
    e4d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4de:	781b      	ldrb	r3, [r3, #0]
    e4e0:	461a      	mov	r2, r3
    e4e2:	f240 5358 	movw	r3, #1368	; 0x558
    e4e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4ea:	7899      	ldrb	r1, [r3, #2]
    e4ec:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e4f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4f4:	5499      	strb	r1, [r3, r2]
    e4f6:	4b20      	ldr	r3, [pc, #128]	; (e578 <send_nav_values+0xd54>)
    e4f8:	781a      	ldrb	r2, [r3, #0]
    e4fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e4fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e502:	781b      	ldrb	r3, [r3, #0]
    e504:	4413      	add	r3, r2
    e506:	b2da      	uxtb	r2, r3
    e508:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e50c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e510:	701a      	strb	r2, [r3, #0]
    e512:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e51a:	781a      	ldrb	r2, [r3, #0]
    e51c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e524:	781b      	ldrb	r3, [r3, #0]
    e526:	4413      	add	r3, r2
    e528:	b2da      	uxtb	r2, r3
    e52a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e52e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e532:	701a      	strb	r2, [r3, #0]
    e534:	f24c 5349 	movw	r3, #50505	; 0xc549
    e538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e53c:	781b      	ldrb	r3, [r3, #0]
    e53e:	3301      	adds	r3, #1
    e540:	b2da      	uxtb	r2, r3
    e542:	f24c 5349 	movw	r3, #50505	; 0xc549
    e546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e54a:	701a      	strb	r2, [r3, #0]
    e54c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e554:	781b      	ldrb	r3, [r3, #0]
    e556:	2bff      	cmp	r3, #255	; 0xff
    e558:	d110      	bne.n	e57c <send_nav_values+0xd58>
    e55a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e562:	2200      	movs	r2, #0
    e564:	701a      	strb	r2, [r3, #0]
    e566:	e009      	b.n	e57c <send_nav_values+0xd58>
    e568:	2004c8d5 	.word	0x2004c8d5
    e56c:	2004c8d6 	.word	0x2004c8d6
    e570:	2004c8d7 	.word	0x2004c8d7
    e574:	20000559 	.word	0x20000559
    e578:	2000055a 	.word	0x2000055a
    e57c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e584:	781b      	ldrb	r3, [r3, #0]
    e586:	461a      	mov	r2, r3
    e588:	f240 5358 	movw	r3, #1368	; 0x558
    e58c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e590:	78d9      	ldrb	r1, [r3, #3]
    e592:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e59a:	5499      	strb	r1, [r3, r2]
    e59c:	4bc2      	ldr	r3, [pc, #776]	; (e8a8 <send_nav_values+0x1084>)
    e59e:	781a      	ldrb	r2, [r3, #0]
    e5a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e5a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5a8:	781b      	ldrb	r3, [r3, #0]
    e5aa:	4413      	add	r3, r2
    e5ac:	b2da      	uxtb	r2, r3
    e5ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e5b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5b6:	701a      	strb	r2, [r3, #0]
    e5b8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e5bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5c0:	781a      	ldrb	r2, [r3, #0]
    e5c2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e5c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5ca:	781b      	ldrb	r3, [r3, #0]
    e5cc:	4413      	add	r3, r2
    e5ce:	b2da      	uxtb	r2, r3
    e5d0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e5d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5d8:	701a      	strb	r2, [r3, #0]
    e5da:	f24c 5349 	movw	r3, #50505	; 0xc549
    e5de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5e2:	781b      	ldrb	r3, [r3, #0]
    e5e4:	3301      	adds	r3, #1
    e5e6:	b2da      	uxtb	r2, r3
    e5e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e5ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5f0:	701a      	strb	r2, [r3, #0]
    e5f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e5f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5fa:	781b      	ldrb	r3, [r3, #0]
    e5fc:	2bff      	cmp	r3, #255	; 0xff
    e5fe:	d105      	bne.n	e60c <send_nav_values+0xde8>
    e600:	f24c 5349 	movw	r3, #50505	; 0xc549
    e604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e608:	2200      	movs	r2, #0
    e60a:	701a      	strb	r2, [r3, #0]
    e60c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e614:	781b      	ldrb	r3, [r3, #0]
    e616:	461a      	mov	r2, r3
    e618:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e61c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e620:	7819      	ldrb	r1, [r3, #0]
    e622:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e62a:	5499      	strb	r1, [r3, r2]
    e62c:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e630:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e634:	781a      	ldrb	r2, [r3, #0]
    e636:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e63a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e63e:	781b      	ldrb	r3, [r3, #0]
    e640:	4413      	add	r3, r2
    e642:	b2da      	uxtb	r2, r3
    e644:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e64c:	701a      	strb	r2, [r3, #0]
    e64e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e656:	781a      	ldrb	r2, [r3, #0]
    e658:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e65c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e660:	781b      	ldrb	r3, [r3, #0]
    e662:	4413      	add	r3, r2
    e664:	b2da      	uxtb	r2, r3
    e666:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e66a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e66e:	701a      	strb	r2, [r3, #0]
    e670:	f24c 5349 	movw	r3, #50505	; 0xc549
    e674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e678:	781b      	ldrb	r3, [r3, #0]
    e67a:	3301      	adds	r3, #1
    e67c:	b2da      	uxtb	r2, r3
    e67e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e686:	701a      	strb	r2, [r3, #0]
    e688:	f24c 5349 	movw	r3, #50505	; 0xc549
    e68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e690:	781b      	ldrb	r3, [r3, #0]
    e692:	2bff      	cmp	r3, #255	; 0xff
    e694:	d105      	bne.n	e6a2 <send_nav_values+0xe7e>
    e696:	f24c 5349 	movw	r3, #50505	; 0xc549
    e69a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e69e:	2200      	movs	r2, #0
    e6a0:	701a      	strb	r2, [r3, #0]
    e6a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6aa:	781b      	ldrb	r3, [r3, #0]
    e6ac:	461a      	mov	r2, r3
    e6ae:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e6b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6b6:	7859      	ldrb	r1, [r3, #1]
    e6b8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e6bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6c0:	5499      	strb	r1, [r3, r2]
    e6c2:	4b7a      	ldr	r3, [pc, #488]	; (e8ac <send_nav_values+0x1088>)
    e6c4:	781a      	ldrb	r2, [r3, #0]
    e6c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e6ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6ce:	781b      	ldrb	r3, [r3, #0]
    e6d0:	4413      	add	r3, r2
    e6d2:	b2da      	uxtb	r2, r3
    e6d4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e6d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6dc:	701a      	strb	r2, [r3, #0]
    e6de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e6e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6e6:	781a      	ldrb	r2, [r3, #0]
    e6e8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6f0:	781b      	ldrb	r3, [r3, #0]
    e6f2:	4413      	add	r3, r2
    e6f4:	b2da      	uxtb	r2, r3
    e6f6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e6fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6fe:	701a      	strb	r2, [r3, #0]
    e700:	f24c 5349 	movw	r3, #50505	; 0xc549
    e704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e708:	781b      	ldrb	r3, [r3, #0]
    e70a:	3301      	adds	r3, #1
    e70c:	b2da      	uxtb	r2, r3
    e70e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e716:	701a      	strb	r2, [r3, #0]
    e718:	f24c 5349 	movw	r3, #50505	; 0xc549
    e71c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e720:	781b      	ldrb	r3, [r3, #0]
    e722:	2bff      	cmp	r3, #255	; 0xff
    e724:	d105      	bne.n	e732 <send_nav_values+0xf0e>
    e726:	f24c 5349 	movw	r3, #50505	; 0xc549
    e72a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e72e:	2200      	movs	r2, #0
    e730:	701a      	strb	r2, [r3, #0]
    e732:	f24c 5349 	movw	r3, #50505	; 0xc549
    e736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e73a:	781b      	ldrb	r3, [r3, #0]
    e73c:	461a      	mov	r2, r3
    e73e:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e746:	7899      	ldrb	r1, [r3, #2]
    e748:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e74c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e750:	5499      	strb	r1, [r3, r2]
    e752:	4b57      	ldr	r3, [pc, #348]	; (e8b0 <send_nav_values+0x108c>)
    e754:	781a      	ldrb	r2, [r3, #0]
    e756:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e75a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e75e:	781b      	ldrb	r3, [r3, #0]
    e760:	4413      	add	r3, r2
    e762:	b2da      	uxtb	r2, r3
    e764:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e76c:	701a      	strb	r2, [r3, #0]
    e76e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e776:	781a      	ldrb	r2, [r3, #0]
    e778:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e77c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e780:	781b      	ldrb	r3, [r3, #0]
    e782:	4413      	add	r3, r2
    e784:	b2da      	uxtb	r2, r3
    e786:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e78a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e78e:	701a      	strb	r2, [r3, #0]
    e790:	f24c 5349 	movw	r3, #50505	; 0xc549
    e794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e798:	781b      	ldrb	r3, [r3, #0]
    e79a:	3301      	adds	r3, #1
    e79c:	b2da      	uxtb	r2, r3
    e79e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7a6:	701a      	strb	r2, [r3, #0]
    e7a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7b0:	781b      	ldrb	r3, [r3, #0]
    e7b2:	2bff      	cmp	r3, #255	; 0xff
    e7b4:	d105      	bne.n	e7c2 <send_nav_values+0xf9e>
    e7b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7be:	2200      	movs	r2, #0
    e7c0:	701a      	strb	r2, [r3, #0]
    e7c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ca:	781b      	ldrb	r3, [r3, #0]
    e7cc:	461a      	mov	r2, r3
    e7ce:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e7d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7d6:	78d9      	ldrb	r1, [r3, #3]
    e7d8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e7dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7e0:	5499      	strb	r1, [r3, r2]
    e7e2:	4b34      	ldr	r3, [pc, #208]	; (e8b4 <send_nav_values+0x1090>)
    e7e4:	781a      	ldrb	r2, [r3, #0]
    e7e6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e7ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ee:	781b      	ldrb	r3, [r3, #0]
    e7f0:	4413      	add	r3, r2
    e7f2:	b2da      	uxtb	r2, r3
    e7f4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e7f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7fc:	701a      	strb	r2, [r3, #0]
    e7fe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e806:	781a      	ldrb	r2, [r3, #0]
    e808:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e80c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e810:	781b      	ldrb	r3, [r3, #0]
    e812:	4413      	add	r3, r2
    e814:	b2da      	uxtb	r2, r3
    e816:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e81a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e81e:	701a      	strb	r2, [r3, #0]
    e820:	f24c 5349 	movw	r3, #50505	; 0xc549
    e824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e828:	781b      	ldrb	r3, [r3, #0]
    e82a:	3301      	adds	r3, #1
    e82c:	b2da      	uxtb	r2, r3
    e82e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e836:	701a      	strb	r2, [r3, #0]
    e838:	f24c 5349 	movw	r3, #50505	; 0xc549
    e83c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e840:	781b      	ldrb	r3, [r3, #0]
    e842:	2bff      	cmp	r3, #255	; 0xff
    e844:	d105      	bne.n	e852 <send_nav_values+0x102e>
    e846:	f24c 5349 	movw	r3, #50505	; 0xc549
    e84a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e84e:	2200      	movs	r2, #0
    e850:	701a      	strb	r2, [r3, #0]
    e852:	f24c 5349 	movw	r3, #50505	; 0xc549
    e856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e85a:	781b      	ldrb	r3, [r3, #0]
    e85c:	461a      	mov	r2, r3
    e85e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e866:	7819      	ldrb	r1, [r3, #0]
    e868:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e86c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e870:	5499      	strb	r1, [r3, r2]
    e872:	f24c 5349 	movw	r3, #50505	; 0xc549
    e876:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e87a:	781b      	ldrb	r3, [r3, #0]
    e87c:	3301      	adds	r3, #1
    e87e:	b2da      	uxtb	r2, r3
    e880:	f24c 5349 	movw	r3, #50505	; 0xc549
    e884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e888:	701a      	strb	r2, [r3, #0]
    e88a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e88e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e892:	781b      	ldrb	r3, [r3, #0]
    e894:	2bff      	cmp	r3, #255	; 0xff
    e896:	d10f      	bne.n	e8b8 <send_nav_values+0x1094>
    e898:	f24c 5349 	movw	r3, #50505	; 0xc549
    e89c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8a0:	2200      	movs	r2, #0
    e8a2:	701a      	strb	r2, [r3, #0]
    e8a4:	e008      	b.n	e8b8 <send_nav_values+0x1094>
    e8a6:	bf00      	nop
    e8a8:	2000055b 	.word	0x2000055b
    e8ac:	2004c8d9 	.word	0x2004c8d9
    e8b0:	2004c8da 	.word	0x2004c8da
    e8b4:	2004c8db 	.word	0x2004c8db
    e8b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e8bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8c0:	781b      	ldrb	r3, [r3, #0]
    e8c2:	461a      	mov	r2, r3
    e8c4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e8c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8cc:	7819      	ldrb	r1, [r3, #0]
    e8ce:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e8d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8d6:	5499      	strb	r1, [r3, r2]
    e8d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e8dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8e0:	781b      	ldrb	r3, [r3, #0]
    e8e2:	3301      	adds	r3, #1
    e8e4:	b2da      	uxtb	r2, r3
    e8e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e8ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8ee:	701a      	strb	r2, [r3, #0]
    e8f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    e8f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8f8:	781b      	ldrb	r3, [r3, #0]
    e8fa:	2bff      	cmp	r3, #255	; 0xff
    e8fc:	d105      	bne.n	e90a <send_nav_values+0x10e6>
    e8fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    e902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e906:	2200      	movs	r2, #0
    e908:	701a      	strb	r2, [r3, #0]
    e90a:	f242 0339 	movw	r3, #8249	; 0x2039
    e90e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e912:	781b      	ldrb	r3, [r3, #0]
    e914:	b2db      	uxtb	r3, r3
    e916:	f003 0310 	and.w	r3, r3, #16
    e91a:	2b00      	cmp	r3, #0
    e91c:	d15a      	bne.n	e9d4 <send_nav_values+0x11b0>
    e91e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e926:	781b      	ldrb	r3, [r3, #0]
    e928:	b2db      	uxtb	r3, r3
    e92a:	461a      	mov	r2, r3
    e92c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e934:	5c9a      	ldrb	r2, [r3, r2]
    e936:	f24c 634b 	movw	r3, #50763	; 0xc64b
    e93a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e93e:	701a      	strb	r2, [r3, #0]
    e940:	f24c 634c 	movw	r3, #50764	; 0xc64c
    e944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e948:	2200      	movs	r2, #0
    e94a:	701a      	strb	r2, [r3, #0]
    e94c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e954:	781b      	ldrb	r3, [r3, #0]
    e956:	b2db      	uxtb	r3, r3
    e958:	3301      	adds	r3, #1
    e95a:	b2da      	uxtb	r2, r3
    e95c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e964:	701a      	strb	r2, [r3, #0]
    e966:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e96e:	781b      	ldrb	r3, [r3, #0]
    e970:	b2db      	uxtb	r3, r3
    e972:	2bff      	cmp	r3, #255	; 0xff
    e974:	d105      	bne.n	e982 <send_nav_values+0x115e>
    e976:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e97a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e97e:	2200      	movs	r2, #0
    e980:	701a      	strb	r2, [r3, #0]
    e982:	f242 0338 	movw	r3, #8248	; 0x2038
    e986:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e98a:	f242 0238 	movw	r2, #8248	; 0x2038
    e98e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e992:	7812      	ldrb	r2, [r2, #0]
    e994:	b2d2      	uxtb	r2, r2
    e996:	f042 0201 	orr.w	r2, r2, #1
    e99a:	b2d2      	uxtb	r2, r2
    e99c:	701a      	strb	r2, [r3, #0]
    e99e:	f242 0339 	movw	r3, #8249	; 0x2039
    e9a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9a6:	f242 0239 	movw	r2, #8249	; 0x2039
    e9aa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e9ae:	7812      	ldrb	r2, [r2, #0]
    e9b0:	b2d2      	uxtb	r2, r2
    e9b2:	f042 0210 	orr.w	r2, r2, #16
    e9b6:	b2d2      	uxtb	r2, r2
    e9b8:	701a      	strb	r2, [r3, #0]
    e9ba:	e00b      	b.n	e9d4 <send_nav_values+0x11b0>
    e9bc:	f24c 5348 	movw	r3, #50504	; 0xc548
    e9c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9c4:	781b      	ldrb	r3, [r3, #0]
    e9c6:	3301      	adds	r3, #1
    e9c8:	b2da      	uxtb	r2, r3
    e9ca:	f24c 5348 	movw	r3, #50504	; 0xc548
    e9ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9d2:	701a      	strb	r2, [r3, #0]
}
    e9d4:	46bd      	mov	sp, r7
    e9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    e9da:	4770      	bx	lr

0000e9dc <course_run>:

void course_run(void){
    e9dc:	b580      	push	{r7, lr}
    e9de:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e9e0:	f24c 532c 	movw	r3, #50476	; 0xc52c
    e9e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9e8:	781b      	ldrb	r3, [r3, #0]
    e9ea:	2b02      	cmp	r3, #2
    e9ec:	d006      	beq.n	e9fc <course_run+0x20>
    e9ee:	f24c 532c 	movw	r3, #50476	; 0xc52c
    e9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9f6:	781b      	ldrb	r3, [r3, #0]
    e9f8:	2b03      	cmp	r3, #3
    e9fa:	d112      	bne.n	ea22 <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    e9fc:	f24c 532e 	movw	r3, #50478	; 0xc52e
    ea00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea04:	781b      	ldrb	r3, [r3, #0]
    ea06:	2b02      	cmp	r3, #2
    ea08:	d901      	bls.n	ea0e <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    ea0a:	f003 faf1 	bl	11ff0 <course_pid_run>
    desired_roll = nav_desired_roll;
    ea0e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    ea12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea16:	681a      	ldr	r2, [r3, #0]
    ea18:	f64c 0374 	movw	r3, #51316	; 0xc874
    ea1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea20:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    ea22:	bd80      	pop	{r7, pc}

0000ea24 <altitude_control_task>:

void altitude_control_task(void)
{
    ea24:	b580      	push	{r7, lr}
    ea26:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    ea28:	f24c 532c 	movw	r3, #50476	; 0xc52c
    ea2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea30:	781b      	ldrb	r3, [r3, #0]
    ea32:	2b02      	cmp	r3, #2
    ea34:	d006      	beq.n	ea44 <altitude_control_task+0x20>
    ea36:	f24c 532c 	movw	r3, #50476	; 0xc52c
    ea3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea3e:	781b      	ldrb	r3, [r3, #0]
    ea40:	2b03      	cmp	r3, #3
    ea42:	d108      	bne.n	ea56 <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    ea44:	f24c 532d 	movw	r3, #50477	; 0xc52d
    ea48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea4c:	781b      	ldrb	r3, [r3, #0]
    ea4e:	2b03      	cmp	r3, #3
    ea50:	d101      	bne.n	ea56 <altitude_control_task+0x32>
      			altitude_pid_run();
    ea52:	f003 fd55 	bl	12500 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    ea56:	bd80      	pop	{r7, pc}

0000ea58 <climb_control_task>:
void climb_control_task(void)
{
    ea58:	b580      	push	{r7, lr}
    ea5a:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    ea5c:	f24c 532c 	movw	r3, #50476	; 0xc52c
    ea60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea64:	781b      	ldrb	r3, [r3, #0]
    ea66:	2b02      	cmp	r3, #2
    ea68:	d006      	beq.n	ea78 <climb_control_task+0x20>
    ea6a:	f24c 532c 	movw	r3, #50476	; 0xc52c
    ea6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea72:	781b      	ldrb	r3, [r3, #0]
    ea74:	2b03      	cmp	r3, #3
    ea76:	d135      	bne.n	eae4 <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    ea78:	f24c 532d 	movw	r3, #50477	; 0xc52d
    ea7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea80:	781b      	ldrb	r3, [r3, #0]
    ea82:	2b01      	cmp	r3, #1
    ea84:	d901      	bls.n	ea8a <climb_control_task+0x32>
        	climb_pid_run();
    ea86:	f003 fb6b 	bl	12160 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    ea8a:	f24c 532d 	movw	r3, #50477	; 0xc52d
    ea8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea92:	781b      	ldrb	r3, [r3, #0]
    ea94:	2b01      	cmp	r3, #1
    ea96:	d10a      	bne.n	eaae <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    ea98:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
    ea9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaa0:	881b      	ldrh	r3, [r3, #0]
    eaa2:	b29a      	uxth	r2, r3
    eaa4:	f64c 037c 	movw	r3, #51324	; 0xc87c
    eaa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaac:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    eaae:	f24c 5335 	movw	r3, #50485	; 0xc535
    eab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eab6:	781b      	ldrb	r3, [r3, #0]
    eab8:	2b00      	cmp	r3, #0
    eaba:	d10d      	bne.n	ead8 <climb_control_task+0x80>
    eabc:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    eac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eac4:	881b      	ldrh	r3, [r3, #0]
    eac6:	2b00      	cmp	r3, #0
    eac8:	d10c      	bne.n	eae4 <climb_control_task+0x8c>
    eaca:	f24c 5340 	movw	r3, #50496	; 0xc540
    eace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ead2:	781b      	ldrb	r3, [r3, #0]
    ead4:	2b00      	cmp	r3, #0
    ead6:	d105      	bne.n	eae4 <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    ead8:	f64c 037c 	movw	r3, #51324	; 0xc87c
    eadc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eae0:	2200      	movs	r2, #0
    eae2:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    eae4:	bd80      	pop	{r7, pc}
    eae6:	bf00      	nop

0000eae8 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    eae8:	b580      	push	{r7, lr}
    eaea:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    eaec:	f003 f926 	bl	11d3c <ir_update>
    estimator_update_state_infrared();
    eaf0:	f006 fbac 	bl	1524c <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    eaf4:	f003 f990 	bl	11e18 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    eaf8:	f64c 037c 	movw	r3, #51324	; 0xc87c
    eafc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb00:	881a      	ldrh	r2, [r3, #0]
    eb02:	f24c 6368 	movw	r3, #50792	; 0xc668
    eb06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb0a:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    eb0c:	f64c 037e 	movw	r3, #51326	; 0xc87e
    eb10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb14:	881a      	ldrh	r2, [r3, #0]
    eb16:	f24c 6368 	movw	r3, #50792	; 0xc668
    eb1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb1e:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    eb20:	f64c 0380 	movw	r3, #51328	; 0xc880
    eb24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb28:	881a      	ldrh	r2, [r3, #0]
    eb2a:	f24c 6368 	movw	r3, #50792	; 0xc668
    eb2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb32:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    eb34:	f64c 3308 	movw	r3, #51976	; 0xcb08
    eb38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb3c:	681b      	ldr	r3, [r3, #0]
    eb3e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    eb42:	4618      	mov	r0, r3
    eb44:	f009 f83e 	bl	17bc4 <__aeabi_f2d>
    eb48:	4602      	mov	r2, r0
    eb4a:	460b      	mov	r3, r1
    eb4c:	4610      	mov	r0, r2
    eb4e:	4619      	mov	r1, r3
    eb50:	f04f 0200 	mov.w	r2, #0
    eb54:	f04f 0300 	mov.w	r3, #0
    eb58:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    eb5c:	f009 f886 	bl	17c6c <__aeabi_dmul>
    eb60:	4602      	mov	r2, r0
    eb62:	460b      	mov	r3, r1
    eb64:	4610      	mov	r0, r2
    eb66:	4619      	mov	r1, r3
    eb68:	f04f 0200 	mov.w	r2, #0
    eb6c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    eb70:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    eb74:	f009 faec 	bl	18150 <__aeabi_dcmplt>
    eb78:	4603      	mov	r3, r0
    eb7a:	2b00      	cmp	r3, #0
    eb7c:	d002      	beq.n	eb84 <stabilisation_task+0x9c>
    eb7e:	f64d 2280 	movw	r2, #55936	; 0xda80
    eb82:	e046      	b.n	ec12 <stabilisation_task+0x12a>
    eb84:	f64c 3308 	movw	r3, #51976	; 0xcb08
    eb88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb8c:	681b      	ldr	r3, [r3, #0]
    eb8e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    eb92:	4618      	mov	r0, r3
    eb94:	f009 f816 	bl	17bc4 <__aeabi_f2d>
    eb98:	4602      	mov	r2, r0
    eb9a:	460b      	mov	r3, r1
    eb9c:	4610      	mov	r0, r2
    eb9e:	4619      	mov	r1, r3
    eba0:	f04f 0200 	mov.w	r2, #0
    eba4:	f04f 0300 	mov.w	r3, #0
    eba8:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ebac:	f009 f85e 	bl	17c6c <__aeabi_dmul>
    ebb0:	4602      	mov	r2, r0
    ebb2:	460b      	mov	r3, r1
    ebb4:	4610      	mov	r0, r2
    ebb6:	4619      	mov	r1, r3
    ebb8:	f04f 0200 	mov.w	r2, #0
    ebbc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    ebc0:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    ebc4:	f009 fae2 	bl	1818c <__aeabi_dcmpgt>
    ebc8:	4603      	mov	r3, r0
    ebca:	2b00      	cmp	r3, #0
    ebcc:	d002      	beq.n	ebd4 <stabilisation_task+0xec>
    ebce:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    ebd2:	e01d      	b.n	ec10 <stabilisation_task+0x128>
    ebd4:	f64c 3308 	movw	r3, #51976	; 0xcb08
    ebd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebdc:	681b      	ldr	r3, [r3, #0]
    ebde:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ebe2:	4618      	mov	r0, r3
    ebe4:	f008 ffee 	bl	17bc4 <__aeabi_f2d>
    ebe8:	4602      	mov	r2, r0
    ebea:	460b      	mov	r3, r1
    ebec:	4610      	mov	r0, r2
    ebee:	4619      	mov	r1, r3
    ebf0:	f04f 0200 	mov.w	r2, #0
    ebf4:	f04f 0300 	mov.w	r3, #0
    ebf8:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ebfc:	f009 f836 	bl	17c6c <__aeabi_dmul>
    ec00:	4602      	mov	r2, r0
    ec02:	460b      	mov	r3, r1
    ec04:	4610      	mov	r0, r2
    ec06:	4619      	mov	r1, r3
    ec08:	f009 faca 	bl	181a0 <__aeabi_d2iz>
    ec0c:	4603      	mov	r3, r0
    ec0e:	b29b      	uxth	r3, r3
    ec10:	b29a      	uxth	r2, r3
    ec12:	f24c 6368 	movw	r3, #50792	; 0xc668
    ec16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec1a:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    ec1c:	bd80      	pop	{r7, pc}
    ec1e:	bf00      	nop

0000ec20 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    ec20:	b580      	push	{r7, lr}
    ec22:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    ec24:	f24c 63dd 	movw	r3, #50909	; 0xc6dd
    ec28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec2c:	2200      	movs	r2, #0
    ec2e:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    ec30:	f24c 63de 	movw	r3, #50910	; 0xc6de
    ec34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec38:	781b      	ldrb	r3, [r3, #0]
    ec3a:	2b00      	cmp	r3, #0
    ec3c:	f001 81af 	beq.w	ff9e <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    ec40:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec48:	781a      	ldrb	r2, [r3, #0]
    ec4a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ec4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec52:	781b      	ldrb	r3, [r3, #0]
    ec54:	b2db      	uxtb	r3, r3
    ec56:	429a      	cmp	r2, r3
    ec58:	d313      	bcc.n	ec82 <send_gps_pos+0x62>
    ec5a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ec5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec62:	781b      	ldrb	r3, [r3, #0]
    ec64:	b2db      	uxtb	r3, r3
    ec66:	461a      	mov	r2, r3
    ec68:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec70:	781b      	ldrb	r3, [r3, #0]
    ec72:	1ad3      	subs	r3, r2, r3
    ec74:	33ff      	adds	r3, #255	; 0xff
    ec76:	2b21      	cmp	r3, #33	; 0x21
    ec78:	bfd4      	ite	le
    ec7a:	2300      	movle	r3, #0
    ec7c:	2301      	movgt	r3, #1
    ec7e:	b2db      	uxtb	r3, r3
    ec80:	e011      	b.n	eca6 <send_gps_pos+0x86>
    ec82:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ec86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec8a:	781b      	ldrb	r3, [r3, #0]
    ec8c:	b2db      	uxtb	r3, r3
    ec8e:	461a      	mov	r2, r3
    ec90:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec98:	781b      	ldrb	r3, [r3, #0]
    ec9a:	1ad3      	subs	r3, r2, r3
    ec9c:	2b21      	cmp	r3, #33	; 0x21
    ec9e:	bfd4      	ite	le
    eca0:	2300      	movle	r3, #0
    eca2:	2301      	movgt	r3, #1
    eca4:	b2db      	uxtb	r3, r3
    eca6:	2b00      	cmp	r3, #0
    eca8:	f001 816b 	beq.w	ff82 <send_gps_pos+0x1362>
    ecac:	f24c 5349 	movw	r3, #50505	; 0xc549
    ecb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecb4:	781b      	ldrb	r3, [r3, #0]
    ecb6:	461a      	mov	r2, r3
    ecb8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ecbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecc0:	2105      	movs	r1, #5
    ecc2:	5499      	strb	r1, [r3, r2]
    ecc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    ecc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eccc:	781b      	ldrb	r3, [r3, #0]
    ecce:	3301      	adds	r3, #1
    ecd0:	b2da      	uxtb	r2, r3
    ecd2:	f24c 5349 	movw	r3, #50505	; 0xc549
    ecd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecda:	701a      	strb	r2, [r3, #0]
    ecdc:	f24c 5349 	movw	r3, #50505	; 0xc549
    ece0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ece4:	781b      	ldrb	r3, [r3, #0]
    ece6:	2bff      	cmp	r3, #255	; 0xff
    ece8:	d105      	bne.n	ecf6 <send_gps_pos+0xd6>
    ecea:	f24c 5349 	movw	r3, #50505	; 0xc549
    ecee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecf2:	2200      	movs	r2, #0
    ecf4:	701a      	strb	r2, [r3, #0]
    ecf6:	f24c 5349 	movw	r3, #50505	; 0xc549
    ecfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecfe:	781b      	ldrb	r3, [r3, #0]
    ed00:	461a      	mov	r2, r3
    ed02:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ed06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed0a:	2108      	movs	r1, #8
    ed0c:	5499      	strb	r1, [r3, r2]
    ed0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed16:	781b      	ldrb	r3, [r3, #0]
    ed18:	3301      	adds	r3, #1
    ed1a:	b2da      	uxtb	r2, r3
    ed1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed24:	701a      	strb	r2, [r3, #0]
    ed26:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed2e:	781b      	ldrb	r3, [r3, #0]
    ed30:	2bff      	cmp	r3, #255	; 0xff
    ed32:	d105      	bne.n	ed40 <send_gps_pos+0x120>
    ed34:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed3c:	2200      	movs	r2, #0
    ed3e:	701a      	strb	r2, [r3, #0]
    ed40:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ed44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed48:	2208      	movs	r2, #8
    ed4a:	701a      	strb	r2, [r3, #0]
    ed4c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ed50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed54:	2208      	movs	r2, #8
    ed56:	701a      	strb	r2, [r3, #0]
    ed58:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed60:	781b      	ldrb	r3, [r3, #0]
    ed62:	461a      	mov	r2, r3
    ed64:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
    ed68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed6c:	7819      	ldrb	r1, [r3, #0]
    ed6e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ed72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed76:	5499      	strb	r1, [r3, r2]
    ed78:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ed7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed80:	781a      	ldrb	r2, [r3, #0]
    ed82:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
    ed86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed8a:	781b      	ldrb	r3, [r3, #0]
    ed8c:	4413      	add	r3, r2
    ed8e:	b2da      	uxtb	r2, r3
    ed90:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ed94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed98:	701a      	strb	r2, [r3, #0]
    ed9a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ed9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eda2:	781a      	ldrb	r2, [r3, #0]
    eda4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    eda8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edac:	781b      	ldrb	r3, [r3, #0]
    edae:	4413      	add	r3, r2
    edb0:	b2da      	uxtb	r2, r3
    edb2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    edb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edba:	701a      	strb	r2, [r3, #0]
    edbc:	f24c 5349 	movw	r3, #50505	; 0xc549
    edc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edc4:	781b      	ldrb	r3, [r3, #0]
    edc6:	3301      	adds	r3, #1
    edc8:	b2da      	uxtb	r2, r3
    edca:	f24c 5349 	movw	r3, #50505	; 0xc549
    edce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edd2:	701a      	strb	r2, [r3, #0]
    edd4:	f24c 5349 	movw	r3, #50505	; 0xc549
    edd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eddc:	781b      	ldrb	r3, [r3, #0]
    edde:	2bff      	cmp	r3, #255	; 0xff
    ede0:	d105      	bne.n	edee <send_gps_pos+0x1ce>
    ede2:	f24c 5349 	movw	r3, #50505	; 0xc549
    ede6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edea:	2200      	movs	r2, #0
    edec:	701a      	strb	r2, [r3, #0]
    edee:	f24c 5349 	movw	r3, #50505	; 0xc549
    edf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edf6:	781b      	ldrb	r3, [r3, #0]
    edf8:	461a      	mov	r2, r3
    edfa:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    edfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee02:	7819      	ldrb	r1, [r3, #0]
    ee04:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ee08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee0c:	5499      	strb	r1, [r3, r2]
    ee0e:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    ee12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee16:	781a      	ldrb	r2, [r3, #0]
    ee18:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee20:	781b      	ldrb	r3, [r3, #0]
    ee22:	4413      	add	r3, r2
    ee24:	b2da      	uxtb	r2, r3
    ee26:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee2e:	701a      	strb	r2, [r3, #0]
    ee30:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ee34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee38:	781a      	ldrb	r2, [r3, #0]
    ee3a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee42:	781b      	ldrb	r3, [r3, #0]
    ee44:	4413      	add	r3, r2
    ee46:	b2da      	uxtb	r2, r3
    ee48:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ee4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee50:	701a      	strb	r2, [r3, #0]
    ee52:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee5a:	781b      	ldrb	r3, [r3, #0]
    ee5c:	3301      	adds	r3, #1
    ee5e:	b2da      	uxtb	r2, r3
    ee60:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee68:	701a      	strb	r2, [r3, #0]
    ee6a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee72:	781b      	ldrb	r3, [r3, #0]
    ee74:	2bff      	cmp	r3, #255	; 0xff
    ee76:	d105      	bne.n	ee84 <send_gps_pos+0x264>
    ee78:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee80:	2200      	movs	r2, #0
    ee82:	701a      	strb	r2, [r3, #0]
    ee84:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee8c:	781b      	ldrb	r3, [r3, #0]
    ee8e:	461a      	mov	r2, r3
    ee90:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    ee94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee98:	7859      	ldrb	r1, [r3, #1]
    ee9a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ee9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eea2:	5499      	strb	r1, [r3, r2]
    eea4:	4bd1      	ldr	r3, [pc, #836]	; (f1ec <send_gps_pos+0x5cc>)
    eea6:	781a      	ldrb	r2, [r3, #0]
    eea8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    eeac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeb0:	781b      	ldrb	r3, [r3, #0]
    eeb2:	4413      	add	r3, r2
    eeb4:	b2da      	uxtb	r2, r3
    eeb6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    eeba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eebe:	701a      	strb	r2, [r3, #0]
    eec0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    eec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eec8:	781a      	ldrb	r2, [r3, #0]
    eeca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    eece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eed2:	781b      	ldrb	r3, [r3, #0]
    eed4:	4413      	add	r3, r2
    eed6:	b2da      	uxtb	r2, r3
    eed8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    eedc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eee0:	701a      	strb	r2, [r3, #0]
    eee2:	f24c 5349 	movw	r3, #50505	; 0xc549
    eee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeea:	781b      	ldrb	r3, [r3, #0]
    eeec:	3301      	adds	r3, #1
    eeee:	b2da      	uxtb	r2, r3
    eef0:	f24c 5349 	movw	r3, #50505	; 0xc549
    eef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eef8:	701a      	strb	r2, [r3, #0]
    eefa:	f24c 5349 	movw	r3, #50505	; 0xc549
    eefe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef02:	781b      	ldrb	r3, [r3, #0]
    ef04:	2bff      	cmp	r3, #255	; 0xff
    ef06:	d105      	bne.n	ef14 <send_gps_pos+0x2f4>
    ef08:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef10:	2200      	movs	r2, #0
    ef12:	701a      	strb	r2, [r3, #0]
    ef14:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef1c:	781b      	ldrb	r3, [r3, #0]
    ef1e:	461a      	mov	r2, r3
    ef20:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    ef24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef28:	7899      	ldrb	r1, [r3, #2]
    ef2a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ef2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef32:	5499      	strb	r1, [r3, r2]
    ef34:	4bae      	ldr	r3, [pc, #696]	; (f1f0 <send_gps_pos+0x5d0>)
    ef36:	781a      	ldrb	r2, [r3, #0]
    ef38:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef40:	781b      	ldrb	r3, [r3, #0]
    ef42:	4413      	add	r3, r2
    ef44:	b2da      	uxtb	r2, r3
    ef46:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef4e:	701a      	strb	r2, [r3, #0]
    ef50:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ef54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef58:	781a      	ldrb	r2, [r3, #0]
    ef5a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef62:	781b      	ldrb	r3, [r3, #0]
    ef64:	4413      	add	r3, r2
    ef66:	b2da      	uxtb	r2, r3
    ef68:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ef6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef70:	701a      	strb	r2, [r3, #0]
    ef72:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef7a:	781b      	ldrb	r3, [r3, #0]
    ef7c:	3301      	adds	r3, #1
    ef7e:	b2da      	uxtb	r2, r3
    ef80:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef88:	701a      	strb	r2, [r3, #0]
    ef8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef92:	781b      	ldrb	r3, [r3, #0]
    ef94:	2bff      	cmp	r3, #255	; 0xff
    ef96:	d105      	bne.n	efa4 <send_gps_pos+0x384>
    ef98:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efa0:	2200      	movs	r2, #0
    efa2:	701a      	strb	r2, [r3, #0]
    efa4:	f24c 5349 	movw	r3, #50505	; 0xc549
    efa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efac:	781b      	ldrb	r3, [r3, #0]
    efae:	461a      	mov	r2, r3
    efb0:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    efb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efb8:	78d9      	ldrb	r1, [r3, #3]
    efba:	f24c 534c 	movw	r3, #50508	; 0xc54c
    efbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efc2:	5499      	strb	r1, [r3, r2]
    efc4:	4b8b      	ldr	r3, [pc, #556]	; (f1f4 <send_gps_pos+0x5d4>)
    efc6:	781a      	ldrb	r2, [r3, #0]
    efc8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    efcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efd0:	781b      	ldrb	r3, [r3, #0]
    efd2:	4413      	add	r3, r2
    efd4:	b2da      	uxtb	r2, r3
    efd6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    efda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efde:	701a      	strb	r2, [r3, #0]
    efe0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    efe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efe8:	781a      	ldrb	r2, [r3, #0]
    efea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    efee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eff2:	781b      	ldrb	r3, [r3, #0]
    eff4:	4413      	add	r3, r2
    eff6:	b2da      	uxtb	r2, r3
    eff8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    effc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f000:	701a      	strb	r2, [r3, #0]
    f002:	f24c 5349 	movw	r3, #50505	; 0xc549
    f006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f00a:	781b      	ldrb	r3, [r3, #0]
    f00c:	3301      	adds	r3, #1
    f00e:	b2da      	uxtb	r2, r3
    f010:	f24c 5349 	movw	r3, #50505	; 0xc549
    f014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f018:	701a      	strb	r2, [r3, #0]
    f01a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f01e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f022:	781b      	ldrb	r3, [r3, #0]
    f024:	2bff      	cmp	r3, #255	; 0xff
    f026:	d105      	bne.n	f034 <send_gps_pos+0x414>
    f028:	f24c 5349 	movw	r3, #50505	; 0xc549
    f02c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f030:	2200      	movs	r2, #0
    f032:	701a      	strb	r2, [r3, #0]
    f034:	f24c 5349 	movw	r3, #50505	; 0xc549
    f038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f03c:	781b      	ldrb	r3, [r3, #0]
    f03e:	461a      	mov	r2, r3
    f040:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f048:	7819      	ldrb	r1, [r3, #0]
    f04a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f04e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f052:	5499      	strb	r1, [r3, r2]
    f054:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f05c:	781a      	ldrb	r2, [r3, #0]
    f05e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f066:	781b      	ldrb	r3, [r3, #0]
    f068:	4413      	add	r3, r2
    f06a:	b2da      	uxtb	r2, r3
    f06c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f074:	701a      	strb	r2, [r3, #0]
    f076:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f07a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f07e:	781a      	ldrb	r2, [r3, #0]
    f080:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f088:	781b      	ldrb	r3, [r3, #0]
    f08a:	4413      	add	r3, r2
    f08c:	b2da      	uxtb	r2, r3
    f08e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f096:	701a      	strb	r2, [r3, #0]
    f098:	f24c 5349 	movw	r3, #50505	; 0xc549
    f09c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0a0:	781b      	ldrb	r3, [r3, #0]
    f0a2:	3301      	adds	r3, #1
    f0a4:	b2da      	uxtb	r2, r3
    f0a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ae:	701a      	strb	r2, [r3, #0]
    f0b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0b8:	781b      	ldrb	r3, [r3, #0]
    f0ba:	2bff      	cmp	r3, #255	; 0xff
    f0bc:	d105      	bne.n	f0ca <send_gps_pos+0x4aa>
    f0be:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0c6:	2200      	movs	r2, #0
    f0c8:	701a      	strb	r2, [r3, #0]
    f0ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0d2:	781b      	ldrb	r3, [r3, #0]
    f0d4:	461a      	mov	r2, r3
    f0d6:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f0da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0de:	7859      	ldrb	r1, [r3, #1]
    f0e0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f0e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0e8:	5499      	strb	r1, [r3, r2]
    f0ea:	4b43      	ldr	r3, [pc, #268]	; (f1f8 <send_gps_pos+0x5d8>)
    f0ec:	781a      	ldrb	r2, [r3, #0]
    f0ee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f0f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0f6:	781b      	ldrb	r3, [r3, #0]
    f0f8:	4413      	add	r3, r2
    f0fa:	b2da      	uxtb	r2, r3
    f0fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f100:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f104:	701a      	strb	r2, [r3, #0]
    f106:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f10a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f10e:	781a      	ldrb	r2, [r3, #0]
    f110:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f118:	781b      	ldrb	r3, [r3, #0]
    f11a:	4413      	add	r3, r2
    f11c:	b2da      	uxtb	r2, r3
    f11e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f126:	701a      	strb	r2, [r3, #0]
    f128:	f24c 5349 	movw	r3, #50505	; 0xc549
    f12c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f130:	781b      	ldrb	r3, [r3, #0]
    f132:	3301      	adds	r3, #1
    f134:	b2da      	uxtb	r2, r3
    f136:	f24c 5349 	movw	r3, #50505	; 0xc549
    f13a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f13e:	701a      	strb	r2, [r3, #0]
    f140:	f24c 5349 	movw	r3, #50505	; 0xc549
    f144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f148:	781b      	ldrb	r3, [r3, #0]
    f14a:	2bff      	cmp	r3, #255	; 0xff
    f14c:	d105      	bne.n	f15a <send_gps_pos+0x53a>
    f14e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f156:	2200      	movs	r2, #0
    f158:	701a      	strb	r2, [r3, #0]
    f15a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f15e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f162:	781b      	ldrb	r3, [r3, #0]
    f164:	461a      	mov	r2, r3
    f166:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f16a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f16e:	7899      	ldrb	r1, [r3, #2]
    f170:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f178:	5499      	strb	r1, [r3, r2]
    f17a:	4b20      	ldr	r3, [pc, #128]	; (f1fc <send_gps_pos+0x5dc>)
    f17c:	781a      	ldrb	r2, [r3, #0]
    f17e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f186:	781b      	ldrb	r3, [r3, #0]
    f188:	4413      	add	r3, r2
    f18a:	b2da      	uxtb	r2, r3
    f18c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f194:	701a      	strb	r2, [r3, #0]
    f196:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f19a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f19e:	781a      	ldrb	r2, [r3, #0]
    f1a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f1a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1a8:	781b      	ldrb	r3, [r3, #0]
    f1aa:	4413      	add	r3, r2
    f1ac:	b2da      	uxtb	r2, r3
    f1ae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f1b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1b6:	701a      	strb	r2, [r3, #0]
    f1b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1c0:	781b      	ldrb	r3, [r3, #0]
    f1c2:	3301      	adds	r3, #1
    f1c4:	b2da      	uxtb	r2, r3
    f1c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f1ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1ce:	701a      	strb	r2, [r3, #0]
    f1d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f1d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1d8:	781b      	ldrb	r3, [r3, #0]
    f1da:	2bff      	cmp	r3, #255	; 0xff
    f1dc:	d110      	bne.n	f200 <send_gps_pos+0x5e0>
    f1de:	f24c 5349 	movw	r3, #50505	; 0xc549
    f1e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1e6:	2200      	movs	r2, #0
    f1e8:	701a      	strb	r2, [r3, #0]
    f1ea:	e009      	b.n	f200 <send_gps_pos+0x5e0>
    f1ec:	2004c6cd 	.word	0x2004c6cd
    f1f0:	2004c6ce 	.word	0x2004c6ce
    f1f4:	2004c6cf 	.word	0x2004c6cf
    f1f8:	2004c6d1 	.word	0x2004c6d1
    f1fc:	2004c6d2 	.word	0x2004c6d2
    f200:	f24c 5349 	movw	r3, #50505	; 0xc549
    f204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f208:	781b      	ldrb	r3, [r3, #0]
    f20a:	461a      	mov	r2, r3
    f20c:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f214:	78d9      	ldrb	r1, [r3, #3]
    f216:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f21a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f21e:	5499      	strb	r1, [r3, r2]
    f220:	4bd3      	ldr	r3, [pc, #844]	; (f570 <send_gps_pos+0x950>)
    f222:	781a      	ldrb	r2, [r3, #0]
    f224:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f22c:	781b      	ldrb	r3, [r3, #0]
    f22e:	4413      	add	r3, r2
    f230:	b2da      	uxtb	r2, r3
    f232:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f23a:	701a      	strb	r2, [r3, #0]
    f23c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f244:	781a      	ldrb	r2, [r3, #0]
    f246:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f24a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f24e:	781b      	ldrb	r3, [r3, #0]
    f250:	4413      	add	r3, r2
    f252:	b2da      	uxtb	r2, r3
    f254:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f25c:	701a      	strb	r2, [r3, #0]
    f25e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f266:	781b      	ldrb	r3, [r3, #0]
    f268:	3301      	adds	r3, #1
    f26a:	b2da      	uxtb	r2, r3
    f26c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f274:	701a      	strb	r2, [r3, #0]
    f276:	f24c 5349 	movw	r3, #50505	; 0xc549
    f27a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f27e:	781b      	ldrb	r3, [r3, #0]
    f280:	2bff      	cmp	r3, #255	; 0xff
    f282:	d105      	bne.n	f290 <send_gps_pos+0x670>
    f284:	f24c 5349 	movw	r3, #50505	; 0xc549
    f288:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f28c:	2200      	movs	r2, #0
    f28e:	701a      	strb	r2, [r3, #0]
    f290:	f24c 5349 	movw	r3, #50505	; 0xc549
    f294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f298:	781b      	ldrb	r3, [r3, #0]
    f29a:	461a      	mov	r2, r3
    f29c:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f2a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2a4:	7819      	ldrb	r1, [r3, #0]
    f2a6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f2aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2ae:	5499      	strb	r1, [r3, r2]
    f2b0:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f2b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2b8:	781a      	ldrb	r2, [r3, #0]
    f2ba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f2be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2c2:	781b      	ldrb	r3, [r3, #0]
    f2c4:	4413      	add	r3, r2
    f2c6:	b2da      	uxtb	r2, r3
    f2c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f2cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2d0:	701a      	strb	r2, [r3, #0]
    f2d2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f2d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2da:	781a      	ldrb	r2, [r3, #0]
    f2dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f2e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2e4:	781b      	ldrb	r3, [r3, #0]
    f2e6:	4413      	add	r3, r2
    f2e8:	b2da      	uxtb	r2, r3
    f2ea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f2ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2f2:	701a      	strb	r2, [r3, #0]
    f2f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f2f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2fc:	781b      	ldrb	r3, [r3, #0]
    f2fe:	3301      	adds	r3, #1
    f300:	b2da      	uxtb	r2, r3
    f302:	f24c 5349 	movw	r3, #50505	; 0xc549
    f306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f30a:	701a      	strb	r2, [r3, #0]
    f30c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f310:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f314:	781b      	ldrb	r3, [r3, #0]
    f316:	2bff      	cmp	r3, #255	; 0xff
    f318:	d105      	bne.n	f326 <send_gps_pos+0x706>
    f31a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f31e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f322:	2200      	movs	r2, #0
    f324:	701a      	strb	r2, [r3, #0]
    f326:	f24c 5349 	movw	r3, #50505	; 0xc549
    f32a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f32e:	781b      	ldrb	r3, [r3, #0]
    f330:	461a      	mov	r2, r3
    f332:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f33a:	7859      	ldrb	r1, [r3, #1]
    f33c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f344:	5499      	strb	r1, [r3, r2]
    f346:	4b8b      	ldr	r3, [pc, #556]	; (f574 <send_gps_pos+0x954>)
    f348:	781a      	ldrb	r2, [r3, #0]
    f34a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f34e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f352:	781b      	ldrb	r3, [r3, #0]
    f354:	4413      	add	r3, r2
    f356:	b2da      	uxtb	r2, r3
    f358:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f35c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f360:	701a      	strb	r2, [r3, #0]
    f362:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f36a:	781a      	ldrb	r2, [r3, #0]
    f36c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f374:	781b      	ldrb	r3, [r3, #0]
    f376:	4413      	add	r3, r2
    f378:	b2da      	uxtb	r2, r3
    f37a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f37e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f382:	701a      	strb	r2, [r3, #0]
    f384:	f24c 5349 	movw	r3, #50505	; 0xc549
    f388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f38c:	781b      	ldrb	r3, [r3, #0]
    f38e:	3301      	adds	r3, #1
    f390:	b2da      	uxtb	r2, r3
    f392:	f24c 5349 	movw	r3, #50505	; 0xc549
    f396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f39a:	701a      	strb	r2, [r3, #0]
    f39c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3a4:	781b      	ldrb	r3, [r3, #0]
    f3a6:	2bff      	cmp	r3, #255	; 0xff
    f3a8:	d105      	bne.n	f3b6 <send_gps_pos+0x796>
    f3aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3b2:	2200      	movs	r2, #0
    f3b4:	701a      	strb	r2, [r3, #0]
    f3b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3be:	781b      	ldrb	r3, [r3, #0]
    f3c0:	461a      	mov	r2, r3
    f3c2:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f3c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ca:	7899      	ldrb	r1, [r3, #2]
    f3cc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f3d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3d4:	5499      	strb	r1, [r3, r2]
    f3d6:	4b68      	ldr	r3, [pc, #416]	; (f578 <send_gps_pos+0x958>)
    f3d8:	781a      	ldrb	r2, [r3, #0]
    f3da:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f3de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3e2:	781b      	ldrb	r3, [r3, #0]
    f3e4:	4413      	add	r3, r2
    f3e6:	b2da      	uxtb	r2, r3
    f3e8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f3ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3f0:	701a      	strb	r2, [r3, #0]
    f3f2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f3f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3fa:	781a      	ldrb	r2, [r3, #0]
    f3fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f404:	781b      	ldrb	r3, [r3, #0]
    f406:	4413      	add	r3, r2
    f408:	b2da      	uxtb	r2, r3
    f40a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f40e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f412:	701a      	strb	r2, [r3, #0]
    f414:	f24c 5349 	movw	r3, #50505	; 0xc549
    f418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f41c:	781b      	ldrb	r3, [r3, #0]
    f41e:	3301      	adds	r3, #1
    f420:	b2da      	uxtb	r2, r3
    f422:	f24c 5349 	movw	r3, #50505	; 0xc549
    f426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f42a:	701a      	strb	r2, [r3, #0]
    f42c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f434:	781b      	ldrb	r3, [r3, #0]
    f436:	2bff      	cmp	r3, #255	; 0xff
    f438:	d105      	bne.n	f446 <send_gps_pos+0x826>
    f43a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f43e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f442:	2200      	movs	r2, #0
    f444:	701a      	strb	r2, [r3, #0]
    f446:	f24c 5349 	movw	r3, #50505	; 0xc549
    f44a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f44e:	781b      	ldrb	r3, [r3, #0]
    f450:	461a      	mov	r2, r3
    f452:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f45a:	78d9      	ldrb	r1, [r3, #3]
    f45c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f464:	5499      	strb	r1, [r3, r2]
    f466:	4b45      	ldr	r3, [pc, #276]	; (f57c <send_gps_pos+0x95c>)
    f468:	781a      	ldrb	r2, [r3, #0]
    f46a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f46e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f472:	781b      	ldrb	r3, [r3, #0]
    f474:	4413      	add	r3, r2
    f476:	b2da      	uxtb	r2, r3
    f478:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f47c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f480:	701a      	strb	r2, [r3, #0]
    f482:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f48a:	781a      	ldrb	r2, [r3, #0]
    f48c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f494:	781b      	ldrb	r3, [r3, #0]
    f496:	4413      	add	r3, r2
    f498:	b2da      	uxtb	r2, r3
    f49a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4a2:	701a      	strb	r2, [r3, #0]
    f4a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ac:	781b      	ldrb	r3, [r3, #0]
    f4ae:	3301      	adds	r3, #1
    f4b0:	b2da      	uxtb	r2, r3
    f4b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ba:	701a      	strb	r2, [r3, #0]
    f4bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4c4:	781b      	ldrb	r3, [r3, #0]
    f4c6:	2bff      	cmp	r3, #255	; 0xff
    f4c8:	d105      	bne.n	f4d6 <send_gps_pos+0x8b6>
    f4ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4d2:	2200      	movs	r2, #0
    f4d4:	701a      	strb	r2, [r3, #0]
    f4d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4de:	781b      	ldrb	r3, [r3, #0]
    f4e0:	461a      	mov	r2, r3
    f4e2:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f4e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ea:	7819      	ldrb	r1, [r3, #0]
    f4ec:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f4f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4f4:	5499      	strb	r1, [r3, r2]
    f4f6:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f4fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4fe:	781a      	ldrb	r2, [r3, #0]
    f500:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f508:	781b      	ldrb	r3, [r3, #0]
    f50a:	4413      	add	r3, r2
    f50c:	b2da      	uxtb	r2, r3
    f50e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f516:	701a      	strb	r2, [r3, #0]
    f518:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f51c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f520:	781a      	ldrb	r2, [r3, #0]
    f522:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f52a:	781b      	ldrb	r3, [r3, #0]
    f52c:	4413      	add	r3, r2
    f52e:	b2da      	uxtb	r2, r3
    f530:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f538:	701a      	strb	r2, [r3, #0]
    f53a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f53e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f542:	781b      	ldrb	r3, [r3, #0]
    f544:	3301      	adds	r3, #1
    f546:	b2da      	uxtb	r2, r3
    f548:	f24c 5349 	movw	r3, #50505	; 0xc549
    f54c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f550:	701a      	strb	r2, [r3, #0]
    f552:	f24c 5349 	movw	r3, #50505	; 0xc549
    f556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f55a:	781b      	ldrb	r3, [r3, #0]
    f55c:	2bff      	cmp	r3, #255	; 0xff
    f55e:	d10f      	bne.n	f580 <send_gps_pos+0x960>
    f560:	f24c 5349 	movw	r3, #50505	; 0xc549
    f564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f568:	2200      	movs	r2, #0
    f56a:	701a      	strb	r2, [r3, #0]
    f56c:	e008      	b.n	f580 <send_gps_pos+0x960>
    f56e:	bf00      	nop
    f570:	2004c6d3 	.word	0x2004c6d3
    f574:	2004c6c9 	.word	0x2004c6c9
    f578:	2004c6ca 	.word	0x2004c6ca
    f57c:	2004c6cb 	.word	0x2004c6cb
    f580:	f24c 5349 	movw	r3, #50505	; 0xc549
    f584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f588:	781b      	ldrb	r3, [r3, #0]
    f58a:	461a      	mov	r2, r3
    f58c:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f594:	7859      	ldrb	r1, [r3, #1]
    f596:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f59a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f59e:	5499      	strb	r1, [r3, r2]
    f5a0:	4bd1      	ldr	r3, [pc, #836]	; (f8e8 <send_gps_pos+0xcc8>)
    f5a2:	781a      	ldrb	r2, [r3, #0]
    f5a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ac:	781b      	ldrb	r3, [r3, #0]
    f5ae:	4413      	add	r3, r2
    f5b0:	b2da      	uxtb	r2, r3
    f5b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f5b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ba:	701a      	strb	r2, [r3, #0]
    f5bc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f5c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5c4:	781a      	ldrb	r2, [r3, #0]
    f5c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f5ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ce:	781b      	ldrb	r3, [r3, #0]
    f5d0:	4413      	add	r3, r2
    f5d2:	b2da      	uxtb	r2, r3
    f5d4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f5d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5dc:	701a      	strb	r2, [r3, #0]
    f5de:	f24c 5349 	movw	r3, #50505	; 0xc549
    f5e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5e6:	781b      	ldrb	r3, [r3, #0]
    f5e8:	3301      	adds	r3, #1
    f5ea:	b2da      	uxtb	r2, r3
    f5ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    f5f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5f4:	701a      	strb	r2, [r3, #0]
    f5f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f5fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5fe:	781b      	ldrb	r3, [r3, #0]
    f600:	2bff      	cmp	r3, #255	; 0xff
    f602:	d105      	bne.n	f610 <send_gps_pos+0x9f0>
    f604:	f24c 5349 	movw	r3, #50505	; 0xc549
    f608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f60c:	2200      	movs	r2, #0
    f60e:	701a      	strb	r2, [r3, #0]
    f610:	f24c 5349 	movw	r3, #50505	; 0xc549
    f614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f618:	781b      	ldrb	r3, [r3, #0]
    f61a:	461a      	mov	r2, r3
    f61c:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f624:	7899      	ldrb	r1, [r3, #2]
    f626:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f62a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f62e:	5499      	strb	r1, [r3, r2]
    f630:	4bae      	ldr	r3, [pc, #696]	; (f8ec <send_gps_pos+0xccc>)
    f632:	781a      	ldrb	r2, [r3, #0]
    f634:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f63c:	781b      	ldrb	r3, [r3, #0]
    f63e:	4413      	add	r3, r2
    f640:	b2da      	uxtb	r2, r3
    f642:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f64a:	701a      	strb	r2, [r3, #0]
    f64c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f654:	781a      	ldrb	r2, [r3, #0]
    f656:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f65a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f65e:	781b      	ldrb	r3, [r3, #0]
    f660:	4413      	add	r3, r2
    f662:	b2da      	uxtb	r2, r3
    f664:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f66c:	701a      	strb	r2, [r3, #0]
    f66e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f676:	781b      	ldrb	r3, [r3, #0]
    f678:	3301      	adds	r3, #1
    f67a:	b2da      	uxtb	r2, r3
    f67c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f684:	701a      	strb	r2, [r3, #0]
    f686:	f24c 5349 	movw	r3, #50505	; 0xc549
    f68a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f68e:	781b      	ldrb	r3, [r3, #0]
    f690:	2bff      	cmp	r3, #255	; 0xff
    f692:	d105      	bne.n	f6a0 <send_gps_pos+0xa80>
    f694:	f24c 5349 	movw	r3, #50505	; 0xc549
    f698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f69c:	2200      	movs	r2, #0
    f69e:	701a      	strb	r2, [r3, #0]
    f6a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6a8:	781b      	ldrb	r3, [r3, #0]
    f6aa:	461a      	mov	r2, r3
    f6ac:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f6b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6b4:	78d9      	ldrb	r1, [r3, #3]
    f6b6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f6ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6be:	5499      	strb	r1, [r3, r2]
    f6c0:	4b8b      	ldr	r3, [pc, #556]	; (f8f0 <send_gps_pos+0xcd0>)
    f6c2:	781a      	ldrb	r2, [r3, #0]
    f6c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f6c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6cc:	781b      	ldrb	r3, [r3, #0]
    f6ce:	4413      	add	r3, r2
    f6d0:	b2da      	uxtb	r2, r3
    f6d2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f6d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6da:	701a      	strb	r2, [r3, #0]
    f6dc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f6e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6e4:	781a      	ldrb	r2, [r3, #0]
    f6e6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f6ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ee:	781b      	ldrb	r3, [r3, #0]
    f6f0:	4413      	add	r3, r2
    f6f2:	b2da      	uxtb	r2, r3
    f6f4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f6f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6fc:	701a      	strb	r2, [r3, #0]
    f6fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    f702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f706:	781b      	ldrb	r3, [r3, #0]
    f708:	3301      	adds	r3, #1
    f70a:	b2da      	uxtb	r2, r3
    f70c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f714:	701a      	strb	r2, [r3, #0]
    f716:	f24c 5349 	movw	r3, #50505	; 0xc549
    f71a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f71e:	781b      	ldrb	r3, [r3, #0]
    f720:	2bff      	cmp	r3, #255	; 0xff
    f722:	d105      	bne.n	f730 <send_gps_pos+0xb10>
    f724:	f24c 5349 	movw	r3, #50505	; 0xc549
    f728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f72c:	2200      	movs	r2, #0
    f72e:	701a      	strb	r2, [r3, #0]
    f730:	f24c 5349 	movw	r3, #50505	; 0xc549
    f734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f738:	781b      	ldrb	r3, [r3, #0]
    f73a:	461a      	mov	r2, r3
    f73c:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f744:	7819      	ldrb	r1, [r3, #0]
    f746:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f74a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f74e:	5499      	strb	r1, [r3, r2]
    f750:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f758:	781a      	ldrb	r2, [r3, #0]
    f75a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f75e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f762:	781b      	ldrb	r3, [r3, #0]
    f764:	4413      	add	r3, r2
    f766:	b2da      	uxtb	r2, r3
    f768:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f76c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f770:	701a      	strb	r2, [r3, #0]
    f772:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f776:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f77a:	781a      	ldrb	r2, [r3, #0]
    f77c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f784:	781b      	ldrb	r3, [r3, #0]
    f786:	4413      	add	r3, r2
    f788:	b2da      	uxtb	r2, r3
    f78a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f78e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f792:	701a      	strb	r2, [r3, #0]
    f794:	f24c 5349 	movw	r3, #50505	; 0xc549
    f798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f79c:	781b      	ldrb	r3, [r3, #0]
    f79e:	3301      	adds	r3, #1
    f7a0:	b2da      	uxtb	r2, r3
    f7a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7aa:	701a      	strb	r2, [r3, #0]
    f7ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7b4:	781b      	ldrb	r3, [r3, #0]
    f7b6:	2bff      	cmp	r3, #255	; 0xff
    f7b8:	d105      	bne.n	f7c6 <send_gps_pos+0xba6>
    f7ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7c2:	2200      	movs	r2, #0
    f7c4:	701a      	strb	r2, [r3, #0]
    f7c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7ce:	781b      	ldrb	r3, [r3, #0]
    f7d0:	461a      	mov	r2, r3
    f7d2:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f7d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7da:	7859      	ldrb	r1, [r3, #1]
    f7dc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f7e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7e4:	5499      	strb	r1, [r3, r2]
    f7e6:	4b43      	ldr	r3, [pc, #268]	; (f8f4 <send_gps_pos+0xcd4>)
    f7e8:	781a      	ldrb	r2, [r3, #0]
    f7ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f7ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7f2:	781b      	ldrb	r3, [r3, #0]
    f7f4:	4413      	add	r3, r2
    f7f6:	b2da      	uxtb	r2, r3
    f7f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f7fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f800:	701a      	strb	r2, [r3, #0]
    f802:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f80a:	781a      	ldrb	r2, [r3, #0]
    f80c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f814:	781b      	ldrb	r3, [r3, #0]
    f816:	4413      	add	r3, r2
    f818:	b2da      	uxtb	r2, r3
    f81a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f81e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f822:	701a      	strb	r2, [r3, #0]
    f824:	f24c 5349 	movw	r3, #50505	; 0xc549
    f828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f82c:	781b      	ldrb	r3, [r3, #0]
    f82e:	3301      	adds	r3, #1
    f830:	b2da      	uxtb	r2, r3
    f832:	f24c 5349 	movw	r3, #50505	; 0xc549
    f836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f83a:	701a      	strb	r2, [r3, #0]
    f83c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f844:	781b      	ldrb	r3, [r3, #0]
    f846:	2bff      	cmp	r3, #255	; 0xff
    f848:	d105      	bne.n	f856 <send_gps_pos+0xc36>
    f84a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f84e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f852:	2200      	movs	r2, #0
    f854:	701a      	strb	r2, [r3, #0]
    f856:	f24c 5349 	movw	r3, #50505	; 0xc549
    f85a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f85e:	781b      	ldrb	r3, [r3, #0]
    f860:	461a      	mov	r2, r3
    f862:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f86a:	7899      	ldrb	r1, [r3, #2]
    f86c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f874:	5499      	strb	r1, [r3, r2]
    f876:	4b20      	ldr	r3, [pc, #128]	; (f8f8 <send_gps_pos+0xcd8>)
    f878:	781a      	ldrb	r2, [r3, #0]
    f87a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f87e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f882:	781b      	ldrb	r3, [r3, #0]
    f884:	4413      	add	r3, r2
    f886:	b2da      	uxtb	r2, r3
    f888:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f88c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f890:	701a      	strb	r2, [r3, #0]
    f892:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f89a:	781a      	ldrb	r2, [r3, #0]
    f89c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f8a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8a4:	781b      	ldrb	r3, [r3, #0]
    f8a6:	4413      	add	r3, r2
    f8a8:	b2da      	uxtb	r2, r3
    f8aa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f8ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8b2:	701a      	strb	r2, [r3, #0]
    f8b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8bc:	781b      	ldrb	r3, [r3, #0]
    f8be:	3301      	adds	r3, #1
    f8c0:	b2da      	uxtb	r2, r3
    f8c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ca:	701a      	strb	r2, [r3, #0]
    f8cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8d4:	781b      	ldrb	r3, [r3, #0]
    f8d6:	2bff      	cmp	r3, #255	; 0xff
    f8d8:	d110      	bne.n	f8fc <send_gps_pos+0xcdc>
    f8da:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8e2:	2200      	movs	r2, #0
    f8e4:	701a      	strb	r2, [r3, #0]
    f8e6:	e009      	b.n	f8fc <send_gps_pos+0xcdc>
    f8e8:	2004c6bd 	.word	0x2004c6bd
    f8ec:	2004c6be 	.word	0x2004c6be
    f8f0:	2004c6bf 	.word	0x2004c6bf
    f8f4:	2004c6c1 	.word	0x2004c6c1
    f8f8:	2004c6c2 	.word	0x2004c6c2
    f8fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f900:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f904:	781b      	ldrb	r3, [r3, #0]
    f906:	461a      	mov	r2, r3
    f908:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f90c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f910:	78d9      	ldrb	r1, [r3, #3]
    f912:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f91a:	5499      	strb	r1, [r3, r2]
    f91c:	4bd3      	ldr	r3, [pc, #844]	; (fc6c <send_gps_pos+0x104c>)
    f91e:	781a      	ldrb	r2, [r3, #0]
    f920:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f928:	781b      	ldrb	r3, [r3, #0]
    f92a:	4413      	add	r3, r2
    f92c:	b2da      	uxtb	r2, r3
    f92e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f936:	701a      	strb	r2, [r3, #0]
    f938:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f93c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f940:	781a      	ldrb	r2, [r3, #0]
    f942:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f94a:	781b      	ldrb	r3, [r3, #0]
    f94c:	4413      	add	r3, r2
    f94e:	b2da      	uxtb	r2, r3
    f950:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f958:	701a      	strb	r2, [r3, #0]
    f95a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f95e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f962:	781b      	ldrb	r3, [r3, #0]
    f964:	3301      	adds	r3, #1
    f966:	b2da      	uxtb	r2, r3
    f968:	f24c 5349 	movw	r3, #50505	; 0xc549
    f96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f970:	701a      	strb	r2, [r3, #0]
    f972:	f24c 5349 	movw	r3, #50505	; 0xc549
    f976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f97a:	781b      	ldrb	r3, [r3, #0]
    f97c:	2bff      	cmp	r3, #255	; 0xff
    f97e:	d105      	bne.n	f98c <send_gps_pos+0xd6c>
    f980:	f24c 5349 	movw	r3, #50505	; 0xc549
    f984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f988:	2200      	movs	r2, #0
    f98a:	701a      	strb	r2, [r3, #0]
    f98c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f994:	781b      	ldrb	r3, [r3, #0]
    f996:	461a      	mov	r2, r3
    f998:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    f99c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9a0:	7819      	ldrb	r1, [r3, #0]
    f9a2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f9a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9aa:	5499      	strb	r1, [r3, r2]
    f9ac:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    f9b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9b4:	781a      	ldrb	r2, [r3, #0]
    f9b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f9ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9be:	781b      	ldrb	r3, [r3, #0]
    f9c0:	4413      	add	r3, r2
    f9c2:	b2da      	uxtb	r2, r3
    f9c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f9c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9cc:	701a      	strb	r2, [r3, #0]
    f9ce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f9d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9d6:	781a      	ldrb	r2, [r3, #0]
    f9d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9e0:	781b      	ldrb	r3, [r3, #0]
    f9e2:	4413      	add	r3, r2
    f9e4:	b2da      	uxtb	r2, r3
    f9e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f9ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9ee:	701a      	strb	r2, [r3, #0]
    f9f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f9f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9f8:	781b      	ldrb	r3, [r3, #0]
    f9fa:	3301      	adds	r3, #1
    f9fc:	b2da      	uxtb	r2, r3
    f9fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa06:	701a      	strb	r2, [r3, #0]
    fa08:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa10:	781b      	ldrb	r3, [r3, #0]
    fa12:	2bff      	cmp	r3, #255	; 0xff
    fa14:	d105      	bne.n	fa22 <send_gps_pos+0xe02>
    fa16:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa1e:	2200      	movs	r2, #0
    fa20:	701a      	strb	r2, [r3, #0]
    fa22:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa2a:	781b      	ldrb	r3, [r3, #0]
    fa2c:	461a      	mov	r2, r3
    fa2e:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fa32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa36:	7859      	ldrb	r1, [r3, #1]
    fa38:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fa3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa40:	5499      	strb	r1, [r3, r2]
    fa42:	4b8b      	ldr	r3, [pc, #556]	; (fc70 <send_gps_pos+0x1050>)
    fa44:	781a      	ldrb	r2, [r3, #0]
    fa46:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa4e:	781b      	ldrb	r3, [r3, #0]
    fa50:	4413      	add	r3, r2
    fa52:	b2da      	uxtb	r2, r3
    fa54:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa5c:	701a      	strb	r2, [r3, #0]
    fa5e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fa62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa66:	781a      	ldrb	r2, [r3, #0]
    fa68:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa70:	781b      	ldrb	r3, [r3, #0]
    fa72:	4413      	add	r3, r2
    fa74:	b2da      	uxtb	r2, r3
    fa76:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fa7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa7e:	701a      	strb	r2, [r3, #0]
    fa80:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa88:	781b      	ldrb	r3, [r3, #0]
    fa8a:	3301      	adds	r3, #1
    fa8c:	b2da      	uxtb	r2, r3
    fa8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa96:	701a      	strb	r2, [r3, #0]
    fa98:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faa0:	781b      	ldrb	r3, [r3, #0]
    faa2:	2bff      	cmp	r3, #255	; 0xff
    faa4:	d105      	bne.n	fab2 <send_gps_pos+0xe92>
    faa6:	f24c 5349 	movw	r3, #50505	; 0xc549
    faaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faae:	2200      	movs	r2, #0
    fab0:	701a      	strb	r2, [r3, #0]
    fab2:	f24c 5349 	movw	r3, #50505	; 0xc549
    fab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faba:	781b      	ldrb	r3, [r3, #0]
    fabc:	461a      	mov	r2, r3
    fabe:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fac6:	7899      	ldrb	r1, [r3, #2]
    fac8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    facc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fad0:	5499      	strb	r1, [r3, r2]
    fad2:	4b68      	ldr	r3, [pc, #416]	; (fc74 <send_gps_pos+0x1054>)
    fad4:	781a      	ldrb	r2, [r3, #0]
    fad6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fade:	781b      	ldrb	r3, [r3, #0]
    fae0:	4413      	add	r3, r2
    fae2:	b2da      	uxtb	r2, r3
    fae4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faec:	701a      	strb	r2, [r3, #0]
    faee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    faf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faf6:	781a      	ldrb	r2, [r3, #0]
    faf8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fafc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb00:	781b      	ldrb	r3, [r3, #0]
    fb02:	4413      	add	r3, r2
    fb04:	b2da      	uxtb	r2, r3
    fb06:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fb0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb0e:	701a      	strb	r2, [r3, #0]
    fb10:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb18:	781b      	ldrb	r3, [r3, #0]
    fb1a:	3301      	adds	r3, #1
    fb1c:	b2da      	uxtb	r2, r3
    fb1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb26:	701a      	strb	r2, [r3, #0]
    fb28:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb30:	781b      	ldrb	r3, [r3, #0]
    fb32:	2bff      	cmp	r3, #255	; 0xff
    fb34:	d105      	bne.n	fb42 <send_gps_pos+0xf22>
    fb36:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb3e:	2200      	movs	r2, #0
    fb40:	701a      	strb	r2, [r3, #0]
    fb42:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb4a:	781b      	ldrb	r3, [r3, #0]
    fb4c:	461a      	mov	r2, r3
    fb4e:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fb52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb56:	78d9      	ldrb	r1, [r3, #3]
    fb58:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fb5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb60:	5499      	strb	r1, [r3, r2]
    fb62:	4b45      	ldr	r3, [pc, #276]	; (fc78 <send_gps_pos+0x1058>)
    fb64:	781a      	ldrb	r2, [r3, #0]
    fb66:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb6e:	781b      	ldrb	r3, [r3, #0]
    fb70:	4413      	add	r3, r2
    fb72:	b2da      	uxtb	r2, r3
    fb74:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb7c:	701a      	strb	r2, [r3, #0]
    fb7e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fb82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb86:	781a      	ldrb	r2, [r3, #0]
    fb88:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb90:	781b      	ldrb	r3, [r3, #0]
    fb92:	4413      	add	r3, r2
    fb94:	b2da      	uxtb	r2, r3
    fb96:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fb9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb9e:	701a      	strb	r2, [r3, #0]
    fba0:	f24c 5349 	movw	r3, #50505	; 0xc549
    fba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fba8:	781b      	ldrb	r3, [r3, #0]
    fbaa:	3301      	adds	r3, #1
    fbac:	b2da      	uxtb	r2, r3
    fbae:	f24c 5349 	movw	r3, #50505	; 0xc549
    fbb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbb6:	701a      	strb	r2, [r3, #0]
    fbb8:	f24c 5349 	movw	r3, #50505	; 0xc549
    fbbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbc0:	781b      	ldrb	r3, [r3, #0]
    fbc2:	2bff      	cmp	r3, #255	; 0xff
    fbc4:	d105      	bne.n	fbd2 <send_gps_pos+0xfb2>
    fbc6:	f24c 5349 	movw	r3, #50505	; 0xc549
    fbca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbce:	2200      	movs	r2, #0
    fbd0:	701a      	strb	r2, [r3, #0]
    fbd2:	f24c 5349 	movw	r3, #50505	; 0xc549
    fbd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbda:	781b      	ldrb	r3, [r3, #0]
    fbdc:	461a      	mov	r2, r3
    fbde:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fbe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbe6:	7819      	ldrb	r1, [r3, #0]
    fbe8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fbec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbf0:	5499      	strb	r1, [r3, r2]
    fbf2:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fbf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbfa:	781a      	ldrb	r2, [r3, #0]
    fbfc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc04:	781b      	ldrb	r3, [r3, #0]
    fc06:	4413      	add	r3, r2
    fc08:	b2da      	uxtb	r2, r3
    fc0a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc12:	701a      	strb	r2, [r3, #0]
    fc14:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fc18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc1c:	781a      	ldrb	r2, [r3, #0]
    fc1e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc26:	781b      	ldrb	r3, [r3, #0]
    fc28:	4413      	add	r3, r2
    fc2a:	b2da      	uxtb	r2, r3
    fc2c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fc30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc34:	701a      	strb	r2, [r3, #0]
    fc36:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc3e:	781b      	ldrb	r3, [r3, #0]
    fc40:	3301      	adds	r3, #1
    fc42:	b2da      	uxtb	r2, r3
    fc44:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc4c:	701a      	strb	r2, [r3, #0]
    fc4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc56:	781b      	ldrb	r3, [r3, #0]
    fc58:	2bff      	cmp	r3, #255	; 0xff
    fc5a:	d10f      	bne.n	fc7c <send_gps_pos+0x105c>
    fc5c:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc64:	2200      	movs	r2, #0
    fc66:	701a      	strb	r2, [r3, #0]
    fc68:	e008      	b.n	fc7c <send_gps_pos+0x105c>
    fc6a:	bf00      	nop
    fc6c:	2004c6c3 	.word	0x2004c6c3
    fc70:	2004c6c5 	.word	0x2004c6c5
    fc74:	2004c6c6 	.word	0x2004c6c6
    fc78:	2004c6c7 	.word	0x2004c6c7
    fc7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc84:	781b      	ldrb	r3, [r3, #0]
    fc86:	461a      	mov	r2, r3
    fc88:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fc8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc90:	7859      	ldrb	r1, [r3, #1]
    fc92:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fc96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc9a:	5499      	strb	r1, [r3, r2]
    fc9c:	4bc0      	ldr	r3, [pc, #768]	; (ffa0 <send_gps_pos+0x1380>)
    fc9e:	781a      	ldrb	r2, [r3, #0]
    fca0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fca8:	781b      	ldrb	r3, [r3, #0]
    fcaa:	4413      	add	r3, r2
    fcac:	b2da      	uxtb	r2, r3
    fcae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fcb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcb6:	701a      	strb	r2, [r3, #0]
    fcb8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fcbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcc0:	781a      	ldrb	r2, [r3, #0]
    fcc2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fcc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcca:	781b      	ldrb	r3, [r3, #0]
    fccc:	4413      	add	r3, r2
    fcce:	b2da      	uxtb	r2, r3
    fcd0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fcd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcd8:	701a      	strb	r2, [r3, #0]
    fcda:	f24c 5349 	movw	r3, #50505	; 0xc549
    fcde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fce2:	781b      	ldrb	r3, [r3, #0]
    fce4:	3301      	adds	r3, #1
    fce6:	b2da      	uxtb	r2, r3
    fce8:	f24c 5349 	movw	r3, #50505	; 0xc549
    fcec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcf0:	701a      	strb	r2, [r3, #0]
    fcf2:	f24c 5349 	movw	r3, #50505	; 0xc549
    fcf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcfa:	781b      	ldrb	r3, [r3, #0]
    fcfc:	2bff      	cmp	r3, #255	; 0xff
    fcfe:	d105      	bne.n	fd0c <send_gps_pos+0x10ec>
    fd00:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd08:	2200      	movs	r2, #0
    fd0a:	701a      	strb	r2, [r3, #0]
    fd0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd14:	781b      	ldrb	r3, [r3, #0]
    fd16:	461a      	mov	r2, r3
    fd18:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fd1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd20:	7899      	ldrb	r1, [r3, #2]
    fd22:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fd26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd2a:	5499      	strb	r1, [r3, r2]
    fd2c:	4b9d      	ldr	r3, [pc, #628]	; (ffa4 <send_gps_pos+0x1384>)
    fd2e:	781a      	ldrb	r2, [r3, #0]
    fd30:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd38:	781b      	ldrb	r3, [r3, #0]
    fd3a:	4413      	add	r3, r2
    fd3c:	b2da      	uxtb	r2, r3
    fd3e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd46:	701a      	strb	r2, [r3, #0]
    fd48:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fd4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd50:	781a      	ldrb	r2, [r3, #0]
    fd52:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd5a:	781b      	ldrb	r3, [r3, #0]
    fd5c:	4413      	add	r3, r2
    fd5e:	b2da      	uxtb	r2, r3
    fd60:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fd64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd68:	701a      	strb	r2, [r3, #0]
    fd6a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd72:	781b      	ldrb	r3, [r3, #0]
    fd74:	3301      	adds	r3, #1
    fd76:	b2da      	uxtb	r2, r3
    fd78:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd80:	701a      	strb	r2, [r3, #0]
    fd82:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd8a:	781b      	ldrb	r3, [r3, #0]
    fd8c:	2bff      	cmp	r3, #255	; 0xff
    fd8e:	d105      	bne.n	fd9c <send_gps_pos+0x117c>
    fd90:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd98:	2200      	movs	r2, #0
    fd9a:	701a      	strb	r2, [r3, #0]
    fd9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    fda0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fda4:	781b      	ldrb	r3, [r3, #0]
    fda6:	461a      	mov	r2, r3
    fda8:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fdac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdb0:	78d9      	ldrb	r1, [r3, #3]
    fdb2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fdb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdba:	5499      	strb	r1, [r3, r2]
    fdbc:	4b7a      	ldr	r3, [pc, #488]	; (ffa8 <send_gps_pos+0x1388>)
    fdbe:	781a      	ldrb	r2, [r3, #0]
    fdc0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fdc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdc8:	781b      	ldrb	r3, [r3, #0]
    fdca:	4413      	add	r3, r2
    fdcc:	b2da      	uxtb	r2, r3
    fdce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fdd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdd6:	701a      	strb	r2, [r3, #0]
    fdd8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fde0:	781a      	ldrb	r2, [r3, #0]
    fde2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fde6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdea:	781b      	ldrb	r3, [r3, #0]
    fdec:	4413      	add	r3, r2
    fdee:	b2da      	uxtb	r2, r3
    fdf0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fdf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdf8:	701a      	strb	r2, [r3, #0]
    fdfa:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe02:	781b      	ldrb	r3, [r3, #0]
    fe04:	3301      	adds	r3, #1
    fe06:	b2da      	uxtb	r2, r3
    fe08:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe10:	701a      	strb	r2, [r3, #0]
    fe12:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe1a:	781b      	ldrb	r3, [r3, #0]
    fe1c:	2bff      	cmp	r3, #255	; 0xff
    fe1e:	d105      	bne.n	fe2c <send_gps_pos+0x120c>
    fe20:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe28:	2200      	movs	r2, #0
    fe2a:	701a      	strb	r2, [r3, #0]
    fe2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe34:	781b      	ldrb	r3, [r3, #0]
    fe36:	461a      	mov	r2, r3
    fe38:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fe3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe40:	7819      	ldrb	r1, [r3, #0]
    fe42:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fe46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe4a:	5499      	strb	r1, [r3, r2]
    fe4c:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe54:	781b      	ldrb	r3, [r3, #0]
    fe56:	3301      	adds	r3, #1
    fe58:	b2da      	uxtb	r2, r3
    fe5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe62:	701a      	strb	r2, [r3, #0]
    fe64:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe6c:	781b      	ldrb	r3, [r3, #0]
    fe6e:	2bff      	cmp	r3, #255	; 0xff
    fe70:	d105      	bne.n	fe7e <send_gps_pos+0x125e>
    fe72:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe7a:	2200      	movs	r2, #0
    fe7c:	701a      	strb	r2, [r3, #0]
    fe7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe86:	781b      	ldrb	r3, [r3, #0]
    fe88:	461a      	mov	r2, r3
    fe8a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fe8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe92:	7819      	ldrb	r1, [r3, #0]
    fe94:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fe98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe9c:	5499      	strb	r1, [r3, r2]
    fe9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    fea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fea6:	781b      	ldrb	r3, [r3, #0]
    fea8:	3301      	adds	r3, #1
    feaa:	b2da      	uxtb	r2, r3
    feac:	f24c 5349 	movw	r3, #50505	; 0xc549
    feb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feb4:	701a      	strb	r2, [r3, #0]
    feb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    feba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    febe:	781b      	ldrb	r3, [r3, #0]
    fec0:	2bff      	cmp	r3, #255	; 0xff
    fec2:	d105      	bne.n	fed0 <send_gps_pos+0x12b0>
    fec4:	f24c 5349 	movw	r3, #50505	; 0xc549
    fec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fecc:	2200      	movs	r2, #0
    fece:	701a      	strb	r2, [r3, #0]
    fed0:	f242 0339 	movw	r3, #8249	; 0x2039
    fed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fed8:	781b      	ldrb	r3, [r3, #0]
    feda:	b2db      	uxtb	r3, r3
    fedc:	f003 0310 	and.w	r3, r3, #16
    fee0:	2b00      	cmp	r3, #0
    fee2:	d15a      	bne.n	ff9a <send_gps_pos+0x137a>
    fee4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    fee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feec:	781b      	ldrb	r3, [r3, #0]
    feee:	b2db      	uxtb	r3, r3
    fef0:	461a      	mov	r2, r3
    fef2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fefa:	5c9a      	ldrb	r2, [r3, r2]
    fefc:	f24c 634b 	movw	r3, #50763	; 0xc64b
    ff00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff04:	701a      	strb	r2, [r3, #0]
    ff06:	f24c 634c 	movw	r3, #50764	; 0xc64c
    ff0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff0e:	2200      	movs	r2, #0
    ff10:	701a      	strb	r2, [r3, #0]
    ff12:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ff16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff1a:	781b      	ldrb	r3, [r3, #0]
    ff1c:	b2db      	uxtb	r3, r3
    ff1e:	3301      	adds	r3, #1
    ff20:	b2da      	uxtb	r2, r3
    ff22:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ff26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff2a:	701a      	strb	r2, [r3, #0]
    ff2c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ff30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff34:	781b      	ldrb	r3, [r3, #0]
    ff36:	b2db      	uxtb	r3, r3
    ff38:	2bff      	cmp	r3, #255	; 0xff
    ff3a:	d105      	bne.n	ff48 <send_gps_pos+0x1328>
    ff3c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ff40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff44:	2200      	movs	r2, #0
    ff46:	701a      	strb	r2, [r3, #0]
    ff48:	f242 0338 	movw	r3, #8248	; 0x2038
    ff4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff50:	f242 0238 	movw	r2, #8248	; 0x2038
    ff54:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ff58:	7812      	ldrb	r2, [r2, #0]
    ff5a:	b2d2      	uxtb	r2, r2
    ff5c:	f042 0201 	orr.w	r2, r2, #1
    ff60:	b2d2      	uxtb	r2, r2
    ff62:	701a      	strb	r2, [r3, #0]
    ff64:	f242 0339 	movw	r3, #8249	; 0x2039
    ff68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff6c:	f242 0239 	movw	r2, #8249	; 0x2039
    ff70:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ff74:	7812      	ldrb	r2, [r2, #0]
    ff76:	b2d2      	uxtb	r2, r2
    ff78:	f042 0210 	orr.w	r2, r2, #16
    ff7c:	b2d2      	uxtb	r2, r2
    ff7e:	701a      	strb	r2, [r3, #0]
    ff80:	e00b      	b.n	ff9a <send_gps_pos+0x137a>
    ff82:	f24c 5348 	movw	r3, #50504	; 0xc548
    ff86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff8a:	781b      	ldrb	r3, [r3, #0]
    ff8c:	3301      	adds	r3, #1
    ff8e:	b2da      	uxtb	r2, r3
    ff90:	f24c 5348 	movw	r3, #50504	; 0xc548
    ff94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff98:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
    ff9a:	f005 fbfd 	bl	15798 <estimator_update_state_gps>
  }
}
    ff9e:	bd80      	pop	{r7, pc}
    ffa0:	2004c6b9 	.word	0x2004c6b9
    ffa4:	2004c6ba 	.word	0x2004c6ba
    ffa8:	2004c6bb 	.word	0x2004c6bb

0000ffac <send_radIR>:

void send_radIR(void){
    ffac:	b480      	push	{r7}
    ffae:	af00      	add	r7, sp, #0
  if (gps_pos_available)
    ffb0:	f24c 63de 	movw	r3, #50910	; 0xc6de
    ffb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffb8:	781b      	ldrb	r3, [r3, #0]
    ffba:	2b00      	cmp	r3, #0
    ffbc:	f000 85e8 	beq.w	10b90 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    ffc0:	f24c 5349 	movw	r3, #50505	; 0xc549
    ffc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffc8:	781a      	ldrb	r2, [r3, #0]
    ffca:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ffce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffd2:	781b      	ldrb	r3, [r3, #0]
    ffd4:	b2db      	uxtb	r3, r3
    ffd6:	429a      	cmp	r2, r3
    ffd8:	d313      	bcc.n	10002 <send_radIR+0x56>
    ffda:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ffde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffe2:	781b      	ldrb	r3, [r3, #0]
    ffe4:	b2db      	uxtb	r3, r3
    ffe6:	461a      	mov	r2, r3
    ffe8:	f24c 5349 	movw	r3, #50505	; 0xc549
    ffec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fff0:	781b      	ldrb	r3, [r3, #0]
    fff2:	1ad3      	subs	r3, r2, r3
    fff4:	33ff      	adds	r3, #255	; 0xff
    fff6:	2b14      	cmp	r3, #20
    fff8:	bfd4      	ite	le
    fffa:	2300      	movle	r3, #0
    fffc:	2301      	movgt	r3, #1
    fffe:	b2db      	uxtb	r3, r3
   10000:	e011      	b.n	10026 <send_radIR+0x7a>
   10002:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10006:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1000a:	781b      	ldrb	r3, [r3, #0]
   1000c:	b2db      	uxtb	r3, r3
   1000e:	461a      	mov	r2, r3
   10010:	f24c 5349 	movw	r3, #50505	; 0xc549
   10014:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10018:	781b      	ldrb	r3, [r3, #0]
   1001a:	1ad3      	subs	r3, r2, r3
   1001c:	2b14      	cmp	r3, #20
   1001e:	bfd4      	ite	le
   10020:	2300      	movle	r3, #0
   10022:	2301      	movgt	r3, #1
   10024:	b2db      	uxtb	r3, r3
   10026:	2b00      	cmp	r3, #0
   10028:	f000 85a6 	beq.w	10b78 <send_radIR+0xbcc>
   1002c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10030:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10034:	781b      	ldrb	r3, [r3, #0]
   10036:	461a      	mov	r2, r3
   10038:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1003c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10040:	2105      	movs	r1, #5
   10042:	5499      	strb	r1, [r3, r2]
   10044:	f24c 5349 	movw	r3, #50505	; 0xc549
   10048:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1004c:	781b      	ldrb	r3, [r3, #0]
   1004e:	3301      	adds	r3, #1
   10050:	b2da      	uxtb	r2, r3
   10052:	f24c 5349 	movw	r3, #50505	; 0xc549
   10056:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1005a:	701a      	strb	r2, [r3, #0]
   1005c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10060:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10064:	781b      	ldrb	r3, [r3, #0]
   10066:	2bff      	cmp	r3, #255	; 0xff
   10068:	d105      	bne.n	10076 <send_radIR+0xca>
   1006a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1006e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10072:	2200      	movs	r2, #0
   10074:	701a      	strb	r2, [r3, #0]
   10076:	f24c 5349 	movw	r3, #50505	; 0xc549
   1007a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1007e:	781b      	ldrb	r3, [r3, #0]
   10080:	461a      	mov	r2, r3
   10082:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10086:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1008a:	2105      	movs	r1, #5
   1008c:	5499      	strb	r1, [r3, r2]
   1008e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10092:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10096:	781b      	ldrb	r3, [r3, #0]
   10098:	3301      	adds	r3, #1
   1009a:	b2da      	uxtb	r2, r3
   1009c:	f24c 5349 	movw	r3, #50505	; 0xc549
   100a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100a4:	701a      	strb	r2, [r3, #0]
   100a6:	f24c 5349 	movw	r3, #50505	; 0xc549
   100aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100ae:	781b      	ldrb	r3, [r3, #0]
   100b0:	2bff      	cmp	r3, #255	; 0xff
   100b2:	d105      	bne.n	100c0 <send_radIR+0x114>
   100b4:	f24c 5349 	movw	r3, #50505	; 0xc549
   100b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100bc:	2200      	movs	r2, #0
   100be:	701a      	strb	r2, [r3, #0]
   100c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
   100c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100c8:	2205      	movs	r2, #5
   100ca:	701a      	strb	r2, [r3, #0]
   100cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
   100d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100d4:	2205      	movs	r2, #5
   100d6:	701a      	strb	r2, [r3, #0]
   100d8:	f24c 5349 	movw	r3, #50505	; 0xc549
   100dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100e0:	781b      	ldrb	r3, [r3, #0]
   100e2:	461a      	mov	r2, r3
   100e4:	f64c 3340 	movw	r3, #52032	; 0xcb40
   100e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100ec:	7819      	ldrb	r1, [r3, #0]
   100ee:	f24c 534c 	movw	r3, #50508	; 0xc54c
   100f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100f6:	5499      	strb	r1, [r3, r2]
   100f8:	f64c 3340 	movw	r3, #52032	; 0xcb40
   100fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10100:	781a      	ldrb	r2, [r3, #0]
   10102:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10106:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1010a:	781b      	ldrb	r3, [r3, #0]
   1010c:	4413      	add	r3, r2
   1010e:	b2da      	uxtb	r2, r3
   10110:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10114:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10118:	701a      	strb	r2, [r3, #0]
   1011a:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1011e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10122:	781a      	ldrb	r2, [r3, #0]
   10124:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10128:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1012c:	781b      	ldrb	r3, [r3, #0]
   1012e:	4413      	add	r3, r2
   10130:	b2da      	uxtb	r2, r3
   10132:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10136:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1013a:	701a      	strb	r2, [r3, #0]
   1013c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10140:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10144:	781b      	ldrb	r3, [r3, #0]
   10146:	3301      	adds	r3, #1
   10148:	b2da      	uxtb	r2, r3
   1014a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1014e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10152:	701a      	strb	r2, [r3, #0]
   10154:	f24c 5349 	movw	r3, #50505	; 0xc549
   10158:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1015c:	781b      	ldrb	r3, [r3, #0]
   1015e:	2bff      	cmp	r3, #255	; 0xff
   10160:	d105      	bne.n	1016e <send_radIR+0x1c2>
   10162:	f24c 5349 	movw	r3, #50505	; 0xc549
   10166:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1016a:	2200      	movs	r2, #0
   1016c:	701a      	strb	r2, [r3, #0]
   1016e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10172:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10176:	781b      	ldrb	r3, [r3, #0]
   10178:	461a      	mov	r2, r3
   1017a:	f64c 3340 	movw	r3, #52032	; 0xcb40
   1017e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10182:	7859      	ldrb	r1, [r3, #1]
   10184:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10188:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1018c:	5499      	strb	r1, [r3, r2]
   1018e:	4bd2      	ldr	r3, [pc, #840]	; (104d8 <send_radIR+0x52c>)
   10190:	781a      	ldrb	r2, [r3, #0]
   10192:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10196:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1019a:	781b      	ldrb	r3, [r3, #0]
   1019c:	4413      	add	r3, r2
   1019e:	b2da      	uxtb	r2, r3
   101a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
   101a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101a8:	701a      	strb	r2, [r3, #0]
   101aa:	f24c 634e 	movw	r3, #50766	; 0xc64e
   101ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101b2:	781a      	ldrb	r2, [r3, #0]
   101b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
   101b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101bc:	781b      	ldrb	r3, [r3, #0]
   101be:	4413      	add	r3, r2
   101c0:	b2da      	uxtb	r2, r3
   101c2:	f24c 634e 	movw	r3, #50766	; 0xc64e
   101c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ca:	701a      	strb	r2, [r3, #0]
   101cc:	f24c 5349 	movw	r3, #50505	; 0xc549
   101d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101d4:	781b      	ldrb	r3, [r3, #0]
   101d6:	3301      	adds	r3, #1
   101d8:	b2da      	uxtb	r2, r3
   101da:	f24c 5349 	movw	r3, #50505	; 0xc549
   101de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101e2:	701a      	strb	r2, [r3, #0]
   101e4:	f24c 5349 	movw	r3, #50505	; 0xc549
   101e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ec:	781b      	ldrb	r3, [r3, #0]
   101ee:	2bff      	cmp	r3, #255	; 0xff
   101f0:	d105      	bne.n	101fe <send_radIR+0x252>
   101f2:	f24c 5349 	movw	r3, #50505	; 0xc549
   101f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101fa:	2200      	movs	r2, #0
   101fc:	701a      	strb	r2, [r3, #0]
   101fe:	f24c 5349 	movw	r3, #50505	; 0xc549
   10202:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10206:	781b      	ldrb	r3, [r3, #0]
   10208:	461a      	mov	r2, r3
   1020a:	f64c 3340 	movw	r3, #52032	; 0xcb40
   1020e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10212:	7899      	ldrb	r1, [r3, #2]
   10214:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10218:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1021c:	5499      	strb	r1, [r3, r2]
   1021e:	4baf      	ldr	r3, [pc, #700]	; (104dc <send_radIR+0x530>)
   10220:	781a      	ldrb	r2, [r3, #0]
   10222:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10226:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1022a:	781b      	ldrb	r3, [r3, #0]
   1022c:	4413      	add	r3, r2
   1022e:	b2da      	uxtb	r2, r3
   10230:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10234:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10238:	701a      	strb	r2, [r3, #0]
   1023a:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1023e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10242:	781a      	ldrb	r2, [r3, #0]
   10244:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10248:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1024c:	781b      	ldrb	r3, [r3, #0]
   1024e:	4413      	add	r3, r2
   10250:	b2da      	uxtb	r2, r3
   10252:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10256:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1025a:	701a      	strb	r2, [r3, #0]
   1025c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10260:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10264:	781b      	ldrb	r3, [r3, #0]
   10266:	3301      	adds	r3, #1
   10268:	b2da      	uxtb	r2, r3
   1026a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1026e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10272:	701a      	strb	r2, [r3, #0]
   10274:	f24c 5349 	movw	r3, #50505	; 0xc549
   10278:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1027c:	781b      	ldrb	r3, [r3, #0]
   1027e:	2bff      	cmp	r3, #255	; 0xff
   10280:	d105      	bne.n	1028e <send_radIR+0x2e2>
   10282:	f24c 5349 	movw	r3, #50505	; 0xc549
   10286:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1028a:	2200      	movs	r2, #0
   1028c:	701a      	strb	r2, [r3, #0]
   1028e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10292:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10296:	781b      	ldrb	r3, [r3, #0]
   10298:	461a      	mov	r2, r3
   1029a:	f64c 3340 	movw	r3, #52032	; 0xcb40
   1029e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102a2:	78d9      	ldrb	r1, [r3, #3]
   102a4:	f24c 534c 	movw	r3, #50508	; 0xc54c
   102a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ac:	5499      	strb	r1, [r3, r2]
   102ae:	4b8c      	ldr	r3, [pc, #560]	; (104e0 <send_radIR+0x534>)
   102b0:	781a      	ldrb	r2, [r3, #0]
   102b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
   102b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ba:	781b      	ldrb	r3, [r3, #0]
   102bc:	4413      	add	r3, r2
   102be:	b2da      	uxtb	r2, r3
   102c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
   102c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102c8:	701a      	strb	r2, [r3, #0]
   102ca:	f24c 634e 	movw	r3, #50766	; 0xc64e
   102ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102d2:	781a      	ldrb	r2, [r3, #0]
   102d4:	f24c 634d 	movw	r3, #50765	; 0xc64d
   102d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102dc:	781b      	ldrb	r3, [r3, #0]
   102de:	4413      	add	r3, r2
   102e0:	b2da      	uxtb	r2, r3
   102e2:	f24c 634e 	movw	r3, #50766	; 0xc64e
   102e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ea:	701a      	strb	r2, [r3, #0]
   102ec:	f24c 5349 	movw	r3, #50505	; 0xc549
   102f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102f4:	781b      	ldrb	r3, [r3, #0]
   102f6:	3301      	adds	r3, #1
   102f8:	b2da      	uxtb	r2, r3
   102fa:	f24c 5349 	movw	r3, #50505	; 0xc549
   102fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10302:	701a      	strb	r2, [r3, #0]
   10304:	f24c 5349 	movw	r3, #50505	; 0xc549
   10308:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1030c:	781b      	ldrb	r3, [r3, #0]
   1030e:	2bff      	cmp	r3, #255	; 0xff
   10310:	d105      	bne.n	1031e <send_radIR+0x372>
   10312:	f24c 5349 	movw	r3, #50505	; 0xc549
   10316:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1031a:	2200      	movs	r2, #0
   1031c:	701a      	strb	r2, [r3, #0]
   1031e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10322:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10326:	781b      	ldrb	r3, [r3, #0]
   10328:	461a      	mov	r2, r3
   1032a:	f64c 3344 	movw	r3, #52036	; 0xcb44
   1032e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10332:	7819      	ldrb	r1, [r3, #0]
   10334:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10338:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1033c:	5499      	strb	r1, [r3, r2]
   1033e:	f64c 3344 	movw	r3, #52036	; 0xcb44
   10342:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10346:	781a      	ldrb	r2, [r3, #0]
   10348:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1034c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10350:	781b      	ldrb	r3, [r3, #0]
   10352:	4413      	add	r3, r2
   10354:	b2da      	uxtb	r2, r3
   10356:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1035a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1035e:	701a      	strb	r2, [r3, #0]
   10360:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10364:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10368:	781a      	ldrb	r2, [r3, #0]
   1036a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1036e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10372:	781b      	ldrb	r3, [r3, #0]
   10374:	4413      	add	r3, r2
   10376:	b2da      	uxtb	r2, r3
   10378:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1037c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10380:	701a      	strb	r2, [r3, #0]
   10382:	f24c 5349 	movw	r3, #50505	; 0xc549
   10386:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1038a:	781b      	ldrb	r3, [r3, #0]
   1038c:	3301      	adds	r3, #1
   1038e:	b2da      	uxtb	r2, r3
   10390:	f24c 5349 	movw	r3, #50505	; 0xc549
   10394:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10398:	701a      	strb	r2, [r3, #0]
   1039a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1039e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103a2:	781b      	ldrb	r3, [r3, #0]
   103a4:	2bff      	cmp	r3, #255	; 0xff
   103a6:	d105      	bne.n	103b4 <send_radIR+0x408>
   103a8:	f24c 5349 	movw	r3, #50505	; 0xc549
   103ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103b0:	2200      	movs	r2, #0
   103b2:	701a      	strb	r2, [r3, #0]
   103b4:	f24c 5349 	movw	r3, #50505	; 0xc549
   103b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103bc:	781b      	ldrb	r3, [r3, #0]
   103be:	461a      	mov	r2, r3
   103c0:	f64c 3344 	movw	r3, #52036	; 0xcb44
   103c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103c8:	7859      	ldrb	r1, [r3, #1]
   103ca:	f24c 534c 	movw	r3, #50508	; 0xc54c
   103ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103d2:	5499      	strb	r1, [r3, r2]
   103d4:	4b43      	ldr	r3, [pc, #268]	; (104e4 <send_radIR+0x538>)
   103d6:	781a      	ldrb	r2, [r3, #0]
   103d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   103dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103e0:	781b      	ldrb	r3, [r3, #0]
   103e2:	4413      	add	r3, r2
   103e4:	b2da      	uxtb	r2, r3
   103e6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   103ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103ee:	701a      	strb	r2, [r3, #0]
   103f0:	f24c 634e 	movw	r3, #50766	; 0xc64e
   103f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103f8:	781a      	ldrb	r2, [r3, #0]
   103fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
   103fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10402:	781b      	ldrb	r3, [r3, #0]
   10404:	4413      	add	r3, r2
   10406:	b2da      	uxtb	r2, r3
   10408:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1040c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10410:	701a      	strb	r2, [r3, #0]
   10412:	f24c 5349 	movw	r3, #50505	; 0xc549
   10416:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1041a:	781b      	ldrb	r3, [r3, #0]
   1041c:	3301      	adds	r3, #1
   1041e:	b2da      	uxtb	r2, r3
   10420:	f24c 5349 	movw	r3, #50505	; 0xc549
   10424:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10428:	701a      	strb	r2, [r3, #0]
   1042a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1042e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10432:	781b      	ldrb	r3, [r3, #0]
   10434:	2bff      	cmp	r3, #255	; 0xff
   10436:	d105      	bne.n	10444 <send_radIR+0x498>
   10438:	f24c 5349 	movw	r3, #50505	; 0xc549
   1043c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10440:	2200      	movs	r2, #0
   10442:	701a      	strb	r2, [r3, #0]
   10444:	f24c 5349 	movw	r3, #50505	; 0xc549
   10448:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1044c:	781b      	ldrb	r3, [r3, #0]
   1044e:	461a      	mov	r2, r3
   10450:	f64c 3344 	movw	r3, #52036	; 0xcb44
   10454:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10458:	7899      	ldrb	r1, [r3, #2]
   1045a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1045e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10462:	5499      	strb	r1, [r3, r2]
   10464:	4b20      	ldr	r3, [pc, #128]	; (104e8 <send_radIR+0x53c>)
   10466:	781a      	ldrb	r2, [r3, #0]
   10468:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1046c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10470:	781b      	ldrb	r3, [r3, #0]
   10472:	4413      	add	r3, r2
   10474:	b2da      	uxtb	r2, r3
   10476:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1047a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1047e:	701a      	strb	r2, [r3, #0]
   10480:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10484:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10488:	781a      	ldrb	r2, [r3, #0]
   1048a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1048e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10492:	781b      	ldrb	r3, [r3, #0]
   10494:	4413      	add	r3, r2
   10496:	b2da      	uxtb	r2, r3
   10498:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1049c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104a0:	701a      	strb	r2, [r3, #0]
   104a2:	f24c 5349 	movw	r3, #50505	; 0xc549
   104a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104aa:	781b      	ldrb	r3, [r3, #0]
   104ac:	3301      	adds	r3, #1
   104ae:	b2da      	uxtb	r2, r3
   104b0:	f24c 5349 	movw	r3, #50505	; 0xc549
   104b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104b8:	701a      	strb	r2, [r3, #0]
   104ba:	f24c 5349 	movw	r3, #50505	; 0xc549
   104be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104c2:	781b      	ldrb	r3, [r3, #0]
   104c4:	2bff      	cmp	r3, #255	; 0xff
   104c6:	d111      	bne.n	104ec <send_radIR+0x540>
   104c8:	f24c 5349 	movw	r3, #50505	; 0xc549
   104cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104d0:	2200      	movs	r2, #0
   104d2:	701a      	strb	r2, [r3, #0]
   104d4:	e00a      	b.n	104ec <send_radIR+0x540>
   104d6:	bf00      	nop
   104d8:	2004cb41 	.word	0x2004cb41
   104dc:	2004cb42 	.word	0x2004cb42
   104e0:	2004cb43 	.word	0x2004cb43
   104e4:	2004cb45 	.word	0x2004cb45
   104e8:	2004cb46 	.word	0x2004cb46
   104ec:	f24c 5349 	movw	r3, #50505	; 0xc549
   104f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104f4:	781b      	ldrb	r3, [r3, #0]
   104f6:	461a      	mov	r2, r3
   104f8:	f64c 3344 	movw	r3, #52036	; 0xcb44
   104fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10500:	78d9      	ldrb	r1, [r3, #3]
   10502:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10506:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1050a:	5499      	strb	r1, [r3, r2]
   1050c:	4bd3      	ldr	r3, [pc, #844]	; (1085c <send_radIR+0x8b0>)
   1050e:	781a      	ldrb	r2, [r3, #0]
   10510:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10514:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10518:	781b      	ldrb	r3, [r3, #0]
   1051a:	4413      	add	r3, r2
   1051c:	b2da      	uxtb	r2, r3
   1051e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10522:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10526:	701a      	strb	r2, [r3, #0]
   10528:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1052c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10530:	781a      	ldrb	r2, [r3, #0]
   10532:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10536:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1053a:	781b      	ldrb	r3, [r3, #0]
   1053c:	4413      	add	r3, r2
   1053e:	b2da      	uxtb	r2, r3
   10540:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10544:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10548:	701a      	strb	r2, [r3, #0]
   1054a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1054e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10552:	781b      	ldrb	r3, [r3, #0]
   10554:	3301      	adds	r3, #1
   10556:	b2da      	uxtb	r2, r3
   10558:	f24c 5349 	movw	r3, #50505	; 0xc549
   1055c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10560:	701a      	strb	r2, [r3, #0]
   10562:	f24c 5349 	movw	r3, #50505	; 0xc549
   10566:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1056a:	781b      	ldrb	r3, [r3, #0]
   1056c:	2bff      	cmp	r3, #255	; 0xff
   1056e:	d105      	bne.n	1057c <send_radIR+0x5d0>
   10570:	f24c 5349 	movw	r3, #50505	; 0xc549
   10574:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10578:	2200      	movs	r2, #0
   1057a:	701a      	strb	r2, [r3, #0]
   1057c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10580:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10584:	781b      	ldrb	r3, [r3, #0]
   10586:	461a      	mov	r2, r3
   10588:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   1058c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10590:	7819      	ldrb	r1, [r3, #0]
   10592:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10596:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1059a:	5499      	strb	r1, [r3, r2]
   1059c:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   105a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105a4:	781a      	ldrb	r2, [r3, #0]
   105a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   105aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ae:	781b      	ldrb	r3, [r3, #0]
   105b0:	4413      	add	r3, r2
   105b2:	b2da      	uxtb	r2, r3
   105b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
   105b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105bc:	701a      	strb	r2, [r3, #0]
   105be:	f24c 634e 	movw	r3, #50766	; 0xc64e
   105c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105c6:	781a      	ldrb	r2, [r3, #0]
   105c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   105cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105d0:	781b      	ldrb	r3, [r3, #0]
   105d2:	4413      	add	r3, r2
   105d4:	b2da      	uxtb	r2, r3
   105d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   105da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105de:	701a      	strb	r2, [r3, #0]
   105e0:	f24c 5349 	movw	r3, #50505	; 0xc549
   105e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105e8:	781b      	ldrb	r3, [r3, #0]
   105ea:	3301      	adds	r3, #1
   105ec:	b2da      	uxtb	r2, r3
   105ee:	f24c 5349 	movw	r3, #50505	; 0xc549
   105f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105f6:	701a      	strb	r2, [r3, #0]
   105f8:	f24c 5349 	movw	r3, #50505	; 0xc549
   105fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10600:	781b      	ldrb	r3, [r3, #0]
   10602:	2bff      	cmp	r3, #255	; 0xff
   10604:	d105      	bne.n	10612 <send_radIR+0x666>
   10606:	f24c 5349 	movw	r3, #50505	; 0xc549
   1060a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1060e:	2200      	movs	r2, #0
   10610:	701a      	strb	r2, [r3, #0]
   10612:	f24c 5349 	movw	r3, #50505	; 0xc549
   10616:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1061a:	781b      	ldrb	r3, [r3, #0]
   1061c:	461a      	mov	r2, r3
   1061e:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   10622:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10626:	7859      	ldrb	r1, [r3, #1]
   10628:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1062c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10630:	5499      	strb	r1, [r3, r2]
   10632:	4b8b      	ldr	r3, [pc, #556]	; (10860 <send_radIR+0x8b4>)
   10634:	781a      	ldrb	r2, [r3, #0]
   10636:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1063a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1063e:	781b      	ldrb	r3, [r3, #0]
   10640:	4413      	add	r3, r2
   10642:	b2da      	uxtb	r2, r3
   10644:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10648:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1064c:	701a      	strb	r2, [r3, #0]
   1064e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10652:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10656:	781a      	ldrb	r2, [r3, #0]
   10658:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1065c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10660:	781b      	ldrb	r3, [r3, #0]
   10662:	4413      	add	r3, r2
   10664:	b2da      	uxtb	r2, r3
   10666:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1066a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1066e:	701a      	strb	r2, [r3, #0]
   10670:	f24c 5349 	movw	r3, #50505	; 0xc549
   10674:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10678:	781b      	ldrb	r3, [r3, #0]
   1067a:	3301      	adds	r3, #1
   1067c:	b2da      	uxtb	r2, r3
   1067e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10682:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10686:	701a      	strb	r2, [r3, #0]
   10688:	f24c 5349 	movw	r3, #50505	; 0xc549
   1068c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10690:	781b      	ldrb	r3, [r3, #0]
   10692:	2bff      	cmp	r3, #255	; 0xff
   10694:	d105      	bne.n	106a2 <send_radIR+0x6f6>
   10696:	f24c 5349 	movw	r3, #50505	; 0xc549
   1069a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1069e:	2200      	movs	r2, #0
   106a0:	701a      	strb	r2, [r3, #0]
   106a2:	f24c 5349 	movw	r3, #50505	; 0xc549
   106a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106aa:	781b      	ldrb	r3, [r3, #0]
   106ac:	461a      	mov	r2, r3
   106ae:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   106b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106b6:	7899      	ldrb	r1, [r3, #2]
   106b8:	f24c 534c 	movw	r3, #50508	; 0xc54c
   106bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106c0:	5499      	strb	r1, [r3, r2]
   106c2:	4b68      	ldr	r3, [pc, #416]	; (10864 <send_radIR+0x8b8>)
   106c4:	781a      	ldrb	r2, [r3, #0]
   106c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   106ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ce:	781b      	ldrb	r3, [r3, #0]
   106d0:	4413      	add	r3, r2
   106d2:	b2da      	uxtb	r2, r3
   106d4:	f24c 634d 	movw	r3, #50765	; 0xc64d
   106d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106dc:	701a      	strb	r2, [r3, #0]
   106de:	f24c 634e 	movw	r3, #50766	; 0xc64e
   106e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106e6:	781a      	ldrb	r2, [r3, #0]
   106e8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   106ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106f0:	781b      	ldrb	r3, [r3, #0]
   106f2:	4413      	add	r3, r2
   106f4:	b2da      	uxtb	r2, r3
   106f6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   106fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106fe:	701a      	strb	r2, [r3, #0]
   10700:	f24c 5349 	movw	r3, #50505	; 0xc549
   10704:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10708:	781b      	ldrb	r3, [r3, #0]
   1070a:	3301      	adds	r3, #1
   1070c:	b2da      	uxtb	r2, r3
   1070e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10712:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10716:	701a      	strb	r2, [r3, #0]
   10718:	f24c 5349 	movw	r3, #50505	; 0xc549
   1071c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10720:	781b      	ldrb	r3, [r3, #0]
   10722:	2bff      	cmp	r3, #255	; 0xff
   10724:	d105      	bne.n	10732 <send_radIR+0x786>
   10726:	f24c 5349 	movw	r3, #50505	; 0xc549
   1072a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1072e:	2200      	movs	r2, #0
   10730:	701a      	strb	r2, [r3, #0]
   10732:	f24c 5349 	movw	r3, #50505	; 0xc549
   10736:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1073a:	781b      	ldrb	r3, [r3, #0]
   1073c:	461a      	mov	r2, r3
   1073e:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   10742:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10746:	78d9      	ldrb	r1, [r3, #3]
   10748:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1074c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10750:	5499      	strb	r1, [r3, r2]
   10752:	4b45      	ldr	r3, [pc, #276]	; (10868 <send_radIR+0x8bc>)
   10754:	781a      	ldrb	r2, [r3, #0]
   10756:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1075a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1075e:	781b      	ldrb	r3, [r3, #0]
   10760:	4413      	add	r3, r2
   10762:	b2da      	uxtb	r2, r3
   10764:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10768:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1076c:	701a      	strb	r2, [r3, #0]
   1076e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10772:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10776:	781a      	ldrb	r2, [r3, #0]
   10778:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1077c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10780:	781b      	ldrb	r3, [r3, #0]
   10782:	4413      	add	r3, r2
   10784:	b2da      	uxtb	r2, r3
   10786:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1078a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1078e:	701a      	strb	r2, [r3, #0]
   10790:	f24c 5349 	movw	r3, #50505	; 0xc549
   10794:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10798:	781b      	ldrb	r3, [r3, #0]
   1079a:	3301      	adds	r3, #1
   1079c:	b2da      	uxtb	r2, r3
   1079e:	f24c 5349 	movw	r3, #50505	; 0xc549
   107a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107a6:	701a      	strb	r2, [r3, #0]
   107a8:	f24c 5349 	movw	r3, #50505	; 0xc549
   107ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107b0:	781b      	ldrb	r3, [r3, #0]
   107b2:	2bff      	cmp	r3, #255	; 0xff
   107b4:	d105      	bne.n	107c2 <send_radIR+0x816>
   107b6:	f24c 5349 	movw	r3, #50505	; 0xc549
   107ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107be:	2200      	movs	r2, #0
   107c0:	701a      	strb	r2, [r3, #0]
   107c2:	f24c 5349 	movw	r3, #50505	; 0xc549
   107c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107ca:	781b      	ldrb	r3, [r3, #0]
   107cc:	461a      	mov	r2, r3
   107ce:	f240 5342 	movw	r3, #1346	; 0x542
   107d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107d6:	7819      	ldrb	r1, [r3, #0]
   107d8:	f24c 534c 	movw	r3, #50508	; 0xc54c
   107dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107e0:	5499      	strb	r1, [r3, r2]
   107e2:	f240 5342 	movw	r3, #1346	; 0x542
   107e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107ea:	781a      	ldrb	r2, [r3, #0]
   107ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
   107f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107f4:	781b      	ldrb	r3, [r3, #0]
   107f6:	4413      	add	r3, r2
   107f8:	b2da      	uxtb	r2, r3
   107fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
   107fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10802:	701a      	strb	r2, [r3, #0]
   10804:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10808:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1080c:	781a      	ldrb	r2, [r3, #0]
   1080e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10812:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10816:	781b      	ldrb	r3, [r3, #0]
   10818:	4413      	add	r3, r2
   1081a:	b2da      	uxtb	r2, r3
   1081c:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10820:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10824:	701a      	strb	r2, [r3, #0]
   10826:	f24c 5349 	movw	r3, #50505	; 0xc549
   1082a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1082e:	781b      	ldrb	r3, [r3, #0]
   10830:	3301      	adds	r3, #1
   10832:	b2da      	uxtb	r2, r3
   10834:	f24c 5349 	movw	r3, #50505	; 0xc549
   10838:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1083c:	701a      	strb	r2, [r3, #0]
   1083e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10842:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10846:	781b      	ldrb	r3, [r3, #0]
   10848:	2bff      	cmp	r3, #255	; 0xff
   1084a:	d10f      	bne.n	1086c <send_radIR+0x8c0>
   1084c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10850:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10854:	2200      	movs	r2, #0
   10856:	701a      	strb	r2, [r3, #0]
   10858:	e008      	b.n	1086c <send_radIR+0x8c0>
   1085a:	bf00      	nop
   1085c:	2004cb47 	.word	0x2004cb47
   10860:	2004cb3d 	.word	0x2004cb3d
   10864:	2004cb3e 	.word	0x2004cb3e
   10868:	2004cb3f 	.word	0x2004cb3f
   1086c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10870:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10874:	781b      	ldrb	r3, [r3, #0]
   10876:	461a      	mov	r2, r3
   10878:	f240 5342 	movw	r3, #1346	; 0x542
   1087c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10880:	7859      	ldrb	r1, [r3, #1]
   10882:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10886:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1088a:	5499      	strb	r1, [r3, r2]
   1088c:	4bc2      	ldr	r3, [pc, #776]	; (10b98 <send_radIR+0xbec>)
   1088e:	781a      	ldrb	r2, [r3, #0]
   10890:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10894:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10898:	781b      	ldrb	r3, [r3, #0]
   1089a:	4413      	add	r3, r2
   1089c:	b2da      	uxtb	r2, r3
   1089e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   108a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108a6:	701a      	strb	r2, [r3, #0]
   108a8:	f24c 634e 	movw	r3, #50766	; 0xc64e
   108ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108b0:	781a      	ldrb	r2, [r3, #0]
   108b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
   108b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108ba:	781b      	ldrb	r3, [r3, #0]
   108bc:	4413      	add	r3, r2
   108be:	b2da      	uxtb	r2, r3
   108c0:	f24c 634e 	movw	r3, #50766	; 0xc64e
   108c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108c8:	701a      	strb	r2, [r3, #0]
   108ca:	f24c 5349 	movw	r3, #50505	; 0xc549
   108ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108d2:	781b      	ldrb	r3, [r3, #0]
   108d4:	3301      	adds	r3, #1
   108d6:	b2da      	uxtb	r2, r3
   108d8:	f24c 5349 	movw	r3, #50505	; 0xc549
   108dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108e0:	701a      	strb	r2, [r3, #0]
   108e2:	f24c 5349 	movw	r3, #50505	; 0xc549
   108e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108ea:	781b      	ldrb	r3, [r3, #0]
   108ec:	2bff      	cmp	r3, #255	; 0xff
   108ee:	d105      	bne.n	108fc <send_radIR+0x950>
   108f0:	f24c 5349 	movw	r3, #50505	; 0xc549
   108f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108f8:	2200      	movs	r2, #0
   108fa:	701a      	strb	r2, [r3, #0]
   108fc:	f24c 5349 	movw	r3, #50505	; 0xc549
   10900:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10904:	781b      	ldrb	r3, [r3, #0]
   10906:	461a      	mov	r2, r3
   10908:	f240 5344 	movw	r3, #1348	; 0x544
   1090c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10910:	7819      	ldrb	r1, [r3, #0]
   10912:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10916:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1091a:	5499      	strb	r1, [r3, r2]
   1091c:	f240 5344 	movw	r3, #1348	; 0x544
   10920:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10924:	781a      	ldrb	r2, [r3, #0]
   10926:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1092a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1092e:	781b      	ldrb	r3, [r3, #0]
   10930:	4413      	add	r3, r2
   10932:	b2da      	uxtb	r2, r3
   10934:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10938:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1093c:	701a      	strb	r2, [r3, #0]
   1093e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10942:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10946:	781a      	ldrb	r2, [r3, #0]
   10948:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1094c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10950:	781b      	ldrb	r3, [r3, #0]
   10952:	4413      	add	r3, r2
   10954:	b2da      	uxtb	r2, r3
   10956:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1095a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1095e:	701a      	strb	r2, [r3, #0]
   10960:	f24c 5349 	movw	r3, #50505	; 0xc549
   10964:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10968:	781b      	ldrb	r3, [r3, #0]
   1096a:	3301      	adds	r3, #1
   1096c:	b2da      	uxtb	r2, r3
   1096e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10972:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10976:	701a      	strb	r2, [r3, #0]
   10978:	f24c 5349 	movw	r3, #50505	; 0xc549
   1097c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10980:	781b      	ldrb	r3, [r3, #0]
   10982:	2bff      	cmp	r3, #255	; 0xff
   10984:	d105      	bne.n	10992 <send_radIR+0x9e6>
   10986:	f24c 5349 	movw	r3, #50505	; 0xc549
   1098a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1098e:	2200      	movs	r2, #0
   10990:	701a      	strb	r2, [r3, #0]
   10992:	f24c 5349 	movw	r3, #50505	; 0xc549
   10996:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1099a:	781b      	ldrb	r3, [r3, #0]
   1099c:	461a      	mov	r2, r3
   1099e:	f240 5344 	movw	r3, #1348	; 0x544
   109a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109a6:	7859      	ldrb	r1, [r3, #1]
   109a8:	f24c 534c 	movw	r3, #50508	; 0xc54c
   109ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109b0:	5499      	strb	r1, [r3, r2]
   109b2:	4b7a      	ldr	r3, [pc, #488]	; (10b9c <send_radIR+0xbf0>)
   109b4:	781a      	ldrb	r2, [r3, #0]
   109b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   109ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109be:	781b      	ldrb	r3, [r3, #0]
   109c0:	4413      	add	r3, r2
   109c2:	b2da      	uxtb	r2, r3
   109c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
   109c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109cc:	701a      	strb	r2, [r3, #0]
   109ce:	f24c 634e 	movw	r3, #50766	; 0xc64e
   109d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109d6:	781a      	ldrb	r2, [r3, #0]
   109d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   109dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109e0:	781b      	ldrb	r3, [r3, #0]
   109e2:	4413      	add	r3, r2
   109e4:	b2da      	uxtb	r2, r3
   109e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   109ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109ee:	701a      	strb	r2, [r3, #0]
   109f0:	f24c 5349 	movw	r3, #50505	; 0xc549
   109f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109f8:	781b      	ldrb	r3, [r3, #0]
   109fa:	3301      	adds	r3, #1
   109fc:	b2da      	uxtb	r2, r3
   109fe:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a06:	701a      	strb	r2, [r3, #0]
   10a08:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a10:	781b      	ldrb	r3, [r3, #0]
   10a12:	2bff      	cmp	r3, #255	; 0xff
   10a14:	d105      	bne.n	10a22 <send_radIR+0xa76>
   10a16:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a1e:	2200      	movs	r2, #0
   10a20:	701a      	strb	r2, [r3, #0]
   10a22:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a2a:	781b      	ldrb	r3, [r3, #0]
   10a2c:	461a      	mov	r2, r3
   10a2e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a36:	7819      	ldrb	r1, [r3, #0]
   10a38:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10a3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a40:	5499      	strb	r1, [r3, r2]
   10a42:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a4a:	781b      	ldrb	r3, [r3, #0]
   10a4c:	3301      	adds	r3, #1
   10a4e:	b2da      	uxtb	r2, r3
   10a50:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a58:	701a      	strb	r2, [r3, #0]
   10a5a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a62:	781b      	ldrb	r3, [r3, #0]
   10a64:	2bff      	cmp	r3, #255	; 0xff
   10a66:	d105      	bne.n	10a74 <send_radIR+0xac8>
   10a68:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a70:	2200      	movs	r2, #0
   10a72:	701a      	strb	r2, [r3, #0]
   10a74:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a7c:	781b      	ldrb	r3, [r3, #0]
   10a7e:	461a      	mov	r2, r3
   10a80:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a88:	7819      	ldrb	r1, [r3, #0]
   10a8a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a92:	5499      	strb	r1, [r3, r2]
   10a94:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a9c:	781b      	ldrb	r3, [r3, #0]
   10a9e:	3301      	adds	r3, #1
   10aa0:	b2da      	uxtb	r2, r3
   10aa2:	f24c 5349 	movw	r3, #50505	; 0xc549
   10aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aaa:	701a      	strb	r2, [r3, #0]
   10aac:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ab4:	781b      	ldrb	r3, [r3, #0]
   10ab6:	2bff      	cmp	r3, #255	; 0xff
   10ab8:	d105      	bne.n	10ac6 <send_radIR+0xb1a>
   10aba:	f24c 5349 	movw	r3, #50505	; 0xc549
   10abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ac2:	2200      	movs	r2, #0
   10ac4:	701a      	strb	r2, [r3, #0]
   10ac6:	f242 0339 	movw	r3, #8249	; 0x2039
   10aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ace:	781b      	ldrb	r3, [r3, #0]
   10ad0:	b2db      	uxtb	r3, r3
   10ad2:	f003 0310 	and.w	r3, r3, #16
   10ad6:	2b00      	cmp	r3, #0
   10ad8:	d15a      	bne.n	10b90 <send_radIR+0xbe4>
   10ada:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ae2:	781b      	ldrb	r3, [r3, #0]
   10ae4:	b2db      	uxtb	r3, r3
   10ae6:	461a      	mov	r2, r3
   10ae8:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10af0:	5c9a      	ldrb	r2, [r3, r2]
   10af2:	f24c 634b 	movw	r3, #50763	; 0xc64b
   10af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10afa:	701a      	strb	r2, [r3, #0]
   10afc:	f24c 634c 	movw	r3, #50764	; 0xc64c
   10b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b04:	2200      	movs	r2, #0
   10b06:	701a      	strb	r2, [r3, #0]
   10b08:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b10:	781b      	ldrb	r3, [r3, #0]
   10b12:	b2db      	uxtb	r3, r3
   10b14:	3301      	adds	r3, #1
   10b16:	b2da      	uxtb	r2, r3
   10b18:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b20:	701a      	strb	r2, [r3, #0]
   10b22:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b2a:	781b      	ldrb	r3, [r3, #0]
   10b2c:	b2db      	uxtb	r3, r3
   10b2e:	2bff      	cmp	r3, #255	; 0xff
   10b30:	d105      	bne.n	10b3e <send_radIR+0xb92>
   10b32:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b3a:	2200      	movs	r2, #0
   10b3c:	701a      	strb	r2, [r3, #0]
   10b3e:	f242 0338 	movw	r3, #8248	; 0x2038
   10b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b46:	f242 0238 	movw	r2, #8248	; 0x2038
   10b4a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b4e:	7812      	ldrb	r2, [r2, #0]
   10b50:	b2d2      	uxtb	r2, r2
   10b52:	f042 0201 	orr.w	r2, r2, #1
   10b56:	b2d2      	uxtb	r2, r2
   10b58:	701a      	strb	r2, [r3, #0]
   10b5a:	f242 0339 	movw	r3, #8249	; 0x2039
   10b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b62:	f242 0239 	movw	r2, #8249	; 0x2039
   10b66:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b6a:	7812      	ldrb	r2, [r2, #0]
   10b6c:	b2d2      	uxtb	r2, r2
   10b6e:	f042 0210 	orr.w	r2, r2, #16
   10b72:	b2d2      	uxtb	r2, r2
   10b74:	701a      	strb	r2, [r3, #0]
   10b76:	e00b      	b.n	10b90 <send_radIR+0xbe4>
   10b78:	f24c 5348 	movw	r3, #50504	; 0xc548
   10b7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b80:	781b      	ldrb	r3, [r3, #0]
   10b82:	3301      	adds	r3, #1
   10b84:	b2da      	uxtb	r2, r3
   10b86:	f24c 5348 	movw	r3, #50504	; 0xc548
   10b8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b8e:	701a      	strb	r2, [r3, #0]
}
   10b90:	46bd      	mov	sp, r7
   10b92:	f85d 7b04 	ldr.w	r7, [sp], #4
   10b96:	4770      	bx	lr
   10b98:	20000543 	.word	0x20000543
   10b9c:	20000545 	.word	0x20000545

00010ba0 <send_takeOff>:

void send_takeOff(void){
   10ba0:	b580      	push	{r7, lr}
   10ba2:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   10ba4:	f24c 63de 	movw	r3, #50910	; 0xc6de
   10ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bac:	781b      	ldrb	r3, [r3, #0]
   10bae:	2b00      	cmp	r3, #0
   10bb0:	f000 8200 	beq.w	10fb4 <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   10bb4:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   10bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bbc:	881b      	ldrh	r3, [r3, #0]
   10bbe:	2b00      	cmp	r3, #0
   10bc0:	f040 81f2 	bne.w	10fa8 <send_takeOff+0x408>
   10bc4:	f64c 3334 	movw	r3, #52020	; 0xcb34
   10bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bcc:	681b      	ldr	r3, [r3, #0]
   10bce:	4618      	mov	r0, r3
   10bd0:	f04f 0100 	mov.w	r1, #0
   10bd4:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   10bd8:	f007 fe44 	bl	18864 <__aeabi_fcmpgt>
   10bdc:	4603      	mov	r3, r0
   10bde:	2b00      	cmp	r3, #0
   10be0:	f000 81e2 	beq.w	10fa8 <send_takeOff+0x408>
        estimator_flight_time = 1;
   10be4:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   10be8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bec:	2201      	movs	r2, #1
   10bee:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   10bf0:	f24c 5340 	movw	r3, #50496	; 0xc540
   10bf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bf8:	2201      	movs	r2, #1
   10bfa:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   10bfc:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c04:	781a      	ldrb	r2, [r3, #0]
   10c06:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c0e:	781b      	ldrb	r3, [r3, #0]
   10c10:	b2db      	uxtb	r3, r3
   10c12:	429a      	cmp	r2, r3
   10c14:	d313      	bcc.n	10c3e <send_takeOff+0x9e>
   10c16:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c1e:	781b      	ldrb	r3, [r3, #0]
   10c20:	b2db      	uxtb	r3, r3
   10c22:	461a      	mov	r2, r3
   10c24:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c2c:	781b      	ldrb	r3, [r3, #0]
   10c2e:	1ad3      	subs	r3, r2, r3
   10c30:	33ff      	adds	r3, #255	; 0xff
   10c32:	2b06      	cmp	r3, #6
   10c34:	bfd4      	ite	le
   10c36:	2300      	movle	r3, #0
   10c38:	2301      	movgt	r3, #1
   10c3a:	b2db      	uxtb	r3, r3
   10c3c:	e011      	b.n	10c62 <send_takeOff+0xc2>
   10c3e:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c46:	781b      	ldrb	r3, [r3, #0]
   10c48:	b2db      	uxtb	r3, r3
   10c4a:	461a      	mov	r2, r3
   10c4c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c54:	781b      	ldrb	r3, [r3, #0]
   10c56:	1ad3      	subs	r3, r2, r3
   10c58:	2b06      	cmp	r3, #6
   10c5a:	bfd4      	ite	le
   10c5c:	2300      	movle	r3, #0
   10c5e:	2301      	movgt	r3, #1
   10c60:	b2db      	uxtb	r3, r3
   10c62:	2b00      	cmp	r3, #0
   10c64:	f000 8194 	beq.w	10f90 <send_takeOff+0x3f0>
   10c68:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c70:	781b      	ldrb	r3, [r3, #0]
   10c72:	461a      	mov	r2, r3
   10c74:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c7c:	2105      	movs	r1, #5
   10c7e:	5499      	strb	r1, [r3, r2]
   10c80:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c88:	781b      	ldrb	r3, [r3, #0]
   10c8a:	3301      	adds	r3, #1
   10c8c:	b2da      	uxtb	r2, r3
   10c8e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c96:	701a      	strb	r2, [r3, #0]
   10c98:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ca0:	781b      	ldrb	r3, [r3, #0]
   10ca2:	2bff      	cmp	r3, #255	; 0xff
   10ca4:	d105      	bne.n	10cb2 <send_takeOff+0x112>
   10ca6:	f24c 5349 	movw	r3, #50505	; 0xc549
   10caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cae:	2200      	movs	r2, #0
   10cb0:	701a      	strb	r2, [r3, #0]
   10cb2:	f24c 5349 	movw	r3, #50505	; 0xc549
   10cb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cba:	781b      	ldrb	r3, [r3, #0]
   10cbc:	461a      	mov	r2, r3
   10cbe:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cc6:	2104      	movs	r1, #4
   10cc8:	5499      	strb	r1, [r3, r2]
   10cca:	f24c 5349 	movw	r3, #50505	; 0xc549
   10cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cd2:	781b      	ldrb	r3, [r3, #0]
   10cd4:	3301      	adds	r3, #1
   10cd6:	b2da      	uxtb	r2, r3
   10cd8:	f24c 5349 	movw	r3, #50505	; 0xc549
   10cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ce0:	701a      	strb	r2, [r3, #0]
   10ce2:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ce6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cea:	781b      	ldrb	r3, [r3, #0]
   10cec:	2bff      	cmp	r3, #255	; 0xff
   10cee:	d105      	bne.n	10cfc <send_takeOff+0x15c>
   10cf0:	f24c 5349 	movw	r3, #50505	; 0xc549
   10cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cf8:	2200      	movs	r2, #0
   10cfa:	701a      	strb	r2, [r3, #0]
   10cfc:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d04:	2204      	movs	r2, #4
   10d06:	701a      	strb	r2, [r3, #0]
   10d08:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10d0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d10:	2204      	movs	r2, #4
   10d12:	701a      	strb	r2, [r3, #0]
   10d14:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d1c:	781b      	ldrb	r3, [r3, #0]
   10d1e:	461a      	mov	r2, r3
   10d20:	f24c 532a 	movw	r3, #50474	; 0xc52a
   10d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d28:	7819      	ldrb	r1, [r3, #0]
   10d2a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d32:	5499      	strb	r1, [r3, r2]
   10d34:	f24c 532a 	movw	r3, #50474	; 0xc52a
   10d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d3c:	781a      	ldrb	r2, [r3, #0]
   10d3e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d46:	781b      	ldrb	r3, [r3, #0]
   10d48:	4413      	add	r3, r2
   10d4a:	b2da      	uxtb	r2, r3
   10d4c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d54:	701a      	strb	r2, [r3, #0]
   10d56:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d5e:	781a      	ldrb	r2, [r3, #0]
   10d60:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d68:	781b      	ldrb	r3, [r3, #0]
   10d6a:	4413      	add	r3, r2
   10d6c:	b2da      	uxtb	r2, r3
   10d6e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d76:	701a      	strb	r2, [r3, #0]
   10d78:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d80:	781b      	ldrb	r3, [r3, #0]
   10d82:	3301      	adds	r3, #1
   10d84:	b2da      	uxtb	r2, r3
   10d86:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d8e:	701a      	strb	r2, [r3, #0]
   10d90:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d98:	781b      	ldrb	r3, [r3, #0]
   10d9a:	2bff      	cmp	r3, #255	; 0xff
   10d9c:	d105      	bne.n	10daa <send_takeOff+0x20a>
   10d9e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10da2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10da6:	2200      	movs	r2, #0
   10da8:	701a      	strb	r2, [r3, #0]
   10daa:	f24c 5349 	movw	r3, #50505	; 0xc549
   10dae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10db2:	781b      	ldrb	r3, [r3, #0]
   10db4:	461a      	mov	r2, r3
   10db6:	f24c 532a 	movw	r3, #50474	; 0xc52a
   10dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dbe:	7859      	ldrb	r1, [r3, #1]
   10dc0:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10dc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dc8:	5499      	strb	r1, [r3, r2]
   10dca:	4b7b      	ldr	r3, [pc, #492]	; (10fb8 <send_takeOff+0x418>)
   10dcc:	781a      	ldrb	r2, [r3, #0]
   10dce:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dd6:	781b      	ldrb	r3, [r3, #0]
   10dd8:	4413      	add	r3, r2
   10dda:	b2da      	uxtb	r2, r3
   10ddc:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10de0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10de4:	701a      	strb	r2, [r3, #0]
   10de6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dee:	781a      	ldrb	r2, [r3, #0]
   10df0:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10df8:	781b      	ldrb	r3, [r3, #0]
   10dfa:	4413      	add	r3, r2
   10dfc:	b2da      	uxtb	r2, r3
   10dfe:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e06:	701a      	strb	r2, [r3, #0]
   10e08:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e10:	781b      	ldrb	r3, [r3, #0]
   10e12:	3301      	adds	r3, #1
   10e14:	b2da      	uxtb	r2, r3
   10e16:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e1e:	701a      	strb	r2, [r3, #0]
   10e20:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e28:	781b      	ldrb	r3, [r3, #0]
   10e2a:	2bff      	cmp	r3, #255	; 0xff
   10e2c:	d105      	bne.n	10e3a <send_takeOff+0x29a>
   10e2e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e36:	2200      	movs	r2, #0
   10e38:	701a      	strb	r2, [r3, #0]
   10e3a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e42:	781b      	ldrb	r3, [r3, #0]
   10e44:	461a      	mov	r2, r3
   10e46:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e4e:	7819      	ldrb	r1, [r3, #0]
   10e50:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e58:	5499      	strb	r1, [r3, r2]
   10e5a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e62:	781b      	ldrb	r3, [r3, #0]
   10e64:	3301      	adds	r3, #1
   10e66:	b2da      	uxtb	r2, r3
   10e68:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e70:	701a      	strb	r2, [r3, #0]
   10e72:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e7a:	781b      	ldrb	r3, [r3, #0]
   10e7c:	2bff      	cmp	r3, #255	; 0xff
   10e7e:	d105      	bne.n	10e8c <send_takeOff+0x2ec>
   10e80:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e88:	2200      	movs	r2, #0
   10e8a:	701a      	strb	r2, [r3, #0]
   10e8c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e94:	781b      	ldrb	r3, [r3, #0]
   10e96:	461a      	mov	r2, r3
   10e98:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10e9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ea0:	7819      	ldrb	r1, [r3, #0]
   10ea2:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eaa:	5499      	strb	r1, [r3, r2]
   10eac:	f24c 5349 	movw	r3, #50505	; 0xc549
   10eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eb4:	781b      	ldrb	r3, [r3, #0]
   10eb6:	3301      	adds	r3, #1
   10eb8:	b2da      	uxtb	r2, r3
   10eba:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ec2:	701a      	strb	r2, [r3, #0]
   10ec4:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ecc:	781b      	ldrb	r3, [r3, #0]
   10ece:	2bff      	cmp	r3, #255	; 0xff
   10ed0:	d105      	bne.n	10ede <send_takeOff+0x33e>
   10ed2:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eda:	2200      	movs	r2, #0
   10edc:	701a      	strb	r2, [r3, #0]
   10ede:	f242 0339 	movw	r3, #8249	; 0x2039
   10ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ee6:	781b      	ldrb	r3, [r3, #0]
   10ee8:	b2db      	uxtb	r3, r3
   10eea:	f003 0310 	and.w	r3, r3, #16
   10eee:	2b00      	cmp	r3, #0
   10ef0:	d15a      	bne.n	10fa8 <send_takeOff+0x408>
   10ef2:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10ef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10efa:	781b      	ldrb	r3, [r3, #0]
   10efc:	b2db      	uxtb	r3, r3
   10efe:	461a      	mov	r2, r3
   10f00:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f08:	5c9a      	ldrb	r2, [r3, r2]
   10f0a:	f24c 634b 	movw	r3, #50763	; 0xc64b
   10f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f12:	701a      	strb	r2, [r3, #0]
   10f14:	f24c 634c 	movw	r3, #50764	; 0xc64c
   10f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f1c:	2200      	movs	r2, #0
   10f1e:	701a      	strb	r2, [r3, #0]
   10f20:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f28:	781b      	ldrb	r3, [r3, #0]
   10f2a:	b2db      	uxtb	r3, r3
   10f2c:	3301      	adds	r3, #1
   10f2e:	b2da      	uxtb	r2, r3
   10f30:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10f34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f38:	701a      	strb	r2, [r3, #0]
   10f3a:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10f3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f42:	781b      	ldrb	r3, [r3, #0]
   10f44:	b2db      	uxtb	r3, r3
   10f46:	2bff      	cmp	r3, #255	; 0xff
   10f48:	d105      	bne.n	10f56 <send_takeOff+0x3b6>
   10f4a:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10f4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f52:	2200      	movs	r2, #0
   10f54:	701a      	strb	r2, [r3, #0]
   10f56:	f242 0338 	movw	r3, #8248	; 0x2038
   10f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f5e:	f242 0238 	movw	r2, #8248	; 0x2038
   10f62:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f66:	7812      	ldrb	r2, [r2, #0]
   10f68:	b2d2      	uxtb	r2, r2
   10f6a:	f042 0201 	orr.w	r2, r2, #1
   10f6e:	b2d2      	uxtb	r2, r2
   10f70:	701a      	strb	r2, [r3, #0]
   10f72:	f242 0339 	movw	r3, #8249	; 0x2039
   10f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f7a:	f242 0239 	movw	r2, #8249	; 0x2039
   10f7e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f82:	7812      	ldrb	r2, [r2, #0]
   10f84:	b2d2      	uxtb	r2, r2
   10f86:	f042 0210 	orr.w	r2, r2, #16
   10f8a:	b2d2      	uxtb	r2, r2
   10f8c:	701a      	strb	r2, [r3, #0]
   10f8e:	e00b      	b.n	10fa8 <send_takeOff+0x408>
   10f90:	f24c 5348 	movw	r3, #50504	; 0xc548
   10f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f98:	781b      	ldrb	r3, [r3, #0]
   10f9a:	3301      	adds	r3, #1
   10f9c:	b2da      	uxtb	r2, r3
   10f9e:	f24c 5348 	movw	r3, #50504	; 0xc548
   10fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fa6:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   10fa8:	f24c 63de 	movw	r3, #50910	; 0xc6de
   10fac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fb0:	2200      	movs	r2, #0
   10fb2:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   10fb4:	bd80      	pop	{r7, pc}
   10fb6:	bf00      	nop
   10fb8:	2004c52b 	.word	0x2004c52b
   10fbc:	f3af 8000 	nop.w

00010fc0 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   10fc0:	b480      	push	{r7}
   10fc2:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   10fc4:	f242 0317 	movw	r3, #8215	; 0x2017
   10fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fcc:	f242 0217 	movw	r2, #8215	; 0x2017
   10fd0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fd4:	7812      	ldrb	r2, [r2, #0]
   10fd6:	b2d2      	uxtb	r2, r2
   10fd8:	f042 0210 	orr.w	r2, r2, #16
   10fdc:	b2d2      	uxtb	r2, r2
   10fde:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   10fe0:	f242 0331 	movw	r3, #8241	; 0x2031
   10fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fe8:	2201      	movs	r2, #1
   10fea:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   10fec:	f242 0333 	movw	r3, #8243	; 0x2033
   10ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ff4:	2219      	movs	r2, #25
   10ff6:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   10ff8:	f242 0311 	movw	r3, #8209	; 0x2011
   10ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11000:	f242 0211 	movw	r2, #8209	; 0x2011
   11004:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11008:	7812      	ldrb	r2, [r2, #0]
   1100a:	b2d2      	uxtb	r2, r2
   1100c:	f062 023f 	orn	r2, r2, #63	; 0x3f
   11010:	b2d2      	uxtb	r2, r2
   11012:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   11014:	f242 0312 	movw	r3, #8210	; 0x2012
   11018:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1101c:	f242 0212 	movw	r2, #8210	; 0x2012
   11020:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11024:	7812      	ldrb	r2, [r2, #0]
   11026:	b2d2      	uxtb	r2, r2
   11028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1102c:	b2d2      	uxtb	r2, r2
   1102e:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   11030:	f242 0312 	movw	r3, #8210	; 0x2012
   11034:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11038:	f242 0212 	movw	r2, #8210	; 0x2012
   1103c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11040:	7812      	ldrb	r2, [r2, #0]
   11042:	b2d2      	uxtb	r2, r2
   11044:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11048:	b2d2      	uxtb	r2, r2
   1104a:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   1104c:	f242 033a 	movw	r3, #8250	; 0x203a
   11050:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11054:	f242 023a 	movw	r2, #8250	; 0x203a
   11058:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1105c:	7812      	ldrb	r2, [r2, #0]
   1105e:	b2d2      	uxtb	r2, r2
   11060:	f042 0202 	orr.w	r2, r2, #2
   11064:	b2d2      	uxtb	r2, r2
   11066:	701a      	strb	r2, [r3, #0]
}
   11068:	46bd      	mov	sp, r7
   1106a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1106e:	4770      	bx	lr

00011070 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   11070:	b480      	push	{r7}
   11072:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   11074:	f24c 634c 	movw	r3, #50764	; 0xc64c
   11078:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1107c:	781b      	ldrb	r3, [r3, #0]
   1107e:	2b00      	cmp	r3, #0
   11080:	d10e      	bne.n	110a0 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   11082:	f242 0312 	movw	r3, #8210	; 0x2012
   11086:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1108a:	f242 0212 	movw	r2, #8210	; 0x2012
   1108e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11092:	7812      	ldrb	r2, [r2, #0]
   11094:	b2d2      	uxtb	r2, r2
   11096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1109a:	b2d2      	uxtb	r2, r2
   1109c:	701a      	strb	r2, [r3, #0]
   1109e:	e047      	b.n	11130 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   110a0:	f24c 634c 	movw	r3, #50764	; 0xc64c
   110a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110a8:	781b      	ldrb	r3, [r3, #0]
   110aa:	2b08      	cmp	r3, #8
   110ac:	d832      	bhi.n	11114 <__vector_5+0xa4>
    if (tx_byte & 0x01)
   110ae:	f24c 634b 	movw	r3, #50763	; 0xc64b
   110b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110b6:	781b      	ldrb	r3, [r3, #0]
   110b8:	f003 0301 	and.w	r3, r3, #1
   110bc:	2b00      	cmp	r3, #0
   110be:	d00e      	beq.n	110de <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   110c0:	f242 0312 	movw	r3, #8210	; 0x2012
   110c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110c8:	f242 0212 	movw	r2, #8210	; 0x2012
   110cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110d0:	7812      	ldrb	r2, [r2, #0]
   110d2:	b2d2      	uxtb	r2, r2
   110d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   110d8:	b2d2      	uxtb	r2, r2
   110da:	701a      	strb	r2, [r3, #0]
   110dc:	e00d      	b.n	110fa <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   110de:	f242 0312 	movw	r3, #8210	; 0x2012
   110e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110e6:	f242 0212 	movw	r2, #8210	; 0x2012
   110ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110ee:	7812      	ldrb	r2, [r2, #0]
   110f0:	b2d2      	uxtb	r2, r2
   110f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   110f6:	b2d2      	uxtb	r2, r2
   110f8:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   110fa:	f24c 634b 	movw	r3, #50763	; 0xc64b
   110fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11102:	781b      	ldrb	r3, [r3, #0]
   11104:	085b      	lsrs	r3, r3, #1
   11106:	b2da      	uxtb	r2, r3
   11108:	f24c 634b 	movw	r3, #50763	; 0xc64b
   1110c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11110:	701a      	strb	r2, [r3, #0]
   11112:	e00d      	b.n	11130 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   11114:	f242 0312 	movw	r3, #8210	; 0x2012
   11118:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1111c:	f242 0212 	movw	r2, #8210	; 0x2012
   11120:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11124:	7812      	ldrb	r2, [r2, #0]
   11126:	b2d2      	uxtb	r2, r2
   11128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1112c:	b2d2      	uxtb	r2, r2
   1112e:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   11130:	f24c 634c 	movw	r3, #50764	; 0xc64c
   11134:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11138:	781b      	ldrb	r3, [r3, #0]
   1113a:	3301      	adds	r3, #1
   1113c:	b2da      	uxtb	r2, r3
   1113e:	f24c 634c 	movw	r3, #50764	; 0xc64c
   11142:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11146:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   11148:	f24c 634c 	movw	r3, #50764	; 0xc64c
   1114c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11150:	781b      	ldrb	r3, [r3, #0]
   11152:	2b09      	cmp	r3, #9
   11154:	d94d      	bls.n	111f2 <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   11156:	f24c 5349 	movw	r3, #50505	; 0xc549
   1115a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1115e:	781a      	ldrb	r2, [r3, #0]
   11160:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11164:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11168:	781b      	ldrb	r3, [r3, #0]
   1116a:	b2db      	uxtb	r3, r3
   1116c:	429a      	cmp	r2, r3
   1116e:	d10e      	bne.n	1118e <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   11170:	f242 0339 	movw	r3, #8249	; 0x2039
   11174:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11178:	f242 0239 	movw	r2, #8249	; 0x2039
   1117c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11180:	7812      	ldrb	r2, [r2, #0]
   11182:	b2d2      	uxtb	r2, r2
   11184:	f022 0210 	bic.w	r2, r2, #16
   11188:	b2d2      	uxtb	r2, r2
   1118a:	701a      	strb	r2, [r3, #0]
   1118c:	e031      	b.n	111f2 <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   1118e:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11192:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11196:	781b      	ldrb	r3, [r3, #0]
   11198:	b2db      	uxtb	r3, r3
   1119a:	461a      	mov	r2, r3
   1119c:	f24c 534c 	movw	r3, #50508	; 0xc54c
   111a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111a4:	5c9a      	ldrb	r2, [r3, r2]
   111a6:	f24c 634b 	movw	r3, #50763	; 0xc64b
   111aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111ae:	701a      	strb	r2, [r3, #0]
   111b0:	f24c 634c 	movw	r3, #50764	; 0xc64c
   111b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111b8:	2200      	movs	r2, #0
   111ba:	701a      	strb	r2, [r3, #0]
   111bc:	f24c 534a 	movw	r3, #50506	; 0xc54a
   111c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111c4:	781b      	ldrb	r3, [r3, #0]
   111c6:	b2db      	uxtb	r3, r3
   111c8:	3301      	adds	r3, #1
   111ca:	b2da      	uxtb	r2, r3
   111cc:	f24c 534a 	movw	r3, #50506	; 0xc54a
   111d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111d4:	701a      	strb	r2, [r3, #0]
   111d6:	f24c 534a 	movw	r3, #50506	; 0xc54a
   111da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111de:	781b      	ldrb	r3, [r3, #0]
   111e0:	b2db      	uxtb	r3, r3
   111e2:	2bff      	cmp	r3, #255	; 0xff
   111e4:	d105      	bne.n	111f2 <__vector_5+0x182>
   111e6:	f24c 534a 	movw	r3, #50506	; 0xc54a
   111ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111ee:	2200      	movs	r2, #0
   111f0:	701a      	strb	r2, [r3, #0]
    }
  }
}
   111f2:	46bd      	mov	sp, r7
   111f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   111f8:	4770      	bx	lr
   111fa:	bf00      	nop

000111fc <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   111fc:	b480      	push	{r7}
   111fe:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   11200:	f24c 637f 	movw	r3, #50815	; 0xc67f
   11204:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11208:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   1120a:	f240 533e 	movw	r3, #1342	; 0x53e
   1120e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11212:	2200      	movs	r2, #0
   11214:	701a      	strb	r2, [r3, #0]
}
   11216:	46bd      	mov	sp, r7
   11218:	f85d 7b04 	ldr.w	r7, [sp], #4
   1121c:	4770      	bx	lr
   1121e:	bf00      	nop

00011220 <link_fbw_send>:

void link_fbw_send(void) {
   11220:	b480      	push	{r7}
   11222:	b083      	sub	sp, #12
   11224:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   11226:	f24c 6384 	movw	r3, #50820	; 0xc684
   1122a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1122e:	781b      	ldrb	r3, [r3, #0]
   11230:	b2db      	uxtb	r3, r3
   11232:	2b00      	cmp	r3, #0
   11234:	d00c      	beq.n	11250 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   11236:	f24c 6385 	movw	r3, #50821	; 0xc685
   1123a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1123e:	781b      	ldrb	r3, [r3, #0]
   11240:	3301      	adds	r3, #1
   11242:	b2da      	uxtb	r2, r3
   11244:	f24c 6385 	movw	r3, #50821	; 0xc685
   11248:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1124c:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   1124e:	e064      	b.n	1131a <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   11250:	f242 030d 	movw	r3, #8205	; 0x200d
   11254:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11258:	2251      	movs	r2, #81	; 0x51
   1125a:	701a      	strb	r2, [r3, #0]
   1125c:	f242 030e 	movw	r3, #8206	; 0x200e
   11260:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11264:	781b      	ldrb	r3, [r3, #0]
   11266:	b2db      	uxtb	r3, r3
   11268:	b2db      	uxtb	r3, r3
   1126a:	b25b      	sxtb	r3, r3
   1126c:	2b00      	cmp	r3, #0
   1126e:	da05      	bge.n	1127c <link_fbw_send+0x5c>
   11270:	f242 030f 	movw	r3, #8207	; 0x200f
   11274:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11278:	781b      	ldrb	r3, [r3, #0]
   1127a:	71fb      	strb	r3, [r7, #7]
   1127c:	f242 030d 	movw	r3, #8205	; 0x200d
   11280:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11284:	f242 020d 	movw	r2, #8205	; 0x200d
   11288:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1128c:	7812      	ldrb	r2, [r2, #0]
   1128e:	b2d2      	uxtb	r2, r2
   11290:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11294:	b2d2      	uxtb	r2, r2
   11296:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   11298:	f24c 6384 	movw	r3, #50820	; 0xc684
   1129c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112a0:	2201      	movs	r2, #1
   112a2:	701a      	strb	r2, [r3, #0]
   112a4:	f242 0318 	movw	r3, #8216	; 0x2018
   112a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112ac:	f242 0218 	movw	r2, #8216	; 0x2018
   112b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   112b4:	7812      	ldrb	r2, [r2, #0]
   112b6:	b2d2      	uxtb	r2, r2
   112b8:	f022 0201 	bic.w	r2, r2, #1
   112bc:	b2d2      	uxtb	r2, r2
   112be:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   112c0:	f24c 6381 	movw	r3, #50817	; 0xc681
   112c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112c8:	2200      	movs	r2, #0
   112ca:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   112cc:	f24c 6382 	movw	r3, #50818	; 0xc682
   112d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112d4:	2200      	movs	r2, #0
   112d6:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   112d8:	f24c 6381 	movw	r3, #50817	; 0xc681
   112dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112e0:	781b      	ldrb	r3, [r3, #0]
   112e2:	461a      	mov	r2, r3
   112e4:	f24c 6368 	movw	r3, #50792	; 0xc668
   112e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112ec:	4413      	add	r3, r2
   112ee:	781a      	ldrb	r2, [r3, #0]
   112f0:	f24c 6383 	movw	r3, #50819	; 0xc683
   112f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112f8:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   112fa:	f242 030f 	movw	r3, #8207	; 0x200f
   112fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11302:	f24c 6283 	movw	r2, #50819	; 0xc683
   11306:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1130a:	7812      	ldrb	r2, [r2, #0]
   1130c:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   1130e:	f24c 637e 	movw	r3, #50814	; 0xc67e
   11312:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11316:	2200      	movs	r2, #0
   11318:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   1131a:	370c      	adds	r7, #12
   1131c:	46bd      	mov	sp, r7
   1131e:	f85d 7b04 	ldr.w	r7, [sp], #4
   11322:	4770      	bx	lr

00011324 <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   11324:	b480      	push	{r7}
   11326:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   11328:	f242 032a 	movw	r3, #8234	; 0x202a
   1132c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11330:	f242 022c 	movw	r2, #8236	; 0x202c
   11334:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11338:	8812      	ldrh	r2, [r2, #0]
   1133a:	b292      	uxth	r2, r2
   1133c:	32c8      	adds	r2, #200	; 0xc8
   1133e:	b292      	uxth	r2, r2
   11340:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   11342:	f242 0336 	movw	r3, #8246	; 0x2036
   11346:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1134a:	f242 0236 	movw	r2, #8246	; 0x2036
   1134e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11352:	7812      	ldrb	r2, [r2, #0]
   11354:	b2d2      	uxtb	r2, r2
   11356:	f042 0210 	orr.w	r2, r2, #16
   1135a:	b2d2      	uxtb	r2, r2
   1135c:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   1135e:	f242 0337 	movw	r3, #8247	; 0x2037
   11362:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11366:	f242 0237 	movw	r2, #8247	; 0x2037
   1136a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1136e:	7812      	ldrb	r2, [r2, #0]
   11370:	b2d2      	uxtb	r2, r2
   11372:	f042 0210 	orr.w	r2, r2, #16
   11376:	b2d2      	uxtb	r2, r2
   11378:	701a      	strb	r2, [r3, #0]
}
   1137a:	46bd      	mov	sp, r7
   1137c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11380:	4770      	bx	lr
   11382:	bf00      	nop

00011384 <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   11384:	b480      	push	{r7}
   11386:	b083      	sub	sp, #12
   11388:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   1138a:	f242 0337 	movw	r3, #8247	; 0x2037
   1138e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11392:	f242 0237 	movw	r2, #8247	; 0x2037
   11396:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1139a:	7812      	ldrb	r2, [r2, #0]
   1139c:	b2d2      	uxtb	r2, r2
   1139e:	f022 0210 	bic.w	r2, r2, #16
   113a2:	b2d2      	uxtb	r2, r2
   113a4:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   113a6:	f24c 6381 	movw	r3, #50817	; 0xc681
   113aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113ae:	781b      	ldrb	r3, [r3, #0]
   113b0:	3301      	adds	r3, #1
   113b2:	b2da      	uxtb	r2, r3
   113b4:	f24c 6381 	movw	r3, #50817	; 0xc681
   113b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113bc:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   113be:	f24c 6381 	movw	r3, #50817	; 0xc681
   113c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113c6:	781b      	ldrb	r3, [r3, #0]
   113c8:	2b17      	cmp	r3, #23
   113ca:	d162      	bne.n	11492 <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   113cc:	f242 030f 	movw	r3, #8207	; 0x200f
   113d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113d4:	781b      	ldrb	r3, [r3, #0]
   113d6:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   113d8:	f24c 6382 	movw	r3, #50818	; 0xc682
   113dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113e0:	781b      	ldrb	r3, [r3, #0]
   113e2:	79fa      	ldrb	r2, [r7, #7]
   113e4:	429a      	cmp	r2, r3
   113e6:	d110      	bne.n	1140a <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   113e8:	f24c 637e 	movw	r3, #50814	; 0xc67e
   113ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113f0:	2201      	movs	r2, #1
   113f2:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   113f4:	f24c 6350 	movw	r3, #50768	; 0xc650
   113f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113fc:	7d1a      	ldrb	r2, [r3, #20]
   113fe:	f24c 6380 	movw	r3, #50816	; 0xc680
   11402:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11406:	701a      	strb	r2, [r3, #0]
   11408:	e00c      	b.n	11424 <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   1140a:	f24c 637f 	movw	r3, #50815	; 0xc67f
   1140e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11412:	781b      	ldrb	r3, [r3, #0]
   11414:	b2db      	uxtb	r3, r3
   11416:	3301      	adds	r3, #1
   11418:	b2da      	uxtb	r2, r3
   1141a:	f24c 637f 	movw	r3, #50815	; 0xc67f
   1141e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11422:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   11424:	f240 533e 	movw	r3, #1342	; 0x53e
   11428:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1142c:	2201      	movs	r2, #1
   1142e:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   11430:	f24c 6384 	movw	r3, #50820	; 0xc684
   11434:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11438:	2200      	movs	r2, #0
   1143a:	701a      	strb	r2, [r3, #0]
   1143c:	f242 0318 	movw	r3, #8216	; 0x2018
   11440:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11444:	f242 0218 	movw	r2, #8216	; 0x2018
   11448:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1144c:	7812      	ldrb	r2, [r2, #0]
   1144e:	b2d2      	uxtb	r2, r2
   11450:	f042 0201 	orr.w	r2, r2, #1
   11454:	b2d2      	uxtb	r2, r2
   11456:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   11458:	f242 030d 	movw	r3, #8205	; 0x200d
   1145c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11460:	f242 020d 	movw	r2, #8205	; 0x200d
   11464:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11468:	7812      	ldrb	r2, [r2, #0]
   1146a:	b2d2      	uxtb	r2, r2
   1146c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11470:	b2d2      	uxtb	r2, r2
   11472:	701a      	strb	r2, [r3, #0]
   11474:	f242 030d 	movw	r3, #8205	; 0x200d
   11478:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1147c:	f242 020d 	movw	r2, #8205	; 0x200d
   11480:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11484:	7812      	ldrb	r2, [r2, #0]
   11486:	b2d2      	uxtb	r2, r2
   11488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1148c:	b2d2      	uxtb	r2, r2
   1148e:	701a      	strb	r2, [r3, #0]
    return;
   11490:	e051      	b.n	11536 <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   11492:	f24c 6381 	movw	r3, #50817	; 0xc681
   11496:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1149a:	781b      	ldrb	r3, [r3, #0]
   1149c:	2b15      	cmp	r3, #21
   1149e:	d820      	bhi.n	114e2 <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   114a0:	f24c 6381 	movw	r3, #50817	; 0xc681
   114a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114a8:	781b      	ldrb	r3, [r3, #0]
   114aa:	461a      	mov	r2, r3
   114ac:	f24c 6368 	movw	r3, #50792	; 0xc668
   114b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114b4:	4413      	add	r3, r2
   114b6:	781b      	ldrb	r3, [r3, #0]
   114b8:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   114ba:	f242 030f 	movw	r3, #8207	; 0x200f
   114be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114c2:	79fa      	ldrb	r2, [r7, #7]
   114c4:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   114c6:	f24c 6383 	movw	r3, #50819	; 0xc683
   114ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114ce:	781a      	ldrb	r2, [r3, #0]
   114d0:	79fb      	ldrb	r3, [r7, #7]
   114d2:	4053      	eors	r3, r2
   114d4:	b2da      	uxtb	r2, r3
   114d6:	f24c 6383 	movw	r3, #50819	; 0xc683
   114da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114de:	701a      	strb	r2, [r3, #0]
   114e0:	e009      	b.n	114f6 <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   114e2:	f242 030f 	movw	r3, #8207	; 0x200f
   114e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114ea:	f24c 6283 	movw	r2, #50819	; 0xc683
   114ee:	f2c2 0204 	movt	r2, #8196	; 0x2004
   114f2:	7812      	ldrb	r2, [r2, #0]
   114f4:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   114f6:	f242 030f 	movw	r3, #8207	; 0x200f
   114fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114fe:	781b      	ldrb	r3, [r3, #0]
   11500:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   11502:	f24c 6381 	movw	r3, #50817	; 0xc681
   11506:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1150a:	781b      	ldrb	r3, [r3, #0]
   1150c:	1e5a      	subs	r2, r3, #1
   1150e:	f24c 6350 	movw	r3, #50768	; 0xc650
   11512:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11516:	4413      	add	r3, r2
   11518:	79fa      	ldrb	r2, [r7, #7]
   1151a:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   1151c:	f24c 6382 	movw	r3, #50818	; 0xc682
   11520:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11524:	781a      	ldrb	r2, [r3, #0]
   11526:	79fb      	ldrb	r3, [r7, #7]
   11528:	4053      	eors	r3, r2
   1152a:	b2da      	uxtb	r2, r3
   1152c:	f24c 6382 	movw	r3, #50818	; 0xc682
   11530:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11534:	701a      	strb	r2, [r3, #0]
}
   11536:	370c      	adds	r7, #12
   11538:	46bd      	mov	sp, r7
   1153a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1153e:	4770      	bx	lr

00011540 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   11540:	b480      	push	{r7}
   11542:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   11544:	f242 0317 	movw	r3, #8215	; 0x2017
   11548:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1154c:	f242 0217 	movw	r2, #8215	; 0x2017
   11550:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11554:	7812      	ldrb	r2, [r2, #0]
   11556:	b2d2      	uxtb	r2, r2
   11558:	f042 0206 	orr.w	r2, r2, #6
   1155c:	b2d2      	uxtb	r2, r2
   1155e:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   11560:	f242 0317 	movw	r3, #8215	; 0x2017
   11564:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11568:	f242 0217 	movw	r2, #8215	; 0x2017
   1156c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11570:	7812      	ldrb	r2, [r2, #0]
   11572:	b2d2      	uxtb	r2, r2
   11574:	f042 0201 	orr.w	r2, r2, #1
   11578:	b2d2      	uxtb	r2, r2
   1157a:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   1157c:	f24c 6384 	movw	r3, #50820	; 0xc684
   11580:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11584:	2200      	movs	r2, #0
   11586:	701a      	strb	r2, [r3, #0]
   11588:	f242 0318 	movw	r3, #8216	; 0x2018
   1158c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11590:	f242 0218 	movw	r2, #8216	; 0x2018
   11594:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11598:	7812      	ldrb	r2, [r2, #0]
   1159a:	b2d2      	uxtb	r2, r2
   1159c:	f042 0201 	orr.w	r2, r2, #1
   115a0:	b2d2      	uxtb	r2, r2
   115a2:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   115a4:	f242 0302 	movw	r3, #8194	; 0x2002
   115a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115ac:	f242 0202 	movw	r2, #8194	; 0x2002
   115b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   115b4:	7812      	ldrb	r2, [r2, #0]
   115b6:	b2d2      	uxtb	r2, r2
   115b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   115bc:	b2d2      	uxtb	r2, r2
   115be:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   115c0:	f24c 6384 	movw	r3, #50820	; 0xc684
   115c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115c8:	2200      	movs	r2, #0
   115ca:	701a      	strb	r2, [r3, #0]
   115cc:	f242 0303 	movw	r3, #8195	; 0x2003
   115d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115d4:	f242 0203 	movw	r2, #8195	; 0x2003
   115d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   115dc:	7812      	ldrb	r2, [r2, #0]
   115de:	b2d2      	uxtb	r2, r2
   115e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   115e4:	b2d2      	uxtb	r2, r2
   115e6:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   115e8:	f24c 6384 	movw	r3, #50820	; 0xc684
   115ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115f0:	2200      	movs	r2, #0
   115f2:	701a      	strb	r2, [r3, #0]
}
   115f4:	46bd      	mov	sp, r7
   115f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   115fa:	4770      	bx	lr

000115fc <__vector_17>:


SIGNAL(SIG_SPI) {
   115fc:	b580      	push	{r7, lr}
   115fe:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   11600:	f24c 6384 	movw	r3, #50820	; 0xc684
   11604:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11608:	781b      	ldrb	r3, [r3, #0]
   1160a:	b2db      	uxtb	r3, r3
   1160c:	2b01      	cmp	r3, #1
   1160e:	d102      	bne.n	11616 <__vector_17+0x1a>
    link_fbw_on_spi_it();
   11610:	f7ff fe88 	bl	11324 <link_fbw_on_spi_it>
   11614:	e00b      	b.n	1162e <__vector_17+0x32>
  else
    fatal_error_nb++;
   11616:	f24c 5328 	movw	r3, #50472	; 0xc528
   1161a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1161e:	781b      	ldrb	r3, [r3, #0]
   11620:	3301      	adds	r3, #1
   11622:	b2da      	uxtb	r2, r3
   11624:	f24c 5328 	movw	r3, #50472	; 0xc528
   11628:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1162c:	701a      	strb	r2, [r3, #0]
}
   1162e:	bd80      	pop	{r7, pc}

00011630 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   11630:	b480      	push	{r7}
   11632:	b083      	sub	sp, #12
   11634:	af00      	add	r7, sp, #0
   11636:	4603      	mov	r3, r0
   11638:	6039      	str	r1, [r7, #0]
   1163a:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   1163c:	79fa      	ldrb	r2, [r7, #7]
   1163e:	f24c 6398 	movw	r3, #50840	; 0xc698
   11642:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11646:	6839      	ldr	r1, [r7, #0]
   11648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1164c:	370c      	adds	r7, #12
   1164e:	46bd      	mov	sp, r7
   11650:	f85d 7b04 	ldr.w	r7, [sp], #4
   11654:	4770      	bx	lr
   11656:	bf00      	nop

00011658 <adc_init>:

void 
adc_init( void )
{
   11658:	b480      	push	{r7}
   1165a:	b083      	sub	sp, #12
   1165c:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   1165e:	f242 0362 	movw	r3, #8290	; 0x2062
   11662:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11666:	2200      	movs	r2, #0
   11668:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   1166a:	f242 0361 	movw	r3, #8289	; 0x2061
   1166e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11672:	2200      	movs	r2, #0
   11674:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   11676:	f242 0307 	movw	r3, #8199	; 0x2007
   1167a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1167e:	2240      	movs	r2, #64	; 0x40
   11680:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   11682:	f242 0308 	movw	r3, #8200	; 0x2008
   11686:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1168a:	f242 0208 	movw	r2, #8200	; 0x2008
   1168e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11692:	7812      	ldrb	r2, [r2, #0]
   11694:	b2d2      	uxtb	r2, r2
   11696:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1169a:	b2d2      	uxtb	r2, r2
   1169c:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   1169e:	f242 0306 	movw	r3, #8198	; 0x2006
   116a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116a6:	22cf      	movs	r2, #207	; 0xcf
   116a8:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   116aa:	2300      	movs	r3, #0
   116ac:	71fb      	strb	r3, [r7, #7]
   116ae:	e00a      	b.n	116c6 <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   116b0:	79fa      	ldrb	r2, [r7, #7]
   116b2:	f24c 6398 	movw	r3, #50840	; 0xc698
   116b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116ba:	2100      	movs	r1, #0
   116bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   116c0:	79fb      	ldrb	r3, [r7, #7]
   116c2:	3301      	adds	r3, #1
   116c4:	71fb      	strb	r3, [r7, #7]
   116c6:	79fb      	ldrb	r3, [r7, #7]
   116c8:	2b07      	cmp	r3, #7
   116ca:	d9f1      	bls.n	116b0 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   116cc:	370c      	adds	r7, #12
   116ce:	46bd      	mov	sp, r7
   116d0:	f85d 7b04 	ldr.w	r7, [sp], #4
   116d4:	4770      	bx	lr
   116d6:	bf00      	nop

000116d8 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   116d8:	b480      	push	{r7}
   116da:	b085      	sub	sp, #20
   116dc:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   116de:	f242 0307 	movw	r3, #8199	; 0x2007
   116e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116e6:	781b      	ldrb	r3, [r3, #0]
   116e8:	b2db      	uxtb	r3, r3
   116ea:	f003 0307 	and.w	r3, r3, #7
   116ee:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   116f0:	7bfa      	ldrb	r2, [r7, #15]
   116f2:	f24c 6398 	movw	r3, #50840	; 0xc698
   116f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   116fe:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   11700:	f242 0304 	movw	r3, #8196	; 0x2004
   11704:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11708:	881b      	ldrh	r3, [r3, #0]
   1170a:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   1170c:	7bfa      	ldrb	r2, [r7, #15]
   1170e:	f24c 6388 	movw	r3, #50824	; 0xc688
   11712:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11716:	88f9      	ldrh	r1, [r7, #6]
   11718:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   1171c:	68bb      	ldr	r3, [r7, #8]
   1171e:	2b00      	cmp	r3, #0
   11720:	d025      	beq.n	1176e <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   11722:	68bb      	ldr	r3, [r7, #8]
   11724:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   11728:	3301      	adds	r3, #1
   1172a:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   1172c:	7bbb      	ldrb	r3, [r7, #14]
   1172e:	2b1f      	cmp	r3, #31
   11730:	d901      	bls.n	11736 <__vector_21+0x5e>
   11732:	2300      	movs	r3, #0
   11734:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   11736:	68bb      	ldr	r3, [r7, #8]
   11738:	881a      	ldrh	r2, [r3, #0]
   1173a:	7bbb      	ldrb	r3, [r7, #14]
   1173c:	68b9      	ldr	r1, [r7, #8]
   1173e:	005b      	lsls	r3, r3, #1
   11740:	440b      	add	r3, r1
   11742:	885b      	ldrh	r3, [r3, #2]
   11744:	1ad3      	subs	r3, r2, r3
   11746:	b29a      	uxth	r2, r3
   11748:	68bb      	ldr	r3, [r7, #8]
   1174a:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   1174c:	7bbb      	ldrb	r3, [r7, #14]
   1174e:	68ba      	ldr	r2, [r7, #8]
   11750:	005b      	lsls	r3, r3, #1
   11752:	4413      	add	r3, r2
   11754:	88fa      	ldrh	r2, [r7, #6]
   11756:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   11758:	68bb      	ldr	r3, [r7, #8]
   1175a:	881a      	ldrh	r2, [r3, #0]
   1175c:	88fb      	ldrh	r3, [r7, #6]
   1175e:	4413      	add	r3, r2
   11760:	b29a      	uxth	r2, r3
   11762:	68bb      	ldr	r3, [r7, #8]
   11764:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   11766:	68bb      	ldr	r3, [r7, #8]
   11768:	7bba      	ldrb	r2, [r7, #14]
   1176a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   1176e:	7bfb      	ldrb	r3, [r7, #15]
   11770:	3301      	adds	r3, #1
   11772:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   11774:	7bfb      	ldrb	r3, [r7, #15]
   11776:	2b07      	cmp	r3, #7
   11778:	d901      	bls.n	1177e <__vector_21+0xa6>
    adc_input = 0;
   1177a:	2300      	movs	r3, #0
   1177c:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   1177e:	f242 0307 	movw	r3, #8199	; 0x2007
   11782:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11786:	7bfa      	ldrb	r2, [r7, #15]
   11788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1178c:	b2d2      	uxtb	r2, r2
   1178e:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   11790:	f242 0306 	movw	r3, #8198	; 0x2006
   11794:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11798:	f242 0206 	movw	r2, #8198	; 0x2006
   1179c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   117a0:	7812      	ldrb	r2, [r2, #0]
   117a2:	b2d2      	uxtb	r2, r2
   117a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   117a8:	b2d2      	uxtb	r2, r2
   117aa:	701a      	strb	r2, [r3, #0]
  
}
   117ac:	3714      	adds	r7, #20
   117ae:	46bd      	mov	sp, r7
   117b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   117b4:	4770      	bx	lr
   117b6:	bf00      	nop

000117b8 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   117b8:	b580      	push	{r7, lr}
   117ba:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   117bc:	f003 fca8 	bl	15110 <uart1_init>
#endif
  ubx_status = UNINIT;
   117c0:	f24c 73df 	movw	r3, #51167	; 0xc7df
   117c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117c8:	2200      	movs	r2, #0
   117ca:	701a      	strb	r2, [r3, #0]
}
   117cc:	bd80      	pop	{r7, pc}
   117ce:	bf00      	nop

000117d0 <parse_gps_msg>:

void parse_gps_msg( void ) {
   117d0:	b580      	push	{r7, lr}
   117d2:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   117d4:	f24c 73e6 	movw	r3, #51174	; 0xc7e6
   117d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117dc:	781b      	ldrb	r3, [r3, #0]
   117de:	2b01      	cmp	r3, #1
   117e0:	f040 80f9 	bne.w	119d6 <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   117e4:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   117e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117ec:	781b      	ldrb	r3, [r3, #0]
   117ee:	2b08      	cmp	r3, #8
   117f0:	d128      	bne.n	11844 <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   117f2:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   117f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117fa:	685a      	ldr	r2, [r3, #4]
   117fc:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
   11800:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11804:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   11806:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   1180a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1180e:	689a      	ldr	r2, [r3, #8]
   11810:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
   11814:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11818:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   1181a:	4b73      	ldr	r3, [pc, #460]	; (119e8 <parse_gps_msg+0x218>)
   1181c:	681b      	ldr	r3, [r3, #0]
   1181e:	4618      	mov	r0, r3
   11820:	f006 fe10 	bl	18444 <__aeabi_i2f>
   11824:	4603      	mov	r3, r0
   11826:	4618      	mov	r0, r3
   11828:	f04f 0100 	mov.w	r1, #0
   1182c:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11830:	f006 ff10 	bl	18654 <__aeabi_fdiv>
   11834:	4603      	mov	r3, r0
   11836:	461a      	mov	r2, r3
   11838:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   1183c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11840:	601a      	str	r2, [r3, #0]
   11842:	e0c8      	b.n	119d6 <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   11844:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   11848:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1184c:	781b      	ldrb	r3, [r3, #0]
   1184e:	2b03      	cmp	r3, #3
   11850:	d10a      	bne.n	11868 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   11852:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   11856:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1185a:	791a      	ldrb	r2, [r3, #4]
   1185c:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
   11860:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11864:	701a      	strb	r2, [r3, #0]
   11866:	e0b6      	b.n	119d6 <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   11868:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   1186c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11870:	781b      	ldrb	r3, [r3, #0]
   11872:	2b12      	cmp	r3, #18
   11874:	f040 80af 	bne.w	119d6 <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   11878:	4b5c      	ldr	r3, [pc, #368]	; (119ec <parse_gps_msg+0x21c>)
   1187a:	681b      	ldr	r3, [r3, #0]
   1187c:	4618      	mov	r0, r3
   1187e:	f006 fddd 	bl	1843c <__aeabi_ui2f>
   11882:	4603      	mov	r3, r0
   11884:	4618      	mov	r0, r3
   11886:	f04f 0100 	mov.w	r1, #0
   1188a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1188e:	f006 fee1 	bl	18654 <__aeabi_fdiv>
   11892:	4603      	mov	r3, r0
   11894:	461a      	mov	r2, r3
   11896:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   1189a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1189e:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   118a0:	4b51      	ldr	r3, [pc, #324]	; (119e8 <parse_gps_msg+0x218>)
   118a2:	681b      	ldr	r3, [r3, #0]
   118a4:	4618      	mov	r0, r3
   118a6:	f006 fdcd 	bl	18444 <__aeabi_i2f>
   118aa:	4603      	mov	r3, r0
   118ac:	4618      	mov	r0, r3
   118ae:	f04f 0100 	mov.w	r1, #0
   118b2:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   118b6:	f006 fecd 	bl	18654 <__aeabi_fdiv>
   118ba:	4603      	mov	r3, r0
   118bc:	461a      	mov	r2, r3
   118be:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   118c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118c6:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   118c8:	4b49      	ldr	r3, [pc, #292]	; (119f0 <parse_gps_msg+0x220>)
   118ca:	681b      	ldr	r3, [r3, #0]
   118cc:	4618      	mov	r0, r3
   118ce:	f006 fdb9 	bl	18444 <__aeabi_i2f>
   118d2:	4603      	mov	r3, r0
   118d4:	4618      	mov	r0, r3
   118d6:	f006 f975 	bl	17bc4 <__aeabi_f2d>
   118da:	4602      	mov	r2, r0
   118dc:	460b      	mov	r3, r1
   118de:	4610      	mov	r0, r2
   118e0:	4619      	mov	r1, r3
   118e2:	a33d      	add	r3, pc, #244	; (adr r3, 119d8 <parse_gps_msg+0x208>)
   118e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   118e8:	f006 faea 	bl	17ec0 <__aeabi_ddiv>
   118ec:	4602      	mov	r2, r0
   118ee:	460b      	mov	r3, r1
   118f0:	4610      	mov	r0, r2
   118f2:	4619      	mov	r1, r3
   118f4:	f04f 0200 	mov.w	r2, #0
   118f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   118fc:	f2c4 0366 	movt	r3, #16486	; 0x4066
   11900:	f006 fade 	bl	17ec0 <__aeabi_ddiv>
   11904:	4602      	mov	r2, r0
   11906:	460b      	mov	r3, r1
   11908:	4610      	mov	r0, r2
   1190a:	4619      	mov	r1, r3
   1190c:	a334      	add	r3, pc, #208	; (adr r3, 119e0 <parse_gps_msg+0x210>)
   1190e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11912:	f006 f9ab 	bl	17c6c <__aeabi_dmul>
   11916:	4602      	mov	r2, r0
   11918:	460b      	mov	r3, r1
   1191a:	4610      	mov	r0, r2
   1191c:	4619      	mov	r1, r3
   1191e:	f006 fc87 	bl	18230 <__aeabi_d2f>
   11922:	4602      	mov	r2, r0
   11924:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
   11928:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1192c:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   1192e:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   11932:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11936:	681b      	ldr	r3, [r3, #0]
   11938:	4618      	mov	r0, r3
   1193a:	f006 fd7f 	bl	1843c <__aeabi_ui2f>
   1193e:	4603      	mov	r3, r0
   11940:	4618      	mov	r0, r3
   11942:	f04f 0100 	mov.w	r1, #0
   11946:	f2c4 417a 	movt	r1, #17530	; 0x447a
   1194a:	f006 fe83 	bl	18654 <__aeabi_fdiv>
   1194e:	4603      	mov	r3, r0
   11950:	461a      	mov	r2, r3
   11952:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   11956:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1195a:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   1195c:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
   11960:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11964:	681a      	ldr	r2, [r3, #0]
   11966:	f248 531f 	movw	r3, #34079	; 0x851f
   1196a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   1196e:	fb83 1302 	smull	r1, r3, r3, r2
   11972:	1159      	asrs	r1, r3, #5
   11974:	17d3      	asrs	r3, r2, #31
   11976:	1acb      	subs	r3, r1, r3
   11978:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   1197c:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   11980:	4618      	mov	r0, r3
   11982:	f006 fd5f 	bl	18444 <__aeabi_i2f>
   11986:	4602      	mov	r2, r0
   11988:	f24c 63d4 	movw	r3, #50900	; 0xc6d4
   1198c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11990:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   11992:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
   11996:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1199a:	681a      	ldr	r2, [r3, #0]
   1199c:	f248 531f 	movw	r3, #34079	; 0x851f
   119a0:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   119a4:	fb83 1302 	smull	r1, r3, r3, r2
   119a8:	1159      	asrs	r1, r3, #5
   119aa:	17d3      	asrs	r3, r2, #31
   119ac:	1aca      	subs	r2, r1, r3
   119ae:	f648 231a 	movw	r3, #35354	; 0x8a1a
   119b2:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   119b6:	4413      	add	r3, r2
   119b8:	4618      	mov	r0, r3
   119ba:	f006 fd43 	bl	18444 <__aeabi_i2f>
   119be:	4602      	mov	r2, r0
   119c0:	f24c 63d8 	movw	r3, #50904	; 0xc6d8
   119c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119c8:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   119ca:	f24c 63de 	movw	r3, #50910	; 0xc6de
   119ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119d2:	2201      	movs	r2, #1
   119d4:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   119d6:	bd80      	pop	{r7, pc}
   119d8:	00000000 	.word	0x00000000
   119dc:	40f86a00 	.word	0x40f86a00
   119e0:	5a7ed197 	.word	0x5a7ed197
   119e4:	400921fb 	.word	0x400921fb
   119e8:	2004c6ec 	.word	0x2004c6ec
   119ec:	2004c6f4 	.word	0x2004c6f4
   119f0:	2004c6f8 	.word	0x2004c6f8

000119f4 <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   119f4:	b480      	push	{r7}
   119f6:	b083      	sub	sp, #12
   119f8:	af00      	add	r7, sp, #0
   119fa:	4603      	mov	r3, r0
   119fc:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   119fe:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a06:	781b      	ldrb	r3, [r3, #0]
   11a08:	2b06      	cmp	r3, #6
   11a0a:	d81d      	bhi.n	11a48 <parse_ubx+0x54>
    ck_a += c;
   11a0c:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a14:	781a      	ldrb	r2, [r3, #0]
   11a16:	79fb      	ldrb	r3, [r7, #7]
   11a18:	4413      	add	r3, r2
   11a1a:	b2da      	uxtb	r2, r3
   11a1c:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a24:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   11a26:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a2e:	781a      	ldrb	r2, [r3, #0]
   11a30:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a38:	781b      	ldrb	r3, [r3, #0]
   11a3a:	4413      	add	r3, r2
   11a3c:	b2da      	uxtb	r2, r3
   11a3e:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11a42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a46:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   11a48:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a50:	781b      	ldrb	r3, [r3, #0]
   11a52:	2b00      	cmp	r3, #0
   11a54:	d110      	bne.n	11a78 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   11a56:	79fb      	ldrb	r3, [r7, #7]
   11a58:	2bb5      	cmp	r3, #181	; 0xb5
   11a5a:	f040 8135 	bne.w	11cc8 <parse_ubx+0x2d4>
      ubx_status++;
   11a5e:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a66:	781b      	ldrb	r3, [r3, #0]
   11a68:	3301      	adds	r3, #1
   11a6a:	b2da      	uxtb	r2, r3
   11a6c:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a74:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11a76:	e12f      	b.n	11cd8 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   11a78:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a80:	781b      	ldrb	r3, [r3, #0]
   11a82:	2b01      	cmp	r3, #1
   11a84:	d11c      	bne.n	11ac0 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   11a86:	79fb      	ldrb	r3, [r7, #7]
   11a88:	2b62      	cmp	r3, #98	; 0x62
   11a8a:	d000      	beq.n	11a8e <parse_ubx+0x9a>
      goto error;
   11a8c:	e11d      	b.n	11cca <parse_ubx+0x2d6>
    ck_a = 0;
   11a8e:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a96:	2200      	movs	r2, #0
   11a98:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   11a9a:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11a9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aa2:	2200      	movs	r2, #0
   11aa4:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11aa6:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11aaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aae:	781b      	ldrb	r3, [r3, #0]
   11ab0:	3301      	adds	r3, #1
   11ab2:	b2da      	uxtb	r2, r3
   11ab4:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11abc:	701a      	strb	r2, [r3, #0]
   11abe:	e103      	b.n	11cc8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11ac0:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ac8:	781b      	ldrb	r3, [r3, #0]
   11aca:	2b02      	cmp	r3, #2
   11acc:	d127      	bne.n	11b1e <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   11ace:	f24c 63dd 	movw	r3, #50909	; 0xc6dd
   11ad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ad6:	781b      	ldrb	r3, [r3, #0]
   11ad8:	b2db      	uxtb	r3, r3
   11ada:	2b00      	cmp	r3, #0
   11adc:	d00c      	beq.n	11af8 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   11ade:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
   11ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ae6:	781b      	ldrb	r3, [r3, #0]
   11ae8:	3301      	adds	r3, #1
   11aea:	b2da      	uxtb	r2, r3
   11aec:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
   11af0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11af4:	701a      	strb	r2, [r3, #0]
      goto error;
   11af6:	e0e8      	b.n	11cca <parse_ubx+0x2d6>
    }
    ubx_class = c;
   11af8:	f24c 73e6 	movw	r3, #51174	; 0xc7e6
   11afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b00:	79fa      	ldrb	r2, [r7, #7]
   11b02:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11b04:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b0c:	781b      	ldrb	r3, [r3, #0]
   11b0e:	3301      	adds	r3, #1
   11b10:	b2da      	uxtb	r2, r3
   11b12:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b1a:	701a      	strb	r2, [r3, #0]
   11b1c:	e0d4      	b.n	11cc8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   11b1e:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b26:	781b      	ldrb	r3, [r3, #0]
   11b28:	2b03      	cmp	r3, #3
   11b2a:	d112      	bne.n	11b52 <parse_ubx+0x15e>
  {
    ubx_id = c;
   11b2c:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   11b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b34:	79fa      	ldrb	r2, [r7, #7]
   11b36:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11b38:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b40:	781b      	ldrb	r3, [r3, #0]
   11b42:	3301      	adds	r3, #1
   11b44:	b2da      	uxtb	r2, r3
   11b46:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b4e:	701a      	strb	r2, [r3, #0]
   11b50:	e0ba      	b.n	11cc8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   11b52:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b5a:	781b      	ldrb	r3, [r3, #0]
   11b5c:	2b04      	cmp	r3, #4
   11b5e:	d113      	bne.n	11b88 <parse_ubx+0x194>
  {
    ubx_len = c;
   11b60:	79fb      	ldrb	r3, [r7, #7]
   11b62:	b29a      	uxth	r2, r3
   11b64:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b6c:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   11b6e:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b76:	781b      	ldrb	r3, [r3, #0]
   11b78:	3301      	adds	r3, #1
   11b7a:	b2da      	uxtb	r2, r3
   11b7c:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b84:	701a      	strb	r2, [r3, #0]
   11b86:	e09f      	b.n	11cc8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11b88:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b90:	781b      	ldrb	r3, [r3, #0]
   11b92:	2b05      	cmp	r3, #5
   11b94:	d12b      	bne.n	11bee <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   11b96:	79fb      	ldrb	r3, [r7, #7]
   11b98:	021b      	lsls	r3, r3, #8
   11b9a:	b29a      	uxth	r2, r3
   11b9c:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ba4:	881b      	ldrh	r3, [r3, #0]
   11ba6:	b29b      	uxth	r3, r3
   11ba8:	4313      	orrs	r3, r2
   11baa:	b29b      	uxth	r3, r3
   11bac:	b29a      	uxth	r2, r3
   11bae:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bb6:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11bb8:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bc0:	881b      	ldrh	r3, [r3, #0]
   11bc2:	2bff      	cmp	r3, #255	; 0xff
   11bc4:	d900      	bls.n	11bc8 <parse_ubx+0x1d4>
      goto error;
   11bc6:	e080      	b.n	11cca <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11bc8:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bd0:	2200      	movs	r2, #0
   11bd2:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11bd4:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bdc:	781b      	ldrb	r3, [r3, #0]
   11bde:	3301      	adds	r3, #1
   11be0:	b2da      	uxtb	r2, r3
   11be2:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11be6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bea:	701a      	strb	r2, [r3, #0]
   11bec:	e06c      	b.n	11cc8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   11bee:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bf6:	781b      	ldrb	r3, [r3, #0]
   11bf8:	2b06      	cmp	r3, #6
   11bfa:	d131      	bne.n	11c60 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   11bfc:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11c00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c04:	781b      	ldrb	r3, [r3, #0]
   11c06:	461a      	mov	r2, r3
   11c08:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   11c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c10:	79f9      	ldrb	r1, [r7, #7]
   11c12:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   11c14:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c1c:	781b      	ldrb	r3, [r3, #0]
   11c1e:	3301      	adds	r3, #1
   11c20:	b2da      	uxtb	r2, r3
   11c22:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11c26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c2a:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   11c2c:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11c30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c34:	781b      	ldrb	r3, [r3, #0]
   11c36:	461a      	mov	r2, r3
   11c38:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11c3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c40:	881b      	ldrh	r3, [r3, #0]
   11c42:	429a      	cmp	r2, r3
   11c44:	d340      	bcc.n	11cc8 <parse_ubx+0x2d4>
      ubx_status++;
   11c46:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c4e:	781b      	ldrb	r3, [r3, #0]
   11c50:	3301      	adds	r3, #1
   11c52:	b2da      	uxtb	r2, r3
   11c54:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c5c:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11c5e:	e03b      	b.n	11cd8 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   11c60:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c68:	781b      	ldrb	r3, [r3, #0]
   11c6a:	2b07      	cmp	r3, #7
   11c6c:	d115      	bne.n	11c9a <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   11c6e:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c76:	781b      	ldrb	r3, [r3, #0]
   11c78:	79fa      	ldrb	r2, [r7, #7]
   11c7a:	429a      	cmp	r2, r3
   11c7c:	d000      	beq.n	11c80 <parse_ubx+0x28c>
      goto error;
   11c7e:	e024      	b.n	11cca <parse_ubx+0x2d6>
    ubx_status++;
   11c80:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c88:	781b      	ldrb	r3, [r3, #0]
   11c8a:	3301      	adds	r3, #1
   11c8c:	b2da      	uxtb	r2, r3
   11c8e:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c96:	701a      	strb	r2, [r3, #0]
   11c98:	e016      	b.n	11cc8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   11c9a:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ca2:	781b      	ldrb	r3, [r3, #0]
   11ca4:	2b08      	cmp	r3, #8
   11ca6:	d10f      	bne.n	11cc8 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11ca8:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cb0:	781b      	ldrb	r3, [r3, #0]
   11cb2:	79fa      	ldrb	r2, [r7, #7]
   11cb4:	429a      	cmp	r2, r3
   11cb6:	d000      	beq.n	11cba <parse_ubx+0x2c6>
      goto error;
   11cb8:	e007      	b.n	11cca <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   11cba:	f24c 63dd 	movw	r3, #50909	; 0xc6dd
   11cbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cc2:	2201      	movs	r2, #1
   11cc4:	701a      	strb	r2, [r3, #0]
    goto restart;
   11cc6:	e000      	b.n	11cca <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11cc8:	e006      	b.n	11cd8 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   11cca:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cd2:	2200      	movs	r2, #0
   11cd4:	701a      	strb	r2, [r3, #0]
  return;
   11cd6:	bf00      	nop
}
   11cd8:	370c      	adds	r7, #12
   11cda:	46bd      	mov	sp, r7
   11cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
   11ce0:	4770      	bx	lr
   11ce2:	bf00      	nop

00011ce4 <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   11ce4:	b580      	push	{r7, lr}
   11ce6:	b082      	sub	sp, #8
   11ce8:	af00      	add	r7, sp, #0
   11cea:	f242 039c 	movw	r3, #8348	; 0x209c
   11cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cf2:	781b      	ldrb	r3, [r3, #0]
   11cf4:	71fb      	strb	r3, [r7, #7]
   11cf6:	79fb      	ldrb	r3, [r7, #7]
   11cf8:	4618      	mov	r0, r3
   11cfa:	f7ff fe7b 	bl	119f4 <parse_ubx>
   11cfe:	3708      	adds	r7, #8
   11d00:	46bd      	mov	sp, r7
   11d02:	bd80      	pop	{r7, pc}
   11d04:	f3af 8000 	nop.w

00011d08 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   11d08:	b580      	push	{r7, lr}
   11d0a:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   11d0c:	f240 5348 	movw	r3, #1352	; 0x548
   11d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d14:	f24c 228f 	movw	r2, #49807	; 0xc28f
   11d18:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   11d1c:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   11d1e:	2001      	movs	r0, #1
   11d20:	f24c 71ec 	movw	r1, #51180	; 0xc7ec
   11d24:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11d28:	f7ff fc82 	bl	11630 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   11d2c:	2002      	movs	r0, #2
   11d2e:	f64c 0130 	movw	r1, #51248	; 0xc830
   11d32:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11d36:	f7ff fc7b 	bl	11630 <adc_buf_channel>
}
   11d3a:	bd80      	pop	{r7, pc}

00011d3c <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   11d3c:	b480      	push	{r7}
   11d3e:	b083      	sub	sp, #12
   11d40:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   11d42:	f24c 73ec 	movw	r3, #51180	; 0xc7ec
   11d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d4a:	881b      	ldrh	r3, [r3, #0]
   11d4c:	095b      	lsrs	r3, r3, #5
   11d4e:	b29b      	uxth	r3, r3
   11d50:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   11d52:	f64c 0330 	movw	r3, #51248	; 0xc830
   11d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d5a:	881b      	ldrh	r3, [r3, #0]
   11d5c:	095b      	lsrs	r3, r3, #5
   11d5e:	b29b      	uxth	r3, r3
   11d60:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   11d62:	88fb      	ldrh	r3, [r7, #6]
   11d64:	425b      	negs	r3, r3
   11d66:	b29a      	uxth	r2, r3
   11d68:	88bb      	ldrh	r3, [r7, #4]
   11d6a:	1ad3      	subs	r3, r2, r3
   11d6c:	b29a      	uxth	r2, r3
   11d6e:	f240 5342 	movw	r3, #1346	; 0x542
   11d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d76:	881b      	ldrh	r3, [r3, #0]
   11d78:	b29b      	uxth	r3, r3
   11d7a:	1ad3      	subs	r3, r2, r3
   11d7c:	b29b      	uxth	r3, r3
   11d7e:	b29a      	uxth	r2, r3
   11d80:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   11d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d88:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   11d8a:	88ba      	ldrh	r2, [r7, #4]
   11d8c:	88fb      	ldrh	r3, [r7, #6]
   11d8e:	1ad3      	subs	r3, r2, r3
   11d90:	b29a      	uxth	r2, r3
   11d92:	f240 5344 	movw	r3, #1348	; 0x544
   11d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d9a:	881b      	ldrh	r3, [r3, #0]
   11d9c:	b29b      	uxth	r3, r3
   11d9e:	1ad3      	subs	r3, r2, r3
   11da0:	b29b      	uxth	r3, r3
   11da2:	b29a      	uxth	r2, r3
   11da4:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
   11da8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dac:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   11dae:	370c      	adds	r7, #12
   11db0:	46bd      	mov	sp, r7
   11db2:	f85d 7b04 	ldr.w	r7, [sp], #4
   11db6:	4770      	bx	lr

00011db8 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11db8:	b580      	push	{r7, lr}
   11dba:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   11dbc:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
   11dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dc4:	881b      	ldrh	r3, [r3, #0]
   11dc6:	b29b      	uxth	r3, r3
   11dc8:	425b      	negs	r3, r3
   11dca:	b29b      	uxth	r3, r3
   11dcc:	b29a      	uxth	r2, r3
   11dce:	f240 5340 	movw	r3, #1344	; 0x540
   11dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dd6:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   11dd8:	f240 5340 	movw	r3, #1344	; 0x540
   11ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11de0:	881b      	ldrh	r3, [r3, #0]
   11de2:	b21b      	sxth	r3, r3
   11de4:	4618      	mov	r0, r3
   11de6:	f005 fedb 	bl	17ba0 <__aeabi_i2d>
   11dea:	4602      	mov	r2, r0
   11dec:	460b      	mov	r3, r1
   11dee:	f04f 0000 	mov.w	r0, #0
   11df2:	f04f 0100 	mov.w	r1, #0
   11df6:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   11dfa:	f006 f861 	bl	17ec0 <__aeabi_ddiv>
   11dfe:	4602      	mov	r2, r0
   11e00:	460b      	mov	r3, r1
   11e02:	4610      	mov	r0, r2
   11e04:	4619      	mov	r1, r3
   11e06:	f006 fa13 	bl	18230 <__aeabi_d2f>
   11e0a:	4602      	mov	r2, r0
   11e0c:	f240 5348 	movw	r3, #1352	; 0x548
   11e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e14:	601a      	str	r2, [r3, #0]
}
   11e16:	bd80      	pop	{r7, pc}

00011e18 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   11e18:	b590      	push	{r4, r7, lr}
   11e1a:	b083      	sub	sp, #12
   11e1c:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   11e1e:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e26:	681a      	ldr	r2, [r3, #0]
   11e28:	f64c 0374 	movw	r3, #51316	; 0xc874
   11e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e30:	681b      	ldr	r3, [r3, #0]
   11e32:	4610      	mov	r0, r2
   11e34:	4619      	mov	r1, r3
   11e36:	f006 fa4f 	bl	182d8 <__aeabi_fsub>
   11e3a:	4603      	mov	r3, r0
   11e3c:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   11e3e:	f240 534c 	movw	r3, #1356	; 0x54c
   11e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e46:	681b      	ldr	r3, [r3, #0]
   11e48:	4618      	mov	r0, r3
   11e4a:	6879      	ldr	r1, [r7, #4]
   11e4c:	f006 fb4e 	bl	184ec <__aeabi_fmul>
   11e50:	4603      	mov	r3, r0
   11e52:	4618      	mov	r0, r3
   11e54:	f04f 0100 	mov.w	r1, #0
   11e58:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11e5c:	f006 fce4 	bl	18828 <__aeabi_fcmplt>
   11e60:	4603      	mov	r3, r0
   11e62:	2b00      	cmp	r3, #0
   11e64:	d002      	beq.n	11e6c <roll_pitch_pid_run+0x54>
   11e66:	f64d 2280 	movw	r2, #55936	; 0xda80
   11e6a:	e026      	b.n	11eba <roll_pitch_pid_run+0xa2>
   11e6c:	f240 534c 	movw	r3, #1356	; 0x54c
   11e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e74:	681b      	ldr	r3, [r3, #0]
   11e76:	4618      	mov	r0, r3
   11e78:	6879      	ldr	r1, [r7, #4]
   11e7a:	f006 fb37 	bl	184ec <__aeabi_fmul>
   11e7e:	4603      	mov	r3, r0
   11e80:	4618      	mov	r0, r3
   11e82:	f04f 0100 	mov.w	r1, #0
   11e86:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11e8a:	f006 fceb 	bl	18864 <__aeabi_fcmpgt>
   11e8e:	4603      	mov	r3, r0
   11e90:	2b00      	cmp	r3, #0
   11e92:	d002      	beq.n	11e9a <roll_pitch_pid_run+0x82>
   11e94:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11e98:	e00e      	b.n	11eb8 <roll_pitch_pid_run+0xa0>
   11e9a:	f240 534c 	movw	r3, #1356	; 0x54c
   11e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ea2:	681b      	ldr	r3, [r3, #0]
   11ea4:	4618      	mov	r0, r3
   11ea6:	6879      	ldr	r1, [r7, #4]
   11ea8:	f006 fb20 	bl	184ec <__aeabi_fmul>
   11eac:	4603      	mov	r3, r0
   11eae:	4618      	mov	r0, r3
   11eb0:	f006 fce2 	bl	18878 <__aeabi_f2iz>
   11eb4:	4603      	mov	r3, r0
   11eb6:	b29b      	uxth	r3, r3
   11eb8:	b29a      	uxth	r2, r3
   11eba:	f64c 037e 	movw	r3, #51326	; 0xc87e
   11ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ec2:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   11ec4:	f64c 0384 	movw	r3, #51332	; 0xc884
   11ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ecc:	681b      	ldr	r3, [r3, #0]
   11ece:	4618      	mov	r0, r3
   11ed0:	f04f 0100 	mov.w	r1, #0
   11ed4:	f006 fca8 	bl	18828 <__aeabi_fcmplt>
   11ed8:	4603      	mov	r3, r0
   11eda:	2b00      	cmp	r3, #0
   11edc:	d006      	beq.n	11eec <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   11ede:	f64c 0384 	movw	r3, #51332	; 0xc884
   11ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ee6:	f04f 0200 	mov.w	r2, #0
   11eea:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   11eec:	f64c 3310 	movw	r3, #51984	; 0xcb10
   11ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ef4:	681a      	ldr	r2, [r3, #0]
   11ef6:	f64c 0378 	movw	r3, #51320	; 0xc878
   11efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11efe:	681b      	ldr	r3, [r3, #0]
   11f00:	4610      	mov	r0, r2
   11f02:	4619      	mov	r1, r3
   11f04:	f006 f9e8 	bl	182d8 <__aeabi_fsub>
   11f08:	4603      	mov	r3, r0
   11f0a:	461c      	mov	r4, r3
   11f0c:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11f10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f14:	681b      	ldr	r3, [r3, #0]
   11f16:	4618      	mov	r0, r3
   11f18:	f04f 0100 	mov.w	r1, #0
   11f1c:	f006 fc84 	bl	18828 <__aeabi_fcmplt>
   11f20:	4603      	mov	r3, r0
   11f22:	2b00      	cmp	r3, #0
   11f24:	d007      	beq.n	11f36 <roll_pitch_pid_run+0x11e>
   11f26:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f2e:	681b      	ldr	r3, [r3, #0]
   11f30:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11f34:	e004      	b.n	11f40 <roll_pitch_pid_run+0x128>
   11f36:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11f3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f3e:	681a      	ldr	r2, [r3, #0]
   11f40:	f64c 0384 	movw	r3, #51332	; 0xc884
   11f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f48:	681b      	ldr	r3, [r3, #0]
   11f4a:	4610      	mov	r0, r2
   11f4c:	4619      	mov	r1, r3
   11f4e:	f006 facd 	bl	184ec <__aeabi_fmul>
   11f52:	4603      	mov	r3, r0
   11f54:	4620      	mov	r0, r4
   11f56:	4619      	mov	r1, r3
   11f58:	f006 f9be 	bl	182d8 <__aeabi_fsub>
   11f5c:	4603      	mov	r3, r0
   11f5e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   11f62:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   11f64:	f240 5350 	movw	r3, #1360	; 0x550
   11f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f6c:	681b      	ldr	r3, [r3, #0]
   11f6e:	4618      	mov	r0, r3
   11f70:	6879      	ldr	r1, [r7, #4]
   11f72:	f006 fabb 	bl	184ec <__aeabi_fmul>
   11f76:	4603      	mov	r3, r0
   11f78:	4618      	mov	r0, r3
   11f7a:	f04f 0100 	mov.w	r1, #0
   11f7e:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11f82:	f006 fc51 	bl	18828 <__aeabi_fcmplt>
   11f86:	4603      	mov	r3, r0
   11f88:	2b00      	cmp	r3, #0
   11f8a:	d002      	beq.n	11f92 <roll_pitch_pid_run+0x17a>
   11f8c:	f64d 2280 	movw	r2, #55936	; 0xda80
   11f90:	e026      	b.n	11fe0 <roll_pitch_pid_run+0x1c8>
   11f92:	f240 5350 	movw	r3, #1360	; 0x550
   11f96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f9a:	681b      	ldr	r3, [r3, #0]
   11f9c:	4618      	mov	r0, r3
   11f9e:	6879      	ldr	r1, [r7, #4]
   11fa0:	f006 faa4 	bl	184ec <__aeabi_fmul>
   11fa4:	4603      	mov	r3, r0
   11fa6:	4618      	mov	r0, r3
   11fa8:	f04f 0100 	mov.w	r1, #0
   11fac:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11fb0:	f006 fc58 	bl	18864 <__aeabi_fcmpgt>
   11fb4:	4603      	mov	r3, r0
   11fb6:	2b00      	cmp	r3, #0
   11fb8:	d002      	beq.n	11fc0 <roll_pitch_pid_run+0x1a8>
   11fba:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11fbe:	e00e      	b.n	11fde <roll_pitch_pid_run+0x1c6>
   11fc0:	f240 5350 	movw	r3, #1360	; 0x550
   11fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fc8:	681b      	ldr	r3, [r3, #0]
   11fca:	4618      	mov	r0, r3
   11fcc:	6879      	ldr	r1, [r7, #4]
   11fce:	f006 fa8d 	bl	184ec <__aeabi_fmul>
   11fd2:	4603      	mov	r3, r0
   11fd4:	4618      	mov	r0, r3
   11fd6:	f006 fc4f 	bl	18878 <__aeabi_f2iz>
   11fda:	4603      	mov	r3, r0
   11fdc:	b29b      	uxth	r3, r3
   11fde:	b29a      	uxth	r2, r3
   11fe0:	f64c 0380 	movw	r3, #51328	; 0xc880
   11fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fe8:	801a      	strh	r2, [r3, #0]
}
   11fea:	370c      	adds	r7, #12
   11fec:	46bd      	mov	sp, r7
   11fee:	bd90      	pop	{r4, r7, pc}

00011ff0 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   11ff0:	b580      	push	{r7, lr}
   11ff2:	b082      	sub	sp, #8
   11ff4:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   11ff6:	f64c 3338 	movw	r3, #52024	; 0xcb38
   11ffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ffe:	681a      	ldr	r2, [r3, #0]
   12000:	f64c 038c 	movw	r3, #51340	; 0xc88c
   12004:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12008:	681b      	ldr	r3, [r3, #0]
   1200a:	4610      	mov	r0, r2
   1200c:	4619      	mov	r1, r3
   1200e:	f006 f963 	bl	182d8 <__aeabi_fsub>
   12012:	4603      	mov	r3, r0
   12014:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   12016:	e013      	b.n	12040 <course_pid_run+0x50>
   12018:	6878      	ldr	r0, [r7, #4]
   1201a:	f005 fdd3 	bl	17bc4 <__aeabi_f2d>
   1201e:	4602      	mov	r2, r0
   12020:	460b      	mov	r3, r1
   12022:	4610      	mov	r0, r2
   12024:	4619      	mov	r1, r3
   12026:	a348      	add	r3, pc, #288	; (adr r3, 12148 <course_pid_run+0x158>)
   12028:	e9d3 2300 	ldrd	r2, r3, [r3]
   1202c:	f005 fc6a 	bl	17904 <__aeabi_dsub>
   12030:	4602      	mov	r2, r0
   12032:	460b      	mov	r3, r1
   12034:	4610      	mov	r0, r2
   12036:	4619      	mov	r1, r3
   12038:	f006 f8fa 	bl	18230 <__aeabi_d2f>
   1203c:	4603      	mov	r3, r0
   1203e:	607b      	str	r3, [r7, #4]
   12040:	6878      	ldr	r0, [r7, #4]
   12042:	f005 fdbf 	bl	17bc4 <__aeabi_f2d>
   12046:	4602      	mov	r2, r0
   12048:	460b      	mov	r3, r1
   1204a:	4610      	mov	r0, r2
   1204c:	4619      	mov	r1, r3
   1204e:	a340      	add	r3, pc, #256	; (adr r3, 12150 <course_pid_run+0x160>)
   12050:	e9d3 2300 	ldrd	r2, r3, [r3]
   12054:	f006 f89a 	bl	1818c <__aeabi_dcmpgt>
   12058:	4603      	mov	r3, r0
   1205a:	2b00      	cmp	r3, #0
   1205c:	d1dc      	bne.n	12018 <course_pid_run+0x28>
   1205e:	e013      	b.n	12088 <course_pid_run+0x98>
   12060:	6878      	ldr	r0, [r7, #4]
   12062:	f005 fdaf 	bl	17bc4 <__aeabi_f2d>
   12066:	4602      	mov	r2, r0
   12068:	460b      	mov	r3, r1
   1206a:	4610      	mov	r0, r2
   1206c:	4619      	mov	r1, r3
   1206e:	a336      	add	r3, pc, #216	; (adr r3, 12148 <course_pid_run+0x158>)
   12070:	e9d3 2300 	ldrd	r2, r3, [r3]
   12074:	f005 fc48 	bl	17908 <__adddf3>
   12078:	4602      	mov	r2, r0
   1207a:	460b      	mov	r3, r1
   1207c:	4610      	mov	r0, r2
   1207e:	4619      	mov	r1, r3
   12080:	f006 f8d6 	bl	18230 <__aeabi_d2f>
   12084:	4603      	mov	r3, r0
   12086:	607b      	str	r3, [r7, #4]
   12088:	6878      	ldr	r0, [r7, #4]
   1208a:	f005 fd9b 	bl	17bc4 <__aeabi_f2d>
   1208e:	4602      	mov	r2, r0
   12090:	460b      	mov	r3, r1
   12092:	4610      	mov	r0, r2
   12094:	4619      	mov	r1, r3
   12096:	a330      	add	r3, pc, #192	; (adr r3, 12158 <course_pid_run+0x168>)
   12098:	e9d3 2300 	ldrd	r2, r3, [r3]
   1209c:	f006 f858 	bl	18150 <__aeabi_dcmplt>
   120a0:	4603      	mov	r3, r0
   120a2:	2b00      	cmp	r3, #0
   120a4:	d1dc      	bne.n	12060 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   120a6:	f240 5358 	movw	r3, #1368	; 0x558
   120aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120ae:	681b      	ldr	r3, [r3, #0]
   120b0:	4618      	mov	r0, r3
   120b2:	6879      	ldr	r1, [r7, #4]
   120b4:	f006 fa1a 	bl	184ec <__aeabi_fmul>
   120b8:	4603      	mov	r3, r0
   120ba:	461a      	mov	r2, r3
   120bc:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   120c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120c4:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   120c6:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   120ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120ce:	681a      	ldr	r2, [r3, #0]
   120d0:	f240 535c 	movw	r3, #1372	; 0x55c
   120d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120d8:	681b      	ldr	r3, [r3, #0]
   120da:	4610      	mov	r0, r2
   120dc:	4619      	mov	r1, r3
   120de:	f006 fbc1 	bl	18864 <__aeabi_fcmpgt>
   120e2:	4603      	mov	r3, r0
   120e4:	2b00      	cmp	r3, #0
   120e6:	d00a      	beq.n	120fe <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   120e8:	f240 535c 	movw	r3, #1372	; 0x55c
   120ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120f0:	681a      	ldr	r2, [r3, #0]
   120f2:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   120f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120fa:	601a      	str	r2, [r3, #0]
   120fc:	e01e      	b.n	1213c <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   120fe:	f240 535c 	movw	r3, #1372	; 0x55c
   12102:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12106:	681b      	ldr	r3, [r3, #0]
   12108:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   1210c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12110:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12114:	681b      	ldr	r3, [r3, #0]
   12116:	4610      	mov	r0, r2
   12118:	4619      	mov	r1, r3
   1211a:	f006 fba3 	bl	18864 <__aeabi_fcmpgt>
   1211e:	4603      	mov	r3, r0
   12120:	2b00      	cmp	r3, #0
   12122:	d00b      	beq.n	1213c <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   12124:	f240 535c 	movw	r3, #1372	; 0x55c
   12128:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1212c:	681b      	ldr	r3, [r3, #0]
   1212e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   12132:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12136:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1213a:	601a      	str	r2, [r3, #0]
}
   1213c:	3708      	adds	r7, #8
   1213e:	46bd      	mov	sp, r7
   12140:	bd80      	pop	{r7, pc}
   12142:	bf00      	nop
   12144:	f3af 8000 	nop.w
   12148:	54442d18 	.word	0x54442d18
   1214c:	401921fb 	.word	0x401921fb
   12150:	54442d18 	.word	0x54442d18
   12154:	400921fb 	.word	0x400921fb
   12158:	54442d18 	.word	0x54442d18
   1215c:	c00921fb 	.word	0xc00921fb

00012160 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   12160:	b5b0      	push	{r4, r5, r7, lr}
   12162:	b082      	sub	sp, #8
   12164:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   12166:	f64c 331c 	movw	r3, #51996	; 0xcb1c
   1216a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1216e:	681a      	ldr	r2, [r3, #0]
   12170:	f64c 0390 	movw	r3, #51344	; 0xc890
   12174:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12178:	681b      	ldr	r3, [r3, #0]
   1217a:	4610      	mov	r0, r2
   1217c:	4619      	mov	r1, r3
   1217e:	f006 f8ab 	bl	182d8 <__aeabi_fsub>
   12182:	4603      	mov	r3, r0
   12184:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   12186:	f24c 532f 	movw	r3, #50479	; 0xc52f
   1218a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1218e:	781b      	ldrb	r3, [r3, #0]
   12190:	2b00      	cmp	r3, #0
   12192:	f000 80a8 	beq.w	122e6 <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   12196:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
   1219a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1219e:	881b      	ldrh	r3, [r3, #0]
   121a0:	b29a      	uxth	r2, r3
   121a2:	f64c 037c 	movw	r3, #51324	; 0xc87c
   121a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121aa:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   121ac:	f240 5364 	movw	r3, #1380	; 0x564
   121b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121b4:	681a      	ldr	r2, [r3, #0]
   121b6:	f64c 039c 	movw	r3, #51356	; 0xc89c
   121ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121be:	681b      	ldr	r3, [r3, #0]
   121c0:	4610      	mov	r0, r2
   121c2:	4619      	mov	r1, r3
   121c4:	f006 f992 	bl	184ec <__aeabi_fmul>
   121c8:	4603      	mov	r3, r0
   121ca:	4618      	mov	r0, r3
   121cc:	6879      	ldr	r1, [r7, #4]
   121ce:	f006 f885 	bl	182dc <__addsf3>
   121d2:	4603      	mov	r3, r0
   121d4:	461a      	mov	r2, r3
   121d6:	f240 5360 	movw	r3, #1376	; 0x560
   121da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121de:	681b      	ldr	r3, [r3, #0]
   121e0:	4610      	mov	r0, r2
   121e2:	4619      	mov	r1, r3
   121e4:	f006 f982 	bl	184ec <__aeabi_fmul>
   121e8:	4603      	mov	r3, r0
   121ea:	461a      	mov	r2, r3
   121ec:	f64c 0378 	movw	r3, #51320	; 0xc878
   121f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121f4:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   121f6:	f64c 0378 	movw	r3, #51320	; 0xc878
   121fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121fe:	681a      	ldr	r2, [r3, #0]
   12200:	f240 5368 	movw	r3, #1384	; 0x568
   12204:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12208:	681b      	ldr	r3, [r3, #0]
   1220a:	4610      	mov	r0, r2
   1220c:	4619      	mov	r1, r3
   1220e:	f006 fb29 	bl	18864 <__aeabi_fcmpgt>
   12212:	4603      	mov	r3, r0
   12214:	2b00      	cmp	r3, #0
   12216:	d009      	beq.n	1222c <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   12218:	f240 5368 	movw	r3, #1384	; 0x568
   1221c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12220:	681a      	ldr	r2, [r3, #0]
   12222:	f64c 0378 	movw	r3, #51320	; 0xc878
   12226:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1222a:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   1222c:	f64c 0378 	movw	r3, #51320	; 0xc878
   12230:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12234:	681a      	ldr	r2, [r3, #0]
   12236:	f240 536c 	movw	r3, #1388	; 0x56c
   1223a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1223e:	681b      	ldr	r3, [r3, #0]
   12240:	4610      	mov	r0, r2
   12242:	4619      	mov	r1, r3
   12244:	f006 faf0 	bl	18828 <__aeabi_fcmplt>
   12248:	4603      	mov	r3, r0
   1224a:	2b00      	cmp	r3, #0
   1224c:	d009      	beq.n	12262 <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   1224e:	f240 536c 	movw	r3, #1388	; 0x56c
   12252:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12256:	681a      	ldr	r2, [r3, #0]
   12258:	f64c 0378 	movw	r3, #51320	; 0xc878
   1225c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12260:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   12262:	f64c 039c 	movw	r3, #51356	; 0xc89c
   12266:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1226a:	681b      	ldr	r3, [r3, #0]
   1226c:	4618      	mov	r0, r3
   1226e:	6879      	ldr	r1, [r7, #4]
   12270:	f006 f834 	bl	182dc <__addsf3>
   12274:	4603      	mov	r3, r0
   12276:	461a      	mov	r2, r3
   12278:	f64c 039c 	movw	r3, #51356	; 0xc89c
   1227c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12280:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   12282:	f64c 039c 	movw	r3, #51356	; 0xc89c
   12286:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1228a:	681b      	ldr	r3, [r3, #0]
   1228c:	4618      	mov	r0, r3
   1228e:	f04f 0100 	mov.w	r1, #0
   12292:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   12296:	f006 fae5 	bl	18864 <__aeabi_fcmpgt>
   1229a:	4603      	mov	r3, r0
   1229c:	2b00      	cmp	r3, #0
   1229e:	d008      	beq.n	122b2 <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   122a0:	f64c 039c 	movw	r3, #51356	; 0xc89c
   122a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122a8:	f04f 0200 	mov.w	r2, #0
   122ac:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   122b0:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   122b2:	f64c 039c 	movw	r3, #51356	; 0xc89c
   122b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122ba:	681b      	ldr	r3, [r3, #0]
   122bc:	4618      	mov	r0, r3
   122be:	f04f 0100 	mov.w	r1, #0
   122c2:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   122c6:	f006 faaf 	bl	18828 <__aeabi_fcmplt>
   122ca:	4603      	mov	r3, r0
   122cc:	2b00      	cmp	r3, #0
   122ce:	d100      	bne.n	122d2 <climb_pid_run+0x172>
   122d0:	e109      	b.n	124e6 <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   122d2:	f64c 039c 	movw	r3, #51356	; 0xc89c
   122d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122da:	f04f 0200 	mov.w	r2, #0
   122de:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   122e2:	601a      	str	r2, [r3, #0]
   122e4:	e0ff      	b.n	124e6 <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   122e6:	f64c 0390 	movw	r3, #51344	; 0xc890
   122ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122ee:	681b      	ldr	r3, [r3, #0]
   122f0:	4618      	mov	r0, r3
   122f2:	f04f 0100 	mov.w	r1, #0
   122f6:	f006 fab5 	bl	18864 <__aeabi_fcmpgt>
   122fa:	4603      	mov	r3, r0
   122fc:	2b00      	cmp	r3, #0
   122fe:	d010      	beq.n	12322 <climb_pid_run+0x1c2>
   12300:	f64c 0390 	movw	r3, #51344	; 0xc890
   12304:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12308:	681a      	ldr	r2, [r3, #0]
   1230a:	f240 5354 	movw	r3, #1364	; 0x554
   1230e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12312:	681b      	ldr	r3, [r3, #0]
   12314:	4610      	mov	r0, r2
   12316:	4619      	mov	r1, r3
   12318:	f006 f8e8 	bl	184ec <__aeabi_fmul>
   1231c:	4603      	mov	r3, r0
   1231e:	461a      	mov	r2, r3
   12320:	e001      	b.n	12326 <climb_pid_run+0x1c6>
   12322:	f04f 0200 	mov.w	r2, #0
   12326:	f64c 0388 	movw	r3, #51336	; 0xc888
   1232a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1232e:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   12330:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   12334:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   12338:	f64c 0398 	movw	r3, #51352	; 0xc898
   1233c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12340:	681b      	ldr	r3, [r3, #0]
   12342:	4610      	mov	r0, r2
   12344:	4619      	mov	r1, r3
   12346:	f006 f8d1 	bl	184ec <__aeabi_fmul>
   1234a:	4603      	mov	r3, r0
   1234c:	4618      	mov	r0, r3
   1234e:	6879      	ldr	r1, [r7, #4]
   12350:	f005 ffc4 	bl	182dc <__addsf3>
   12354:	4603      	mov	r3, r0
   12356:	461a      	mov	r2, r3
   12358:	f24c 238f 	movw	r3, #49807	; 0xc28f
   1235c:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   12360:	4610      	mov	r0, r2
   12362:	4619      	mov	r1, r3
   12364:	f006 f8c2 	bl	184ec <__aeabi_fmul>
   12368:	4603      	mov	r3, r0
   1236a:	4618      	mov	r0, r3
   1236c:	f005 fc2a 	bl	17bc4 <__aeabi_f2d>
   12370:	4602      	mov	r2, r0
   12372:	460b      	mov	r3, r1
   12374:	4610      	mov	r0, r2
   12376:	4619      	mov	r1, r3
   12378:	a35d      	add	r3, pc, #372	; (adr r3, 124f0 <climb_pid_run+0x390>)
   1237a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1237e:	f005 fac3 	bl	17908 <__adddf3>
   12382:	4602      	mov	r2, r0
   12384:	460b      	mov	r3, r1
   12386:	4614      	mov	r4, r2
   12388:	461d      	mov	r5, r3
   1238a:	f64c 0390 	movw	r3, #51344	; 0xc890
   1238e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12392:	681b      	ldr	r3, [r3, #0]
   12394:	4618      	mov	r0, r3
   12396:	f005 fc15 	bl	17bc4 <__aeabi_f2d>
   1239a:	4602      	mov	r2, r0
   1239c:	460b      	mov	r3, r1
   1239e:	4610      	mov	r0, r2
   123a0:	4619      	mov	r1, r3
   123a2:	a355      	add	r3, pc, #340	; (adr r3, 124f8 <climb_pid_run+0x398>)
   123a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   123a8:	f005 fc60 	bl	17c6c <__aeabi_dmul>
   123ac:	4602      	mov	r2, r0
   123ae:	460b      	mov	r3, r1
   123b0:	4620      	mov	r0, r4
   123b2:	4629      	mov	r1, r5
   123b4:	f005 faa8 	bl	17908 <__adddf3>
   123b8:	4602      	mov	r2, r0
   123ba:	460b      	mov	r3, r1
   123bc:	4610      	mov	r0, r2
   123be:	4619      	mov	r1, r3
   123c0:	f005 ff36 	bl	18230 <__aeabi_d2f>
   123c4:	4603      	mov	r3, r0
   123c6:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   123c8:	f64c 0398 	movw	r3, #51352	; 0xc898
   123cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123d0:	681b      	ldr	r3, [r3, #0]
   123d2:	4618      	mov	r0, r3
   123d4:	6879      	ldr	r1, [r7, #4]
   123d6:	f005 ff81 	bl	182dc <__addsf3>
   123da:	4603      	mov	r3, r0
   123dc:	461a      	mov	r2, r3
   123de:	f64c 0398 	movw	r3, #51352	; 0xc898
   123e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123e6:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   123e8:	f64c 0398 	movw	r3, #51352	; 0xc898
   123ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123f0:	681b      	ldr	r3, [r3, #0]
   123f2:	4618      	mov	r0, r3
   123f4:	f04f 0100 	mov.w	r1, #0
   123f8:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   123fc:	f006 fa32 	bl	18864 <__aeabi_fcmpgt>
   12400:	4603      	mov	r3, r0
   12402:	2b00      	cmp	r3, #0
   12404:	d008      	beq.n	12418 <climb_pid_run+0x2b8>
   12406:	f64c 0398 	movw	r3, #51352	; 0xc898
   1240a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1240e:	f04f 0200 	mov.w	r2, #0
   12412:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   12416:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   12418:	f64c 0398 	movw	r3, #51352	; 0xc898
   1241c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12420:	681b      	ldr	r3, [r3, #0]
   12422:	4618      	mov	r0, r3
   12424:	f04f 0100 	mov.w	r1, #0
   12428:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1242c:	f006 f9fc 	bl	18828 <__aeabi_fcmplt>
   12430:	4603      	mov	r3, r0
   12432:	2b00      	cmp	r3, #0
   12434:	d008      	beq.n	12448 <climb_pid_run+0x2e8>
   12436:	f64c 0398 	movw	r3, #51352	; 0xc898
   1243a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1243e:	f04f 0200 	mov.w	r2, #0
   12442:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   12446:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   12448:	6838      	ldr	r0, [r7, #0]
   1244a:	f04f 0100 	mov.w	r1, #0
   1244e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12452:	f006 f84b 	bl	184ec <__aeabi_fmul>
   12456:	4603      	mov	r3, r0
   12458:	4618      	mov	r0, r3
   1245a:	f04f 0100 	mov.w	r1, #0
   1245e:	f006 f9e3 	bl	18828 <__aeabi_fcmplt>
   12462:	4603      	mov	r3, r0
   12464:	2b00      	cmp	r3, #0
   12466:	d001      	beq.n	1246c <climb_pid_run+0x30c>
   12468:	2200      	movs	r2, #0
   1246a:	e022      	b.n	124b2 <climb_pid_run+0x352>
   1246c:	6838      	ldr	r0, [r7, #0]
   1246e:	f04f 0100 	mov.w	r1, #0
   12472:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12476:	f006 f839 	bl	184ec <__aeabi_fmul>
   1247a:	4603      	mov	r3, r0
   1247c:	4618      	mov	r0, r3
   1247e:	f04f 0100 	mov.w	r1, #0
   12482:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12486:	f006 f9ed 	bl	18864 <__aeabi_fcmpgt>
   1248a:	4603      	mov	r3, r0
   1248c:	2b00      	cmp	r3, #0
   1248e:	d002      	beq.n	12496 <climb_pid_run+0x336>
   12490:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   12494:	e00c      	b.n	124b0 <climb_pid_run+0x350>
   12496:	6838      	ldr	r0, [r7, #0]
   12498:	f04f 0100 	mov.w	r1, #0
   1249c:	f2c4 6116 	movt	r1, #17942	; 0x4616
   124a0:	f006 f824 	bl	184ec <__aeabi_fmul>
   124a4:	4603      	mov	r3, r0
   124a6:	4618      	mov	r0, r3
   124a8:	f006 f9e6 	bl	18878 <__aeabi_f2iz>
   124ac:	4603      	mov	r3, r0
   124ae:	b29b      	uxth	r3, r3
   124b0:	b29a      	uxth	r2, r3
   124b2:	f64c 037c 	movw	r3, #51324	; 0xc87c
   124b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124ba:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   124bc:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   124c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124c4:	681a      	ldr	r2, [r3, #0]
   124c6:	f64c 0388 	movw	r3, #51336	; 0xc888
   124ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124ce:	681b      	ldr	r3, [r3, #0]
   124d0:	4610      	mov	r0, r2
   124d2:	4619      	mov	r1, r3
   124d4:	f005 ff02 	bl	182dc <__addsf3>
   124d8:	4603      	mov	r3, r0
   124da:	461a      	mov	r2, r3
   124dc:	f64c 0378 	movw	r3, #51320	; 0xc878
   124e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124e4:	601a      	str	r2, [r3, #0]
  }
}
   124e6:	3708      	adds	r7, #8
   124e8:	46bd      	mov	sp, r7
   124ea:	bdb0      	pop	{r4, r5, r7, pc}
   124ec:	f3af 8000 	nop.w
   124f0:	3d70a3d7 	.word	0x3d70a3d7
   124f4:	3fd3d70a 	.word	0x3fd3d70a
   124f8:	9999999a 	.word	0x9999999a
   124fc:	3fc99999 	.word	0x3fc99999

00012500 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   12500:	b580      	push	{r7, lr}
   12502:	b082      	sub	sp, #8
   12504:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   12506:	f64c 3304 	movw	r3, #51972	; 0xcb04
   1250a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1250e:	681a      	ldr	r2, [r3, #0]
   12510:	f240 5374 	movw	r3, #1396	; 0x574
   12514:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12518:	681b      	ldr	r3, [r3, #0]
   1251a:	4610      	mov	r0, r2
   1251c:	4619      	mov	r1, r3
   1251e:	f005 fedb 	bl	182d8 <__aeabi_fsub>
   12522:	4603      	mov	r3, r0
   12524:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   12526:	f240 5370 	movw	r3, #1392	; 0x570
   1252a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1252e:	681b      	ldr	r3, [r3, #0]
   12530:	4618      	mov	r0, r3
   12532:	6879      	ldr	r1, [r7, #4]
   12534:	f005 ffda 	bl	184ec <__aeabi_fmul>
   12538:	4603      	mov	r3, r0
   1253a:	461a      	mov	r2, r3
   1253c:	f64c 0394 	movw	r3, #51348	; 0xc894
   12540:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12544:	681b      	ldr	r3, [r3, #0]
   12546:	4610      	mov	r0, r2
   12548:	4619      	mov	r1, r3
   1254a:	f005 fec7 	bl	182dc <__addsf3>
   1254e:	4603      	mov	r3, r0
   12550:	461a      	mov	r2, r3
   12552:	f64c 0390 	movw	r3, #51344	; 0xc890
   12556:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1255a:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   1255c:	f64c 0390 	movw	r3, #51344	; 0xc890
   12560:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12564:	681b      	ldr	r3, [r3, #0]
   12566:	4618      	mov	r0, r3
   12568:	f04f 0100 	mov.w	r1, #0
   1256c:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   12570:	f006 f95a 	bl	18828 <__aeabi_fcmplt>
   12574:	4603      	mov	r3, r0
   12576:	2b00      	cmp	r3, #0
   12578:	d008      	beq.n	1258c <altitude_pid_run+0x8c>
   1257a:	f64c 0390 	movw	r3, #51344	; 0xc890
   1257e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12582:	f04f 0200 	mov.w	r2, #0
   12586:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   1258a:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   1258c:	f64c 0390 	movw	r3, #51344	; 0xc890
   12590:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12594:	681b      	ldr	r3, [r3, #0]
   12596:	4618      	mov	r0, r3
   12598:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   1259c:	f006 f962 	bl	18864 <__aeabi_fcmpgt>
   125a0:	4603      	mov	r3, r0
   125a2:	2b00      	cmp	r3, #0
   125a4:	d006      	beq.n	125b4 <altitude_pid_run+0xb4>
   125a6:	f64c 0390 	movw	r3, #51344	; 0xc890
   125aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   125b2:	601a      	str	r2, [r3, #0]
}
   125b4:	3708      	adds	r7, #8
   125b6:	46bd      	mov	sp, r7
   125b8:	bd80      	pop	{r7, pc}
   125ba:	bf00      	nop
   125bc:	f3af 8000 	nop.w

000125c0 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   125c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   125c2:	b08b      	sub	sp, #44	; 0x2c
   125c4:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   125c6:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   125ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125ce:	781b      	ldrb	r3, [r3, #0]
   125d0:	2b00      	cmp	r3, #0
   125d2:	f040 8169 	bne.w	128a8 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   125d6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   125da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125de:	781b      	ldrb	r3, [r3, #0]
   125e0:	2b00      	cmp	r3, #0
   125e2:	d13c      	bne.n	1265e <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   125e4:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   125e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125ec:	2200      	movs	r2, #0
   125ee:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   125f0:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   125f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125f8:	881b      	ldrh	r3, [r3, #0]
   125fa:	2b00      	cmp	r3, #0
   125fc:	d000      	beq.n	12600 <auto_nav+0x40>
   125fe:	e03d      	b.n	1267c <auto_nav+0xbc>
	else NextStage(); 
   12600:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12604:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12608:	781b      	ldrb	r3, [r3, #0]
   1260a:	3301      	adds	r3, #1
   1260c:	b2da      	uxtb	r2, r3
   1260e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12612:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12616:	701a      	strb	r2, [r3, #0]
   12618:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1261c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12620:	681a      	ldr	r2, [r3, #0]
   12622:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12626:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1262a:	601a      	str	r2, [r3, #0]
   1262c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12630:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12634:	681a      	ldr	r2, [r3, #0]
   12636:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1263a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1263e:	601a      	str	r2, [r3, #0]
   12640:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12644:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12648:	2200      	movs	r2, #0
   1264a:	801a      	strh	r2, [r3, #0]
   1264c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12650:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12654:	f04f 0200 	mov.w	r2, #0
   12658:	601a      	str	r2, [r3, #0]
   1265a:	f002 b883 	b.w	14764 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   1265e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12662:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12666:	781b      	ldrb	r3, [r3, #0]
   12668:	2b01      	cmp	r3, #1
   1266a:	d100      	bne.n	1266e <auto_nav+0xae>
    {   Goto(while_1)}
   1266c:	e7ba      	b.n	125e4 <auto_nav+0x24>
    else if (nav_stage == 2)
   1266e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12672:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12676:	781b      	ldrb	r3, [r3, #0]
   12678:	2b02      	cmp	r3, #2
   1267a:	d162      	bne.n	12742 <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   1267c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12680:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12684:	2202      	movs	r2, #2
   12686:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   12688:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   1268c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12690:	881b      	ldrh	r3, [r3, #0]
   12692:	2b08      	cmp	r3, #8
   12694:	d92e      	bls.n	126f4 <auto_nav+0x134>
   12696:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1269a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1269e:	781b      	ldrb	r3, [r3, #0]
   126a0:	3301      	adds	r3, #1
   126a2:	b2da      	uxtb	r2, r3
   126a4:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   126a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126ac:	701a      	strb	r2, [r3, #0]
   126ae:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   126b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126b6:	681a      	ldr	r2, [r3, #0]
   126b8:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   126bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126c0:	601a      	str	r2, [r3, #0]
   126c2:	f64c 3300 	movw	r3, #51968	; 0xcb00
   126c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126ca:	681a      	ldr	r2, [r3, #0]
   126cc:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   126d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126d4:	601a      	str	r2, [r3, #0]
   126d6:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   126da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126de:	2200      	movs	r2, #0
   126e0:	801a      	strh	r2, [r3, #0]
   126e2:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   126e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126ea:	f04f 0200 	mov.w	r2, #0
   126ee:	601a      	str	r2, [r3, #0]
   126f0:	f002 b838 	b.w	14764 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   126f4:	f64c 038c 	movw	r3, #51340	; 0xc88c
   126f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126fc:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12700:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12704:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   12706:	f24c 532f 	movw	r3, #50479	; 0xc52f
   1270a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1270e:	2200      	movs	r2, #0
   12710:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   12712:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12716:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1271a:	f649 129a 	movw	r2, #39322	; 0x999a
   1271e:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   12722:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   12724:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12728:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1272c:	2201      	movs	r2, #1
   1272e:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   12730:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
   12734:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12738:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   1273c:	801a      	strh	r2, [r3, #0]
        }
        return;
   1273e:	f002 b811 	b.w	14764 <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   12742:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12746:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1274a:	781b      	ldrb	r3, [r3, #0]
   1274c:	2b03      	cmp	r3, #3
   1274e:	d168      	bne.n	12822 <auto_nav+0x262>
     {
	nav_stage = 3;	
   12750:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12754:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12758:	2203      	movs	r2, #3
   1275a:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   1275c:	f64c 3304 	movw	r3, #51972	; 0xcb04
   12760:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12764:	681b      	ldr	r3, [r3, #0]
   12766:	4618      	mov	r0, r3
   12768:	f04f 0100 	mov.w	r1, #0
   1276c:	f2c4 3116 	movt	r1, #17174	; 0x4316
   12770:	f006 f878 	bl	18864 <__aeabi_fcmpgt>
   12774:	4603      	mov	r3, r0
   12776:	2b00      	cmp	r3, #0
   12778:	d02e      	beq.n	127d8 <auto_nav+0x218>
   1277a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1277e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12782:	781b      	ldrb	r3, [r3, #0]
   12784:	3301      	adds	r3, #1
   12786:	b2da      	uxtb	r2, r3
   12788:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1278c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12790:	701a      	strb	r2, [r3, #0]
   12792:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12796:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1279a:	681a      	ldr	r2, [r3, #0]
   1279c:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   127a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127a4:	601a      	str	r2, [r3, #0]
   127a6:	f64c 3300 	movw	r3, #51968	; 0xcb00
   127aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127ae:	681a      	ldr	r2, [r3, #0]
   127b0:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   127b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127b8:	601a      	str	r2, [r3, #0]
   127ba:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   127be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127c2:	2200      	movs	r2, #0
   127c4:	801a      	strh	r2, [r3, #0]
   127c6:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   127ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127ce:	f04f 0200 	mov.w	r2, #0
   127d2:	601a      	str	r2, [r3, #0]
   127d4:	f001 bfc6 	b.w	14764 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   127d8:	f64c 038c 	movw	r3, #51340	; 0xc88c
   127dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127e0:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   127e4:	f2c4 0296 	movt	r2, #16534	; 0x4096
   127e8:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   127ea:	f24c 532f 	movw	r3, #50479	; 0xc52f
   127ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127f2:	2200      	movs	r2, #0
   127f4:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   127f6:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   127fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127fe:	f04f 0200 	mov.w	r2, #0
   12802:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   12804:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12808:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1280c:	2202      	movs	r2, #2
   1280e:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   12810:	f64c 0390 	movw	r3, #51344	; 0xc890
   12814:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12818:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1281c:	601a      	str	r2, [r3, #0]
        }
        return;
   1281e:	f001 bfa1 	b.w	14764 <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   12822:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12826:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1282a:	781b      	ldrb	r3, [r3, #0]
   1282c:	2b04      	cmp	r3, #4
   1282e:	f041 8799 	bne.w	14764 <auto_nav+0x21a4>
        NextBlock()
   12832:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12836:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1283a:	781b      	ldrb	r3, [r3, #0]
   1283c:	3301      	adds	r3, #1
   1283e:	b2da      	uxtb	r2, r3
   12840:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12844:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12848:	701a      	strb	r2, [r3, #0]
   1284a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1284e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12852:	2200      	movs	r2, #0
   12854:	701a      	strb	r2, [r3, #0]
   12856:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   1285a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1285e:	2200      	movs	r2, #0
   12860:	801a      	strh	r2, [r3, #0]
   12862:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12866:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1286a:	681a      	ldr	r2, [r3, #0]
   1286c:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12870:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12874:	601a      	str	r2, [r3, #0]
   12876:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1287a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1287e:	681a      	ldr	r2, [r3, #0]
   12880:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12884:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12888:	601a      	str	r2, [r3, #0]
   1288a:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1288e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12892:	2200      	movs	r2, #0
   12894:	801a      	strh	r2, [r3, #0]
   12896:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   1289a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1289e:	f04f 0200 	mov.w	r2, #0
   128a2:	601a      	str	r2, [r3, #0]
   128a4:	f001 bf5e 	b.w	14764 <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   128a8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   128ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128b0:	781b      	ldrb	r3, [r3, #0]
   128b2:	2b01      	cmp	r3, #1
   128b4:	f040 81bc 	bne.w	12c30 <auto_nav+0x670>
{
    nav_block = 1;
   128b8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   128bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128c0:	2201      	movs	r2, #1
   128c2:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   128c4:	f24c 5330 	movw	r3, #50480	; 0xc530
   128c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128cc:	781b      	ldrb	r3, [r3, #0]
   128ce:	2b00      	cmp	r3, #0
   128d0:	d007      	beq.n	128e2 <auto_nav+0x322>
   128d2:	f24c 5330 	movw	r3, #50480	; 0xc530
   128d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128da:	2200      	movs	r2, #0
   128dc:	701a      	strb	r2, [r3, #0]
   128de:	2301      	movs	r3, #1
   128e0:	e000      	b.n	128e4 <auto_nav+0x324>
   128e2:	2300      	movs	r3, #0
   128e4:	2b00      	cmp	r3, #0
   128e6:	d034      	beq.n	12952 <auto_nav+0x392>
	{ GotoBlock(2) }
   128e8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   128ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128f0:	2202      	movs	r2, #2
   128f2:	701a      	strb	r2, [r3, #0]
   128f4:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   128f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128fc:	2200      	movs	r2, #0
   128fe:	701a      	strb	r2, [r3, #0]
   12900:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   12904:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12908:	2200      	movs	r2, #0
   1290a:	801a      	strh	r2, [r3, #0]
   1290c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12910:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12914:	681a      	ldr	r2, [r3, #0]
   12916:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1291a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1291e:	601a      	str	r2, [r3, #0]
   12920:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12924:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12928:	681a      	ldr	r2, [r3, #0]
   1292a:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1292e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12932:	601a      	str	r2, [r3, #0]
   12934:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12938:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1293c:	2200      	movs	r2, #0
   1293e:	801a      	strh	r2, [r3, #0]
   12940:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12944:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12948:	f04f 0200 	mov.w	r2, #0
   1294c:	601a      	str	r2, [r3, #0]
   1294e:	f001 bf09 	b.w	14764 <auto_nav+0x21a4>
    if(nav_stage == 0)
   12952:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12956:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1295a:	781b      	ldrb	r3, [r3, #0]
   1295c:	2b00      	cmp	r3, #0
   1295e:	d12e      	bne.n	129be <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   12960:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12964:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12968:	781b      	ldrb	r3, [r3, #0]
   1296a:	3301      	adds	r3, #1
   1296c:	b2da      	uxtb	r2, r3
   1296e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12972:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12976:	701a      	strb	r2, [r3, #0]
   12978:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1297c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12980:	681a      	ldr	r2, [r3, #0]
   12982:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12986:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1298a:	601a      	str	r2, [r3, #0]
   1298c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12990:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12994:	681a      	ldr	r2, [r3, #0]
   12996:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1299a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1299e:	601a      	str	r2, [r3, #0]
   129a0:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   129a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129a8:	2200      	movs	r2, #0
   129aa:	801a      	strh	r2, [r3, #0]
   129ac:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   129b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129b4:	f04f 0200 	mov.w	r2, #0
   129b8:	601a      	str	r2, [r3, #0]
   129ba:	f001 bed3 	b.w	14764 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   129be:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   129c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129c6:	781b      	ldrb	r3, [r3, #0]
   129c8:	2b01      	cmp	r3, #1
   129ca:	d169      	bne.n	12aa0 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   129cc:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   129d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129d4:	2201      	movs	r2, #1
   129d6:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   129d8:	2001      	movs	r0, #1
   129da:	f001 fed1 	bl	14780 <approaching>
   129de:	4603      	mov	r3, r0
   129e0:	2b00      	cmp	r3, #0
   129e2:	d034      	beq.n	12a4e <auto_nav+0x48e>
   129e4:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   129e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129ec:	2201      	movs	r2, #1
   129ee:	701a      	strb	r2, [r3, #0]
   129f0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   129f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129f8:	781b      	ldrb	r3, [r3, #0]
   129fa:	3301      	adds	r3, #1
   129fc:	b2da      	uxtb	r2, r3
   129fe:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a06:	701a      	strb	r2, [r3, #0]
   12a08:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a10:	681a      	ldr	r2, [r3, #0]
   12a12:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a1a:	601a      	str	r2, [r3, #0]
   12a1c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a24:	681a      	ldr	r2, [r3, #0]
   12a26:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a2e:	601a      	str	r2, [r3, #0]
   12a30:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a38:	2200      	movs	r2, #0
   12a3a:	801a      	strh	r2, [r3, #0]
   12a3c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a44:	f04f 0200 	mov.w	r2, #0
   12a48:	601a      	str	r2, [r3, #0]
   12a4a:	f001 be8b 	b.w	14764 <auto_nav+0x21a4>
            fly_to(1);
   12a4e:	2001      	movs	r0, #1
   12a50:	f001 ffca 	bl	149e8 <fly_to>
            auto_pitch = FALSE;
   12a54:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a5c:	2200      	movs	r2, #0
   12a5e:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12a60:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a68:	f04f 0200 	mov.w	r2, #0
   12a6c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12a6e:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a76:	2203      	movs	r2, #3
   12a78:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12a7a:	f240 5378 	movw	r3, #1400	; 0x578
   12a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a82:	695a      	ldr	r2, [r3, #20]
   12a84:	f240 5374 	movw	r3, #1396	; 0x574
   12a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a8c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12a8e:	f64c 0394 	movw	r3, #51348	; 0xc894
   12a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a96:	f04f 0200 	mov.w	r2, #0
   12a9a:	601a      	str	r2, [r3, #0]
          }
          return;
   12a9c:	f001 be62 	b.w	14764 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12aa0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aa8:	781b      	ldrb	r3, [r3, #0]
   12aaa:	2b02      	cmp	r3, #2
   12aac:	d169      	bne.n	12b82 <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   12aae:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ab6:	2202      	movs	r2, #2
   12ab8:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12aba:	2004      	movs	r0, #4
   12abc:	f001 fe60 	bl	14780 <approaching>
   12ac0:	4603      	mov	r3, r0
   12ac2:	2b00      	cmp	r3, #0
   12ac4:	d034      	beq.n	12b30 <auto_nav+0x570>
   12ac6:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12aca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ace:	2204      	movs	r2, #4
   12ad0:	701a      	strb	r2, [r3, #0]
   12ad2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ada:	781b      	ldrb	r3, [r3, #0]
   12adc:	3301      	adds	r3, #1
   12ade:	b2da      	uxtb	r2, r3
   12ae0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ae8:	701a      	strb	r2, [r3, #0]
   12aea:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12af2:	681a      	ldr	r2, [r3, #0]
   12af4:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12afc:	601a      	str	r2, [r3, #0]
   12afe:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12b02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b06:	681a      	ldr	r2, [r3, #0]
   12b08:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b10:	601a      	str	r2, [r3, #0]
   12b12:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12b16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b1a:	2200      	movs	r2, #0
   12b1c:	801a      	strh	r2, [r3, #0]
   12b1e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12b22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b26:	f04f 0200 	mov.w	r2, #0
   12b2a:	601a      	str	r2, [r3, #0]
   12b2c:	f001 be1a 	b.w	14764 <auto_nav+0x21a4>
            fly_to(4);
   12b30:	2004      	movs	r0, #4
   12b32:	f001 ff59 	bl	149e8 <fly_to>
            auto_pitch = FALSE;
   12b36:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b3e:	2200      	movs	r2, #0
   12b40:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12b42:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12b46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b4a:	f04f 0200 	mov.w	r2, #0
   12b4e:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12b50:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12b54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b58:	2203      	movs	r2, #3
   12b5a:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12b5c:	f240 5378 	movw	r3, #1400	; 0x578
   12b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12b66:	f240 5374 	movw	r3, #1396	; 0x574
   12b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b6e:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12b70:	f64c 0394 	movw	r3, #51348	; 0xc894
   12b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b78:	f04f 0200 	mov.w	r2, #0
   12b7c:	601a      	str	r2, [r3, #0]
          }
          return;
   12b7e:	f001 bdf1 	b.w	14764 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12b82:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b8a:	781b      	ldrb	r3, [r3, #0]
   12b8c:	2b03      	cmp	r3, #3
   12b8e:	d106      	bne.n	12b9e <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12b90:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b98:	2203      	movs	r2, #3
   12b9a:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   12b9c:	e6e0      	b.n	12960 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   12b9e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ba6:	781b      	ldrb	r3, [r3, #0]
   12ba8:	2b04      	cmp	r3, #4
   12baa:	f041 85db 	bne.w	14764 <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   12bae:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bb6:	2204      	movs	r2, #4
   12bb8:	701a      	strb	r2, [r3, #0]
        NextBlock()
   12bba:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12bbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bc2:	781b      	ldrb	r3, [r3, #0]
   12bc4:	3301      	adds	r3, #1
   12bc6:	b2da      	uxtb	r2, r3
   12bc8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bd0:	701a      	strb	r2, [r3, #0]
   12bd2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bda:	2200      	movs	r2, #0
   12bdc:	701a      	strb	r2, [r3, #0]
   12bde:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   12be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12be6:	2200      	movs	r2, #0
   12be8:	801a      	strh	r2, [r3, #0]
   12bea:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bf2:	681a      	ldr	r2, [r3, #0]
   12bf4:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bfc:	601a      	str	r2, [r3, #0]
   12bfe:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c06:	681a      	ldr	r2, [r3, #0]
   12c08:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c10:	601a      	str	r2, [r3, #0]
   12c12:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12c16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c1a:	2200      	movs	r2, #0
   12c1c:	801a      	strh	r2, [r3, #0]
   12c1e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12c22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c26:	f04f 0200 	mov.w	r2, #0
   12c2a:	601a      	str	r2, [r3, #0]
   12c2c:	f001 bd9a 	b.w	14764 <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   12c30:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c38:	781b      	ldrb	r3, [r3, #0]
   12c3a:	2b02      	cmp	r3, #2
   12c3c:	f040 8392 	bne.w	13364 <auto_nav+0xda4>
{
	nav_block = 2;
   12c40:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c48:	2202      	movs	r2, #2
   12c4a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   12c4c:	f24c 5330 	movw	r3, #50480	; 0xc530
   12c50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c54:	781b      	ldrb	r3, [r3, #0]
   12c56:	2b00      	cmp	r3, #0
   12c58:	d007      	beq.n	12c6a <auto_nav+0x6aa>
   12c5a:	f24c 5330 	movw	r3, #50480	; 0xc530
   12c5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c62:	2200      	movs	r2, #0
   12c64:	701a      	strb	r2, [r3, #0]
   12c66:	2301      	movs	r3, #1
   12c68:	e000      	b.n	12c6c <auto_nav+0x6ac>
   12c6a:	2300      	movs	r3, #0
   12c6c:	2b00      	cmp	r3, #0
   12c6e:	d034      	beq.n	12cda <auto_nav+0x71a>
   12c70:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12c74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c78:	2203      	movs	r2, #3
   12c7a:	701a      	strb	r2, [r3, #0]
   12c7c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c84:	2200      	movs	r2, #0
   12c86:	701a      	strb	r2, [r3, #0]
   12c88:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   12c8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c90:	2200      	movs	r2, #0
   12c92:	801a      	strh	r2, [r3, #0]
   12c94:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c9c:	681a      	ldr	r2, [r3, #0]
   12c9e:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12ca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ca6:	601a      	str	r2, [r3, #0]
   12ca8:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cb0:	681a      	ldr	r2, [r3, #0]
   12cb2:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12cb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cba:	601a      	str	r2, [r3, #0]
   12cbc:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12cc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cc4:	2200      	movs	r2, #0
   12cc6:	801a      	strh	r2, [r3, #0]
   12cc8:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12ccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cd0:	f04f 0200 	mov.w	r2, #0
   12cd4:	601a      	str	r2, [r3, #0]
   12cd6:	f001 bd45 	b.w	14764 <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   12cda:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ce2:	781b      	ldrb	r3, [r3, #0]
   12ce4:	2b00      	cmp	r3, #0
   12ce6:	d134      	bne.n	12d52 <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   12ce8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12cec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cf0:	2200      	movs	r2, #0
   12cf2:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   12cf4:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cfc:	781b      	ldrb	r3, [r3, #0]
   12cfe:	3301      	adds	r3, #1
   12d00:	b2da      	uxtb	r2, r3
   12d02:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12d06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d0a:	701a      	strb	r2, [r3, #0]
   12d0c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d14:	681a      	ldr	r2, [r3, #0]
   12d16:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d1e:	601a      	str	r2, [r3, #0]
   12d20:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d28:	681a      	ldr	r2, [r3, #0]
   12d2a:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d32:	601a      	str	r2, [r3, #0]
   12d34:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d3c:	2200      	movs	r2, #0
   12d3e:	801a      	strh	r2, [r3, #0]
   12d40:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12d44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d48:	f04f 0200 	mov.w	r2, #0
   12d4c:	601a      	str	r2, [r3, #0]
   12d4e:	f001 bd09 	b.w	14764 <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   12d52:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d5a:	781b      	ldrb	r3, [r3, #0]
   12d5c:	2b01      	cmp	r3, #1
   12d5e:	d169      	bne.n	12e34 <auto_nav+0x874>
    {
         nav_stage =1;
   12d60:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d68:	2201      	movs	r2, #1
   12d6a:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   12d6c:	2006      	movs	r0, #6
   12d6e:	f001 fd07 	bl	14780 <approaching>
   12d72:	4603      	mov	r3, r0
   12d74:	2b00      	cmp	r3, #0
   12d76:	d034      	beq.n	12de2 <auto_nav+0x822>
   12d78:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12d7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d80:	2206      	movs	r2, #6
   12d82:	701a      	strb	r2, [r3, #0]
   12d84:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d8c:	781b      	ldrb	r3, [r3, #0]
   12d8e:	3301      	adds	r3, #1
   12d90:	b2da      	uxtb	r2, r3
   12d92:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d9a:	701a      	strb	r2, [r3, #0]
   12d9c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12da4:	681a      	ldr	r2, [r3, #0]
   12da6:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dae:	601a      	str	r2, [r3, #0]
   12db0:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12db8:	681a      	ldr	r2, [r3, #0]
   12dba:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dc2:	601a      	str	r2, [r3, #0]
   12dc4:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dcc:	2200      	movs	r2, #0
   12dce:	801a      	strh	r2, [r3, #0]
   12dd0:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12dd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dd8:	f04f 0200 	mov.w	r2, #0
   12ddc:	601a      	str	r2, [r3, #0]
   12dde:	f001 bcc1 	b.w	14764 <auto_nav+0x21a4>
            fly_to(6);
   12de2:	2006      	movs	r0, #6
   12de4:	f001 fe00 	bl	149e8 <fly_to>
            auto_pitch = FALSE;
   12de8:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12df0:	2200      	movs	r2, #0
   12df2:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12df4:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12df8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dfc:	f04f 0200 	mov.w	r2, #0
   12e00:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12e02:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12e06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e0a:	2203      	movs	r2, #3
   12e0c:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   12e0e:	f240 5378 	movw	r3, #1400	; 0x578
   12e12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   12e18:	f240 5374 	movw	r3, #1396	; 0x574
   12e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e20:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12e22:	f64c 0394 	movw	r3, #51348	; 0xc894
   12e26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e2a:	f04f 0200 	mov.w	r2, #0
   12e2e:	601a      	str	r2, [r3, #0]
          }
          return;
   12e30:	f001 bc98 	b.w	14764 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12e34:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e3c:	781b      	ldrb	r3, [r3, #0]
   12e3e:	2b02      	cmp	r3, #2
   12e40:	d169      	bne.n	12f16 <auto_nav+0x956>
     {
         nav_stage =2; 
   12e42:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12e46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e4a:	2202      	movs	r2, #2
   12e4c:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   12e4e:	2001      	movs	r0, #1
   12e50:	f001 fc96 	bl	14780 <approaching>
   12e54:	4603      	mov	r3, r0
   12e56:	2b00      	cmp	r3, #0
   12e58:	d034      	beq.n	12ec4 <auto_nav+0x904>
   12e5a:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e62:	2201      	movs	r2, #1
   12e64:	701a      	strb	r2, [r3, #0]
   12e66:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e6e:	781b      	ldrb	r3, [r3, #0]
   12e70:	3301      	adds	r3, #1
   12e72:	b2da      	uxtb	r2, r3
   12e74:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12e78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e7c:	701a      	strb	r2, [r3, #0]
   12e7e:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12e82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e86:	681a      	ldr	r2, [r3, #0]
   12e88:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e90:	601a      	str	r2, [r3, #0]
   12e92:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12e96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e9a:	681a      	ldr	r2, [r3, #0]
   12e9c:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ea4:	601a      	str	r2, [r3, #0]
   12ea6:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eae:	2200      	movs	r2, #0
   12eb0:	801a      	strh	r2, [r3, #0]
   12eb2:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eba:	f04f 0200 	mov.w	r2, #0
   12ebe:	601a      	str	r2, [r3, #0]
   12ec0:	f001 bc50 	b.w	14764 <auto_nav+0x21a4>
            fly_to(1);
   12ec4:	2001      	movs	r0, #1
   12ec6:	f001 fd8f 	bl	149e8 <fly_to>
            auto_pitch = FALSE;
   12eca:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ed2:	2200      	movs	r2, #0
   12ed4:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12ed6:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ede:	f04f 0200 	mov.w	r2, #0
   12ee2:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12ee4:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12ee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eec:	2203      	movs	r2, #3
   12eee:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12ef0:	f240 5378 	movw	r3, #1400	; 0x578
   12ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ef8:	695a      	ldr	r2, [r3, #20]
   12efa:	f240 5374 	movw	r3, #1396	; 0x574
   12efe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f02:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12f04:	f64c 0394 	movw	r3, #51348	; 0xc894
   12f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f0c:	f04f 0200 	mov.w	r2, #0
   12f10:	601a      	str	r2, [r3, #0]
          }
          return;
   12f12:	f001 bc27 	b.w	14764 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12f16:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f1e:	781b      	ldrb	r3, [r3, #0]
   12f20:	2b03      	cmp	r3, #3
   12f22:	d16f      	bne.n	13004 <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   12f24:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12f28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f2c:	2203      	movs	r2, #3
   12f2e:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   12f30:	2002      	movs	r0, #2
   12f32:	f001 fc25 	bl	14780 <approaching>
   12f36:	4603      	mov	r3, r0
   12f38:	2b00      	cmp	r3, #0
   12f3a:	d034      	beq.n	12fa6 <auto_nav+0x9e6>
   12f3c:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f44:	2202      	movs	r2, #2
   12f46:	701a      	strb	r2, [r3, #0]
   12f48:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f50:	781b      	ldrb	r3, [r3, #0]
   12f52:	3301      	adds	r3, #1
   12f54:	b2da      	uxtb	r2, r3
   12f56:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12f5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f5e:	701a      	strb	r2, [r3, #0]
   12f60:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12f64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f68:	681a      	ldr	r2, [r3, #0]
   12f6a:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12f6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f72:	601a      	str	r2, [r3, #0]
   12f74:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f7c:	681a      	ldr	r2, [r3, #0]
   12f7e:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f86:	601a      	str	r2, [r3, #0]
   12f88:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12f8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f90:	2200      	movs	r2, #0
   12f92:	801a      	strh	r2, [r3, #0]
   12f94:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12f98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f9c:	f04f 0200 	mov.w	r2, #0
   12fa0:	601a      	str	r2, [r3, #0]
   12fa2:	f001 bbdf 	b.w	14764 <auto_nav+0x21a4>
            route_to(last_wp, 2);
   12fa6:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fae:	781b      	ldrb	r3, [r3, #0]
   12fb0:	4618      	mov	r0, r3
   12fb2:	2102      	movs	r1, #2
   12fb4:	f001 fd3a 	bl	14a2c <route_to>
            auto_pitch = FALSE;
   12fb8:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fc0:	2200      	movs	r2, #0
   12fc2:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12fc4:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fcc:	f04f 0200 	mov.w	r2, #0
   12fd0:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12fd2:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fda:	2203      	movs	r2, #3
   12fdc:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   12fde:	f240 5378 	movw	r3, #1400	; 0x578
   12fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fe6:	6a1a      	ldr	r2, [r3, #32]
   12fe8:	f240 5374 	movw	r3, #1396	; 0x574
   12fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ff0:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12ff2:	f64c 0394 	movw	r3, #51348	; 0xc894
   12ff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ffa:	f04f 0200 	mov.w	r2, #0
   12ffe:	601a      	str	r2, [r3, #0]
          }
          return;
   13000:	f001 bbb0 	b.w	14764 <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   13004:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13008:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1300c:	781b      	ldrb	r3, [r3, #0]
   1300e:	2b04      	cmp	r3, #4
   13010:	d169      	bne.n	130e6 <auto_nav+0xb26>
       {
          nav_stage = 4;
   13012:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13016:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1301a:	2204      	movs	r2, #4
   1301c:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   1301e:	2003      	movs	r0, #3
   13020:	f001 fbae 	bl	14780 <approaching>
   13024:	4603      	mov	r3, r0
   13026:	2b00      	cmp	r3, #0
   13028:	d034      	beq.n	13094 <auto_nav+0xad4>
   1302a:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   1302e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13032:	2203      	movs	r2, #3
   13034:	701a      	strb	r2, [r3, #0]
   13036:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1303a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1303e:	781b      	ldrb	r3, [r3, #0]
   13040:	3301      	adds	r3, #1
   13042:	b2da      	uxtb	r2, r3
   13044:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13048:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1304c:	701a      	strb	r2, [r3, #0]
   1304e:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13052:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13056:	681a      	ldr	r2, [r3, #0]
   13058:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1305c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13060:	601a      	str	r2, [r3, #0]
   13062:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13066:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1306a:	681a      	ldr	r2, [r3, #0]
   1306c:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13070:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13074:	601a      	str	r2, [r3, #0]
   13076:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1307a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1307e:	2200      	movs	r2, #0
   13080:	801a      	strh	r2, [r3, #0]
   13082:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13086:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1308a:	f04f 0200 	mov.w	r2, #0
   1308e:	601a      	str	r2, [r3, #0]
   13090:	f001 bb68 	b.w	14764 <auto_nav+0x21a4>
            fly_to(3);
   13094:	2003      	movs	r0, #3
   13096:	f001 fca7 	bl	149e8 <fly_to>
            auto_pitch = FALSE;
   1309a:	f24c 532f 	movw	r3, #50479	; 0xc52f
   1309e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130a2:	2200      	movs	r2, #0
   130a4:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   130a6:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   130aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130ae:	f04f 0200 	mov.w	r2, #0
   130b2:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   130b4:	f24c 532d 	movw	r3, #50477	; 0xc52d
   130b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130bc:	2203      	movs	r2, #3
   130be:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   130c0:	f240 5378 	movw	r3, #1400	; 0x578
   130c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   130ca:	f240 5374 	movw	r3, #1396	; 0x574
   130ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130d2:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   130d4:	f64c 0394 	movw	r3, #51348	; 0xc894
   130d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130dc:	f04f 0200 	mov.w	r2, #0
   130e0:	601a      	str	r2, [r3, #0]
          }
          return;
   130e2:	f001 bb3f 	b.w	14764 <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   130e6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   130ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130ee:	781b      	ldrb	r3, [r3, #0]
   130f0:	2b05      	cmp	r3, #5
   130f2:	d169      	bne.n	131c8 <auto_nav+0xc08>
       {
          nav_stage =5;
   130f4:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   130f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130fc:	2205      	movs	r2, #5
   130fe:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   13100:	2004      	movs	r0, #4
   13102:	f001 fb3d 	bl	14780 <approaching>
   13106:	4603      	mov	r3, r0
   13108:	2b00      	cmp	r3, #0
   1310a:	d034      	beq.n	13176 <auto_nav+0xbb6>
   1310c:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   13110:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13114:	2204      	movs	r2, #4
   13116:	701a      	strb	r2, [r3, #0]
   13118:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1311c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13120:	781b      	ldrb	r3, [r3, #0]
   13122:	3301      	adds	r3, #1
   13124:	b2da      	uxtb	r2, r3
   13126:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1312a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1312e:	701a      	strb	r2, [r3, #0]
   13130:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13134:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13138:	681a      	ldr	r2, [r3, #0]
   1313a:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1313e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13142:	601a      	str	r2, [r3, #0]
   13144:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13148:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1314c:	681a      	ldr	r2, [r3, #0]
   1314e:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13152:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13156:	601a      	str	r2, [r3, #0]
   13158:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1315c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13160:	2200      	movs	r2, #0
   13162:	801a      	strh	r2, [r3, #0]
   13164:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13168:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1316c:	f04f 0200 	mov.w	r2, #0
   13170:	601a      	str	r2, [r3, #0]
   13172:	f001 baf7 	b.w	14764 <auto_nav+0x21a4>
            fly_to(4);
   13176:	2004      	movs	r0, #4
   13178:	f001 fc36 	bl	149e8 <fly_to>
            auto_pitch = FALSE;
   1317c:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13180:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13184:	2200      	movs	r2, #0
   13186:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   13188:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1318c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13190:	f04f 0200 	mov.w	r2, #0
   13194:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13196:	f24c 532d 	movw	r3, #50477	; 0xc52d
   1319a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1319e:	2203      	movs	r2, #3
   131a0:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   131a2:	f240 5378 	movw	r3, #1400	; 0x578
   131a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   131ac:	f240 5374 	movw	r3, #1396	; 0x574
   131b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131b4:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   131b6:	f64c 0394 	movw	r3, #51348	; 0xc894
   131ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131be:	f04f 0200 	mov.w	r2, #0
   131c2:	601a      	str	r2, [r3, #0]
          }
          return;
   131c4:	f001 bace 	b.w	14764 <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   131c8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   131cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131d0:	781b      	ldrb	r3, [r3, #0]
   131d2:	2b06      	cmp	r3, #6
   131d4:	d16f      	bne.n	132b6 <auto_nav+0xcf6>
       {
          nav_stage =6;
   131d6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   131da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131de:	2206      	movs	r2, #6
   131e0:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   131e2:	2005      	movs	r0, #5
   131e4:	f001 facc 	bl	14780 <approaching>
   131e8:	4603      	mov	r3, r0
   131ea:	2b00      	cmp	r3, #0
   131ec:	d034      	beq.n	13258 <auto_nav+0xc98>
   131ee:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   131f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131f6:	2205      	movs	r2, #5
   131f8:	701a      	strb	r2, [r3, #0]
   131fa:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   131fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13202:	781b      	ldrb	r3, [r3, #0]
   13204:	3301      	adds	r3, #1
   13206:	b2da      	uxtb	r2, r3
   13208:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1320c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13210:	701a      	strb	r2, [r3, #0]
   13212:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13216:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1321a:	681a      	ldr	r2, [r3, #0]
   1321c:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13220:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13224:	601a      	str	r2, [r3, #0]
   13226:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1322a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1322e:	681a      	ldr	r2, [r3, #0]
   13230:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13234:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13238:	601a      	str	r2, [r3, #0]
   1323a:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1323e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13242:	2200      	movs	r2, #0
   13244:	801a      	strh	r2, [r3, #0]
   13246:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   1324a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1324e:	f04f 0200 	mov.w	r2, #0
   13252:	601a      	str	r2, [r3, #0]
   13254:	f001 ba86 	b.w	14764 <auto_nav+0x21a4>
            route_to(last_wp, 5);
   13258:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   1325c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13260:	781b      	ldrb	r3, [r3, #0]
   13262:	4618      	mov	r0, r3
   13264:	2105      	movs	r1, #5
   13266:	f001 fbe1 	bl	14a2c <route_to>
            auto_pitch = FALSE;
   1326a:	f24c 532f 	movw	r3, #50479	; 0xc52f
   1326e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13272:	2200      	movs	r2, #0
   13274:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   13276:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1327a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1327e:	f04f 0200 	mov.w	r2, #0
   13282:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13284:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13288:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1328c:	2203      	movs	r2, #3
   1328e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   13290:	f240 5378 	movw	r3, #1400	; 0x578
   13294:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1329a:	f240 5374 	movw	r3, #1396	; 0x574
   1329e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132a2:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   132a4:	f64c 0394 	movw	r3, #51348	; 0xc894
   132a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ac:	f04f 0200 	mov.w	r2, #0
   132b0:	601a      	str	r2, [r3, #0]
          }
          return;
   132b2:	f001 ba57 	b.w	14764 <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   132b6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   132ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132be:	781b      	ldrb	r3, [r3, #0]
   132c0:	2b07      	cmp	r3, #7
   132c2:	d106      	bne.n	132d2 <auto_nav+0xd12>
       {
	   nav_stage =7;
   132c4:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   132c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132cc:	2207      	movs	r2, #7
   132ce:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   132d0:	e50a      	b.n	12ce8 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   132d2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   132d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132da:	781b      	ldrb	r3, [r3, #0]
   132dc:	2b08      	cmp	r3, #8
   132de:	f041 8241 	bne.w	14764 <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   132e2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   132e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ea:	2208      	movs	r2, #8
   132ec:	701a      	strb	r2, [r3, #0]
          NextBlock();
   132ee:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   132f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132f6:	781b      	ldrb	r3, [r3, #0]
   132f8:	3301      	adds	r3, #1
   132fa:	b2da      	uxtb	r2, r3
   132fc:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13300:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13304:	701a      	strb	r2, [r3, #0]
   13306:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1330a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1330e:	2200      	movs	r2, #0
   13310:	701a      	strb	r2, [r3, #0]
   13312:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13316:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1331a:	2200      	movs	r2, #0
   1331c:	801a      	strh	r2, [r3, #0]
   1331e:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13322:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13326:	681a      	ldr	r2, [r3, #0]
   13328:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1332c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13330:	601a      	str	r2, [r3, #0]
   13332:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13336:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1333a:	681a      	ldr	r2, [r3, #0]
   1333c:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13340:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13344:	601a      	str	r2, [r3, #0]
   13346:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1334a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1334e:	2200      	movs	r2, #0
   13350:	801a      	strh	r2, [r3, #0]
   13352:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13356:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1335a:	f04f 0200 	mov.w	r2, #0
   1335e:	601a      	str	r2, [r3, #0]
   13360:	f001 ba00 	b.w	14764 <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   13364:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13368:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1336c:	781b      	ldrb	r3, [r3, #0]
   1336e:	2b03      	cmp	r3, #3
   13370:	f040 8388 	bne.w	13a84 <auto_nav+0x14c4>
{
    nav_block = 3;
   13374:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13378:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1337c:	2203      	movs	r2, #3
   1337e:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   13380:	f24c 5330 	movw	r3, #50480	; 0xc530
   13384:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13388:	781b      	ldrb	r3, [r3, #0]
   1338a:	2b00      	cmp	r3, #0
   1338c:	d007      	beq.n	1339e <auto_nav+0xdde>
   1338e:	f24c 5330 	movw	r3, #50480	; 0xc530
   13392:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13396:	2200      	movs	r2, #0
   13398:	701a      	strb	r2, [r3, #0]
   1339a:	2301      	movs	r3, #1
   1339c:	e000      	b.n	133a0 <auto_nav+0xde0>
   1339e:	2300      	movs	r3, #0
   133a0:	2b00      	cmp	r3, #0
   133a2:	d034      	beq.n	1340e <auto_nav+0xe4e>
   133a4:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   133a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133ac:	2204      	movs	r2, #4
   133ae:	701a      	strb	r2, [r3, #0]
   133b0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   133b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133b8:	2200      	movs	r2, #0
   133ba:	701a      	strb	r2, [r3, #0]
   133bc:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   133c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133c4:	2200      	movs	r2, #0
   133c6:	801a      	strh	r2, [r3, #0]
   133c8:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   133cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133d0:	681a      	ldr	r2, [r3, #0]
   133d2:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   133d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133da:	601a      	str	r2, [r3, #0]
   133dc:	f64c 3300 	movw	r3, #51968	; 0xcb00
   133e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133e4:	681a      	ldr	r2, [r3, #0]
   133e6:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   133ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133ee:	601a      	str	r2, [r3, #0]
   133f0:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   133f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133f8:	2200      	movs	r2, #0
   133fa:	801a      	strh	r2, [r3, #0]
   133fc:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13400:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13404:	f04f 0200 	mov.w	r2, #0
   13408:	601a      	str	r2, [r3, #0]
   1340a:	f001 b9ab 	b.w	14764 <auto_nav+0x21a4>
    if(nav_stage == 0)
   1340e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13412:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13416:	781b      	ldrb	r3, [r3, #0]
   13418:	2b00      	cmp	r3, #0
   1341a:	f040 82ea 	bne.w	139f2 <auto_nav+0x1432>
    {
        nav_stage = 0;
   1341e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13422:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13426:	2200      	movs	r2, #0
   13428:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   1342a:	f24c 532c 	movw	r3, #50476	; 0xc52c
   1342e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13432:	781b      	ldrb	r3, [r3, #0]
   13434:	2b02      	cmp	r3, #2
   13436:	f040 81a5 	bne.w	13784 <auto_nav+0x11c4>
   1343a:	f24c 6350 	movw	r3, #50768	; 0xc650
   1343e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13442:	88db      	ldrh	r3, [r3, #6]
   13444:	84fb      	strh	r3, [r7, #38]	; 0x26
   13446:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   1344a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   1344e:	dc04      	bgt.n	1345a <auto_nav+0xe9a>
   13450:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   13454:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13458:	da7e      	bge.n	13558 <auto_nav+0xf98>
   1345a:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   1345e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13462:	681b      	ldr	r3, [r3, #0]
   13464:	4618      	mov	r0, r3
   13466:	f004 fbad 	bl	17bc4 <__aeabi_f2d>
   1346a:	4604      	mov	r4, r0
   1346c:	460d      	mov	r5, r1
   1346e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   13472:	4618      	mov	r0, r3
   13474:	f004 ffe6 	bl	18444 <__aeabi_i2f>
   13478:	4603      	mov	r3, r0
   1347a:	4618      	mov	r0, r3
   1347c:	f04f 0100 	mov.w	r1, #0
   13480:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13484:	f005 f8e6 	bl	18654 <__aeabi_fdiv>
   13488:	4603      	mov	r3, r0
   1348a:	4618      	mov	r0, r3
   1348c:	f004 fb9a 	bl	17bc4 <__aeabi_f2d>
   13490:	4602      	mov	r2, r0
   13492:	460b      	mov	r3, r1
   13494:	4610      	mov	r0, r2
   13496:	4619      	mov	r1, r3
   13498:	f04f 0200 	mov.w	r2, #0
   1349c:	f04f 0300 	mov.w	r3, #0
   134a0:	f2cc 0334 	movt	r3, #49204	; 0xc034
   134a4:	f004 fbe2 	bl	17c6c <__aeabi_dmul>
   134a8:	4602      	mov	r2, r0
   134aa:	460b      	mov	r3, r1
   134ac:	4610      	mov	r0, r2
   134ae:	4619      	mov	r1, r3
   134b0:	f04f 0200 	mov.w	r2, #0
   134b4:	f04f 0300 	mov.w	r3, #0
   134b8:	f004 fa26 	bl	17908 <__adddf3>
   134bc:	4602      	mov	r2, r0
   134be:	460b      	mov	r3, r1
   134c0:	4620      	mov	r0, r4
   134c2:	4629      	mov	r1, r5
   134c4:	f004 fa20 	bl	17908 <__adddf3>
   134c8:	4602      	mov	r2, r0
   134ca:	460b      	mov	r3, r1
   134cc:	4610      	mov	r0, r2
   134ce:	4619      	mov	r1, r3
   134d0:	f004 feae 	bl	18230 <__aeabi_d2f>
   134d4:	4602      	mov	r2, r0
   134d6:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   134da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134de:	601a      	str	r2, [r3, #0]
   134e0:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   134e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134e8:	681b      	ldr	r3, [r3, #0]
   134ea:	4618      	mov	r0, r3
   134ec:	f04f 0100 	mov.w	r1, #0
   134f0:	f2c4 317a 	movt	r1, #17274	; 0x437a
   134f4:	f005 f9a2 	bl	1883c <__aeabi_fcmple>
   134f8:	4603      	mov	r3, r0
   134fa:	2b00      	cmp	r3, #0
   134fc:	d005      	beq.n	1350a <auto_nav+0xf4a>
   134fe:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13502:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13506:	681a      	ldr	r2, [r3, #0]
   13508:	e003      	b.n	13512 <auto_nav+0xf52>
   1350a:	f04f 0200 	mov.w	r2, #0
   1350e:	f2c4 327a 	movt	r2, #17274	; 0x437a
   13512:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13516:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1351a:	601a      	str	r2, [r3, #0]
   1351c:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13520:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13524:	681b      	ldr	r3, [r3, #0]
   13526:	4618      	mov	r0, r3
   13528:	f04f 0100 	mov.w	r1, #0
   1352c:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   13530:	f005 f98e 	bl	18850 <__aeabi_fcmpge>
   13534:	4603      	mov	r3, r0
   13536:	2b00      	cmp	r3, #0
   13538:	d005      	beq.n	13546 <auto_nav+0xf86>
   1353a:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   1353e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13542:	681a      	ldr	r2, [r3, #0]
   13544:	e003      	b.n	1354e <auto_nav+0xf8e>
   13546:	f04f 0200 	mov.w	r2, #0
   1354a:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   1354e:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13552:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13556:	601a      	str	r2, [r3, #0]
   13558:	f24c 6350 	movw	r3, #50768	; 0xc650
   1355c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13560:	889b      	ldrh	r3, [r3, #4]
   13562:	84bb      	strh	r3, [r7, #36]	; 0x24
   13564:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13568:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   1356c:	dc04      	bgt.n	13578 <auto_nav+0xfb8>
   1356e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13572:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13576:	da7e      	bge.n	13676 <auto_nav+0x10b6>
   13578:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   1357c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13580:	681b      	ldr	r3, [r3, #0]
   13582:	4618      	mov	r0, r3
   13584:	f004 fb1e 	bl	17bc4 <__aeabi_f2d>
   13588:	4604      	mov	r4, r0
   1358a:	460d      	mov	r5, r1
   1358c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13590:	4618      	mov	r0, r3
   13592:	f004 ff57 	bl	18444 <__aeabi_i2f>
   13596:	4603      	mov	r3, r0
   13598:	4618      	mov	r0, r3
   1359a:	f04f 0100 	mov.w	r1, #0
   1359e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   135a2:	f005 f857 	bl	18654 <__aeabi_fdiv>
   135a6:	4603      	mov	r3, r0
   135a8:	4618      	mov	r0, r3
   135aa:	f004 fb0b 	bl	17bc4 <__aeabi_f2d>
   135ae:	4602      	mov	r2, r0
   135b0:	460b      	mov	r3, r1
   135b2:	4610      	mov	r0, r2
   135b4:	4619      	mov	r1, r3
   135b6:	f04f 0200 	mov.w	r2, #0
   135ba:	f04f 0300 	mov.w	r3, #0
   135be:	f2cc 0334 	movt	r3, #49204	; 0xc034
   135c2:	f004 fb53 	bl	17c6c <__aeabi_dmul>
   135c6:	4602      	mov	r2, r0
   135c8:	460b      	mov	r3, r1
   135ca:	4610      	mov	r0, r2
   135cc:	4619      	mov	r1, r3
   135ce:	f04f 0200 	mov.w	r2, #0
   135d2:	f04f 0300 	mov.w	r3, #0
   135d6:	f004 f997 	bl	17908 <__adddf3>
   135da:	4602      	mov	r2, r0
   135dc:	460b      	mov	r3, r1
   135de:	4620      	mov	r0, r4
   135e0:	4629      	mov	r1, r5
   135e2:	f004 f991 	bl	17908 <__adddf3>
   135e6:	4602      	mov	r2, r0
   135e8:	460b      	mov	r3, r1
   135ea:	4610      	mov	r0, r2
   135ec:	4619      	mov	r1, r3
   135ee:	f004 fe1f 	bl	18230 <__aeabi_d2f>
   135f2:	4602      	mov	r2, r0
   135f4:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   135f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135fc:	601a      	str	r2, [r3, #0]
   135fe:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13602:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13606:	681b      	ldr	r3, [r3, #0]
   13608:	4618      	mov	r0, r3
   1360a:	f04f 0100 	mov.w	r1, #0
   1360e:	f2c4 317a 	movt	r1, #17274	; 0x437a
   13612:	f005 f913 	bl	1883c <__aeabi_fcmple>
   13616:	4603      	mov	r3, r0
   13618:	2b00      	cmp	r3, #0
   1361a:	d005      	beq.n	13628 <auto_nav+0x1068>
   1361c:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13620:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13624:	681a      	ldr	r2, [r3, #0]
   13626:	e003      	b.n	13630 <auto_nav+0x1070>
   13628:	f04f 0200 	mov.w	r2, #0
   1362c:	f2c4 327a 	movt	r2, #17274	; 0x437a
   13630:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13634:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13638:	601a      	str	r2, [r3, #0]
   1363a:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   1363e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13642:	681b      	ldr	r3, [r3, #0]
   13644:	4618      	mov	r0, r3
   13646:	f04f 0100 	mov.w	r1, #0
   1364a:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   1364e:	f005 f8ff 	bl	18850 <__aeabi_fcmpge>
   13652:	4603      	mov	r3, r0
   13654:	2b00      	cmp	r3, #0
   13656:	d005      	beq.n	13664 <auto_nav+0x10a4>
   13658:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   1365c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13660:	681a      	ldr	r2, [r3, #0]
   13662:	e003      	b.n	1366c <auto_nav+0x10ac>
   13664:	f04f 0200 	mov.w	r2, #0
   13668:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   1366c:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13670:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13674:	601a      	str	r2, [r3, #0]
   13676:	f24c 532d 	movw	r3, #50477	; 0xc52d
   1367a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1367e:	2203      	movs	r2, #3
   13680:	701a      	strb	r2, [r3, #0]
   13682:	f24c 6350 	movw	r3, #50768	; 0xc650
   13686:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1368a:	885b      	ldrh	r3, [r3, #2]
   1368c:	847b      	strh	r3, [r7, #34]	; 0x22
   1368e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13692:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   13696:	dc04      	bgt.n	136a2 <auto_nav+0x10e2>
   13698:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1369c:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   136a0:	da70      	bge.n	13784 <auto_nav+0x11c4>
   136a2:	f240 5374 	movw	r3, #1396	; 0x574
   136a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136aa:	681b      	ldr	r3, [r3, #0]
   136ac:	4618      	mov	r0, r3
   136ae:	f004 fa89 	bl	17bc4 <__aeabi_f2d>
   136b2:	4604      	mov	r4, r0
   136b4:	460d      	mov	r5, r1
   136b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   136ba:	4618      	mov	r0, r3
   136bc:	f004 fec2 	bl	18444 <__aeabi_i2f>
   136c0:	4603      	mov	r3, r0
   136c2:	4618      	mov	r0, r3
   136c4:	f04f 0100 	mov.w	r1, #0
   136c8:	f2c4 6116 	movt	r1, #17942	; 0x4616
   136cc:	f004 ffc2 	bl	18654 <__aeabi_fdiv>
   136d0:	4603      	mov	r3, r0
   136d2:	4618      	mov	r0, r3
   136d4:	f004 fa76 	bl	17bc4 <__aeabi_f2d>
   136d8:	4602      	mov	r2, r0
   136da:	460b      	mov	r3, r1
   136dc:	f04f 0000 	mov.w	r0, #0
   136e0:	f04f 0100 	mov.w	r1, #0
   136e4:	f004 f90e 	bl	17904 <__aeabi_dsub>
   136e8:	4602      	mov	r2, r0
   136ea:	460b      	mov	r3, r1
   136ec:	4620      	mov	r0, r4
   136ee:	4629      	mov	r1, r5
   136f0:	f004 f90a 	bl	17908 <__adddf3>
   136f4:	4602      	mov	r2, r0
   136f6:	460b      	mov	r3, r1
   136f8:	4610      	mov	r0, r2
   136fa:	4619      	mov	r1, r3
   136fc:	f004 fd98 	bl	18230 <__aeabi_d2f>
   13700:	4602      	mov	r2, r0
   13702:	f240 5374 	movw	r3, #1396	; 0x574
   13706:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1370a:	601a      	str	r2, [r3, #0]
   1370c:	f240 5374 	movw	r3, #1396	; 0x574
   13710:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13714:	681b      	ldr	r3, [r3, #0]
   13716:	4618      	mov	r0, r3
   13718:	f04f 0100 	mov.w	r1, #0
   1371c:	f2c4 312f 	movt	r1, #17199	; 0x432f
   13720:	f005 f896 	bl	18850 <__aeabi_fcmpge>
   13724:	4603      	mov	r3, r0
   13726:	2b00      	cmp	r3, #0
   13728:	d005      	beq.n	13736 <auto_nav+0x1176>
   1372a:	f240 5374 	movw	r3, #1396	; 0x574
   1372e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13732:	681a      	ldr	r2, [r3, #0]
   13734:	e003      	b.n	1373e <auto_nav+0x117e>
   13736:	f04f 0200 	mov.w	r2, #0
   1373a:	f2c4 322f 	movt	r2, #17199	; 0x432f
   1373e:	f240 5374 	movw	r3, #1396	; 0x574
   13742:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13746:	601a      	str	r2, [r3, #0]
   13748:	f240 5374 	movw	r3, #1396	; 0x574
   1374c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13750:	681b      	ldr	r3, [r3, #0]
   13752:	4618      	mov	r0, r3
   13754:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13758:	f2c4 3189 	movt	r1, #17289	; 0x4389
   1375c:	f005 f86e 	bl	1883c <__aeabi_fcmple>
   13760:	4603      	mov	r3, r0
   13762:	2b00      	cmp	r3, #0
   13764:	d005      	beq.n	13772 <auto_nav+0x11b2>
   13766:	f240 5374 	movw	r3, #1396	; 0x574
   1376a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1376e:	681a      	ldr	r2, [r3, #0]
   13770:	e003      	b.n	1377a <auto_nav+0x11ba>
   13772:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   13776:	f2c4 3289 	movt	r2, #17289	; 0x4389
   1377a:	f240 5374 	movw	r3, #1396	; 0x574
   1377e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13782:	601a      	str	r2, [r3, #0]
   13784:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13788:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1378c:	681a      	ldr	r2, [r3, #0]
   1378e:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13792:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13796:	681b      	ldr	r3, [r3, #0]
   13798:	4610      	mov	r0, r2
   1379a:	4619      	mov	r1, r3
   1379c:	f004 fd9c 	bl	182d8 <__aeabi_fsub>
   137a0:	4603      	mov	r3, r0
   137a2:	4618      	mov	r0, r3
   137a4:	f004 fa0e 	bl	17bc4 <__aeabi_f2d>
   137a8:	4604      	mov	r4, r0
   137aa:	460d      	mov	r5, r1
   137ac:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   137b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137b4:	681a      	ldr	r2, [r3, #0]
   137b6:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   137ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137be:	681b      	ldr	r3, [r3, #0]
   137c0:	4610      	mov	r0, r2
   137c2:	4619      	mov	r1, r3
   137c4:	f004 fd88 	bl	182d8 <__aeabi_fsub>
   137c8:	4603      	mov	r3, r0
   137ca:	4618      	mov	r0, r3
   137cc:	f004 f9fa 	bl	17bc4 <__aeabi_f2d>
   137d0:	4602      	mov	r2, r0
   137d2:	460b      	mov	r3, r1
   137d4:	4620      	mov	r0, r4
   137d6:	4629      	mov	r1, r5
   137d8:	f002 fa12 	bl	15c00 <pp_atan2>
   137dc:	4602      	mov	r2, r0
   137de:	460b      	mov	r3, r1
   137e0:	4610      	mov	r0, r2
   137e2:	4619      	mov	r1, r3
   137e4:	f004 fd24 	bl	18230 <__aeabi_d2f>
   137e8:	4603      	mov	r3, r0
   137ea:	61fb      	str	r3, [r7, #28]
   137ec:	69f8      	ldr	r0, [r7, #28]
   137ee:	f004 f9e9 	bl	17bc4 <__aeabi_f2d>
   137f2:	4604      	mov	r4, r0
   137f4:	460d      	mov	r5, r1
   137f6:	f64c 3334 	movw	r3, #52020	; 0xcb34
   137fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137fe:	681b      	ldr	r3, [r3, #0]
   13800:	4618      	mov	r0, r3
   13802:	f04f 0100 	mov.w	r1, #0
   13806:	f2cc 2148 	movt	r1, #49736	; 0xc248
   1380a:	f004 fe6f 	bl	184ec <__aeabi_fmul>
   1380e:	4603      	mov	r3, r0
   13810:	4618      	mov	r0, r3
   13812:	f004 f9d7 	bl	17bc4 <__aeabi_f2d>
   13816:	4602      	mov	r2, r0
   13818:	460b      	mov	r3, r1
   1381a:	f04f 0000 	mov.w	r0, #0
   1381e:	f04f 0100 	mov.w	r1, #0
   13822:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13826:	f004 fb4b 	bl	17ec0 <__aeabi_ddiv>
   1382a:	4602      	mov	r2, r0
   1382c:	460b      	mov	r3, r1
   1382e:	4620      	mov	r0, r4
   13830:	4629      	mov	r1, r5
   13832:	f004 f869 	bl	17908 <__adddf3>
   13836:	4602      	mov	r2, r0
   13838:	460b      	mov	r3, r1
   1383a:	4610      	mov	r0, r2
   1383c:	4619      	mov	r1, r3
   1383e:	f004 fcf7 	bl	18230 <__aeabi_d2f>
   13842:	4603      	mov	r3, r0
   13844:	61bb      	str	r3, [r7, #24]
   13846:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   1384a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1384e:	681b      	ldr	r3, [r3, #0]
   13850:	4618      	mov	r0, r3
   13852:	f004 f9b7 	bl	17bc4 <__aeabi_f2d>
   13856:	4604      	mov	r4, r0
   13858:	460d      	mov	r5, r1
   1385a:	69b8      	ldr	r0, [r7, #24]
   1385c:	f004 f9b2 	bl	17bc4 <__aeabi_f2d>
   13860:	4602      	mov	r2, r0
   13862:	460b      	mov	r3, r1
   13864:	4610      	mov	r0, r2
   13866:	4619      	mov	r1, r3
   13868:	a3b1      	add	r3, pc, #708	; (adr r3, 13b30 <auto_nav+0x1570>)
   1386a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1386e:	f004 f84b 	bl	17908 <__adddf3>
   13872:	4602      	mov	r2, r0
   13874:	460b      	mov	r3, r1
   13876:	4610      	mov	r0, r2
   13878:	4619      	mov	r1, r3
   1387a:	f002 fa81 	bl	15d80 <pp_sin>
   1387e:	4602      	mov	r2, r0
   13880:	460b      	mov	r3, r1
   13882:	4610      	mov	r0, r2
   13884:	4619      	mov	r1, r3
   13886:	f04f 0200 	mov.w	r2, #0
   1388a:	f04f 0300 	mov.w	r3, #0
   1388e:	f2c4 0349 	movt	r3, #16457	; 0x4049
   13892:	f004 f9eb 	bl	17c6c <__aeabi_dmul>
   13896:	4602      	mov	r2, r0
   13898:	460b      	mov	r3, r1
   1389a:	4620      	mov	r0, r4
   1389c:	4629      	mov	r1, r5
   1389e:	f004 f833 	bl	17908 <__adddf3>
   138a2:	4602      	mov	r2, r0
   138a4:	460b      	mov	r3, r1
   138a6:	4610      	mov	r0, r2
   138a8:	4619      	mov	r1, r3
   138aa:	f004 fcc1 	bl	18230 <__aeabi_d2f>
   138ae:	4606      	mov	r6, r0
   138b0:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   138b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138b8:	681b      	ldr	r3, [r3, #0]
   138ba:	4618      	mov	r0, r3
   138bc:	f004 f982 	bl	17bc4 <__aeabi_f2d>
   138c0:	4604      	mov	r4, r0
   138c2:	460d      	mov	r5, r1
   138c4:	69b8      	ldr	r0, [r7, #24]
   138c6:	f004 f97d 	bl	17bc4 <__aeabi_f2d>
   138ca:	4602      	mov	r2, r0
   138cc:	460b      	mov	r3, r1
   138ce:	4610      	mov	r0, r2
   138d0:	4619      	mov	r1, r3
   138d2:	f002 fa55 	bl	15d80 <pp_sin>
   138d6:	4602      	mov	r2, r0
   138d8:	460b      	mov	r3, r1
   138da:	4610      	mov	r0, r2
   138dc:	4619      	mov	r1, r3
   138de:	f04f 0200 	mov.w	r2, #0
   138e2:	f04f 0300 	mov.w	r3, #0
   138e6:	f2c4 0349 	movt	r3, #16457	; 0x4049
   138ea:	f004 f9bf 	bl	17c6c <__aeabi_dmul>
   138ee:	4602      	mov	r2, r0
   138f0:	460b      	mov	r3, r1
   138f2:	4620      	mov	r0, r4
   138f4:	4629      	mov	r1, r5
   138f6:	f004 f807 	bl	17908 <__adddf3>
   138fa:	4602      	mov	r2, r0
   138fc:	460b      	mov	r3, r1
   138fe:	4610      	mov	r0, r2
   13900:	4619      	mov	r1, r3
   13902:	f004 fc95 	bl	18230 <__aeabi_d2f>
   13906:	4603      	mov	r3, r0
   13908:	4630      	mov	r0, r6
   1390a:	4619      	mov	r1, r3
   1390c:	f001 f81c 	bl	14948 <fly_to_xy>
   13910:	69b8      	ldr	r0, [r7, #24]
   13912:	f004 f957 	bl	17bc4 <__aeabi_f2d>
   13916:	4602      	mov	r2, r0
   13918:	460b      	mov	r3, r1
   1391a:	a185      	add	r1, pc, #532	; (adr r1, 13b30 <auto_nav+0x1570>)
   1391c:	e9d1 0100 	ldrd	r0, r1, [r1]
   13920:	f003 fff0 	bl	17904 <__aeabi_dsub>
   13924:	4602      	mov	r2, r0
   13926:	460b      	mov	r3, r1
   13928:	4610      	mov	r0, r2
   1392a:	4619      	mov	r1, r3
   1392c:	a382      	add	r3, pc, #520	; (adr r3, 13b38 <auto_nav+0x1578>)
   1392e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13932:	f004 fac5 	bl	17ec0 <__aeabi_ddiv>
   13936:	4602      	mov	r2, r0
   13938:	460b      	mov	r3, r1
   1393a:	4610      	mov	r0, r2
   1393c:	4619      	mov	r1, r3
   1393e:	f04f 0200 	mov.w	r2, #0
   13942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13946:	f2c4 0366 	movt	r3, #16486	; 0x4066
   1394a:	f004 f98f 	bl	17c6c <__aeabi_dmul>
   1394e:	4602      	mov	r2, r0
   13950:	460b      	mov	r3, r1
   13952:	4610      	mov	r0, r2
   13954:	4619      	mov	r1, r3
   13956:	f004 fc6b 	bl	18230 <__aeabi_d2f>
   1395a:	4602      	mov	r2, r0
   1395c:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13960:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13964:	601a      	str	r2, [r3, #0]
   13966:	e012      	b.n	1398e <auto_nav+0x13ce>
   13968:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1396c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13970:	681b      	ldr	r3, [r3, #0]
   13972:	4618      	mov	r0, r3
   13974:	f04f 0100 	mov.w	r1, #0
   13978:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1397c:	f004 fcae 	bl	182dc <__addsf3>
   13980:	4603      	mov	r3, r0
   13982:	461a      	mov	r2, r3
   13984:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13988:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1398c:	601a      	str	r2, [r3, #0]
   1398e:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13992:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13996:	681b      	ldr	r3, [r3, #0]
   13998:	4618      	mov	r0, r3
   1399a:	f04f 0100 	mov.w	r1, #0
   1399e:	f004 ff43 	bl	18828 <__aeabi_fcmplt>
   139a2:	4603      	mov	r3, r0
   139a4:	2b00      	cmp	r3, #0
   139a6:	d1df      	bne.n	13968 <auto_nav+0x13a8>
   139a8:	e012      	b.n	139d0 <auto_nav+0x1410>
   139aa:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   139ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139b2:	681b      	ldr	r3, [r3, #0]
   139b4:	4618      	mov	r0, r3
   139b6:	f04f 0100 	mov.w	r1, #0
   139ba:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   139be:	f004 fc8b 	bl	182d8 <__aeabi_fsub>
   139c2:	4603      	mov	r3, r0
   139c4:	461a      	mov	r2, r3
   139c6:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   139ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139ce:	601a      	str	r2, [r3, #0]
   139d0:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   139d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139d8:	681b      	ldr	r3, [r3, #0]
   139da:	4618      	mov	r0, r3
   139dc:	f04f 0100 	mov.w	r1, #0
   139e0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   139e4:	f004 ff34 	bl	18850 <__aeabi_fcmpge>
   139e8:	4603      	mov	r3, r0
   139ea:	2b00      	cmp	r3, #0
   139ec:	d1dd      	bne.n	139aa <auto_nav+0x13ea>
        return;
   139ee:	f000 beb9 	b.w	14764 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   139f2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   139f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139fa:	781b      	ldrb	r3, [r3, #0]
   139fc:	2b01      	cmp	r3, #1
   139fe:	f040 86b1 	bne.w	14764 <auto_nav+0x21a4>
    {
        nav_stage = 1;
   13a02:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a0a:	2201      	movs	r2, #1
   13a0c:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13a0e:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a16:	781b      	ldrb	r3, [r3, #0]
   13a18:	3301      	adds	r3, #1
   13a1a:	b2da      	uxtb	r2, r3
   13a1c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a24:	701a      	strb	r2, [r3, #0]
   13a26:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a2e:	2200      	movs	r2, #0
   13a30:	701a      	strb	r2, [r3, #0]
   13a32:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a3a:	2200      	movs	r2, #0
   13a3c:	801a      	strh	r2, [r3, #0]
   13a3e:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13a42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a46:	681a      	ldr	r2, [r3, #0]
   13a48:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13a4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a50:	601a      	str	r2, [r3, #0]
   13a52:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13a56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a5a:	681a      	ldr	r2, [r3, #0]
   13a5c:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a64:	601a      	str	r2, [r3, #0]
   13a66:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a6e:	2200      	movs	r2, #0
   13a70:	801a      	strh	r2, [r3, #0]
   13a72:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a7a:	f04f 0200 	mov.w	r2, #0
   13a7e:	601a      	str	r2, [r3, #0]
   13a80:	f000 be70 	b.w	14764 <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   13a84:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a8c:	781b      	ldrb	r3, [r3, #0]
   13a8e:	2b04      	cmp	r3, #4
   13a90:	f040 8202 	bne.w	13e98 <auto_nav+0x18d8>
{
    nav_block = 4;
   13a94:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a9c:	2204      	movs	r2, #4
   13a9e:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13aa0:	f24c 5330 	movw	r3, #50480	; 0xc530
   13aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13aa8:	781b      	ldrb	r3, [r3, #0]
   13aaa:	2b00      	cmp	r3, #0
   13aac:	d007      	beq.n	13abe <auto_nav+0x14fe>
   13aae:	f24c 5330 	movw	r3, #50480	; 0xc530
   13ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ab6:	2200      	movs	r2, #0
   13ab8:	701a      	strb	r2, [r3, #0]
   13aba:	2301      	movs	r3, #1
   13abc:	e000      	b.n	13ac0 <auto_nav+0x1500>
   13abe:	2300      	movs	r3, #0
   13ac0:	2b00      	cmp	r3, #0
   13ac2:	d03d      	beq.n	13b40 <auto_nav+0x1580>
   13ac4:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13acc:	2205      	movs	r2, #5
   13ace:	701a      	strb	r2, [r3, #0]
   13ad0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ad8:	2200      	movs	r2, #0
   13ada:	701a      	strb	r2, [r3, #0]
   13adc:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ae4:	2200      	movs	r2, #0
   13ae6:	801a      	strh	r2, [r3, #0]
   13ae8:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13af0:	681a      	ldr	r2, [r3, #0]
   13af2:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13afa:	601a      	str	r2, [r3, #0]
   13afc:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b04:	681a      	ldr	r2, [r3, #0]
   13b06:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b0e:	601a      	str	r2, [r3, #0]
   13b10:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b18:	2200      	movs	r2, #0
   13b1a:	801a      	strh	r2, [r3, #0]
   13b1c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b24:	f04f 0200 	mov.w	r2, #0
   13b28:	601a      	str	r2, [r3, #0]
   13b2a:	f000 be1b 	b.w	14764 <auto_nav+0x21a4>
   13b2e:	bf00      	nop
   13b30:	54442d18 	.word	0x54442d18
   13b34:	3ff921fb 	.word	0x3ff921fb
   13b38:	54442d18 	.word	0x54442d18
   13b3c:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   13b40:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b48:	781b      	ldrb	r3, [r3, #0]
   13b4a:	2b00      	cmp	r3, #0
   13b4c:	f040 815b 	bne.w	13e06 <auto_nav+0x1846>
    {
        nav_stage = 0;
   13b50:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13b54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b58:	2200      	movs	r2, #0
   13b5a:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13b5c:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b64:	2200      	movs	r2, #0
   13b66:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13b68:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b70:	f04f 0200 	mov.w	r2, #0
   13b74:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13b76:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b7e:	2203      	movs	r2, #3
   13b80:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   13b82:	f240 5378 	movw	r3, #1400	; 0x578
   13b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b8a:	689a      	ldr	r2, [r3, #8]
   13b8c:	f240 5374 	movw	r3, #1396	; 0x574
   13b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b94:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13b96:	f64c 0394 	movw	r3, #51348	; 0xc894
   13b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b9e:	f04f 0200 	mov.w	r2, #0
   13ba2:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   13ba4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bac:	681a      	ldr	r2, [r3, #0]
   13bae:	f240 5378 	movw	r3, #1400	; 0x578
   13bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bb6:	685b      	ldr	r3, [r3, #4]
   13bb8:	4610      	mov	r0, r2
   13bba:	4619      	mov	r1, r3
   13bbc:	f004 fb8c 	bl	182d8 <__aeabi_fsub>
   13bc0:	4603      	mov	r3, r0
   13bc2:	4618      	mov	r0, r3
   13bc4:	f003 fffe 	bl	17bc4 <__aeabi_f2d>
   13bc8:	4604      	mov	r4, r0
   13bca:	460d      	mov	r5, r1
   13bcc:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bd4:	681a      	ldr	r2, [r3, #0]
   13bd6:	f240 5378 	movw	r3, #1400	; 0x578
   13bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bde:	681b      	ldr	r3, [r3, #0]
   13be0:	4610      	mov	r0, r2
   13be2:	4619      	mov	r1, r3
   13be4:	f004 fb78 	bl	182d8 <__aeabi_fsub>
   13be8:	4603      	mov	r3, r0
   13bea:	4618      	mov	r0, r3
   13bec:	f003 ffea 	bl	17bc4 <__aeabi_f2d>
   13bf0:	4602      	mov	r2, r0
   13bf2:	460b      	mov	r3, r1
   13bf4:	4620      	mov	r0, r4
   13bf6:	4629      	mov	r1, r5
   13bf8:	f002 f802 	bl	15c00 <pp_atan2>
   13bfc:	4602      	mov	r2, r0
   13bfe:	460b      	mov	r3, r1
   13c00:	4610      	mov	r0, r2
   13c02:	4619      	mov	r1, r3
   13c04:	f004 fb14 	bl	18230 <__aeabi_d2f>
   13c08:	4603      	mov	r3, r0
   13c0a:	617b      	str	r3, [r7, #20]
   13c0c:	6978      	ldr	r0, [r7, #20]
   13c0e:	f003 ffd9 	bl	17bc4 <__aeabi_f2d>
   13c12:	4604      	mov	r4, r0
   13c14:	460d      	mov	r5, r1
   13c16:	f64c 3334 	movw	r3, #52020	; 0xcb34
   13c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c1e:	681b      	ldr	r3, [r3, #0]
   13c20:	4618      	mov	r0, r3
   13c22:	f04f 0100 	mov.w	r1, #0
   13c26:	f2cc 3116 	movt	r1, #49942	; 0xc316
   13c2a:	f004 fc5f 	bl	184ec <__aeabi_fmul>
   13c2e:	4603      	mov	r3, r0
   13c30:	4618      	mov	r0, r3
   13c32:	f003 ffc7 	bl	17bc4 <__aeabi_f2d>
   13c36:	4602      	mov	r2, r0
   13c38:	460b      	mov	r3, r1
   13c3a:	f04f 0000 	mov.w	r0, #0
   13c3e:	f04f 0100 	mov.w	r1, #0
   13c42:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13c46:	f004 f93b 	bl	17ec0 <__aeabi_ddiv>
   13c4a:	4602      	mov	r2, r0
   13c4c:	460b      	mov	r3, r1
   13c4e:	4620      	mov	r0, r4
   13c50:	4629      	mov	r1, r5
   13c52:	f003 fe59 	bl	17908 <__adddf3>
   13c56:	4602      	mov	r2, r0
   13c58:	460b      	mov	r3, r1
   13c5a:	4610      	mov	r0, r2
   13c5c:	4619      	mov	r1, r3
   13c5e:	f004 fae7 	bl	18230 <__aeabi_d2f>
   13c62:	4603      	mov	r3, r0
   13c64:	613b      	str	r3, [r7, #16]
   13c66:	f240 5378 	movw	r3, #1400	; 0x578
   13c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c6e:	681b      	ldr	r3, [r3, #0]
   13c70:	4618      	mov	r0, r3
   13c72:	f003 ffa7 	bl	17bc4 <__aeabi_f2d>
   13c76:	4604      	mov	r4, r0
   13c78:	460d      	mov	r5, r1
   13c7a:	6938      	ldr	r0, [r7, #16]
   13c7c:	f003 ffa2 	bl	17bc4 <__aeabi_f2d>
   13c80:	4602      	mov	r2, r0
   13c82:	460b      	mov	r3, r1
   13c84:	4610      	mov	r0, r2
   13c86:	4619      	mov	r1, r3
   13c88:	a3af      	add	r3, pc, #700	; (adr r3, 13f48 <auto_nav+0x1988>)
   13c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c8e:	f003 fe3b 	bl	17908 <__adddf3>
   13c92:	4602      	mov	r2, r0
   13c94:	460b      	mov	r3, r1
   13c96:	4610      	mov	r0, r2
   13c98:	4619      	mov	r1, r3
   13c9a:	f002 f871 	bl	15d80 <pp_sin>
   13c9e:	4602      	mov	r2, r0
   13ca0:	460b      	mov	r3, r1
   13ca2:	4610      	mov	r0, r2
   13ca4:	4619      	mov	r1, r3
   13ca6:	a3aa      	add	r3, pc, #680	; (adr r3, 13f50 <auto_nav+0x1990>)
   13ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
   13cac:	f003 ffde 	bl	17c6c <__aeabi_dmul>
   13cb0:	4602      	mov	r2, r0
   13cb2:	460b      	mov	r3, r1
   13cb4:	4620      	mov	r0, r4
   13cb6:	4629      	mov	r1, r5
   13cb8:	f003 fe26 	bl	17908 <__adddf3>
   13cbc:	4602      	mov	r2, r0
   13cbe:	460b      	mov	r3, r1
   13cc0:	4610      	mov	r0, r2
   13cc2:	4619      	mov	r1, r3
   13cc4:	f004 fab4 	bl	18230 <__aeabi_d2f>
   13cc8:	4606      	mov	r6, r0
   13cca:	f240 5378 	movw	r3, #1400	; 0x578
   13cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cd2:	685b      	ldr	r3, [r3, #4]
   13cd4:	4618      	mov	r0, r3
   13cd6:	f003 ff75 	bl	17bc4 <__aeabi_f2d>
   13cda:	4604      	mov	r4, r0
   13cdc:	460d      	mov	r5, r1
   13cde:	6938      	ldr	r0, [r7, #16]
   13ce0:	f003 ff70 	bl	17bc4 <__aeabi_f2d>
   13ce4:	4602      	mov	r2, r0
   13ce6:	460b      	mov	r3, r1
   13ce8:	4610      	mov	r0, r2
   13cea:	4619      	mov	r1, r3
   13cec:	f002 f848 	bl	15d80 <pp_sin>
   13cf0:	4602      	mov	r2, r0
   13cf2:	460b      	mov	r3, r1
   13cf4:	4610      	mov	r0, r2
   13cf6:	4619      	mov	r1, r3
   13cf8:	a395      	add	r3, pc, #596	; (adr r3, 13f50 <auto_nav+0x1990>)
   13cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
   13cfe:	f003 ffb5 	bl	17c6c <__aeabi_dmul>
   13d02:	4602      	mov	r2, r0
   13d04:	460b      	mov	r3, r1
   13d06:	4620      	mov	r0, r4
   13d08:	4629      	mov	r1, r5
   13d0a:	f003 fdfd 	bl	17908 <__adddf3>
   13d0e:	4602      	mov	r2, r0
   13d10:	460b      	mov	r3, r1
   13d12:	4610      	mov	r0, r2
   13d14:	4619      	mov	r1, r3
   13d16:	f004 fa8b 	bl	18230 <__aeabi_d2f>
   13d1a:	4603      	mov	r3, r0
   13d1c:	4630      	mov	r0, r6
   13d1e:	4619      	mov	r1, r3
   13d20:	f000 fe12 	bl	14948 <fly_to_xy>
   13d24:	6938      	ldr	r0, [r7, #16]
   13d26:	f003 ff4d 	bl	17bc4 <__aeabi_f2d>
   13d2a:	4602      	mov	r2, r0
   13d2c:	460b      	mov	r3, r1
   13d2e:	a186      	add	r1, pc, #536	; (adr r1, 13f48 <auto_nav+0x1988>)
   13d30:	e9d1 0100 	ldrd	r0, r1, [r1]
   13d34:	f003 fde6 	bl	17904 <__aeabi_dsub>
   13d38:	4602      	mov	r2, r0
   13d3a:	460b      	mov	r3, r1
   13d3c:	4610      	mov	r0, r2
   13d3e:	4619      	mov	r1, r3
   13d40:	a385      	add	r3, pc, #532	; (adr r3, 13f58 <auto_nav+0x1998>)
   13d42:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d46:	f004 f8bb 	bl	17ec0 <__aeabi_ddiv>
   13d4a:	4602      	mov	r2, r0
   13d4c:	460b      	mov	r3, r1
   13d4e:	4610      	mov	r0, r2
   13d50:	4619      	mov	r1, r3
   13d52:	f04f 0200 	mov.w	r2, #0
   13d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13d5a:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13d5e:	f003 ff85 	bl	17c6c <__aeabi_dmul>
   13d62:	4602      	mov	r2, r0
   13d64:	460b      	mov	r3, r1
   13d66:	4610      	mov	r0, r2
   13d68:	4619      	mov	r1, r3
   13d6a:	f004 fa61 	bl	18230 <__aeabi_d2f>
   13d6e:	4602      	mov	r2, r0
   13d70:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d78:	601a      	str	r2, [r3, #0]
   13d7a:	e012      	b.n	13da2 <auto_nav+0x17e2>
   13d7c:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13d80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d84:	681b      	ldr	r3, [r3, #0]
   13d86:	4618      	mov	r0, r3
   13d88:	f04f 0100 	mov.w	r1, #0
   13d8c:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13d90:	f004 faa4 	bl	182dc <__addsf3>
   13d94:	4603      	mov	r3, r0
   13d96:	461a      	mov	r2, r3
   13d98:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13da0:	601a      	str	r2, [r3, #0]
   13da2:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13daa:	681b      	ldr	r3, [r3, #0]
   13dac:	4618      	mov	r0, r3
   13dae:	f04f 0100 	mov.w	r1, #0
   13db2:	f004 fd39 	bl	18828 <__aeabi_fcmplt>
   13db6:	4603      	mov	r3, r0
   13db8:	2b00      	cmp	r3, #0
   13dba:	d1df      	bne.n	13d7c <auto_nav+0x17bc>
   13dbc:	e012      	b.n	13de4 <auto_nav+0x1824>
   13dbe:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dc6:	681b      	ldr	r3, [r3, #0]
   13dc8:	4618      	mov	r0, r3
   13dca:	f04f 0100 	mov.w	r1, #0
   13dce:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13dd2:	f004 fa81 	bl	182d8 <__aeabi_fsub>
   13dd6:	4603      	mov	r3, r0
   13dd8:	461a      	mov	r2, r3
   13dda:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13de2:	601a      	str	r2, [r3, #0]
   13de4:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13de8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dec:	681b      	ldr	r3, [r3, #0]
   13dee:	4618      	mov	r0, r3
   13df0:	f04f 0100 	mov.w	r1, #0
   13df4:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13df8:	f004 fd2a 	bl	18850 <__aeabi_fcmpge>
   13dfc:	4603      	mov	r3, r0
   13dfe:	2b00      	cmp	r3, #0
   13e00:	d1dd      	bne.n	13dbe <auto_nav+0x17fe>
        return;
   13e02:	f000 bcaf 	b.w	14764 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13e06:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e0e:	781b      	ldrb	r3, [r3, #0]
   13e10:	2b01      	cmp	r3, #1
   13e12:	f040 84a7 	bne.w	14764 <auto_nav+0x21a4>
    {
        nav_stage =1;
   13e16:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e1e:	2201      	movs	r2, #1
   13e20:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13e22:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13e26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e2a:	781b      	ldrb	r3, [r3, #0]
   13e2c:	3301      	adds	r3, #1
   13e2e:	b2da      	uxtb	r2, r3
   13e30:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13e34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e38:	701a      	strb	r2, [r3, #0]
   13e3a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13e3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e42:	2200      	movs	r2, #0
   13e44:	701a      	strb	r2, [r3, #0]
   13e46:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e4e:	2200      	movs	r2, #0
   13e50:	801a      	strh	r2, [r3, #0]
   13e52:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e5a:	681a      	ldr	r2, [r3, #0]
   13e5c:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e64:	601a      	str	r2, [r3, #0]
   13e66:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e6e:	681a      	ldr	r2, [r3, #0]
   13e70:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e78:	601a      	str	r2, [r3, #0]
   13e7a:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e82:	2200      	movs	r2, #0
   13e84:	801a      	strh	r2, [r3, #0]
   13e86:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e8e:	f04f 0200 	mov.w	r2, #0
   13e92:	601a      	str	r2, [r3, #0]
   13e94:	f000 bc66 	b.w	14764 <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13e98:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13e9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ea0:	781b      	ldrb	r3, [r3, #0]
   13ea2:	2b05      	cmp	r3, #5
   13ea4:	f040 845e 	bne.w	14764 <auto_nav+0x21a4>
{
    nav_block = 5;
   13ea8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eb0:	2205      	movs	r2, #5
   13eb2:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   13eb4:	f24c 5330 	movw	r3, #50480	; 0xc530
   13eb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ebc:	781b      	ldrb	r3, [r3, #0]
   13ebe:	2b00      	cmp	r3, #0
   13ec0:	d007      	beq.n	13ed2 <auto_nav+0x1912>
   13ec2:	f24c 5330 	movw	r3, #50480	; 0xc530
   13ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eca:	2200      	movs	r2, #0
   13ecc:	701a      	strb	r2, [r3, #0]
   13ece:	2301      	movs	r3, #1
   13ed0:	e000      	b.n	13ed4 <auto_nav+0x1914>
   13ed2:	2300      	movs	r3, #0
   13ed4:	2b00      	cmp	r3, #0
   13ed6:	d043      	beq.n	13f60 <auto_nav+0x19a0>
   13ed8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ee0:	2201      	movs	r2, #1
   13ee2:	701a      	strb	r2, [r3, #0]
   13ee4:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13ee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eec:	2200      	movs	r2, #0
   13eee:	701a      	strb	r2, [r3, #0]
   13ef0:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13ef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ef8:	2200      	movs	r2, #0
   13efa:	801a      	strh	r2, [r3, #0]
   13efc:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13f00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f04:	681a      	ldr	r2, [r3, #0]
   13f06:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13f0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f0e:	601a      	str	r2, [r3, #0]
   13f10:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f18:	681a      	ldr	r2, [r3, #0]
   13f1a:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13f1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f22:	601a      	str	r2, [r3, #0]
   13f24:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13f28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f2c:	2200      	movs	r2, #0
   13f2e:	801a      	strh	r2, [r3, #0]
   13f30:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13f34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f38:	f04f 0200 	mov.w	r2, #0
   13f3c:	601a      	str	r2, [r3, #0]
   13f3e:	f000 bc11 	b.w	14764 <auto_nav+0x21a4>
   13f42:	bf00      	nop
   13f44:	f3af 8000 	nop.w
   13f48:	54442d18 	.word	0x54442d18
   13f4c:	3ff921fb 	.word	0x3ff921fb
   13f50:	00000000 	.word	0x00000000
   13f54:	4062c000 	.word	0x4062c000
   13f58:	54442d18 	.word	0x54442d18
   13f5c:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   13f60:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13f64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f68:	781b      	ldrb	r3, [r3, #0]
   13f6a:	2b00      	cmp	r3, #0
   13f6c:	d133      	bne.n	13fd6 <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   13f6e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f76:	2200      	movs	r2, #0
   13f78:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   13f7a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13f7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f82:	781b      	ldrb	r3, [r3, #0]
   13f84:	3301      	adds	r3, #1
   13f86:	b2da      	uxtb	r2, r3
   13f88:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13f8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f90:	701a      	strb	r2, [r3, #0]
   13f92:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f9a:	681a      	ldr	r2, [r3, #0]
   13f9c:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fa4:	601a      	str	r2, [r3, #0]
   13fa6:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fae:	681a      	ldr	r2, [r3, #0]
   13fb0:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fb8:	601a      	str	r2, [r3, #0]
   13fba:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13fbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fc2:	2200      	movs	r2, #0
   13fc4:	801a      	strh	r2, [r3, #0]
   13fc6:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fce:	f04f 0200 	mov.w	r2, #0
   13fd2:	601a      	str	r2, [r3, #0]
   13fd4:	e3c6      	b.n	14764 <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   13fd6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fde:	781b      	ldrb	r3, [r3, #0]
   13fe0:	2b01      	cmp	r3, #1
   13fe2:	f040 81b5 	bne.w	14350 <auto_nav+0x1d90>
    {
        nav_stage =1;
   13fe6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fee:	2201      	movs	r2, #1
   13ff0:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13ff2:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13ff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ffa:	2200      	movs	r2, #0
   13ffc:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13ffe:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14002:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14006:	f04f 0200 	mov.w	r2, #0
   1400a:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1400c:	f24c 532d 	movw	r3, #50477	; 0xc52d
   14010:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14014:	2203      	movs	r2, #3
   14016:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   14018:	f240 5378 	movw	r3, #1400	; 0x578
   1401c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14020:	695a      	ldr	r2, [r3, #20]
   14022:	f240 5374 	movw	r3, #1396	; 0x574
   14026:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1402a:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   1402c:	f64c 0394 	movw	r3, #51348	; 0xc894
   14030:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14034:	f04f 0200 	mov.w	r2, #0
   14038:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   1403a:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1403e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14042:	681a      	ldr	r2, [r3, #0]
   14044:	f240 5378 	movw	r3, #1400	; 0x578
   14048:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1404c:	691b      	ldr	r3, [r3, #16]
   1404e:	4610      	mov	r0, r2
   14050:	4619      	mov	r1, r3
   14052:	f004 f941 	bl	182d8 <__aeabi_fsub>
   14056:	4603      	mov	r3, r0
   14058:	4618      	mov	r0, r3
   1405a:	f003 fdb3 	bl	17bc4 <__aeabi_f2d>
   1405e:	4604      	mov	r4, r0
   14060:	460d      	mov	r5, r1
   14062:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14066:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1406a:	681a      	ldr	r2, [r3, #0]
   1406c:	f240 5378 	movw	r3, #1400	; 0x578
   14070:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14074:	68db      	ldr	r3, [r3, #12]
   14076:	4610      	mov	r0, r2
   14078:	4619      	mov	r1, r3
   1407a:	f004 f92d 	bl	182d8 <__aeabi_fsub>
   1407e:	4603      	mov	r3, r0
   14080:	4618      	mov	r0, r3
   14082:	f003 fd9f 	bl	17bc4 <__aeabi_f2d>
   14086:	4602      	mov	r2, r0
   14088:	460b      	mov	r3, r1
   1408a:	4620      	mov	r0, r4
   1408c:	4629      	mov	r1, r5
   1408e:	f001 fdb7 	bl	15c00 <pp_atan2>
   14092:	4602      	mov	r2, r0
   14094:	460b      	mov	r3, r1
   14096:	4610      	mov	r0, r2
   14098:	4619      	mov	r1, r3
   1409a:	f004 f8c9 	bl	18230 <__aeabi_d2f>
   1409e:	4603      	mov	r3, r0
   140a0:	60fb      	str	r3, [r7, #12]
   140a2:	68f8      	ldr	r0, [r7, #12]
   140a4:	f003 fd8e 	bl	17bc4 <__aeabi_f2d>
   140a8:	4604      	mov	r4, r0
   140aa:	460d      	mov	r5, r1
   140ac:	f64c 3334 	movw	r3, #52020	; 0xcb34
   140b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140b4:	681b      	ldr	r3, [r3, #0]
   140b6:	4618      	mov	r0, r3
   140b8:	f04f 0100 	mov.w	r1, #0
   140bc:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   140c0:	f004 fa14 	bl	184ec <__aeabi_fmul>
   140c4:	4603      	mov	r3, r0
   140c6:	4618      	mov	r0, r3
   140c8:	f003 fd7c 	bl	17bc4 <__aeabi_f2d>
   140cc:	4602      	mov	r2, r0
   140ce:	460b      	mov	r3, r1
   140d0:	f04f 0000 	mov.w	r0, #0
   140d4:	f04f 0100 	mov.w	r1, #0
   140d8:	f2c4 0114 	movt	r1, #16404	; 0x4014
   140dc:	f003 fef0 	bl	17ec0 <__aeabi_ddiv>
   140e0:	4602      	mov	r2, r0
   140e2:	460b      	mov	r3, r1
   140e4:	4620      	mov	r0, r4
   140e6:	4629      	mov	r1, r5
   140e8:	f003 fc0e 	bl	17908 <__adddf3>
   140ec:	4602      	mov	r2, r0
   140ee:	460b      	mov	r3, r1
   140f0:	4610      	mov	r0, r2
   140f2:	4619      	mov	r1, r3
   140f4:	f004 f89c 	bl	18230 <__aeabi_d2f>
   140f8:	4603      	mov	r3, r0
   140fa:	60bb      	str	r3, [r7, #8]
   140fc:	f240 5378 	movw	r3, #1400	; 0x578
   14100:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14104:	68db      	ldr	r3, [r3, #12]
   14106:	4618      	mov	r0, r3
   14108:	f003 fd5c 	bl	17bc4 <__aeabi_f2d>
   1410c:	4604      	mov	r4, r0
   1410e:	460d      	mov	r5, r1
   14110:	68b8      	ldr	r0, [r7, #8]
   14112:	f003 fd57 	bl	17bc4 <__aeabi_f2d>
   14116:	4602      	mov	r2, r0
   14118:	460b      	mov	r3, r1
   1411a:	4610      	mov	r0, r2
   1411c:	4619      	mov	r1, r3
   1411e:	a388      	add	r3, pc, #544	; (adr r3, 14340 <auto_nav+0x1d80>)
   14120:	e9d3 2300 	ldrd	r2, r3, [r3]
   14124:	f003 fbf0 	bl	17908 <__adddf3>
   14128:	4602      	mov	r2, r0
   1412a:	460b      	mov	r3, r1
   1412c:	4610      	mov	r0, r2
   1412e:	4619      	mov	r1, r3
   14130:	f001 fe26 	bl	15d80 <pp_sin>
   14134:	4602      	mov	r2, r0
   14136:	460b      	mov	r3, r1
   14138:	4610      	mov	r0, r2
   1413a:	4619      	mov	r1, r3
   1413c:	f04f 0200 	mov.w	r2, #0
   14140:	f04f 0300 	mov.w	r3, #0
   14144:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14148:	f003 fd90 	bl	17c6c <__aeabi_dmul>
   1414c:	4602      	mov	r2, r0
   1414e:	460b      	mov	r3, r1
   14150:	4620      	mov	r0, r4
   14152:	4629      	mov	r1, r5
   14154:	f003 fbd8 	bl	17908 <__adddf3>
   14158:	4602      	mov	r2, r0
   1415a:	460b      	mov	r3, r1
   1415c:	4610      	mov	r0, r2
   1415e:	4619      	mov	r1, r3
   14160:	f004 f866 	bl	18230 <__aeabi_d2f>
   14164:	4606      	mov	r6, r0
   14166:	f240 5378 	movw	r3, #1400	; 0x578
   1416a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1416e:	691b      	ldr	r3, [r3, #16]
   14170:	4618      	mov	r0, r3
   14172:	f003 fd27 	bl	17bc4 <__aeabi_f2d>
   14176:	4604      	mov	r4, r0
   14178:	460d      	mov	r5, r1
   1417a:	68b8      	ldr	r0, [r7, #8]
   1417c:	f003 fd22 	bl	17bc4 <__aeabi_f2d>
   14180:	4602      	mov	r2, r0
   14182:	460b      	mov	r3, r1
   14184:	4610      	mov	r0, r2
   14186:	4619      	mov	r1, r3
   14188:	f001 fdfa 	bl	15d80 <pp_sin>
   1418c:	4602      	mov	r2, r0
   1418e:	460b      	mov	r3, r1
   14190:	4610      	mov	r0, r2
   14192:	4619      	mov	r1, r3
   14194:	f04f 0200 	mov.w	r2, #0
   14198:	f04f 0300 	mov.w	r3, #0
   1419c:	f2c4 0359 	movt	r3, #16473	; 0x4059
   141a0:	f003 fd64 	bl	17c6c <__aeabi_dmul>
   141a4:	4602      	mov	r2, r0
   141a6:	460b      	mov	r3, r1
   141a8:	4620      	mov	r0, r4
   141aa:	4629      	mov	r1, r5
   141ac:	f003 fbac 	bl	17908 <__adddf3>
   141b0:	4602      	mov	r2, r0
   141b2:	460b      	mov	r3, r1
   141b4:	4610      	mov	r0, r2
   141b6:	4619      	mov	r1, r3
   141b8:	f004 f83a 	bl	18230 <__aeabi_d2f>
   141bc:	4603      	mov	r3, r0
   141be:	4630      	mov	r0, r6
   141c0:	4619      	mov	r1, r3
   141c2:	f000 fbc1 	bl	14948 <fly_to_xy>
   141c6:	68b8      	ldr	r0, [r7, #8]
   141c8:	f003 fcfc 	bl	17bc4 <__aeabi_f2d>
   141cc:	4602      	mov	r2, r0
   141ce:	460b      	mov	r3, r1
   141d0:	a15b      	add	r1, pc, #364	; (adr r1, 14340 <auto_nav+0x1d80>)
   141d2:	e9d1 0100 	ldrd	r0, r1, [r1]
   141d6:	f003 fb95 	bl	17904 <__aeabi_dsub>
   141da:	4602      	mov	r2, r0
   141dc:	460b      	mov	r3, r1
   141de:	4610      	mov	r0, r2
   141e0:	4619      	mov	r1, r3
   141e2:	a359      	add	r3, pc, #356	; (adr r3, 14348 <auto_nav+0x1d88>)
   141e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   141e8:	f003 fe6a 	bl	17ec0 <__aeabi_ddiv>
   141ec:	4602      	mov	r2, r0
   141ee:	460b      	mov	r3, r1
   141f0:	4610      	mov	r0, r2
   141f2:	4619      	mov	r1, r3
   141f4:	f04f 0200 	mov.w	r2, #0
   141f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   141fc:	f2c4 0366 	movt	r3, #16486	; 0x4066
   14200:	f003 fd34 	bl	17c6c <__aeabi_dmul>
   14204:	4602      	mov	r2, r0
   14206:	460b      	mov	r3, r1
   14208:	4610      	mov	r0, r2
   1420a:	4619      	mov	r1, r3
   1420c:	f004 f810 	bl	18230 <__aeabi_d2f>
   14210:	4602      	mov	r2, r0
   14212:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14216:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1421a:	601a      	str	r2, [r3, #0]
   1421c:	e012      	b.n	14244 <auto_nav+0x1c84>
   1421e:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14222:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14226:	681b      	ldr	r3, [r3, #0]
   14228:	4618      	mov	r0, r3
   1422a:	f04f 0100 	mov.w	r1, #0
   1422e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14232:	f004 f853 	bl	182dc <__addsf3>
   14236:	4603      	mov	r3, r0
   14238:	461a      	mov	r2, r3
   1423a:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1423e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14242:	601a      	str	r2, [r3, #0]
   14244:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14248:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1424c:	681b      	ldr	r3, [r3, #0]
   1424e:	4618      	mov	r0, r3
   14250:	f04f 0100 	mov.w	r1, #0
   14254:	f004 fae8 	bl	18828 <__aeabi_fcmplt>
   14258:	4603      	mov	r3, r0
   1425a:	2b00      	cmp	r3, #0
   1425c:	d1df      	bne.n	1421e <auto_nav+0x1c5e>
   1425e:	e012      	b.n	14286 <auto_nav+0x1cc6>
   14260:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14264:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14268:	681b      	ldr	r3, [r3, #0]
   1426a:	4618      	mov	r0, r3
   1426c:	f04f 0100 	mov.w	r1, #0
   14270:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14274:	f004 f830 	bl	182d8 <__aeabi_fsub>
   14278:	4603      	mov	r3, r0
   1427a:	461a      	mov	r2, r3
   1427c:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14280:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14284:	601a      	str	r2, [r3, #0]
   14286:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1428a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1428e:	681b      	ldr	r3, [r3, #0]
   14290:	4618      	mov	r0, r3
   14292:	f04f 0100 	mov.w	r1, #0
   14296:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1429a:	f004 fad9 	bl	18850 <__aeabi_fcmpge>
   1429e:	4603      	mov	r3, r0
   142a0:	2b00      	cmp	r3, #0
   142a2:	d1dd      	bne.n	14260 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   142a4:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   142a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142ac:	681b      	ldr	r3, [r3, #0]
   142ae:	4618      	mov	r0, r3
   142b0:	f04f 0100 	mov.w	r1, #0
   142b4:	f004 fad6 	bl	18864 <__aeabi_fcmpgt>
   142b8:	4603      	mov	r3, r0
   142ba:	2b00      	cmp	r3, #0
   142bc:	d100      	bne.n	142c0 <auto_nav+0x1d00>
        return;
   142be:	e251      	b.n	14764 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   142c0:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   142c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142c8:	681b      	ldr	r3, [r3, #0]
   142ca:	4618      	mov	r0, r3
   142cc:	f04f 0100 	mov.w	r1, #0
   142d0:	f2c4 1120 	movt	r1, #16672	; 0x4120
   142d4:	f004 faa8 	bl	18828 <__aeabi_fcmplt>
   142d8:	4603      	mov	r3, r0
   142da:	2b00      	cmp	r3, #0
   142dc:	d100      	bne.n	142e0 <auto_nav+0x1d20>
        return;
   142de:	e241      	b.n	14764 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   142e0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   142e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142e8:	781b      	ldrb	r3, [r3, #0]
   142ea:	3301      	adds	r3, #1
   142ec:	b2da      	uxtb	r2, r3
   142ee:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   142f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142f6:	701a      	strb	r2, [r3, #0]
   142f8:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   142fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14300:	681a      	ldr	r2, [r3, #0]
   14302:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   14306:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1430a:	601a      	str	r2, [r3, #0]
   1430c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14310:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14314:	681a      	ldr	r2, [r3, #0]
   14316:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1431a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1431e:	601a      	str	r2, [r3, #0]
   14320:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   14324:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14328:	2200      	movs	r2, #0
   1432a:	801a      	strh	r2, [r3, #0]
   1432c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   14330:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14334:	f04f 0200 	mov.w	r2, #0
   14338:	601a      	str	r2, [r3, #0]
   1433a:	e213      	b.n	14764 <auto_nav+0x21a4>
   1433c:	f3af 8000 	nop.w
   14340:	54442d18 	.word	0x54442d18
   14344:	3ff921fb 	.word	0x3ff921fb
   14348:	54442d18 	.word	0x54442d18
   1434c:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   14350:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14354:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14358:	781b      	ldrb	r3, [r3, #0]
   1435a:	2b02      	cmp	r3, #2
   1435c:	f040 81ad 	bne.w	146ba <auto_nav+0x20fa>
    {
         nav_stage = 2;
   14360:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14364:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14368:	2202      	movs	r2, #2
   1436a:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   1436c:	f24c 532f 	movw	r3, #50479	; 0xc52f
   14370:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14374:	2200      	movs	r2, #0
   14376:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   14378:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1437c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14380:	f04f 0200 	mov.w	r2, #0
   14384:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14386:	f24c 532d 	movw	r3, #50477	; 0xc52d
   1438a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1438e:	2203      	movs	r2, #3
   14390:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   14392:	f240 5378 	movw	r3, #1400	; 0x578
   14396:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1439a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1439c:	f240 5374 	movw	r3, #1396	; 0x574
   143a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143a4:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   143a6:	f64c 0394 	movw	r3, #51348	; 0xc894
   143aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143ae:	f04f 0200 	mov.w	r2, #0
   143b2:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   143b4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   143b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143bc:	681a      	ldr	r2, [r3, #0]
   143be:	f240 5378 	movw	r3, #1400	; 0x578
   143c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   143c8:	4610      	mov	r0, r2
   143ca:	4619      	mov	r1, r3
   143cc:	f003 ff84 	bl	182d8 <__aeabi_fsub>
   143d0:	4603      	mov	r3, r0
   143d2:	4618      	mov	r0, r3
   143d4:	f003 fbf6 	bl	17bc4 <__aeabi_f2d>
   143d8:	4604      	mov	r4, r0
   143da:	460d      	mov	r5, r1
   143dc:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   143e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143e4:	681a      	ldr	r2, [r3, #0]
   143e6:	f240 5378 	movw	r3, #1400	; 0x578
   143ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   143f0:	4610      	mov	r0, r2
   143f2:	4619      	mov	r1, r3
   143f4:	f003 ff70 	bl	182d8 <__aeabi_fsub>
   143f8:	4603      	mov	r3, r0
   143fa:	4618      	mov	r0, r3
   143fc:	f003 fbe2 	bl	17bc4 <__aeabi_f2d>
   14400:	4602      	mov	r2, r0
   14402:	460b      	mov	r3, r1
   14404:	4620      	mov	r0, r4
   14406:	4629      	mov	r1, r5
   14408:	f001 fbfa 	bl	15c00 <pp_atan2>
   1440c:	4602      	mov	r2, r0
   1440e:	460b      	mov	r3, r1
   14410:	4610      	mov	r0, r2
   14412:	4619      	mov	r1, r3
   14414:	f003 ff0c 	bl	18230 <__aeabi_d2f>
   14418:	4603      	mov	r3, r0
   1441a:	607b      	str	r3, [r7, #4]
   1441c:	6878      	ldr	r0, [r7, #4]
   1441e:	f003 fbd1 	bl	17bc4 <__aeabi_f2d>
   14422:	4604      	mov	r4, r0
   14424:	460d      	mov	r5, r1
   14426:	f64c 3334 	movw	r3, #52020	; 0xcb34
   1442a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1442e:	681b      	ldr	r3, [r3, #0]
   14430:	4618      	mov	r0, r3
   14432:	f04f 0100 	mov.w	r1, #0
   14436:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1443a:	f004 f857 	bl	184ec <__aeabi_fmul>
   1443e:	4603      	mov	r3, r0
   14440:	4618      	mov	r0, r3
   14442:	f003 fbbf 	bl	17bc4 <__aeabi_f2d>
   14446:	4602      	mov	r2, r0
   14448:	460b      	mov	r3, r1
   1444a:	f04f 0000 	mov.w	r0, #0
   1444e:	f04f 0100 	mov.w	r1, #0
   14452:	f2c4 0114 	movt	r1, #16404	; 0x4014
   14456:	f003 fd33 	bl	17ec0 <__aeabi_ddiv>
   1445a:	4602      	mov	r2, r0
   1445c:	460b      	mov	r3, r1
   1445e:	4620      	mov	r0, r4
   14460:	4629      	mov	r1, r5
   14462:	f003 fa51 	bl	17908 <__adddf3>
   14466:	4602      	mov	r2, r0
   14468:	460b      	mov	r3, r1
   1446a:	4610      	mov	r0, r2
   1446c:	4619      	mov	r1, r3
   1446e:	f003 fedf 	bl	18230 <__aeabi_d2f>
   14472:	4603      	mov	r3, r0
   14474:	603b      	str	r3, [r7, #0]
   14476:	f240 5378 	movw	r3, #1400	; 0x578
   1447a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1447e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14480:	4618      	mov	r0, r3
   14482:	f003 fb9f 	bl	17bc4 <__aeabi_f2d>
   14486:	4604      	mov	r4, r0
   14488:	460d      	mov	r5, r1
   1448a:	6838      	ldr	r0, [r7, #0]
   1448c:	f003 fb9a 	bl	17bc4 <__aeabi_f2d>
   14490:	4602      	mov	r2, r0
   14492:	460b      	mov	r3, r1
   14494:	4610      	mov	r0, r2
   14496:	4619      	mov	r1, r3
   14498:	a3b5      	add	r3, pc, #724	; (adr r3, 14770 <auto_nav+0x21b0>)
   1449a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1449e:	f003 fa33 	bl	17908 <__adddf3>
   144a2:	4602      	mov	r2, r0
   144a4:	460b      	mov	r3, r1
   144a6:	4610      	mov	r0, r2
   144a8:	4619      	mov	r1, r3
   144aa:	f001 fc69 	bl	15d80 <pp_sin>
   144ae:	4602      	mov	r2, r0
   144b0:	460b      	mov	r3, r1
   144b2:	4610      	mov	r0, r2
   144b4:	4619      	mov	r1, r3
   144b6:	f04f 0200 	mov.w	r2, #0
   144ba:	f04f 0300 	mov.w	r3, #0
   144be:	f2c4 0359 	movt	r3, #16473	; 0x4059
   144c2:	f003 fbd3 	bl	17c6c <__aeabi_dmul>
   144c6:	4602      	mov	r2, r0
   144c8:	460b      	mov	r3, r1
   144ca:	4620      	mov	r0, r4
   144cc:	4629      	mov	r1, r5
   144ce:	f003 fa1b 	bl	17908 <__adddf3>
   144d2:	4602      	mov	r2, r0
   144d4:	460b      	mov	r3, r1
   144d6:	4610      	mov	r0, r2
   144d8:	4619      	mov	r1, r3
   144da:	f003 fea9 	bl	18230 <__aeabi_d2f>
   144de:	4606      	mov	r6, r0
   144e0:	f240 5378 	movw	r3, #1400	; 0x578
   144e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   144ea:	4618      	mov	r0, r3
   144ec:	f003 fb6a 	bl	17bc4 <__aeabi_f2d>
   144f0:	4604      	mov	r4, r0
   144f2:	460d      	mov	r5, r1
   144f4:	6838      	ldr	r0, [r7, #0]
   144f6:	f003 fb65 	bl	17bc4 <__aeabi_f2d>
   144fa:	4602      	mov	r2, r0
   144fc:	460b      	mov	r3, r1
   144fe:	4610      	mov	r0, r2
   14500:	4619      	mov	r1, r3
   14502:	f001 fc3d 	bl	15d80 <pp_sin>
   14506:	4602      	mov	r2, r0
   14508:	460b      	mov	r3, r1
   1450a:	4610      	mov	r0, r2
   1450c:	4619      	mov	r1, r3
   1450e:	f04f 0200 	mov.w	r2, #0
   14512:	f04f 0300 	mov.w	r3, #0
   14516:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1451a:	f003 fba7 	bl	17c6c <__aeabi_dmul>
   1451e:	4602      	mov	r2, r0
   14520:	460b      	mov	r3, r1
   14522:	4620      	mov	r0, r4
   14524:	4629      	mov	r1, r5
   14526:	f003 f9ef 	bl	17908 <__adddf3>
   1452a:	4602      	mov	r2, r0
   1452c:	460b      	mov	r3, r1
   1452e:	4610      	mov	r0, r2
   14530:	4619      	mov	r1, r3
   14532:	f003 fe7d 	bl	18230 <__aeabi_d2f>
   14536:	4603      	mov	r3, r0
   14538:	4630      	mov	r0, r6
   1453a:	4619      	mov	r1, r3
   1453c:	f000 fa04 	bl	14948 <fly_to_xy>
   14540:	6838      	ldr	r0, [r7, #0]
   14542:	f003 fb3f 	bl	17bc4 <__aeabi_f2d>
   14546:	4602      	mov	r2, r0
   14548:	460b      	mov	r3, r1
   1454a:	a189      	add	r1, pc, #548	; (adr r1, 14770 <auto_nav+0x21b0>)
   1454c:	e9d1 0100 	ldrd	r0, r1, [r1]
   14550:	f003 f9d8 	bl	17904 <__aeabi_dsub>
   14554:	4602      	mov	r2, r0
   14556:	460b      	mov	r3, r1
   14558:	4610      	mov	r0, r2
   1455a:	4619      	mov	r1, r3
   1455c:	a386      	add	r3, pc, #536	; (adr r3, 14778 <auto_nav+0x21b8>)
   1455e:	e9d3 2300 	ldrd	r2, r3, [r3]
   14562:	f003 fcad 	bl	17ec0 <__aeabi_ddiv>
   14566:	4602      	mov	r2, r0
   14568:	460b      	mov	r3, r1
   1456a:	4610      	mov	r0, r2
   1456c:	4619      	mov	r1, r3
   1456e:	f04f 0200 	mov.w	r2, #0
   14572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   14576:	f2c4 0366 	movt	r3, #16486	; 0x4066
   1457a:	f003 fb77 	bl	17c6c <__aeabi_dmul>
   1457e:	4602      	mov	r2, r0
   14580:	460b      	mov	r3, r1
   14582:	4610      	mov	r0, r2
   14584:	4619      	mov	r1, r3
   14586:	f003 fe53 	bl	18230 <__aeabi_d2f>
   1458a:	4602      	mov	r2, r0
   1458c:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14590:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14594:	601a      	str	r2, [r3, #0]
   14596:	e012      	b.n	145be <auto_nav+0x1ffe>
   14598:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1459c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145a0:	681b      	ldr	r3, [r3, #0]
   145a2:	4618      	mov	r0, r3
   145a4:	f04f 0100 	mov.w	r1, #0
   145a8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   145ac:	f003 fe96 	bl	182dc <__addsf3>
   145b0:	4603      	mov	r3, r0
   145b2:	461a      	mov	r2, r3
   145b4:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   145b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145bc:	601a      	str	r2, [r3, #0]
   145be:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   145c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145c6:	681b      	ldr	r3, [r3, #0]
   145c8:	4618      	mov	r0, r3
   145ca:	f04f 0100 	mov.w	r1, #0
   145ce:	f004 f92b 	bl	18828 <__aeabi_fcmplt>
   145d2:	4603      	mov	r3, r0
   145d4:	2b00      	cmp	r3, #0
   145d6:	d1df      	bne.n	14598 <auto_nav+0x1fd8>
   145d8:	e012      	b.n	14600 <auto_nav+0x2040>
   145da:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   145de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145e2:	681b      	ldr	r3, [r3, #0]
   145e4:	4618      	mov	r0, r3
   145e6:	f04f 0100 	mov.w	r1, #0
   145ea:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   145ee:	f003 fe73 	bl	182d8 <__aeabi_fsub>
   145f2:	4603      	mov	r3, r0
   145f4:	461a      	mov	r2, r3
   145f6:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   145fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145fe:	601a      	str	r2, [r3, #0]
   14600:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14604:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14608:	681b      	ldr	r3, [r3, #0]
   1460a:	4618      	mov	r0, r3
   1460c:	f04f 0100 	mov.w	r1, #0
   14610:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14614:	f004 f91c 	bl	18850 <__aeabi_fcmpge>
   14618:	4603      	mov	r3, r0
   1461a:	2b00      	cmp	r3, #0
   1461c:	d1dd      	bne.n	145da <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   1461e:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14622:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14626:	681b      	ldr	r3, [r3, #0]
   14628:	4618      	mov	r0, r3
   1462a:	f04f 0100 	mov.w	r1, #0
   1462e:	f2c4 3134 	movt	r1, #17204	; 0x4334
   14632:	f004 f917 	bl	18864 <__aeabi_fcmpgt>
   14636:	4603      	mov	r3, r0
   14638:	2b00      	cmp	r3, #0
   1463a:	d100      	bne.n	1463e <auto_nav+0x207e>
          return;
   1463c:	e092      	b.n	14764 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   1463e:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14642:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14646:	681b      	ldr	r3, [r3, #0]
   14648:	4618      	mov	r0, r3
   1464a:	f04f 0100 	mov.w	r1, #0
   1464e:	f2c4 313e 	movt	r1, #17214	; 0x433e
   14652:	f004 f8e9 	bl	18828 <__aeabi_fcmplt>
   14656:	4603      	mov	r3, r0
   14658:	2b00      	cmp	r3, #0
   1465a:	d100      	bne.n	1465e <auto_nav+0x209e>
          return;
   1465c:	e082      	b.n	14764 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   1465e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14662:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14666:	781b      	ldrb	r3, [r3, #0]
   14668:	3301      	adds	r3, #1
   1466a:	b2da      	uxtb	r2, r3
   1466c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14670:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14674:	701a      	strb	r2, [r3, #0]
   14676:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1467a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1467e:	681a      	ldr	r2, [r3, #0]
   14680:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   14684:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14688:	601a      	str	r2, [r3, #0]
   1468a:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1468e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14692:	681a      	ldr	r2, [r3, #0]
   14694:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   14698:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1469c:	601a      	str	r2, [r3, #0]
   1469e:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   146a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146a6:	2200      	movs	r2, #0
   146a8:	801a      	strh	r2, [r3, #0]
   146aa:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   146ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146b2:	f04f 0200 	mov.w	r2, #0
   146b6:	601a      	str	r2, [r3, #0]
   146b8:	e054      	b.n	14764 <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   146ba:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   146be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146c2:	781b      	ldrb	r3, [r3, #0]
   146c4:	2b03      	cmp	r3, #3
   146c6:	d106      	bne.n	146d6 <auto_nav+0x2116>
    {
	  nav_stage = 3;
   146c8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   146cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146d0:	2203      	movs	r2, #3
   146d2:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   146d4:	e44b      	b.n	13f6e <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   146d6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   146da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146de:	781b      	ldrb	r3, [r3, #0]
   146e0:	2b04      	cmp	r3, #4
   146e2:	d13f      	bne.n	14764 <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   146e4:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   146e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146ec:	2204      	movs	r2, #4
   146ee:	701a      	strb	r2, [r3, #0]
        NextBlock()
   146f0:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   146f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146f8:	781b      	ldrb	r3, [r3, #0]
   146fa:	3301      	adds	r3, #1
   146fc:	b2da      	uxtb	r2, r3
   146fe:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   14702:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14706:	701a      	strb	r2, [r3, #0]
   14708:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1470c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14710:	2200      	movs	r2, #0
   14712:	701a      	strb	r2, [r3, #0]
   14714:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   14718:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1471c:	2200      	movs	r2, #0
   1471e:	801a      	strh	r2, [r3, #0]
   14720:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14724:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14728:	681a      	ldr	r2, [r3, #0]
   1472a:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1472e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14732:	601a      	str	r2, [r3, #0]
   14734:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14738:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1473c:	681a      	ldr	r2, [r3, #0]
   1473e:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   14742:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14746:	601a      	str	r2, [r3, #0]
   14748:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1474c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14750:	2200      	movs	r2, #0
   14752:	801a      	strh	r2, [r3, #0]
   14754:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   14758:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1475c:	f04f 0200 	mov.w	r2, #0
   14760:	601a      	str	r2, [r3, #0]
   14762:	bf00      	nop
    else { }
}
else { }

//#endif
}
   14764:	372c      	adds	r7, #44	; 0x2c
   14766:	46bd      	mov	sp, r7
   14768:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1476a:	bf00      	nop
   1476c:	f3af 8000 	nop.w
   14770:	54442d18 	.word	0x54442d18
   14774:	3ff921fb 	.word	0x3ff921fb
   14778:	54442d18 	.word	0x54442d18
   1477c:	400921fb 	.word	0x400921fb

00014780 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   14780:	b590      	push	{r4, r7, lr}
   14782:	b087      	sub	sp, #28
   14784:	af00      	add	r7, sp, #0
   14786:	4603      	mov	r3, r0
   14788:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   1478a:	79f9      	ldrb	r1, [r7, #7]
   1478c:	f240 5278 	movw	r2, #1400	; 0x578
   14790:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14794:	460b      	mov	r3, r1
   14796:	005b      	lsls	r3, r3, #1
   14798:	440b      	add	r3, r1
   1479a:	009b      	lsls	r3, r3, #2
   1479c:	4413      	add	r3, r2
   1479e:	681a      	ldr	r2, [r3, #0]
   147a0:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   147a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147a8:	681b      	ldr	r3, [r3, #0]
   147aa:	4610      	mov	r0, r2
   147ac:	4619      	mov	r1, r3
   147ae:	f003 fd93 	bl	182d8 <__aeabi_fsub>
   147b2:	4603      	mov	r3, r0
   147b4:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   147b6:	79f9      	ldrb	r1, [r7, #7]
   147b8:	f240 5278 	movw	r2, #1400	; 0x578
   147bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   147c0:	460b      	mov	r3, r1
   147c2:	005b      	lsls	r3, r3, #1
   147c4:	440b      	add	r3, r1
   147c6:	009b      	lsls	r3, r3, #2
   147c8:	4413      	add	r3, r2
   147ca:	3304      	adds	r3, #4
   147cc:	681a      	ldr	r2, [r3, #0]
   147ce:	f64c 3300 	movw	r3, #51968	; 0xcb00
   147d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147d6:	681b      	ldr	r3, [r3, #0]
   147d8:	4610      	mov	r0, r2
   147da:	4619      	mov	r1, r3
   147dc:	f003 fd7c 	bl	182d8 <__aeabi_fsub>
   147e0:	4603      	mov	r3, r0
   147e2:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   147e4:	6978      	ldr	r0, [r7, #20]
   147e6:	6979      	ldr	r1, [r7, #20]
   147e8:	f003 fe80 	bl	184ec <__aeabi_fmul>
   147ec:	4603      	mov	r3, r0
   147ee:	461c      	mov	r4, r3
   147f0:	6938      	ldr	r0, [r7, #16]
   147f2:	6939      	ldr	r1, [r7, #16]
   147f4:	f003 fe7a 	bl	184ec <__aeabi_fmul>
   147f8:	4603      	mov	r3, r0
   147fa:	4620      	mov	r0, r4
   147fc:	4619      	mov	r1, r3
   147fe:	f003 fd6d 	bl	182dc <__addsf3>
   14802:	4603      	mov	r3, r0
   14804:	461a      	mov	r2, r3
   14806:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   1480a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1480e:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   14810:	f64c 3334 	movw	r3, #52020	; 0xcb34
   14814:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14818:	681b      	ldr	r3, [r3, #0]
   1481a:	4618      	mov	r0, r3
   1481c:	f04f 0100 	mov.w	r1, #0
   14820:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   14824:	f003 fe62 	bl	184ec <__aeabi_fmul>
   14828:	4603      	mov	r3, r0
   1482a:	461a      	mov	r2, r3
   1482c:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14830:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14834:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   14836:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   1483a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1483e:	681b      	ldr	r3, [r3, #0]
   14840:	4618      	mov	r0, r3
   14842:	f04f 0100 	mov.w	r1, #0
   14846:	f2c4 2120 	movt	r1, #16928	; 0x4220
   1484a:	f003 ffed 	bl	18828 <__aeabi_fcmplt>
   1484e:	4603      	mov	r3, r0
   14850:	2b00      	cmp	r3, #0
   14852:	d004      	beq.n	1485e <approaching+0xde>
   14854:	f04f 0200 	mov.w	r2, #0
   14858:	f2c4 2220 	movt	r2, #16928	; 0x4220
   1485c:	e004      	b.n	14868 <approaching+0xe8>
   1485e:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14862:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14866:	681a      	ldr	r2, [r3, #0]
   14868:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   1486c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14870:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   14872:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14876:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1487a:	681a      	ldr	r2, [r3, #0]
   1487c:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14880:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14884:	681b      	ldr	r3, [r3, #0]
   14886:	4610      	mov	r0, r2
   14888:	4619      	mov	r1, r3
   1488a:	f003 fe2f 	bl	184ec <__aeabi_fmul>
   1488e:	4603      	mov	r3, r0
   14890:	461a      	mov	r2, r3
   14892:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   14896:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1489a:	681b      	ldr	r3, [r3, #0]
   1489c:	4610      	mov	r0, r2
   1489e:	4619      	mov	r1, r3
   148a0:	f003 ffe0 	bl	18864 <__aeabi_fcmpgt>
   148a4:	4603      	mov	r3, r0
   148a6:	2b00      	cmp	r3, #0
   148a8:	d001      	beq.n	148ae <approaching+0x12e>
    return TRUE;
   148aa:	2301      	movs	r3, #1
   148ac:	e048      	b.n	14940 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   148ae:	79f9      	ldrb	r1, [r7, #7]
   148b0:	f240 5278 	movw	r2, #1400	; 0x578
   148b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   148b8:	460b      	mov	r3, r1
   148ba:	005b      	lsls	r3, r3, #1
   148bc:	440b      	add	r3, r1
   148be:	009b      	lsls	r3, r3, #2
   148c0:	4413      	add	r3, r2
   148c2:	681a      	ldr	r2, [r3, #0]
   148c4:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   148c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148cc:	681b      	ldr	r3, [r3, #0]
   148ce:	4610      	mov	r0, r2
   148d0:	4619      	mov	r1, r3
   148d2:	f003 fd01 	bl	182d8 <__aeabi_fsub>
   148d6:	4603      	mov	r3, r0
   148d8:	4618      	mov	r0, r3
   148da:	6979      	ldr	r1, [r7, #20]
   148dc:	f003 fe06 	bl	184ec <__aeabi_fmul>
   148e0:	4603      	mov	r3, r0
   148e2:	461c      	mov	r4, r3
   148e4:	79f9      	ldrb	r1, [r7, #7]
   148e6:	f240 5278 	movw	r2, #1400	; 0x578
   148ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
   148ee:	460b      	mov	r3, r1
   148f0:	005b      	lsls	r3, r3, #1
   148f2:	440b      	add	r3, r1
   148f4:	009b      	lsls	r3, r3, #2
   148f6:	4413      	add	r3, r2
   148f8:	3304      	adds	r3, #4
   148fa:	681a      	ldr	r2, [r3, #0]
   148fc:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   14900:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14904:	681b      	ldr	r3, [r3, #0]
   14906:	4610      	mov	r0, r2
   14908:	4619      	mov	r1, r3
   1490a:	f003 fce5 	bl	182d8 <__aeabi_fsub>
   1490e:	4603      	mov	r3, r0
   14910:	4618      	mov	r0, r3
   14912:	6939      	ldr	r1, [r7, #16]
   14914:	f003 fdea 	bl	184ec <__aeabi_fmul>
   14918:	4603      	mov	r3, r0
   1491a:	4620      	mov	r0, r4
   1491c:	4619      	mov	r1, r3
   1491e:	f003 fcdd 	bl	182dc <__addsf3>
   14922:	4603      	mov	r3, r0
   14924:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   14926:	2301      	movs	r3, #1
   14928:	461c      	mov	r4, r3
   1492a:	68f8      	ldr	r0, [r7, #12]
   1492c:	f04f 0100 	mov.w	r1, #0
   14930:	f003 ff7a 	bl	18828 <__aeabi_fcmplt>
   14934:	4603      	mov	r3, r0
   14936:	2b00      	cmp	r3, #0
   14938:	d101      	bne.n	1493e <approaching+0x1be>
   1493a:	2300      	movs	r3, #0
   1493c:	461c      	mov	r4, r3
   1493e:	b2e3      	uxtb	r3, r4
}
   14940:	4618      	mov	r0, r3
   14942:	371c      	adds	r7, #28
   14944:	46bd      	mov	sp, r7
   14946:	bd90      	pop	{r4, r7, pc}

00014948 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   14948:	b5b0      	push	{r4, r5, r7, lr}
   1494a:	b082      	sub	sp, #8
   1494c:	af00      	add	r7, sp, #0
   1494e:	6078      	str	r0, [r7, #4]
   14950:	6039      	str	r1, [r7, #0]
  desired_x = x;
   14952:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
   14956:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1495a:	687a      	ldr	r2, [r7, #4]
   1495c:	601a      	str	r2, [r3, #0]
  desired_y = y;
   1495e:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
   14962:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14966:	683a      	ldr	r2, [r7, #0]
   14968:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   1496a:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1496e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14972:	681b      	ldr	r3, [r3, #0]
   14974:	6838      	ldr	r0, [r7, #0]
   14976:	4619      	mov	r1, r3
   14978:	f003 fcae 	bl	182d8 <__aeabi_fsub>
   1497c:	4603      	mov	r3, r0
   1497e:	4618      	mov	r0, r3
   14980:	f003 f920 	bl	17bc4 <__aeabi_f2d>
   14984:	4604      	mov	r4, r0
   14986:	460d      	mov	r5, r1
   14988:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1498c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14990:	681b      	ldr	r3, [r3, #0]
   14992:	6878      	ldr	r0, [r7, #4]
   14994:	4619      	mov	r1, r3
   14996:	f003 fc9f 	bl	182d8 <__aeabi_fsub>
   1499a:	4603      	mov	r3, r0
   1499c:	4618      	mov	r0, r3
   1499e:	f003 f911 	bl	17bc4 <__aeabi_f2d>
   149a2:	4602      	mov	r2, r0
   149a4:	460b      	mov	r3, r1
   149a6:	4620      	mov	r0, r4
   149a8:	4629      	mov	r1, r5
   149aa:	f001 f929 	bl	15c00 <pp_atan2>
   149ae:	4602      	mov	r2, r0
   149b0:	460b      	mov	r3, r1
   149b2:	a10b      	add	r1, pc, #44	; (adr r1, 149e0 <fly_to_xy+0x98>)
   149b4:	e9d1 0100 	ldrd	r0, r1, [r1]
   149b8:	f002 ffa4 	bl	17904 <__aeabi_dsub>
   149bc:	4602      	mov	r2, r0
   149be:	460b      	mov	r3, r1
   149c0:	4610      	mov	r0, r2
   149c2:	4619      	mov	r1, r3
   149c4:	f003 fc34 	bl	18230 <__aeabi_d2f>
   149c8:	4602      	mov	r2, r0
   149ca:	f64c 038c 	movw	r3, #51340	; 0xc88c
   149ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149d2:	601a      	str	r2, [r3, #0]
}
   149d4:	3708      	adds	r7, #8
   149d6:	46bd      	mov	sp, r7
   149d8:	bdb0      	pop	{r4, r5, r7, pc}
   149da:	bf00      	nop
   149dc:	f3af 8000 	nop.w
   149e0:	54442d18 	.word	0x54442d18
   149e4:	3ff921fb 	.word	0x3ff921fb

000149e8 <fly_to>:

static void fly_to(uint8_t wp) { 
   149e8:	b580      	push	{r7, lr}
   149ea:	b082      	sub	sp, #8
   149ec:	af00      	add	r7, sp, #0
   149ee:	4603      	mov	r3, r0
   149f0:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   149f2:	79f9      	ldrb	r1, [r7, #7]
   149f4:	f240 5278 	movw	r2, #1400	; 0x578
   149f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   149fc:	460b      	mov	r3, r1
   149fe:	005b      	lsls	r3, r3, #1
   14a00:	440b      	add	r3, r1
   14a02:	009b      	lsls	r3, r3, #2
   14a04:	4413      	add	r3, r2
   14a06:	6818      	ldr	r0, [r3, #0]
   14a08:	79f9      	ldrb	r1, [r7, #7]
   14a0a:	f240 5278 	movw	r2, #1400	; 0x578
   14a0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a12:	460b      	mov	r3, r1
   14a14:	005b      	lsls	r3, r3, #1
   14a16:	440b      	add	r3, r1
   14a18:	009b      	lsls	r3, r3, #2
   14a1a:	4413      	add	r3, r2
   14a1c:	3304      	adds	r3, #4
   14a1e:	681b      	ldr	r3, [r3, #0]
   14a20:	4619      	mov	r1, r3
   14a22:	f7ff ff91 	bl	14948 <fly_to_xy>
}
   14a26:	3708      	adds	r7, #8
   14a28:	46bd      	mov	sp, r7
   14a2a:	bd80      	pop	{r7, pc}

00014a2c <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   14a2c:	b5b0      	push	{r4, r5, r7, lr}
   14a2e:	b088      	sub	sp, #32
   14a30:	af00      	add	r7, sp, #0
   14a32:	4602      	mov	r2, r0
   14a34:	460b      	mov	r3, r1
   14a36:	71fa      	strb	r2, [r7, #7]
   14a38:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   14a3a:	79f9      	ldrb	r1, [r7, #7]
   14a3c:	f240 5278 	movw	r2, #1400	; 0x578
   14a40:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a44:	460b      	mov	r3, r1
   14a46:	005b      	lsls	r3, r3, #1
   14a48:	440b      	add	r3, r1
   14a4a:	009b      	lsls	r3, r3, #2
   14a4c:	4413      	add	r3, r2
   14a4e:	681b      	ldr	r3, [r3, #0]
   14a50:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   14a52:	79f9      	ldrb	r1, [r7, #7]
   14a54:	f240 5278 	movw	r2, #1400	; 0x578
   14a58:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a5c:	460b      	mov	r3, r1
   14a5e:	005b      	lsls	r3, r3, #1
   14a60:	440b      	add	r3, r1
   14a62:	009b      	lsls	r3, r3, #2
   14a64:	4413      	add	r3, r2
   14a66:	3304      	adds	r3, #4
   14a68:	681b      	ldr	r3, [r3, #0]
   14a6a:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   14a6c:	79b9      	ldrb	r1, [r7, #6]
   14a6e:	f240 5278 	movw	r2, #1400	; 0x578
   14a72:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a76:	460b      	mov	r3, r1
   14a78:	005b      	lsls	r3, r3, #1
   14a7a:	440b      	add	r3, r1
   14a7c:	009b      	lsls	r3, r3, #2
   14a7e:	4413      	add	r3, r2
   14a80:	681b      	ldr	r3, [r3, #0]
   14a82:	4618      	mov	r0, r3
   14a84:	69f9      	ldr	r1, [r7, #28]
   14a86:	f003 fc27 	bl	182d8 <__aeabi_fsub>
   14a8a:	4603      	mov	r3, r0
   14a8c:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   14a8e:	79b9      	ldrb	r1, [r7, #6]
   14a90:	f240 5278 	movw	r2, #1400	; 0x578
   14a94:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a98:	460b      	mov	r3, r1
   14a9a:	005b      	lsls	r3, r3, #1
   14a9c:	440b      	add	r3, r1
   14a9e:	009b      	lsls	r3, r3, #2
   14aa0:	4413      	add	r3, r2
   14aa2:	3304      	adds	r3, #4
   14aa4:	681b      	ldr	r3, [r3, #0]
   14aa6:	4618      	mov	r0, r3
   14aa8:	69b9      	ldr	r1, [r7, #24]
   14aaa:	f003 fc15 	bl	182d8 <__aeabi_fsub>
   14aae:	4603      	mov	r3, r0
   14ab0:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   14ab2:	6978      	ldr	r0, [r7, #20]
   14ab4:	6979      	ldr	r1, [r7, #20]
   14ab6:	f003 fd19 	bl	184ec <__aeabi_fmul>
   14aba:	4603      	mov	r3, r0
   14abc:	461c      	mov	r4, r3
   14abe:	6938      	ldr	r0, [r7, #16]
   14ac0:	6939      	ldr	r1, [r7, #16]
   14ac2:	f003 fd13 	bl	184ec <__aeabi_fmul>
   14ac6:	4603      	mov	r3, r0
   14ac8:	4620      	mov	r0, r4
   14aca:	4619      	mov	r1, r3
   14acc:	f003 fc06 	bl	182dc <__addsf3>
   14ad0:	4603      	mov	r3, r0
   14ad2:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   14ad4:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14adc:	681b      	ldr	r3, [r3, #0]
   14ade:	4618      	mov	r0, r3
   14ae0:	69f9      	ldr	r1, [r7, #28]
   14ae2:	f003 fbf9 	bl	182d8 <__aeabi_fsub>
   14ae6:	4603      	mov	r3, r0
   14ae8:	4618      	mov	r0, r3
   14aea:	6979      	ldr	r1, [r7, #20]
   14aec:	f003 fcfe 	bl	184ec <__aeabi_fmul>
   14af0:	4603      	mov	r3, r0
   14af2:	461c      	mov	r4, r3
   14af4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14afc:	681b      	ldr	r3, [r3, #0]
   14afe:	4618      	mov	r0, r3
   14b00:	69b9      	ldr	r1, [r7, #24]
   14b02:	f003 fbe9 	bl	182d8 <__aeabi_fsub>
   14b06:	4603      	mov	r3, r0
   14b08:	4618      	mov	r0, r3
   14b0a:	6939      	ldr	r1, [r7, #16]
   14b0c:	f003 fcee 	bl	184ec <__aeabi_fmul>
   14b10:	4603      	mov	r3, r0
   14b12:	4620      	mov	r0, r4
   14b14:	4619      	mov	r1, r3
   14b16:	f003 fbe1 	bl	182dc <__addsf3>
   14b1a:	4603      	mov	r3, r0
   14b1c:	4618      	mov	r0, r3
   14b1e:	68f9      	ldr	r1, [r7, #12]
   14b20:	f003 fd98 	bl	18654 <__aeabi_fdiv>
   14b24:	4603      	mov	r3, r0
   14b26:	461a      	mov	r2, r3
   14b28:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b30:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   14b32:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b3a:	681b      	ldr	r3, [r3, #0]
   14b3c:	4618      	mov	r0, r3
   14b3e:	f04f 0100 	mov.w	r1, #0
   14b42:	f003 fe85 	bl	18850 <__aeabi_fcmpge>
   14b46:	4603      	mov	r3, r0
   14b48:	2b00      	cmp	r3, #0
   14b4a:	d005      	beq.n	14b58 <route_to+0x12c>
   14b4c:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b54:	681a      	ldr	r2, [r3, #0]
   14b56:	e001      	b.n	14b5c <route_to+0x130>
   14b58:	f04f 0200 	mov.w	r2, #0
   14b5c:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b64:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   14b66:	68f8      	ldr	r0, [r7, #12]
   14b68:	f003 f82c 	bl	17bc4 <__aeabi_f2d>
   14b6c:	4602      	mov	r2, r0
   14b6e:	460b      	mov	r3, r1
   14b70:	4610      	mov	r0, r2
   14b72:	4619      	mov	r1, r3
   14b74:	f001 f9f4 	bl	15f60 <pp_sqrt>
   14b78:	4602      	mov	r2, r0
   14b7a:	460b      	mov	r3, r1
   14b7c:	4610      	mov	r0, r2
   14b7e:	4619      	mov	r1, r3
   14b80:	f003 fb56 	bl	18230 <__aeabi_d2f>
   14b84:	4602      	mov	r2, r0
   14b86:	f64c 03e8 	movw	r3, #51432	; 0xc8e8
   14b8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b8e:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14b90:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14b94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b98:	681b      	ldr	r3, [r3, #0]
   14b9a:	4618      	mov	r0, r3
   14b9c:	f003 f812 	bl	17bc4 <__aeabi_f2d>
   14ba0:	4604      	mov	r4, r0
   14ba2:	460d      	mov	r5, r1
   14ba4:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bac:	681a      	ldr	r2, [r3, #0]
   14bae:	f64c 03e8 	movw	r3, #51432	; 0xc8e8
   14bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bb6:	681b      	ldr	r3, [r3, #0]
   14bb8:	4610      	mov	r0, r2
   14bba:	4619      	mov	r1, r3
   14bbc:	f003 fd4a 	bl	18654 <__aeabi_fdiv>
   14bc0:	4603      	mov	r3, r0
   14bc2:	4618      	mov	r0, r3
   14bc4:	f04f 0100 	mov.w	r1, #0
   14bc8:	f003 fe42 	bl	18850 <__aeabi_fcmpge>
   14bcc:	4603      	mov	r3, r0
   14bce:	2b00      	cmp	r3, #0
   14bd0:	d014      	beq.n	14bfc <route_to+0x1d0>
   14bd2:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bda:	681a      	ldr	r2, [r3, #0]
   14bdc:	f64c 03e8 	movw	r3, #51432	; 0xc8e8
   14be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14be4:	681b      	ldr	r3, [r3, #0]
   14be6:	4610      	mov	r0, r2
   14be8:	4619      	mov	r1, r3
   14bea:	f003 fd33 	bl	18654 <__aeabi_fdiv>
   14bee:	4603      	mov	r3, r0
   14bf0:	4618      	mov	r0, r3
   14bf2:	f002 ffe7 	bl	17bc4 <__aeabi_f2d>
   14bf6:	4602      	mov	r2, r0
   14bf8:	460b      	mov	r3, r1
   14bfa:	e003      	b.n	14c04 <route_to+0x1d8>
   14bfc:	f04f 0200 	mov.w	r2, #0
   14c00:	f04f 0300 	mov.w	r3, #0
   14c04:	4620      	mov	r0, r4
   14c06:	4629      	mov	r1, r5
   14c08:	f002 fe7e 	bl	17908 <__adddf3>
   14c0c:	4602      	mov	r2, r0
   14c0e:	460b      	mov	r3, r1
   14c10:	4610      	mov	r0, r2
   14c12:	4619      	mov	r1, r3
   14c14:	f003 fb0c 	bl	18230 <__aeabi_d2f>
   14c18:	4602      	mov	r2, r0
   14c1a:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14c1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c22:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   14c24:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c2c:	681b      	ldr	r3, [r3, #0]
   14c2e:	4618      	mov	r0, r3
   14c30:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14c34:	f003 fe0c 	bl	18850 <__aeabi_fcmpge>
   14c38:	4603      	mov	r3, r0
   14c3a:	2b00      	cmp	r3, #0
   14c3c:	d002      	beq.n	14c44 <route_to+0x218>
   14c3e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   14c42:	e004      	b.n	14c4e <route_to+0x222>
   14c44:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c4c:	681a      	ldr	r2, [r3, #0]
   14c4e:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c56:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   14c58:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14c5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c60:	681b      	ldr	r3, [r3, #0]
   14c62:	4618      	mov	r0, r3
   14c64:	6979      	ldr	r1, [r7, #20]
   14c66:	f003 fc41 	bl	184ec <__aeabi_fmul>
   14c6a:	4603      	mov	r3, r0
   14c6c:	4618      	mov	r0, r3
   14c6e:	69f9      	ldr	r1, [r7, #28]
   14c70:	f003 fb34 	bl	182dc <__addsf3>
   14c74:	4603      	mov	r3, r0
   14c76:	461c      	mov	r4, r3
   14c78:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c80:	681b      	ldr	r3, [r3, #0]
   14c82:	4618      	mov	r0, r3
   14c84:	6939      	ldr	r1, [r7, #16]
   14c86:	f003 fc31 	bl	184ec <__aeabi_fmul>
   14c8a:	4603      	mov	r3, r0
   14c8c:	4618      	mov	r0, r3
   14c8e:	69b9      	ldr	r1, [r7, #24]
   14c90:	f003 fb24 	bl	182dc <__addsf3>
   14c94:	4603      	mov	r3, r0
   14c96:	4620      	mov	r0, r4
   14c98:	4619      	mov	r1, r3
   14c9a:	f7ff fe55 	bl	14948 <fly_to_xy>
}
   14c9e:	3720      	adds	r7, #32
   14ca0:	46bd      	mov	sp, r7
   14ca2:	bdb0      	pop	{r4, r5, r7, pc}

00014ca4 <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   14ca4:	b590      	push	{r4, r7, lr}
   14ca6:	b083      	sub	sp, #12
   14ca8:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   14caa:	f240 5378 	movw	r3, #1400	; 0x578
   14cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cb2:	681a      	ldr	r2, [r3, #0]
   14cb4:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cbc:	681b      	ldr	r3, [r3, #0]
   14cbe:	4610      	mov	r0, r2
   14cc0:	4619      	mov	r1, r3
   14cc2:	f003 fb09 	bl	182d8 <__aeabi_fsub>
   14cc6:	4603      	mov	r3, r0
   14cc8:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   14cca:	f240 5378 	movw	r3, #1400	; 0x578
   14cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cd2:	685a      	ldr	r2, [r3, #4]
   14cd4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14cd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cdc:	681b      	ldr	r3, [r3, #0]
   14cde:	4610      	mov	r0, r2
   14ce0:	4619      	mov	r1, r3
   14ce2:	f003 faf9 	bl	182d8 <__aeabi_fsub>
   14ce6:	4603      	mov	r3, r0
   14ce8:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   14cea:	6878      	ldr	r0, [r7, #4]
   14cec:	6879      	ldr	r1, [r7, #4]
   14cee:	f003 fbfd 	bl	184ec <__aeabi_fmul>
   14cf2:	4603      	mov	r3, r0
   14cf4:	461c      	mov	r4, r3
   14cf6:	6838      	ldr	r0, [r7, #0]
   14cf8:	6839      	ldr	r1, [r7, #0]
   14cfa:	f003 fbf7 	bl	184ec <__aeabi_fmul>
   14cfe:	4603      	mov	r3, r0
   14d00:	4620      	mov	r0, r4
   14d02:	4619      	mov	r1, r3
   14d04:	f003 faea 	bl	182dc <__addsf3>
   14d08:	4603      	mov	r3, r0
   14d0a:	461a      	mov	r2, r3
   14d0c:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   14d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d14:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   14d16:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   14d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d1e:	681b      	ldr	r3, [r3, #0]
   14d20:	2201      	movs	r2, #1
   14d22:	4614      	mov	r4, r2
   14d24:	4618      	mov	r0, r3
   14d26:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   14d2a:	f6c4 0174 	movt	r1, #18548	; 0x4874
   14d2e:	f003 fd99 	bl	18864 <__aeabi_fcmpgt>
   14d32:	4603      	mov	r3, r0
   14d34:	2b00      	cmp	r3, #0
   14d36:	d101      	bne.n	14d3c <compute_dist2_to_home+0x98>
   14d38:	2300      	movs	r3, #0
   14d3a:	461c      	mov	r4, r3
   14d3c:	b2e3      	uxtb	r3, r4
   14d3e:	461a      	mov	r2, r3
   14d40:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
   14d44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d48:	701a      	strb	r2, [r3, #0]
}
   14d4a:	370c      	adds	r7, #12
   14d4c:	46bd      	mov	sp, r7
   14d4e:	bd90      	pop	{r4, r7, pc}

00014d50 <nav_home>:

void nav_home(void) {
   14d50:	b580      	push	{r7, lr}
   14d52:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   14d54:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d5c:	f04f 0200 	mov.w	r2, #0
   14d60:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14d62:	f24c 532d 	movw	r3, #50477	; 0xc52d
   14d66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d6a:	2203      	movs	r2, #3
   14d6c:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   14d6e:	f240 5374 	movw	r3, #1396	; 0x574
   14d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d76:	f04f 0200 	mov.w	r2, #0
   14d7a:	f2c4 322f 	movt	r2, #17199	; 0x432f
   14d7e:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14d80:	f7ff ff90 	bl	14ca4 <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   14d84:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   14d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d8c:	681a      	ldr	r2, [r3, #0]
   14d8e:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   14d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d96:	601a      	str	r2, [r3, #0]
}
   14d98:	bd80      	pop	{r7, pc}
   14d9a:	bf00      	nop

00014d9c <nav_update>:

void nav_update(void) {
   14d9c:	b580      	push	{r7, lr}
   14d9e:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14da0:	f7ff ff80 	bl	14ca4 <compute_dist2_to_home>

  auto_nav();
   14da4:	f7fd fc0c 	bl	125c0 <auto_nav>
}
   14da8:	bd80      	pop	{r7, pc}
   14daa:	bf00      	nop

00014dac <nav_init>:


void nav_init(void) {
   14dac:	b480      	push	{r7}
   14dae:	af00      	add	r7, sp, #0
  nav_block = 0;
   14db0:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   14db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14db8:	2200      	movs	r2, #0
   14dba:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   14dbc:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14dc4:	2200      	movs	r2, #0
   14dc6:	701a      	strb	r2, [r3, #0]
}
   14dc8:	46bd      	mov	sp, r7
   14dca:	f85d 7b04 	ldr.w	r7, [sp], #4
   14dce:	4770      	bx	lr

00014dd0 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14dd0:	b480      	push	{r7}
   14dd2:	b083      	sub	sp, #12
   14dd4:	af00      	add	r7, sp, #0
   14dd6:	4603      	mov	r3, r0
   14dd8:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   14dda:	f242 030a 	movw	r3, #8202	; 0x200a
   14dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14de2:	781b      	ldrb	r3, [r3, #0]
   14de4:	b2db      	uxtb	r3, r3
   14de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14dea:	2b00      	cmp	r3, #0
   14dec:	d028      	beq.n	14e40 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   14dee:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   14df2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14df6:	781b      	ldrb	r3, [r3, #0]
   14df8:	b2db      	uxtb	r3, r3
   14dfa:	461a      	mov	r2, r3
   14dfc:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e04:	781b      	ldrb	r3, [r3, #0]
   14e06:	3301      	adds	r3, #1
   14e08:	429a      	cmp	r2, r3
   14e0a:	d100      	bne.n	14e0e <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14e0c:	e02c      	b.n	14e68 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   14e0e:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e16:	781b      	ldrb	r3, [r3, #0]
   14e18:	461a      	mov	r2, r3
   14e1a:	f64c 03f8 	movw	r3, #51448	; 0xc8f8
   14e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e22:	79f9      	ldrb	r1, [r7, #7]
   14e24:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   14e26:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14e2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e2e:	781b      	ldrb	r3, [r3, #0]
   14e30:	3301      	adds	r3, #1
   14e32:	b2da      	uxtb	r2, r3
   14e34:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e3c:	701a      	strb	r2, [r3, #0]
   14e3e:	e013      	b.n	14e68 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   14e40:	f242 030c 	movw	r3, #8204	; 0x200c
   14e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e48:	79fa      	ldrb	r2, [r7, #7]
   14e4a:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   14e4c:	f242 030a 	movw	r3, #8202	; 0x200a
   14e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e54:	f242 020a 	movw	r2, #8202	; 0x200a
   14e58:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14e5c:	7812      	ldrb	r2, [r2, #0]
   14e5e:	b2d2      	uxtb	r2, r2
   14e60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14e64:	b2d2      	uxtb	r2, r2
   14e66:	701a      	strb	r2, [r3, #0]
  }
}
   14e68:	370c      	adds	r7, #12
   14e6a:	46bd      	mov	sp, r7
   14e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
   14e70:	4770      	bx	lr
   14e72:	bf00      	nop

00014e74 <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   14e74:	b480      	push	{r7}
   14e76:	b083      	sub	sp, #12
   14e78:	af00      	add	r7, sp, #0
   14e7a:	4603      	mov	r3, r0
   14e7c:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   14e7e:	f242 039a 	movw	r3, #8346	; 0x209a
   14e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e86:	781b      	ldrb	r3, [r3, #0]
   14e88:	b2db      	uxtb	r3, r3
   14e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14e8e:	2b00      	cmp	r3, #0
   14e90:	d028      	beq.n	14ee4 <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   14e92:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   14e96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e9a:	781b      	ldrb	r3, [r3, #0]
   14e9c:	b2db      	uxtb	r3, r3
   14e9e:	461a      	mov	r2, r3
   14ea0:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14ea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ea8:	781b      	ldrb	r3, [r3, #0]
   14eaa:	3301      	adds	r3, #1
   14eac:	429a      	cmp	r2, r3
   14eae:	d100      	bne.n	14eb2 <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14eb0:	e02c      	b.n	14f0c <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   14eb2:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14eba:	781b      	ldrb	r3, [r3, #0]
   14ebc:	461a      	mov	r2, r3
   14ebe:	f64c 13fc 	movw	r3, #51708	; 0xc9fc
   14ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ec6:	79f9      	ldrb	r1, [r7, #7]
   14ec8:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   14eca:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ed2:	781b      	ldrb	r3, [r3, #0]
   14ed4:	3301      	adds	r3, #1
   14ed6:	b2da      	uxtb	r2, r3
   14ed8:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ee0:	701a      	strb	r2, [r3, #0]
   14ee2:	e013      	b.n	14f0c <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   14ee4:	f242 039c 	movw	r3, #8348	; 0x209c
   14ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14eec:	79fa      	ldrb	r2, [r7, #7]
   14eee:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   14ef0:	f242 039a 	movw	r3, #8346	; 0x209a
   14ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ef8:	f242 029a 	movw	r2, #8346	; 0x209a
   14efc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14f00:	7812      	ldrb	r2, [r2, #0]
   14f02:	b2d2      	uxtb	r2, r2
   14f04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14f08:	b2d2      	uxtb	r2, r2
   14f0a:	701a      	strb	r2, [r3, #0]
  }
}
   14f0c:	370c      	adds	r7, #12
   14f0e:	46bd      	mov	sp, r7
   14f10:	f85d 7b04 	ldr.w	r7, [sp], #4
   14f14:	4770      	bx	lr
   14f16:	bf00      	nop

00014f18 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   14f18:	b580      	push	{r7, lr}
   14f1a:	b084      	sub	sp, #16
   14f1c:	af00      	add	r7, sp, #0
   14f1e:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   14f20:	2300      	movs	r3, #0
   14f22:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   14f24:	e009      	b.n	14f3a <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   14f26:	7bfb      	ldrb	r3, [r7, #15]
   14f28:	687a      	ldr	r2, [r7, #4]
   14f2a:	4413      	add	r3, r2
   14f2c:	781b      	ldrb	r3, [r3, #0]
   14f2e:	4618      	mov	r0, r3
   14f30:	f7ff ff4e 	bl	14dd0 <uart0_transmit>
    i++;
   14f34:	7bfb      	ldrb	r3, [r7, #15]
   14f36:	3301      	adds	r3, #1
   14f38:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   14f3a:	7bfb      	ldrb	r3, [r7, #15]
   14f3c:	687a      	ldr	r2, [r7, #4]
   14f3e:	4413      	add	r3, r2
   14f40:	781b      	ldrb	r3, [r3, #0]
   14f42:	2b00      	cmp	r3, #0
   14f44:	d1ef      	bne.n	14f26 <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   14f46:	3710      	adds	r7, #16
   14f48:	46bd      	mov	sp, r7
   14f4a:	bd80      	pop	{r7, pc}

00014f4c <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   14f4c:	b590      	push	{r4, r7, lr}
   14f4e:	b089      	sub	sp, #36	; 0x24
   14f50:	af00      	add	r7, sp, #0
   14f52:	4603      	mov	r3, r0
   14f54:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   14f56:	f648 23ec 	movw	r3, #35564	; 0x8aec
   14f5a:	f2c0 0301 	movt	r3, #1
   14f5e:	f107 040c 	add.w	r4, r7, #12
   14f62:	6818      	ldr	r0, [r3, #0]
   14f64:	6859      	ldr	r1, [r3, #4]
   14f66:	689a      	ldr	r2, [r3, #8]
   14f68:	68db      	ldr	r3, [r3, #12]
   14f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   14f6c:	79fb      	ldrb	r3, [r7, #7]
   14f6e:	091b      	lsrs	r3, r3, #4
   14f70:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   14f72:	79fb      	ldrb	r3, [r7, #7]
   14f74:	f003 030f 	and.w	r3, r3, #15
   14f78:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   14f7a:	230f      	movs	r3, #15
   14f7c:	77fb      	strb	r3, [r7, #31]
    low = 15;
   14f7e:	230f      	movs	r3, #15
   14f80:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   14f82:	7ffb      	ldrb	r3, [r7, #31]
   14f84:	f107 0220 	add.w	r2, r7, #32
   14f88:	4413      	add	r3, r2
   14f8a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14f8e:	4618      	mov	r0, r3
   14f90:	f7ff ff1e 	bl	14dd0 <uart0_transmit>
  uart0_transmit(hex[low]);
   14f94:	7fbb      	ldrb	r3, [r7, #30]
   14f96:	f107 0220 	add.w	r2, r7, #32
   14f9a:	4413      	add	r3, r2
   14f9c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14fa0:	4618      	mov	r0, r3
   14fa2:	f7ff ff15 	bl	14dd0 <uart0_transmit>
}
   14fa6:	3724      	adds	r7, #36	; 0x24
   14fa8:	46bd      	mov	sp, r7
   14faa:	bd90      	pop	{r4, r7, pc}

00014fac <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   14fac:	b480      	push	{r7}
   14fae:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   14fb0:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fb8:	781a      	ldrb	r2, [r3, #0]
   14fba:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   14fbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fc2:	781b      	ldrb	r3, [r3, #0]
   14fc4:	b2db      	uxtb	r3, r3
   14fc6:	429a      	cmp	r2, r3
   14fc8:	d10e      	bne.n	14fe8 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   14fca:	f242 030a 	movw	r3, #8202	; 0x200a
   14fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fd2:	f242 020a 	movw	r2, #8202	; 0x200a
   14fd6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14fda:	7812      	ldrb	r2, [r2, #0]
   14fdc:	b2d2      	uxtb	r2, r2
   14fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14fe2:	b2d2      	uxtb	r2, r2
   14fe4:	701a      	strb	r2, [r3, #0]
   14fe6:	e01d      	b.n	15024 <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   14fe8:	f242 030c 	movw	r3, #8204	; 0x200c
   14fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ff0:	f64c 02f5 	movw	r2, #51445	; 0xc8f5
   14ff4:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14ff8:	7812      	ldrb	r2, [r2, #0]
   14ffa:	b2d2      	uxtb	r2, r2
   14ffc:	4611      	mov	r1, r2
   14ffe:	f64c 02f8 	movw	r2, #51448	; 0xc8f8
   15002:	f2c2 0204 	movt	r2, #8196	; 0x2004
   15006:	5c52      	ldrb	r2, [r2, r1]
   15008:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   1500a:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   1500e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15012:	781b      	ldrb	r3, [r3, #0]
   15014:	b2db      	uxtb	r3, r3
   15016:	3301      	adds	r3, #1
   15018:	b2da      	uxtb	r2, r3
   1501a:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   1501e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15022:	701a      	strb	r2, [r3, #0]
  }
}
   15024:	46bd      	mov	sp, r7
   15026:	f85d 7b04 	ldr.w	r7, [sp], #4
   1502a:	4770      	bx	lr

0001502c <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   1502c:	b480      	push	{r7}
   1502e:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   15030:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   15034:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15038:	781a      	ldrb	r2, [r3, #0]
   1503a:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   1503e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15042:	781b      	ldrb	r3, [r3, #0]
   15044:	b2db      	uxtb	r3, r3
   15046:	429a      	cmp	r2, r3
   15048:	d10e      	bne.n	15068 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   1504a:	f242 039a 	movw	r3, #8346	; 0x209a
   1504e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15052:	f242 029a 	movw	r2, #8346	; 0x209a
   15056:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1505a:	7812      	ldrb	r2, [r2, #0]
   1505c:	b2d2      	uxtb	r2, r2
   1505e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   15062:	b2d2      	uxtb	r2, r2
   15064:	701a      	strb	r2, [r3, #0]
   15066:	e01d      	b.n	150a4 <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   15068:	f242 039c 	movw	r3, #8348	; 0x209c
   1506c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15070:	f64c 12f9 	movw	r2, #51705	; 0xc9f9
   15074:	f2c2 0204 	movt	r2, #8196	; 0x2004
   15078:	7812      	ldrb	r2, [r2, #0]
   1507a:	b2d2      	uxtb	r2, r2
   1507c:	4611      	mov	r1, r2
   1507e:	f64c 12fc 	movw	r2, #51708	; 0xc9fc
   15082:	f2c2 0204 	movt	r2, #8196	; 0x2004
   15086:	5c52      	ldrb	r2, [r2, r1]
   15088:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   1508a:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   1508e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15092:	781b      	ldrb	r3, [r3, #0]
   15094:	b2db      	uxtb	r3, r3
   15096:	3301      	adds	r3, #1
   15098:	b2da      	uxtb	r2, r3
   1509a:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   1509e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150a2:	701a      	strb	r2, [r3, #0]
  }
}
   150a4:	46bd      	mov	sp, r7
   150a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   150aa:	4770      	bx	lr

000150ac <uart0_init>:

void uart0_init( void ) {
   150ac:	b480      	push	{r7}
   150ae:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   150b0:	f242 0390 	movw	r3, #8336	; 0x2090
   150b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150b8:	2200      	movs	r2, #0
   150ba:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   150bc:	f242 0309 	movw	r3, #8201	; 0x2009
   150c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150c4:	2219      	movs	r2, #25
   150c6:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   150c8:	f242 030b 	movw	r3, #8203	; 0x200b
   150cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150d0:	2200      	movs	r2, #0
   150d2:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   150d4:	f242 030a 	movw	r3, #8202	; 0x200a
   150d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150dc:	2218      	movs	r2, #24
   150de:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   150e0:	f242 0395 	movw	r3, #8341	; 0x2095
   150e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150e8:	2206      	movs	r2, #6
   150ea:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   150ec:	f242 030a 	movw	r3, #8202	; 0x200a
   150f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150f4:	f242 020a 	movw	r2, #8202	; 0x200a
   150f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   150fc:	7812      	ldrb	r2, [r2, #0]
   150fe:	b2d2      	uxtb	r2, r2
   15100:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15104:	b2d2      	uxtb	r2, r2
   15106:	701a      	strb	r2, [r3, #0]
}
   15108:	46bd      	mov	sp, r7
   1510a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1510e:	4770      	bx	lr

00015110 <uart1_init>:

void uart1_init( void ) {
   15110:	b480      	push	{r7}
   15112:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   15114:	f242 0398 	movw	r3, #8344	; 0x2098
   15118:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1511c:	2200      	movs	r2, #0
   1511e:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   15120:	f242 0399 	movw	r3, #8345	; 0x2099
   15124:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15128:	2219      	movs	r2, #25
   1512a:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   1512c:	f242 039b 	movw	r3, #8347	; 0x209b
   15130:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15134:	2200      	movs	r2, #0
   15136:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   15138:	f242 039a 	movw	r3, #8346	; 0x209a
   1513c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15140:	2218      	movs	r2, #24
   15142:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   15144:	f242 039d 	movw	r3, #8349	; 0x209d
   15148:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1514c:	2206      	movs	r2, #6
   1514e:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   15150:	f242 039a 	movw	r3, #8346	; 0x209a
   15154:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15158:	f242 029a 	movw	r2, #8346	; 0x209a
   1515c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15160:	7812      	ldrb	r2, [r2, #0]
   15162:	b2d2      	uxtb	r2, r2
   15164:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15168:	b2d2      	uxtb	r2, r2
   1516a:	701a      	strb	r2, [r3, #0]
}
   1516c:	46bd      	mov	sp, r7
   1516e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15172:	4770      	bx	lr
   15174:	0000      	movs	r0, r0
	...

00015178 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   15178:	b480      	push	{r7}
   1517a:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   1517c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   15180:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15184:	f04f 0200 	mov.w	r2, #0
   15188:	601a      	str	r2, [r3, #0]
   1518a:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1518e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15192:	f04f 0200 	mov.w	r2, #0
   15196:	601a      	str	r2, [r3, #0]
   15198:	f64c 3304 	movw	r3, #51972	; 0xcb04
   1519c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151a0:	f04f 0200 	mov.w	r2, #0
   151a4:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   151a6:	f64c 3308 	movw	r3, #51976	; 0xcb08
   151aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151ae:	f04f 0200 	mov.w	r2, #0
   151b2:	601a      	str	r2, [r3, #0]
   151b4:	f64c 330c 	movw	r3, #51980	; 0xcb0c
   151b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151bc:	f04f 0200 	mov.w	r2, #0
   151c0:	601a      	str	r2, [r3, #0]
   151c2:	f64c 3310 	movw	r3, #51984	; 0xcb10
   151c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151ca:	f04f 0200 	mov.w	r2, #0
   151ce:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   151d0:	f64c 3334 	movw	r3, #52020	; 0xcb34
   151d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151d8:	f04f 0200 	mov.w	r2, #0
   151dc:	601a      	str	r2, [r3, #0]
   151de:	f64c 3338 	movw	r3, #52024	; 0xcb38
   151e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151e6:	f04f 0200 	mov.w	r2, #0
   151ea:	601a      	str	r2, [r3, #0]
   151ec:	f64c 331c 	movw	r3, #51996	; 0xcb1c
   151f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151f4:	f04f 0200 	mov.w	r2, #0
   151f8:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   151fa:	f64c 3320 	movw	r3, #52000	; 0xcb20
   151fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15202:	f04f 0200 	mov.w	r2, #0
   15206:	601a      	str	r2, [r3, #0]
   15208:	f64c 3324 	movw	r3, #52004	; 0xcb24
   1520c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15210:	f04f 0200 	mov.w	r2, #0
   15214:	601a      	str	r2, [r3, #0]
   15216:	f64c 3328 	movw	r3, #52008	; 0xcb28
   1521a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1521e:	f04f 0200 	mov.w	r2, #0
   15222:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   15224:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   15228:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1522c:	2200      	movs	r2, #0
   1522e:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   15230:	f240 5348 	movw	r3, #1352	; 0x548
   15234:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15238:	681a      	ldr	r2, [r3, #0]
   1523a:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   1523e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15242:	601a      	str	r2, [r3, #0]
}
   15244:	46bd      	mov	sp, r7
   15246:	f85d 7b04 	ldr.w	r7, [sp], #4
   1524a:	4770      	bx	lr

0001524c <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   1524c:	b580      	push	{r7, lr}
   1524e:	b082      	sub	sp, #8
   15250:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   15252:	f240 533c 	movw	r3, #1340	; 0x53c
   15256:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1525a:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   1525c:	2b01      	cmp	r3, #1
   1525e:	d105      	bne.n	1526c <estimator_update_state_infrared+0x20>
   15260:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   15264:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15268:	681b      	ldr	r3, [r3, #0]
   1526a:	e004      	b.n	15276 <estimator_update_state_infrared+0x2a>
   1526c:	f240 5348 	movw	r3, #1352	; 0x548
   15270:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15274:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   15276:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   15278:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   1527c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15280:	881b      	ldrh	r3, [r3, #0]
   15282:	b21b      	sxth	r3, r3
   15284:	4618      	mov	r0, r3
   15286:	f003 f8dd 	bl	18444 <__aeabi_i2f>
   1528a:	4603      	mov	r3, r0
   1528c:	4618      	mov	r0, r3
   1528e:	6879      	ldr	r1, [r7, #4]
   15290:	f003 f92c 	bl	184ec <__aeabi_fmul>
   15294:	4603      	mov	r3, r0
   15296:	461a      	mov	r2, r3
   15298:	f64c 3308 	movw	r3, #51976	; 0xcb08
   1529c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152a0:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   152a2:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
   152a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152aa:	881b      	ldrh	r3, [r3, #0]
   152ac:	b21b      	sxth	r3, r3
   152ae:	4618      	mov	r0, r3
   152b0:	f003 f8c8 	bl	18444 <__aeabi_i2f>
   152b4:	4603      	mov	r3, r0
   152b6:	4618      	mov	r0, r3
   152b8:	6879      	ldr	r1, [r7, #4]
   152ba:	f003 f917 	bl	184ec <__aeabi_fmul>
   152be:	4603      	mov	r3, r0
   152c0:	461a      	mov	r2, r3
   152c2:	f64c 3310 	movw	r3, #51984	; 0xcb10
   152c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152ca:	601a      	str	r2, [r3, #0]
}
   152cc:	3708      	adds	r7, #8
   152ce:	46bd      	mov	sp, r7
   152d0:	bd80      	pop	{r7, pc}
   152d2:	bf00      	nop

000152d4 <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   152d4:	b5b0      	push	{r4, r5, r7, lr}
   152d6:	b084      	sub	sp, #16
   152d8:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   152da:	f64c 3348 	movw	r3, #52040	; 0xcb48
   152de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152e2:	781b      	ldrb	r3, [r3, #0]
   152e4:	2b00      	cmp	r3, #0
   152e6:	f000 81e8 	beq.w	156ba <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   152ea:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   152ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152f2:	681a      	ldr	r2, [r3, #0]
   152f4:	f64c 334c 	movw	r3, #52044	; 0xcb4c
   152f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152fc:	681b      	ldr	r3, [r3, #0]
   152fe:	4610      	mov	r0, r2
   15300:	4619      	mov	r1, r3
   15302:	f002 ffe9 	bl	182d8 <__aeabi_fsub>
   15306:	4603      	mov	r3, r0
   15308:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   1530a:	68b8      	ldr	r0, [r7, #8]
   1530c:	f002 fc5a 	bl	17bc4 <__aeabi_f2d>
   15310:	4602      	mov	r2, r0
   15312:	460b      	mov	r3, r1
   15314:	4610      	mov	r0, r2
   15316:	4619      	mov	r1, r3
   15318:	a385      	add	r3, pc, #532	; (adr r3, 15530 <estimator_update_ir_estim+0x25c>)
   1531a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1531e:	f002 ff35 	bl	1818c <__aeabi_dcmpgt>
   15322:	4603      	mov	r3, r0
   15324:	2b00      	cmp	r3, #0
   15326:	d100      	bne.n	1532a <estimator_update_ir_estim+0x56>
   15328:	e219      	b.n	1575e <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   1532a:	f64c 3338 	movw	r3, #52024	; 0xcb38
   1532e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15332:	681a      	ldr	r2, [r3, #0]
   15334:	f64c 3350 	movw	r3, #52048	; 0xcb50
   15338:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1533c:	681b      	ldr	r3, [r3, #0]
   1533e:	4610      	mov	r0, r2
   15340:	4619      	mov	r1, r3
   15342:	f002 ffc9 	bl	182d8 <__aeabi_fsub>
   15346:	4603      	mov	r3, r0
   15348:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   1534a:	e013      	b.n	15374 <estimator_update_ir_estim+0xa0>
   1534c:	68f8      	ldr	r0, [r7, #12]
   1534e:	f002 fc39 	bl	17bc4 <__aeabi_f2d>
   15352:	4602      	mov	r2, r0
   15354:	460b      	mov	r3, r1
   15356:	4610      	mov	r0, r2
   15358:	4619      	mov	r1, r3
   1535a:	a377      	add	r3, pc, #476	; (adr r3, 15538 <estimator_update_ir_estim+0x264>)
   1535c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15360:	f002 fad0 	bl	17904 <__aeabi_dsub>
   15364:	4602      	mov	r2, r0
   15366:	460b      	mov	r3, r1
   15368:	4610      	mov	r0, r2
   1536a:	4619      	mov	r1, r3
   1536c:	f002 ff60 	bl	18230 <__aeabi_d2f>
   15370:	4603      	mov	r3, r0
   15372:	60fb      	str	r3, [r7, #12]
   15374:	68f8      	ldr	r0, [r7, #12]
   15376:	f002 fc25 	bl	17bc4 <__aeabi_f2d>
   1537a:	4602      	mov	r2, r0
   1537c:	460b      	mov	r3, r1
   1537e:	4610      	mov	r0, r2
   15380:	4619      	mov	r1, r3
   15382:	a36f      	add	r3, pc, #444	; (adr r3, 15540 <estimator_update_ir_estim+0x26c>)
   15384:	e9d3 2300 	ldrd	r2, r3, [r3]
   15388:	f002 ff00 	bl	1818c <__aeabi_dcmpgt>
   1538c:	4603      	mov	r3, r0
   1538e:	2b00      	cmp	r3, #0
   15390:	d1dc      	bne.n	1534c <estimator_update_ir_estim+0x78>
   15392:	e013      	b.n	153bc <estimator_update_ir_estim+0xe8>
   15394:	68f8      	ldr	r0, [r7, #12]
   15396:	f002 fc15 	bl	17bc4 <__aeabi_f2d>
   1539a:	4602      	mov	r2, r0
   1539c:	460b      	mov	r3, r1
   1539e:	4610      	mov	r0, r2
   153a0:	4619      	mov	r1, r3
   153a2:	a365      	add	r3, pc, #404	; (adr r3, 15538 <estimator_update_ir_estim+0x264>)
   153a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   153a8:	f002 faae 	bl	17908 <__adddf3>
   153ac:	4602      	mov	r2, r0
   153ae:	460b      	mov	r3, r1
   153b0:	4610      	mov	r0, r2
   153b2:	4619      	mov	r1, r3
   153b4:	f002 ff3c 	bl	18230 <__aeabi_d2f>
   153b8:	4603      	mov	r3, r0
   153ba:	60fb      	str	r3, [r7, #12]
   153bc:	68f8      	ldr	r0, [r7, #12]
   153be:	f002 fc01 	bl	17bc4 <__aeabi_f2d>
   153c2:	4602      	mov	r2, r0
   153c4:	460b      	mov	r3, r1
   153c6:	4610      	mov	r0, r2
   153c8:	4619      	mov	r1, r3
   153ca:	a35f      	add	r3, pc, #380	; (adr r3, 15548 <estimator_update_ir_estim+0x274>)
   153cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   153d0:	f002 febe 	bl	18150 <__aeabi_dcmplt>
   153d4:	4603      	mov	r3, r0
   153d6:	2b00      	cmp	r3, #0
   153d8:	d1dc      	bne.n	15394 <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   153da:	68f8      	ldr	r0, [r7, #12]
   153dc:	68b9      	ldr	r1, [r7, #8]
   153de:	f003 f939 	bl	18654 <__aeabi_fdiv>
   153e2:	4603      	mov	r3, r0
   153e4:	4618      	mov	r0, r3
   153e6:	f002 fbed 	bl	17bc4 <__aeabi_f2d>
   153ea:	4602      	mov	r2, r0
   153ec:	460b      	mov	r3, r1
   153ee:	4610      	mov	r0, r2
   153f0:	4619      	mov	r1, r3
   153f2:	f04f 0200 	mov.w	r2, #0
   153f6:	f04f 0300 	mov.w	r3, #0
   153fa:	f2c4 0324 	movt	r3, #16420	; 0x4024
   153fe:	f002 fc35 	bl	17c6c <__aeabi_dmul>
   15402:	4602      	mov	r2, r0
   15404:	460b      	mov	r3, r1
   15406:	4610      	mov	r0, r2
   15408:	4619      	mov	r1, r3
   1540a:	a351      	add	r3, pc, #324	; (adr r3, 15550 <estimator_update_ir_estim+0x27c>)
   1540c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15410:	f002 fd56 	bl	17ec0 <__aeabi_ddiv>
   15414:	4602      	mov	r2, r0
   15416:	460b      	mov	r3, r1
   15418:	4610      	mov	r0, r2
   1541a:	4619      	mov	r1, r3
   1541c:	f002 ff08 	bl	18230 <__aeabi_d2f>
   15420:	4603      	mov	r3, r0
   15422:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   15424:	e013      	b.n	1544e <estimator_update_ir_estim+0x17a>
   15426:	68f8      	ldr	r0, [r7, #12]
   15428:	f002 fbcc 	bl	17bc4 <__aeabi_f2d>
   1542c:	4602      	mov	r2, r0
   1542e:	460b      	mov	r3, r1
   15430:	4610      	mov	r0, r2
   15432:	4619      	mov	r1, r3
   15434:	a340      	add	r3, pc, #256	; (adr r3, 15538 <estimator_update_ir_estim+0x264>)
   15436:	e9d3 2300 	ldrd	r2, r3, [r3]
   1543a:	f002 fa63 	bl	17904 <__aeabi_dsub>
   1543e:	4602      	mov	r2, r0
   15440:	460b      	mov	r3, r1
   15442:	4610      	mov	r0, r2
   15444:	4619      	mov	r1, r3
   15446:	f002 fef3 	bl	18230 <__aeabi_d2f>
   1544a:	4603      	mov	r3, r0
   1544c:	60fb      	str	r3, [r7, #12]
   1544e:	68f8      	ldr	r0, [r7, #12]
   15450:	f002 fbb8 	bl	17bc4 <__aeabi_f2d>
   15454:	4602      	mov	r2, r0
   15456:	460b      	mov	r3, r1
   15458:	4610      	mov	r0, r2
   1545a:	4619      	mov	r1, r3
   1545c:	a338      	add	r3, pc, #224	; (adr r3, 15540 <estimator_update_ir_estim+0x26c>)
   1545e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15462:	f002 fe93 	bl	1818c <__aeabi_dcmpgt>
   15466:	4603      	mov	r3, r0
   15468:	2b00      	cmp	r3, #0
   1546a:	d1dc      	bne.n	15426 <estimator_update_ir_estim+0x152>
   1546c:	e013      	b.n	15496 <estimator_update_ir_estim+0x1c2>
   1546e:	68f8      	ldr	r0, [r7, #12]
   15470:	f002 fba8 	bl	17bc4 <__aeabi_f2d>
   15474:	4602      	mov	r2, r0
   15476:	460b      	mov	r3, r1
   15478:	4610      	mov	r0, r2
   1547a:	4619      	mov	r1, r3
   1547c:	a32e      	add	r3, pc, #184	; (adr r3, 15538 <estimator_update_ir_estim+0x264>)
   1547e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15482:	f002 fa41 	bl	17908 <__adddf3>
   15486:	4602      	mov	r2, r0
   15488:	460b      	mov	r3, r1
   1548a:	4610      	mov	r0, r2
   1548c:	4619      	mov	r1, r3
   1548e:	f002 fecf 	bl	18230 <__aeabi_d2f>
   15492:	4603      	mov	r3, r0
   15494:	60fb      	str	r3, [r7, #12]
   15496:	68f8      	ldr	r0, [r7, #12]
   15498:	f002 fb94 	bl	17bc4 <__aeabi_f2d>
   1549c:	4602      	mov	r2, r0
   1549e:	460b      	mov	r3, r1
   154a0:	4610      	mov	r0, r2
   154a2:	4619      	mov	r1, r3
   154a4:	a328      	add	r3, pc, #160	; (adr r3, 15548 <estimator_update_ir_estim+0x274>)
   154a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   154aa:	f002 fe51 	bl	18150 <__aeabi_dcmplt>
   154ae:	4603      	mov	r3, r0
   154b0:	2b00      	cmp	r3, #0
   154b2:	d1dc      	bne.n	1546e <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   154b4:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   154b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   154bc:	881b      	ldrh	r3, [r3, #0]
   154be:	b21b      	sxth	r3, r3
   154c0:	4618      	mov	r0, r3
   154c2:	f002 ffbf 	bl	18444 <__aeabi_i2f>
   154c6:	4602      	mov	r2, r0
   154c8:	f64c 3340 	movw	r3, #52032	; 0xcb40
   154cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   154d0:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   154d2:	f64c 3344 	movw	r3, #52036	; 0xcb44
   154d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   154da:	68fa      	ldr	r2, [r7, #12]
   154dc:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   154de:	68f8      	ldr	r0, [r7, #12]
   154e0:	f04f 0100 	mov.w	r1, #0
   154e4:	f003 f9a0 	bl	18828 <__aeabi_fcmplt>
   154e8:	4603      	mov	r3, r0
   154ea:	2b00      	cmp	r3, #0
   154ec:	d003      	beq.n	154f6 <estimator_update_ir_estim+0x222>
   154ee:	68fb      	ldr	r3, [r7, #12]
   154f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   154f4:	e000      	b.n	154f8 <estimator_update_ir_estim+0x224>
   154f6:	68fb      	ldr	r3, [r7, #12]
   154f8:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   154fa:	6878      	ldr	r0, [r7, #4]
   154fc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   15500:	f003 f992 	bl	18828 <__aeabi_fcmplt>
   15504:	4603      	mov	r3, r0
   15506:	2b00      	cmp	r3, #0
   15508:	d100      	bne.n	1550c <estimator_update_ir_estim+0x238>
   1550a:	e128      	b.n	1575e <estimator_update_ir_estim+0x48a>
   1550c:	6878      	ldr	r0, [r7, #4]
   1550e:	f002 fb59 	bl	17bc4 <__aeabi_f2d>
   15512:	4602      	mov	r2, r0
   15514:	460b      	mov	r3, r1
   15516:	4610      	mov	r0, r2
   15518:	4619      	mov	r1, r3
   1551a:	a30f      	add	r3, pc, #60	; (adr r3, 15558 <estimator_update_ir_estim+0x284>)
   1551c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15520:	f002 fe34 	bl	1818c <__aeabi_dcmpgt>
   15524:	4603      	mov	r3, r0
   15526:	2b00      	cmp	r3, #0
   15528:	d11a      	bne.n	15560 <estimator_update_ir_estim+0x28c>
   1552a:	e118      	b.n	1575e <estimator_update_ir_estim+0x48a>
   1552c:	f3af 8000 	nop.w
   15530:	9999999a 	.word	0x9999999a
   15534:	3fb99999 	.word	0x3fb99999
   15538:	54442d18 	.word	0x54442d18
   1553c:	401921fb 	.word	0x401921fb
   15540:	54442d18 	.word	0x54442d18
   15544:	400921fb 	.word	0x400921fb
   15548:	54442d18 	.word	0x54442d18
   1554c:	c00921fb 	.word	0xc00921fb
   15550:	51eb851f 	.word	0x51eb851f
   15554:	40239eb8 	.word	0x40239eb8
   15558:	9999999a 	.word	0x9999999a
   1555c:	3fa99999 	.word	0x3fa99999
   15560:	f240 5340 	movw	r3, #1344	; 0x540
   15564:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15568:	881b      	ldrh	r3, [r3, #0]
   1556a:	b21b      	sxth	r3, r3
   1556c:	425b      	negs	r3, r3
   1556e:	0fda      	lsrs	r2, r3, #31
   15570:	4413      	add	r3, r2
   15572:	105b      	asrs	r3, r3, #1
   15574:	461a      	mov	r2, r3
   15576:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   1557a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1557e:	881b      	ldrh	r3, [r3, #0]
   15580:	b21b      	sxth	r3, r3
   15582:	429a      	cmp	r2, r3
   15584:	f280 8098 	bge.w	156b8 <estimator_update_ir_estim+0x3e4>
   15588:	f240 5340 	movw	r3, #1344	; 0x540
   1558c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15590:	881b      	ldrh	r3, [r3, #0]
   15592:	b21b      	sxth	r3, r3
   15594:	0fda      	lsrs	r2, r3, #31
   15596:	4413      	add	r3, r2
   15598:	105b      	asrs	r3, r3, #1
   1559a:	b29a      	uxth	r2, r3
   1559c:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   155a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155a4:	881b      	ldrh	r3, [r3, #0]
   155a6:	b212      	sxth	r2, r2
   155a8:	b21b      	sxth	r3, r3
   155aa:	429a      	cmp	r2, r3
   155ac:	f340 8084 	ble.w	156b8 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   155b0:	f64c 3344 	movw	r3, #52036	; 0xcb44
   155b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155b8:	681a      	ldr	r2, [r3, #0]
   155ba:	f64c 3340 	movw	r3, #52032	; 0xcb40
   155be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155c2:	681b      	ldr	r3, [r3, #0]
   155c4:	4610      	mov	r0, r2
   155c6:	4619      	mov	r1, r3
   155c8:	f002 ff90 	bl	184ec <__aeabi_fmul>
   155cc:	4603      	mov	r3, r0
   155ce:	4618      	mov	r0, r3
   155d0:	f002 faf8 	bl	17bc4 <__aeabi_f2d>
   155d4:	4604      	mov	r4, r0
   155d6:	460d      	mov	r5, r1
   155d8:	f64c 3354 	movw	r3, #52052	; 0xcb54
   155dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155e0:	681b      	ldr	r3, [r3, #0]
   155e2:	4618      	mov	r0, r3
   155e4:	f002 faee 	bl	17bc4 <__aeabi_f2d>
   155e8:	4602      	mov	r2, r0
   155ea:	460b      	mov	r3, r1
   155ec:	4610      	mov	r0, r2
   155ee:	4619      	mov	r1, r3
   155f0:	a367      	add	r3, pc, #412	; (adr r3, 15790 <estimator_update_ir_estim+0x4bc>)
   155f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   155f6:	f002 fb39 	bl	17c6c <__aeabi_dmul>
   155fa:	4602      	mov	r2, r0
   155fc:	460b      	mov	r3, r1
   155fe:	4620      	mov	r0, r4
   15600:	4629      	mov	r1, r5
   15602:	f002 f981 	bl	17908 <__adddf3>
   15606:	4602      	mov	r2, r0
   15608:	460b      	mov	r3, r1
   1560a:	4610      	mov	r0, r2
   1560c:	4619      	mov	r1, r3
   1560e:	f002 fe0f 	bl	18230 <__aeabi_d2f>
   15612:	4602      	mov	r2, r0
   15614:	f64c 3354 	movw	r3, #52052	; 0xcb54
   15618:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1561c:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   1561e:	f64c 3340 	movw	r3, #52032	; 0xcb40
   15622:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15626:	681a      	ldr	r2, [r3, #0]
   15628:	f64c 3340 	movw	r3, #52032	; 0xcb40
   1562c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15630:	681b      	ldr	r3, [r3, #0]
   15632:	4610      	mov	r0, r2
   15634:	4619      	mov	r1, r3
   15636:	f002 ff59 	bl	184ec <__aeabi_fmul>
   1563a:	4603      	mov	r3, r0
   1563c:	4618      	mov	r0, r3
   1563e:	f002 fac1 	bl	17bc4 <__aeabi_f2d>
   15642:	4604      	mov	r4, r0
   15644:	460d      	mov	r5, r1
   15646:	f64c 3358 	movw	r3, #52056	; 0xcb58
   1564a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1564e:	681b      	ldr	r3, [r3, #0]
   15650:	4618      	mov	r0, r3
   15652:	f002 fab7 	bl	17bc4 <__aeabi_f2d>
   15656:	4602      	mov	r2, r0
   15658:	460b      	mov	r3, r1
   1565a:	4610      	mov	r0, r2
   1565c:	4619      	mov	r1, r3
   1565e:	a34c      	add	r3, pc, #304	; (adr r3, 15790 <estimator_update_ir_estim+0x4bc>)
   15660:	e9d3 2300 	ldrd	r2, r3, [r3]
   15664:	f002 fb02 	bl	17c6c <__aeabi_dmul>
   15668:	4602      	mov	r2, r0
   1566a:	460b      	mov	r3, r1
   1566c:	4620      	mov	r0, r4
   1566e:	4629      	mov	r1, r5
   15670:	f002 f94a 	bl	17908 <__adddf3>
   15674:	4602      	mov	r2, r0
   15676:	460b      	mov	r3, r1
   15678:	4610      	mov	r0, r2
   1567a:	4619      	mov	r1, r3
   1567c:	f002 fdd8 	bl	18230 <__aeabi_d2f>
   15680:	4602      	mov	r2, r0
   15682:	f64c 3358 	movw	r3, #52056	; 0xcb58
   15686:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1568a:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   1568c:	f64c 3354 	movw	r3, #52052	; 0xcb54
   15690:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15694:	681a      	ldr	r2, [r3, #0]
   15696:	f64c 3358 	movw	r3, #52056	; 0xcb58
   1569a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1569e:	681b      	ldr	r3, [r3, #0]
   156a0:	4610      	mov	r0, r2
   156a2:	4619      	mov	r1, r3
   156a4:	f002 ffd6 	bl	18654 <__aeabi_fdiv>
   156a8:	4603      	mov	r3, r0
   156aa:	461a      	mov	r2, r3
   156ac:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   156b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156b4:	601a      	str	r2, [r3, #0]
   156b6:	e052      	b.n	1575e <estimator_update_ir_estim+0x48a>
   156b8:	e051      	b.n	1575e <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   156ba:	f64c 3348 	movw	r3, #52040	; 0xcb48
   156be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156c2:	2201      	movs	r2, #1
   156c4:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   156c6:	f240 5340 	movw	r3, #1344	; 0x540
   156ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156ce:	881b      	ldrh	r3, [r3, #0]
   156d0:	b21b      	sxth	r3, r3
   156d2:	4618      	mov	r0, r3
   156d4:	f002 feb6 	bl	18444 <__aeabi_i2f>
   156d8:	4603      	mov	r3, r0
   156da:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   156dc:	6838      	ldr	r0, [r7, #0]
   156de:	6839      	ldr	r1, [r7, #0]
   156e0:	f002 ff04 	bl	184ec <__aeabi_fmul>
   156e4:	4603      	mov	r3, r0
   156e6:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   156e8:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   156ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156f0:	681b      	ldr	r3, [r3, #0]
   156f2:	4618      	mov	r0, r3
   156f4:	f002 fa66 	bl	17bc4 <__aeabi_f2d>
   156f8:	4602      	mov	r2, r0
   156fa:	460b      	mov	r3, r1
   156fc:	4610      	mov	r0, r2
   156fe:	4619      	mov	r1, r3
   15700:	f04f 0200 	mov.w	r2, #0
   15704:	f04f 0300 	mov.w	r3, #0
   15708:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1570c:	f002 faae 	bl	17c6c <__aeabi_dmul>
   15710:	4602      	mov	r2, r0
   15712:	460b      	mov	r3, r1
   15714:	4614      	mov	r4, r2
   15716:	461d      	mov	r5, r3
   15718:	6838      	ldr	r0, [r7, #0]
   1571a:	f002 fa53 	bl	17bc4 <__aeabi_f2d>
   1571e:	4602      	mov	r2, r0
   15720:	460b      	mov	r3, r1
   15722:	4620      	mov	r0, r4
   15724:	4629      	mov	r1, r5
   15726:	f002 faa1 	bl	17c6c <__aeabi_dmul>
   1572a:	4602      	mov	r2, r0
   1572c:	460b      	mov	r3, r1
   1572e:	4610      	mov	r0, r2
   15730:	4619      	mov	r1, r3
   15732:	f002 fd7d 	bl	18230 <__aeabi_d2f>
   15736:	4602      	mov	r2, r0
   15738:	f64c 3354 	movw	r3, #52052	; 0xcb54
   1573c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15740:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   15742:	6838      	ldr	r0, [r7, #0]
   15744:	f04f 0100 	mov.w	r1, #0
   15748:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1574c:	f002 fece 	bl	184ec <__aeabi_fmul>
   15750:	4603      	mov	r3, r0
   15752:	461a      	mov	r2, r3
   15754:	f64c 3358 	movw	r3, #52056	; 0xcb58
   15758:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1575c:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   1575e:	f64c 3338 	movw	r3, #52024	; 0xcb38
   15762:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15766:	681a      	ldr	r2, [r3, #0]
   15768:	f64c 3350 	movw	r3, #52048	; 0xcb50
   1576c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15770:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   15772:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   15776:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1577a:	681a      	ldr	r2, [r3, #0]
   1577c:	f64c 334c 	movw	r3, #52044	; 0xcb4c
   15780:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15784:	601a      	str	r2, [r3, #0]
}
   15786:	3710      	adds	r7, #16
   15788:	46bd      	mov	sp, r7
   1578a:	bdb0      	pop	{r4, r5, r7, pc}
   1578c:	f3af 8000 	nop.w
   15790:	d916872b 	.word	0xd916872b
   15794:	3feff7ce 	.word	0x3feff7ce

00015798 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   15798:	b580      	push	{r7, lr}
   1579a:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   1579c:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
   157a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157a4:	781b      	ldrb	r3, [r3, #0]
   157a6:	f003 0320 	and.w	r3, r3, #32
   157aa:	2b00      	cmp	r3, #0
   157ac:	d044      	beq.n	15838 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   157ae:	f24c 63d4 	movw	r3, #50900	; 0xc6d4
   157b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157b6:	681a      	ldr	r2, [r3, #0]
   157b8:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   157bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157c0:	601a      	str	r2, [r3, #0]
   157c2:	f24c 63d8 	movw	r3, #50904	; 0xc6d8
   157c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157ca:	681a      	ldr	r2, [r3, #0]
   157cc:	f64c 3300 	movw	r3, #51968	; 0xcb00
   157d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157d4:	601a      	str	r2, [r3, #0]
   157d6:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   157da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157de:	681a      	ldr	r2, [r3, #0]
   157e0:	f64c 3304 	movw	r3, #51972	; 0xcb04
   157e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157e8:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   157ea:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   157ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157f2:	681a      	ldr	r2, [r3, #0]
   157f4:	f64c 3334 	movw	r3, #52020	; 0xcb34
   157f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157fc:	601a      	str	r2, [r3, #0]
   157fe:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
   15802:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15806:	681a      	ldr	r2, [r3, #0]
   15808:	f64c 3338 	movw	r3, #52024	; 0xcb38
   1580c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15810:	601a      	str	r2, [r3, #0]
   15812:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   15816:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1581a:	681a      	ldr	r2, [r3, #0]
   1581c:	f64c 331c 	movw	r3, #51996	; 0xcb1c
   15820:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15824:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   15826:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   1582a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1582e:	881b      	ldrh	r3, [r3, #0]
   15830:	2b00      	cmp	r3, #0
   15832:	d001      	beq.n	15838 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   15834:	f7ff fd4e 	bl	152d4 <estimator_update_ir_estim>
  }
}
   15838:	bd80      	pop	{r7, pc}
   1583a:	bf00      	nop

0001583c <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   1583c:	b480      	push	{r7}
   1583e:	af00      	add	r7, sp, #0
  
}
   15840:	46bd      	mov	sp, r7
   15842:	f85d 7b04 	ldr.w	r7, [sp], #4
   15846:	4770      	bx	lr

00015848 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   15848:	b5b0      	push	{r4, r5, r7, lr}
   1584a:	b082      	sub	sp, #8
   1584c:	af00      	add	r7, sp, #0
   1584e:	4603      	mov	r3, r0
   15850:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   15852:	f24c 532c 	movw	r3, #50476	; 0xc52c
   15856:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1585a:	781b      	ldrb	r3, [r3, #0]
   1585c:	2b01      	cmp	r3, #1
   1585e:	f040 80e0 	bne.w	15a22 <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15862:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   15866:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1586a:	781b      	ldrb	r3, [r3, #0]
   1586c:	2b02      	cmp	r3, #2
   1586e:	d168      	bne.n	15942 <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   15870:	79fb      	ldrb	r3, [r7, #7]
   15872:	2b00      	cmp	r3, #0
   15874:	d013      	beq.n	1589e <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   15876:	f240 5344 	movw	r3, #1348	; 0x544
   1587a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1587e:	881a      	ldrh	r2, [r3, #0]
   15880:	f64c 3362 	movw	r3, #52066	; 0xcb62
   15884:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15888:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   1588a:	f24c 6350 	movw	r3, #50768	; 0xc650
   1588e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15892:	895a      	ldrh	r2, [r3, #10]
   15894:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   15898:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1589c:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   1589e:	f24c 6350 	movw	r3, #50768	; 0xc650
   158a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158a6:	895b      	ldrh	r3, [r3, #10]
   158a8:	b21a      	sxth	r2, r3
   158aa:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   158ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158b2:	881b      	ldrh	r3, [r3, #0]
   158b4:	b21b      	sxth	r3, r3
   158b6:	1ad3      	subs	r3, r2, r3
   158b8:	4618      	mov	r0, r3
   158ba:	f002 fdc3 	bl	18444 <__aeabi_i2f>
   158be:	4603      	mov	r3, r0
   158c0:	4618      	mov	r0, r3
   158c2:	f002 f97f 	bl	17bc4 <__aeabi_f2d>
   158c6:	4602      	mov	r2, r0
   158c8:	460b      	mov	r3, r1
   158ca:	4610      	mov	r0, r2
   158cc:	4619      	mov	r1, r3
   158ce:	f04f 0200 	mov.w	r2, #0
   158d2:	f04f 0300 	mov.w	r3, #0
   158d6:	f2c4 034e 	movt	r3, #16462	; 0x404e
   158da:	f002 f9c7 	bl	17c6c <__aeabi_dmul>
   158de:	4602      	mov	r2, r0
   158e0:	460b      	mov	r3, r1
   158e2:	4610      	mov	r0, r2
   158e4:	4619      	mov	r1, r3
   158e6:	f04f 0200 	mov.w	r2, #0
   158ea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   158ee:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   158f2:	f002 fae5 	bl	17ec0 <__aeabi_ddiv>
   158f6:	4602      	mov	r2, r0
   158f8:	460b      	mov	r3, r1
   158fa:	4610      	mov	r0, r2
   158fc:	4619      	mov	r1, r3
   158fe:	f002 fc4f 	bl	181a0 <__aeabi_d2iz>
   15902:	4603      	mov	r3, r0
   15904:	b29b      	uxth	r3, r3
   15906:	b29a      	uxth	r2, r3
   15908:	f64c 3362 	movw	r3, #52066	; 0xcb62
   1590c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15910:	881b      	ldrh	r3, [r3, #0]
   15912:	b29b      	uxth	r3, r3
   15914:	4413      	add	r3, r2
   15916:	b29b      	uxth	r3, r3
   15918:	b29a      	uxth	r2, r3
   1591a:	f240 5344 	movw	r3, #1348	; 0x544
   1591e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15922:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   15924:	f240 5344 	movw	r3, #1348	; 0x544
   15928:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1592c:	881b      	ldrh	r3, [r3, #0]
   1592e:	b21b      	sxth	r3, r3
   15930:	4618      	mov	r0, r3
   15932:	f002 fd87 	bl	18444 <__aeabi_i2f>
   15936:	4602      	mov	r2, r0
   15938:	f24c 5338 	movw	r3, #50488	; 0xc538
   1593c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15940:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15942:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   15946:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1594a:	781b      	ldrb	r3, [r3, #0]
   1594c:	2b02      	cmp	r3, #2
   1594e:	d168      	bne.n	15a22 <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   15950:	79fb      	ldrb	r3, [r7, #7]
   15952:	2b00      	cmp	r3, #0
   15954:	d013      	beq.n	1597e <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   15956:	f240 5342 	movw	r3, #1346	; 0x542
   1595a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1595e:	881a      	ldrh	r2, [r3, #0]
   15960:	f64c 3364 	movw	r3, #52068	; 0xcb64
   15964:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15968:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   1596a:	f24c 6350 	movw	r3, #50768	; 0xc650
   1596e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15972:	899a      	ldrh	r2, [r3, #12]
   15974:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15978:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1597c:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   1597e:	f24c 6350 	movw	r3, #50768	; 0xc650
   15982:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15986:	899b      	ldrh	r3, [r3, #12]
   15988:	b21a      	sxth	r2, r3
   1598a:	f64c 3360 	movw	r3, #52064	; 0xcb60
   1598e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15992:	881b      	ldrh	r3, [r3, #0]
   15994:	b21b      	sxth	r3, r3
   15996:	1ad3      	subs	r3, r2, r3
   15998:	4618      	mov	r0, r3
   1599a:	f002 fd53 	bl	18444 <__aeabi_i2f>
   1599e:	4603      	mov	r3, r0
   159a0:	4618      	mov	r0, r3
   159a2:	f002 f90f 	bl	17bc4 <__aeabi_f2d>
   159a6:	4602      	mov	r2, r0
   159a8:	460b      	mov	r3, r1
   159aa:	4610      	mov	r0, r2
   159ac:	4619      	mov	r1, r3
   159ae:	f04f 0200 	mov.w	r2, #0
   159b2:	f04f 0300 	mov.w	r3, #0
   159b6:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   159ba:	f002 f957 	bl	17c6c <__aeabi_dmul>
   159be:	4602      	mov	r2, r0
   159c0:	460b      	mov	r3, r1
   159c2:	4610      	mov	r0, r2
   159c4:	4619      	mov	r1, r3
   159c6:	f04f 0200 	mov.w	r2, #0
   159ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   159ce:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   159d2:	f002 fa75 	bl	17ec0 <__aeabi_ddiv>
   159d6:	4602      	mov	r2, r0
   159d8:	460b      	mov	r3, r1
   159da:	4610      	mov	r0, r2
   159dc:	4619      	mov	r1, r3
   159de:	f002 fbdf 	bl	181a0 <__aeabi_d2iz>
   159e2:	4603      	mov	r3, r0
   159e4:	b29b      	uxth	r3, r3
   159e6:	b29a      	uxth	r2, r3
   159e8:	f64c 3364 	movw	r3, #52068	; 0xcb64
   159ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159f0:	881b      	ldrh	r3, [r3, #0]
   159f2:	b29b      	uxth	r3, r3
   159f4:	4413      	add	r3, r2
   159f6:	b29b      	uxth	r3, r3
   159f8:	b29a      	uxth	r2, r3
   159fa:	f240 5342 	movw	r3, #1346	; 0x542
   159fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a02:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   15a04:	f240 5342 	movw	r3, #1346	; 0x542
   15a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a0c:	881b      	ldrh	r3, [r3, #0]
   15a0e:	b21b      	sxth	r3, r3
   15a10:	4618      	mov	r0, r3
   15a12:	f002 fd17 	bl	18444 <__aeabi_i2f>
   15a16:	4602      	mov	r2, r0
   15a18:	f24c 533c 	movw	r3, #50492	; 0xc53c
   15a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a20:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   15a22:	f24c 532c 	movw	r3, #50476	; 0xc52c
   15a26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a2a:	781b      	ldrb	r3, [r3, #0]
   15a2c:	2b02      	cmp	r3, #2
   15a2e:	f040 80da 	bne.w	15be6 <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15a32:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   15a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a3a:	781b      	ldrb	r3, [r3, #0]
   15a3c:	2b02      	cmp	r3, #2
   15a3e:	d165      	bne.n	15b0c <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   15a40:	79fb      	ldrb	r3, [r7, #7]
   15a42:	2b00      	cmp	r3, #0
   15a44:	d013      	beq.n	15a6e <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   15a46:	f240 5358 	movw	r3, #1368	; 0x558
   15a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a4e:	681a      	ldr	r2, [r3, #0]
   15a50:	f64c 3368 	movw	r3, #52072	; 0xcb68
   15a54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a58:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15a5a:	f24c 6350 	movw	r3, #50768	; 0xc650
   15a5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a62:	895a      	ldrh	r2, [r3, #10]
   15a64:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   15a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a6c:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15a6e:	f64c 3368 	movw	r3, #52072	; 0xcb68
   15a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a76:	681b      	ldr	r3, [r3, #0]
   15a78:	4618      	mov	r0, r3
   15a7a:	f002 f8a3 	bl	17bc4 <__aeabi_f2d>
   15a7e:	4604      	mov	r4, r0
   15a80:	460d      	mov	r5, r1
   15a82:	f24c 6350 	movw	r3, #50768	; 0xc650
   15a86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a8a:	895b      	ldrh	r3, [r3, #10]
   15a8c:	b21a      	sxth	r2, r3
   15a8e:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   15a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a96:	881b      	ldrh	r3, [r3, #0]
   15a98:	b21b      	sxth	r3, r3
   15a9a:	1ad3      	subs	r3, r2, r3
   15a9c:	4618      	mov	r0, r3
   15a9e:	f002 fcd1 	bl	18444 <__aeabi_i2f>
   15aa2:	4603      	mov	r3, r0
   15aa4:	4618      	mov	r0, r3
   15aa6:	f002 f88d 	bl	17bc4 <__aeabi_f2d>
   15aaa:	4602      	mov	r2, r0
   15aac:	460b      	mov	r3, r1
   15aae:	4610      	mov	r0, r2
   15ab0:	4619      	mov	r1, r3
   15ab2:	a34f      	add	r3, pc, #316	; (adr r3, 15bf0 <inflight_calib+0x3a8>)
   15ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ab8:	f002 f8d8 	bl	17c6c <__aeabi_dmul>
   15abc:	4602      	mov	r2, r0
   15abe:	460b      	mov	r3, r1
   15ac0:	4610      	mov	r0, r2
   15ac2:	4619      	mov	r1, r3
   15ac4:	f04f 0200 	mov.w	r2, #0
   15ac8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15acc:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15ad0:	f002 f9f6 	bl	17ec0 <__aeabi_ddiv>
   15ad4:	4602      	mov	r2, r0
   15ad6:	460b      	mov	r3, r1
   15ad8:	4620      	mov	r0, r4
   15ada:	4629      	mov	r1, r5
   15adc:	f001 ff14 	bl	17908 <__adddf3>
   15ae0:	4602      	mov	r2, r0
   15ae2:	460b      	mov	r3, r1
   15ae4:	4610      	mov	r0, r2
   15ae6:	4619      	mov	r1, r3
   15ae8:	f002 fba2 	bl	18230 <__aeabi_d2f>
   15aec:	4602      	mov	r2, r0
   15aee:	f240 5358 	movw	r3, #1368	; 0x558
   15af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15af6:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   15af8:	f240 5358 	movw	r3, #1368	; 0x558
   15afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b00:	681a      	ldr	r2, [r3, #0]
   15b02:	f24c 5338 	movw	r3, #50488	; 0xc538
   15b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b0a:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15b0c:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   15b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b14:	781b      	ldrb	r3, [r3, #0]
   15b16:	2b02      	cmp	r3, #2
   15b18:	d165      	bne.n	15be6 <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   15b1a:	79fb      	ldrb	r3, [r7, #7]
   15b1c:	2b00      	cmp	r3, #0
   15b1e:	d013      	beq.n	15b48 <inflight_calib+0x300>
        max_roll_init = max_roll;
   15b20:	f240 535c 	movw	r3, #1372	; 0x55c
   15b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b28:	681a      	ldr	r2, [r3, #0]
   15b2a:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   15b2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b32:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15b34:	f24c 6350 	movw	r3, #50768	; 0xc650
   15b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b3c:	899a      	ldrh	r2, [r3, #12]
   15b3e:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b46:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15b48:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   15b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b50:	681b      	ldr	r3, [r3, #0]
   15b52:	4618      	mov	r0, r3
   15b54:	f002 f836 	bl	17bc4 <__aeabi_f2d>
   15b58:	4604      	mov	r4, r0
   15b5a:	460d      	mov	r5, r1
   15b5c:	f24c 6350 	movw	r3, #50768	; 0xc650
   15b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b64:	899b      	ldrh	r3, [r3, #12]
   15b66:	b21a      	sxth	r2, r3
   15b68:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b70:	881b      	ldrh	r3, [r3, #0]
   15b72:	b21b      	sxth	r3, r3
   15b74:	1ad3      	subs	r3, r2, r3
   15b76:	4618      	mov	r0, r3
   15b78:	f002 fc64 	bl	18444 <__aeabi_i2f>
   15b7c:	4603      	mov	r3, r0
   15b7e:	4618      	mov	r0, r3
   15b80:	f002 f820 	bl	17bc4 <__aeabi_f2d>
   15b84:	4602      	mov	r2, r0
   15b86:	460b      	mov	r3, r1
   15b88:	4610      	mov	r0, r2
   15b8a:	4619      	mov	r1, r3
   15b8c:	a31a      	add	r3, pc, #104	; (adr r3, 15bf8 <inflight_calib+0x3b0>)
   15b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b92:	f002 f86b 	bl	17c6c <__aeabi_dmul>
   15b96:	4602      	mov	r2, r0
   15b98:	460b      	mov	r3, r1
   15b9a:	4610      	mov	r0, r2
   15b9c:	4619      	mov	r1, r3
   15b9e:	f04f 0200 	mov.w	r2, #0
   15ba2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15ba6:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15baa:	f002 f989 	bl	17ec0 <__aeabi_ddiv>
   15bae:	4602      	mov	r2, r0
   15bb0:	460b      	mov	r3, r1
   15bb2:	4620      	mov	r0, r4
   15bb4:	4629      	mov	r1, r5
   15bb6:	f001 fea7 	bl	17908 <__adddf3>
   15bba:	4602      	mov	r2, r0
   15bbc:	460b      	mov	r3, r1
   15bbe:	4610      	mov	r0, r2
   15bc0:	4619      	mov	r1, r3
   15bc2:	f002 fb35 	bl	18230 <__aeabi_d2f>
   15bc6:	4602      	mov	r2, r0
   15bc8:	f240 535c 	movw	r3, #1372	; 0x55c
   15bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bd0:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   15bd2:	f240 535c 	movw	r3, #1372	; 0x55c
   15bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bda:	681a      	ldr	r2, [r3, #0]
   15bdc:	f24c 533c 	movw	r3, #50492	; 0xc53c
   15be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15be4:	601a      	str	r2, [r3, #0]
    }
  }
}
   15be6:	3708      	adds	r7, #8
   15be8:	46bd      	mov	sp, r7
   15bea:	bdb0      	pop	{r4, r5, r7, pc}
   15bec:	f3af 8000 	nop.w
   15bf0:	9999999a 	.word	0x9999999a
   15bf4:	3fb99999 	.word	0x3fb99999
   15bf8:	9999999a 	.word	0x9999999a
   15bfc:	bfc99999 	.word	0xbfc99999

00015c00 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   15c00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   15c04:	b08e      	sub	sp, #56	; 0x38
   15c06:	af00      	add	r7, sp, #0
   15c08:	e9c7 0102 	strd	r0, r1, [r7, #8]
   15c0c:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   15c10:	a357      	add	r3, pc, #348	; (adr r3, 15d70 <pp_atan2+0x170>)
   15c12:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c16:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   15c1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c1e:	f04f 0200 	mov.w	r2, #0
   15c22:	f04f 0300 	mov.w	r3, #0
   15c26:	f2c4 0308 	movt	r3, #16392	; 0x4008
   15c2a:	f002 f81f 	bl	17c6c <__aeabi_dmul>
   15c2e:	4602      	mov	r2, r0
   15c30:	460b      	mov	r3, r1
   15c32:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   15c36:	e9d7 0100 	ldrd	r0, r1, [r7]
   15c3a:	f04f 0200 	mov.w	r2, #0
   15c3e:	f04f 0300 	mov.w	r3, #0
   15c42:	f002 fa85 	bl	18150 <__aeabi_dcmplt>
   15c46:	4603      	mov	r3, r0
   15c48:	2b00      	cmp	r3, #0
   15c4a:	d009      	beq.n	15c60 <pp_atan2+0x60>
   15c4c:	a14a      	add	r1, pc, #296	; (adr r1, 15d78 <pp_atan2+0x178>)
   15c4e:	e9d1 0100 	ldrd	r0, r1, [r1]
   15c52:	e9d7 2300 	ldrd	r2, r3, [r7]
   15c56:	f001 fe55 	bl	17904 <__aeabi_dsub>
   15c5a:	4602      	mov	r2, r0
   15c5c:	460b      	mov	r3, r1
   15c5e:	e008      	b.n	15c72 <pp_atan2+0x72>
   15c60:	e9d7 0100 	ldrd	r0, r1, [r7]
   15c64:	a344      	add	r3, pc, #272	; (adr r3, 15d78 <pp_atan2+0x178>)
   15c66:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c6a:	f001 fe4d 	bl	17908 <__adddf3>
   15c6e:	4602      	mov	r2, r0
   15c70:	460b      	mov	r3, r1
   15c72:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   15c76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15c7a:	f04f 0200 	mov.w	r2, #0
   15c7e:	f04f 0300 	mov.w	r3, #0
   15c82:	f002 fa83 	bl	1818c <__aeabi_dcmpgt>
   15c86:	4603      	mov	r3, r0
   15c88:	2b00      	cmp	r3, #0
   15c8a:	d02a      	beq.n	15ce2 <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   15c8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15c90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15c94:	f001 fe36 	bl	17904 <__aeabi_dsub>
   15c98:	4602      	mov	r2, r0
   15c9a:	460b      	mov	r3, r1
   15c9c:	4690      	mov	r8, r2
   15c9e:	4699      	mov	r9, r3
   15ca0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15ca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15ca8:	f001 fe2e 	bl	17908 <__adddf3>
   15cac:	4602      	mov	r2, r0
   15cae:	460b      	mov	r3, r1
   15cb0:	4640      	mov	r0, r8
   15cb2:	4649      	mov	r1, r9
   15cb4:	f002 f904 	bl	17ec0 <__aeabi_ddiv>
   15cb8:	4602      	mov	r2, r0
   15cba:	460b      	mov	r3, r1
   15cbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15cc0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15cc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15cc8:	f001 ffd0 	bl	17c6c <__aeabi_dmul>
   15ccc:	4602      	mov	r2, r0
   15cce:	460b      	mov	r3, r1
   15cd0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15cd4:	f001 fe16 	bl	17904 <__aeabi_dsub>
   15cd8:	4602      	mov	r2, r0
   15cda:	460b      	mov	r3, r1
   15cdc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15ce0:	e029      	b.n	15d36 <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   15ce2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15ce6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15cea:	f001 fe0d 	bl	17908 <__adddf3>
   15cee:	4602      	mov	r2, r0
   15cf0:	460b      	mov	r3, r1
   15cf2:	4690      	mov	r8, r2
   15cf4:	4699      	mov	r9, r3
   15cf6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15cfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   15cfe:	f001 fe01 	bl	17904 <__aeabi_dsub>
   15d02:	4602      	mov	r2, r0
   15d04:	460b      	mov	r3, r1
   15d06:	4640      	mov	r0, r8
   15d08:	4649      	mov	r1, r9
   15d0a:	f002 f8d9 	bl	17ec0 <__aeabi_ddiv>
   15d0e:	4602      	mov	r2, r0
   15d10:	460b      	mov	r3, r1
   15d12:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   15d16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15d1e:	f001 ffa5 	bl	17c6c <__aeabi_dmul>
   15d22:	4602      	mov	r2, r0
   15d24:	460b      	mov	r3, r1
   15d26:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   15d2a:	f001 fdeb 	bl	17904 <__aeabi_dsub>
   15d2e:	4602      	mov	r2, r0
   15d30:	460b      	mov	r3, r1
   15d32:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   15d36:	e9d7 0100 	ldrd	r0, r1, [r7]
   15d3a:	f04f 0200 	mov.w	r2, #0
   15d3e:	f04f 0300 	mov.w	r3, #0
   15d42:	f002 fa05 	bl	18150 <__aeabi_dcmplt>
   15d46:	4603      	mov	r3, r0
   15d48:	2b00      	cmp	r3, #0
   15d4a:	d004      	beq.n	15d56 <pp_atan2+0x156>
		return (-angle);
   15d4c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15d50:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15d54:	e001      	b.n	15d5a <pp_atan2+0x15a>
	else
		return angle;
   15d56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   15d5a:	4622      	mov	r2, r4
   15d5c:	462b      	mov	r3, r5
}
   15d5e:	4610      	mov	r0, r2
   15d60:	4619      	mov	r1, r3
   15d62:	3738      	adds	r7, #56	; 0x38
   15d64:	46bd      	mov	sp, r7
   15d66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   15d6a:	bf00      	nop
   15d6c:	f3af 8000 	nop.w
   15d70:	54442d18 	.word	0x54442d18
   15d74:	3fe921fb 	.word	0x3fe921fb
   15d78:	d9d7bdbb 	.word	0xd9d7bdbb
   15d7c:	3ddb7cdf 	.word	0x3ddb7cdf

00015d80 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15d80:	b5b0      	push	{r4, r5, r7, lr}
   15d82:	b08c      	sub	sp, #48	; 0x30
   15d84:	af00      	add	r7, sp, #0
   15d86:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   15d8a:	e9d7 2300 	ldrd	r2, r3, [r7]
   15d8e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15d92:	2301      	movs	r3, #1
   15d94:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   15d96:	e00a      	b.n	15dae <pp_sin+0x2e>
   15d98:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d9c:	a35a      	add	r3, pc, #360	; (adr r3, 15f08 <pp_sin+0x188>)
   15d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15da2:	f001 fdb1 	bl	17908 <__adddf3>
   15da6:	4602      	mov	r2, r0
   15da8:	460b      	mov	r3, r1
   15daa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15dae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15db2:	a357      	add	r3, pc, #348	; (adr r3, 15f10 <pp_sin+0x190>)
   15db4:	e9d3 2300 	ldrd	r2, r3, [r3]
   15db8:	f002 f9ca 	bl	18150 <__aeabi_dcmplt>
   15dbc:	4603      	mov	r3, r0
   15dbe:	2b00      	cmp	r3, #0
   15dc0:	d1ea      	bne.n	15d98 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   15dc2:	e00a      	b.n	15dda <pp_sin+0x5a>
   15dc4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15dc8:	a34f      	add	r3, pc, #316	; (adr r3, 15f08 <pp_sin+0x188>)
   15dca:	e9d3 2300 	ldrd	r2, r3, [r3]
   15dce:	f001 fd99 	bl	17904 <__aeabi_dsub>
   15dd2:	4602      	mov	r2, r0
   15dd4:	460b      	mov	r3, r1
   15dd6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15dda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15dde:	a34e      	add	r3, pc, #312	; (adr r3, 15f18 <pp_sin+0x198>)
   15de0:	e9d3 2300 	ldrd	r2, r3, [r3]
   15de4:	f002 f9d2 	bl	1818c <__aeabi_dcmpgt>
   15de8:	4603      	mov	r3, r0
   15dea:	2b00      	cmp	r3, #0
   15dec:	d1ea      	bne.n	15dc4 <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   15dee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15df2:	a34b      	add	r3, pc, #300	; (adr r3, 15f20 <pp_sin+0x1a0>)
   15df4:	e9d3 2300 	ldrd	r2, r3, [r3]
   15df8:	f002 f9c8 	bl	1818c <__aeabi_dcmpgt>
   15dfc:	4603      	mov	r3, r0
   15dfe:	2b00      	cmp	r3, #0
   15e00:	d00d      	beq.n	15e1e <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   15e02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e06:	a348      	add	r3, pc, #288	; (adr r3, 15f28 <pp_sin+0x1a8>)
   15e08:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e0c:	f001 fd7a 	bl	17904 <__aeabi_dsub>
   15e10:	4602      	mov	r2, r0
   15e12:	460b      	mov	r3, r1
   15e14:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   15e18:	f04f 33ff 	mov.w	r3, #4294967295
   15e1c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   15e1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e22:	a343      	add	r3, pc, #268	; (adr r3, 15f30 <pp_sin+0x1b0>)
   15e24:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e28:	f002 f84a 	bl	17ec0 <__aeabi_ddiv>
   15e2c:	4602      	mov	r2, r0
   15e2e:	460b      	mov	r3, r1
   15e30:	e9c7 2306 	strd	r2, r3, [r7, #24]
   15e34:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15e38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15e3c:	f001 ff16 	bl	17c6c <__aeabi_dmul>
   15e40:	4602      	mov	r2, r0
   15e42:	460b      	mov	r3, r1
   15e44:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15e48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15e4c:	a33a      	add	r3, pc, #232	; (adr r3, 15f38 <pp_sin+0x1b8>)
   15e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e52:	f001 ff0b 	bl	17c6c <__aeabi_dmul>
   15e56:	4602      	mov	r2, r0
   15e58:	460b      	mov	r3, r1
	      - .00467376557) * q2
   15e5a:	4610      	mov	r0, r2
   15e5c:	4619      	mov	r1, r3
   15e5e:	a338      	add	r3, pc, #224	; (adr r3, 15f40 <pp_sin+0x1c0>)
   15e60:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e64:	f001 fd4e 	bl	17904 <__aeabi_dsub>
   15e68:	4602      	mov	r2, r0
   15e6a:	460b      	mov	r3, r1
   15e6c:	4610      	mov	r0, r2
   15e6e:	4619      	mov	r1, r3
   15e70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15e74:	f001 fefa 	bl	17c6c <__aeabi_dmul>
   15e78:	4602      	mov	r2, r0
   15e7a:	460b      	mov	r3, r1
	      + .07968967928) * q2
   15e7c:	4610      	mov	r0, r2
   15e7e:	4619      	mov	r1, r3
   15e80:	a331      	add	r3, pc, #196	; (adr r3, 15f48 <pp_sin+0x1c8>)
   15e82:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e86:	f001 fd3f 	bl	17908 <__adddf3>
   15e8a:	4602      	mov	r2, r0
   15e8c:	460b      	mov	r3, r1
   15e8e:	4610      	mov	r0, r2
   15e90:	4619      	mov	r1, r3
   15e92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15e96:	f001 fee9 	bl	17c6c <__aeabi_dmul>
   15e9a:	4602      	mov	r2, r0
   15e9c:	460b      	mov	r3, r1
	      - .64596371106) * q2
   15e9e:	4610      	mov	r0, r2
   15ea0:	4619      	mov	r1, r3
   15ea2:	a32b      	add	r3, pc, #172	; (adr r3, 15f50 <pp_sin+0x1d0>)
   15ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ea8:	f001 fd2c 	bl	17904 <__aeabi_dsub>
   15eac:	4602      	mov	r2, r0
   15eae:	460b      	mov	r3, r1
   15eb0:	4610      	mov	r0, r2
   15eb2:	4619      	mov	r1, r3
   15eb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15eb8:	f001 fed8 	bl	17c6c <__aeabi_dmul>
   15ebc:	4602      	mov	r2, r0
   15ebe:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15ec0:	4610      	mov	r0, r2
   15ec2:	4619      	mov	r1, r3
   15ec4:	a324      	add	r3, pc, #144	; (adr r3, 15f58 <pp_sin+0x1d8>)
   15ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
   15eca:	f001 fd1d 	bl	17908 <__adddf3>
   15ece:	4602      	mov	r2, r0
   15ed0:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   15ed2:	4610      	mov	r0, r2
   15ed4:	4619      	mov	r1, r3
   15ed6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15eda:	f001 fec7 	bl	17c6c <__aeabi_dmul>
   15ede:	4602      	mov	r2, r0
   15ee0:	460b      	mov	r3, r1
   15ee2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   15ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15ee8:	2b00      	cmp	r3, #0
   15eea:	da04      	bge.n	15ef6 <pp_sin+0x176>
   15eec:	68bc      	ldr	r4, [r7, #8]
   15eee:	68fb      	ldr	r3, [r7, #12]
   15ef0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15ef4:	e001      	b.n	15efa <pp_sin+0x17a>
   15ef6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   15efa:	4622      	mov	r2, r4
   15efc:	462b      	mov	r3, r5
}
   15efe:	4610      	mov	r0, r2
   15f00:	4619      	mov	r1, r3
   15f02:	3730      	adds	r7, #48	; 0x30
   15f04:	46bd      	mov	sp, r7
   15f06:	bdb0      	pop	{r4, r5, r7, pc}
   15f08:	54442d18 	.word	0x54442d18
   15f0c:	401921fb 	.word	0x401921fb
   15f10:	54442d18 	.word	0x54442d18
   15f14:	bff921fb 	.word	0xbff921fb
   15f18:	7f3321d2 	.word	0x7f3321d2
   15f1c:	4012d97c 	.word	0x4012d97c
   15f20:	54442d18 	.word	0x54442d18
   15f24:	3ff921fb 	.word	0x3ff921fb
   15f28:	54442d18 	.word	0x54442d18
   15f2c:	400921fb 	.word	0x400921fb
   15f30:	5443d6f4 	.word	0x5443d6f4
   15f34:	3ff921fb 	.word	0x3ff921fb
   15f38:	48a890af 	.word	0x48a890af
   15f3c:	3f23daf7 	.word	0x3f23daf7
   15f40:	645b6d0e 	.word	0x645b6d0e
   15f44:	3f7324cc 	.word	0x3f7324cc
   15f48:	f65619a5 	.word	0xf65619a5
   15f4c:	3fb4668a 	.word	0x3fb4668a
   15f50:	16acf9cd 	.word	0x16acf9cd
   15f54:	3fe4abbc 	.word	0x3fe4abbc
   15f58:	520817f7 	.word	0x520817f7
   15f5c:	3ff921fb 	.word	0x3ff921fb

00015f60 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   15f60:	b480      	push	{r7}
   15f62:	b083      	sub	sp, #12
   15f64:	af00      	add	r7, sp, #0
   15f66:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   15f6a:	4610      	mov	r0, r2
   15f6c:	4619      	mov	r1, r3
   15f6e:	370c      	adds	r7, #12
   15f70:	46bd      	mov	sp, r7
   15f72:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f76:	4770      	bx	lr

00015f78 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   15f78:	b480      	push	{r7}
   15f7a:	b083      	sub	sp, #12
   15f7c:	af00      	add	r7, sp, #0
   15f7e:	4603      	mov	r3, r0
   15f80:	6039      	str	r1, [r7, #0]
   15f82:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   15f84:	79fa      	ldrb	r2, [r7, #7]
   15f86:	f64c 3380 	movw	r3, #52096	; 0xcb80
   15f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f8e:	6839      	ldr	r1, [r7, #0]
   15f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   15f94:	370c      	adds	r7, #12
   15f96:	46bd      	mov	sp, r7
   15f98:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f9c:	4770      	bx	lr
   15f9e:	bf00      	nop

00015fa0 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   15fa0:	b480      	push	{r7}
   15fa2:	b083      	sub	sp, #12
   15fa4:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   15fa6:	f242 0315 	movw	r3, #8213	; 0x2015
   15faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fae:	2200      	movs	r2, #0
   15fb0:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   15fb2:	f242 0314 	movw	r3, #8212	; 0x2014
   15fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fba:	2200      	movs	r2, #0
   15fbc:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   15fbe:	f242 0307 	movw	r3, #8199	; 0x2007
   15fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fc6:	22c0      	movs	r2, #192	; 0xc0
   15fc8:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   15fca:	f242 0306 	movw	r3, #8198	; 0x2006
   15fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fd2:	22cf      	movs	r2, #207	; 0xcf
   15fd4:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15fd6:	2300      	movs	r3, #0
   15fd8:	71fb      	strb	r3, [r7, #7]
   15fda:	e00a      	b.n	15ff2 <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   15fdc:	79fa      	ldrb	r2, [r7, #7]
   15fde:	f64c 3380 	movw	r3, #52096	; 0xcb80
   15fe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fe6:	2100      	movs	r1, #0
   15fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15fec:	79fb      	ldrb	r3, [r7, #7]
   15fee:	3301      	adds	r3, #1
   15ff0:	71fb      	strb	r3, [r7, #7]
   15ff2:	79fb      	ldrb	r3, [r7, #7]
   15ff4:	2b07      	cmp	r3, #7
   15ff6:	d9f1      	bls.n	15fdc <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   15ff8:	370c      	adds	r7, #12
   15ffa:	46bd      	mov	sp, r7
   15ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
   16000:	4770      	bx	lr
   16002:	bf00      	nop

00016004 <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   16004:	b480      	push	{r7}
   16006:	b083      	sub	sp, #12
   16008:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   1600a:	f242 0326 	movw	r3, #8230	; 0x2026
   1600e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16012:	881b      	ldrh	r3, [r3, #0]
   16014:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   16016:	f64c 33dc 	movw	r3, #52188	; 0xcbdc
   1601a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1601e:	881b      	ldrh	r3, [r3, #0]
   16020:	88fa      	ldrh	r2, [r7, #6]
   16022:	1ad3      	subs	r3, r2, r3
   16024:	80bb      	strh	r3, [r7, #4]
  last		= this;
   16026:	f64c 33dc 	movw	r3, #52188	; 0xcbdc
   1602a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1602e:	88fa      	ldrh	r2, [r7, #6]
   16030:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   16032:	f64c 33de 	movw	r3, #52190	; 0xcbde
   16036:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1603a:	781b      	ldrb	r3, [r3, #0]
   1603c:	2b00      	cmp	r3, #0
   1603e:	d11e      	bne.n	1607e <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   16040:	f242 0324 	movw	r3, #8228	; 0x2024
   16044:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16048:	781b      	ldrb	r3, [r3, #0]
   1604a:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   1604c:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   16050:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16054:	781b      	ldrb	r3, [r3, #0]
   16056:	78fa      	ldrb	r2, [r7, #3]
   16058:	1ad3      	subs	r3, r2, r3
   1605a:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   1605c:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   16060:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16064:	78fa      	ldrb	r2, [r7, #3]
   16066:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   16068:	78bb      	ldrb	r3, [r7, #2]
   1606a:	2b6d      	cmp	r3, #109	; 0x6d
   1606c:	d906      	bls.n	1607c <__vector_34+0x78>
      state = 1;
   1606e:	f64c 33de 	movw	r3, #52190	; 0xcbde
   16072:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16076:	2201      	movs	r2, #1
   16078:	701a      	strb	r2, [r3, #0]
   1607a:	e053      	b.n	16124 <__vector_34+0x120>
   1607c:	e052      	b.n	16124 <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   1607e:	88bb      	ldrh	r3, [r7, #4]
   16080:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   16084:	d304      	bcc.n	16090 <__vector_34+0x8c>
   16086:	88ba      	ldrh	r2, [r7, #4]
   16088:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   1608c:	429a      	cmp	r2, r3
   1608e:	d911      	bls.n	160b4 <__vector_34+0xb0>
      RestartPpmCycle();
   16090:	f64c 33de 	movw	r3, #52190	; 0xcbde
   16094:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16098:	2200      	movs	r2, #0
   1609a:	701a      	strb	r2, [r3, #0]
   1609c:	f242 0324 	movw	r3, #8228	; 0x2024
   160a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160a4:	781b      	ldrb	r3, [r3, #0]
   160a6:	b2da      	uxtb	r2, r3
   160a8:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   160ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160b0:	701a      	strb	r2, [r3, #0]
   160b2:	e038      	b.n	16126 <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   160b4:	f64c 33de 	movw	r3, #52190	; 0xcbde
   160b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160bc:	781b      	ldrb	r3, [r3, #0]
   160be:	1e5a      	subs	r2, r3, #1
   160c0:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   160c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160c8:	88b9      	ldrh	r1, [r7, #4]
   160ca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   160ce:	f64c 33de 	movw	r3, #52190	; 0xcbde
   160d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160d6:	781b      	ldrb	r3, [r3, #0]
   160d8:	2b08      	cmp	r3, #8
   160da:	d917      	bls.n	1610c <__vector_34+0x108>
      ppm_valid	= 1;
   160dc:	f64c 33db 	movw	r3, #52187	; 0xcbdb
   160e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160e4:	2201      	movs	r2, #1
   160e6:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   160e8:	f64c 33de 	movw	r3, #52190	; 0xcbde
   160ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160f0:	2200      	movs	r2, #0
   160f2:	701a      	strb	r2, [r3, #0]
   160f4:	f242 0324 	movw	r3, #8228	; 0x2024
   160f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160fc:	781b      	ldrb	r3, [r3, #0]
   160fe:	b2da      	uxtb	r2, r3
   16100:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   16104:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16108:	701a      	strb	r2, [r3, #0]
   1610a:	e00c      	b.n	16126 <__vector_34+0x122>
    } else 
      state++;
   1610c:	f64c 33de 	movw	r3, #52190	; 0xcbde
   16110:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16114:	781b      	ldrb	r3, [r3, #0]
   16116:	3301      	adds	r3, #1
   16118:	b2da      	uxtb	r2, r3
   1611a:	f64c 33de 	movw	r3, #52190	; 0xcbde
   1611e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16122:	701a      	strb	r2, [r3, #0]
  }
  return;
   16124:	bf00      	nop
}
   16126:	370c      	adds	r7, #12
   16128:	46bd      	mov	sp, r7
   1612a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1612e:	4770      	bx	lr

00016130 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   16130:	b590      	push	{r4, r7, lr}
   16132:	b083      	sub	sp, #12
   16134:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   16136:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1613a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1613e:	881b      	ldrh	r3, [r3, #0]
   16140:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   16144:	b29b      	uxth	r3, r3
   16146:	80fb      	strh	r3, [r7, #6]
   16148:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   1614c:	4618      	mov	r0, r3
   1614e:	f002 f979 	bl	18444 <__aeabi_i2f>
   16152:	4603      	mov	r3, r0
   16154:	4618      	mov	r0, r3
   16156:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   1615a:	f002 f9c7 	bl	184ec <__aeabi_fmul>
   1615e:	4603      	mov	r3, r0
   16160:	4618      	mov	r0, r3
   16162:	f002 fb89 	bl	18878 <__aeabi_f2iz>
   16166:	4603      	mov	r3, r0
   16168:	b29a      	uxth	r2, r3
   1616a:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1616e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16172:	801a      	strh	r2, [r3, #0]
   16174:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16178:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1617c:	881b      	ldrh	r3, [r3, #0]
   1617e:	b21b      	sxth	r3, r3
   16180:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16184:	dd07      	ble.n	16196 <last_radio_from_ppm+0x66>
   16186:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1618a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1618e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16192:	801a      	strh	r2, [r3, #0]
   16194:	e00d      	b.n	161b2 <last_radio_from_ppm+0x82>
   16196:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1619a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1619e:	881b      	ldrh	r3, [r3, #0]
   161a0:	b21b      	sxth	r3, r3
   161a2:	2b00      	cmp	r3, #0
   161a4:	da05      	bge.n	161b2 <last_radio_from_ppm+0x82>
   161a6:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   161aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161ae:	2200      	movs	r2, #0
   161b0:	801a      	strh	r2, [r3, #0]
   161b2:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   161b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161ba:	885b      	ldrh	r3, [r3, #2]
   161bc:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   161c0:	b29b      	uxth	r3, r3
   161c2:	80fb      	strh	r3, [r7, #6]
   161c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   161c8:	4618      	mov	r0, r3
   161ca:	f002 f93b 	bl	18444 <__aeabi_i2f>
   161ce:	4603      	mov	r3, r0
   161d0:	4618      	mov	r0, r3
   161d2:	f002 fb51 	bl	18878 <__aeabi_f2iz>
   161d6:	4603      	mov	r3, r0
   161d8:	b29a      	uxth	r2, r3
   161da:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   161de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161e2:	805a      	strh	r2, [r3, #2]
   161e4:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   161e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161ec:	885b      	ldrh	r3, [r3, #2]
   161ee:	b21b      	sxth	r3, r3
   161f0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   161f4:	dd07      	ble.n	16206 <last_radio_from_ppm+0xd6>
   161f6:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   161fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161fe:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16202:	805a      	strh	r2, [r3, #2]
   16204:	e00f      	b.n	16226 <last_radio_from_ppm+0xf6>
   16206:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1620a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1620e:	885b      	ldrh	r3, [r3, #2]
   16210:	b21b      	sxth	r3, r3
   16212:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16216:	da06      	bge.n	16226 <last_radio_from_ppm+0xf6>
   16218:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1621c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16220:	f64d 2280 	movw	r2, #55936	; 0xda80
   16224:	805a      	strh	r2, [r3, #2]
   16226:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1622a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1622e:	889b      	ldrh	r3, [r3, #4]
   16230:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16234:	b29b      	uxth	r3, r3
   16236:	80fb      	strh	r3, [r7, #6]
   16238:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   1623c:	4618      	mov	r0, r3
   1623e:	f002 f901 	bl	18444 <__aeabi_i2f>
   16242:	4603      	mov	r3, r0
   16244:	4618      	mov	r0, r3
   16246:	f002 fb17 	bl	18878 <__aeabi_f2iz>
   1624a:	4603      	mov	r3, r0
   1624c:	b29a      	uxth	r2, r3
   1624e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16252:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16256:	809a      	strh	r2, [r3, #4]
   16258:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1625c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16260:	889b      	ldrh	r3, [r3, #4]
   16262:	b21b      	sxth	r3, r3
   16264:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16268:	dd07      	ble.n	1627a <last_radio_from_ppm+0x14a>
   1626a:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1626e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16272:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16276:	809a      	strh	r2, [r3, #4]
   16278:	e00f      	b.n	1629a <last_radio_from_ppm+0x16a>
   1627a:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1627e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16282:	889b      	ldrh	r3, [r3, #4]
   16284:	b21b      	sxth	r3, r3
   16286:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1628a:	da06      	bge.n	1629a <last_radio_from_ppm+0x16a>
   1628c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16290:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16294:	f64d 2280 	movw	r2, #55936	; 0xda80
   16298:	809a      	strh	r2, [r3, #4]
   1629a:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1629e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162a2:	88db      	ldrh	r3, [r3, #6]
   162a4:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   162a8:	b29b      	uxth	r3, r3
   162aa:	80fb      	strh	r3, [r7, #6]
   162ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   162b0:	4618      	mov	r0, r3
   162b2:	f002 f8c7 	bl	18444 <__aeabi_i2f>
   162b6:	4603      	mov	r3, r0
   162b8:	4618      	mov	r0, r3
   162ba:	f002 fadd 	bl	18878 <__aeabi_f2iz>
   162be:	4603      	mov	r3, r0
   162c0:	b29a      	uxth	r2, r3
   162c2:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   162c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162ca:	80da      	strh	r2, [r3, #6]
   162cc:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   162d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162d4:	88db      	ldrh	r3, [r3, #6]
   162d6:	b21b      	sxth	r3, r3
   162d8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   162dc:	dd07      	ble.n	162ee <last_radio_from_ppm+0x1be>
   162de:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   162e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162e6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   162ea:	80da      	strh	r2, [r3, #6]
   162ec:	e00f      	b.n	1630e <last_radio_from_ppm+0x1de>
   162ee:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   162f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162f6:	88db      	ldrh	r3, [r3, #6]
   162f8:	b21b      	sxth	r3, r3
   162fa:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   162fe:	da06      	bge.n	1630e <last_radio_from_ppm+0x1de>
   16300:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16304:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16308:	f64d 2280 	movw	r2, #55936	; 0xda80
   1630c:	80da      	strh	r2, [r3, #6]
   1630e:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   16312:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16316:	891b      	ldrh	r3, [r3, #8]
   16318:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1631c:	b29b      	uxth	r3, r3
   1631e:	80fb      	strh	r3, [r7, #6]
   16320:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16324:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16328:	891b      	ldrh	r3, [r3, #8]
   1632a:	b21b      	sxth	r3, r3
   1632c:	4618      	mov	r0, r3
   1632e:	f002 f889 	bl	18444 <__aeabi_i2f>
   16332:	4604      	mov	r4, r0
   16334:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16338:	4618      	mov	r0, r3
   1633a:	f002 f883 	bl	18444 <__aeabi_i2f>
   1633e:	4603      	mov	r3, r0
   16340:	4618      	mov	r0, r3
   16342:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16346:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1634a:	f002 f8cf 	bl	184ec <__aeabi_fmul>
   1634e:	4603      	mov	r3, r0
   16350:	4620      	mov	r0, r4
   16352:	4619      	mov	r1, r3
   16354:	f001 ffc2 	bl	182dc <__addsf3>
   16358:	4603      	mov	r3, r0
   1635a:	4618      	mov	r0, r3
   1635c:	f002 fa8c 	bl	18878 <__aeabi_f2iz>
   16360:	4603      	mov	r3, r0
   16362:	b29a      	uxth	r2, r3
   16364:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16368:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1636c:	811a      	strh	r2, [r3, #8]
   1636e:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   16372:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16376:	895b      	ldrh	r3, [r3, #10]
   16378:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1637c:	b29b      	uxth	r3, r3
   1637e:	80fb      	strh	r3, [r7, #6]
   16380:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16384:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16388:	895b      	ldrh	r3, [r3, #10]
   1638a:	b21b      	sxth	r3, r3
   1638c:	4618      	mov	r0, r3
   1638e:	f002 f859 	bl	18444 <__aeabi_i2f>
   16392:	4604      	mov	r4, r0
   16394:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16398:	4618      	mov	r0, r3
   1639a:	f002 f853 	bl	18444 <__aeabi_i2f>
   1639e:	4603      	mov	r3, r0
   163a0:	4618      	mov	r0, r3
   163a2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   163a6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   163aa:	f002 f89f 	bl	184ec <__aeabi_fmul>
   163ae:	4603      	mov	r3, r0
   163b0:	4620      	mov	r0, r4
   163b2:	4619      	mov	r1, r3
   163b4:	f001 ff92 	bl	182dc <__addsf3>
   163b8:	4603      	mov	r3, r0
   163ba:	4618      	mov	r0, r3
   163bc:	f002 fa5c 	bl	18878 <__aeabi_f2iz>
   163c0:	4603      	mov	r3, r0
   163c2:	b29a      	uxth	r2, r3
   163c4:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   163c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163cc:	815a      	strh	r2, [r3, #10]
   163ce:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   163d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163d6:	899b      	ldrh	r3, [r3, #12]
   163d8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   163dc:	b29b      	uxth	r3, r3
   163de:	80fb      	strh	r3, [r7, #6]
   163e0:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   163e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163e8:	899b      	ldrh	r3, [r3, #12]
   163ea:	b21b      	sxth	r3, r3
   163ec:	4618      	mov	r0, r3
   163ee:	f002 f829 	bl	18444 <__aeabi_i2f>
   163f2:	4604      	mov	r4, r0
   163f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   163f8:	4618      	mov	r0, r3
   163fa:	f002 f823 	bl	18444 <__aeabi_i2f>
   163fe:	4603      	mov	r3, r0
   16400:	4618      	mov	r0, r3
   16402:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16406:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1640a:	f002 f86f 	bl	184ec <__aeabi_fmul>
   1640e:	4603      	mov	r3, r0
   16410:	4620      	mov	r0, r4
   16412:	4619      	mov	r1, r3
   16414:	f001 ff62 	bl	182dc <__addsf3>
   16418:	4603      	mov	r3, r0
   1641a:	4618      	mov	r0, r3
   1641c:	f002 fa2c 	bl	18878 <__aeabi_f2iz>
   16420:	4603      	mov	r3, r0
   16422:	b29a      	uxth	r2, r3
   16424:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16428:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1642c:	819a      	strh	r2, [r3, #12]
   1642e:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   16432:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16436:	89db      	ldrh	r3, [r3, #14]
   16438:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1643c:	b29b      	uxth	r3, r3
   1643e:	80fb      	strh	r3, [r7, #6]
   16440:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16444:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16448:	89db      	ldrh	r3, [r3, #14]
   1644a:	b21b      	sxth	r3, r3
   1644c:	4618      	mov	r0, r3
   1644e:	f001 fff9 	bl	18444 <__aeabi_i2f>
   16452:	4604      	mov	r4, r0
   16454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16458:	4618      	mov	r0, r3
   1645a:	f001 fff3 	bl	18444 <__aeabi_i2f>
   1645e:	4603      	mov	r3, r0
   16460:	4618      	mov	r0, r3
   16462:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16466:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1646a:	f002 f83f 	bl	184ec <__aeabi_fmul>
   1646e:	4603      	mov	r3, r0
   16470:	4620      	mov	r0, r4
   16472:	4619      	mov	r1, r3
   16474:	f001 ff32 	bl	182dc <__addsf3>
   16478:	4603      	mov	r3, r0
   1647a:	4618      	mov	r0, r3
   1647c:	f002 f9fc 	bl	18878 <__aeabi_f2iz>
   16480:	4603      	mov	r3, r0
   16482:	b29a      	uxth	r2, r3
   16484:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16488:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1648c:	81da      	strh	r2, [r3, #14]
   1648e:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   16492:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16496:	8a1b      	ldrh	r3, [r3, #16]
   16498:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1649c:	b29b      	uxth	r3, r3
   1649e:	80fb      	strh	r3, [r7, #6]
   164a0:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   164a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164a8:	8a1b      	ldrh	r3, [r3, #16]
   164aa:	b21b      	sxth	r3, r3
   164ac:	4618      	mov	r0, r3
   164ae:	f001 ffc9 	bl	18444 <__aeabi_i2f>
   164b2:	4604      	mov	r4, r0
   164b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   164b8:	4618      	mov	r0, r3
   164ba:	f001 ffc3 	bl	18444 <__aeabi_i2f>
   164be:	4603      	mov	r3, r0
   164c0:	4618      	mov	r0, r3
   164c2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   164c6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   164ca:	f002 f80f 	bl	184ec <__aeabi_fmul>
   164ce:	4603      	mov	r3, r0
   164d0:	4620      	mov	r0, r4
   164d2:	4619      	mov	r1, r3
   164d4:	f001 ff02 	bl	182dc <__addsf3>
   164d8:	4603      	mov	r3, r0
   164da:	4618      	mov	r0, r3
   164dc:	f002 f9cc 	bl	18878 <__aeabi_f2iz>
   164e0:	4603      	mov	r3, r0
   164e2:	b29a      	uxth	r2, r3
   164e4:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   164e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164ec:	821a      	strh	r2, [r3, #16]
   164ee:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   164f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164f6:	781b      	ldrb	r3, [r3, #0]
   164f8:	3301      	adds	r3, #1
   164fa:	b2da      	uxtb	r2, r3
   164fc:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   16500:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16504:	701a      	strb	r2, [r3, #0]
   16506:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   1650a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1650e:	781b      	ldrb	r3, [r3, #0]
   16510:	2b0a      	cmp	r3, #10
   16512:	f040 8101 	bne.w	16718 <last_radio_from_ppm+0x5e8>
   16516:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   1651a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1651e:	2200      	movs	r2, #0
   16520:	701a      	strb	r2, [r3, #0]
   16522:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16526:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1652a:	891a      	ldrh	r2, [r3, #8]
   1652c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16530:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16534:	811a      	strh	r2, [r3, #8]
   16536:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1653a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1653e:	2200      	movs	r2, #0
   16540:	811a      	strh	r2, [r3, #8]
   16542:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16546:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1654a:	891b      	ldrh	r3, [r3, #8]
   1654c:	b21b      	sxth	r3, r3
   1654e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16552:	dd07      	ble.n	16564 <last_radio_from_ppm+0x434>
   16554:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16558:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1655c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16560:	811a      	strh	r2, [r3, #8]
   16562:	e00f      	b.n	16584 <last_radio_from_ppm+0x454>
   16564:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16568:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1656c:	891b      	ldrh	r3, [r3, #8]
   1656e:	b21b      	sxth	r3, r3
   16570:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16574:	da06      	bge.n	16584 <last_radio_from_ppm+0x454>
   16576:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1657a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1657e:	f64d 2280 	movw	r2, #55936	; 0xda80
   16582:	811a      	strh	r2, [r3, #8]
   16584:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16588:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1658c:	895a      	ldrh	r2, [r3, #10]
   1658e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16592:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16596:	815a      	strh	r2, [r3, #10]
   16598:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1659c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165a0:	2200      	movs	r2, #0
   165a2:	815a      	strh	r2, [r3, #10]
   165a4:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165ac:	895b      	ldrh	r3, [r3, #10]
   165ae:	b21b      	sxth	r3, r3
   165b0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   165b4:	dd07      	ble.n	165c6 <last_radio_from_ppm+0x496>
   165b6:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165be:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   165c2:	815a      	strh	r2, [r3, #10]
   165c4:	e00f      	b.n	165e6 <last_radio_from_ppm+0x4b6>
   165c6:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165ce:	895b      	ldrh	r3, [r3, #10]
   165d0:	b21b      	sxth	r3, r3
   165d2:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   165d6:	da06      	bge.n	165e6 <last_radio_from_ppm+0x4b6>
   165d8:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165e0:	f64d 2280 	movw	r2, #55936	; 0xda80
   165e4:	815a      	strh	r2, [r3, #10]
   165e6:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   165ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165ee:	899a      	ldrh	r2, [r3, #12]
   165f0:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165f8:	819a      	strh	r2, [r3, #12]
   165fa:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   165fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16602:	2200      	movs	r2, #0
   16604:	819a      	strh	r2, [r3, #12]
   16606:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1660a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1660e:	899b      	ldrh	r3, [r3, #12]
   16610:	b21b      	sxth	r3, r3
   16612:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16616:	dd07      	ble.n	16628 <last_radio_from_ppm+0x4f8>
   16618:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1661c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16620:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16624:	819a      	strh	r2, [r3, #12]
   16626:	e00f      	b.n	16648 <last_radio_from_ppm+0x518>
   16628:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1662c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16630:	899b      	ldrh	r3, [r3, #12]
   16632:	b21b      	sxth	r3, r3
   16634:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16638:	da06      	bge.n	16648 <last_radio_from_ppm+0x518>
   1663a:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1663e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16642:	f64d 2280 	movw	r2, #55936	; 0xda80
   16646:	819a      	strh	r2, [r3, #12]
   16648:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1664c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16650:	89da      	ldrh	r2, [r3, #14]
   16652:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16656:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1665a:	81da      	strh	r2, [r3, #14]
   1665c:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16660:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16664:	2200      	movs	r2, #0
   16666:	81da      	strh	r2, [r3, #14]
   16668:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1666c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16670:	89db      	ldrh	r3, [r3, #14]
   16672:	b21b      	sxth	r3, r3
   16674:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16678:	dd07      	ble.n	1668a <last_radio_from_ppm+0x55a>
   1667a:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1667e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16682:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16686:	81da      	strh	r2, [r3, #14]
   16688:	e00f      	b.n	166aa <last_radio_from_ppm+0x57a>
   1668a:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1668e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16692:	89db      	ldrh	r3, [r3, #14]
   16694:	b21b      	sxth	r3, r3
   16696:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1669a:	da06      	bge.n	166aa <last_radio_from_ppm+0x57a>
   1669c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166a4:	f64d 2280 	movw	r2, #55936	; 0xda80
   166a8:	81da      	strh	r2, [r3, #14]
   166aa:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   166ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166b2:	8a1a      	ldrh	r2, [r3, #16]
   166b4:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166bc:	821a      	strh	r2, [r3, #16]
   166be:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   166c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166c6:	2200      	movs	r2, #0
   166c8:	821a      	strh	r2, [r3, #16]
   166ca:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166d2:	8a1b      	ldrh	r3, [r3, #16]
   166d4:	b21b      	sxth	r3, r3
   166d6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   166da:	dd07      	ble.n	166ec <last_radio_from_ppm+0x5bc>
   166dc:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   166e8:	821a      	strh	r2, [r3, #16]
   166ea:	e00f      	b.n	1670c <last_radio_from_ppm+0x5dc>
   166ec:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166f4:	8a1b      	ldrh	r3, [r3, #16]
   166f6:	b21b      	sxth	r3, r3
   166f8:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   166fc:	da06      	bge.n	1670c <last_radio_from_ppm+0x5dc>
   166fe:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16702:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16706:	f64d 2280 	movw	r2, #55936	; 0xda80
   1670a:	821a      	strh	r2, [r3, #16]
   1670c:	f64c 33da 	movw	r3, #52186	; 0xcbda
   16710:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16714:	2201      	movs	r2, #1
   16716:	701a      	strb	r2, [r3, #0]
}
   16718:	370c      	adds	r7, #12
   1671a:	46bd      	mov	sp, r7
   1671c:	bd90      	pop	{r4, r7, pc}
   1671e:	bf00      	nop

00016720 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   16720:	b480      	push	{r7}
   16722:	af00      	add	r7, sp, #0
  idx_buf = 0;
   16724:	f64c 4314 	movw	r3, #52244	; 0xcc14
   16728:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1672c:	2200      	movs	r2, #0
   1672e:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   16730:	f64c 4315 	movw	r3, #52245	; 0xcc15
   16734:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16738:	2200      	movs	r2, #0
   1673a:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   1673c:	f64c 4314 	movw	r3, #52244	; 0xcc14
   16740:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16744:	781b      	ldrb	r3, [r3, #0]
   16746:	b2db      	uxtb	r3, r3
   16748:	461a      	mov	r2, r3
   1674a:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   1674e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16752:	4413      	add	r3, r2
   16754:	781a      	ldrb	r2, [r3, #0]
   16756:	f64c 4316 	movw	r3, #52246	; 0xcc16
   1675a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1675e:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   16760:	f242 030f 	movw	r3, #8207	; 0x200f
   16764:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16768:	f64c 4216 	movw	r2, #52246	; 0xcc16
   1676c:	f2c2 0204 	movt	r2, #8196	; 0x2004
   16770:	7812      	ldrb	r2, [r2, #0]
   16772:	b2d2      	uxtb	r2, r2
   16774:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   16776:	f64c 4312 	movw	r3, #52242	; 0xcc12
   1677a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1677e:	2200      	movs	r2, #0
   16780:	701a      	strb	r2, [r3, #0]
}
   16782:	46bd      	mov	sp, r7
   16784:	f85d 7b04 	ldr.w	r7, [sp], #4
   16788:	4770      	bx	lr
   1678a:	bf00      	nop

0001678c <fbw_spi_init>:

void fbw_spi_init(void) {
   1678c:	b480      	push	{r7}
   1678e:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   16790:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16794:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16798:	2200      	movs	r2, #0
   1679a:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   1679c:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   167a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167a4:	2200      	movs	r2, #0
   167a6:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   167a8:	f242 0317 	movw	r3, #8215	; 0x2017
   167ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167b0:	f242 0217 	movw	r2, #8215	; 0x2017
   167b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   167b8:	7812      	ldrb	r2, [r2, #0]
   167ba:	b2d2      	uxtb	r2, r2
   167bc:	f042 0210 	orr.w	r2, r2, #16
   167c0:	b2d2      	uxtb	r2, r2
   167c2:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   167c4:	f242 030d 	movw	r3, #8205	; 0x200d
   167c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167cc:	2240      	movs	r2, #64	; 0x40
   167ce:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   167d0:	f242 030d 	movw	r3, #8205	; 0x200d
   167d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167d8:	f242 020d 	movw	r2, #8205	; 0x200d
   167dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   167e0:	7812      	ldrb	r2, [r2, #0]
   167e2:	b2d2      	uxtb	r2, r2
   167e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   167e8:	b2d2      	uxtb	r2, r2
   167ea:	701a      	strb	r2, [r3, #0]
}
   167ec:	46bd      	mov	sp, r7
   167ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   167f2:	4770      	bx	lr
   167f4:	0000      	movs	r0, r0
	...

000167f8 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   167f8:	b480      	push	{r7}
   167fa:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   167fc:	f242 032f 	movw	r3, #8239	; 0x202f
   16800:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16804:	2200      	movs	r2, #0
   16806:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   16808:	f242 032e 	movw	r3, #8238	; 0x202e
   1680c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16810:	2201      	movs	r2, #1
   16812:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   16814:	f242 0325 	movw	r3, #8229	; 0x2025
   16818:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1681c:	2207      	movs	r2, #7
   1681e:	701a      	strb	r2, [r3, #0]
}
   16820:	46bd      	mov	sp, r7
   16822:	f85d 7b04 	ldr.w	r7, [sp], #4
   16826:	4770      	bx	lr

00016828 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   16828:	b480      	push	{r7}
   1682a:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   1682c:	f242 032e 	movw	r3, #8238	; 0x202e
   16830:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16834:	f242 022e 	movw	r2, #8238	; 0x202e
   16838:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1683c:	7812      	ldrb	r2, [r2, #0]
   1683e:	b2d2      	uxtb	r2, r2
   16840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   16844:	b2d2      	uxtb	r2, r2
   16846:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   16848:	f242 032e 	movw	r3, #8238	; 0x202e
   1684c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16850:	f242 022e 	movw	r2, #8238	; 0x202e
   16854:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16858:	7812      	ldrb	r2, [r2, #0]
   1685a:	b2d2      	uxtb	r2, r2
   1685c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16860:	b2d2      	uxtb	r2, r2
   16862:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   16864:	f242 0317 	movw	r3, #8215	; 0x2017
   16868:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1686c:	f242 0217 	movw	r2, #8215	; 0x2017
   16870:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16874:	7812      	ldrb	r2, [r2, #0]
   16876:	b2d2      	uxtb	r2, r2
   16878:	f022 0201 	bic.w	r2, r2, #1
   1687c:	b2d2      	uxtb	r2, r2
   1687e:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   16880:	f242 0337 	movw	r3, #8247	; 0x2037
   16884:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16888:	f242 0237 	movw	r2, #8247	; 0x2037
   1688c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16890:	7812      	ldrb	r2, [r2, #0]
   16892:	b2d2      	uxtb	r2, r2
   16894:	f042 0220 	orr.w	r2, r2, #32
   16898:	b2d2      	uxtb	r2, r2
   1689a:	701a      	strb	r2, [r3, #0]
}
   1689c:	46bd      	mov	sp, r7
   1689e:	f85d 7b04 	ldr.w	r7, [sp], #4
   168a2:	4770      	bx	lr

000168a4 <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   168a4:	b580      	push	{r7, lr}
   168a6:	b082      	sub	sp, #8
   168a8:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   168aa:	2300      	movs	r3, #0
   168ac:	71fb      	strb	r3, [r7, #7]
   168ae:	e010      	b.n	168d2 <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   168b0:	79fa      	ldrb	r2, [r7, #7]
   168b2:	79f9      	ldrb	r1, [r7, #7]
   168b4:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   168b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168bc:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   168c0:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   168c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168c8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   168cc:	79fb      	ldrb	r3, [r7, #7]
   168ce:	3301      	adds	r3, #1
   168d0:	71fb      	strb	r3, [r7, #7]
   168d2:	79fb      	ldrb	r3, [r7, #7]
   168d4:	2b08      	cmp	r3, #8
   168d6:	d9eb      	bls.n	168b0 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   168d8:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   168dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168e0:	781b      	ldrb	r3, [r3, #0]
   168e2:	2b00      	cmp	r3, #0
   168e4:	bf0c      	ite	eq
   168e6:	2300      	moveq	r3, #0
   168e8:	2301      	movne	r3, #1
   168ea:	b2db      	uxtb	r3, r3
   168ec:	461a      	mov	r2, r3
   168ee:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   168f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168f6:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   168f8:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   168fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16900:	7cdb      	ldrb	r3, [r3, #19]
   16902:	b2da      	uxtb	r2, r3
   16904:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16908:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1690c:	781b      	ldrb	r3, [r3, #0]
   1690e:	2b00      	cmp	r3, #0
   16910:	d001      	beq.n	16916 <to_autopilot_from_last_radio+0x72>
   16912:	2302      	movs	r3, #2
   16914:	e000      	b.n	16918 <to_autopilot_from_last_radio+0x74>
   16916:	2300      	movs	r3, #0
   16918:	4313      	orrs	r3, r2
   1691a:	b2db      	uxtb	r3, r3
   1691c:	b2da      	uxtb	r2, r3
   1691e:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16922:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16926:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   16928:	f64c 33da 	movw	r3, #52186	; 0xcbda
   1692c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16930:	781b      	ldrb	r3, [r3, #0]
   16932:	2b00      	cmp	r3, #0
   16934:	d012      	beq.n	1695c <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   16936:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   1693a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1693e:	7cdb      	ldrb	r3, [r3, #19]
   16940:	f043 0304 	orr.w	r3, r3, #4
   16944:	b2da      	uxtb	r2, r3
   16946:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   1694a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1694e:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   16950:	f64c 33da 	movw	r3, #52186	; 0xcbda
   16954:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16958:	2200      	movs	r2, #0
   1695a:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   1695c:	f64c 43a8 	movw	r3, #52392	; 0xcca8
   16960:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16964:	781a      	ldrb	r2, [r3, #0]
   16966:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   1696a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1696e:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   16970:	f64c 4318 	movw	r3, #52248	; 0xcc18
   16974:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16978:	881b      	ldrh	r3, [r3, #0]
   1697a:	4618      	mov	r0, r3
   1697c:	f001 f910 	bl	17ba0 <__aeabi_i2d>
   16980:	4602      	mov	r2, r0
   16982:	460b      	mov	r3, r1
   16984:	4610      	mov	r0, r2
   16986:	4619      	mov	r1, r3
   16988:	a31b      	add	r3, pc, #108	; (adr r3, 169f8 <to_autopilot_from_last_radio+0x154>)
   1698a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1698e:	f001 f96d 	bl	17c6c <__aeabi_dmul>
   16992:	4602      	mov	r2, r0
   16994:	460b      	mov	r3, r1
   16996:	4610      	mov	r0, r2
   16998:	4619      	mov	r1, r3
   1699a:	f04f 0200 	mov.w	r2, #0
   1699e:	f04f 0300 	mov.w	r3, #0
   169a2:	f2c4 0340 	movt	r3, #16448	; 0x4040
   169a6:	f001 fa8b 	bl	17ec0 <__aeabi_ddiv>
   169aa:	4602      	mov	r2, r0
   169ac:	460b      	mov	r3, r1
   169ae:	4610      	mov	r0, r2
   169b0:	4619      	mov	r1, r3
   169b2:	a313      	add	r3, pc, #76	; (adr r3, 16a00 <to_autopilot_from_last_radio+0x15c>)
   169b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   169b8:	f000 ffa6 	bl	17908 <__adddf3>
   169bc:	4602      	mov	r2, r0
   169be:	460b      	mov	r3, r1
   169c0:	4610      	mov	r0, r2
   169c2:	4619      	mov	r1, r3
   169c4:	f04f 0200 	mov.w	r2, #0
   169c8:	f04f 0300 	mov.w	r3, #0
   169cc:	f2c4 0324 	movt	r3, #16420	; 0x4024
   169d0:	f001 f94c 	bl	17c6c <__aeabi_dmul>
   169d4:	4602      	mov	r2, r0
   169d6:	460b      	mov	r3, r1
   169d8:	4610      	mov	r0, r2
   169da:	4619      	mov	r1, r3
   169dc:	f001 fc08 	bl	181f0 <__aeabi_d2uiz>
   169e0:	4603      	mov	r3, r0
   169e2:	b2da      	uxtb	r2, r3
   169e4:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   169e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169ec:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   169ee:	3708      	adds	r7, #8
   169f0:	46bd      	mov	sp, r7
   169f2:	bd80      	pop	{r7, pc}
   169f4:	f3af 8000 	nop.w
   169f8:	1eb851ec 	.word	0x1eb851ec
   169fc:	3f91eb85 	.word	0x3f91eb85
   16a00:	020c49ba 	.word	0x020c49ba
   16a04:	3fb6872b 	.word	0x3fb6872b

00016a08 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   16a08:	b580      	push	{r7, lr}
   16a0a:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
   if ( !SpiIsSelected() && spi_was_interrupted ) 
   16a0c:	f242 0316 	movw	r3, #8214	; 0x2016
   16a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a14:	781b      	ldrb	r3, [r3, #0]
   16a16:	b2db      	uxtb	r3, r3
   16a18:	f003 0304 	and.w	r3, r3, #4
   16a1c:	2b00      	cmp	r3, #0
   16a1e:	d011      	beq.n	16a44 <send_data_to_autopilot_task+0x3c>
   16a20:	f64c 4313 	movw	r3, #52243	; 0xcc13
   16a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a28:	781b      	ldrb	r3, [r3, #0]
   16a2a:	b2db      	uxtb	r3, r3
   16a2c:	2b00      	cmp	r3, #0
   16a2e:	d009      	beq.n	16a44 <send_data_to_autopilot_task+0x3c>
   {
      spi_was_interrupted = FALSE;
   16a30:	f64c 4313 	movw	r3, #52243	; 0xcc13
   16a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a38:	2200      	movs	r2, #0
   16a3a:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   16a3c:	f7ff ff32 	bl	168a4 <to_autopilot_from_last_radio>
      spi_reset();
   16a40:	f7ff fe6e 	bl	16720 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   16a44:	bd80      	pop	{r7, pc}
   16a46:	bf00      	nop

00016a48 <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   16a48:	b580      	push	{r7, lr}
   16a4a:	af00      	add	r7, sp, #0
  uart_init_tx();
   16a4c:	f000 fb68 	bl	17120 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   16a50:	f648 3010 	movw	r0, #35600	; 0x8b10
   16a54:	f2c0 0001 	movt	r0, #1
   16a58:	f000 fc40 	bl	172dc <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   16a5c:	f7ff faa0 	bl	15fa0 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   16a60:	2003      	movs	r0, #3
   16a62:	f64c 4118 	movw	r1, #52248	; 0xcc18
   16a66:	f2c2 0104 	movt	r1, #8196	; 0x2004
   16a6a:	f7ff fa85 	bl	15f78 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   16a6e:	2006      	movs	r0, #6
   16a70:	f64c 415c 	movw	r1, #52316	; 0xcc5c
   16a74:	f2c2 0104 	movt	r1, #8196	; 0x2004
   16a78:	f7ff fa7e 	bl	15f78 <fbw_adc_buf_channel>
#endif
  timer_init();
   16a7c:	f7ff febc 	bl	167f8 <timer_init>
  servo_init();
   16a80:	f000 f8fa 	bl	16c78 <servo_init>
  ppm_init();
   16a84:	f7ff fed0 	bl	16828 <ppm_init>
  fbw_spi_init();
   16a88:	f7ff fe80 	bl	1678c <fbw_spi_init>
  //sei(); //FN
}
   16a8c:	bd80      	pop	{r7, pc}
   16a8e:	bf00      	nop

00016a90 <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   16a90:	b580      	push	{r7, lr}
   16a92:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    if( ppm_valid ) 
   16a94:	f64c 33db 	movw	r3, #52187	; 0xcbdb
   16a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a9c:	781b      	ldrb	r3, [r3, #0]
   16a9e:	b2db      	uxtb	r3, r3
   16aa0:	2b00      	cmp	r3, #0
   16aa2:	d04c      	beq.n	16b3e <test_ppm_task+0xae>
    {
      ppm_valid = FALSE;
   16aa4:	f64c 33db 	movw	r3, #52187	; 0xcbdb
   16aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16aac:	2200      	movs	r2, #0
   16aae:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   16ab0:	f64c 43a7 	movw	r3, #52391	; 0xcca7
   16ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ab8:	781b      	ldrb	r3, [r3, #0]
   16aba:	3301      	adds	r3, #1
   16abc:	b2da      	uxtb	r2, r3
   16abe:	f64c 43a7 	movw	r3, #52391	; 0xcca7
   16ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ac6:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   16ac8:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ad0:	2201      	movs	r2, #1
   16ad2:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16ad4:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16adc:	2200      	movs	r2, #0
   16ade:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   16ae0:	f64c 43a2 	movw	r3, #52386	; 0xcca2
   16ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ae8:	2200      	movs	r2, #0
   16aea:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16aec:	f7ff fb20 	bl	16130 <last_radio_from_ppm>
      if (last_radio_contains_avg_channels) 
   16af0:	f64c 33da 	movw	r3, #52186	; 0xcbda
   16af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16af8:	781b      	ldrb	r3, [r3, #0]
   16afa:	2b00      	cmp	r3, #0
   16afc:	d011      	beq.n	16b22 <test_ppm_task+0x92>
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   16afe:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16b02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b06:	891b      	ldrh	r3, [r3, #8]
   16b08:	b21b      	sxth	r3, r3
   16b0a:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   16b0e:	bfb4      	ite	lt
   16b10:	2300      	movlt	r3, #0
   16b12:	2301      	movge	r3, #1
   16b14:	b2db      	uxtb	r3, r3
   16b16:	461a      	mov	r2, r3
   16b18:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b20:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   16b22:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b2a:	781b      	ldrb	r3, [r3, #0]
   16b2c:	2b00      	cmp	r3, #0
   16b2e:	d11a      	bne.n	16b66 <test_ppm_task+0xd6>
      {
	servo_set(last_radio);
   16b30:	f64c 30b4 	movw	r0, #52148	; 0xcbb4
   16b34:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16b38:	f000 f97c 	bl	16e34 <servo_set>
   16b3c:	e013      	b.n	16b66 <test_ppm_task+0xd6>
      }
    } 
    else if (mode == MODE_MANUAL && radio_really_lost) 
   16b3e:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b46:	781b      	ldrb	r3, [r3, #0]
   16b48:	2b00      	cmp	r3, #0
   16b4a:	d10c      	bne.n	16b66 <test_ppm_task+0xd6>
   16b4c:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b54:	781b      	ldrb	r3, [r3, #0]
   16b56:	2b00      	cmp	r3, #0
   16b58:	d005      	beq.n	16b66 <test_ppm_task+0xd6>
    {
      mode = MODE_AUTO;
   16b5a:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16b5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b62:	2201      	movs	r2, #1
   16b64:	701a      	strb	r2, [r3, #0]
    }
    if (time_since_last_ppm >= STALLED_TIME) 
   16b66:	f64c 43a2 	movw	r3, #52386	; 0xcca2
   16b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b6e:	881b      	ldrh	r3, [r3, #0]
   16b70:	2b1d      	cmp	r3, #29
   16b72:	d905      	bls.n	16b80 <test_ppm_task+0xf0>
    {
      radio_ok = FALSE;
   16b74:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b7c:	2200      	movs	r2, #0
   16b7e:	701a      	strb	r2, [r3, #0]
    }
    if (time_since_last_ppm >= REALLY_STALLED_TIME) 
   16b80:	f64c 43a2 	movw	r3, #52386	; 0xcca2
   16b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b88:	881b      	ldrh	r3, [r3, #0]
   16b8a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   16b8e:	d305      	bcc.n	16b9c <test_ppm_task+0x10c>
    {
      radio_really_lost = TRUE;
   16b90:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16b94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b98:	2201      	movs	r2, #1
   16b9a:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   16b9c:	bd80      	pop	{r7, pc}
   16b9e:	bf00      	nop

00016ba0 <check_failsafe_task>:
void check_failsafe_task(void)
{
   16ba0:	b580      	push	{r7, lr}
   16ba2:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
   16ba4:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bac:	781b      	ldrb	r3, [r3, #0]
   16bae:	2b00      	cmp	r3, #0
   16bb0:	d106      	bne.n	16bc0 <check_failsafe_task+0x20>
   16bb2:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16bb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bba:	781b      	ldrb	r3, [r3, #0]
   16bbc:	2b00      	cmp	r3, #0
   16bbe:	d00d      	beq.n	16bdc <check_failsafe_task+0x3c>
   16bc0:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bc8:	781b      	ldrb	r3, [r3, #0]
   16bca:	2b01      	cmp	r3, #1
   16bcc:	d10c      	bne.n	16be8 <check_failsafe_task+0x48>
   16bce:	f64c 43a5 	movw	r3, #52389	; 0xcca5
   16bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bd6:	781b      	ldrb	r3, [r3, #0]
   16bd8:	2b00      	cmp	r3, #0
   16bda:	d105      	bne.n	16be8 <check_failsafe_task+0x48>
    {
      servo_set(failsafe);
   16bdc:	f648 20fc 	movw	r0, #35580	; 0x8afc
   16be0:	f2c0 0001 	movt	r0, #1
   16be4:	f000 f926 	bl	16e34 <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   16be8:	bd80      	pop	{r7, pc}
   16bea:	bf00      	nop

00016bec <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   16bec:	b580      	push	{r7, lr}
   16bee:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     if ( !SpiIsSelected() && spi_was_interrupted ) 
   16bf0:	f242 0316 	movw	r3, #8214	; 0x2016
   16bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16bf8:	781b      	ldrb	r3, [r3, #0]
   16bfa:	b2db      	uxtb	r3, r3
   16bfc:	f003 0304 	and.w	r3, r3, #4
   16c00:	2b00      	cmp	r3, #0
   16c02:	d028      	beq.n	16c56 <check_mega128_values_task+0x6a>
   16c04:	f64c 4313 	movw	r3, #52243	; 0xcc13
   16c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c0c:	781b      	ldrb	r3, [r3, #0]
   16c0e:	b2db      	uxtb	r3, r3
   16c10:	2b00      	cmp	r3, #0
   16c12:	d020      	beq.n	16c56 <check_mega128_values_task+0x6a>
     {
         if (mega128_receive_valid)
   16c14:	f64c 4312 	movw	r3, #52242	; 0xcc12
   16c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c1c:	781b      	ldrb	r3, [r3, #0]
   16c1e:	b2db      	uxtb	r3, r3
   16c20:	2b00      	cmp	r3, #0
   16c22:	d018      	beq.n	16c56 <check_mega128_values_task+0x6a>
         { 
             time_since_last_mega128 = 0;
   16c24:	f64c 43a1 	movw	r3, #52385	; 0xcca1
   16c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c2c:	2200      	movs	r2, #0
   16c2e:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   16c30:	f64c 43a5 	movw	r3, #52389	; 0xcca5
   16c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c38:	2201      	movs	r2, #1
   16c3a:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   16c3c:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c44:	781b      	ldrb	r3, [r3, #0]
   16c46:	2b01      	cmp	r3, #1
   16c48:	d105      	bne.n	16c56 <check_mega128_values_task+0x6a>
                 servo_set(from_mega128.channels);
   16c4a:	f64c 30e4 	movw	r0, #52196	; 0xcbe4
   16c4e:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16c52:	f000 f8ef 	bl	16e34 <servo_set>
         }
     }
     if (time_since_last_mega128 == STALLED_TIME) 
   16c56:	f64c 43a1 	movw	r3, #52385	; 0xcca1
   16c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c5e:	781b      	ldrb	r3, [r3, #0]
   16c60:	2b1e      	cmp	r3, #30
   16c62:	d105      	bne.n	16c70 <check_mega128_values_task+0x84>
     {
         mega128_ok = FALSE;
   16c64:	f64c 43a5 	movw	r3, #52389	; 0xcca5
   16c68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c6c:	2200      	movs	r2, #0
   16c6e:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   16c70:	bd80      	pop	{r7, pc}
   16c72:	bf00      	nop
   16c74:	f3af 8000 	nop.w

00016c78 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16c78:	b480      	push	{r7}
   16c7a:	b083      	sub	sp, #12
   16c7c:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   16c7e:	f242 0311 	movw	r3, #8209	; 0x2011
   16c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c86:	f242 0211 	movw	r2, #8209	; 0x2011
   16c8a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c8e:	7812      	ldrb	r2, [r2, #0]
   16c90:	b2d2      	uxtb	r2, r2
   16c92:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16c96:	b2d2      	uxtb	r2, r2
   16c98:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   16c9a:	f242 0317 	movw	r3, #8215	; 0x2017
   16c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ca2:	f242 0217 	movw	r2, #8215	; 0x2017
   16ca6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16caa:	7812      	ldrb	r2, [r2, #0]
   16cac:	b2d2      	uxtb	r2, r2
   16cae:	f042 0202 	orr.w	r2, r2, #2
   16cb2:	b2d2      	uxtb	r2, r2
   16cb4:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16cb6:	f242 0312 	movw	r3, #8210	; 0x2012
   16cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cbe:	f242 0212 	movw	r2, #8210	; 0x2012
   16cc2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16cc6:	7812      	ldrb	r2, [r2, #0]
   16cc8:	b2d2      	uxtb	r2, r2
   16cca:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16cce:	b2d2      	uxtb	r2, r2
   16cd0:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   16cd2:	f242 0318 	movw	r3, #8216	; 0x2018
   16cd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cda:	f242 0218 	movw	r2, #8216	; 0x2018
   16cde:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16ce2:	7812      	ldrb	r2, [r2, #0]
   16ce4:	b2d2      	uxtb	r2, r2
   16ce6:	f022 0202 	bic.w	r2, r2, #2
   16cea:	b2d2      	uxtb	r2, r2
   16cec:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16cee:	2300      	movs	r3, #0
   16cf0:	71fb      	strb	r3, [r7, #7]
   16cf2:	e00b      	b.n	16d0c <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   16cf4:	79fa      	ldrb	r2, [r7, #7]
   16cf6:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16cfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cfe:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   16d02:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16d06:	79fb      	ldrb	r3, [r7, #7]
   16d08:	3301      	adds	r3, #1
   16d0a:	71fb      	strb	r3, [r7, #7]
   16d0c:	79fb      	ldrb	r3, [r7, #7]
   16d0e:	2b09      	cmp	r3, #9
   16d10:	d9f0      	bls.n	16cf4 <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   16d12:	f242 032a 	movw	r3, #8234	; 0x202a
   16d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   16d1e:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   16d20:	f242 032f 	movw	r3, #8239	; 0x202f
   16d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d28:	f242 022f 	movw	r2, #8239	; 0x202f
   16d2c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d30:	7812      	ldrb	r2, [r2, #0]
   16d32:	b2d2      	uxtb	r2, r2
   16d34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16d38:	b2d2      	uxtb	r2, r2
   16d3a:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   16d3c:	f242 0336 	movw	r3, #8246	; 0x2036
   16d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d44:	2210      	movs	r2, #16
   16d46:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16d48:	f242 0312 	movw	r3, #8210	; 0x2012
   16d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d50:	f242 0212 	movw	r2, #8210	; 0x2012
   16d54:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d58:	7812      	ldrb	r2, [r2, #0]
   16d5a:	b2d2      	uxtb	r2, r2
   16d5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16d60:	b2d2      	uxtb	r2, r2
   16d62:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   16d64:	f242 0337 	movw	r3, #8247	; 0x2037
   16d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d6c:	f242 0237 	movw	r2, #8247	; 0x2037
   16d70:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d74:	7812      	ldrb	r2, [r2, #0]
   16d76:	b2d2      	uxtb	r2, r2
   16d78:	f042 0210 	orr.w	r2, r2, #16
   16d7c:	b2d2      	uxtb	r2, r2
   16d7e:	701a      	strb	r2, [r3, #0]
}
   16d80:	370c      	adds	r7, #12
   16d82:	46bd      	mov	sp, r7
   16d84:	f85d 7b04 	ldr.w	r7, [sp], #4
   16d88:	4770      	bx	lr
   16d8a:	bf00      	nop

00016d8c <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   16d8c:	b480      	push	{r7}
   16d8e:	b083      	sub	sp, #12
   16d90:	af00      	add	r7, sp, #0
   16d92:	4602      	mov	r2, r0
   16d94:	460b      	mov	r3, r1
   16d96:	71fa      	strb	r2, [r7, #7]
   16d98:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   16d9a:	79f9      	ldrb	r1, [r7, #7]
   16d9c:	88bb      	ldrh	r3, [r7, #4]
   16d9e:	011b      	lsls	r3, r3, #4
   16da0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16da4:	d308      	bcc.n	16db8 <servo_set_one+0x2c>
   16da6:	88bb      	ldrh	r3, [r7, #4]
   16da8:	011b      	lsls	r3, r3, #4
   16daa:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16dae:	bf28      	it	cs
   16db0:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16db4:	b29a      	uxth	r2, r3
   16db6:	e001      	b.n	16dbc <servo_set_one+0x30>
   16db8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16dbc:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16dc4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   16dc8:	370c      	adds	r7, #12
   16dca:	46bd      	mov	sp, r7
   16dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
   16dd0:	4770      	bx	lr
   16dd2:	bf00      	nop

00016dd4 <servo_transmit>:

void 
servo_transmit(void) {
   16dd4:	b580      	push	{r7, lr}
   16dd6:	b082      	sub	sp, #8
   16dd8:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   16dda:	2000      	movs	r0, #0
   16ddc:	f000 f9e6 	bl	171ac <uart_transmit>
   16de0:	2000      	movs	r0, #0
   16de2:	f000 f9e3 	bl	171ac <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16de6:	2300      	movs	r3, #0
   16de8:	71fb      	strb	r3, [r7, #7]
   16dea:	e01a      	b.n	16e22 <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   16dec:	79fa      	ldrb	r2, [r7, #7]
   16dee:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16df2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16df6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16dfa:	0a1b      	lsrs	r3, r3, #8
   16dfc:	b29b      	uxth	r3, r3
   16dfe:	b2db      	uxtb	r3, r3
   16e00:	4618      	mov	r0, r3
   16e02:	f000 f9d3 	bl	171ac <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   16e06:	79fa      	ldrb	r2, [r7, #7]
   16e08:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e10:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16e14:	b2db      	uxtb	r3, r3
   16e16:	4618      	mov	r0, r3
   16e18:	f000 f9c8 	bl	171ac <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16e1c:	79fb      	ldrb	r3, [r7, #7]
   16e1e:	3301      	adds	r3, #1
   16e20:	71fb      	strb	r3, [r7, #7]
   16e22:	79fb      	ldrb	r3, [r7, #7]
   16e24:	2b09      	cmp	r3, #9
   16e26:	d9e1      	bls.n	16dec <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   16e28:	200a      	movs	r0, #10
   16e2a:	f000 f9bf 	bl	171ac <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   16e2e:	3708      	adds	r7, #8
   16e30:	46bd      	mov	sp, r7
   16e32:	bd80      	pop	{r7, pc}

00016e34 <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   16e34:	b5b0      	push	{r4, r5, r7, lr}
   16e36:	b084      	sub	sp, #16
   16e38:	af00      	add	r7, sp, #0
   16e3a:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   16e3c:	687b      	ldr	r3, [r7, #4]
   16e3e:	330a      	adds	r3, #10
   16e40:	881b      	ldrh	r3, [r3, #0]
   16e42:	b21b      	sxth	r3, r3
   16e44:	005b      	lsls	r3, r3, #1
   16e46:	4618      	mov	r0, r3
   16e48:	f000 feaa 	bl	17ba0 <__aeabi_i2d>
   16e4c:	4602      	mov	r2, r0
   16e4e:	460b      	mov	r3, r1
   16e50:	4610      	mov	r0, r2
   16e52:	4619      	mov	r1, r3
   16e54:	a3a6      	add	r3, pc, #664	; (adr r3, 170f0 <servo_set+0x2bc>)
   16e56:	e9d3 2300 	ldrd	r2, r3, [r3]
   16e5a:	f000 ff07 	bl	17c6c <__aeabi_dmul>
   16e5e:	4602      	mov	r2, r0
   16e60:	460b      	mov	r3, r1
   16e62:	4610      	mov	r0, r2
   16e64:	4619      	mov	r1, r3
   16e66:	f001 f99b 	bl	181a0 <__aeabi_d2iz>
   16e6a:	4603      	mov	r3, r0
   16e6c:	b29b      	uxth	r3, r3
   16e6e:	b29b      	uxth	r3, r3
   16e70:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16e74:	81fb      	strh	r3, [r7, #14]
   16e76:	89fb      	ldrh	r3, [r7, #14]
   16e78:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16e7c:	d307      	bcc.n	16e8e <servo_set+0x5a>
   16e7e:	89fb      	ldrh	r3, [r7, #14]
   16e80:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16e84:	bf28      	it	cs
   16e86:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16e8a:	b29a      	uxth	r2, r3
   16e8c:	e001      	b.n	16e92 <servo_set+0x5e>
   16e8e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16e92:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16e96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e9a:	80da      	strh	r2, [r3, #6]
   16e9c:	687b      	ldr	r3, [r7, #4]
   16e9e:	881b      	ldrh	r3, [r3, #0]
   16ea0:	b21b      	sxth	r3, r3
   16ea2:	005b      	lsls	r3, r3, #1
   16ea4:	4618      	mov	r0, r3
   16ea6:	f000 fe7b 	bl	17ba0 <__aeabi_i2d>
   16eaa:	4602      	mov	r2, r0
   16eac:	460b      	mov	r3, r1
   16eae:	4610      	mov	r0, r2
   16eb0:	4619      	mov	r1, r3
   16eb2:	a38f      	add	r3, pc, #572	; (adr r3, 170f0 <servo_set+0x2bc>)
   16eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   16eb8:	f000 fed8 	bl	17c6c <__aeabi_dmul>
   16ebc:	4602      	mov	r2, r0
   16ebe:	460b      	mov	r3, r1
   16ec0:	4610      	mov	r0, r2
   16ec2:	4619      	mov	r1, r3
   16ec4:	f001 f96c 	bl	181a0 <__aeabi_d2iz>
   16ec8:	4603      	mov	r3, r0
   16eca:	b29b      	uxth	r3, r3
   16ecc:	b29b      	uxth	r3, r3
   16ece:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16ed2:	81fb      	strh	r3, [r7, #14]
   16ed4:	89fb      	ldrh	r3, [r7, #14]
   16ed6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16eda:	d307      	bcc.n	16eec <servo_set+0xb8>
   16edc:	89fb      	ldrh	r3, [r7, #14]
   16ede:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16ee2:	bf28      	it	cs
   16ee4:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16ee8:	b29a      	uxth	r2, r3
   16eea:	e001      	b.n	16ef0 <servo_set+0xbc>
   16eec:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16ef0:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16ef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ef8:	825a      	strh	r2, [r3, #18]
   16efa:	687b      	ldr	r3, [r7, #4]
   16efc:	3304      	adds	r3, #4
   16efe:	881b      	ldrh	r3, [r3, #0]
   16f00:	b21b      	sxth	r3, r3
   16f02:	4618      	mov	r0, r3
   16f04:	f000 fe4c 	bl	17ba0 <__aeabi_i2d>
   16f08:	4602      	mov	r2, r0
   16f0a:	460b      	mov	r3, r1
   16f0c:	4610      	mov	r0, r2
   16f0e:	4619      	mov	r1, r3
   16f10:	a379      	add	r3, pc, #484	; (adr r3, 170f8 <servo_set+0x2c4>)
   16f12:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f16:	f000 fea9 	bl	17c6c <__aeabi_dmul>
   16f1a:	4602      	mov	r2, r0
   16f1c:	460b      	mov	r3, r1
   16f1e:	4610      	mov	r0, r2
   16f20:	4619      	mov	r1, r3
   16f22:	f001 f93d 	bl	181a0 <__aeabi_d2iz>
   16f26:	4603      	mov	r3, r0
   16f28:	b29b      	uxth	r3, r3
   16f2a:	b29b      	uxth	r3, r3
   16f2c:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   16f30:	3320      	adds	r3, #32
   16f32:	81fb      	strh	r3, [r7, #14]
   16f34:	89fb      	ldrh	r3, [r7, #14]
   16f36:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16f3a:	d307      	bcc.n	16f4c <servo_set+0x118>
   16f3c:	89fb      	ldrh	r3, [r7, #14]
   16f3e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16f42:	bf28      	it	cs
   16f44:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16f48:	b29a      	uxth	r2, r3
   16f4a:	e001      	b.n	16f50 <servo_set+0x11c>
   16f4c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16f50:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f58:	819a      	strh	r2, [r3, #12]
   16f5a:	687b      	ldr	r3, [r7, #4]
   16f5c:	885b      	ldrh	r3, [r3, #2]
   16f5e:	81bb      	strh	r3, [r7, #12]
   16f60:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16f64:	2b00      	cmp	r3, #0
   16f66:	dd06      	ble.n	16f76 <servo_set+0x142>
   16f68:	f04f 0400 	mov.w	r4, #0
   16f6c:	f04f 0500 	mov.w	r5, #0
   16f70:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16f74:	e002      	b.n	16f7c <servo_set+0x148>
   16f76:	a562      	add	r5, pc, #392	; (adr r5, 17100 <servo_set+0x2cc>)
   16f78:	e9d5 4500 	ldrd	r4, r5, [r5]
   16f7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16f80:	4618      	mov	r0, r3
   16f82:	f000 fe0d 	bl	17ba0 <__aeabi_i2d>
   16f86:	4602      	mov	r2, r0
   16f88:	460b      	mov	r3, r1
   16f8a:	4620      	mov	r0, r4
   16f8c:	4629      	mov	r1, r5
   16f8e:	f000 fe6d 	bl	17c6c <__aeabi_dmul>
   16f92:	4602      	mov	r2, r0
   16f94:	460b      	mov	r3, r1
   16f96:	4610      	mov	r0, r2
   16f98:	4619      	mov	r1, r3
   16f9a:	a35b      	add	r3, pc, #364	; (adr r3, 17108 <servo_set+0x2d4>)
   16f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16fa0:	f000 fe64 	bl	17c6c <__aeabi_dmul>
   16fa4:	4602      	mov	r2, r0
   16fa6:	460b      	mov	r3, r1
   16fa8:	4610      	mov	r0, r2
   16faa:	4619      	mov	r1, r3
   16fac:	f001 f8f8 	bl	181a0 <__aeabi_d2iz>
   16fb0:	4603      	mov	r3, r0
   16fb2:	b29b      	uxth	r3, r3
   16fb4:	b29b      	uxth	r3, r3
   16fb6:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   16fba:	81fb      	strh	r3, [r7, #14]
   16fbc:	89fb      	ldrh	r3, [r7, #14]
   16fbe:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16fc2:	d307      	bcc.n	16fd4 <servo_set+0x1a0>
   16fc4:	89fb      	ldrh	r3, [r7, #14]
   16fc6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16fca:	bf28      	it	cs
   16fcc:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16fd0:	b29a      	uxth	r2, r3
   16fd2:	e001      	b.n	16fd8 <servo_set+0x1a4>
   16fd4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16fd8:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16fdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16fe0:	801a      	strh	r2, [r3, #0]
   16fe2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16fe6:	2b00      	cmp	r3, #0
   16fe8:	dd03      	ble.n	16ff2 <servo_set+0x1be>
   16fea:	a545      	add	r5, pc, #276	; (adr r5, 17100 <servo_set+0x2cc>)
   16fec:	e9d5 4500 	ldrd	r4, r5, [r5]
   16ff0:	e005      	b.n	16ffe <servo_set+0x1ca>
   16ff2:	f04f 0400 	mov.w	r4, #0
   16ff6:	f04f 0500 	mov.w	r5, #0
   16ffa:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16ffe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   17002:	4618      	mov	r0, r3
   17004:	f000 fdcc 	bl	17ba0 <__aeabi_i2d>
   17008:	4602      	mov	r2, r0
   1700a:	460b      	mov	r3, r1
   1700c:	4620      	mov	r0, r4
   1700e:	4629      	mov	r1, r5
   17010:	f000 fe2c 	bl	17c6c <__aeabi_dmul>
   17014:	4602      	mov	r2, r0
   17016:	460b      	mov	r3, r1
   17018:	4610      	mov	r0, r2
   1701a:	4619      	mov	r1, r3
   1701c:	a33c      	add	r3, pc, #240	; (adr r3, 17110 <servo_set+0x2dc>)
   1701e:	e9d3 2300 	ldrd	r2, r3, [r3]
   17022:	f000 fe23 	bl	17c6c <__aeabi_dmul>
   17026:	4602      	mov	r2, r0
   17028:	460b      	mov	r3, r1
   1702a:	4610      	mov	r0, r2
   1702c:	4619      	mov	r1, r3
   1702e:	f001 f8b7 	bl	181a0 <__aeabi_d2iz>
   17032:	4603      	mov	r3, r0
   17034:	b29b      	uxth	r3, r3
   17036:	b29b      	uxth	r3, r3
   17038:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   1703c:	3320      	adds	r3, #32
   1703e:	81fb      	strh	r3, [r7, #14]
   17040:	89fb      	ldrh	r3, [r7, #14]
   17042:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   17046:	d307      	bcc.n	17058 <servo_set+0x224>
   17048:	89fb      	ldrh	r3, [r7, #14]
   1704a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1704e:	bf28      	it	cs
   17050:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   17054:	b29a      	uxth	r2, r3
   17056:	e001      	b.n	1705c <servo_set+0x228>
   17058:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   1705c:	f64c 43ac 	movw	r3, #52396	; 0xccac
   17060:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17064:	809a      	strh	r2, [r3, #4]
   17066:	687b      	ldr	r3, [r7, #4]
   17068:	3306      	adds	r3, #6
   1706a:	881b      	ldrh	r3, [r3, #0]
   1706c:	b21b      	sxth	r3, r3
   1706e:	4618      	mov	r0, r3
   17070:	f000 fd96 	bl	17ba0 <__aeabi_i2d>
   17074:	4604      	mov	r4, r0
   17076:	460d      	mov	r5, r1
   17078:	687b      	ldr	r3, [r7, #4]
   1707a:	3302      	adds	r3, #2
   1707c:	881b      	ldrh	r3, [r3, #0]
   1707e:	b21b      	sxth	r3, r3
   17080:	4618      	mov	r0, r3
   17082:	f000 fd8d 	bl	17ba0 <__aeabi_i2d>
   17086:	4602      	mov	r2, r0
   17088:	460b      	mov	r3, r1
   1708a:	4620      	mov	r0, r4
   1708c:	4629      	mov	r1, r5
   1708e:	f000 fc3b 	bl	17908 <__adddf3>
   17092:	4602      	mov	r2, r0
   17094:	460b      	mov	r3, r1
   17096:	4610      	mov	r0, r2
   17098:	4619      	mov	r1, r3
   1709a:	a31f      	add	r3, pc, #124	; (adr r3, 17118 <servo_set+0x2e4>)
   1709c:	e9d3 2300 	ldrd	r2, r3, [r3]
   170a0:	f000 fde4 	bl	17c6c <__aeabi_dmul>
   170a4:	4602      	mov	r2, r0
   170a6:	460b      	mov	r3, r1
   170a8:	4610      	mov	r0, r2
   170aa:	4619      	mov	r1, r3
   170ac:	f001 f878 	bl	181a0 <__aeabi_d2iz>
   170b0:	4603      	mov	r3, r0
   170b2:	b29b      	uxth	r3, r3
   170b4:	b29b      	uxth	r3, r3
   170b6:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   170ba:	3320      	adds	r3, #32
   170bc:	81fb      	strh	r3, [r7, #14]
   170be:	89fb      	ldrh	r3, [r7, #14]
   170c0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   170c4:	d307      	bcc.n	170d6 <servo_set+0x2a2>
   170c6:	89fb      	ldrh	r3, [r7, #14]
   170c8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   170cc:	bf28      	it	cs
   170ce:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   170d2:	b29a      	uxth	r2, r3
   170d4:	e001      	b.n	170da <servo_set+0x2a6>
   170d6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   170da:	f64c 43ac 	movw	r3, #52396	; 0xccac
   170de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   170e2:	81da      	strh	r2, [r3, #14]
}
   170e4:	3710      	adds	r7, #16
   170e6:	46bd      	mov	sp, r7
   170e8:	bdb0      	pop	{r4, r5, r7, pc}
   170ea:	bf00      	nop
   170ec:	f3af 8000 	nop.w
   170f0:	aaaa9ef0 	.word	0xaaaa9ef0
   170f4:	3feaaaaa 	.word	0x3feaaaaa
   170f8:	fc96473e 	.word	0xfc96473e
   170fc:	3fdfc962 	.word	0x3fdfc962
   17100:	51eb851f 	.word	0x51eb851f
   17104:	3fe51eb8 	.word	0x3fe51eb8
   17108:	9999999a 	.word	0x9999999a
   1710c:	bfe19999 	.word	0xbfe19999
   17110:	aaaa9ef0 	.word	0xaaaa9ef0
   17114:	bfe0aaaa 	.word	0xbfe0aaaa
   17118:	eeeed77a 	.word	0xeeeed77a
   1711c:	bfdeeeee 	.word	0xbfdeeeee

00017120 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   17120:	b480      	push	{r7}
   17122:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   17124:	f242 0320 	movw	r3, #8224	; 0x2020
   17128:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1712c:	2200      	movs	r2, #0
   1712e:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   17130:	f242 0309 	movw	r3, #8201	; 0x2009
   17134:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17138:	2219      	movs	r2, #25
   1713a:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   1713c:	f242 030b 	movw	r3, #8203	; 0x200b
   17140:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17144:	2200      	movs	r2, #0
   17146:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   17148:	f242 030a 	movw	r3, #8202	; 0x200a
   1714c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17150:	2208      	movs	r2, #8
   17152:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   17154:	f242 0320 	movw	r3, #8224	; 0x2020
   17158:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1715c:	2286      	movs	r2, #134	; 0x86
   1715e:	701a      	strb	r2, [r3, #0]
}
   17160:	46bd      	mov	sp, r7
   17162:	f85d 7b04 	ldr.w	r7, [sp], #4
   17166:	4770      	bx	lr

00017168 <uart_init_rx>:

void uart_init_rx() {
   17168:	b480      	push	{r7}
   1716a:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   1716c:	f242 030a 	movw	r3, #8202	; 0x200a
   17170:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17174:	f242 020a 	movw	r2, #8202	; 0x200a
   17178:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1717c:	7812      	ldrb	r2, [r2, #0]
   1717e:	b2d2      	uxtb	r2, r2
   17180:	f042 0210 	orr.w	r2, r2, #16
   17184:	b2d2      	uxtb	r2, r2
   17186:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   17188:	f242 030a 	movw	r3, #8202	; 0x200a
   1718c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17190:	f242 020a 	movw	r2, #8202	; 0x200a
   17194:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17198:	7812      	ldrb	r2, [r2, #0]
   1719a:	b2d2      	uxtb	r2, r2
   1719c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   171a0:	b2d2      	uxtb	r2, r2
   171a2:	701a      	strb	r2, [r3, #0]
}
   171a4:	46bd      	mov	sp, r7
   171a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   171aa:	4770      	bx	lr

000171ac <uart_transmit>:

void uart_transmit( unsigned char data ) {
   171ac:	b480      	push	{r7}
   171ae:	b083      	sub	sp, #12
   171b0:	af00      	add	r7, sp, #0
   171b2:	4603      	mov	r3, r0
   171b4:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   171b6:	f242 030a 	movw	r3, #8202	; 0x200a
   171ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   171be:	781b      	ldrb	r3, [r3, #0]
   171c0:	b2db      	uxtb	r3, r3
   171c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   171c6:	2b00      	cmp	r3, #0
   171c8:	d028      	beq.n	1721c <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   171ca:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   171ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   171d2:	781b      	ldrb	r3, [r3, #0]
   171d4:	b2db      	uxtb	r3, r3
   171d6:	461a      	mov	r2, r3
   171d8:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   171dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   171e0:	781b      	ldrb	r3, [r3, #0]
   171e2:	3301      	adds	r3, #1
   171e4:	429a      	cmp	r2, r3
   171e6:	d100      	bne.n	171ea <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   171e8:	e02c      	b.n	17244 <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   171ea:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   171ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   171f2:	781b      	ldrb	r3, [r3, #0]
   171f4:	461a      	mov	r2, r3
   171f6:	f64c 43c4 	movw	r3, #52420	; 0xccc4
   171fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   171fe:	79f9      	ldrb	r1, [r7, #7]
   17200:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   17202:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   17206:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1720a:	781b      	ldrb	r3, [r3, #0]
   1720c:	3301      	adds	r3, #1
   1720e:	b2da      	uxtb	r2, r3
   17210:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   17214:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17218:	701a      	strb	r2, [r3, #0]
   1721a:	e013      	b.n	17244 <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   1721c:	f242 030c 	movw	r3, #8204	; 0x200c
   17220:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17224:	79fa      	ldrb	r2, [r7, #7]
   17226:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   17228:	f242 030a 	movw	r3, #8202	; 0x200a
   1722c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17230:	f242 020a 	movw	r2, #8202	; 0x200a
   17234:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17238:	7812      	ldrb	r2, [r2, #0]
   1723a:	b2d2      	uxtb	r2, r2
   1723c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   17240:	b2d2      	uxtb	r2, r2
   17242:	701a      	strb	r2, [r3, #0]
  }
}
   17244:	370c      	adds	r7, #12
   17246:	46bd      	mov	sp, r7
   17248:	f85d 7b04 	ldr.w	r7, [sp], #4
   1724c:	4770      	bx	lr
   1724e:	bf00      	nop

00017250 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   17250:	b590      	push	{r4, r7, lr}
   17252:	b089      	sub	sp, #36	; 0x24
   17254:	af00      	add	r7, sp, #0
   17256:	4603      	mov	r3, r0
   17258:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   1725a:	f648 3350 	movw	r3, #35664	; 0x8b50
   1725e:	f2c0 0301 	movt	r3, #1
   17262:	f107 040c 	add.w	r4, r7, #12
   17266:	6818      	ldr	r0, [r3, #0]
   17268:	6859      	ldr	r1, [r3, #4]
   1726a:	689a      	ldr	r2, [r3, #8]
   1726c:	68db      	ldr	r3, [r3, #12]
   1726e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   17270:	79fb      	ldrb	r3, [r7, #7]
   17272:	091b      	lsrs	r3, r3, #4
   17274:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   17276:	79fb      	ldrb	r3, [r7, #7]
   17278:	f003 030f 	and.w	r3, r3, #15
   1727c:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   1727e:	230f      	movs	r3, #15
   17280:	77fb      	strb	r3, [r7, #31]
        low = 15;
   17282:	230f      	movs	r3, #15
   17284:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   17286:	7ffb      	ldrb	r3, [r7, #31]
   17288:	f107 0220 	add.w	r2, r7, #32
   1728c:	4413      	add	r3, r2
   1728e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   17292:	4618      	mov	r0, r3
   17294:	f7ff ff8a 	bl	171ac <uart_transmit>
  uart_transmit(hex[low]);
   17298:	7fbb      	ldrb	r3, [r7, #30]
   1729a:	f107 0220 	add.w	r2, r7, #32
   1729e:	4413      	add	r3, r2
   172a0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   172a4:	4618      	mov	r0, r3
   172a6:	f7ff ff81 	bl	171ac <uart_transmit>
} 
   172aa:	3724      	adds	r7, #36	; 0x24
   172ac:	46bd      	mov	sp, r7
   172ae:	bd90      	pop	{r4, r7, pc}

000172b0 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   172b0:	b580      	push	{r7, lr}
   172b2:	b084      	sub	sp, #16
   172b4:	af00      	add	r7, sp, #0
   172b6:	4603      	mov	r3, r0
   172b8:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   172ba:	88fb      	ldrh	r3, [r7, #6]
   172bc:	0a1b      	lsrs	r3, r3, #8
   172be:	b29b      	uxth	r3, r3
   172c0:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   172c2:	88fb      	ldrh	r3, [r7, #6]
   172c4:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   172c6:	7bfb      	ldrb	r3, [r7, #15]
   172c8:	4618      	mov	r0, r3
   172ca:	f7ff ffc1 	bl	17250 <uart_print_hex>
  uart_print_hex(low);
   172ce:	7bbb      	ldrb	r3, [r7, #14]
   172d0:	4618      	mov	r0, r3
   172d2:	f7ff ffbd 	bl	17250 <uart_print_hex>
}
   172d6:	3710      	adds	r7, #16
   172d8:	46bd      	mov	sp, r7
   172da:	bd80      	pop	{r7, pc}

000172dc <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   172dc:	b580      	push	{r7, lr}
   172de:	b084      	sub	sp, #16
   172e0:	af00      	add	r7, sp, #0
   172e2:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   172e4:	2300      	movs	r3, #0
   172e6:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   172e8:	e009      	b.n	172fe <uart_print_string+0x22>
    uart_transmit(s[i]);
   172ea:	7bfb      	ldrb	r3, [r7, #15]
   172ec:	687a      	ldr	r2, [r7, #4]
   172ee:	4413      	add	r3, r2
   172f0:	781b      	ldrb	r3, [r3, #0]
   172f2:	4618      	mov	r0, r3
   172f4:	f7ff ff5a 	bl	171ac <uart_transmit>
    i++;
   172f8:	7bfb      	ldrb	r3, [r7, #15]
   172fa:	3301      	adds	r3, #1
   172fc:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   172fe:	7bfb      	ldrb	r3, [r7, #15]
   17300:	687a      	ldr	r2, [r7, #4]
   17302:	4413      	add	r3, r2
   17304:	781b      	ldrb	r3, [r3, #0]
   17306:	2b00      	cmp	r3, #0
   17308:	d1ef      	bne.n	172ea <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   1730a:	3710      	adds	r7, #16
   1730c:	46bd      	mov	sp, r7
   1730e:	bd80      	pop	{r7, pc}

00017310 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   17310:	b480      	push	{r7}
   17312:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   17314:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   17318:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1731c:	781a      	ldrb	r2, [r3, #0]
   1731e:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   17322:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17326:	781b      	ldrb	r3, [r3, #0]
   17328:	b2db      	uxtb	r3, r3
   1732a:	429a      	cmp	r2, r3
   1732c:	d10e      	bne.n	1734c <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   1732e:	f242 030a 	movw	r3, #8202	; 0x200a
   17332:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17336:	f242 020a 	movw	r2, #8202	; 0x200a
   1733a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1733e:	7812      	ldrb	r2, [r2, #0]
   17340:	b2d2      	uxtb	r2, r2
   17342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   17346:	b2d2      	uxtb	r2, r2
   17348:	701a      	strb	r2, [r3, #0]
   1734a:	e01d      	b.n	17388 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   1734c:	f242 030c 	movw	r3, #8204	; 0x200c
   17350:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17354:	f64c 42c1 	movw	r2, #52417	; 0xccc1
   17358:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1735c:	7812      	ldrb	r2, [r2, #0]
   1735e:	b2d2      	uxtb	r2, r2
   17360:	4611      	mov	r1, r2
   17362:	f64c 42c4 	movw	r2, #52420	; 0xccc4
   17366:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1736a:	5c52      	ldrb	r2, [r2, r1]
   1736c:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   1736e:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   17372:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17376:	781b      	ldrb	r3, [r3, #0]
   17378:	b2db      	uxtb	r3, r3
   1737a:	3301      	adds	r3, #1
   1737c:	b2da      	uxtb	r2, r3
   1737e:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   17382:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17386:	701a      	strb	r2, [r3, #0]
  }
}
   17388:	46bd      	mov	sp, r7
   1738a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1738e:	4770      	bx	lr

00017390 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   17390:	b580      	push	{r7, lr}
   17392:	b082      	sub	sp, #8
   17394:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   17396:	2010      	movs	r0, #16
   17398:	2101      	movs	r1, #1
   1739a:	f7e9 fd11 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   1739e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   173a2:	f2c4 0001 	movt	r0, #16385	; 0x4001
   173a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   173aa:	2201      	movs	r2, #1
   173ac:	f7ea f818 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   173b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   173b4:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   173b6:	2310      	movs	r3, #16
   173b8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   173ba:	2303      	movs	r3, #3
   173bc:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   173be:	1d3b      	adds	r3, r7, #4
   173c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   173c4:	f2c4 0001 	movt	r0, #16385	; 0x4001
   173c8:	4619      	mov	r1, r3
   173ca:	f7e9 fecd 	bl	1168 <GPIO_Init>
}
   173ce:	3708      	adds	r7, #8
   173d0:	46bd      	mov	sp, r7
   173d2:	bd80      	pop	{r7, pc}

000173d4 <init_button>:

void init_button(void)
{
   173d4:	b580      	push	{r7, lr}
   173d6:	b082      	sub	sp, #8
   173d8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   173da:	2004      	movs	r0, #4
   173dc:	2101      	movs	r1, #1
   173de:	f7e9 fcef 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   173e2:	2301      	movs	r3, #1
   173e4:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   173e6:	2304      	movs	r3, #4
   173e8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   173ea:	2303      	movs	r3, #3
   173ec:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   173ee:	1d3b      	adds	r3, r7, #4
   173f0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   173f4:	f2c4 0001 	movt	r0, #16385	; 0x4001
   173f8:	4619      	mov	r1, r3
   173fa:	f7e9 feb5 	bl	1168 <GPIO_Init>
}
   173fe:	3708      	adds	r7, #8
   17400:	46bd      	mov	sp, r7
   17402:	bd80      	pop	{r7, pc}

00017404 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   17404:	b580      	push	{r7, lr}
   17406:	b084      	sub	sp, #16
   17408:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   1740a:	2001      	movs	r0, #1
   1740c:	2101      	movs	r1, #1
   1740e:	f7e9 fcd7 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   17412:	2000      	movs	r0, #0
   17414:	2100      	movs	r1, #0
   17416:	f7ea f8db 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   1741a:	2301      	movs	r3, #1
   1741c:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   1741e:	2300      	movs	r3, #0
   17420:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   17422:	2308      	movs	r3, #8
   17424:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   17426:	2301      	movs	r3, #1
   17428:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   1742a:	f107 0308 	add.w	r3, r7, #8
   1742e:	4618      	mov	r0, r3
   17430:	f7ea fdd4 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   17434:	2306      	movs	r3, #6
   17436:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   17438:	230f      	movs	r3, #15
   1743a:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   1743c:	230f      	movs	r3, #15
   1743e:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   17440:	2301      	movs	r3, #1
   17442:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   17444:	1d3b      	adds	r3, r7, #4
   17446:	4618      	mov	r0, r3
   17448:	f7ea ff02 	bl	2250 <NVIC_Init>
}
   1744c:	3710      	adds	r7, #16
   1744e:	46bd      	mov	sp, r7
   17450:	bd80      	pop	{r7, pc}
   17452:	bf00      	nop

00017454 <init_rs232>:

void init_rs232(void)
{
   17454:	b580      	push	{r7, lr}
   17456:	b086      	sub	sp, #24
   17458:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   1745a:	2005      	movs	r0, #5
   1745c:	2101      	movs	r1, #1
   1745e:	f7e9 fcaf 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   17462:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   17466:	2101      	movs	r1, #1
   17468:	f7e9 fcd2 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   1746c:	2308      	movs	r3, #8
   1746e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   17470:	2304      	movs	r3, #4
   17472:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   17474:	1d3b      	adds	r3, r7, #4
   17476:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1747a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1747e:	4619      	mov	r1, r3
   17480:	f7e9 fe72 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   17484:	2304      	movs	r3, #4
   17486:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17488:	2303      	movs	r3, #3
   1748a:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   1748c:	2318      	movs	r3, #24
   1748e:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   17490:	1d3b      	adds	r3, r7, #4
   17492:	f44f 6000 	mov.w	r0, #2048	; 0x800
   17496:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1749a:	4619      	mov	r1, r3
   1749c:	f7e9 fe64 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   174a0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   174a4:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   174a6:	2300      	movs	r3, #0
   174a8:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   174aa:	2300      	movs	r3, #0
   174ac:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   174ae:	2300      	movs	r3, #0
   174b0:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   174b2:	2300      	movs	r3, #0
   174b4:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   174b6:	230c      	movs	r3, #12
   174b8:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   174ba:	f107 0308 	add.w	r3, r7, #8
   174be:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   174c2:	f2c4 0000 	movt	r0, #16384	; 0x4000
   174c6:	4619      	mov	r1, r3
   174c8:	f7ea f936 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   174cc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   174d0:	f2c4 0000 	movt	r0, #16384	; 0x4000
   174d4:	2101      	movs	r1, #1
   174d6:	f7ea fa4d 	bl	1974 <USART_Cmd>
}
   174da:	3718      	adds	r7, #24
   174dc:	46bd      	mov	sp, r7
   174de:	bd80      	pop	{r7, pc}

000174e0 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   174e0:	b580      	push	{r7, lr}
   174e2:	b082      	sub	sp, #8
   174e4:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   174e6:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   174ea:	f2c4 0000 	movt	r0, #16384	; 0x4000
   174ee:	f240 7127 	movw	r1, #1831	; 0x727
   174f2:	2200      	movs	r2, #0
   174f4:	f7ea fa5e 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   174f8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   174fc:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17500:	f240 5125 	movw	r1, #1317	; 0x525
   17504:	2201      	movs	r2, #1
   17506:	f7ea fa55 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   1750a:	2326      	movs	r3, #38	; 0x26
   1750c:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   1750e:	2300      	movs	r3, #0
   17510:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   17512:	2301      	movs	r3, #1
   17514:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   17516:	1d3b      	adds	r3, r7, #4
   17518:	4618      	mov	r0, r3
   1751a:	f7ea fe99 	bl	2250 <NVIC_Init>
}
   1751e:	3708      	adds	r7, #8
   17520:	46bd      	mov	sp, r7
   17522:	bd80      	pop	{r7, pc}

00017524 <enable_rs232>:

void enable_rs232(void)
{
   17524:	b580      	push	{r7, lr}
   17526:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   17528:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1752c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17530:	2101      	movs	r1, #1
   17532:	f7ea fa1f 	bl	1974 <USART_Cmd>
}
   17536:	bd80      	pop	{r7, pc}

00017538 <send_byte>:

void send_byte(uint8_t b)
{
   17538:	b580      	push	{r7, lr}
   1753a:	b082      	sub	sp, #8
   1753c:	af00      	add	r7, sp, #0
   1753e:	4603      	mov	r3, r0
   17540:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   17542:	bf00      	nop
   17544:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17548:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1754c:	2180      	movs	r1, #128	; 0x80
   1754e:	f7ea fc7d 	bl	1e4c <USART_GetFlagStatus>
   17552:	4603      	mov	r3, r0
   17554:	2b00      	cmp	r3, #0
   17556:	d0f5      	beq.n	17544 <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   17558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1755c:	f2c4 0301 	movt	r3, #16385	; 0x4001
   17560:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   17564:	f2c4 0201 	movt	r2, #16385	; 0x4001
   17568:	68d2      	ldr	r2, [r2, #12]
   1756a:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   1756e:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   17570:	79fb      	ldrb	r3, [r7, #7]
   17572:	b29b      	uxth	r3, r3
   17574:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17578:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1757c:	4619      	mov	r1, r3
   1757e:	f7ea fb19 	bl	1bb4 <USART_SendData>
}
   17582:	3708      	adds	r7, #8
   17584:	46bd      	mov	sp, r7
   17586:	bd80      	pop	{r7, pc}

00017588 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   17588:	b580      	push	{r7, lr}
   1758a:	b082      	sub	sp, #8
   1758c:	af00      	add	r7, sp, #0
   1758e:	4603      	mov	r3, r0
   17590:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   17592:	79fb      	ldrb	r3, [r7, #7]
   17594:	3330      	adds	r3, #48	; 0x30
   17596:	b2db      	uxtb	r3, r3
   17598:	4618      	mov	r0, r3
   1759a:	f7ff ffcd 	bl	17538 <send_byte>
}
   1759e:	3708      	adds	r7, #8
   175a0:	46bd      	mov	sp, r7
   175a2:	bd80      	pop	{r7, pc}

000175a4 <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   175a4:	b580      	push	{r7, lr}
   175a6:	b084      	sub	sp, #16
   175a8:	af00      	add	r7, sp, #0
   175aa:	6078      	str	r0, [r7, #4]
    int i = 0;
   175ac:	2300      	movs	r3, #0
   175ae:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   175b0:	e009      	b.n	175c6 <vPrintString+0x22>
    {
        send_byte(string[i]);
   175b2:	68fb      	ldr	r3, [r7, #12]
   175b4:	687a      	ldr	r2, [r7, #4]
   175b6:	4413      	add	r3, r2
   175b8:	781b      	ldrb	r3, [r3, #0]
   175ba:	4618      	mov	r0, r3
   175bc:	f7ff ffbc 	bl	17538 <send_byte>
        i++;
   175c0:	68fb      	ldr	r3, [r7, #12]
   175c2:	3301      	adds	r3, #1
   175c4:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   175c6:	68fb      	ldr	r3, [r7, #12]
   175c8:	687a      	ldr	r2, [r7, #4]
   175ca:	4413      	add	r3, r2
   175cc:	781b      	ldrb	r3, [r3, #0]
   175ce:	2b00      	cmp	r3, #0
   175d0:	d1ef      	bne.n	175b2 <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   175d2:	3710      	adds	r7, #16
   175d4:	46bd      	mov	sp, r7
   175d6:	bd80      	pop	{r7, pc}

000175d8 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   175d8:	b580      	push	{r7, lr}
   175da:	b08a      	sub	sp, #40	; 0x28
   175dc:	af00      	add	r7, sp, #0
   175de:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   175e0:	2300      	movs	r3, #0
   175e2:	623b      	str	r3, [r7, #32]
    long num = c_num;
   175e4:	687b      	ldr	r3, [r7, #4]
   175e6:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   175e8:	69fb      	ldr	r3, [r7, #28]
   175ea:	2b00      	cmp	r3, #0
   175ec:	d106      	bne.n	175fc <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   175ee:	f648 3060 	movw	r0, #35680	; 0x8b60
   175f2:	f2c0 0001 	movt	r0, #1
   175f6:	f7ff ffd5 	bl	175a4 <vPrintString>
   175fa:	e062      	b.n	176c2 <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   175fc:	e024      	b.n	17648 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   175fe:	69f9      	ldr	r1, [r7, #28]
   17600:	f246 6367 	movw	r3, #26215	; 0x6667
   17604:	f2c6 6366 	movt	r3, #26214	; 0x6666
   17608:	fb83 2301 	smull	r2, r3, r3, r1
   1760c:	109a      	asrs	r2, r3, #2
   1760e:	17cb      	asrs	r3, r1, #31
   17610:	1ad2      	subs	r2, r2, r3
   17612:	4613      	mov	r3, r2
   17614:	009b      	lsls	r3, r3, #2
   17616:	4413      	add	r3, r2
   17618:	005b      	lsls	r3, r3, #1
   1761a:	1aca      	subs	r2, r1, r3
   1761c:	b2d3      	uxtb	r3, r2
   1761e:	3330      	adds	r3, #48	; 0x30
   17620:	b2da      	uxtb	r2, r3
   17622:	f107 010c 	add.w	r1, r7, #12
   17626:	6a3b      	ldr	r3, [r7, #32]
   17628:	440b      	add	r3, r1
   1762a:	701a      	strb	r2, [r3, #0]
            count ++;
   1762c:	6a3b      	ldr	r3, [r7, #32]
   1762e:	3301      	adds	r3, #1
   17630:	623b      	str	r3, [r7, #32]
            num /= 10;
   17632:	69fa      	ldr	r2, [r7, #28]
   17634:	f246 6367 	movw	r3, #26215	; 0x6667
   17638:	f2c6 6366 	movt	r3, #26214	; 0x6666
   1763c:	fb83 1302 	smull	r1, r3, r3, r2
   17640:	1099      	asrs	r1, r3, #2
   17642:	17d3      	asrs	r3, r2, #31
   17644:	1acb      	subs	r3, r1, r3
   17646:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   17648:	69fb      	ldr	r3, [r7, #28]
   1764a:	2b00      	cmp	r3, #0
   1764c:	d1d7      	bne.n	175fe <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   1764e:	f107 020c 	add.w	r2, r7, #12
   17652:	6a3b      	ldr	r3, [r7, #32]
   17654:	4413      	add	r3, r2
   17656:	2200      	movs	r2, #0
   17658:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   1765a:	2300      	movs	r3, #0
   1765c:	627b      	str	r3, [r7, #36]	; 0x24
   1765e:	e020      	b.n	176a2 <vPrintNumber+0xca>
        {
            tmp = time[i];
   17660:	f107 020c 	add.w	r2, r7, #12
   17664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17666:	4413      	add	r3, r2
   17668:	781b      	ldrb	r3, [r3, #0]
   1766a:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   1766c:	6a3a      	ldr	r2, [r7, #32]
   1766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17670:	1ad3      	subs	r3, r2, r3
   17672:	3b01      	subs	r3, #1
   17674:	f107 0228 	add.w	r2, r7, #40	; 0x28
   17678:	4413      	add	r3, r2
   1767a:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   1767e:	f107 010c 	add.w	r1, r7, #12
   17682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17684:	440b      	add	r3, r1
   17686:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   17688:	6a3a      	ldr	r2, [r7, #32]
   1768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1768c:	1ad3      	subs	r3, r2, r3
   1768e:	3b01      	subs	r3, #1
   17690:	f107 0128 	add.w	r1, r7, #40	; 0x28
   17694:	440b      	add	r3, r1
   17696:	7efa      	ldrb	r2, [r7, #27]
   17698:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   1769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1769e:	3301      	adds	r3, #1
   176a0:	627b      	str	r3, [r7, #36]	; 0x24
   176a2:	6a3b      	ldr	r3, [r7, #32]
   176a4:	085a      	lsrs	r2, r3, #1
   176a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   176a8:	429a      	cmp	r2, r3
   176aa:	d8d9      	bhi.n	17660 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   176ac:	f107 030c 	add.w	r3, r7, #12
   176b0:	4618      	mov	r0, r3
   176b2:	f7ff ff77 	bl	175a4 <vPrintString>
        vPrintString("\n\r");
   176b6:	f648 3064 	movw	r0, #35684	; 0x8b64
   176ba:	f2c0 0001 	movt	r0, #1
   176be:	f7ff ff71 	bl	175a4 <vPrintString>
    }
}
   176c2:	3728      	adds	r7, #40	; 0x28
   176c4:	46bd      	mov	sp, r7
   176c6:	bd80      	pop	{r7, pc}

000176c8 <vStartTask>:
extern portBASE_TYPE xSensorOfTask[NUMBEROFTASK];
extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

// init program to start all task when system init
void vStartTask()
{
   176c8:	b580      	push	{r7, lr}
   176ca:	b084      	sub	sp, #16
   176cc:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;

    for( i = 0; i < NUMBEROFTASK; ++i )
   176ce:	2300      	movs	r3, #0
   176d0:	60fb      	str	r3, [r7, #12]
   176d2:	e01e      	b.n	17712 <vStartTask+0x4a>
    {
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i], xPeriodOfTask[i], &null_data);
   176d4:	f240 0390 	movw	r3, #144	; 0x90
   176d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   176dc:	68fa      	ldr	r2, [r7, #12]
   176de:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   176e2:	f240 0328 	movw	r3, #40	; 0x28
   176e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   176ea:	68fa      	ldr	r2, [r7, #12]
   176ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   176f0:	f240 0328 	movw	r3, #40	; 0x28
   176f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   176f8:	68fa      	ldr	r2, [r7, #12]
   176fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   176fe:	463b      	mov	r3, r7
   17700:	f7eb faf2 	bl	2ce8 <pxEventGenericCreate>
   17704:	60b8      	str	r0, [r7, #8]
        vEventSend( pxEvent );   
   17706:	68b8      	ldr	r0, [r7, #8]
   17708:	f7eb feae 	bl	3468 <vEventGenericSend>
{
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;

    for( i = 0; i < NUMBEROFTASK; ++i )
   1770c:	68fb      	ldr	r3, [r7, #12]
   1770e:	3301      	adds	r3, #1
   17710:	60fb      	str	r3, [r7, #12]
   17712:	68fb      	ldr	r3, [r7, #12]
   17714:	2b0c      	cmp	r3, #12
   17716:	dddd      	ble.n	176d4 <vStartTask+0xc>
    {
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i], xPeriodOfTask[i], &null_data);
        vEventSend( pxEvent );   
    }
}
   17718:	3710      	adds	r7, #16
   1771a:	46bd      	mov	sp, r7
   1771c:	bd80      	pop	{r7, pc}
   1771e:	bf00      	nop

00017720 <vEventInterrupt>:

void vEventInterrupt(void * pvParameters)
{
   17720:	b580      	push	{r7, lr}
   17722:	b082      	sub	sp, #8
   17724:	af00      	add	r7, sp, #0
   17726:	6078      	str	r0, [r7, #4]
    vSemaphoreCreateBinary( xInterruptSemaphore );
   17728:	2001      	movs	r0, #1
   1772a:	2100      	movs	r1, #0
   1772c:	2203      	movs	r2, #3
   1772e:	f7ec fe05 	bl	433c <xQueueGenericCreate>
   17732:	4602      	mov	r2, r0
   17734:	f64c 53d4 	movw	r3, #52692	; 0xcdd4
   17738:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1773c:	601a      	str	r2, [r3, #0]
   1773e:	f64c 53d4 	movw	r3, #52692	; 0xcdd4
   17742:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17746:	681b      	ldr	r3, [r3, #0]
   17748:	2b00      	cmp	r3, #0
   1774a:	d00a      	beq.n	17762 <vEventInterrupt+0x42>
   1774c:	f64c 53d4 	movw	r3, #52692	; 0xcdd4
   17750:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17754:	681b      	ldr	r3, [r3, #0]
   17756:	4618      	mov	r0, r3
   17758:	2100      	movs	r1, #0
   1775a:	2200      	movs	r2, #0
   1775c:	2300      	movs	r3, #0
   1775e:	f7ec fe7b 	bl	4458 <xQueueGenericSend>
    xSemaphoreTake(xInterruptSemaphore, portMAX_DELAY);
   17762:	f64c 53d4 	movw	r3, #52692	; 0xcdd4
   17766:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1776a:	681b      	ldr	r3, [r3, #0]
   1776c:	4618      	mov	r0, r3
   1776e:	2100      	movs	r1, #0
   17770:	f04f 32ff 	mov.w	r2, #4294967295
   17774:	2300      	movs	r3, #0
   17776:	f7ec ff35 	bl	45e4 <xQueueGenericReceive>
    while(1)
    {
        //xSemaphoreTake(xInterruptSemaphore, portMAX_DELAY);
        if(xIsExecutableEventArrive())
   1777a:	f7eb f9d9 	bl	2b30 <xIsExecutableEventArrive>
   1777e:	4603      	mov	r3, r0
   17780:	2b00      	cmp	r3, #0
   17782:	d00a      	beq.n	1779a <vEventInterrupt+0x7a>
        {
            xSemaphoreGive( xBinarySemaphore[0] );
   17784:	f241 3354 	movw	r3, #4948	; 0x1354
   17788:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1778c:	681b      	ldr	r3, [r3, #0]
   1778e:	4618      	mov	r0, r3
   17790:	2100      	movs	r1, #0
   17792:	2200      	movs	r2, #0
   17794:	2300      	movs	r3, #0
   17796:	f7ec fe5f 	bl	4458 <xQueueGenericSend>
        }
        taskYIELD();
   1779a:	f7ee fa97 	bl	5ccc <vPortYieldFromISR>
    }
   1779e:	e7ec      	b.n	1777a <vEventInterrupt+0x5a>

000177a0 <main>:
}

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   177a0:	b580      	push	{r7, lr}
   177a2:	b086      	sub	sp, #24
   177a4:	af04      	add	r7, sp, #16
    init_led();
   177a6:	f7ff fdf3 	bl	17390 <init_led>
    init_rs232();
   177aa:	f7ff fe53 	bl	17454 <init_rs232>
    enable_rs232_interrupts();
   177ae:	f7ff fe97 	bl	174e0 <enable_rs232_interrupts>
    enable_rs232();
   177b2:	f7ff feb7 	bl	17524 <enable_rs232>
    vSemaphoreInitialise();
   177b6:	f7eb febf 	bl	3538 <vSemaphoreInitialise>
    vContextInit();
   177ba:	f7eb fefd 	bl	35b8 <vContextInit>
    vInitialiseEventLists();  
   177be:	f7eb f953 	bl	2a68 <vInitialiseEventLists>
    vStartTask();
   177c2:	f7ff ff81 	bl	176c8 <vStartTask>
    PapabenchInit();
   177c6:	f7ec fab5 	bl	3d34 <PapabenchInit>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;
   177ca:	2300      	movs	r3, #0
   177cc:	607b      	str	r3, [r7, #4]

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[0]);
   177ce:	2302      	movs	r3, #2
   177d0:	9300      	str	r3, [sp, #0]
   177d2:	f64c 53c4 	movw	r3, #52676	; 0xcdc4
   177d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   177da:	9301      	str	r3, [sp, #4]
   177dc:	2300      	movs	r3, #0
   177de:	9302      	str	r3, [sp, #8]
   177e0:	2300      	movs	r3, #0
   177e2:	9303      	str	r3, [sp, #12]
   177e4:	f643 405d 	movw	r0, #15453	; 0x3c5d
   177e8:	f2c0 0000 	movt	r0, #0
   177ec:	f648 3168 	movw	r1, #35688	; 0x8b68
   177f0:	f2c0 0101 	movt	r1, #1
   177f4:	2280      	movs	r2, #128	; 0x80
   177f6:	2300      	movs	r3, #0
   177f8:	f7ed f940 	bl	4a7c <xTaskGenericCreate>
    xTaskCreate( vSensor, "I-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[1]);
   177fc:	2302      	movs	r3, #2
   177fe:	9300      	str	r3, [sp, #0]
   17800:	4b2f      	ldr	r3, [pc, #188]	; (178c0 <main+0x120>)
   17802:	9301      	str	r3, [sp, #4]
   17804:	2300      	movs	r3, #0
   17806:	9302      	str	r3, [sp, #8]
   17808:	2300      	movs	r3, #0
   1780a:	9303      	str	r3, [sp, #12]
   1780c:	f643 009d 	movw	r0, #14493	; 0x389d
   17810:	f2c0 0000 	movt	r0, #0
   17814:	f648 3174 	movw	r1, #35700	; 0x8b74
   17818:	f2c0 0101 	movt	r1, #1
   1781c:	2280      	movs	r2, #128	; 0x80
   1781e:	2300      	movs	r3, #0
   17820:	f7ed f92c 	bl	4a7c <xTaskGenericCreate>
    xTaskCreate( vServant, "C-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[2]);
   17824:	2302      	movs	r3, #2
   17826:	9300      	str	r3, [sp, #0]
   17828:	4b26      	ldr	r3, [pc, #152]	; (178c4 <main+0x124>)
   1782a:	9301      	str	r3, [sp, #4]
   1782c:	2300      	movs	r3, #0
   1782e:	9302      	str	r3, [sp, #8]
   17830:	2300      	movs	r3, #0
   17832:	9303      	str	r3, [sp, #12]
   17834:	f643 10c5 	movw	r0, #14789	; 0x39c5
   17838:	f2c0 0000 	movt	r0, #0
   1783c:	f648 3180 	movw	r1, #35712	; 0x8b80
   17840:	f2c0 0101 	movt	r1, #1
   17844:	2280      	movs	r2, #128	; 0x80
   17846:	2300      	movs	r3, #0
   17848:	f7ed f918 	bl	4a7c <xTaskGenericCreate>
    xTaskCreate( vActuator, "O-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[3]);
   1784c:	2302      	movs	r3, #2
   1784e:	9300      	str	r3, [sp, #0]
   17850:	4b1d      	ldr	r3, [pc, #116]	; (178c8 <main+0x128>)
   17852:	9301      	str	r3, [sp, #4]
   17854:	2300      	movs	r3, #0
   17856:	9302      	str	r3, [sp, #8]
   17858:	2300      	movs	r3, #0
   1785a:	9303      	str	r3, [sp, #12]
   1785c:	f643 3041 	movw	r0, #15169	; 0x3b41
   17860:	f2c0 0000 	movt	r0, #0
   17864:	f648 318c 	movw	r1, #35724	; 0x8b8c
   17868:	f2c0 0101 	movt	r1, #1
   1786c:	2280      	movs	r2, #128	; 0x80
   1786e:	2300      	movs	r3, #0
   17870:	f7ed f904 	bl	4a7c <xTaskGenericCreate>
    xTaskCreate( vEventInterrupt, "event", SERVANT_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL );
   17874:	2301      	movs	r3, #1
   17876:	9300      	str	r3, [sp, #0]
   17878:	2300      	movs	r3, #0
   1787a:	9301      	str	r3, [sp, #4]
   1787c:	2300      	movs	r3, #0
   1787e:	9302      	str	r3, [sp, #8]
   17880:	2300      	movs	r3, #0
   17882:	9303      	str	r3, [sp, #12]
   17884:	f247 7021 	movw	r0, #30497	; 0x7721
   17888:	f2c0 0001 	movt	r0, #1
   1788c:	f648 3198 	movw	r1, #35736	; 0x8b98
   17890:	f2c0 0101 	movt	r1, #1
   17894:	2280      	movs	r2, #128	; 0x80
   17896:	2300      	movs	r3, #0
   17898:	f7ed f8f0 	bl	4a7c <xTaskGenericCreate>

    xSemaphoreGive(xBinarySemaphore[0]);
   1789c:	f241 3354 	movw	r3, #4948	; 0x1354
   178a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   178a4:	681b      	ldr	r3, [r3, #0]
   178a6:	4618      	mov	r0, r3
   178a8:	2100      	movs	r1, #0
   178aa:	2200      	movs	r2, #0
   178ac:	2300      	movs	r3, #0
   178ae:	f7ec fdd3 	bl	4458 <xQueueGenericSend>
    vTaskStartScheduler();
   178b2:	f7ed fc61 	bl	5178 <vTaskStartScheduler>

    return 0;
   178b6:	2300      	movs	r3, #0
}
   178b8:	4618      	mov	r0, r3
   178ba:	3708      	adds	r7, #8
   178bc:	46bd      	mov	sp, r7
   178be:	bd80      	pop	{r7, pc}
   178c0:	2004cdc8 	.word	0x2004cdc8
   178c4:	2004cdcc 	.word	0x2004cdcc
   178c8:	2004cdd0 	.word	0x2004cdd0

000178cc <myTraceCreate>:

void myTraceCreate      (){
   178cc:	b480      	push	{r7}
   178ce:	af00      	add	r7, sp, #0
}
   178d0:	46bd      	mov	sp, r7
   178d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   178d6:	4770      	bx	lr

000178d8 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   178d8:	b480      	push	{r7}
   178da:	af00      	add	r7, sp, #0
}
   178dc:	46bd      	mov	sp, r7
   178de:	f85d 7b04 	ldr.w	r7, [sp], #4
   178e2:	4770      	bx	lr

000178e4 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   178e4:	b480      	push	{r7}
   178e6:	af00      	add	r7, sp, #0
}
   178e8:	46bd      	mov	sp, r7
   178ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   178ee:	4770      	bx	lr

000178f0 <vApplicationTickHook>:
 /*
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   178f0:	b480      	push	{r7}
   178f2:	af00      	add	r7, sp, #0
    //xSemaphoreGive( xInterruptSemaphore );
}
   178f4:	46bd      	mov	sp, r7
   178f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   178fa:	4770      	bx	lr

000178fc <__aeabi_drsub>:
   178fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   17900:	e002      	b.n	17908 <__adddf3>
   17902:	bf00      	nop

00017904 <__aeabi_dsub>:
   17904:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00017908 <__adddf3>:
   17908:	b530      	push	{r4, r5, lr}
   1790a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1790e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   17912:	ea94 0f05 	teq	r4, r5
   17916:	bf08      	it	eq
   17918:	ea90 0f02 	teqeq	r0, r2
   1791c:	bf1f      	itttt	ne
   1791e:	ea54 0c00 	orrsne.w	ip, r4, r0
   17922:	ea55 0c02 	orrsne.w	ip, r5, r2
   17926:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1792a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1792e:	f000 80e2 	beq.w	17af6 <__adddf3+0x1ee>
   17932:	ea4f 5454 	mov.w	r4, r4, lsr #21
   17936:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1793a:	bfb8      	it	lt
   1793c:	426d      	neglt	r5, r5
   1793e:	dd0c      	ble.n	1795a <__adddf3+0x52>
   17940:	442c      	add	r4, r5
   17942:	ea80 0202 	eor.w	r2, r0, r2
   17946:	ea81 0303 	eor.w	r3, r1, r3
   1794a:	ea82 0000 	eor.w	r0, r2, r0
   1794e:	ea83 0101 	eor.w	r1, r3, r1
   17952:	ea80 0202 	eor.w	r2, r0, r2
   17956:	ea81 0303 	eor.w	r3, r1, r3
   1795a:	2d36      	cmp	r5, #54	; 0x36
   1795c:	bf88      	it	hi
   1795e:	bd30      	pophi	{r4, r5, pc}
   17960:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17964:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17968:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1796c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   17970:	d002      	beq.n	17978 <__adddf3+0x70>
   17972:	4240      	negs	r0, r0
   17974:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17978:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1797c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17980:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   17984:	d002      	beq.n	1798c <__adddf3+0x84>
   17986:	4252      	negs	r2, r2
   17988:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1798c:	ea94 0f05 	teq	r4, r5
   17990:	f000 80a7 	beq.w	17ae2 <__adddf3+0x1da>
   17994:	f1a4 0401 	sub.w	r4, r4, #1
   17998:	f1d5 0e20 	rsbs	lr, r5, #32
   1799c:	db0d      	blt.n	179ba <__adddf3+0xb2>
   1799e:	fa02 fc0e 	lsl.w	ip, r2, lr
   179a2:	fa22 f205 	lsr.w	r2, r2, r5
   179a6:	1880      	adds	r0, r0, r2
   179a8:	f141 0100 	adc.w	r1, r1, #0
   179ac:	fa03 f20e 	lsl.w	r2, r3, lr
   179b0:	1880      	adds	r0, r0, r2
   179b2:	fa43 f305 	asr.w	r3, r3, r5
   179b6:	4159      	adcs	r1, r3
   179b8:	e00e      	b.n	179d8 <__adddf3+0xd0>
   179ba:	f1a5 0520 	sub.w	r5, r5, #32
   179be:	f10e 0e20 	add.w	lr, lr, #32
   179c2:	2a01      	cmp	r2, #1
   179c4:	fa03 fc0e 	lsl.w	ip, r3, lr
   179c8:	bf28      	it	cs
   179ca:	f04c 0c02 	orrcs.w	ip, ip, #2
   179ce:	fa43 f305 	asr.w	r3, r3, r5
   179d2:	18c0      	adds	r0, r0, r3
   179d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   179d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   179dc:	d507      	bpl.n	179ee <__adddf3+0xe6>
   179de:	f04f 0e00 	mov.w	lr, #0
   179e2:	f1dc 0c00 	rsbs	ip, ip, #0
   179e6:	eb7e 0000 	sbcs.w	r0, lr, r0
   179ea:	eb6e 0101 	sbc.w	r1, lr, r1
   179ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   179f2:	d31b      	bcc.n	17a2c <__adddf3+0x124>
   179f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   179f8:	d30c      	bcc.n	17a14 <__adddf3+0x10c>
   179fa:	0849      	lsrs	r1, r1, #1
   179fc:	ea5f 0030 	movs.w	r0, r0, rrx
   17a00:	ea4f 0c3c 	mov.w	ip, ip, rrx
   17a04:	f104 0401 	add.w	r4, r4, #1
   17a08:	ea4f 5244 	mov.w	r2, r4, lsl #21
   17a0c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   17a10:	f080 809a 	bcs.w	17b48 <__adddf3+0x240>
   17a14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   17a18:	bf08      	it	eq
   17a1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17a1e:	f150 0000 	adcs.w	r0, r0, #0
   17a22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17a26:	ea41 0105 	orr.w	r1, r1, r5
   17a2a:	bd30      	pop	{r4, r5, pc}
   17a2c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   17a30:	4140      	adcs	r0, r0
   17a32:	eb41 0101 	adc.w	r1, r1, r1
   17a36:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17a3a:	f1a4 0401 	sub.w	r4, r4, #1
   17a3e:	d1e9      	bne.n	17a14 <__adddf3+0x10c>
   17a40:	f091 0f00 	teq	r1, #0
   17a44:	bf04      	itt	eq
   17a46:	4601      	moveq	r1, r0
   17a48:	2000      	moveq	r0, #0
   17a4a:	fab1 f381 	clz	r3, r1
   17a4e:	bf08      	it	eq
   17a50:	3320      	addeq	r3, #32
   17a52:	f1a3 030b 	sub.w	r3, r3, #11
   17a56:	f1b3 0220 	subs.w	r2, r3, #32
   17a5a:	da0c      	bge.n	17a76 <__adddf3+0x16e>
   17a5c:	320c      	adds	r2, #12
   17a5e:	dd08      	ble.n	17a72 <__adddf3+0x16a>
   17a60:	f102 0c14 	add.w	ip, r2, #20
   17a64:	f1c2 020c 	rsb	r2, r2, #12
   17a68:	fa01 f00c 	lsl.w	r0, r1, ip
   17a6c:	fa21 f102 	lsr.w	r1, r1, r2
   17a70:	e00c      	b.n	17a8c <__adddf3+0x184>
   17a72:	f102 0214 	add.w	r2, r2, #20
   17a76:	bfd8      	it	le
   17a78:	f1c2 0c20 	rsble	ip, r2, #32
   17a7c:	fa01 f102 	lsl.w	r1, r1, r2
   17a80:	fa20 fc0c 	lsr.w	ip, r0, ip
   17a84:	bfdc      	itt	le
   17a86:	ea41 010c 	orrle.w	r1, r1, ip
   17a8a:	4090      	lslle	r0, r2
   17a8c:	1ae4      	subs	r4, r4, r3
   17a8e:	bfa2      	ittt	ge
   17a90:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   17a94:	4329      	orrge	r1, r5
   17a96:	bd30      	popge	{r4, r5, pc}
   17a98:	ea6f 0404 	mvn.w	r4, r4
   17a9c:	3c1f      	subs	r4, #31
   17a9e:	da1c      	bge.n	17ada <__adddf3+0x1d2>
   17aa0:	340c      	adds	r4, #12
   17aa2:	dc0e      	bgt.n	17ac2 <__adddf3+0x1ba>
   17aa4:	f104 0414 	add.w	r4, r4, #20
   17aa8:	f1c4 0220 	rsb	r2, r4, #32
   17aac:	fa20 f004 	lsr.w	r0, r0, r4
   17ab0:	fa01 f302 	lsl.w	r3, r1, r2
   17ab4:	ea40 0003 	orr.w	r0, r0, r3
   17ab8:	fa21 f304 	lsr.w	r3, r1, r4
   17abc:	ea45 0103 	orr.w	r1, r5, r3
   17ac0:	bd30      	pop	{r4, r5, pc}
   17ac2:	f1c4 040c 	rsb	r4, r4, #12
   17ac6:	f1c4 0220 	rsb	r2, r4, #32
   17aca:	fa20 f002 	lsr.w	r0, r0, r2
   17ace:	fa01 f304 	lsl.w	r3, r1, r4
   17ad2:	ea40 0003 	orr.w	r0, r0, r3
   17ad6:	4629      	mov	r1, r5
   17ad8:	bd30      	pop	{r4, r5, pc}
   17ada:	fa21 f004 	lsr.w	r0, r1, r4
   17ade:	4629      	mov	r1, r5
   17ae0:	bd30      	pop	{r4, r5, pc}
   17ae2:	f094 0f00 	teq	r4, #0
   17ae6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   17aea:	bf06      	itte	eq
   17aec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   17af0:	3401      	addeq	r4, #1
   17af2:	3d01      	subne	r5, #1
   17af4:	e74e      	b.n	17994 <__adddf3+0x8c>
   17af6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17afa:	bf18      	it	ne
   17afc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17b00:	d029      	beq.n	17b56 <__adddf3+0x24e>
   17b02:	ea94 0f05 	teq	r4, r5
   17b06:	bf08      	it	eq
   17b08:	ea90 0f02 	teqeq	r0, r2
   17b0c:	d005      	beq.n	17b1a <__adddf3+0x212>
   17b0e:	ea54 0c00 	orrs.w	ip, r4, r0
   17b12:	bf04      	itt	eq
   17b14:	4619      	moveq	r1, r3
   17b16:	4610      	moveq	r0, r2
   17b18:	bd30      	pop	{r4, r5, pc}
   17b1a:	ea91 0f03 	teq	r1, r3
   17b1e:	bf1e      	ittt	ne
   17b20:	2100      	movne	r1, #0
   17b22:	2000      	movne	r0, #0
   17b24:	bd30      	popne	{r4, r5, pc}
   17b26:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   17b2a:	d105      	bne.n	17b38 <__adddf3+0x230>
   17b2c:	0040      	lsls	r0, r0, #1
   17b2e:	4149      	adcs	r1, r1
   17b30:	bf28      	it	cs
   17b32:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   17b36:	bd30      	pop	{r4, r5, pc}
   17b38:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17b3c:	bf3c      	itt	cc
   17b3e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   17b42:	bd30      	popcc	{r4, r5, pc}
   17b44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17b48:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   17b4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17b50:	f04f 0000 	mov.w	r0, #0
   17b54:	bd30      	pop	{r4, r5, pc}
   17b56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17b5a:	bf1a      	itte	ne
   17b5c:	4619      	movne	r1, r3
   17b5e:	4610      	movne	r0, r2
   17b60:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   17b64:	bf1c      	itt	ne
   17b66:	460b      	movne	r3, r1
   17b68:	4602      	movne	r2, r0
   17b6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17b6e:	bf06      	itte	eq
   17b70:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   17b74:	ea91 0f03 	teqeq	r1, r3
   17b78:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   17b7c:	bd30      	pop	{r4, r5, pc}
   17b7e:	bf00      	nop

00017b80 <__aeabi_ui2d>:
   17b80:	f090 0f00 	teq	r0, #0
   17b84:	bf04      	itt	eq
   17b86:	2100      	moveq	r1, #0
   17b88:	4770      	bxeq	lr
   17b8a:	b530      	push	{r4, r5, lr}
   17b8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17b90:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17b94:	f04f 0500 	mov.w	r5, #0
   17b98:	f04f 0100 	mov.w	r1, #0
   17b9c:	e750      	b.n	17a40 <__adddf3+0x138>
   17b9e:	bf00      	nop

00017ba0 <__aeabi_i2d>:
   17ba0:	f090 0f00 	teq	r0, #0
   17ba4:	bf04      	itt	eq
   17ba6:	2100      	moveq	r1, #0
   17ba8:	4770      	bxeq	lr
   17baa:	b530      	push	{r4, r5, lr}
   17bac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17bb0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17bb4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   17bb8:	bf48      	it	mi
   17bba:	4240      	negmi	r0, r0
   17bbc:	f04f 0100 	mov.w	r1, #0
   17bc0:	e73e      	b.n	17a40 <__adddf3+0x138>
   17bc2:	bf00      	nop

00017bc4 <__aeabi_f2d>:
   17bc4:	0042      	lsls	r2, r0, #1
   17bc6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   17bca:	ea4f 0131 	mov.w	r1, r1, rrx
   17bce:	ea4f 7002 	mov.w	r0, r2, lsl #28
   17bd2:	bf1f      	itttt	ne
   17bd4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   17bd8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17bdc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   17be0:	4770      	bxne	lr
   17be2:	f092 0f00 	teq	r2, #0
   17be6:	bf14      	ite	ne
   17be8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17bec:	4770      	bxeq	lr
   17bee:	b530      	push	{r4, r5, lr}
   17bf0:	f44f 7460 	mov.w	r4, #896	; 0x380
   17bf4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17bf8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17bfc:	e720      	b.n	17a40 <__adddf3+0x138>
   17bfe:	bf00      	nop

00017c00 <__aeabi_ul2d>:
   17c00:	ea50 0201 	orrs.w	r2, r0, r1
   17c04:	bf08      	it	eq
   17c06:	4770      	bxeq	lr
   17c08:	b530      	push	{r4, r5, lr}
   17c0a:	f04f 0500 	mov.w	r5, #0
   17c0e:	e00a      	b.n	17c26 <__aeabi_l2d+0x16>

00017c10 <__aeabi_l2d>:
   17c10:	ea50 0201 	orrs.w	r2, r0, r1
   17c14:	bf08      	it	eq
   17c16:	4770      	bxeq	lr
   17c18:	b530      	push	{r4, r5, lr}
   17c1a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   17c1e:	d502      	bpl.n	17c26 <__aeabi_l2d+0x16>
   17c20:	4240      	negs	r0, r0
   17c22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17c26:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17c2a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17c2e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   17c32:	f43f aedc 	beq.w	179ee <__adddf3+0xe6>
   17c36:	f04f 0203 	mov.w	r2, #3
   17c3a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17c3e:	bf18      	it	ne
   17c40:	3203      	addne	r2, #3
   17c42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17c46:	bf18      	it	ne
   17c48:	3203      	addne	r2, #3
   17c4a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   17c4e:	f1c2 0320 	rsb	r3, r2, #32
   17c52:	fa00 fc03 	lsl.w	ip, r0, r3
   17c56:	fa20 f002 	lsr.w	r0, r0, r2
   17c5a:	fa01 fe03 	lsl.w	lr, r1, r3
   17c5e:	ea40 000e 	orr.w	r0, r0, lr
   17c62:	fa21 f102 	lsr.w	r1, r1, r2
   17c66:	4414      	add	r4, r2
   17c68:	e6c1      	b.n	179ee <__adddf3+0xe6>
   17c6a:	bf00      	nop

00017c6c <__aeabi_dmul>:
   17c6c:	b570      	push	{r4, r5, r6, lr}
   17c6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17c72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17c76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17c7a:	bf1d      	ittte	ne
   17c7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17c80:	ea94 0f0c 	teqne	r4, ip
   17c84:	ea95 0f0c 	teqne	r5, ip
   17c88:	f000 f8de 	bleq	17e48 <__aeabi_dmul+0x1dc>
   17c8c:	442c      	add	r4, r5
   17c8e:	ea81 0603 	eor.w	r6, r1, r3
   17c92:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   17c96:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   17c9a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   17c9e:	bf18      	it	ne
   17ca0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   17ca4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17ca8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17cac:	d038      	beq.n	17d20 <__aeabi_dmul+0xb4>
   17cae:	fba0 ce02 	umull	ip, lr, r0, r2
   17cb2:	f04f 0500 	mov.w	r5, #0
   17cb6:	fbe1 e502 	umlal	lr, r5, r1, r2
   17cba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   17cbe:	fbe0 e503 	umlal	lr, r5, r0, r3
   17cc2:	f04f 0600 	mov.w	r6, #0
   17cc6:	fbe1 5603 	umlal	r5, r6, r1, r3
   17cca:	f09c 0f00 	teq	ip, #0
   17cce:	bf18      	it	ne
   17cd0:	f04e 0e01 	orrne.w	lr, lr, #1
   17cd4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   17cd8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17cdc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17ce0:	d204      	bcs.n	17cec <__aeabi_dmul+0x80>
   17ce2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17ce6:	416d      	adcs	r5, r5
   17ce8:	eb46 0606 	adc.w	r6, r6, r6
   17cec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17cf0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17cf4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17cf8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17cfc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17d00:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17d04:	bf88      	it	hi
   17d06:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17d0a:	d81e      	bhi.n	17d4a <__aeabi_dmul+0xde>
   17d0c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17d10:	bf08      	it	eq
   17d12:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17d16:	f150 0000 	adcs.w	r0, r0, #0
   17d1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17d1e:	bd70      	pop	{r4, r5, r6, pc}
   17d20:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17d24:	ea46 0101 	orr.w	r1, r6, r1
   17d28:	ea40 0002 	orr.w	r0, r0, r2
   17d2c:	ea81 0103 	eor.w	r1, r1, r3
   17d30:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17d34:	bfc2      	ittt	gt
   17d36:	ebd4 050c 	rsbsgt	r5, r4, ip
   17d3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17d3e:	bd70      	popgt	{r4, r5, r6, pc}
   17d40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17d44:	f04f 0e00 	mov.w	lr, #0
   17d48:	3c01      	subs	r4, #1
   17d4a:	f300 80ab 	bgt.w	17ea4 <__aeabi_dmul+0x238>
   17d4e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17d52:	bfde      	ittt	le
   17d54:	2000      	movle	r0, #0
   17d56:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17d5a:	bd70      	pople	{r4, r5, r6, pc}
   17d5c:	f1c4 0400 	rsb	r4, r4, #0
   17d60:	3c20      	subs	r4, #32
   17d62:	da35      	bge.n	17dd0 <__aeabi_dmul+0x164>
   17d64:	340c      	adds	r4, #12
   17d66:	dc1b      	bgt.n	17da0 <__aeabi_dmul+0x134>
   17d68:	f104 0414 	add.w	r4, r4, #20
   17d6c:	f1c4 0520 	rsb	r5, r4, #32
   17d70:	fa00 f305 	lsl.w	r3, r0, r5
   17d74:	fa20 f004 	lsr.w	r0, r0, r4
   17d78:	fa01 f205 	lsl.w	r2, r1, r5
   17d7c:	ea40 0002 	orr.w	r0, r0, r2
   17d80:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   17d84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17d88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17d8c:	fa21 f604 	lsr.w	r6, r1, r4
   17d90:	eb42 0106 	adc.w	r1, r2, r6
   17d94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17d98:	bf08      	it	eq
   17d9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17d9e:	bd70      	pop	{r4, r5, r6, pc}
   17da0:	f1c4 040c 	rsb	r4, r4, #12
   17da4:	f1c4 0520 	rsb	r5, r4, #32
   17da8:	fa00 f304 	lsl.w	r3, r0, r4
   17dac:	fa20 f005 	lsr.w	r0, r0, r5
   17db0:	fa01 f204 	lsl.w	r2, r1, r4
   17db4:	ea40 0002 	orr.w	r0, r0, r2
   17db8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17dbc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17dc0:	f141 0100 	adc.w	r1, r1, #0
   17dc4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17dc8:	bf08      	it	eq
   17dca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17dce:	bd70      	pop	{r4, r5, r6, pc}
   17dd0:	f1c4 0520 	rsb	r5, r4, #32
   17dd4:	fa00 f205 	lsl.w	r2, r0, r5
   17dd8:	ea4e 0e02 	orr.w	lr, lr, r2
   17ddc:	fa20 f304 	lsr.w	r3, r0, r4
   17de0:	fa01 f205 	lsl.w	r2, r1, r5
   17de4:	ea43 0302 	orr.w	r3, r3, r2
   17de8:	fa21 f004 	lsr.w	r0, r1, r4
   17dec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17df0:	fa21 f204 	lsr.w	r2, r1, r4
   17df4:	ea20 0002 	bic.w	r0, r0, r2
   17df8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17dfc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17e00:	bf08      	it	eq
   17e02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17e06:	bd70      	pop	{r4, r5, r6, pc}
   17e08:	f094 0f00 	teq	r4, #0
   17e0c:	d10f      	bne.n	17e2e <__aeabi_dmul+0x1c2>
   17e0e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17e12:	0040      	lsls	r0, r0, #1
   17e14:	eb41 0101 	adc.w	r1, r1, r1
   17e18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17e1c:	bf08      	it	eq
   17e1e:	3c01      	subeq	r4, #1
   17e20:	d0f7      	beq.n	17e12 <__aeabi_dmul+0x1a6>
   17e22:	ea41 0106 	orr.w	r1, r1, r6
   17e26:	f095 0f00 	teq	r5, #0
   17e2a:	bf18      	it	ne
   17e2c:	4770      	bxne	lr
   17e2e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17e32:	0052      	lsls	r2, r2, #1
   17e34:	eb43 0303 	adc.w	r3, r3, r3
   17e38:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17e3c:	bf08      	it	eq
   17e3e:	3d01      	subeq	r5, #1
   17e40:	d0f7      	beq.n	17e32 <__aeabi_dmul+0x1c6>
   17e42:	ea43 0306 	orr.w	r3, r3, r6
   17e46:	4770      	bx	lr
   17e48:	ea94 0f0c 	teq	r4, ip
   17e4c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17e50:	bf18      	it	ne
   17e52:	ea95 0f0c 	teqne	r5, ip
   17e56:	d00c      	beq.n	17e72 <__aeabi_dmul+0x206>
   17e58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17e5c:	bf18      	it	ne
   17e5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17e62:	d1d1      	bne.n	17e08 <__aeabi_dmul+0x19c>
   17e64:	ea81 0103 	eor.w	r1, r1, r3
   17e68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17e6c:	f04f 0000 	mov.w	r0, #0
   17e70:	bd70      	pop	{r4, r5, r6, pc}
   17e72:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17e76:	bf06      	itte	eq
   17e78:	4610      	moveq	r0, r2
   17e7a:	4619      	moveq	r1, r3
   17e7c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17e80:	d019      	beq.n	17eb6 <__aeabi_dmul+0x24a>
   17e82:	ea94 0f0c 	teq	r4, ip
   17e86:	d102      	bne.n	17e8e <__aeabi_dmul+0x222>
   17e88:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17e8c:	d113      	bne.n	17eb6 <__aeabi_dmul+0x24a>
   17e8e:	ea95 0f0c 	teq	r5, ip
   17e92:	d105      	bne.n	17ea0 <__aeabi_dmul+0x234>
   17e94:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17e98:	bf1c      	itt	ne
   17e9a:	4610      	movne	r0, r2
   17e9c:	4619      	movne	r1, r3
   17e9e:	d10a      	bne.n	17eb6 <__aeabi_dmul+0x24a>
   17ea0:	ea81 0103 	eor.w	r1, r1, r3
   17ea4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17ea8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17eac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17eb0:	f04f 0000 	mov.w	r0, #0
   17eb4:	bd70      	pop	{r4, r5, r6, pc}
   17eb6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17eba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17ebe:	bd70      	pop	{r4, r5, r6, pc}

00017ec0 <__aeabi_ddiv>:
   17ec0:	b570      	push	{r4, r5, r6, lr}
   17ec2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17ec6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17eca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17ece:	bf1d      	ittte	ne
   17ed0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17ed4:	ea94 0f0c 	teqne	r4, ip
   17ed8:	ea95 0f0c 	teqne	r5, ip
   17edc:	f000 f8a7 	bleq	1802e <__aeabi_ddiv+0x16e>
   17ee0:	eba4 0405 	sub.w	r4, r4, r5
   17ee4:	ea81 0e03 	eor.w	lr, r1, r3
   17ee8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17eec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17ef0:	f000 8088 	beq.w	18004 <__aeabi_ddiv+0x144>
   17ef4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17ef8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17efc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17f00:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17f04:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17f08:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17f0c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17f10:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17f14:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17f18:	429d      	cmp	r5, r3
   17f1a:	bf08      	it	eq
   17f1c:	4296      	cmpeq	r6, r2
   17f1e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17f22:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17f26:	d202      	bcs.n	17f2e <__aeabi_ddiv+0x6e>
   17f28:	085b      	lsrs	r3, r3, #1
   17f2a:	ea4f 0232 	mov.w	r2, r2, rrx
   17f2e:	1ab6      	subs	r6, r6, r2
   17f30:	eb65 0503 	sbc.w	r5, r5, r3
   17f34:	085b      	lsrs	r3, r3, #1
   17f36:	ea4f 0232 	mov.w	r2, r2, rrx
   17f3a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   17f3e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17f42:	ebb6 0e02 	subs.w	lr, r6, r2
   17f46:	eb75 0e03 	sbcs.w	lr, r5, r3
   17f4a:	bf22      	ittt	cs
   17f4c:	1ab6      	subcs	r6, r6, r2
   17f4e:	4675      	movcs	r5, lr
   17f50:	ea40 000c 	orrcs.w	r0, r0, ip
   17f54:	085b      	lsrs	r3, r3, #1
   17f56:	ea4f 0232 	mov.w	r2, r2, rrx
   17f5a:	ebb6 0e02 	subs.w	lr, r6, r2
   17f5e:	eb75 0e03 	sbcs.w	lr, r5, r3
   17f62:	bf22      	ittt	cs
   17f64:	1ab6      	subcs	r6, r6, r2
   17f66:	4675      	movcs	r5, lr
   17f68:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   17f6c:	085b      	lsrs	r3, r3, #1
   17f6e:	ea4f 0232 	mov.w	r2, r2, rrx
   17f72:	ebb6 0e02 	subs.w	lr, r6, r2
   17f76:	eb75 0e03 	sbcs.w	lr, r5, r3
   17f7a:	bf22      	ittt	cs
   17f7c:	1ab6      	subcs	r6, r6, r2
   17f7e:	4675      	movcs	r5, lr
   17f80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   17f84:	085b      	lsrs	r3, r3, #1
   17f86:	ea4f 0232 	mov.w	r2, r2, rrx
   17f8a:	ebb6 0e02 	subs.w	lr, r6, r2
   17f8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   17f92:	bf22      	ittt	cs
   17f94:	1ab6      	subcs	r6, r6, r2
   17f96:	4675      	movcs	r5, lr
   17f98:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   17f9c:	ea55 0e06 	orrs.w	lr, r5, r6
   17fa0:	d018      	beq.n	17fd4 <__aeabi_ddiv+0x114>
   17fa2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   17fa6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   17faa:	ea4f 1606 	mov.w	r6, r6, lsl #4
   17fae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   17fb2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   17fb6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   17fba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   17fbe:	d1c0      	bne.n	17f42 <__aeabi_ddiv+0x82>
   17fc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17fc4:	d10b      	bne.n	17fde <__aeabi_ddiv+0x11e>
   17fc6:	ea41 0100 	orr.w	r1, r1, r0
   17fca:	f04f 0000 	mov.w	r0, #0
   17fce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   17fd2:	e7b6      	b.n	17f42 <__aeabi_ddiv+0x82>
   17fd4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17fd8:	bf04      	itt	eq
   17fda:	4301      	orreq	r1, r0
   17fdc:	2000      	moveq	r0, #0
   17fde:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17fe2:	bf88      	it	hi
   17fe4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17fe8:	f63f aeaf 	bhi.w	17d4a <__aeabi_dmul+0xde>
   17fec:	ebb5 0c03 	subs.w	ip, r5, r3
   17ff0:	bf04      	itt	eq
   17ff2:	ebb6 0c02 	subseq.w	ip, r6, r2
   17ff6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17ffa:	f150 0000 	adcs.w	r0, r0, #0
   17ffe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   18002:	bd70      	pop	{r4, r5, r6, pc}
   18004:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   18008:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1800c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   18010:	bfc2      	ittt	gt
   18012:	ebd4 050c 	rsbsgt	r5, r4, ip
   18016:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1801a:	bd70      	popgt	{r4, r5, r6, pc}
   1801c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18020:	f04f 0e00 	mov.w	lr, #0
   18024:	3c01      	subs	r4, #1
   18026:	e690      	b.n	17d4a <__aeabi_dmul+0xde>
   18028:	ea45 0e06 	orr.w	lr, r5, r6
   1802c:	e68d      	b.n	17d4a <__aeabi_dmul+0xde>
   1802e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   18032:	ea94 0f0c 	teq	r4, ip
   18036:	bf08      	it	eq
   18038:	ea95 0f0c 	teqeq	r5, ip
   1803c:	f43f af3b 	beq.w	17eb6 <__aeabi_dmul+0x24a>
   18040:	ea94 0f0c 	teq	r4, ip
   18044:	d10a      	bne.n	1805c <__aeabi_ddiv+0x19c>
   18046:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1804a:	f47f af34 	bne.w	17eb6 <__aeabi_dmul+0x24a>
   1804e:	ea95 0f0c 	teq	r5, ip
   18052:	f47f af25 	bne.w	17ea0 <__aeabi_dmul+0x234>
   18056:	4610      	mov	r0, r2
   18058:	4619      	mov	r1, r3
   1805a:	e72c      	b.n	17eb6 <__aeabi_dmul+0x24a>
   1805c:	ea95 0f0c 	teq	r5, ip
   18060:	d106      	bne.n	18070 <__aeabi_ddiv+0x1b0>
   18062:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18066:	f43f aefd 	beq.w	17e64 <__aeabi_dmul+0x1f8>
   1806a:	4610      	mov	r0, r2
   1806c:	4619      	mov	r1, r3
   1806e:	e722      	b.n	17eb6 <__aeabi_dmul+0x24a>
   18070:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18074:	bf18      	it	ne
   18076:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1807a:	f47f aec5 	bne.w	17e08 <__aeabi_dmul+0x19c>
   1807e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   18082:	f47f af0d 	bne.w	17ea0 <__aeabi_dmul+0x234>
   18086:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1808a:	f47f aeeb 	bne.w	17e64 <__aeabi_dmul+0x1f8>
   1808e:	e712      	b.n	17eb6 <__aeabi_dmul+0x24a>

00018090 <__gedf2>:
   18090:	f04f 3cff 	mov.w	ip, #4294967295
   18094:	e006      	b.n	180a4 <__cmpdf2+0x4>
   18096:	bf00      	nop

00018098 <__ledf2>:
   18098:	f04f 0c01 	mov.w	ip, #1
   1809c:	e002      	b.n	180a4 <__cmpdf2+0x4>
   1809e:	bf00      	nop

000180a0 <__cmpdf2>:
   180a0:	f04f 0c01 	mov.w	ip, #1
   180a4:	f84d cd04 	str.w	ip, [sp, #-4]!
   180a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   180ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   180b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   180b4:	bf18      	it	ne
   180b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   180ba:	d01b      	beq.n	180f4 <__cmpdf2+0x54>
   180bc:	b001      	add	sp, #4
   180be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   180c2:	bf0c      	ite	eq
   180c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   180c8:	ea91 0f03 	teqne	r1, r3
   180cc:	bf02      	ittt	eq
   180ce:	ea90 0f02 	teqeq	r0, r2
   180d2:	2000      	moveq	r0, #0
   180d4:	4770      	bxeq	lr
   180d6:	f110 0f00 	cmn.w	r0, #0
   180da:	ea91 0f03 	teq	r1, r3
   180de:	bf58      	it	pl
   180e0:	4299      	cmppl	r1, r3
   180e2:	bf08      	it	eq
   180e4:	4290      	cmpeq	r0, r2
   180e6:	bf2c      	ite	cs
   180e8:	17d8      	asrcs	r0, r3, #31
   180ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   180ee:	f040 0001 	orr.w	r0, r0, #1
   180f2:	4770      	bx	lr
   180f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   180f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   180fc:	d102      	bne.n	18104 <__cmpdf2+0x64>
   180fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   18102:	d107      	bne.n	18114 <__cmpdf2+0x74>
   18104:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18108:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1810c:	d1d6      	bne.n	180bc <__cmpdf2+0x1c>
   1810e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   18112:	d0d3      	beq.n	180bc <__cmpdf2+0x1c>
   18114:	f85d 0b04 	ldr.w	r0, [sp], #4
   18118:	4770      	bx	lr
   1811a:	bf00      	nop

0001811c <__aeabi_cdrcmple>:
   1811c:	4684      	mov	ip, r0
   1811e:	4610      	mov	r0, r2
   18120:	4662      	mov	r2, ip
   18122:	468c      	mov	ip, r1
   18124:	4619      	mov	r1, r3
   18126:	4663      	mov	r3, ip
   18128:	e000      	b.n	1812c <__aeabi_cdcmpeq>
   1812a:	bf00      	nop

0001812c <__aeabi_cdcmpeq>:
   1812c:	b501      	push	{r0, lr}
   1812e:	f7ff ffb7 	bl	180a0 <__cmpdf2>
   18132:	2800      	cmp	r0, #0
   18134:	bf48      	it	mi
   18136:	f110 0f00 	cmnmi.w	r0, #0
   1813a:	bd01      	pop	{r0, pc}

0001813c <__aeabi_dcmpeq>:
   1813c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18140:	f7ff fff4 	bl	1812c <__aeabi_cdcmpeq>
   18144:	bf0c      	ite	eq
   18146:	2001      	moveq	r0, #1
   18148:	2000      	movne	r0, #0
   1814a:	f85d fb08 	ldr.w	pc, [sp], #8
   1814e:	bf00      	nop

00018150 <__aeabi_dcmplt>:
   18150:	f84d ed08 	str.w	lr, [sp, #-8]!
   18154:	f7ff ffea 	bl	1812c <__aeabi_cdcmpeq>
   18158:	bf34      	ite	cc
   1815a:	2001      	movcc	r0, #1
   1815c:	2000      	movcs	r0, #0
   1815e:	f85d fb08 	ldr.w	pc, [sp], #8
   18162:	bf00      	nop

00018164 <__aeabi_dcmple>:
   18164:	f84d ed08 	str.w	lr, [sp, #-8]!
   18168:	f7ff ffe0 	bl	1812c <__aeabi_cdcmpeq>
   1816c:	bf94      	ite	ls
   1816e:	2001      	movls	r0, #1
   18170:	2000      	movhi	r0, #0
   18172:	f85d fb08 	ldr.w	pc, [sp], #8
   18176:	bf00      	nop

00018178 <__aeabi_dcmpge>:
   18178:	f84d ed08 	str.w	lr, [sp, #-8]!
   1817c:	f7ff ffce 	bl	1811c <__aeabi_cdrcmple>
   18180:	bf94      	ite	ls
   18182:	2001      	movls	r0, #1
   18184:	2000      	movhi	r0, #0
   18186:	f85d fb08 	ldr.w	pc, [sp], #8
   1818a:	bf00      	nop

0001818c <__aeabi_dcmpgt>:
   1818c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18190:	f7ff ffc4 	bl	1811c <__aeabi_cdrcmple>
   18194:	bf34      	ite	cc
   18196:	2001      	movcc	r0, #1
   18198:	2000      	movcs	r0, #0
   1819a:	f85d fb08 	ldr.w	pc, [sp], #8
   1819e:	bf00      	nop

000181a0 <__aeabi_d2iz>:
   181a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   181a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   181a8:	d215      	bcs.n	181d6 <__aeabi_d2iz+0x36>
   181aa:	d511      	bpl.n	181d0 <__aeabi_d2iz+0x30>
   181ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   181b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   181b4:	d912      	bls.n	181dc <__aeabi_d2iz+0x3c>
   181b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   181ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   181be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   181c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   181c6:	fa23 f002 	lsr.w	r0, r3, r2
   181ca:	bf18      	it	ne
   181cc:	4240      	negne	r0, r0
   181ce:	4770      	bx	lr
   181d0:	f04f 0000 	mov.w	r0, #0
   181d4:	4770      	bx	lr
   181d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   181da:	d105      	bne.n	181e8 <__aeabi_d2iz+0x48>
   181dc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   181e0:	bf08      	it	eq
   181e2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   181e6:	4770      	bx	lr
   181e8:	f04f 0000 	mov.w	r0, #0
   181ec:	4770      	bx	lr
   181ee:	bf00      	nop

000181f0 <__aeabi_d2uiz>:
   181f0:	004a      	lsls	r2, r1, #1
   181f2:	d211      	bcs.n	18218 <__aeabi_d2uiz+0x28>
   181f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   181f8:	d211      	bcs.n	1821e <__aeabi_d2uiz+0x2e>
   181fa:	d50d      	bpl.n	18218 <__aeabi_d2uiz+0x28>
   181fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   18200:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   18204:	d40e      	bmi.n	18224 <__aeabi_d2uiz+0x34>
   18206:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1820a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1820e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   18212:	fa23 f002 	lsr.w	r0, r3, r2
   18216:	4770      	bx	lr
   18218:	f04f 0000 	mov.w	r0, #0
   1821c:	4770      	bx	lr
   1821e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   18222:	d102      	bne.n	1822a <__aeabi_d2uiz+0x3a>
   18224:	f04f 30ff 	mov.w	r0, #4294967295
   18228:	4770      	bx	lr
   1822a:	f04f 0000 	mov.w	r0, #0
   1822e:	4770      	bx	lr

00018230 <__aeabi_d2f>:
   18230:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18234:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   18238:	bf24      	itt	cs
   1823a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1823e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   18242:	d90d      	bls.n	18260 <__aeabi_d2f+0x30>
   18244:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18248:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1824c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   18250:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18254:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   18258:	bf08      	it	eq
   1825a:	f020 0001 	biceq.w	r0, r0, #1
   1825e:	4770      	bx	lr
   18260:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   18264:	d121      	bne.n	182aa <__aeabi_d2f+0x7a>
   18266:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1826a:	bfbc      	itt	lt
   1826c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   18270:	4770      	bxlt	lr
   18272:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18276:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1827a:	f1c2 0218 	rsb	r2, r2, #24
   1827e:	f1c2 0c20 	rsb	ip, r2, #32
   18282:	fa10 f30c 	lsls.w	r3, r0, ip
   18286:	fa20 f002 	lsr.w	r0, r0, r2
   1828a:	bf18      	it	ne
   1828c:	f040 0001 	orrne.w	r0, r0, #1
   18290:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18294:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   18298:	fa03 fc0c 	lsl.w	ip, r3, ip
   1829c:	ea40 000c 	orr.w	r0, r0, ip
   182a0:	fa23 f302 	lsr.w	r3, r3, r2
   182a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   182a8:	e7cc      	b.n	18244 <__aeabi_d2f+0x14>
   182aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
   182ae:	d107      	bne.n	182c0 <__aeabi_d2f+0x90>
   182b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   182b4:	bf1e      	ittt	ne
   182b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   182ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   182be:	4770      	bxne	lr
   182c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   182c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   182c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   182cc:	4770      	bx	lr
   182ce:	bf00      	nop

000182d0 <__aeabi_frsub>:
   182d0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   182d4:	e002      	b.n	182dc <__addsf3>
   182d6:	bf00      	nop

000182d8 <__aeabi_fsub>:
   182d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000182dc <__addsf3>:
   182dc:	0042      	lsls	r2, r0, #1
   182de:	bf1f      	itttt	ne
   182e0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   182e4:	ea92 0f03 	teqne	r2, r3
   182e8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   182ec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   182f0:	d06a      	beq.n	183c8 <__addsf3+0xec>
   182f2:	ea4f 6212 	mov.w	r2, r2, lsr #24
   182f6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   182fa:	bfc1      	itttt	gt
   182fc:	18d2      	addgt	r2, r2, r3
   182fe:	4041      	eorgt	r1, r0
   18300:	4048      	eorgt	r0, r1
   18302:	4041      	eorgt	r1, r0
   18304:	bfb8      	it	lt
   18306:	425b      	neglt	r3, r3
   18308:	2b19      	cmp	r3, #25
   1830a:	bf88      	it	hi
   1830c:	4770      	bxhi	lr
   1830e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18312:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18316:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1831a:	bf18      	it	ne
   1831c:	4240      	negne	r0, r0
   1831e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18322:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   18326:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1832a:	bf18      	it	ne
   1832c:	4249      	negne	r1, r1
   1832e:	ea92 0f03 	teq	r2, r3
   18332:	d03f      	beq.n	183b4 <__addsf3+0xd8>
   18334:	f1a2 0201 	sub.w	r2, r2, #1
   18338:	fa41 fc03 	asr.w	ip, r1, r3
   1833c:	eb10 000c 	adds.w	r0, r0, ip
   18340:	f1c3 0320 	rsb	r3, r3, #32
   18344:	fa01 f103 	lsl.w	r1, r1, r3
   18348:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1834c:	d502      	bpl.n	18354 <__addsf3+0x78>
   1834e:	4249      	negs	r1, r1
   18350:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   18354:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18358:	d313      	bcc.n	18382 <__addsf3+0xa6>
   1835a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1835e:	d306      	bcc.n	1836e <__addsf3+0x92>
   18360:	0840      	lsrs	r0, r0, #1
   18362:	ea4f 0131 	mov.w	r1, r1, rrx
   18366:	f102 0201 	add.w	r2, r2, #1
   1836a:	2afe      	cmp	r2, #254	; 0xfe
   1836c:	d251      	bcs.n	18412 <__addsf3+0x136>
   1836e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   18372:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18376:	bf08      	it	eq
   18378:	f020 0001 	biceq.w	r0, r0, #1
   1837c:	ea40 0003 	orr.w	r0, r0, r3
   18380:	4770      	bx	lr
   18382:	0049      	lsls	r1, r1, #1
   18384:	eb40 0000 	adc.w	r0, r0, r0
   18388:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1838c:	f1a2 0201 	sub.w	r2, r2, #1
   18390:	d1ed      	bne.n	1836e <__addsf3+0x92>
   18392:	fab0 fc80 	clz	ip, r0
   18396:	f1ac 0c08 	sub.w	ip, ip, #8
   1839a:	ebb2 020c 	subs.w	r2, r2, ip
   1839e:	fa00 f00c 	lsl.w	r0, r0, ip
   183a2:	bfaa      	itet	ge
   183a4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   183a8:	4252      	neglt	r2, r2
   183aa:	4318      	orrge	r0, r3
   183ac:	bfbc      	itt	lt
   183ae:	40d0      	lsrlt	r0, r2
   183b0:	4318      	orrlt	r0, r3
   183b2:	4770      	bx	lr
   183b4:	f092 0f00 	teq	r2, #0
   183b8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   183bc:	bf06      	itte	eq
   183be:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   183c2:	3201      	addeq	r2, #1
   183c4:	3b01      	subne	r3, #1
   183c6:	e7b5      	b.n	18334 <__addsf3+0x58>
   183c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   183cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   183d0:	bf18      	it	ne
   183d2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   183d6:	d021      	beq.n	1841c <__addsf3+0x140>
   183d8:	ea92 0f03 	teq	r2, r3
   183dc:	d004      	beq.n	183e8 <__addsf3+0x10c>
   183de:	f092 0f00 	teq	r2, #0
   183e2:	bf08      	it	eq
   183e4:	4608      	moveq	r0, r1
   183e6:	4770      	bx	lr
   183e8:	ea90 0f01 	teq	r0, r1
   183ec:	bf1c      	itt	ne
   183ee:	2000      	movne	r0, #0
   183f0:	4770      	bxne	lr
   183f2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   183f6:	d104      	bne.n	18402 <__addsf3+0x126>
   183f8:	0040      	lsls	r0, r0, #1
   183fa:	bf28      	it	cs
   183fc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   18400:	4770      	bx	lr
   18402:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   18406:	bf3c      	itt	cc
   18408:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1840c:	4770      	bxcc	lr
   1840e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18412:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   18416:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1841a:	4770      	bx	lr
   1841c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   18420:	bf16      	itet	ne
   18422:	4608      	movne	r0, r1
   18424:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   18428:	4601      	movne	r1, r0
   1842a:	0242      	lsls	r2, r0, #9
   1842c:	bf06      	itte	eq
   1842e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   18432:	ea90 0f01 	teqeq	r0, r1
   18436:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1843a:	4770      	bx	lr

0001843c <__aeabi_ui2f>:
   1843c:	f04f 0300 	mov.w	r3, #0
   18440:	e004      	b.n	1844c <__aeabi_i2f+0x8>
   18442:	bf00      	nop

00018444 <__aeabi_i2f>:
   18444:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   18448:	bf48      	it	mi
   1844a:	4240      	negmi	r0, r0
   1844c:	ea5f 0c00 	movs.w	ip, r0
   18450:	bf08      	it	eq
   18452:	4770      	bxeq	lr
   18454:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   18458:	4601      	mov	r1, r0
   1845a:	f04f 0000 	mov.w	r0, #0
   1845e:	e01c      	b.n	1849a <__aeabi_l2f+0x2a>

00018460 <__aeabi_ul2f>:
   18460:	ea50 0201 	orrs.w	r2, r0, r1
   18464:	bf08      	it	eq
   18466:	4770      	bxeq	lr
   18468:	f04f 0300 	mov.w	r3, #0
   1846c:	e00a      	b.n	18484 <__aeabi_l2f+0x14>
   1846e:	bf00      	nop

00018470 <__aeabi_l2f>:
   18470:	ea50 0201 	orrs.w	r2, r0, r1
   18474:	bf08      	it	eq
   18476:	4770      	bxeq	lr
   18478:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1847c:	d502      	bpl.n	18484 <__aeabi_l2f+0x14>
   1847e:	4240      	negs	r0, r0
   18480:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18484:	ea5f 0c01 	movs.w	ip, r1
   18488:	bf02      	ittt	eq
   1848a:	4684      	moveq	ip, r0
   1848c:	4601      	moveq	r1, r0
   1848e:	2000      	moveq	r0, #0
   18490:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   18494:	bf08      	it	eq
   18496:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1849a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1849e:	fabc f28c 	clz	r2, ip
   184a2:	3a08      	subs	r2, #8
   184a4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   184a8:	db10      	blt.n	184cc <__aeabi_l2f+0x5c>
   184aa:	fa01 fc02 	lsl.w	ip, r1, r2
   184ae:	4463      	add	r3, ip
   184b0:	fa00 fc02 	lsl.w	ip, r0, r2
   184b4:	f1c2 0220 	rsb	r2, r2, #32
   184b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   184bc:	fa20 f202 	lsr.w	r2, r0, r2
   184c0:	eb43 0002 	adc.w	r0, r3, r2
   184c4:	bf08      	it	eq
   184c6:	f020 0001 	biceq.w	r0, r0, #1
   184ca:	4770      	bx	lr
   184cc:	f102 0220 	add.w	r2, r2, #32
   184d0:	fa01 fc02 	lsl.w	ip, r1, r2
   184d4:	f1c2 0220 	rsb	r2, r2, #32
   184d8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   184dc:	fa21 f202 	lsr.w	r2, r1, r2
   184e0:	eb43 0002 	adc.w	r0, r3, r2
   184e4:	bf08      	it	eq
   184e6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   184ea:	4770      	bx	lr

000184ec <__aeabi_fmul>:
   184ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
   184f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   184f4:	bf1e      	ittt	ne
   184f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   184fa:	ea92 0f0c 	teqne	r2, ip
   184fe:	ea93 0f0c 	teqne	r3, ip
   18502:	d06f      	beq.n	185e4 <__aeabi_fmul+0xf8>
   18504:	441a      	add	r2, r3
   18506:	ea80 0c01 	eor.w	ip, r0, r1
   1850a:	0240      	lsls	r0, r0, #9
   1850c:	bf18      	it	ne
   1850e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   18512:	d01e      	beq.n	18552 <__aeabi_fmul+0x66>
   18514:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   18518:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   1851c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   18520:	fba0 3101 	umull	r3, r1, r0, r1
   18524:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18528:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1852c:	bf3e      	ittt	cc
   1852e:	0049      	lslcc	r1, r1, #1
   18530:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18534:	005b      	lslcc	r3, r3, #1
   18536:	ea40 0001 	orr.w	r0, r0, r1
   1853a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1853e:	2afd      	cmp	r2, #253	; 0xfd
   18540:	d81d      	bhi.n	1857e <__aeabi_fmul+0x92>
   18542:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   18546:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1854a:	bf08      	it	eq
   1854c:	f020 0001 	biceq.w	r0, r0, #1
   18550:	4770      	bx	lr
   18552:	f090 0f00 	teq	r0, #0
   18556:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1855a:	bf08      	it	eq
   1855c:	0249      	lsleq	r1, r1, #9
   1855e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18562:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   18566:	3a7f      	subs	r2, #127	; 0x7f
   18568:	bfc2      	ittt	gt
   1856a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1856e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   18572:	4770      	bxgt	lr
   18574:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18578:	f04f 0300 	mov.w	r3, #0
   1857c:	3a01      	subs	r2, #1
   1857e:	dc5d      	bgt.n	1863c <__aeabi_fmul+0x150>
   18580:	f112 0f19 	cmn.w	r2, #25
   18584:	bfdc      	itt	le
   18586:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1858a:	4770      	bxle	lr
   1858c:	f1c2 0200 	rsb	r2, r2, #0
   18590:	0041      	lsls	r1, r0, #1
   18592:	fa21 f102 	lsr.w	r1, r1, r2
   18596:	f1c2 0220 	rsb	r2, r2, #32
   1859a:	fa00 fc02 	lsl.w	ip, r0, r2
   1859e:	ea5f 0031 	movs.w	r0, r1, rrx
   185a2:	f140 0000 	adc.w	r0, r0, #0
   185a6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   185aa:	bf08      	it	eq
   185ac:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   185b0:	4770      	bx	lr
   185b2:	f092 0f00 	teq	r2, #0
   185b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   185ba:	bf02      	ittt	eq
   185bc:	0040      	lsleq	r0, r0, #1
   185be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   185c2:	3a01      	subeq	r2, #1
   185c4:	d0f9      	beq.n	185ba <__aeabi_fmul+0xce>
   185c6:	ea40 000c 	orr.w	r0, r0, ip
   185ca:	f093 0f00 	teq	r3, #0
   185ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   185d2:	bf02      	ittt	eq
   185d4:	0049      	lsleq	r1, r1, #1
   185d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   185da:	3b01      	subeq	r3, #1
   185dc:	d0f9      	beq.n	185d2 <__aeabi_fmul+0xe6>
   185de:	ea41 010c 	orr.w	r1, r1, ip
   185e2:	e78f      	b.n	18504 <__aeabi_fmul+0x18>
   185e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   185e8:	ea92 0f0c 	teq	r2, ip
   185ec:	bf18      	it	ne
   185ee:	ea93 0f0c 	teqne	r3, ip
   185f2:	d00a      	beq.n	1860a <__aeabi_fmul+0x11e>
   185f4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   185f8:	bf18      	it	ne
   185fa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   185fe:	d1d8      	bne.n	185b2 <__aeabi_fmul+0xc6>
   18600:	ea80 0001 	eor.w	r0, r0, r1
   18604:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18608:	4770      	bx	lr
   1860a:	f090 0f00 	teq	r0, #0
   1860e:	bf17      	itett	ne
   18610:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18614:	4608      	moveq	r0, r1
   18616:	f091 0f00 	teqne	r1, #0
   1861a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1861e:	d014      	beq.n	1864a <__aeabi_fmul+0x15e>
   18620:	ea92 0f0c 	teq	r2, ip
   18624:	d101      	bne.n	1862a <__aeabi_fmul+0x13e>
   18626:	0242      	lsls	r2, r0, #9
   18628:	d10f      	bne.n	1864a <__aeabi_fmul+0x15e>
   1862a:	ea93 0f0c 	teq	r3, ip
   1862e:	d103      	bne.n	18638 <__aeabi_fmul+0x14c>
   18630:	024b      	lsls	r3, r1, #9
   18632:	bf18      	it	ne
   18634:	4608      	movne	r0, r1
   18636:	d108      	bne.n	1864a <__aeabi_fmul+0x15e>
   18638:	ea80 0001 	eor.w	r0, r0, r1
   1863c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18640:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18644:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18648:	4770      	bx	lr
   1864a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1864e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   18652:	4770      	bx	lr

00018654 <__aeabi_fdiv>:
   18654:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18658:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1865c:	bf1e      	ittt	ne
   1865e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   18662:	ea92 0f0c 	teqne	r2, ip
   18666:	ea93 0f0c 	teqne	r3, ip
   1866a:	d069      	beq.n	18740 <__aeabi_fdiv+0xec>
   1866c:	eba2 0203 	sub.w	r2, r2, r3
   18670:	ea80 0c01 	eor.w	ip, r0, r1
   18674:	0249      	lsls	r1, r1, #9
   18676:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1867a:	d037      	beq.n	186ec <__aeabi_fdiv+0x98>
   1867c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18680:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   18684:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   18688:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1868c:	428b      	cmp	r3, r1
   1868e:	bf38      	it	cc
   18690:	005b      	lslcc	r3, r3, #1
   18692:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   18696:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1869a:	428b      	cmp	r3, r1
   1869c:	bf24      	itt	cs
   1869e:	1a5b      	subcs	r3, r3, r1
   186a0:	ea40 000c 	orrcs.w	r0, r0, ip
   186a4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   186a8:	bf24      	itt	cs
   186aa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   186ae:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   186b2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   186b6:	bf24      	itt	cs
   186b8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   186bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   186c0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   186c4:	bf24      	itt	cs
   186c6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   186ca:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   186ce:	011b      	lsls	r3, r3, #4
   186d0:	bf18      	it	ne
   186d2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   186d6:	d1e0      	bne.n	1869a <__aeabi_fdiv+0x46>
   186d8:	2afd      	cmp	r2, #253	; 0xfd
   186da:	f63f af50 	bhi.w	1857e <__aeabi_fmul+0x92>
   186de:	428b      	cmp	r3, r1
   186e0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   186e4:	bf08      	it	eq
   186e6:	f020 0001 	biceq.w	r0, r0, #1
   186ea:	4770      	bx	lr
   186ec:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   186f0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   186f4:	327f      	adds	r2, #127	; 0x7f
   186f6:	bfc2      	ittt	gt
   186f8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   186fc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   18700:	4770      	bxgt	lr
   18702:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18706:	f04f 0300 	mov.w	r3, #0
   1870a:	3a01      	subs	r2, #1
   1870c:	e737      	b.n	1857e <__aeabi_fmul+0x92>
   1870e:	f092 0f00 	teq	r2, #0
   18712:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18716:	bf02      	ittt	eq
   18718:	0040      	lsleq	r0, r0, #1
   1871a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1871e:	3a01      	subeq	r2, #1
   18720:	d0f9      	beq.n	18716 <__aeabi_fdiv+0xc2>
   18722:	ea40 000c 	orr.w	r0, r0, ip
   18726:	f093 0f00 	teq	r3, #0
   1872a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1872e:	bf02      	ittt	eq
   18730:	0049      	lsleq	r1, r1, #1
   18732:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18736:	3b01      	subeq	r3, #1
   18738:	d0f9      	beq.n	1872e <__aeabi_fdiv+0xda>
   1873a:	ea41 010c 	orr.w	r1, r1, ip
   1873e:	e795      	b.n	1866c <__aeabi_fdiv+0x18>
   18740:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18744:	ea92 0f0c 	teq	r2, ip
   18748:	d108      	bne.n	1875c <__aeabi_fdiv+0x108>
   1874a:	0242      	lsls	r2, r0, #9
   1874c:	f47f af7d 	bne.w	1864a <__aeabi_fmul+0x15e>
   18750:	ea93 0f0c 	teq	r3, ip
   18754:	f47f af70 	bne.w	18638 <__aeabi_fmul+0x14c>
   18758:	4608      	mov	r0, r1
   1875a:	e776      	b.n	1864a <__aeabi_fmul+0x15e>
   1875c:	ea93 0f0c 	teq	r3, ip
   18760:	d104      	bne.n	1876c <__aeabi_fdiv+0x118>
   18762:	024b      	lsls	r3, r1, #9
   18764:	f43f af4c 	beq.w	18600 <__aeabi_fmul+0x114>
   18768:	4608      	mov	r0, r1
   1876a:	e76e      	b.n	1864a <__aeabi_fmul+0x15e>
   1876c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18770:	bf18      	it	ne
   18772:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   18776:	d1ca      	bne.n	1870e <__aeabi_fdiv+0xba>
   18778:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   1877c:	f47f af5c 	bne.w	18638 <__aeabi_fmul+0x14c>
   18780:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   18784:	f47f af3c 	bne.w	18600 <__aeabi_fmul+0x114>
   18788:	e75f      	b.n	1864a <__aeabi_fmul+0x15e>
   1878a:	bf00      	nop

0001878c <__gesf2>:
   1878c:	f04f 3cff 	mov.w	ip, #4294967295
   18790:	e006      	b.n	187a0 <__cmpsf2+0x4>
   18792:	bf00      	nop

00018794 <__lesf2>:
   18794:	f04f 0c01 	mov.w	ip, #1
   18798:	e002      	b.n	187a0 <__cmpsf2+0x4>
   1879a:	bf00      	nop

0001879c <__cmpsf2>:
   1879c:	f04f 0c01 	mov.w	ip, #1
   187a0:	f84d cd04 	str.w	ip, [sp, #-4]!
   187a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
   187a8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   187ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   187b0:	bf18      	it	ne
   187b2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   187b6:	d011      	beq.n	187dc <__cmpsf2+0x40>
   187b8:	b001      	add	sp, #4
   187ba:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   187be:	bf18      	it	ne
   187c0:	ea90 0f01 	teqne	r0, r1
   187c4:	bf58      	it	pl
   187c6:	ebb2 0003 	subspl.w	r0, r2, r3
   187ca:	bf88      	it	hi
   187cc:	17c8      	asrhi	r0, r1, #31
   187ce:	bf38      	it	cc
   187d0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   187d4:	bf18      	it	ne
   187d6:	f040 0001 	orrne.w	r0, r0, #1
   187da:	4770      	bx	lr
   187dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   187e0:	d102      	bne.n	187e8 <__cmpsf2+0x4c>
   187e2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   187e6:	d105      	bne.n	187f4 <__cmpsf2+0x58>
   187e8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   187ec:	d1e4      	bne.n	187b8 <__cmpsf2+0x1c>
   187ee:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   187f2:	d0e1      	beq.n	187b8 <__cmpsf2+0x1c>
   187f4:	f85d 0b04 	ldr.w	r0, [sp], #4
   187f8:	4770      	bx	lr
   187fa:	bf00      	nop

000187fc <__aeabi_cfrcmple>:
   187fc:	4684      	mov	ip, r0
   187fe:	4608      	mov	r0, r1
   18800:	4661      	mov	r1, ip
   18802:	e7ff      	b.n	18804 <__aeabi_cfcmpeq>

00018804 <__aeabi_cfcmpeq>:
   18804:	b50f      	push	{r0, r1, r2, r3, lr}
   18806:	f7ff ffc9 	bl	1879c <__cmpsf2>
   1880a:	2800      	cmp	r0, #0
   1880c:	bf48      	it	mi
   1880e:	f110 0f00 	cmnmi.w	r0, #0
   18812:	bd0f      	pop	{r0, r1, r2, r3, pc}

00018814 <__aeabi_fcmpeq>:
   18814:	f84d ed08 	str.w	lr, [sp, #-8]!
   18818:	f7ff fff4 	bl	18804 <__aeabi_cfcmpeq>
   1881c:	bf0c      	ite	eq
   1881e:	2001      	moveq	r0, #1
   18820:	2000      	movne	r0, #0
   18822:	f85d fb08 	ldr.w	pc, [sp], #8
   18826:	bf00      	nop

00018828 <__aeabi_fcmplt>:
   18828:	f84d ed08 	str.w	lr, [sp, #-8]!
   1882c:	f7ff ffea 	bl	18804 <__aeabi_cfcmpeq>
   18830:	bf34      	ite	cc
   18832:	2001      	movcc	r0, #1
   18834:	2000      	movcs	r0, #0
   18836:	f85d fb08 	ldr.w	pc, [sp], #8
   1883a:	bf00      	nop

0001883c <__aeabi_fcmple>:
   1883c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18840:	f7ff ffe0 	bl	18804 <__aeabi_cfcmpeq>
   18844:	bf94      	ite	ls
   18846:	2001      	movls	r0, #1
   18848:	2000      	movhi	r0, #0
   1884a:	f85d fb08 	ldr.w	pc, [sp], #8
   1884e:	bf00      	nop

00018850 <__aeabi_fcmpge>:
   18850:	f84d ed08 	str.w	lr, [sp, #-8]!
   18854:	f7ff ffd2 	bl	187fc <__aeabi_cfrcmple>
   18858:	bf94      	ite	ls
   1885a:	2001      	movls	r0, #1
   1885c:	2000      	movhi	r0, #0
   1885e:	f85d fb08 	ldr.w	pc, [sp], #8
   18862:	bf00      	nop

00018864 <__aeabi_fcmpgt>:
   18864:	f84d ed08 	str.w	lr, [sp, #-8]!
   18868:	f7ff ffc8 	bl	187fc <__aeabi_cfrcmple>
   1886c:	bf34      	ite	cc
   1886e:	2001      	movcc	r0, #1
   18870:	2000      	movcs	r0, #0
   18872:	f85d fb08 	ldr.w	pc, [sp], #8
   18876:	bf00      	nop

00018878 <__aeabi_f2iz>:
   18878:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1887c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   18880:	d30f      	bcc.n	188a2 <__aeabi_f2iz+0x2a>
   18882:	f04f 039e 	mov.w	r3, #158	; 0x9e
   18886:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1888a:	d90d      	bls.n	188a8 <__aeabi_f2iz+0x30>
   1888c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   18890:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18894:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18898:	fa23 f002 	lsr.w	r0, r3, r2
   1889c:	bf18      	it	ne
   1889e:	4240      	negne	r0, r0
   188a0:	4770      	bx	lr
   188a2:	f04f 0000 	mov.w	r0, #0
   188a6:	4770      	bx	lr
   188a8:	f112 0f61 	cmn.w	r2, #97	; 0x61
   188ac:	d101      	bne.n	188b2 <__aeabi_f2iz+0x3a>
   188ae:	0242      	lsls	r2, r0, #9
   188b0:	d105      	bne.n	188be <__aeabi_f2iz+0x46>
   188b2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   188b6:	bf08      	it	eq
   188b8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   188bc:	4770      	bx	lr
   188be:	f04f 0000 	mov.w	r0, #0
   188c2:	4770      	bx	lr

000188c4 <memcpy>:
   188c4:	2a0f      	cmp	r2, #15
   188c6:	b4f0      	push	{r4, r5, r6, r7}
   188c8:	d945      	bls.n	18956 <memcpy+0x92>
   188ca:	ea40 0301 	orr.w	r3, r0, r1
   188ce:	079b      	lsls	r3, r3, #30
   188d0:	d145      	bne.n	1895e <memcpy+0x9a>
   188d2:	f1a2 0710 	sub.w	r7, r2, #16
   188d6:	460c      	mov	r4, r1
   188d8:	4603      	mov	r3, r0
   188da:	093f      	lsrs	r7, r7, #4
   188dc:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   188e0:	3610      	adds	r6, #16
   188e2:	6825      	ldr	r5, [r4, #0]
   188e4:	3310      	adds	r3, #16
   188e6:	3410      	adds	r4, #16
   188e8:	f843 5c10 	str.w	r5, [r3, #-16]
   188ec:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   188f0:	f843 5c0c 	str.w	r5, [r3, #-12]
   188f4:	f854 5c08 	ldr.w	r5, [r4, #-8]
   188f8:	f843 5c08 	str.w	r5, [r3, #-8]
   188fc:	f854 5c04 	ldr.w	r5, [r4, #-4]
   18900:	f843 5c04 	str.w	r5, [r3, #-4]
   18904:	42b3      	cmp	r3, r6
   18906:	d1ec      	bne.n	188e2 <memcpy+0x1e>
   18908:	1c7b      	adds	r3, r7, #1
   1890a:	f002 0c0f 	and.w	ip, r2, #15
   1890e:	f1bc 0f03 	cmp.w	ip, #3
   18912:	ea4f 1303 	mov.w	r3, r3, lsl #4
   18916:	4419      	add	r1, r3
   18918:	4403      	add	r3, r0
   1891a:	d922      	bls.n	18962 <memcpy+0x9e>
   1891c:	460e      	mov	r6, r1
   1891e:	461d      	mov	r5, r3
   18920:	4664      	mov	r4, ip
   18922:	f856 7b04 	ldr.w	r7, [r6], #4
   18926:	3c04      	subs	r4, #4
   18928:	2c03      	cmp	r4, #3
   1892a:	f845 7b04 	str.w	r7, [r5], #4
   1892e:	d8f8      	bhi.n	18922 <memcpy+0x5e>
   18930:	f1ac 0404 	sub.w	r4, ip, #4
   18934:	f002 0203 	and.w	r2, r2, #3
   18938:	f024 0403 	bic.w	r4, r4, #3
   1893c:	3404      	adds	r4, #4
   1893e:	4423      	add	r3, r4
   18940:	4421      	add	r1, r4
   18942:	b132      	cbz	r2, 18952 <memcpy+0x8e>
   18944:	440a      	add	r2, r1
   18946:	f811 4b01 	ldrb.w	r4, [r1], #1
   1894a:	4291      	cmp	r1, r2
   1894c:	f803 4b01 	strb.w	r4, [r3], #1
   18950:	d1f9      	bne.n	18946 <memcpy+0x82>
   18952:	bcf0      	pop	{r4, r5, r6, r7}
   18954:	4770      	bx	lr
   18956:	4603      	mov	r3, r0
   18958:	2a00      	cmp	r2, #0
   1895a:	d1f3      	bne.n	18944 <memcpy+0x80>
   1895c:	e7f9      	b.n	18952 <memcpy+0x8e>
   1895e:	4603      	mov	r3, r0
   18960:	e7f0      	b.n	18944 <memcpy+0x80>
   18962:	4662      	mov	r2, ip
   18964:	2a00      	cmp	r2, #0
   18966:	d1ed      	bne.n	18944 <memcpy+0x80>
   18968:	e7f3      	b.n	18952 <memcpy+0x8e>
   1896a:	bf00      	nop

0001896c <memset>:
   1896c:	0783      	lsls	r3, r0, #30
   1896e:	b4f0      	push	{r4, r5, r6, r7}
   18970:	d048      	beq.n	18a04 <memset+0x98>
   18972:	1e54      	subs	r4, r2, #1
   18974:	2a00      	cmp	r2, #0
   18976:	d043      	beq.n	18a00 <memset+0x94>
   18978:	b2cd      	uxtb	r5, r1
   1897a:	4603      	mov	r3, r0
   1897c:	e002      	b.n	18984 <memset+0x18>
   1897e:	2c00      	cmp	r4, #0
   18980:	d03e      	beq.n	18a00 <memset+0x94>
   18982:	4614      	mov	r4, r2
   18984:	f803 5b01 	strb.w	r5, [r3], #1
   18988:	f013 0f03 	tst.w	r3, #3
   1898c:	f104 32ff 	add.w	r2, r4, #4294967295
   18990:	d1f5      	bne.n	1897e <memset+0x12>
   18992:	2c03      	cmp	r4, #3
   18994:	d92d      	bls.n	189f2 <memset+0x86>
   18996:	b2cd      	uxtb	r5, r1
   18998:	2c0f      	cmp	r4, #15
   1899a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1899e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   189a2:	d918      	bls.n	189d6 <memset+0x6a>
   189a4:	f1a4 0710 	sub.w	r7, r4, #16
   189a8:	f103 0610 	add.w	r6, r3, #16
   189ac:	461a      	mov	r2, r3
   189ae:	093f      	lsrs	r7, r7, #4
   189b0:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   189b4:	6015      	str	r5, [r2, #0]
   189b6:	3210      	adds	r2, #16
   189b8:	f842 5c0c 	str.w	r5, [r2, #-12]
   189bc:	f842 5c08 	str.w	r5, [r2, #-8]
   189c0:	f842 5c04 	str.w	r5, [r2, #-4]
   189c4:	42b2      	cmp	r2, r6
   189c6:	d1f5      	bne.n	189b4 <memset+0x48>
   189c8:	f004 040f 	and.w	r4, r4, #15
   189cc:	3701      	adds	r7, #1
   189ce:	2c03      	cmp	r4, #3
   189d0:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   189d4:	d90d      	bls.n	189f2 <memset+0x86>
   189d6:	461e      	mov	r6, r3
   189d8:	4622      	mov	r2, r4
   189da:	3a04      	subs	r2, #4
   189dc:	f846 5b04 	str.w	r5, [r6], #4
   189e0:	2a03      	cmp	r2, #3
   189e2:	d8fa      	bhi.n	189da <memset+0x6e>
   189e4:	1f22      	subs	r2, r4, #4
   189e6:	f004 0403 	and.w	r4, r4, #3
   189ea:	f022 0203 	bic.w	r2, r2, #3
   189ee:	3204      	adds	r2, #4
   189f0:	4413      	add	r3, r2
   189f2:	b12c      	cbz	r4, 18a00 <memset+0x94>
   189f4:	b2c9      	uxtb	r1, r1
   189f6:	441c      	add	r4, r3
   189f8:	f803 1b01 	strb.w	r1, [r3], #1
   189fc:	42a3      	cmp	r3, r4
   189fe:	d1fb      	bne.n	189f8 <memset+0x8c>
   18a00:	bcf0      	pop	{r4, r5, r6, r7}
   18a02:	4770      	bx	lr
   18a04:	4614      	mov	r4, r2
   18a06:	4603      	mov	r3, r0
   18a08:	e7c3      	b.n	18992 <memset+0x26>
   18a0a:	bf00      	nop

00018a0c <strncpy>:
   18a0c:	ea40 0301 	orr.w	r3, r0, r1
   18a10:	079b      	lsls	r3, r3, #30
   18a12:	b470      	push	{r4, r5, r6}
   18a14:	d12b      	bne.n	18a6e <strncpy+0x62>
   18a16:	2a03      	cmp	r2, #3
   18a18:	bf84      	itt	hi
   18a1a:	460b      	movhi	r3, r1
   18a1c:	4605      	movhi	r5, r0
   18a1e:	d926      	bls.n	18a6e <strncpy+0x62>
   18a20:	4619      	mov	r1, r3
   18a22:	f853 4b04 	ldr.w	r4, [r3], #4
   18a26:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   18a2a:	ea26 0604 	bic.w	r6, r6, r4
   18a2e:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   18a32:	d105      	bne.n	18a40 <strncpy+0x34>
   18a34:	3a04      	subs	r2, #4
   18a36:	f845 4b04 	str.w	r4, [r5], #4
   18a3a:	2a03      	cmp	r2, #3
   18a3c:	4619      	mov	r1, r3
   18a3e:	d8ef      	bhi.n	18a20 <strncpy+0x14>
   18a40:	b19a      	cbz	r2, 18a6a <strncpy+0x5e>
   18a42:	780c      	ldrb	r4, [r1, #0]
   18a44:	3a01      	subs	r2, #1
   18a46:	1c6b      	adds	r3, r5, #1
   18a48:	702c      	strb	r4, [r5, #0]
   18a4a:	b13c      	cbz	r4, 18a5c <strncpy+0x50>
   18a4c:	b16a      	cbz	r2, 18a6a <strncpy+0x5e>
   18a4e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   18a52:	3a01      	subs	r2, #1
   18a54:	f803 4b01 	strb.w	r4, [r3], #1
   18a58:	2c00      	cmp	r4, #0
   18a5a:	d1f7      	bne.n	18a4c <strncpy+0x40>
   18a5c:	b12a      	cbz	r2, 18a6a <strncpy+0x5e>
   18a5e:	441a      	add	r2, r3
   18a60:	2100      	movs	r1, #0
   18a62:	f803 1b01 	strb.w	r1, [r3], #1
   18a66:	4293      	cmp	r3, r2
   18a68:	d1fb      	bne.n	18a62 <strncpy+0x56>
   18a6a:	bc70      	pop	{r4, r5, r6}
   18a6c:	4770      	bx	lr
   18a6e:	4605      	mov	r5, r0
   18a70:	e7e6      	b.n	18a40 <strncpy+0x34>
   18a72:	bf00      	nop

00018a74 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   18a74:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   18a76:	e003      	b.n	18a80 <LoopCopyDataInit>

00018a78 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   18a78:	4b0a      	ldr	r3, [pc, #40]	; (18aa4 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   18a7a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   18a7c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   18a7e:	3104      	adds	r1, #4

00018a80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18a80:	4809      	ldr	r0, [pc, #36]	; (18aa8 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   18a82:	4b0a      	ldr	r3, [pc, #40]	; (18aac <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   18a84:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   18a86:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   18a88:	d3f6      	bcc.n	18a78 <CopyDataInit>
	ldr	r2, =_sbss
   18a8a:	4a09      	ldr	r2, [pc, #36]	; (18ab0 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   18a8c:	e002      	b.n	18a94 <LoopFillZerobss>

00018a8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   18a8e:	2300      	movs	r3, #0
	str	r3, [r2], #4
   18a90:	f842 3b04 	str.w	r3, [r2], #4

00018a94 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18a94:	4b07      	ldr	r3, [pc, #28]	; (18ab4 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   18a96:	429a      	cmp	r2, r3
	bcc	FillZerobss
   18a98:	d3f9      	bcc.n	18a8e <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   18a9a:	f7e7 fc4f 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   18a9e:	f7fe fe7f 	bl	177a0 <main>
	bx	lr    
   18aa2:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   18aa4:	00018ba0 	.word	0x00018ba0
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18aa8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   18aac:	200005d8 	.word	0x200005d8
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   18ab0:	200005d8 	.word	0x200005d8
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18ab4:	2004cdd8 	.word	0x2004cdd8

00018ab8 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   18ab8:	e7fe      	b.n	18ab8 <ADC1_2_IRQHandler>
   18aba:	0000      	movs	r0, r0
   18abc:	454c4449 	.word	0x454c4449
   18ac0:	00000000 	.word	0x00000000

00018ac4 <ulKernelPriority>:
   18ac4:	0000007f                                ....

00018ac8 <heapSTRUCT_SIZE>:
   18ac8:	00010010                                         ..

00018aca <version>:
   18aca:	3d5a0001                                         ..

00018acc <utm_east0>:
   18acc:	00093d5a                                Z=..

00018ad0 <utm_north0>:
   18ad0:	005875e6                                .uX.

00018ad4 <climb_pgain>:
   18ad4:	bcf5c28f                                ....

00018ad8 <climb_igain>:
   18ad8:	3dcccccd                                ...=

00018adc <level_gaz>:
   18adc:	3e9eb852                                R..>

00018ae0 <nav_east0>:
   18ae0:	00093d5a                                Z=..

00018ae4 <nav_north0>:
   18ae4:	005875e6                                .uX.

00018ae8 <nb_waypoint>:
   18ae8:	00000007 33323130 37363534 42413938     ....0123456789AB
   18af8:	46454443                                CDEF

00018afc <failsafe>:
	...
   18b10:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   18b20:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   18b30:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   18b40:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   18b50:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   18b60:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   18b70:	00000074 65532d49 6e617672 00000074     t...I-Servant...
   18b80:	65532d43 6e617672 00000074 65532d4f     C-Servant...O-Se
   18b90:	6e617672 00000074 6e657665 00000074     rvant...event...
