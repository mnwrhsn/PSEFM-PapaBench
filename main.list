
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 05 20 3d 88 01 00 81 88 01 00 81 88 01 00     .P. =...........
      10:	81 88 01 00 81 88 01 00 81 88 01 00 00 00 00 00     ................
	...
      2c:	8d 5b 00 00 81 88 01 00 00 00 00 00 99 5c 00 00     .[...........\..
      3c:	d5 5c 00 00 81 88 01 00 81 88 01 00 81 88 01 00     .\..............
      4c:	81 88 01 00 81 88 01 00 81 88 01 00 81 88 01 00     ................
      5c:	81 88 01 00 81 88 01 00 81 88 01 00 81 88 01 00     ................
      6c:	81 88 01 00 81 88 01 00 81 88 01 00 81 88 01 00     ................
      7c:	81 88 01 00 81 88 01 00 81 88 01 00 81 88 01 00     ................
      8c:	81 88 01 00 81 88 01 00 81 88 01 00 81 88 01 00     ................
      9c:	81 88 01 00 81 88 01 00 81 88 01 00 81 88 01 00     ................
      ac:	81 88 01 00 81 88 01 00 81 88 01 00 81 88 01 00     ................
      bc:	81 88 01 00 81 88 01 00 81 88 01 00 81 88 01 00     ................
      cc:	81 88 01 00 81 88 01 00 81 88 01 00 81 88 01 00     ................
      dc:	81 88 01 00 81 88 01 00 81 88 01 00 81 88 01 00     ................
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	000189f8 	.word	0x000189f8
     6d0:	20000000 	.word	0x20000000
     6d4:	20000488 	.word	0x20000488
     6d8:	20000488 	.word	0x20000488
     6dc:	2004c7a8 	.word	0x2004c7a8

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fc93 	bl	5d24 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 43f4 	movw	r3, #1268	; 0x4f4
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fdd4 	bl	3ff8 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fdcf 	bl	3ff8 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0214 	rsb	r2, r3, #20
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 43f8 	movw	r3, #1272	; 0x4f8
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 4288 	movw	r2, #1160	; 0x488
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fdaf 	bl	4010 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 43fc 	movw	r3, #1276	; 0x4fc
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 43f4 	movw	r3, #1268	; 0x4f4
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fdee 	bl	40d0 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 43f4 	movw	r3, #1268	; 0x4f4
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 43dc 	movw	r3, #1244	; 0x4dc
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fd98 	bl	4060 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fd88 	bl	4060 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 43f4 	movw	r3, #1268	; 0x4f4
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fd7b 	bl	4060 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 43e0 	movw	r3, #1248	; 0x4e0
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fd9c 	bl	40d0 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fd93 	bl	40d0 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 43f8 	movw	r3, #1272	; 0x4f8
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 43f8 	movw	r3, #1272	; 0x4f8
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 4288 	movw	r2, #1160	; 0x488
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fd12 	bl	4010 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 43e0 	movw	r3, #1248	; 0x4e0
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fde1 	bl	51cc <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 5300 	movw	r3, #1280	; 0x500
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 5304 	movw	r3, #1284	; 0x504
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 5304 	movw	r3, #1284	; 0x504
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 5304 	movw	r3, #1284	; 0x504
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 43dc 	movw	r3, #1244	; 0x4dc
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 43dc 	movw	r3, #1244	; 0x4dc
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 43fc 	movw	r3, #1276	; 0x4fc
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fd06 	bl	40d0 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fcfd 	bl	40d0 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 43f8 	movw	r3, #1272	; 0x4f8
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 43f8 	movw	r3, #1272	; 0x4f8
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 4288 	movw	r2, #1160	; 0x488
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fc78 	bl	4010 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 5304 	movw	r3, #1284	; 0x504
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 5300 	movw	r3, #1280	; 0x500
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 43f8 	movw	r3, #1272	; 0x4f8
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 4288 	movw	r2, #1160	; 0x488
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 43f8 	movw	r3, #1272	; 0x4f8
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 4288 	movw	r2, #1160	; 0x488
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 43f4 	movw	r3, #1268	; 0x4f4
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 43f4 	movw	r3, #1268	; 0x4f4
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 4288 	movw	r2, #1160	; 0x488
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 fbaf 	bl	3fb8 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 40b0 	movw	r0, #1200	; 0x4b0
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 fba3 	bl	3fb8 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 40c4 	movw	r0, #1220	; 0x4c4
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 fb9d 	bl	3fb8 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 40e0 	movw	r0, #1248	; 0x4e0
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 fb97 	bl	3fb8 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 43d8 	movw	r3, #1240	; 0x4d8
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 42b0 	movw	r2, #1200	; 0x4b0
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 43dc 	movw	r3, #1244	; 0x4dc
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 42c4 	movw	r2, #1220	; 0x4c4
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 fc01 	bl	40d0 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 40e0 	movw	r0, #1248	; 0x4e0
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 fb98 	bl	4010 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 43f4 	movw	r3, #1268	; 0x4f4
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <vInitialiseEventLists>:
static void vEventSetxTimeStamp( xEventHandle pxNewEvent );

static xList * pxGetReadyList( void );

void vInitialiseEventLists( portBASE_TYPE NumOfEvents)
{
    2908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    290c:	b088      	sub	sp, #32
    290e:	af00      	add	r7, sp, #0
    2910:	6078      	str	r0, [r7, #4]
    2912:	4669      	mov	r1, sp
    2914:	4688      	mov	r8, r1
    volatile portBASE_TYPE xCPU, i;
    eveECB * pxIdleEvents[NumOfEvents];
    2916:	687e      	ldr	r6, [r7, #4]
    2918:	1e71      	subs	r1, r6, #1
    291a:	61f9      	str	r1, [r7, #28]
    291c:	4631      	mov	r1, r6
    291e:	4608      	mov	r0, r1
    2920:	f04f 0100 	mov.w	r1, #0
    2924:	014d      	lsls	r5, r1, #5
    2926:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    292a:	0144      	lsls	r4, r0, #5
    292c:	4631      	mov	r1, r6
    292e:	4608      	mov	r0, r1
    2930:	f04f 0100 	mov.w	r1, #0
    2934:	014b      	lsls	r3, r1, #5
    2936:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    293a:	0142      	lsls	r2, r0, #5
    293c:	4633      	mov	r3, r6
    293e:	009b      	lsls	r3, r3, #2
    2940:	3303      	adds	r3, #3
    2942:	3307      	adds	r3, #7
    2944:	08db      	lsrs	r3, r3, #3
    2946:	00db      	lsls	r3, r3, #3
    2948:	ebad 0d03 	sub.w	sp, sp, r3
    294c:	466b      	mov	r3, sp
    294e:	3303      	adds	r3, #3
    2950:	089b      	lsrs	r3, r3, #2
    2952:	009b      	lsls	r3, r3, #2
    2954:	61bb      	str	r3, [r7, #24]
    eveECB * pxEndFlagEvent;

    vListInitialise( ( xList * ) &xEventIdleList);
    2956:	f240 5008 	movw	r0, #1288	; 0x508
    295a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    295e:	f001 fb2b 	bl	3fb8 <vListInitialise>
    vListInitialise( ( xList * ) &xEventPool );
    2962:	f240 501c 	movw	r0, #1308	; 0x51c
    2966:	f2c2 0000 	movt	r0, #8192	; 0x2000
    296a:	f001 fb25 	bl	3fb8 <vListInitialise>
    vListInitialise( ( xList * ) &xEventList );
    296e:	f240 5030 	movw	r0, #1328	; 0x530
    2972:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2976:	f001 fb1f 	bl	3fb8 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutableList );
    297a:	f240 5044 	movw	r0, #1348	; 0x544
    297e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2982:	f001 fb19 	bl	3fb8 <vListInitialise>

    for( i = 0; i < NumOfEvents; ++i )
    2986:	2300      	movs	r3, #0
    2988:	60fb      	str	r3, [r7, #12]
    298a:	e023      	b.n	29d4 <vInitialiseEventLists+0xcc>
    {
        pxIdleEvents[i] = (eveECB *) pvPortMalloc(sizeof(eveECB)); 
    298c:	68fc      	ldr	r4, [r7, #12]
    298e:	203c      	movs	r0, #60	; 0x3c
    2990:	f003 f9c8 	bl	5d24 <pvPortMalloc>
    2994:	4602      	mov	r2, r0
    2996:	69bb      	ldr	r3, [r7, #24]
    2998:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        vListIntialiseEventItem( pxIdleEvents[i], (xListItem *) & pxIdleEvents[i]->xEventListItem );
    299c:	68fa      	ldr	r2, [r7, #12]
    299e:	69bb      	ldr	r3, [r7, #24]
    29a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    29a4:	68f9      	ldr	r1, [r7, #12]
    29a6:	69bb      	ldr	r3, [r7, #24]
    29a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    29ac:	3318      	adds	r3, #24
    29ae:	4610      	mov	r0, r2
    29b0:	4619      	mov	r1, r3
    29b2:	f000 fa01 	bl	2db8 <vListIntialiseEventItem>
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    29b6:	68fa      	ldr	r2, [r7, #12]
    29b8:	69bb      	ldr	r3, [r7, #24]
    29ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    29be:	3318      	adds	r3, #24
    29c0:	f240 5008 	movw	r0, #1288	; 0x508
    29c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    29c8:	4619      	mov	r1, r3
    29ca:	f001 fb21 	bl	4010 <vListInsertEnd>
    vListInitialise( ( xList * ) &xEventIdleList);
    vListInitialise( ( xList * ) &xEventPool );
    vListInitialise( ( xList * ) &xEventList );
    vListInitialise( ( xList * ) &xEventExecutableList );

    for( i = 0; i < NumOfEvents; ++i )
    29ce:	68fb      	ldr	r3, [r7, #12]
    29d0:	3301      	adds	r3, #1
    29d2:	60fb      	str	r3, [r7, #12]
    29d4:	68fa      	ldr	r2, [r7, #12]
    29d6:	687b      	ldr	r3, [r7, #4]
    29d8:	429a      	cmp	r2, r3
    29da:	dbd7      	blt.n	298c <vInitialiseEventLists+0x84>
        vListIntialiseEventItem( pxIdleEvents[i], (xListItem *) & pxIdleEvents[i]->xEventListItem );
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    }

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    29dc:	2300      	movs	r3, #0
    29de:	613b      	str	r3, [r7, #16]
    29e0:	e00f      	b.n	2a02 <vInitialiseEventLists+0xfa>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    29e2:	693a      	ldr	r2, [r7, #16]
    29e4:	4613      	mov	r3, r2
    29e6:	009b      	lsls	r3, r3, #2
    29e8:	4413      	add	r3, r2
    29ea:	009b      	lsls	r3, r3, #2
    29ec:	f240 5258 	movw	r2, #1368	; 0x558
    29f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    29f4:	4413      	add	r3, r2
    29f6:	4618      	mov	r0, r3
    29f8:	f001 fade 	bl	3fb8 <vListInitialise>
        vListIntialiseEventItem( pxIdleEvents[i], (xListItem *) & pxIdleEvents[i]->xEventListItem );
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    }

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    29fc:	693b      	ldr	r3, [r7, #16]
    29fe:	3301      	adds	r3, #1
    2a00:	613b      	str	r3, [r7, #16]
    2a02:	693b      	ldr	r3, [r7, #16]
    2a04:	2b00      	cmp	r3, #0
    2a06:	ddec      	ble.n	29e2 <vInitialiseEventLists+0xda>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    }

    // Creating an End FLag Event and insert into the end of xEventList, which needs sorted events
    pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2a08:	203c      	movs	r0, #60	; 0x3c
    2a0a:	f003 f98b 	bl	5d24 <pvPortMalloc>
    2a0e:	6178      	str	r0, [r7, #20]
    if( pxEndFlagEvent != NULL )
    2a10:	697b      	ldr	r3, [r7, #20]
    2a12:	2b00      	cmp	r3, #0
    2a14:	d01e      	beq.n	2a54 <vInitialiseEventLists+0x14c>
    {
       // pxEndFlagEvent->pxSource = pxEndFlagEvent->pxDestination = NULL;
        // there may be some problem here because of this assignment way
        pxEndFlagEvent->xTimeStamp.xDeadline= portMAX_DELAY;
    2a16:	697b      	ldr	r3, [r7, #20]
    2a18:	f04f 32ff 	mov.w	r2, #4294967295
    2a1c:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent->xTimeStamp.xTime = portMAX_DELAY;
    2a1e:	697b      	ldr	r3, [r7, #20]
    2a20:	f04f 32ff 	mov.w	r2, #4294967295
    2a24:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent->xTimeStamp.xMicroStep = portMAX_DELAY;
    2a26:	697b      	ldr	r3, [r7, #20]
    2a28:	f04f 32ff 	mov.w	r2, #4294967295
    2a2c:	611a      	str	r2, [r3, #16]
        pxEndFlagEvent->xTimeStamp.xLevel = portMAX_DELAY;
    2a2e:	697b      	ldr	r3, [r7, #20]
    2a30:	f04f 32ff 	mov.w	r2, #4294967295
    2a34:	615a      	str	r2, [r3, #20]
        vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2a36:	697b      	ldr	r3, [r7, #20]
    2a38:	3318      	adds	r3, #24
    2a3a:	6978      	ldr	r0, [r7, #20]
    2a3c:	4619      	mov	r1, r3
    2a3e:	f000 f9bb 	bl	2db8 <vListIntialiseEventItem>
        vListInsertEnd(&xEventList, &pxEndFlagEvent->xEventListItem); 
    2a42:	697b      	ldr	r3, [r7, #20]
    2a44:	3318      	adds	r3, #24
    2a46:	f240 5030 	movw	r0, #1328	; 0x530
    2a4a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a4e:	4619      	mov	r1, r3
    2a50:	f001 fade 	bl	4010 <vListInsertEnd>
    }

    // Creating an End FLag Event and insert into the end of xEventExecutableList, which needs sorted events
    pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2a54:	203c      	movs	r0, #60	; 0x3c
    2a56:	f003 f965 	bl	5d24 <pvPortMalloc>
    2a5a:	6178      	str	r0, [r7, #20]
    if( pxEndFlagEvent != NULL )
    2a5c:	697b      	ldr	r3, [r7, #20]
    2a5e:	2b00      	cmp	r3, #0
    2a60:	d01e      	beq.n	2aa0 <vInitialiseEventLists+0x198>
    {
        // there may be some problem here because of this assignment way
        pxEndFlagEvent->xTimeStamp.xDeadline= portMAX_DELAY;
    2a62:	697b      	ldr	r3, [r7, #20]
    2a64:	f04f 32ff 	mov.w	r2, #4294967295
    2a68:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent->xTimeStamp.xTime = portMAX_DELAY;
    2a6a:	697b      	ldr	r3, [r7, #20]
    2a6c:	f04f 32ff 	mov.w	r2, #4294967295
    2a70:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent->xTimeStamp.xMicroStep = portMAX_DELAY;
    2a72:	697b      	ldr	r3, [r7, #20]
    2a74:	f04f 32ff 	mov.w	r2, #4294967295
    2a78:	611a      	str	r2, [r3, #16]
        pxEndFlagEvent->xTimeStamp.xLevel = portMAX_DELAY;
    2a7a:	697b      	ldr	r3, [r7, #20]
    2a7c:	f04f 32ff 	mov.w	r2, #4294967295
    2a80:	615a      	str	r2, [r3, #20]
        vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2a82:	697b      	ldr	r3, [r7, #20]
    2a84:	3318      	adds	r3, #24
    2a86:	6978      	ldr	r0, [r7, #20]
    2a88:	4619      	mov	r1, r3
    2a8a:	f000 f995 	bl	2db8 <vListIntialiseEventItem>
        vListInsertEnd(&xEventExecutableList, &pxEndFlagEvent->xEventListItem); 
    2a8e:	697b      	ldr	r3, [r7, #20]
    2a90:	3318      	adds	r3, #24
    2a92:	f240 5044 	movw	r0, #1348	; 0x544
    2a96:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a9a:	4619      	mov	r1, r3
    2a9c:	f001 fab8 	bl	4010 <vListInsertEnd>
    2aa0:	46c5      	mov	sp, r8
    }
}
    2aa2:	3720      	adds	r7, #32
    2aa4:	46bd      	mov	sp, r7
    2aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2aaa:	bf00      	nop

00002aac <xCompareFunction1>:

/* unexecutable event comparison function is used in xEventList. 
 * The event with earlist timestamp will be proceeded first*/
static portBASE_TYPE xCompareFunction1( const struct timeStamp t1, const struct timeStamp t2 )
{
    2aac:	b490      	push	{r4, r7}
    2aae:	b084      	sub	sp, #16
    2ab0:	af00      	add	r7, sp, #0
    2ab2:	463c      	mov	r4, r7
    2ab4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xTime < t2.xTime)
    2ab8:	687a      	ldr	r2, [r7, #4]
    2aba:	69fb      	ldr	r3, [r7, #28]
    2abc:	429a      	cmp	r2, r3
    2abe:	d201      	bcs.n	2ac4 <xCompareFunction1+0x18>
    {
        return pdTRUE;
    2ac0:	2301      	movs	r3, #1
    2ac2:	e014      	b.n	2aee <xCompareFunction1+0x42>
    }
    else if( t1.xTime == t2.xTime)
    2ac4:	687a      	ldr	r2, [r7, #4]
    2ac6:	69fb      	ldr	r3, [r7, #28]
    2ac8:	429a      	cmp	r2, r3
    2aca:	d10f      	bne.n	2aec <xCompareFunction1+0x40>
    {
        if( t1.xDeadline < t2.xDeadline )
    2acc:	683a      	ldr	r2, [r7, #0]
    2ace:	69bb      	ldr	r3, [r7, #24]
    2ad0:	429a      	cmp	r2, r3
    2ad2:	d201      	bcs.n	2ad8 <xCompareFunction1+0x2c>
        {
            return pdTRUE;
    2ad4:	2301      	movs	r3, #1
    2ad6:	e00a      	b.n	2aee <xCompareFunction1+0x42>
        }
        else if( t1.xDeadline == t2.xDeadline )
    2ad8:	683a      	ldr	r2, [r7, #0]
    2ada:	69bb      	ldr	r3, [r7, #24]
    2adc:	429a      	cmp	r2, r3
    2ade:	d105      	bne.n	2aec <xCompareFunction1+0x40>
        {
            if( t1.xLevel < t2.xLevel )
    2ae0:	68fa      	ldr	r2, [r7, #12]
    2ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ae4:	429a      	cmp	r2, r3
    2ae6:	da01      	bge.n	2aec <xCompareFunction1+0x40>
            {
                return pdTRUE;
    2ae8:	2301      	movs	r3, #1
    2aea:	e000      	b.n	2aee <xCompareFunction1+0x42>
            }
        }
    }
    return pdFALSE;
    2aec:	2300      	movs	r3, #0
}
    2aee:	4618      	mov	r0, r3
    2af0:	3710      	adds	r7, #16
    2af2:	46bd      	mov	sp, r7
    2af4:	bc90      	pop	{r4, r7}
    2af6:	4770      	bx	lr

00002af8 <xCompareFunction2>:

/* executable event comparison function is used in xEventExecutableList. 
 * The event with earlist deadline will be scheduled to execute first */
static portBASE_TYPE xCompareFunction2( const struct timeStamp t1, const struct timeStamp t2 )
{
    2af8:	b490      	push	{r4, r7}
    2afa:	b084      	sub	sp, #16
    2afc:	af00      	add	r7, sp, #0
    2afe:	463c      	mov	r4, r7
    2b00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xDeadline < t2.xDeadline)
    2b04:	683a      	ldr	r2, [r7, #0]
    2b06:	69bb      	ldr	r3, [r7, #24]
    2b08:	429a      	cmp	r2, r3
    2b0a:	d201      	bcs.n	2b10 <xCompareFunction2+0x18>
    {
        return pdTRUE;
    2b0c:	2301      	movs	r3, #1
    2b0e:	e014      	b.n	2b3a <xCompareFunction2+0x42>
    }
    else if( t1.xDeadline == t2.xDeadline)
    2b10:	683a      	ldr	r2, [r7, #0]
    2b12:	69bb      	ldr	r3, [r7, #24]
    2b14:	429a      	cmp	r2, r3
    2b16:	d10f      	bne.n	2b38 <xCompareFunction2+0x40>
    {
        if( t1.xTime < t2.xTime )
    2b18:	687a      	ldr	r2, [r7, #4]
    2b1a:	69fb      	ldr	r3, [r7, #28]
    2b1c:	429a      	cmp	r2, r3
    2b1e:	d201      	bcs.n	2b24 <xCompareFunction2+0x2c>
        {
            return pdTRUE;
    2b20:	2301      	movs	r3, #1
    2b22:	e00a      	b.n	2b3a <xCompareFunction2+0x42>
        }
        else if( t1.xTime == t2.xTime )
    2b24:	687a      	ldr	r2, [r7, #4]
    2b26:	69fb      	ldr	r3, [r7, #28]
    2b28:	429a      	cmp	r2, r3
    2b2a:	d105      	bne.n	2b38 <xCompareFunction2+0x40>
        {
            if( t1.xLevel < t2.xLevel )
    2b2c:	68fa      	ldr	r2, [r7, #12]
    2b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b30:	429a      	cmp	r2, r3
    2b32:	da01      	bge.n	2b38 <xCompareFunction2+0x40>
            {
                return pdTRUE;
    2b34:	2301      	movs	r3, #1
    2b36:	e000      	b.n	2b3a <xCompareFunction2+0x42>
            }
        }
    }

    return pdFALSE;
    2b38:	2300      	movs	r3, #0
}
    2b3a:	4618      	mov	r0, r3
    2b3c:	3710      	adds	r7, #16
    2b3e:	46bd      	mov	sp, r7
    2b40:	bc90      	pop	{r4, r7}
    2b42:	4770      	bx	lr

00002b44 <xEventGetpxSource>:



xTaskHandle xEventGetpxSource( xEventHandle pxEvent )
{
    2b44:	b480      	push	{r7}
    2b46:	b083      	sub	sp, #12
    2b48:	af00      	add	r7, sp, #0
    2b4a:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    2b4c:	687b      	ldr	r3, [r7, #4]
    2b4e:	681b      	ldr	r3, [r3, #0]
}
    2b50:	4618      	mov	r0, r3
    2b52:	370c      	adds	r7, #12
    2b54:	46bd      	mov	sp, r7
    2b56:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b5a:	4770      	bx	lr

00002b5c <xEventGetpxDestination>:

xTaskHandle xEventGetpxDestination( xEventHandle pxEvent)
{
    2b5c:	b480      	push	{r7}
    2b5e:	b083      	sub	sp, #12
    2b60:	af00      	add	r7, sp, #0
    2b62:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    2b64:	687b      	ldr	r3, [r7, #4]
    2b66:	685b      	ldr	r3, [r3, #4]
}
    2b68:	4618      	mov	r0, r3
    2b6a:	370c      	adds	r7, #12
    2b6c:	46bd      	mov	sp, r7
    2b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b72:	4770      	bx	lr

00002b74 <xEventGetxTimeStamp>:

struct timeStamp xEventGetxTimeStamp( xEventHandle pxEvent)
{
    2b74:	b490      	push	{r4, r7}
    2b76:	b082      	sub	sp, #8
    2b78:	af00      	add	r7, sp, #0
    2b7a:	6078      	str	r0, [r7, #4]
    2b7c:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xTimeStamp;
    2b7e:	687a      	ldr	r2, [r7, #4]
    2b80:	683b      	ldr	r3, [r7, #0]
    2b82:	4614      	mov	r4, r2
    2b84:	3308      	adds	r3, #8
    2b86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2b88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2b8c:	6878      	ldr	r0, [r7, #4]
    2b8e:	3708      	adds	r7, #8
    2b90:	46bd      	mov	sp, r7
    2b92:	bc90      	pop	{r4, r7}
    2b94:	4770      	bx	lr
    2b96:	bf00      	nop

00002b98 <xEventGetxData>:

struct eventData xEventGetxData( xEventHandle pxEvent)
{
    2b98:	b490      	push	{r4, r7}
    2b9a:	b082      	sub	sp, #8
    2b9c:	af00      	add	r7, sp, #0
    2b9e:	6078      	str	r0, [r7, #4]
    2ba0:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xData;
    2ba2:	687a      	ldr	r2, [r7, #4]
    2ba4:	683b      	ldr	r3, [r7, #0]
    2ba6:	4614      	mov	r4, r2
    2ba8:	332c      	adds	r3, #44	; 0x2c
    2baa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2bac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2bb0:	6878      	ldr	r0, [r7, #4]
    2bb2:	3708      	adds	r7, #8
    2bb4:	46bd      	mov	sp, r7
    2bb6:	bc90      	pop	{r4, r7}
    2bb8:	4770      	bx	lr
    2bba:	bf00      	nop

00002bbc <vEventSetxTimeStamp>:

static void vEventSetxTimeStamp( xEventHandle pxNewEvent )
{
    2bbc:	b480      	push	{r7}
    2bbe:	b085      	sub	sp, #20
    2bc0:	af00      	add	r7, sp, #0
    2bc2:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2bc4:	687b      	ldr	r3, [r7, #4]
    2bc6:	60fb      	str	r3, [r7, #12]
    portTickType xDeadline = pxEvent->xData.xNextPeriod;
    2bc8:	68fb      	ldr	r3, [r7, #12]
    2bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2bcc:	60bb      	str	r3, [r7, #8]

    /* EDF scheduling algorithm */
    pxEvent->xTimeStamp.xDeadline= xDeadline ;
    2bce:	68fb      	ldr	r3, [r7, #12]
    2bd0:	68ba      	ldr	r2, [r7, #8]
    2bd2:	609a      	str	r2, [r3, #8]

    /*set the time of this event to be processed */
    if( pxEvent->xData.IS_LAST_SERVANT == 1 )
    2bd4:	68fb      	ldr	r3, [r7, #12]
    2bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2bd8:	2b01      	cmp	r3, #1
    2bda:	d103      	bne.n	2be4 <vEventSetxTimeStamp+0x28>
    {
        pxEvent->xTimeStamp.xTime = xDeadline;
    2bdc:	68fb      	ldr	r3, [r7, #12]
    2bde:	68ba      	ldr	r2, [r7, #8]
    2be0:	60da      	str	r2, [r3, #12]
    2be2:	e003      	b.n	2bec <vEventSetxTimeStamp+0x30>
    }
    else
    {
        pxEvent->xTimeStamp.xTime = pxEvent->xData.xTime ;
    2be4:	68fb      	ldr	r3, [r7, #12]
    2be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2be8:	68fb      	ldr	r3, [r7, #12]
    2bea:	60da      	str	r2, [r3, #12]
    }

    /*the microstep is not used now*/
    pxEvent->xTimeStamp.xMicroStep = 0;
    2bec:	68fb      	ldr	r3, [r7, #12]
    2bee:	2200      	movs	r2, #0
    2bf0:	611a      	str	r2, [r3, #16]

    /* set the level of timestamp according to the topology sort result*/
    pxEvent->xTimeStamp.xLevel = xEventSerialNumber;
    2bf2:	f240 536c 	movw	r3, #1388	; 0x56c
    2bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bfa:	681b      	ldr	r3, [r3, #0]
    2bfc:	461a      	mov	r2, r3
    2bfe:	68fb      	ldr	r3, [r7, #12]
    2c00:	615a      	str	r2, [r3, #20]

    xEventSerialNumber++;
    2c02:	f240 536c 	movw	r3, #1388	; 0x56c
    2c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c0a:	681b      	ldr	r3, [r3, #0]
    2c0c:	1c5a      	adds	r2, r3, #1
    2c0e:	f240 536c 	movw	r3, #1388	; 0x56c
    2c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c16:	601a      	str	r2, [r3, #0]
}
    2c18:	3714      	adds	r7, #20
    2c1a:	46bd      	mov	sp, r7
    2c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c20:	4770      	bx	lr
    2c22:	bf00      	nop

00002c24 <vEventSetxData>:

static void vEventSetxData( xEventHandle pxEvent, struct eventData xData)
{
    2c24:	b084      	sub	sp, #16
    2c26:	b490      	push	{r4, r7}
    2c28:	b082      	sub	sp, #8
    2c2a:	af00      	add	r7, sp, #0
    2c2c:	6078      	str	r0, [r7, #4]
    2c2e:	f107 0014 	add.w	r0, r7, #20
    2c32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ((eveECB *) pxEvent)->xData = xData;
    2c36:	687b      	ldr	r3, [r7, #4]
    2c38:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    2c3c:	f107 0314 	add.w	r3, r7, #20
    2c40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2c42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2c46:	3708      	adds	r7, #8
    2c48:	46bd      	mov	sp, r7
    2c4a:	bc90      	pop	{r4, r7}
    2c4c:	b004      	add	sp, #16
    2c4e:	4770      	bx	lr

00002c50 <pxGetReadyList>:
* Get the event ready list according to the multicore scheduling algorithm.
*
* @return the address of the event ready list.
* */
static xList * pxGetReadyList( void )
{
    2c50:	b480      	push	{r7}
    2c52:	af00      	add	r7, sp, #0
    return &xEventReadyList[0];
    2c54:	f240 5358 	movw	r3, #1368	; 0x558
    2c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
    2c5c:	4618      	mov	r0, r3
    2c5e:	46bd      	mov	sp, r7
    2c60:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c64:	4770      	bx	lr
    2c66:	bf00      	nop

00002c68 <prvEventListGenericInsert1>:


/* insert event to xEventList in terms of comparison function 1 */
static void prvEventListGenericInsert1( xListItem *pxNewListItem )
{
    2c68:	b590      	push	{r4, r7, lr}
    2c6a:	b091      	sub	sp, #68	; 0x44
    2c6c:	af04      	add	r7, sp, #16
    2c6e:	6078      	str	r0, [r7, #4]
    volatile xListItem *pxIterator;
    struct timeStamp xTimeStampOfInsertion;
    xList * pxList = &xEventList;
    2c70:	f240 5330 	movw	r3, #1328	; 0x530
    2c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c78:	62bb      	str	r3, [r7, #40]	; 0x28

    xTimeStampOfInsertion = xEventGetxTimeStamp(pxNewListItem->pvOwner);
    2c7a:	687b      	ldr	r3, [r7, #4]
    2c7c:	68db      	ldr	r3, [r3, #12]
    2c7e:	f107 0208 	add.w	r2, r7, #8
    2c82:	4610      	mov	r0, r2
    2c84:	4619      	mov	r1, r3
    2c86:	f7ff ff75 	bl	2b74 <xEventGetxTimeStamp>

    if( xTimeStampOfInsertion.xTime == portMAX_DELAY )
    2c8a:	68fb      	ldr	r3, [r7, #12]
    2c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
    2c90:	d103      	bne.n	2c9a <prvEventListGenericInsert1+0x32>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c94:	691b      	ldr	r3, [r3, #16]
    2c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    2c98:	e021      	b.n	2cde <prvEventListGenericInsert1+0x76>
    }
    else
    {
        taskENTER_CRITICAL();
    2c9a:	f002 ffcb 	bl	5c34 <vPortEnterCritical>
        // There must already be a End Flag Event with max timeStamp in xEventList.
        // The End Flag Event can be the last Event to be processed, and new events
        // are inserted before it in xEventList.
        // The End Flag Event has been inserted when xEventList is initialised.
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); xCompareFunction1( xEventGetxTimeStamp( pxIterator->pxNext->pvOwner ), xTimeStampOfInsertion ); pxIterator = pxIterator->pxNext ) 
    2c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2ca0:	3308      	adds	r3, #8
    2ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    2ca4:	e002      	b.n	2cac <prvEventListGenericInsert1+0x44>
    2ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ca8:	685b      	ldr	r3, [r3, #4]
    2caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    2cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2cae:	685b      	ldr	r3, [r3, #4]
    2cb0:	68db      	ldr	r3, [r3, #12]
    2cb2:	f107 0218 	add.w	r2, r7, #24
    2cb6:	4610      	mov	r0, r2
    2cb8:	4619      	mov	r1, r3
    2cba:	f7ff ff5b 	bl	2b74 <xEventGetxTimeStamp>
    2cbe:	466c      	mov	r4, sp
    2cc0:	f107 0308 	add.w	r3, r7, #8
    2cc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2cc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2cca:	f107 0318 	add.w	r3, r7, #24
    2cce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2cd0:	f7ff feec 	bl	2aac <xCompareFunction1>
    2cd4:	4603      	mov	r3, r0
    2cd6:	2b00      	cmp	r3, #0
    2cd8:	d1e5      	bne.n	2ca6 <prvEventListGenericInsert1+0x3e>
        {
        }
        taskEXIT_CRITICAL();
    2cda:	f002 ffc1 	bl	5c60 <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ce0:	685a      	ldr	r2, [r3, #4]
    2ce2:	687b      	ldr	r3, [r7, #4]
    2ce4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2ce6:	687b      	ldr	r3, [r7, #4]
    2ce8:	685b      	ldr	r3, [r3, #4]
    2cea:	687a      	ldr	r2, [r7, #4]
    2cec:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2cee:	687b      	ldr	r3, [r7, #4]
    2cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2cf2:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2cf6:	687a      	ldr	r2, [r7, #4]
    2cf8:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2cfa:	687b      	ldr	r3, [r7, #4]
    2cfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2cfe:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d02:	681b      	ldr	r3, [r3, #0]
    2d04:	1c5a      	adds	r2, r3, #1
    2d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d08:	601a      	str	r2, [r3, #0]
}
    2d0a:	3734      	adds	r7, #52	; 0x34
    2d0c:	46bd      	mov	sp, r7
    2d0e:	bd90      	pop	{r4, r7, pc}

00002d10 <prvEventListGenericInsert2>:

/* insert event to xEventExecutableList in terms of comparison function 2 */
static void prvEventListGenericInsert2( xListItem *pxNewListItem )
{
    2d10:	b590      	push	{r4, r7, lr}
    2d12:	b091      	sub	sp, #68	; 0x44
    2d14:	af04      	add	r7, sp, #16
    2d16:	6078      	str	r0, [r7, #4]
    volatile xListItem *pxIterator;
    struct timeStamp xTimeStampOfInsertion;
    xList * pxList = &xEventExecutableList;
    2d18:	f240 5344 	movw	r3, #1348	; 0x544
    2d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d20:	62bb      	str	r3, [r7, #40]	; 0x28

    xTimeStampOfInsertion = xEventGetxTimeStamp(pxNewListItem->pvOwner);
    2d22:	687b      	ldr	r3, [r7, #4]
    2d24:	68db      	ldr	r3, [r3, #12]
    2d26:	f107 0208 	add.w	r2, r7, #8
    2d2a:	4610      	mov	r0, r2
    2d2c:	4619      	mov	r1, r3
    2d2e:	f7ff ff21 	bl	2b74 <xEventGetxTimeStamp>

    if( xTimeStampOfInsertion.xTime == portMAX_DELAY )
    2d32:	68fb      	ldr	r3, [r7, #12]
    2d34:	f1b3 3fff 	cmp.w	r3, #4294967295
    2d38:	d103      	bne.n	2d42 <prvEventListGenericInsert2+0x32>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d3c:	691b      	ldr	r3, [r3, #16]
    2d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    2d40:	e021      	b.n	2d86 <prvEventListGenericInsert2+0x76>
    }
    else
    {
        taskENTER_CRITICAL();
    2d42:	f002 ff77 	bl	5c34 <vPortEnterCritical>
        // There must already be a End Flag Event with max timeStamp in xEventList.
        // The End Flag Event can be the last Event to be processed, and new events
        // are inserted before it in xEventList.
        // The End Flag Event has been inserted when xEventList is initialised.
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); xCompareFunction2( xEventGetxTimeStamp( pxIterator->pxNext->pvOwner ), xTimeStampOfInsertion ); pxIterator = pxIterator->pxNext ) 
    2d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d48:	3308      	adds	r3, #8
    2d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    2d4c:	e002      	b.n	2d54 <prvEventListGenericInsert2+0x44>
    2d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2d50:	685b      	ldr	r3, [r3, #4]
    2d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    2d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2d56:	685b      	ldr	r3, [r3, #4]
    2d58:	68db      	ldr	r3, [r3, #12]
    2d5a:	f107 0218 	add.w	r2, r7, #24
    2d5e:	4610      	mov	r0, r2
    2d60:	4619      	mov	r1, r3
    2d62:	f7ff ff07 	bl	2b74 <xEventGetxTimeStamp>
    2d66:	466c      	mov	r4, sp
    2d68:	f107 0308 	add.w	r3, r7, #8
    2d6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2d6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2d72:	f107 0318 	add.w	r3, r7, #24
    2d76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2d78:	f7ff febe 	bl	2af8 <xCompareFunction2>
    2d7c:	4603      	mov	r3, r0
    2d7e:	2b00      	cmp	r3, #0
    2d80:	d1e5      	bne.n	2d4e <prvEventListGenericInsert2+0x3e>
        {
        }
        taskEXIT_CRITICAL();
    2d82:	f002 ff6d 	bl	5c60 <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2d88:	685a      	ldr	r2, [r3, #4]
    2d8a:	687b      	ldr	r3, [r7, #4]
    2d8c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2d8e:	687b      	ldr	r3, [r7, #4]
    2d90:	685b      	ldr	r3, [r3, #4]
    2d92:	687a      	ldr	r2, [r7, #4]
    2d94:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2d96:	687b      	ldr	r3, [r7, #4]
    2d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2d9a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2d9e:	687a      	ldr	r2, [r7, #4]
    2da0:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2da2:	687b      	ldr	r3, [r7, #4]
    2da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2da6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2daa:	681b      	ldr	r3, [r3, #0]
    2dac:	1c5a      	adds	r2, r3, #1
    2dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2db0:	601a      	str	r2, [r3, #0]
}
    2db2:	3734      	adds	r7, #52	; 0x34
    2db4:	46bd      	mov	sp, r7
    2db6:	bd90      	pop	{r4, r7, pc}

00002db8 <vListIntialiseEventItem>:


static void vListIntialiseEventItem( xEventHandle pvOwner, xListItem * pxNewEventItem)
{
    2db8:	b480      	push	{r7}
    2dba:	b083      	sub	sp, #12
    2dbc:	af00      	add	r7, sp, #0
    2dbe:	6078      	str	r0, [r7, #4]
    2dc0:	6039      	str	r1, [r7, #0]
    /* set the pvOwner of the EventItem as a event*/
    listSET_LIST_ITEM_OWNER( pxNewEventItem, pvOwner );
    2dc2:	683b      	ldr	r3, [r7, #0]
    2dc4:	687a      	ldr	r2, [r7, #4]
    2dc6:	60da      	str	r2, [r3, #12]
    //pxNewEventItem->pvContainer = (void *) &xEventList;
}
    2dc8:	370c      	adds	r7, #12
    2dca:	46bd      	mov	sp, r7
    2dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2dd0:	4770      	bx	lr
    2dd2:	bf00      	nop

00002dd4 <vEventGenericCreate>:


void vEventGenericCreate( xTaskHandle pxDestination, struct eventData pdData)
{
    2dd4:	b084      	sub	sp, #16
    2dd6:	b580      	push	{r7, lr}
    2dd8:	b086      	sub	sp, #24
    2dda:	af02      	add	r7, sp, #8
    2ddc:	6078      	str	r0, [r7, #4]
    2dde:	f107 001c 	add.w	r0, r7, #28
    2de2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    eveECB * pxNewEvent = NULL;
    2de6:	2300      	movs	r3, #0
    2de8:	60fb      	str	r3, [r7, #12]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2dea:	f002 ff23 	bl	5c34 <vPortEnterCritical>

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2dee:	f002 fdb9 	bl	5964 <xTaskGetCurrentTaskHandle>
    2df2:	60b8      	str	r0, [r7, #8]

    // get new idle event 
    if( listCURRENT_LIST_LENGTH(&xEventIdleList) == 0 )
    2df4:	f240 5308 	movw	r3, #1288	; 0x508
    2df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2dfc:	681b      	ldr	r3, [r3, #0]
    2dfe:	2b00      	cmp	r3, #0
    2e00:	d106      	bne.n	2e10 <vEventGenericCreate+0x3c>
    {
        vPrintString(" No Idle Events available\n\r");
    2e02:	f648 0084 	movw	r0, #34948	; 0x8884
    2e06:	f2c0 0001 	movt	r0, #1
    2e0a:	f014 fa9f 	bl	1734c <vPrintString>
        return;
    2e0e:	e039      	b.n	2e84 <vEventGenericCreate+0xb0>
    }

    pxNewEvent = (eveECB *)xEventIdleList.xListEnd.pxNext->pvOwner;
    2e10:	f240 5308 	movw	r3, #1288	; 0x508
    2e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e18:	68db      	ldr	r3, [r3, #12]
    2e1a:	68db      	ldr	r3, [r3, #12]
    2e1c:	60fb      	str	r3, [r7, #12]
    vListRemove( (xListItem *)&pxNewEvent->xEventListItem );
    2e1e:	68fb      	ldr	r3, [r7, #12]
    2e20:	3318      	adds	r3, #24
    2e22:	4618      	mov	r0, r3
    2e24:	f001 f954 	bl	40d0 <vListRemove>
    if( pxNewEvent == NULL )
    2e28:	68fb      	ldr	r3, [r7, #12]
    2e2a:	2b00      	cmp	r3, #0
    2e2c:	d105      	bne.n	2e3a <vEventGenericCreate+0x66>
    {
        vPrintString("malloc for event stack failed\n\r");
    2e2e:	f648 00a0 	movw	r0, #34976	; 0x88a0
    2e32:	f2c0 0001 	movt	r0, #1
    2e36:	f014 fa89 	bl	1734c <vPrintString>
    }
    if ( pxNewEvent != NULL )
    2e3a:	68fb      	ldr	r3, [r7, #12]
    2e3c:	2b00      	cmp	r3, #0
    2e3e:	d01f      	beq.n	2e80 <vEventGenericCreate+0xac>
    {
        pxNewEvent->pxSource = pxCurrentTCBLocal;
    2e40:	68fb      	ldr	r3, [r7, #12]
    2e42:	68ba      	ldr	r2, [r7, #8]
    2e44:	601a      	str	r2, [r3, #0]
        pxNewEvent->pxDestination = pxDestination;
    2e46:	68fb      	ldr	r3, [r7, #12]
    2e48:	687a      	ldr	r2, [r7, #4]
    2e4a:	605a      	str	r2, [r3, #4]

        /* initialise the time stamp of an event item according to the sort algorithm.*/
        vEventSetxData( pxNewEvent, pdData );
    2e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2e4e:	9300      	str	r3, [sp, #0]
    2e50:	f107 031c 	add.w	r3, r7, #28
    2e54:	cb0e      	ldmia	r3, {r1, r2, r3}
    2e56:	68f8      	ldr	r0, [r7, #12]
    2e58:	f7ff fee4 	bl	2c24 <vEventSetxData>

        vEventSetxTimeStamp( pxNewEvent );
    2e5c:	68f8      	ldr	r0, [r7, #12]
    2e5e:	f7ff fead 	bl	2bbc <vEventSetxTimeStamp>

        vListIntialiseEventItem( pxNewEvent, (xListItem *) &pxNewEvent->xEventListItem );
    2e62:	68fb      	ldr	r3, [r7, #12]
    2e64:	3318      	adds	r3, #24
    2e66:	68f8      	ldr	r0, [r7, #12]
    2e68:	4619      	mov	r1, r3
    2e6a:	f7ff ffa5 	bl	2db8 <vListIntialiseEventItem>

        // insert the event into eventpool with O(1)
        vListInsertEnd(&xEventPool, (xListItem *)& pxNewEvent->xEventListItem);
    2e6e:	68fb      	ldr	r3, [r7, #12]
    2e70:	3318      	adds	r3, #24
    2e72:	f240 501c 	movw	r0, #1308	; 0x51c
    2e76:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2e7a:	4619      	mov	r1, r3
    2e7c:	f001 f8c8 	bl	4010 <vListInsertEnd>
    }
    taskEXIT_CRITICAL();
    2e80:	f002 feee 	bl	5c60 <vPortExitCritical>
}
    2e84:	3710      	adds	r7, #16
    2e86:	46bd      	mov	sp, r7
    2e88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2e8c:	b004      	add	sp, #16
    2e8e:	4770      	bx	lr

00002e90 <Is_Executable_Event_Arrive>:

portBASE_TYPE Is_Executable_Event_Arrive()
{
    2e90:	b580      	push	{r7, lr}
    2e92:	b086      	sub	sp, #24
    2e94:	af00      	add	r7, sp, #0
    xListItem * temp_pxEventListItem;
    portTickType xCurrentTime;
    struct timeStamp xTimeStamp;
    
    if(listCURRENT_LIST_LENGTH(&xEventList) > 1)
    2e96:	f240 5330 	movw	r3, #1328	; 0x530
    2e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e9e:	681b      	ldr	r3, [r3, #0]
    2ea0:	2b01      	cmp	r3, #1
    2ea2:	d915      	bls.n	2ed0 <Is_Executable_Event_Arrive+0x40>
    {
        temp_pxEventListItem = (xListItem *)xEventList.xListEnd.pxNext;
    2ea4:	f240 5330 	movw	r3, #1328	; 0x530
    2ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2eac:	68db      	ldr	r3, [r3, #12]
    2eae:	617b      	str	r3, [r7, #20]
        xTimeStamp = xEventGetxTimeStamp( (xEventHandle) (temp_pxEventListItem)->pvOwner );
    2eb0:	697b      	ldr	r3, [r7, #20]
    2eb2:	68db      	ldr	r3, [r3, #12]
    2eb4:	463a      	mov	r2, r7
    2eb6:	4610      	mov	r0, r2
    2eb8:	4619      	mov	r1, r3
    2eba:	f7ff fe5b 	bl	2b74 <xEventGetxTimeStamp>
        xCurrentTime = xTaskGetTickCount();
    2ebe:	f002 f985 	bl	51cc <xTaskGetTickCount>
    2ec2:	6138      	str	r0, [r7, #16]

        // the event is executable
        if( xTimeStamp.xTime <= xCurrentTime )
    2ec4:	687a      	ldr	r2, [r7, #4]
    2ec6:	693b      	ldr	r3, [r7, #16]
    2ec8:	429a      	cmp	r2, r3
    2eca:	d801      	bhi.n	2ed0 <Is_Executable_Event_Arrive+0x40>
        {
            return 1;
    2ecc:	2301      	movs	r3, #1
    2ece:	e000      	b.n	2ed2 <Is_Executable_Event_Arrive+0x42>
        }
    }
    return 0;
    2ed0:	2300      	movs	r3, #0
}
    2ed2:	4618      	mov	r0, r3
    2ed4:	3718      	adds	r7, #24
    2ed6:	46bd      	mov	sp, r7
    2ed8:	bd80      	pop	{r7, pc}
    2eda:	bf00      	nop

00002edc <xEventListGenericTransit>:

/* An API to transfer all executable Event Items from xEventList to xEventExecutableList.
* Then, choose the first executable event item in xEventExecutableList to proceed, which means
* transfer the executable to specific xEventReadyList according to the condition of CPU*/
portBASE_TYPE xEventListGenericTransit( xListItem ** pxEventListItem, xList ** pxCurrentReadyList)
{
    2edc:	b580      	push	{r7, lr}
    2ede:	b088      	sub	sp, #32
    2ee0:	af00      	add	r7, sp, #0
    2ee2:	6078      	str	r0, [r7, #4]
    2ee4:	6039      	str	r1, [r7, #0]
    xListItem * temp_pxEventListItem;
    struct timeStamp xTimeStamp;
    portTickType xCurrentTime;

    // transmit events from event pool to xEventList according to the xCompareFunction1
    while(listCURRENT_LIST_LENGTH( &xEventPool ) != 0)
    2ee6:	e00b      	b.n	2f00 <xEventListGenericTransit+0x24>
    {
        temp_pxEventListItem = (xListItem *) xEventPool.xListEnd.pxNext;    
    2ee8:	f240 531c 	movw	r3, #1308	; 0x51c
    2eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ef0:	68db      	ldr	r3, [r3, #12]
    2ef2:	61fb      	str	r3, [r7, #28]
        vListRemove(temp_pxEventListItem);
    2ef4:	69f8      	ldr	r0, [r7, #28]
    2ef6:	f001 f8eb 	bl	40d0 <vListRemove>
        //how to call this funciton: vEventListInsert( newListItem ). This function add the new item into the xEventList as default
        prvEventListGenericInsert1( temp_pxEventListItem ); 
    2efa:	69f8      	ldr	r0, [r7, #28]
    2efc:	f7ff feb4 	bl	2c68 <prvEventListGenericInsert1>
    xListItem * temp_pxEventListItem;
    struct timeStamp xTimeStamp;
    portTickType xCurrentTime;

    // transmit events from event pool to xEventList according to the xCompareFunction1
    while(listCURRENT_LIST_LENGTH( &xEventPool ) != 0)
    2f00:	f240 531c 	movw	r3, #1308	; 0x51c
    2f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f08:	681b      	ldr	r3, [r3, #0]
    2f0a:	2b00      	cmp	r3, #0
    2f0c:	d1ec      	bne.n	2ee8 <xEventListGenericTransit+0xc>
        //how to call this funciton: vEventListInsert( newListItem ). This function add the new item into the xEventList as default
        prvEventListGenericInsert1( temp_pxEventListItem ); 
    }

    // transmit the executable event from xEventList to xEventExecutableList 
    while( listCURRENT_LIST_LENGTH( &xEventList ) > 1 )
    2f0e:	e020      	b.n	2f52 <xEventListGenericTransit+0x76>
    {
        temp_pxEventListItem = (xListItem *)xEventList.xListEnd.pxNext;
    2f10:	f240 5330 	movw	r3, #1328	; 0x530
    2f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f18:	68db      	ldr	r3, [r3, #12]
    2f1a:	61fb      	str	r3, [r7, #28]
        xTimeStamp = xEventGetxTimeStamp( (xEventHandle) (temp_pxEventListItem)->pvOwner );
    2f1c:	69fb      	ldr	r3, [r7, #28]
    2f1e:	68db      	ldr	r3, [r3, #12]
    2f20:	f107 0208 	add.w	r2, r7, #8
    2f24:	4610      	mov	r0, r2
    2f26:	4619      	mov	r1, r3
    2f28:	f7ff fe24 	bl	2b74 <xEventGetxTimeStamp>
        xCurrentTime = xTaskGetTickCount();
    2f2c:	f002 f94e 	bl	51cc <xTaskGetTickCount>
    2f30:	61b8      	str	r0, [r7, #24]

        // the event is executable
        if( xTimeStamp.xTime <= xCurrentTime )
    2f32:	68fa      	ldr	r2, [r7, #12]
    2f34:	69bb      	ldr	r3, [r7, #24]
    2f36:	429a      	cmp	r2, r3
    2f38:	d80a      	bhi.n	2f50 <xEventListGenericTransit+0x74>
        {
            taskENTER_CRITICAL();
    2f3a:	f002 fe7b 	bl	5c34 <vPortEnterCritical>
            /* remove pxListItem from xEventList */ 
            vListRemove(temp_pxEventListItem);
    2f3e:	69f8      	ldr	r0, [r7, #28]
    2f40:	f001 f8c6 	bl	40d0 <vListRemove>
            /* insert the executable event into the xEventExecutableList*/
            prvEventListGenericInsert2(temp_pxEventListItem);
    2f44:	69f8      	ldr	r0, [r7, #28]
    2f46:	f7ff fee3 	bl	2d10 <prvEventListGenericInsert2>
            taskEXIT_CRITICAL();
    2f4a:	f002 fe89 	bl	5c60 <vPortExitCritical>
    2f4e:	e000      	b.n	2f52 <xEventListGenericTransit+0x76>
        }
        else
        {
          // no executable event in xEventList
           break; 
    2f50:	e006      	b.n	2f60 <xEventListGenericTransit+0x84>
        //how to call this funciton: vEventListInsert( newListItem ). This function add the new item into the xEventList as default
        prvEventListGenericInsert1( temp_pxEventListItem ); 
    }

    // transmit the executable event from xEventList to xEventExecutableList 
    while( listCURRENT_LIST_LENGTH( &xEventList ) > 1 )
    2f52:	f240 5330 	movw	r3, #1328	; 0x530
    2f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f5a:	681b      	ldr	r3, [r3, #0]
    2f5c:	2b01      	cmp	r3, #1
    2f5e:	d8d7      	bhi.n	2f10 <xEventListGenericTransit+0x34>
           break; 
        }
    }

    // if no executable event exists, then return NULL and information about not time yet
    if( listCURRENT_LIST_LENGTH(& xEventExecutableList) == 1 )
    2f60:	f240 5344 	movw	r3, #1348	; 0x544
    2f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f68:	681b      	ldr	r3, [r3, #0]
    2f6a:	2b01      	cmp	r3, #1
    2f6c:	d107      	bne.n	2f7e <xEventListGenericTransit+0xa2>
    {
        *pxCurrentReadyList = NULL;
    2f6e:	683b      	ldr	r3, [r7, #0]
    2f70:	2200      	movs	r2, #0
    2f72:	601a      	str	r2, [r3, #0]
        *pxEventListItem = NULL;
    2f74:	687b      	ldr	r3, [r7, #4]
    2f76:	2200      	movs	r2, #0
    2f78:	601a      	str	r2, [r3, #0]
        return 0;
    2f7a:	2300      	movs	r3, #0
    2f7c:	e01d      	b.n	2fba <xEventListGenericTransit+0xde>
    }
    // transmit the first executable event from xEventExecutableList to specific xEventReadyList
    else
    {
        *pxCurrentReadyList = pxGetReadyList();
    2f7e:	f7ff fe67 	bl	2c50 <pxGetReadyList>
    2f82:	4602      	mov	r2, r0
    2f84:	683b      	ldr	r3, [r7, #0]
    2f86:	601a      	str	r2, [r3, #0]
        *pxEventListItem = (xListItem *) xEventExecutableList.xListEnd.pxNext;
    2f88:	f240 5344 	movw	r3, #1348	; 0x544
    2f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f90:	68da      	ldr	r2, [r3, #12]
    2f92:	687b      	ldr	r3, [r7, #4]
    2f94:	601a      	str	r2, [r3, #0]
        
        taskENTER_CRITICAL();
    2f96:	f002 fe4d 	bl	5c34 <vPortEnterCritical>
        /* remove pxListItem from xEventList */ 
        vListRemove(*pxEventListItem);
    2f9a:	687b      	ldr	r3, [r7, #4]
    2f9c:	681b      	ldr	r3, [r3, #0]
    2f9e:	4618      	mov	r0, r3
    2fa0:	f001 f896 	bl	40d0 <vListRemove>
        /* insert the pxListItem into the specified pxList */
        vListInsertEnd(*pxCurrentReadyList, *pxEventListItem);
    2fa4:	683b      	ldr	r3, [r7, #0]
    2fa6:	681a      	ldr	r2, [r3, #0]
    2fa8:	687b      	ldr	r3, [r7, #4]
    2faa:	681b      	ldr	r3, [r3, #0]
    2fac:	4610      	mov	r0, r2
    2fae:	4619      	mov	r1, r3
    2fb0:	f001 f82e 	bl	4010 <vListInsertEnd>
        taskEXIT_CRITICAL();
    2fb4:	f002 fe54 	bl	5c60 <vPortExitCritical>
    }

    return 1;
    2fb8:	2301      	movs	r3, #1
}
    2fba:	4618      	mov	r0, r3
    2fbc:	3720      	adds	r7, #32
    2fbe:	46bd      	mov	sp, r7
    2fc0:	bd80      	pop	{r7, pc}
    2fc2:	bf00      	nop

00002fc4 <vEventGenericReceive>:

void vEventGenericReceive( xEventHandle * pxEvent, xTaskHandle pxSource, xList * pxList )
{
    2fc4:	b580      	push	{r7, lr}
    2fc6:	b088      	sub	sp, #32
    2fc8:	af00      	add	r7, sp, #0
    2fca:	60f8      	str	r0, [r7, #12]
    2fcc:	60b9      	str	r1, [r7, #8]
    2fce:	607a      	str	r2, [r7, #4]
    xList * const pxConstList = pxList; 
    2fd0:	687b      	ldr	r3, [r7, #4]
    2fd2:	61bb      	str	r3, [r7, #24]
    {
        //successful.
        //helloworld();
    }

    if( listLIST_IS_EMPTY( pxList ) )
    2fd4:	687b      	ldr	r3, [r7, #4]
    2fd6:	681b      	ldr	r3, [r3, #0]
    2fd8:	2b00      	cmp	r3, #0
    2fda:	d103      	bne.n	2fe4 <vEventGenericReceive+0x20>
    {
        *pxEvent = NULL;
    2fdc:	68fb      	ldr	r3, [r7, #12]
    2fde:	2200      	movs	r2, #0
    2fe0:	601a      	str	r2, [r3, #0]
        return;
    2fe2:	e04d      	b.n	3080 <vEventGenericReceive+0xbc>
    }

    volatile xListItem * pxFlag = pxConstList->xListEnd.pxNext;
    2fe4:	69bb      	ldr	r3, [r7, #24]
    2fe6:	68db      	ldr	r3, [r3, #12]
    2fe8:	61fb      	str	r3, [r7, #28]


    taskENTER_CRITICAL();
    2fea:	f002 fe23 	bl	5c34 <vPortEnterCritical>

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2fee:	f002 fcb9 	bl	5964 <xTaskGetCurrentTaskHandle>
    2ff2:	6178      	str	r0, [r7, #20]

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2ff4:	e01e      	b.n	3034 <vEventGenericReceive+0x70>
    {
        if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2ff6:	69fb      	ldr	r3, [r7, #28]
    2ff8:	68db      	ldr	r3, [r3, #12]
    2ffa:	4618      	mov	r0, r3
    2ffc:	f7ff fda2 	bl	2b44 <xEventGetpxSource>
    3000:	4602      	mov	r2, r0
    3002:	68bb      	ldr	r3, [r7, #8]
    3004:	429a      	cmp	r2, r3
    3006:	d112      	bne.n	302e <vEventGenericReceive+0x6a>
    3008:	69fb      	ldr	r3, [r7, #28]
    300a:	68db      	ldr	r3, [r3, #12]
    300c:	4618      	mov	r0, r3
    300e:	f7ff fda5 	bl	2b5c <xEventGetpxDestination>
    3012:	4602      	mov	r2, r0
    3014:	697b      	ldr	r3, [r7, #20]
    3016:	429a      	cmp	r2, r3
    3018:	d109      	bne.n	302e <vEventGenericReceive+0x6a>
        {
            *pxEvent = pxFlag->pvOwner;
    301a:	69fb      	ldr	r3, [r7, #28]
    301c:	68da      	ldr	r2, [r3, #12]
    301e:	68fb      	ldr	r3, [r7, #12]
    3020:	601a      	str	r2, [r3, #0]
            vListRemove((xListItem *)pxFlag);
    3022:	69f8      	ldr	r0, [r7, #28]
    3024:	f001 f854 	bl	40d0 <vListRemove>
            taskEXIT_CRITICAL();
    3028:	f002 fe1a 	bl	5c60 <vPortExitCritical>
            return;
    302c:	e028      	b.n	3080 <vEventGenericReceive+0xbc>
    taskENTER_CRITICAL();

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    302e:	69fb      	ldr	r3, [r7, #28]
    3030:	685b      	ldr	r3, [r3, #4]
    3032:	61fb      	str	r3, [r7, #28]
    3034:	69bb      	ldr	r3, [r7, #24]
    3036:	691a      	ldr	r2, [r3, #16]
    3038:	69fb      	ldr	r3, [r7, #28]
    303a:	429a      	cmp	r2, r3
    303c:	d1db      	bne.n	2ff6 <vEventGenericReceive+0x32>
            return;
        }
    }

    /* we can't forget the last one item of the list. */
    if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    303e:	69fb      	ldr	r3, [r7, #28]
    3040:	68db      	ldr	r3, [r3, #12]
    3042:	4618      	mov	r0, r3
    3044:	f7ff fd7e 	bl	2b44 <xEventGetpxSource>
    3048:	4602      	mov	r2, r0
    304a:	68bb      	ldr	r3, [r7, #8]
    304c:	429a      	cmp	r2, r3
    304e:	d112      	bne.n	3076 <vEventGenericReceive+0xb2>
    3050:	69fb      	ldr	r3, [r7, #28]
    3052:	68db      	ldr	r3, [r3, #12]
    3054:	4618      	mov	r0, r3
    3056:	f7ff fd81 	bl	2b5c <xEventGetpxDestination>
    305a:	4602      	mov	r2, r0
    305c:	697b      	ldr	r3, [r7, #20]
    305e:	429a      	cmp	r2, r3
    3060:	d109      	bne.n	3076 <vEventGenericReceive+0xb2>
    {
        *pxEvent = pxFlag->pvOwner;
    3062:	69fb      	ldr	r3, [r7, #28]
    3064:	68da      	ldr	r2, [r3, #12]
    3066:	68fb      	ldr	r3, [r7, #12]
    3068:	601a      	str	r2, [r3, #0]
        vListRemove((xListItem *)pxFlag);
    306a:	69f8      	ldr	r0, [r7, #28]
    306c:	f001 f830 	bl	40d0 <vListRemove>
        taskEXIT_CRITICAL();
    3070:	f002 fdf6 	bl	5c60 <vPortExitCritical>
        return;
    3074:	e004      	b.n	3080 <vEventGenericReceive+0xbc>
    }
    else
    {
        // cannot find the specified event.
        *pxEvent = NULL;
    3076:	68fb      	ldr	r3, [r7, #12]
    3078:	2200      	movs	r2, #0
    307a:	601a      	str	r2, [r3, #0]
    }

    taskEXIT_CRITICAL();
    307c:	f002 fdf0 	bl	5c60 <vPortExitCritical>
}
    3080:	3720      	adds	r7, #32
    3082:	46bd      	mov	sp, r7
    3084:	bd80      	pop	{r7, pc}
    3086:	bf00      	nop

00003088 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    3088:	b580      	push	{r7, lr}
    308a:	b084      	sub	sp, #16
    308c:	af00      	add	r7, sp, #0
    308e:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
    3090:	f002 fdd0 	bl	5c34 <vPortEnterCritical>

    xListItem * pxEventItem = &((eveECB *)xEvent)->xEventListItem;
    3094:	687b      	ldr	r3, [r7, #4]
    3096:	3318      	adds	r3, #24
    3098:	60fb      	str	r3, [r7, #12]
    vListRemove (pxEventItem);
    309a:	68f8      	ldr	r0, [r7, #12]
    309c:	f001 f818 	bl	40d0 <vListRemove>
    vListInsertEnd( &xEventIdleList, pxEventItem );
    30a0:	f240 5008 	movw	r0, #1288	; 0x508
    30a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    30a8:	68f9      	ldr	r1, [r7, #12]
    30aa:	f000 ffb1 	bl	4010 <vListInsertEnd>

    taskEXIT_CRITICAL();
    30ae:	f002 fdd7 	bl	5c60 <vPortExitCritical>
}
    30b2:	3710      	adds	r7, #16
    30b4:	46bd      	mov	sp, r7
    30b6:	bd80      	pop	{r7, pc}

000030b8 <vSemaphoreInitialise>:
// record the period of Task
extern portTickType xPeriodOfTask[NUMBEROFTASK];

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    30b8:	b580      	push	{r7, lr}
    30ba:	b082      	sub	sp, #8
    30bc:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    30be:	2300      	movs	r3, #0
    30c0:	607b      	str	r3, [r7, #4]
    30c2:	e033      	b.n	312c <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    30c4:	2001      	movs	r0, #1
    30c6:	2100      	movs	r1, #0
    30c8:	2203      	movs	r2, #3
    30ca:	f001 f877 	bl	41bc <xQueueGenericCreate>
    30ce:	4601      	mov	r1, r0
    30d0:	f640 337c 	movw	r3, #2940	; 0xb7c
    30d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30d8:	687a      	ldr	r2, [r7, #4]
    30da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    30de:	f640 337c 	movw	r3, #2940	; 0xb7c
    30e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30e6:	687a      	ldr	r2, [r7, #4]
    30e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    30ec:	2b00      	cmp	r3, #0
    30ee:	d00c      	beq.n	310a <vSemaphoreInitialise+0x52>
    30f0:	f640 337c 	movw	r3, #2940	; 0xb7c
    30f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30f8:	687a      	ldr	r2, [r7, #4]
    30fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    30fe:	4618      	mov	r0, r3
    3100:	2100      	movs	r1, #0
    3102:	2200      	movs	r2, #0
    3104:	2300      	movs	r3, #0
    3106:	f001 f8e7 	bl	42d8 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    310a:	f640 337c 	movw	r3, #2940	; 0xb7c
    310e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3112:	687a      	ldr	r2, [r7, #4]
    3114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3118:	4618      	mov	r0, r3
    311a:	2100      	movs	r1, #0
    311c:	f04f 32ff 	mov.w	r2, #4294967295
    3120:	2300      	movs	r3, #0
    3122:	f001 f99f 	bl	4464 <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    3126:	687b      	ldr	r3, [r7, #4]
    3128:	3301      	adds	r3, #1
    312a:	607b      	str	r3, [r7, #4]
    312c:	687b      	ldr	r3, [r7, #4]
    312e:	2b22      	cmp	r3, #34	; 0x22
    3130:	ddc8      	ble.n	30c4 <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    3132:	3708      	adds	r7, #8
    3134:	46bd      	mov	sp, r7
    3136:	bd80      	pop	{r7, pc}

00003138 <vParameterInitialise>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vParameterInitialise()
{
    3138:	b480      	push	{r7}
    313a:	b085      	sub	sp, #20
    313c:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    313e:	2300      	movs	r3, #0
    3140:	60fb      	str	r3, [r7, #12]
    3142:	e073      	b.n	322c <vParameterInitialise+0xf4>
    {
        pvParameters[i].xMyFlag = i;
    3144:	f240 5378 	movw	r3, #1400	; 0x578
    3148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    314c:	68fa      	ldr	r2, [r7, #12]
    314e:	212c      	movs	r1, #44	; 0x2c
    3150:	fb01 f202 	mul.w	r2, r1, r2
    3154:	4413      	add	r3, r2
    3156:	68fa      	ldr	r2, [r7, #12]
    3158:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfIn = 0;
    315a:	f240 5378 	movw	r3, #1400	; 0x578
    315e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3162:	68fa      	ldr	r2, [r7, #12]
    3164:	212c      	movs	r1, #44	; 0x2c
    3166:	fb01 f202 	mul.w	r2, r1, r2
    316a:	4413      	add	r3, r2
    316c:	3304      	adds	r3, #4
    316e:	2200      	movs	r2, #0
    3170:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfOut = 0;
    3172:	f240 5378 	movw	r3, #1400	; 0x578
    3176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    317a:	68fa      	ldr	r2, [r7, #12]
    317c:	212c      	movs	r1, #44	; 0x2c
    317e:	fb01 f202 	mul.w	r2, r1, r2
    3182:	4413      	add	r3, r2
    3184:	3308      	adds	r3, #8
    3186:	2200      	movs	r2, #0
    3188:	601a      	str	r2, [r3, #0]
        pvParameters[i].xLet = xLetOfServant[i]/portTICK_RATE_MS;
    318a:	f240 0394 	movw	r3, #148	; 0x94
    318e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3192:	68fa      	ldr	r2, [r7, #12]
    3194:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3198:	f240 5378 	movw	r3, #1400	; 0x578
    319c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31a0:	68f9      	ldr	r1, [r7, #12]
    31a2:	202c      	movs	r0, #44	; 0x2c
    31a4:	fb00 f101 	mul.w	r1, r0, r1
    31a8:	440b      	add	r3, r1
    31aa:	331c      	adds	r3, #28
    31ac:	601a      	str	r2, [r3, #0]
        pvParameters[i].xFp = xServantTable[i];
    31ae:	f240 3354 	movw	r3, #852	; 0x354
    31b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31b6:	68fa      	ldr	r2, [r7, #12]
    31b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    31bc:	f240 5378 	movw	r3, #1400	; 0x578
    31c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31c4:	68f9      	ldr	r1, [r7, #12]
    31c6:	202c      	movs	r0, #44	; 0x2c
    31c8:	fb00 f101 	mul.w	r1, r0, r1
    31cc:	440b      	add	r3, r1
    31ce:	3320      	adds	r3, #32
    31d0:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
    31d2:	f240 1320 	movw	r3, #288	; 0x120
    31d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31da:	68fa      	ldr	r2, [r7, #12]
    31dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    31e0:	f240 5378 	movw	r3, #1400	; 0x578
    31e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31e8:	68f9      	ldr	r1, [r7, #12]
    31ea:	202c      	movs	r0, #44	; 0x2c
    31ec:	fb00 f101 	mul.w	r1, r0, r1
    31f0:	440b      	add	r3, r1
    31f2:	3328      	adds	r3, #40	; 0x28
    31f4:	601a      	str	r2, [r3, #0]
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    31f6:	f240 1320 	movw	r3, #288	; 0x120
    31fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31fe:	68fa      	ldr	r2, [r7, #12]
    3200:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3204:	f240 032c 	movw	r3, #44	; 0x2c
    3208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    320c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3210:	f240 5378 	movw	r3, #1400	; 0x578
    3214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3218:	68f9      	ldr	r1, [r7, #12]
    321a:	202c      	movs	r0, #44	; 0x2c
    321c:	fb00 f101 	mul.w	r1, r0, r1
    3220:	440b      	add	r3, r1
    3222:	3324      	adds	r3, #36	; 0x24
    3224:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    3226:	68fb      	ldr	r3, [r7, #12]
    3228:	3301      	adds	r3, #1
    322a:	60fb      	str	r3, [r7, #12]
    322c:	68fb      	ldr	r3, [r7, #12]
    322e:	2b22      	cmp	r3, #34	; 0x22
    3230:	dd88      	ble.n	3144 <vParameterInitialise+0xc>
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3232:	2300      	movs	r3, #0
    3234:	60fb      	str	r3, [r7, #12]
    3236:	e080      	b.n	333a <vParameterInitialise+0x202>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    3238:	f240 12ac 	movw	r2, #428	; 0x1ac
    323c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3240:	68f9      	ldr	r1, [r7, #12]
    3242:	460b      	mov	r3, r1
    3244:	005b      	lsls	r3, r3, #1
    3246:	440b      	add	r3, r1
    3248:	009b      	lsls	r3, r3, #2
    324a:	4413      	add	r3, r2
    324c:	3304      	adds	r3, #4
    324e:	681b      	ldr	r3, [r3, #0]
    3250:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    3252:	f240 12ac 	movw	r2, #428	; 0x1ac
    3256:	f2c2 0200 	movt	r2, #8192	; 0x2000
    325a:	68f9      	ldr	r1, [r7, #12]
    325c:	460b      	mov	r3, r1
    325e:	005b      	lsls	r3, r3, #1
    3260:	440b      	add	r3, r1
    3262:	009b      	lsls	r3, r3, #2
    3264:	4413      	add	r3, r2
    3266:	3308      	adds	r3, #8
    3268:	681b      	ldr	r3, [r3, #0]
    326a:	607b      	str	r3, [r7, #4]

        pvParameters[xSource].xOutFlag[pvParameters[xSource].xNumOfOut] = xDest;
    326c:	f240 5378 	movw	r3, #1400	; 0x578
    3270:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3274:	68ba      	ldr	r2, [r7, #8]
    3276:	212c      	movs	r1, #44	; 0x2c
    3278:	fb01 f202 	mul.w	r2, r1, r2
    327c:	4413      	add	r3, r2
    327e:	3308      	adds	r3, #8
    3280:	6818      	ldr	r0, [r3, #0]
    3282:	f240 5278 	movw	r2, #1400	; 0x578
    3286:	f2c2 0200 	movt	r2, #8192	; 0x2000
    328a:	68b9      	ldr	r1, [r7, #8]
    328c:	460b      	mov	r3, r1
    328e:	009b      	lsls	r3, r3, #2
    3290:	440b      	add	r3, r1
    3292:	005b      	lsls	r3, r3, #1
    3294:	440b      	add	r3, r1
    3296:	4403      	add	r3, r0
    3298:	3304      	adds	r3, #4
    329a:	009b      	lsls	r3, r3, #2
    329c:	4413      	add	r3, r2
    329e:	687a      	ldr	r2, [r7, #4]
    32a0:	605a      	str	r2, [r3, #4]
        pvParameters[xSource].xNumOfOut ++;
    32a2:	f240 5378 	movw	r3, #1400	; 0x578
    32a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32aa:	68ba      	ldr	r2, [r7, #8]
    32ac:	212c      	movs	r1, #44	; 0x2c
    32ae:	fb01 f202 	mul.w	r2, r1, r2
    32b2:	4413      	add	r3, r2
    32b4:	3308      	adds	r3, #8
    32b6:	681b      	ldr	r3, [r3, #0]
    32b8:	1c5a      	adds	r2, r3, #1
    32ba:	f240 5378 	movw	r3, #1400	; 0x578
    32be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32c2:	68b9      	ldr	r1, [r7, #8]
    32c4:	202c      	movs	r0, #44	; 0x2c
    32c6:	fb00 f101 	mul.w	r1, r0, r1
    32ca:	440b      	add	r3, r1
    32cc:	3308      	adds	r3, #8
    32ce:	601a      	str	r2, [r3, #0]

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
    32d0:	f240 5378 	movw	r3, #1400	; 0x578
    32d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32d8:	687a      	ldr	r2, [r7, #4]
    32da:	212c      	movs	r1, #44	; 0x2c
    32dc:	fb01 f202 	mul.w	r2, r1, r2
    32e0:	4413      	add	r3, r2
    32e2:	3304      	adds	r3, #4
    32e4:	6818      	ldr	r0, [r3, #0]
    32e6:	f240 5278 	movw	r2, #1400	; 0x578
    32ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    32ee:	6879      	ldr	r1, [r7, #4]
    32f0:	460b      	mov	r3, r1
    32f2:	009b      	lsls	r3, r3, #2
    32f4:	440b      	add	r3, r1
    32f6:	005b      	lsls	r3, r3, #1
    32f8:	440b      	add	r3, r1
    32fa:	4403      	add	r3, r0
    32fc:	3302      	adds	r3, #2
    32fe:	009b      	lsls	r3, r3, #2
    3300:	4413      	add	r3, r2
    3302:	68ba      	ldr	r2, [r7, #8]
    3304:	605a      	str	r2, [r3, #4]
        pvParameters[xDest].xNumOfIn ++;
    3306:	f240 5378 	movw	r3, #1400	; 0x578
    330a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    330e:	687a      	ldr	r2, [r7, #4]
    3310:	212c      	movs	r1, #44	; 0x2c
    3312:	fb01 f202 	mul.w	r2, r1, r2
    3316:	4413      	add	r3, r2
    3318:	3304      	adds	r3, #4
    331a:	681b      	ldr	r3, [r3, #0]
    331c:	1c5a      	adds	r2, r3, #1
    331e:	f240 5378 	movw	r3, #1400	; 0x578
    3322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3326:	6879      	ldr	r1, [r7, #4]
    3328:	202c      	movs	r0, #44	; 0x2c
    332a:	fb00 f101 	mul.w	r1, r0, r1
    332e:	440b      	add	r3, r1
    3330:	3304      	adds	r3, #4
    3332:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3334:	68fb      	ldr	r3, [r7, #12]
    3336:	3301      	adds	r3, #1
    3338:	60fb      	str	r3, [r7, #12]
    333a:	f240 13ac 	movw	r3, #428	; 0x1ac
    333e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3342:	681a      	ldr	r2, [r3, #0]
    3344:	68fb      	ldr	r3, [r7, #12]
    3346:	429a      	cmp	r2, r3
    3348:	f73f af76 	bgt.w	3238 <vParameterInitialise+0x100>
        pvParameters[xSource].xNumOfOut ++;

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
        pvParameters[xDest].xNumOfIn ++;
    }
}
    334c:	3714      	adds	r7, #20
    334e:	46bd      	mov	sp, r7
    3350:	f85d 7b04 	ldr.w	r7, [sp], #4
    3354:	4770      	bx	lr
    3356:	bf00      	nop

00003358 <vTaskDelayLET>:

void vTaskDelayLET()
{
    3358:	b580      	push	{r7, lr}
    335a:	b084      	sub	sp, #16
    335c:	af00      	add	r7, sp, #0
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    335e:	f002 fb01 	bl	5964 <xTaskGetCurrentTaskHandle>
    3362:	60b8      	str	r0, [r7, #8]
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    3364:	68b8      	ldr	r0, [r7, #8]
    3366:	f002 fbb3 	bl	5ad0 <xTaskGetxStartTime>
    336a:	6078      	str	r0, [r7, #4]
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    336c:	68b8      	ldr	r0, [r7, #8]
    336e:	f002 fbbb 	bl	5ae8 <xTaskGetxLet>
    3372:	4602      	mov	r2, r0
    3374:	687b      	ldr	r3, [r7, #4]
    3376:	4413      	add	r3, r2
    3378:	603b      	str	r3, [r7, #0]
    portTickType xCurrentTime = xTaskGetTickCount();
    337a:	f001 ff27 	bl	51cc <xTaskGetTickCount>
    337e:	60f8      	str	r0, [r7, #12]

    while( xCurrentTime <  xOutputTime)
    3380:	e002      	b.n	3388 <vTaskDelayLET+0x30>
    {
        xCurrentTime = xTaskGetTickCount();
    3382:	f001 ff23 	bl	51cc <xTaskGetTickCount>
    3386:	60f8      	str	r0, [r7, #12]
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    portTickType xCurrentTime = xTaskGetTickCount();

    while( xCurrentTime <  xOutputTime)
    3388:	68fa      	ldr	r2, [r7, #12]
    338a:	683b      	ldr	r3, [r7, #0]
    338c:	429a      	cmp	r2, r3
    338e:	d3f8      	bcc.n	3382 <vTaskDelayLET+0x2a>
    {
        xCurrentTime = xTaskGetTickCount();
    }
}
    3390:	3710      	adds	r7, #16
    3392:	46bd      	mov	sp, r7
    3394:	bd80      	pop	{r7, pc}
    3396:	bf00      	nop

00003398 <vEventReceiveAll>:

// receive all Events from sources servant, and return them through the point
void vEventReceiveAll( void * pvParameter, xEventHandle *pxEvent )
{
    3398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    339c:	b088      	sub	sp, #32
    339e:	af00      	add	r7, sp, #0
    33a0:	6078      	str	r0, [r7, #4]
    33a2:	6039      	str	r1, [r7, #0]
    33a4:	4669      	mov	r1, sp
    33a6:	4688      	mov	r8, r1
    portBASE_TYPE i ;

    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    33a8:	6879      	ldr	r1, [r7, #4]
    33aa:	6849      	ldr	r1, [r1, #4]
    33ac:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xInFlag[NUM]; 
    33ae:	69be      	ldr	r6, [r7, #24]
    33b0:	1e71      	subs	r1, r6, #1
    33b2:	6179      	str	r1, [r7, #20]
    33b4:	4631      	mov	r1, r6
    33b6:	4608      	mov	r0, r1
    33b8:	f04f 0100 	mov.w	r1, #0
    33bc:	014d      	lsls	r5, r1, #5
    33be:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    33c2:	0144      	lsls	r4, r0, #5
    33c4:	4631      	mov	r1, r6
    33c6:	4608      	mov	r0, r1
    33c8:	f04f 0100 	mov.w	r1, #0
    33cc:	014b      	lsls	r3, r1, #5
    33ce:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    33d2:	0142      	lsls	r2, r0, #5
    33d4:	4633      	mov	r3, r6
    33d6:	009b      	lsls	r3, r3, #2
    33d8:	3303      	adds	r3, #3
    33da:	3307      	adds	r3, #7
    33dc:	08db      	lsrs	r3, r3, #3
    33de:	00db      	lsls	r3, r3, #3
    33e0:	ebad 0d03 	sub.w	sp, sp, r3
    33e4:	466b      	mov	r3, sp
    33e6:	3303      	adds	r3, #3
    33e8:	089b      	lsrs	r3, r3, #2
    33ea:	009b      	lsls	r3, r3, #2
    33ec:	613b      	str	r3, [r7, #16]
    portBASE_TYPE xMyFlag = ((struct xParam *) pvParameter)->xMyFlag;
    33ee:	687b      	ldr	r3, [r7, #4]
    33f0:	681b      	ldr	r3, [r3, #0]
    33f2:	60fb      	str	r3, [r7, #12]
    portTickType xCurrentTime;
   
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );
    33f4:	f640 337c 	movw	r3, #2940	; 0xb7c
    33f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33fc:	68fa      	ldr	r2, [r7, #12]
    33fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3402:	4618      	mov	r0, r3
    3404:	2100      	movs	r1, #0
    3406:	f04f 32ff 	mov.w	r2, #4294967295
    340a:	2300      	movs	r3, #0
    340c:	f001 f82a 	bl	4464 <xQueueGenericReceive>

    xCurrentTime = xTaskGetTickCount(); 
    3410:	f001 fedc 	bl	51cc <xTaskGetTickCount>
    3414:	60b8      	str	r0, [r7, #8]
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3416:	f640 4308 	movw	r3, #3080	; 0xc08
    341a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    341e:	68fa      	ldr	r2, [r7, #12]
    3420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3424:	4618      	mov	r0, r3
    3426:	68b9      	ldr	r1, [r7, #8]
    3428:	f002 fb6a 	bl	5b00 <vTaskSetxStartTime>

    for( i = 0; i < NUM; i ++ )
    342c:	2300      	movs	r3, #0
    342e:	61fb      	str	r3, [r7, #28]
    3430:	e024      	b.n	347c <vEventReceiveAll+0xe4>
    {
        // get all the in flag
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
    3432:	687a      	ldr	r2, [r7, #4]
    3434:	69fb      	ldr	r3, [r7, #28]
    3436:	3302      	adds	r3, #2
    3438:	009b      	lsls	r3, r3, #2
    343a:	4413      	add	r3, r2
    343c:	6859      	ldr	r1, [r3, #4]
    343e:	693b      	ldr	r3, [r7, #16]
    3440:	69fa      	ldr	r2, [r7, #28]
    3442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    3446:	69fb      	ldr	r3, [r7, #28]
    3448:	009b      	lsls	r3, r3, #2
    344a:	683a      	ldr	r2, [r7, #0]
    344c:	18d1      	adds	r1, r2, r3
    344e:	693b      	ldr	r3, [r7, #16]
    3450:	69fa      	ldr	r2, [r7, #28]
    3452:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3456:	f640 4308 	movw	r3, #3080	; 0xc08
    345a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    345e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3462:	f240 5374 	movw	r3, #1396	; 0x574
    3466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    346a:	681b      	ldr	r3, [r3, #0]
    346c:	4608      	mov	r0, r1
    346e:	4611      	mov	r1, r2
    3470:	461a      	mov	r2, r3
    3472:	f7ff fda7 	bl	2fc4 <vEventGenericReceive>
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );

    xCurrentTime = xTaskGetTickCount(); 
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

    for( i = 0; i < NUM; i ++ )
    3476:	69fb      	ldr	r3, [r7, #28]
    3478:	3301      	adds	r3, #1
    347a:	61fb      	str	r3, [r7, #28]
    347c:	69fa      	ldr	r2, [r7, #28]
    347e:	69bb      	ldr	r3, [r7, #24]
    3480:	429a      	cmp	r2, r3
    3482:	dbd6      	blt.n	3432 <vEventReceiveAll+0x9a>
    3484:	46c5      	mov	sp, r8
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    }
}
    3486:	3720      	adds	r7, #32
    3488:	46bd      	mov	sp, r7
    348a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    348e:	bf00      	nop

00003490 <vEventDeleteAll>:

void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    3490:	b580      	push	{r7, lr}
    3492:	b084      	sub	sp, #16
    3494:	af00      	add	r7, sp, #0
    3496:	6078      	str	r0, [r7, #4]
    3498:	6039      	str	r1, [r7, #0]
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    349a:	687b      	ldr	r3, [r7, #4]
    349c:	685b      	ldr	r3, [r3, #4]
    349e:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; ++i )
    34a0:	2300      	movs	r3, #0
    34a2:	60fb      	str	r3, [r7, #12]
    34a4:	e00a      	b.n	34bc <vEventDeleteAll+0x2c>
    {
        vEventDelete( pxEvent[i] );
    34a6:	68fb      	ldr	r3, [r7, #12]
    34a8:	009b      	lsls	r3, r3, #2
    34aa:	683a      	ldr	r2, [r7, #0]
    34ac:	4413      	add	r3, r2
    34ae:	681b      	ldr	r3, [r3, #0]
    34b0:	4618      	mov	r0, r3
    34b2:	f7ff fde9 	bl	3088 <vEventGenericDelete>
void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;

    for( i = 0; i < NUM; ++i )
    34b6:	68fb      	ldr	r3, [r7, #12]
    34b8:	3301      	adds	r3, #1
    34ba:	60fb      	str	r3, [r7, #12]
    34bc:	68fa      	ldr	r2, [r7, #12]
    34be:	68bb      	ldr	r3, [r7, #8]
    34c0:	429a      	cmp	r2, r3
    34c2:	dbf0      	blt.n	34a6 <vEventDeleteAll+0x16>
    {
        vEventDelete( pxEvent[i] );
    }
}
    34c4:	3710      	adds	r7, #16
    34c6:	46bd      	mov	sp, r7
    34c8:	bd80      	pop	{r7, pc}
    34ca:	bf00      	nop

000034cc <vEventCreateAll>:


void vEventCreateAll( void * pvParameter, struct eventData *xDatas )
{
    34cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34d0:	b08a      	sub	sp, #40	; 0x28
    34d2:	af02      	add	r7, sp, #8
    34d4:	6078      	str	r0, [r7, #4]
    34d6:	6039      	str	r1, [r7, #0]
    34d8:	4669      	mov	r1, sp
    34da:	4688      	mov	r8, r1
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    34dc:	6879      	ldr	r1, [r7, #4]
    34de:	6889      	ldr	r1, [r1, #8]
    34e0:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    34e2:	6879      	ldr	r1, [r7, #4]
    34e4:	6809      	ldr	r1, [r1, #0]
    34e6:	6179      	str	r1, [r7, #20]
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    34e8:	6879      	ldr	r1, [r7, #4]
    34ea:	6a49      	ldr	r1, [r1, #36]	; 0x24
    34ec:	6139      	str	r1, [r7, #16]
    portBASE_TYPE xFlags[NUM];
    34ee:	69be      	ldr	r6, [r7, #24]
    34f0:	1e71      	subs	r1, r6, #1
    34f2:	60f9      	str	r1, [r7, #12]
    34f4:	4631      	mov	r1, r6
    34f6:	4608      	mov	r0, r1
    34f8:	f04f 0100 	mov.w	r1, #0
    34fc:	014d      	lsls	r5, r1, #5
    34fe:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    3502:	0144      	lsls	r4, r0, #5
    3504:	4631      	mov	r1, r6
    3506:	4608      	mov	r0, r1
    3508:	f04f 0100 	mov.w	r1, #0
    350c:	014b      	lsls	r3, r1, #5
    350e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    3512:	0142      	lsls	r2, r0, #5
    3514:	4633      	mov	r3, r6
    3516:	009b      	lsls	r3, r3, #2
    3518:	3303      	adds	r3, #3
    351a:	3307      	adds	r3, #7
    351c:	08db      	lsrs	r3, r3, #3
    351e:	00db      	lsls	r3, r3, #3
    3520:	ebad 0d03 	sub.w	sp, sp, r3
    3524:	ab02      	add	r3, sp, #8
    3526:	3303      	adds	r3, #3
    3528:	089b      	lsrs	r3, r3, #2
    352a:	009b      	lsls	r3, r3, #2
    352c:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; i ++ )
    352e:	2300      	movs	r3, #0
    3530:	61fb      	str	r3, [r7, #28]
    3532:	e033      	b.n	359c <vEventCreateAll+0xd0>
    {
        // get all flags of destination servants
        xFlags[i] = ((struct xParam *) pvParameter)->xOutFlag[i]; 
    3534:	687a      	ldr	r2, [r7, #4]
    3536:	69fb      	ldr	r3, [r7, #28]
    3538:	3304      	adds	r3, #4
    353a:	009b      	lsls	r3, r3, #2
    353c:	4413      	add	r3, r2
    353e:	6859      	ldr	r1, [r3, #4]
    3540:	68bb      	ldr	r3, [r7, #8]
    3542:	69fa      	ldr	r2, [r7, #28]
    3544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        // if current servant is the last one of task, then the event will be proceeded at the deadline
        if( xFlags[i] <= xMyFlag )
    3548:	68bb      	ldr	r3, [r7, #8]
    354a:	69fa      	ldr	r2, [r7, #28]
    354c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3550:	697b      	ldr	r3, [r7, #20]
    3552:	429a      	cmp	r2, r3
    3554:	dc06      	bgt.n	3564 <vEventCreateAll+0x98>
        {
            xDatas[i].IS_LAST_SERVANT = 1;
    3556:	69fb      	ldr	r3, [r7, #28]
    3558:	011b      	lsls	r3, r3, #4
    355a:	683a      	ldr	r2, [r7, #0]
    355c:	4413      	add	r3, r2
    355e:	2201      	movs	r2, #1
    3560:	609a      	str	r2, [r3, #8]
    3562:	e005      	b.n	3570 <vEventCreateAll+0xa4>
        }
        else
        {
            xDatas[i].IS_LAST_SERVANT = 0;
    3564:	69fb      	ldr	r3, [r7, #28]
    3566:	011b      	lsls	r3, r3, #4
    3568:	683a      	ldr	r2, [r7, #0]
    356a:	4413      	add	r3, r2
    356c:	2200      	movs	r2, #0
    356e:	609a      	str	r2, [r3, #8]
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    3570:	68bb      	ldr	r3, [r7, #8]
    3572:	69fa      	ldr	r2, [r7, #28]
    3574:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3578:	f640 4308 	movw	r3, #3080	; 0xc08
    357c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3580:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3584:	69fb      	ldr	r3, [r7, #28]
    3586:	011b      	lsls	r3, r3, #4
    3588:	683a      	ldr	r2, [r7, #0]
    358a:	4413      	add	r3, r2
    358c:	68da      	ldr	r2, [r3, #12]
    358e:	9200      	str	r2, [sp, #0]
    3590:	cb0e      	ldmia	r3, {r1, r2, r3}
    3592:	f7ff fc1f 	bl	2dd4 <vEventGenericCreate>
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    portBASE_TYPE xFlags[NUM];

    for( i = 0; i < NUM; i ++ )
    3596:	69fb      	ldr	r3, [r7, #28]
    3598:	3301      	adds	r3, #1
    359a:	61fb      	str	r3, [r7, #28]
    359c:	69fa      	ldr	r2, [r7, #28]
    359e:	69bb      	ldr	r3, [r7, #24]
    35a0:	429a      	cmp	r2, r3
    35a2:	dbc7      	blt.n	3534 <vEventCreateAll+0x68>
    35a4:	46c5      	mov	sp, r8
            xDatas[i].IS_LAST_SERVANT = 0;
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    }
}
    35a6:	3720      	adds	r7, #32
    35a8:	46bd      	mov	sp, r7
    35aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35ae:	bf00      	nop

000035b0 <vSensor>:
*
* @param pvParameter is parameter from programmer.
*
* */
void vSensor( void * pvParameter )
{
    35b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    35b4:	b095      	sub	sp, #84	; 0x54
    35b6:	af00      	add	r7, sp, #0
    35b8:	60f8      	str	r0, [r7, #12]
    35ba:	466b      	mov	r3, sp
    35bc:	461e      	mov	r6, r3
    portTickType xCurrentTime;

    portBASE_TYPE i;
    portBASE_TYPE IS_FIRST_TIME_TO_EXE = 1;
    35be:	2301      	movs	r3, #1
    35c0:	647b      	str	r3, [r7, #68]	; 0x44

    /* store the paramter into stack of servant */
    void * pvMyParameter = pvParameter;
    35c2:	68fb      	ldr	r3, [r7, #12]
    35c4:	63bb      	str	r3, [r7, #56]	; 0x38

    portBASE_TYPE NUM = ((struct xParam *) pvMyParameter)->xNumOfOut;
    35c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    35c8:	689b      	ldr	r3, [r3, #8]
    35ca:	637b      	str	r3, [r7, #52]	; 0x34
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    35cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    35ce:	681b      	ldr	r3, [r3, #0]
    35d0:	633b      	str	r3, [r7, #48]	; 0x30
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    35d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    35d4:	69db      	ldr	r3, [r3, #28]
    35d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    35d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    35da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    35dc:	62bb      	str	r3, [r7, #40]	; 0x28
    pvServantFunType xMyFun = ((struct xParam *) pvMyParameter)->xFp;
    35de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    35e0:	6a1b      	ldr	r3, [r3, #32]
    35e2:	627b      	str	r3, [r7, #36]	; 0x24

    portBASE_TYPE xCount = 1;
    35e4:	2301      	movs	r3, #1
    35e6:	643b      	str	r3, [r7, #64]	; 0x40
    portTickType deadline = xCount * xPeriod;
    35e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    35ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
    35ec:	fb02 f303 	mul.w	r3, r2, r3
    35f0:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* set the LET of Servant when it is created */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    35f2:	f640 4308 	movw	r3, #3080	; 0xc08
    35f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    35fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3600:	4618      	mov	r0, r3
    3602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3604:	f002 fa8a 	bl	5b1c <vTaskSetxLet>
    
    /* receive the events created by the last servant of this task. */
    xEventHandle pxEvent[NUM];
    3608:	6b79      	ldr	r1, [r7, #52]	; 0x34
    360a:	1e4b      	subs	r3, r1, #1
    360c:	623b      	str	r3, [r7, #32]
    360e:	460b      	mov	r3, r1
    3610:	461a      	mov	r2, r3
    3612:	f04f 0300 	mov.w	r3, #0
    3616:	0158      	lsls	r0, r3, #5
    3618:	6078      	str	r0, [r7, #4]
    361a:	6878      	ldr	r0, [r7, #4]
    361c:	ea40 60d2 	orr.w	r0, r0, r2, lsr #27
    3620:	6078      	str	r0, [r7, #4]
    3622:	0150      	lsls	r0, r2, #5
    3624:	460b      	mov	r3, r1
    3626:	461a      	mov	r2, r3
    3628:	f04f 0300 	mov.w	r3, #0
    362c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
    3630:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
    3634:	ea4f 1a42 	mov.w	sl, r2, lsl #5
    3638:	460b      	mov	r3, r1
    363a:	009b      	lsls	r3, r3, #2
    363c:	3303      	adds	r3, #3
    363e:	3307      	adds	r3, #7
    3640:	08db      	lsrs	r3, r3, #3
    3642:	00db      	lsls	r3, r3, #3
    3644:	ebad 0d03 	sub.w	sp, sp, r3
    3648:	466b      	mov	r3, sp
    364a:	3303      	adds	r3, #3
    364c:	089b      	lsrs	r3, r3, #2
    364e:	009b      	lsls	r3, r3, #2
    3650:	61fb      	str	r3, [r7, #28]
    
    /* create data for destination servants and initialise them */
    struct eventData xDatas[NUM];
    3652:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3654:	1e4b      	subs	r3, r1, #1
    3656:	61bb      	str	r3, [r7, #24]
    3658:	460b      	mov	r3, r1
    365a:	461a      	mov	r2, r3
    365c:	f04f 0300 	mov.w	r3, #0
    3660:	ea4f 19c3 	mov.w	r9, r3, lsl #7
    3664:	ea49 6952 	orr.w	r9, r9, r2, lsr #25
    3668:	ea4f 18c2 	mov.w	r8, r2, lsl #7
    366c:	460b      	mov	r3, r1
    366e:	461a      	mov	r2, r3
    3670:	f04f 0300 	mov.w	r3, #0
    3674:	01dd      	lsls	r5, r3, #7
    3676:	ea45 6552 	orr.w	r5, r5, r2, lsr #25
    367a:	01d4      	lsls	r4, r2, #7
    367c:	460b      	mov	r3, r1
    367e:	011b      	lsls	r3, r3, #4
    3680:	3303      	adds	r3, #3
    3682:	3307      	adds	r3, #7
    3684:	08db      	lsrs	r3, r3, #3
    3686:	00db      	lsls	r3, r3, #3
    3688:	ebad 0d03 	sub.w	sp, sp, r3
    368c:	466b      	mov	r3, sp
    368e:	3303      	adds	r3, #3
    3690:	089b      	lsrs	r3, r3, #2
    3692:	009b      	lsls	r3, r3, #2
    3694:	617b      	str	r3, [r7, #20]

    while(1)
    {

        if( IS_FIRST_TIME_TO_EXE == 1 )
    3696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3698:	2b01      	cmp	r3, #1
    369a:	d127      	bne.n	36ec <vSensor+0x13c>
        {
            /* Waiting for the start time of task period */
            xSemaphoreTake(xBinarySemaphore[xMyFlag], portMAX_DELAY);
    369c:	f640 337c 	movw	r3, #2940	; 0xb7c
    36a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    36a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    36aa:	4618      	mov	r0, r3
    36ac:	2100      	movs	r1, #0
    36ae:	f04f 32ff 	mov.w	r2, #4294967295
    36b2:	2300      	movs	r3, #0
    36b4:	f000 fed6 	bl	4464 <xQueueGenericReceive>
#ifdef SENSOR_PRINT
            vPrintNumber( xMyFlag );
    36b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
    36ba:	f013 fe61 	bl	17380 <vPrintNumber>
            vPrintNumber( deadline ); // ready time  of task 
    36be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    36c0:	f013 fe5e 	bl	17380 <vPrintNumber>
#endif 
            xCurrentTime = xTaskGetTickCount();
    36c4:	f001 fd82 	bl	51cc <xTaskGetTickCount>
    36c8:	64f8      	str	r0, [r7, #76]	; 0x4c
#ifdef SENSOR_PRINT
            vPrintNumber( xCurrentTime ); // start time of task
    36ca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    36cc:	f013 fe58 	bl	17380 <vPrintNumber>
#endif
            vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    36d0:	f640 4308 	movw	r3, #3080	; 0xc08
    36d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    36da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    36de:	4618      	mov	r0, r3
    36e0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    36e2:	f002 fa0d 	bl	5b00 <vTaskSetxStartTime>

            IS_FIRST_TIME_TO_EXE = 0;
    36e6:	2300      	movs	r3, #0
    36e8:	647b      	str	r3, [r7, #68]	; 0x44
    36ea:	e027      	b.n	373c <vSensor+0x18c>
        {
            /* When system started, the first servant of every task is triggered to
             * execute by the init events created by tick hook. After that, the first
             * servant of every task is triggered by the last servant of corresponding task.
            * */
            vEventReceiveAll( pvMyParameter, pxEvent );
    36ec:	69fb      	ldr	r3, [r7, #28]
    36ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    36f0:	4619      	mov	r1, r3
    36f2:	f7ff fe51 	bl	3398 <vEventReceiveAll>

#ifdef SENSOR_PRINT
            vPrintNumber( xMyFlag );
    36f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
    36f8:	f013 fe42 	bl	17380 <vPrintNumber>
            vPrintNumber( deadline ); // ready time of task 
    36fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    36fe:	f013 fe3f 	bl	17380 <vPrintNumber>
#endif 
            xCurrentTime = xTaskGetTickCount();
    3702:	f001 fd63 	bl	51cc <xTaskGetTickCount>
    3706:	64f8      	str	r0, [r7, #76]	; 0x4c
#ifdef SENSOR_PRINT
            vPrintNumber( xCurrentTime ); // start time of task 
    3708:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    370a:	f013 fe39 	bl	17380 <vPrintNumber>
#endif
            vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    370e:	f640 4308 	movw	r3, #3080	; 0xc08
    3712:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    371c:	4618      	mov	r0, r3
    371e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    3720:	f002 f9ee 	bl	5b00 <vTaskSetxStartTime>

            // do actuator and sensor
#ifdef SENSOR_FUN
            xMyFun( NULL, 0, xDatas, NUM);
    3724:	697b      	ldr	r3, [r7, #20]
    3726:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    3728:	2000      	movs	r0, #0
    372a:	2100      	movs	r1, #0
    372c:	461a      	mov	r2, r3
    372e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3730:	47a0      	blx	r4
#endif
            vEventDeleteAll(pvMyParameter, pxEvent);
    3732:	69fb      	ldr	r3, [r7, #28]
    3734:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3736:	4619      	mov	r1, r3
    3738:	f7ff feaa 	bl	3490 <vEventDeleteAll>
        }

        // deadline is the start time of next period
        xCount ++;
    373c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    373e:	3301      	adds	r3, #1
    3740:	643b      	str	r3, [r7, #64]	; 0x40
        deadline = xCount * xPeriod; 
    3742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3744:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3746:	fb02 f303 	mul.w	r3, r2, r3
    374a:	63fb      	str	r3, [r7, #60]	; 0x3c

        for( i = 0; i < NUM; i ++ )
    374c:	2300      	movs	r3, #0
    374e:	64bb      	str	r3, [r7, #72]	; 0x48
    3750:	e011      	b.n	3776 <vSensor+0x1c6>
        {
            xDatas[i].xNextPeriod = deadline;
    3752:	697a      	ldr	r2, [r7, #20]
    3754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3756:	011b      	lsls	r3, r3, #4
    3758:	4413      	add	r3, r2
    375a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    375c:	601a      	str	r2, [r3, #0]
            xDatas[i].xTime = xCurrentTime + xLet;
    375e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3762:	441a      	add	r2, r3
    3764:	6979      	ldr	r1, [r7, #20]
    3766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3768:	011b      	lsls	r3, r3, #4
    376a:	440b      	add	r3, r1
    376c:	3304      	adds	r3, #4
    376e:	601a      	str	r2, [r3, #0]

        // deadline is the start time of next period
        xCount ++;
        deadline = xCount * xPeriod; 

        for( i = 0; i < NUM; i ++ )
    3770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3772:	3301      	adds	r3, #1
    3774:	64bb      	str	r3, [r7, #72]	; 0x48
    3776:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    377a:	429a      	cmp	r2, r3
    377c:	dbe9      	blt.n	3752 <vSensor+0x1a2>
            xDatas[i].xNextPeriod = deadline;
            xDatas[i].xTime = xCurrentTime + xLet;
            //xDatas[i].xTime = deadline -xPeriod + xLet;
        }
        // set the future model time
        xFutureModelTime = deadline - xPeriod + xLet;
    377e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3780:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3782:	1ad2      	subs	r2, r2, r3
    3784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3786:	4413      	add	r3, r2
    3788:	461a      	mov	r2, r3
    378a:	f240 5370 	movw	r3, #1392	; 0x570
    378e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3792:	601a      	str	r2, [r3, #0]

        // create events for all destination servants of this servant. 
        vEventCreateAll( pvMyParameter, xDatas );
    3794:	697b      	ldr	r3, [r7, #20]
    3796:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3798:	4619      	mov	r1, r3
    379a:	f7ff fe97 	bl	34cc <vEventCreateAll>

#ifdef SENSOR_LET
        vTaskDelayLET();
#endif
        
        if( xCurrentTime > xDatas[0].xNextPeriod )
    379e:	697b      	ldr	r3, [r7, #20]
    37a0:	681a      	ldr	r2, [r3, #0]
    37a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    37a4:	429a      	cmp	r2, r3
    37a6:	d20a      	bcs.n	37be <vSensor+0x20e>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    37a8:	697b      	ldr	r3, [r7, #20]
    37aa:	681b      	ldr	r3, [r3, #0]
    37ac:	4618      	mov	r0, r3
    37ae:	f013 fde7 	bl	17380 <vPrintNumber>
            vPrintString("there are sensor missing deadline\n\r");
    37b2:	f648 00c0 	movw	r0, #35008	; 0x88c0
    37b6:	f2c0 0001 	movt	r0, #1
    37ba:	f013 fdc7 	bl	1734c <vPrintString>
        }

#ifdef SENSOR_PRINT

        xCurrentTime = xTaskGetTickCount();
    37be:	f001 fd05 	bl	51cc <xTaskGetTickCount>
    37c2:	64f8      	str	r0, [r7, #76]	; 0x4c
        vPrintNumber( xCurrentTime );  // finish time of sensor
    37c4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    37c6:	f013 fddb 	bl	17380 <vPrintNumber>
        vPrintNumber( deadline );   // deadline of task
    37ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    37cc:	f013 fdd8 	bl	17380 <vPrintNumber>
        vPrintNumber( ( xMyFlag + 10 ) * 3 );
    37d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    37d2:	f103 020a 	add.w	r2, r3, #10
    37d6:	4613      	mov	r3, r2
    37d8:	005b      	lsls	r3, r3, #1
    37da:	4413      	add	r3, r2
    37dc:	4618      	mov	r0, r3
    37de:	f013 fdcf 	bl	17380 <vPrintNumber>
#endif

        xCurrentTime = xTaskGetTickCount();
    37e2:	f001 fcf3 	bl	51cc <xTaskGetTickCount>
    37e6:	64f8      	str	r0, [r7, #76]	; 0x4c
        if( xCurrentTime > 1000000 )
    37e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    37ea:	f244 2340 	movw	r3, #16960	; 0x4240
    37ee:	f2c0 030f 	movt	r3, #15
    37f2:	429a      	cmp	r2, r3
    37f4:	d900      	bls.n	37f8 <vSensor+0x248>
        {
            break;
    37f6:	e00c      	b.n	3812 <vSensor+0x262>
        }
        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    37f8:	f640 337c 	movw	r3, #2940	; 0xb7c
    37fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    3804:	4618      	mov	r0, r3
    3806:	2100      	movs	r1, #0
    3808:	2200      	movs	r2, #0
    380a:	2300      	movs	r3, #0
    380c:	f000 fd64 	bl	42d8 <xQueueGenericSend>
    }
    3810:	e741      	b.n	3696 <vSensor+0xe6>
    3812:	46b5      	mov	sp, r6
}
    3814:	3754      	adds	r7, #84	; 0x54
    3816:	46bd      	mov	sp, r7
    3818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000381c <vServant>:
*  @param pvParameter is parameter from programmer
*
* */

void vServant( void * pvParameter )
{
    381c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3820:	b097      	sub	sp, #92	; 0x5c
    3822:	af00      	add	r7, sp, #0
    3824:	61f8      	str	r0, [r7, #28]
    3826:	4669      	mov	r1, sp
    3828:	6079      	str	r1, [r7, #4]
    portBASE_TYPE i;
    void * pvMyParameter = pvParameter;
    382a:	69f9      	ldr	r1, [r7, #28]
    382c:	6539      	str	r1, [r7, #80]	; 0x50
    portTickType xCurrentTime;
    
    portBASE_TYPE xNumOfIn = ((struct xParam *) pvMyParameter)->xNumOfIn;
    382e:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3830:	6849      	ldr	r1, [r1, #4]
    3832:	64f9      	str	r1, [r7, #76]	; 0x4c
    portBASE_TYPE xNumOfOut = ((struct xParam *) pvMyParameter)->xNumOfOut;
    3834:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3836:	6889      	ldr	r1, [r1, #8]
    3838:	64b9      	str	r1, [r7, #72]	; 0x48
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    383a:	6d39      	ldr	r1, [r7, #80]	; 0x50
    383c:	6809      	ldr	r1, [r1, #0]
    383e:	6479      	str	r1, [r7, #68]	; 0x44
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    3840:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3842:	6a49      	ldr	r1, [r1, #36]	; 0x24
    3844:	6439      	str	r1, [r7, #64]	; 0x40
    pvServantFunType xMyFun = ((struct xParam *) pvMyParameter)->xFp;
    3846:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3848:	6a09      	ldr	r1, [r1, #32]
    384a:	63f9      	str	r1, [r7, #60]	; 0x3c

    xEventHandle pxEvent[xNumOfIn];
    384c:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
    384e:	1e71      	subs	r1, r6, #1
    3850:	63b9      	str	r1, [r7, #56]	; 0x38
    3852:	4631      	mov	r1, r6
    3854:	4608      	mov	r0, r1
    3856:	f04f 0100 	mov.w	r1, #0
    385a:	ea4f 1b41 	mov.w	fp, r1, lsl #5
    385e:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
    3862:	ea4f 1a40 	mov.w	sl, r0, lsl #5
    3866:	4631      	mov	r1, r6
    3868:	4608      	mov	r0, r1
    386a:	f04f 0100 	mov.w	r1, #0
    386e:	ea4f 1941 	mov.w	r9, r1, lsl #5
    3872:	ea49 69d0 	orr.w	r9, r9, r0, lsr #27
    3876:	ea4f 1840 	mov.w	r8, r0, lsl #5
    387a:	4631      	mov	r1, r6
    387c:	0089      	lsls	r1, r1, #2
    387e:	3103      	adds	r1, #3
    3880:	3107      	adds	r1, #7
    3882:	08c9      	lsrs	r1, r1, #3
    3884:	00c9      	lsls	r1, r1, #3
    3886:	ebad 0d01 	sub.w	sp, sp, r1
    388a:	4669      	mov	r1, sp
    388c:	3103      	adds	r1, #3
    388e:	0889      	lsrs	r1, r1, #2
    3890:	0089      	lsls	r1, r1, #2
    3892:	6379      	str	r1, [r7, #52]	; 0x34
    struct eventData xDatas[xNumOfOut];
    3894:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    3896:	1e71      	subs	r1, r6, #1
    3898:	6339      	str	r1, [r7, #48]	; 0x30
    389a:	4631      	mov	r1, r6
    389c:	4608      	mov	r0, r1
    389e:	f04f 0100 	mov.w	r1, #0
    38a2:	01cd      	lsls	r5, r1, #7
    38a4:	ea45 6550 	orr.w	r5, r5, r0, lsr #25
    38a8:	01c4      	lsls	r4, r0, #7
    38aa:	4631      	mov	r1, r6
    38ac:	4608      	mov	r0, r1
    38ae:	f04f 0100 	mov.w	r1, #0
    38b2:	01cb      	lsls	r3, r1, #7
    38b4:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
    38b8:	01c2      	lsls	r2, r0, #7
    38ba:	4633      	mov	r3, r6
    38bc:	011b      	lsls	r3, r3, #4
    38be:	3303      	adds	r3, #3
    38c0:	3307      	adds	r3, #7
    38c2:	08db      	lsrs	r3, r3, #3
    38c4:	00db      	lsls	r3, r3, #3
    38c6:	ebad 0d03 	sub.w	sp, sp, r3
    38ca:	466b      	mov	r3, sp
    38cc:	3303      	adds	r3, #3
    38ce:	089b      	lsrs	r3, r3, #2
    38d0:	009b      	lsls	r3, r3, #2
    38d2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* get the LET of current servant */
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    38d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    38d6:	69db      	ldr	r3, [r3, #28]
    38d8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* set the LET of current servant */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    38da:	f640 4308 	movw	r3, #3080	; 0xc08
    38de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    38e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    38e8:	4618      	mov	r0, r3
    38ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    38ec:	f002 f916 	bl	5b1c <vTaskSetxLet>

    while(1)
    {
        vEventReceiveAll( pvMyParameter, pxEvent );
    38f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38f2:	6d38      	ldr	r0, [r7, #80]	; 0x50
    38f4:	4619      	mov	r1, r3
    38f6:	f7ff fd4f 	bl	3398 <vEventReceiveAll>

#ifdef SERVANT_PRINT
        vPrintNumber(xMyFlag);
    38fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
    38fc:	f013 fd40 	bl	17380 <vPrintNumber>
#endif
        xCurrentTime = xTaskGetTickCountFromISR();
    3900:	f001 fc76 	bl	51f0 <xTaskGetTickCountFromISR>
    3904:	6278      	str	r0, [r7, #36]	; 0x24
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3906:	f640 4308 	movw	r3, #3080	; 0xc08
    390a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    390e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3914:	4618      	mov	r0, r3
    3916:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3918:	f002 f8f2 	bl	5b00 <vTaskSetxStartTime>

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    391c:	2300      	movs	r3, #0
    391e:	657b      	str	r3, [r7, #84]	; 0x54
    3920:	e01e      	b.n	3960 <vServant+0x144>
        {
            xDatas[i] = xEventGetxData(pxEvent[i]);
    3922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3924:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    392a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    392c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    392e:	0112      	lsls	r2, r2, #4
    3930:	188c      	adds	r4, r1, r2
    3932:	f107 0208 	add.w	r2, r7, #8
    3936:	4610      	mov	r0, r2
    3938:	4619      	mov	r1, r3
    393a:	f7ff f92d 	bl	2b98 <xEventGetxData>
    393e:	f107 0308 	add.w	r3, r7, #8
    3942:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3944:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            xDatas[i].xTime = xCurrentTime + xLet;
    3948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    394c:	441a      	add	r2, r3
    394e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3952:	011b      	lsls	r3, r3, #4
    3954:	440b      	add	r3, r1
    3956:	3304      	adds	r3, #4
    3958:	601a      	str	r2, [r3, #0]
#endif
        xCurrentTime = xTaskGetTickCountFromISR();
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    395a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    395c:	3301      	adds	r3, #1
    395e:	657b      	str	r3, [r7, #84]	; 0x54
    3960:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3964:	429a      	cmp	r2, r3
    3966:	dbdc      	blt.n	3922 <vServant+0x106>
            //xDatas[i].xTime = xFutureModelTime + xLet;
            //xFutureModelTime = xDatas[i].xTime;
        }

#ifdef SERVANT_PRINT
        vPrintNumber( xDatas[0].xNextPeriod - xPeriod ); // ready time of task
    3968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    396a:	681a      	ldr	r2, [r3, #0]
    396c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    396e:	1ad3      	subs	r3, r2, r3
    3970:	4618      	mov	r0, r3
    3972:	f013 fd05 	bl	17380 <vPrintNumber>
        vPrintNumber( xCurrentTime );   // start time of current servant
    3976:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3978:	f013 fd02 	bl	17380 <vPrintNumber>
#endif

#ifdef SERVANT_FUN
        for( i = 0; i < xFunctionTimes; ++ i )
    397c:	2300      	movs	r3, #0
    397e:	657b      	str	r3, [r7, #84]	; 0x54
    3980:	e00a      	b.n	3998 <vServant+0x17c>
        {
            xMyFun(pxEvent, xNumOfIn, xDatas, xNumOfOut);
    3982:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3986:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
    3988:	4610      	mov	r0, r2
    398a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    398c:	461a      	mov	r2, r3
    398e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3990:	47a0      	blx	r4
        vPrintNumber( xDatas[0].xNextPeriod - xPeriod ); // ready time of task
        vPrintNumber( xCurrentTime );   // start time of current servant
#endif

#ifdef SERVANT_FUN
        for( i = 0; i < xFunctionTimes; ++ i )
    3992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3994:	3301      	adds	r3, #1
    3996:	657b      	str	r3, [r7, #84]	; 0x54
    3998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    399a:	2b63      	cmp	r3, #99	; 0x63
    399c:	ddf1      	ble.n	3982 <vServant+0x166>
        {
            xMyFun(pxEvent, xNumOfIn, xDatas, xNumOfOut);
        }
#endif

        vEventDeleteAll( pvMyParameter, pxEvent );        
    399e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    39a0:	6d38      	ldr	r0, [r7, #80]	; 0x50
    39a2:	4619      	mov	r1, r3
    39a4:	f7ff fd74 	bl	3490 <vEventDeleteAll>

        vEventCreateAll( pvMyParameter, xDatas );
    39a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    39aa:	6d38      	ldr	r0, [r7, #80]	; 0x50
    39ac:	4619      	mov	r1, r3
    39ae:	f7ff fd8d 	bl	34cc <vEventCreateAll>

        if( xCurrentTime > xDatas[0].xNextPeriod )
    39b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    39b4:	681a      	ldr	r2, [r3, #0]
    39b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    39b8:	429a      	cmp	r2, r3
    39ba:	d20a      	bcs.n	39d2 <vServant+0x1b6>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    39bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    39be:	681b      	ldr	r3, [r3, #0]
    39c0:	4618      	mov	r0, r3
    39c2:	f013 fcdd 	bl	17380 <vPrintNumber>
            vPrintString("there are servants missing deadline\n\r");
    39c6:	f648 00e4 	movw	r0, #35044	; 0x88e4
    39ca:	f2c0 0001 	movt	r0, #1
    39ce:	f013 fcbd 	bl	1734c <vPrintString>
        }
#ifdef SERVANT_LET
        vTaskDelayLET();
    39d2:	f7ff fcc1 	bl	3358 <vTaskDelayLET>
#endif

#ifdef SERVANT_PRINT
        xCurrentTime = xTaskGetTickCount();
    39d6:	f001 fbf9 	bl	51cc <xTaskGetTickCount>
    39da:	6278      	str	r0, [r7, #36]	; 0x24
        vPrintNumber( xCurrentTime );   // finish time of current servant
    39dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
    39de:	f013 fccf 	bl	17380 <vPrintNumber>
        vPrintNumber( xDatas[0].xNextPeriod ); // deadline of task
    39e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    39e4:	681b      	ldr	r3, [r3, #0]
    39e6:	4618      	mov	r0, r3
    39e8:	f013 fcca 	bl	17380 <vPrintNumber>
        vPrintNumber( (xMyFlag + 10) * 3 );
    39ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    39ee:	f103 020a 	add.w	r2, r3, #10
    39f2:	4613      	mov	r3, r2
    39f4:	005b      	lsls	r3, r3, #1
    39f6:	4413      	add	r3, r2
    39f8:	4618      	mov	r0, r3
    39fa:	f013 fcc1 	bl	17380 <vPrintNumber>
#endif

        xCurrentTime = xTaskGetTickCount();
    39fe:	f001 fbe5 	bl	51cc <xTaskGetTickCount>
    3a02:	6278      	str	r0, [r7, #36]	; 0x24
        if( xCurrentTime > 1000000 )
    3a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3a06:	f244 2340 	movw	r3, #16960	; 0x4240
    3a0a:	f2c0 030f 	movt	r3, #15
    3a0e:	429a      	cmp	r2, r3
    3a10:	d900      	bls.n	3a14 <vServant+0x1f8>
        {
            break;
    3a12:	e00c      	b.n	3a2e <vServant+0x212>
        }

        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    3a14:	f640 337c 	movw	r3, #2940	; 0xb7c
    3a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    3a20:	4618      	mov	r0, r3
    3a22:	2100      	movs	r1, #0
    3a24:	2200      	movs	r2, #0
    3a26:	2300      	movs	r3, #0
    3a28:	f000 fc56 	bl	42d8 <xQueueGenericSend>
    }
    3a2c:	e760      	b.n	38f0 <vServant+0xd4>
    3a2e:	687b      	ldr	r3, [r7, #4]
    3a30:	469d      	mov	sp, r3
}
    3a32:	375c      	adds	r7, #92	; 0x5c
    3a34:	46bd      	mov	sp, r7
    3a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a3a:	bf00      	nop

00003a3c <vR_Servant>:

void vR_Servant( void * pvParameter)
{
    3a3c:	b580      	push	{r7, lr}
    3a3e:	b090      	sub	sp, #64	; 0x40
    3a40:	af00      	add	r7, sp, #0
    3a42:	6078      	str	r0, [r7, #4]
    portBASE_TYPE xSource, xDest;
    portBASE_TYPE HAVE_TO_SEND_SEMAPHORE; // could the semaphore be sent? 1 means yes , 0 means no
    portBASE_TYPE xResult;

    portTickType xCurrentTime;
    void * pvMyParameter = pvParameter;
    3a44:	687b      	ldr	r3, [r7, #4]
    3a46:	62bb      	str	r3, [r7, #40]	; 0x28

    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    3a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3a4a:	681b      	ldr	r3, [r3, #0]
    3a4c:	627b      	str	r3, [r7, #36]	; 0x24
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    3a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3a50:	69db      	ldr	r3, [r3, #28]
    3a52:	623b      	str	r3, [r7, #32]
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    3a54:	f640 4308 	movw	r3, #3080	; 0xc08
    3a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3a62:	4618      	mov	r0, r3
    3a64:	6a39      	ldr	r1, [r7, #32]
    3a66:	f002 f859 	bl	5b1c <vTaskSetxLet>
    xTaskHandle destinationTCB, sourceTCB;

    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[xMyFlag], portMAX_DELAY );
    3a6a:	f640 337c 	movw	r3, #2940	; 0xb7c
    3a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3a78:	4618      	mov	r0, r3
    3a7a:	2100      	movs	r1, #0
    3a7c:	f04f 32ff 	mov.w	r2, #4294967295
    3a80:	2300      	movs	r3, #0
    3a82:	f000 fcef 	bl	4464 <xQueueGenericReceive>
#ifdef RSERVANT_PRINT
        vPrintNumber( xMyFlag );
#endif
        
        xCurrentTime = xTaskGetTickCount();
    3a86:	f001 fba1 	bl	51cc <xTaskGetTickCount>
    3a8a:	61f8      	str	r0, [r7, #28]
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3a8c:	f640 4308 	movw	r3, #3080	; 0xc08
    3a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3a9a:	4618      	mov	r0, r3
    3a9c:	69f9      	ldr	r1, [r7, #28]
    3a9e:	f002 f82f 	bl	5b00 <vTaskSetxStartTime>
#ifdef RSERVANT_PRINT
        vPrintNumber( xCurrentTime );
#endif

        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;
    3aa2:	2300      	movs	r3, #0
    3aa4:	637b      	str	r3, [r7, #52]	; 0x34

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    3aa6:	e08f      	b.n	3bc8 <vR_Servant+0x18c>
            /*
             * transit the event item, whose timestamp bigger or equal to current Tick Count, 
             * from xEventList to the idlest xEvestReadyList
             *
             * */
            xResult = xEventListTransit( &pxEventListItem, &pxCurrentReadyList);
    3aa8:	f107 030c 	add.w	r3, r7, #12
    3aac:	4618      	mov	r0, r3
    3aae:	f240 5174 	movw	r1, #1396	; 0x574
    3ab2:	f2c2 0100 	movt	r1, #8192	; 0x2000
    3ab6:	f7ff fa11 	bl	2edc <xEventListGenericTransit>
    3aba:	6338      	str	r0, [r7, #48]	; 0x30
            if( xResult == 0 )
    3abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3abe:	2b00      	cmp	r3, #0
    3ac0:	d100      	bne.n	3ac4 <vR_Servant+0x88>
            {
                // not time yet
                break;
    3ac2:	e085      	b.n	3bd0 <vR_Servant+0x194>
            else
            {
                // transmit success
            }

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
    3ac4:	68fb      	ldr	r3, [r7, #12]
    3ac6:	68db      	ldr	r3, [r3, #12]
    3ac8:	4618      	mov	r0, r3
    3aca:	f7ff f847 	bl	2b5c <xEventGetpxDestination>
    3ace:	62f8      	str	r0, [r7, #44]	; 0x2c
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
    3ad0:	68fb      	ldr	r3, [r7, #12]
    3ad2:	68db      	ldr	r3, [r3, #12]
    3ad4:	4618      	mov	r0, r3
    3ad6:	f7ff f835 	bl	2b44 <xEventGetpxSource>
    3ada:	61b8      	str	r0, [r7, #24]
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1
    3adc:	2301      	movs	r3, #1
    3ade:	637b      	str	r3, [r7, #52]	; 0x34

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3ae0:	2300      	movs	r3, #0
    3ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
    3ae4:	e068      	b.n	3bb8 <vR_Servant+0x17c>
            {
                xSource = xRelations.xRelation[i].xInFlag;
    3ae6:	f240 12ac 	movw	r2, #428	; 0x1ac
    3aea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3aee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3af0:	460b      	mov	r3, r1
    3af2:	005b      	lsls	r3, r3, #1
    3af4:	440b      	add	r3, r1
    3af6:	009b      	lsls	r3, r3, #2
    3af8:	4413      	add	r3, r2
    3afa:	3304      	adds	r3, #4
    3afc:	681b      	ldr	r3, [r3, #0]
    3afe:	617b      	str	r3, [r7, #20]
                xDest   = xRelations.xRelation[i].xOutFlag;
    3b00:	f240 12ac 	movw	r2, #428	; 0x1ac
    3b04:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3b0a:	460b      	mov	r3, r1
    3b0c:	005b      	lsls	r3, r3, #1
    3b0e:	440b      	add	r3, r1
    3b10:	009b      	lsls	r3, r3, #2
    3b12:	4413      	add	r3, r2
    3b14:	3308      	adds	r3, #8
    3b16:	681b      	ldr	r3, [r3, #0]
    3b18:	613b      	str	r3, [r7, #16]

                if( destinationTCB == xTaskOfHandle[xDest] )
    3b1a:	f640 4308 	movw	r3, #3080	; 0xc08
    3b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b22:	693a      	ldr	r2, [r7, #16]
    3b24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b2a:	429a      	cmp	r2, r3
    3b2c:	d141      	bne.n	3bb2 <vR_Servant+0x176>
                {
                    // find the right relation
                    if( sourceTCB == xTaskOfHandle[xSource] )
    3b2e:	f640 4308 	movw	r3, #3080	; 0xc08
    3b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b36:	697a      	ldr	r2, [r7, #20]
    3b38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3b3c:	69bb      	ldr	r3, [r7, #24]
    3b3e:	429a      	cmp	r2, r3
    3b40:	d127      	bne.n	3b92 <vR_Servant+0x156>
                    {
                        if( xRelations.xRelation[i].xFlag == 2 )
    3b42:	f240 12ac 	movw	r2, #428	; 0x1ac
    3b46:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3b4c:	460b      	mov	r3, r1
    3b4e:	005b      	lsls	r3, r3, #1
    3b50:	440b      	add	r3, r1
    3b52:	009b      	lsls	r3, r3, #2
    3b54:	4413      	add	r3, r2
    3b56:	330c      	adds	r3, #12
    3b58:	681b      	ldr	r3, [r3, #0]
    3b5a:	2b02      	cmp	r3, #2
    3b5c:	d10b      	bne.n	3b76 <vR_Servant+0x13a>
                        {
                            vPrintString("Error: This event has arrived!!\n\r") ;
    3b5e:	f648 100c 	movw	r0, #35084	; 0x890c
    3b62:	f2c0 0001 	movt	r0, #1
    3b66:	f013 fbf1 	bl	1734c <vPrintString>
                            vEventDelete( (xEventHandle) pxEventListItem->pvOwner );
    3b6a:	68fb      	ldr	r3, [r7, #12]
    3b6c:	68db      	ldr	r3, [r3, #12]
    3b6e:	4618      	mov	r0, r3
    3b70:	f7ff fa8a 	bl	3088 <vEventGenericDelete>
    3b74:	e01d      	b.n	3bb2 <vR_Servant+0x176>
                        }
                        else
                        {
                            // set the relation to 2
                            xRelations.xRelation[i].xFlag = 2;
    3b76:	f240 12ac 	movw	r2, #428	; 0x1ac
    3b7a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3b80:	460b      	mov	r3, r1
    3b82:	005b      	lsls	r3, r3, #1
    3b84:	440b      	add	r3, r1
    3b86:	009b      	lsls	r3, r3, #2
    3b88:	4413      	add	r3, r2
    3b8a:	330c      	adds	r3, #12
    3b8c:	2202      	movs	r2, #2
    3b8e:	601a      	str	r2, [r3, #0]
    3b90:	e00f      	b.n	3bb2 <vR_Servant+0x176>
                    }
                    // find other relation which is relative to destinationtcb
                    else
                    {
                        // waiting for an events that is not arriving yet
                        if( xRelations.xRelation[i].xFlag == 1 )
    3b92:	f240 12ac 	movw	r2, #428	; 0x1ac
    3b96:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3b9c:	460b      	mov	r3, r1
    3b9e:	005b      	lsls	r3, r3, #1
    3ba0:	440b      	add	r3, r1
    3ba2:	009b      	lsls	r3, r3, #2
    3ba4:	4413      	add	r3, r2
    3ba6:	330c      	adds	r3, #12
    3ba8:	681b      	ldr	r3, [r3, #0]
    3baa:	2b01      	cmp	r3, #1
    3bac:	d101      	bne.n	3bb2 <vR_Servant+0x176>
                        {
                            HAVE_TO_SEND_SEMAPHORE = 0;
    3bae:	2300      	movs	r3, #0
    3bb0:	637b      	str	r3, [r7, #52]	; 0x34

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3bb4:	3301      	adds	r3, #1
    3bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    3bb8:	f240 13ac 	movw	r3, #428	; 0x1ac
    3bbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bc0:	681a      	ldr	r2, [r3, #0]
    3bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3bc4:	429a      	cmp	r2, r3
    3bc6:	dc8e      	bgt.n	3ae6 <vR_Servant+0xaa>
        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    3bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3bca:	2b00      	cmp	r3, #0
    3bcc:	f43f af6c 	beq.w	3aa8 <vR_Servant+0x6c>
                }
            }
        } //  end inner while(1)

        // not time yet, R-Servant should be sleep until next period of any task
        if ( xResult == 0 )
    3bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3bd2:	2b00      	cmp	r3, #0
    3bd4:	d041      	beq.n	3c5a <vR_Servant+0x21e>
#endif
        }
        else  // triggered specified servant to execute
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3bd6:	2300      	movs	r3, #0
    3bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    3bda:	e028      	b.n	3c2e <vR_Servant+0x1f2>
            {
                xDest = xRelations.xRelation[i].xOutFlag;
    3bdc:	f240 12ac 	movw	r2, #428	; 0x1ac
    3be0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3be4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3be6:	460b      	mov	r3, r1
    3be8:	005b      	lsls	r3, r3, #1
    3bea:	440b      	add	r3, r1
    3bec:	009b      	lsls	r3, r3, #2
    3bee:	4413      	add	r3, r2
    3bf0:	3308      	adds	r3, #8
    3bf2:	681b      	ldr	r3, [r3, #0]
    3bf4:	613b      	str	r3, [r7, #16]
                if( destinationTCB == xTaskOfHandle[xDest] )
    3bf6:	f640 4308 	movw	r3, #3080	; 0xc08
    3bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bfe:	693a      	ldr	r2, [r7, #16]
    3c00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3c06:	429a      	cmp	r2, r3
    3c08:	d10e      	bne.n	3c28 <vR_Servant+0x1ec>
                {
                    xRelations.xRelation[i].xFlag = 1;
    3c0a:	f240 12ac 	movw	r2, #428	; 0x1ac
    3c0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3c12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3c14:	460b      	mov	r3, r1
    3c16:	005b      	lsls	r3, r3, #1
    3c18:	440b      	add	r3, r1
    3c1a:	009b      	lsls	r3, r3, #2
    3c1c:	4413      	add	r3, r2
    3c1e:	330c      	adds	r3, #12
    3c20:	2201      	movs	r2, #1
    3c22:	601a      	str	r2, [r3, #0]
                    // record the number of destinationtcb in xTaskOfHandle array.
                    j = xDest;
    3c24:	693b      	ldr	r3, [r7, #16]
    3c26:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
        }
        else  // triggered specified servant to execute
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3c2a:	3301      	adds	r3, #1
    3c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    3c2e:	f240 13ac 	movw	r3, #428	; 0x1ac
    3c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c36:	681a      	ldr	r2, [r3, #0]
    3c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3c3a:	429a      	cmp	r2, r3
    3c3c:	dcce      	bgt.n	3bdc <vR_Servant+0x1a0>
            xCurrentTime = xTaskGetTickCount();
            vPrintNumber( xCurrentTime );
            vPrintNumber( (xMyFlag + 10) * 3 );
#endif
            // send semaphore to destinationtcb
            xSemaphoreGive( xBinarySemaphore[j] );
    3c3e:	f640 337c 	movw	r3, #2940	; 0xb7c
    3c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c46:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3c4c:	4618      	mov	r0, r3
    3c4e:	2100      	movs	r1, #0
    3c50:	2200      	movs	r2, #0
    3c52:	2300      	movs	r3, #0
    3c54:	f000 fb40 	bl	42d8 <xQueueGenericSend>
        }
    }
    3c58:	e707      	b.n	3a6a <vR_Servant+0x2e>
    3c5a:	e706      	b.n	3a6a <vR_Servant+0x2e>

00003c5c <s_0>:
#define SUNNYBEIKE 1
#ifdef SUNNYBEIKE

/*task0, servant 0, 1, 2*/
void s_0(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c5c:	b480      	push	{r7}
    3c5e:	b085      	sub	sp, #20
    3c60:	af00      	add	r7, sp, #0
    3c62:	60f8      	str	r0, [r7, #12]
    3c64:	60b9      	str	r1, [r7, #8]
    3c66:	607a      	str	r2, [r7, #4]
    3c68:	603b      	str	r3, [r7, #0]
    // do actuator
    // do sensor
}
    3c6a:	3714      	adds	r7, #20
    3c6c:	46bd      	mov	sp, r7
    3c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c72:	4770      	bx	lr

00003c74 <s_1>:
void s_1(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c74:	b580      	push	{r7, lr}
    3c76:	b084      	sub	sp, #16
    3c78:	af00      	add	r7, sp, #0
    3c7a:	60f8      	str	r0, [r7, #12]
    3c7c:	60b9      	str	r1, [r7, #8]
    3c7e:	607a      	str	r2, [r7, #4]
    3c80:	603b      	str	r3, [r7, #0]
    last_radio_from_ppm(); // ppm.h
    3c82:	f012 f9a1 	bl	15fc8 <last_radio_from_ppm>
}
    3c86:	3710      	adds	r7, #16
    3c88:	46bd      	mov	sp, r7
    3c8a:	bd80      	pop	{r7, pc}

00003c8c <s_2>:
void s_2(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c8c:	b480      	push	{r7}
    3c8e:	b085      	sub	sp, #20
    3c90:	af00      	add	r7, sp, #0
    3c92:	60f8      	str	r0, [r7, #12]
    3c94:	60b9      	str	r1, [r7, #8]
    3c96:	607a      	str	r2, [r7, #4]
    3c98:	603b      	str	r3, [r7, #0]
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    3c9a:	3714      	adds	r7, #20
    3c9c:	46bd      	mov	sp, r7
    3c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ca2:	4770      	bx	lr

00003ca4 <s_3>:

/*task1, servant 3, 4, 5*/

void s_3(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ca4:	b480      	push	{r7}
    3ca6:	b085      	sub	sp, #20
    3ca8:	af00      	add	r7, sp, #0
    3caa:	60f8      	str	r0, [r7, #12]
    3cac:	60b9      	str	r1, [r7, #8]
    3cae:	607a      	str	r2, [r7, #4]
    3cb0:	603b      	str	r3, [r7, #0]
}
    3cb2:	3714      	adds	r7, #20
    3cb4:	46bd      	mov	sp, r7
    3cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cba:	4770      	bx	lr

00003cbc <s_4>:
void s_4(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3cbc:	b580      	push	{r7, lr}
    3cbe:	b084      	sub	sp, #16
    3cc0:	af00      	add	r7, sp, #0
    3cc2:	60f8      	str	r0, [r7, #12]
    3cc4:	60b9      	str	r1, [r7, #8]
    3cc6:	607a      	str	r2, [r7, #4]
    3cc8:	603b      	str	r3, [r7, #0]
    to_autopilot_from_last_radio(); // main.c
    3cca:	f012 fd37 	bl	1673c <to_autopilot_from_last_radio>
}
    3cce:	3710      	adds	r7, #16
    3cd0:	46bd      	mov	sp, r7
    3cd2:	bd80      	pop	{r7, pc}

00003cd4 <s_5>:
void s_5(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3cd4:	b580      	push	{r7, lr}
    3cd6:	b084      	sub	sp, #16
    3cd8:	af00      	add	r7, sp, #0
    3cda:	60f8      	str	r0, [r7, #12]
    3cdc:	60b9      	str	r1, [r7, #8]
    3cde:	607a      	str	r2, [r7, #4]
    3ce0:	603b      	str	r3, [r7, #0]
    spi_reset(); // spi_fbw.h
    3ce2:	f012 fc69 	bl	165b8 <spi_reset>
}
    3ce6:	3710      	adds	r7, #16
    3ce8:	46bd      	mov	sp, r7
    3cea:	bd80      	pop	{r7, pc}

00003cec <s_6>:

/*task 2, servant 6, 7*/
void s_6(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3cec:	b480      	push	{r7}
    3cee:	b085      	sub	sp, #20
    3cf0:	af00      	add	r7, sp, #0
    3cf2:	60f8      	str	r0, [r7, #12]
    3cf4:	60b9      	str	r1, [r7, #8]
    3cf6:	607a      	str	r2, [r7, #4]
    3cf8:	603b      	str	r3, [r7, #0]
}
    3cfa:	3714      	adds	r7, #20
    3cfc:	46bd      	mov	sp, r7
    3cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d02:	4770      	bx	lr

00003d04 <s_7>:
void s_7(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d04:	b580      	push	{r7, lr}
    3d06:	b084      	sub	sp, #16
    3d08:	af00      	add	r7, sp, #0
    3d0a:	60f8      	str	r0, [r7, #12]
    3d0c:	60b9      	str	r1, [r7, #8]
    3d0e:	607a      	str	r2, [r7, #4]
    3d10:	603b      	str	r3, [r7, #0]
    check_mega128_values_task(); // main.c
    3d12:	f012 fe5b 	bl	169cc <check_mega128_values_task>
}
    3d16:	3710      	adds	r7, #16
    3d18:	46bd      	mov	sp, r7
    3d1a:	bd80      	pop	{r7, pc}

00003d1c <s_8>:

/*task 3, servant 8, 9*/ 
void s_8(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d1c:	b480      	push	{r7}
    3d1e:	b085      	sub	sp, #20
    3d20:	af00      	add	r7, sp, #0
    3d22:	60f8      	str	r0, [r7, #12]
    3d24:	60b9      	str	r1, [r7, #8]
    3d26:	607a      	str	r2, [r7, #4]
    3d28:	603b      	str	r3, [r7, #0]
}
    3d2a:	3714      	adds	r7, #20
    3d2c:	46bd      	mov	sp, r7
    3d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d32:	4770      	bx	lr

00003d34 <s_9>:
void s_9(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d34:	b580      	push	{r7, lr}
    3d36:	b084      	sub	sp, #16
    3d38:	af00      	add	r7, sp, #0
    3d3a:	60f8      	str	r0, [r7, #12]
    3d3c:	60b9      	str	r1, [r7, #8]
    3d3e:	607a      	str	r2, [r7, #4]
    3d40:	603b      	str	r3, [r7, #0]
    servo_transmit(); //servo.h
    3d42:	f012 ff1b 	bl	16b7c <servo_transmit>
}
    3d46:	3710      	adds	r7, #16
    3d48:	46bd      	mov	sp, r7
    3d4a:	bd80      	pop	{r7, pc}

00003d4c <s_10>:

/*task 4, servant 10, 11*/
void s_10(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d4c:	b480      	push	{r7}
    3d4e:	b085      	sub	sp, #20
    3d50:	af00      	add	r7, sp, #0
    3d52:	60f8      	str	r0, [r7, #12]
    3d54:	60b9      	str	r1, [r7, #8]
    3d56:	607a      	str	r2, [r7, #4]
    3d58:	603b      	str	r3, [r7, #0]
}
    3d5a:	3714      	adds	r7, #20
    3d5c:	46bd      	mov	sp, r7
    3d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d62:	4770      	bx	lr

00003d64 <s_11>:
void s_11(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d64:	b580      	push	{r7, lr}
    3d66:	b084      	sub	sp, #16
    3d68:	af00      	add	r7, sp, #0
    3d6a:	60f8      	str	r0, [r7, #12]
    3d6c:	60b9      	str	r1, [r7, #8]
    3d6e:	607a      	str	r2, [r7, #4]
    3d70:	603b      	str	r3, [r7, #0]
    check_failsafe_task(); // main.c
    3d72:	f012 fe21 	bl	169b8 <check_failsafe_task>
}
    3d76:	3710      	adds	r7, #16
    3d78:	46bd      	mov	sp, r7
    3d7a:	bd80      	pop	{r7, pc}

00003d7c <s_12>:

/*task 5, servant 12, 13, 14*/
void s_12(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d7c:	b480      	push	{r7}
    3d7e:	b085      	sub	sp, #20
    3d80:	af00      	add	r7, sp, #0
    3d82:	60f8      	str	r0, [r7, #12]
    3d84:	60b9      	str	r1, [r7, #8]
    3d86:	607a      	str	r2, [r7, #4]
    3d88:	603b      	str	r3, [r7, #0]
}
    3d8a:	3714      	adds	r7, #20
    3d8c:	46bd      	mov	sp, r7
    3d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d92:	4770      	bx	lr

00003d94 <s_13>:
void s_13(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d94:	b580      	push	{r7, lr}
    3d96:	b084      	sub	sp, #16
    3d98:	af00      	add	r7, sp, #0
    3d9a:	60f8      	str	r0, [r7, #12]
    3d9c:	60b9      	str	r1, [r7, #8]
    3d9e:	607a      	str	r2, [r7, #4]
    3da0:	603b      	str	r3, [r7, #0]
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    3da2:	f009 f8a3 	bl	ceec <radio_control_task>
}
    3da6:	3710      	adds	r7, #16
    3da8:	46bd      	mov	sp, r7
    3daa:	bd80      	pop	{r7, pc}

00003dac <s_14>:
void s_14(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3dac:	b580      	push	{r7, lr}
    3dae:	b084      	sub	sp, #16
    3db0:	af00      	add	r7, sp, #0
    3db2:	60f8      	str	r0, [r7, #12]
    3db4:	60b9      	str	r1, [r7, #8]
    3db6:	607a      	str	r2, [r7, #4]
    3db8:	603b      	str	r3, [r7, #0]
    ir_gain_calib(); //infrared.h
    3dba:	f00d ff49 	bl	11c50 <ir_gain_calib>
}
    3dbe:	3710      	adds	r7, #16
    3dc0:	46bd      	mov	sp, r7
    3dc2:	bd80      	pop	{r7, pc}

00003dc4 <s_15>:

/*task 6, servant 15,16,17,18*/ 
void s_15(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3dc4:	b480      	push	{r7}
    3dc6:	b085      	sub	sp, #20
    3dc8:	af00      	add	r7, sp, #0
    3dca:	60f8      	str	r0, [r7, #12]
    3dcc:	60b9      	str	r1, [r7, #8]
    3dce:	607a      	str	r2, [r7, #4]
    3dd0:	603b      	str	r3, [r7, #0]
}
    3dd2:	3714      	adds	r7, #20
    3dd4:	46bd      	mov	sp, r7
    3dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dda:	4770      	bx	lr

00003ddc <s_16>:
void s_16(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3ddc:	b580      	push	{r7, lr}
    3dde:	b084      	sub	sp, #16
    3de0:	af00      	add	r7, sp, #0
    3de2:	60f8      	str	r0, [r7, #12]
    3de4:	60b9      	str	r1, [r7, #8]
    3de6:	607a      	str	r2, [r7, #4]
    3de8:	603b      	str	r3, [r7, #0]
    ir_update(); // infrared.h
    3dea:	f00d fef3 	bl	11bd4 <ir_update>
}
    3dee:	3710      	adds	r7, #16
    3df0:	46bd      	mov	sp, r7
    3df2:	bd80      	pop	{r7, pc}

00003df4 <s_17>:
void s_17(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3df4:	b580      	push	{r7, lr}
    3df6:	b084      	sub	sp, #16
    3df8:	af00      	add	r7, sp, #0
    3dfa:	60f8      	str	r0, [r7, #12]
    3dfc:	60b9      	str	r1, [r7, #8]
    3dfe:	607a      	str	r2, [r7, #4]
    3e00:	603b      	str	r3, [r7, #0]
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3e02:	f011 f96f 	bl	150e4 <estimator_update_state_infrared>
}
    3e06:	3710      	adds	r7, #16
    3e08:	46bd      	mov	sp, r7
    3e0a:	bd80      	pop	{r7, pc}

00003e0c <s_18>:
void s_18(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3e0c:	b580      	push	{r7, lr}
    3e0e:	b084      	sub	sp, #16
    3e10:	af00      	add	r7, sp, #0
    3e12:	60f8      	str	r0, [r7, #12]
    3e14:	60b9      	str	r1, [r7, #8]
    3e16:	607a      	str	r2, [r7, #4]
    3e18:	603b      	str	r3, [r7, #0]
    roll_pitch_pid_run(); // pid.h
    3e1a:	f00d ff49 	bl	11cb0 <roll_pitch_pid_run>
}
    3e1e:	3710      	adds	r7, #16
    3e20:	46bd      	mov	sp, r7
    3e22:	bd80      	pop	{r7, pc}

00003e24 <s_19>:

/*task 7, servant 19, 20*/
void s_19(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3e24:	b480      	push	{r7}
    3e26:	b085      	sub	sp, #20
    3e28:	af00      	add	r7, sp, #0
    3e2a:	60f8      	str	r0, [r7, #12]
    3e2c:	60b9      	str	r1, [r7, #8]
    3e2e:	607a      	str	r2, [r7, #4]
    3e30:	603b      	str	r3, [r7, #0]
}
    3e32:	3714      	adds	r7, #20
    3e34:	46bd      	mov	sp, r7
    3e36:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e3a:	4770      	bx	lr

00003e3c <s_20>:
void s_20(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3e3c:	b580      	push	{r7, lr}
    3e3e:	b084      	sub	sp, #16
    3e40:	af00      	add	r7, sp, #0
    3e42:	60f8      	str	r0, [r7, #12]
    3e44:	60b9      	str	r1, [r7, #8]
    3e46:	607a      	str	r2, [r7, #4]
    3e48:	603b      	str	r3, [r7, #0]
    link_fbw_send(); //link_fbw.h
    3e4a:	f00d f935 	bl	110b8 <link_fbw_send>
}
    3e4e:	3710      	adds	r7, #16
    3e50:	46bd      	mov	sp, r7
    3e52:	bd80      	pop	{r7, pc}

00003e54 <s_21>:

/*task 8, sevrvant 21,22,23*/
void s_21(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3e54:	b480      	push	{r7}
    3e56:	b085      	sub	sp, #20
    3e58:	af00      	add	r7, sp, #0
    3e5a:	60f8      	str	r0, [r7, #12]
    3e5c:	60b9      	str	r1, [r7, #8]
    3e5e:	607a      	str	r2, [r7, #4]
    3e60:	603b      	str	r3, [r7, #0]
}
    3e62:	3714      	adds	r7, #20
    3e64:	46bd      	mov	sp, r7
    3e66:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e6a:	4770      	bx	lr

00003e6c <s_22>:
void s_22(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3e6c:	b580      	push	{r7, lr}
    3e6e:	b084      	sub	sp, #16
    3e70:	af00      	add	r7, sp, #0
    3e72:	60f8      	str	r0, [r7, #12]
    3e74:	60b9      	str	r1, [r7, #8]
    3e76:	607a      	str	r2, [r7, #4]
    3e78:	603b      	str	r3, [r7, #0]
    parse_gps_msg(); //gps.h
    3e7a:	f00d fbf5 	bl	11668 <parse_gps_msg>
}
    3e7e:	3710      	adds	r7, #16
    3e80:	46bd      	mov	sp, r7
    3e82:	bd80      	pop	{r7, pc}

00003e84 <s_23>:
void s_23(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3e84:	b580      	push	{r7, lr}
    3e86:	b084      	sub	sp, #16
    3e88:	af00      	add	r7, sp, #0
    3e8a:	60f8      	str	r0, [r7, #12]
    3e8c:	60b9      	str	r1, [r7, #8]
    3e8e:	607a      	str	r2, [r7, #4]
    3e90:	603b      	str	r3, [r7, #0]
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    3e92:	f00a fe11 	bl	eab8 <send_gps_pos>
    send_radIR();
    3e96:	f00b ffd5 	bl	fe44 <send_radIR>
    send_takeOff();
    3e9a:	f00c fdcd 	bl	10a38 <send_takeOff>
}
    3e9e:	3710      	adds	r7, #16
    3ea0:	46bd      	mov	sp, r7
    3ea2:	bd80      	pop	{r7, pc}

00003ea4 <s_24>:

/*task 9, servant 24, 25, 26, 27*/
void s_24(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ea4:	b480      	push	{r7}
    3ea6:	b085      	sub	sp, #20
    3ea8:	af00      	add	r7, sp, #0
    3eaa:	60f8      	str	r0, [r7, #12]
    3eac:	60b9      	str	r1, [r7, #8]
    3eae:	607a      	str	r2, [r7, #4]
    3eb0:	603b      	str	r3, [r7, #0]
}
    3eb2:	3714      	adds	r7, #20
    3eb4:	46bd      	mov	sp, r7
    3eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3eba:	4770      	bx	lr

00003ebc <s_25>:
void s_25(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ebc:	b580      	push	{r7, lr}
    3ebe:	b084      	sub	sp, #16
    3ec0:	af00      	add	r7, sp, #0
    3ec2:	60f8      	str	r0, [r7, #12]
    3ec4:	60b9      	str	r1, [r7, #8]
    3ec6:	607a      	str	r2, [r7, #4]
    3ec8:	603b      	str	r3, [r7, #0]
    nav_home(); // nav.h
    3eca:	f010 fe8d 	bl	14be8 <nav_home>
}
    3ece:	3710      	adds	r7, #16
    3ed0:	46bd      	mov	sp, r7
    3ed2:	bd80      	pop	{r7, pc}

00003ed4 <s_26>:
void s_26(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ed4:	b580      	push	{r7, lr}
    3ed6:	b084      	sub	sp, #16
    3ed8:	af00      	add	r7, sp, #0
    3eda:	60f8      	str	r0, [r7, #12]
    3edc:	60b9      	str	r1, [r7, #8]
    3ede:	607a      	str	r2, [r7, #4]
    3ee0:	603b      	str	r3, [r7, #0]
    nav_update(); // nav.h
    3ee2:	f010 fea7 	bl	14c34 <nav_update>
}
    3ee6:	3710      	adds	r7, #16
    3ee8:	46bd      	mov	sp, r7
    3eea:	bd80      	pop	{r7, pc}

00003eec <s_27>:
void s_27(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3eec:	b580      	push	{r7, lr}
    3eee:	b084      	sub	sp, #16
    3ef0:	af00      	add	r7, sp, #0
    3ef2:	60f8      	str	r0, [r7, #12]
    3ef4:	60b9      	str	r1, [r7, #8]
    3ef6:	607a      	str	r2, [r7, #4]
    3ef8:	603b      	str	r3, [r7, #0]
    course_pid_run(); // pid.h
    3efa:	f00d ffc5 	bl	11e88 <course_pid_run>
}
    3efe:	3710      	adds	r7, #16
    3f00:	46bd      	mov	sp, r7
    3f02:	bd80      	pop	{r7, pc}

00003f04 <s_28>:

/*task 10, servant 28, 29*/
void s_28(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3f04:	b480      	push	{r7}
    3f06:	b085      	sub	sp, #20
    3f08:	af00      	add	r7, sp, #0
    3f0a:	60f8      	str	r0, [r7, #12]
    3f0c:	60b9      	str	r1, [r7, #8]
    3f0e:	607a      	str	r2, [r7, #4]
    3f10:	603b      	str	r3, [r7, #0]
}
    3f12:	3714      	adds	r7, #20
    3f14:	46bd      	mov	sp, r7
    3f16:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f1a:	4770      	bx	lr

00003f1c <s_29>:
void s_29(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3f1c:	b580      	push	{r7, lr}
    3f1e:	b084      	sub	sp, #16
    3f20:	af00      	add	r7, sp, #0
    3f22:	60f8      	str	r0, [r7, #12]
    3f24:	60b9      	str	r1, [r7, #8]
    3f26:	607a      	str	r2, [r7, #4]
    3f28:	603b      	str	r3, [r7, #0]
    altitude_pid_run(); // pid.h
    3f2a:	f00e fa35 	bl	12398 <altitude_pid_run>
}
    3f2e:	3710      	adds	r7, #16
    3f30:	46bd      	mov	sp, r7
    3f32:	bd80      	pop	{r7, pc}

00003f34 <s_30>:

/*task 11, servant 30, 31*/
void s_30(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3f34:	b480      	push	{r7}
    3f36:	b085      	sub	sp, #20
    3f38:	af00      	add	r7, sp, #0
    3f3a:	60f8      	str	r0, [r7, #12]
    3f3c:	60b9      	str	r1, [r7, #8]
    3f3e:	607a      	str	r2, [r7, #4]
    3f40:	603b      	str	r3, [r7, #0]
}
    3f42:	3714      	adds	r7, #20
    3f44:	46bd      	mov	sp, r7
    3f46:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f4a:	4770      	bx	lr

00003f4c <s_31>:
void s_31(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3f4c:	b580      	push	{r7, lr}
    3f4e:	b084      	sub	sp, #16
    3f50:	af00      	add	r7, sp, #0
    3f52:	60f8      	str	r0, [r7, #12]
    3f54:	60b9      	str	r1, [r7, #8]
    3f56:	607a      	str	r2, [r7, #4]
    3f58:	603b      	str	r3, [r7, #0]
    climb_pid_run(); // pid.h
    3f5a:	f00e f84d 	bl	11ff8 <climb_pid_run>
}
    3f5e:	3710      	adds	r7, #16
    3f60:	46bd      	mov	sp, r7
    3f62:	bd80      	pop	{r7, pc}

00003f64 <s_32>:

/*task 12, servant 32, 33*/
void s_32(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3f64:	b480      	push	{r7}
    3f66:	b085      	sub	sp, #20
    3f68:	af00      	add	r7, sp, #0
    3f6a:	60f8      	str	r0, [r7, #12]
    3f6c:	60b9      	str	r1, [r7, #8]
    3f6e:	607a      	str	r2, [r7, #4]
    3f70:	603b      	str	r3, [r7, #0]
}
    3f72:	3714      	adds	r7, #20
    3f74:	46bd      	mov	sp, r7
    3f76:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f7a:	4770      	bx	lr

00003f7c <s_33>:
void s_33(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3f7c:	b580      	push	{r7, lr}
    3f7e:	b084      	sub	sp, #16
    3f80:	af00      	add	r7, sp, #0
    3f82:	60f8      	str	r0, [r7, #12]
    3f84:	60b9      	str	r1, [r7, #8]
    3f86:	607a      	str	r2, [r7, #4]
    3f88:	603b      	str	r3, [r7, #0]
    // main.c
    send_boot();
    3f8a:	f003 fa77 	bl	747c <send_boot>
    send_attitude();
    3f8e:	f004 fa45 	bl	841c <send_attitude>
    send_adc();
    3f92:	f004 ff37 	bl	8e04 <send_adc>
    send_settings();
    3f96:	f005 f9bd 	bl	9314 <send_settings>
    send_desired();
    3f9a:	f005 fdbf 	bl	9b1c <send_desired>
    send_bat();
    3f9e:	f006 fced 	bl	a97c <send_bat>
    send_climb();
    3fa2:	f007 f8a1 	bl	b0e8 <send_climb>
    send_mode();
    3fa6:	f007 fe11 	bl	bbcc <send_mode>
    send_debug();
    3faa:	f008 f8e3 	bl	c174 <send_debug>
    send_nav_ref();
    3fae:	f008 fbb7 	bl	c720 <send_nav_ref>
}
    3fb2:	3710      	adds	r7, #16
    3fb4:	46bd      	mov	sp, r7
    3fb6:	bd80      	pop	{r7, pc}

00003fb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    3fb8:	b480      	push	{r7}
    3fba:	b083      	sub	sp, #12
    3fbc:	af00      	add	r7, sp, #0
    3fbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    3fc0:	687b      	ldr	r3, [r7, #4]
    3fc2:	f103 0208 	add.w	r2, r3, #8
    3fc6:	687b      	ldr	r3, [r7, #4]
    3fc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3fca:	687b      	ldr	r3, [r7, #4]
    3fcc:	f04f 32ff 	mov.w	r2, #4294967295
    3fd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    3fd2:	687b      	ldr	r3, [r7, #4]
    3fd4:	f103 0208 	add.w	r2, r3, #8
    3fd8:	687b      	ldr	r3, [r7, #4]
    3fda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    3fdc:	687b      	ldr	r3, [r7, #4]
    3fde:	f103 0208 	add.w	r2, r3, #8
    3fe2:	687b      	ldr	r3, [r7, #4]
    3fe4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    3fe6:	687b      	ldr	r3, [r7, #4]
    3fe8:	2200      	movs	r2, #0
    3fea:	601a      	str	r2, [r3, #0]
}
    3fec:	370c      	adds	r7, #12
    3fee:	46bd      	mov	sp, r7
    3ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ff4:	4770      	bx	lr
    3ff6:	bf00      	nop

00003ff8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    3ff8:	b480      	push	{r7}
    3ffa:	b083      	sub	sp, #12
    3ffc:	af00      	add	r7, sp, #0
    3ffe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    4000:	687b      	ldr	r3, [r7, #4]
    4002:	2200      	movs	r2, #0
    4004:	611a      	str	r2, [r3, #16]
}
    4006:	370c      	adds	r7, #12
    4008:	46bd      	mov	sp, r7
    400a:	f85d 7b04 	ldr.w	r7, [sp], #4
    400e:	4770      	bx	lr

00004010 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    4010:	b480      	push	{r7}
    4012:	b085      	sub	sp, #20
    4014:	af00      	add	r7, sp, #0
    4016:	6078      	str	r0, [r7, #4]
    4018:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    401a:	687b      	ldr	r3, [r7, #4]
    401c:	685b      	ldr	r3, [r3, #4]
    401e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    4020:	68fb      	ldr	r3, [r7, #12]
    4022:	685a      	ldr	r2, [r3, #4]
    4024:	683b      	ldr	r3, [r7, #0]
    4026:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    4028:	687b      	ldr	r3, [r7, #4]
    402a:	685a      	ldr	r2, [r3, #4]
    402c:	683b      	ldr	r3, [r7, #0]
    402e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    4030:	68fb      	ldr	r3, [r7, #12]
    4032:	685b      	ldr	r3, [r3, #4]
    4034:	683a      	ldr	r2, [r7, #0]
    4036:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    4038:	68fb      	ldr	r3, [r7, #12]
    403a:	683a      	ldr	r2, [r7, #0]
    403c:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    403e:	687b      	ldr	r3, [r7, #4]
    4040:	683a      	ldr	r2, [r7, #0]
    4042:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    4044:	683b      	ldr	r3, [r7, #0]
    4046:	687a      	ldr	r2, [r7, #4]
    4048:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    404a:	687b      	ldr	r3, [r7, #4]
    404c:	681b      	ldr	r3, [r3, #0]
    404e:	1c5a      	adds	r2, r3, #1
    4050:	687b      	ldr	r3, [r7, #4]
    4052:	601a      	str	r2, [r3, #0]
}
    4054:	3714      	adds	r7, #20
    4056:	46bd      	mov	sp, r7
    4058:	f85d 7b04 	ldr.w	r7, [sp], #4
    405c:	4770      	bx	lr
    405e:	bf00      	nop

00004060 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    4060:	b480      	push	{r7}
    4062:	b085      	sub	sp, #20
    4064:	af00      	add	r7, sp, #0
    4066:	6078      	str	r0, [r7, #4]
    4068:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    406a:	683b      	ldr	r3, [r7, #0]
    406c:	681b      	ldr	r3, [r3, #0]
    406e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    4070:	68bb      	ldr	r3, [r7, #8]
    4072:	f1b3 3fff 	cmp.w	r3, #4294967295
    4076:	d103      	bne.n	4080 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    4078:	687b      	ldr	r3, [r7, #4]
    407a:	691b      	ldr	r3, [r3, #16]
    407c:	60fb      	str	r3, [r7, #12]
    407e:	e00c      	b.n	409a <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    4080:	687b      	ldr	r3, [r7, #4]
    4082:	3308      	adds	r3, #8
    4084:	60fb      	str	r3, [r7, #12]
    4086:	e002      	b.n	408e <vListInsert+0x2e>
    4088:	68fb      	ldr	r3, [r7, #12]
    408a:	685b      	ldr	r3, [r3, #4]
    408c:	60fb      	str	r3, [r7, #12]
    408e:	68fb      	ldr	r3, [r7, #12]
    4090:	685b      	ldr	r3, [r3, #4]
    4092:	681a      	ldr	r2, [r3, #0]
    4094:	68bb      	ldr	r3, [r7, #8]
    4096:	429a      	cmp	r2, r3
    4098:	d9f6      	bls.n	4088 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    409a:	68fb      	ldr	r3, [r7, #12]
    409c:	685a      	ldr	r2, [r3, #4]
    409e:	683b      	ldr	r3, [r7, #0]
    40a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    40a2:	683b      	ldr	r3, [r7, #0]
    40a4:	685b      	ldr	r3, [r3, #4]
    40a6:	683a      	ldr	r2, [r7, #0]
    40a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    40aa:	683b      	ldr	r3, [r7, #0]
    40ac:	68fa      	ldr	r2, [r7, #12]
    40ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    40b0:	68fb      	ldr	r3, [r7, #12]
    40b2:	683a      	ldr	r2, [r7, #0]
    40b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    40b6:	683b      	ldr	r3, [r7, #0]
    40b8:	687a      	ldr	r2, [r7, #4]
    40ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    40bc:	687b      	ldr	r3, [r7, #4]
    40be:	681b      	ldr	r3, [r3, #0]
    40c0:	1c5a      	adds	r2, r3, #1
    40c2:	687b      	ldr	r3, [r7, #4]
    40c4:	601a      	str	r2, [r3, #0]
}
    40c6:	3714      	adds	r7, #20
    40c8:	46bd      	mov	sp, r7
    40ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    40ce:	4770      	bx	lr

000040d0 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    40d0:	b480      	push	{r7}
    40d2:	b085      	sub	sp, #20
    40d4:	af00      	add	r7, sp, #0
    40d6:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    40d8:	687b      	ldr	r3, [r7, #4]
    40da:	685b      	ldr	r3, [r3, #4]
    40dc:	687a      	ldr	r2, [r7, #4]
    40de:	6892      	ldr	r2, [r2, #8]
    40e0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    40e2:	687b      	ldr	r3, [r7, #4]
    40e4:	689b      	ldr	r3, [r3, #8]
    40e6:	687a      	ldr	r2, [r7, #4]
    40e8:	6852      	ldr	r2, [r2, #4]
    40ea:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    40ec:	687b      	ldr	r3, [r7, #4]
    40ee:	691b      	ldr	r3, [r3, #16]
    40f0:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    40f2:	68fb      	ldr	r3, [r7, #12]
    40f4:	685a      	ldr	r2, [r3, #4]
    40f6:	687b      	ldr	r3, [r7, #4]
    40f8:	429a      	cmp	r2, r3
    40fa:	d103      	bne.n	4104 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    40fc:	687b      	ldr	r3, [r7, #4]
    40fe:	689a      	ldr	r2, [r3, #8]
    4100:	68fb      	ldr	r3, [r7, #12]
    4102:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    4104:	687b      	ldr	r3, [r7, #4]
    4106:	2200      	movs	r2, #0
    4108:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    410a:	68fb      	ldr	r3, [r7, #12]
    410c:	681b      	ldr	r3, [r3, #0]
    410e:	1e5a      	subs	r2, r3, #1
    4110:	68fb      	ldr	r3, [r7, #12]
    4112:	601a      	str	r2, [r3, #0]
}
    4114:	3714      	adds	r7, #20
    4116:	46bd      	mov	sp, r7
    4118:	f85d 7b04 	ldr.w	r7, [sp], #4
    411c:	4770      	bx	lr
    411e:	bf00      	nop

00004120 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    4120:	b580      	push	{r7, lr}
    4122:	b084      	sub	sp, #16
    4124:	af00      	add	r7, sp, #0
    4126:	6078      	str	r0, [r7, #4]
    4128:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    412a:	2301      	movs	r3, #1
    412c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    412e:	683b      	ldr	r3, [r7, #0]
    4130:	2b01      	cmp	r3, #1
    4132:	d00b      	beq.n	414c <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4134:	687b      	ldr	r3, [r7, #4]
    4136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4138:	2b00      	cmp	r3, #0
    413a:	d001      	beq.n	4140 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    413c:	2300      	movs	r3, #0
    413e:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4140:	687b      	ldr	r3, [r7, #4]
    4142:	691b      	ldr	r3, [r3, #16]
    4144:	2b00      	cmp	r3, #0
    4146:	d001      	beq.n	414c <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    4148:	2300      	movs	r3, #0
    414a:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    414c:	68fb      	ldr	r3, [r7, #12]
    414e:	2b01      	cmp	r3, #1
    4150:	d12f      	bne.n	41b2 <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    4152:	687b      	ldr	r3, [r7, #4]
    4154:	681a      	ldr	r2, [r3, #0]
    4156:	687b      	ldr	r3, [r7, #4]
    4158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    415a:	6879      	ldr	r1, [r7, #4]
    415c:	6c09      	ldr	r1, [r1, #64]	; 0x40
    415e:	fb01 f303 	mul.w	r3, r1, r3
    4162:	441a      	add	r2, r3
    4164:	687b      	ldr	r3, [r7, #4]
    4166:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4168:	687b      	ldr	r3, [r7, #4]
    416a:	2200      	movs	r2, #0
    416c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    416e:	687b      	ldr	r3, [r7, #4]
    4170:	681a      	ldr	r2, [r3, #0]
    4172:	687b      	ldr	r3, [r7, #4]
    4174:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    4176:	687b      	ldr	r3, [r7, #4]
    4178:	681a      	ldr	r2, [r3, #0]
    417a:	687b      	ldr	r3, [r7, #4]
    417c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    417e:	3b01      	subs	r3, #1
    4180:	6879      	ldr	r1, [r7, #4]
    4182:	6c09      	ldr	r1, [r1, #64]	; 0x40
    4184:	fb01 f303 	mul.w	r3, r1, r3
    4188:	441a      	add	r2, r3
    418a:	687b      	ldr	r3, [r7, #4]
    418c:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    418e:	687b      	ldr	r3, [r7, #4]
    4190:	f04f 32ff 	mov.w	r2, #4294967295
    4194:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    4196:	687b      	ldr	r3, [r7, #4]
    4198:	f04f 32ff 	mov.w	r2, #4294967295
    419c:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    419e:	687b      	ldr	r3, [r7, #4]
    41a0:	3310      	adds	r3, #16
    41a2:	4618      	mov	r0, r3
    41a4:	f7ff ff08 	bl	3fb8 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    41a8:	687b      	ldr	r3, [r7, #4]
    41aa:	3324      	adds	r3, #36	; 0x24
    41ac:	4618      	mov	r0, r3
    41ae:	f7ff ff03 	bl	3fb8 <vListInitialise>
	}

	return xReturn;
    41b2:	68fb      	ldr	r3, [r7, #12]
}
    41b4:	4618      	mov	r0, r3
    41b6:	3710      	adds	r7, #16
    41b8:	46bd      	mov	sp, r7
    41ba:	bd80      	pop	{r7, pc}

000041bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    41bc:	b580      	push	{r7, lr}
    41be:	b088      	sub	sp, #32
    41c0:	af00      	add	r7, sp, #0
    41c2:	60f8      	str	r0, [r7, #12]
    41c4:	60b9      	str	r1, [r7, #8]
    41c6:	4613      	mov	r3, r2
    41c8:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    41ca:	2300      	movs	r3, #0
    41cc:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    41ce:	68fb      	ldr	r3, [r7, #12]
    41d0:	2b00      	cmp	r3, #0
    41d2:	d026      	beq.n	4222 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    41d4:	204c      	movs	r0, #76	; 0x4c
    41d6:	f001 fda5 	bl	5d24 <pvPortMalloc>
    41da:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    41dc:	69bb      	ldr	r3, [r7, #24]
    41de:	2b00      	cmp	r3, #0
    41e0:	d01f      	beq.n	4222 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    41e2:	68fb      	ldr	r3, [r7, #12]
    41e4:	68ba      	ldr	r2, [r7, #8]
    41e6:	fb02 f303 	mul.w	r3, r2, r3
    41ea:	3301      	adds	r3, #1
    41ec:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    41ee:	6978      	ldr	r0, [r7, #20]
    41f0:	f001 fd98 	bl	5d24 <pvPortMalloc>
    41f4:	4602      	mov	r2, r0
    41f6:	69bb      	ldr	r3, [r7, #24]
    41f8:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    41fa:	69bb      	ldr	r3, [r7, #24]
    41fc:	681b      	ldr	r3, [r3, #0]
    41fe:	2b00      	cmp	r3, #0
    4200:	d00c      	beq.n	421c <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    4202:	69bb      	ldr	r3, [r7, #24]
    4204:	68fa      	ldr	r2, [r7, #12]
    4206:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    4208:	69bb      	ldr	r3, [r7, #24]
    420a:	68ba      	ldr	r2, [r7, #8]
    420c:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    420e:	69b8      	ldr	r0, [r7, #24]
    4210:	2101      	movs	r1, #1
    4212:	f7ff ff85 	bl	4120 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    4216:	69bb      	ldr	r3, [r7, #24]
    4218:	61fb      	str	r3, [r7, #28]
    421a:	e002      	b.n	4222 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    421c:	69b8      	ldr	r0, [r7, #24]
    421e:	f001 fe45 	bl	5eac <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    4222:	69fb      	ldr	r3, [r7, #28]
}
    4224:	4618      	mov	r0, r3
    4226:	3720      	adds	r7, #32
    4228:	46bd      	mov	sp, r7
    422a:	bd80      	pop	{r7, pc}

0000422c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    422c:	b580      	push	{r7, lr}
    422e:	b084      	sub	sp, #16
    4230:	af00      	add	r7, sp, #0
    4232:	4603      	mov	r3, r0
    4234:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    4236:	204c      	movs	r0, #76	; 0x4c
    4238:	f001 fd74 	bl	5d24 <pvPortMalloc>
    423c:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    423e:	68fb      	ldr	r3, [r7, #12]
    4240:	2b00      	cmp	r3, #0
    4242:	d02c      	beq.n	429e <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    4244:	68fb      	ldr	r3, [r7, #12]
    4246:	2200      	movs	r2, #0
    4248:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    424a:	68fb      	ldr	r3, [r7, #12]
    424c:	2200      	movs	r2, #0
    424e:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    4250:	68fb      	ldr	r3, [r7, #12]
    4252:	2200      	movs	r2, #0
    4254:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    4256:	68fb      	ldr	r3, [r7, #12]
    4258:	2200      	movs	r2, #0
    425a:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    425c:	68fb      	ldr	r3, [r7, #12]
    425e:	2200      	movs	r2, #0
    4260:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    4262:	68fb      	ldr	r3, [r7, #12]
    4264:	2201      	movs	r2, #1
    4266:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    4268:	68fb      	ldr	r3, [r7, #12]
    426a:	2200      	movs	r2, #0
    426c:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    426e:	68fb      	ldr	r3, [r7, #12]
    4270:	f04f 32ff 	mov.w	r2, #4294967295
    4274:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    4276:	68fb      	ldr	r3, [r7, #12]
    4278:	f04f 32ff 	mov.w	r2, #4294967295
    427c:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    427e:	68fb      	ldr	r3, [r7, #12]
    4280:	3310      	adds	r3, #16
    4282:	4618      	mov	r0, r3
    4284:	f7ff fe98 	bl	3fb8 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    4288:	68fb      	ldr	r3, [r7, #12]
    428a:	3324      	adds	r3, #36	; 0x24
    428c:	4618      	mov	r0, r3
    428e:	f7ff fe93 	bl	3fb8 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    4292:	68f8      	ldr	r0, [r7, #12]
    4294:	2100      	movs	r1, #0
    4296:	2200      	movs	r2, #0
    4298:	2300      	movs	r3, #0
    429a:	f000 f81d 	bl	42d8 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    429e:	68fb      	ldr	r3, [r7, #12]
	}
    42a0:	4618      	mov	r0, r3
    42a2:	3710      	adds	r7, #16
    42a4:	46bd      	mov	sp, r7
    42a6:	bd80      	pop	{r7, pc}

000042a8 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    42a8:	b580      	push	{r7, lr}
    42aa:	b084      	sub	sp, #16
    42ac:	af00      	add	r7, sp, #0
    42ae:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    42b0:	f001 fcc0 	bl	5c34 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    42b4:	687b      	ldr	r3, [r7, #4]
    42b6:	681b      	ldr	r3, [r3, #0]
    42b8:	2b00      	cmp	r3, #0
    42ba:	d103      	bne.n	42c4 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    42bc:	687b      	ldr	r3, [r7, #4]
    42be:	685b      	ldr	r3, [r3, #4]
    42c0:	60fb      	str	r3, [r7, #12]
    42c2:	e001      	b.n	42c8 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    42c4:	2300      	movs	r3, #0
    42c6:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    42c8:	f001 fcca 	bl	5c60 <vPortExitCritical>
		
		return pxReturn;
    42cc:	68fb      	ldr	r3, [r7, #12]
	}
    42ce:	4618      	mov	r0, r3
    42d0:	3710      	adds	r7, #16
    42d2:	46bd      	mov	sp, r7
    42d4:	bd80      	pop	{r7, pc}
    42d6:	bf00      	nop

000042d8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    42d8:	b580      	push	{r7, lr}
    42da:	b088      	sub	sp, #32
    42dc:	af00      	add	r7, sp, #0
    42de:	60f8      	str	r0, [r7, #12]
    42e0:	60b9      	str	r1, [r7, #8]
    42e2:	607a      	str	r2, [r7, #4]
    42e4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    42e6:	2300      	movs	r3, #0
    42e8:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    42ea:	f001 fca3 	bl	5c34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    42ee:	68fb      	ldr	r3, [r7, #12]
    42f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    42f2:	68fb      	ldr	r3, [r7, #12]
    42f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    42f6:	429a      	cmp	r2, r3
    42f8:	d216      	bcs.n	4328 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    42fa:	68f8      	ldr	r0, [r7, #12]
    42fc:	68b9      	ldr	r1, [r7, #8]
    42fe:	683a      	ldr	r2, [r7, #0]
    4300:	f000 f9d6 	bl	46b0 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4304:	68fb      	ldr	r3, [r7, #12]
    4306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4308:	2b00      	cmp	r3, #0
    430a:	d009      	beq.n	4320 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    430c:	68fb      	ldr	r3, [r7, #12]
    430e:	3324      	adds	r3, #36	; 0x24
    4310:	4618      	mov	r0, r3
    4312:	f001 f905 	bl	5520 <xTaskRemoveFromEventList>
    4316:	4603      	mov	r3, r0
    4318:	2b01      	cmp	r3, #1
    431a:	d101      	bne.n	4320 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    431c:	f001 fc7c 	bl	5c18 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    4320:	f001 fc9e 	bl	5c60 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    4324:	2301      	movs	r3, #1
    4326:	e059      	b.n	43dc <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4328:	687b      	ldr	r3, [r7, #4]
    432a:	2b00      	cmp	r3, #0
    432c:	d103      	bne.n	4336 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    432e:	f001 fc97 	bl	5c60 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    4332:	2300      	movs	r3, #0
    4334:	e052      	b.n	43dc <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    4336:	69fb      	ldr	r3, [r7, #28]
    4338:	2b00      	cmp	r3, #0
    433a:	d106      	bne.n	434a <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    433c:	f107 0314 	add.w	r3, r7, #20
    4340:	4618      	mov	r0, r3
    4342:	f001 f945 	bl	55d0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4346:	2301      	movs	r3, #1
    4348:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    434a:	f001 fc89 	bl	5c60 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    434e:	f000 fe93 	bl	5078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4352:	f001 fc6f 	bl	5c34 <vPortEnterCritical>
    4356:	68fb      	ldr	r3, [r7, #12]
    4358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    435a:	f1b3 3fff 	cmp.w	r3, #4294967295
    435e:	d102      	bne.n	4366 <xQueueGenericSend+0x8e>
    4360:	68fb      	ldr	r3, [r7, #12]
    4362:	2200      	movs	r2, #0
    4364:	645a      	str	r2, [r3, #68]	; 0x44
    4366:	68fb      	ldr	r3, [r7, #12]
    4368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    436a:	f1b3 3fff 	cmp.w	r3, #4294967295
    436e:	d102      	bne.n	4376 <xQueueGenericSend+0x9e>
    4370:	68fb      	ldr	r3, [r7, #12]
    4372:	2200      	movs	r2, #0
    4374:	649a      	str	r2, [r3, #72]	; 0x48
    4376:	f001 fc73 	bl	5c60 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    437a:	f107 0214 	add.w	r2, r7, #20
    437e:	1d3b      	adds	r3, r7, #4
    4380:	4610      	mov	r0, r2
    4382:	4619      	mov	r1, r3
    4384:	f001 f93c 	bl	5600 <xTaskCheckForTimeOut>
    4388:	4603      	mov	r3, r0
    438a:	2b00      	cmp	r3, #0
    438c:	d11e      	bne.n	43cc <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    438e:	68f8      	ldr	r0, [r7, #12]
    4390:	f000 fa86 	bl	48a0 <prvIsQueueFull>
    4394:	4603      	mov	r3, r0
    4396:	2b00      	cmp	r3, #0
    4398:	d012      	beq.n	43c0 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    439a:	68fb      	ldr	r3, [r7, #12]
    439c:	f103 0210 	add.w	r2, r3, #16
    43a0:	687b      	ldr	r3, [r7, #4]
    43a2:	4610      	mov	r0, r2
    43a4:	4619      	mov	r1, r3
    43a6:	f001 f883 	bl	54b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    43aa:	68f8      	ldr	r0, [r7, #12]
    43ac:	f000 fa02 	bl	47b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    43b0:	f000 fe74 	bl	509c <xTaskResumeAll>
    43b4:	4603      	mov	r3, r0
    43b6:	2b00      	cmp	r3, #0
    43b8:	d10f      	bne.n	43da <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    43ba:	f001 fc2d 	bl	5c18 <vPortYieldFromISR>
    43be:	e00c      	b.n	43da <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    43c0:	68f8      	ldr	r0, [r7, #12]
    43c2:	f000 f9f7 	bl	47b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    43c6:	f000 fe69 	bl	509c <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    43ca:	e78e      	b.n	42ea <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    43cc:	68f8      	ldr	r0, [r7, #12]
    43ce:	f000 f9f1 	bl	47b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    43d2:	f000 fe63 	bl	509c <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    43d6:	2300      	movs	r3, #0
    43d8:	e000      	b.n	43dc <xQueueGenericSend+0x104>
		}
	}
    43da:	e786      	b.n	42ea <xQueueGenericSend+0x12>
}
    43dc:	4618      	mov	r0, r3
    43de:	3720      	adds	r7, #32
    43e0:	46bd      	mov	sp, r7
    43e2:	bd80      	pop	{r7, pc}

000043e4 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    43e4:	b580      	push	{r7, lr}
    43e6:	b086      	sub	sp, #24
    43e8:	af00      	add	r7, sp, #0
    43ea:	60f8      	str	r0, [r7, #12]
    43ec:	60b9      	str	r1, [r7, #8]
    43ee:	607a      	str	r2, [r7, #4]
    43f0:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    43f2:	2300      	movs	r3, #0
    43f4:	613b      	str	r3, [r7, #16]
    43f6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    43fa:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    43fe:	68fb      	ldr	r3, [r7, #12]
    4400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4402:	68fb      	ldr	r3, [r7, #12]
    4404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4406:	429a      	cmp	r2, r3
    4408:	d221      	bcs.n	444e <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    440a:	68f8      	ldr	r0, [r7, #12]
    440c:	68b9      	ldr	r1, [r7, #8]
    440e:	683a      	ldr	r2, [r7, #0]
    4410:	f000 f94e 	bl	46b0 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    4414:	68fb      	ldr	r3, [r7, #12]
    4416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4418:	f1b3 3fff 	cmp.w	r3, #4294967295
    441c:	d10f      	bne.n	443e <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    441e:	68fb      	ldr	r3, [r7, #12]
    4420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4422:	2b00      	cmp	r3, #0
    4424:	d010      	beq.n	4448 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4426:	68fb      	ldr	r3, [r7, #12]
    4428:	3324      	adds	r3, #36	; 0x24
    442a:	4618      	mov	r0, r3
    442c:	f001 f878 	bl	5520 <xTaskRemoveFromEventList>
    4430:	4603      	mov	r3, r0
    4432:	2b00      	cmp	r3, #0
    4434:	d008      	beq.n	4448 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    4436:	687b      	ldr	r3, [r7, #4]
    4438:	2201      	movs	r2, #1
    443a:	601a      	str	r2, [r3, #0]
    443c:	e004      	b.n	4448 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    443e:	68fb      	ldr	r3, [r7, #12]
    4440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4442:	1c5a      	adds	r2, r3, #1
    4444:	68fb      	ldr	r3, [r7, #12]
    4446:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    4448:	2301      	movs	r3, #1
    444a:	617b      	str	r3, [r7, #20]
    444c:	e001      	b.n	4452 <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    444e:	2300      	movs	r3, #0
    4450:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4452:	f04f 0000 	mov.w	r0, #0
    4456:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    445a:	697b      	ldr	r3, [r7, #20]
}
    445c:	4618      	mov	r0, r3
    445e:	3718      	adds	r7, #24
    4460:	46bd      	mov	sp, r7
    4462:	bd80      	pop	{r7, pc}

00004464 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    4464:	b580      	push	{r7, lr}
    4466:	b088      	sub	sp, #32
    4468:	af00      	add	r7, sp, #0
    446a:	60f8      	str	r0, [r7, #12]
    446c:	60b9      	str	r1, [r7, #8]
    446e:	607a      	str	r2, [r7, #4]
    4470:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    4472:	2300      	movs	r3, #0
    4474:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    4476:	f001 fbdd 	bl	5c34 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    447a:	68fb      	ldr	r3, [r7, #12]
    447c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    447e:	2b00      	cmp	r3, #0
    4480:	d03b      	beq.n	44fa <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    4482:	68fb      	ldr	r3, [r7, #12]
    4484:	68db      	ldr	r3, [r3, #12]
    4486:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    4488:	68f8      	ldr	r0, [r7, #12]
    448a:	68b9      	ldr	r1, [r7, #8]
    448c:	f000 f96c 	bl	4768 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    4490:	683b      	ldr	r3, [r7, #0]
    4492:	2b00      	cmp	r3, #0
    4494:	d11c      	bne.n	44d0 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    4496:	68fb      	ldr	r3, [r7, #12]
    4498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    449a:	1e5a      	subs	r2, r3, #1
    449c:	68fb      	ldr	r3, [r7, #12]
    449e:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    44a0:	68fb      	ldr	r3, [r7, #12]
    44a2:	681b      	ldr	r3, [r3, #0]
    44a4:	2b00      	cmp	r3, #0
    44a6:	d104      	bne.n	44b2 <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    44a8:	f001 fa5c 	bl	5964 <xTaskGetCurrentTaskHandle>
    44ac:	4602      	mov	r2, r0
    44ae:	68fb      	ldr	r3, [r7, #12]
    44b0:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    44b2:	68fb      	ldr	r3, [r7, #12]
    44b4:	691b      	ldr	r3, [r3, #16]
    44b6:	2b00      	cmp	r3, #0
    44b8:	d01b      	beq.n	44f2 <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    44ba:	68fb      	ldr	r3, [r7, #12]
    44bc:	3310      	adds	r3, #16
    44be:	4618      	mov	r0, r3
    44c0:	f001 f82e 	bl	5520 <xTaskRemoveFromEventList>
    44c4:	4603      	mov	r3, r0
    44c6:	2b01      	cmp	r3, #1
    44c8:	d113      	bne.n	44f2 <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    44ca:	f001 fba5 	bl	5c18 <vPortYieldFromISR>
    44ce:	e010      	b.n	44f2 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    44d0:	68fb      	ldr	r3, [r7, #12]
    44d2:	69ba      	ldr	r2, [r7, #24]
    44d4:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    44d6:	68fb      	ldr	r3, [r7, #12]
    44d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    44da:	2b00      	cmp	r3, #0
    44dc:	d009      	beq.n	44f2 <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    44de:	68fb      	ldr	r3, [r7, #12]
    44e0:	3324      	adds	r3, #36	; 0x24
    44e2:	4618      	mov	r0, r3
    44e4:	f001 f81c 	bl	5520 <xTaskRemoveFromEventList>
    44e8:	4603      	mov	r3, r0
    44ea:	2b00      	cmp	r3, #0
    44ec:	d001      	beq.n	44f2 <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    44ee:	f001 fb93 	bl	5c18 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    44f2:	f001 fbb5 	bl	5c60 <vPortExitCritical>
				return pdPASS;
    44f6:	2301      	movs	r3, #1
    44f8:	e066      	b.n	45c8 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    44fa:	687b      	ldr	r3, [r7, #4]
    44fc:	2b00      	cmp	r3, #0
    44fe:	d103      	bne.n	4508 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4500:	f001 fbae 	bl	5c60 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    4504:	2300      	movs	r3, #0
    4506:	e05f      	b.n	45c8 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    4508:	69fb      	ldr	r3, [r7, #28]
    450a:	2b00      	cmp	r3, #0
    450c:	d106      	bne.n	451c <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    450e:	f107 0310 	add.w	r3, r7, #16
    4512:	4618      	mov	r0, r3
    4514:	f001 f85c 	bl	55d0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4518:	2301      	movs	r3, #1
    451a:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    451c:	f001 fba0 	bl	5c60 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4520:	f000 fdaa 	bl	5078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4524:	f001 fb86 	bl	5c34 <vPortEnterCritical>
    4528:	68fb      	ldr	r3, [r7, #12]
    452a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    452c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4530:	d102      	bne.n	4538 <xQueueGenericReceive+0xd4>
    4532:	68fb      	ldr	r3, [r7, #12]
    4534:	2200      	movs	r2, #0
    4536:	645a      	str	r2, [r3, #68]	; 0x44
    4538:	68fb      	ldr	r3, [r7, #12]
    453a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    453c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4540:	d102      	bne.n	4548 <xQueueGenericReceive+0xe4>
    4542:	68fb      	ldr	r3, [r7, #12]
    4544:	2200      	movs	r2, #0
    4546:	649a      	str	r2, [r3, #72]	; 0x48
    4548:	f001 fb8a 	bl	5c60 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    454c:	f107 0210 	add.w	r2, r7, #16
    4550:	1d3b      	adds	r3, r7, #4
    4552:	4610      	mov	r0, r2
    4554:	4619      	mov	r1, r3
    4556:	f001 f853 	bl	5600 <xTaskCheckForTimeOut>
    455a:	4603      	mov	r3, r0
    455c:	2b00      	cmp	r3, #0
    455e:	d12b      	bne.n	45b8 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4560:	68f8      	ldr	r0, [r7, #12]
    4562:	f000 f973 	bl	484c <prvIsQueueEmpty>
    4566:	4603      	mov	r3, r0
    4568:	2b00      	cmp	r3, #0
    456a:	d01f      	beq.n	45ac <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    456c:	68fb      	ldr	r3, [r7, #12]
    456e:	681b      	ldr	r3, [r3, #0]
    4570:	2b00      	cmp	r3, #0
    4572:	d108      	bne.n	4586 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    4574:	f001 fb5e 	bl	5c34 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    4578:	68fb      	ldr	r3, [r7, #12]
    457a:	685b      	ldr	r3, [r3, #4]
    457c:	4618      	mov	r0, r3
    457e:	f001 fa01 	bl	5984 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    4582:	f001 fb6d 	bl	5c60 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    4586:	68fb      	ldr	r3, [r7, #12]
    4588:	f103 0224 	add.w	r2, r3, #36	; 0x24
    458c:	687b      	ldr	r3, [r7, #4]
    458e:	4610      	mov	r0, r2
    4590:	4619      	mov	r1, r3
    4592:	f000 ff8d 	bl	54b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    4596:	68f8      	ldr	r0, [r7, #12]
    4598:	f000 f90c 	bl	47b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    459c:	f000 fd7e 	bl	509c <xTaskResumeAll>
    45a0:	4603      	mov	r3, r0
    45a2:	2b00      	cmp	r3, #0
    45a4:	d10f      	bne.n	45c6 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    45a6:	f001 fb37 	bl	5c18 <vPortYieldFromISR>
    45aa:	e00c      	b.n	45c6 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    45ac:	68f8      	ldr	r0, [r7, #12]
    45ae:	f000 f901 	bl	47b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    45b2:	f000 fd73 	bl	509c <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    45b6:	e75e      	b.n	4476 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    45b8:	68f8      	ldr	r0, [r7, #12]
    45ba:	f000 f8fb 	bl	47b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    45be:	f000 fd6d 	bl	509c <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    45c2:	2300      	movs	r3, #0
    45c4:	e000      	b.n	45c8 <xQueueGenericReceive+0x164>
		}
	}
    45c6:	e756      	b.n	4476 <xQueueGenericReceive+0x12>
}
    45c8:	4618      	mov	r0, r3
    45ca:	3720      	adds	r7, #32
    45cc:	46bd      	mov	sp, r7
    45ce:	bd80      	pop	{r7, pc}

000045d0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    45d0:	b580      	push	{r7, lr}
    45d2:	b086      	sub	sp, #24
    45d4:	af00      	add	r7, sp, #0
    45d6:	60f8      	str	r0, [r7, #12]
    45d8:	60b9      	str	r1, [r7, #8]
    45da:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    45dc:	2300      	movs	r3, #0
    45de:	613b      	str	r3, [r7, #16]
    45e0:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    45e4:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    45e8:	68fb      	ldr	r3, [r7, #12]
    45ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    45ec:	2b00      	cmp	r3, #0
    45ee:	d025      	beq.n	463c <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    45f0:	68f8      	ldr	r0, [r7, #12]
    45f2:	68b9      	ldr	r1, [r7, #8]
    45f4:	f000 f8b8 	bl	4768 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    45f8:	68fb      	ldr	r3, [r7, #12]
    45fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    45fc:	1e5a      	subs	r2, r3, #1
    45fe:	68fb      	ldr	r3, [r7, #12]
    4600:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    4602:	68fb      	ldr	r3, [r7, #12]
    4604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4606:	f1b3 3fff 	cmp.w	r3, #4294967295
    460a:	d10f      	bne.n	462c <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    460c:	68fb      	ldr	r3, [r7, #12]
    460e:	691b      	ldr	r3, [r3, #16]
    4610:	2b00      	cmp	r3, #0
    4612:	d010      	beq.n	4636 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4614:	68fb      	ldr	r3, [r7, #12]
    4616:	3310      	adds	r3, #16
    4618:	4618      	mov	r0, r3
    461a:	f000 ff81 	bl	5520 <xTaskRemoveFromEventList>
    461e:	4603      	mov	r3, r0
    4620:	2b00      	cmp	r3, #0
    4622:	d008      	beq.n	4636 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    4624:	687b      	ldr	r3, [r7, #4]
    4626:	2201      	movs	r2, #1
    4628:	601a      	str	r2, [r3, #0]
    462a:	e004      	b.n	4636 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    462c:	68fb      	ldr	r3, [r7, #12]
    462e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4630:	1c5a      	adds	r2, r3, #1
    4632:	68fb      	ldr	r3, [r7, #12]
    4634:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    4636:	2301      	movs	r3, #1
    4638:	617b      	str	r3, [r7, #20]
    463a:	e001      	b.n	4640 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    463c:	2300      	movs	r3, #0
    463e:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4640:	f04f 0000 	mov.w	r0, #0
    4644:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4648:	697b      	ldr	r3, [r7, #20]
}
    464a:	4618      	mov	r0, r3
    464c:	3718      	adds	r7, #24
    464e:	46bd      	mov	sp, r7
    4650:	bd80      	pop	{r7, pc}
    4652:	bf00      	nop

00004654 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    4654:	b580      	push	{r7, lr}
    4656:	b084      	sub	sp, #16
    4658:	af00      	add	r7, sp, #0
    465a:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    465c:	f001 faea 	bl	5c34 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    4660:	687b      	ldr	r3, [r7, #4]
    4662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4664:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4666:	f001 fafb 	bl	5c60 <vPortExitCritical>

	return uxReturn;
    466a:	68fb      	ldr	r3, [r7, #12]
}
    466c:	4618      	mov	r0, r3
    466e:	3710      	adds	r7, #16
    4670:	46bd      	mov	sp, r7
    4672:	bd80      	pop	{r7, pc}

00004674 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    4674:	b480      	push	{r7}
    4676:	b085      	sub	sp, #20
    4678:	af00      	add	r7, sp, #0
    467a:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    467c:	687b      	ldr	r3, [r7, #4]
    467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4680:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    4682:	68fb      	ldr	r3, [r7, #12]
}
    4684:	4618      	mov	r0, r3
    4686:	3714      	adds	r7, #20
    4688:	46bd      	mov	sp, r7
    468a:	f85d 7b04 	ldr.w	r7, [sp], #4
    468e:	4770      	bx	lr

00004690 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    4690:	b580      	push	{r7, lr}
    4692:	b082      	sub	sp, #8
    4694:	af00      	add	r7, sp, #0
    4696:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    4698:	687b      	ldr	r3, [r7, #4]
    469a:	681b      	ldr	r3, [r3, #0]
    469c:	4618      	mov	r0, r3
    469e:	f001 fc05 	bl	5eac <vPortFree>
	vPortFree( pxQueue );
    46a2:	6878      	ldr	r0, [r7, #4]
    46a4:	f001 fc02 	bl	5eac <vPortFree>
}
    46a8:	3708      	adds	r7, #8
    46aa:	46bd      	mov	sp, r7
    46ac:	bd80      	pop	{r7, pc}
    46ae:	bf00      	nop

000046b0 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    46b0:	b580      	push	{r7, lr}
    46b2:	b084      	sub	sp, #16
    46b4:	af00      	add	r7, sp, #0
    46b6:	60f8      	str	r0, [r7, #12]
    46b8:	60b9      	str	r1, [r7, #8]
    46ba:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    46bc:	68fb      	ldr	r3, [r7, #12]
    46be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    46c0:	2b00      	cmp	r3, #0
    46c2:	d10c      	bne.n	46de <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    46c4:	68fb      	ldr	r3, [r7, #12]
    46c6:	681b      	ldr	r3, [r3, #0]
    46c8:	2b00      	cmp	r3, #0
    46ca:	d145      	bne.n	4758 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    46cc:	68fb      	ldr	r3, [r7, #12]
    46ce:	685b      	ldr	r3, [r3, #4]
    46d0:	4618      	mov	r0, r3
    46d2:	f001 f9bb 	bl	5a4c <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    46d6:	68fb      	ldr	r3, [r7, #12]
    46d8:	2200      	movs	r2, #0
    46da:	605a      	str	r2, [r3, #4]
    46dc:	e03c      	b.n	4758 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    46de:	687b      	ldr	r3, [r7, #4]
    46e0:	2b00      	cmp	r3, #0
    46e2:	d11a      	bne.n	471a <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    46e4:	68fb      	ldr	r3, [r7, #12]
    46e6:	689a      	ldr	r2, [r3, #8]
    46e8:	68fb      	ldr	r3, [r7, #12]
    46ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    46ec:	4610      	mov	r0, r2
    46ee:	68b9      	ldr	r1, [r7, #8]
    46f0:	461a      	mov	r2, r3
    46f2:	f013 ffcb 	bl	1868c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    46f6:	68fb      	ldr	r3, [r7, #12]
    46f8:	689a      	ldr	r2, [r3, #8]
    46fa:	68fb      	ldr	r3, [r7, #12]
    46fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    46fe:	441a      	add	r2, r3
    4700:	68fb      	ldr	r3, [r7, #12]
    4702:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    4704:	68fb      	ldr	r3, [r7, #12]
    4706:	689a      	ldr	r2, [r3, #8]
    4708:	68fb      	ldr	r3, [r7, #12]
    470a:	685b      	ldr	r3, [r3, #4]
    470c:	429a      	cmp	r2, r3
    470e:	d323      	bcc.n	4758 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    4710:	68fb      	ldr	r3, [r7, #12]
    4712:	681a      	ldr	r2, [r3, #0]
    4714:	68fb      	ldr	r3, [r7, #12]
    4716:	609a      	str	r2, [r3, #8]
    4718:	e01e      	b.n	4758 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    471a:	68fb      	ldr	r3, [r7, #12]
    471c:	68da      	ldr	r2, [r3, #12]
    471e:	68fb      	ldr	r3, [r7, #12]
    4720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4722:	4610      	mov	r0, r2
    4724:	68b9      	ldr	r1, [r7, #8]
    4726:	461a      	mov	r2, r3
    4728:	f013 ffb0 	bl	1868c <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    472c:	68fb      	ldr	r3, [r7, #12]
    472e:	68da      	ldr	r2, [r3, #12]
    4730:	68fb      	ldr	r3, [r7, #12]
    4732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4734:	425b      	negs	r3, r3
    4736:	441a      	add	r2, r3
    4738:	68fb      	ldr	r3, [r7, #12]
    473a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    473c:	68fb      	ldr	r3, [r7, #12]
    473e:	68da      	ldr	r2, [r3, #12]
    4740:	68fb      	ldr	r3, [r7, #12]
    4742:	681b      	ldr	r3, [r3, #0]
    4744:	429a      	cmp	r2, r3
    4746:	d207      	bcs.n	4758 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4748:	68fb      	ldr	r3, [r7, #12]
    474a:	685a      	ldr	r2, [r3, #4]
    474c:	68fb      	ldr	r3, [r7, #12]
    474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4750:	425b      	negs	r3, r3
    4752:	441a      	add	r2, r3
    4754:	68fb      	ldr	r3, [r7, #12]
    4756:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    4758:	68fb      	ldr	r3, [r7, #12]
    475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    475c:	1c5a      	adds	r2, r3, #1
    475e:	68fb      	ldr	r3, [r7, #12]
    4760:	639a      	str	r2, [r3, #56]	; 0x38
}
    4762:	3710      	adds	r7, #16
    4764:	46bd      	mov	sp, r7
    4766:	bd80      	pop	{r7, pc}

00004768 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    4768:	b580      	push	{r7, lr}
    476a:	b082      	sub	sp, #8
    476c:	af00      	add	r7, sp, #0
    476e:	6078      	str	r0, [r7, #4]
    4770:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    4772:	687b      	ldr	r3, [r7, #4]
    4774:	681b      	ldr	r3, [r3, #0]
    4776:	2b00      	cmp	r3, #0
    4778:	d019      	beq.n	47ae <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    477a:	687b      	ldr	r3, [r7, #4]
    477c:	68da      	ldr	r2, [r3, #12]
    477e:	687b      	ldr	r3, [r7, #4]
    4780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4782:	441a      	add	r2, r3
    4784:	687b      	ldr	r3, [r7, #4]
    4786:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    4788:	687b      	ldr	r3, [r7, #4]
    478a:	68da      	ldr	r2, [r3, #12]
    478c:	687b      	ldr	r3, [r7, #4]
    478e:	685b      	ldr	r3, [r3, #4]
    4790:	429a      	cmp	r2, r3
    4792:	d303      	bcc.n	479c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    4794:	687b      	ldr	r3, [r7, #4]
    4796:	681a      	ldr	r2, [r3, #0]
    4798:	687b      	ldr	r3, [r7, #4]
    479a:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    479c:	687b      	ldr	r3, [r7, #4]
    479e:	68da      	ldr	r2, [r3, #12]
    47a0:	687b      	ldr	r3, [r7, #4]
    47a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    47a4:	6838      	ldr	r0, [r7, #0]
    47a6:	4611      	mov	r1, r2
    47a8:	461a      	mov	r2, r3
    47aa:	f013 ff6f 	bl	1868c <memcpy>
	}
}
    47ae:	3708      	adds	r7, #8
    47b0:	46bd      	mov	sp, r7
    47b2:	bd80      	pop	{r7, pc}

000047b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    47b4:	b580      	push	{r7, lr}
    47b6:	b082      	sub	sp, #8
    47b8:	af00      	add	r7, sp, #0
    47ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    47bc:	f001 fa3a 	bl	5c34 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    47c0:	e014      	b.n	47ec <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    47c2:	687b      	ldr	r3, [r7, #4]
    47c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    47c6:	2b00      	cmp	r3, #0
    47c8:	d00f      	beq.n	47ea <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    47ca:	687b      	ldr	r3, [r7, #4]
    47cc:	3324      	adds	r3, #36	; 0x24
    47ce:	4618      	mov	r0, r3
    47d0:	f000 fea6 	bl	5520 <xTaskRemoveFromEventList>
    47d4:	4603      	mov	r3, r0
    47d6:	2b00      	cmp	r3, #0
    47d8:	d001      	beq.n	47de <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    47da:	f000 ff5d 	bl	5698 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    47de:	687b      	ldr	r3, [r7, #4]
    47e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    47e2:	1e5a      	subs	r2, r3, #1
    47e4:	687b      	ldr	r3, [r7, #4]
    47e6:	649a      	str	r2, [r3, #72]	; 0x48
    47e8:	e000      	b.n	47ec <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    47ea:	e003      	b.n	47f4 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    47ec:	687b      	ldr	r3, [r7, #4]
    47ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    47f0:	2b00      	cmp	r3, #0
    47f2:	dce6      	bgt.n	47c2 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    47f4:	687b      	ldr	r3, [r7, #4]
    47f6:	f04f 32ff 	mov.w	r2, #4294967295
    47fa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    47fc:	f001 fa30 	bl	5c60 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    4800:	f001 fa18 	bl	5c34 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4804:	e014      	b.n	4830 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4806:	687b      	ldr	r3, [r7, #4]
    4808:	691b      	ldr	r3, [r3, #16]
    480a:	2b00      	cmp	r3, #0
    480c:	d00f      	beq.n	482e <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    480e:	687b      	ldr	r3, [r7, #4]
    4810:	3310      	adds	r3, #16
    4812:	4618      	mov	r0, r3
    4814:	f000 fe84 	bl	5520 <xTaskRemoveFromEventList>
    4818:	4603      	mov	r3, r0
    481a:	2b00      	cmp	r3, #0
    481c:	d001      	beq.n	4822 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    481e:	f000 ff3b 	bl	5698 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    4822:	687b      	ldr	r3, [r7, #4]
    4824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4826:	1e5a      	subs	r2, r3, #1
    4828:	687b      	ldr	r3, [r7, #4]
    482a:	645a      	str	r2, [r3, #68]	; 0x44
    482c:	e000      	b.n	4830 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    482e:	e003      	b.n	4838 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4830:	687b      	ldr	r3, [r7, #4]
    4832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4834:	2b00      	cmp	r3, #0
    4836:	dce6      	bgt.n	4806 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4838:	687b      	ldr	r3, [r7, #4]
    483a:	f04f 32ff 	mov.w	r2, #4294967295
    483e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    4840:	f001 fa0e 	bl	5c60 <vPortExitCritical>
}
    4844:	3708      	adds	r7, #8
    4846:	46bd      	mov	sp, r7
    4848:	bd80      	pop	{r7, pc}
    484a:	bf00      	nop

0000484c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    484c:	b580      	push	{r7, lr}
    484e:	b084      	sub	sp, #16
    4850:	af00      	add	r7, sp, #0
    4852:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4854:	f001 f9ee 	bl	5c34 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4858:	687b      	ldr	r3, [r7, #4]
    485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    485c:	2b00      	cmp	r3, #0
    485e:	bf14      	ite	ne
    4860:	2300      	movne	r3, #0
    4862:	2301      	moveq	r3, #1
    4864:	b2db      	uxtb	r3, r3
    4866:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4868:	f001 f9fa 	bl	5c60 <vPortExitCritical>

	return xReturn;
    486c:	68fb      	ldr	r3, [r7, #12]
}
    486e:	4618      	mov	r0, r3
    4870:	3710      	adds	r7, #16
    4872:	46bd      	mov	sp, r7
    4874:	bd80      	pop	{r7, pc}
    4876:	bf00      	nop

00004878 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    4878:	b480      	push	{r7}
    487a:	b085      	sub	sp, #20
    487c:	af00      	add	r7, sp, #0
    487e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4880:	687b      	ldr	r3, [r7, #4]
    4882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4884:	2b00      	cmp	r3, #0
    4886:	bf14      	ite	ne
    4888:	2300      	movne	r3, #0
    488a:	2301      	moveq	r3, #1
    488c:	b2db      	uxtb	r3, r3
    488e:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4890:	68fb      	ldr	r3, [r7, #12]
}
    4892:	4618      	mov	r0, r3
    4894:	3714      	adds	r7, #20
    4896:	46bd      	mov	sp, r7
    4898:	f85d 7b04 	ldr.w	r7, [sp], #4
    489c:	4770      	bx	lr
    489e:	bf00      	nop

000048a0 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    48a0:	b580      	push	{r7, lr}
    48a2:	b084      	sub	sp, #16
    48a4:	af00      	add	r7, sp, #0
    48a6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    48a8:	f001 f9c4 	bl	5c34 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    48ac:	687b      	ldr	r3, [r7, #4]
    48ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    48b0:	687b      	ldr	r3, [r7, #4]
    48b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    48b4:	429a      	cmp	r2, r3
    48b6:	bf14      	ite	ne
    48b8:	2300      	movne	r3, #0
    48ba:	2301      	moveq	r3, #1
    48bc:	b2db      	uxtb	r3, r3
    48be:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    48c0:	f001 f9ce 	bl	5c60 <vPortExitCritical>

	return xReturn;
    48c4:	68fb      	ldr	r3, [r7, #12]
}
    48c6:	4618      	mov	r0, r3
    48c8:	3710      	adds	r7, #16
    48ca:	46bd      	mov	sp, r7
    48cc:	bd80      	pop	{r7, pc}
    48ce:	bf00      	nop

000048d0 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    48d0:	b480      	push	{r7}
    48d2:	b085      	sub	sp, #20
    48d4:	af00      	add	r7, sp, #0
    48d6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    48d8:	687b      	ldr	r3, [r7, #4]
    48da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    48dc:	687b      	ldr	r3, [r7, #4]
    48de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    48e0:	429a      	cmp	r2, r3
    48e2:	bf14      	ite	ne
    48e4:	2300      	movne	r3, #0
    48e6:	2301      	moveq	r3, #1
    48e8:	b2db      	uxtb	r3, r3
    48ea:	60fb      	str	r3, [r7, #12]

	return xReturn;
    48ec:	68fb      	ldr	r3, [r7, #12]
}
    48ee:	4618      	mov	r0, r3
    48f0:	3714      	adds	r7, #20
    48f2:	46bd      	mov	sp, r7
    48f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    48f8:	4770      	bx	lr
    48fa:	bf00      	nop

000048fc <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    48fc:	b580      	push	{r7, lr}
    48fe:	b08a      	sub	sp, #40	; 0x28
    4900:	af02      	add	r7, sp, #8
    4902:	60f8      	str	r0, [r7, #12]
    4904:	60b9      	str	r1, [r7, #8]
    4906:	603b      	str	r3, [r7, #0]
    4908:	4613      	mov	r3, r2
    490a:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    490c:	88fb      	ldrh	r3, [r7, #6]
    490e:	4618      	mov	r0, r3
    4910:	6b39      	ldr	r1, [r7, #48]	; 0x30
    4912:	f000 ffe5 	bl	58e0 <prvAllocateTCBAndStack>
    4916:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4918:	69bb      	ldr	r3, [r7, #24]
    491a:	2b00      	cmp	r3, #0
    491c:	f000 80a1 	beq.w	4a62 <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    4920:	69bb      	ldr	r3, [r7, #24]
    4922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4924:	88fb      	ldrh	r3, [r7, #6]
    4926:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    492a:	3b01      	subs	r3, #1
    492c:	009b      	lsls	r3, r3, #2
    492e:	4413      	add	r3, r2
    4930:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    4932:	697b      	ldr	r3, [r7, #20]
    4934:	f023 0307 	bic.w	r3, r3, #7
    4938:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    493a:	88fb      	ldrh	r3, [r7, #6]
    493c:	9300      	str	r3, [sp, #0]
    493e:	69b8      	ldr	r0, [r7, #24]
    4940:	68b9      	ldr	r1, [r7, #8]
    4942:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4946:	f000 febd 	bl	56c4 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    494a:	6978      	ldr	r0, [r7, #20]
    494c:	68f9      	ldr	r1, [r7, #12]
    494e:	683a      	ldr	r2, [r7, #0]
    4950:	f001 f8f2 	bl	5b38 <pxPortInitialiseStack>
    4954:	4602      	mov	r2, r0
    4956:	69bb      	ldr	r3, [r7, #24]
    4958:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    495a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    495c:	2b00      	cmp	r3, #0
    495e:	d002      	beq.n	4966 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4962:	69ba      	ldr	r2, [r7, #24]
    4964:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4966:	f001 f965 	bl	5c34 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    496a:	f640 6398 	movw	r3, #3736	; 0xe98
    496e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4972:	681b      	ldr	r3, [r3, #0]
    4974:	1c5a      	adds	r2, r3, #1
    4976:	f640 6398 	movw	r3, #3736	; 0xe98
    497a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    497e:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    4980:	f640 4394 	movw	r3, #3220	; 0xc94
    4984:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4988:	681b      	ldr	r3, [r3, #0]
    498a:	2b00      	cmp	r3, #0
    498c:	d10f      	bne.n	49ae <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    498e:	f640 4394 	movw	r3, #3220	; 0xc94
    4992:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4996:	69ba      	ldr	r2, [r7, #24]
    4998:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    499a:	f640 6398 	movw	r3, #3736	; 0xe98
    499e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49a2:	681b      	ldr	r3, [r3, #0]
    49a4:	2b01      	cmp	r3, #1
    49a6:	d118      	bne.n	49da <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    49a8:	f000 fec2 	bl	5730 <prvInitialiseTaskLists>
    49ac:	e015      	b.n	49da <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    49ae:	f640 63a8 	movw	r3, #3752	; 0xea8
    49b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49b6:	681b      	ldr	r3, [r3, #0]
    49b8:	2b00      	cmp	r3, #0
    49ba:	d10e      	bne.n	49da <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    49bc:	f640 4394 	movw	r3, #3220	; 0xc94
    49c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49c4:	681b      	ldr	r3, [r3, #0]
    49c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    49c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    49ca:	429a      	cmp	r2, r3
    49cc:	d805      	bhi.n	49da <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    49ce:	f640 4394 	movw	r3, #3220	; 0xc94
    49d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49d6:	69ba      	ldr	r2, [r7, #24]
    49d8:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    49da:	69bb      	ldr	r3, [r7, #24]
    49dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    49de:	f640 63a0 	movw	r3, #3744	; 0xea0
    49e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49e6:	681b      	ldr	r3, [r3, #0]
    49e8:	429a      	cmp	r2, r3
    49ea:	d906      	bls.n	49fa <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    49ec:	69bb      	ldr	r3, [r7, #24]
    49ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    49f0:	f640 63a0 	movw	r3, #3744	; 0xea0
    49f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49f8:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    49fa:	f640 63bc 	movw	r3, #3772	; 0xebc
    49fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a02:	681b      	ldr	r3, [r3, #0]
    4a04:	1c5a      	adds	r2, r3, #1
    4a06:	f640 63bc 	movw	r3, #3772	; 0xebc
    4a0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a0e:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    4a10:	69bb      	ldr	r3, [r7, #24]
    4a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a14:	f640 63a4 	movw	r3, #3748	; 0xea4
    4a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a1c:	681b      	ldr	r3, [r3, #0]
    4a1e:	429a      	cmp	r2, r3
    4a20:	d906      	bls.n	4a30 <xTaskGenericCreate+0x134>
    4a22:	69bb      	ldr	r3, [r7, #24]
    4a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a26:	f640 63a4 	movw	r3, #3748	; 0xea4
    4a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a2e:	601a      	str	r2, [r3, #0]
    4a30:	69bb      	ldr	r3, [r7, #24]
    4a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a34:	4613      	mov	r3, r2
    4a36:	009b      	lsls	r3, r3, #2
    4a38:	4413      	add	r3, r2
    4a3a:	009b      	lsls	r3, r3, #2
    4a3c:	f640 4298 	movw	r2, #3224	; 0xc98
    4a40:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4a44:	441a      	add	r2, r3
    4a46:	69bb      	ldr	r3, [r7, #24]
    4a48:	3304      	adds	r3, #4
    4a4a:	4610      	mov	r0, r2
    4a4c:	4619      	mov	r1, r3
    4a4e:	f7ff fadf 	bl	4010 <vListInsertEnd>

			xReturn = pdPASS;
    4a52:	2301      	movs	r3, #1
    4a54:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    4a56:	69b8      	ldr	r0, [r7, #24]
    4a58:	f012 fdc4 	bl	175e4 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    4a5c:	f001 f900 	bl	5c60 <vPortExitCritical>
    4a60:	e002      	b.n	4a68 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4a62:	f04f 33ff 	mov.w	r3, #4294967295
    4a66:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4a68:	69fb      	ldr	r3, [r7, #28]
    4a6a:	2b01      	cmp	r3, #1
    4a6c:	d111      	bne.n	4a92 <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    4a6e:	f640 63a8 	movw	r3, #3752	; 0xea8
    4a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a76:	681b      	ldr	r3, [r3, #0]
    4a78:	2b00      	cmp	r3, #0
    4a7a:	d00a      	beq.n	4a92 <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    4a7c:	f640 4394 	movw	r3, #3220	; 0xc94
    4a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a84:	681b      	ldr	r3, [r3, #0]
    4a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4a8a:	429a      	cmp	r2, r3
    4a8c:	d201      	bcs.n	4a92 <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    4a8e:	f001 f8c3 	bl	5c18 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    4a92:	69fb      	ldr	r3, [r7, #28]
}
    4a94:	4618      	mov	r0, r3
    4a96:	3720      	adds	r7, #32
    4a98:	46bd      	mov	sp, r7
    4a9a:	bd80      	pop	{r7, pc}

00004a9c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    4a9c:	b580      	push	{r7, lr}
    4a9e:	b084      	sub	sp, #16
    4aa0:	af00      	add	r7, sp, #0
    4aa2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4aa4:	f001 f8c6 	bl	5c34 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    4aa8:	f640 4394 	movw	r3, #3220	; 0xc94
    4aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ab0:	681b      	ldr	r3, [r3, #0]
    4ab2:	687a      	ldr	r2, [r7, #4]
    4ab4:	429a      	cmp	r2, r3
    4ab6:	d101      	bne.n	4abc <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    4ab8:	2300      	movs	r3, #0
    4aba:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    4abc:	687b      	ldr	r3, [r7, #4]
    4abe:	2b00      	cmp	r3, #0
    4ac0:	d105      	bne.n	4ace <vTaskDelete+0x32>
    4ac2:	f640 4394 	movw	r3, #3220	; 0xc94
    4ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aca:	681b      	ldr	r3, [r3, #0]
    4acc:	e000      	b.n	4ad0 <vTaskDelete+0x34>
    4ace:	687b      	ldr	r3, [r7, #4]
    4ad0:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4ad2:	68fb      	ldr	r3, [r7, #12]
    4ad4:	3304      	adds	r3, #4
    4ad6:	4618      	mov	r0, r3
    4ad8:	f7ff fafa 	bl	40d0 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4adc:	68fb      	ldr	r3, [r7, #12]
    4ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ae0:	2b00      	cmp	r3, #0
    4ae2:	d004      	beq.n	4aee <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4ae4:	68fb      	ldr	r3, [r7, #12]
    4ae6:	3318      	adds	r3, #24
    4ae8:	4618      	mov	r0, r3
    4aea:	f7ff faf1 	bl	40d0 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    4aee:	68fb      	ldr	r3, [r7, #12]
    4af0:	3304      	adds	r3, #4
    4af2:	f640 606c 	movw	r0, #3692	; 0xe6c
    4af6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4afa:	4619      	mov	r1, r3
    4afc:	f7ff fa88 	bl	4010 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4b00:	f640 6380 	movw	r3, #3712	; 0xe80
    4b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b08:	681b      	ldr	r3, [r3, #0]
    4b0a:	1c5a      	adds	r2, r3, #1
    4b0c:	f640 6380 	movw	r3, #3712	; 0xe80
    4b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b14:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4b16:	f640 63bc 	movw	r3, #3772	; 0xebc
    4b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b1e:	681b      	ldr	r3, [r3, #0]
    4b20:	1c5a      	adds	r2, r3, #1
    4b22:	f640 63bc 	movw	r3, #3772	; 0xebc
    4b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b2a:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4b2c:	f001 f898 	bl	5c60 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4b30:	f640 63a8 	movw	r3, #3752	; 0xea8
    4b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b38:	681b      	ldr	r3, [r3, #0]
    4b3a:	2b00      	cmp	r3, #0
    4b3c:	d004      	beq.n	4b48 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4b3e:	687b      	ldr	r3, [r7, #4]
    4b40:	2b00      	cmp	r3, #0
    4b42:	d101      	bne.n	4b48 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    4b44:	f001 f868 	bl	5c18 <vPortYieldFromISR>
			}
		}
	}
    4b48:	3710      	adds	r7, #16
    4b4a:	46bd      	mov	sp, r7
    4b4c:	bd80      	pop	{r7, pc}
    4b4e:	bf00      	nop

00004b50 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4b50:	b580      	push	{r7, lr}
    4b52:	b086      	sub	sp, #24
    4b54:	af00      	add	r7, sp, #0
    4b56:	6078      	str	r0, [r7, #4]
    4b58:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4b5a:	2300      	movs	r3, #0
    4b5c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    4b5e:	f000 fa8b 	bl	5078 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4b62:	687b      	ldr	r3, [r7, #4]
    4b64:	681a      	ldr	r2, [r3, #0]
    4b66:	683b      	ldr	r3, [r7, #0]
    4b68:	4413      	add	r3, r2
    4b6a:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    4b6c:	687b      	ldr	r3, [r7, #4]
    4b6e:	681a      	ldr	r2, [r3, #0]
    4b70:	f640 639c 	movw	r3, #3740	; 0xe9c
    4b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b78:	681b      	ldr	r3, [r3, #0]
    4b7a:	429a      	cmp	r2, r3
    4b7c:	d90f      	bls.n	4b9e <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    4b7e:	687b      	ldr	r3, [r7, #4]
    4b80:	681a      	ldr	r2, [r3, #0]
    4b82:	693b      	ldr	r3, [r7, #16]
    4b84:	429a      	cmp	r2, r3
    4b86:	d919      	bls.n	4bbc <vTaskDelayUntil+0x6c>
    4b88:	f640 639c 	movw	r3, #3740	; 0xe9c
    4b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b90:	681b      	ldr	r3, [r3, #0]
    4b92:	693a      	ldr	r2, [r7, #16]
    4b94:	429a      	cmp	r2, r3
    4b96:	d911      	bls.n	4bbc <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4b98:	2301      	movs	r3, #1
    4b9a:	617b      	str	r3, [r7, #20]
    4b9c:	e00e      	b.n	4bbc <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4b9e:	687b      	ldr	r3, [r7, #4]
    4ba0:	681a      	ldr	r2, [r3, #0]
    4ba2:	693b      	ldr	r3, [r7, #16]
    4ba4:	429a      	cmp	r2, r3
    4ba6:	d807      	bhi.n	4bb8 <vTaskDelayUntil+0x68>
    4ba8:	f640 639c 	movw	r3, #3740	; 0xe9c
    4bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bb0:	681b      	ldr	r3, [r3, #0]
    4bb2:	693a      	ldr	r2, [r7, #16]
    4bb4:	429a      	cmp	r2, r3
    4bb6:	d901      	bls.n	4bbc <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4bb8:	2301      	movs	r3, #1
    4bba:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4bbc:	687b      	ldr	r3, [r7, #4]
    4bbe:	693a      	ldr	r2, [r7, #16]
    4bc0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    4bc2:	697b      	ldr	r3, [r7, #20]
    4bc4:	2b00      	cmp	r3, #0
    4bc6:	d00b      	beq.n	4be0 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4bc8:	f640 4394 	movw	r3, #3220	; 0xc94
    4bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bd0:	681b      	ldr	r3, [r3, #0]
    4bd2:	3304      	adds	r3, #4
    4bd4:	4618      	mov	r0, r3
    4bd6:	f7ff fa7b 	bl	40d0 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4bda:	6938      	ldr	r0, [r7, #16]
    4bdc:	f000 fe3c 	bl	5858 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4be0:	f000 fa5c 	bl	509c <xTaskResumeAll>
    4be4:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4be6:	68fb      	ldr	r3, [r7, #12]
    4be8:	2b00      	cmp	r3, #0
    4bea:	d101      	bne.n	4bf0 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    4bec:	f001 f814 	bl	5c18 <vPortYieldFromISR>
		}
	}
    4bf0:	3718      	adds	r7, #24
    4bf2:	46bd      	mov	sp, r7
    4bf4:	bd80      	pop	{r7, pc}
    4bf6:	bf00      	nop

00004bf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4bf8:	b580      	push	{r7, lr}
    4bfa:	b084      	sub	sp, #16
    4bfc:	af00      	add	r7, sp, #0
    4bfe:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4c00:	2300      	movs	r3, #0
    4c02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4c04:	687b      	ldr	r3, [r7, #4]
    4c06:	2b00      	cmp	r3, #0
    4c08:	d018      	beq.n	4c3c <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4c0a:	f000 fa35 	bl	5078 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4c0e:	f640 639c 	movw	r3, #3740	; 0xe9c
    4c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c16:	681a      	ldr	r2, [r3, #0]
    4c18:	687b      	ldr	r3, [r7, #4]
    4c1a:	4413      	add	r3, r2
    4c1c:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4c1e:	f640 4394 	movw	r3, #3220	; 0xc94
    4c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c26:	681b      	ldr	r3, [r3, #0]
    4c28:	3304      	adds	r3, #4
    4c2a:	4618      	mov	r0, r3
    4c2c:	f7ff fa50 	bl	40d0 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4c30:	68b8      	ldr	r0, [r7, #8]
    4c32:	f000 fe11 	bl	5858 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4c36:	f000 fa31 	bl	509c <xTaskResumeAll>
    4c3a:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4c3c:	68fb      	ldr	r3, [r7, #12]
    4c3e:	2b00      	cmp	r3, #0
    4c40:	d101      	bne.n	4c46 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    4c42:	f000 ffe9 	bl	5c18 <vPortYieldFromISR>
		}
	}
    4c46:	3710      	adds	r7, #16
    4c48:	46bd      	mov	sp, r7
    4c4a:	bd80      	pop	{r7, pc}

00004c4c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4c4c:	b580      	push	{r7, lr}
    4c4e:	b084      	sub	sp, #16
    4c50:	af00      	add	r7, sp, #0
    4c52:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4c54:	f000 ffee 	bl	5c34 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4c58:	687b      	ldr	r3, [r7, #4]
    4c5a:	2b00      	cmp	r3, #0
    4c5c:	d105      	bne.n	4c6a <uxTaskPriorityGet+0x1e>
    4c5e:	f640 4394 	movw	r3, #3220	; 0xc94
    4c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c66:	681b      	ldr	r3, [r3, #0]
    4c68:	e000      	b.n	4c6c <uxTaskPriorityGet+0x20>
    4c6a:	687b      	ldr	r3, [r7, #4]
    4c6c:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    4c6e:	68fb      	ldr	r3, [r7, #12]
    4c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4c72:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    4c74:	f000 fff4 	bl	5c60 <vPortExitCritical>

		return uxReturn;
    4c78:	68bb      	ldr	r3, [r7, #8]
	}
    4c7a:	4618      	mov	r0, r3
    4c7c:	3710      	adds	r7, #16
    4c7e:	46bd      	mov	sp, r7
    4c80:	bd80      	pop	{r7, pc}
    4c82:	bf00      	nop

00004c84 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    4c84:	b580      	push	{r7, lr}
    4c86:	b086      	sub	sp, #24
    4c88:	af00      	add	r7, sp, #0
    4c8a:	6078      	str	r0, [r7, #4]
    4c8c:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4c8e:	2300      	movs	r3, #0
    4c90:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    4c92:	683b      	ldr	r3, [r7, #0]
    4c94:	2b13      	cmp	r3, #19
    4c96:	d901      	bls.n	4c9c <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4c98:	2313      	movs	r3, #19
    4c9a:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4c9c:	f000 ffca 	bl	5c34 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4ca0:	f640 4394 	movw	r3, #3220	; 0xc94
    4ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ca8:	681b      	ldr	r3, [r3, #0]
    4caa:	687a      	ldr	r2, [r7, #4]
    4cac:	429a      	cmp	r2, r3
    4cae:	d101      	bne.n	4cb4 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4cb0:	2300      	movs	r3, #0
    4cb2:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4cb4:	687b      	ldr	r3, [r7, #4]
    4cb6:	2b00      	cmp	r3, #0
    4cb8:	d105      	bne.n	4cc6 <vTaskPrioritySet+0x42>
    4cba:	f640 4394 	movw	r3, #3220	; 0xc94
    4cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cc2:	681b      	ldr	r3, [r3, #0]
    4cc4:	e000      	b.n	4cc8 <vTaskPrioritySet+0x44>
    4cc6:	687b      	ldr	r3, [r7, #4]
    4cc8:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    4cca:	693b      	ldr	r3, [r7, #16]
    4ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4cce:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    4cd0:	68fa      	ldr	r2, [r7, #12]
    4cd2:	683b      	ldr	r3, [r7, #0]
    4cd4:	429a      	cmp	r2, r3
    4cd6:	d058      	beq.n	4d8a <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4cd8:	683a      	ldr	r2, [r7, #0]
    4cda:	68fb      	ldr	r3, [r7, #12]
    4cdc:	429a      	cmp	r2, r3
    4cde:	d905      	bls.n	4cec <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4ce0:	687b      	ldr	r3, [r7, #4]
    4ce2:	2b00      	cmp	r3, #0
    4ce4:	d007      	beq.n	4cf6 <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    4ce6:	2301      	movs	r3, #1
    4ce8:	617b      	str	r3, [r7, #20]
    4cea:	e004      	b.n	4cf6 <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4cec:	687b      	ldr	r3, [r7, #4]
    4cee:	2b00      	cmp	r3, #0
    4cf0:	d101      	bne.n	4cf6 <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    4cf2:	2301      	movs	r3, #1
    4cf4:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4cf6:	693b      	ldr	r3, [r7, #16]
    4cf8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4cfa:	693b      	ldr	r3, [r7, #16]
    4cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4cfe:	429a      	cmp	r2, r3
    4d00:	d102      	bne.n	4d08 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    4d02:	693b      	ldr	r3, [r7, #16]
    4d04:	683a      	ldr	r2, [r7, #0]
    4d06:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4d08:	693b      	ldr	r3, [r7, #16]
    4d0a:	683a      	ldr	r2, [r7, #0]
    4d0c:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    4d0e:	683b      	ldr	r3, [r7, #0]
    4d10:	f1c3 0214 	rsb	r2, r3, #20
    4d14:	693b      	ldr	r3, [r7, #16]
    4d16:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4d18:	693b      	ldr	r3, [r7, #16]
    4d1a:	6959      	ldr	r1, [r3, #20]
    4d1c:	68fa      	ldr	r2, [r7, #12]
    4d1e:	4613      	mov	r3, r2
    4d20:	009b      	lsls	r3, r3, #2
    4d22:	4413      	add	r3, r2
    4d24:	009b      	lsls	r3, r3, #2
    4d26:	f640 4298 	movw	r2, #3224	; 0xc98
    4d2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4d2e:	4413      	add	r3, r2
    4d30:	4299      	cmp	r1, r3
    4d32:	d125      	bne.n	4d80 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4d34:	693b      	ldr	r3, [r7, #16]
    4d36:	3304      	adds	r3, #4
    4d38:	4618      	mov	r0, r3
    4d3a:	f7ff f9c9 	bl	40d0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4d3e:	693b      	ldr	r3, [r7, #16]
    4d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d42:	f640 63a4 	movw	r3, #3748	; 0xea4
    4d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d4a:	681b      	ldr	r3, [r3, #0]
    4d4c:	429a      	cmp	r2, r3
    4d4e:	d906      	bls.n	4d5e <vTaskPrioritySet+0xda>
    4d50:	693b      	ldr	r3, [r7, #16]
    4d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d54:	f640 63a4 	movw	r3, #3748	; 0xea4
    4d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d5c:	601a      	str	r2, [r3, #0]
    4d5e:	693b      	ldr	r3, [r7, #16]
    4d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d62:	4613      	mov	r3, r2
    4d64:	009b      	lsls	r3, r3, #2
    4d66:	4413      	add	r3, r2
    4d68:	009b      	lsls	r3, r3, #2
    4d6a:	f640 4298 	movw	r2, #3224	; 0xc98
    4d6e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4d72:	441a      	add	r2, r3
    4d74:	693b      	ldr	r3, [r7, #16]
    4d76:	3304      	adds	r3, #4
    4d78:	4610      	mov	r0, r2
    4d7a:	4619      	mov	r1, r3
    4d7c:	f7ff f948 	bl	4010 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4d80:	697b      	ldr	r3, [r7, #20]
    4d82:	2b01      	cmp	r3, #1
    4d84:	d101      	bne.n	4d8a <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    4d86:	f000 ff47 	bl	5c18 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4d8a:	f000 ff69 	bl	5c60 <vPortExitCritical>
	}
    4d8e:	3718      	adds	r7, #24
    4d90:	46bd      	mov	sp, r7
    4d92:	bd80      	pop	{r7, pc}

00004d94 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    4d94:	b580      	push	{r7, lr}
    4d96:	b084      	sub	sp, #16
    4d98:	af00      	add	r7, sp, #0
    4d9a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4d9c:	f000 ff4a 	bl	5c34 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4da0:	f640 4394 	movw	r3, #3220	; 0xc94
    4da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4da8:	681b      	ldr	r3, [r3, #0]
    4daa:	687a      	ldr	r2, [r7, #4]
    4dac:	429a      	cmp	r2, r3
    4dae:	d101      	bne.n	4db4 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4db0:	2300      	movs	r3, #0
    4db2:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4db4:	687b      	ldr	r3, [r7, #4]
    4db6:	2b00      	cmp	r3, #0
    4db8:	d105      	bne.n	4dc6 <vTaskSuspend+0x32>
    4dba:	f640 4394 	movw	r3, #3220	; 0xc94
    4dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dc2:	681b      	ldr	r3, [r3, #0]
    4dc4:	e000      	b.n	4dc8 <vTaskSuspend+0x34>
    4dc6:	687b      	ldr	r3, [r7, #4]
    4dc8:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4dca:	68fb      	ldr	r3, [r7, #12]
    4dcc:	3304      	adds	r3, #4
    4dce:	4618      	mov	r0, r3
    4dd0:	f7ff f97e 	bl	40d0 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4dd4:	68fb      	ldr	r3, [r7, #12]
    4dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4dd8:	2b00      	cmp	r3, #0
    4dda:	d004      	beq.n	4de6 <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4ddc:	68fb      	ldr	r3, [r7, #12]
    4dde:	3318      	adds	r3, #24
    4de0:	4618      	mov	r0, r3
    4de2:	f7ff f975 	bl	40d0 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4de6:	68fb      	ldr	r3, [r7, #12]
    4de8:	3304      	adds	r3, #4
    4dea:	f640 6084 	movw	r0, #3716	; 0xe84
    4dee:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4df2:	4619      	mov	r1, r3
    4df4:	f7ff f90c 	bl	4010 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4df8:	f000 ff32 	bl	5c60 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4dfc:	687b      	ldr	r3, [r7, #4]
    4dfe:	2b00      	cmp	r3, #0
    4e00:	d11e      	bne.n	4e40 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4e02:	f640 63a8 	movw	r3, #3752	; 0xea8
    4e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e0a:	681b      	ldr	r3, [r3, #0]
    4e0c:	2b00      	cmp	r3, #0
    4e0e:	d002      	beq.n	4e16 <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4e10:	f000 ff02 	bl	5c18 <vPortYieldFromISR>
    4e14:	e014      	b.n	4e40 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4e16:	f640 6384 	movw	r3, #3716	; 0xe84
    4e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e1e:	681a      	ldr	r2, [r3, #0]
    4e20:	f640 6398 	movw	r3, #3736	; 0xe98
    4e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e28:	681b      	ldr	r3, [r3, #0]
    4e2a:	429a      	cmp	r2, r3
    4e2c:	d106      	bne.n	4e3c <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4e2e:	f640 4394 	movw	r3, #3220	; 0xc94
    4e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e36:	2200      	movs	r2, #0
    4e38:	601a      	str	r2, [r3, #0]
    4e3a:	e001      	b.n	4e40 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    4e3c:	f000 fadc 	bl	53f8 <vTaskSwitchContext>
				}
			}
		}
	}
    4e40:	3710      	adds	r7, #16
    4e42:	46bd      	mov	sp, r7
    4e44:	bd80      	pop	{r7, pc}
    4e46:	bf00      	nop

00004e48 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4e48:	b480      	push	{r7}
    4e4a:	b085      	sub	sp, #20
    4e4c:	af00      	add	r7, sp, #0
    4e4e:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4e50:	2300      	movs	r3, #0
    4e52:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    4e54:	687b      	ldr	r3, [r7, #4]
    4e56:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4e58:	68bb      	ldr	r3, [r7, #8]
    4e5a:	695a      	ldr	r2, [r3, #20]
    4e5c:	f640 6384 	movw	r3, #3716	; 0xe84
    4e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e64:	429a      	cmp	r2, r3
    4e66:	d10d      	bne.n	4e84 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    4e68:	68bb      	ldr	r3, [r7, #8]
    4e6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4e6c:	f640 6358 	movw	r3, #3672	; 0xe58
    4e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e74:	429a      	cmp	r2, r3
    4e76:	d005      	beq.n	4e84 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4e78:	68bb      	ldr	r3, [r7, #8]
    4e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e7c:	2b00      	cmp	r3, #0
    4e7e:	d101      	bne.n	4e84 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    4e80:	2301      	movs	r3, #1
    4e82:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    4e84:	68fb      	ldr	r3, [r7, #12]
	}
    4e86:	4618      	mov	r0, r3
    4e88:	3714      	adds	r7, #20
    4e8a:	46bd      	mov	sp, r7
    4e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e90:	4770      	bx	lr
    4e92:	bf00      	nop

00004e94 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    4e94:	b580      	push	{r7, lr}
    4e96:	b084      	sub	sp, #16
    4e98:	af00      	add	r7, sp, #0
    4e9a:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    4e9c:	687b      	ldr	r3, [r7, #4]
    4e9e:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    4ea0:	68fb      	ldr	r3, [r7, #12]
    4ea2:	2b00      	cmp	r3, #0
    4ea4:	d043      	beq.n	4f2e <vTaskResume+0x9a>
    4ea6:	f640 4394 	movw	r3, #3220	; 0xc94
    4eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eae:	681b      	ldr	r3, [r3, #0]
    4eb0:	68fa      	ldr	r2, [r7, #12]
    4eb2:	429a      	cmp	r2, r3
    4eb4:	d03b      	beq.n	4f2e <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    4eb6:	f000 febd 	bl	5c34 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4eba:	68f8      	ldr	r0, [r7, #12]
    4ebc:	f7ff ffc4 	bl	4e48 <xTaskIsTaskSuspended>
    4ec0:	4603      	mov	r3, r0
    4ec2:	2b01      	cmp	r3, #1
    4ec4:	d131      	bne.n	4f2a <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4ec6:	68fb      	ldr	r3, [r7, #12]
    4ec8:	3304      	adds	r3, #4
    4eca:	4618      	mov	r0, r3
    4ecc:	f7ff f900 	bl	40d0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4ed0:	68fb      	ldr	r3, [r7, #12]
    4ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ed4:	f640 63a4 	movw	r3, #3748	; 0xea4
    4ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4edc:	681b      	ldr	r3, [r3, #0]
    4ede:	429a      	cmp	r2, r3
    4ee0:	d906      	bls.n	4ef0 <vTaskResume+0x5c>
    4ee2:	68fb      	ldr	r3, [r7, #12]
    4ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ee6:	f640 63a4 	movw	r3, #3748	; 0xea4
    4eea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eee:	601a      	str	r2, [r3, #0]
    4ef0:	68fb      	ldr	r3, [r7, #12]
    4ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ef4:	4613      	mov	r3, r2
    4ef6:	009b      	lsls	r3, r3, #2
    4ef8:	4413      	add	r3, r2
    4efa:	009b      	lsls	r3, r3, #2
    4efc:	f640 4298 	movw	r2, #3224	; 0xc98
    4f00:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4f04:	441a      	add	r2, r3
    4f06:	68fb      	ldr	r3, [r7, #12]
    4f08:	3304      	adds	r3, #4
    4f0a:	4610      	mov	r0, r2
    4f0c:	4619      	mov	r1, r3
    4f0e:	f7ff f87f 	bl	4010 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4f12:	68fb      	ldr	r3, [r7, #12]
    4f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f16:	f640 4394 	movw	r3, #3220	; 0xc94
    4f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f1e:	681b      	ldr	r3, [r3, #0]
    4f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4f22:	429a      	cmp	r2, r3
    4f24:	d301      	bcc.n	4f2a <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    4f26:	f000 fe77 	bl	5c18 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    4f2a:	f000 fe99 	bl	5c60 <vPortExitCritical>
		}
	}
    4f2e:	3710      	adds	r7, #16
    4f30:	46bd      	mov	sp, r7
    4f32:	bd80      	pop	{r7, pc}

00004f34 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    4f34:	b580      	push	{r7, lr}
    4f36:	b086      	sub	sp, #24
    4f38:	af00      	add	r7, sp, #0
    4f3a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    4f3c:	2300      	movs	r3, #0
    4f3e:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    4f40:	687b      	ldr	r3, [r7, #4]
    4f42:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4f44:	2300      	movs	r3, #0
    4f46:	60fb      	str	r3, [r7, #12]
    4f48:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4f4c:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4f50:	6938      	ldr	r0, [r7, #16]
    4f52:	f7ff ff79 	bl	4e48 <xTaskIsTaskSuspended>
    4f56:	4603      	mov	r3, r0
    4f58:	2b01      	cmp	r3, #1
    4f5a:	d144      	bne.n	4fe6 <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4f5c:	f640 63ac 	movw	r3, #3756	; 0xeac
    4f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f64:	681b      	ldr	r3, [r3, #0]
    4f66:	2b00      	cmp	r3, #0
    4f68:	d134      	bne.n	4fd4 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    4f6a:	693b      	ldr	r3, [r7, #16]
    4f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f6e:	f640 4394 	movw	r3, #3220	; 0xc94
    4f72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f76:	681b      	ldr	r3, [r3, #0]
    4f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4f7a:	429a      	cmp	r2, r3
    4f7c:	bf34      	ite	cc
    4f7e:	2300      	movcc	r3, #0
    4f80:	2301      	movcs	r3, #1
    4f82:	b2db      	uxtb	r3, r3
    4f84:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4f86:	693b      	ldr	r3, [r7, #16]
    4f88:	3304      	adds	r3, #4
    4f8a:	4618      	mov	r0, r3
    4f8c:	f7ff f8a0 	bl	40d0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4f90:	693b      	ldr	r3, [r7, #16]
    4f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f94:	f640 63a4 	movw	r3, #3748	; 0xea4
    4f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f9c:	681b      	ldr	r3, [r3, #0]
    4f9e:	429a      	cmp	r2, r3
    4fa0:	d906      	bls.n	4fb0 <xTaskResumeFromISR+0x7c>
    4fa2:	693b      	ldr	r3, [r7, #16]
    4fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4fa6:	f640 63a4 	movw	r3, #3748	; 0xea4
    4faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fae:	601a      	str	r2, [r3, #0]
    4fb0:	693b      	ldr	r3, [r7, #16]
    4fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4fb4:	4613      	mov	r3, r2
    4fb6:	009b      	lsls	r3, r3, #2
    4fb8:	4413      	add	r3, r2
    4fba:	009b      	lsls	r3, r3, #2
    4fbc:	f640 4298 	movw	r2, #3224	; 0xc98
    4fc0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4fc4:	441a      	add	r2, r3
    4fc6:	693b      	ldr	r3, [r7, #16]
    4fc8:	3304      	adds	r3, #4
    4fca:	4610      	mov	r0, r2
    4fcc:	4619      	mov	r1, r3
    4fce:	f7ff f81f 	bl	4010 <vListInsertEnd>
    4fd2:	e008      	b.n	4fe6 <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4fd4:	693b      	ldr	r3, [r7, #16]
    4fd6:	3318      	adds	r3, #24
    4fd8:	f640 6058 	movw	r0, #3672	; 0xe58
    4fdc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4fe0:	4619      	mov	r1, r3
    4fe2:	f7ff f815 	bl	4010 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4fe6:	f04f 0000 	mov.w	r0, #0
    4fea:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    4fee:	697b      	ldr	r3, [r7, #20]
	}
    4ff0:	4618      	mov	r0, r3
    4ff2:	3718      	adds	r7, #24
    4ff4:	46bd      	mov	sp, r7
    4ff6:	bd80      	pop	{r7, pc}

00004ff8 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    4ff8:	b580      	push	{r7, lr}
    4ffa:	b086      	sub	sp, #24
    4ffc:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    4ffe:	2300      	movs	r3, #0
    5000:	9300      	str	r3, [sp, #0]
    5002:	2300      	movs	r3, #0
    5004:	9301      	str	r3, [sp, #4]
    5006:	2300      	movs	r3, #0
    5008:	9302      	str	r3, [sp, #8]
    500a:	2300      	movs	r3, #0
    500c:	9303      	str	r3, [sp, #12]
    500e:	f245 60b1 	movw	r0, #22193	; 0x56b1
    5012:	f2c0 0000 	movt	r0, #0
    5016:	f648 1130 	movw	r1, #35120	; 0x8930
    501a:	f2c0 0101 	movt	r1, #1
    501e:	2280      	movs	r2, #128	; 0x80
    5020:	2300      	movs	r3, #0
    5022:	f7ff fc6b 	bl	48fc <xTaskGenericCreate>
    5026:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    5028:	687b      	ldr	r3, [r7, #4]
    502a:	2b01      	cmp	r3, #1
    502c:	d111      	bne.n	5052 <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    502e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5032:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    5036:	f640 63a8 	movw	r3, #3752	; 0xea8
    503a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    503e:	2201      	movs	r2, #1
    5040:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    5042:	f640 639c 	movw	r3, #3740	; 0xe9c
    5046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    504a:	2200      	movs	r2, #0
    504c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    504e:	f000 fdb5 	bl	5bbc <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    5052:	3708      	adds	r7, #8
    5054:	46bd      	mov	sp, r7
    5056:	bd80      	pop	{r7, pc}

00005058 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    5058:	b580      	push	{r7, lr}
    505a:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    505c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5060:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    5064:	f640 63a8 	movw	r3, #3752	; 0xea8
    5068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    506c:	2200      	movs	r2, #0
    506e:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    5070:	f000 fdcc 	bl	5c0c <vPortEndScheduler>
}
    5074:	bd80      	pop	{r7, pc}
    5076:	bf00      	nop

00005078 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    5078:	b480      	push	{r7}
    507a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    507c:	f640 63ac 	movw	r3, #3756	; 0xeac
    5080:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5084:	681b      	ldr	r3, [r3, #0]
    5086:	1c5a      	adds	r2, r3, #1
    5088:	f640 63ac 	movw	r3, #3756	; 0xeac
    508c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5090:	601a      	str	r2, [r3, #0]
}
    5092:	46bd      	mov	sp, r7
    5094:	f85d 7b04 	ldr.w	r7, [sp], #4
    5098:	4770      	bx	lr
    509a:	bf00      	nop

0000509c <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    509c:	b590      	push	{r4, r7, lr}
    509e:	b083      	sub	sp, #12
    50a0:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    50a2:	2300      	movs	r3, #0
    50a4:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    50a6:	f000 fdc5 	bl	5c34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    50aa:	f640 63ac 	movw	r3, #3756	; 0xeac
    50ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50b2:	681b      	ldr	r3, [r3, #0]
    50b4:	1e5a      	subs	r2, r3, #1
    50b6:	f640 63ac 	movw	r3, #3756	; 0xeac
    50ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50be:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    50c0:	f640 63ac 	movw	r3, #3756	; 0xeac
    50c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50c8:	681b      	ldr	r3, [r3, #0]
    50ca:	2b00      	cmp	r3, #0
    50cc:	d177      	bne.n	51be <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    50ce:	f640 6398 	movw	r3, #3736	; 0xe98
    50d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50d6:	681b      	ldr	r3, [r3, #0]
    50d8:	2b00      	cmp	r3, #0
    50da:	d070      	beq.n	51be <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    50dc:	2300      	movs	r3, #0
    50de:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    50e0:	e036      	b.n	5150 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    50e2:	f640 6358 	movw	r3, #3672	; 0xe58
    50e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50ea:	68db      	ldr	r3, [r3, #12]
    50ec:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    50ee:	f104 0318 	add.w	r3, r4, #24
    50f2:	4618      	mov	r0, r3
    50f4:	f7fe ffec 	bl	40d0 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    50f8:	1d23      	adds	r3, r4, #4
    50fa:	4618      	mov	r0, r3
    50fc:	f7fe ffe8 	bl	40d0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5100:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5102:	f640 63a4 	movw	r3, #3748	; 0xea4
    5106:	f2c2 0300 	movt	r3, #8192	; 0x2000
    510a:	681b      	ldr	r3, [r3, #0]
    510c:	429a      	cmp	r2, r3
    510e:	d905      	bls.n	511c <xTaskResumeAll+0x80>
    5110:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5112:	f640 63a4 	movw	r3, #3748	; 0xea4
    5116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    511a:	601a      	str	r2, [r3, #0]
    511c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    511e:	4613      	mov	r3, r2
    5120:	009b      	lsls	r3, r3, #2
    5122:	4413      	add	r3, r2
    5124:	009b      	lsls	r3, r3, #2
    5126:	f640 4298 	movw	r2, #3224	; 0xc98
    512a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    512e:	441a      	add	r2, r3
    5130:	1d23      	adds	r3, r4, #4
    5132:	4610      	mov	r0, r2
    5134:	4619      	mov	r1, r3
    5136:	f7fe ff6b 	bl	4010 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    513a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    513c:	f640 4394 	movw	r3, #3220	; 0xc94
    5140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5144:	681b      	ldr	r3, [r3, #0]
    5146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5148:	429a      	cmp	r2, r3
    514a:	d301      	bcc.n	5150 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    514c:	2301      	movs	r3, #1
    514e:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    5150:	f640 6358 	movw	r3, #3672	; 0xe58
    5154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5158:	681b      	ldr	r3, [r3, #0]
    515a:	2b00      	cmp	r3, #0
    515c:	d1c1      	bne.n	50e2 <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    515e:	f640 63b0 	movw	r3, #3760	; 0xeb0
    5162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5166:	681b      	ldr	r3, [r3, #0]
    5168:	2b00      	cmp	r3, #0
    516a:	d014      	beq.n	5196 <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    516c:	e00c      	b.n	5188 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    516e:	f000 f865 	bl	523c <vTaskIncrementTick>
						--uxMissedTicks;
    5172:	f640 63b0 	movw	r3, #3760	; 0xeb0
    5176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    517a:	681b      	ldr	r3, [r3, #0]
    517c:	1e5a      	subs	r2, r3, #1
    517e:	f640 63b0 	movw	r3, #3760	; 0xeb0
    5182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5186:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5188:	f640 63b0 	movw	r3, #3760	; 0xeb0
    518c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5190:	681b      	ldr	r3, [r3, #0]
    5192:	2b00      	cmp	r3, #0
    5194:	d1eb      	bne.n	516e <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    5196:	683b      	ldr	r3, [r7, #0]
    5198:	2b01      	cmp	r3, #1
    519a:	d006      	beq.n	51aa <xTaskResumeAll+0x10e>
    519c:	f640 63b4 	movw	r3, #3764	; 0xeb4
    51a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51a4:	681b      	ldr	r3, [r3, #0]
    51a6:	2b01      	cmp	r3, #1
    51a8:	d109      	bne.n	51be <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    51aa:	2301      	movs	r3, #1
    51ac:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    51ae:	f640 63b4 	movw	r3, #3764	; 0xeb4
    51b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51b6:	2200      	movs	r2, #0
    51b8:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    51ba:	f000 fd2d 	bl	5c18 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    51be:	f000 fd4f 	bl	5c60 <vPortExitCritical>

	return xAlreadyYielded;
    51c2:	687b      	ldr	r3, [r7, #4]
}
    51c4:	4618      	mov	r0, r3
    51c6:	370c      	adds	r7, #12
    51c8:	46bd      	mov	sp, r7
    51ca:	bd90      	pop	{r4, r7, pc}

000051cc <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    51cc:	b580      	push	{r7, lr}
    51ce:	b082      	sub	sp, #8
    51d0:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    51d2:	f000 fd2f 	bl	5c34 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    51d6:	f640 639c 	movw	r3, #3740	; 0xe9c
    51da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51de:	681b      	ldr	r3, [r3, #0]
    51e0:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    51e2:	f000 fd3d 	bl	5c60 <vPortExitCritical>

	return xTicks;
    51e6:	687b      	ldr	r3, [r7, #4]
}
    51e8:	4618      	mov	r0, r3
    51ea:	3708      	adds	r7, #8
    51ec:	46bd      	mov	sp, r7
    51ee:	bd80      	pop	{r7, pc}

000051f0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    51f0:	b480      	push	{r7}
    51f2:	b083      	sub	sp, #12
    51f4:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    51f6:	2300      	movs	r3, #0
    51f8:	607b      	str	r3, [r7, #4]
    51fa:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    51fe:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    5202:	f640 639c 	movw	r3, #3740	; 0xe9c
    5206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    520a:	681b      	ldr	r3, [r3, #0]
    520c:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    520e:	f04f 0000 	mov.w	r0, #0
    5212:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    5216:	683b      	ldr	r3, [r7, #0]
}
    5218:	4618      	mov	r0, r3
    521a:	370c      	adds	r7, #12
    521c:	46bd      	mov	sp, r7
    521e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5222:	4770      	bx	lr

00005224 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    5224:	b480      	push	{r7}
    5226:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    5228:	f640 6398 	movw	r3, #3736	; 0xe98
    522c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5230:	681b      	ldr	r3, [r3, #0]
}
    5232:	4618      	mov	r0, r3
    5234:	46bd      	mov	sp, r7
    5236:	f85d 7b04 	ldr.w	r7, [sp], #4
    523a:	4770      	bx	lr

0000523c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    523c:	b580      	push	{r7, lr}
    523e:	b084      	sub	sp, #16
    5240:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5242:	f640 63ac 	movw	r3, #3756	; 0xeac
    5246:	f2c2 0300 	movt	r3, #8192	; 0x2000
    524a:	681b      	ldr	r3, [r3, #0]
    524c:	2b00      	cmp	r3, #0
    524e:	f040 80b9 	bne.w	53c4 <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    5252:	f640 639c 	movw	r3, #3740	; 0xe9c
    5256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    525a:	681b      	ldr	r3, [r3, #0]
    525c:	1c5a      	adds	r2, r3, #1
    525e:	f640 639c 	movw	r3, #3740	; 0xe9c
    5262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5266:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    5268:	f640 639c 	movw	r3, #3740	; 0xe9c
    526c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5270:	681b      	ldr	r3, [r3, #0]
    5272:	2b00      	cmp	r3, #0
    5274:	d13f      	bne.n	52f6 <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    5276:	f640 6350 	movw	r3, #3664	; 0xe50
    527a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    527e:	681b      	ldr	r3, [r3, #0]
    5280:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    5282:	f640 6354 	movw	r3, #3668	; 0xe54
    5286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    528a:	681a      	ldr	r2, [r3, #0]
    528c:	f640 6350 	movw	r3, #3664	; 0xe50
    5290:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5294:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    5296:	f640 6354 	movw	r3, #3668	; 0xe54
    529a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    529e:	68fa      	ldr	r2, [r7, #12]
    52a0:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    52a2:	f640 63b8 	movw	r3, #3768	; 0xeb8
    52a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52aa:	681b      	ldr	r3, [r3, #0]
    52ac:	1c5a      	adds	r2, r3, #1
    52ae:	f640 63b8 	movw	r3, #3768	; 0xeb8
    52b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52b6:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    52b8:	f640 6350 	movw	r3, #3664	; 0xe50
    52bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52c0:	681b      	ldr	r3, [r3, #0]
    52c2:	681b      	ldr	r3, [r3, #0]
    52c4:	2b00      	cmp	r3, #0
    52c6:	d107      	bne.n	52d8 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    52c8:	f240 33e0 	movw	r3, #992	; 0x3e0
    52cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52d0:	f04f 32ff 	mov.w	r2, #4294967295
    52d4:	601a      	str	r2, [r3, #0]
    52d6:	e00e      	b.n	52f6 <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    52d8:	f640 6350 	movw	r3, #3664	; 0xe50
    52dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52e0:	681b      	ldr	r3, [r3, #0]
    52e2:	68db      	ldr	r3, [r3, #12]
    52e4:	68db      	ldr	r3, [r3, #12]
    52e6:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    52e8:	68bb      	ldr	r3, [r7, #8]
    52ea:	685a      	ldr	r2, [r3, #4]
    52ec:	f240 33e0 	movw	r3, #992	; 0x3e0
    52f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52f4:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    52f6:	f640 639c 	movw	r3, #3740	; 0xe9c
    52fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52fe:	681a      	ldr	r2, [r3, #0]
    5300:	f240 33e0 	movw	r3, #992	; 0x3e0
    5304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5308:	681b      	ldr	r3, [r3, #0]
    530a:	429a      	cmp	r2, r3
    530c:	d359      	bcc.n	53c2 <vTaskIncrementTick+0x186>
    530e:	f640 6350 	movw	r3, #3664	; 0xe50
    5312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5316:	681b      	ldr	r3, [r3, #0]
    5318:	681b      	ldr	r3, [r3, #0]
    531a:	2b00      	cmp	r3, #0
    531c:	d107      	bne.n	532e <vTaskIncrementTick+0xf2>
    531e:	f240 33e0 	movw	r3, #992	; 0x3e0
    5322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5326:	f04f 32ff 	mov.w	r2, #4294967295
    532a:	601a      	str	r2, [r3, #0]
    532c:	e049      	b.n	53c2 <vTaskIncrementTick+0x186>
    532e:	f640 6350 	movw	r3, #3664	; 0xe50
    5332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5336:	681b      	ldr	r3, [r3, #0]
    5338:	68db      	ldr	r3, [r3, #12]
    533a:	68db      	ldr	r3, [r3, #12]
    533c:	60bb      	str	r3, [r7, #8]
    533e:	68bb      	ldr	r3, [r7, #8]
    5340:	685b      	ldr	r3, [r3, #4]
    5342:	607b      	str	r3, [r7, #4]
    5344:	f640 639c 	movw	r3, #3740	; 0xe9c
    5348:	f2c2 0300 	movt	r3, #8192	; 0x2000
    534c:	681a      	ldr	r2, [r3, #0]
    534e:	687b      	ldr	r3, [r7, #4]
    5350:	429a      	cmp	r2, r3
    5352:	d206      	bcs.n	5362 <vTaskIncrementTick+0x126>
    5354:	f240 33e0 	movw	r3, #992	; 0x3e0
    5358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    535c:	687a      	ldr	r2, [r7, #4]
    535e:	601a      	str	r2, [r3, #0]
    5360:	e02f      	b.n	53c2 <vTaskIncrementTick+0x186>
    5362:	68bb      	ldr	r3, [r7, #8]
    5364:	3304      	adds	r3, #4
    5366:	4618      	mov	r0, r3
    5368:	f7fe feb2 	bl	40d0 <vListRemove>
    536c:	68bb      	ldr	r3, [r7, #8]
    536e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5370:	2b00      	cmp	r3, #0
    5372:	d004      	beq.n	537e <vTaskIncrementTick+0x142>
    5374:	68bb      	ldr	r3, [r7, #8]
    5376:	3318      	adds	r3, #24
    5378:	4618      	mov	r0, r3
    537a:	f7fe fea9 	bl	40d0 <vListRemove>
    537e:	68bb      	ldr	r3, [r7, #8]
    5380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5382:	f640 63a4 	movw	r3, #3748	; 0xea4
    5386:	f2c2 0300 	movt	r3, #8192	; 0x2000
    538a:	681b      	ldr	r3, [r3, #0]
    538c:	429a      	cmp	r2, r3
    538e:	d906      	bls.n	539e <vTaskIncrementTick+0x162>
    5390:	68bb      	ldr	r3, [r7, #8]
    5392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5394:	f640 63a4 	movw	r3, #3748	; 0xea4
    5398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    539c:	601a      	str	r2, [r3, #0]
    539e:	68bb      	ldr	r3, [r7, #8]
    53a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    53a2:	4613      	mov	r3, r2
    53a4:	009b      	lsls	r3, r3, #2
    53a6:	4413      	add	r3, r2
    53a8:	009b      	lsls	r3, r3, #2
    53aa:	f640 4298 	movw	r2, #3224	; 0xc98
    53ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
    53b2:	441a      	add	r2, r3
    53b4:	68bb      	ldr	r3, [r7, #8]
    53b6:	3304      	adds	r3, #4
    53b8:	4610      	mov	r0, r2
    53ba:	4619      	mov	r1, r3
    53bc:	f7fe fe28 	bl	4010 <vListInsertEnd>
    53c0:	e7a5      	b.n	530e <vTaskIncrementTick+0xd2>
    53c2:	e00c      	b.n	53de <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    53c4:	f640 63b0 	movw	r3, #3760	; 0xeb0
    53c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53cc:	681b      	ldr	r3, [r3, #0]
    53ce:	1c5a      	adds	r2, r3, #1
    53d0:	f640 63b0 	movw	r3, #3760	; 0xeb0
    53d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53d8:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    53da:	f012 f915 	bl	17608 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    53de:	f640 63b0 	movw	r3, #3760	; 0xeb0
    53e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53e6:	681b      	ldr	r3, [r3, #0]
    53e8:	2b00      	cmp	r3, #0
    53ea:	d101      	bne.n	53f0 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    53ec:	f012 f90c 	bl	17608 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    53f0:	3710      	adds	r7, #16
    53f2:	46bd      	mov	sp, r7
    53f4:	bd80      	pop	{r7, pc}
    53f6:	bf00      	nop

000053f8 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    53f8:	b580      	push	{r7, lr}
    53fa:	b082      	sub	sp, #8
    53fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    53fe:	f640 63ac 	movw	r3, #3756	; 0xeac
    5402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5406:	681b      	ldr	r3, [r3, #0]
    5408:	2b00      	cmp	r3, #0
    540a:	d006      	beq.n	541a <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    540c:	f640 63b4 	movw	r3, #3764	; 0xeb4
    5410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5414:	2201      	movs	r2, #1
    5416:	601a      	str	r2, [r3, #0]
    5418:	e047      	b.n	54aa <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    541a:	f012 f8ef 	bl	175fc <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    541e:	e00a      	b.n	5436 <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    5420:	f640 63a4 	movw	r3, #3748	; 0xea4
    5424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5428:	681b      	ldr	r3, [r3, #0]
    542a:	1e5a      	subs	r2, r3, #1
    542c:	f640 63a4 	movw	r3, #3748	; 0xea4
    5430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5434:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    5436:	f640 63a4 	movw	r3, #3748	; 0xea4
    543a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    543e:	6819      	ldr	r1, [r3, #0]
    5440:	f640 4298 	movw	r2, #3224	; 0xc98
    5444:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5448:	460b      	mov	r3, r1
    544a:	009b      	lsls	r3, r3, #2
    544c:	440b      	add	r3, r1
    544e:	009b      	lsls	r3, r3, #2
    5450:	4413      	add	r3, r2
    5452:	681b      	ldr	r3, [r3, #0]
    5454:	2b00      	cmp	r3, #0
    5456:	d0e3      	beq.n	5420 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    5458:	f640 63a4 	movw	r3, #3748	; 0xea4
    545c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5460:	681a      	ldr	r2, [r3, #0]
    5462:	4613      	mov	r3, r2
    5464:	009b      	lsls	r3, r3, #2
    5466:	4413      	add	r3, r2
    5468:	009b      	lsls	r3, r3, #2
    546a:	f640 4298 	movw	r2, #3224	; 0xc98
    546e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5472:	4413      	add	r3, r2
    5474:	607b      	str	r3, [r7, #4]
    5476:	687b      	ldr	r3, [r7, #4]
    5478:	685b      	ldr	r3, [r3, #4]
    547a:	685a      	ldr	r2, [r3, #4]
    547c:	687b      	ldr	r3, [r7, #4]
    547e:	605a      	str	r2, [r3, #4]
    5480:	687b      	ldr	r3, [r7, #4]
    5482:	685a      	ldr	r2, [r3, #4]
    5484:	687b      	ldr	r3, [r7, #4]
    5486:	3308      	adds	r3, #8
    5488:	429a      	cmp	r2, r3
    548a:	d104      	bne.n	5496 <vTaskSwitchContext+0x9e>
    548c:	687b      	ldr	r3, [r7, #4]
    548e:	685b      	ldr	r3, [r3, #4]
    5490:	685a      	ldr	r2, [r3, #4]
    5492:	687b      	ldr	r3, [r7, #4]
    5494:	605a      	str	r2, [r3, #4]
    5496:	687b      	ldr	r3, [r7, #4]
    5498:	685b      	ldr	r3, [r3, #4]
    549a:	68da      	ldr	r2, [r3, #12]
    549c:	f640 4394 	movw	r3, #3220	; 0xc94
    54a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54a4:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    54a6:	f012 f8a3 	bl	175f0 <myTraceSwitchedIn>
	}
}
    54aa:	3708      	adds	r7, #8
    54ac:	46bd      	mov	sp, r7
    54ae:	bd80      	pop	{r7, pc}

000054b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    54b0:	b580      	push	{r7, lr}
    54b2:	b084      	sub	sp, #16
    54b4:	af00      	add	r7, sp, #0
    54b6:	6078      	str	r0, [r7, #4]
    54b8:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    54ba:	f640 4394 	movw	r3, #3220	; 0xc94
    54be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54c2:	681b      	ldr	r3, [r3, #0]
    54c4:	3318      	adds	r3, #24
    54c6:	6878      	ldr	r0, [r7, #4]
    54c8:	4619      	mov	r1, r3
    54ca:	f7fe fdc9 	bl	4060 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    54ce:	f640 4394 	movw	r3, #3220	; 0xc94
    54d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54d6:	681b      	ldr	r3, [r3, #0]
    54d8:	3304      	adds	r3, #4
    54da:	4618      	mov	r0, r3
    54dc:	f7fe fdf8 	bl	40d0 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    54e0:	683b      	ldr	r3, [r7, #0]
    54e2:	f1b3 3fff 	cmp.w	r3, #4294967295
    54e6:	d10d      	bne.n	5504 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    54e8:	f640 4394 	movw	r3, #3220	; 0xc94
    54ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54f0:	681b      	ldr	r3, [r3, #0]
    54f2:	3304      	adds	r3, #4
    54f4:	f640 6084 	movw	r0, #3716	; 0xe84
    54f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    54fc:	4619      	mov	r1, r3
    54fe:	f7fe fd87 	bl	4010 <vListInsertEnd>
    5502:	e00a      	b.n	551a <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    5504:	f640 639c 	movw	r3, #3740	; 0xe9c
    5508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    550c:	681a      	ldr	r2, [r3, #0]
    550e:	683b      	ldr	r3, [r7, #0]
    5510:	4413      	add	r3, r2
    5512:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    5514:	68f8      	ldr	r0, [r7, #12]
    5516:	f000 f99f 	bl	5858 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    551a:	3710      	adds	r7, #16
    551c:	46bd      	mov	sp, r7
    551e:	bd80      	pop	{r7, pc}

00005520 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    5520:	b580      	push	{r7, lr}
    5522:	b084      	sub	sp, #16
    5524:	af00      	add	r7, sp, #0
    5526:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5528:	687b      	ldr	r3, [r7, #4]
    552a:	68db      	ldr	r3, [r3, #12]
    552c:	68db      	ldr	r3, [r3, #12]
    552e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    5530:	68bb      	ldr	r3, [r7, #8]
    5532:	3318      	adds	r3, #24
    5534:	4618      	mov	r0, r3
    5536:	f7fe fdcb 	bl	40d0 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    553a:	f640 63ac 	movw	r3, #3756	; 0xeac
    553e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5542:	681b      	ldr	r3, [r3, #0]
    5544:	2b00      	cmp	r3, #0
    5546:	d126      	bne.n	5596 <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    5548:	68bb      	ldr	r3, [r7, #8]
    554a:	3304      	adds	r3, #4
    554c:	4618      	mov	r0, r3
    554e:	f7fe fdbf 	bl	40d0 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    5552:	68bb      	ldr	r3, [r7, #8]
    5554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5556:	f640 63a4 	movw	r3, #3748	; 0xea4
    555a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    555e:	681b      	ldr	r3, [r3, #0]
    5560:	429a      	cmp	r2, r3
    5562:	d906      	bls.n	5572 <xTaskRemoveFromEventList+0x52>
    5564:	68bb      	ldr	r3, [r7, #8]
    5566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5568:	f640 63a4 	movw	r3, #3748	; 0xea4
    556c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5570:	601a      	str	r2, [r3, #0]
    5572:	68bb      	ldr	r3, [r7, #8]
    5574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5576:	4613      	mov	r3, r2
    5578:	009b      	lsls	r3, r3, #2
    557a:	4413      	add	r3, r2
    557c:	009b      	lsls	r3, r3, #2
    557e:	f640 4298 	movw	r2, #3224	; 0xc98
    5582:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5586:	441a      	add	r2, r3
    5588:	68bb      	ldr	r3, [r7, #8]
    558a:	3304      	adds	r3, #4
    558c:	4610      	mov	r0, r2
    558e:	4619      	mov	r1, r3
    5590:	f7fe fd3e 	bl	4010 <vListInsertEnd>
    5594:	e008      	b.n	55a8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    5596:	68bb      	ldr	r3, [r7, #8]
    5598:	3318      	adds	r3, #24
    559a:	f640 6058 	movw	r0, #3672	; 0xe58
    559e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    55a2:	4619      	mov	r1, r3
    55a4:	f7fe fd34 	bl	4010 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    55a8:	68bb      	ldr	r3, [r7, #8]
    55aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55ac:	f640 4394 	movw	r3, #3220	; 0xc94
    55b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55b4:	681b      	ldr	r3, [r3, #0]
    55b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    55b8:	429a      	cmp	r2, r3
    55ba:	d302      	bcc.n	55c2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    55bc:	2301      	movs	r3, #1
    55be:	60fb      	str	r3, [r7, #12]
    55c0:	e001      	b.n	55c6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    55c2:	2300      	movs	r3, #0
    55c4:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    55c6:	68fb      	ldr	r3, [r7, #12]
}
    55c8:	4618      	mov	r0, r3
    55ca:	3710      	adds	r7, #16
    55cc:	46bd      	mov	sp, r7
    55ce:	bd80      	pop	{r7, pc}

000055d0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    55d0:	b480      	push	{r7}
    55d2:	b083      	sub	sp, #12
    55d4:	af00      	add	r7, sp, #0
    55d6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    55d8:	f640 63b8 	movw	r3, #3768	; 0xeb8
    55dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55e0:	681a      	ldr	r2, [r3, #0]
    55e2:	687b      	ldr	r3, [r7, #4]
    55e4:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    55e6:	f640 639c 	movw	r3, #3740	; 0xe9c
    55ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55ee:	681a      	ldr	r2, [r3, #0]
    55f0:	687b      	ldr	r3, [r7, #4]
    55f2:	605a      	str	r2, [r3, #4]
}
    55f4:	370c      	adds	r7, #12
    55f6:	46bd      	mov	sp, r7
    55f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    55fc:	4770      	bx	lr
    55fe:	bf00      	nop

00005600 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    5600:	b580      	push	{r7, lr}
    5602:	b084      	sub	sp, #16
    5604:	af00      	add	r7, sp, #0
    5606:	6078      	str	r0, [r7, #4]
    5608:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    560a:	f000 fb13 	bl	5c34 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    560e:	683b      	ldr	r3, [r7, #0]
    5610:	681b      	ldr	r3, [r3, #0]
    5612:	f1b3 3fff 	cmp.w	r3, #4294967295
    5616:	d102      	bne.n	561e <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    5618:	2300      	movs	r3, #0
    561a:	60fb      	str	r3, [r7, #12]
    561c:	e035      	b.n	568a <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    561e:	687b      	ldr	r3, [r7, #4]
    5620:	681a      	ldr	r2, [r3, #0]
    5622:	f640 63b8 	movw	r3, #3768	; 0xeb8
    5626:	f2c2 0300 	movt	r3, #8192	; 0x2000
    562a:	681b      	ldr	r3, [r3, #0]
    562c:	429a      	cmp	r2, r3
    562e:	d00b      	beq.n	5648 <xTaskCheckForTimeOut+0x48>
    5630:	687b      	ldr	r3, [r7, #4]
    5632:	685a      	ldr	r2, [r3, #4]
    5634:	f640 639c 	movw	r3, #3740	; 0xe9c
    5638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    563c:	681b      	ldr	r3, [r3, #0]
    563e:	429a      	cmp	r2, r3
    5640:	d802      	bhi.n	5648 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    5642:	2301      	movs	r3, #1
    5644:	60fb      	str	r3, [r7, #12]
    5646:	e020      	b.n	568a <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    5648:	f640 639c 	movw	r3, #3740	; 0xe9c
    564c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5650:	681a      	ldr	r2, [r3, #0]
    5652:	687b      	ldr	r3, [r7, #4]
    5654:	685b      	ldr	r3, [r3, #4]
    5656:	1ad2      	subs	r2, r2, r3
    5658:	683b      	ldr	r3, [r7, #0]
    565a:	681b      	ldr	r3, [r3, #0]
    565c:	429a      	cmp	r2, r3
    565e:	d212      	bcs.n	5686 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    5660:	683b      	ldr	r3, [r7, #0]
    5662:	681a      	ldr	r2, [r3, #0]
    5664:	687b      	ldr	r3, [r7, #4]
    5666:	6859      	ldr	r1, [r3, #4]
    5668:	f640 639c 	movw	r3, #3740	; 0xe9c
    566c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5670:	681b      	ldr	r3, [r3, #0]
    5672:	1acb      	subs	r3, r1, r3
    5674:	441a      	add	r2, r3
    5676:	683b      	ldr	r3, [r7, #0]
    5678:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    567a:	6878      	ldr	r0, [r7, #4]
    567c:	f7ff ffa8 	bl	55d0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    5680:	2300      	movs	r3, #0
    5682:	60fb      	str	r3, [r7, #12]
    5684:	e001      	b.n	568a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    5686:	2301      	movs	r3, #1
    5688:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    568a:	f000 fae9 	bl	5c60 <vPortExitCritical>

	return xReturn;
    568e:	68fb      	ldr	r3, [r7, #12]
}
    5690:	4618      	mov	r0, r3
    5692:	3710      	adds	r7, #16
    5694:	46bd      	mov	sp, r7
    5696:	bd80      	pop	{r7, pc}

00005698 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    5698:	b480      	push	{r7}
    569a:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    569c:	f640 63b4 	movw	r3, #3764	; 0xeb4
    56a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56a4:	2201      	movs	r2, #1
    56a6:	601a      	str	r2, [r3, #0]
}
    56a8:	46bd      	mov	sp, r7
    56aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    56ae:	4770      	bx	lr

000056b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    56b0:	b580      	push	{r7, lr}
    56b2:	b082      	sub	sp, #8
    56b4:	af00      	add	r7, sp, #0
    56b6:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    56b8:	f000 f886 	bl	57c8 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    56bc:	f000 faac 	bl	5c18 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    56c0:	e7fa      	b.n	56b8 <prvIdleTask+0x8>
    56c2:	bf00      	nop

000056c4 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    56c4:	b580      	push	{r7, lr}
    56c6:	b084      	sub	sp, #16
    56c8:	af00      	add	r7, sp, #0
    56ca:	60f8      	str	r0, [r7, #12]
    56cc:	60b9      	str	r1, [r7, #8]
    56ce:	607a      	str	r2, [r7, #4]
    56d0:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    56d2:	68fb      	ldr	r3, [r7, #12]
    56d4:	3334      	adds	r3, #52	; 0x34
    56d6:	4618      	mov	r0, r3
    56d8:	68b9      	ldr	r1, [r7, #8]
    56da:	2210      	movs	r2, #16
    56dc:	f013 f87a 	bl	187d4 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    56e0:	68fb      	ldr	r3, [r7, #12]
    56e2:	2200      	movs	r2, #0
    56e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    56e8:	687b      	ldr	r3, [r7, #4]
    56ea:	2b13      	cmp	r3, #19
    56ec:	d901      	bls.n	56f2 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    56ee:	2313      	movs	r3, #19
    56f0:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    56f2:	68fb      	ldr	r3, [r7, #12]
    56f4:	687a      	ldr	r2, [r7, #4]
    56f6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    56f8:	68fb      	ldr	r3, [r7, #12]
    56fa:	687a      	ldr	r2, [r7, #4]
    56fc:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    56fe:	68fb      	ldr	r3, [r7, #12]
    5700:	3304      	adds	r3, #4
    5702:	4618      	mov	r0, r3
    5704:	f7fe fc78 	bl	3ff8 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    5708:	68fb      	ldr	r3, [r7, #12]
    570a:	3318      	adds	r3, #24
    570c:	4618      	mov	r0, r3
    570e:	f7fe fc73 	bl	3ff8 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    5712:	68fb      	ldr	r3, [r7, #12]
    5714:	68fa      	ldr	r2, [r7, #12]
    5716:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5718:	687b      	ldr	r3, [r7, #4]
    571a:	f1c3 0214 	rsb	r2, r3, #20
    571e:	68fb      	ldr	r3, [r7, #12]
    5720:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    5722:	68fb      	ldr	r3, [r7, #12]
    5724:	68fa      	ldr	r2, [r7, #12]
    5726:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    5728:	3710      	adds	r7, #16
    572a:	46bd      	mov	sp, r7
    572c:	bd80      	pop	{r7, pc}
    572e:	bf00      	nop

00005730 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    5730:	b580      	push	{r7, lr}
    5732:	b082      	sub	sp, #8
    5734:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5736:	2300      	movs	r3, #0
    5738:	607b      	str	r3, [r7, #4]
    573a:	e00f      	b.n	575c <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    573c:	687a      	ldr	r2, [r7, #4]
    573e:	4613      	mov	r3, r2
    5740:	009b      	lsls	r3, r3, #2
    5742:	4413      	add	r3, r2
    5744:	009b      	lsls	r3, r3, #2
    5746:	f640 4298 	movw	r2, #3224	; 0xc98
    574a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    574e:	4413      	add	r3, r2
    5750:	4618      	mov	r0, r3
    5752:	f7fe fc31 	bl	3fb8 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5756:	687b      	ldr	r3, [r7, #4]
    5758:	3301      	adds	r3, #1
    575a:	607b      	str	r3, [r7, #4]
    575c:	687b      	ldr	r3, [r7, #4]
    575e:	2b13      	cmp	r3, #19
    5760:	d9ec      	bls.n	573c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    5762:	f640 6028 	movw	r0, #3624	; 0xe28
    5766:	f2c2 0000 	movt	r0, #8192	; 0x2000
    576a:	f7fe fc25 	bl	3fb8 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    576e:	f640 603c 	movw	r0, #3644	; 0xe3c
    5772:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5776:	f7fe fc1f 	bl	3fb8 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    577a:	f640 6058 	movw	r0, #3672	; 0xe58
    577e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5782:	f7fe fc19 	bl	3fb8 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    5786:	f640 606c 	movw	r0, #3692	; 0xe6c
    578a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    578e:	f7fe fc13 	bl	3fb8 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    5792:	f640 6084 	movw	r0, #3716	; 0xe84
    5796:	f2c2 0000 	movt	r0, #8192	; 0x2000
    579a:	f7fe fc0d 	bl	3fb8 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    579e:	f640 6350 	movw	r3, #3664	; 0xe50
    57a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57a6:	f640 6228 	movw	r2, #3624	; 0xe28
    57aa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    57ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    57b0:	f640 6354 	movw	r3, #3668	; 0xe54
    57b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57b8:	f640 623c 	movw	r2, #3644	; 0xe3c
    57bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    57c0:	601a      	str	r2, [r3, #0]
}
    57c2:	3708      	adds	r7, #8
    57c4:	46bd      	mov	sp, r7
    57c6:	bd80      	pop	{r7, pc}

000057c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    57c8:	b580      	push	{r7, lr}
    57ca:	b082      	sub	sp, #8
    57cc:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    57ce:	f640 6380 	movw	r3, #3712	; 0xe80
    57d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57d6:	681b      	ldr	r3, [r3, #0]
    57d8:	2b00      	cmp	r3, #0
    57da:	d03a      	beq.n	5852 <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    57dc:	f7ff fc4c 	bl	5078 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    57e0:	f640 636c 	movw	r3, #3692	; 0xe6c
    57e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57e8:	681b      	ldr	r3, [r3, #0]
    57ea:	2b00      	cmp	r3, #0
    57ec:	bf14      	ite	ne
    57ee:	2300      	movne	r3, #0
    57f0:	2301      	moveq	r3, #1
    57f2:	b2db      	uxtb	r3, r3
    57f4:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    57f6:	f7ff fc51 	bl	509c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    57fa:	687b      	ldr	r3, [r7, #4]
    57fc:	2b00      	cmp	r3, #0
    57fe:	d128      	bne.n	5852 <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    5800:	f000 fa18 	bl	5c34 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    5804:	f640 636c 	movw	r3, #3692	; 0xe6c
    5808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    580c:	68db      	ldr	r3, [r3, #12]
    580e:	68db      	ldr	r3, [r3, #12]
    5810:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    5812:	683b      	ldr	r3, [r7, #0]
    5814:	3304      	adds	r3, #4
    5816:	4618      	mov	r0, r3
    5818:	f7fe fc5a 	bl	40d0 <vListRemove>
					--uxCurrentNumberOfTasks;
    581c:	f640 6398 	movw	r3, #3736	; 0xe98
    5820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5824:	681b      	ldr	r3, [r3, #0]
    5826:	1e5a      	subs	r2, r3, #1
    5828:	f640 6398 	movw	r3, #3736	; 0xe98
    582c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5830:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    5832:	f640 6380 	movw	r3, #3712	; 0xe80
    5836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    583a:	681b      	ldr	r3, [r3, #0]
    583c:	1e5a      	subs	r2, r3, #1
    583e:	f640 6380 	movw	r3, #3712	; 0xe80
    5842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5846:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    5848:	f000 fa0a 	bl	5c60 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    584c:	6838      	ldr	r0, [r7, #0]
    584e:	f000 f879 	bl	5944 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    5852:	3708      	adds	r7, #8
    5854:	46bd      	mov	sp, r7
    5856:	bd80      	pop	{r7, pc}

00005858 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    5858:	b580      	push	{r7, lr}
    585a:	b082      	sub	sp, #8
    585c:	af00      	add	r7, sp, #0
    585e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    5860:	f640 4394 	movw	r3, #3220	; 0xc94
    5864:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5868:	681b      	ldr	r3, [r3, #0]
    586a:	687a      	ldr	r2, [r7, #4]
    586c:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    586e:	f640 639c 	movw	r3, #3740	; 0xe9c
    5872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5876:	681b      	ldr	r3, [r3, #0]
    5878:	687a      	ldr	r2, [r7, #4]
    587a:	429a      	cmp	r2, r3
    587c:	d20f      	bcs.n	589e <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    587e:	f640 6354 	movw	r3, #3668	; 0xe54
    5882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5886:	681a      	ldr	r2, [r3, #0]
    5888:	f640 4394 	movw	r3, #3220	; 0xc94
    588c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5890:	681b      	ldr	r3, [r3, #0]
    5892:	3304      	adds	r3, #4
    5894:	4610      	mov	r0, r2
    5896:	4619      	mov	r1, r3
    5898:	f7fe fbe2 	bl	4060 <vListInsert>
    589c:	e01c      	b.n	58d8 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    589e:	f640 6350 	movw	r3, #3664	; 0xe50
    58a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58a6:	681a      	ldr	r2, [r3, #0]
    58a8:	f640 4394 	movw	r3, #3220	; 0xc94
    58ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58b0:	681b      	ldr	r3, [r3, #0]
    58b2:	3304      	adds	r3, #4
    58b4:	4610      	mov	r0, r2
    58b6:	4619      	mov	r1, r3
    58b8:	f7fe fbd2 	bl	4060 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    58bc:	f240 33e0 	movw	r3, #992	; 0x3e0
    58c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58c4:	681b      	ldr	r3, [r3, #0]
    58c6:	687a      	ldr	r2, [r7, #4]
    58c8:	429a      	cmp	r2, r3
    58ca:	d205      	bcs.n	58d8 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    58cc:	f240 33e0 	movw	r3, #992	; 0x3e0
    58d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58d4:	687a      	ldr	r2, [r7, #4]
    58d6:	601a      	str	r2, [r3, #0]
		}
	}
}
    58d8:	3708      	adds	r7, #8
    58da:	46bd      	mov	sp, r7
    58dc:	bd80      	pop	{r7, pc}
    58de:	bf00      	nop

000058e0 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    58e0:	b580      	push	{r7, lr}
    58e2:	b084      	sub	sp, #16
    58e4:	af00      	add	r7, sp, #0
    58e6:	4603      	mov	r3, r0
    58e8:	6039      	str	r1, [r7, #0]
    58ea:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    58ec:	2050      	movs	r0, #80	; 0x50
    58ee:	f000 fa19 	bl	5d24 <pvPortMalloc>
    58f2:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    58f4:	68fb      	ldr	r3, [r7, #12]
    58f6:	2b00      	cmp	r3, #0
    58f8:	d01f      	beq.n	593a <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    58fa:	683b      	ldr	r3, [r7, #0]
    58fc:	2b00      	cmp	r3, #0
    58fe:	d106      	bne.n	590e <prvAllocateTCBAndStack+0x2e>
    5900:	88fb      	ldrh	r3, [r7, #6]
    5902:	009b      	lsls	r3, r3, #2
    5904:	4618      	mov	r0, r3
    5906:	f000 fa0d 	bl	5d24 <pvPortMalloc>
    590a:	4603      	mov	r3, r0
    590c:	e000      	b.n	5910 <prvAllocateTCBAndStack+0x30>
    590e:	683b      	ldr	r3, [r7, #0]
    5910:	68fa      	ldr	r2, [r7, #12]
    5912:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    5914:	68fb      	ldr	r3, [r7, #12]
    5916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5918:	2b00      	cmp	r3, #0
    591a:	d105      	bne.n	5928 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    591c:	68f8      	ldr	r0, [r7, #12]
    591e:	f000 fac5 	bl	5eac <vPortFree>
			pxNewTCB = NULL;
    5922:	2300      	movs	r3, #0
    5924:	60fb      	str	r3, [r7, #12]
    5926:	e008      	b.n	593a <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5928:	68fb      	ldr	r3, [r7, #12]
    592a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    592c:	88fb      	ldrh	r3, [r7, #6]
    592e:	009b      	lsls	r3, r3, #2
    5930:	4610      	mov	r0, r2
    5932:	21a5      	movs	r1, #165	; 0xa5
    5934:	461a      	mov	r2, r3
    5936:	f012 fefd 	bl	18734 <memset>
		}
	}

	return pxNewTCB;
    593a:	68fb      	ldr	r3, [r7, #12]
}
    593c:	4618      	mov	r0, r3
    593e:	3710      	adds	r7, #16
    5940:	46bd      	mov	sp, r7
    5942:	bd80      	pop	{r7, pc}

00005944 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    5944:	b580      	push	{r7, lr}
    5946:	b082      	sub	sp, #8
    5948:	af00      	add	r7, sp, #0
    594a:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    594c:	687b      	ldr	r3, [r7, #4]
    594e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5950:	4618      	mov	r0, r3
    5952:	f000 faab 	bl	5eac <vPortFree>
		vPortFree( pxTCB );
    5956:	6878      	ldr	r0, [r7, #4]
    5958:	f000 faa8 	bl	5eac <vPortFree>
	}
    595c:	3708      	adds	r7, #8
    595e:	46bd      	mov	sp, r7
    5960:	bd80      	pop	{r7, pc}
    5962:	bf00      	nop

00005964 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    5964:	b480      	push	{r7}
    5966:	b083      	sub	sp, #12
    5968:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    596a:	f640 4394 	movw	r3, #3220	; 0xc94
    596e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5972:	681b      	ldr	r3, [r3, #0]
    5974:	607b      	str	r3, [r7, #4]

		return xReturn;
    5976:	687b      	ldr	r3, [r7, #4]
	}
    5978:	4618      	mov	r0, r3
    597a:	370c      	adds	r7, #12
    597c:	46bd      	mov	sp, r7
    597e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5982:	4770      	bx	lr

00005984 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    5984:	b580      	push	{r7, lr}
    5986:	b084      	sub	sp, #16
    5988:	af00      	add	r7, sp, #0
    598a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    598c:	687b      	ldr	r3, [r7, #4]
    598e:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    5990:	68fb      	ldr	r3, [r7, #12]
    5992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5994:	f640 4394 	movw	r3, #3220	; 0xc94
    5998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    599c:	681b      	ldr	r3, [r3, #0]
    599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    59a0:	429a      	cmp	r2, r3
    59a2:	d24f      	bcs.n	5a44 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    59a4:	f640 4394 	movw	r3, #3220	; 0xc94
    59a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59ac:	681b      	ldr	r3, [r3, #0]
    59ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    59b0:	f1c3 0214 	rsb	r2, r3, #20
    59b4:	68fb      	ldr	r3, [r7, #12]
    59b6:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    59b8:	68fb      	ldr	r3, [r7, #12]
    59ba:	6959      	ldr	r1, [r3, #20]
    59bc:	68fb      	ldr	r3, [r7, #12]
    59be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    59c0:	4613      	mov	r3, r2
    59c2:	009b      	lsls	r3, r3, #2
    59c4:	4413      	add	r3, r2
    59c6:	009b      	lsls	r3, r3, #2
    59c8:	f640 4298 	movw	r2, #3224	; 0xc98
    59cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    59d0:	4413      	add	r3, r2
    59d2:	4299      	cmp	r1, r3
    59d4:	d12e      	bne.n	5a34 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    59d6:	68fb      	ldr	r3, [r7, #12]
    59d8:	3304      	adds	r3, #4
    59da:	4618      	mov	r0, r3
    59dc:	f7fe fb78 	bl	40d0 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    59e0:	f640 4394 	movw	r3, #3220	; 0xc94
    59e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59e8:	681b      	ldr	r3, [r3, #0]
    59ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    59ec:	68fb      	ldr	r3, [r7, #12]
    59ee:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    59f0:	68fb      	ldr	r3, [r7, #12]
    59f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    59f4:	f640 63a4 	movw	r3, #3748	; 0xea4
    59f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59fc:	681b      	ldr	r3, [r3, #0]
    59fe:	429a      	cmp	r2, r3
    5a00:	d906      	bls.n	5a10 <vTaskPriorityInherit+0x8c>
    5a02:	68fb      	ldr	r3, [r7, #12]
    5a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a06:	f640 63a4 	movw	r3, #3748	; 0xea4
    5a0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a0e:	601a      	str	r2, [r3, #0]
    5a10:	68fb      	ldr	r3, [r7, #12]
    5a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a14:	4613      	mov	r3, r2
    5a16:	009b      	lsls	r3, r3, #2
    5a18:	4413      	add	r3, r2
    5a1a:	009b      	lsls	r3, r3, #2
    5a1c:	f640 4298 	movw	r2, #3224	; 0xc98
    5a20:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5a24:	441a      	add	r2, r3
    5a26:	68fb      	ldr	r3, [r7, #12]
    5a28:	3304      	adds	r3, #4
    5a2a:	4610      	mov	r0, r2
    5a2c:	4619      	mov	r1, r3
    5a2e:	f7fe faef 	bl	4010 <vListInsertEnd>
    5a32:	e007      	b.n	5a44 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5a34:	f640 4394 	movw	r3, #3220	; 0xc94
    5a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a3c:	681b      	ldr	r3, [r3, #0]
    5a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a40:	68fb      	ldr	r3, [r7, #12]
    5a42:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    5a44:	3710      	adds	r7, #16
    5a46:	46bd      	mov	sp, r7
    5a48:	bd80      	pop	{r7, pc}
    5a4a:	bf00      	nop

00005a4c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    5a4c:	b580      	push	{r7, lr}
    5a4e:	b084      	sub	sp, #16
    5a50:	af00      	add	r7, sp, #0
    5a52:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5a54:	687b      	ldr	r3, [r7, #4]
    5a56:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5a58:	687b      	ldr	r3, [r7, #4]
    5a5a:	2b00      	cmp	r3, #0
    5a5c:	d035      	beq.n	5aca <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    5a5e:	68fb      	ldr	r3, [r7, #12]
    5a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a62:	68fb      	ldr	r3, [r7, #12]
    5a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5a66:	429a      	cmp	r2, r3
    5a68:	d02f      	beq.n	5aca <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    5a6a:	68fb      	ldr	r3, [r7, #12]
    5a6c:	3304      	adds	r3, #4
    5a6e:	4618      	mov	r0, r3
    5a70:	f7fe fb2e 	bl	40d0 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5a74:	68fb      	ldr	r3, [r7, #12]
    5a76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5a78:	68fb      	ldr	r3, [r7, #12]
    5a7a:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    5a7c:	68fb      	ldr	r3, [r7, #12]
    5a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5a80:	f1c3 0214 	rsb	r2, r3, #20
    5a84:	68fb      	ldr	r3, [r7, #12]
    5a86:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    5a88:	68fb      	ldr	r3, [r7, #12]
    5a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a8c:	f640 63a4 	movw	r3, #3748	; 0xea4
    5a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a94:	681b      	ldr	r3, [r3, #0]
    5a96:	429a      	cmp	r2, r3
    5a98:	d906      	bls.n	5aa8 <vTaskPriorityDisinherit+0x5c>
    5a9a:	68fb      	ldr	r3, [r7, #12]
    5a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a9e:	f640 63a4 	movw	r3, #3748	; 0xea4
    5aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aa6:	601a      	str	r2, [r3, #0]
    5aa8:	68fb      	ldr	r3, [r7, #12]
    5aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5aac:	4613      	mov	r3, r2
    5aae:	009b      	lsls	r3, r3, #2
    5ab0:	4413      	add	r3, r2
    5ab2:	009b      	lsls	r3, r3, #2
    5ab4:	f640 4298 	movw	r2, #3224	; 0xc98
    5ab8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5abc:	441a      	add	r2, r3
    5abe:	68fb      	ldr	r3, [r7, #12]
    5ac0:	3304      	adds	r3, #4
    5ac2:	4610      	mov	r0, r2
    5ac4:	4619      	mov	r1, r3
    5ac6:	f7fe faa3 	bl	4010 <vListInsertEnd>
			}
		}
	}
    5aca:	3710      	adds	r7, #16
    5acc:	46bd      	mov	sp, r7
    5ace:	bd80      	pop	{r7, pc}

00005ad0 <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    5ad0:	b480      	push	{r7}
    5ad2:	b083      	sub	sp, #12
    5ad4:	af00      	add	r7, sp, #0
    5ad6:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    5ad8:	687b      	ldr	r3, [r7, #4]
    5ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    5adc:	4618      	mov	r0, r3
    5ade:	370c      	adds	r7, #12
    5ae0:	46bd      	mov	sp, r7
    5ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ae6:	4770      	bx	lr

00005ae8 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    5ae8:	b480      	push	{r7}
    5aea:	b083      	sub	sp, #12
    5aec:	af00      	add	r7, sp, #0
    5aee:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    5af0:	687b      	ldr	r3, [r7, #4]
    5af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    5af4:	4618      	mov	r0, r3
    5af6:	370c      	adds	r7, #12
    5af8:	46bd      	mov	sp, r7
    5afa:	f85d 7b04 	ldr.w	r7, [sp], #4
    5afe:	4770      	bx	lr

00005b00 <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    5b00:	b480      	push	{r7}
    5b02:	b083      	sub	sp, #12
    5b04:	af00      	add	r7, sp, #0
    5b06:	6078      	str	r0, [r7, #4]
    5b08:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    5b0a:	687b      	ldr	r3, [r7, #4]
    5b0c:	683a      	ldr	r2, [r7, #0]
    5b0e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    5b10:	370c      	adds	r7, #12
    5b12:	46bd      	mov	sp, r7
    5b14:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b18:	4770      	bx	lr
    5b1a:	bf00      	nop

00005b1c <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    5b1c:	b480      	push	{r7}
    5b1e:	b083      	sub	sp, #12
    5b20:	af00      	add	r7, sp, #0
    5b22:	6078      	str	r0, [r7, #4]
    5b24:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    5b26:	687b      	ldr	r3, [r7, #4]
    5b28:	683a      	ldr	r2, [r7, #0]
    5b2a:	649a      	str	r2, [r3, #72]	; 0x48
    }
    5b2c:	370c      	adds	r7, #12
    5b2e:	46bd      	mov	sp, r7
    5b30:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b34:	4770      	bx	lr
    5b36:	bf00      	nop

00005b38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5b38:	b480      	push	{r7}
    5b3a:	b085      	sub	sp, #20
    5b3c:	af00      	add	r7, sp, #0
    5b3e:	60f8      	str	r0, [r7, #12]
    5b40:	60b9      	str	r1, [r7, #8]
    5b42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5b44:	68fb      	ldr	r3, [r7, #12]
    5b46:	3b04      	subs	r3, #4
    5b48:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5b4a:	68fb      	ldr	r3, [r7, #12]
    5b4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5b50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5b52:	68fb      	ldr	r3, [r7, #12]
    5b54:	3b04      	subs	r3, #4
    5b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5b58:	68ba      	ldr	r2, [r7, #8]
    5b5a:	68fb      	ldr	r3, [r7, #12]
    5b5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5b5e:	68fb      	ldr	r3, [r7, #12]
    5b60:	3b04      	subs	r3, #4
    5b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    5b64:	68fb      	ldr	r3, [r7, #12]
    5b66:	2200      	movs	r2, #0
    5b68:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5b6a:	68fb      	ldr	r3, [r7, #12]
    5b6c:	3b14      	subs	r3, #20
    5b6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    5b70:	687a      	ldr	r2, [r7, #4]
    5b72:	68fb      	ldr	r3, [r7, #12]
    5b74:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5b76:	68fb      	ldr	r3, [r7, #12]
    5b78:	3b20      	subs	r3, #32
    5b7a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5b7c:	68fb      	ldr	r3, [r7, #12]
}
    5b7e:	4618      	mov	r0, r3
    5b80:	3714      	adds	r7, #20
    5b82:	46bd      	mov	sp, r7
    5b84:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b88:	4770      	bx	lr
    5b8a:	bf00      	nop

00005b8c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5b8c:	4b06      	ldr	r3, [pc, #24]	; (5ba8 <pxCurrentTCBConst2>)
    5b8e:	6819      	ldr	r1, [r3, #0]
    5b90:	6808      	ldr	r0, [r1, #0]
    5b92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5b96:	f380 8809 	msr	PSP, r0
    5b9a:	f04f 0000 	mov.w	r0, #0
    5b9e:	f380 8811 	msr	BASEPRI, r0
    5ba2:	f04e 0e0d 	orr.w	lr, lr, #13
    5ba6:	4770      	bx	lr

00005ba8 <pxCurrentTCBConst2>:
    5ba8:	20000c94 	.word	0x20000c94

00005bac <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    5bac:	485c      	ldr	r0, [pc, #368]	; (5d20 <prvSetupTimerInterrupt+0x28>)
    5bae:	6800      	ldr	r0, [r0, #0]
    5bb0:	6800      	ldr	r0, [r0, #0]
    5bb2:	f380 8808 	msr	MSP, r0
    5bb6:	b662      	cpsie	i
    5bb8:	df00      	svc	0
    5bba:	bf00      	nop

00005bbc <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    5bbc:	b580      	push	{r7, lr}
    5bbe:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    5bc0:	f64e 5320 	movw	r3, #60704	; 0xed20
    5bc4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5bc8:	f64e 5220 	movw	r2, #60704	; 0xed20
    5bcc:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5bd0:	6812      	ldr	r2, [r2, #0]
    5bd2:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    5bd6:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5bd8:	f64e 5320 	movw	r3, #60704	; 0xed20
    5bdc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5be0:	f64e 5220 	movw	r2, #60704	; 0xed20
    5be4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5be8:	6812      	ldr	r2, [r2, #0]
    5bea:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    5bee:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5bf0:	f000 f882 	bl	5cf8 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5bf4:	f240 33e4 	movw	r3, #996	; 0x3e4
    5bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bfc:	2200      	movs	r2, #0
    5bfe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5c00:	f7ff ffd4 	bl	5bac <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5c04:	2300      	movs	r3, #0
}
    5c06:	4618      	mov	r0, r3
    5c08:	bd80      	pop	{r7, pc}
    5c0a:	bf00      	nop

00005c0c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5c0c:	b480      	push	{r7}
    5c0e:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5c10:	46bd      	mov	sp, r7
    5c12:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c16:	4770      	bx	lr

00005c18 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5c18:	b480      	push	{r7}
    5c1a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5c1c:	f64e 5304 	movw	r3, #60676	; 0xed04
    5c20:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5c28:	601a      	str	r2, [r3, #0]
}
    5c2a:	46bd      	mov	sp, r7
    5c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c30:	4770      	bx	lr
    5c32:	bf00      	nop

00005c34 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5c34:	b480      	push	{r7}
    5c36:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5c38:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5c3c:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5c40:	f240 33e4 	movw	r3, #996	; 0x3e4
    5c44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c48:	681b      	ldr	r3, [r3, #0]
    5c4a:	1c5a      	adds	r2, r3, #1
    5c4c:	f240 33e4 	movw	r3, #996	; 0x3e4
    5c50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c54:	601a      	str	r2, [r3, #0]
}
    5c56:	46bd      	mov	sp, r7
    5c58:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c5c:	4770      	bx	lr
    5c5e:	bf00      	nop

00005c60 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5c60:	b480      	push	{r7}
    5c62:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5c64:	f240 33e4 	movw	r3, #996	; 0x3e4
    5c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c6c:	681b      	ldr	r3, [r3, #0]
    5c6e:	1e5a      	subs	r2, r3, #1
    5c70:	f240 33e4 	movw	r3, #996	; 0x3e4
    5c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c78:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5c7a:	f240 33e4 	movw	r3, #996	; 0x3e4
    5c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c82:	681b      	ldr	r3, [r3, #0]
    5c84:	2b00      	cmp	r3, #0
    5c86:	d103      	bne.n	5c90 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5c88:	f04f 0000 	mov.w	r0, #0
    5c8c:	f380 8811 	msr	BASEPRI, r0
	}
}
    5c90:	46bd      	mov	sp, r7
    5c92:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c96:	4770      	bx	lr

00005c98 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5c98:	f3ef 8009 	mrs	r0, PSP
    5c9c:	4b0c      	ldr	r3, [pc, #48]	; (5cd0 <pxCurrentTCBConst>)
    5c9e:	681a      	ldr	r2, [r3, #0]
    5ca0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5ca4:	6010      	str	r0, [r2, #0]
    5ca6:	e92d 4008 	stmdb	sp!, {r3, lr}
    5caa:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5cae:	f380 8811 	msr	BASEPRI, r0
    5cb2:	f7ff fba1 	bl	53f8 <vTaskSwitchContext>
    5cb6:	f04f 0000 	mov.w	r0, #0
    5cba:	f380 8811 	msr	BASEPRI, r0
    5cbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5cc2:	6819      	ldr	r1, [r3, #0]
    5cc4:	6808      	ldr	r0, [r1, #0]
    5cc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5cca:	f380 8809 	msr	PSP, r0
    5cce:	4770      	bx	lr

00005cd0 <pxCurrentTCBConst>:
    5cd0:	20000c94 	.word	0x20000c94

00005cd4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5cd4:	b580      	push	{r7, lr}
    5cd6:	b082      	sub	sp, #8
    5cd8:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5cda:	2300      	movs	r3, #0
    5cdc:	607b      	str	r3, [r7, #4]
    5cde:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5ce2:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    5ce6:	f7ff faa9 	bl	523c <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5cea:	f04f 0000 	mov.w	r0, #0
    5cee:	f380 8811 	msr	BASEPRI, r0
}
    5cf2:	3708      	adds	r7, #8
    5cf4:	46bd      	mov	sp, r7
    5cf6:	bd80      	pop	{r7, pc}

00005cf8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5cf8:	b480      	push	{r7}
    5cfa:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5cfc:	f24e 0314 	movw	r3, #57364	; 0xe014
    5d00:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5d04:	f245 425f 	movw	r2, #21599	; 0x545f
    5d08:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5d0a:	f24e 0310 	movw	r3, #57360	; 0xe010
    5d0e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5d12:	2207      	movs	r2, #7
    5d14:	601a      	str	r2, [r3, #0]
}
    5d16:	46bd      	mov	sp, r7
    5d18:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d1c:	4770      	bx	lr
    5d1e:	0000      	.short	0x0000
    5d20:	e000ed08 	.word	0xe000ed08

00005d24 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5d24:	b580      	push	{r7, lr}
    5d26:	b08a      	sub	sp, #40	; 0x28
    5d28:	af00      	add	r7, sp, #0
    5d2a:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5d2c:	2300      	movs	r3, #0
    5d2e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5d30:	f7ff f9a2 	bl	5078 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5d34:	f64b 63d0 	movw	r3, #48848	; 0xbed0
    5d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d3c:	681b      	ldr	r3, [r3, #0]
    5d3e:	2b00      	cmp	r3, #0
    5d40:	d130      	bne.n	5da4 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5d42:	f64b 63c0 	movw	r3, #48832	; 0xbec0
    5d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d4a:	f640 62c0 	movw	r2, #3776	; 0xec0
    5d4e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5d52:	601a      	str	r2, [r3, #0]
    5d54:	f64b 63c0 	movw	r3, #48832	; 0xbec0
    5d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d5c:	2200      	movs	r2, #0
    5d5e:	605a      	str	r2, [r3, #4]
    5d60:	f64b 63c8 	movw	r3, #48840	; 0xbec8
    5d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d68:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5d6c:	605a      	str	r2, [r3, #4]
    5d6e:	f64b 63c8 	movw	r3, #48840	; 0xbec8
    5d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d76:	2200      	movs	r2, #0
    5d78:	601a      	str	r2, [r3, #0]
    5d7a:	f640 63c0 	movw	r3, #3776	; 0xec0
    5d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d82:	617b      	str	r3, [r7, #20]
    5d84:	697b      	ldr	r3, [r7, #20]
    5d86:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5d8a:	605a      	str	r2, [r3, #4]
    5d8c:	697a      	ldr	r2, [r7, #20]
    5d8e:	f64b 63c8 	movw	r3, #48840	; 0xbec8
    5d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d96:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5d98:	f64b 63d0 	movw	r3, #48848	; 0xbed0
    5d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5da0:	2201      	movs	r2, #1
    5da2:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5da4:	687b      	ldr	r3, [r7, #4]
    5da6:	2b00      	cmp	r3, #0
    5da8:	d00d      	beq.n	5dc6 <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5daa:	2310      	movs	r3, #16
    5dac:	687a      	ldr	r2, [r7, #4]
    5dae:	4413      	add	r3, r2
    5db0:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5db2:	687b      	ldr	r3, [r7, #4]
    5db4:	f003 0307 	and.w	r3, r3, #7
    5db8:	2b00      	cmp	r3, #0
    5dba:	d004      	beq.n	5dc6 <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5dbc:	687b      	ldr	r3, [r7, #4]
    5dbe:	f023 0307 	bic.w	r3, r3, #7
    5dc2:	3308      	adds	r3, #8
    5dc4:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5dc6:	687b      	ldr	r3, [r7, #4]
    5dc8:	2b00      	cmp	r3, #0
    5dca:	d068      	beq.n	5e9e <pvPortMalloc+0x17a>
    5dcc:	687b      	ldr	r3, [r7, #4]
    5dce:	f5b3 2f96 	cmp.w	r3, #307200	; 0x4b000
    5dd2:	d264      	bcs.n	5e9e <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5dd4:	f64b 63c0 	movw	r3, #48832	; 0xbec0
    5dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ddc:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5dde:	f64b 63c0 	movw	r3, #48832	; 0xbec0
    5de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5de6:	681b      	ldr	r3, [r3, #0]
    5de8:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5dea:	e004      	b.n	5df6 <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5dee:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5df2:	681b      	ldr	r3, [r3, #0]
    5df4:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5df8:	685a      	ldr	r2, [r3, #4]
    5dfa:	687b      	ldr	r3, [r7, #4]
    5dfc:	429a      	cmp	r2, r3
    5dfe:	d203      	bcs.n	5e08 <pvPortMalloc+0xe4>
    5e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e02:	681b      	ldr	r3, [r3, #0]
    5e04:	2b00      	cmp	r3, #0
    5e06:	d1f1      	bne.n	5dec <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5e0a:	f64b 63c8 	movw	r3, #48840	; 0xbec8
    5e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e12:	429a      	cmp	r2, r3
    5e14:	d043      	beq.n	5e9e <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5e16:	6a3b      	ldr	r3, [r7, #32]
    5e18:	681a      	ldr	r2, [r3, #0]
    5e1a:	2310      	movs	r3, #16
    5e1c:	4413      	add	r3, r2
    5e1e:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    5e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e22:	681a      	ldr	r2, [r3, #0]
    5e24:	6a3b      	ldr	r3, [r7, #32]
    5e26:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    5e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e2a:	685a      	ldr	r2, [r3, #4]
    5e2c:	687b      	ldr	r3, [r7, #4]
    5e2e:	1ad2      	subs	r2, r2, r3
    5e30:	2310      	movs	r3, #16
    5e32:	005b      	lsls	r3, r3, #1
    5e34:	429a      	cmp	r2, r3
    5e36:	d925      	bls.n	5e84 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    5e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5e3a:	687b      	ldr	r3, [r7, #4]
    5e3c:	4413      	add	r3, r2
    5e3e:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e42:	685a      	ldr	r2, [r3, #4]
    5e44:	687b      	ldr	r3, [r7, #4]
    5e46:	1ad2      	subs	r2, r2, r3
    5e48:	693b      	ldr	r3, [r7, #16]
    5e4a:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e4e:	687a      	ldr	r2, [r7, #4]
    5e50:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    5e52:	693b      	ldr	r3, [r7, #16]
    5e54:	685b      	ldr	r3, [r3, #4]
    5e56:	60fb      	str	r3, [r7, #12]
    5e58:	f64b 63c0 	movw	r3, #48832	; 0xbec0
    5e5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e60:	61bb      	str	r3, [r7, #24]
    5e62:	e002      	b.n	5e6a <pvPortMalloc+0x146>
    5e64:	69bb      	ldr	r3, [r7, #24]
    5e66:	681b      	ldr	r3, [r3, #0]
    5e68:	61bb      	str	r3, [r7, #24]
    5e6a:	69bb      	ldr	r3, [r7, #24]
    5e6c:	681b      	ldr	r3, [r3, #0]
    5e6e:	685a      	ldr	r2, [r3, #4]
    5e70:	68fb      	ldr	r3, [r7, #12]
    5e72:	429a      	cmp	r2, r3
    5e74:	d3f6      	bcc.n	5e64 <pvPortMalloc+0x140>
    5e76:	69bb      	ldr	r3, [r7, #24]
    5e78:	681a      	ldr	r2, [r3, #0]
    5e7a:	693b      	ldr	r3, [r7, #16]
    5e7c:	601a      	str	r2, [r3, #0]
    5e7e:	69bb      	ldr	r3, [r7, #24]
    5e80:	693a      	ldr	r2, [r7, #16]
    5e82:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5e84:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e8c:	681a      	ldr	r2, [r3, #0]
    5e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e90:	685b      	ldr	r3, [r3, #4]
    5e92:	1ad2      	subs	r2, r2, r3
    5e94:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e9c:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    5e9e:	f7ff f8fd 	bl	509c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    5ea2:	69fb      	ldr	r3, [r7, #28]
}
    5ea4:	4618      	mov	r0, r3
    5ea6:	3728      	adds	r7, #40	; 0x28
    5ea8:	46bd      	mov	sp, r7
    5eaa:	bd80      	pop	{r7, pc}

00005eac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    5eac:	b580      	push	{r7, lr}
    5eae:	b086      	sub	sp, #24
    5eb0:	af00      	add	r7, sp, #0
    5eb2:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    5eb4:	687b      	ldr	r3, [r7, #4]
    5eb6:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    5eb8:	687b      	ldr	r3, [r7, #4]
    5eba:	2b00      	cmp	r3, #0
    5ebc:	d030      	beq.n	5f20 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    5ebe:	2310      	movs	r3, #16
    5ec0:	425b      	negs	r3, r3
    5ec2:	693a      	ldr	r2, [r7, #16]
    5ec4:	4413      	add	r3, r2
    5ec6:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    5ec8:	693b      	ldr	r3, [r7, #16]
    5eca:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    5ecc:	f7ff f8d4 	bl	5078 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    5ed0:	68fb      	ldr	r3, [r7, #12]
    5ed2:	685b      	ldr	r3, [r3, #4]
    5ed4:	60bb      	str	r3, [r7, #8]
    5ed6:	f64b 63c0 	movw	r3, #48832	; 0xbec0
    5eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ede:	617b      	str	r3, [r7, #20]
    5ee0:	e002      	b.n	5ee8 <vPortFree+0x3c>
    5ee2:	697b      	ldr	r3, [r7, #20]
    5ee4:	681b      	ldr	r3, [r3, #0]
    5ee6:	617b      	str	r3, [r7, #20]
    5ee8:	697b      	ldr	r3, [r7, #20]
    5eea:	681b      	ldr	r3, [r3, #0]
    5eec:	685a      	ldr	r2, [r3, #4]
    5eee:	68bb      	ldr	r3, [r7, #8]
    5ef0:	429a      	cmp	r2, r3
    5ef2:	d3f6      	bcc.n	5ee2 <vPortFree+0x36>
    5ef4:	697b      	ldr	r3, [r7, #20]
    5ef6:	681a      	ldr	r2, [r3, #0]
    5ef8:	68fb      	ldr	r3, [r7, #12]
    5efa:	601a      	str	r2, [r3, #0]
    5efc:	697b      	ldr	r3, [r7, #20]
    5efe:	68fa      	ldr	r2, [r7, #12]
    5f00:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    5f02:	68fb      	ldr	r3, [r7, #12]
    5f04:	685a      	ldr	r2, [r3, #4]
    5f06:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5f0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f0e:	681b      	ldr	r3, [r3, #0]
    5f10:	441a      	add	r2, r3
    5f12:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f1a:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    5f1c:	f7ff f8be 	bl	509c <xTaskResumeAll>
	}
}
    5f20:	3718      	adds	r7, #24
    5f22:	46bd      	mov	sp, r7
    5f24:	bd80      	pop	{r7, pc}
    5f26:	bf00      	nop

00005f28 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    5f28:	b480      	push	{r7}
    5f2a:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    5f2c:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f34:	681b      	ldr	r3, [r3, #0]
}
    5f36:	4618      	mov	r0, r3
    5f38:	46bd      	mov	sp, r7
    5f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f3e:	4770      	bx	lr

00005f40 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    5f40:	b480      	push	{r7}
    5f42:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    5f44:	46bd      	mov	sp, r7
    5f46:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f4a:	4770      	bx	lr
    5f4c:	0000      	movs	r0, r0
	...

00005f50 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    5f50:	b580      	push	{r7, lr}
    5f52:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    5f54:	f64b 63f2 	movw	r3, #48882	; 0xbef2
    5f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f5c:	781b      	ldrb	r3, [r3, #0]
    5f5e:	2b00      	cmp	r3, #0
    5f60:	f040 815d 	bne.w	621e <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    5f64:	f64b 63da 	movw	r3, #48858	; 0xbeda
    5f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f6c:	881b      	ldrh	r3, [r3, #0]
    5f6e:	2b09      	cmp	r3, #9
    5f70:	f201 8145 	bhi.w	71fe <ground_calibrate+0x12ae>
    5f74:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    5f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f7c:	781b      	ldrb	r3, [r3, #0]
    5f7e:	2b01      	cmp	r3, #1
    5f80:	f041 813d 	bne.w	71fe <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    5f84:	f64b 63f2 	movw	r3, #48882	; 0xbef2
    5f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f8c:	2201      	movs	r2, #1
    5f8e:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    5f90:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    5f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f98:	781a      	ldrb	r2, [r3, #0]
    5f9a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    5f9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fa2:	781b      	ldrb	r3, [r3, #0]
    5fa4:	b2db      	uxtb	r3, r3
    5fa6:	429a      	cmp	r2, r3
    5fa8:	d313      	bcc.n	5fd2 <ground_calibrate+0x82>
    5faa:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    5fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fb2:	781b      	ldrb	r3, [r3, #0]
    5fb4:	b2db      	uxtb	r3, r3
    5fb6:	461a      	mov	r2, r3
    5fb8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    5fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fc0:	781b      	ldrb	r3, [r3, #0]
    5fc2:	1ad3      	subs	r3, r2, r3
    5fc4:	33ff      	adds	r3, #255	; 0xff
    5fc6:	2b04      	cmp	r3, #4
    5fc8:	bfd4      	ite	le
    5fca:	2300      	movle	r3, #0
    5fcc:	2301      	movgt	r3, #1
    5fce:	b2db      	uxtb	r3, r3
    5fd0:	e011      	b.n	5ff6 <ground_calibrate+0xa6>
    5fd2:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    5fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fda:	781b      	ldrb	r3, [r3, #0]
    5fdc:	b2db      	uxtb	r3, r3
    5fde:	461a      	mov	r2, r3
    5fe0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    5fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fe8:	781b      	ldrb	r3, [r3, #0]
    5fea:	1ad3      	subs	r3, r2, r3
    5fec:	2b04      	cmp	r3, #4
    5fee:	bfd4      	ite	le
    5ff0:	2300      	movle	r3, #0
    5ff2:	2301      	movgt	r3, #1
    5ff4:	b2db      	uxtb	r3, r3
    5ff6:	2b00      	cmp	r3, #0
    5ff8:	f000 8103 	beq.w	6202 <ground_calibrate+0x2b2>
    5ffc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6004:	781b      	ldrb	r3, [r3, #0]
    6006:	461a      	mov	r2, r3
    6008:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    600c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6010:	2105      	movs	r1, #5
    6012:	5499      	strb	r1, [r3, r2]
    6014:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    601c:	781b      	ldrb	r3, [r3, #0]
    601e:	3301      	adds	r3, #1
    6020:	b2da      	uxtb	r2, r3
    6022:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    602a:	701a      	strb	r2, [r3, #0]
    602c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6034:	781b      	ldrb	r3, [r3, #0]
    6036:	2bff      	cmp	r3, #255	; 0xff
    6038:	d105      	bne.n	6046 <ground_calibrate+0xf6>
    603a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    603e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6042:	2200      	movs	r2, #0
    6044:	701a      	strb	r2, [r3, #0]
    6046:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    604a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    604e:	781b      	ldrb	r3, [r3, #0]
    6050:	461a      	mov	r2, r3
    6052:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    605a:	2102      	movs	r1, #2
    605c:	5499      	strb	r1, [r3, r2]
    605e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6066:	781b      	ldrb	r3, [r3, #0]
    6068:	3301      	adds	r3, #1
    606a:	b2da      	uxtb	r2, r3
    606c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6074:	701a      	strb	r2, [r3, #0]
    6076:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    607a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    607e:	781b      	ldrb	r3, [r3, #0]
    6080:	2bff      	cmp	r3, #255	; 0xff
    6082:	d105      	bne.n	6090 <ground_calibrate+0x140>
    6084:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    608c:	2200      	movs	r2, #0
    608e:	701a      	strb	r2, [r3, #0]
    6090:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6094:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6098:	2202      	movs	r2, #2
    609a:	701a      	strb	r2, [r3, #0]
    609c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    60a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60a4:	2202      	movs	r2, #2
    60a6:	701a      	strb	r2, [r3, #0]
    60a8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    60ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60b0:	781b      	ldrb	r3, [r3, #0]
    60b2:	461a      	mov	r2, r3
    60b4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    60b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60bc:	7819      	ldrb	r1, [r3, #0]
    60be:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    60c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60c6:	5499      	strb	r1, [r3, r2]
    60c8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    60cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60d0:	781b      	ldrb	r3, [r3, #0]
    60d2:	3301      	adds	r3, #1
    60d4:	b2da      	uxtb	r2, r3
    60d6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    60da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60de:	701a      	strb	r2, [r3, #0]
    60e0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    60e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60e8:	781b      	ldrb	r3, [r3, #0]
    60ea:	2bff      	cmp	r3, #255	; 0xff
    60ec:	d105      	bne.n	60fa <ground_calibrate+0x1aa>
    60ee:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    60f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60f6:	2200      	movs	r2, #0
    60f8:	701a      	strb	r2, [r3, #0]
    60fa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    60fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6102:	781b      	ldrb	r3, [r3, #0]
    6104:	461a      	mov	r2, r3
    6106:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    610a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    610e:	7819      	ldrb	r1, [r3, #0]
    6110:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6118:	5499      	strb	r1, [r3, r2]
    611a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    611e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6122:	781b      	ldrb	r3, [r3, #0]
    6124:	3301      	adds	r3, #1
    6126:	b2da      	uxtb	r2, r3
    6128:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    612c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6130:	701a      	strb	r2, [r3, #0]
    6132:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    613a:	781b      	ldrb	r3, [r3, #0]
    613c:	2bff      	cmp	r3, #255	; 0xff
    613e:	d105      	bne.n	614c <ground_calibrate+0x1fc>
    6140:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6148:	2200      	movs	r2, #0
    614a:	701a      	strb	r2, [r3, #0]
    614c:	f242 0339 	movw	r3, #8249	; 0x2039
    6150:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6154:	781b      	ldrb	r3, [r3, #0]
    6156:	b2db      	uxtb	r3, r3
    6158:	f003 0310 	and.w	r3, r3, #16
    615c:	2b00      	cmp	r3, #0
    615e:	f041 804e 	bne.w	71fe <ground_calibrate+0x12ae>
    6162:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    6166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    616a:	781b      	ldrb	r3, [r3, #0]
    616c:	b2db      	uxtb	r3, r3
    616e:	461a      	mov	r2, r3
    6170:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6178:	5c9a      	ldrb	r2, [r3, r2]
    617a:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    617e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6182:	701a      	strb	r2, [r3, #0]
    6184:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    6188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    618c:	2200      	movs	r2, #0
    618e:	701a      	strb	r2, [r3, #0]
    6190:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    6194:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6198:	781b      	ldrb	r3, [r3, #0]
    619a:	b2db      	uxtb	r3, r3
    619c:	3301      	adds	r3, #1
    619e:	b2da      	uxtb	r2, r3
    61a0:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    61a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61a8:	701a      	strb	r2, [r3, #0]
    61aa:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    61ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61b2:	781b      	ldrb	r3, [r3, #0]
    61b4:	b2db      	uxtb	r3, r3
    61b6:	2bff      	cmp	r3, #255	; 0xff
    61b8:	d105      	bne.n	61c6 <ground_calibrate+0x276>
    61ba:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    61be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61c2:	2200      	movs	r2, #0
    61c4:	701a      	strb	r2, [r3, #0]
    61c6:	f242 0338 	movw	r3, #8248	; 0x2038
    61ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61ce:	f242 0238 	movw	r2, #8248	; 0x2038
    61d2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    61d6:	7812      	ldrb	r2, [r2, #0]
    61d8:	b2d2      	uxtb	r2, r2
    61da:	f042 0201 	orr.w	r2, r2, #1
    61de:	b2d2      	uxtb	r2, r2
    61e0:	701a      	strb	r2, [r3, #0]
    61e2:	f242 0339 	movw	r3, #8249	; 0x2039
    61e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61ea:	f242 0239 	movw	r2, #8249	; 0x2039
    61ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    61f2:	7812      	ldrb	r2, [r2, #0]
    61f4:	b2d2      	uxtb	r2, r2
    61f6:	f042 0210 	orr.w	r2, r2, #16
    61fa:	b2d2      	uxtb	r2, r2
    61fc:	701a      	strb	r2, [r3, #0]
    61fe:	f000 bffe 	b.w	71fe <ground_calibrate+0x12ae>
    6202:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    6206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    620a:	781b      	ldrb	r3, [r3, #0]
    620c:	3301      	adds	r3, #1
    620e:	b2da      	uxtb	r2, r3
    6210:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    6214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6218:	701a      	strb	r2, [r3, #0]
    621a:	f000 bff0 	b.w	71fe <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    621e:	f64b 63f2 	movw	r3, #48882	; 0xbef2
    6222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6226:	781b      	ldrb	r3, [r3, #0]
    6228:	2b01      	cmp	r3, #1
    622a:	f040 87e8 	bne.w	71fe <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    622e:	f24c 0300 	movw	r3, #49152	; 0xc000
    6232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6236:	885b      	ldrh	r3, [r3, #2]
    6238:	b21b      	sxth	r3, r3
    623a:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    623e:	db09      	blt.n	6254 <ground_calibrate+0x304>
    6240:	f24c 0300 	movw	r3, #49152	; 0xc000
    6244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6248:	885b      	ldrh	r3, [r3, #2]
    624a:	b21b      	sxth	r3, r3
    624c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    6250:	f340 87d5 	ble.w	71fe <ground_calibrate+0x12ae>
      ir_gain_calib();
    6254:	f00b fcfc 	bl	11c50 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    6258:	f240 33f8 	movw	r3, #1016	; 0x3f8
    625c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6260:	681a      	ldr	r2, [r3, #0]
    6262:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
    6266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    626a:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    626c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6274:	781a      	ldrb	r2, [r3, #0]
    6276:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    627a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    627e:	781b      	ldrb	r3, [r3, #0]
    6280:	b2db      	uxtb	r3, r3
    6282:	429a      	cmp	r2, r3
    6284:	d313      	bcc.n	62ae <ground_calibrate+0x35e>
    6286:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    628a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    628e:	781b      	ldrb	r3, [r3, #0]
    6290:	b2db      	uxtb	r3, r3
    6292:	461a      	mov	r2, r3
    6294:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    629c:	781b      	ldrb	r3, [r3, #0]
    629e:	1ad3      	subs	r3, r2, r3
    62a0:	33ff      	adds	r3, #255	; 0xff
    62a2:	2b14      	cmp	r3, #20
    62a4:	bfd4      	ite	le
    62a6:	2300      	movle	r3, #0
    62a8:	2301      	movgt	r3, #1
    62aa:	b2db      	uxtb	r3, r3
    62ac:	e011      	b.n	62d2 <ground_calibrate+0x382>
    62ae:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    62b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62b6:	781b      	ldrb	r3, [r3, #0]
    62b8:	b2db      	uxtb	r3, r3
    62ba:	461a      	mov	r2, r3
    62bc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    62c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62c4:	781b      	ldrb	r3, [r3, #0]
    62c6:	1ad3      	subs	r3, r2, r3
    62c8:	2b14      	cmp	r3, #20
    62ca:	bfd4      	ite	le
    62cc:	2300      	movle	r3, #0
    62ce:	2301      	movgt	r3, #1
    62d0:	b2db      	uxtb	r3, r3
    62d2:	2b00      	cmp	r3, #0
    62d4:	f000 85a6 	beq.w	6e24 <ground_calibrate+0xed4>
    62d8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    62dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62e0:	781b      	ldrb	r3, [r3, #0]
    62e2:	461a      	mov	r2, r3
    62e4:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    62e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ec:	2105      	movs	r1, #5
    62ee:	5499      	strb	r1, [r3, r2]
    62f0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    62f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62f8:	781b      	ldrb	r3, [r3, #0]
    62fa:	3301      	adds	r3, #1
    62fc:	b2da      	uxtb	r2, r3
    62fe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6306:	701a      	strb	r2, [r3, #0]
    6308:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    630c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6310:	781b      	ldrb	r3, [r3, #0]
    6312:	2bff      	cmp	r3, #255	; 0xff
    6314:	d105      	bne.n	6322 <ground_calibrate+0x3d2>
    6316:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    631a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    631e:	2200      	movs	r2, #0
    6320:	701a      	strb	r2, [r3, #0]
    6322:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    632a:	781b      	ldrb	r3, [r3, #0]
    632c:	461a      	mov	r2, r3
    632e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6336:	2105      	movs	r1, #5
    6338:	5499      	strb	r1, [r3, r2]
    633a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    633e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6342:	781b      	ldrb	r3, [r3, #0]
    6344:	3301      	adds	r3, #1
    6346:	b2da      	uxtb	r2, r3
    6348:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    634c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6350:	701a      	strb	r2, [r3, #0]
    6352:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    635a:	781b      	ldrb	r3, [r3, #0]
    635c:	2bff      	cmp	r3, #255	; 0xff
    635e:	d105      	bne.n	636c <ground_calibrate+0x41c>
    6360:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6368:	2200      	movs	r2, #0
    636a:	701a      	strb	r2, [r3, #0]
    636c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6374:	2205      	movs	r2, #5
    6376:	701a      	strb	r2, [r3, #0]
    6378:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    637c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6380:	2205      	movs	r2, #5
    6382:	701a      	strb	r2, [r3, #0]
    6384:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    638c:	781b      	ldrb	r3, [r3, #0]
    638e:	461a      	mov	r2, r3
    6390:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    6394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6398:	7819      	ldrb	r1, [r3, #0]
    639a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    639e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63a2:	5499      	strb	r1, [r3, r2]
    63a4:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    63a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ac:	781a      	ldrb	r2, [r3, #0]
    63ae:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    63b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63b6:	781b      	ldrb	r3, [r3, #0]
    63b8:	4413      	add	r3, r2
    63ba:	b2da      	uxtb	r2, r3
    63bc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    63c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63c4:	701a      	strb	r2, [r3, #0]
    63c6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    63ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ce:	781a      	ldrb	r2, [r3, #0]
    63d0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    63d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63d8:	781b      	ldrb	r3, [r3, #0]
    63da:	4413      	add	r3, r2
    63dc:	b2da      	uxtb	r2, r3
    63de:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    63e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63e6:	701a      	strb	r2, [r3, #0]
    63e8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    63ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63f0:	781b      	ldrb	r3, [r3, #0]
    63f2:	3301      	adds	r3, #1
    63f4:	b2da      	uxtb	r2, r3
    63f6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    63fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63fe:	701a      	strb	r2, [r3, #0]
    6400:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6408:	781b      	ldrb	r3, [r3, #0]
    640a:	2bff      	cmp	r3, #255	; 0xff
    640c:	d105      	bne.n	641a <ground_calibrate+0x4ca>
    640e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6416:	2200      	movs	r2, #0
    6418:	701a      	strb	r2, [r3, #0]
    641a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    641e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6422:	781b      	ldrb	r3, [r3, #0]
    6424:	461a      	mov	r2, r3
    6426:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    642a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    642e:	7859      	ldrb	r1, [r3, #1]
    6430:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6438:	5499      	strb	r1, [r3, r2]
    643a:	4bd2      	ldr	r3, [pc, #840]	; (6784 <ground_calibrate+0x834>)
    643c:	781a      	ldrb	r2, [r3, #0]
    643e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6446:	781b      	ldrb	r3, [r3, #0]
    6448:	4413      	add	r3, r2
    644a:	b2da      	uxtb	r2, r3
    644c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6454:	701a      	strb	r2, [r3, #0]
    6456:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    645a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    645e:	781a      	ldrb	r2, [r3, #0]
    6460:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6468:	781b      	ldrb	r3, [r3, #0]
    646a:	4413      	add	r3, r2
    646c:	b2da      	uxtb	r2, r3
    646e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6476:	701a      	strb	r2, [r3, #0]
    6478:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    647c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6480:	781b      	ldrb	r3, [r3, #0]
    6482:	3301      	adds	r3, #1
    6484:	b2da      	uxtb	r2, r3
    6486:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    648a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    648e:	701a      	strb	r2, [r3, #0]
    6490:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6498:	781b      	ldrb	r3, [r3, #0]
    649a:	2bff      	cmp	r3, #255	; 0xff
    649c:	d105      	bne.n	64aa <ground_calibrate+0x55a>
    649e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    64a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64a6:	2200      	movs	r2, #0
    64a8:	701a      	strb	r2, [r3, #0]
    64aa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    64ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64b2:	781b      	ldrb	r3, [r3, #0]
    64b4:	461a      	mov	r2, r3
    64b6:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    64ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64be:	7899      	ldrb	r1, [r3, #2]
    64c0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    64c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64c8:	5499      	strb	r1, [r3, r2]
    64ca:	4baf      	ldr	r3, [pc, #700]	; (6788 <ground_calibrate+0x838>)
    64cc:	781a      	ldrb	r2, [r3, #0]
    64ce:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    64d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64d6:	781b      	ldrb	r3, [r3, #0]
    64d8:	4413      	add	r3, r2
    64da:	b2da      	uxtb	r2, r3
    64dc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    64e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64e4:	701a      	strb	r2, [r3, #0]
    64e6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    64ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64ee:	781a      	ldrb	r2, [r3, #0]
    64f0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    64f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64f8:	781b      	ldrb	r3, [r3, #0]
    64fa:	4413      	add	r3, r2
    64fc:	b2da      	uxtb	r2, r3
    64fe:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6506:	701a      	strb	r2, [r3, #0]
    6508:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    650c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6510:	781b      	ldrb	r3, [r3, #0]
    6512:	3301      	adds	r3, #1
    6514:	b2da      	uxtb	r2, r3
    6516:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    651a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    651e:	701a      	strb	r2, [r3, #0]
    6520:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6528:	781b      	ldrb	r3, [r3, #0]
    652a:	2bff      	cmp	r3, #255	; 0xff
    652c:	d105      	bne.n	653a <ground_calibrate+0x5ea>
    652e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6536:	2200      	movs	r2, #0
    6538:	701a      	strb	r2, [r3, #0]
    653a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    653e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6542:	781b      	ldrb	r3, [r3, #0]
    6544:	461a      	mov	r2, r3
    6546:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    654a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    654e:	78d9      	ldrb	r1, [r3, #3]
    6550:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6558:	5499      	strb	r1, [r3, r2]
    655a:	4b8c      	ldr	r3, [pc, #560]	; (678c <ground_calibrate+0x83c>)
    655c:	781a      	ldrb	r2, [r3, #0]
    655e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6566:	781b      	ldrb	r3, [r3, #0]
    6568:	4413      	add	r3, r2
    656a:	b2da      	uxtb	r2, r3
    656c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6574:	701a      	strb	r2, [r3, #0]
    6576:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    657a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    657e:	781a      	ldrb	r2, [r3, #0]
    6580:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6588:	781b      	ldrb	r3, [r3, #0]
    658a:	4413      	add	r3, r2
    658c:	b2da      	uxtb	r2, r3
    658e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6596:	701a      	strb	r2, [r3, #0]
    6598:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    659c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65a0:	781b      	ldrb	r3, [r3, #0]
    65a2:	3301      	adds	r3, #1
    65a4:	b2da      	uxtb	r2, r3
    65a6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    65aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ae:	701a      	strb	r2, [r3, #0]
    65b0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    65b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65b8:	781b      	ldrb	r3, [r3, #0]
    65ba:	2bff      	cmp	r3, #255	; 0xff
    65bc:	d105      	bne.n	65ca <ground_calibrate+0x67a>
    65be:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    65c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65c6:	2200      	movs	r2, #0
    65c8:	701a      	strb	r2, [r3, #0]
    65ca:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    65ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65d2:	781b      	ldrb	r3, [r3, #0]
    65d4:	461a      	mov	r2, r3
    65d6:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
    65da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65de:	7819      	ldrb	r1, [r3, #0]
    65e0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    65e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65e8:	5499      	strb	r1, [r3, r2]
    65ea:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
    65ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65f2:	781a      	ldrb	r2, [r3, #0]
    65f4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    65f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65fc:	781b      	ldrb	r3, [r3, #0]
    65fe:	4413      	add	r3, r2
    6600:	b2da      	uxtb	r2, r3
    6602:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    660a:	701a      	strb	r2, [r3, #0]
    660c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6614:	781a      	ldrb	r2, [r3, #0]
    6616:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    661a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    661e:	781b      	ldrb	r3, [r3, #0]
    6620:	4413      	add	r3, r2
    6622:	b2da      	uxtb	r2, r3
    6624:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    662c:	701a      	strb	r2, [r3, #0]
    662e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6636:	781b      	ldrb	r3, [r3, #0]
    6638:	3301      	adds	r3, #1
    663a:	b2da      	uxtb	r2, r3
    663c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6644:	701a      	strb	r2, [r3, #0]
    6646:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    664a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    664e:	781b      	ldrb	r3, [r3, #0]
    6650:	2bff      	cmp	r3, #255	; 0xff
    6652:	d105      	bne.n	6660 <ground_calibrate+0x710>
    6654:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    665c:	2200      	movs	r2, #0
    665e:	701a      	strb	r2, [r3, #0]
    6660:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6668:	781b      	ldrb	r3, [r3, #0]
    666a:	461a      	mov	r2, r3
    666c:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
    6670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6674:	7859      	ldrb	r1, [r3, #1]
    6676:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    667a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    667e:	5499      	strb	r1, [r3, r2]
    6680:	4b43      	ldr	r3, [pc, #268]	; (6790 <ground_calibrate+0x840>)
    6682:	781a      	ldrb	r2, [r3, #0]
    6684:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    668c:	781b      	ldrb	r3, [r3, #0]
    668e:	4413      	add	r3, r2
    6690:	b2da      	uxtb	r2, r3
    6692:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    669a:	701a      	strb	r2, [r3, #0]
    669c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    66a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66a4:	781a      	ldrb	r2, [r3, #0]
    66a6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    66aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ae:	781b      	ldrb	r3, [r3, #0]
    66b0:	4413      	add	r3, r2
    66b2:	b2da      	uxtb	r2, r3
    66b4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    66b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66bc:	701a      	strb	r2, [r3, #0]
    66be:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    66c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66c6:	781b      	ldrb	r3, [r3, #0]
    66c8:	3301      	adds	r3, #1
    66ca:	b2da      	uxtb	r2, r3
    66cc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    66d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66d4:	701a      	strb	r2, [r3, #0]
    66d6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    66da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66de:	781b      	ldrb	r3, [r3, #0]
    66e0:	2bff      	cmp	r3, #255	; 0xff
    66e2:	d105      	bne.n	66f0 <ground_calibrate+0x7a0>
    66e4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    66e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ec:	2200      	movs	r2, #0
    66ee:	701a      	strb	r2, [r3, #0]
    66f0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    66f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66f8:	781b      	ldrb	r3, [r3, #0]
    66fa:	461a      	mov	r2, r3
    66fc:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
    6700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6704:	7899      	ldrb	r1, [r3, #2]
    6706:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    670a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    670e:	5499      	strb	r1, [r3, r2]
    6710:	4b20      	ldr	r3, [pc, #128]	; (6794 <ground_calibrate+0x844>)
    6712:	781a      	ldrb	r2, [r3, #0]
    6714:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    671c:	781b      	ldrb	r3, [r3, #0]
    671e:	4413      	add	r3, r2
    6720:	b2da      	uxtb	r2, r3
    6722:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    672a:	701a      	strb	r2, [r3, #0]
    672c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6734:	781a      	ldrb	r2, [r3, #0]
    6736:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    673a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    673e:	781b      	ldrb	r3, [r3, #0]
    6740:	4413      	add	r3, r2
    6742:	b2da      	uxtb	r2, r3
    6744:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    674c:	701a      	strb	r2, [r3, #0]
    674e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6756:	781b      	ldrb	r3, [r3, #0]
    6758:	3301      	adds	r3, #1
    675a:	b2da      	uxtb	r2, r3
    675c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6764:	701a      	strb	r2, [r3, #0]
    6766:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    676a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    676e:	781b      	ldrb	r3, [r3, #0]
    6770:	2bff      	cmp	r3, #255	; 0xff
    6772:	d111      	bne.n	6798 <ground_calibrate+0x848>
    6774:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    677c:	2200      	movs	r2, #0
    677e:	701a      	strb	r2, [r3, #0]
    6780:	e00a      	b.n	6798 <ground_calibrate+0x848>
    6782:	bf00      	nop
    6784:	2004c4f1 	.word	0x2004c4f1
    6788:	2004c4f2 	.word	0x2004c4f2
    678c:	2004c4f3 	.word	0x2004c4f3
    6790:	2004c4f5 	.word	0x2004c4f5
    6794:	2004c4f6 	.word	0x2004c4f6
    6798:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    679c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67a0:	781b      	ldrb	r3, [r3, #0]
    67a2:	461a      	mov	r2, r3
    67a4:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
    67a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ac:	78d9      	ldrb	r1, [r3, #3]
    67ae:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    67b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67b6:	5499      	strb	r1, [r3, r2]
    67b8:	4bd3      	ldr	r3, [pc, #844]	; (6b08 <ground_calibrate+0xbb8>)
    67ba:	781a      	ldrb	r2, [r3, #0]
    67bc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    67c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67c4:	781b      	ldrb	r3, [r3, #0]
    67c6:	4413      	add	r3, r2
    67c8:	b2da      	uxtb	r2, r3
    67ca:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    67ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67d2:	701a      	strb	r2, [r3, #0]
    67d4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    67d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67dc:	781a      	ldrb	r2, [r3, #0]
    67de:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    67e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67e6:	781b      	ldrb	r3, [r3, #0]
    67e8:	4413      	add	r3, r2
    67ea:	b2da      	uxtb	r2, r3
    67ec:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    67f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67f4:	701a      	strb	r2, [r3, #0]
    67f6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    67fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67fe:	781b      	ldrb	r3, [r3, #0]
    6800:	3301      	adds	r3, #1
    6802:	b2da      	uxtb	r2, r3
    6804:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    680c:	701a      	strb	r2, [r3, #0]
    680e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6816:	781b      	ldrb	r3, [r3, #0]
    6818:	2bff      	cmp	r3, #255	; 0xff
    681a:	d105      	bne.n	6828 <ground_calibrate+0x8d8>
    681c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6824:	2200      	movs	r2, #0
    6826:	701a      	strb	r2, [r3, #0]
    6828:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    682c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6830:	781b      	ldrb	r3, [r3, #0]
    6832:	461a      	mov	r2, r3
    6834:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
    6838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    683c:	7819      	ldrb	r1, [r3, #0]
    683e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6846:	5499      	strb	r1, [r3, r2]
    6848:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
    684c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6850:	781a      	ldrb	r2, [r3, #0]
    6852:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    685a:	781b      	ldrb	r3, [r3, #0]
    685c:	4413      	add	r3, r2
    685e:	b2da      	uxtb	r2, r3
    6860:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6868:	701a      	strb	r2, [r3, #0]
    686a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    686e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6872:	781a      	ldrb	r2, [r3, #0]
    6874:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    687c:	781b      	ldrb	r3, [r3, #0]
    687e:	4413      	add	r3, r2
    6880:	b2da      	uxtb	r2, r3
    6882:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    688a:	701a      	strb	r2, [r3, #0]
    688c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6894:	781b      	ldrb	r3, [r3, #0]
    6896:	3301      	adds	r3, #1
    6898:	b2da      	uxtb	r2, r3
    689a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    689e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68a2:	701a      	strb	r2, [r3, #0]
    68a4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    68a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ac:	781b      	ldrb	r3, [r3, #0]
    68ae:	2bff      	cmp	r3, #255	; 0xff
    68b0:	d105      	bne.n	68be <ground_calibrate+0x96e>
    68b2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    68b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ba:	2200      	movs	r2, #0
    68bc:	701a      	strb	r2, [r3, #0]
    68be:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    68c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68c6:	781b      	ldrb	r3, [r3, #0]
    68c8:	461a      	mov	r2, r3
    68ca:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
    68ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68d2:	7859      	ldrb	r1, [r3, #1]
    68d4:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    68d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68dc:	5499      	strb	r1, [r3, r2]
    68de:	4b8b      	ldr	r3, [pc, #556]	; (6b0c <ground_calibrate+0xbbc>)
    68e0:	781a      	ldrb	r2, [r3, #0]
    68e2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    68e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ea:	781b      	ldrb	r3, [r3, #0]
    68ec:	4413      	add	r3, r2
    68ee:	b2da      	uxtb	r2, r3
    68f0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    68f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68f8:	701a      	strb	r2, [r3, #0]
    68fa:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    68fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6902:	781a      	ldrb	r2, [r3, #0]
    6904:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    690c:	781b      	ldrb	r3, [r3, #0]
    690e:	4413      	add	r3, r2
    6910:	b2da      	uxtb	r2, r3
    6912:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    691a:	701a      	strb	r2, [r3, #0]
    691c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6924:	781b      	ldrb	r3, [r3, #0]
    6926:	3301      	adds	r3, #1
    6928:	b2da      	uxtb	r2, r3
    692a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    692e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6932:	701a      	strb	r2, [r3, #0]
    6934:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    693c:	781b      	ldrb	r3, [r3, #0]
    693e:	2bff      	cmp	r3, #255	; 0xff
    6940:	d105      	bne.n	694e <ground_calibrate+0x9fe>
    6942:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    694a:	2200      	movs	r2, #0
    694c:	701a      	strb	r2, [r3, #0]
    694e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6956:	781b      	ldrb	r3, [r3, #0]
    6958:	461a      	mov	r2, r3
    695a:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
    695e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6962:	7899      	ldrb	r1, [r3, #2]
    6964:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    696c:	5499      	strb	r1, [r3, r2]
    696e:	4b68      	ldr	r3, [pc, #416]	; (6b10 <ground_calibrate+0xbc0>)
    6970:	781a      	ldrb	r2, [r3, #0]
    6972:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    697a:	781b      	ldrb	r3, [r3, #0]
    697c:	4413      	add	r3, r2
    697e:	b2da      	uxtb	r2, r3
    6980:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6988:	701a      	strb	r2, [r3, #0]
    698a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    698e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6992:	781a      	ldrb	r2, [r3, #0]
    6994:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    699c:	781b      	ldrb	r3, [r3, #0]
    699e:	4413      	add	r3, r2
    69a0:	b2da      	uxtb	r2, r3
    69a2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    69a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69aa:	701a      	strb	r2, [r3, #0]
    69ac:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    69b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69b4:	781b      	ldrb	r3, [r3, #0]
    69b6:	3301      	adds	r3, #1
    69b8:	b2da      	uxtb	r2, r3
    69ba:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    69be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69c2:	701a      	strb	r2, [r3, #0]
    69c4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    69c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69cc:	781b      	ldrb	r3, [r3, #0]
    69ce:	2bff      	cmp	r3, #255	; 0xff
    69d0:	d105      	bne.n	69de <ground_calibrate+0xa8e>
    69d2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    69d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69da:	2200      	movs	r2, #0
    69dc:	701a      	strb	r2, [r3, #0]
    69de:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    69e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69e6:	781b      	ldrb	r3, [r3, #0]
    69e8:	461a      	mov	r2, r3
    69ea:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
    69ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69f2:	78d9      	ldrb	r1, [r3, #3]
    69f4:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    69f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69fc:	5499      	strb	r1, [r3, r2]
    69fe:	4b45      	ldr	r3, [pc, #276]	; (6b14 <ground_calibrate+0xbc4>)
    6a00:	781a      	ldrb	r2, [r3, #0]
    6a02:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a0a:	781b      	ldrb	r3, [r3, #0]
    6a0c:	4413      	add	r3, r2
    6a0e:	b2da      	uxtb	r2, r3
    6a10:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a18:	701a      	strb	r2, [r3, #0]
    6a1a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a22:	781a      	ldrb	r2, [r3, #0]
    6a24:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a2c:	781b      	ldrb	r3, [r3, #0]
    6a2e:	4413      	add	r3, r2
    6a30:	b2da      	uxtb	r2, r3
    6a32:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a3a:	701a      	strb	r2, [r3, #0]
    6a3c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a44:	781b      	ldrb	r3, [r3, #0]
    6a46:	3301      	adds	r3, #1
    6a48:	b2da      	uxtb	r2, r3
    6a4a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a52:	701a      	strb	r2, [r3, #0]
    6a54:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a5c:	781b      	ldrb	r3, [r3, #0]
    6a5e:	2bff      	cmp	r3, #255	; 0xff
    6a60:	d105      	bne.n	6a6e <ground_calibrate+0xb1e>
    6a62:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a6a:	2200      	movs	r2, #0
    6a6c:	701a      	strb	r2, [r3, #0]
    6a6e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a76:	781b      	ldrb	r3, [r3, #0]
    6a78:	461a      	mov	r2, r3
    6a7a:	f240 33f2 	movw	r3, #1010	; 0x3f2
    6a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a82:	7819      	ldrb	r1, [r3, #0]
    6a84:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a8c:	5499      	strb	r1, [r3, r2]
    6a8e:	f240 33f2 	movw	r3, #1010	; 0x3f2
    6a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a96:	781a      	ldrb	r2, [r3, #0]
    6a98:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aa0:	781b      	ldrb	r3, [r3, #0]
    6aa2:	4413      	add	r3, r2
    6aa4:	b2da      	uxtb	r2, r3
    6aa6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6aaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aae:	701a      	strb	r2, [r3, #0]
    6ab0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ab8:	781a      	ldrb	r2, [r3, #0]
    6aba:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ac2:	781b      	ldrb	r3, [r3, #0]
    6ac4:	4413      	add	r3, r2
    6ac6:	b2da      	uxtb	r2, r3
    6ac8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ad0:	701a      	strb	r2, [r3, #0]
    6ad2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ada:	781b      	ldrb	r3, [r3, #0]
    6adc:	3301      	adds	r3, #1
    6ade:	b2da      	uxtb	r2, r3
    6ae0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ae8:	701a      	strb	r2, [r3, #0]
    6aea:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6af2:	781b      	ldrb	r3, [r3, #0]
    6af4:	2bff      	cmp	r3, #255	; 0xff
    6af6:	d10f      	bne.n	6b18 <ground_calibrate+0xbc8>
    6af8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b00:	2200      	movs	r2, #0
    6b02:	701a      	strb	r2, [r3, #0]
    6b04:	e008      	b.n	6b18 <ground_calibrate+0xbc8>
    6b06:	bf00      	nop
    6b08:	2004c4f7 	.word	0x2004c4f7
    6b0c:	2004c4ed 	.word	0x2004c4ed
    6b10:	2004c4ee 	.word	0x2004c4ee
    6b14:	2004c4ef 	.word	0x2004c4ef
    6b18:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b20:	781b      	ldrb	r3, [r3, #0]
    6b22:	461a      	mov	r2, r3
    6b24:	f240 33f2 	movw	r3, #1010	; 0x3f2
    6b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b2c:	7859      	ldrb	r1, [r3, #1]
    6b2e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6b32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b36:	5499      	strb	r1, [r3, r2]
    6b38:	4bd4      	ldr	r3, [pc, #848]	; (6e8c <ground_calibrate+0xf3c>)
    6b3a:	781a      	ldrb	r2, [r3, #0]
    6b3c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b44:	781b      	ldrb	r3, [r3, #0]
    6b46:	4413      	add	r3, r2
    6b48:	b2da      	uxtb	r2, r3
    6b4a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b52:	701a      	strb	r2, [r3, #0]
    6b54:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b5c:	781a      	ldrb	r2, [r3, #0]
    6b5e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6b62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b66:	781b      	ldrb	r3, [r3, #0]
    6b68:	4413      	add	r3, r2
    6b6a:	b2da      	uxtb	r2, r3
    6b6c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b74:	701a      	strb	r2, [r3, #0]
    6b76:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b7e:	781b      	ldrb	r3, [r3, #0]
    6b80:	3301      	adds	r3, #1
    6b82:	b2da      	uxtb	r2, r3
    6b84:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b8c:	701a      	strb	r2, [r3, #0]
    6b8e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b96:	781b      	ldrb	r3, [r3, #0]
    6b98:	2bff      	cmp	r3, #255	; 0xff
    6b9a:	d105      	bne.n	6ba8 <ground_calibrate+0xc58>
    6b9c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ba4:	2200      	movs	r2, #0
    6ba6:	701a      	strb	r2, [r3, #0]
    6ba8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6bac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bb0:	781b      	ldrb	r3, [r3, #0]
    6bb2:	461a      	mov	r2, r3
    6bb4:	f240 33f4 	movw	r3, #1012	; 0x3f4
    6bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bbc:	7819      	ldrb	r1, [r3, #0]
    6bbe:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6bc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bc6:	5499      	strb	r1, [r3, r2]
    6bc8:	f240 33f4 	movw	r3, #1012	; 0x3f4
    6bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bd0:	781a      	ldrb	r2, [r3, #0]
    6bd2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bda:	781b      	ldrb	r3, [r3, #0]
    6bdc:	4413      	add	r3, r2
    6bde:	b2da      	uxtb	r2, r3
    6be0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6be8:	701a      	strb	r2, [r3, #0]
    6bea:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bf2:	781a      	ldrb	r2, [r3, #0]
    6bf4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bfc:	781b      	ldrb	r3, [r3, #0]
    6bfe:	4413      	add	r3, r2
    6c00:	b2da      	uxtb	r2, r3
    6c02:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6c06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c0a:	701a      	strb	r2, [r3, #0]
    6c0c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6c10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c14:	781b      	ldrb	r3, [r3, #0]
    6c16:	3301      	adds	r3, #1
    6c18:	b2da      	uxtb	r2, r3
    6c1a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6c1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c22:	701a      	strb	r2, [r3, #0]
    6c24:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c2c:	781b      	ldrb	r3, [r3, #0]
    6c2e:	2bff      	cmp	r3, #255	; 0xff
    6c30:	d105      	bne.n	6c3e <ground_calibrate+0xcee>
    6c32:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6c36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c3a:	2200      	movs	r2, #0
    6c3c:	701a      	strb	r2, [r3, #0]
    6c3e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c46:	781b      	ldrb	r3, [r3, #0]
    6c48:	461a      	mov	r2, r3
    6c4a:	f240 33f4 	movw	r3, #1012	; 0x3f4
    6c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c52:	7859      	ldrb	r1, [r3, #1]
    6c54:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c5c:	5499      	strb	r1, [r3, r2]
    6c5e:	4b8c      	ldr	r3, [pc, #560]	; (6e90 <ground_calibrate+0xf40>)
    6c60:	781a      	ldrb	r2, [r3, #0]
    6c62:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6c66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c6a:	781b      	ldrb	r3, [r3, #0]
    6c6c:	4413      	add	r3, r2
    6c6e:	b2da      	uxtb	r2, r3
    6c70:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6c74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c78:	701a      	strb	r2, [r3, #0]
    6c7a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c82:	781a      	ldrb	r2, [r3, #0]
    6c84:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c8c:	781b      	ldrb	r3, [r3, #0]
    6c8e:	4413      	add	r3, r2
    6c90:	b2da      	uxtb	r2, r3
    6c92:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6c96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c9a:	701a      	strb	r2, [r3, #0]
    6c9c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ca4:	781b      	ldrb	r3, [r3, #0]
    6ca6:	3301      	adds	r3, #1
    6ca8:	b2da      	uxtb	r2, r3
    6caa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6cae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cb2:	701a      	strb	r2, [r3, #0]
    6cb4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cbc:	781b      	ldrb	r3, [r3, #0]
    6cbe:	2bff      	cmp	r3, #255	; 0xff
    6cc0:	d105      	bne.n	6cce <ground_calibrate+0xd7e>
    6cc2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6cc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cca:	2200      	movs	r2, #0
    6ccc:	701a      	strb	r2, [r3, #0]
    6cce:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6cd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cd6:	781b      	ldrb	r3, [r3, #0]
    6cd8:	461a      	mov	r2, r3
    6cda:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ce2:	7819      	ldrb	r1, [r3, #0]
    6ce4:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6ce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cec:	5499      	strb	r1, [r3, r2]
    6cee:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6cf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cf6:	781b      	ldrb	r3, [r3, #0]
    6cf8:	3301      	adds	r3, #1
    6cfa:	b2da      	uxtb	r2, r3
    6cfc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d04:	701a      	strb	r2, [r3, #0]
    6d06:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d0e:	781b      	ldrb	r3, [r3, #0]
    6d10:	2bff      	cmp	r3, #255	; 0xff
    6d12:	d105      	bne.n	6d20 <ground_calibrate+0xdd0>
    6d14:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6d18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d1c:	2200      	movs	r2, #0
    6d1e:	701a      	strb	r2, [r3, #0]
    6d20:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d28:	781b      	ldrb	r3, [r3, #0]
    6d2a:	461a      	mov	r2, r3
    6d2c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6d30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d34:	7819      	ldrb	r1, [r3, #0]
    6d36:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6d3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d3e:	5499      	strb	r1, [r3, r2]
    6d40:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6d44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d48:	781b      	ldrb	r3, [r3, #0]
    6d4a:	3301      	adds	r3, #1
    6d4c:	b2da      	uxtb	r2, r3
    6d4e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6d52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d56:	701a      	strb	r2, [r3, #0]
    6d58:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6d5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d60:	781b      	ldrb	r3, [r3, #0]
    6d62:	2bff      	cmp	r3, #255	; 0xff
    6d64:	d105      	bne.n	6d72 <ground_calibrate+0xe22>
    6d66:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d6e:	2200      	movs	r2, #0
    6d70:	701a      	strb	r2, [r3, #0]
    6d72:	f242 0339 	movw	r3, #8249	; 0x2039
    6d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d7a:	781b      	ldrb	r3, [r3, #0]
    6d7c:	b2db      	uxtb	r3, r3
    6d7e:	f003 0310 	and.w	r3, r3, #16
    6d82:	2b00      	cmp	r3, #0
    6d84:	d15a      	bne.n	6e3c <ground_calibrate+0xeec>
    6d86:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    6d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d8e:	781b      	ldrb	r3, [r3, #0]
    6d90:	b2db      	uxtb	r3, r3
    6d92:	461a      	mov	r2, r3
    6d94:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6d98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d9c:	5c9a      	ldrb	r2, [r3, r2]
    6d9e:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    6da2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6da6:	701a      	strb	r2, [r3, #0]
    6da8:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    6dac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6db0:	2200      	movs	r2, #0
    6db2:	701a      	strb	r2, [r3, #0]
    6db4:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    6db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dbc:	781b      	ldrb	r3, [r3, #0]
    6dbe:	b2db      	uxtb	r3, r3
    6dc0:	3301      	adds	r3, #1
    6dc2:	b2da      	uxtb	r2, r3
    6dc4:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    6dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dcc:	701a      	strb	r2, [r3, #0]
    6dce:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    6dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dd6:	781b      	ldrb	r3, [r3, #0]
    6dd8:	b2db      	uxtb	r3, r3
    6dda:	2bff      	cmp	r3, #255	; 0xff
    6ddc:	d105      	bne.n	6dea <ground_calibrate+0xe9a>
    6dde:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    6de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6de6:	2200      	movs	r2, #0
    6de8:	701a      	strb	r2, [r3, #0]
    6dea:	f242 0338 	movw	r3, #8248	; 0x2038
    6dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6df2:	f242 0238 	movw	r2, #8248	; 0x2038
    6df6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6dfa:	7812      	ldrb	r2, [r2, #0]
    6dfc:	b2d2      	uxtb	r2, r2
    6dfe:	f042 0201 	orr.w	r2, r2, #1
    6e02:	b2d2      	uxtb	r2, r2
    6e04:	701a      	strb	r2, [r3, #0]
    6e06:	f242 0339 	movw	r3, #8249	; 0x2039
    6e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e0e:	f242 0239 	movw	r2, #8249	; 0x2039
    6e12:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6e16:	7812      	ldrb	r2, [r2, #0]
    6e18:	b2d2      	uxtb	r2, r2
    6e1a:	f042 0210 	orr.w	r2, r2, #16
    6e1e:	b2d2      	uxtb	r2, r2
    6e20:	701a      	strb	r2, [r3, #0]
    6e22:	e00b      	b.n	6e3c <ground_calibrate+0xeec>
    6e24:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    6e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e2c:	781b      	ldrb	r3, [r3, #0]
    6e2e:	3301      	adds	r3, #1
    6e30:	b2da      	uxtb	r2, r3
    6e32:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    6e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e3a:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    6e3c:	f64b 63f2 	movw	r3, #48882	; 0xbef2
    6e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e44:	2202      	movs	r2, #2
    6e46:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    6e48:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e50:	781a      	ldrb	r2, [r3, #0]
    6e52:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    6e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e5a:	781b      	ldrb	r3, [r3, #0]
    6e5c:	b2db      	uxtb	r3, r3
    6e5e:	429a      	cmp	r2, r3
    6e60:	d318      	bcc.n	6e94 <ground_calibrate+0xf44>
    6e62:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    6e66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e6a:	781b      	ldrb	r3, [r3, #0]
    6e6c:	b2db      	uxtb	r3, r3
    6e6e:	461a      	mov	r2, r3
    6e70:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e78:	781b      	ldrb	r3, [r3, #0]
    6e7a:	1ad3      	subs	r3, r2, r3
    6e7c:	33ff      	adds	r3, #255	; 0xff
    6e7e:	2b06      	cmp	r3, #6
    6e80:	bfd4      	ite	le
    6e82:	2300      	movle	r3, #0
    6e84:	2301      	movgt	r3, #1
    6e86:	b2db      	uxtb	r3, r3
    6e88:	e016      	b.n	6eb8 <ground_calibrate+0xf68>
    6e8a:	bf00      	nop
    6e8c:	200003f3 	.word	0x200003f3
    6e90:	200003f5 	.word	0x200003f5
    6e94:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    6e98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e9c:	781b      	ldrb	r3, [r3, #0]
    6e9e:	b2db      	uxtb	r3, r3
    6ea0:	461a      	mov	r2, r3
    6ea2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eaa:	781b      	ldrb	r3, [r3, #0]
    6eac:	1ad3      	subs	r3, r2, r3
    6eae:	2b06      	cmp	r3, #6
    6eb0:	bfd4      	ite	le
    6eb2:	2300      	movle	r3, #0
    6eb4:	2301      	movgt	r3, #1
    6eb6:	b2db      	uxtb	r3, r3
    6eb8:	2b00      	cmp	r3, #0
    6eba:	f000 8194 	beq.w	71e6 <ground_calibrate+0x1296>
    6ebe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ec6:	781b      	ldrb	r3, [r3, #0]
    6ec8:	461a      	mov	r2, r3
    6eca:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ed2:	2105      	movs	r1, #5
    6ed4:	5499      	strb	r1, [r3, r2]
    6ed6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ede:	781b      	ldrb	r3, [r3, #0]
    6ee0:	3301      	adds	r3, #1
    6ee2:	b2da      	uxtb	r2, r3
    6ee4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6ee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eec:	701a      	strb	r2, [r3, #0]
    6eee:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6ef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ef6:	781b      	ldrb	r3, [r3, #0]
    6ef8:	2bff      	cmp	r3, #255	; 0xff
    6efa:	d105      	bne.n	6f08 <ground_calibrate+0xfb8>
    6efc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6f00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f04:	2200      	movs	r2, #0
    6f06:	701a      	strb	r2, [r3, #0]
    6f08:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f10:	781b      	ldrb	r3, [r3, #0]
    6f12:	461a      	mov	r2, r3
    6f14:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f1c:	2103      	movs	r1, #3
    6f1e:	5499      	strb	r1, [r3, r2]
    6f20:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f28:	781b      	ldrb	r3, [r3, #0]
    6f2a:	3301      	adds	r3, #1
    6f2c:	b2da      	uxtb	r2, r3
    6f2e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f36:	701a      	strb	r2, [r3, #0]
    6f38:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6f3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f40:	781b      	ldrb	r3, [r3, #0]
    6f42:	2bff      	cmp	r3, #255	; 0xff
    6f44:	d105      	bne.n	6f52 <ground_calibrate+0x1002>
    6f46:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f4e:	2200      	movs	r2, #0
    6f50:	701a      	strb	r2, [r3, #0]
    6f52:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6f56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f5a:	2203      	movs	r2, #3
    6f5c:	701a      	strb	r2, [r3, #0]
    6f5e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f66:	2203      	movs	r2, #3
    6f68:	701a      	strb	r2, [r3, #0]
    6f6a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6f6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f72:	781b      	ldrb	r3, [r3, #0]
    6f74:	461a      	mov	r2, r3
    6f76:	f240 33f0 	movw	r3, #1008	; 0x3f0
    6f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f7e:	7819      	ldrb	r1, [r3, #0]
    6f80:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f88:	5499      	strb	r1, [r3, r2]
    6f8a:	f240 33f0 	movw	r3, #1008	; 0x3f0
    6f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f92:	781a      	ldrb	r2, [r3, #0]
    6f94:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6f98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f9c:	781b      	ldrb	r3, [r3, #0]
    6f9e:	4413      	add	r3, r2
    6fa0:	b2da      	uxtb	r2, r3
    6fa2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6fa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6faa:	701a      	strb	r2, [r3, #0]
    6fac:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6fb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fb4:	781a      	ldrb	r2, [r3, #0]
    6fb6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fbe:	781b      	ldrb	r3, [r3, #0]
    6fc0:	4413      	add	r3, r2
    6fc2:	b2da      	uxtb	r2, r3
    6fc4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fcc:	701a      	strb	r2, [r3, #0]
    6fce:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fd6:	781b      	ldrb	r3, [r3, #0]
    6fd8:	3301      	adds	r3, #1
    6fda:	b2da      	uxtb	r2, r3
    6fdc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6fe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fe4:	701a      	strb	r2, [r3, #0]
    6fe6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fee:	781b      	ldrb	r3, [r3, #0]
    6ff0:	2bff      	cmp	r3, #255	; 0xff
    6ff2:	d105      	bne.n	7000 <ground_calibrate+0x10b0>
    6ff4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ffc:	2200      	movs	r2, #0
    6ffe:	701a      	strb	r2, [r3, #0]
    7000:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7004:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7008:	781b      	ldrb	r3, [r3, #0]
    700a:	461a      	mov	r2, r3
    700c:	f240 33f0 	movw	r3, #1008	; 0x3f0
    7010:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7014:	7859      	ldrb	r1, [r3, #1]
    7016:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    701a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    701e:	5499      	strb	r1, [r3, r2]
    7020:	4b77      	ldr	r3, [pc, #476]	; (7200 <ground_calibrate+0x12b0>)
    7022:	781a      	ldrb	r2, [r3, #0]
    7024:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    702c:	781b      	ldrb	r3, [r3, #0]
    702e:	4413      	add	r3, r2
    7030:	b2da      	uxtb	r2, r3
    7032:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    703a:	701a      	strb	r2, [r3, #0]
    703c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7044:	781a      	ldrb	r2, [r3, #0]
    7046:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    704a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    704e:	781b      	ldrb	r3, [r3, #0]
    7050:	4413      	add	r3, r2
    7052:	b2da      	uxtb	r2, r3
    7054:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    705c:	701a      	strb	r2, [r3, #0]
    705e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7066:	781b      	ldrb	r3, [r3, #0]
    7068:	3301      	adds	r3, #1
    706a:	b2da      	uxtb	r2, r3
    706c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7074:	701a      	strb	r2, [r3, #0]
    7076:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    707a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    707e:	781b      	ldrb	r3, [r3, #0]
    7080:	2bff      	cmp	r3, #255	; 0xff
    7082:	d105      	bne.n	7090 <ground_calibrate+0x1140>
    7084:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    708c:	2200      	movs	r2, #0
    708e:	701a      	strb	r2, [r3, #0]
    7090:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7094:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7098:	781b      	ldrb	r3, [r3, #0]
    709a:	461a      	mov	r2, r3
    709c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    70a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70a4:	7819      	ldrb	r1, [r3, #0]
    70a6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    70aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70ae:	5499      	strb	r1, [r3, r2]
    70b0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    70b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70b8:	781b      	ldrb	r3, [r3, #0]
    70ba:	3301      	adds	r3, #1
    70bc:	b2da      	uxtb	r2, r3
    70be:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    70c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70c6:	701a      	strb	r2, [r3, #0]
    70c8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    70cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70d0:	781b      	ldrb	r3, [r3, #0]
    70d2:	2bff      	cmp	r3, #255	; 0xff
    70d4:	d105      	bne.n	70e2 <ground_calibrate+0x1192>
    70d6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    70da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70de:	2200      	movs	r2, #0
    70e0:	701a      	strb	r2, [r3, #0]
    70e2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    70e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70ea:	781b      	ldrb	r3, [r3, #0]
    70ec:	461a      	mov	r2, r3
    70ee:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    70f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70f6:	7819      	ldrb	r1, [r3, #0]
    70f8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    70fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7100:	5499      	strb	r1, [r3, r2]
    7102:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    710a:	781b      	ldrb	r3, [r3, #0]
    710c:	3301      	adds	r3, #1
    710e:	b2da      	uxtb	r2, r3
    7110:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7118:	701a      	strb	r2, [r3, #0]
    711a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    711e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7122:	781b      	ldrb	r3, [r3, #0]
    7124:	2bff      	cmp	r3, #255	; 0xff
    7126:	d105      	bne.n	7134 <ground_calibrate+0x11e4>
    7128:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    712c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7130:	2200      	movs	r2, #0
    7132:	701a      	strb	r2, [r3, #0]
    7134:	f242 0339 	movw	r3, #8249	; 0x2039
    7138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    713c:	781b      	ldrb	r3, [r3, #0]
    713e:	b2db      	uxtb	r3, r3
    7140:	f003 0310 	and.w	r3, r3, #16
    7144:	2b00      	cmp	r3, #0
    7146:	d15a      	bne.n	71fe <ground_calibrate+0x12ae>
    7148:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    714c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7150:	781b      	ldrb	r3, [r3, #0]
    7152:	b2db      	uxtb	r3, r3
    7154:	461a      	mov	r2, r3
    7156:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    715a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    715e:	5c9a      	ldrb	r2, [r3, r2]
    7160:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    7164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7168:	701a      	strb	r2, [r3, #0]
    716a:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    716e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7172:	2200      	movs	r2, #0
    7174:	701a      	strb	r2, [r3, #0]
    7176:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    717a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    717e:	781b      	ldrb	r3, [r3, #0]
    7180:	b2db      	uxtb	r3, r3
    7182:	3301      	adds	r3, #1
    7184:	b2da      	uxtb	r2, r3
    7186:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    718a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    718e:	701a      	strb	r2, [r3, #0]
    7190:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    7194:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7198:	781b      	ldrb	r3, [r3, #0]
    719a:	b2db      	uxtb	r3, r3
    719c:	2bff      	cmp	r3, #255	; 0xff
    719e:	d105      	bne.n	71ac <ground_calibrate+0x125c>
    71a0:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    71a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71a8:	2200      	movs	r2, #0
    71aa:	701a      	strb	r2, [r3, #0]
    71ac:	f242 0338 	movw	r3, #8248	; 0x2038
    71b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71b4:	f242 0238 	movw	r2, #8248	; 0x2038
    71b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    71bc:	7812      	ldrb	r2, [r2, #0]
    71be:	b2d2      	uxtb	r2, r2
    71c0:	f042 0201 	orr.w	r2, r2, #1
    71c4:	b2d2      	uxtb	r2, r2
    71c6:	701a      	strb	r2, [r3, #0]
    71c8:	f242 0339 	movw	r3, #8249	; 0x2039
    71cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71d0:	f242 0239 	movw	r2, #8249	; 0x2039
    71d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    71d8:	7812      	ldrb	r2, [r2, #0]
    71da:	b2d2      	uxtb	r2, r2
    71dc:	f042 0210 	orr.w	r2, r2, #16
    71e0:	b2d2      	uxtb	r2, r2
    71e2:	701a      	strb	r2, [r3, #0]
    71e4:	e00b      	b.n	71fe <ground_calibrate+0x12ae>
    71e6:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    71ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ee:	781b      	ldrb	r3, [r3, #0]
    71f0:	3301      	adds	r3, #1
    71f2:	b2da      	uxtb	r2, r3
    71f4:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    71f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71fc:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    71fe:	bd80      	pop	{r7, pc}
    7200:	200003f1 	.word	0x200003f1

00007204 <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    7204:	b480      	push	{r7}
    7206:	b083      	sub	sp, #12
    7208:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    720a:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    720e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7212:	781b      	ldrb	r3, [r3, #0]
    7214:	2b03      	cmp	r3, #3
    7216:	d10c      	bne.n	7232 <pprz_mode_update+0x2e>
    7218:	f64b 63e0 	movw	r3, #48864	; 0xbee0
    721c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7220:	781b      	ldrb	r3, [r3, #0]
    7222:	2b00      	cmp	r3, #0
    7224:	d032      	beq.n	728c <pprz_mode_update+0x88>
    7226:	f64b 63e0 	movw	r3, #48864	; 0xbee0
    722a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    722e:	2200      	movs	r2, #0
    7230:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    7232:	f24c 0300 	movw	r3, #49152	; 0xc000
    7236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    723a:	891b      	ldrh	r3, [r3, #8]
    723c:	b21b      	sxth	r3, r3
    723e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    7242:	dc0f      	bgt.n	7264 <pprz_mode_update+0x60>
    7244:	f24c 0300 	movw	r3, #49152	; 0xc000
    7248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    724c:	891b      	ldrh	r3, [r3, #8]
    724e:	b21a      	sxth	r2, r3
    7250:	f64e 5341 	movw	r3, #60737	; 0xed41
    7254:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    7258:	429a      	cmp	r2, r3
    725a:	bfb4      	ite	lt
    725c:	2300      	movlt	r3, #0
    725e:	2301      	movge	r3, #1
    7260:	b2db      	uxtb	r3, r3
    7262:	e000      	b.n	7266 <pprz_mode_update+0x62>
    7264:	2302      	movs	r3, #2
    7266:	71fb      	strb	r3, [r7, #7]
    7268:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    726c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7270:	781b      	ldrb	r3, [r3, #0]
    7272:	79fa      	ldrb	r2, [r7, #7]
    7274:	429a      	cmp	r2, r3
    7276:	d007      	beq.n	7288 <pprz_mode_update+0x84>
    7278:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    727c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7280:	79fa      	ldrb	r2, [r7, #7]
    7282:	701a      	strb	r2, [r3, #0]
    7284:	2301      	movs	r3, #1
    7286:	e002      	b.n	728e <pprz_mode_update+0x8a>
    7288:	2300      	movs	r3, #0
    728a:	e000      	b.n	728e <pprz_mode_update+0x8a>
  } else
    return FALSE;
    728c:	2300      	movs	r3, #0
}
    728e:	4618      	mov	r0, r3
    7290:	370c      	adds	r7, #12
    7292:	46bd      	mov	sp, r7
    7294:	f85d 7b04 	ldr.w	r7, [sp], #4
    7298:	4770      	bx	lr
    729a:	bf00      	nop

0000729c <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    729c:	b480      	push	{r7}
    729e:	b083      	sub	sp, #12
    72a0:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    72a2:	f24c 0300 	movw	r3, #49152	; 0xc000
    72a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72aa:	89db      	ldrh	r3, [r3, #14]
    72ac:	b21a      	sxth	r2, r3
    72ae:	f640 437f 	movw	r3, #3199	; 0xc7f
    72b2:	429a      	cmp	r2, r3
    72b4:	bfd4      	ite	le
    72b6:	2300      	movle	r3, #0
    72b8:	2301      	movgt	r3, #1
    72ba:	b2db      	uxtb	r3, r3
    72bc:	71fb      	strb	r3, [r7, #7]
    72be:	f240 33ec 	movw	r3, #1004	; 0x3ec
    72c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72c6:	781b      	ldrb	r3, [r3, #0]
    72c8:	79fa      	ldrb	r2, [r7, #7]
    72ca:	429a      	cmp	r2, r3
    72cc:	d007      	beq.n	72de <ir_estim_mode_update+0x42>
    72ce:	f240 33ec 	movw	r3, #1004	; 0x3ec
    72d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72d6:	79fa      	ldrb	r2, [r7, #7]
    72d8:	701a      	strb	r2, [r3, #0]
    72da:	2301      	movs	r3, #1
    72dc:	e000      	b.n	72e0 <ir_estim_mode_update+0x44>
    72de:	2300      	movs	r3, #0
}
    72e0:	4618      	mov	r0, r3
    72e2:	370c      	adds	r7, #12
    72e4:	46bd      	mov	sp, r7
    72e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    72ea:	4770      	bx	lr

000072ec <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    72ec:	b480      	push	{r7}
    72ee:	b083      	sub	sp, #12
    72f0:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    72f2:	f24c 0300 	movw	r3, #49152	; 0xc000
    72f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72fa:	7cdb      	ldrb	r3, [r3, #19]
    72fc:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    72fe:	f64b 63e3 	movw	r3, #48867	; 0xbee3
    7302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7306:	781b      	ldrb	r3, [r3, #0]
    7308:	79fa      	ldrb	r2, [r7, #7]
    730a:	429a      	cmp	r2, r3
    730c:	d017      	beq.n	733e <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    730e:	f64b 63e3 	movw	r3, #48867	; 0xbee3
    7312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7316:	781b      	ldrb	r3, [r3, #0]
    7318:	461a      	mov	r2, r3
    731a:	79fb      	ldrb	r3, [r7, #7]
    731c:	4053      	eors	r3, r2
    731e:	f003 0303 	and.w	r3, r3, #3
    7322:	2b00      	cmp	r3, #0
    7324:	bf0c      	ite	eq
    7326:	2300      	moveq	r3, #0
    7328:	2301      	movne	r3, #1
    732a:	b2db      	uxtb	r3, r3
    732c:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    732e:	f64b 63e3 	movw	r3, #48867	; 0xbee3
    7332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7336:	79fa      	ldrb	r2, [r7, #7]
    7338:	701a      	strb	r2, [r3, #0]
    return changed;
    733a:	79bb      	ldrb	r3, [r7, #6]
    733c:	e000      	b.n	7340 <mcu1_status_update+0x54>
  }
  return FALSE;
    733e:	2300      	movs	r3, #0
}
    7340:	4618      	mov	r0, r3
    7342:	370c      	adds	r7, #12
    7344:	46bd      	mov	sp, r7
    7346:	f85d 7b04 	ldr.w	r7, [sp], #4
    734a:	4770      	bx	lr

0000734c <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    734c:	b480      	push	{r7}
    734e:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    7350:	f24c 530c 	movw	r3, #50444	; 0xc50c
    7354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7358:	781b      	ldrb	r3, [r3, #0]
    735a:	2b00      	cmp	r3, #0
    735c:	d12a      	bne.n	73b4 <events_update+0x68>
    735e:	f24c 0300 	movw	r3, #49152	; 0xc000
    7362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7366:	895b      	ldrh	r3, [r3, #10]
    7368:	b21b      	sxth	r3, r3
    736a:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    736e:	dd21      	ble.n	73b4 <events_update+0x68>
    7370:	f64b 63f4 	movw	r3, #48884	; 0xbef4
    7374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7378:	881b      	ldrh	r3, [r3, #0]
    737a:	2b13      	cmp	r3, #19
    737c:	d819      	bhi.n	73b2 <events_update+0x66>
    737e:	f64b 63f4 	movw	r3, #48884	; 0xbef4
    7382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7386:	881b      	ldrh	r3, [r3, #0]
    7388:	3301      	adds	r3, #1
    738a:	b29a      	uxth	r2, r3
    738c:	f64b 63f4 	movw	r3, #48884	; 0xbef4
    7390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7394:	801a      	strh	r2, [r3, #0]
    7396:	f64b 63f4 	movw	r3, #48884	; 0xbef4
    739a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    739e:	881b      	ldrh	r3, [r3, #0]
    73a0:	2b14      	cmp	r3, #20
    73a2:	d106      	bne.n	73b2 <events_update+0x66>
    73a4:	f64b 63e0 	movw	r3, #48864	; 0xbee0
    73a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73ac:	2201      	movs	r2, #1
    73ae:	701a      	strb	r2, [r3, #0]
    73b0:	e00c      	b.n	73cc <events_update+0x80>
    73b2:	e00b      	b.n	73cc <events_update+0x80>
    73b4:	f64b 63f4 	movw	r3, #48884	; 0xbef4
    73b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73bc:	2200      	movs	r2, #0
    73be:	801a      	strh	r2, [r3, #0]
    73c0:	f64b 63e0 	movw	r3, #48864	; 0xbee0
    73c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73c8:	2200      	movs	r2, #0
    73ca:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    73cc:	f24c 530c 	movw	r3, #50444	; 0xc50c
    73d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73d4:	781b      	ldrb	r3, [r3, #0]
    73d6:	2b00      	cmp	r3, #0
    73d8:	d12a      	bne.n	7430 <events_update+0xe4>
    73da:	f24c 0300 	movw	r3, #49152	; 0xc000
    73de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73e2:	895b      	ldrh	r3, [r3, #10]
    73e4:	b21b      	sxth	r3, r3
    73e6:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    73ea:	da21      	bge.n	7430 <events_update+0xe4>
    73ec:	f64b 63f6 	movw	r3, #48886	; 0xbef6
    73f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73f4:	881b      	ldrh	r3, [r3, #0]
    73f6:	2b13      	cmp	r3, #19
    73f8:	d819      	bhi.n	742e <events_update+0xe2>
    73fa:	f64b 63f6 	movw	r3, #48886	; 0xbef6
    73fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7402:	881b      	ldrh	r3, [r3, #0]
    7404:	3301      	adds	r3, #1
    7406:	b29a      	uxth	r2, r3
    7408:	f64b 63f6 	movw	r3, #48886	; 0xbef6
    740c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7410:	801a      	strh	r2, [r3, #0]
    7412:	f64b 63f6 	movw	r3, #48886	; 0xbef6
    7416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    741a:	881b      	ldrh	r3, [r3, #0]
    741c:	2b14      	cmp	r3, #20
    741e:	d106      	bne.n	742e <events_update+0xe2>
    7420:	f64b 63e1 	movw	r3, #48865	; 0xbee1
    7424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7428:	2201      	movs	r2, #1
    742a:	701a      	strb	r2, [r3, #0]
    742c:	e00c      	b.n	7448 <events_update+0xfc>
    742e:	e00b      	b.n	7448 <events_update+0xfc>
    7430:	f64b 63f6 	movw	r3, #48886	; 0xbef6
    7434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7438:	2200      	movs	r2, #0
    743a:	801a      	strh	r2, [r3, #0]
    743c:	f64b 63e1 	movw	r3, #48865	; 0xbee1
    7440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7444:	2200      	movs	r2, #0
    7446:	701a      	strb	r2, [r3, #0]
}  
    7448:	46bd      	mov	sp, r7
    744a:	f85d 7b04 	ldr.w	r7, [sp], #4
    744e:	4770      	bx	lr

00007450 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    7450:	b480      	push	{r7}
    7452:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    7454:	f24c 0300 	movw	r3, #49152	; 0xc000
    7458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    745c:	88da      	ldrh	r2, [r3, #6]
    745e:	f24c 0318 	movw	r3, #49176	; 0xc018
    7462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7466:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    7468:	f24c 0318 	movw	r3, #49176	; 0xc018
    746c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7470:	2200      	movs	r2, #0
    7472:	74da      	strb	r2, [r3, #19]
}
    7474:	46bd      	mov	sp, r7
    7476:	f85d 7b04 	ldr.w	r7, [sp], #4
    747a:	4770      	bx	lr

0000747c <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    747c:	b480      	push	{r7}
    747e:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  //if (boot) 
  {
      DOWNLINK_SEND_BOOT(&version);
    7480:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7488:	781a      	ldrb	r2, [r3, #0]
    748a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    748e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7492:	781b      	ldrb	r3, [r3, #0]
    7494:	b2db      	uxtb	r3, r3
    7496:	429a      	cmp	r2, r3
    7498:	d313      	bcc.n	74c2 <send_boot+0x46>
    749a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    749e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74a2:	781b      	ldrb	r3, [r3, #0]
    74a4:	b2db      	uxtb	r3, r3
    74a6:	461a      	mov	r2, r3
    74a8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    74ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74b0:	781b      	ldrb	r3, [r3, #0]
    74b2:	1ad3      	subs	r3, r2, r3
    74b4:	33ff      	adds	r3, #255	; 0xff
    74b6:	2b06      	cmp	r3, #6
    74b8:	bfd4      	ite	le
    74ba:	2300      	movle	r3, #0
    74bc:	2301      	movgt	r3, #1
    74be:	b2db      	uxtb	r3, r3
    74c0:	e011      	b.n	74e6 <send_boot+0x6a>
    74c2:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    74c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74ca:	781b      	ldrb	r3, [r3, #0]
    74cc:	b2db      	uxtb	r3, r3
    74ce:	461a      	mov	r2, r3
    74d0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    74d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74d8:	781b      	ldrb	r3, [r3, #0]
    74da:	1ad3      	subs	r3, r2, r3
    74dc:	2b06      	cmp	r3, #6
    74de:	bfd4      	ite	le
    74e0:	2300      	movle	r3, #0
    74e2:	2301      	movgt	r3, #1
    74e4:	b2db      	uxtb	r3, r3
    74e6:	2b00      	cmp	r3, #0
    74e8:	f000 8194 	beq.w	7814 <send_boot+0x398>
    74ec:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    74f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74f4:	781b      	ldrb	r3, [r3, #0]
    74f6:	461a      	mov	r2, r3
    74f8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    74fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7500:	2105      	movs	r1, #5
    7502:	5499      	strb	r1, [r3, r2]
    7504:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    750c:	781b      	ldrb	r3, [r3, #0]
    750e:	3301      	adds	r3, #1
    7510:	b2da      	uxtb	r2, r3
    7512:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    751a:	701a      	strb	r2, [r3, #0]
    751c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7524:	781b      	ldrb	r3, [r3, #0]
    7526:	2bff      	cmp	r3, #255	; 0xff
    7528:	d105      	bne.n	7536 <send_boot+0xba>
    752a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    752e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7532:	2200      	movs	r2, #0
    7534:	701a      	strb	r2, [r3, #0]
    7536:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    753a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    753e:	781b      	ldrb	r3, [r3, #0]
    7540:	461a      	mov	r2, r3
    7542:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    754a:	2101      	movs	r1, #1
    754c:	5499      	strb	r1, [r3, r2]
    754e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7556:	781b      	ldrb	r3, [r3, #0]
    7558:	3301      	adds	r3, #1
    755a:	b2da      	uxtb	r2, r3
    755c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7564:	701a      	strb	r2, [r3, #0]
    7566:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    756a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    756e:	781b      	ldrb	r3, [r3, #0]
    7570:	2bff      	cmp	r3, #255	; 0xff
    7572:	d105      	bne.n	7580 <send_boot+0x104>
    7574:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    757c:	2200      	movs	r2, #0
    757e:	701a      	strb	r2, [r3, #0]
    7580:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7588:	2201      	movs	r2, #1
    758a:	701a      	strb	r2, [r3, #0]
    758c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7594:	2201      	movs	r2, #1
    7596:	701a      	strb	r2, [r3, #0]
    7598:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    759c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75a0:	781b      	ldrb	r3, [r3, #0]
    75a2:	461a      	mov	r2, r3
    75a4:	f648 133e 	movw	r3, #35134	; 0x893e
    75a8:	f2c0 0301 	movt	r3, #1
    75ac:	7819      	ldrb	r1, [r3, #0]
    75ae:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    75b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75b6:	5499      	strb	r1, [r3, r2]
    75b8:	f648 133e 	movw	r3, #35134	; 0x893e
    75bc:	f2c0 0301 	movt	r3, #1
    75c0:	781a      	ldrb	r2, [r3, #0]
    75c2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    75c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75ca:	781b      	ldrb	r3, [r3, #0]
    75cc:	4413      	add	r3, r2
    75ce:	b2da      	uxtb	r2, r3
    75d0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    75d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75d8:	701a      	strb	r2, [r3, #0]
    75da:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    75de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75e2:	781a      	ldrb	r2, [r3, #0]
    75e4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    75e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75ec:	781b      	ldrb	r3, [r3, #0]
    75ee:	4413      	add	r3, r2
    75f0:	b2da      	uxtb	r2, r3
    75f2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    75f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75fa:	701a      	strb	r2, [r3, #0]
    75fc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7604:	781b      	ldrb	r3, [r3, #0]
    7606:	3301      	adds	r3, #1
    7608:	b2da      	uxtb	r2, r3
    760a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    760e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7612:	701a      	strb	r2, [r3, #0]
    7614:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    761c:	781b      	ldrb	r3, [r3, #0]
    761e:	2bff      	cmp	r3, #255	; 0xff
    7620:	d105      	bne.n	762e <send_boot+0x1b2>
    7622:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    762a:	2200      	movs	r2, #0
    762c:	701a      	strb	r2, [r3, #0]
    762e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7636:	781b      	ldrb	r3, [r3, #0]
    7638:	461a      	mov	r2, r3
    763a:	f648 133e 	movw	r3, #35134	; 0x893e
    763e:	f2c0 0301 	movt	r3, #1
    7642:	7859      	ldrb	r1, [r3, #1]
    7644:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    764c:	5499      	strb	r1, [r3, r2]
    764e:	4b88      	ldr	r3, [pc, #544]	; (7870 <send_boot+0x3f4>)
    7650:	781a      	ldrb	r2, [r3, #0]
    7652:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    765a:	781b      	ldrb	r3, [r3, #0]
    765c:	4413      	add	r3, r2
    765e:	b2da      	uxtb	r2, r3
    7660:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7668:	701a      	strb	r2, [r3, #0]
    766a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    766e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7672:	781a      	ldrb	r2, [r3, #0]
    7674:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    767c:	781b      	ldrb	r3, [r3, #0]
    767e:	4413      	add	r3, r2
    7680:	b2da      	uxtb	r2, r3
    7682:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    768a:	701a      	strb	r2, [r3, #0]
    768c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7690:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7694:	781b      	ldrb	r3, [r3, #0]
    7696:	3301      	adds	r3, #1
    7698:	b2da      	uxtb	r2, r3
    769a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    769e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76a2:	701a      	strb	r2, [r3, #0]
    76a4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    76a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ac:	781b      	ldrb	r3, [r3, #0]
    76ae:	2bff      	cmp	r3, #255	; 0xff
    76b0:	d105      	bne.n	76be <send_boot+0x242>
    76b2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    76b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ba:	2200      	movs	r2, #0
    76bc:	701a      	strb	r2, [r3, #0]
    76be:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    76c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76c6:	781b      	ldrb	r3, [r3, #0]
    76c8:	461a      	mov	r2, r3
    76ca:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    76ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76d2:	7819      	ldrb	r1, [r3, #0]
    76d4:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    76d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76dc:	5499      	strb	r1, [r3, r2]
    76de:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    76e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76e6:	781b      	ldrb	r3, [r3, #0]
    76e8:	3301      	adds	r3, #1
    76ea:	b2da      	uxtb	r2, r3
    76ec:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    76f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76f4:	701a      	strb	r2, [r3, #0]
    76f6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    76fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76fe:	781b      	ldrb	r3, [r3, #0]
    7700:	2bff      	cmp	r3, #255	; 0xff
    7702:	d105      	bne.n	7710 <send_boot+0x294>
    7704:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    770c:	2200      	movs	r2, #0
    770e:	701a      	strb	r2, [r3, #0]
    7710:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7718:	781b      	ldrb	r3, [r3, #0]
    771a:	461a      	mov	r2, r3
    771c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7724:	7819      	ldrb	r1, [r3, #0]
    7726:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    772a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    772e:	5499      	strb	r1, [r3, r2]
    7730:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7738:	781b      	ldrb	r3, [r3, #0]
    773a:	3301      	adds	r3, #1
    773c:	b2da      	uxtb	r2, r3
    773e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7746:	701a      	strb	r2, [r3, #0]
    7748:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    774c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7750:	781b      	ldrb	r3, [r3, #0]
    7752:	2bff      	cmp	r3, #255	; 0xff
    7754:	d105      	bne.n	7762 <send_boot+0x2e6>
    7756:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    775a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    775e:	2200      	movs	r2, #0
    7760:	701a      	strb	r2, [r3, #0]
    7762:	f242 0339 	movw	r3, #8249	; 0x2039
    7766:	f2c2 0300 	movt	r3, #8192	; 0x2000
    776a:	781b      	ldrb	r3, [r3, #0]
    776c:	b2db      	uxtb	r3, r3
    776e:	f003 0310 	and.w	r3, r3, #16
    7772:	2b00      	cmp	r3, #0
    7774:	d15a      	bne.n	782c <send_boot+0x3b0>
    7776:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    777a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    777e:	781b      	ldrb	r3, [r3, #0]
    7780:	b2db      	uxtb	r3, r3
    7782:	461a      	mov	r2, r3
    7784:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    778c:	5c9a      	ldrb	r2, [r3, r2]
    778e:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    7792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7796:	701a      	strb	r2, [r3, #0]
    7798:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    779c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77a0:	2200      	movs	r2, #0
    77a2:	701a      	strb	r2, [r3, #0]
    77a4:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    77a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ac:	781b      	ldrb	r3, [r3, #0]
    77ae:	b2db      	uxtb	r3, r3
    77b0:	3301      	adds	r3, #1
    77b2:	b2da      	uxtb	r2, r3
    77b4:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    77b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77bc:	701a      	strb	r2, [r3, #0]
    77be:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    77c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77c6:	781b      	ldrb	r3, [r3, #0]
    77c8:	b2db      	uxtb	r3, r3
    77ca:	2bff      	cmp	r3, #255	; 0xff
    77cc:	d105      	bne.n	77da <send_boot+0x35e>
    77ce:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    77d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77d6:	2200      	movs	r2, #0
    77d8:	701a      	strb	r2, [r3, #0]
    77da:	f242 0338 	movw	r3, #8248	; 0x2038
    77de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77e2:	f242 0238 	movw	r2, #8248	; 0x2038
    77e6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    77ea:	7812      	ldrb	r2, [r2, #0]
    77ec:	b2d2      	uxtb	r2, r2
    77ee:	f042 0201 	orr.w	r2, r2, #1
    77f2:	b2d2      	uxtb	r2, r2
    77f4:	701a      	strb	r2, [r3, #0]
    77f6:	f242 0339 	movw	r3, #8249	; 0x2039
    77fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77fe:	f242 0239 	movw	r2, #8249	; 0x2039
    7802:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7806:	7812      	ldrb	r2, [r2, #0]
    7808:	b2d2      	uxtb	r2, r2
    780a:	f042 0210 	orr.w	r2, r2, #16
    780e:	b2d2      	uxtb	r2, r2
    7810:	701a      	strb	r2, [r3, #0]
    7812:	e00b      	b.n	782c <send_boot+0x3b0>
    7814:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    7818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    781c:	781b      	ldrb	r3, [r3, #0]
    781e:	3301      	adds	r3, #1
    7820:	b2da      	uxtb	r2, r3
    7822:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    7826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    782a:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    782c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7834:	781a      	ldrb	r2, [r3, #0]
    7836:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    783a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    783e:	781b      	ldrb	r3, [r3, #0]
    7840:	b2db      	uxtb	r3, r3
    7842:	429a      	cmp	r2, r3
    7844:	d316      	bcc.n	7874 <send_boot+0x3f8>
    7846:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    784a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    784e:	781b      	ldrb	r3, [r3, #0]
    7850:	b2db      	uxtb	r3, r3
    7852:	461a      	mov	r2, r3
    7854:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    785c:	781b      	ldrb	r3, [r3, #0]
    785e:	1ad3      	subs	r3, r2, r3
    7860:	33ff      	adds	r3, #255	; 0xff
    7862:	2b14      	cmp	r3, #20
    7864:	bfd4      	ite	le
    7866:	2300      	movle	r3, #0
    7868:	2301      	movgt	r3, #1
    786a:	b2db      	uxtb	r3, r3
    786c:	e014      	b.n	7898 <send_boot+0x41c>
    786e:	bf00      	nop
    7870:	0001893f 	.word	0x0001893f
    7874:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    7878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    787c:	781b      	ldrb	r3, [r3, #0]
    787e:	b2db      	uxtb	r3, r3
    7880:	461a      	mov	r2, r3
    7882:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    788a:	781b      	ldrb	r3, [r3, #0]
    788c:	1ad3      	subs	r3, r2, r3
    788e:	2b14      	cmp	r3, #20
    7890:	bfd4      	ite	le
    7892:	2300      	movle	r3, #0
    7894:	2301      	movgt	r3, #1
    7896:	b2db      	uxtb	r3, r3
    7898:	2b00      	cmp	r3, #0
    789a:	f000 85a5 	beq.w	83e8 <send_boot+0xf6c>
    789e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    78a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78a6:	781b      	ldrb	r3, [r3, #0]
    78a8:	461a      	mov	r2, r3
    78aa:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    78ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78b2:	2105      	movs	r1, #5
    78b4:	5499      	strb	r1, [r3, r2]
    78b6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    78ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78be:	781b      	ldrb	r3, [r3, #0]
    78c0:	3301      	adds	r3, #1
    78c2:	b2da      	uxtb	r2, r3
    78c4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    78c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78cc:	701a      	strb	r2, [r3, #0]
    78ce:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    78d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78d6:	781b      	ldrb	r3, [r3, #0]
    78d8:	2bff      	cmp	r3, #255	; 0xff
    78da:	d105      	bne.n	78e8 <send_boot+0x46c>
    78dc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    78e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78e4:	2200      	movs	r2, #0
    78e6:	701a      	strb	r2, [r3, #0]
    78e8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    78ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78f0:	781b      	ldrb	r3, [r3, #0]
    78f2:	461a      	mov	r2, r3
    78f4:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    78f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78fc:	2105      	movs	r1, #5
    78fe:	5499      	strb	r1, [r3, r2]
    7900:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7908:	781b      	ldrb	r3, [r3, #0]
    790a:	3301      	adds	r3, #1
    790c:	b2da      	uxtb	r2, r3
    790e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7916:	701a      	strb	r2, [r3, #0]
    7918:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    791c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7920:	781b      	ldrb	r3, [r3, #0]
    7922:	2bff      	cmp	r3, #255	; 0xff
    7924:	d105      	bne.n	7932 <send_boot+0x4b6>
    7926:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    792a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    792e:	2200      	movs	r2, #0
    7930:	701a      	strb	r2, [r3, #0]
    7932:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    793a:	2205      	movs	r2, #5
    793c:	701a      	strb	r2, [r3, #0]
    793e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7946:	2205      	movs	r2, #5
    7948:	701a      	strb	r2, [r3, #0]
    794a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    794e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7952:	781b      	ldrb	r3, [r3, #0]
    7954:	461a      	mov	r2, r3
    7956:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    795a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    795e:	7819      	ldrb	r1, [r3, #0]
    7960:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7968:	5499      	strb	r1, [r3, r2]
    796a:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    796e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7972:	781a      	ldrb	r2, [r3, #0]
    7974:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    797c:	781b      	ldrb	r3, [r3, #0]
    797e:	4413      	add	r3, r2
    7980:	b2da      	uxtb	r2, r3
    7982:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    798a:	701a      	strb	r2, [r3, #0]
    798c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7994:	781a      	ldrb	r2, [r3, #0]
    7996:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    799a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    799e:	781b      	ldrb	r3, [r3, #0]
    79a0:	4413      	add	r3, r2
    79a2:	b2da      	uxtb	r2, r3
    79a4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    79a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ac:	701a      	strb	r2, [r3, #0]
    79ae:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    79b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79b6:	781b      	ldrb	r3, [r3, #0]
    79b8:	3301      	adds	r3, #1
    79ba:	b2da      	uxtb	r2, r3
    79bc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    79c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79c4:	701a      	strb	r2, [r3, #0]
    79c6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    79ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ce:	781b      	ldrb	r3, [r3, #0]
    79d0:	2bff      	cmp	r3, #255	; 0xff
    79d2:	d105      	bne.n	79e0 <send_boot+0x564>
    79d4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    79d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79dc:	2200      	movs	r2, #0
    79de:	701a      	strb	r2, [r3, #0]
    79e0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    79e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79e8:	781b      	ldrb	r3, [r3, #0]
    79ea:	461a      	mov	r2, r3
    79ec:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    79f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79f4:	7859      	ldrb	r1, [r3, #1]
    79f6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    79fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79fe:	5499      	strb	r1, [r3, r2]
    7a00:	4bd1      	ldr	r3, [pc, #836]	; (7d48 <send_boot+0x8cc>)
    7a02:	781a      	ldrb	r2, [r3, #0]
    7a04:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7a08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a0c:	781b      	ldrb	r3, [r3, #0]
    7a0e:	4413      	add	r3, r2
    7a10:	b2da      	uxtb	r2, r3
    7a12:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a1a:	701a      	strb	r2, [r3, #0]
    7a1c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a24:	781a      	ldrb	r2, [r3, #0]
    7a26:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a2e:	781b      	ldrb	r3, [r3, #0]
    7a30:	4413      	add	r3, r2
    7a32:	b2da      	uxtb	r2, r3
    7a34:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a3c:	701a      	strb	r2, [r3, #0]
    7a3e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7a42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a46:	781b      	ldrb	r3, [r3, #0]
    7a48:	3301      	adds	r3, #1
    7a4a:	b2da      	uxtb	r2, r3
    7a4c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a54:	701a      	strb	r2, [r3, #0]
    7a56:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7a5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a5e:	781b      	ldrb	r3, [r3, #0]
    7a60:	2bff      	cmp	r3, #255	; 0xff
    7a62:	d105      	bne.n	7a70 <send_boot+0x5f4>
    7a64:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a6c:	2200      	movs	r2, #0
    7a6e:	701a      	strb	r2, [r3, #0]
    7a70:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7a74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a78:	781b      	ldrb	r3, [r3, #0]
    7a7a:	461a      	mov	r2, r3
    7a7c:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    7a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a84:	7899      	ldrb	r1, [r3, #2]
    7a86:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7a8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a8e:	5499      	strb	r1, [r3, r2]
    7a90:	4bae      	ldr	r3, [pc, #696]	; (7d4c <send_boot+0x8d0>)
    7a92:	781a      	ldrb	r2, [r3, #0]
    7a94:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a9c:	781b      	ldrb	r3, [r3, #0]
    7a9e:	4413      	add	r3, r2
    7aa0:	b2da      	uxtb	r2, r3
    7aa2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aaa:	701a      	strb	r2, [r3, #0]
    7aac:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ab4:	781a      	ldrb	r2, [r3, #0]
    7ab6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7abe:	781b      	ldrb	r3, [r3, #0]
    7ac0:	4413      	add	r3, r2
    7ac2:	b2da      	uxtb	r2, r3
    7ac4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7acc:	701a      	strb	r2, [r3, #0]
    7ace:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7ad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ad6:	781b      	ldrb	r3, [r3, #0]
    7ad8:	3301      	adds	r3, #1
    7ada:	b2da      	uxtb	r2, r3
    7adc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ae4:	701a      	strb	r2, [r3, #0]
    7ae6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7aea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aee:	781b      	ldrb	r3, [r3, #0]
    7af0:	2bff      	cmp	r3, #255	; 0xff
    7af2:	d105      	bne.n	7b00 <send_boot+0x684>
    7af4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7afc:	2200      	movs	r2, #0
    7afe:	701a      	strb	r2, [r3, #0]
    7b00:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b08:	781b      	ldrb	r3, [r3, #0]
    7b0a:	461a      	mov	r2, r3
    7b0c:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    7b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b14:	78d9      	ldrb	r1, [r3, #3]
    7b16:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7b1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b1e:	5499      	strb	r1, [r3, r2]
    7b20:	4b8b      	ldr	r3, [pc, #556]	; (7d50 <send_boot+0x8d4>)
    7b22:	781a      	ldrb	r2, [r3, #0]
    7b24:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b2c:	781b      	ldrb	r3, [r3, #0]
    7b2e:	4413      	add	r3, r2
    7b30:	b2da      	uxtb	r2, r3
    7b32:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b3a:	701a      	strb	r2, [r3, #0]
    7b3c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b44:	781a      	ldrb	r2, [r3, #0]
    7b46:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7b4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b4e:	781b      	ldrb	r3, [r3, #0]
    7b50:	4413      	add	r3, r2
    7b52:	b2da      	uxtb	r2, r3
    7b54:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b5c:	701a      	strb	r2, [r3, #0]
    7b5e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7b62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b66:	781b      	ldrb	r3, [r3, #0]
    7b68:	3301      	adds	r3, #1
    7b6a:	b2da      	uxtb	r2, r3
    7b6c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b74:	701a      	strb	r2, [r3, #0]
    7b76:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b7e:	781b      	ldrb	r3, [r3, #0]
    7b80:	2bff      	cmp	r3, #255	; 0xff
    7b82:	d105      	bne.n	7b90 <send_boot+0x714>
    7b84:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b8c:	2200      	movs	r2, #0
    7b8e:	701a      	strb	r2, [r3, #0]
    7b90:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7b94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b98:	781b      	ldrb	r3, [r3, #0]
    7b9a:	461a      	mov	r2, r3
    7b9c:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
    7ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ba4:	7819      	ldrb	r1, [r3, #0]
    7ba6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7baa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bae:	5499      	strb	r1, [r3, r2]
    7bb0:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
    7bb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bb8:	781a      	ldrb	r2, [r3, #0]
    7bba:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7bbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bc2:	781b      	ldrb	r3, [r3, #0]
    7bc4:	4413      	add	r3, r2
    7bc6:	b2da      	uxtb	r2, r3
    7bc8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bd0:	701a      	strb	r2, [r3, #0]
    7bd2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bda:	781a      	ldrb	r2, [r3, #0]
    7bdc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7be4:	781b      	ldrb	r3, [r3, #0]
    7be6:	4413      	add	r3, r2
    7be8:	b2da      	uxtb	r2, r3
    7bea:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bf2:	701a      	strb	r2, [r3, #0]
    7bf4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bfc:	781b      	ldrb	r3, [r3, #0]
    7bfe:	3301      	adds	r3, #1
    7c00:	b2da      	uxtb	r2, r3
    7c02:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7c06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c0a:	701a      	strb	r2, [r3, #0]
    7c0c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7c10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c14:	781b      	ldrb	r3, [r3, #0]
    7c16:	2bff      	cmp	r3, #255	; 0xff
    7c18:	d105      	bne.n	7c26 <send_boot+0x7aa>
    7c1a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7c1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c22:	2200      	movs	r2, #0
    7c24:	701a      	strb	r2, [r3, #0]
    7c26:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c2e:	781b      	ldrb	r3, [r3, #0]
    7c30:	461a      	mov	r2, r3
    7c32:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
    7c36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c3a:	7859      	ldrb	r1, [r3, #1]
    7c3c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c44:	5499      	strb	r1, [r3, r2]
    7c46:	4b43      	ldr	r3, [pc, #268]	; (7d54 <send_boot+0x8d8>)
    7c48:	781a      	ldrb	r2, [r3, #0]
    7c4a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7c4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c52:	781b      	ldrb	r3, [r3, #0]
    7c54:	4413      	add	r3, r2
    7c56:	b2da      	uxtb	r2, r3
    7c58:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7c5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c60:	701a      	strb	r2, [r3, #0]
    7c62:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7c66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c6a:	781a      	ldrb	r2, [r3, #0]
    7c6c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c74:	781b      	ldrb	r3, [r3, #0]
    7c76:	4413      	add	r3, r2
    7c78:	b2da      	uxtb	r2, r3
    7c7a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c82:	701a      	strb	r2, [r3, #0]
    7c84:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c8c:	781b      	ldrb	r3, [r3, #0]
    7c8e:	3301      	adds	r3, #1
    7c90:	b2da      	uxtb	r2, r3
    7c92:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7c96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c9a:	701a      	strb	r2, [r3, #0]
    7c9c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ca4:	781b      	ldrb	r3, [r3, #0]
    7ca6:	2bff      	cmp	r3, #255	; 0xff
    7ca8:	d105      	bne.n	7cb6 <send_boot+0x83a>
    7caa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7cae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cb2:	2200      	movs	r2, #0
    7cb4:	701a      	strb	r2, [r3, #0]
    7cb6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cbe:	781b      	ldrb	r3, [r3, #0]
    7cc0:	461a      	mov	r2, r3
    7cc2:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
    7cc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cca:	7899      	ldrb	r1, [r3, #2]
    7ccc:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cd4:	5499      	strb	r1, [r3, r2]
    7cd6:	4b20      	ldr	r3, [pc, #128]	; (7d58 <send_boot+0x8dc>)
    7cd8:	781a      	ldrb	r2, [r3, #0]
    7cda:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ce2:	781b      	ldrb	r3, [r3, #0]
    7ce4:	4413      	add	r3, r2
    7ce6:	b2da      	uxtb	r2, r3
    7ce8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7cec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cf0:	701a      	strb	r2, [r3, #0]
    7cf2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cfa:	781a      	ldrb	r2, [r3, #0]
    7cfc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d04:	781b      	ldrb	r3, [r3, #0]
    7d06:	4413      	add	r3, r2
    7d08:	b2da      	uxtb	r2, r3
    7d0a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d12:	701a      	strb	r2, [r3, #0]
    7d14:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7d18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d1c:	781b      	ldrb	r3, [r3, #0]
    7d1e:	3301      	adds	r3, #1
    7d20:	b2da      	uxtb	r2, r3
    7d22:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7d26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d2a:	701a      	strb	r2, [r3, #0]
    7d2c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7d30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d34:	781b      	ldrb	r3, [r3, #0]
    7d36:	2bff      	cmp	r3, #255	; 0xff
    7d38:	d110      	bne.n	7d5c <send_boot+0x8e0>
    7d3a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7d3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d42:	2200      	movs	r2, #0
    7d44:	701a      	strb	r2, [r3, #0]
    7d46:	e009      	b.n	7d5c <send_boot+0x8e0>
    7d48:	2004c4f1 	.word	0x2004c4f1
    7d4c:	2004c4f2 	.word	0x2004c4f2
    7d50:	2004c4f3 	.word	0x2004c4f3
    7d54:	2004c4f5 	.word	0x2004c4f5
    7d58:	2004c4f6 	.word	0x2004c4f6
    7d5c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7d60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d64:	781b      	ldrb	r3, [r3, #0]
    7d66:	461a      	mov	r2, r3
    7d68:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
    7d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d70:	78d9      	ldrb	r1, [r3, #3]
    7d72:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7d76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d7a:	5499      	strb	r1, [r3, r2]
    7d7c:	4bd3      	ldr	r3, [pc, #844]	; (80cc <send_boot+0xc50>)
    7d7e:	781a      	ldrb	r2, [r3, #0]
    7d80:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d88:	781b      	ldrb	r3, [r3, #0]
    7d8a:	4413      	add	r3, r2
    7d8c:	b2da      	uxtb	r2, r3
    7d8e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d96:	701a      	strb	r2, [r3, #0]
    7d98:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7da0:	781a      	ldrb	r2, [r3, #0]
    7da2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7daa:	781b      	ldrb	r3, [r3, #0]
    7dac:	4413      	add	r3, r2
    7dae:	b2da      	uxtb	r2, r3
    7db0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7db8:	701a      	strb	r2, [r3, #0]
    7dba:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dc2:	781b      	ldrb	r3, [r3, #0]
    7dc4:	3301      	adds	r3, #1
    7dc6:	b2da      	uxtb	r2, r3
    7dc8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dd0:	701a      	strb	r2, [r3, #0]
    7dd2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7dd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dda:	781b      	ldrb	r3, [r3, #0]
    7ddc:	2bff      	cmp	r3, #255	; 0xff
    7dde:	d105      	bne.n	7dec <send_boot+0x970>
    7de0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7de8:	2200      	movs	r2, #0
    7dea:	701a      	strb	r2, [r3, #0]
    7dec:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7df0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7df4:	781b      	ldrb	r3, [r3, #0]
    7df6:	461a      	mov	r2, r3
    7df8:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
    7dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e00:	7819      	ldrb	r1, [r3, #0]
    7e02:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7e06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e0a:	5499      	strb	r1, [r3, r2]
    7e0c:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
    7e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e14:	781a      	ldrb	r2, [r3, #0]
    7e16:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e1e:	781b      	ldrb	r3, [r3, #0]
    7e20:	4413      	add	r3, r2
    7e22:	b2da      	uxtb	r2, r3
    7e24:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e2c:	701a      	strb	r2, [r3, #0]
    7e2e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7e32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e36:	781a      	ldrb	r2, [r3, #0]
    7e38:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e40:	781b      	ldrb	r3, [r3, #0]
    7e42:	4413      	add	r3, r2
    7e44:	b2da      	uxtb	r2, r3
    7e46:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e4e:	701a      	strb	r2, [r3, #0]
    7e50:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e58:	781b      	ldrb	r3, [r3, #0]
    7e5a:	3301      	adds	r3, #1
    7e5c:	b2da      	uxtb	r2, r3
    7e5e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e66:	701a      	strb	r2, [r3, #0]
    7e68:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7e6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e70:	781b      	ldrb	r3, [r3, #0]
    7e72:	2bff      	cmp	r3, #255	; 0xff
    7e74:	d105      	bne.n	7e82 <send_boot+0xa06>
    7e76:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e7e:	2200      	movs	r2, #0
    7e80:	701a      	strb	r2, [r3, #0]
    7e82:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e8a:	781b      	ldrb	r3, [r3, #0]
    7e8c:	461a      	mov	r2, r3
    7e8e:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
    7e92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e96:	7859      	ldrb	r1, [r3, #1]
    7e98:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7e9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ea0:	5499      	strb	r1, [r3, r2]
    7ea2:	4b8b      	ldr	r3, [pc, #556]	; (80d0 <send_boot+0xc54>)
    7ea4:	781a      	ldrb	r2, [r3, #0]
    7ea6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eae:	781b      	ldrb	r3, [r3, #0]
    7eb0:	4413      	add	r3, r2
    7eb2:	b2da      	uxtb	r2, r3
    7eb4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7eb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ebc:	701a      	strb	r2, [r3, #0]
    7ebe:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ec6:	781a      	ldrb	r2, [r3, #0]
    7ec8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ed0:	781b      	ldrb	r3, [r3, #0]
    7ed2:	4413      	add	r3, r2
    7ed4:	b2da      	uxtb	r2, r3
    7ed6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ede:	701a      	strb	r2, [r3, #0]
    7ee0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ee8:	781b      	ldrb	r3, [r3, #0]
    7eea:	3301      	adds	r3, #1
    7eec:	b2da      	uxtb	r2, r3
    7eee:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7ef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ef6:	701a      	strb	r2, [r3, #0]
    7ef8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7efc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f00:	781b      	ldrb	r3, [r3, #0]
    7f02:	2bff      	cmp	r3, #255	; 0xff
    7f04:	d105      	bne.n	7f12 <send_boot+0xa96>
    7f06:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7f0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f0e:	2200      	movs	r2, #0
    7f10:	701a      	strb	r2, [r3, #0]
    7f12:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7f16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f1a:	781b      	ldrb	r3, [r3, #0]
    7f1c:	461a      	mov	r2, r3
    7f1e:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
    7f22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f26:	7899      	ldrb	r1, [r3, #2]
    7f28:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f30:	5499      	strb	r1, [r3, r2]
    7f32:	4b68      	ldr	r3, [pc, #416]	; (80d4 <send_boot+0xc58>)
    7f34:	781a      	ldrb	r2, [r3, #0]
    7f36:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7f3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f3e:	781b      	ldrb	r3, [r3, #0]
    7f40:	4413      	add	r3, r2
    7f42:	b2da      	uxtb	r2, r3
    7f44:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7f48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f4c:	701a      	strb	r2, [r3, #0]
    7f4e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f56:	781a      	ldrb	r2, [r3, #0]
    7f58:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7f5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f60:	781b      	ldrb	r3, [r3, #0]
    7f62:	4413      	add	r3, r2
    7f64:	b2da      	uxtb	r2, r3
    7f66:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f6e:	701a      	strb	r2, [r3, #0]
    7f70:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7f74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f78:	781b      	ldrb	r3, [r3, #0]
    7f7a:	3301      	adds	r3, #1
    7f7c:	b2da      	uxtb	r2, r3
    7f7e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f86:	701a      	strb	r2, [r3, #0]
    7f88:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7f8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f90:	781b      	ldrb	r3, [r3, #0]
    7f92:	2bff      	cmp	r3, #255	; 0xff
    7f94:	d105      	bne.n	7fa2 <send_boot+0xb26>
    7f96:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7f9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f9e:	2200      	movs	r2, #0
    7fa0:	701a      	strb	r2, [r3, #0]
    7fa2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7fa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7faa:	781b      	ldrb	r3, [r3, #0]
    7fac:	461a      	mov	r2, r3
    7fae:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
    7fb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fb6:	78d9      	ldrb	r1, [r3, #3]
    7fb8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fc0:	5499      	strb	r1, [r3, r2]
    7fc2:	4b45      	ldr	r3, [pc, #276]	; (80d8 <send_boot+0xc5c>)
    7fc4:	781a      	ldrb	r2, [r3, #0]
    7fc6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fce:	781b      	ldrb	r3, [r3, #0]
    7fd0:	4413      	add	r3, r2
    7fd2:	b2da      	uxtb	r2, r3
    7fd4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7fd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fdc:	701a      	strb	r2, [r3, #0]
    7fde:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7fe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fe6:	781a      	ldrb	r2, [r3, #0]
    7fe8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ff0:	781b      	ldrb	r3, [r3, #0]
    7ff2:	4413      	add	r3, r2
    7ff4:	b2da      	uxtb	r2, r3
    7ff6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7ffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ffe:	701a      	strb	r2, [r3, #0]
    8000:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8004:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8008:	781b      	ldrb	r3, [r3, #0]
    800a:	3301      	adds	r3, #1
    800c:	b2da      	uxtb	r2, r3
    800e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8016:	701a      	strb	r2, [r3, #0]
    8018:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    801c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8020:	781b      	ldrb	r3, [r3, #0]
    8022:	2bff      	cmp	r3, #255	; 0xff
    8024:	d105      	bne.n	8032 <send_boot+0xbb6>
    8026:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    802a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    802e:	2200      	movs	r2, #0
    8030:	701a      	strb	r2, [r3, #0]
    8032:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    803a:	781b      	ldrb	r3, [r3, #0]
    803c:	461a      	mov	r2, r3
    803e:	f240 33f2 	movw	r3, #1010	; 0x3f2
    8042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8046:	7819      	ldrb	r1, [r3, #0]
    8048:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    804c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8050:	5499      	strb	r1, [r3, r2]
    8052:	f240 33f2 	movw	r3, #1010	; 0x3f2
    8056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    805a:	781a      	ldrb	r2, [r3, #0]
    805c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8064:	781b      	ldrb	r3, [r3, #0]
    8066:	4413      	add	r3, r2
    8068:	b2da      	uxtb	r2, r3
    806a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    806e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8072:	701a      	strb	r2, [r3, #0]
    8074:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    807c:	781a      	ldrb	r2, [r3, #0]
    807e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8086:	781b      	ldrb	r3, [r3, #0]
    8088:	4413      	add	r3, r2
    808a:	b2da      	uxtb	r2, r3
    808c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8090:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8094:	701a      	strb	r2, [r3, #0]
    8096:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    809a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    809e:	781b      	ldrb	r3, [r3, #0]
    80a0:	3301      	adds	r3, #1
    80a2:	b2da      	uxtb	r2, r3
    80a4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    80a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ac:	701a      	strb	r2, [r3, #0]
    80ae:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    80b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80b6:	781b      	ldrb	r3, [r3, #0]
    80b8:	2bff      	cmp	r3, #255	; 0xff
    80ba:	d10f      	bne.n	80dc <send_boot+0xc60>
    80bc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    80c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80c4:	2200      	movs	r2, #0
    80c6:	701a      	strb	r2, [r3, #0]
    80c8:	e008      	b.n	80dc <send_boot+0xc60>
    80ca:	bf00      	nop
    80cc:	2004c4f7 	.word	0x2004c4f7
    80d0:	2004c4ed 	.word	0x2004c4ed
    80d4:	2004c4ee 	.word	0x2004c4ee
    80d8:	2004c4ef 	.word	0x2004c4ef
    80dc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    80e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80e4:	781b      	ldrb	r3, [r3, #0]
    80e6:	461a      	mov	r2, r3
    80e8:	f240 33f2 	movw	r3, #1010	; 0x3f2
    80ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80f0:	7859      	ldrb	r1, [r3, #1]
    80f2:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    80f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80fa:	5499      	strb	r1, [r3, r2]
    80fc:	4bc5      	ldr	r3, [pc, #788]	; (8414 <send_boot+0xf98>)
    80fe:	781a      	ldrb	r2, [r3, #0]
    8100:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8108:	781b      	ldrb	r3, [r3, #0]
    810a:	4413      	add	r3, r2
    810c:	b2da      	uxtb	r2, r3
    810e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8116:	701a      	strb	r2, [r3, #0]
    8118:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    811c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8120:	781a      	ldrb	r2, [r3, #0]
    8122:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    812a:	781b      	ldrb	r3, [r3, #0]
    812c:	4413      	add	r3, r2
    812e:	b2da      	uxtb	r2, r3
    8130:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8138:	701a      	strb	r2, [r3, #0]
    813a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    813e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8142:	781b      	ldrb	r3, [r3, #0]
    8144:	3301      	adds	r3, #1
    8146:	b2da      	uxtb	r2, r3
    8148:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    814c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8150:	701a      	strb	r2, [r3, #0]
    8152:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    815a:	781b      	ldrb	r3, [r3, #0]
    815c:	2bff      	cmp	r3, #255	; 0xff
    815e:	d105      	bne.n	816c <send_boot+0xcf0>
    8160:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8168:	2200      	movs	r2, #0
    816a:	701a      	strb	r2, [r3, #0]
    816c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8170:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8174:	781b      	ldrb	r3, [r3, #0]
    8176:	461a      	mov	r2, r3
    8178:	f240 33f4 	movw	r3, #1012	; 0x3f4
    817c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8180:	7819      	ldrb	r1, [r3, #0]
    8182:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    818a:	5499      	strb	r1, [r3, r2]
    818c:	f240 33f4 	movw	r3, #1012	; 0x3f4
    8190:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8194:	781a      	ldrb	r2, [r3, #0]
    8196:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    819a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    819e:	781b      	ldrb	r3, [r3, #0]
    81a0:	4413      	add	r3, r2
    81a2:	b2da      	uxtb	r2, r3
    81a4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    81a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81ac:	701a      	strb	r2, [r3, #0]
    81ae:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    81b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81b6:	781a      	ldrb	r2, [r3, #0]
    81b8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    81bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81c0:	781b      	ldrb	r3, [r3, #0]
    81c2:	4413      	add	r3, r2
    81c4:	b2da      	uxtb	r2, r3
    81c6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    81ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81ce:	701a      	strb	r2, [r3, #0]
    81d0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    81d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81d8:	781b      	ldrb	r3, [r3, #0]
    81da:	3301      	adds	r3, #1
    81dc:	b2da      	uxtb	r2, r3
    81de:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    81e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81e6:	701a      	strb	r2, [r3, #0]
    81e8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    81ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81f0:	781b      	ldrb	r3, [r3, #0]
    81f2:	2bff      	cmp	r3, #255	; 0xff
    81f4:	d105      	bne.n	8202 <send_boot+0xd86>
    81f6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    81fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81fe:	2200      	movs	r2, #0
    8200:	701a      	strb	r2, [r3, #0]
    8202:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    820a:	781b      	ldrb	r3, [r3, #0]
    820c:	461a      	mov	r2, r3
    820e:	f240 33f4 	movw	r3, #1012	; 0x3f4
    8212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8216:	7859      	ldrb	r1, [r3, #1]
    8218:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    821c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8220:	5499      	strb	r1, [r3, r2]
    8222:	4b7d      	ldr	r3, [pc, #500]	; (8418 <send_boot+0xf9c>)
    8224:	781a      	ldrb	r2, [r3, #0]
    8226:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    822a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    822e:	781b      	ldrb	r3, [r3, #0]
    8230:	4413      	add	r3, r2
    8232:	b2da      	uxtb	r2, r3
    8234:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    823c:	701a      	strb	r2, [r3, #0]
    823e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8246:	781a      	ldrb	r2, [r3, #0]
    8248:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    824c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8250:	781b      	ldrb	r3, [r3, #0]
    8252:	4413      	add	r3, r2
    8254:	b2da      	uxtb	r2, r3
    8256:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    825a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    825e:	701a      	strb	r2, [r3, #0]
    8260:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8268:	781b      	ldrb	r3, [r3, #0]
    826a:	3301      	adds	r3, #1
    826c:	b2da      	uxtb	r2, r3
    826e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8276:	701a      	strb	r2, [r3, #0]
    8278:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    827c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8280:	781b      	ldrb	r3, [r3, #0]
    8282:	2bff      	cmp	r3, #255	; 0xff
    8284:	d105      	bne.n	8292 <send_boot+0xe16>
    8286:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    828a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    828e:	2200      	movs	r2, #0
    8290:	701a      	strb	r2, [r3, #0]
    8292:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    829a:	781b      	ldrb	r3, [r3, #0]
    829c:	461a      	mov	r2, r3
    829e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    82a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82a6:	7819      	ldrb	r1, [r3, #0]
    82a8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    82ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82b0:	5499      	strb	r1, [r3, r2]
    82b2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    82b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ba:	781b      	ldrb	r3, [r3, #0]
    82bc:	3301      	adds	r3, #1
    82be:	b2da      	uxtb	r2, r3
    82c0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    82c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82c8:	701a      	strb	r2, [r3, #0]
    82ca:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    82ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	2bff      	cmp	r3, #255	; 0xff
    82d6:	d105      	bne.n	82e4 <send_boot+0xe68>
    82d8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    82dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82e0:	2200      	movs	r2, #0
    82e2:	701a      	strb	r2, [r3, #0]
    82e4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    82e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ec:	781b      	ldrb	r3, [r3, #0]
    82ee:	461a      	mov	r2, r3
    82f0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    82f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82f8:	7819      	ldrb	r1, [r3, #0]
    82fa:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    82fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8302:	5499      	strb	r1, [r3, r2]
    8304:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    830c:	781b      	ldrb	r3, [r3, #0]
    830e:	3301      	adds	r3, #1
    8310:	b2da      	uxtb	r2, r3
    8312:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    831a:	701a      	strb	r2, [r3, #0]
    831c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8320:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8324:	781b      	ldrb	r3, [r3, #0]
    8326:	2bff      	cmp	r3, #255	; 0xff
    8328:	d105      	bne.n	8336 <send_boot+0xeba>
    832a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    832e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8332:	2200      	movs	r2, #0
    8334:	701a      	strb	r2, [r3, #0]
    8336:	f242 0339 	movw	r3, #8249	; 0x2039
    833a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    833e:	781b      	ldrb	r3, [r3, #0]
    8340:	b2db      	uxtb	r3, r3
    8342:	f003 0310 	and.w	r3, r3, #16
    8346:	2b00      	cmp	r3, #0
    8348:	d15a      	bne.n	8400 <send_boot+0xf84>
    834a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    834e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8352:	781b      	ldrb	r3, [r3, #0]
    8354:	b2db      	uxtb	r3, r3
    8356:	461a      	mov	r2, r3
    8358:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    835c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8360:	5c9a      	ldrb	r2, [r3, r2]
    8362:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    8366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    836a:	701a      	strb	r2, [r3, #0]
    836c:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    8370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8374:	2200      	movs	r2, #0
    8376:	701a      	strb	r2, [r3, #0]
    8378:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    837c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8380:	781b      	ldrb	r3, [r3, #0]
    8382:	b2db      	uxtb	r3, r3
    8384:	3301      	adds	r3, #1
    8386:	b2da      	uxtb	r2, r3
    8388:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    838c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8390:	701a      	strb	r2, [r3, #0]
    8392:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    8396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    839a:	781b      	ldrb	r3, [r3, #0]
    839c:	b2db      	uxtb	r3, r3
    839e:	2bff      	cmp	r3, #255	; 0xff
    83a0:	d105      	bne.n	83ae <send_boot+0xf32>
    83a2:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    83a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83aa:	2200      	movs	r2, #0
    83ac:	701a      	strb	r2, [r3, #0]
    83ae:	f242 0338 	movw	r3, #8248	; 0x2038
    83b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83b6:	f242 0238 	movw	r2, #8248	; 0x2038
    83ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
    83be:	7812      	ldrb	r2, [r2, #0]
    83c0:	b2d2      	uxtb	r2, r2
    83c2:	f042 0201 	orr.w	r2, r2, #1
    83c6:	b2d2      	uxtb	r2, r2
    83c8:	701a      	strb	r2, [r3, #0]
    83ca:	f242 0339 	movw	r3, #8249	; 0x2039
    83ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83d2:	f242 0239 	movw	r2, #8249	; 0x2039
    83d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    83da:	7812      	ldrb	r2, [r2, #0]
    83dc:	b2d2      	uxtb	r2, r2
    83de:	f042 0210 	orr.w	r2, r2, #16
    83e2:	b2d2      	uxtb	r2, r2
    83e4:	701a      	strb	r2, [r3, #0]
    83e6:	e00b      	b.n	8400 <send_boot+0xf84>
    83e8:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    83ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83f0:	781b      	ldrb	r3, [r3, #0]
    83f2:	3301      	adds	r3, #1
    83f4:	b2da      	uxtb	r2, r3
    83f6:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    83fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83fe:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    8400:	f240 33ed 	movw	r3, #1005	; 0x3ed
    8404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8408:	2200      	movs	r2, #0
    840a:	701a      	strb	r2, [r3, #0]
  }
}
    840c:	46bd      	mov	sp, r7
    840e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8412:	4770      	bx	lr
    8414:	200003f3 	.word	0x200003f3
    8418:	200003f5 	.word	0x200003f5

0000841c <send_attitude>:
void send_attitude(void){ //499ms
    841c:	b480      	push	{r7}
    841e:	af00      	add	r7, sp, #0
    // add by wanbo
  //if(!boot)
  {
    count++;
    8420:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    8424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8428:	781b      	ldrb	r3, [r3, #0]
    842a:	3301      	adds	r3, #1
    842c:	b2da      	uxtb	r2, r3
    842e:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    8432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8436:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    8438:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    843c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8440:	781b      	ldrb	r3, [r3, #0]
    8442:	2bfa      	cmp	r3, #250	; 0xfa
    8444:	d105      	bne.n	8452 <send_attitude+0x36>
    8446:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    844a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    844e:	2200      	movs	r2, #0
    8450:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    8452:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    8456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    845a:	781a      	ldrb	r2, [r3, #0]
    845c:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8460:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8464:	fba3 1302 	umull	r1, r3, r3, r2
    8468:	0899      	lsrs	r1, r3, #2
    846a:	460b      	mov	r3, r1
    846c:	009b      	lsls	r3, r3, #2
    846e:	440b      	add	r3, r1
    8470:	1ad3      	subs	r3, r2, r3
    8472:	b2db      	uxtb	r3, r3
    8474:	2b00      	cmp	r3, #0
    8476:	f040 84c1 	bne.w	8dfc <send_attitude+0x9e0>
       PERIODIC_SEND_ATTITUDE(); 
    847a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    847e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8482:	781a      	ldrb	r2, [r3, #0]
    8484:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    8488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    848c:	781b      	ldrb	r3, [r3, #0]
    848e:	b2db      	uxtb	r3, r3
    8490:	429a      	cmp	r2, r3
    8492:	d313      	bcc.n	84bc <send_attitude+0xa0>
    8494:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    8498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    849c:	781b      	ldrb	r3, [r3, #0]
    849e:	b2db      	uxtb	r3, r3
    84a0:	461a      	mov	r2, r3
    84a2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    84a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84aa:	781b      	ldrb	r3, [r3, #0]
    84ac:	1ad3      	subs	r3, r2, r3
    84ae:	33ff      	adds	r3, #255	; 0xff
    84b0:	2b10      	cmp	r3, #16
    84b2:	bfd4      	ite	le
    84b4:	2300      	movle	r3, #0
    84b6:	2301      	movgt	r3, #1
    84b8:	b2db      	uxtb	r3, r3
    84ba:	e011      	b.n	84e0 <send_attitude+0xc4>
    84bc:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    84c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84c4:	781b      	ldrb	r3, [r3, #0]
    84c6:	b2db      	uxtb	r3, r3
    84c8:	461a      	mov	r2, r3
    84ca:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    84ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84d2:	781b      	ldrb	r3, [r3, #0]
    84d4:	1ad3      	subs	r3, r2, r3
    84d6:	2b10      	cmp	r3, #16
    84d8:	bfd4      	ite	le
    84da:	2300      	movle	r3, #0
    84dc:	2301      	movgt	r3, #1
    84de:	b2db      	uxtb	r3, r3
    84e0:	2b00      	cmp	r3, #0
    84e2:	f000 847f 	beq.w	8de4 <send_attitude+0x9c8>
    84e6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    84ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84ee:	781b      	ldrb	r3, [r3, #0]
    84f0:	461a      	mov	r2, r3
    84f2:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    84f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84fa:	2105      	movs	r1, #5
    84fc:	5499      	strb	r1, [r3, r2]
    84fe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8506:	781b      	ldrb	r3, [r3, #0]
    8508:	3301      	adds	r3, #1
    850a:	b2da      	uxtb	r2, r3
    850c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8514:	701a      	strb	r2, [r3, #0]
    8516:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    851a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    851e:	781b      	ldrb	r3, [r3, #0]
    8520:	2bff      	cmp	r3, #255	; 0xff
    8522:	d105      	bne.n	8530 <send_attitude+0x114>
    8524:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    852c:	2200      	movs	r2, #0
    852e:	701a      	strb	r2, [r3, #0]
    8530:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8538:	781b      	ldrb	r3, [r3, #0]
    853a:	461a      	mov	r2, r3
    853c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8544:	2106      	movs	r1, #6
    8546:	5499      	strb	r1, [r3, r2]
    8548:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    854c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8550:	781b      	ldrb	r3, [r3, #0]
    8552:	3301      	adds	r3, #1
    8554:	b2da      	uxtb	r2, r3
    8556:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    855a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    855e:	701a      	strb	r2, [r3, #0]
    8560:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8568:	781b      	ldrb	r3, [r3, #0]
    856a:	2bff      	cmp	r3, #255	; 0xff
    856c:	d105      	bne.n	857a <send_attitude+0x15e>
    856e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8576:	2200      	movs	r2, #0
    8578:	701a      	strb	r2, [r3, #0]
    857a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    857e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8582:	2206      	movs	r2, #6
    8584:	701a      	strb	r2, [r3, #0]
    8586:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    858a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    858e:	2206      	movs	r2, #6
    8590:	701a      	strb	r2, [r3, #0]
    8592:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    859a:	781b      	ldrb	r3, [r3, #0]
    859c:	461a      	mov	r2, r3
    859e:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
    85a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85a6:	7819      	ldrb	r1, [r3, #0]
    85a8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    85ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85b0:	5499      	strb	r1, [r3, r2]
    85b2:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
    85b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ba:	781a      	ldrb	r2, [r3, #0]
    85bc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    85c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85c4:	781b      	ldrb	r3, [r3, #0]
    85c6:	4413      	add	r3, r2
    85c8:	b2da      	uxtb	r2, r3
    85ca:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    85ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85d2:	701a      	strb	r2, [r3, #0]
    85d4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    85d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85dc:	781a      	ldrb	r2, [r3, #0]
    85de:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    85e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85e6:	781b      	ldrb	r3, [r3, #0]
    85e8:	4413      	add	r3, r2
    85ea:	b2da      	uxtb	r2, r3
    85ec:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    85f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85f4:	701a      	strb	r2, [r3, #0]
    85f6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    85fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85fe:	781b      	ldrb	r3, [r3, #0]
    8600:	3301      	adds	r3, #1
    8602:	b2da      	uxtb	r2, r3
    8604:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    860c:	701a      	strb	r2, [r3, #0]
    860e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8616:	781b      	ldrb	r3, [r3, #0]
    8618:	2bff      	cmp	r3, #255	; 0xff
    861a:	d105      	bne.n	8628 <send_attitude+0x20c>
    861c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8624:	2200      	movs	r2, #0
    8626:	701a      	strb	r2, [r3, #0]
    8628:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    862c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8630:	781b      	ldrb	r3, [r3, #0]
    8632:	461a      	mov	r2, r3
    8634:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
    8638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    863c:	7859      	ldrb	r1, [r3, #1]
    863e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8646:	5499      	strb	r1, [r3, r2]
    8648:	4bd1      	ldr	r3, [pc, #836]	; (8990 <send_attitude+0x574>)
    864a:	781a      	ldrb	r2, [r3, #0]
    864c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8654:	781b      	ldrb	r3, [r3, #0]
    8656:	4413      	add	r3, r2
    8658:	b2da      	uxtb	r2, r3
    865a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    865e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8662:	701a      	strb	r2, [r3, #0]
    8664:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    866c:	781a      	ldrb	r2, [r3, #0]
    866e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8676:	781b      	ldrb	r3, [r3, #0]
    8678:	4413      	add	r3, r2
    867a:	b2da      	uxtb	r2, r3
    867c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8684:	701a      	strb	r2, [r3, #0]
    8686:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    868a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    868e:	781b      	ldrb	r3, [r3, #0]
    8690:	3301      	adds	r3, #1
    8692:	b2da      	uxtb	r2, r3
    8694:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    869c:	701a      	strb	r2, [r3, #0]
    869e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    86a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86a6:	781b      	ldrb	r3, [r3, #0]
    86a8:	2bff      	cmp	r3, #255	; 0xff
    86aa:	d105      	bne.n	86b8 <send_attitude+0x29c>
    86ac:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    86b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86b4:	2200      	movs	r2, #0
    86b6:	701a      	strb	r2, [r3, #0]
    86b8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    86bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86c0:	781b      	ldrb	r3, [r3, #0]
    86c2:	461a      	mov	r2, r3
    86c4:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
    86c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86cc:	7899      	ldrb	r1, [r3, #2]
    86ce:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    86d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86d6:	5499      	strb	r1, [r3, r2]
    86d8:	4bae      	ldr	r3, [pc, #696]	; (8994 <send_attitude+0x578>)
    86da:	781a      	ldrb	r2, [r3, #0]
    86dc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    86e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86e4:	781b      	ldrb	r3, [r3, #0]
    86e6:	4413      	add	r3, r2
    86e8:	b2da      	uxtb	r2, r3
    86ea:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    86ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86f2:	701a      	strb	r2, [r3, #0]
    86f4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    86f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86fc:	781a      	ldrb	r2, [r3, #0]
    86fe:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8706:	781b      	ldrb	r3, [r3, #0]
    8708:	4413      	add	r3, r2
    870a:	b2da      	uxtb	r2, r3
    870c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8714:	701a      	strb	r2, [r3, #0]
    8716:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    871a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    871e:	781b      	ldrb	r3, [r3, #0]
    8720:	3301      	adds	r3, #1
    8722:	b2da      	uxtb	r2, r3
    8724:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    872c:	701a      	strb	r2, [r3, #0]
    872e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8736:	781b      	ldrb	r3, [r3, #0]
    8738:	2bff      	cmp	r3, #255	; 0xff
    873a:	d105      	bne.n	8748 <send_attitude+0x32c>
    873c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8744:	2200      	movs	r2, #0
    8746:	701a      	strb	r2, [r3, #0]
    8748:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    874c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8750:	781b      	ldrb	r3, [r3, #0]
    8752:	461a      	mov	r2, r3
    8754:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
    8758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    875c:	78d9      	ldrb	r1, [r3, #3]
    875e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8766:	5499      	strb	r1, [r3, r2]
    8768:	4b8b      	ldr	r3, [pc, #556]	; (8998 <send_attitude+0x57c>)
    876a:	781a      	ldrb	r2, [r3, #0]
    876c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8774:	781b      	ldrb	r3, [r3, #0]
    8776:	4413      	add	r3, r2
    8778:	b2da      	uxtb	r2, r3
    877a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    877e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8782:	701a      	strb	r2, [r3, #0]
    8784:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    878c:	781a      	ldrb	r2, [r3, #0]
    878e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8796:	781b      	ldrb	r3, [r3, #0]
    8798:	4413      	add	r3, r2
    879a:	b2da      	uxtb	r2, r3
    879c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    87a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87a4:	701a      	strb	r2, [r3, #0]
    87a6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    87aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ae:	781b      	ldrb	r3, [r3, #0]
    87b0:	3301      	adds	r3, #1
    87b2:	b2da      	uxtb	r2, r3
    87b4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    87b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87bc:	701a      	strb	r2, [r3, #0]
    87be:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    87c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87c6:	781b      	ldrb	r3, [r3, #0]
    87c8:	2bff      	cmp	r3, #255	; 0xff
    87ca:	d105      	bne.n	87d8 <send_attitude+0x3bc>
    87cc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    87d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87d4:	2200      	movs	r2, #0
    87d6:	701a      	strb	r2, [r3, #0]
    87d8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    87dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87e0:	781b      	ldrb	r3, [r3, #0]
    87e2:	461a      	mov	r2, r3
    87e4:	f24c 43bc 	movw	r3, #50364	; 0xc4bc
    87e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ec:	7819      	ldrb	r1, [r3, #0]
    87ee:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    87f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87f6:	5499      	strb	r1, [r3, r2]
    87f8:	f24c 43bc 	movw	r3, #50364	; 0xc4bc
    87fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8800:	781a      	ldrb	r2, [r3, #0]
    8802:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    880a:	781b      	ldrb	r3, [r3, #0]
    880c:	4413      	add	r3, r2
    880e:	b2da      	uxtb	r2, r3
    8810:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8818:	701a      	strb	r2, [r3, #0]
    881a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    881e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8822:	781a      	ldrb	r2, [r3, #0]
    8824:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    882c:	781b      	ldrb	r3, [r3, #0]
    882e:	4413      	add	r3, r2
    8830:	b2da      	uxtb	r2, r3
    8832:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    883a:	701a      	strb	r2, [r3, #0]
    883c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8844:	781b      	ldrb	r3, [r3, #0]
    8846:	3301      	adds	r3, #1
    8848:	b2da      	uxtb	r2, r3
    884a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    884e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8852:	701a      	strb	r2, [r3, #0]
    8854:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    885c:	781b      	ldrb	r3, [r3, #0]
    885e:	2bff      	cmp	r3, #255	; 0xff
    8860:	d105      	bne.n	886e <send_attitude+0x452>
    8862:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    886a:	2200      	movs	r2, #0
    886c:	701a      	strb	r2, [r3, #0]
    886e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8876:	781b      	ldrb	r3, [r3, #0]
    8878:	461a      	mov	r2, r3
    887a:	f24c 43bc 	movw	r3, #50364	; 0xc4bc
    887e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8882:	7859      	ldrb	r1, [r3, #1]
    8884:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8888:	f2c2 0304 	movt	r3, #8196	; 0x2004
    888c:	5499      	strb	r1, [r3, r2]
    888e:	4b43      	ldr	r3, [pc, #268]	; (899c <send_attitude+0x580>)
    8890:	781a      	ldrb	r2, [r3, #0]
    8892:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    889a:	781b      	ldrb	r3, [r3, #0]
    889c:	4413      	add	r3, r2
    889e:	b2da      	uxtb	r2, r3
    88a0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    88a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88a8:	701a      	strb	r2, [r3, #0]
    88aa:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    88ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88b2:	781a      	ldrb	r2, [r3, #0]
    88b4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    88b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88bc:	781b      	ldrb	r3, [r3, #0]
    88be:	4413      	add	r3, r2
    88c0:	b2da      	uxtb	r2, r3
    88c2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    88c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ca:	701a      	strb	r2, [r3, #0]
    88cc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    88d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88d4:	781b      	ldrb	r3, [r3, #0]
    88d6:	3301      	adds	r3, #1
    88d8:	b2da      	uxtb	r2, r3
    88da:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    88de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88e2:	701a      	strb	r2, [r3, #0]
    88e4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    88e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ec:	781b      	ldrb	r3, [r3, #0]
    88ee:	2bff      	cmp	r3, #255	; 0xff
    88f0:	d105      	bne.n	88fe <send_attitude+0x4e2>
    88f2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    88f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88fa:	2200      	movs	r2, #0
    88fc:	701a      	strb	r2, [r3, #0]
    88fe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8906:	781b      	ldrb	r3, [r3, #0]
    8908:	461a      	mov	r2, r3
    890a:	f24c 43bc 	movw	r3, #50364	; 0xc4bc
    890e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8912:	7899      	ldrb	r1, [r3, #2]
    8914:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8918:	f2c2 0304 	movt	r3, #8196	; 0x2004
    891c:	5499      	strb	r1, [r3, r2]
    891e:	4b20      	ldr	r3, [pc, #128]	; (89a0 <send_attitude+0x584>)
    8920:	781a      	ldrb	r2, [r3, #0]
    8922:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    892a:	781b      	ldrb	r3, [r3, #0]
    892c:	4413      	add	r3, r2
    892e:	b2da      	uxtb	r2, r3
    8930:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8938:	701a      	strb	r2, [r3, #0]
    893a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    893e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8942:	781a      	ldrb	r2, [r3, #0]
    8944:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    894c:	781b      	ldrb	r3, [r3, #0]
    894e:	4413      	add	r3, r2
    8950:	b2da      	uxtb	r2, r3
    8952:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8956:	f2c2 0304 	movt	r3, #8196	; 0x2004
    895a:	701a      	strb	r2, [r3, #0]
    895c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8964:	781b      	ldrb	r3, [r3, #0]
    8966:	3301      	adds	r3, #1
    8968:	b2da      	uxtb	r2, r3
    896a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    896e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8972:	701a      	strb	r2, [r3, #0]
    8974:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    897c:	781b      	ldrb	r3, [r3, #0]
    897e:	2bff      	cmp	r3, #255	; 0xff
    8980:	d110      	bne.n	89a4 <send_attitude+0x588>
    8982:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    898a:	2200      	movs	r2, #0
    898c:	701a      	strb	r2, [r3, #0]
    898e:	e009      	b.n	89a4 <send_attitude+0x588>
    8990:	2004c4b9 	.word	0x2004c4b9
    8994:	2004c4ba 	.word	0x2004c4ba
    8998:	2004c4bb 	.word	0x2004c4bb
    899c:	2004c4bd 	.word	0x2004c4bd
    89a0:	2004c4be 	.word	0x2004c4be
    89a4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    89a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ac:	781b      	ldrb	r3, [r3, #0]
    89ae:	461a      	mov	r2, r3
    89b0:	f24c 43bc 	movw	r3, #50364	; 0xc4bc
    89b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89b8:	78d9      	ldrb	r1, [r3, #3]
    89ba:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    89be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89c2:	5499      	strb	r1, [r3, r2]
    89c4:	4bc2      	ldr	r3, [pc, #776]	; (8cd0 <send_attitude+0x8b4>)
    89c6:	781a      	ldrb	r2, [r3, #0]
    89c8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    89cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89d0:	781b      	ldrb	r3, [r3, #0]
    89d2:	4413      	add	r3, r2
    89d4:	b2da      	uxtb	r2, r3
    89d6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    89da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89de:	701a      	strb	r2, [r3, #0]
    89e0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    89e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89e8:	781a      	ldrb	r2, [r3, #0]
    89ea:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    89ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89f2:	781b      	ldrb	r3, [r3, #0]
    89f4:	4413      	add	r3, r2
    89f6:	b2da      	uxtb	r2, r3
    89f8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    89fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a00:	701a      	strb	r2, [r3, #0]
    8a02:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a0a:	781b      	ldrb	r3, [r3, #0]
    8a0c:	3301      	adds	r3, #1
    8a0e:	b2da      	uxtb	r2, r3
    8a10:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a18:	701a      	strb	r2, [r3, #0]
    8a1a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a22:	781b      	ldrb	r3, [r3, #0]
    8a24:	2bff      	cmp	r3, #255	; 0xff
    8a26:	d105      	bne.n	8a34 <send_attitude+0x618>
    8a28:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a30:	2200      	movs	r2, #0
    8a32:	701a      	strb	r2, [r3, #0]
    8a34:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a3c:	781b      	ldrb	r3, [r3, #0]
    8a3e:	461a      	mov	r2, r3
    8a40:	f24c 43c0 	movw	r3, #50368	; 0xc4c0
    8a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a48:	7819      	ldrb	r1, [r3, #0]
    8a4a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a52:	5499      	strb	r1, [r3, r2]
    8a54:	f24c 43c0 	movw	r3, #50368	; 0xc4c0
    8a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a5c:	781a      	ldrb	r2, [r3, #0]
    8a5e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a66:	781b      	ldrb	r3, [r3, #0]
    8a68:	4413      	add	r3, r2
    8a6a:	b2da      	uxtb	r2, r3
    8a6c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a74:	701a      	strb	r2, [r3, #0]
    8a76:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a7e:	781a      	ldrb	r2, [r3, #0]
    8a80:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a88:	781b      	ldrb	r3, [r3, #0]
    8a8a:	4413      	add	r3, r2
    8a8c:	b2da      	uxtb	r2, r3
    8a8e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a96:	701a      	strb	r2, [r3, #0]
    8a98:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aa0:	781b      	ldrb	r3, [r3, #0]
    8aa2:	3301      	adds	r3, #1
    8aa4:	b2da      	uxtb	r2, r3
    8aa6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8aaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aae:	701a      	strb	r2, [r3, #0]
    8ab0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ab8:	781b      	ldrb	r3, [r3, #0]
    8aba:	2bff      	cmp	r3, #255	; 0xff
    8abc:	d105      	bne.n	8aca <send_attitude+0x6ae>
    8abe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ac6:	2200      	movs	r2, #0
    8ac8:	701a      	strb	r2, [r3, #0]
    8aca:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8ace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ad2:	781b      	ldrb	r3, [r3, #0]
    8ad4:	461a      	mov	r2, r3
    8ad6:	f24c 43c0 	movw	r3, #50368	; 0xc4c0
    8ada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ade:	7859      	ldrb	r1, [r3, #1]
    8ae0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ae8:	5499      	strb	r1, [r3, r2]
    8aea:	4b7a      	ldr	r3, [pc, #488]	; (8cd4 <send_attitude+0x8b8>)
    8aec:	781a      	ldrb	r2, [r3, #0]
    8aee:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8af6:	781b      	ldrb	r3, [r3, #0]
    8af8:	4413      	add	r3, r2
    8afa:	b2da      	uxtb	r2, r3
    8afc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b04:	701a      	strb	r2, [r3, #0]
    8b06:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b0e:	781a      	ldrb	r2, [r3, #0]
    8b10:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b18:	781b      	ldrb	r3, [r3, #0]
    8b1a:	4413      	add	r3, r2
    8b1c:	b2da      	uxtb	r2, r3
    8b1e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8b22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b26:	701a      	strb	r2, [r3, #0]
    8b28:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b30:	781b      	ldrb	r3, [r3, #0]
    8b32:	3301      	adds	r3, #1
    8b34:	b2da      	uxtb	r2, r3
    8b36:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b3e:	701a      	strb	r2, [r3, #0]
    8b40:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b48:	781b      	ldrb	r3, [r3, #0]
    8b4a:	2bff      	cmp	r3, #255	; 0xff
    8b4c:	d105      	bne.n	8b5a <send_attitude+0x73e>
    8b4e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b56:	2200      	movs	r2, #0
    8b58:	701a      	strb	r2, [r3, #0]
    8b5a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8b5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b62:	781b      	ldrb	r3, [r3, #0]
    8b64:	461a      	mov	r2, r3
    8b66:	f24c 43c0 	movw	r3, #50368	; 0xc4c0
    8b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b6e:	7899      	ldrb	r1, [r3, #2]
    8b70:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b78:	5499      	strb	r1, [r3, r2]
    8b7a:	4b57      	ldr	r3, [pc, #348]	; (8cd8 <send_attitude+0x8bc>)
    8b7c:	781a      	ldrb	r2, [r3, #0]
    8b7e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b86:	781b      	ldrb	r3, [r3, #0]
    8b88:	4413      	add	r3, r2
    8b8a:	b2da      	uxtb	r2, r3
    8b8c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b94:	701a      	strb	r2, [r3, #0]
    8b96:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b9e:	781a      	ldrb	r2, [r3, #0]
    8ba0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ba8:	781b      	ldrb	r3, [r3, #0]
    8baa:	4413      	add	r3, r2
    8bac:	b2da      	uxtb	r2, r3
    8bae:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bb6:	701a      	strb	r2, [r3, #0]
    8bb8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bc0:	781b      	ldrb	r3, [r3, #0]
    8bc2:	3301      	adds	r3, #1
    8bc4:	b2da      	uxtb	r2, r3
    8bc6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bce:	701a      	strb	r2, [r3, #0]
    8bd0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bd8:	781b      	ldrb	r3, [r3, #0]
    8bda:	2bff      	cmp	r3, #255	; 0xff
    8bdc:	d105      	bne.n	8bea <send_attitude+0x7ce>
    8bde:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8be6:	2200      	movs	r2, #0
    8be8:	701a      	strb	r2, [r3, #0]
    8bea:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bf2:	781b      	ldrb	r3, [r3, #0]
    8bf4:	461a      	mov	r2, r3
    8bf6:	f24c 43c0 	movw	r3, #50368	; 0xc4c0
    8bfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bfe:	78d9      	ldrb	r1, [r3, #3]
    8c00:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c08:	5499      	strb	r1, [r3, r2]
    8c0a:	4b34      	ldr	r3, [pc, #208]	; (8cdc <send_attitude+0x8c0>)
    8c0c:	781a      	ldrb	r2, [r3, #0]
    8c0e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c16:	781b      	ldrb	r3, [r3, #0]
    8c18:	4413      	add	r3, r2
    8c1a:	b2da      	uxtb	r2, r3
    8c1c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c24:	701a      	strb	r2, [r3, #0]
    8c26:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c2e:	781a      	ldrb	r2, [r3, #0]
    8c30:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c38:	781b      	ldrb	r3, [r3, #0]
    8c3a:	4413      	add	r3, r2
    8c3c:	b2da      	uxtb	r2, r3
    8c3e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c46:	701a      	strb	r2, [r3, #0]
    8c48:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c50:	781b      	ldrb	r3, [r3, #0]
    8c52:	3301      	adds	r3, #1
    8c54:	b2da      	uxtb	r2, r3
    8c56:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c5e:	701a      	strb	r2, [r3, #0]
    8c60:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8c64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c68:	781b      	ldrb	r3, [r3, #0]
    8c6a:	2bff      	cmp	r3, #255	; 0xff
    8c6c:	d105      	bne.n	8c7a <send_attitude+0x85e>
    8c6e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c76:	2200      	movs	r2, #0
    8c78:	701a      	strb	r2, [r3, #0]
    8c7a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c82:	781b      	ldrb	r3, [r3, #0]
    8c84:	461a      	mov	r2, r3
    8c86:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8c8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c8e:	7819      	ldrb	r1, [r3, #0]
    8c90:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c98:	5499      	strb	r1, [r3, r2]
    8c9a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ca2:	781b      	ldrb	r3, [r3, #0]
    8ca4:	3301      	adds	r3, #1
    8ca6:	b2da      	uxtb	r2, r3
    8ca8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cb0:	701a      	strb	r2, [r3, #0]
    8cb2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8cb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cba:	781b      	ldrb	r3, [r3, #0]
    8cbc:	2bff      	cmp	r3, #255	; 0xff
    8cbe:	d10f      	bne.n	8ce0 <send_attitude+0x8c4>
    8cc0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cc8:	2200      	movs	r2, #0
    8cca:	701a      	strb	r2, [r3, #0]
    8ccc:	e008      	b.n	8ce0 <send_attitude+0x8c4>
    8cce:	bf00      	nop
    8cd0:	2004c4bf 	.word	0x2004c4bf
    8cd4:	2004c4c1 	.word	0x2004c4c1
    8cd8:	2004c4c2 	.word	0x2004c4c2
    8cdc:	2004c4c3 	.word	0x2004c4c3
    8ce0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ce8:	781b      	ldrb	r3, [r3, #0]
    8cea:	461a      	mov	r2, r3
    8cec:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8cf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cf4:	7819      	ldrb	r1, [r3, #0]
    8cf6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8cfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cfe:	5499      	strb	r1, [r3, r2]
    8d00:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8d04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d08:	781b      	ldrb	r3, [r3, #0]
    8d0a:	3301      	adds	r3, #1
    8d0c:	b2da      	uxtb	r2, r3
    8d0e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8d12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d16:	701a      	strb	r2, [r3, #0]
    8d18:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8d1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d20:	781b      	ldrb	r3, [r3, #0]
    8d22:	2bff      	cmp	r3, #255	; 0xff
    8d24:	d105      	bne.n	8d32 <send_attitude+0x916>
    8d26:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8d2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d2e:	2200      	movs	r2, #0
    8d30:	701a      	strb	r2, [r3, #0]
    8d32:	f242 0339 	movw	r3, #8249	; 0x2039
    8d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d3a:	781b      	ldrb	r3, [r3, #0]
    8d3c:	b2db      	uxtb	r3, r3
    8d3e:	f003 0310 	and.w	r3, r3, #16
    8d42:	2b00      	cmp	r3, #0
    8d44:	d15a      	bne.n	8dfc <send_attitude+0x9e0>
    8d46:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    8d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d4e:	781b      	ldrb	r3, [r3, #0]
    8d50:	b2db      	uxtb	r3, r3
    8d52:	461a      	mov	r2, r3
    8d54:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d5c:	5c9a      	ldrb	r2, [r3, r2]
    8d5e:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    8d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d66:	701a      	strb	r2, [r3, #0]
    8d68:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    8d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d70:	2200      	movs	r2, #0
    8d72:	701a      	strb	r2, [r3, #0]
    8d74:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    8d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d7c:	781b      	ldrb	r3, [r3, #0]
    8d7e:	b2db      	uxtb	r3, r3
    8d80:	3301      	adds	r3, #1
    8d82:	b2da      	uxtb	r2, r3
    8d84:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    8d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d8c:	701a      	strb	r2, [r3, #0]
    8d8e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    8d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d96:	781b      	ldrb	r3, [r3, #0]
    8d98:	b2db      	uxtb	r3, r3
    8d9a:	2bff      	cmp	r3, #255	; 0xff
    8d9c:	d105      	bne.n	8daa <send_attitude+0x98e>
    8d9e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    8da2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8da6:	2200      	movs	r2, #0
    8da8:	701a      	strb	r2, [r3, #0]
    8daa:	f242 0338 	movw	r3, #8248	; 0x2038
    8dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8db2:	f242 0238 	movw	r2, #8248	; 0x2038
    8db6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8dba:	7812      	ldrb	r2, [r2, #0]
    8dbc:	b2d2      	uxtb	r2, r2
    8dbe:	f042 0201 	orr.w	r2, r2, #1
    8dc2:	b2d2      	uxtb	r2, r2
    8dc4:	701a      	strb	r2, [r3, #0]
    8dc6:	f242 0339 	movw	r3, #8249	; 0x2039
    8dca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dce:	f242 0239 	movw	r2, #8249	; 0x2039
    8dd2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8dd6:	7812      	ldrb	r2, [r2, #0]
    8dd8:	b2d2      	uxtb	r2, r2
    8dda:	f042 0210 	orr.w	r2, r2, #16
    8dde:	b2d2      	uxtb	r2, r2
    8de0:	701a      	strb	r2, [r3, #0]
    8de2:	e00b      	b.n	8dfc <send_attitude+0x9e0>
    8de4:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    8de8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dec:	781b      	ldrb	r3, [r3, #0]
    8dee:	3301      	adds	r3, #1
    8df0:	b2da      	uxtb	r2, r3
    8df2:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    8df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dfa:	701a      	strb	r2, [r3, #0]
  }
}
    8dfc:	46bd      	mov	sp, r7
    8dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e02:	4770      	bx	lr

00008e04 <send_adc>:
  
void send_adc(void){  //500ms
    8e04:	b480      	push	{r7}
    8e06:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    8e08:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    8e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e10:	781a      	ldrb	r2, [r3, #0]
    8e12:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8e16:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8e1a:	fba3 1302 	umull	r1, r3, r3, r2
    8e1e:	0899      	lsrs	r1, r3, #2
    8e20:	460b      	mov	r3, r1
    8e22:	009b      	lsls	r3, r3, #2
    8e24:	440b      	add	r3, r1
    8e26:	1ad3      	subs	r3, r2, r3
    8e28:	b2db      	uxtb	r3, r3
    8e2a:	2b01      	cmp	r3, #1
    8e2c:	f040 8269 	bne.w	9302 <send_adc+0x4fe>
    8e30:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8e34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e38:	781a      	ldrb	r2, [r3, #0]
    8e3a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    8e3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e42:	781b      	ldrb	r3, [r3, #0]
    8e44:	b2db      	uxtb	r3, r3
    8e46:	429a      	cmp	r2, r3
    8e48:	d313      	bcc.n	8e72 <send_adc+0x6e>
    8e4a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    8e4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e52:	781b      	ldrb	r3, [r3, #0]
    8e54:	b2db      	uxtb	r3, r3
    8e56:	461a      	mov	r2, r3
    8e58:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8e5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e60:	781b      	ldrb	r3, [r3, #0]
    8e62:	1ad3      	subs	r3, r2, r3
    8e64:	33ff      	adds	r3, #255	; 0xff
    8e66:	2b08      	cmp	r3, #8
    8e68:	bfd4      	ite	le
    8e6a:	2300      	movle	r3, #0
    8e6c:	2301      	movgt	r3, #1
    8e6e:	b2db      	uxtb	r3, r3
    8e70:	e011      	b.n	8e96 <send_adc+0x92>
    8e72:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    8e76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e7a:	781b      	ldrb	r3, [r3, #0]
    8e7c:	b2db      	uxtb	r3, r3
    8e7e:	461a      	mov	r2, r3
    8e80:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8e84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e88:	781b      	ldrb	r3, [r3, #0]
    8e8a:	1ad3      	subs	r3, r2, r3
    8e8c:	2b08      	cmp	r3, #8
    8e8e:	bfd4      	ite	le
    8e90:	2300      	movle	r3, #0
    8e92:	2301      	movgt	r3, #1
    8e94:	b2db      	uxtb	r3, r3
    8e96:	2b00      	cmp	r3, #0
    8e98:	f000 8227 	beq.w	92ea <send_adc+0x4e6>
    8e9c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ea4:	781b      	ldrb	r3, [r3, #0]
    8ea6:	461a      	mov	r2, r3
    8ea8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eb0:	2105      	movs	r1, #5
    8eb2:	5499      	strb	r1, [r3, r2]
    8eb4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8eb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ebc:	781b      	ldrb	r3, [r3, #0]
    8ebe:	3301      	adds	r3, #1
    8ec0:	b2da      	uxtb	r2, r3
    8ec2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eca:	701a      	strb	r2, [r3, #0]
    8ecc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8ed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ed4:	781b      	ldrb	r3, [r3, #0]
    8ed6:	2bff      	cmp	r3, #255	; 0xff
    8ed8:	d105      	bne.n	8ee6 <send_adc+0xe2>
    8eda:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8ede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ee2:	2200      	movs	r2, #0
    8ee4:	701a      	strb	r2, [r3, #0]
    8ee6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eee:	781b      	ldrb	r3, [r3, #0]
    8ef0:	461a      	mov	r2, r3
    8ef2:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8ef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8efa:	2107      	movs	r1, #7
    8efc:	5499      	strb	r1, [r3, r2]
    8efe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f06:	781b      	ldrb	r3, [r3, #0]
    8f08:	3301      	adds	r3, #1
    8f0a:	b2da      	uxtb	r2, r3
    8f0c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8f10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f14:	701a      	strb	r2, [r3, #0]
    8f16:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f1e:	781b      	ldrb	r3, [r3, #0]
    8f20:	2bff      	cmp	r3, #255	; 0xff
    8f22:	d105      	bne.n	8f30 <send_adc+0x12c>
    8f24:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8f28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f2c:	2200      	movs	r2, #0
    8f2e:	701a      	strb	r2, [r3, #0]
    8f30:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8f34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f38:	2207      	movs	r2, #7
    8f3a:	701a      	strb	r2, [r3, #0]
    8f3c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f44:	2207      	movs	r2, #7
    8f46:	701a      	strb	r2, [r3, #0]
    8f48:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f50:	781b      	ldrb	r3, [r3, #0]
    8f52:	461a      	mov	r2, r3
    8f54:	f24c 1398 	movw	r3, #49560	; 0xc198
    8f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f5c:	7819      	ldrb	r1, [r3, #0]
    8f5e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f66:	5499      	strb	r1, [r3, r2]
    8f68:	f24c 1398 	movw	r3, #49560	; 0xc198
    8f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f70:	781a      	ldrb	r2, [r3, #0]
    8f72:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8f76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f7a:	781b      	ldrb	r3, [r3, #0]
    8f7c:	4413      	add	r3, r2
    8f7e:	b2da      	uxtb	r2, r3
    8f80:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f88:	701a      	strb	r2, [r3, #0]
    8f8a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8f8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f92:	781a      	ldrb	r2, [r3, #0]
    8f94:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8f98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f9c:	781b      	ldrb	r3, [r3, #0]
    8f9e:	4413      	add	r3, r2
    8fa0:	b2da      	uxtb	r2, r3
    8fa2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8fa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8faa:	701a      	strb	r2, [r3, #0]
    8fac:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8fb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fb4:	781b      	ldrb	r3, [r3, #0]
    8fb6:	3301      	adds	r3, #1
    8fb8:	b2da      	uxtb	r2, r3
    8fba:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8fbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fc2:	701a      	strb	r2, [r3, #0]
    8fc4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fcc:	781b      	ldrb	r3, [r3, #0]
    8fce:	2bff      	cmp	r3, #255	; 0xff
    8fd0:	d105      	bne.n	8fde <send_adc+0x1da>
    8fd2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fda:	2200      	movs	r2, #0
    8fdc:	701a      	strb	r2, [r3, #0]
    8fde:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8fe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fe6:	781b      	ldrb	r3, [r3, #0]
    8fe8:	461a      	mov	r2, r3
    8fea:	f24c 1398 	movw	r3, #49560	; 0xc198
    8fee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ff2:	7859      	ldrb	r1, [r3, #1]
    8ff4:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ffc:	5499      	strb	r1, [r3, r2]
    8ffe:	4bc3      	ldr	r3, [pc, #780]	; (930c <send_adc+0x508>)
    9000:	781a      	ldrb	r2, [r3, #0]
    9002:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    900a:	781b      	ldrb	r3, [r3, #0]
    900c:	4413      	add	r3, r2
    900e:	b2da      	uxtb	r2, r3
    9010:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9018:	701a      	strb	r2, [r3, #0]
    901a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    901e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9022:	781a      	ldrb	r2, [r3, #0]
    9024:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    902c:	781b      	ldrb	r3, [r3, #0]
    902e:	4413      	add	r3, r2
    9030:	b2da      	uxtb	r2, r3
    9032:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    903a:	701a      	strb	r2, [r3, #0]
    903c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9044:	781b      	ldrb	r3, [r3, #0]
    9046:	3301      	adds	r3, #1
    9048:	b2da      	uxtb	r2, r3
    904a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    904e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9052:	701a      	strb	r2, [r3, #0]
    9054:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    905c:	781b      	ldrb	r3, [r3, #0]
    905e:	2bff      	cmp	r3, #255	; 0xff
    9060:	d105      	bne.n	906e <send_adc+0x26a>
    9062:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    906a:	2200      	movs	r2, #0
    906c:	701a      	strb	r2, [r3, #0]
    906e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9076:	781b      	ldrb	r3, [r3, #0]
    9078:	461a      	mov	r2, r3
    907a:	f24c 139a 	movw	r3, #49562	; 0xc19a
    907e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9082:	7819      	ldrb	r1, [r3, #0]
    9084:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    908c:	5499      	strb	r1, [r3, r2]
    908e:	f24c 139a 	movw	r3, #49562	; 0xc19a
    9092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9096:	781a      	ldrb	r2, [r3, #0]
    9098:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    909c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90a0:	781b      	ldrb	r3, [r3, #0]
    90a2:	4413      	add	r3, r2
    90a4:	b2da      	uxtb	r2, r3
    90a6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    90aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90ae:	701a      	strb	r2, [r3, #0]
    90b0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    90b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90b8:	781a      	ldrb	r2, [r3, #0]
    90ba:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    90be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90c2:	781b      	ldrb	r3, [r3, #0]
    90c4:	4413      	add	r3, r2
    90c6:	b2da      	uxtb	r2, r3
    90c8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    90cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90d0:	701a      	strb	r2, [r3, #0]
    90d2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    90d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90da:	781b      	ldrb	r3, [r3, #0]
    90dc:	3301      	adds	r3, #1
    90de:	b2da      	uxtb	r2, r3
    90e0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    90e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90e8:	701a      	strb	r2, [r3, #0]
    90ea:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    90ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90f2:	781b      	ldrb	r3, [r3, #0]
    90f4:	2bff      	cmp	r3, #255	; 0xff
    90f6:	d105      	bne.n	9104 <send_adc+0x300>
    90f8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    90fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9100:	2200      	movs	r2, #0
    9102:	701a      	strb	r2, [r3, #0]
    9104:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    910c:	781b      	ldrb	r3, [r3, #0]
    910e:	461a      	mov	r2, r3
    9110:	f24c 139a 	movw	r3, #49562	; 0xc19a
    9114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9118:	7859      	ldrb	r1, [r3, #1]
    911a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    911e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9122:	5499      	strb	r1, [r3, r2]
    9124:	4b7a      	ldr	r3, [pc, #488]	; (9310 <send_adc+0x50c>)
    9126:	781a      	ldrb	r2, [r3, #0]
    9128:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    912c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9130:	781b      	ldrb	r3, [r3, #0]
    9132:	4413      	add	r3, r2
    9134:	b2da      	uxtb	r2, r3
    9136:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    913a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    913e:	701a      	strb	r2, [r3, #0]
    9140:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9148:	781a      	ldrb	r2, [r3, #0]
    914a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    914e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9152:	781b      	ldrb	r3, [r3, #0]
    9154:	4413      	add	r3, r2
    9156:	b2da      	uxtb	r2, r3
    9158:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    915c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9160:	701a      	strb	r2, [r3, #0]
    9162:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    916a:	781b      	ldrb	r3, [r3, #0]
    916c:	3301      	adds	r3, #1
    916e:	b2da      	uxtb	r2, r3
    9170:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9178:	701a      	strb	r2, [r3, #0]
    917a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    917e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9182:	781b      	ldrb	r3, [r3, #0]
    9184:	2bff      	cmp	r3, #255	; 0xff
    9186:	d105      	bne.n	9194 <send_adc+0x390>
    9188:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    918c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9190:	2200      	movs	r2, #0
    9192:	701a      	strb	r2, [r3, #0]
    9194:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    919c:	781b      	ldrb	r3, [r3, #0]
    919e:	461a      	mov	r2, r3
    91a0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    91a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91a8:	7819      	ldrb	r1, [r3, #0]
    91aa:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    91ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91b2:	5499      	strb	r1, [r3, r2]
    91b4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    91b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91bc:	781b      	ldrb	r3, [r3, #0]
    91be:	3301      	adds	r3, #1
    91c0:	b2da      	uxtb	r2, r3
    91c2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    91c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ca:	701a      	strb	r2, [r3, #0]
    91cc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    91d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91d4:	781b      	ldrb	r3, [r3, #0]
    91d6:	2bff      	cmp	r3, #255	; 0xff
    91d8:	d105      	bne.n	91e6 <send_adc+0x3e2>
    91da:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    91de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91e2:	2200      	movs	r2, #0
    91e4:	701a      	strb	r2, [r3, #0]
    91e6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    91ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ee:	781b      	ldrb	r3, [r3, #0]
    91f0:	461a      	mov	r2, r3
    91f2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    91f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91fa:	7819      	ldrb	r1, [r3, #0]
    91fc:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9204:	5499      	strb	r1, [r3, r2]
    9206:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    920a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    920e:	781b      	ldrb	r3, [r3, #0]
    9210:	3301      	adds	r3, #1
    9212:	b2da      	uxtb	r2, r3
    9214:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9218:	f2c2 0304 	movt	r3, #8196	; 0x2004
    921c:	701a      	strb	r2, [r3, #0]
    921e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9226:	781b      	ldrb	r3, [r3, #0]
    9228:	2bff      	cmp	r3, #255	; 0xff
    922a:	d105      	bne.n	9238 <send_adc+0x434>
    922c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9234:	2200      	movs	r2, #0
    9236:	701a      	strb	r2, [r3, #0]
    9238:	f242 0339 	movw	r3, #8249	; 0x2039
    923c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9240:	781b      	ldrb	r3, [r3, #0]
    9242:	b2db      	uxtb	r3, r3
    9244:	f003 0310 	and.w	r3, r3, #16
    9248:	2b00      	cmp	r3, #0
    924a:	d15a      	bne.n	9302 <send_adc+0x4fe>
    924c:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9254:	781b      	ldrb	r3, [r3, #0]
    9256:	b2db      	uxtb	r3, r3
    9258:	461a      	mov	r2, r3
    925a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    925e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9262:	5c9a      	ldrb	r2, [r3, r2]
    9264:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    9268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    926c:	701a      	strb	r2, [r3, #0]
    926e:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    9272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9276:	2200      	movs	r2, #0
    9278:	701a      	strb	r2, [r3, #0]
    927a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    927e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9282:	781b      	ldrb	r3, [r3, #0]
    9284:	b2db      	uxtb	r3, r3
    9286:	3301      	adds	r3, #1
    9288:	b2da      	uxtb	r2, r3
    928a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    928e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9292:	701a      	strb	r2, [r3, #0]
    9294:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    929c:	781b      	ldrb	r3, [r3, #0]
    929e:	b2db      	uxtb	r3, r3
    92a0:	2bff      	cmp	r3, #255	; 0xff
    92a2:	d105      	bne.n	92b0 <send_adc+0x4ac>
    92a4:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    92a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ac:	2200      	movs	r2, #0
    92ae:	701a      	strb	r2, [r3, #0]
    92b0:	f242 0338 	movw	r3, #8248	; 0x2038
    92b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92b8:	f242 0238 	movw	r2, #8248	; 0x2038
    92bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    92c0:	7812      	ldrb	r2, [r2, #0]
    92c2:	b2d2      	uxtb	r2, r2
    92c4:	f042 0201 	orr.w	r2, r2, #1
    92c8:	b2d2      	uxtb	r2, r2
    92ca:	701a      	strb	r2, [r3, #0]
    92cc:	f242 0339 	movw	r3, #8249	; 0x2039
    92d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92d4:	f242 0239 	movw	r2, #8249	; 0x2039
    92d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    92dc:	7812      	ldrb	r2, [r2, #0]
    92de:	b2d2      	uxtb	r2, r2
    92e0:	f042 0210 	orr.w	r2, r2, #16
    92e4:	b2d2      	uxtb	r2, r2
    92e6:	701a      	strb	r2, [r3, #0]
    92e8:	e00b      	b.n	9302 <send_adc+0x4fe>
    92ea:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    92ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92f2:	781b      	ldrb	r3, [r3, #0]
    92f4:	3301      	adds	r3, #1
    92f6:	b2da      	uxtb	r2, r3
    92f8:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    92fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9300:	701a      	strb	r2, [r3, #0]
}
    9302:	46bd      	mov	sp, r7
    9304:	f85d 7b04 	ldr.w	r7, [sp], #4
    9308:	4770      	bx	lr
    930a:	bf00      	nop
    930c:	2004c199 	.word	0x2004c199
    9310:	2004c19b 	.word	0x2004c19b

00009314 <send_settings>:
void send_settings(void){ //500ms
    9314:	b480      	push	{r7}
    9316:	af00      	add	r7, sp, #0
  //if(!boot)
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    9318:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    931c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9320:	781a      	ldrb	r2, [r3, #0]
    9322:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9326:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    932a:	fba3 1302 	umull	r1, r3, r3, r2
    932e:	0899      	lsrs	r1, r3, #2
    9330:	460b      	mov	r3, r1
    9332:	009b      	lsls	r3, r3, #2
    9334:	440b      	add	r3, r1
    9336:	1ad3      	subs	r3, r2, r3
    9338:	b2db      	uxtb	r3, r3
    933a:	2b02      	cmp	r3, #2
    933c:	f040 83e7 	bne.w	9b0e <send_settings+0x7fa>
    9340:	f24c 530c 	movw	r3, #50444	; 0xc50c
    9344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9348:	781b      	ldrb	r3, [r3, #0]
    934a:	2b00      	cmp	r3, #0
    934c:	f000 83df 	beq.w	9b0e <send_settings+0x7fa>
    9350:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9358:	781a      	ldrb	r2, [r3, #0]
    935a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    935e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9362:	781b      	ldrb	r3, [r3, #0]
    9364:	b2db      	uxtb	r3, r3
    9366:	429a      	cmp	r2, r3
    9368:	d313      	bcc.n	9392 <send_settings+0x7e>
    936a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    936e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9372:	781b      	ldrb	r3, [r3, #0]
    9374:	b2db      	uxtb	r3, r3
    9376:	461a      	mov	r2, r3
    9378:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    937c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9380:	781b      	ldrb	r3, [r3, #0]
    9382:	1ad3      	subs	r3, r2, r3
    9384:	33ff      	adds	r3, #255	; 0xff
    9386:	2b0d      	cmp	r3, #13
    9388:	bfd4      	ite	le
    938a:	2300      	movle	r3, #0
    938c:	2301      	movgt	r3, #1
    938e:	b2db      	uxtb	r3, r3
    9390:	e011      	b.n	93b6 <send_settings+0xa2>
    9392:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    939a:	781b      	ldrb	r3, [r3, #0]
    939c:	b2db      	uxtb	r3, r3
    939e:	461a      	mov	r2, r3
    93a0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    93a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93a8:	781b      	ldrb	r3, [r3, #0]
    93aa:	1ad3      	subs	r3, r2, r3
    93ac:	2b0d      	cmp	r3, #13
    93ae:	bfd4      	ite	le
    93b0:	2300      	movle	r3, #0
    93b2:	2301      	movgt	r3, #1
    93b4:	b2db      	uxtb	r3, r3
    93b6:	2b00      	cmp	r3, #0
    93b8:	f000 839d 	beq.w	9af6 <send_settings+0x7e2>
    93bc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    93c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93c4:	781b      	ldrb	r3, [r3, #0]
    93c6:	461a      	mov	r2, r3
    93c8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    93cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93d0:	2105      	movs	r1, #5
    93d2:	5499      	strb	r1, [r3, r2]
    93d4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    93d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93dc:	781b      	ldrb	r3, [r3, #0]
    93de:	3301      	adds	r3, #1
    93e0:	b2da      	uxtb	r2, r3
    93e2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    93e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93ea:	701a      	strb	r2, [r3, #0]
    93ec:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    93f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93f4:	781b      	ldrb	r3, [r3, #0]
    93f6:	2bff      	cmp	r3, #255	; 0xff
    93f8:	d105      	bne.n	9406 <send_settings+0xf2>
    93fa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    93fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9402:	2200      	movs	r2, #0
    9404:	701a      	strb	r2, [r3, #0]
    9406:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    940a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    940e:	781b      	ldrb	r3, [r3, #0]
    9410:	461a      	mov	r2, r3
    9412:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    941a:	2111      	movs	r1, #17
    941c:	5499      	strb	r1, [r3, r2]
    941e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9426:	781b      	ldrb	r3, [r3, #0]
    9428:	3301      	adds	r3, #1
    942a:	b2da      	uxtb	r2, r3
    942c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9434:	701a      	strb	r2, [r3, #0]
    9436:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    943a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    943e:	781b      	ldrb	r3, [r3, #0]
    9440:	2bff      	cmp	r3, #255	; 0xff
    9442:	d105      	bne.n	9450 <send_settings+0x13c>
    9444:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    944c:	2200      	movs	r2, #0
    944e:	701a      	strb	r2, [r3, #0]
    9450:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9458:	2211      	movs	r2, #17
    945a:	701a      	strb	r2, [r3, #0]
    945c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9464:	2211      	movs	r2, #17
    9466:	701a      	strb	r2, [r3, #0]
    9468:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    946c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9470:	781b      	ldrb	r3, [r3, #0]
    9472:	461a      	mov	r2, r3
    9474:	f24c 530c 	movw	r3, #50444	; 0xc50c
    9478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    947c:	7819      	ldrb	r1, [r3, #0]
    947e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9486:	5499      	strb	r1, [r3, r2]
    9488:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    948c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9490:	781a      	ldrb	r2, [r3, #0]
    9492:	f24c 530c 	movw	r3, #50444	; 0xc50c
    9496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    949a:	781b      	ldrb	r3, [r3, #0]
    949c:	4413      	add	r3, r2
    949e:	b2da      	uxtb	r2, r3
    94a0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    94a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94a8:	701a      	strb	r2, [r3, #0]
    94aa:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    94ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94b2:	781a      	ldrb	r2, [r3, #0]
    94b4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    94b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94bc:	781b      	ldrb	r3, [r3, #0]
    94be:	4413      	add	r3, r2
    94c0:	b2da      	uxtb	r2, r3
    94c2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    94c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94ca:	701a      	strb	r2, [r3, #0]
    94cc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    94d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94d4:	781b      	ldrb	r3, [r3, #0]
    94d6:	3301      	adds	r3, #1
    94d8:	b2da      	uxtb	r2, r3
    94da:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    94de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94e2:	701a      	strb	r2, [r3, #0]
    94e4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    94e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94ec:	781b      	ldrb	r3, [r3, #0]
    94ee:	2bff      	cmp	r3, #255	; 0xff
    94f0:	d105      	bne.n	94fe <send_settings+0x1ea>
    94f2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    94f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94fa:	2200      	movs	r2, #0
    94fc:	701a      	strb	r2, [r3, #0]
    94fe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9506:	781b      	ldrb	r3, [r3, #0]
    9508:	461a      	mov	r2, r3
    950a:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    950e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9512:	7819      	ldrb	r1, [r3, #0]
    9514:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    951c:	5499      	strb	r1, [r3, r2]
    951e:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    9522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9526:	781a      	ldrb	r2, [r3, #0]
    9528:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    952c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9530:	781b      	ldrb	r3, [r3, #0]
    9532:	4413      	add	r3, r2
    9534:	b2da      	uxtb	r2, r3
    9536:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    953a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    953e:	701a      	strb	r2, [r3, #0]
    9540:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9548:	781a      	ldrb	r2, [r3, #0]
    954a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    954e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9552:	781b      	ldrb	r3, [r3, #0]
    9554:	4413      	add	r3, r2
    9556:	b2da      	uxtb	r2, r3
    9558:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    955c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9560:	701a      	strb	r2, [r3, #0]
    9562:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    956a:	781b      	ldrb	r3, [r3, #0]
    956c:	3301      	adds	r3, #1
    956e:	b2da      	uxtb	r2, r3
    9570:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9578:	701a      	strb	r2, [r3, #0]
    957a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    957e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9582:	781b      	ldrb	r3, [r3, #0]
    9584:	2bff      	cmp	r3, #255	; 0xff
    9586:	d105      	bne.n	9594 <send_settings+0x280>
    9588:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    958c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9590:	2200      	movs	r2, #0
    9592:	701a      	strb	r2, [r3, #0]
    9594:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    959c:	781b      	ldrb	r3, [r3, #0]
    959e:	461a      	mov	r2, r3
    95a0:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    95a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95a8:	7859      	ldrb	r1, [r3, #1]
    95aa:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    95ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95b2:	5499      	strb	r1, [r3, r2]
    95b4:	4bd1      	ldr	r3, [pc, #836]	; (98fc <send_settings+0x5e8>)
    95b6:	781a      	ldrb	r2, [r3, #0]
    95b8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    95bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95c0:	781b      	ldrb	r3, [r3, #0]
    95c2:	4413      	add	r3, r2
    95c4:	b2da      	uxtb	r2, r3
    95c6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    95ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ce:	701a      	strb	r2, [r3, #0]
    95d0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    95d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95d8:	781a      	ldrb	r2, [r3, #0]
    95da:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    95de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95e2:	781b      	ldrb	r3, [r3, #0]
    95e4:	4413      	add	r3, r2
    95e6:	b2da      	uxtb	r2, r3
    95e8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    95ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95f0:	701a      	strb	r2, [r3, #0]
    95f2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    95f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95fa:	781b      	ldrb	r3, [r3, #0]
    95fc:	3301      	adds	r3, #1
    95fe:	b2da      	uxtb	r2, r3
    9600:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9608:	701a      	strb	r2, [r3, #0]
    960a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    960e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9612:	781b      	ldrb	r3, [r3, #0]
    9614:	2bff      	cmp	r3, #255	; 0xff
    9616:	d105      	bne.n	9624 <send_settings+0x310>
    9618:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    961c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9620:	2200      	movs	r2, #0
    9622:	701a      	strb	r2, [r3, #0]
    9624:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    962c:	781b      	ldrb	r3, [r3, #0]
    962e:	461a      	mov	r2, r3
    9630:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    9634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9638:	7899      	ldrb	r1, [r3, #2]
    963a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    963e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9642:	5499      	strb	r1, [r3, r2]
    9644:	4bae      	ldr	r3, [pc, #696]	; (9900 <send_settings+0x5ec>)
    9646:	781a      	ldrb	r2, [r3, #0]
    9648:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    964c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9650:	781b      	ldrb	r3, [r3, #0]
    9652:	4413      	add	r3, r2
    9654:	b2da      	uxtb	r2, r3
    9656:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    965a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    965e:	701a      	strb	r2, [r3, #0]
    9660:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9668:	781a      	ldrb	r2, [r3, #0]
    966a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    966e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9672:	781b      	ldrb	r3, [r3, #0]
    9674:	4413      	add	r3, r2
    9676:	b2da      	uxtb	r2, r3
    9678:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    967c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9680:	701a      	strb	r2, [r3, #0]
    9682:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    968a:	781b      	ldrb	r3, [r3, #0]
    968c:	3301      	adds	r3, #1
    968e:	b2da      	uxtb	r2, r3
    9690:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9698:	701a      	strb	r2, [r3, #0]
    969a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    969e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96a2:	781b      	ldrb	r3, [r3, #0]
    96a4:	2bff      	cmp	r3, #255	; 0xff
    96a6:	d105      	bne.n	96b4 <send_settings+0x3a0>
    96a8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    96ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96b0:	2200      	movs	r2, #0
    96b2:	701a      	strb	r2, [r3, #0]
    96b4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    96b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96bc:	781b      	ldrb	r3, [r3, #0]
    96be:	461a      	mov	r2, r3
    96c0:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    96c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96c8:	78d9      	ldrb	r1, [r3, #3]
    96ca:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    96ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96d2:	5499      	strb	r1, [r3, r2]
    96d4:	4b8b      	ldr	r3, [pc, #556]	; (9904 <send_settings+0x5f0>)
    96d6:	781a      	ldrb	r2, [r3, #0]
    96d8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    96dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96e0:	781b      	ldrb	r3, [r3, #0]
    96e2:	4413      	add	r3, r2
    96e4:	b2da      	uxtb	r2, r3
    96e6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    96ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ee:	701a      	strb	r2, [r3, #0]
    96f0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    96f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96f8:	781a      	ldrb	r2, [r3, #0]
    96fa:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    96fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9702:	781b      	ldrb	r3, [r3, #0]
    9704:	4413      	add	r3, r2
    9706:	b2da      	uxtb	r2, r3
    9708:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    970c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9710:	701a      	strb	r2, [r3, #0]
    9712:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9716:	f2c2 0304 	movt	r3, #8196	; 0x2004
    971a:	781b      	ldrb	r3, [r3, #0]
    971c:	3301      	adds	r3, #1
    971e:	b2da      	uxtb	r2, r3
    9720:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9728:	701a      	strb	r2, [r3, #0]
    972a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    972e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9732:	781b      	ldrb	r3, [r3, #0]
    9734:	2bff      	cmp	r3, #255	; 0xff
    9736:	d105      	bne.n	9744 <send_settings+0x430>
    9738:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    973c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9740:	2200      	movs	r2, #0
    9742:	701a      	strb	r2, [r3, #0]
    9744:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    974c:	781b      	ldrb	r3, [r3, #0]
    974e:	461a      	mov	r2, r3
    9750:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9758:	7819      	ldrb	r1, [r3, #0]
    975a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    975e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9762:	5499      	strb	r1, [r3, r2]
    9764:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    976c:	781a      	ldrb	r2, [r3, #0]
    976e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9776:	781b      	ldrb	r3, [r3, #0]
    9778:	4413      	add	r3, r2
    977a:	b2da      	uxtb	r2, r3
    977c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9784:	701a      	strb	r2, [r3, #0]
    9786:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    978a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    978e:	781a      	ldrb	r2, [r3, #0]
    9790:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9798:	781b      	ldrb	r3, [r3, #0]
    979a:	4413      	add	r3, r2
    979c:	b2da      	uxtb	r2, r3
    979e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    97a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97a6:	701a      	strb	r2, [r3, #0]
    97a8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    97ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97b0:	781b      	ldrb	r3, [r3, #0]
    97b2:	3301      	adds	r3, #1
    97b4:	b2da      	uxtb	r2, r3
    97b6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    97ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97be:	701a      	strb	r2, [r3, #0]
    97c0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    97c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97c8:	781b      	ldrb	r3, [r3, #0]
    97ca:	2bff      	cmp	r3, #255	; 0xff
    97cc:	d105      	bne.n	97da <send_settings+0x4c6>
    97ce:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    97d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97d6:	2200      	movs	r2, #0
    97d8:	701a      	strb	r2, [r3, #0]
    97da:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    97de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97e2:	781b      	ldrb	r3, [r3, #0]
    97e4:	461a      	mov	r2, r3
    97e6:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    97ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ee:	7859      	ldrb	r1, [r3, #1]
    97f0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    97f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97f8:	5499      	strb	r1, [r3, r2]
    97fa:	4b43      	ldr	r3, [pc, #268]	; (9908 <send_settings+0x5f4>)
    97fc:	781a      	ldrb	r2, [r3, #0]
    97fe:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9806:	781b      	ldrb	r3, [r3, #0]
    9808:	4413      	add	r3, r2
    980a:	b2da      	uxtb	r2, r3
    980c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9814:	701a      	strb	r2, [r3, #0]
    9816:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    981a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    981e:	781a      	ldrb	r2, [r3, #0]
    9820:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9828:	781b      	ldrb	r3, [r3, #0]
    982a:	4413      	add	r3, r2
    982c:	b2da      	uxtb	r2, r3
    982e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9836:	701a      	strb	r2, [r3, #0]
    9838:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    983c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9840:	781b      	ldrb	r3, [r3, #0]
    9842:	3301      	adds	r3, #1
    9844:	b2da      	uxtb	r2, r3
    9846:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    984a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    984e:	701a      	strb	r2, [r3, #0]
    9850:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9858:	781b      	ldrb	r3, [r3, #0]
    985a:	2bff      	cmp	r3, #255	; 0xff
    985c:	d105      	bne.n	986a <send_settings+0x556>
    985e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9866:	2200      	movs	r2, #0
    9868:	701a      	strb	r2, [r3, #0]
    986a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    986e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9872:	781b      	ldrb	r3, [r3, #0]
    9874:	461a      	mov	r2, r3
    9876:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    987a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    987e:	7899      	ldrb	r1, [r3, #2]
    9880:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9888:	5499      	strb	r1, [r3, r2]
    988a:	4b20      	ldr	r3, [pc, #128]	; (990c <send_settings+0x5f8>)
    988c:	781a      	ldrb	r2, [r3, #0]
    988e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9896:	781b      	ldrb	r3, [r3, #0]
    9898:	4413      	add	r3, r2
    989a:	b2da      	uxtb	r2, r3
    989c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    98a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98a4:	701a      	strb	r2, [r3, #0]
    98a6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    98aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ae:	781a      	ldrb	r2, [r3, #0]
    98b0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    98b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98b8:	781b      	ldrb	r3, [r3, #0]
    98ba:	4413      	add	r3, r2
    98bc:	b2da      	uxtb	r2, r3
    98be:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    98c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98c6:	701a      	strb	r2, [r3, #0]
    98c8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    98cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98d0:	781b      	ldrb	r3, [r3, #0]
    98d2:	3301      	adds	r3, #1
    98d4:	b2da      	uxtb	r2, r3
    98d6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    98da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98de:	701a      	strb	r2, [r3, #0]
    98e0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    98e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98e8:	781b      	ldrb	r3, [r3, #0]
    98ea:	2bff      	cmp	r3, #255	; 0xff
    98ec:	d110      	bne.n	9910 <send_settings+0x5fc>
    98ee:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    98f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98f6:	2200      	movs	r2, #0
    98f8:	701a      	strb	r2, [r3, #0]
    98fa:	e009      	b.n	9910 <send_settings+0x5fc>
    98fc:	2004bee9 	.word	0x2004bee9
    9900:	2004beea 	.word	0x2004beea
    9904:	2004beeb 	.word	0x2004beeb
    9908:	2004beed 	.word	0x2004beed
    990c:	2004beee 	.word	0x2004beee
    9910:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9918:	781b      	ldrb	r3, [r3, #0]
    991a:	461a      	mov	r2, r3
    991c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9924:	78d9      	ldrb	r1, [r3, #3]
    9926:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    992a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    992e:	5499      	strb	r1, [r3, r2]
    9930:	4b79      	ldr	r3, [pc, #484]	; (9b18 <send_settings+0x804>)
    9932:	781a      	ldrb	r2, [r3, #0]
    9934:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    993c:	781b      	ldrb	r3, [r3, #0]
    993e:	4413      	add	r3, r2
    9940:	b2da      	uxtb	r2, r3
    9942:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    994a:	701a      	strb	r2, [r3, #0]
    994c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9954:	781a      	ldrb	r2, [r3, #0]
    9956:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    995a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    995e:	781b      	ldrb	r3, [r3, #0]
    9960:	4413      	add	r3, r2
    9962:	b2da      	uxtb	r2, r3
    9964:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    996c:	701a      	strb	r2, [r3, #0]
    996e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9976:	781b      	ldrb	r3, [r3, #0]
    9978:	3301      	adds	r3, #1
    997a:	b2da      	uxtb	r2, r3
    997c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9984:	701a      	strb	r2, [r3, #0]
    9986:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    998a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    998e:	781b      	ldrb	r3, [r3, #0]
    9990:	2bff      	cmp	r3, #255	; 0xff
    9992:	d105      	bne.n	99a0 <send_settings+0x68c>
    9994:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    999c:	2200      	movs	r2, #0
    999e:	701a      	strb	r2, [r3, #0]
    99a0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    99a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99a8:	781b      	ldrb	r3, [r3, #0]
    99aa:	461a      	mov	r2, r3
    99ac:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    99b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99b4:	7819      	ldrb	r1, [r3, #0]
    99b6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    99ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99be:	5499      	strb	r1, [r3, r2]
    99c0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    99c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99c8:	781b      	ldrb	r3, [r3, #0]
    99ca:	3301      	adds	r3, #1
    99cc:	b2da      	uxtb	r2, r3
    99ce:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    99d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99d6:	701a      	strb	r2, [r3, #0]
    99d8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    99dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99e0:	781b      	ldrb	r3, [r3, #0]
    99e2:	2bff      	cmp	r3, #255	; 0xff
    99e4:	d105      	bne.n	99f2 <send_settings+0x6de>
    99e6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    99ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99ee:	2200      	movs	r2, #0
    99f0:	701a      	strb	r2, [r3, #0]
    99f2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    99f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99fa:	781b      	ldrb	r3, [r3, #0]
    99fc:	461a      	mov	r2, r3
    99fe:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9a02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a06:	7819      	ldrb	r1, [r3, #0]
    9a08:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a10:	5499      	strb	r1, [r3, r2]
    9a12:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a1a:	781b      	ldrb	r3, [r3, #0]
    9a1c:	3301      	adds	r3, #1
    9a1e:	b2da      	uxtb	r2, r3
    9a20:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a28:	701a      	strb	r2, [r3, #0]
    9a2a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9a2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a32:	781b      	ldrb	r3, [r3, #0]
    9a34:	2bff      	cmp	r3, #255	; 0xff
    9a36:	d105      	bne.n	9a44 <send_settings+0x730>
    9a38:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9a3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a40:	2200      	movs	r2, #0
    9a42:	701a      	strb	r2, [r3, #0]
    9a44:	f242 0339 	movw	r3, #8249	; 0x2039
    9a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a4c:	781b      	ldrb	r3, [r3, #0]
    9a4e:	b2db      	uxtb	r3, r3
    9a50:	f003 0310 	and.w	r3, r3, #16
    9a54:	2b00      	cmp	r3, #0
    9a56:	d15a      	bne.n	9b0e <send_settings+0x7fa>
    9a58:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a60:	781b      	ldrb	r3, [r3, #0]
    9a62:	b2db      	uxtb	r3, r3
    9a64:	461a      	mov	r2, r3
    9a66:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a6e:	5c9a      	ldrb	r2, [r3, r2]
    9a70:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    9a74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a78:	701a      	strb	r2, [r3, #0]
    9a7a:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    9a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a82:	2200      	movs	r2, #0
    9a84:	701a      	strb	r2, [r3, #0]
    9a86:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9a8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a8e:	781b      	ldrb	r3, [r3, #0]
    9a90:	b2db      	uxtb	r3, r3
    9a92:	3301      	adds	r3, #1
    9a94:	b2da      	uxtb	r2, r3
    9a96:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a9e:	701a      	strb	r2, [r3, #0]
    9aa0:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aa8:	781b      	ldrb	r3, [r3, #0]
    9aaa:	b2db      	uxtb	r3, r3
    9aac:	2bff      	cmp	r3, #255	; 0xff
    9aae:	d105      	bne.n	9abc <send_settings+0x7a8>
    9ab0:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ab8:	2200      	movs	r2, #0
    9aba:	701a      	strb	r2, [r3, #0]
    9abc:	f242 0338 	movw	r3, #8248	; 0x2038
    9ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ac4:	f242 0238 	movw	r2, #8248	; 0x2038
    9ac8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9acc:	7812      	ldrb	r2, [r2, #0]
    9ace:	b2d2      	uxtb	r2, r2
    9ad0:	f042 0201 	orr.w	r2, r2, #1
    9ad4:	b2d2      	uxtb	r2, r2
    9ad6:	701a      	strb	r2, [r3, #0]
    9ad8:	f242 0339 	movw	r3, #8249	; 0x2039
    9adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ae0:	f242 0239 	movw	r2, #8249	; 0x2039
    9ae4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9ae8:	7812      	ldrb	r2, [r2, #0]
    9aea:	b2d2      	uxtb	r2, r2
    9aec:	f042 0210 	orr.w	r2, r2, #16
    9af0:	b2d2      	uxtb	r2, r2
    9af2:	701a      	strb	r2, [r3, #0]
    9af4:	e00b      	b.n	9b0e <send_settings+0x7fa>
    9af6:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    9afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9afe:	781b      	ldrb	r3, [r3, #0]
    9b00:	3301      	adds	r3, #1
    9b02:	b2da      	uxtb	r2, r3
    9b04:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    9b08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b0c:	701a      	strb	r2, [r3, #0]
}
    9b0e:	46bd      	mov	sp, r7
    9b10:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b14:	4770      	bx	lr
    9b16:	bf00      	nop
    9b18:	2004beef 	.word	0x2004beef

00009b1c <send_desired>:
void send_desired(void){  //1000ms
    9b1c:	b480      	push	{r7}
    9b1e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9b20:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    9b24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b28:	781a      	ldrb	r2, [r3, #0]
    9b2a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9b2e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9b32:	fba3 1302 	umull	r1, r3, r3, r2
    9b36:	08d9      	lsrs	r1, r3, #3
    9b38:	460b      	mov	r3, r1
    9b3a:	009b      	lsls	r3, r3, #2
    9b3c:	440b      	add	r3, r1
    9b3e:	005b      	lsls	r3, r3, #1
    9b40:	1ad3      	subs	r3, r2, r3
    9b42:	b2db      	uxtb	r3, r3
    9b44:	2b03      	cmp	r3, #3
    9b46:	f040 8712 	bne.w	a96e <send_desired+0xe52>
    9b4a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b52:	781a      	ldrb	r2, [r3, #0]
    9b54:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b5c:	781b      	ldrb	r3, [r3, #0]
    9b5e:	b2db      	uxtb	r3, r3
    9b60:	429a      	cmp	r2, r3
    9b62:	d313      	bcc.n	9b8c <send_desired+0x70>
    9b64:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b6c:	781b      	ldrb	r3, [r3, #0]
    9b6e:	b2db      	uxtb	r3, r3
    9b70:	461a      	mov	r2, r3
    9b72:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9b76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b7a:	781b      	ldrb	r3, [r3, #0]
    9b7c:	1ad3      	subs	r3, r2, r3
    9b7e:	33ff      	adds	r3, #255	; 0xff
    9b80:	2b18      	cmp	r3, #24
    9b82:	bfd4      	ite	le
    9b84:	2300      	movle	r3, #0
    9b86:	2301      	movgt	r3, #1
    9b88:	b2db      	uxtb	r3, r3
    9b8a:	e011      	b.n	9bb0 <send_desired+0x94>
    9b8c:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b94:	781b      	ldrb	r3, [r3, #0]
    9b96:	b2db      	uxtb	r3, r3
    9b98:	461a      	mov	r2, r3
    9b9a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9b9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ba2:	781b      	ldrb	r3, [r3, #0]
    9ba4:	1ad3      	subs	r3, r2, r3
    9ba6:	2b18      	cmp	r3, #24
    9ba8:	bfd4      	ite	le
    9baa:	2300      	movle	r3, #0
    9bac:	2301      	movgt	r3, #1
    9bae:	b2db      	uxtb	r3, r3
    9bb0:	2b00      	cmp	r3, #0
    9bb2:	f000 86d0 	beq.w	a956 <send_desired+0xe3a>
    9bb6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bbe:	781b      	ldrb	r3, [r3, #0]
    9bc0:	461a      	mov	r2, r3
    9bc2:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9bc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bca:	2105      	movs	r1, #5
    9bcc:	5499      	strb	r1, [r3, r2]
    9bce:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bd6:	781b      	ldrb	r3, [r3, #0]
    9bd8:	3301      	adds	r3, #1
    9bda:	b2da      	uxtb	r2, r3
    9bdc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9be4:	701a      	strb	r2, [r3, #0]
    9be6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bee:	781b      	ldrb	r3, [r3, #0]
    9bf0:	2bff      	cmp	r3, #255	; 0xff
    9bf2:	d105      	bne.n	9c00 <send_desired+0xe4>
    9bf4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bfc:	2200      	movs	r2, #0
    9bfe:	701a      	strb	r2, [r3, #0]
    9c00:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c08:	781b      	ldrb	r3, [r3, #0]
    9c0a:	461a      	mov	r2, r3
    9c0c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9c10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c14:	2112      	movs	r1, #18
    9c16:	5499      	strb	r1, [r3, r2]
    9c18:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c20:	781b      	ldrb	r3, [r3, #0]
    9c22:	3301      	adds	r3, #1
    9c24:	b2da      	uxtb	r2, r3
    9c26:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c2e:	701a      	strb	r2, [r3, #0]
    9c30:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c38:	781b      	ldrb	r3, [r3, #0]
    9c3a:	2bff      	cmp	r3, #255	; 0xff
    9c3c:	d105      	bne.n	9c4a <send_desired+0x12e>
    9c3e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c46:	2200      	movs	r2, #0
    9c48:	701a      	strb	r2, [r3, #0]
    9c4a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9c4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c52:	2212      	movs	r2, #18
    9c54:	701a      	strb	r2, [r3, #0]
    9c56:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c5e:	2212      	movs	r2, #18
    9c60:	701a      	strb	r2, [r3, #0]
    9c62:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9c66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c6a:	781b      	ldrb	r3, [r3, #0]
    9c6c:	461a      	mov	r2, r3
    9c6e:	f24c 2324 	movw	r3, #49700	; 0xc224
    9c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c76:	7819      	ldrb	r1, [r3, #0]
    9c78:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c80:	5499      	strb	r1, [r3, r2]
    9c82:	f24c 2324 	movw	r3, #49700	; 0xc224
    9c86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c8a:	781a      	ldrb	r2, [r3, #0]
    9c8c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c94:	781b      	ldrb	r3, [r3, #0]
    9c96:	4413      	add	r3, r2
    9c98:	b2da      	uxtb	r2, r3
    9c9a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ca2:	701a      	strb	r2, [r3, #0]
    9ca4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9ca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cac:	781a      	ldrb	r2, [r3, #0]
    9cae:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9cb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cb6:	781b      	ldrb	r3, [r3, #0]
    9cb8:	4413      	add	r3, r2
    9cba:	b2da      	uxtb	r2, r3
    9cbc:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9cc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cc4:	701a      	strb	r2, [r3, #0]
    9cc6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9cca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cce:	781b      	ldrb	r3, [r3, #0]
    9cd0:	3301      	adds	r3, #1
    9cd2:	b2da      	uxtb	r2, r3
    9cd4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9cd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cdc:	701a      	strb	r2, [r3, #0]
    9cde:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9ce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ce6:	781b      	ldrb	r3, [r3, #0]
    9ce8:	2bff      	cmp	r3, #255	; 0xff
    9cea:	d105      	bne.n	9cf8 <send_desired+0x1dc>
    9cec:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9cf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cf4:	2200      	movs	r2, #0
    9cf6:	701a      	strb	r2, [r3, #0]
    9cf8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d00:	781b      	ldrb	r3, [r3, #0]
    9d02:	461a      	mov	r2, r3
    9d04:	f24c 2324 	movw	r3, #49700	; 0xc224
    9d08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d0c:	7859      	ldrb	r1, [r3, #1]
    9d0e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9d12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d16:	5499      	strb	r1, [r3, r2]
    9d18:	4bd1      	ldr	r3, [pc, #836]	; (a060 <send_desired+0x544>)
    9d1a:	781a      	ldrb	r2, [r3, #0]
    9d1c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d24:	781b      	ldrb	r3, [r3, #0]
    9d26:	4413      	add	r3, r2
    9d28:	b2da      	uxtb	r2, r3
    9d2a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d32:	701a      	strb	r2, [r3, #0]
    9d34:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d3c:	781a      	ldrb	r2, [r3, #0]
    9d3e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d46:	781b      	ldrb	r3, [r3, #0]
    9d48:	4413      	add	r3, r2
    9d4a:	b2da      	uxtb	r2, r3
    9d4c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d54:	701a      	strb	r2, [r3, #0]
    9d56:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d5e:	781b      	ldrb	r3, [r3, #0]
    9d60:	3301      	adds	r3, #1
    9d62:	b2da      	uxtb	r2, r3
    9d64:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9d68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d6c:	701a      	strb	r2, [r3, #0]
    9d6e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d76:	781b      	ldrb	r3, [r3, #0]
    9d78:	2bff      	cmp	r3, #255	; 0xff
    9d7a:	d105      	bne.n	9d88 <send_desired+0x26c>
    9d7c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9d80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d84:	2200      	movs	r2, #0
    9d86:	701a      	strb	r2, [r3, #0]
    9d88:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9d8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d90:	781b      	ldrb	r3, [r3, #0]
    9d92:	461a      	mov	r2, r3
    9d94:	f24c 2324 	movw	r3, #49700	; 0xc224
    9d98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d9c:	7899      	ldrb	r1, [r3, #2]
    9d9e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9da2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9da6:	5499      	strb	r1, [r3, r2]
    9da8:	4bae      	ldr	r3, [pc, #696]	; (a064 <send_desired+0x548>)
    9daa:	781a      	ldrb	r2, [r3, #0]
    9dac:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9db4:	781b      	ldrb	r3, [r3, #0]
    9db6:	4413      	add	r3, r2
    9db8:	b2da      	uxtb	r2, r3
    9dba:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dc2:	701a      	strb	r2, [r3, #0]
    9dc4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dcc:	781a      	ldrb	r2, [r3, #0]
    9dce:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dd6:	781b      	ldrb	r3, [r3, #0]
    9dd8:	4413      	add	r3, r2
    9dda:	b2da      	uxtb	r2, r3
    9ddc:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9de0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9de4:	701a      	strb	r2, [r3, #0]
    9de6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dee:	781b      	ldrb	r3, [r3, #0]
    9df0:	3301      	adds	r3, #1
    9df2:	b2da      	uxtb	r2, r3
    9df4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9df8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dfc:	701a      	strb	r2, [r3, #0]
    9dfe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e06:	781b      	ldrb	r3, [r3, #0]
    9e08:	2bff      	cmp	r3, #255	; 0xff
    9e0a:	d105      	bne.n	9e18 <send_desired+0x2fc>
    9e0c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e14:	2200      	movs	r2, #0
    9e16:	701a      	strb	r2, [r3, #0]
    9e18:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9e1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e20:	781b      	ldrb	r3, [r3, #0]
    9e22:	461a      	mov	r2, r3
    9e24:	f24c 2324 	movw	r3, #49700	; 0xc224
    9e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e2c:	78d9      	ldrb	r1, [r3, #3]
    9e2e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9e32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e36:	5499      	strb	r1, [r3, r2]
    9e38:	4b8b      	ldr	r3, [pc, #556]	; (a068 <send_desired+0x54c>)
    9e3a:	781a      	ldrb	r2, [r3, #0]
    9e3c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e44:	781b      	ldrb	r3, [r3, #0]
    9e46:	4413      	add	r3, r2
    9e48:	b2da      	uxtb	r2, r3
    9e4a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9e4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e52:	701a      	strb	r2, [r3, #0]
    9e54:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9e58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e5c:	781a      	ldrb	r2, [r3, #0]
    9e5e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e66:	781b      	ldrb	r3, [r3, #0]
    9e68:	4413      	add	r3, r2
    9e6a:	b2da      	uxtb	r2, r3
    9e6c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e74:	701a      	strb	r2, [r3, #0]
    9e76:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e7e:	781b      	ldrb	r3, [r3, #0]
    9e80:	3301      	adds	r3, #1
    9e82:	b2da      	uxtb	r2, r3
    9e84:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e8c:	701a      	strb	r2, [r3, #0]
    9e8e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9e92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e96:	781b      	ldrb	r3, [r3, #0]
    9e98:	2bff      	cmp	r3, #255	; 0xff
    9e9a:	d105      	bne.n	9ea8 <send_desired+0x38c>
    9e9c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ea4:	2200      	movs	r2, #0
    9ea6:	701a      	strb	r2, [r3, #0]
    9ea8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eb0:	781b      	ldrb	r3, [r3, #0]
    9eb2:	461a      	mov	r2, r3
    9eb4:	f24c 2328 	movw	r3, #49704	; 0xc228
    9eb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ebc:	7819      	ldrb	r1, [r3, #0]
    9ebe:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ec6:	5499      	strb	r1, [r3, r2]
    9ec8:	f24c 2328 	movw	r3, #49704	; 0xc228
    9ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ed0:	781a      	ldrb	r2, [r3, #0]
    9ed2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9ed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eda:	781b      	ldrb	r3, [r3, #0]
    9edc:	4413      	add	r3, r2
    9ede:	b2da      	uxtb	r2, r3
    9ee0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ee8:	701a      	strb	r2, [r3, #0]
    9eea:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ef2:	781a      	ldrb	r2, [r3, #0]
    9ef4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9efc:	781b      	ldrb	r3, [r3, #0]
    9efe:	4413      	add	r3, r2
    9f00:	b2da      	uxtb	r2, r3
    9f02:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9f06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f0a:	701a      	strb	r2, [r3, #0]
    9f0c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9f10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f14:	781b      	ldrb	r3, [r3, #0]
    9f16:	3301      	adds	r3, #1
    9f18:	b2da      	uxtb	r2, r3
    9f1a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9f1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f22:	701a      	strb	r2, [r3, #0]
    9f24:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9f28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f2c:	781b      	ldrb	r3, [r3, #0]
    9f2e:	2bff      	cmp	r3, #255	; 0xff
    9f30:	d105      	bne.n	9f3e <send_desired+0x422>
    9f32:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9f36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f3a:	2200      	movs	r2, #0
    9f3c:	701a      	strb	r2, [r3, #0]
    9f3e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f46:	781b      	ldrb	r3, [r3, #0]
    9f48:	461a      	mov	r2, r3
    9f4a:	f24c 2328 	movw	r3, #49704	; 0xc228
    9f4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f52:	7859      	ldrb	r1, [r3, #1]
    9f54:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f5c:	5499      	strb	r1, [r3, r2]
    9f5e:	4b43      	ldr	r3, [pc, #268]	; (a06c <send_desired+0x550>)
    9f60:	781a      	ldrb	r2, [r3, #0]
    9f62:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9f66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f6a:	781b      	ldrb	r3, [r3, #0]
    9f6c:	4413      	add	r3, r2
    9f6e:	b2da      	uxtb	r2, r3
    9f70:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9f74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f78:	701a      	strb	r2, [r3, #0]
    9f7a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9f7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f82:	781a      	ldrb	r2, [r3, #0]
    9f84:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f8c:	781b      	ldrb	r3, [r3, #0]
    9f8e:	4413      	add	r3, r2
    9f90:	b2da      	uxtb	r2, r3
    9f92:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f9a:	701a      	strb	r2, [r3, #0]
    9f9c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fa4:	781b      	ldrb	r3, [r3, #0]
    9fa6:	3301      	adds	r3, #1
    9fa8:	b2da      	uxtb	r2, r3
    9faa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fb2:	701a      	strb	r2, [r3, #0]
    9fb4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9fb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fbc:	781b      	ldrb	r3, [r3, #0]
    9fbe:	2bff      	cmp	r3, #255	; 0xff
    9fc0:	d105      	bne.n	9fce <send_desired+0x4b2>
    9fc2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9fc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fca:	2200      	movs	r2, #0
    9fcc:	701a      	strb	r2, [r3, #0]
    9fce:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fd6:	781b      	ldrb	r3, [r3, #0]
    9fd8:	461a      	mov	r2, r3
    9fda:	f24c 2328 	movw	r3, #49704	; 0xc228
    9fde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fe2:	7899      	ldrb	r1, [r3, #2]
    9fe4:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9fe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fec:	5499      	strb	r1, [r3, r2]
    9fee:	4b20      	ldr	r3, [pc, #128]	; (a070 <send_desired+0x554>)
    9ff0:	781a      	ldrb	r2, [r3, #0]
    9ff2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9ff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ffa:	781b      	ldrb	r3, [r3, #0]
    9ffc:	4413      	add	r3, r2
    9ffe:	b2da      	uxtb	r2, r3
    a000:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a004:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a008:	701a      	strb	r2, [r3, #0]
    a00a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a00e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a012:	781a      	ldrb	r2, [r3, #0]
    a014:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a01c:	781b      	ldrb	r3, [r3, #0]
    a01e:	4413      	add	r3, r2
    a020:	b2da      	uxtb	r2, r3
    a022:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a02a:	701a      	strb	r2, [r3, #0]
    a02c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a034:	781b      	ldrb	r3, [r3, #0]
    a036:	3301      	adds	r3, #1
    a038:	b2da      	uxtb	r2, r3
    a03a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a03e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a042:	701a      	strb	r2, [r3, #0]
    a044:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a04c:	781b      	ldrb	r3, [r3, #0]
    a04e:	2bff      	cmp	r3, #255	; 0xff
    a050:	d110      	bne.n	a074 <send_desired+0x558>
    a052:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a05a:	2200      	movs	r2, #0
    a05c:	701a      	strb	r2, [r3, #0]
    a05e:	e009      	b.n	a074 <send_desired+0x558>
    a060:	2004c225 	.word	0x2004c225
    a064:	2004c226 	.word	0x2004c226
    a068:	2004c227 	.word	0x2004c227
    a06c:	2004c229 	.word	0x2004c229
    a070:	2004c22a 	.word	0x2004c22a
    a074:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a07c:	781b      	ldrb	r3, [r3, #0]
    a07e:	461a      	mov	r2, r3
    a080:	f24c 2328 	movw	r3, #49704	; 0xc228
    a084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a088:	78d9      	ldrb	r1, [r3, #3]
    a08a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a08e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a092:	5499      	strb	r1, [r3, r2]
    a094:	4bd3      	ldr	r3, [pc, #844]	; (a3e4 <send_desired+0x8c8>)
    a096:	781a      	ldrb	r2, [r3, #0]
    a098:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a09c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0a0:	781b      	ldrb	r3, [r3, #0]
    a0a2:	4413      	add	r3, r2
    a0a4:	b2da      	uxtb	r2, r3
    a0a6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a0aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ae:	701a      	strb	r2, [r3, #0]
    a0b0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a0b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0b8:	781a      	ldrb	r2, [r3, #0]
    a0ba:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a0be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0c2:	781b      	ldrb	r3, [r3, #0]
    a0c4:	4413      	add	r3, r2
    a0c6:	b2da      	uxtb	r2, r3
    a0c8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a0cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0d0:	701a      	strb	r2, [r3, #0]
    a0d2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0da:	781b      	ldrb	r3, [r3, #0]
    a0dc:	3301      	adds	r3, #1
    a0de:	b2da      	uxtb	r2, r3
    a0e0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a0e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0e8:	701a      	strb	r2, [r3, #0]
    a0ea:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a0ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0f2:	781b      	ldrb	r3, [r3, #0]
    a0f4:	2bff      	cmp	r3, #255	; 0xff
    a0f6:	d105      	bne.n	a104 <send_desired+0x5e8>
    a0f8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a0fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a100:	2200      	movs	r2, #0
    a102:	701a      	strb	r2, [r3, #0]
    a104:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a10c:	781b      	ldrb	r3, [r3, #0]
    a10e:	461a      	mov	r2, r3
    a110:	f24c 2370 	movw	r3, #49776	; 0xc270
    a114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a118:	7819      	ldrb	r1, [r3, #0]
    a11a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a11e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a122:	5499      	strb	r1, [r3, r2]
    a124:	f24c 2370 	movw	r3, #49776	; 0xc270
    a128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a12c:	781a      	ldrb	r2, [r3, #0]
    a12e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a136:	781b      	ldrb	r3, [r3, #0]
    a138:	4413      	add	r3, r2
    a13a:	b2da      	uxtb	r2, r3
    a13c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a144:	701a      	strb	r2, [r3, #0]
    a146:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a14a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a14e:	781a      	ldrb	r2, [r3, #0]
    a150:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a158:	781b      	ldrb	r3, [r3, #0]
    a15a:	4413      	add	r3, r2
    a15c:	b2da      	uxtb	r2, r3
    a15e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a162:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a166:	701a      	strb	r2, [r3, #0]
    a168:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a16c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a170:	781b      	ldrb	r3, [r3, #0]
    a172:	3301      	adds	r3, #1
    a174:	b2da      	uxtb	r2, r3
    a176:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a17a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a17e:	701a      	strb	r2, [r3, #0]
    a180:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a188:	781b      	ldrb	r3, [r3, #0]
    a18a:	2bff      	cmp	r3, #255	; 0xff
    a18c:	d105      	bne.n	a19a <send_desired+0x67e>
    a18e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a196:	2200      	movs	r2, #0
    a198:	701a      	strb	r2, [r3, #0]
    a19a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a19e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1a2:	781b      	ldrb	r3, [r3, #0]
    a1a4:	461a      	mov	r2, r3
    a1a6:	f24c 2370 	movw	r3, #49776	; 0xc270
    a1aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ae:	7859      	ldrb	r1, [r3, #1]
    a1b0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a1b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1b8:	5499      	strb	r1, [r3, r2]
    a1ba:	4b8b      	ldr	r3, [pc, #556]	; (a3e8 <send_desired+0x8cc>)
    a1bc:	781a      	ldrb	r2, [r3, #0]
    a1be:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a1c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1c6:	781b      	ldrb	r3, [r3, #0]
    a1c8:	4413      	add	r3, r2
    a1ca:	b2da      	uxtb	r2, r3
    a1cc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a1d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1d4:	701a      	strb	r2, [r3, #0]
    a1d6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a1da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1de:	781a      	ldrb	r2, [r3, #0]
    a1e0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a1e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1e8:	781b      	ldrb	r3, [r3, #0]
    a1ea:	4413      	add	r3, r2
    a1ec:	b2da      	uxtb	r2, r3
    a1ee:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a1f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1f6:	701a      	strb	r2, [r3, #0]
    a1f8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a1fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a200:	781b      	ldrb	r3, [r3, #0]
    a202:	3301      	adds	r3, #1
    a204:	b2da      	uxtb	r2, r3
    a206:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a20a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a20e:	701a      	strb	r2, [r3, #0]
    a210:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a218:	781b      	ldrb	r3, [r3, #0]
    a21a:	2bff      	cmp	r3, #255	; 0xff
    a21c:	d105      	bne.n	a22a <send_desired+0x70e>
    a21e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a226:	2200      	movs	r2, #0
    a228:	701a      	strb	r2, [r3, #0]
    a22a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a22e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a232:	781b      	ldrb	r3, [r3, #0]
    a234:	461a      	mov	r2, r3
    a236:	f24c 2370 	movw	r3, #49776	; 0xc270
    a23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a23e:	7899      	ldrb	r1, [r3, #2]
    a240:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a248:	5499      	strb	r1, [r3, r2]
    a24a:	4b68      	ldr	r3, [pc, #416]	; (a3ec <send_desired+0x8d0>)
    a24c:	781a      	ldrb	r2, [r3, #0]
    a24e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a256:	781b      	ldrb	r3, [r3, #0]
    a258:	4413      	add	r3, r2
    a25a:	b2da      	uxtb	r2, r3
    a25c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a264:	701a      	strb	r2, [r3, #0]
    a266:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a26e:	781a      	ldrb	r2, [r3, #0]
    a270:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a278:	781b      	ldrb	r3, [r3, #0]
    a27a:	4413      	add	r3, r2
    a27c:	b2da      	uxtb	r2, r3
    a27e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a286:	701a      	strb	r2, [r3, #0]
    a288:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a290:	781b      	ldrb	r3, [r3, #0]
    a292:	3301      	adds	r3, #1
    a294:	b2da      	uxtb	r2, r3
    a296:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a29e:	701a      	strb	r2, [r3, #0]
    a2a0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a2a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2a8:	781b      	ldrb	r3, [r3, #0]
    a2aa:	2bff      	cmp	r3, #255	; 0xff
    a2ac:	d105      	bne.n	a2ba <send_desired+0x79e>
    a2ae:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a2b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2b6:	2200      	movs	r2, #0
    a2b8:	701a      	strb	r2, [r3, #0]
    a2ba:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a2be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2c2:	781b      	ldrb	r3, [r3, #0]
    a2c4:	461a      	mov	r2, r3
    a2c6:	f24c 2370 	movw	r3, #49776	; 0xc270
    a2ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2ce:	78d9      	ldrb	r1, [r3, #3]
    a2d0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a2d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2d8:	5499      	strb	r1, [r3, r2]
    a2da:	4b45      	ldr	r3, [pc, #276]	; (a3f0 <send_desired+0x8d4>)
    a2dc:	781a      	ldrb	r2, [r3, #0]
    a2de:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2e6:	781b      	ldrb	r3, [r3, #0]
    a2e8:	4413      	add	r3, r2
    a2ea:	b2da      	uxtb	r2, r3
    a2ec:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a2f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2f4:	701a      	strb	r2, [r3, #0]
    a2f6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2fe:	781a      	ldrb	r2, [r3, #0]
    a300:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a308:	781b      	ldrb	r3, [r3, #0]
    a30a:	4413      	add	r3, r2
    a30c:	b2da      	uxtb	r2, r3
    a30e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a316:	701a      	strb	r2, [r3, #0]
    a318:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a31c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a320:	781b      	ldrb	r3, [r3, #0]
    a322:	3301      	adds	r3, #1
    a324:	b2da      	uxtb	r2, r3
    a326:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a32a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a32e:	701a      	strb	r2, [r3, #0]
    a330:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a334:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a338:	781b      	ldrb	r3, [r3, #0]
    a33a:	2bff      	cmp	r3, #255	; 0xff
    a33c:	d105      	bne.n	a34a <send_desired+0x82e>
    a33e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a346:	2200      	movs	r2, #0
    a348:	701a      	strb	r2, [r3, #0]
    a34a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a34e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a352:	781b      	ldrb	r3, [r3, #0]
    a354:	461a      	mov	r2, r3
    a356:	f24c 2374 	movw	r3, #49780	; 0xc274
    a35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a35e:	7819      	ldrb	r1, [r3, #0]
    a360:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a368:	5499      	strb	r1, [r3, r2]
    a36a:	f24c 2374 	movw	r3, #49780	; 0xc274
    a36e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a372:	781a      	ldrb	r2, [r3, #0]
    a374:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a37c:	781b      	ldrb	r3, [r3, #0]
    a37e:	4413      	add	r3, r2
    a380:	b2da      	uxtb	r2, r3
    a382:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a38a:	701a      	strb	r2, [r3, #0]
    a38c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a394:	781a      	ldrb	r2, [r3, #0]
    a396:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a39a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a39e:	781b      	ldrb	r3, [r3, #0]
    a3a0:	4413      	add	r3, r2
    a3a2:	b2da      	uxtb	r2, r3
    a3a4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a3a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ac:	701a      	strb	r2, [r3, #0]
    a3ae:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a3b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3b6:	781b      	ldrb	r3, [r3, #0]
    a3b8:	3301      	adds	r3, #1
    a3ba:	b2da      	uxtb	r2, r3
    a3bc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a3c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3c4:	701a      	strb	r2, [r3, #0]
    a3c6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a3ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ce:	781b      	ldrb	r3, [r3, #0]
    a3d0:	2bff      	cmp	r3, #255	; 0xff
    a3d2:	d10f      	bne.n	a3f4 <send_desired+0x8d8>
    a3d4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a3d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3dc:	2200      	movs	r2, #0
    a3de:	701a      	strb	r2, [r3, #0]
    a3e0:	e008      	b.n	a3f4 <send_desired+0x8d8>
    a3e2:	bf00      	nop
    a3e4:	2004c22b 	.word	0x2004c22b
    a3e8:	2004c271 	.word	0x2004c271
    a3ec:	2004c272 	.word	0x2004c272
    a3f0:	2004c273 	.word	0x2004c273
    a3f4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3fc:	781b      	ldrb	r3, [r3, #0]
    a3fe:	461a      	mov	r2, r3
    a400:	f24c 2374 	movw	r3, #49780	; 0xc274
    a404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a408:	7859      	ldrb	r1, [r3, #1]
    a40a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a40e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a412:	5499      	strb	r1, [r3, r2]
    a414:	4bd1      	ldr	r3, [pc, #836]	; (a75c <send_desired+0xc40>)
    a416:	781a      	ldrb	r2, [r3, #0]
    a418:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a41c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a420:	781b      	ldrb	r3, [r3, #0]
    a422:	4413      	add	r3, r2
    a424:	b2da      	uxtb	r2, r3
    a426:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a42a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a42e:	701a      	strb	r2, [r3, #0]
    a430:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a438:	781a      	ldrb	r2, [r3, #0]
    a43a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a43e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a442:	781b      	ldrb	r3, [r3, #0]
    a444:	4413      	add	r3, r2
    a446:	b2da      	uxtb	r2, r3
    a448:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a44c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a450:	701a      	strb	r2, [r3, #0]
    a452:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a45a:	781b      	ldrb	r3, [r3, #0]
    a45c:	3301      	adds	r3, #1
    a45e:	b2da      	uxtb	r2, r3
    a460:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a468:	701a      	strb	r2, [r3, #0]
    a46a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a46e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a472:	781b      	ldrb	r3, [r3, #0]
    a474:	2bff      	cmp	r3, #255	; 0xff
    a476:	d105      	bne.n	a484 <send_desired+0x968>
    a478:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a47c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a480:	2200      	movs	r2, #0
    a482:	701a      	strb	r2, [r3, #0]
    a484:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a48c:	781b      	ldrb	r3, [r3, #0]
    a48e:	461a      	mov	r2, r3
    a490:	f24c 2374 	movw	r3, #49780	; 0xc274
    a494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a498:	7899      	ldrb	r1, [r3, #2]
    a49a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4a2:	5499      	strb	r1, [r3, r2]
    a4a4:	4bae      	ldr	r3, [pc, #696]	; (a760 <send_desired+0xc44>)
    a4a6:	781a      	ldrb	r2, [r3, #0]
    a4a8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a4ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4b0:	781b      	ldrb	r3, [r3, #0]
    a4b2:	4413      	add	r3, r2
    a4b4:	b2da      	uxtb	r2, r3
    a4b6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a4ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4be:	701a      	strb	r2, [r3, #0]
    a4c0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a4c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4c8:	781a      	ldrb	r2, [r3, #0]
    a4ca:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a4ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4d2:	781b      	ldrb	r3, [r3, #0]
    a4d4:	4413      	add	r3, r2
    a4d6:	b2da      	uxtb	r2, r3
    a4d8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a4dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4e0:	701a      	strb	r2, [r3, #0]
    a4e2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a4e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4ea:	781b      	ldrb	r3, [r3, #0]
    a4ec:	3301      	adds	r3, #1
    a4ee:	b2da      	uxtb	r2, r3
    a4f0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a4f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4f8:	701a      	strb	r2, [r3, #0]
    a4fa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a4fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a502:	781b      	ldrb	r3, [r3, #0]
    a504:	2bff      	cmp	r3, #255	; 0xff
    a506:	d105      	bne.n	a514 <send_desired+0x9f8>
    a508:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a50c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a510:	2200      	movs	r2, #0
    a512:	701a      	strb	r2, [r3, #0]
    a514:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a51c:	781b      	ldrb	r3, [r3, #0]
    a51e:	461a      	mov	r2, r3
    a520:	f24c 2374 	movw	r3, #49780	; 0xc274
    a524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a528:	78d9      	ldrb	r1, [r3, #3]
    a52a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a52e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a532:	5499      	strb	r1, [r3, r2]
    a534:	4b8b      	ldr	r3, [pc, #556]	; (a764 <send_desired+0xc48>)
    a536:	781a      	ldrb	r2, [r3, #0]
    a538:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a53c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a540:	781b      	ldrb	r3, [r3, #0]
    a542:	4413      	add	r3, r2
    a544:	b2da      	uxtb	r2, r3
    a546:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a54a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a54e:	701a      	strb	r2, [r3, #0]
    a550:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a558:	781a      	ldrb	r2, [r3, #0]
    a55a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a562:	781b      	ldrb	r3, [r3, #0]
    a564:	4413      	add	r3, r2
    a566:	b2da      	uxtb	r2, r3
    a568:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a56c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a570:	701a      	strb	r2, [r3, #0]
    a572:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a57a:	781b      	ldrb	r3, [r3, #0]
    a57c:	3301      	adds	r3, #1
    a57e:	b2da      	uxtb	r2, r3
    a580:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a588:	701a      	strb	r2, [r3, #0]
    a58a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a58e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a592:	781b      	ldrb	r3, [r3, #0]
    a594:	2bff      	cmp	r3, #255	; 0xff
    a596:	d105      	bne.n	a5a4 <send_desired+0xa88>
    a598:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a59c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5a0:	2200      	movs	r2, #0
    a5a2:	701a      	strb	r2, [r3, #0]
    a5a4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ac:	781b      	ldrb	r3, [r3, #0]
    a5ae:	461a      	mov	r2, r3
    a5b0:	f240 4324 	movw	r3, #1060	; 0x424
    a5b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5b8:	7819      	ldrb	r1, [r3, #0]
    a5ba:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a5be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5c2:	5499      	strb	r1, [r3, r2]
    a5c4:	f240 4324 	movw	r3, #1060	; 0x424
    a5c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5cc:	781a      	ldrb	r2, [r3, #0]
    a5ce:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a5d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5d6:	781b      	ldrb	r3, [r3, #0]
    a5d8:	4413      	add	r3, r2
    a5da:	b2da      	uxtb	r2, r3
    a5dc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a5e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5e4:	701a      	strb	r2, [r3, #0]
    a5e6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ee:	781a      	ldrb	r2, [r3, #0]
    a5f0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a5f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5f8:	781b      	ldrb	r3, [r3, #0]
    a5fa:	4413      	add	r3, r2
    a5fc:	b2da      	uxtb	r2, r3
    a5fe:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a606:	701a      	strb	r2, [r3, #0]
    a608:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a60c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a610:	781b      	ldrb	r3, [r3, #0]
    a612:	3301      	adds	r3, #1
    a614:	b2da      	uxtb	r2, r3
    a616:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a61a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a61e:	701a      	strb	r2, [r3, #0]
    a620:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a628:	781b      	ldrb	r3, [r3, #0]
    a62a:	2bff      	cmp	r3, #255	; 0xff
    a62c:	d105      	bne.n	a63a <send_desired+0xb1e>
    a62e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a636:	2200      	movs	r2, #0
    a638:	701a      	strb	r2, [r3, #0]
    a63a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a63e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a642:	781b      	ldrb	r3, [r3, #0]
    a644:	461a      	mov	r2, r3
    a646:	f240 4324 	movw	r3, #1060	; 0x424
    a64a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a64e:	7859      	ldrb	r1, [r3, #1]
    a650:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a658:	5499      	strb	r1, [r3, r2]
    a65a:	4b43      	ldr	r3, [pc, #268]	; (a768 <send_desired+0xc4c>)
    a65c:	781a      	ldrb	r2, [r3, #0]
    a65e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a666:	781b      	ldrb	r3, [r3, #0]
    a668:	4413      	add	r3, r2
    a66a:	b2da      	uxtb	r2, r3
    a66c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a674:	701a      	strb	r2, [r3, #0]
    a676:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a67e:	781a      	ldrb	r2, [r3, #0]
    a680:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a688:	781b      	ldrb	r3, [r3, #0]
    a68a:	4413      	add	r3, r2
    a68c:	b2da      	uxtb	r2, r3
    a68e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a696:	701a      	strb	r2, [r3, #0]
    a698:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a69c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6a0:	781b      	ldrb	r3, [r3, #0]
    a6a2:	3301      	adds	r3, #1
    a6a4:	b2da      	uxtb	r2, r3
    a6a6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a6aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ae:	701a      	strb	r2, [r3, #0]
    a6b0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a6b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6b8:	781b      	ldrb	r3, [r3, #0]
    a6ba:	2bff      	cmp	r3, #255	; 0xff
    a6bc:	d105      	bne.n	a6ca <send_desired+0xbae>
    a6be:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a6c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6c6:	2200      	movs	r2, #0
    a6c8:	701a      	strb	r2, [r3, #0]
    a6ca:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a6ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6d2:	781b      	ldrb	r3, [r3, #0]
    a6d4:	461a      	mov	r2, r3
    a6d6:	f240 4324 	movw	r3, #1060	; 0x424
    a6da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6de:	7899      	ldrb	r1, [r3, #2]
    a6e0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a6e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6e8:	5499      	strb	r1, [r3, r2]
    a6ea:	4b20      	ldr	r3, [pc, #128]	; (a76c <send_desired+0xc50>)
    a6ec:	781a      	ldrb	r2, [r3, #0]
    a6ee:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a6f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6f6:	781b      	ldrb	r3, [r3, #0]
    a6f8:	4413      	add	r3, r2
    a6fa:	b2da      	uxtb	r2, r3
    a6fc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a704:	701a      	strb	r2, [r3, #0]
    a706:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a70a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a70e:	781a      	ldrb	r2, [r3, #0]
    a710:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a718:	781b      	ldrb	r3, [r3, #0]
    a71a:	4413      	add	r3, r2
    a71c:	b2da      	uxtb	r2, r3
    a71e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a726:	701a      	strb	r2, [r3, #0]
    a728:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a72c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a730:	781b      	ldrb	r3, [r3, #0]
    a732:	3301      	adds	r3, #1
    a734:	b2da      	uxtb	r2, r3
    a736:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a73a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a73e:	701a      	strb	r2, [r3, #0]
    a740:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a748:	781b      	ldrb	r3, [r3, #0]
    a74a:	2bff      	cmp	r3, #255	; 0xff
    a74c:	d110      	bne.n	a770 <send_desired+0xc54>
    a74e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a756:	2200      	movs	r2, #0
    a758:	701a      	strb	r2, [r3, #0]
    a75a:	e009      	b.n	a770 <send_desired+0xc54>
    a75c:	2004c275 	.word	0x2004c275
    a760:	2004c276 	.word	0x2004c276
    a764:	2004c277 	.word	0x2004c277
    a768:	20000425 	.word	0x20000425
    a76c:	20000426 	.word	0x20000426
    a770:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a778:	781b      	ldrb	r3, [r3, #0]
    a77a:	461a      	mov	r2, r3
    a77c:	f240 4324 	movw	r3, #1060	; 0x424
    a780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a784:	78d9      	ldrb	r1, [r3, #3]
    a786:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a78a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a78e:	5499      	strb	r1, [r3, r2]
    a790:	4b79      	ldr	r3, [pc, #484]	; (a978 <send_desired+0xe5c>)
    a792:	781a      	ldrb	r2, [r3, #0]
    a794:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a79c:	781b      	ldrb	r3, [r3, #0]
    a79e:	4413      	add	r3, r2
    a7a0:	b2da      	uxtb	r2, r3
    a7a2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a7a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7aa:	701a      	strb	r2, [r3, #0]
    a7ac:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a7b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7b4:	781a      	ldrb	r2, [r3, #0]
    a7b6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a7ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7be:	781b      	ldrb	r3, [r3, #0]
    a7c0:	4413      	add	r3, r2
    a7c2:	b2da      	uxtb	r2, r3
    a7c4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a7c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7cc:	701a      	strb	r2, [r3, #0]
    a7ce:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a7d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7d6:	781b      	ldrb	r3, [r3, #0]
    a7d8:	3301      	adds	r3, #1
    a7da:	b2da      	uxtb	r2, r3
    a7dc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a7e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7e4:	701a      	strb	r2, [r3, #0]
    a7e6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a7ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7ee:	781b      	ldrb	r3, [r3, #0]
    a7f0:	2bff      	cmp	r3, #255	; 0xff
    a7f2:	d105      	bne.n	a800 <send_desired+0xce4>
    a7f4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a7f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7fc:	2200      	movs	r2, #0
    a7fe:	701a      	strb	r2, [r3, #0]
    a800:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a808:	781b      	ldrb	r3, [r3, #0]
    a80a:	461a      	mov	r2, r3
    a80c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a814:	7819      	ldrb	r1, [r3, #0]
    a816:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a81a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a81e:	5499      	strb	r1, [r3, r2]
    a820:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a828:	781b      	ldrb	r3, [r3, #0]
    a82a:	3301      	adds	r3, #1
    a82c:	b2da      	uxtb	r2, r3
    a82e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a836:	701a      	strb	r2, [r3, #0]
    a838:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a83c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a840:	781b      	ldrb	r3, [r3, #0]
    a842:	2bff      	cmp	r3, #255	; 0xff
    a844:	d105      	bne.n	a852 <send_desired+0xd36>
    a846:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a84a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a84e:	2200      	movs	r2, #0
    a850:	701a      	strb	r2, [r3, #0]
    a852:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a85a:	781b      	ldrb	r3, [r3, #0]
    a85c:	461a      	mov	r2, r3
    a85e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a866:	7819      	ldrb	r1, [r3, #0]
    a868:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a86c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a870:	5499      	strb	r1, [r3, r2]
    a872:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a876:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a87a:	781b      	ldrb	r3, [r3, #0]
    a87c:	3301      	adds	r3, #1
    a87e:	b2da      	uxtb	r2, r3
    a880:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a888:	701a      	strb	r2, [r3, #0]
    a88a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a88e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a892:	781b      	ldrb	r3, [r3, #0]
    a894:	2bff      	cmp	r3, #255	; 0xff
    a896:	d105      	bne.n	a8a4 <send_desired+0xd88>
    a898:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a89c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8a0:	2200      	movs	r2, #0
    a8a2:	701a      	strb	r2, [r3, #0]
    a8a4:	f242 0339 	movw	r3, #8249	; 0x2039
    a8a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8ac:	781b      	ldrb	r3, [r3, #0]
    a8ae:	b2db      	uxtb	r3, r3
    a8b0:	f003 0310 	and.w	r3, r3, #16
    a8b4:	2b00      	cmp	r3, #0
    a8b6:	d15a      	bne.n	a96e <send_desired+0xe52>
    a8b8:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    a8bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8c0:	781b      	ldrb	r3, [r3, #0]
    a8c2:	b2db      	uxtb	r3, r3
    a8c4:	461a      	mov	r2, r3
    a8c6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a8ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8ce:	5c9a      	ldrb	r2, [r3, r2]
    a8d0:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    a8d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8d8:	701a      	strb	r2, [r3, #0]
    a8da:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    a8de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8e2:	2200      	movs	r2, #0
    a8e4:	701a      	strb	r2, [r3, #0]
    a8e6:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    a8ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8ee:	781b      	ldrb	r3, [r3, #0]
    a8f0:	b2db      	uxtb	r3, r3
    a8f2:	3301      	adds	r3, #1
    a8f4:	b2da      	uxtb	r2, r3
    a8f6:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    a8fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8fe:	701a      	strb	r2, [r3, #0]
    a900:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    a904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a908:	781b      	ldrb	r3, [r3, #0]
    a90a:	b2db      	uxtb	r3, r3
    a90c:	2bff      	cmp	r3, #255	; 0xff
    a90e:	d105      	bne.n	a91c <send_desired+0xe00>
    a910:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    a914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a918:	2200      	movs	r2, #0
    a91a:	701a      	strb	r2, [r3, #0]
    a91c:	f242 0338 	movw	r3, #8248	; 0x2038
    a920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a924:	f242 0238 	movw	r2, #8248	; 0x2038
    a928:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a92c:	7812      	ldrb	r2, [r2, #0]
    a92e:	b2d2      	uxtb	r2, r2
    a930:	f042 0201 	orr.w	r2, r2, #1
    a934:	b2d2      	uxtb	r2, r2
    a936:	701a      	strb	r2, [r3, #0]
    a938:	f242 0339 	movw	r3, #8249	; 0x2039
    a93c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a940:	f242 0239 	movw	r2, #8249	; 0x2039
    a944:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a948:	7812      	ldrb	r2, [r2, #0]
    a94a:	b2d2      	uxtb	r2, r2
    a94c:	f042 0210 	orr.w	r2, r2, #16
    a950:	b2d2      	uxtb	r2, r2
    a952:	701a      	strb	r2, [r3, #0]
    a954:	e00b      	b.n	a96e <send_desired+0xe52>
    a956:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    a95a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a95e:	781b      	ldrb	r3, [r3, #0]
    a960:	3301      	adds	r3, #1
    a962:	b2da      	uxtb	r2, r3
    a964:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    a968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a96c:	701a      	strb	r2, [r3, #0]
}
    a96e:	46bd      	mov	sp, r7
    a970:	f85d 7b04 	ldr.w	r7, [sp], #4
    a974:	4770      	bx	lr
    a976:	bf00      	nop
    a978:	20000427 	.word	0x20000427

0000a97c <send_bat>:
void send_bat(void){  //2000ms
    a97c:	b480      	push	{r7}
    a97e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    a980:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    a984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a988:	781a      	ldrb	r2, [r3, #0]
    a98a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    a98e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    a992:	fba3 1302 	umull	r1, r3, r3, r2
    a996:	0919      	lsrs	r1, r3, #4
    a998:	460b      	mov	r3, r1
    a99a:	009b      	lsls	r3, r3, #2
    a99c:	440b      	add	r3, r1
    a99e:	009b      	lsls	r3, r3, #2
    a9a0:	1ad3      	subs	r3, r2, r3
    a9a2:	b2db      	uxtb	r3, r3
    a9a4:	2b08      	cmp	r3, #8
    a9a6:	f040 839a 	bne.w	b0de <send_bat+0x762>
    a9aa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a9ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9b2:	781a      	ldrb	r2, [r3, #0]
    a9b4:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    a9b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9bc:	781b      	ldrb	r3, [r3, #0]
    a9be:	b2db      	uxtb	r3, r3
    a9c0:	429a      	cmp	r2, r3
    a9c2:	d313      	bcc.n	a9ec <send_bat+0x70>
    a9c4:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    a9c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9cc:	781b      	ldrb	r3, [r3, #0]
    a9ce:	b2db      	uxtb	r3, r3
    a9d0:	461a      	mov	r2, r3
    a9d2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a9d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9da:	781b      	ldrb	r3, [r3, #0]
    a9dc:	1ad3      	subs	r3, r2, r3
    a9de:	33ff      	adds	r3, #255	; 0xff
    a9e0:	2b0c      	cmp	r3, #12
    a9e2:	bfd4      	ite	le
    a9e4:	2300      	movle	r3, #0
    a9e6:	2301      	movgt	r3, #1
    a9e8:	b2db      	uxtb	r3, r3
    a9ea:	e011      	b.n	aa10 <send_bat+0x94>
    a9ec:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    a9f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9f4:	781b      	ldrb	r3, [r3, #0]
    a9f6:	b2db      	uxtb	r3, r3
    a9f8:	461a      	mov	r2, r3
    a9fa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a9fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa02:	781b      	ldrb	r3, [r3, #0]
    aa04:	1ad3      	subs	r3, r2, r3
    aa06:	2b0c      	cmp	r3, #12
    aa08:	bfd4      	ite	le
    aa0a:	2300      	movle	r3, #0
    aa0c:	2301      	movgt	r3, #1
    aa0e:	b2db      	uxtb	r3, r3
    aa10:	2b00      	cmp	r3, #0
    aa12:	f000 8358 	beq.w	b0c6 <send_bat+0x74a>
    aa16:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aa1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa1e:	781b      	ldrb	r3, [r3, #0]
    aa20:	461a      	mov	r2, r3
    aa22:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    aa26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa2a:	2105      	movs	r1, #5
    aa2c:	5499      	strb	r1, [r3, r2]
    aa2e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aa32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa36:	781b      	ldrb	r3, [r3, #0]
    aa38:	3301      	adds	r3, #1
    aa3a:	b2da      	uxtb	r2, r3
    aa3c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aa40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa44:	701a      	strb	r2, [r3, #0]
    aa46:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aa4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa4e:	781b      	ldrb	r3, [r3, #0]
    aa50:	2bff      	cmp	r3, #255	; 0xff
    aa52:	d105      	bne.n	aa60 <send_bat+0xe4>
    aa54:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aa58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa5c:	2200      	movs	r2, #0
    aa5e:	701a      	strb	r2, [r3, #0]
    aa60:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aa64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa68:	781b      	ldrb	r3, [r3, #0]
    aa6a:	461a      	mov	r2, r3
    aa6c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    aa70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa74:	210c      	movs	r1, #12
    aa76:	5499      	strb	r1, [r3, r2]
    aa78:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aa7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa80:	781b      	ldrb	r3, [r3, #0]
    aa82:	3301      	adds	r3, #1
    aa84:	b2da      	uxtb	r2, r3
    aa86:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aa8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa8e:	701a      	strb	r2, [r3, #0]
    aa90:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aa94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa98:	781b      	ldrb	r3, [r3, #0]
    aa9a:	2bff      	cmp	r3, #255	; 0xff
    aa9c:	d105      	bne.n	aaaa <send_bat+0x12e>
    aa9e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aaa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaa6:	2200      	movs	r2, #0
    aaa8:	701a      	strb	r2, [r3, #0]
    aaaa:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    aaae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aab2:	220c      	movs	r2, #12
    aab4:	701a      	strb	r2, [r3, #0]
    aab6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    aaba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aabe:	220c      	movs	r2, #12
    aac0:	701a      	strb	r2, [r3, #0]
    aac2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaca:	781b      	ldrb	r3, [r3, #0]
    aacc:	461a      	mov	r2, r3
    aace:	f64b 63e2 	movw	r3, #48866	; 0xbee2
    aad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aad6:	7819      	ldrb	r1, [r3, #0]
    aad8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    aadc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aae0:	5499      	strb	r1, [r3, r2]
    aae2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    aae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaea:	781a      	ldrb	r2, [r3, #0]
    aaec:	f64b 63e2 	movw	r3, #48866	; 0xbee2
    aaf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaf4:	781b      	ldrb	r3, [r3, #0]
    aaf6:	4413      	add	r3, r2
    aaf8:	b2da      	uxtb	r2, r3
    aafa:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    aafe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab02:	701a      	strb	r2, [r3, #0]
    ab04:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ab08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab0c:	781a      	ldrb	r2, [r3, #0]
    ab0e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ab12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab16:	781b      	ldrb	r3, [r3, #0]
    ab18:	4413      	add	r3, r2
    ab1a:	b2da      	uxtb	r2, r3
    ab1c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ab20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab24:	701a      	strb	r2, [r3, #0]
    ab26:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ab2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab2e:	781b      	ldrb	r3, [r3, #0]
    ab30:	3301      	adds	r3, #1
    ab32:	b2da      	uxtb	r2, r3
    ab34:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ab38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab3c:	701a      	strb	r2, [r3, #0]
    ab3e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ab42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab46:	781b      	ldrb	r3, [r3, #0]
    ab48:	2bff      	cmp	r3, #255	; 0xff
    ab4a:	d105      	bne.n	ab58 <send_bat+0x1dc>
    ab4c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ab50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab54:	2200      	movs	r2, #0
    ab56:	701a      	strb	r2, [r3, #0]
    ab58:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ab5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab60:	781b      	ldrb	r3, [r3, #0]
    ab62:	461a      	mov	r2, r3
    ab64:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
    ab68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab6c:	7819      	ldrb	r1, [r3, #0]
    ab6e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ab72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab76:	5499      	strb	r1, [r3, r2]
    ab78:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
    ab7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab80:	781a      	ldrb	r2, [r3, #0]
    ab82:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ab86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab8a:	781b      	ldrb	r3, [r3, #0]
    ab8c:	4413      	add	r3, r2
    ab8e:	b2da      	uxtb	r2, r3
    ab90:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ab94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab98:	701a      	strb	r2, [r3, #0]
    ab9a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ab9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aba2:	781a      	ldrb	r2, [r3, #0]
    aba4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    aba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abac:	781b      	ldrb	r3, [r3, #0]
    abae:	4413      	add	r3, r2
    abb0:	b2da      	uxtb	r2, r3
    abb2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    abb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abba:	701a      	strb	r2, [r3, #0]
    abbc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    abc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abc4:	781b      	ldrb	r3, [r3, #0]
    abc6:	3301      	adds	r3, #1
    abc8:	b2da      	uxtb	r2, r3
    abca:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    abce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abd2:	701a      	strb	r2, [r3, #0]
    abd4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    abd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abdc:	781b      	ldrb	r3, [r3, #0]
    abde:	2bff      	cmp	r3, #255	; 0xff
    abe0:	d105      	bne.n	abee <send_bat+0x272>
    abe2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    abe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abea:	2200      	movs	r2, #0
    abec:	701a      	strb	r2, [r3, #0]
    abee:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    abf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abf6:	781b      	ldrb	r3, [r3, #0]
    abf8:	461a      	mov	r2, r3
    abfa:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
    abfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac02:	7859      	ldrb	r1, [r3, #1]
    ac04:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ac08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac0c:	5499      	strb	r1, [r3, r2]
    ac0e:	4bd5      	ldr	r3, [pc, #852]	; (af64 <send_bat+0x5e8>)
    ac10:	781a      	ldrb	r2, [r3, #0]
    ac12:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ac16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac1a:	781b      	ldrb	r3, [r3, #0]
    ac1c:	4413      	add	r3, r2
    ac1e:	b2da      	uxtb	r2, r3
    ac20:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ac24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac28:	701a      	strb	r2, [r3, #0]
    ac2a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ac2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac32:	781a      	ldrb	r2, [r3, #0]
    ac34:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ac38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac3c:	781b      	ldrb	r3, [r3, #0]
    ac3e:	4413      	add	r3, r2
    ac40:	b2da      	uxtb	r2, r3
    ac42:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ac46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac4a:	701a      	strb	r2, [r3, #0]
    ac4c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ac50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac54:	781b      	ldrb	r3, [r3, #0]
    ac56:	3301      	adds	r3, #1
    ac58:	b2da      	uxtb	r2, r3
    ac5a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ac5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac62:	701a      	strb	r2, [r3, #0]
    ac64:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ac68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac6c:	781b      	ldrb	r3, [r3, #0]
    ac6e:	2bff      	cmp	r3, #255	; 0xff
    ac70:	d105      	bne.n	ac7e <send_bat+0x302>
    ac72:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ac76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac7a:	2200      	movs	r2, #0
    ac7c:	701a      	strb	r2, [r3, #0]
    ac7e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ac82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac86:	781b      	ldrb	r3, [r3, #0]
    ac88:	461a      	mov	r2, r3
    ac8a:	f64b 63e5 	movw	r3, #48869	; 0xbee5
    ac8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac92:	7819      	ldrb	r1, [r3, #0]
    ac94:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ac98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac9c:	5499      	strb	r1, [r3, r2]
    ac9e:	f64b 63e5 	movw	r3, #48869	; 0xbee5
    aca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aca6:	781a      	ldrb	r2, [r3, #0]
    aca8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    acac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acb0:	781b      	ldrb	r3, [r3, #0]
    acb2:	4413      	add	r3, r2
    acb4:	b2da      	uxtb	r2, r3
    acb6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    acba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acbe:	701a      	strb	r2, [r3, #0]
    acc0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    acc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acc8:	781a      	ldrb	r2, [r3, #0]
    acca:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    acce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acd2:	781b      	ldrb	r3, [r3, #0]
    acd4:	4413      	add	r3, r2
    acd6:	b2da      	uxtb	r2, r3
    acd8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    acdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ace0:	701a      	strb	r2, [r3, #0]
    ace2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ace6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acea:	781b      	ldrb	r3, [r3, #0]
    acec:	3301      	adds	r3, #1
    acee:	b2da      	uxtb	r2, r3
    acf0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    acf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acf8:	701a      	strb	r2, [r3, #0]
    acfa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    acfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad02:	781b      	ldrb	r3, [r3, #0]
    ad04:	2bff      	cmp	r3, #255	; 0xff
    ad06:	d105      	bne.n	ad14 <send_bat+0x398>
    ad08:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ad0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad10:	2200      	movs	r2, #0
    ad12:	701a      	strb	r2, [r3, #0]
    ad14:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ad18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad1c:	781b      	ldrb	r3, [r3, #0]
    ad1e:	461a      	mov	r2, r3
    ad20:	f24c 2366 	movw	r3, #49766	; 0xc266
    ad24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad28:	7819      	ldrb	r1, [r3, #0]
    ad2a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ad2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad32:	5499      	strb	r1, [r3, r2]
    ad34:	f24c 2366 	movw	r3, #49766	; 0xc266
    ad38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad3c:	781a      	ldrb	r2, [r3, #0]
    ad3e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ad42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad46:	781b      	ldrb	r3, [r3, #0]
    ad48:	4413      	add	r3, r2
    ad4a:	b2da      	uxtb	r2, r3
    ad4c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ad50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad54:	701a      	strb	r2, [r3, #0]
    ad56:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ad5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad5e:	781a      	ldrb	r2, [r3, #0]
    ad60:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ad64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad68:	781b      	ldrb	r3, [r3, #0]
    ad6a:	4413      	add	r3, r2
    ad6c:	b2da      	uxtb	r2, r3
    ad6e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ad72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad76:	701a      	strb	r2, [r3, #0]
    ad78:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ad7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad80:	781b      	ldrb	r3, [r3, #0]
    ad82:	3301      	adds	r3, #1
    ad84:	b2da      	uxtb	r2, r3
    ad86:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ad8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad8e:	701a      	strb	r2, [r3, #0]
    ad90:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ad94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad98:	781b      	ldrb	r3, [r3, #0]
    ad9a:	2bff      	cmp	r3, #255	; 0xff
    ad9c:	d105      	bne.n	adaa <send_bat+0x42e>
    ad9e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ada2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ada6:	2200      	movs	r2, #0
    ada8:	701a      	strb	r2, [r3, #0]
    adaa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    adae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adb2:	781b      	ldrb	r3, [r3, #0]
    adb4:	461a      	mov	r2, r3
    adb6:	f24c 2366 	movw	r3, #49766	; 0xc266
    adba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adbe:	7859      	ldrb	r1, [r3, #1]
    adc0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    adc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adc8:	5499      	strb	r1, [r3, r2]
    adca:	4b67      	ldr	r3, [pc, #412]	; (af68 <send_bat+0x5ec>)
    adcc:	781a      	ldrb	r2, [r3, #0]
    adce:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    add2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    add6:	781b      	ldrb	r3, [r3, #0]
    add8:	4413      	add	r3, r2
    adda:	b2da      	uxtb	r2, r3
    addc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ade0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ade4:	701a      	strb	r2, [r3, #0]
    ade6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    adea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adee:	781a      	ldrb	r2, [r3, #0]
    adf0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    adf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adf8:	781b      	ldrb	r3, [r3, #0]
    adfa:	4413      	add	r3, r2
    adfc:	b2da      	uxtb	r2, r3
    adfe:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ae02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae06:	701a      	strb	r2, [r3, #0]
    ae08:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ae0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae10:	781b      	ldrb	r3, [r3, #0]
    ae12:	3301      	adds	r3, #1
    ae14:	b2da      	uxtb	r2, r3
    ae16:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ae1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae1e:	701a      	strb	r2, [r3, #0]
    ae20:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ae24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae28:	781b      	ldrb	r3, [r3, #0]
    ae2a:	2bff      	cmp	r3, #255	; 0xff
    ae2c:	d105      	bne.n	ae3a <send_bat+0x4be>
    ae2e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ae32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae36:	2200      	movs	r2, #0
    ae38:	701a      	strb	r2, [r3, #0]
    ae3a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ae3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae42:	781b      	ldrb	r3, [r3, #0]
    ae44:	461a      	mov	r2, r3
    ae46:	f24c 2364 	movw	r3, #49764	; 0xc264
    ae4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae4e:	7819      	ldrb	r1, [r3, #0]
    ae50:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ae54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae58:	5499      	strb	r1, [r3, r2]
    ae5a:	f24c 2364 	movw	r3, #49764	; 0xc264
    ae5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae62:	781a      	ldrb	r2, [r3, #0]
    ae64:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ae68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae6c:	781b      	ldrb	r3, [r3, #0]
    ae6e:	4413      	add	r3, r2
    ae70:	b2da      	uxtb	r2, r3
    ae72:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ae76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae7a:	701a      	strb	r2, [r3, #0]
    ae7c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ae80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae84:	781a      	ldrb	r2, [r3, #0]
    ae86:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ae8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae8e:	781b      	ldrb	r3, [r3, #0]
    ae90:	4413      	add	r3, r2
    ae92:	b2da      	uxtb	r2, r3
    ae94:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ae98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae9c:	701a      	strb	r2, [r3, #0]
    ae9e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aea6:	781b      	ldrb	r3, [r3, #0]
    aea8:	3301      	adds	r3, #1
    aeaa:	b2da      	uxtb	r2, r3
    aeac:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aeb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeb4:	701a      	strb	r2, [r3, #0]
    aeb6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aeba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aebe:	781b      	ldrb	r3, [r3, #0]
    aec0:	2bff      	cmp	r3, #255	; 0xff
    aec2:	d105      	bne.n	aed0 <send_bat+0x554>
    aec4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aecc:	2200      	movs	r2, #0
    aece:	701a      	strb	r2, [r3, #0]
    aed0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aed8:	781b      	ldrb	r3, [r3, #0]
    aeda:	461a      	mov	r2, r3
    aedc:	f24c 2364 	movw	r3, #49764	; 0xc264
    aee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aee4:	7859      	ldrb	r1, [r3, #1]
    aee6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    aeea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeee:	5499      	strb	r1, [r3, r2]
    aef0:	4b1e      	ldr	r3, [pc, #120]	; (af6c <send_bat+0x5f0>)
    aef2:	781a      	ldrb	r2, [r3, #0]
    aef4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    aef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aefc:	781b      	ldrb	r3, [r3, #0]
    aefe:	4413      	add	r3, r2
    af00:	b2da      	uxtb	r2, r3
    af02:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    af06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af0a:	701a      	strb	r2, [r3, #0]
    af0c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    af10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af14:	781a      	ldrb	r2, [r3, #0]
    af16:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    af1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af1e:	781b      	ldrb	r3, [r3, #0]
    af20:	4413      	add	r3, r2
    af22:	b2da      	uxtb	r2, r3
    af24:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    af28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af2c:	701a      	strb	r2, [r3, #0]
    af2e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    af32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af36:	781b      	ldrb	r3, [r3, #0]
    af38:	3301      	adds	r3, #1
    af3a:	b2da      	uxtb	r2, r3
    af3c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    af40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af44:	701a      	strb	r2, [r3, #0]
    af46:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    af4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af4e:	781b      	ldrb	r3, [r3, #0]
    af50:	2bff      	cmp	r3, #255	; 0xff
    af52:	d10d      	bne.n	af70 <send_bat+0x5f4>
    af54:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    af58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af5c:	2200      	movs	r2, #0
    af5e:	701a      	strb	r2, [r3, #0]
    af60:	e006      	b.n	af70 <send_bat+0x5f4>
    af62:	bf00      	nop
    af64:	2004c4dd 	.word	0x2004c4dd
    af68:	2004c267 	.word	0x2004c267
    af6c:	2004c265 	.word	0x2004c265
    af70:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    af74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af78:	781b      	ldrb	r3, [r3, #0]
    af7a:	461a      	mov	r2, r3
    af7c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    af80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af84:	7819      	ldrb	r1, [r3, #0]
    af86:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    af8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af8e:	5499      	strb	r1, [r3, r2]
    af90:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    af94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af98:	781b      	ldrb	r3, [r3, #0]
    af9a:	3301      	adds	r3, #1
    af9c:	b2da      	uxtb	r2, r3
    af9e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    afa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afa6:	701a      	strb	r2, [r3, #0]
    afa8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    afac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afb0:	781b      	ldrb	r3, [r3, #0]
    afb2:	2bff      	cmp	r3, #255	; 0xff
    afb4:	d105      	bne.n	afc2 <send_bat+0x646>
    afb6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    afba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afbe:	2200      	movs	r2, #0
    afc0:	701a      	strb	r2, [r3, #0]
    afc2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    afc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afca:	781b      	ldrb	r3, [r3, #0]
    afcc:	461a      	mov	r2, r3
    afce:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    afd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afd6:	7819      	ldrb	r1, [r3, #0]
    afd8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    afdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afe0:	5499      	strb	r1, [r3, r2]
    afe2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    afe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afea:	781b      	ldrb	r3, [r3, #0]
    afec:	3301      	adds	r3, #1
    afee:	b2da      	uxtb	r2, r3
    aff0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aff8:	701a      	strb	r2, [r3, #0]
    affa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    affe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b002:	781b      	ldrb	r3, [r3, #0]
    b004:	2bff      	cmp	r3, #255	; 0xff
    b006:	d105      	bne.n	b014 <send_bat+0x698>
    b008:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b00c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b010:	2200      	movs	r2, #0
    b012:	701a      	strb	r2, [r3, #0]
    b014:	f242 0339 	movw	r3, #8249	; 0x2039
    b018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b01c:	781b      	ldrb	r3, [r3, #0]
    b01e:	b2db      	uxtb	r3, r3
    b020:	f003 0310 	and.w	r3, r3, #16
    b024:	2b00      	cmp	r3, #0
    b026:	d15a      	bne.n	b0de <send_bat+0x762>
    b028:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    b02c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b030:	781b      	ldrb	r3, [r3, #0]
    b032:	b2db      	uxtb	r3, r3
    b034:	461a      	mov	r2, r3
    b036:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b03a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b03e:	5c9a      	ldrb	r2, [r3, r2]
    b040:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    b044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b048:	701a      	strb	r2, [r3, #0]
    b04a:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    b04e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b052:	2200      	movs	r2, #0
    b054:	701a      	strb	r2, [r3, #0]
    b056:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    b05a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b05e:	781b      	ldrb	r3, [r3, #0]
    b060:	b2db      	uxtb	r3, r3
    b062:	3301      	adds	r3, #1
    b064:	b2da      	uxtb	r2, r3
    b066:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    b06a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b06e:	701a      	strb	r2, [r3, #0]
    b070:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    b074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b078:	781b      	ldrb	r3, [r3, #0]
    b07a:	b2db      	uxtb	r3, r3
    b07c:	2bff      	cmp	r3, #255	; 0xff
    b07e:	d105      	bne.n	b08c <send_bat+0x710>
    b080:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    b084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b088:	2200      	movs	r2, #0
    b08a:	701a      	strb	r2, [r3, #0]
    b08c:	f242 0338 	movw	r3, #8248	; 0x2038
    b090:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b094:	f242 0238 	movw	r2, #8248	; 0x2038
    b098:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b09c:	7812      	ldrb	r2, [r2, #0]
    b09e:	b2d2      	uxtb	r2, r2
    b0a0:	f042 0201 	orr.w	r2, r2, #1
    b0a4:	b2d2      	uxtb	r2, r2
    b0a6:	701a      	strb	r2, [r3, #0]
    b0a8:	f242 0339 	movw	r3, #8249	; 0x2039
    b0ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0b0:	f242 0239 	movw	r2, #8249	; 0x2039
    b0b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b0b8:	7812      	ldrb	r2, [r2, #0]
    b0ba:	b2d2      	uxtb	r2, r2
    b0bc:	f042 0210 	orr.w	r2, r2, #16
    b0c0:	b2d2      	uxtb	r2, r2
    b0c2:	701a      	strb	r2, [r3, #0]
    b0c4:	e00b      	b.n	b0de <send_bat+0x762>
    b0c6:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    b0ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ce:	781b      	ldrb	r3, [r3, #0]
    b0d0:	3301      	adds	r3, #1
    b0d2:	b2da      	uxtb	r2, r3
    b0d4:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    b0d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0dc:	701a      	strb	r2, [r3, #0]
}
    b0de:	46bd      	mov	sp, r7
    b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0e4:	4770      	bx	lr
    b0e6:	bf00      	nop

0000b0e8 <send_climb>:
void send_climb(void){  //2000ms
    b0e8:	b480      	push	{r7}
    b0ea:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    b0ec:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    b0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0f4:	781a      	ldrb	r2, [r3, #0]
    b0f6:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    b0fa:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    b0fe:	fba3 1302 	umull	r1, r3, r3, r2
    b102:	0919      	lsrs	r1, r3, #4
    b104:	460b      	mov	r3, r1
    b106:	009b      	lsls	r3, r3, #2
    b108:	440b      	add	r3, r1
    b10a:	009b      	lsls	r3, r3, #2
    b10c:	1ad3      	subs	r3, r2, r3
    b10e:	b2db      	uxtb	r3, r3
    b110:	2b12      	cmp	r3, #18
    b112:	f040 8554 	bne.w	bbbe <send_climb+0xad6>
    b116:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b11a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b11e:	781a      	ldrb	r2, [r3, #0]
    b120:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    b124:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b128:	781b      	ldrb	r3, [r3, #0]
    b12a:	b2db      	uxtb	r3, r3
    b12c:	429a      	cmp	r2, r3
    b12e:	d313      	bcc.n	b158 <send_climb+0x70>
    b130:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    b134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b138:	781b      	ldrb	r3, [r3, #0]
    b13a:	b2db      	uxtb	r3, r3
    b13c:	461a      	mov	r2, r3
    b13e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b146:	781b      	ldrb	r3, [r3, #0]
    b148:	1ad3      	subs	r3, r2, r3
    b14a:	33ff      	adds	r3, #255	; 0xff
    b14c:	2b12      	cmp	r3, #18
    b14e:	bfd4      	ite	le
    b150:	2300      	movle	r3, #0
    b152:	2301      	movgt	r3, #1
    b154:	b2db      	uxtb	r3, r3
    b156:	e011      	b.n	b17c <send_climb+0x94>
    b158:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    b15c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b160:	781b      	ldrb	r3, [r3, #0]
    b162:	b2db      	uxtb	r3, r3
    b164:	461a      	mov	r2, r3
    b166:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b16a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b16e:	781b      	ldrb	r3, [r3, #0]
    b170:	1ad3      	subs	r3, r2, r3
    b172:	2b12      	cmp	r3, #18
    b174:	bfd4      	ite	le
    b176:	2300      	movle	r3, #0
    b178:	2301      	movgt	r3, #1
    b17a:	b2db      	uxtb	r3, r3
    b17c:	2b00      	cmp	r3, #0
    b17e:	f000 8512 	beq.w	bba6 <send_climb+0xabe>
    b182:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b18a:	781b      	ldrb	r3, [r3, #0]
    b18c:	461a      	mov	r2, r3
    b18e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b196:	2105      	movs	r1, #5
    b198:	5499      	strb	r1, [r3, r2]
    b19a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b19e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1a2:	781b      	ldrb	r3, [r3, #0]
    b1a4:	3301      	adds	r3, #1
    b1a6:	b2da      	uxtb	r2, r3
    b1a8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b1ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1b0:	701a      	strb	r2, [r3, #0]
    b1b2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b1b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1ba:	781b      	ldrb	r3, [r3, #0]
    b1bc:	2bff      	cmp	r3, #255	; 0xff
    b1be:	d105      	bne.n	b1cc <send_climb+0xe4>
    b1c0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b1c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1c8:	2200      	movs	r2, #0
    b1ca:	701a      	strb	r2, [r3, #0]
    b1cc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b1d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1d4:	781b      	ldrb	r3, [r3, #0]
    b1d6:	461a      	mov	r2, r3
    b1d8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b1dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1e0:	210e      	movs	r1, #14
    b1e2:	5499      	strb	r1, [r3, r2]
    b1e4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b1e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1ec:	781b      	ldrb	r3, [r3, #0]
    b1ee:	3301      	adds	r3, #1
    b1f0:	b2da      	uxtb	r2, r3
    b1f2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b1f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1fa:	701a      	strb	r2, [r3, #0]
    b1fc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b204:	781b      	ldrb	r3, [r3, #0]
    b206:	2bff      	cmp	r3, #255	; 0xff
    b208:	d105      	bne.n	b216 <send_climb+0x12e>
    b20a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b20e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b212:	2200      	movs	r2, #0
    b214:	701a      	strb	r2, [r3, #0]
    b216:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b21a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b21e:	220e      	movs	r2, #14
    b220:	701a      	strb	r2, [r3, #0]
    b222:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b22a:	220e      	movs	r2, #14
    b22c:	701a      	strb	r2, [r3, #0]
    b22e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b236:	781b      	ldrb	r3, [r3, #0]
    b238:	461a      	mov	r2, r3
    b23a:	f24c 232c 	movw	r3, #49708	; 0xc22c
    b23e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b242:	7819      	ldrb	r1, [r3, #0]
    b244:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b24c:	5499      	strb	r1, [r3, r2]
    b24e:	f24c 232c 	movw	r3, #49708	; 0xc22c
    b252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b256:	781a      	ldrb	r2, [r3, #0]
    b258:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b25c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b260:	781b      	ldrb	r3, [r3, #0]
    b262:	4413      	add	r3, r2
    b264:	b2da      	uxtb	r2, r3
    b266:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b26e:	701a      	strb	r2, [r3, #0]
    b270:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b278:	781a      	ldrb	r2, [r3, #0]
    b27a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b27e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b282:	781b      	ldrb	r3, [r3, #0]
    b284:	4413      	add	r3, r2
    b286:	b2da      	uxtb	r2, r3
    b288:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b290:	701a      	strb	r2, [r3, #0]
    b292:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b29a:	781b      	ldrb	r3, [r3, #0]
    b29c:	3301      	adds	r3, #1
    b29e:	b2da      	uxtb	r2, r3
    b2a0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b2a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2a8:	701a      	strb	r2, [r3, #0]
    b2aa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2b2:	781b      	ldrb	r3, [r3, #0]
    b2b4:	2bff      	cmp	r3, #255	; 0xff
    b2b6:	d105      	bne.n	b2c4 <send_climb+0x1dc>
    b2b8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b2bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2c0:	2200      	movs	r2, #0
    b2c2:	701a      	strb	r2, [r3, #0]
    b2c4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b2c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2cc:	781b      	ldrb	r3, [r3, #0]
    b2ce:	461a      	mov	r2, r3
    b2d0:	f24c 232c 	movw	r3, #49708	; 0xc22c
    b2d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2d8:	7859      	ldrb	r1, [r3, #1]
    b2da:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b2de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2e2:	5499      	strb	r1, [r3, r2]
    b2e4:	4bd3      	ldr	r3, [pc, #844]	; (b634 <send_climb+0x54c>)
    b2e6:	781a      	ldrb	r2, [r3, #0]
    b2e8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b2ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2f0:	781b      	ldrb	r3, [r3, #0]
    b2f2:	4413      	add	r3, r2
    b2f4:	b2da      	uxtb	r2, r3
    b2f6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2fe:	701a      	strb	r2, [r3, #0]
    b300:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b308:	781a      	ldrb	r2, [r3, #0]
    b30a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b30e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b312:	781b      	ldrb	r3, [r3, #0]
    b314:	4413      	add	r3, r2
    b316:	b2da      	uxtb	r2, r3
    b318:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b31c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b320:	701a      	strb	r2, [r3, #0]
    b322:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b32a:	781b      	ldrb	r3, [r3, #0]
    b32c:	3301      	adds	r3, #1
    b32e:	b2da      	uxtb	r2, r3
    b330:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b334:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b338:	701a      	strb	r2, [r3, #0]
    b33a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b33e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b342:	781b      	ldrb	r3, [r3, #0]
    b344:	2bff      	cmp	r3, #255	; 0xff
    b346:	d105      	bne.n	b354 <send_climb+0x26c>
    b348:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b34c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b350:	2200      	movs	r2, #0
    b352:	701a      	strb	r2, [r3, #0]
    b354:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b35c:	781b      	ldrb	r3, [r3, #0]
    b35e:	461a      	mov	r2, r3
    b360:	f24c 2340 	movw	r3, #49728	; 0xc240
    b364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b368:	7819      	ldrb	r1, [r3, #0]
    b36a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b36e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b372:	5499      	strb	r1, [r3, r2]
    b374:	f24c 2340 	movw	r3, #49728	; 0xc240
    b378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b37c:	781a      	ldrb	r2, [r3, #0]
    b37e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b386:	781b      	ldrb	r3, [r3, #0]
    b388:	4413      	add	r3, r2
    b38a:	b2da      	uxtb	r2, r3
    b38c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b394:	701a      	strb	r2, [r3, #0]
    b396:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b39a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b39e:	781a      	ldrb	r2, [r3, #0]
    b3a0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3a8:	781b      	ldrb	r3, [r3, #0]
    b3aa:	4413      	add	r3, r2
    b3ac:	b2da      	uxtb	r2, r3
    b3ae:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b3b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3b6:	701a      	strb	r2, [r3, #0]
    b3b8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b3bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3c0:	781b      	ldrb	r3, [r3, #0]
    b3c2:	3301      	adds	r3, #1
    b3c4:	b2da      	uxtb	r2, r3
    b3c6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b3ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3ce:	701a      	strb	r2, [r3, #0]
    b3d0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b3d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3d8:	781b      	ldrb	r3, [r3, #0]
    b3da:	2bff      	cmp	r3, #255	; 0xff
    b3dc:	d105      	bne.n	b3ea <send_climb+0x302>
    b3de:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b3e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3e6:	2200      	movs	r2, #0
    b3e8:	701a      	strb	r2, [r3, #0]
    b3ea:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b3ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3f2:	781b      	ldrb	r3, [r3, #0]
    b3f4:	461a      	mov	r2, r3
    b3f6:	f24c 2340 	movw	r3, #49728	; 0xc240
    b3fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3fe:	7859      	ldrb	r1, [r3, #1]
    b400:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b408:	5499      	strb	r1, [r3, r2]
    b40a:	4b8b      	ldr	r3, [pc, #556]	; (b638 <send_climb+0x550>)
    b40c:	781a      	ldrb	r2, [r3, #0]
    b40e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b416:	781b      	ldrb	r3, [r3, #0]
    b418:	4413      	add	r3, r2
    b41a:	b2da      	uxtb	r2, r3
    b41c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b424:	701a      	strb	r2, [r3, #0]
    b426:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b42a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b42e:	781a      	ldrb	r2, [r3, #0]
    b430:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b438:	781b      	ldrb	r3, [r3, #0]
    b43a:	4413      	add	r3, r2
    b43c:	b2da      	uxtb	r2, r3
    b43e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b446:	701a      	strb	r2, [r3, #0]
    b448:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b44c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b450:	781b      	ldrb	r3, [r3, #0]
    b452:	3301      	adds	r3, #1
    b454:	b2da      	uxtb	r2, r3
    b456:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b45a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b45e:	701a      	strb	r2, [r3, #0]
    b460:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b468:	781b      	ldrb	r3, [r3, #0]
    b46a:	2bff      	cmp	r3, #255	; 0xff
    b46c:	d105      	bne.n	b47a <send_climb+0x392>
    b46e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b476:	2200      	movs	r2, #0
    b478:	701a      	strb	r2, [r3, #0]
    b47a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b47e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b482:	781b      	ldrb	r3, [r3, #0]
    b484:	461a      	mov	r2, r3
    b486:	f24c 2340 	movw	r3, #49728	; 0xc240
    b48a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b48e:	7899      	ldrb	r1, [r3, #2]
    b490:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b498:	5499      	strb	r1, [r3, r2]
    b49a:	4b68      	ldr	r3, [pc, #416]	; (b63c <send_climb+0x554>)
    b49c:	781a      	ldrb	r2, [r3, #0]
    b49e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b4a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4a6:	781b      	ldrb	r3, [r3, #0]
    b4a8:	4413      	add	r3, r2
    b4aa:	b2da      	uxtb	r2, r3
    b4ac:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b4b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4b4:	701a      	strb	r2, [r3, #0]
    b4b6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b4ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4be:	781a      	ldrb	r2, [r3, #0]
    b4c0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b4c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4c8:	781b      	ldrb	r3, [r3, #0]
    b4ca:	4413      	add	r3, r2
    b4cc:	b2da      	uxtb	r2, r3
    b4ce:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b4d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4d6:	701a      	strb	r2, [r3, #0]
    b4d8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b4dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4e0:	781b      	ldrb	r3, [r3, #0]
    b4e2:	3301      	adds	r3, #1
    b4e4:	b2da      	uxtb	r2, r3
    b4e6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b4ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ee:	701a      	strb	r2, [r3, #0]
    b4f0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b4f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4f8:	781b      	ldrb	r3, [r3, #0]
    b4fa:	2bff      	cmp	r3, #255	; 0xff
    b4fc:	d105      	bne.n	b50a <send_climb+0x422>
    b4fe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b506:	2200      	movs	r2, #0
    b508:	701a      	strb	r2, [r3, #0]
    b50a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b50e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b512:	781b      	ldrb	r3, [r3, #0]
    b514:	461a      	mov	r2, r3
    b516:	f24c 2340 	movw	r3, #49728	; 0xc240
    b51a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b51e:	78d9      	ldrb	r1, [r3, #3]
    b520:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b528:	5499      	strb	r1, [r3, r2]
    b52a:	4b45      	ldr	r3, [pc, #276]	; (b640 <send_climb+0x558>)
    b52c:	781a      	ldrb	r2, [r3, #0]
    b52e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b536:	781b      	ldrb	r3, [r3, #0]
    b538:	4413      	add	r3, r2
    b53a:	b2da      	uxtb	r2, r3
    b53c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b544:	701a      	strb	r2, [r3, #0]
    b546:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b54a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b54e:	781a      	ldrb	r2, [r3, #0]
    b550:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b558:	781b      	ldrb	r3, [r3, #0]
    b55a:	4413      	add	r3, r2
    b55c:	b2da      	uxtb	r2, r3
    b55e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b566:	701a      	strb	r2, [r3, #0]
    b568:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b56c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b570:	781b      	ldrb	r3, [r3, #0]
    b572:	3301      	adds	r3, #1
    b574:	b2da      	uxtb	r2, r3
    b576:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b57a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b57e:	701a      	strb	r2, [r3, #0]
    b580:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b588:	781b      	ldrb	r3, [r3, #0]
    b58a:	2bff      	cmp	r3, #255	; 0xff
    b58c:	d105      	bne.n	b59a <send_climb+0x4b2>
    b58e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b596:	2200      	movs	r2, #0
    b598:	701a      	strb	r2, [r3, #0]
    b59a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b59e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5a2:	781b      	ldrb	r3, [r3, #0]
    b5a4:	461a      	mov	r2, r3
    b5a6:	f24c 2348 	movw	r3, #49736	; 0xc248
    b5aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ae:	7819      	ldrb	r1, [r3, #0]
    b5b0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b5b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5b8:	5499      	strb	r1, [r3, r2]
    b5ba:	f24c 2348 	movw	r3, #49736	; 0xc248
    b5be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5c2:	781a      	ldrb	r2, [r3, #0]
    b5c4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b5c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5cc:	781b      	ldrb	r3, [r3, #0]
    b5ce:	4413      	add	r3, r2
    b5d0:	b2da      	uxtb	r2, r3
    b5d2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b5d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5da:	701a      	strb	r2, [r3, #0]
    b5dc:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b5e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5e4:	781a      	ldrb	r2, [r3, #0]
    b5e6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ee:	781b      	ldrb	r3, [r3, #0]
    b5f0:	4413      	add	r3, r2
    b5f2:	b2da      	uxtb	r2, r3
    b5f4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b5f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5fc:	701a      	strb	r2, [r3, #0]
    b5fe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b606:	781b      	ldrb	r3, [r3, #0]
    b608:	3301      	adds	r3, #1
    b60a:	b2da      	uxtb	r2, r3
    b60c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b614:	701a      	strb	r2, [r3, #0]
    b616:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b61a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b61e:	781b      	ldrb	r3, [r3, #0]
    b620:	2bff      	cmp	r3, #255	; 0xff
    b622:	d10f      	bne.n	b644 <send_climb+0x55c>
    b624:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b62c:	2200      	movs	r2, #0
    b62e:	701a      	strb	r2, [r3, #0]
    b630:	e008      	b.n	b644 <send_climb+0x55c>
    b632:	bf00      	nop
    b634:	2004c22d 	.word	0x2004c22d
    b638:	2004c241 	.word	0x2004c241
    b63c:	2004c242 	.word	0x2004c242
    b640:	2004c243 	.word	0x2004c243
    b644:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b64c:	781b      	ldrb	r3, [r3, #0]
    b64e:	461a      	mov	r2, r3
    b650:	f24c 2348 	movw	r3, #49736	; 0xc248
    b654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b658:	7859      	ldrb	r1, [r3, #1]
    b65a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b65e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b662:	5499      	strb	r1, [r3, r2]
    b664:	4bd1      	ldr	r3, [pc, #836]	; (b9ac <send_climb+0x8c4>)
    b666:	781a      	ldrb	r2, [r3, #0]
    b668:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b66c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b670:	781b      	ldrb	r3, [r3, #0]
    b672:	4413      	add	r3, r2
    b674:	b2da      	uxtb	r2, r3
    b676:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b67e:	701a      	strb	r2, [r3, #0]
    b680:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b688:	781a      	ldrb	r2, [r3, #0]
    b68a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b68e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b692:	781b      	ldrb	r3, [r3, #0]
    b694:	4413      	add	r3, r2
    b696:	b2da      	uxtb	r2, r3
    b698:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b69c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6a0:	701a      	strb	r2, [r3, #0]
    b6a2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b6a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6aa:	781b      	ldrb	r3, [r3, #0]
    b6ac:	3301      	adds	r3, #1
    b6ae:	b2da      	uxtb	r2, r3
    b6b0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b6b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6b8:	701a      	strb	r2, [r3, #0]
    b6ba:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b6be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6c2:	781b      	ldrb	r3, [r3, #0]
    b6c4:	2bff      	cmp	r3, #255	; 0xff
    b6c6:	d105      	bne.n	b6d4 <send_climb+0x5ec>
    b6c8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b6cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6d0:	2200      	movs	r2, #0
    b6d2:	701a      	strb	r2, [r3, #0]
    b6d4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b6d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6dc:	781b      	ldrb	r3, [r3, #0]
    b6de:	461a      	mov	r2, r3
    b6e0:	f24c 2348 	movw	r3, #49736	; 0xc248
    b6e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6e8:	7899      	ldrb	r1, [r3, #2]
    b6ea:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b6ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6f2:	5499      	strb	r1, [r3, r2]
    b6f4:	4bae      	ldr	r3, [pc, #696]	; (b9b0 <send_climb+0x8c8>)
    b6f6:	781a      	ldrb	r2, [r3, #0]
    b6f8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b6fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b700:	781b      	ldrb	r3, [r3, #0]
    b702:	4413      	add	r3, r2
    b704:	b2da      	uxtb	r2, r3
    b706:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b70a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b70e:	701a      	strb	r2, [r3, #0]
    b710:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b718:	781a      	ldrb	r2, [r3, #0]
    b71a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b71e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b722:	781b      	ldrb	r3, [r3, #0]
    b724:	4413      	add	r3, r2
    b726:	b2da      	uxtb	r2, r3
    b728:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b72c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b730:	701a      	strb	r2, [r3, #0]
    b732:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b73a:	781b      	ldrb	r3, [r3, #0]
    b73c:	3301      	adds	r3, #1
    b73e:	b2da      	uxtb	r2, r3
    b740:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b748:	701a      	strb	r2, [r3, #0]
    b74a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b74e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b752:	781b      	ldrb	r3, [r3, #0]
    b754:	2bff      	cmp	r3, #255	; 0xff
    b756:	d105      	bne.n	b764 <send_climb+0x67c>
    b758:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b75c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b760:	2200      	movs	r2, #0
    b762:	701a      	strb	r2, [r3, #0]
    b764:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b76c:	781b      	ldrb	r3, [r3, #0]
    b76e:	461a      	mov	r2, r3
    b770:	f24c 2348 	movw	r3, #49736	; 0xc248
    b774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b778:	78d9      	ldrb	r1, [r3, #3]
    b77a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b77e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b782:	5499      	strb	r1, [r3, r2]
    b784:	4b8b      	ldr	r3, [pc, #556]	; (b9b4 <send_climb+0x8cc>)
    b786:	781a      	ldrb	r2, [r3, #0]
    b788:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b78c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b790:	781b      	ldrb	r3, [r3, #0]
    b792:	4413      	add	r3, r2
    b794:	b2da      	uxtb	r2, r3
    b796:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b79a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b79e:	701a      	strb	r2, [r3, #0]
    b7a0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b7a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7a8:	781a      	ldrb	r2, [r3, #0]
    b7aa:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b7ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7b2:	781b      	ldrb	r3, [r3, #0]
    b7b4:	4413      	add	r3, r2
    b7b6:	b2da      	uxtb	r2, r3
    b7b8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b7bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7c0:	701a      	strb	r2, [r3, #0]
    b7c2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b7c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ca:	781b      	ldrb	r3, [r3, #0]
    b7cc:	3301      	adds	r3, #1
    b7ce:	b2da      	uxtb	r2, r3
    b7d0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b7d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7d8:	701a      	strb	r2, [r3, #0]
    b7da:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b7de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7e2:	781b      	ldrb	r3, [r3, #0]
    b7e4:	2bff      	cmp	r3, #255	; 0xff
    b7e6:	d105      	bne.n	b7f4 <send_climb+0x70c>
    b7e8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7f0:	2200      	movs	r2, #0
    b7f2:	701a      	strb	r2, [r3, #0]
    b7f4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b7f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7fc:	781b      	ldrb	r3, [r3, #0]
    b7fe:	461a      	mov	r2, r3
    b800:	f648 1348 	movw	r3, #35144	; 0x8948
    b804:	f2c0 0301 	movt	r3, #1
    b808:	7819      	ldrb	r1, [r3, #0]
    b80a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b80e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b812:	5499      	strb	r1, [r3, r2]
    b814:	f648 1348 	movw	r3, #35144	; 0x8948
    b818:	f2c0 0301 	movt	r3, #1
    b81c:	781a      	ldrb	r2, [r3, #0]
    b81e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b826:	781b      	ldrb	r3, [r3, #0]
    b828:	4413      	add	r3, r2
    b82a:	b2da      	uxtb	r2, r3
    b82c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b834:	701a      	strb	r2, [r3, #0]
    b836:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b83e:	781a      	ldrb	r2, [r3, #0]
    b840:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b848:	781b      	ldrb	r3, [r3, #0]
    b84a:	4413      	add	r3, r2
    b84c:	b2da      	uxtb	r2, r3
    b84e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b856:	701a      	strb	r2, [r3, #0]
    b858:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b860:	781b      	ldrb	r3, [r3, #0]
    b862:	3301      	adds	r3, #1
    b864:	b2da      	uxtb	r2, r3
    b866:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b86a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b86e:	701a      	strb	r2, [r3, #0]
    b870:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b878:	781b      	ldrb	r3, [r3, #0]
    b87a:	2bff      	cmp	r3, #255	; 0xff
    b87c:	d105      	bne.n	b88a <send_climb+0x7a2>
    b87e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b886:	2200      	movs	r2, #0
    b888:	701a      	strb	r2, [r3, #0]
    b88a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b88e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b892:	781b      	ldrb	r3, [r3, #0]
    b894:	461a      	mov	r2, r3
    b896:	f648 1348 	movw	r3, #35144	; 0x8948
    b89a:	f2c0 0301 	movt	r3, #1
    b89e:	7859      	ldrb	r1, [r3, #1]
    b8a0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8a8:	5499      	strb	r1, [r3, r2]
    b8aa:	4b43      	ldr	r3, [pc, #268]	; (b9b8 <send_climb+0x8d0>)
    b8ac:	781a      	ldrb	r2, [r3, #0]
    b8ae:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8b6:	781b      	ldrb	r3, [r3, #0]
    b8b8:	4413      	add	r3, r2
    b8ba:	b2da      	uxtb	r2, r3
    b8bc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b8c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8c4:	701a      	strb	r2, [r3, #0]
    b8c6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b8ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8ce:	781a      	ldrb	r2, [r3, #0]
    b8d0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b8d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8d8:	781b      	ldrb	r3, [r3, #0]
    b8da:	4413      	add	r3, r2
    b8dc:	b2da      	uxtb	r2, r3
    b8de:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b8e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8e6:	701a      	strb	r2, [r3, #0]
    b8e8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b8ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8f0:	781b      	ldrb	r3, [r3, #0]
    b8f2:	3301      	adds	r3, #1
    b8f4:	b2da      	uxtb	r2, r3
    b8f6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b8fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8fe:	701a      	strb	r2, [r3, #0]
    b900:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b908:	781b      	ldrb	r3, [r3, #0]
    b90a:	2bff      	cmp	r3, #255	; 0xff
    b90c:	d105      	bne.n	b91a <send_climb+0x832>
    b90e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b916:	2200      	movs	r2, #0
    b918:	701a      	strb	r2, [r3, #0]
    b91a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b91e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b922:	781b      	ldrb	r3, [r3, #0]
    b924:	461a      	mov	r2, r3
    b926:	f648 1348 	movw	r3, #35144	; 0x8948
    b92a:	f2c0 0301 	movt	r3, #1
    b92e:	7899      	ldrb	r1, [r3, #2]
    b930:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b938:	5499      	strb	r1, [r3, r2]
    b93a:	4b20      	ldr	r3, [pc, #128]	; (b9bc <send_climb+0x8d4>)
    b93c:	781a      	ldrb	r2, [r3, #0]
    b93e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b946:	781b      	ldrb	r3, [r3, #0]
    b948:	4413      	add	r3, r2
    b94a:	b2da      	uxtb	r2, r3
    b94c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b954:	701a      	strb	r2, [r3, #0]
    b956:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b95a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b95e:	781a      	ldrb	r2, [r3, #0]
    b960:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b968:	781b      	ldrb	r3, [r3, #0]
    b96a:	4413      	add	r3, r2
    b96c:	b2da      	uxtb	r2, r3
    b96e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b976:	701a      	strb	r2, [r3, #0]
    b978:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b980:	781b      	ldrb	r3, [r3, #0]
    b982:	3301      	adds	r3, #1
    b984:	b2da      	uxtb	r2, r3
    b986:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b98a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b98e:	701a      	strb	r2, [r3, #0]
    b990:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b998:	781b      	ldrb	r3, [r3, #0]
    b99a:	2bff      	cmp	r3, #255	; 0xff
    b99c:	d110      	bne.n	b9c0 <send_climb+0x8d8>
    b99e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b9a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9a6:	2200      	movs	r2, #0
    b9a8:	701a      	strb	r2, [r3, #0]
    b9aa:	e009      	b.n	b9c0 <send_climb+0x8d8>
    b9ac:	2004c249 	.word	0x2004c249
    b9b0:	2004c24a 	.word	0x2004c24a
    b9b4:	2004c24b 	.word	0x2004c24b
    b9b8:	00018949 	.word	0x00018949
    b9bc:	0001894a 	.word	0x0001894a
    b9c0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b9c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9c8:	781b      	ldrb	r3, [r3, #0]
    b9ca:	461a      	mov	r2, r3
    b9cc:	f648 1348 	movw	r3, #35144	; 0x8948
    b9d0:	f2c0 0301 	movt	r3, #1
    b9d4:	78d9      	ldrb	r1, [r3, #3]
    b9d6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b9da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9de:	5499      	strb	r1, [r3, r2]
    b9e0:	4b79      	ldr	r3, [pc, #484]	; (bbc8 <send_climb+0xae0>)
    b9e2:	781a      	ldrb	r2, [r3, #0]
    b9e4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b9e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9ec:	781b      	ldrb	r3, [r3, #0]
    b9ee:	4413      	add	r3, r2
    b9f0:	b2da      	uxtb	r2, r3
    b9f2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b9f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9fa:	701a      	strb	r2, [r3, #0]
    b9fc:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ba00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba04:	781a      	ldrb	r2, [r3, #0]
    ba06:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ba0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba0e:	781b      	ldrb	r3, [r3, #0]
    ba10:	4413      	add	r3, r2
    ba12:	b2da      	uxtb	r2, r3
    ba14:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ba18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba1c:	701a      	strb	r2, [r3, #0]
    ba1e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ba22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba26:	781b      	ldrb	r3, [r3, #0]
    ba28:	3301      	adds	r3, #1
    ba2a:	b2da      	uxtb	r2, r3
    ba2c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ba30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba34:	701a      	strb	r2, [r3, #0]
    ba36:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ba3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba3e:	781b      	ldrb	r3, [r3, #0]
    ba40:	2bff      	cmp	r3, #255	; 0xff
    ba42:	d105      	bne.n	ba50 <send_climb+0x968>
    ba44:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ba48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba4c:	2200      	movs	r2, #0
    ba4e:	701a      	strb	r2, [r3, #0]
    ba50:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ba54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba58:	781b      	ldrb	r3, [r3, #0]
    ba5a:	461a      	mov	r2, r3
    ba5c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ba60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba64:	7819      	ldrb	r1, [r3, #0]
    ba66:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ba6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba6e:	5499      	strb	r1, [r3, r2]
    ba70:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ba74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba78:	781b      	ldrb	r3, [r3, #0]
    ba7a:	3301      	adds	r3, #1
    ba7c:	b2da      	uxtb	r2, r3
    ba7e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ba82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba86:	701a      	strb	r2, [r3, #0]
    ba88:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ba8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba90:	781b      	ldrb	r3, [r3, #0]
    ba92:	2bff      	cmp	r3, #255	; 0xff
    ba94:	d105      	bne.n	baa2 <send_climb+0x9ba>
    ba96:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ba9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba9e:	2200      	movs	r2, #0
    baa0:	701a      	strb	r2, [r3, #0]
    baa2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    baa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baaa:	781b      	ldrb	r3, [r3, #0]
    baac:	461a      	mov	r2, r3
    baae:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    bab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bab6:	7819      	ldrb	r1, [r3, #0]
    bab8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    babc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bac0:	5499      	strb	r1, [r3, r2]
    bac2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baca:	781b      	ldrb	r3, [r3, #0]
    bacc:	3301      	adds	r3, #1
    bace:	b2da      	uxtb	r2, r3
    bad0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bad8:	701a      	strb	r2, [r3, #0]
    bada:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bae2:	781b      	ldrb	r3, [r3, #0]
    bae4:	2bff      	cmp	r3, #255	; 0xff
    bae6:	d105      	bne.n	baf4 <send_climb+0xa0c>
    bae8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    baec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baf0:	2200      	movs	r2, #0
    baf2:	701a      	strb	r2, [r3, #0]
    baf4:	f242 0339 	movw	r3, #8249	; 0x2039
    baf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bafc:	781b      	ldrb	r3, [r3, #0]
    bafe:	b2db      	uxtb	r3, r3
    bb00:	f003 0310 	and.w	r3, r3, #16
    bb04:	2b00      	cmp	r3, #0
    bb06:	d15a      	bne.n	bbbe <send_climb+0xad6>
    bb08:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    bb0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb10:	781b      	ldrb	r3, [r3, #0]
    bb12:	b2db      	uxtb	r3, r3
    bb14:	461a      	mov	r2, r3
    bb16:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    bb1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb1e:	5c9a      	ldrb	r2, [r3, r2]
    bb20:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    bb24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb28:	701a      	strb	r2, [r3, #0]
    bb2a:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    bb2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb32:	2200      	movs	r2, #0
    bb34:	701a      	strb	r2, [r3, #0]
    bb36:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    bb3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb3e:	781b      	ldrb	r3, [r3, #0]
    bb40:	b2db      	uxtb	r3, r3
    bb42:	3301      	adds	r3, #1
    bb44:	b2da      	uxtb	r2, r3
    bb46:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    bb4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb4e:	701a      	strb	r2, [r3, #0]
    bb50:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    bb54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb58:	781b      	ldrb	r3, [r3, #0]
    bb5a:	b2db      	uxtb	r3, r3
    bb5c:	2bff      	cmp	r3, #255	; 0xff
    bb5e:	d105      	bne.n	bb6c <send_climb+0xa84>
    bb60:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    bb64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb68:	2200      	movs	r2, #0
    bb6a:	701a      	strb	r2, [r3, #0]
    bb6c:	f242 0338 	movw	r3, #8248	; 0x2038
    bb70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb74:	f242 0238 	movw	r2, #8248	; 0x2038
    bb78:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bb7c:	7812      	ldrb	r2, [r2, #0]
    bb7e:	b2d2      	uxtb	r2, r2
    bb80:	f042 0201 	orr.w	r2, r2, #1
    bb84:	b2d2      	uxtb	r2, r2
    bb86:	701a      	strb	r2, [r3, #0]
    bb88:	f242 0339 	movw	r3, #8249	; 0x2039
    bb8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb90:	f242 0239 	movw	r2, #8249	; 0x2039
    bb94:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bb98:	7812      	ldrb	r2, [r2, #0]
    bb9a:	b2d2      	uxtb	r2, r2
    bb9c:	f042 0210 	orr.w	r2, r2, #16
    bba0:	b2d2      	uxtb	r2, r2
    bba2:	701a      	strb	r2, [r3, #0]
    bba4:	e00b      	b.n	bbbe <send_climb+0xad6>
    bba6:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    bbaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbae:	781b      	ldrb	r3, [r3, #0]
    bbb0:	3301      	adds	r3, #1
    bbb2:	b2da      	uxtb	r2, r3
    bbb4:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    bbb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbbc:	701a      	strb	r2, [r3, #0]
}
    bbbe:	46bd      	mov	sp, r7
    bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    bbc4:	4770      	bx	lr
    bbc6:	bf00      	nop
    bbc8:	0001894b 	.word	0x0001894b

0000bbcc <send_mode>:
void send_mode(void){  //5000ms
    bbcc:	b480      	push	{r7}
    bbce:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    bbd0:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    bbd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbd8:	781a      	ldrb	r2, [r3, #0]
    bbda:	f248 531f 	movw	r3, #34079	; 0x851f
    bbde:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    bbe2:	fba3 1302 	umull	r1, r3, r3, r2
    bbe6:	091b      	lsrs	r3, r3, #4
    bbe8:	2132      	movs	r1, #50	; 0x32
    bbea:	fb01 f303 	mul.w	r3, r1, r3
    bbee:	1ad3      	subs	r3, r2, r3
    bbf0:	b2db      	uxtb	r3, r3
    bbf2:	2b09      	cmp	r3, #9
    bbf4:	f040 82ba 	bne.w	c16c <send_mode+0x5a0>
    bbf8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bbfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc00:	781a      	ldrb	r2, [r3, #0]
    bc02:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    bc06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc0a:	781b      	ldrb	r3, [r3, #0]
    bc0c:	b2db      	uxtb	r3, r3
    bc0e:	429a      	cmp	r2, r3
    bc10:	d313      	bcc.n	bc3a <send_mode+0x6e>
    bc12:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    bc16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc1a:	781b      	ldrb	r3, [r3, #0]
    bc1c:	b2db      	uxtb	r3, r3
    bc1e:	461a      	mov	r2, r3
    bc20:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bc24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc28:	781b      	ldrb	r3, [r3, #0]
    bc2a:	1ad3      	subs	r3, r2, r3
    bc2c:	33ff      	adds	r3, #255	; 0xff
    bc2e:	2b09      	cmp	r3, #9
    bc30:	bfd4      	ite	le
    bc32:	2300      	movle	r3, #0
    bc34:	2301      	movgt	r3, #1
    bc36:	b2db      	uxtb	r3, r3
    bc38:	e011      	b.n	bc5e <send_mode+0x92>
    bc3a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    bc3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc42:	781b      	ldrb	r3, [r3, #0]
    bc44:	b2db      	uxtb	r3, r3
    bc46:	461a      	mov	r2, r3
    bc48:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bc4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc50:	781b      	ldrb	r3, [r3, #0]
    bc52:	1ad3      	subs	r3, r2, r3
    bc54:	2b09      	cmp	r3, #9
    bc56:	bfd4      	ite	le
    bc58:	2300      	movle	r3, #0
    bc5a:	2301      	movgt	r3, #1
    bc5c:	b2db      	uxtb	r3, r3
    bc5e:	2b00      	cmp	r3, #0
    bc60:	f000 8278 	beq.w	c154 <send_mode+0x588>
    bc64:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bc68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc6c:	781b      	ldrb	r3, [r3, #0]
    bc6e:	461a      	mov	r2, r3
    bc70:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    bc74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc78:	2105      	movs	r1, #5
    bc7a:	5499      	strb	r1, [r3, r2]
    bc7c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bc80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc84:	781b      	ldrb	r3, [r3, #0]
    bc86:	3301      	adds	r3, #1
    bc88:	b2da      	uxtb	r2, r3
    bc8a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bc8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc92:	701a      	strb	r2, [r3, #0]
    bc94:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bc98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc9c:	781b      	ldrb	r3, [r3, #0]
    bc9e:	2bff      	cmp	r3, #255	; 0xff
    bca0:	d105      	bne.n	bcae <send_mode+0xe2>
    bca2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcaa:	2200      	movs	r2, #0
    bcac:	701a      	strb	r2, [r3, #0]
    bcae:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bcb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcb6:	781b      	ldrb	r3, [r3, #0]
    bcb8:	461a      	mov	r2, r3
    bcba:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    bcbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcc2:	210b      	movs	r1, #11
    bcc4:	5499      	strb	r1, [r3, r2]
    bcc6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bcca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcce:	781b      	ldrb	r3, [r3, #0]
    bcd0:	3301      	adds	r3, #1
    bcd2:	b2da      	uxtb	r2, r3
    bcd4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bcd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcdc:	701a      	strb	r2, [r3, #0]
    bcde:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bce6:	781b      	ldrb	r3, [r3, #0]
    bce8:	2bff      	cmp	r3, #255	; 0xff
    bcea:	d105      	bne.n	bcf8 <send_mode+0x12c>
    bcec:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bcf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcf4:	2200      	movs	r2, #0
    bcf6:	701a      	strb	r2, [r3, #0]
    bcf8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bcfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd00:	220b      	movs	r2, #11
    bd02:	701a      	strb	r2, [r3, #0]
    bd04:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    bd08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd0c:	220b      	movs	r2, #11
    bd0e:	701a      	strb	r2, [r3, #0]
    bd10:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bd14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd18:	781b      	ldrb	r3, [r3, #0]
    bd1a:	461a      	mov	r2, r3
    bd1c:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    bd20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd24:	7819      	ldrb	r1, [r3, #0]
    bd26:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    bd2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd2e:	5499      	strb	r1, [r3, r2]
    bd30:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bd34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd38:	781a      	ldrb	r2, [r3, #0]
    bd3a:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    bd3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd42:	781b      	ldrb	r3, [r3, #0]
    bd44:	4413      	add	r3, r2
    bd46:	b2da      	uxtb	r2, r3
    bd48:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bd4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd50:	701a      	strb	r2, [r3, #0]
    bd52:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    bd56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd5a:	781a      	ldrb	r2, [r3, #0]
    bd5c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bd60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd64:	781b      	ldrb	r3, [r3, #0]
    bd66:	4413      	add	r3, r2
    bd68:	b2da      	uxtb	r2, r3
    bd6a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    bd6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd72:	701a      	strb	r2, [r3, #0]
    bd74:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bd78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd7c:	781b      	ldrb	r3, [r3, #0]
    bd7e:	3301      	adds	r3, #1
    bd80:	b2da      	uxtb	r2, r3
    bd82:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bd86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd8a:	701a      	strb	r2, [r3, #0]
    bd8c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bd90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd94:	781b      	ldrb	r3, [r3, #0]
    bd96:	2bff      	cmp	r3, #255	; 0xff
    bd98:	d105      	bne.n	bda6 <send_mode+0x1da>
    bd9a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bd9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bda2:	2200      	movs	r2, #0
    bda4:	701a      	strb	r2, [r3, #0]
    bda6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bdaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdae:	781b      	ldrb	r3, [r3, #0]
    bdb0:	461a      	mov	r2, r3
    bdb2:	f64b 63dd 	movw	r3, #48861	; 0xbedd
    bdb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdba:	7819      	ldrb	r1, [r3, #0]
    bdbc:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    bdc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdc4:	5499      	strb	r1, [r3, r2]
    bdc6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bdca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdce:	781a      	ldrb	r2, [r3, #0]
    bdd0:	f64b 63dd 	movw	r3, #48861	; 0xbedd
    bdd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdd8:	781b      	ldrb	r3, [r3, #0]
    bdda:	4413      	add	r3, r2
    bddc:	b2da      	uxtb	r2, r3
    bdde:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bde2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bde6:	701a      	strb	r2, [r3, #0]
    bde8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    bdec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdf0:	781a      	ldrb	r2, [r3, #0]
    bdf2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bdf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdfa:	781b      	ldrb	r3, [r3, #0]
    bdfc:	4413      	add	r3, r2
    bdfe:	b2da      	uxtb	r2, r3
    be00:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    be04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be08:	701a      	strb	r2, [r3, #0]
    be0a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    be0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be12:	781b      	ldrb	r3, [r3, #0]
    be14:	3301      	adds	r3, #1
    be16:	b2da      	uxtb	r2, r3
    be18:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    be1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be20:	701a      	strb	r2, [r3, #0]
    be22:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    be26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be2a:	781b      	ldrb	r3, [r3, #0]
    be2c:	2bff      	cmp	r3, #255	; 0xff
    be2e:	d105      	bne.n	be3c <send_mode+0x270>
    be30:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    be34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be38:	2200      	movs	r2, #0
    be3a:	701a      	strb	r2, [r3, #0]
    be3c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    be40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be44:	781b      	ldrb	r3, [r3, #0]
    be46:	461a      	mov	r2, r3
    be48:	f24c 530c 	movw	r3, #50444	; 0xc50c
    be4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be50:	7819      	ldrb	r1, [r3, #0]
    be52:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    be56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be5a:	5499      	strb	r1, [r3, r2]
    be5c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    be60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be64:	781a      	ldrb	r2, [r3, #0]
    be66:	f24c 530c 	movw	r3, #50444	; 0xc50c
    be6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be6e:	781b      	ldrb	r3, [r3, #0]
    be70:	4413      	add	r3, r2
    be72:	b2da      	uxtb	r2, r3
    be74:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    be78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be7c:	701a      	strb	r2, [r3, #0]
    be7e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    be82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be86:	781a      	ldrb	r2, [r3, #0]
    be88:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    be8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be90:	781b      	ldrb	r3, [r3, #0]
    be92:	4413      	add	r3, r2
    be94:	b2da      	uxtb	r2, r3
    be96:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    be9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be9e:	701a      	strb	r2, [r3, #0]
    bea0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bea8:	781b      	ldrb	r3, [r3, #0]
    beaa:	3301      	adds	r3, #1
    beac:	b2da      	uxtb	r2, r3
    beae:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    beb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beb6:	701a      	strb	r2, [r3, #0]
    beb8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bec0:	781b      	ldrb	r3, [r3, #0]
    bec2:	2bff      	cmp	r3, #255	; 0xff
    bec4:	d105      	bne.n	bed2 <send_mode+0x306>
    bec6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    beca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bece:	2200      	movs	r2, #0
    bed0:	701a      	strb	r2, [r3, #0]
    bed2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beda:	781b      	ldrb	r3, [r3, #0]
    bedc:	461a      	mov	r2, r3
    bede:	f64b 63e3 	movw	r3, #48867	; 0xbee3
    bee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bee6:	7819      	ldrb	r1, [r3, #0]
    bee8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    beec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bef0:	5499      	strb	r1, [r3, r2]
    bef2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    befa:	781a      	ldrb	r2, [r3, #0]
    befc:	f64b 63e3 	movw	r3, #48867	; 0xbee3
    bf00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf04:	781b      	ldrb	r3, [r3, #0]
    bf06:	4413      	add	r3, r2
    bf08:	b2da      	uxtb	r2, r3
    bf0a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bf0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf12:	701a      	strb	r2, [r3, #0]
    bf14:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    bf18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf1c:	781a      	ldrb	r2, [r3, #0]
    bf1e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bf22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf26:	781b      	ldrb	r3, [r3, #0]
    bf28:	4413      	add	r3, r2
    bf2a:	b2da      	uxtb	r2, r3
    bf2c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    bf30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf34:	701a      	strb	r2, [r3, #0]
    bf36:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bf3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf3e:	781b      	ldrb	r3, [r3, #0]
    bf40:	3301      	adds	r3, #1
    bf42:	b2da      	uxtb	r2, r3
    bf44:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bf48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf4c:	701a      	strb	r2, [r3, #0]
    bf4e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bf52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf56:	781b      	ldrb	r3, [r3, #0]
    bf58:	2bff      	cmp	r3, #255	; 0xff
    bf5a:	d105      	bne.n	bf68 <send_mode+0x39c>
    bf5c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bf60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf64:	2200      	movs	r2, #0
    bf66:	701a      	strb	r2, [r3, #0]
    bf68:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bf6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf70:	781b      	ldrb	r3, [r3, #0]
    bf72:	461a      	mov	r2, r3
    bf74:	f240 33ec 	movw	r3, #1004	; 0x3ec
    bf78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf7c:	7819      	ldrb	r1, [r3, #0]
    bf7e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    bf82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf86:	5499      	strb	r1, [r3, r2]
    bf88:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bf8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf90:	781a      	ldrb	r2, [r3, #0]
    bf92:	f240 33ec 	movw	r3, #1004	; 0x3ec
    bf96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf9a:	781b      	ldrb	r3, [r3, #0]
    bf9c:	4413      	add	r3, r2
    bf9e:	b2da      	uxtb	r2, r3
    bfa0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bfa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfa8:	701a      	strb	r2, [r3, #0]
    bfaa:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    bfae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfb2:	781a      	ldrb	r2, [r3, #0]
    bfb4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bfb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfbc:	781b      	ldrb	r3, [r3, #0]
    bfbe:	4413      	add	r3, r2
    bfc0:	b2da      	uxtb	r2, r3
    bfc2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    bfc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfca:	701a      	strb	r2, [r3, #0]
    bfcc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bfd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfd4:	781b      	ldrb	r3, [r3, #0]
    bfd6:	3301      	adds	r3, #1
    bfd8:	b2da      	uxtb	r2, r3
    bfda:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bfde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfe2:	701a      	strb	r2, [r3, #0]
    bfe4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bfe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfec:	781b      	ldrb	r3, [r3, #0]
    bfee:	2bff      	cmp	r3, #255	; 0xff
    bff0:	d105      	bne.n	bffe <send_mode+0x432>
    bff2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bffa:	2200      	movs	r2, #0
    bffc:	701a      	strb	r2, [r3, #0]
    bffe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c006:	781b      	ldrb	r3, [r3, #0]
    c008:	461a      	mov	r2, r3
    c00a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c00e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c012:	7819      	ldrb	r1, [r3, #0]
    c014:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c01c:	5499      	strb	r1, [r3, r2]
    c01e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c026:	781b      	ldrb	r3, [r3, #0]
    c028:	3301      	adds	r3, #1
    c02a:	b2da      	uxtb	r2, r3
    c02c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c034:	701a      	strb	r2, [r3, #0]
    c036:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c03a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c03e:	781b      	ldrb	r3, [r3, #0]
    c040:	2bff      	cmp	r3, #255	; 0xff
    c042:	d105      	bne.n	c050 <send_mode+0x484>
    c044:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c04c:	2200      	movs	r2, #0
    c04e:	701a      	strb	r2, [r3, #0]
    c050:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c058:	781b      	ldrb	r3, [r3, #0]
    c05a:	461a      	mov	r2, r3
    c05c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c064:	7819      	ldrb	r1, [r3, #0]
    c066:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c06a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c06e:	5499      	strb	r1, [r3, r2]
    c070:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c078:	781b      	ldrb	r3, [r3, #0]
    c07a:	3301      	adds	r3, #1
    c07c:	b2da      	uxtb	r2, r3
    c07e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c086:	701a      	strb	r2, [r3, #0]
    c088:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c08c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c090:	781b      	ldrb	r3, [r3, #0]
    c092:	2bff      	cmp	r3, #255	; 0xff
    c094:	d105      	bne.n	c0a2 <send_mode+0x4d6>
    c096:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c09a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c09e:	2200      	movs	r2, #0
    c0a0:	701a      	strb	r2, [r3, #0]
    c0a2:	f242 0339 	movw	r3, #8249	; 0x2039
    c0a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0aa:	781b      	ldrb	r3, [r3, #0]
    c0ac:	b2db      	uxtb	r3, r3
    c0ae:	f003 0310 	and.w	r3, r3, #16
    c0b2:	2b00      	cmp	r3, #0
    c0b4:	d15a      	bne.n	c16c <send_mode+0x5a0>
    c0b6:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c0ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0be:	781b      	ldrb	r3, [r3, #0]
    c0c0:	b2db      	uxtb	r3, r3
    c0c2:	461a      	mov	r2, r3
    c0c4:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c0c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0cc:	5c9a      	ldrb	r2, [r3, r2]
    c0ce:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    c0d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0d6:	701a      	strb	r2, [r3, #0]
    c0d8:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    c0dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0e0:	2200      	movs	r2, #0
    c0e2:	701a      	strb	r2, [r3, #0]
    c0e4:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c0e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0ec:	781b      	ldrb	r3, [r3, #0]
    c0ee:	b2db      	uxtb	r3, r3
    c0f0:	3301      	adds	r3, #1
    c0f2:	b2da      	uxtb	r2, r3
    c0f4:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c0f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0fc:	701a      	strb	r2, [r3, #0]
    c0fe:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c106:	781b      	ldrb	r3, [r3, #0]
    c108:	b2db      	uxtb	r3, r3
    c10a:	2bff      	cmp	r3, #255	; 0xff
    c10c:	d105      	bne.n	c11a <send_mode+0x54e>
    c10e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c116:	2200      	movs	r2, #0
    c118:	701a      	strb	r2, [r3, #0]
    c11a:	f242 0338 	movw	r3, #8248	; 0x2038
    c11e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c122:	f242 0238 	movw	r2, #8248	; 0x2038
    c126:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c12a:	7812      	ldrb	r2, [r2, #0]
    c12c:	b2d2      	uxtb	r2, r2
    c12e:	f042 0201 	orr.w	r2, r2, #1
    c132:	b2d2      	uxtb	r2, r2
    c134:	701a      	strb	r2, [r3, #0]
    c136:	f242 0339 	movw	r3, #8249	; 0x2039
    c13a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c13e:	f242 0239 	movw	r2, #8249	; 0x2039
    c142:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c146:	7812      	ldrb	r2, [r2, #0]
    c148:	b2d2      	uxtb	r2, r2
    c14a:	f042 0210 	orr.w	r2, r2, #16
    c14e:	b2d2      	uxtb	r2, r2
    c150:	701a      	strb	r2, [r3, #0]
    c152:	e00b      	b.n	c16c <send_mode+0x5a0>
    c154:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    c158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c15c:	781b      	ldrb	r3, [r3, #0]
    c15e:	3301      	adds	r3, #1
    c160:	b2da      	uxtb	r2, r3
    c162:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    c166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c16a:	701a      	strb	r2, [r3, #0]
}
    c16c:	46bd      	mov	sp, r7
    c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c172:	4770      	bx	lr

0000c174 <send_debug>:
void send_debug(void){  //5000ms
    c174:	b480      	push	{r7}
    c176:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    c178:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    c17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c180:	781a      	ldrb	r2, [r3, #0]
    c182:	f248 531f 	movw	r3, #34079	; 0x851f
    c186:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c18a:	fba3 1302 	umull	r1, r3, r3, r2
    c18e:	091b      	lsrs	r3, r3, #4
    c190:	2132      	movs	r1, #50	; 0x32
    c192:	fb01 f303 	mul.w	r3, r1, r3
    c196:	1ad3      	subs	r3, r2, r3
    c198:	b2db      	uxtb	r3, r3
    c19a:	2b1d      	cmp	r3, #29
    c19c:	f040 82bb 	bne.w	c716 <send_debug+0x5a2>
    c1a0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c1a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1a8:	781a      	ldrb	r2, [r3, #0]
    c1aa:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c1ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1b2:	781b      	ldrb	r3, [r3, #0]
    c1b4:	b2db      	uxtb	r3, r3
    c1b6:	429a      	cmp	r2, r3
    c1b8:	d313      	bcc.n	c1e2 <send_debug+0x6e>
    c1ba:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c1be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1c2:	781b      	ldrb	r3, [r3, #0]
    c1c4:	b2db      	uxtb	r3, r3
    c1c6:	461a      	mov	r2, r3
    c1c8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c1cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1d0:	781b      	ldrb	r3, [r3, #0]
    c1d2:	1ad3      	subs	r3, r2, r3
    c1d4:	33ff      	adds	r3, #255	; 0xff
    c1d6:	2b09      	cmp	r3, #9
    c1d8:	bfd4      	ite	le
    c1da:	2300      	movle	r3, #0
    c1dc:	2301      	movgt	r3, #1
    c1de:	b2db      	uxtb	r3, r3
    c1e0:	e011      	b.n	c206 <send_debug+0x92>
    c1e2:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c1e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1ea:	781b      	ldrb	r3, [r3, #0]
    c1ec:	b2db      	uxtb	r3, r3
    c1ee:	461a      	mov	r2, r3
    c1f0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c1f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1f8:	781b      	ldrb	r3, [r3, #0]
    c1fa:	1ad3      	subs	r3, r2, r3
    c1fc:	2b09      	cmp	r3, #9
    c1fe:	bfd4      	ite	le
    c200:	2300      	movle	r3, #0
    c202:	2301      	movgt	r3, #1
    c204:	b2db      	uxtb	r3, r3
    c206:	2b00      	cmp	r3, #0
    c208:	f000 8279 	beq.w	c6fe <send_debug+0x58a>
    c20c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c214:	781b      	ldrb	r3, [r3, #0]
    c216:	461a      	mov	r2, r3
    c218:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c21c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c220:	2105      	movs	r1, #5
    c222:	5499      	strb	r1, [r3, r2]
    c224:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c22c:	781b      	ldrb	r3, [r3, #0]
    c22e:	3301      	adds	r3, #1
    c230:	b2da      	uxtb	r2, r3
    c232:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c23a:	701a      	strb	r2, [r3, #0]
    c23c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c244:	781b      	ldrb	r3, [r3, #0]
    c246:	2bff      	cmp	r3, #255	; 0xff
    c248:	d105      	bne.n	c256 <send_debug+0xe2>
    c24a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c24e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c252:	2200      	movs	r2, #0
    c254:	701a      	strb	r2, [r3, #0]
    c256:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c25a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c25e:	781b      	ldrb	r3, [r3, #0]
    c260:	461a      	mov	r2, r3
    c262:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c26a:	210d      	movs	r1, #13
    c26c:	5499      	strb	r1, [r3, r2]
    c26e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c276:	781b      	ldrb	r3, [r3, #0]
    c278:	3301      	adds	r3, #1
    c27a:	b2da      	uxtb	r2, r3
    c27c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c284:	701a      	strb	r2, [r3, #0]
    c286:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c28a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c28e:	781b      	ldrb	r3, [r3, #0]
    c290:	2bff      	cmp	r3, #255	; 0xff
    c292:	d105      	bne.n	c2a0 <send_debug+0x12c>
    c294:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c29c:	2200      	movs	r2, #0
    c29e:	701a      	strb	r2, [r3, #0]
    c2a0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c2a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2a8:	220d      	movs	r2, #13
    c2aa:	701a      	strb	r2, [r3, #0]
    c2ac:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c2b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2b4:	220d      	movs	r2, #13
    c2b6:	701a      	strb	r2, [r3, #0]
    c2b8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c2bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2c0:	781b      	ldrb	r3, [r3, #0]
    c2c2:	461a      	mov	r2, r3
    c2c4:	f24c 032f 	movw	r3, #49199	; 0xc02f
    c2c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2cc:	781b      	ldrb	r3, [r3, #0]
    c2ce:	b2d9      	uxtb	r1, r3
    c2d0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c2d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2d8:	5499      	strb	r1, [r3, r2]
    c2da:	f24c 032f 	movw	r3, #49199	; 0xc02f
    c2de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2e2:	781a      	ldrb	r2, [r3, #0]
    c2e4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ec:	781b      	ldrb	r3, [r3, #0]
    c2ee:	4413      	add	r3, r2
    c2f0:	b2da      	uxtb	r2, r3
    c2f2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c2f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2fa:	701a      	strb	r2, [r3, #0]
    c2fc:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c304:	781a      	ldrb	r2, [r3, #0]
    c306:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c30a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c30e:	781b      	ldrb	r3, [r3, #0]
    c310:	4413      	add	r3, r2
    c312:	b2da      	uxtb	r2, r3
    c314:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c31c:	701a      	strb	r2, [r3, #0]
    c31e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c326:	781b      	ldrb	r3, [r3, #0]
    c328:	3301      	adds	r3, #1
    c32a:	b2da      	uxtb	r2, r3
    c32c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c334:	701a      	strb	r2, [r3, #0]
    c336:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c33a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c33e:	781b      	ldrb	r3, [r3, #0]
    c340:	2bff      	cmp	r3, #255	; 0xff
    c342:	d105      	bne.n	c350 <send_debug+0x1dc>
    c344:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c34c:	2200      	movs	r2, #0
    c34e:	701a      	strb	r2, [r3, #0]
    c350:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c358:	781b      	ldrb	r3, [r3, #0]
    c35a:	461a      	mov	r2, r3
    c35c:	f24c 0330 	movw	r3, #49200	; 0xc030
    c360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c364:	7819      	ldrb	r1, [r3, #0]
    c366:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c36a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c36e:	5499      	strb	r1, [r3, r2]
    c370:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c378:	781a      	ldrb	r2, [r3, #0]
    c37a:	f24c 0330 	movw	r3, #49200	; 0xc030
    c37e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c382:	781b      	ldrb	r3, [r3, #0]
    c384:	4413      	add	r3, r2
    c386:	b2da      	uxtb	r2, r3
    c388:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c38c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c390:	701a      	strb	r2, [r3, #0]
    c392:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c39a:	781a      	ldrb	r2, [r3, #0]
    c39c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c3a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3a4:	781b      	ldrb	r3, [r3, #0]
    c3a6:	4413      	add	r3, r2
    c3a8:	b2da      	uxtb	r2, r3
    c3aa:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3b2:	701a      	strb	r2, [r3, #0]
    c3b4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3bc:	781b      	ldrb	r3, [r3, #0]
    c3be:	3301      	adds	r3, #1
    c3c0:	b2da      	uxtb	r2, r3
    c3c2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c3c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3ca:	701a      	strb	r2, [r3, #0]
    c3cc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c3d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3d4:	781b      	ldrb	r3, [r3, #0]
    c3d6:	2bff      	cmp	r3, #255	; 0xff
    c3d8:	d105      	bne.n	c3e6 <send_debug+0x272>
    c3da:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c3de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3e2:	2200      	movs	r2, #0
    c3e4:	701a      	strb	r2, [r3, #0]
    c3e6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c3ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3ee:	781b      	ldrb	r3, [r3, #0]
    c3f0:	461a      	mov	r2, r3
    c3f2:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    c3f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3fa:	7819      	ldrb	r1, [r3, #0]
    c3fc:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c404:	5499      	strb	r1, [r3, r2]
    c406:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c40a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c40e:	781a      	ldrb	r2, [r3, #0]
    c410:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    c414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c418:	781b      	ldrb	r3, [r3, #0]
    c41a:	4413      	add	r3, r2
    c41c:	b2da      	uxtb	r2, r3
    c41e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c426:	701a      	strb	r2, [r3, #0]
    c428:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c42c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c430:	781a      	ldrb	r2, [r3, #0]
    c432:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c436:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c43a:	781b      	ldrb	r3, [r3, #0]
    c43c:	4413      	add	r3, r2
    c43e:	b2da      	uxtb	r2, r3
    c440:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c448:	701a      	strb	r2, [r3, #0]
    c44a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c44e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c452:	781b      	ldrb	r3, [r3, #0]
    c454:	3301      	adds	r3, #1
    c456:	b2da      	uxtb	r2, r3
    c458:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c45c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c460:	701a      	strb	r2, [r3, #0]
    c462:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c46a:	781b      	ldrb	r3, [r3, #0]
    c46c:	2bff      	cmp	r3, #255	; 0xff
    c46e:	d105      	bne.n	c47c <send_debug+0x308>
    c470:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c478:	2200      	movs	r2, #0
    c47a:	701a      	strb	r2, [r3, #0]
    c47c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c484:	781b      	ldrb	r3, [r3, #0]
    c486:	461a      	mov	r2, r3
    c488:	f24c 1397 	movw	r3, #49559	; 0xc197
    c48c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c490:	7819      	ldrb	r1, [r3, #0]
    c492:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c49a:	5499      	strb	r1, [r3, r2]
    c49c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c4a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4a4:	781a      	ldrb	r2, [r3, #0]
    c4a6:	f24c 1397 	movw	r3, #49559	; 0xc197
    c4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ae:	781b      	ldrb	r3, [r3, #0]
    c4b0:	4413      	add	r3, r2
    c4b2:	b2da      	uxtb	r2, r3
    c4b4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4bc:	701a      	strb	r2, [r3, #0]
    c4be:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c4c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4c6:	781a      	ldrb	r2, [r3, #0]
    c4c8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c4cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4d0:	781b      	ldrb	r3, [r3, #0]
    c4d2:	4413      	add	r3, r2
    c4d4:	b2da      	uxtb	r2, r3
    c4d6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4de:	701a      	strb	r2, [r3, #0]
    c4e0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c4e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4e8:	781b      	ldrb	r3, [r3, #0]
    c4ea:	3301      	adds	r3, #1
    c4ec:	b2da      	uxtb	r2, r3
    c4ee:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c4f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4f6:	701a      	strb	r2, [r3, #0]
    c4f8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c4fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c500:	781b      	ldrb	r3, [r3, #0]
    c502:	2bff      	cmp	r3, #255	; 0xff
    c504:	d105      	bne.n	c512 <send_debug+0x39e>
    c506:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c50a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c50e:	2200      	movs	r2, #0
    c510:	701a      	strb	r2, [r3, #0]
    c512:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c51a:	781b      	ldrb	r3, [r3, #0]
    c51c:	461a      	mov	r2, r3
    c51e:	f64b 63e4 	movw	r3, #48868	; 0xbee4
    c522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c526:	7819      	ldrb	r1, [r3, #0]
    c528:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c52c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c530:	5499      	strb	r1, [r3, r2]
    c532:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c53a:	781a      	ldrb	r2, [r3, #0]
    c53c:	f64b 63e4 	movw	r3, #48868	; 0xbee4
    c540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c544:	781b      	ldrb	r3, [r3, #0]
    c546:	4413      	add	r3, r2
    c548:	b2da      	uxtb	r2, r3
    c54a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c54e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c552:	701a      	strb	r2, [r3, #0]
    c554:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c55c:	781a      	ldrb	r2, [r3, #0]
    c55e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c566:	781b      	ldrb	r3, [r3, #0]
    c568:	4413      	add	r3, r2
    c56a:	b2da      	uxtb	r2, r3
    c56c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c574:	701a      	strb	r2, [r3, #0]
    c576:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c57a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c57e:	781b      	ldrb	r3, [r3, #0]
    c580:	3301      	adds	r3, #1
    c582:	b2da      	uxtb	r2, r3
    c584:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c58c:	701a      	strb	r2, [r3, #0]
    c58e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c596:	781b      	ldrb	r3, [r3, #0]
    c598:	2bff      	cmp	r3, #255	; 0xff
    c59a:	d105      	bne.n	c5a8 <send_debug+0x434>
    c59c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c5a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5a4:	2200      	movs	r2, #0
    c5a6:	701a      	strb	r2, [r3, #0]
    c5a8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c5ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5b0:	781b      	ldrb	r3, [r3, #0]
    c5b2:	461a      	mov	r2, r3
    c5b4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c5b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5bc:	7819      	ldrb	r1, [r3, #0]
    c5be:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c5c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5c6:	5499      	strb	r1, [r3, r2]
    c5c8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c5cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5d0:	781b      	ldrb	r3, [r3, #0]
    c5d2:	3301      	adds	r3, #1
    c5d4:	b2da      	uxtb	r2, r3
    c5d6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c5da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5de:	701a      	strb	r2, [r3, #0]
    c5e0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c5e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5e8:	781b      	ldrb	r3, [r3, #0]
    c5ea:	2bff      	cmp	r3, #255	; 0xff
    c5ec:	d105      	bne.n	c5fa <send_debug+0x486>
    c5ee:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c5f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5f6:	2200      	movs	r2, #0
    c5f8:	701a      	strb	r2, [r3, #0]
    c5fa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c5fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c602:	781b      	ldrb	r3, [r3, #0]
    c604:	461a      	mov	r2, r3
    c606:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c60a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c60e:	7819      	ldrb	r1, [r3, #0]
    c610:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c618:	5499      	strb	r1, [r3, r2]
    c61a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c61e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c622:	781b      	ldrb	r3, [r3, #0]
    c624:	3301      	adds	r3, #1
    c626:	b2da      	uxtb	r2, r3
    c628:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c630:	701a      	strb	r2, [r3, #0]
    c632:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c63a:	781b      	ldrb	r3, [r3, #0]
    c63c:	2bff      	cmp	r3, #255	; 0xff
    c63e:	d105      	bne.n	c64c <send_debug+0x4d8>
    c640:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c648:	2200      	movs	r2, #0
    c64a:	701a      	strb	r2, [r3, #0]
    c64c:	f242 0339 	movw	r3, #8249	; 0x2039
    c650:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c654:	781b      	ldrb	r3, [r3, #0]
    c656:	b2db      	uxtb	r3, r3
    c658:	f003 0310 	and.w	r3, r3, #16
    c65c:	2b00      	cmp	r3, #0
    c65e:	d15a      	bne.n	c716 <send_debug+0x5a2>
    c660:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c668:	781b      	ldrb	r3, [r3, #0]
    c66a:	b2db      	uxtb	r3, r3
    c66c:	461a      	mov	r2, r3
    c66e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c676:	5c9a      	ldrb	r2, [r3, r2]
    c678:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    c67c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c680:	701a      	strb	r2, [r3, #0]
    c682:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    c686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c68a:	2200      	movs	r2, #0
    c68c:	701a      	strb	r2, [r3, #0]
    c68e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c696:	781b      	ldrb	r3, [r3, #0]
    c698:	b2db      	uxtb	r3, r3
    c69a:	3301      	adds	r3, #1
    c69c:	b2da      	uxtb	r2, r3
    c69e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6a6:	701a      	strb	r2, [r3, #0]
    c6a8:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c6ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6b0:	781b      	ldrb	r3, [r3, #0]
    c6b2:	b2db      	uxtb	r3, r3
    c6b4:	2bff      	cmp	r3, #255	; 0xff
    c6b6:	d105      	bne.n	c6c4 <send_debug+0x550>
    c6b8:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c6bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6c0:	2200      	movs	r2, #0
    c6c2:	701a      	strb	r2, [r3, #0]
    c6c4:	f242 0338 	movw	r3, #8248	; 0x2038
    c6c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6cc:	f242 0238 	movw	r2, #8248	; 0x2038
    c6d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c6d4:	7812      	ldrb	r2, [r2, #0]
    c6d6:	b2d2      	uxtb	r2, r2
    c6d8:	f042 0201 	orr.w	r2, r2, #1
    c6dc:	b2d2      	uxtb	r2, r2
    c6de:	701a      	strb	r2, [r3, #0]
    c6e0:	f242 0339 	movw	r3, #8249	; 0x2039
    c6e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6e8:	f242 0239 	movw	r2, #8249	; 0x2039
    c6ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c6f0:	7812      	ldrb	r2, [r2, #0]
    c6f2:	b2d2      	uxtb	r2, r2
    c6f4:	f042 0210 	orr.w	r2, r2, #16
    c6f8:	b2d2      	uxtb	r2, r2
    c6fa:	701a      	strb	r2, [r3, #0]
    c6fc:	e00b      	b.n	c716 <send_debug+0x5a2>
    c6fe:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    c702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c706:	781b      	ldrb	r3, [r3, #0]
    c708:	3301      	adds	r3, #1
    c70a:	b2da      	uxtb	r2, r3
    c70c:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    c710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c714:	701a      	strb	r2, [r3, #0]
}
    c716:	46bd      	mov	sp, r7
    c718:	f85d 7b04 	ldr.w	r7, [sp], #4
    c71c:	4770      	bx	lr
    c71e:	bf00      	nop

0000c720 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c720:	b480      	push	{r7}
    c722:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c724:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    c728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c72c:	781a      	ldrb	r2, [r3, #0]
    c72e:	f248 531f 	movw	r3, #34079	; 0x851f
    c732:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c736:	fba3 1302 	umull	r1, r3, r3, r2
    c73a:	095b      	lsrs	r3, r3, #5
    c73c:	2164      	movs	r1, #100	; 0x64
    c73e:	fb01 f303 	mul.w	r3, r1, r3
    c742:	1ad3      	subs	r3, r2, r3
    c744:	b2db      	uxtb	r3, r3
    c746:	2b31      	cmp	r3, #49	; 0x31
    c748:	f040 8395 	bne.w	ce76 <send_nav_ref+0x756>
    c74c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c754:	781a      	ldrb	r2, [r3, #0]
    c756:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c75a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c75e:	781b      	ldrb	r3, [r3, #0]
    c760:	b2db      	uxtb	r3, r3
    c762:	429a      	cmp	r2, r3
    c764:	d313      	bcc.n	c78e <send_nav_ref+0x6e>
    c766:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c76a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c76e:	781b      	ldrb	r3, [r3, #0]
    c770:	b2db      	uxtb	r3, r3
    c772:	461a      	mov	r2, r3
    c774:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c77c:	781b      	ldrb	r3, [r3, #0]
    c77e:	1ad3      	subs	r3, r2, r3
    c780:	33ff      	adds	r3, #255	; 0xff
    c782:	2b0c      	cmp	r3, #12
    c784:	bfd4      	ite	le
    c786:	2300      	movle	r3, #0
    c788:	2301      	movgt	r3, #1
    c78a:	b2db      	uxtb	r3, r3
    c78c:	e011      	b.n	c7b2 <send_nav_ref+0x92>
    c78e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c796:	781b      	ldrb	r3, [r3, #0]
    c798:	b2db      	uxtb	r3, r3
    c79a:	461a      	mov	r2, r3
    c79c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c7a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7a4:	781b      	ldrb	r3, [r3, #0]
    c7a6:	1ad3      	subs	r3, r2, r3
    c7a8:	2b0c      	cmp	r3, #12
    c7aa:	bfd4      	ite	le
    c7ac:	2300      	movle	r3, #0
    c7ae:	2301      	movgt	r3, #1
    c7b0:	b2db      	uxtb	r3, r3
    c7b2:	2b00      	cmp	r3, #0
    c7b4:	f000 8353 	beq.w	ce5e <send_nav_ref+0x73e>
    c7b8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c7bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7c0:	781b      	ldrb	r3, [r3, #0]
    c7c2:	461a      	mov	r2, r3
    c7c4:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c7c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7cc:	2105      	movs	r1, #5
    c7ce:	5499      	strb	r1, [r3, r2]
    c7d0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c7d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7d8:	781b      	ldrb	r3, [r3, #0]
    c7da:	3301      	adds	r3, #1
    c7dc:	b2da      	uxtb	r2, r3
    c7de:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c7e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7e6:	701a      	strb	r2, [r3, #0]
    c7e8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7f0:	781b      	ldrb	r3, [r3, #0]
    c7f2:	2bff      	cmp	r3, #255	; 0xff
    c7f4:	d105      	bne.n	c802 <send_nav_ref+0xe2>
    c7f6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c7fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7fe:	2200      	movs	r2, #0
    c800:	701a      	strb	r2, [r3, #0]
    c802:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c80a:	781b      	ldrb	r3, [r3, #0]
    c80c:	461a      	mov	r2, r3
    c80e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c816:	2109      	movs	r1, #9
    c818:	5499      	strb	r1, [r3, r2]
    c81a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c81e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c822:	781b      	ldrb	r3, [r3, #0]
    c824:	3301      	adds	r3, #1
    c826:	b2da      	uxtb	r2, r3
    c828:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c82c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c830:	701a      	strb	r2, [r3, #0]
    c832:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c83a:	781b      	ldrb	r3, [r3, #0]
    c83c:	2bff      	cmp	r3, #255	; 0xff
    c83e:	d105      	bne.n	c84c <send_nav_ref+0x12c>
    c840:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c848:	2200      	movs	r2, #0
    c84a:	701a      	strb	r2, [r3, #0]
    c84c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c854:	2209      	movs	r2, #9
    c856:	701a      	strb	r2, [r3, #0]
    c858:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c860:	2209      	movs	r2, #9
    c862:	701a      	strb	r2, [r3, #0]
    c864:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c86c:	781b      	ldrb	r3, [r3, #0]
    c86e:	461a      	mov	r2, r3
    c870:	f648 1340 	movw	r3, #35136	; 0x8940
    c874:	f2c0 0301 	movt	r3, #1
    c878:	7819      	ldrb	r1, [r3, #0]
    c87a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c87e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c882:	5499      	strb	r1, [r3, r2]
    c884:	f648 1340 	movw	r3, #35136	; 0x8940
    c888:	f2c0 0301 	movt	r3, #1
    c88c:	781a      	ldrb	r2, [r3, #0]
    c88e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c896:	781b      	ldrb	r3, [r3, #0]
    c898:	4413      	add	r3, r2
    c89a:	b2da      	uxtb	r2, r3
    c89c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c8a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8a4:	701a      	strb	r2, [r3, #0]
    c8a6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c8aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8ae:	781a      	ldrb	r2, [r3, #0]
    c8b0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c8b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8b8:	781b      	ldrb	r3, [r3, #0]
    c8ba:	4413      	add	r3, r2
    c8bc:	b2da      	uxtb	r2, r3
    c8be:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8c6:	701a      	strb	r2, [r3, #0]
    c8c8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8d0:	781b      	ldrb	r3, [r3, #0]
    c8d2:	3301      	adds	r3, #1
    c8d4:	b2da      	uxtb	r2, r3
    c8d6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8de:	701a      	strb	r2, [r3, #0]
    c8e0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8e8:	781b      	ldrb	r3, [r3, #0]
    c8ea:	2bff      	cmp	r3, #255	; 0xff
    c8ec:	d105      	bne.n	c8fa <send_nav_ref+0x1da>
    c8ee:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c8f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8f6:	2200      	movs	r2, #0
    c8f8:	701a      	strb	r2, [r3, #0]
    c8fa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c8fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c902:	781b      	ldrb	r3, [r3, #0]
    c904:	461a      	mov	r2, r3
    c906:	f648 1340 	movw	r3, #35136	; 0x8940
    c90a:	f2c0 0301 	movt	r3, #1
    c90e:	7859      	ldrb	r1, [r3, #1]
    c910:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c918:	5499      	strb	r1, [r3, r2]
    c91a:	4bd2      	ldr	r3, [pc, #840]	; (cc64 <send_nav_ref+0x544>)
    c91c:	781a      	ldrb	r2, [r3, #0]
    c91e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c926:	781b      	ldrb	r3, [r3, #0]
    c928:	4413      	add	r3, r2
    c92a:	b2da      	uxtb	r2, r3
    c92c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c934:	701a      	strb	r2, [r3, #0]
    c936:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c93a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c93e:	781a      	ldrb	r2, [r3, #0]
    c940:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c948:	781b      	ldrb	r3, [r3, #0]
    c94a:	4413      	add	r3, r2
    c94c:	b2da      	uxtb	r2, r3
    c94e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c956:	701a      	strb	r2, [r3, #0]
    c958:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c95c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c960:	781b      	ldrb	r3, [r3, #0]
    c962:	3301      	adds	r3, #1
    c964:	b2da      	uxtb	r2, r3
    c966:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c96e:	701a      	strb	r2, [r3, #0]
    c970:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c978:	781b      	ldrb	r3, [r3, #0]
    c97a:	2bff      	cmp	r3, #255	; 0xff
    c97c:	d105      	bne.n	c98a <send_nav_ref+0x26a>
    c97e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c986:	2200      	movs	r2, #0
    c988:	701a      	strb	r2, [r3, #0]
    c98a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c98e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c992:	781b      	ldrb	r3, [r3, #0]
    c994:	461a      	mov	r2, r3
    c996:	f648 1340 	movw	r3, #35136	; 0x8940
    c99a:	f2c0 0301 	movt	r3, #1
    c99e:	7899      	ldrb	r1, [r3, #2]
    c9a0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c9a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9a8:	5499      	strb	r1, [r3, r2]
    c9aa:	4baf      	ldr	r3, [pc, #700]	; (cc68 <send_nav_ref+0x548>)
    c9ac:	781a      	ldrb	r2, [r3, #0]
    c9ae:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c9b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9b6:	781b      	ldrb	r3, [r3, #0]
    c9b8:	4413      	add	r3, r2
    c9ba:	b2da      	uxtb	r2, r3
    c9bc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c9c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9c4:	701a      	strb	r2, [r3, #0]
    c9c6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c9ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ce:	781a      	ldrb	r2, [r3, #0]
    c9d0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c9d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9d8:	781b      	ldrb	r3, [r3, #0]
    c9da:	4413      	add	r3, r2
    c9dc:	b2da      	uxtb	r2, r3
    c9de:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c9e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9e6:	701a      	strb	r2, [r3, #0]
    c9e8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c9ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9f0:	781b      	ldrb	r3, [r3, #0]
    c9f2:	3301      	adds	r3, #1
    c9f4:	b2da      	uxtb	r2, r3
    c9f6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9fe:	701a      	strb	r2, [r3, #0]
    ca00:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ca04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca08:	781b      	ldrb	r3, [r3, #0]
    ca0a:	2bff      	cmp	r3, #255	; 0xff
    ca0c:	d105      	bne.n	ca1a <send_nav_ref+0x2fa>
    ca0e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ca12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca16:	2200      	movs	r2, #0
    ca18:	701a      	strb	r2, [r3, #0]
    ca1a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ca1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca22:	781b      	ldrb	r3, [r3, #0]
    ca24:	461a      	mov	r2, r3
    ca26:	f648 1340 	movw	r3, #35136	; 0x8940
    ca2a:	f2c0 0301 	movt	r3, #1
    ca2e:	78d9      	ldrb	r1, [r3, #3]
    ca30:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ca34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca38:	5499      	strb	r1, [r3, r2]
    ca3a:	4b8c      	ldr	r3, [pc, #560]	; (cc6c <send_nav_ref+0x54c>)
    ca3c:	781a      	ldrb	r2, [r3, #0]
    ca3e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ca42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca46:	781b      	ldrb	r3, [r3, #0]
    ca48:	4413      	add	r3, r2
    ca4a:	b2da      	uxtb	r2, r3
    ca4c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ca50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca54:	701a      	strb	r2, [r3, #0]
    ca56:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ca5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca5e:	781a      	ldrb	r2, [r3, #0]
    ca60:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ca64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca68:	781b      	ldrb	r3, [r3, #0]
    ca6a:	4413      	add	r3, r2
    ca6c:	b2da      	uxtb	r2, r3
    ca6e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ca72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca76:	701a      	strb	r2, [r3, #0]
    ca78:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ca7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca80:	781b      	ldrb	r3, [r3, #0]
    ca82:	3301      	adds	r3, #1
    ca84:	b2da      	uxtb	r2, r3
    ca86:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ca8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca8e:	701a      	strb	r2, [r3, #0]
    ca90:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ca94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca98:	781b      	ldrb	r3, [r3, #0]
    ca9a:	2bff      	cmp	r3, #255	; 0xff
    ca9c:	d105      	bne.n	caaa <send_nav_ref+0x38a>
    ca9e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    caa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caa6:	2200      	movs	r2, #0
    caa8:	701a      	strb	r2, [r3, #0]
    caaa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    caae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cab2:	781b      	ldrb	r3, [r3, #0]
    cab4:	461a      	mov	r2, r3
    cab6:	f648 1344 	movw	r3, #35140	; 0x8944
    caba:	f2c0 0301 	movt	r3, #1
    cabe:	7819      	ldrb	r1, [r3, #0]
    cac0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    cac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cac8:	5499      	strb	r1, [r3, r2]
    caca:	f648 1344 	movw	r3, #35140	; 0x8944
    cace:	f2c0 0301 	movt	r3, #1
    cad2:	781a      	ldrb	r2, [r3, #0]
    cad4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    cad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cadc:	781b      	ldrb	r3, [r3, #0]
    cade:	4413      	add	r3, r2
    cae0:	b2da      	uxtb	r2, r3
    cae2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    cae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caea:	701a      	strb	r2, [r3, #0]
    caec:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    caf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caf4:	781a      	ldrb	r2, [r3, #0]
    caf6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    cafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cafe:	781b      	ldrb	r3, [r3, #0]
    cb00:	4413      	add	r3, r2
    cb02:	b2da      	uxtb	r2, r3
    cb04:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    cb08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb0c:	701a      	strb	r2, [r3, #0]
    cb0e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cb12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb16:	781b      	ldrb	r3, [r3, #0]
    cb18:	3301      	adds	r3, #1
    cb1a:	b2da      	uxtb	r2, r3
    cb1c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cb20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb24:	701a      	strb	r2, [r3, #0]
    cb26:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cb2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb2e:	781b      	ldrb	r3, [r3, #0]
    cb30:	2bff      	cmp	r3, #255	; 0xff
    cb32:	d105      	bne.n	cb40 <send_nav_ref+0x420>
    cb34:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cb38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb3c:	2200      	movs	r2, #0
    cb3e:	701a      	strb	r2, [r3, #0]
    cb40:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cb44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb48:	781b      	ldrb	r3, [r3, #0]
    cb4a:	461a      	mov	r2, r3
    cb4c:	f648 1344 	movw	r3, #35140	; 0x8944
    cb50:	f2c0 0301 	movt	r3, #1
    cb54:	7859      	ldrb	r1, [r3, #1]
    cb56:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    cb5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb5e:	5499      	strb	r1, [r3, r2]
    cb60:	4b43      	ldr	r3, [pc, #268]	; (cc70 <send_nav_ref+0x550>)
    cb62:	781a      	ldrb	r2, [r3, #0]
    cb64:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    cb68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb6c:	781b      	ldrb	r3, [r3, #0]
    cb6e:	4413      	add	r3, r2
    cb70:	b2da      	uxtb	r2, r3
    cb72:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    cb76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb7a:	701a      	strb	r2, [r3, #0]
    cb7c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    cb80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb84:	781a      	ldrb	r2, [r3, #0]
    cb86:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    cb8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb8e:	781b      	ldrb	r3, [r3, #0]
    cb90:	4413      	add	r3, r2
    cb92:	b2da      	uxtb	r2, r3
    cb94:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    cb98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb9c:	701a      	strb	r2, [r3, #0]
    cb9e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cba6:	781b      	ldrb	r3, [r3, #0]
    cba8:	3301      	adds	r3, #1
    cbaa:	b2da      	uxtb	r2, r3
    cbac:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cbb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbb4:	701a      	strb	r2, [r3, #0]
    cbb6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cbba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbbe:	781b      	ldrb	r3, [r3, #0]
    cbc0:	2bff      	cmp	r3, #255	; 0xff
    cbc2:	d105      	bne.n	cbd0 <send_nav_ref+0x4b0>
    cbc4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cbc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbcc:	2200      	movs	r2, #0
    cbce:	701a      	strb	r2, [r3, #0]
    cbd0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cbd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbd8:	781b      	ldrb	r3, [r3, #0]
    cbda:	461a      	mov	r2, r3
    cbdc:	f648 1344 	movw	r3, #35140	; 0x8944
    cbe0:	f2c0 0301 	movt	r3, #1
    cbe4:	7899      	ldrb	r1, [r3, #2]
    cbe6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    cbea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbee:	5499      	strb	r1, [r3, r2]
    cbf0:	4b20      	ldr	r3, [pc, #128]	; (cc74 <send_nav_ref+0x554>)
    cbf2:	781a      	ldrb	r2, [r3, #0]
    cbf4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    cbf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbfc:	781b      	ldrb	r3, [r3, #0]
    cbfe:	4413      	add	r3, r2
    cc00:	b2da      	uxtb	r2, r3
    cc02:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    cc06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc0a:	701a      	strb	r2, [r3, #0]
    cc0c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    cc10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc14:	781a      	ldrb	r2, [r3, #0]
    cc16:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    cc1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc1e:	781b      	ldrb	r3, [r3, #0]
    cc20:	4413      	add	r3, r2
    cc22:	b2da      	uxtb	r2, r3
    cc24:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    cc28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc2c:	701a      	strb	r2, [r3, #0]
    cc2e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cc32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc36:	781b      	ldrb	r3, [r3, #0]
    cc38:	3301      	adds	r3, #1
    cc3a:	b2da      	uxtb	r2, r3
    cc3c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cc40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc44:	701a      	strb	r2, [r3, #0]
    cc46:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cc4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc4e:	781b      	ldrb	r3, [r3, #0]
    cc50:	2bff      	cmp	r3, #255	; 0xff
    cc52:	d111      	bne.n	cc78 <send_nav_ref+0x558>
    cc54:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cc58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc5c:	2200      	movs	r2, #0
    cc5e:	701a      	strb	r2, [r3, #0]
    cc60:	e00a      	b.n	cc78 <send_nav_ref+0x558>
    cc62:	bf00      	nop
    cc64:	00018941 	.word	0x00018941
    cc68:	00018942 	.word	0x00018942
    cc6c:	00018943 	.word	0x00018943
    cc70:	00018945 	.word	0x00018945
    cc74:	00018946 	.word	0x00018946
    cc78:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cc7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc80:	781b      	ldrb	r3, [r3, #0]
    cc82:	461a      	mov	r2, r3
    cc84:	f648 1344 	movw	r3, #35140	; 0x8944
    cc88:	f2c0 0301 	movt	r3, #1
    cc8c:	78d9      	ldrb	r1, [r3, #3]
    cc8e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    cc92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc96:	5499      	strb	r1, [r3, r2]
    cc98:	4b79      	ldr	r3, [pc, #484]	; (ce80 <send_nav_ref+0x760>)
    cc9a:	781a      	ldrb	r2, [r3, #0]
    cc9c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    cca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cca4:	781b      	ldrb	r3, [r3, #0]
    cca6:	4413      	add	r3, r2
    cca8:	b2da      	uxtb	r2, r3
    ccaa:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ccae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccb2:	701a      	strb	r2, [r3, #0]
    ccb4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ccb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccbc:	781a      	ldrb	r2, [r3, #0]
    ccbe:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ccc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccc6:	781b      	ldrb	r3, [r3, #0]
    ccc8:	4413      	add	r3, r2
    ccca:	b2da      	uxtb	r2, r3
    cccc:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ccd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccd4:	701a      	strb	r2, [r3, #0]
    ccd6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ccda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccde:	781b      	ldrb	r3, [r3, #0]
    cce0:	3301      	adds	r3, #1
    cce2:	b2da      	uxtb	r2, r3
    cce4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccec:	701a      	strb	r2, [r3, #0]
    ccee:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ccf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccf6:	781b      	ldrb	r3, [r3, #0]
    ccf8:	2bff      	cmp	r3, #255	; 0xff
    ccfa:	d105      	bne.n	cd08 <send_nav_ref+0x5e8>
    ccfc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cd00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd04:	2200      	movs	r2, #0
    cd06:	701a      	strb	r2, [r3, #0]
    cd08:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cd0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd10:	781b      	ldrb	r3, [r3, #0]
    cd12:	461a      	mov	r2, r3
    cd14:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    cd18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd1c:	7819      	ldrb	r1, [r3, #0]
    cd1e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    cd22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd26:	5499      	strb	r1, [r3, r2]
    cd28:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cd2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd30:	781b      	ldrb	r3, [r3, #0]
    cd32:	3301      	adds	r3, #1
    cd34:	b2da      	uxtb	r2, r3
    cd36:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cd3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd3e:	701a      	strb	r2, [r3, #0]
    cd40:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cd44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd48:	781b      	ldrb	r3, [r3, #0]
    cd4a:	2bff      	cmp	r3, #255	; 0xff
    cd4c:	d105      	bne.n	cd5a <send_nav_ref+0x63a>
    cd4e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cd52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd56:	2200      	movs	r2, #0
    cd58:	701a      	strb	r2, [r3, #0]
    cd5a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cd5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd62:	781b      	ldrb	r3, [r3, #0]
    cd64:	461a      	mov	r2, r3
    cd66:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    cd6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd6e:	7819      	ldrb	r1, [r3, #0]
    cd70:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    cd74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd78:	5499      	strb	r1, [r3, r2]
    cd7a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cd7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd82:	781b      	ldrb	r3, [r3, #0]
    cd84:	3301      	adds	r3, #1
    cd86:	b2da      	uxtb	r2, r3
    cd88:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cd8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd90:	701a      	strb	r2, [r3, #0]
    cd92:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cd96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd9a:	781b      	ldrb	r3, [r3, #0]
    cd9c:	2bff      	cmp	r3, #255	; 0xff
    cd9e:	d105      	bne.n	cdac <send_nav_ref+0x68c>
    cda0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cda4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cda8:	2200      	movs	r2, #0
    cdaa:	701a      	strb	r2, [r3, #0]
    cdac:	f242 0339 	movw	r3, #8249	; 0x2039
    cdb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdb4:	781b      	ldrb	r3, [r3, #0]
    cdb6:	b2db      	uxtb	r3, r3
    cdb8:	f003 0310 	and.w	r3, r3, #16
    cdbc:	2b00      	cmp	r3, #0
    cdbe:	d15a      	bne.n	ce76 <send_nav_ref+0x756>
    cdc0:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    cdc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdc8:	781b      	ldrb	r3, [r3, #0]
    cdca:	b2db      	uxtb	r3, r3
    cdcc:	461a      	mov	r2, r3
    cdce:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    cdd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdd6:	5c9a      	ldrb	r2, [r3, r2]
    cdd8:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    cddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cde0:	701a      	strb	r2, [r3, #0]
    cde2:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    cde6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdea:	2200      	movs	r2, #0
    cdec:	701a      	strb	r2, [r3, #0]
    cdee:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    cdf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdf6:	781b      	ldrb	r3, [r3, #0]
    cdf8:	b2db      	uxtb	r3, r3
    cdfa:	3301      	adds	r3, #1
    cdfc:	b2da      	uxtb	r2, r3
    cdfe:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    ce02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce06:	701a      	strb	r2, [r3, #0]
    ce08:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    ce0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce10:	781b      	ldrb	r3, [r3, #0]
    ce12:	b2db      	uxtb	r3, r3
    ce14:	2bff      	cmp	r3, #255	; 0xff
    ce16:	d105      	bne.n	ce24 <send_nav_ref+0x704>
    ce18:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    ce1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce20:	2200      	movs	r2, #0
    ce22:	701a      	strb	r2, [r3, #0]
    ce24:	f242 0338 	movw	r3, #8248	; 0x2038
    ce28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce2c:	f242 0238 	movw	r2, #8248	; 0x2038
    ce30:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ce34:	7812      	ldrb	r2, [r2, #0]
    ce36:	b2d2      	uxtb	r2, r2
    ce38:	f042 0201 	orr.w	r2, r2, #1
    ce3c:	b2d2      	uxtb	r2, r2
    ce3e:	701a      	strb	r2, [r3, #0]
    ce40:	f242 0339 	movw	r3, #8249	; 0x2039
    ce44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce48:	f242 0239 	movw	r2, #8249	; 0x2039
    ce4c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ce50:	7812      	ldrb	r2, [r2, #0]
    ce52:	b2d2      	uxtb	r2, r2
    ce54:	f042 0210 	orr.w	r2, r2, #16
    ce58:	b2d2      	uxtb	r2, r2
    ce5a:	701a      	strb	r2, [r3, #0]
    ce5c:	e00b      	b.n	ce76 <send_nav_ref+0x756>
    ce5e:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    ce62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce66:	781b      	ldrb	r3, [r3, #0]
    ce68:	3301      	adds	r3, #1
    ce6a:	b2da      	uxtb	r2, r3
    ce6c:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    ce70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce74:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    ce76:	46bd      	mov	sp, r7
    ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce7c:	4770      	bx	lr
    ce7e:	bf00      	nop
    ce80:	00018947 	.word	0x00018947

0000ce84 <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    ce84:	b480      	push	{r7}
    ce86:	b083      	sub	sp, #12
    ce88:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    ce8a:	f24c 0300 	movw	r3, #49152	; 0xc000
    ce8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce92:	8a1b      	ldrh	r3, [r3, #16]
    ce94:	b21b      	sxth	r3, r3
    ce96:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    ce9a:	db0d      	blt.n	ceb8 <inflight_calib_mode_update+0x34>
    ce9c:	f24c 0300 	movw	r3, #49152	; 0xc000
    cea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cea4:	8a1b      	ldrh	r3, [r3, #16]
    cea6:	b21a      	sxth	r2, r3
    cea8:	f640 437f 	movw	r3, #3199	; 0xc7f
    ceac:	429a      	cmp	r2, r3
    ceae:	bfd4      	ite	le
    ceb0:	2300      	movle	r3, #0
    ceb2:	2301      	movgt	r3, #1
    ceb4:	b2db      	uxtb	r3, r3
    ceb6:	e000      	b.n	ceba <inflight_calib_mode_update+0x36>
    ceb8:	2302      	movs	r3, #2
    ceba:	71fb      	strb	r3, [r7, #7]
    cebc:	f24c 530c 	movw	r3, #50444	; 0xc50c
    cec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cec4:	781b      	ldrb	r3, [r3, #0]
    cec6:	79fa      	ldrb	r2, [r7, #7]
    cec8:	429a      	cmp	r2, r3
    ceca:	d007      	beq.n	cedc <inflight_calib_mode_update+0x58>
    cecc:	f24c 530c 	movw	r3, #50444	; 0xc50c
    ced0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ced4:	79fa      	ldrb	r2, [r7, #7]
    ced6:	701a      	strb	r2, [r3, #0]
    ced8:	2301      	movs	r3, #1
    ceda:	e000      	b.n	cede <inflight_calib_mode_update+0x5a>
    cedc:	2300      	movs	r3, #0
}
    cede:	4618      	mov	r0, r3
    cee0:	370c      	adds	r7, #12
    cee2:	46bd      	mov	sp, r7
    cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
    cee8:	4770      	bx	lr
    ceea:	bf00      	nop

0000ceec <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    ceec:	b580      	push	{r7, lr}
    ceee:	b082      	sub	sp, #8
    cef0:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    cef2:	f24c 032e 	movw	r3, #49198	; 0xc02e
    cef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cefa:	2201      	movs	r2, #1
    cefc:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    cefe:	f24c 032e 	movw	r3, #49198	; 0xc02e
    cf02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf06:	781b      	ldrb	r3, [r3, #0]
    cf08:	b2db      	uxtb	r3, r3
    cf0a:	2b00      	cmp	r3, #0
    cf0c:	f000 83b8 	beq.w	d680 <radio_control_task+0x794>
    uint8_t mode_changed = FALSE;
    cf10:	2300      	movs	r3, #0
    cf12:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    cf14:	f7fa fa9c 	bl	7450 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    cf18:	4b3a      	ldr	r3, [pc, #232]	; (d004 <radio_control_task+0x118>)
    cf1a:	781b      	ldrb	r3, [r3, #0]
    cf1c:	b2db      	uxtb	r3, r3
    cf1e:	f003 0302 	and.w	r3, r3, #2
    cf22:	2b00      	cmp	r3, #0
    cf24:	d00d      	beq.n	cf42 <radio_control_task+0x56>
    cf26:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    cf2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf2e:	781b      	ldrb	r3, [r3, #0]
    cf30:	2b01      	cmp	r3, #1
    cf32:	d00d      	beq.n	cf50 <radio_control_task+0x64>
    cf34:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    cf38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf3c:	781b      	ldrb	r3, [r3, #0]
    cf3e:	2b00      	cmp	r3, #0
    cf40:	d006      	beq.n	cf50 <radio_control_task+0x64>
    cf42:	f24c 238c 	movw	r3, #49804	; 0xc28c
    cf46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf4a:	781b      	ldrb	r3, [r3, #0]
    cf4c:	2b00      	cmp	r3, #0
    cf4e:	d007      	beq.n	cf60 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    cf50:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    cf54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf58:	2203      	movs	r2, #3
    cf5a:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    cf5c:	2301      	movs	r3, #1
    cf5e:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    //if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    cf60:	f7fa f950 	bl	7204 <pprz_mode_update>
    cf64:	4603      	mov	r3, r0
    cf66:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    cf68:	79fa      	ldrb	r2, [r7, #7]
    cf6a:	79bb      	ldrb	r3, [r7, #6]
    cf6c:	4313      	orrs	r3, r2
    cf6e:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    cf70:	f7fa f994 	bl	729c <ir_estim_mode_update>
    cf74:	4603      	mov	r3, r0
    cf76:	461a      	mov	r2, r3
    cf78:	79fb      	ldrb	r3, [r7, #7]
    cf7a:	4313      	orrs	r3, r2
    cf7c:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    cf7e:	f7ff ff81 	bl	ce84 <inflight_calib_mode_update>
    cf82:	4603      	mov	r3, r0
    cf84:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    cf86:	797b      	ldrb	r3, [r7, #5]
    cf88:	2b00      	cmp	r3, #0
    cf8a:	d102      	bne.n	cf92 <radio_control_task+0xa6>
    cf8c:	79bb      	ldrb	r3, [r7, #6]
    cf8e:	2b00      	cmp	r3, #0
    cf90:	d001      	beq.n	cf96 <radio_control_task+0xaa>
    cf92:	2301      	movs	r3, #1
    cf94:	e000      	b.n	cf98 <radio_control_task+0xac>
    cf96:	2300      	movs	r3, #0
    cf98:	b2db      	uxtb	r3, r3
    cf9a:	4618      	mov	r0, r3
    cf9c:	f008 fba0 	bl	156e0 <inflight_calib>
      mode_changed |= calib_mode_changed;
    cfa0:	79fa      	ldrb	r2, [r7, #7]
    cfa2:	797b      	ldrb	r3, [r7, #5]
    cfa4:	4313      	orrs	r3, r2
    cfa6:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    cfa8:	f7fa f9a0 	bl	72ec <mcu1_status_update>
    cfac:	4603      	mov	r3, r0
    cfae:	461a      	mov	r2, r3
    cfb0:	79fb      	ldrb	r3, [r7, #7]
    cfb2:	4313      	orrs	r3, r2
    cfb4:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    cfb6:	2301      	movs	r3, #1
    cfb8:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    cfba:	79fb      	ldrb	r3, [r7, #7]
    cfbc:	2b00      	cmp	r3, #0
    cfbe:	f000 82bc 	beq.w	d53a <radio_control_task+0x64e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    cfc2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cfc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfca:	781a      	ldrb	r2, [r3, #0]
    cfcc:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    cfd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfd4:	781b      	ldrb	r3, [r3, #0]
    cfd6:	b2db      	uxtb	r3, r3
    cfd8:	429a      	cmp	r2, r3
    cfda:	d315      	bcc.n	d008 <radio_control_task+0x11c>
    cfdc:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    cfe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfe4:	781b      	ldrb	r3, [r3, #0]
    cfe6:	b2db      	uxtb	r3, r3
    cfe8:	461a      	mov	r2, r3
    cfea:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cfee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cff2:	781b      	ldrb	r3, [r3, #0]
    cff4:	1ad3      	subs	r3, r2, r3
    cff6:	33ff      	adds	r3, #255	; 0xff
    cff8:	2b09      	cmp	r3, #9
    cffa:	bfd4      	ite	le
    cffc:	2300      	movle	r3, #0
    cffe:	2301      	movgt	r3, #1
    d000:	b2db      	uxtb	r3, r3
    d002:	e013      	b.n	d02c <radio_control_task+0x140>
    d004:	2004c013 	.word	0x2004c013
    d008:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    d00c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d010:	781b      	ldrb	r3, [r3, #0]
    d012:	b2db      	uxtb	r3, r3
    d014:	461a      	mov	r2, r3
    d016:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d01a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d01e:	781b      	ldrb	r3, [r3, #0]
    d020:	1ad3      	subs	r3, r2, r3
    d022:	2b09      	cmp	r3, #9
    d024:	bfd4      	ite	le
    d026:	2300      	movle	r3, #0
    d028:	2301      	movgt	r3, #1
    d02a:	b2db      	uxtb	r3, r3
    d02c:	2b00      	cmp	r3, #0
    d02e:	f000 8278 	beq.w	d522 <radio_control_task+0x636>
    d032:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d03a:	781b      	ldrb	r3, [r3, #0]
    d03c:	461a      	mov	r2, r3
    d03e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d046:	2105      	movs	r1, #5
    d048:	5499      	strb	r1, [r3, r2]
    d04a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d04e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d052:	781b      	ldrb	r3, [r3, #0]
    d054:	3301      	adds	r3, #1
    d056:	b2da      	uxtb	r2, r3
    d058:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d05c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d060:	701a      	strb	r2, [r3, #0]
    d062:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d06a:	781b      	ldrb	r3, [r3, #0]
    d06c:	2bff      	cmp	r3, #255	; 0xff
    d06e:	d105      	bne.n	d07c <radio_control_task+0x190>
    d070:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d078:	2200      	movs	r2, #0
    d07a:	701a      	strb	r2, [r3, #0]
    d07c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d084:	781b      	ldrb	r3, [r3, #0]
    d086:	461a      	mov	r2, r3
    d088:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d08c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d090:	210b      	movs	r1, #11
    d092:	5499      	strb	r1, [r3, r2]
    d094:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d09c:	781b      	ldrb	r3, [r3, #0]
    d09e:	3301      	adds	r3, #1
    d0a0:	b2da      	uxtb	r2, r3
    d0a2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d0a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0aa:	701a      	strb	r2, [r3, #0]
    d0ac:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d0b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0b4:	781b      	ldrb	r3, [r3, #0]
    d0b6:	2bff      	cmp	r3, #255	; 0xff
    d0b8:	d105      	bne.n	d0c6 <radio_control_task+0x1da>
    d0ba:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d0be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0c2:	2200      	movs	r2, #0
    d0c4:	701a      	strb	r2, [r3, #0]
    d0c6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d0ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0ce:	220b      	movs	r2, #11
    d0d0:	701a      	strb	r2, [r3, #0]
    d0d2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0da:	220b      	movs	r2, #11
    d0dc:	701a      	strb	r2, [r3, #0]
    d0de:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d0e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0e6:	781b      	ldrb	r3, [r3, #0]
    d0e8:	461a      	mov	r2, r3
    d0ea:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    d0ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0f2:	7819      	ldrb	r1, [r3, #0]
    d0f4:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d0f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0fc:	5499      	strb	r1, [r3, r2]
    d0fe:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d106:	781a      	ldrb	r2, [r3, #0]
    d108:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    d10c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d110:	781b      	ldrb	r3, [r3, #0]
    d112:	4413      	add	r3, r2
    d114:	b2da      	uxtb	r2, r3
    d116:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d11a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d11e:	701a      	strb	r2, [r3, #0]
    d120:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d124:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d128:	781a      	ldrb	r2, [r3, #0]
    d12a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d12e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d132:	781b      	ldrb	r3, [r3, #0]
    d134:	4413      	add	r3, r2
    d136:	b2da      	uxtb	r2, r3
    d138:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d13c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d140:	701a      	strb	r2, [r3, #0]
    d142:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d14a:	781b      	ldrb	r3, [r3, #0]
    d14c:	3301      	adds	r3, #1
    d14e:	b2da      	uxtb	r2, r3
    d150:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d158:	701a      	strb	r2, [r3, #0]
    d15a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d15e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d162:	781b      	ldrb	r3, [r3, #0]
    d164:	2bff      	cmp	r3, #255	; 0xff
    d166:	d105      	bne.n	d174 <radio_control_task+0x288>
    d168:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d16c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d170:	2200      	movs	r2, #0
    d172:	701a      	strb	r2, [r3, #0]
    d174:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d17c:	781b      	ldrb	r3, [r3, #0]
    d17e:	461a      	mov	r2, r3
    d180:	f64b 63dd 	movw	r3, #48861	; 0xbedd
    d184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d188:	7819      	ldrb	r1, [r3, #0]
    d18a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d18e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d192:	5499      	strb	r1, [r3, r2]
    d194:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d19c:	781a      	ldrb	r2, [r3, #0]
    d19e:	f64b 63dd 	movw	r3, #48861	; 0xbedd
    d1a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1a6:	781b      	ldrb	r3, [r3, #0]
    d1a8:	4413      	add	r3, r2
    d1aa:	b2da      	uxtb	r2, r3
    d1ac:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d1b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1b4:	701a      	strb	r2, [r3, #0]
    d1b6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d1ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1be:	781a      	ldrb	r2, [r3, #0]
    d1c0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d1c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1c8:	781b      	ldrb	r3, [r3, #0]
    d1ca:	4413      	add	r3, r2
    d1cc:	b2da      	uxtb	r2, r3
    d1ce:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d1d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1d6:	701a      	strb	r2, [r3, #0]
    d1d8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d1dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1e0:	781b      	ldrb	r3, [r3, #0]
    d1e2:	3301      	adds	r3, #1
    d1e4:	b2da      	uxtb	r2, r3
    d1e6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d1ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1ee:	701a      	strb	r2, [r3, #0]
    d1f0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d1f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1f8:	781b      	ldrb	r3, [r3, #0]
    d1fa:	2bff      	cmp	r3, #255	; 0xff
    d1fc:	d105      	bne.n	d20a <radio_control_task+0x31e>
    d1fe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d206:	2200      	movs	r2, #0
    d208:	701a      	strb	r2, [r3, #0]
    d20a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d20e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d212:	781b      	ldrb	r3, [r3, #0]
    d214:	461a      	mov	r2, r3
    d216:	f24c 530c 	movw	r3, #50444	; 0xc50c
    d21a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d21e:	7819      	ldrb	r1, [r3, #0]
    d220:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d224:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d228:	5499      	strb	r1, [r3, r2]
    d22a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d22e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d232:	781a      	ldrb	r2, [r3, #0]
    d234:	f24c 530c 	movw	r3, #50444	; 0xc50c
    d238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d23c:	781b      	ldrb	r3, [r3, #0]
    d23e:	4413      	add	r3, r2
    d240:	b2da      	uxtb	r2, r3
    d242:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d246:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d24a:	701a      	strb	r2, [r3, #0]
    d24c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d254:	781a      	ldrb	r2, [r3, #0]
    d256:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d25a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d25e:	781b      	ldrb	r3, [r3, #0]
    d260:	4413      	add	r3, r2
    d262:	b2da      	uxtb	r2, r3
    d264:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d26c:	701a      	strb	r2, [r3, #0]
    d26e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d276:	781b      	ldrb	r3, [r3, #0]
    d278:	3301      	adds	r3, #1
    d27a:	b2da      	uxtb	r2, r3
    d27c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d284:	701a      	strb	r2, [r3, #0]
    d286:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d28a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d28e:	781b      	ldrb	r3, [r3, #0]
    d290:	2bff      	cmp	r3, #255	; 0xff
    d292:	d105      	bne.n	d2a0 <radio_control_task+0x3b4>
    d294:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d29c:	2200      	movs	r2, #0
    d29e:	701a      	strb	r2, [r3, #0]
    d2a0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d2a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2a8:	781b      	ldrb	r3, [r3, #0]
    d2aa:	461a      	mov	r2, r3
    d2ac:	f64b 63e3 	movw	r3, #48867	; 0xbee3
    d2b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2b4:	7819      	ldrb	r1, [r3, #0]
    d2b6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d2ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2be:	5499      	strb	r1, [r3, r2]
    d2c0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d2c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2c8:	781a      	ldrb	r2, [r3, #0]
    d2ca:	f64b 63e3 	movw	r3, #48867	; 0xbee3
    d2ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2d2:	781b      	ldrb	r3, [r3, #0]
    d2d4:	4413      	add	r3, r2
    d2d6:	b2da      	uxtb	r2, r3
    d2d8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d2dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2e0:	701a      	strb	r2, [r3, #0]
    d2e2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d2e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ea:	781a      	ldrb	r2, [r3, #0]
    d2ec:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d2f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2f4:	781b      	ldrb	r3, [r3, #0]
    d2f6:	4413      	add	r3, r2
    d2f8:	b2da      	uxtb	r2, r3
    d2fa:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d2fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d302:	701a      	strb	r2, [r3, #0]
    d304:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d30c:	781b      	ldrb	r3, [r3, #0]
    d30e:	3301      	adds	r3, #1
    d310:	b2da      	uxtb	r2, r3
    d312:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d31a:	701a      	strb	r2, [r3, #0]
    d31c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d320:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d324:	781b      	ldrb	r3, [r3, #0]
    d326:	2bff      	cmp	r3, #255	; 0xff
    d328:	d105      	bne.n	d336 <radio_control_task+0x44a>
    d32a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d32e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d332:	2200      	movs	r2, #0
    d334:	701a      	strb	r2, [r3, #0]
    d336:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d33a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d33e:	781b      	ldrb	r3, [r3, #0]
    d340:	461a      	mov	r2, r3
    d342:	f240 33ec 	movw	r3, #1004	; 0x3ec
    d346:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d34a:	7819      	ldrb	r1, [r3, #0]
    d34c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d354:	5499      	strb	r1, [r3, r2]
    d356:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d35e:	781a      	ldrb	r2, [r3, #0]
    d360:	f240 33ec 	movw	r3, #1004	; 0x3ec
    d364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d368:	781b      	ldrb	r3, [r3, #0]
    d36a:	4413      	add	r3, r2
    d36c:	b2da      	uxtb	r2, r3
    d36e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d376:	701a      	strb	r2, [r3, #0]
    d378:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d37c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d380:	781a      	ldrb	r2, [r3, #0]
    d382:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d38a:	781b      	ldrb	r3, [r3, #0]
    d38c:	4413      	add	r3, r2
    d38e:	b2da      	uxtb	r2, r3
    d390:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d398:	701a      	strb	r2, [r3, #0]
    d39a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d39e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3a2:	781b      	ldrb	r3, [r3, #0]
    d3a4:	3301      	adds	r3, #1
    d3a6:	b2da      	uxtb	r2, r3
    d3a8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d3ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3b0:	701a      	strb	r2, [r3, #0]
    d3b2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d3b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3ba:	781b      	ldrb	r3, [r3, #0]
    d3bc:	2bff      	cmp	r3, #255	; 0xff
    d3be:	d105      	bne.n	d3cc <radio_control_task+0x4e0>
    d3c0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d3c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3c8:	2200      	movs	r2, #0
    d3ca:	701a      	strb	r2, [r3, #0]
    d3cc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d3d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3d4:	781b      	ldrb	r3, [r3, #0]
    d3d6:	461a      	mov	r2, r3
    d3d8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d3dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3e0:	7819      	ldrb	r1, [r3, #0]
    d3e2:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d3e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3ea:	5499      	strb	r1, [r3, r2]
    d3ec:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d3f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3f4:	781b      	ldrb	r3, [r3, #0]
    d3f6:	3301      	adds	r3, #1
    d3f8:	b2da      	uxtb	r2, r3
    d3fa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d3fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d402:	701a      	strb	r2, [r3, #0]
    d404:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d40c:	781b      	ldrb	r3, [r3, #0]
    d40e:	2bff      	cmp	r3, #255	; 0xff
    d410:	d105      	bne.n	d41e <radio_control_task+0x532>
    d412:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d41a:	2200      	movs	r2, #0
    d41c:	701a      	strb	r2, [r3, #0]
    d41e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d426:	781b      	ldrb	r3, [r3, #0]
    d428:	461a      	mov	r2, r3
    d42a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d42e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d432:	7819      	ldrb	r1, [r3, #0]
    d434:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d43c:	5499      	strb	r1, [r3, r2]
    d43e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d446:	781b      	ldrb	r3, [r3, #0]
    d448:	3301      	adds	r3, #1
    d44a:	b2da      	uxtb	r2, r3
    d44c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d454:	701a      	strb	r2, [r3, #0]
    d456:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d45a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d45e:	781b      	ldrb	r3, [r3, #0]
    d460:	2bff      	cmp	r3, #255	; 0xff
    d462:	d105      	bne.n	d470 <radio_control_task+0x584>
    d464:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d46c:	2200      	movs	r2, #0
    d46e:	701a      	strb	r2, [r3, #0]
    d470:	f242 0339 	movw	r3, #8249	; 0x2039
    d474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d478:	781b      	ldrb	r3, [r3, #0]
    d47a:	b2db      	uxtb	r3, r3
    d47c:	f003 0310 	and.w	r3, r3, #16
    d480:	2b00      	cmp	r3, #0
    d482:	d15a      	bne.n	d53a <radio_control_task+0x64e>
    d484:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    d488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d48c:	781b      	ldrb	r3, [r3, #0]
    d48e:	b2db      	uxtb	r3, r3
    d490:	461a      	mov	r2, r3
    d492:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d49a:	5c9a      	ldrb	r2, [r3, r2]
    d49c:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    d4a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4a4:	701a      	strb	r2, [r3, #0]
    d4a6:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    d4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ae:	2200      	movs	r2, #0
    d4b0:	701a      	strb	r2, [r3, #0]
    d4b2:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    d4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ba:	781b      	ldrb	r3, [r3, #0]
    d4bc:	b2db      	uxtb	r3, r3
    d4be:	3301      	adds	r3, #1
    d4c0:	b2da      	uxtb	r2, r3
    d4c2:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    d4c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ca:	701a      	strb	r2, [r3, #0]
    d4cc:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    d4d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4d4:	781b      	ldrb	r3, [r3, #0]
    d4d6:	b2db      	uxtb	r3, r3
    d4d8:	2bff      	cmp	r3, #255	; 0xff
    d4da:	d105      	bne.n	d4e8 <radio_control_task+0x5fc>
    d4dc:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    d4e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4e4:	2200      	movs	r2, #0
    d4e6:	701a      	strb	r2, [r3, #0]
    d4e8:	f242 0338 	movw	r3, #8248	; 0x2038
    d4ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4f0:	f242 0238 	movw	r2, #8248	; 0x2038
    d4f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d4f8:	7812      	ldrb	r2, [r2, #0]
    d4fa:	b2d2      	uxtb	r2, r2
    d4fc:	f042 0201 	orr.w	r2, r2, #1
    d500:	b2d2      	uxtb	r2, r2
    d502:	701a      	strb	r2, [r3, #0]
    d504:	f242 0339 	movw	r3, #8249	; 0x2039
    d508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d50c:	f242 0239 	movw	r2, #8249	; 0x2039
    d510:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d514:	7812      	ldrb	r2, [r2, #0]
    d516:	b2d2      	uxtb	r2, r2
    d518:	f042 0210 	orr.w	r2, r2, #16
    d51c:	b2d2      	uxtb	r2, r2
    d51e:	701a      	strb	r2, [r3, #0]
    d520:	e00b      	b.n	d53a <radio_control_task+0x64e>
    d522:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    d526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d52a:	781b      	ldrb	r3, [r3, #0]
    d52c:	3301      	adds	r3, #1
    d52e:	b2da      	uxtb	r2, r3
    d530:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    d534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d538:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d53a:	f24c 0300 	movw	r3, #49152	; 0xc000
    d53e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d542:	885b      	ldrh	r3, [r3, #2]
    d544:	b21b      	sxth	r3, r3
    d546:	4618      	mov	r0, r3
    d548:	f00a fe60 	bl	1820c <__aeabi_i2f>
    d54c:	4603      	mov	r3, r0
    d54e:	4618      	mov	r0, r3
    d550:	f04f 0100 	mov.w	r1, #0
    d554:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d558:	f00a ff60 	bl	1841c <__aeabi_fdiv>
    d55c:	4603      	mov	r3, r0
    d55e:	4618      	mov	r0, r3
    d560:	f00a fa14 	bl	1798c <__aeabi_f2d>
    d564:	4602      	mov	r2, r0
    d566:	460b      	mov	r3, r1
    d568:	4610      	mov	r0, r2
    d56a:	4619      	mov	r1, r3
    d56c:	a346      	add	r3, pc, #280	; (adr r3, d688 <radio_control_task+0x79c>)
    d56e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d572:	f00a fa5f 	bl	17a34 <__aeabi_dmul>
    d576:	4602      	mov	r2, r0
    d578:	460b      	mov	r3, r1
    d57a:	4610      	mov	r0, r2
    d57c:	4619      	mov	r1, r3
    d57e:	f04f 0200 	mov.w	r2, #0
    d582:	f04f 0300 	mov.w	r3, #0
    d586:	f00a f8a3 	bl	176d0 <__adddf3>
    d58a:	4602      	mov	r2, r0
    d58c:	460b      	mov	r3, r1
    d58e:	4610      	mov	r0, r2
    d590:	4619      	mov	r1, r3
    d592:	f00a fd31 	bl	17ff8 <__aeabi_d2f>
    d596:	4602      	mov	r2, r0
    d598:	f24c 2324 	movw	r3, #49700	; 0xc224
    d59c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5a0:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d5a2:	f24c 0300 	movw	r3, #49152	; 0xc000
    d5a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5aa:	889b      	ldrh	r3, [r3, #4]
    d5ac:	b21b      	sxth	r3, r3
    d5ae:	4618      	mov	r0, r3
    d5b0:	f00a fe2c 	bl	1820c <__aeabi_i2f>
    d5b4:	4603      	mov	r3, r0
    d5b6:	4618      	mov	r0, r3
    d5b8:	f04f 0100 	mov.w	r1, #0
    d5bc:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d5c0:	f00a ff2c 	bl	1841c <__aeabi_fdiv>
    d5c4:	4603      	mov	r3, r0
    d5c6:	4618      	mov	r0, r3
    d5c8:	f00a f9e0 	bl	1798c <__aeabi_f2d>
    d5cc:	4602      	mov	r2, r0
    d5ce:	460b      	mov	r3, r1
    d5d0:	4610      	mov	r0, r2
    d5d2:	4619      	mov	r1, r3
    d5d4:	f04f 0200 	mov.w	r2, #0
    d5d8:	f04f 0300 	mov.w	r3, #0
    d5dc:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d5e0:	f00a fa28 	bl	17a34 <__aeabi_dmul>
    d5e4:	4602      	mov	r2, r0
    d5e6:	460b      	mov	r3, r1
    d5e8:	4610      	mov	r0, r2
    d5ea:	4619      	mov	r1, r3
    d5ec:	f04f 0200 	mov.w	r2, #0
    d5f0:	f04f 0300 	mov.w	r3, #0
    d5f4:	f00a f86c 	bl	176d0 <__adddf3>
    d5f8:	4602      	mov	r2, r0
    d5fa:	460b      	mov	r3, r1
    d5fc:	4610      	mov	r0, r2
    d5fe:	4619      	mov	r1, r3
    d600:	f00a fcfa 	bl	17ff8 <__aeabi_d2f>
    d604:	4602      	mov	r2, r0
    d606:	f24c 2328 	movw	r3, #49704	; 0xc228
    d60a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d60e:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d610:	f24c 0300 	movw	r3, #49152	; 0xc000
    d614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d618:	881a      	ldrh	r2, [r3, #0]
    d61a:	f24c 232c 	movw	r3, #49708	; 0xc22c
    d61e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d622:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d624:	f24c 0300 	movw	r3, #49152	; 0xc000
    d628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d62c:	7c9a      	ldrb	r2, [r3, #18]
    d62e:	f64b 63e4 	movw	r3, #48868	; 0xbee4
    d632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d636:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d638:	f24c 0300 	movw	r3, #49152	; 0xc000
    d63c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d640:	7d5a      	ldrb	r2, [r3, #21]
    d642:	f64b 63e2 	movw	r3, #48866	; 0xbee2
    d646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d64a:	701a      	strb	r2, [r3, #0]

    events_update();
    d64c:	f7f9 fe7e 	bl	734c <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d650:	f7f8 fc7e 	bl	5f50 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d654:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    d658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d65c:	781b      	ldrb	r3, [r3, #0]
    d65e:	2b02      	cmp	r3, #2
    d660:	d10e      	bne.n	d680 <radio_control_task+0x794>
    d662:	f24c 0300 	movw	r3, #49152	; 0xc000
    d666:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d66a:	881b      	ldrh	r3, [r3, #0]
    d66c:	b21b      	sxth	r3, r3
    d66e:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d672:	dd05      	ble.n	d680 <radio_control_task+0x794>
	launch = TRUE;
    d674:	f64b 63f0 	movw	r3, #48880	; 0xbef0
    d678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d67c:	2201      	movs	r2, #1
    d67e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d680:	3708      	adds	r7, #8
    d682:	46bd      	mov	sp, r7
    d684:	bd80      	pop	{r7, pc}
    d686:	bf00      	nop
    d688:	33333333 	.word	0x33333333
    d68c:	bfe33333 	.word	0xbfe33333

0000d690 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d690:	b580      	push	{r7, lr}
    d692:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d694:	f64b 63de 	movw	r3, #48862	; 0xbede
    d698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d69c:	2203      	movs	r2, #3
    d69e:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d6a0:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    d6a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6a8:	781b      	ldrb	r3, [r3, #0]
    d6aa:	2b03      	cmp	r3, #3
    d6ac:	d102      	bne.n	d6b4 <navigation_update+0x24>
    nav_home();
    d6ae:	f007 fa9b 	bl	14be8 <nav_home>
    d6b2:	e001      	b.n	d6b8 <navigation_update+0x28>
  else
    nav_update();
    d6b4:	f007 fabe 	bl	14c34 <nav_update>
}
    d6b8:	bd80      	pop	{r7, pc}
    d6ba:	bf00      	nop

0000d6bc <send_nav_values>:

void send_nav_values(void){
    d6bc:	b480      	push	{r7}
    d6be:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d6c0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d6c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6c8:	781a      	ldrb	r2, [r3, #0]
    d6ca:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    d6ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6d2:	781b      	ldrb	r3, [r3, #0]
    d6d4:	b2db      	uxtb	r3, r3
    d6d6:	429a      	cmp	r2, r3
    d6d8:	d313      	bcc.n	d702 <send_nav_values+0x46>
    d6da:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    d6de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6e2:	781b      	ldrb	r3, [r3, #0]
    d6e4:	b2db      	uxtb	r3, r3
    d6e6:	461a      	mov	r2, r3
    d6e8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6f0:	781b      	ldrb	r3, [r3, #0]
    d6f2:	1ad3      	subs	r3, r2, r3
    d6f4:	33ff      	adds	r3, #255	; 0xff
    d6f6:	2b1e      	cmp	r3, #30
    d6f8:	bfd4      	ite	le
    d6fa:	2300      	movle	r3, #0
    d6fc:	2301      	movgt	r3, #1
    d6fe:	b2db      	uxtb	r3, r3
    d700:	e011      	b.n	d726 <send_nav_values+0x6a>
    d702:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    d706:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d70a:	781b      	ldrb	r3, [r3, #0]
    d70c:	b2db      	uxtb	r3, r3
    d70e:	461a      	mov	r2, r3
    d710:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d718:	781b      	ldrb	r3, [r3, #0]
    d71a:	1ad3      	subs	r3, r2, r3
    d71c:	2b1e      	cmp	r3, #30
    d71e:	bfd4      	ite	le
    d720:	2300      	movle	r3, #0
    d722:	2301      	movgt	r3, #1
    d724:	b2db      	uxtb	r3, r3
    d726:	2b00      	cmp	r3, #0
    d728:	f001 8094 	beq.w	e854 <send_nav_values+0x1198>
    d72c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d734:	781b      	ldrb	r3, [r3, #0]
    d736:	461a      	mov	r2, r3
    d738:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d73c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d740:	2105      	movs	r1, #5
    d742:	5499      	strb	r1, [r3, r2]
    d744:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d74c:	781b      	ldrb	r3, [r3, #0]
    d74e:	3301      	adds	r3, #1
    d750:	b2da      	uxtb	r2, r3
    d752:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d756:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d75a:	701a      	strb	r2, [r3, #0]
    d75c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d764:	781b      	ldrb	r3, [r3, #0]
    d766:	2bff      	cmp	r3, #255	; 0xff
    d768:	d105      	bne.n	d776 <send_nav_values+0xba>
    d76a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d76e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d772:	2200      	movs	r2, #0
    d774:	701a      	strb	r2, [r3, #0]
    d776:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d77a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d77e:	781b      	ldrb	r3, [r3, #0]
    d780:	461a      	mov	r2, r3
    d782:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d78a:	210a      	movs	r1, #10
    d78c:	5499      	strb	r1, [r3, r2]
    d78e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d796:	781b      	ldrb	r3, [r3, #0]
    d798:	3301      	adds	r3, #1
    d79a:	b2da      	uxtb	r2, r3
    d79c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d7a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7a4:	701a      	strb	r2, [r3, #0]
    d7a6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d7aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7ae:	781b      	ldrb	r3, [r3, #0]
    d7b0:	2bff      	cmp	r3, #255	; 0xff
    d7b2:	d105      	bne.n	d7c0 <send_nav_values+0x104>
    d7b4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d7b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7bc:	2200      	movs	r2, #0
    d7be:	701a      	strb	r2, [r3, #0]
    d7c0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d7c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7c8:	220a      	movs	r2, #10
    d7ca:	701a      	strb	r2, [r3, #0]
    d7cc:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d7d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7d4:	220a      	movs	r2, #10
    d7d6:	701a      	strb	r2, [r3, #0]
    d7d8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d7dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7e0:	781b      	ldrb	r3, [r3, #0]
    d7e2:	461a      	mov	r2, r3
    d7e4:	f24c 2351 	movw	r3, #49745	; 0xc251
    d7e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7ec:	7819      	ldrb	r1, [r3, #0]
    d7ee:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d7f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7f6:	5499      	strb	r1, [r3, r2]
    d7f8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d7fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d800:	781a      	ldrb	r2, [r3, #0]
    d802:	f24c 2351 	movw	r3, #49745	; 0xc251
    d806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d80a:	781b      	ldrb	r3, [r3, #0]
    d80c:	4413      	add	r3, r2
    d80e:	b2da      	uxtb	r2, r3
    d810:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d818:	701a      	strb	r2, [r3, #0]
    d81a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d81e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d822:	781a      	ldrb	r2, [r3, #0]
    d824:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d82c:	781b      	ldrb	r3, [r3, #0]
    d82e:	4413      	add	r3, r2
    d830:	b2da      	uxtb	r2, r3
    d832:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d83a:	701a      	strb	r2, [r3, #0]
    d83c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d844:	781b      	ldrb	r3, [r3, #0]
    d846:	3301      	adds	r3, #1
    d848:	b2da      	uxtb	r2, r3
    d84a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d84e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d852:	701a      	strb	r2, [r3, #0]
    d854:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d85c:	781b      	ldrb	r3, [r3, #0]
    d85e:	2bff      	cmp	r3, #255	; 0xff
    d860:	d105      	bne.n	d86e <send_nav_values+0x1b2>
    d862:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d86a:	2200      	movs	r2, #0
    d86c:	701a      	strb	r2, [r3, #0]
    d86e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d876:	781b      	ldrb	r3, [r3, #0]
    d878:	461a      	mov	r2, r3
    d87a:	f24c 2350 	movw	r3, #49744	; 0xc250
    d87e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d882:	7819      	ldrb	r1, [r3, #0]
    d884:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d888:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d88c:	5499      	strb	r1, [r3, r2]
    d88e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d896:	781a      	ldrb	r2, [r3, #0]
    d898:	f24c 2350 	movw	r3, #49744	; 0xc250
    d89c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8a0:	781b      	ldrb	r3, [r3, #0]
    d8a2:	4413      	add	r3, r2
    d8a4:	b2da      	uxtb	r2, r3
    d8a6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d8aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8ae:	701a      	strb	r2, [r3, #0]
    d8b0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d8b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8b8:	781a      	ldrb	r2, [r3, #0]
    d8ba:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d8be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8c2:	781b      	ldrb	r3, [r3, #0]
    d8c4:	4413      	add	r3, r2
    d8c6:	b2da      	uxtb	r2, r3
    d8c8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8d0:	701a      	strb	r2, [r3, #0]
    d8d2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d8d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8da:	781b      	ldrb	r3, [r3, #0]
    d8dc:	3301      	adds	r3, #1
    d8de:	b2da      	uxtb	r2, r3
    d8e0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8e8:	701a      	strb	r2, [r3, #0]
    d8ea:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d8ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8f2:	781b      	ldrb	r3, [r3, #0]
    d8f4:	2bff      	cmp	r3, #255	; 0xff
    d8f6:	d105      	bne.n	d904 <send_nav_values+0x248>
    d8f8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d900:	2200      	movs	r2, #0
    d902:	701a      	strb	r2, [r3, #0]
    d904:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d90c:	781b      	ldrb	r3, [r3, #0]
    d90e:	461a      	mov	r2, r3
    d910:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    d914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d918:	7819      	ldrb	r1, [r3, #0]
    d91a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d91e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d922:	5499      	strb	r1, [r3, r2]
    d924:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    d928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d92c:	781a      	ldrb	r2, [r3, #0]
    d92e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d936:	781b      	ldrb	r3, [r3, #0]
    d938:	4413      	add	r3, r2
    d93a:	b2da      	uxtb	r2, r3
    d93c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d944:	701a      	strb	r2, [r3, #0]
    d946:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d94e:	781a      	ldrb	r2, [r3, #0]
    d950:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d958:	781b      	ldrb	r3, [r3, #0]
    d95a:	4413      	add	r3, r2
    d95c:	b2da      	uxtb	r2, r3
    d95e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d966:	701a      	strb	r2, [r3, #0]
    d968:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d970:	781b      	ldrb	r3, [r3, #0]
    d972:	3301      	adds	r3, #1
    d974:	b2da      	uxtb	r2, r3
    d976:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d97a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d97e:	701a      	strb	r2, [r3, #0]
    d980:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d988:	781b      	ldrb	r3, [r3, #0]
    d98a:	2bff      	cmp	r3, #255	; 0xff
    d98c:	d105      	bne.n	d99a <send_nav_values+0x2de>
    d98e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d996:	2200      	movs	r2, #0
    d998:	701a      	strb	r2, [r3, #0]
    d99a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d99e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9a2:	781b      	ldrb	r3, [r3, #0]
    d9a4:	461a      	mov	r2, r3
    d9a6:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    d9aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ae:	7859      	ldrb	r1, [r3, #1]
    d9b0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d9b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9b8:	5499      	strb	r1, [r3, r2]
    d9ba:	4bd2      	ldr	r3, [pc, #840]	; (dd04 <send_nav_values+0x648>)
    d9bc:	781a      	ldrb	r2, [r3, #0]
    d9be:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d9c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9c6:	781b      	ldrb	r3, [r3, #0]
    d9c8:	4413      	add	r3, r2
    d9ca:	b2da      	uxtb	r2, r3
    d9cc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d9d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9d4:	701a      	strb	r2, [r3, #0]
    d9d6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d9da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9de:	781a      	ldrb	r2, [r3, #0]
    d9e0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d9e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9e8:	781b      	ldrb	r3, [r3, #0]
    d9ea:	4413      	add	r3, r2
    d9ec:	b2da      	uxtb	r2, r3
    d9ee:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9f6:	701a      	strb	r2, [r3, #0]
    d9f8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d9fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da00:	781b      	ldrb	r3, [r3, #0]
    da02:	3301      	adds	r3, #1
    da04:	b2da      	uxtb	r2, r3
    da06:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    da0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da0e:	701a      	strb	r2, [r3, #0]
    da10:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    da14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da18:	781b      	ldrb	r3, [r3, #0]
    da1a:	2bff      	cmp	r3, #255	; 0xff
    da1c:	d105      	bne.n	da2a <send_nav_values+0x36e>
    da1e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    da22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da26:	2200      	movs	r2, #0
    da28:	701a      	strb	r2, [r3, #0]
    da2a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    da2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da32:	781b      	ldrb	r3, [r3, #0]
    da34:	461a      	mov	r2, r3
    da36:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    da3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da3e:	7899      	ldrb	r1, [r3, #2]
    da40:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    da44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da48:	5499      	strb	r1, [r3, r2]
    da4a:	4baf      	ldr	r3, [pc, #700]	; (dd08 <send_nav_values+0x64c>)
    da4c:	781a      	ldrb	r2, [r3, #0]
    da4e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    da52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da56:	781b      	ldrb	r3, [r3, #0]
    da58:	4413      	add	r3, r2
    da5a:	b2da      	uxtb	r2, r3
    da5c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    da60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da64:	701a      	strb	r2, [r3, #0]
    da66:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    da6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da6e:	781a      	ldrb	r2, [r3, #0]
    da70:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    da74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da78:	781b      	ldrb	r3, [r3, #0]
    da7a:	4413      	add	r3, r2
    da7c:	b2da      	uxtb	r2, r3
    da7e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    da82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da86:	701a      	strb	r2, [r3, #0]
    da88:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    da8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da90:	781b      	ldrb	r3, [r3, #0]
    da92:	3301      	adds	r3, #1
    da94:	b2da      	uxtb	r2, r3
    da96:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    da9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da9e:	701a      	strb	r2, [r3, #0]
    daa0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    daa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daa8:	781b      	ldrb	r3, [r3, #0]
    daaa:	2bff      	cmp	r3, #255	; 0xff
    daac:	d105      	bne.n	daba <send_nav_values+0x3fe>
    daae:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dab6:	2200      	movs	r2, #0
    dab8:	701a      	strb	r2, [r3, #0]
    daba:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dabe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dac2:	781b      	ldrb	r3, [r3, #0]
    dac4:	461a      	mov	r2, r3
    dac6:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    daca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dace:	78d9      	ldrb	r1, [r3, #3]
    dad0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    dad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dad8:	5499      	strb	r1, [r3, r2]
    dada:	4b8c      	ldr	r3, [pc, #560]	; (dd0c <send_nav_values+0x650>)
    dadc:	781a      	ldrb	r2, [r3, #0]
    dade:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    dae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dae6:	781b      	ldrb	r3, [r3, #0]
    dae8:	4413      	add	r3, r2
    daea:	b2da      	uxtb	r2, r3
    daec:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    daf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daf4:	701a      	strb	r2, [r3, #0]
    daf6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    dafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dafe:	781a      	ldrb	r2, [r3, #0]
    db00:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    db04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db08:	781b      	ldrb	r3, [r3, #0]
    db0a:	4413      	add	r3, r2
    db0c:	b2da      	uxtb	r2, r3
    db0e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    db12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db16:	701a      	strb	r2, [r3, #0]
    db18:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    db1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db20:	781b      	ldrb	r3, [r3, #0]
    db22:	3301      	adds	r3, #1
    db24:	b2da      	uxtb	r2, r3
    db26:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    db2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db2e:	701a      	strb	r2, [r3, #0]
    db30:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    db34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db38:	781b      	ldrb	r3, [r3, #0]
    db3a:	2bff      	cmp	r3, #255	; 0xff
    db3c:	d105      	bne.n	db4a <send_nav_values+0x48e>
    db3e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    db42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db46:	2200      	movs	r2, #0
    db48:	701a      	strb	r2, [r3, #0]
    db4a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    db4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db52:	781b      	ldrb	r3, [r3, #0]
    db54:	461a      	mov	r2, r3
    db56:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
    db5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db5e:	7819      	ldrb	r1, [r3, #0]
    db60:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    db64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db68:	5499      	strb	r1, [r3, r2]
    db6a:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
    db6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db72:	781a      	ldrb	r2, [r3, #0]
    db74:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    db78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db7c:	781b      	ldrb	r3, [r3, #0]
    db7e:	4413      	add	r3, r2
    db80:	b2da      	uxtb	r2, r3
    db82:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    db86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db8a:	701a      	strb	r2, [r3, #0]
    db8c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    db90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db94:	781a      	ldrb	r2, [r3, #0]
    db96:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    db9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db9e:	781b      	ldrb	r3, [r3, #0]
    dba0:	4413      	add	r3, r2
    dba2:	b2da      	uxtb	r2, r3
    dba4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    dba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbac:	701a      	strb	r2, [r3, #0]
    dbae:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dbb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbb6:	781b      	ldrb	r3, [r3, #0]
    dbb8:	3301      	adds	r3, #1
    dbba:	b2da      	uxtb	r2, r3
    dbbc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dbc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbc4:	701a      	strb	r2, [r3, #0]
    dbc6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dbca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbce:	781b      	ldrb	r3, [r3, #0]
    dbd0:	2bff      	cmp	r3, #255	; 0xff
    dbd2:	d105      	bne.n	dbe0 <send_nav_values+0x524>
    dbd4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dbd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbdc:	2200      	movs	r2, #0
    dbde:	701a      	strb	r2, [r3, #0]
    dbe0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dbe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbe8:	781b      	ldrb	r3, [r3, #0]
    dbea:	461a      	mov	r2, r3
    dbec:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
    dbf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbf4:	7859      	ldrb	r1, [r3, #1]
    dbf6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    dbfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbfe:	5499      	strb	r1, [r3, r2]
    dc00:	4b43      	ldr	r3, [pc, #268]	; (dd10 <send_nav_values+0x654>)
    dc02:	781a      	ldrb	r2, [r3, #0]
    dc04:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    dc08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc0c:	781b      	ldrb	r3, [r3, #0]
    dc0e:	4413      	add	r3, r2
    dc10:	b2da      	uxtb	r2, r3
    dc12:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    dc16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc1a:	701a      	strb	r2, [r3, #0]
    dc1c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    dc20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc24:	781a      	ldrb	r2, [r3, #0]
    dc26:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    dc2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc2e:	781b      	ldrb	r3, [r3, #0]
    dc30:	4413      	add	r3, r2
    dc32:	b2da      	uxtb	r2, r3
    dc34:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    dc38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc3c:	701a      	strb	r2, [r3, #0]
    dc3e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dc42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc46:	781b      	ldrb	r3, [r3, #0]
    dc48:	3301      	adds	r3, #1
    dc4a:	b2da      	uxtb	r2, r3
    dc4c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dc50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc54:	701a      	strb	r2, [r3, #0]
    dc56:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dc5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc5e:	781b      	ldrb	r3, [r3, #0]
    dc60:	2bff      	cmp	r3, #255	; 0xff
    dc62:	d105      	bne.n	dc70 <send_nav_values+0x5b4>
    dc64:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dc68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc6c:	2200      	movs	r2, #0
    dc6e:	701a      	strb	r2, [r3, #0]
    dc70:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dc74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc78:	781b      	ldrb	r3, [r3, #0]
    dc7a:	461a      	mov	r2, r3
    dc7c:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
    dc80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc84:	7899      	ldrb	r1, [r3, #2]
    dc86:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    dc8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc8e:	5499      	strb	r1, [r3, r2]
    dc90:	4b20      	ldr	r3, [pc, #128]	; (dd14 <send_nav_values+0x658>)
    dc92:	781a      	ldrb	r2, [r3, #0]
    dc94:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    dc98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc9c:	781b      	ldrb	r3, [r3, #0]
    dc9e:	4413      	add	r3, r2
    dca0:	b2da      	uxtb	r2, r3
    dca2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    dca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcaa:	701a      	strb	r2, [r3, #0]
    dcac:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    dcb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcb4:	781a      	ldrb	r2, [r3, #0]
    dcb6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    dcba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcbe:	781b      	ldrb	r3, [r3, #0]
    dcc0:	4413      	add	r3, r2
    dcc2:	b2da      	uxtb	r2, r3
    dcc4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    dcc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dccc:	701a      	strb	r2, [r3, #0]
    dcce:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dcd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcd6:	781b      	ldrb	r3, [r3, #0]
    dcd8:	3301      	adds	r3, #1
    dcda:	b2da      	uxtb	r2, r3
    dcdc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dce4:	701a      	strb	r2, [r3, #0]
    dce6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dcea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcee:	781b      	ldrb	r3, [r3, #0]
    dcf0:	2bff      	cmp	r3, #255	; 0xff
    dcf2:	d111      	bne.n	dd18 <send_nav_values+0x65c>
    dcf4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dcf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcfc:	2200      	movs	r2, #0
    dcfe:	701a      	strb	r2, [r3, #0]
    dd00:	e00a      	b.n	dd18 <send_nav_values+0x65c>
    dd02:	bf00      	nop
    dd04:	2004c4ad 	.word	0x2004c4ad
    dd08:	2004c4ae 	.word	0x2004c4ae
    dd0c:	2004c4af 	.word	0x2004c4af
    dd10:	2004c4b1 	.word	0x2004c4b1
    dd14:	2004c4b2 	.word	0x2004c4b2
    dd18:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dd1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd20:	781b      	ldrb	r3, [r3, #0]
    dd22:	461a      	mov	r2, r3
    dd24:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
    dd28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd2c:	78d9      	ldrb	r1, [r3, #3]
    dd2e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    dd32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd36:	5499      	strb	r1, [r3, r2]
    dd38:	4bd3      	ldr	r3, [pc, #844]	; (e088 <send_nav_values+0x9cc>)
    dd3a:	781a      	ldrb	r2, [r3, #0]
    dd3c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    dd40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd44:	781b      	ldrb	r3, [r3, #0]
    dd46:	4413      	add	r3, r2
    dd48:	b2da      	uxtb	r2, r3
    dd4a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    dd4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd52:	701a      	strb	r2, [r3, #0]
    dd54:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    dd58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd5c:	781a      	ldrb	r2, [r3, #0]
    dd5e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    dd62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd66:	781b      	ldrb	r3, [r3, #0]
    dd68:	4413      	add	r3, r2
    dd6a:	b2da      	uxtb	r2, r3
    dd6c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    dd70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd74:	701a      	strb	r2, [r3, #0]
    dd76:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dd7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd7e:	781b      	ldrb	r3, [r3, #0]
    dd80:	3301      	adds	r3, #1
    dd82:	b2da      	uxtb	r2, r3
    dd84:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dd88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd8c:	701a      	strb	r2, [r3, #0]
    dd8e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dd92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd96:	781b      	ldrb	r3, [r3, #0]
    dd98:	2bff      	cmp	r3, #255	; 0xff
    dd9a:	d105      	bne.n	dda8 <send_nav_values+0x6ec>
    dd9c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dda0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dda4:	2200      	movs	r2, #0
    dda6:	701a      	strb	r2, [r3, #0]
    dda8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ddac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddb0:	781b      	ldrb	r3, [r3, #0]
    ddb2:	461a      	mov	r2, r3
    ddb4:	f24c 233c 	movw	r3, #49724	; 0xc23c
    ddb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddbc:	7819      	ldrb	r1, [r3, #0]
    ddbe:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ddc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddc6:	5499      	strb	r1, [r3, r2]
    ddc8:	f24c 233c 	movw	r3, #49724	; 0xc23c
    ddcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddd0:	781a      	ldrb	r2, [r3, #0]
    ddd2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ddd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddda:	781b      	ldrb	r3, [r3, #0]
    dddc:	4413      	add	r3, r2
    ddde:	b2da      	uxtb	r2, r3
    dde0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    dde4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dde8:	701a      	strb	r2, [r3, #0]
    ddea:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ddee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddf2:	781a      	ldrb	r2, [r3, #0]
    ddf4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ddf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddfc:	781b      	ldrb	r3, [r3, #0]
    ddfe:	4413      	add	r3, r2
    de00:	b2da      	uxtb	r2, r3
    de02:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    de06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de0a:	701a      	strb	r2, [r3, #0]
    de0c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    de10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de14:	781b      	ldrb	r3, [r3, #0]
    de16:	3301      	adds	r3, #1
    de18:	b2da      	uxtb	r2, r3
    de1a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    de1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de22:	701a      	strb	r2, [r3, #0]
    de24:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    de28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de2c:	781b      	ldrb	r3, [r3, #0]
    de2e:	2bff      	cmp	r3, #255	; 0xff
    de30:	d105      	bne.n	de3e <send_nav_values+0x782>
    de32:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    de36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de3a:	2200      	movs	r2, #0
    de3c:	701a      	strb	r2, [r3, #0]
    de3e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    de42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de46:	781b      	ldrb	r3, [r3, #0]
    de48:	461a      	mov	r2, r3
    de4a:	f24c 233c 	movw	r3, #49724	; 0xc23c
    de4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de52:	7859      	ldrb	r1, [r3, #1]
    de54:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    de58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de5c:	5499      	strb	r1, [r3, r2]
    de5e:	4b8b      	ldr	r3, [pc, #556]	; (e08c <send_nav_values+0x9d0>)
    de60:	781a      	ldrb	r2, [r3, #0]
    de62:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    de66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de6a:	781b      	ldrb	r3, [r3, #0]
    de6c:	4413      	add	r3, r2
    de6e:	b2da      	uxtb	r2, r3
    de70:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    de74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de78:	701a      	strb	r2, [r3, #0]
    de7a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    de7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de82:	781a      	ldrb	r2, [r3, #0]
    de84:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    de88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de8c:	781b      	ldrb	r3, [r3, #0]
    de8e:	4413      	add	r3, r2
    de90:	b2da      	uxtb	r2, r3
    de92:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    de96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de9a:	701a      	strb	r2, [r3, #0]
    de9c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dea4:	781b      	ldrb	r3, [r3, #0]
    dea6:	3301      	adds	r3, #1
    dea8:	b2da      	uxtb	r2, r3
    deaa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    deae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deb2:	701a      	strb	r2, [r3, #0]
    deb4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    deb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    debc:	781b      	ldrb	r3, [r3, #0]
    debe:	2bff      	cmp	r3, #255	; 0xff
    dec0:	d105      	bne.n	dece <send_nav_values+0x812>
    dec2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deca:	2200      	movs	r2, #0
    decc:	701a      	strb	r2, [r3, #0]
    dece:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ded2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ded6:	781b      	ldrb	r3, [r3, #0]
    ded8:	461a      	mov	r2, r3
    deda:	f24c 233c 	movw	r3, #49724	; 0xc23c
    dede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dee2:	7899      	ldrb	r1, [r3, #2]
    dee4:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    dee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deec:	5499      	strb	r1, [r3, r2]
    deee:	4b68      	ldr	r3, [pc, #416]	; (e090 <send_nav_values+0x9d4>)
    def0:	781a      	ldrb	r2, [r3, #0]
    def2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    def6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    defa:	781b      	ldrb	r3, [r3, #0]
    defc:	4413      	add	r3, r2
    defe:	b2da      	uxtb	r2, r3
    df00:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    df04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df08:	701a      	strb	r2, [r3, #0]
    df0a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    df0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df12:	781a      	ldrb	r2, [r3, #0]
    df14:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    df18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df1c:	781b      	ldrb	r3, [r3, #0]
    df1e:	4413      	add	r3, r2
    df20:	b2da      	uxtb	r2, r3
    df22:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    df26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df2a:	701a      	strb	r2, [r3, #0]
    df2c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    df30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df34:	781b      	ldrb	r3, [r3, #0]
    df36:	3301      	adds	r3, #1
    df38:	b2da      	uxtb	r2, r3
    df3a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    df3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df42:	701a      	strb	r2, [r3, #0]
    df44:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    df48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df4c:	781b      	ldrb	r3, [r3, #0]
    df4e:	2bff      	cmp	r3, #255	; 0xff
    df50:	d105      	bne.n	df5e <send_nav_values+0x8a2>
    df52:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    df56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df5a:	2200      	movs	r2, #0
    df5c:	701a      	strb	r2, [r3, #0]
    df5e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    df62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df66:	781b      	ldrb	r3, [r3, #0]
    df68:	461a      	mov	r2, r3
    df6a:	f24c 233c 	movw	r3, #49724	; 0xc23c
    df6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df72:	78d9      	ldrb	r1, [r3, #3]
    df74:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    df78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df7c:	5499      	strb	r1, [r3, r2]
    df7e:	4b45      	ldr	r3, [pc, #276]	; (e094 <send_nav_values+0x9d8>)
    df80:	781a      	ldrb	r2, [r3, #0]
    df82:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    df86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df8a:	781b      	ldrb	r3, [r3, #0]
    df8c:	4413      	add	r3, r2
    df8e:	b2da      	uxtb	r2, r3
    df90:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    df94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df98:	701a      	strb	r2, [r3, #0]
    df9a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    df9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfa2:	781a      	ldrb	r2, [r3, #0]
    dfa4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    dfa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfac:	781b      	ldrb	r3, [r3, #0]
    dfae:	4413      	add	r3, r2
    dfb0:	b2da      	uxtb	r2, r3
    dfb2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    dfb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfba:	701a      	strb	r2, [r3, #0]
    dfbc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dfc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfc4:	781b      	ldrb	r3, [r3, #0]
    dfc6:	3301      	adds	r3, #1
    dfc8:	b2da      	uxtb	r2, r3
    dfca:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dfce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfd2:	701a      	strb	r2, [r3, #0]
    dfd4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dfd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfdc:	781b      	ldrb	r3, [r3, #0]
    dfde:	2bff      	cmp	r3, #255	; 0xff
    dfe0:	d105      	bne.n	dfee <send_nav_values+0x932>
    dfe2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dfe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfea:	2200      	movs	r2, #0
    dfec:	701a      	strb	r2, [r3, #0]
    dfee:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dff6:	781b      	ldrb	r3, [r3, #0]
    dff8:	461a      	mov	r2, r3
    dffa:	f24c 2384 	movw	r3, #49796	; 0xc284
    dffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e002:	7819      	ldrb	r1, [r3, #0]
    e004:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e00c:	5499      	strb	r1, [r3, r2]
    e00e:	f24c 2384 	movw	r3, #49796	; 0xc284
    e012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e016:	781a      	ldrb	r2, [r3, #0]
    e018:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e01c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e020:	781b      	ldrb	r3, [r3, #0]
    e022:	4413      	add	r3, r2
    e024:	b2da      	uxtb	r2, r3
    e026:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e02a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e02e:	701a      	strb	r2, [r3, #0]
    e030:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e038:	781a      	ldrb	r2, [r3, #0]
    e03a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e03e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e042:	781b      	ldrb	r3, [r3, #0]
    e044:	4413      	add	r3, r2
    e046:	b2da      	uxtb	r2, r3
    e048:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e04c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e050:	701a      	strb	r2, [r3, #0]
    e052:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e05a:	781b      	ldrb	r3, [r3, #0]
    e05c:	3301      	adds	r3, #1
    e05e:	b2da      	uxtb	r2, r3
    e060:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e068:	701a      	strb	r2, [r3, #0]
    e06a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e06e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e072:	781b      	ldrb	r3, [r3, #0]
    e074:	2bff      	cmp	r3, #255	; 0xff
    e076:	d10f      	bne.n	e098 <send_nav_values+0x9dc>
    e078:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e07c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e080:	2200      	movs	r2, #0
    e082:	701a      	strb	r2, [r3, #0]
    e084:	e008      	b.n	e098 <send_nav_values+0x9dc>
    e086:	bf00      	nop
    e088:	2004c4b3 	.word	0x2004c4b3
    e08c:	2004c23d 	.word	0x2004c23d
    e090:	2004c23e 	.word	0x2004c23e
    e094:	2004c23f 	.word	0x2004c23f
    e098:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e09c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0a0:	781b      	ldrb	r3, [r3, #0]
    e0a2:	461a      	mov	r2, r3
    e0a4:	f24c 2384 	movw	r3, #49796	; 0xc284
    e0a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ac:	7859      	ldrb	r1, [r3, #1]
    e0ae:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e0b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0b6:	5499      	strb	r1, [r3, r2]
    e0b8:	4bd1      	ldr	r3, [pc, #836]	; (e400 <send_nav_values+0xd44>)
    e0ba:	781a      	ldrb	r2, [r3, #0]
    e0bc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e0c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0c4:	781b      	ldrb	r3, [r3, #0]
    e0c6:	4413      	add	r3, r2
    e0c8:	b2da      	uxtb	r2, r3
    e0ca:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e0ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0d2:	701a      	strb	r2, [r3, #0]
    e0d4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e0d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0dc:	781a      	ldrb	r2, [r3, #0]
    e0de:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e0e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0e6:	781b      	ldrb	r3, [r3, #0]
    e0e8:	4413      	add	r3, r2
    e0ea:	b2da      	uxtb	r2, r3
    e0ec:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0f4:	701a      	strb	r2, [r3, #0]
    e0f6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e0fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0fe:	781b      	ldrb	r3, [r3, #0]
    e100:	3301      	adds	r3, #1
    e102:	b2da      	uxtb	r2, r3
    e104:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e10c:	701a      	strb	r2, [r3, #0]
    e10e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e116:	781b      	ldrb	r3, [r3, #0]
    e118:	2bff      	cmp	r3, #255	; 0xff
    e11a:	d105      	bne.n	e128 <send_nav_values+0xa6c>
    e11c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e124:	2200      	movs	r2, #0
    e126:	701a      	strb	r2, [r3, #0]
    e128:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e12c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e130:	781b      	ldrb	r3, [r3, #0]
    e132:	461a      	mov	r2, r3
    e134:	f24c 2384 	movw	r3, #49796	; 0xc284
    e138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e13c:	7899      	ldrb	r1, [r3, #2]
    e13e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e146:	5499      	strb	r1, [r3, r2]
    e148:	4bae      	ldr	r3, [pc, #696]	; (e404 <send_nav_values+0xd48>)
    e14a:	781a      	ldrb	r2, [r3, #0]
    e14c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e154:	781b      	ldrb	r3, [r3, #0]
    e156:	4413      	add	r3, r2
    e158:	b2da      	uxtb	r2, r3
    e15a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e15e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e162:	701a      	strb	r2, [r3, #0]
    e164:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e16c:	781a      	ldrb	r2, [r3, #0]
    e16e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e176:	781b      	ldrb	r3, [r3, #0]
    e178:	4413      	add	r3, r2
    e17a:	b2da      	uxtb	r2, r3
    e17c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e184:	701a      	strb	r2, [r3, #0]
    e186:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e18a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e18e:	781b      	ldrb	r3, [r3, #0]
    e190:	3301      	adds	r3, #1
    e192:	b2da      	uxtb	r2, r3
    e194:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e19c:	701a      	strb	r2, [r3, #0]
    e19e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e1a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1a6:	781b      	ldrb	r3, [r3, #0]
    e1a8:	2bff      	cmp	r3, #255	; 0xff
    e1aa:	d105      	bne.n	e1b8 <send_nav_values+0xafc>
    e1ac:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e1b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1b4:	2200      	movs	r2, #0
    e1b6:	701a      	strb	r2, [r3, #0]
    e1b8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1c0:	781b      	ldrb	r3, [r3, #0]
    e1c2:	461a      	mov	r2, r3
    e1c4:	f24c 2384 	movw	r3, #49796	; 0xc284
    e1c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1cc:	78d9      	ldrb	r1, [r3, #3]
    e1ce:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e1d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1d6:	5499      	strb	r1, [r3, r2]
    e1d8:	4b8b      	ldr	r3, [pc, #556]	; (e408 <send_nav_values+0xd4c>)
    e1da:	781a      	ldrb	r2, [r3, #0]
    e1dc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e1e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1e4:	781b      	ldrb	r3, [r3, #0]
    e1e6:	4413      	add	r3, r2
    e1e8:	b2da      	uxtb	r2, r3
    e1ea:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e1ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1f2:	701a      	strb	r2, [r3, #0]
    e1f4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e1f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1fc:	781a      	ldrb	r2, [r3, #0]
    e1fe:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e206:	781b      	ldrb	r3, [r3, #0]
    e208:	4413      	add	r3, r2
    e20a:	b2da      	uxtb	r2, r3
    e20c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e214:	701a      	strb	r2, [r3, #0]
    e216:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e21a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e21e:	781b      	ldrb	r3, [r3, #0]
    e220:	3301      	adds	r3, #1
    e222:	b2da      	uxtb	r2, r3
    e224:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e22c:	701a      	strb	r2, [r3, #0]
    e22e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e236:	781b      	ldrb	r3, [r3, #0]
    e238:	2bff      	cmp	r3, #255	; 0xff
    e23a:	d105      	bne.n	e248 <send_nav_values+0xb8c>
    e23c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e244:	2200      	movs	r2, #0
    e246:	701a      	strb	r2, [r3, #0]
    e248:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e24c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e250:	781b      	ldrb	r3, [r3, #0]
    e252:	461a      	mov	r2, r3
    e254:	f240 4308 	movw	r3, #1032	; 0x408
    e258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e25c:	7819      	ldrb	r1, [r3, #0]
    e25e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e266:	5499      	strb	r1, [r3, r2]
    e268:	f240 4308 	movw	r3, #1032	; 0x408
    e26c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e270:	781a      	ldrb	r2, [r3, #0]
    e272:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e27a:	781b      	ldrb	r3, [r3, #0]
    e27c:	4413      	add	r3, r2
    e27e:	b2da      	uxtb	r2, r3
    e280:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e288:	701a      	strb	r2, [r3, #0]
    e28a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e28e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e292:	781a      	ldrb	r2, [r3, #0]
    e294:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e29c:	781b      	ldrb	r3, [r3, #0]
    e29e:	4413      	add	r3, r2
    e2a0:	b2da      	uxtb	r2, r3
    e2a2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e2a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2aa:	701a      	strb	r2, [r3, #0]
    e2ac:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e2b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2b4:	781b      	ldrb	r3, [r3, #0]
    e2b6:	3301      	adds	r3, #1
    e2b8:	b2da      	uxtb	r2, r3
    e2ba:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e2be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2c2:	701a      	strb	r2, [r3, #0]
    e2c4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e2c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2cc:	781b      	ldrb	r3, [r3, #0]
    e2ce:	2bff      	cmp	r3, #255	; 0xff
    e2d0:	d105      	bne.n	e2de <send_nav_values+0xc22>
    e2d2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e2d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2da:	2200      	movs	r2, #0
    e2dc:	701a      	strb	r2, [r3, #0]
    e2de:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2e6:	781b      	ldrb	r3, [r3, #0]
    e2e8:	461a      	mov	r2, r3
    e2ea:	f240 4308 	movw	r3, #1032	; 0x408
    e2ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2f2:	7859      	ldrb	r1, [r3, #1]
    e2f4:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e2f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2fc:	5499      	strb	r1, [r3, r2]
    e2fe:	4b43      	ldr	r3, [pc, #268]	; (e40c <send_nav_values+0xd50>)
    e300:	781a      	ldrb	r2, [r3, #0]
    e302:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e30a:	781b      	ldrb	r3, [r3, #0]
    e30c:	4413      	add	r3, r2
    e30e:	b2da      	uxtb	r2, r3
    e310:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e318:	701a      	strb	r2, [r3, #0]
    e31a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e31e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e322:	781a      	ldrb	r2, [r3, #0]
    e324:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e32c:	781b      	ldrb	r3, [r3, #0]
    e32e:	4413      	add	r3, r2
    e330:	b2da      	uxtb	r2, r3
    e332:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e33a:	701a      	strb	r2, [r3, #0]
    e33c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e344:	781b      	ldrb	r3, [r3, #0]
    e346:	3301      	adds	r3, #1
    e348:	b2da      	uxtb	r2, r3
    e34a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e34e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e352:	701a      	strb	r2, [r3, #0]
    e354:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e35c:	781b      	ldrb	r3, [r3, #0]
    e35e:	2bff      	cmp	r3, #255	; 0xff
    e360:	d105      	bne.n	e36e <send_nav_values+0xcb2>
    e362:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e36a:	2200      	movs	r2, #0
    e36c:	701a      	strb	r2, [r3, #0]
    e36e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e376:	781b      	ldrb	r3, [r3, #0]
    e378:	461a      	mov	r2, r3
    e37a:	f240 4308 	movw	r3, #1032	; 0x408
    e37e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e382:	7899      	ldrb	r1, [r3, #2]
    e384:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e38c:	5499      	strb	r1, [r3, r2]
    e38e:	4b20      	ldr	r3, [pc, #128]	; (e410 <send_nav_values+0xd54>)
    e390:	781a      	ldrb	r2, [r3, #0]
    e392:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e39a:	781b      	ldrb	r3, [r3, #0]
    e39c:	4413      	add	r3, r2
    e39e:	b2da      	uxtb	r2, r3
    e3a0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3a8:	701a      	strb	r2, [r3, #0]
    e3aa:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3b2:	781a      	ldrb	r2, [r3, #0]
    e3b4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3bc:	781b      	ldrb	r3, [r3, #0]
    e3be:	4413      	add	r3, r2
    e3c0:	b2da      	uxtb	r2, r3
    e3c2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e3c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ca:	701a      	strb	r2, [r3, #0]
    e3cc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e3d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3d4:	781b      	ldrb	r3, [r3, #0]
    e3d6:	3301      	adds	r3, #1
    e3d8:	b2da      	uxtb	r2, r3
    e3da:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e3de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3e2:	701a      	strb	r2, [r3, #0]
    e3e4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e3e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ec:	781b      	ldrb	r3, [r3, #0]
    e3ee:	2bff      	cmp	r3, #255	; 0xff
    e3f0:	d110      	bne.n	e414 <send_nav_values+0xd58>
    e3f2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e3f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3fa:	2200      	movs	r2, #0
    e3fc:	701a      	strb	r2, [r3, #0]
    e3fe:	e009      	b.n	e414 <send_nav_values+0xd58>
    e400:	2004c285 	.word	0x2004c285
    e404:	2004c286 	.word	0x2004c286
    e408:	2004c287 	.word	0x2004c287
    e40c:	20000409 	.word	0x20000409
    e410:	2000040a 	.word	0x2000040a
    e414:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e41c:	781b      	ldrb	r3, [r3, #0]
    e41e:	461a      	mov	r2, r3
    e420:	f240 4308 	movw	r3, #1032	; 0x408
    e424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e428:	78d9      	ldrb	r1, [r3, #3]
    e42a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e42e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e432:	5499      	strb	r1, [r3, r2]
    e434:	4bc2      	ldr	r3, [pc, #776]	; (e740 <send_nav_values+0x1084>)
    e436:	781a      	ldrb	r2, [r3, #0]
    e438:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e43c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e440:	781b      	ldrb	r3, [r3, #0]
    e442:	4413      	add	r3, r2
    e444:	b2da      	uxtb	r2, r3
    e446:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e44a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e44e:	701a      	strb	r2, [r3, #0]
    e450:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e458:	781a      	ldrb	r2, [r3, #0]
    e45a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e45e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e462:	781b      	ldrb	r3, [r3, #0]
    e464:	4413      	add	r3, r2
    e466:	b2da      	uxtb	r2, r3
    e468:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e46c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e470:	701a      	strb	r2, [r3, #0]
    e472:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e47a:	781b      	ldrb	r3, [r3, #0]
    e47c:	3301      	adds	r3, #1
    e47e:	b2da      	uxtb	r2, r3
    e480:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e488:	701a      	strb	r2, [r3, #0]
    e48a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e48e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e492:	781b      	ldrb	r3, [r3, #0]
    e494:	2bff      	cmp	r3, #255	; 0xff
    e496:	d105      	bne.n	e4a4 <send_nav_values+0xde8>
    e498:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e49c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4a0:	2200      	movs	r2, #0
    e4a2:	701a      	strb	r2, [r3, #0]
    e4a4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ac:	781b      	ldrb	r3, [r3, #0]
    e4ae:	461a      	mov	r2, r3
    e4b0:	f24c 2388 	movw	r3, #49800	; 0xc288
    e4b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4b8:	7819      	ldrb	r1, [r3, #0]
    e4ba:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e4be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4c2:	5499      	strb	r1, [r3, r2]
    e4c4:	f24c 2388 	movw	r3, #49800	; 0xc288
    e4c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4cc:	781a      	ldrb	r2, [r3, #0]
    e4ce:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e4d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4d6:	781b      	ldrb	r3, [r3, #0]
    e4d8:	4413      	add	r3, r2
    e4da:	b2da      	uxtb	r2, r3
    e4dc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e4e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4e4:	701a      	strb	r2, [r3, #0]
    e4e6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e4ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ee:	781a      	ldrb	r2, [r3, #0]
    e4f0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e4f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4f8:	781b      	ldrb	r3, [r3, #0]
    e4fa:	4413      	add	r3, r2
    e4fc:	b2da      	uxtb	r2, r3
    e4fe:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e506:	701a      	strb	r2, [r3, #0]
    e508:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e50c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e510:	781b      	ldrb	r3, [r3, #0]
    e512:	3301      	adds	r3, #1
    e514:	b2da      	uxtb	r2, r3
    e516:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e51a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e51e:	701a      	strb	r2, [r3, #0]
    e520:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e528:	781b      	ldrb	r3, [r3, #0]
    e52a:	2bff      	cmp	r3, #255	; 0xff
    e52c:	d105      	bne.n	e53a <send_nav_values+0xe7e>
    e52e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e536:	2200      	movs	r2, #0
    e538:	701a      	strb	r2, [r3, #0]
    e53a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e53e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e542:	781b      	ldrb	r3, [r3, #0]
    e544:	461a      	mov	r2, r3
    e546:	f24c 2388 	movw	r3, #49800	; 0xc288
    e54a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e54e:	7859      	ldrb	r1, [r3, #1]
    e550:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e558:	5499      	strb	r1, [r3, r2]
    e55a:	4b7a      	ldr	r3, [pc, #488]	; (e744 <send_nav_values+0x1088>)
    e55c:	781a      	ldrb	r2, [r3, #0]
    e55e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e566:	781b      	ldrb	r3, [r3, #0]
    e568:	4413      	add	r3, r2
    e56a:	b2da      	uxtb	r2, r3
    e56c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e574:	701a      	strb	r2, [r3, #0]
    e576:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e57a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e57e:	781a      	ldrb	r2, [r3, #0]
    e580:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e588:	781b      	ldrb	r3, [r3, #0]
    e58a:	4413      	add	r3, r2
    e58c:	b2da      	uxtb	r2, r3
    e58e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e596:	701a      	strb	r2, [r3, #0]
    e598:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e59c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5a0:	781b      	ldrb	r3, [r3, #0]
    e5a2:	3301      	adds	r3, #1
    e5a4:	b2da      	uxtb	r2, r3
    e5a6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e5aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5ae:	701a      	strb	r2, [r3, #0]
    e5b0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e5b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5b8:	781b      	ldrb	r3, [r3, #0]
    e5ba:	2bff      	cmp	r3, #255	; 0xff
    e5bc:	d105      	bne.n	e5ca <send_nav_values+0xf0e>
    e5be:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e5c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5c6:	2200      	movs	r2, #0
    e5c8:	701a      	strb	r2, [r3, #0]
    e5ca:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e5ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5d2:	781b      	ldrb	r3, [r3, #0]
    e5d4:	461a      	mov	r2, r3
    e5d6:	f24c 2388 	movw	r3, #49800	; 0xc288
    e5da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5de:	7899      	ldrb	r1, [r3, #2]
    e5e0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e5e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5e8:	5499      	strb	r1, [r3, r2]
    e5ea:	4b57      	ldr	r3, [pc, #348]	; (e748 <send_nav_values+0x108c>)
    e5ec:	781a      	ldrb	r2, [r3, #0]
    e5ee:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e5f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5f6:	781b      	ldrb	r3, [r3, #0]
    e5f8:	4413      	add	r3, r2
    e5fa:	b2da      	uxtb	r2, r3
    e5fc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e604:	701a      	strb	r2, [r3, #0]
    e606:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e60a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e60e:	781a      	ldrb	r2, [r3, #0]
    e610:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e618:	781b      	ldrb	r3, [r3, #0]
    e61a:	4413      	add	r3, r2
    e61c:	b2da      	uxtb	r2, r3
    e61e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e626:	701a      	strb	r2, [r3, #0]
    e628:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e630:	781b      	ldrb	r3, [r3, #0]
    e632:	3301      	adds	r3, #1
    e634:	b2da      	uxtb	r2, r3
    e636:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e63a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e63e:	701a      	strb	r2, [r3, #0]
    e640:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e648:	781b      	ldrb	r3, [r3, #0]
    e64a:	2bff      	cmp	r3, #255	; 0xff
    e64c:	d105      	bne.n	e65a <send_nav_values+0xf9e>
    e64e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e656:	2200      	movs	r2, #0
    e658:	701a      	strb	r2, [r3, #0]
    e65a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e65e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e662:	781b      	ldrb	r3, [r3, #0]
    e664:	461a      	mov	r2, r3
    e666:	f24c 2388 	movw	r3, #49800	; 0xc288
    e66a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e66e:	78d9      	ldrb	r1, [r3, #3]
    e670:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e678:	5499      	strb	r1, [r3, r2]
    e67a:	4b34      	ldr	r3, [pc, #208]	; (e74c <send_nav_values+0x1090>)
    e67c:	781a      	ldrb	r2, [r3, #0]
    e67e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e686:	781b      	ldrb	r3, [r3, #0]
    e688:	4413      	add	r3, r2
    e68a:	b2da      	uxtb	r2, r3
    e68c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e690:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e694:	701a      	strb	r2, [r3, #0]
    e696:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e69a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e69e:	781a      	ldrb	r2, [r3, #0]
    e6a0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e6a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6a8:	781b      	ldrb	r3, [r3, #0]
    e6aa:	4413      	add	r3, r2
    e6ac:	b2da      	uxtb	r2, r3
    e6ae:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e6b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6b6:	701a      	strb	r2, [r3, #0]
    e6b8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e6bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6c0:	781b      	ldrb	r3, [r3, #0]
    e6c2:	3301      	adds	r3, #1
    e6c4:	b2da      	uxtb	r2, r3
    e6c6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e6ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6ce:	701a      	strb	r2, [r3, #0]
    e6d0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e6d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6d8:	781b      	ldrb	r3, [r3, #0]
    e6da:	2bff      	cmp	r3, #255	; 0xff
    e6dc:	d105      	bne.n	e6ea <send_nav_values+0x102e>
    e6de:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e6e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6e6:	2200      	movs	r2, #0
    e6e8:	701a      	strb	r2, [r3, #0]
    e6ea:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e6ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6f2:	781b      	ldrb	r3, [r3, #0]
    e6f4:	461a      	mov	r2, r3
    e6f6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e6fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6fe:	7819      	ldrb	r1, [r3, #0]
    e700:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e708:	5499      	strb	r1, [r3, r2]
    e70a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e70e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e712:	781b      	ldrb	r3, [r3, #0]
    e714:	3301      	adds	r3, #1
    e716:	b2da      	uxtb	r2, r3
    e718:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e71c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e720:	701a      	strb	r2, [r3, #0]
    e722:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e72a:	781b      	ldrb	r3, [r3, #0]
    e72c:	2bff      	cmp	r3, #255	; 0xff
    e72e:	d10f      	bne.n	e750 <send_nav_values+0x1094>
    e730:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e738:	2200      	movs	r2, #0
    e73a:	701a      	strb	r2, [r3, #0]
    e73c:	e008      	b.n	e750 <send_nav_values+0x1094>
    e73e:	bf00      	nop
    e740:	2000040b 	.word	0x2000040b
    e744:	2004c289 	.word	0x2004c289
    e748:	2004c28a 	.word	0x2004c28a
    e74c:	2004c28b 	.word	0x2004c28b
    e750:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e758:	781b      	ldrb	r3, [r3, #0]
    e75a:	461a      	mov	r2, r3
    e75c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e764:	7819      	ldrb	r1, [r3, #0]
    e766:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e76a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e76e:	5499      	strb	r1, [r3, r2]
    e770:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e778:	781b      	ldrb	r3, [r3, #0]
    e77a:	3301      	adds	r3, #1
    e77c:	b2da      	uxtb	r2, r3
    e77e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e786:	701a      	strb	r2, [r3, #0]
    e788:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e78c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e790:	781b      	ldrb	r3, [r3, #0]
    e792:	2bff      	cmp	r3, #255	; 0xff
    e794:	d105      	bne.n	e7a2 <send_nav_values+0x10e6>
    e796:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e79a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e79e:	2200      	movs	r2, #0
    e7a0:	701a      	strb	r2, [r3, #0]
    e7a2:	f242 0339 	movw	r3, #8249	; 0x2039
    e7a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7aa:	781b      	ldrb	r3, [r3, #0]
    e7ac:	b2db      	uxtb	r3, r3
    e7ae:	f003 0310 	and.w	r3, r3, #16
    e7b2:	2b00      	cmp	r3, #0
    e7b4:	d15a      	bne.n	e86c <send_nav_values+0x11b0>
    e7b6:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    e7ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7be:	781b      	ldrb	r3, [r3, #0]
    e7c0:	b2db      	uxtb	r3, r3
    e7c2:	461a      	mov	r2, r3
    e7c4:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e7c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7cc:	5c9a      	ldrb	r2, [r3, r2]
    e7ce:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    e7d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7d6:	701a      	strb	r2, [r3, #0]
    e7d8:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    e7dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7e0:	2200      	movs	r2, #0
    e7e2:	701a      	strb	r2, [r3, #0]
    e7e4:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    e7e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ec:	781b      	ldrb	r3, [r3, #0]
    e7ee:	b2db      	uxtb	r3, r3
    e7f0:	3301      	adds	r3, #1
    e7f2:	b2da      	uxtb	r2, r3
    e7f4:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    e7f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7fc:	701a      	strb	r2, [r3, #0]
    e7fe:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    e802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e806:	781b      	ldrb	r3, [r3, #0]
    e808:	b2db      	uxtb	r3, r3
    e80a:	2bff      	cmp	r3, #255	; 0xff
    e80c:	d105      	bne.n	e81a <send_nav_values+0x115e>
    e80e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    e812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e816:	2200      	movs	r2, #0
    e818:	701a      	strb	r2, [r3, #0]
    e81a:	f242 0338 	movw	r3, #8248	; 0x2038
    e81e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e822:	f242 0238 	movw	r2, #8248	; 0x2038
    e826:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e82a:	7812      	ldrb	r2, [r2, #0]
    e82c:	b2d2      	uxtb	r2, r2
    e82e:	f042 0201 	orr.w	r2, r2, #1
    e832:	b2d2      	uxtb	r2, r2
    e834:	701a      	strb	r2, [r3, #0]
    e836:	f242 0339 	movw	r3, #8249	; 0x2039
    e83a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e83e:	f242 0239 	movw	r2, #8249	; 0x2039
    e842:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e846:	7812      	ldrb	r2, [r2, #0]
    e848:	b2d2      	uxtb	r2, r2
    e84a:	f042 0210 	orr.w	r2, r2, #16
    e84e:	b2d2      	uxtb	r2, r2
    e850:	701a      	strb	r2, [r3, #0]
    e852:	e00b      	b.n	e86c <send_nav_values+0x11b0>
    e854:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    e858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e85c:	781b      	ldrb	r3, [r3, #0]
    e85e:	3301      	adds	r3, #1
    e860:	b2da      	uxtb	r2, r3
    e862:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    e866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e86a:	701a      	strb	r2, [r3, #0]
}
    e86c:	46bd      	mov	sp, r7
    e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e872:	4770      	bx	lr

0000e874 <course_run>:

void course_run(void){
    e874:	b580      	push	{r7, lr}
    e876:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e878:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    e87c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e880:	781b      	ldrb	r3, [r3, #0]
    e882:	2b02      	cmp	r3, #2
    e884:	d006      	beq.n	e894 <course_run+0x20>
    e886:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    e88a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e88e:	781b      	ldrb	r3, [r3, #0]
    e890:	2b03      	cmp	r3, #3
    e892:	d112      	bne.n	e8ba <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    e894:	f64b 63de 	movw	r3, #48862	; 0xbede
    e898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e89c:	781b      	ldrb	r3, [r3, #0]
    e89e:	2b02      	cmp	r3, #2
    e8a0:	d901      	bls.n	e8a6 <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    e8a2:	f003 faf1 	bl	11e88 <course_pid_run>
    desired_roll = nav_desired_roll;
    e8a6:	f24c 2380 	movw	r3, #49792	; 0xc280
    e8aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8ae:	681a      	ldr	r2, [r3, #0]
    e8b0:	f24c 2324 	movw	r3, #49700	; 0xc224
    e8b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8b8:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    e8ba:	bd80      	pop	{r7, pc}

0000e8bc <altitude_control_task>:

void altitude_control_task(void)
{
    e8bc:	b580      	push	{r7, lr}
    e8be:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    e8c0:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    e8c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8c8:	781b      	ldrb	r3, [r3, #0]
    e8ca:	2b02      	cmp	r3, #2
    e8cc:	d006      	beq.n	e8dc <altitude_control_task+0x20>
    e8ce:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    e8d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8d6:	781b      	ldrb	r3, [r3, #0]
    e8d8:	2b03      	cmp	r3, #3
    e8da:	d108      	bne.n	e8ee <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    e8dc:	f64b 63dd 	movw	r3, #48861	; 0xbedd
    e8e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8e4:	781b      	ldrb	r3, [r3, #0]
    e8e6:	2b03      	cmp	r3, #3
    e8e8:	d101      	bne.n	e8ee <altitude_control_task+0x32>
      			altitude_pid_run();
    e8ea:	f003 fd55 	bl	12398 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    e8ee:	bd80      	pop	{r7, pc}

0000e8f0 <climb_control_task>:
void climb_control_task(void)
{
    e8f0:	b580      	push	{r7, lr}
    e8f2:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e8f4:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    e8f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8fc:	781b      	ldrb	r3, [r3, #0]
    e8fe:	2b02      	cmp	r3, #2
    e900:	d006      	beq.n	e910 <climb_control_task+0x20>
    e902:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    e906:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e90a:	781b      	ldrb	r3, [r3, #0]
    e90c:	2b03      	cmp	r3, #3
    e90e:	d135      	bne.n	e97c <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    e910:	f64b 63dd 	movw	r3, #48861	; 0xbedd
    e914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e918:	781b      	ldrb	r3, [r3, #0]
    e91a:	2b01      	cmp	r3, #1
    e91c:	d901      	bls.n	e922 <climb_control_task+0x32>
        	climb_pid_run();
    e91e:	f003 fb6b 	bl	11ff8 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    e922:	f64b 63dd 	movw	r3, #48861	; 0xbedd
    e926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e92a:	781b      	ldrb	r3, [r3, #0]
    e92c:	2b01      	cmp	r3, #1
    e92e:	d10a      	bne.n	e946 <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    e930:	f24c 2378 	movw	r3, #49784	; 0xc278
    e934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e938:	881b      	ldrh	r3, [r3, #0]
    e93a:	b29a      	uxth	r2, r3
    e93c:	f24c 232c 	movw	r3, #49708	; 0xc22c
    e940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e944:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    e946:	f64b 63e5 	movw	r3, #48869	; 0xbee5
    e94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e94e:	781b      	ldrb	r3, [r3, #0]
    e950:	2b00      	cmp	r3, #0
    e952:	d10d      	bne.n	e970 <climb_control_task+0x80>
    e954:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
    e958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e95c:	881b      	ldrh	r3, [r3, #0]
    e95e:	2b00      	cmp	r3, #0
    e960:	d10c      	bne.n	e97c <climb_control_task+0x8c>
    e962:	f64b 63f0 	movw	r3, #48880	; 0xbef0
    e966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e96a:	781b      	ldrb	r3, [r3, #0]
    e96c:	2b00      	cmp	r3, #0
    e96e:	d105      	bne.n	e97c <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    e970:	f24c 232c 	movw	r3, #49708	; 0xc22c
    e974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e978:	2200      	movs	r2, #0
    e97a:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    e97c:	bd80      	pop	{r7, pc}
    e97e:	bf00      	nop

0000e980 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    e980:	b580      	push	{r7, lr}
    e982:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    e984:	f003 f926 	bl	11bd4 <ir_update>
    estimator_update_state_infrared();
    e988:	f006 fbac 	bl	150e4 <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    e98c:	f003 f990 	bl	11cb0 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    e990:	f24c 232c 	movw	r3, #49708	; 0xc22c
    e994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e998:	881a      	ldrh	r2, [r3, #0]
    e99a:	f24c 0318 	movw	r3, #49176	; 0xc018
    e99e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9a2:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    e9a4:	f24c 232e 	movw	r3, #49710	; 0xc22e
    e9a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9ac:	881a      	ldrh	r2, [r3, #0]
    e9ae:	f24c 0318 	movw	r3, #49176	; 0xc018
    e9b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9b6:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    e9b8:	f24c 2330 	movw	r3, #49712	; 0xc230
    e9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9c0:	881a      	ldrh	r2, [r3, #0]
    e9c2:	f24c 0318 	movw	r3, #49176	; 0xc018
    e9c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9ca:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    e9cc:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
    e9d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9d4:	681b      	ldr	r3, [r3, #0]
    e9d6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e9da:	4618      	mov	r0, r3
    e9dc:	f008 ffd6 	bl	1798c <__aeabi_f2d>
    e9e0:	4602      	mov	r2, r0
    e9e2:	460b      	mov	r3, r1
    e9e4:	4610      	mov	r0, r2
    e9e6:	4619      	mov	r1, r3
    e9e8:	f04f 0200 	mov.w	r2, #0
    e9ec:	f04f 0300 	mov.w	r3, #0
    e9f0:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e9f4:	f009 f81e 	bl	17a34 <__aeabi_dmul>
    e9f8:	4602      	mov	r2, r0
    e9fa:	460b      	mov	r3, r1
    e9fc:	4610      	mov	r0, r2
    e9fe:	4619      	mov	r1, r3
    ea00:	f04f 0200 	mov.w	r2, #0
    ea04:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    ea08:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    ea0c:	f009 fa84 	bl	17f18 <__aeabi_dcmplt>
    ea10:	4603      	mov	r3, r0
    ea12:	2b00      	cmp	r3, #0
    ea14:	d002      	beq.n	ea1c <stabilisation_task+0x9c>
    ea16:	f64d 2280 	movw	r2, #55936	; 0xda80
    ea1a:	e046      	b.n	eaaa <stabilisation_task+0x12a>
    ea1c:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
    ea20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea24:	681b      	ldr	r3, [r3, #0]
    ea26:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ea2a:	4618      	mov	r0, r3
    ea2c:	f008 ffae 	bl	1798c <__aeabi_f2d>
    ea30:	4602      	mov	r2, r0
    ea32:	460b      	mov	r3, r1
    ea34:	4610      	mov	r0, r2
    ea36:	4619      	mov	r1, r3
    ea38:	f04f 0200 	mov.w	r2, #0
    ea3c:	f04f 0300 	mov.w	r3, #0
    ea40:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ea44:	f008 fff6 	bl	17a34 <__aeabi_dmul>
    ea48:	4602      	mov	r2, r0
    ea4a:	460b      	mov	r3, r1
    ea4c:	4610      	mov	r0, r2
    ea4e:	4619      	mov	r1, r3
    ea50:	f04f 0200 	mov.w	r2, #0
    ea54:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    ea58:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    ea5c:	f009 fa7a 	bl	17f54 <__aeabi_dcmpgt>
    ea60:	4603      	mov	r3, r0
    ea62:	2b00      	cmp	r3, #0
    ea64:	d002      	beq.n	ea6c <stabilisation_task+0xec>
    ea66:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    ea6a:	e01d      	b.n	eaa8 <stabilisation_task+0x128>
    ea6c:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
    ea70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea74:	681b      	ldr	r3, [r3, #0]
    ea76:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ea7a:	4618      	mov	r0, r3
    ea7c:	f008 ff86 	bl	1798c <__aeabi_f2d>
    ea80:	4602      	mov	r2, r0
    ea82:	460b      	mov	r3, r1
    ea84:	4610      	mov	r0, r2
    ea86:	4619      	mov	r1, r3
    ea88:	f04f 0200 	mov.w	r2, #0
    ea8c:	f04f 0300 	mov.w	r3, #0
    ea90:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ea94:	f008 ffce 	bl	17a34 <__aeabi_dmul>
    ea98:	4602      	mov	r2, r0
    ea9a:	460b      	mov	r3, r1
    ea9c:	4610      	mov	r0, r2
    ea9e:	4619      	mov	r1, r3
    eaa0:	f009 fa62 	bl	17f68 <__aeabi_d2iz>
    eaa4:	4603      	mov	r3, r0
    eaa6:	b29b      	uxth	r3, r3
    eaa8:	b29a      	uxth	r2, r3
    eaaa:	f24c 0318 	movw	r3, #49176	; 0xc018
    eaae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eab2:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    eab4:	bd80      	pop	{r7, pc}
    eab6:	bf00      	nop

0000eab8 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    eab8:	b580      	push	{r7, lr}
    eaba:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    eabc:	f24c 038d 	movw	r3, #49293	; 0xc08d
    eac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eac4:	2200      	movs	r2, #0
    eac6:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    eac8:	f24c 038e 	movw	r3, #49294	; 0xc08e
    eacc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ead0:	781b      	ldrb	r3, [r3, #0]
    ead2:	2b00      	cmp	r3, #0
    ead4:	f001 81af 	beq.w	fe36 <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    ead8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eadc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eae0:	781a      	ldrb	r2, [r3, #0]
    eae2:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    eae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaea:	781b      	ldrb	r3, [r3, #0]
    eaec:	b2db      	uxtb	r3, r3
    eaee:	429a      	cmp	r2, r3
    eaf0:	d313      	bcc.n	eb1a <send_gps_pos+0x62>
    eaf2:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    eaf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eafa:	781b      	ldrb	r3, [r3, #0]
    eafc:	b2db      	uxtb	r3, r3
    eafe:	461a      	mov	r2, r3
    eb00:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eb04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb08:	781b      	ldrb	r3, [r3, #0]
    eb0a:	1ad3      	subs	r3, r2, r3
    eb0c:	33ff      	adds	r3, #255	; 0xff
    eb0e:	2b21      	cmp	r3, #33	; 0x21
    eb10:	bfd4      	ite	le
    eb12:	2300      	movle	r3, #0
    eb14:	2301      	movgt	r3, #1
    eb16:	b2db      	uxtb	r3, r3
    eb18:	e011      	b.n	eb3e <send_gps_pos+0x86>
    eb1a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    eb1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb22:	781b      	ldrb	r3, [r3, #0]
    eb24:	b2db      	uxtb	r3, r3
    eb26:	461a      	mov	r2, r3
    eb28:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eb2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb30:	781b      	ldrb	r3, [r3, #0]
    eb32:	1ad3      	subs	r3, r2, r3
    eb34:	2b21      	cmp	r3, #33	; 0x21
    eb36:	bfd4      	ite	le
    eb38:	2300      	movle	r3, #0
    eb3a:	2301      	movgt	r3, #1
    eb3c:	b2db      	uxtb	r3, r3
    eb3e:	2b00      	cmp	r3, #0
    eb40:	f001 816b 	beq.w	fe1a <send_gps_pos+0x1362>
    eb44:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eb48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb4c:	781b      	ldrb	r3, [r3, #0]
    eb4e:	461a      	mov	r2, r3
    eb50:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    eb54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb58:	2105      	movs	r1, #5
    eb5a:	5499      	strb	r1, [r3, r2]
    eb5c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eb60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb64:	781b      	ldrb	r3, [r3, #0]
    eb66:	3301      	adds	r3, #1
    eb68:	b2da      	uxtb	r2, r3
    eb6a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eb6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb72:	701a      	strb	r2, [r3, #0]
    eb74:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eb78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb7c:	781b      	ldrb	r3, [r3, #0]
    eb7e:	2bff      	cmp	r3, #255	; 0xff
    eb80:	d105      	bne.n	eb8e <send_gps_pos+0xd6>
    eb82:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eb86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb8a:	2200      	movs	r2, #0
    eb8c:	701a      	strb	r2, [r3, #0]
    eb8e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eb92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb96:	781b      	ldrb	r3, [r3, #0]
    eb98:	461a      	mov	r2, r3
    eb9a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    eb9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eba2:	2108      	movs	r1, #8
    eba4:	5499      	strb	r1, [r3, r2]
    eba6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ebaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebae:	781b      	ldrb	r3, [r3, #0]
    ebb0:	3301      	adds	r3, #1
    ebb2:	b2da      	uxtb	r2, r3
    ebb4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ebb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebbc:	701a      	strb	r2, [r3, #0]
    ebbe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ebc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebc6:	781b      	ldrb	r3, [r3, #0]
    ebc8:	2bff      	cmp	r3, #255	; 0xff
    ebca:	d105      	bne.n	ebd8 <send_gps_pos+0x120>
    ebcc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ebd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebd4:	2200      	movs	r2, #0
    ebd6:	701a      	strb	r2, [r3, #0]
    ebd8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ebdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebe0:	2208      	movs	r2, #8
    ebe2:	701a      	strb	r2, [r3, #0]
    ebe4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ebe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebec:	2208      	movs	r2, #8
    ebee:	701a      	strb	r2, [r3, #0]
    ebf0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ebf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebf8:	781b      	ldrb	r3, [r3, #0]
    ebfa:	461a      	mov	r2, r3
    ebfc:	f24c 038c 	movw	r3, #49292	; 0xc08c
    ec00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec04:	7819      	ldrb	r1, [r3, #0]
    ec06:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ec0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec0e:	5499      	strb	r1, [r3, r2]
    ec10:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ec14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec18:	781a      	ldrb	r2, [r3, #0]
    ec1a:	f24c 038c 	movw	r3, #49292	; 0xc08c
    ec1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec22:	781b      	ldrb	r3, [r3, #0]
    ec24:	4413      	add	r3, r2
    ec26:	b2da      	uxtb	r2, r3
    ec28:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ec2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec30:	701a      	strb	r2, [r3, #0]
    ec32:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ec36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec3a:	781a      	ldrb	r2, [r3, #0]
    ec3c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ec40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec44:	781b      	ldrb	r3, [r3, #0]
    ec46:	4413      	add	r3, r2
    ec48:	b2da      	uxtb	r2, r3
    ec4a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ec4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec52:	701a      	strb	r2, [r3, #0]
    ec54:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ec58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec5c:	781b      	ldrb	r3, [r3, #0]
    ec5e:	3301      	adds	r3, #1
    ec60:	b2da      	uxtb	r2, r3
    ec62:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ec66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec6a:	701a      	strb	r2, [r3, #0]
    ec6c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ec70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec74:	781b      	ldrb	r3, [r3, #0]
    ec76:	2bff      	cmp	r3, #255	; 0xff
    ec78:	d105      	bne.n	ec86 <send_gps_pos+0x1ce>
    ec7a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ec7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec82:	2200      	movs	r2, #0
    ec84:	701a      	strb	r2, [r3, #0]
    ec86:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ec8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec8e:	781b      	ldrb	r3, [r3, #0]
    ec90:	461a      	mov	r2, r3
    ec92:	f24c 037c 	movw	r3, #49276	; 0xc07c
    ec96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec9a:	7819      	ldrb	r1, [r3, #0]
    ec9c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    eca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eca4:	5499      	strb	r1, [r3, r2]
    eca6:	f24c 037c 	movw	r3, #49276	; 0xc07c
    ecaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecae:	781a      	ldrb	r2, [r3, #0]
    ecb0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ecb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecb8:	781b      	ldrb	r3, [r3, #0]
    ecba:	4413      	add	r3, r2
    ecbc:	b2da      	uxtb	r2, r3
    ecbe:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ecc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecc6:	701a      	strb	r2, [r3, #0]
    ecc8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    eccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecd0:	781a      	ldrb	r2, [r3, #0]
    ecd2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ecd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecda:	781b      	ldrb	r3, [r3, #0]
    ecdc:	4413      	add	r3, r2
    ecde:	b2da      	uxtb	r2, r3
    ece0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ece4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ece8:	701a      	strb	r2, [r3, #0]
    ecea:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ecee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecf2:	781b      	ldrb	r3, [r3, #0]
    ecf4:	3301      	adds	r3, #1
    ecf6:	b2da      	uxtb	r2, r3
    ecf8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ecfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed00:	701a      	strb	r2, [r3, #0]
    ed02:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ed06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed0a:	781b      	ldrb	r3, [r3, #0]
    ed0c:	2bff      	cmp	r3, #255	; 0xff
    ed0e:	d105      	bne.n	ed1c <send_gps_pos+0x264>
    ed10:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ed14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed18:	2200      	movs	r2, #0
    ed1a:	701a      	strb	r2, [r3, #0]
    ed1c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ed20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed24:	781b      	ldrb	r3, [r3, #0]
    ed26:	461a      	mov	r2, r3
    ed28:	f24c 037c 	movw	r3, #49276	; 0xc07c
    ed2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed30:	7859      	ldrb	r1, [r3, #1]
    ed32:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ed36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed3a:	5499      	strb	r1, [r3, r2]
    ed3c:	4bd1      	ldr	r3, [pc, #836]	; (f084 <send_gps_pos+0x5cc>)
    ed3e:	781a      	ldrb	r2, [r3, #0]
    ed40:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ed44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed48:	781b      	ldrb	r3, [r3, #0]
    ed4a:	4413      	add	r3, r2
    ed4c:	b2da      	uxtb	r2, r3
    ed4e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ed52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed56:	701a      	strb	r2, [r3, #0]
    ed58:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ed5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed60:	781a      	ldrb	r2, [r3, #0]
    ed62:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ed66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed6a:	781b      	ldrb	r3, [r3, #0]
    ed6c:	4413      	add	r3, r2
    ed6e:	b2da      	uxtb	r2, r3
    ed70:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ed74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed78:	701a      	strb	r2, [r3, #0]
    ed7a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ed7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed82:	781b      	ldrb	r3, [r3, #0]
    ed84:	3301      	adds	r3, #1
    ed86:	b2da      	uxtb	r2, r3
    ed88:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ed8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed90:	701a      	strb	r2, [r3, #0]
    ed92:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ed96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed9a:	781b      	ldrb	r3, [r3, #0]
    ed9c:	2bff      	cmp	r3, #255	; 0xff
    ed9e:	d105      	bne.n	edac <send_gps_pos+0x2f4>
    eda0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eda4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eda8:	2200      	movs	r2, #0
    edaa:	701a      	strb	r2, [r3, #0]
    edac:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    edb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edb4:	781b      	ldrb	r3, [r3, #0]
    edb6:	461a      	mov	r2, r3
    edb8:	f24c 037c 	movw	r3, #49276	; 0xc07c
    edbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edc0:	7899      	ldrb	r1, [r3, #2]
    edc2:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    edc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edca:	5499      	strb	r1, [r3, r2]
    edcc:	4bae      	ldr	r3, [pc, #696]	; (f088 <send_gps_pos+0x5d0>)
    edce:	781a      	ldrb	r2, [r3, #0]
    edd0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    edd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edd8:	781b      	ldrb	r3, [r3, #0]
    edda:	4413      	add	r3, r2
    eddc:	b2da      	uxtb	r2, r3
    edde:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ede2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ede6:	701a      	strb	r2, [r3, #0]
    ede8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    edec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edf0:	781a      	ldrb	r2, [r3, #0]
    edf2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    edf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edfa:	781b      	ldrb	r3, [r3, #0]
    edfc:	4413      	add	r3, r2
    edfe:	b2da      	uxtb	r2, r3
    ee00:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ee04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee08:	701a      	strb	r2, [r3, #0]
    ee0a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ee0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee12:	781b      	ldrb	r3, [r3, #0]
    ee14:	3301      	adds	r3, #1
    ee16:	b2da      	uxtb	r2, r3
    ee18:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ee1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee20:	701a      	strb	r2, [r3, #0]
    ee22:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ee26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee2a:	781b      	ldrb	r3, [r3, #0]
    ee2c:	2bff      	cmp	r3, #255	; 0xff
    ee2e:	d105      	bne.n	ee3c <send_gps_pos+0x384>
    ee30:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ee34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee38:	2200      	movs	r2, #0
    ee3a:	701a      	strb	r2, [r3, #0]
    ee3c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ee40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee44:	781b      	ldrb	r3, [r3, #0]
    ee46:	461a      	mov	r2, r3
    ee48:	f24c 037c 	movw	r3, #49276	; 0xc07c
    ee4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee50:	78d9      	ldrb	r1, [r3, #3]
    ee52:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ee56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee5a:	5499      	strb	r1, [r3, r2]
    ee5c:	4b8b      	ldr	r3, [pc, #556]	; (f08c <send_gps_pos+0x5d4>)
    ee5e:	781a      	ldrb	r2, [r3, #0]
    ee60:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ee64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee68:	781b      	ldrb	r3, [r3, #0]
    ee6a:	4413      	add	r3, r2
    ee6c:	b2da      	uxtb	r2, r3
    ee6e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ee72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee76:	701a      	strb	r2, [r3, #0]
    ee78:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ee7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee80:	781a      	ldrb	r2, [r3, #0]
    ee82:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ee86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee8a:	781b      	ldrb	r3, [r3, #0]
    ee8c:	4413      	add	r3, r2
    ee8e:	b2da      	uxtb	r2, r3
    ee90:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ee94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee98:	701a      	strb	r2, [r3, #0]
    ee9a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ee9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eea2:	781b      	ldrb	r3, [r3, #0]
    eea4:	3301      	adds	r3, #1
    eea6:	b2da      	uxtb	r2, r3
    eea8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eeac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeb0:	701a      	strb	r2, [r3, #0]
    eeb2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eeb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeba:	781b      	ldrb	r3, [r3, #0]
    eebc:	2bff      	cmp	r3, #255	; 0xff
    eebe:	d105      	bne.n	eecc <send_gps_pos+0x414>
    eec0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eec8:	2200      	movs	r2, #0
    eeca:	701a      	strb	r2, [r3, #0]
    eecc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eed4:	781b      	ldrb	r3, [r3, #0]
    eed6:	461a      	mov	r2, r3
    eed8:	f24c 0380 	movw	r3, #49280	; 0xc080
    eedc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eee0:	7819      	ldrb	r1, [r3, #0]
    eee2:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    eee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeea:	5499      	strb	r1, [r3, r2]
    eeec:	f24c 0380 	movw	r3, #49280	; 0xc080
    eef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eef4:	781a      	ldrb	r2, [r3, #0]
    eef6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    eefa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eefe:	781b      	ldrb	r3, [r3, #0]
    ef00:	4413      	add	r3, r2
    ef02:	b2da      	uxtb	r2, r3
    ef04:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ef08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef0c:	701a      	strb	r2, [r3, #0]
    ef0e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ef12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef16:	781a      	ldrb	r2, [r3, #0]
    ef18:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ef1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef20:	781b      	ldrb	r3, [r3, #0]
    ef22:	4413      	add	r3, r2
    ef24:	b2da      	uxtb	r2, r3
    ef26:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ef2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef2e:	701a      	strb	r2, [r3, #0]
    ef30:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ef34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef38:	781b      	ldrb	r3, [r3, #0]
    ef3a:	3301      	adds	r3, #1
    ef3c:	b2da      	uxtb	r2, r3
    ef3e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ef42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef46:	701a      	strb	r2, [r3, #0]
    ef48:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ef4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef50:	781b      	ldrb	r3, [r3, #0]
    ef52:	2bff      	cmp	r3, #255	; 0xff
    ef54:	d105      	bne.n	ef62 <send_gps_pos+0x4aa>
    ef56:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ef5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef5e:	2200      	movs	r2, #0
    ef60:	701a      	strb	r2, [r3, #0]
    ef62:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ef66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef6a:	781b      	ldrb	r3, [r3, #0]
    ef6c:	461a      	mov	r2, r3
    ef6e:	f24c 0380 	movw	r3, #49280	; 0xc080
    ef72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef76:	7859      	ldrb	r1, [r3, #1]
    ef78:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ef7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef80:	5499      	strb	r1, [r3, r2]
    ef82:	4b43      	ldr	r3, [pc, #268]	; (f090 <send_gps_pos+0x5d8>)
    ef84:	781a      	ldrb	r2, [r3, #0]
    ef86:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ef8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef8e:	781b      	ldrb	r3, [r3, #0]
    ef90:	4413      	add	r3, r2
    ef92:	b2da      	uxtb	r2, r3
    ef94:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ef98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef9c:	701a      	strb	r2, [r3, #0]
    ef9e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    efa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efa6:	781a      	ldrb	r2, [r3, #0]
    efa8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    efac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efb0:	781b      	ldrb	r3, [r3, #0]
    efb2:	4413      	add	r3, r2
    efb4:	b2da      	uxtb	r2, r3
    efb6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    efba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efbe:	701a      	strb	r2, [r3, #0]
    efc0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    efc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efc8:	781b      	ldrb	r3, [r3, #0]
    efca:	3301      	adds	r3, #1
    efcc:	b2da      	uxtb	r2, r3
    efce:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    efd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efd6:	701a      	strb	r2, [r3, #0]
    efd8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    efdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efe0:	781b      	ldrb	r3, [r3, #0]
    efe2:	2bff      	cmp	r3, #255	; 0xff
    efe4:	d105      	bne.n	eff2 <send_gps_pos+0x53a>
    efe6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    efea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efee:	2200      	movs	r2, #0
    eff0:	701a      	strb	r2, [r3, #0]
    eff2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    effa:	781b      	ldrb	r3, [r3, #0]
    effc:	461a      	mov	r2, r3
    effe:	f24c 0380 	movw	r3, #49280	; 0xc080
    f002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f006:	7899      	ldrb	r1, [r3, #2]
    f008:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f00c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f010:	5499      	strb	r1, [r3, r2]
    f012:	4b20      	ldr	r3, [pc, #128]	; (f094 <send_gps_pos+0x5dc>)
    f014:	781a      	ldrb	r2, [r3, #0]
    f016:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f01a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f01e:	781b      	ldrb	r3, [r3, #0]
    f020:	4413      	add	r3, r2
    f022:	b2da      	uxtb	r2, r3
    f024:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f02c:	701a      	strb	r2, [r3, #0]
    f02e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f036:	781a      	ldrb	r2, [r3, #0]
    f038:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f03c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f040:	781b      	ldrb	r3, [r3, #0]
    f042:	4413      	add	r3, r2
    f044:	b2da      	uxtb	r2, r3
    f046:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f04a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f04e:	701a      	strb	r2, [r3, #0]
    f050:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f058:	781b      	ldrb	r3, [r3, #0]
    f05a:	3301      	adds	r3, #1
    f05c:	b2da      	uxtb	r2, r3
    f05e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f066:	701a      	strb	r2, [r3, #0]
    f068:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f06c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f070:	781b      	ldrb	r3, [r3, #0]
    f072:	2bff      	cmp	r3, #255	; 0xff
    f074:	d110      	bne.n	f098 <send_gps_pos+0x5e0>
    f076:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f07a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f07e:	2200      	movs	r2, #0
    f080:	701a      	strb	r2, [r3, #0]
    f082:	e009      	b.n	f098 <send_gps_pos+0x5e0>
    f084:	2004c07d 	.word	0x2004c07d
    f088:	2004c07e 	.word	0x2004c07e
    f08c:	2004c07f 	.word	0x2004c07f
    f090:	2004c081 	.word	0x2004c081
    f094:	2004c082 	.word	0x2004c082
    f098:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f09c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0a0:	781b      	ldrb	r3, [r3, #0]
    f0a2:	461a      	mov	r2, r3
    f0a4:	f24c 0380 	movw	r3, #49280	; 0xc080
    f0a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ac:	78d9      	ldrb	r1, [r3, #3]
    f0ae:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f0b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0b6:	5499      	strb	r1, [r3, r2]
    f0b8:	4bd3      	ldr	r3, [pc, #844]	; (f408 <send_gps_pos+0x950>)
    f0ba:	781a      	ldrb	r2, [r3, #0]
    f0bc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f0c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0c4:	781b      	ldrb	r3, [r3, #0]
    f0c6:	4413      	add	r3, r2
    f0c8:	b2da      	uxtb	r2, r3
    f0ca:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f0ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0d2:	701a      	strb	r2, [r3, #0]
    f0d4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f0d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0dc:	781a      	ldrb	r2, [r3, #0]
    f0de:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f0e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0e6:	781b      	ldrb	r3, [r3, #0]
    f0e8:	4413      	add	r3, r2
    f0ea:	b2da      	uxtb	r2, r3
    f0ec:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0f4:	701a      	strb	r2, [r3, #0]
    f0f6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f0fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0fe:	781b      	ldrb	r3, [r3, #0]
    f100:	3301      	adds	r3, #1
    f102:	b2da      	uxtb	r2, r3
    f104:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f10c:	701a      	strb	r2, [r3, #0]
    f10e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f116:	781b      	ldrb	r3, [r3, #0]
    f118:	2bff      	cmp	r3, #255	; 0xff
    f11a:	d105      	bne.n	f128 <send_gps_pos+0x670>
    f11c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f124:	2200      	movs	r2, #0
    f126:	701a      	strb	r2, [r3, #0]
    f128:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f12c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f130:	781b      	ldrb	r3, [r3, #0]
    f132:	461a      	mov	r2, r3
    f134:	f24c 0378 	movw	r3, #49272	; 0xc078
    f138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f13c:	7819      	ldrb	r1, [r3, #0]
    f13e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f146:	5499      	strb	r1, [r3, r2]
    f148:	f24c 0378 	movw	r3, #49272	; 0xc078
    f14c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f150:	781a      	ldrb	r2, [r3, #0]
    f152:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f15a:	781b      	ldrb	r3, [r3, #0]
    f15c:	4413      	add	r3, r2
    f15e:	b2da      	uxtb	r2, r3
    f160:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f168:	701a      	strb	r2, [r3, #0]
    f16a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f16e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f172:	781a      	ldrb	r2, [r3, #0]
    f174:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f17c:	781b      	ldrb	r3, [r3, #0]
    f17e:	4413      	add	r3, r2
    f180:	b2da      	uxtb	r2, r3
    f182:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f18a:	701a      	strb	r2, [r3, #0]
    f18c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f194:	781b      	ldrb	r3, [r3, #0]
    f196:	3301      	adds	r3, #1
    f198:	b2da      	uxtb	r2, r3
    f19a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f19e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1a2:	701a      	strb	r2, [r3, #0]
    f1a4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f1a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1ac:	781b      	ldrb	r3, [r3, #0]
    f1ae:	2bff      	cmp	r3, #255	; 0xff
    f1b0:	d105      	bne.n	f1be <send_gps_pos+0x706>
    f1b2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f1b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1ba:	2200      	movs	r2, #0
    f1bc:	701a      	strb	r2, [r3, #0]
    f1be:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f1c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1c6:	781b      	ldrb	r3, [r3, #0]
    f1c8:	461a      	mov	r2, r3
    f1ca:	f24c 0378 	movw	r3, #49272	; 0xc078
    f1ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1d2:	7859      	ldrb	r1, [r3, #1]
    f1d4:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f1d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1dc:	5499      	strb	r1, [r3, r2]
    f1de:	4b8b      	ldr	r3, [pc, #556]	; (f40c <send_gps_pos+0x954>)
    f1e0:	781a      	ldrb	r2, [r3, #0]
    f1e2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f1e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1ea:	781b      	ldrb	r3, [r3, #0]
    f1ec:	4413      	add	r3, r2
    f1ee:	b2da      	uxtb	r2, r3
    f1f0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f1f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1f8:	701a      	strb	r2, [r3, #0]
    f1fa:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f1fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f202:	781a      	ldrb	r2, [r3, #0]
    f204:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f20c:	781b      	ldrb	r3, [r3, #0]
    f20e:	4413      	add	r3, r2
    f210:	b2da      	uxtb	r2, r3
    f212:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f21a:	701a      	strb	r2, [r3, #0]
    f21c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f224:	781b      	ldrb	r3, [r3, #0]
    f226:	3301      	adds	r3, #1
    f228:	b2da      	uxtb	r2, r3
    f22a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f22e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f232:	701a      	strb	r2, [r3, #0]
    f234:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f23c:	781b      	ldrb	r3, [r3, #0]
    f23e:	2bff      	cmp	r3, #255	; 0xff
    f240:	d105      	bne.n	f24e <send_gps_pos+0x796>
    f242:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f246:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f24a:	2200      	movs	r2, #0
    f24c:	701a      	strb	r2, [r3, #0]
    f24e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f256:	781b      	ldrb	r3, [r3, #0]
    f258:	461a      	mov	r2, r3
    f25a:	f24c 0378 	movw	r3, #49272	; 0xc078
    f25e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f262:	7899      	ldrb	r1, [r3, #2]
    f264:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f26c:	5499      	strb	r1, [r3, r2]
    f26e:	4b68      	ldr	r3, [pc, #416]	; (f410 <send_gps_pos+0x958>)
    f270:	781a      	ldrb	r2, [r3, #0]
    f272:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f27a:	781b      	ldrb	r3, [r3, #0]
    f27c:	4413      	add	r3, r2
    f27e:	b2da      	uxtb	r2, r3
    f280:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f288:	701a      	strb	r2, [r3, #0]
    f28a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f28e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f292:	781a      	ldrb	r2, [r3, #0]
    f294:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f29c:	781b      	ldrb	r3, [r3, #0]
    f29e:	4413      	add	r3, r2
    f2a0:	b2da      	uxtb	r2, r3
    f2a2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f2a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2aa:	701a      	strb	r2, [r3, #0]
    f2ac:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f2b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2b4:	781b      	ldrb	r3, [r3, #0]
    f2b6:	3301      	adds	r3, #1
    f2b8:	b2da      	uxtb	r2, r3
    f2ba:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f2be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2c2:	701a      	strb	r2, [r3, #0]
    f2c4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f2c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2cc:	781b      	ldrb	r3, [r3, #0]
    f2ce:	2bff      	cmp	r3, #255	; 0xff
    f2d0:	d105      	bne.n	f2de <send_gps_pos+0x826>
    f2d2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f2d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2da:	2200      	movs	r2, #0
    f2dc:	701a      	strb	r2, [r3, #0]
    f2de:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2e6:	781b      	ldrb	r3, [r3, #0]
    f2e8:	461a      	mov	r2, r3
    f2ea:	f24c 0378 	movw	r3, #49272	; 0xc078
    f2ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2f2:	78d9      	ldrb	r1, [r3, #3]
    f2f4:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f2f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2fc:	5499      	strb	r1, [r3, r2]
    f2fe:	4b45      	ldr	r3, [pc, #276]	; (f414 <send_gps_pos+0x95c>)
    f300:	781a      	ldrb	r2, [r3, #0]
    f302:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f30a:	781b      	ldrb	r3, [r3, #0]
    f30c:	4413      	add	r3, r2
    f30e:	b2da      	uxtb	r2, r3
    f310:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f318:	701a      	strb	r2, [r3, #0]
    f31a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f31e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f322:	781a      	ldrb	r2, [r3, #0]
    f324:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f32c:	781b      	ldrb	r3, [r3, #0]
    f32e:	4413      	add	r3, r2
    f330:	b2da      	uxtb	r2, r3
    f332:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f33a:	701a      	strb	r2, [r3, #0]
    f33c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f344:	781b      	ldrb	r3, [r3, #0]
    f346:	3301      	adds	r3, #1
    f348:	b2da      	uxtb	r2, r3
    f34a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f34e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f352:	701a      	strb	r2, [r3, #0]
    f354:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f35c:	781b      	ldrb	r3, [r3, #0]
    f35e:	2bff      	cmp	r3, #255	; 0xff
    f360:	d105      	bne.n	f36e <send_gps_pos+0x8b6>
    f362:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f36a:	2200      	movs	r2, #0
    f36c:	701a      	strb	r2, [r3, #0]
    f36e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f376:	781b      	ldrb	r3, [r3, #0]
    f378:	461a      	mov	r2, r3
    f37a:	f24c 036c 	movw	r3, #49260	; 0xc06c
    f37e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f382:	7819      	ldrb	r1, [r3, #0]
    f384:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f38c:	5499      	strb	r1, [r3, r2]
    f38e:	f24c 036c 	movw	r3, #49260	; 0xc06c
    f392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f396:	781a      	ldrb	r2, [r3, #0]
    f398:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f39c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3a0:	781b      	ldrb	r3, [r3, #0]
    f3a2:	4413      	add	r3, r2
    f3a4:	b2da      	uxtb	r2, r3
    f3a6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f3aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ae:	701a      	strb	r2, [r3, #0]
    f3b0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f3b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3b8:	781a      	ldrb	r2, [r3, #0]
    f3ba:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f3be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3c2:	781b      	ldrb	r3, [r3, #0]
    f3c4:	4413      	add	r3, r2
    f3c6:	b2da      	uxtb	r2, r3
    f3c8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f3cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3d0:	701a      	strb	r2, [r3, #0]
    f3d2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f3d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3da:	781b      	ldrb	r3, [r3, #0]
    f3dc:	3301      	adds	r3, #1
    f3de:	b2da      	uxtb	r2, r3
    f3e0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f3e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3e8:	701a      	strb	r2, [r3, #0]
    f3ea:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f3ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3f2:	781b      	ldrb	r3, [r3, #0]
    f3f4:	2bff      	cmp	r3, #255	; 0xff
    f3f6:	d10f      	bne.n	f418 <send_gps_pos+0x960>
    f3f8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f3fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f400:	2200      	movs	r2, #0
    f402:	701a      	strb	r2, [r3, #0]
    f404:	e008      	b.n	f418 <send_gps_pos+0x960>
    f406:	bf00      	nop
    f408:	2004c083 	.word	0x2004c083
    f40c:	2004c079 	.word	0x2004c079
    f410:	2004c07a 	.word	0x2004c07a
    f414:	2004c07b 	.word	0x2004c07b
    f418:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f41c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f420:	781b      	ldrb	r3, [r3, #0]
    f422:	461a      	mov	r2, r3
    f424:	f24c 036c 	movw	r3, #49260	; 0xc06c
    f428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f42c:	7859      	ldrb	r1, [r3, #1]
    f42e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f436:	5499      	strb	r1, [r3, r2]
    f438:	4bd1      	ldr	r3, [pc, #836]	; (f780 <send_gps_pos+0xcc8>)
    f43a:	781a      	ldrb	r2, [r3, #0]
    f43c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f444:	781b      	ldrb	r3, [r3, #0]
    f446:	4413      	add	r3, r2
    f448:	b2da      	uxtb	r2, r3
    f44a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f44e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f452:	701a      	strb	r2, [r3, #0]
    f454:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f45c:	781a      	ldrb	r2, [r3, #0]
    f45e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f466:	781b      	ldrb	r3, [r3, #0]
    f468:	4413      	add	r3, r2
    f46a:	b2da      	uxtb	r2, r3
    f46c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f474:	701a      	strb	r2, [r3, #0]
    f476:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f47a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f47e:	781b      	ldrb	r3, [r3, #0]
    f480:	3301      	adds	r3, #1
    f482:	b2da      	uxtb	r2, r3
    f484:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f48c:	701a      	strb	r2, [r3, #0]
    f48e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f496:	781b      	ldrb	r3, [r3, #0]
    f498:	2bff      	cmp	r3, #255	; 0xff
    f49a:	d105      	bne.n	f4a8 <send_gps_pos+0x9f0>
    f49c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f4a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4a4:	2200      	movs	r2, #0
    f4a6:	701a      	strb	r2, [r3, #0]
    f4a8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f4ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4b0:	781b      	ldrb	r3, [r3, #0]
    f4b2:	461a      	mov	r2, r3
    f4b4:	f24c 036c 	movw	r3, #49260	; 0xc06c
    f4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4bc:	7899      	ldrb	r1, [r3, #2]
    f4be:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f4c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4c6:	5499      	strb	r1, [r3, r2]
    f4c8:	4bae      	ldr	r3, [pc, #696]	; (f784 <send_gps_pos+0xccc>)
    f4ca:	781a      	ldrb	r2, [r3, #0]
    f4cc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f4d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4d4:	781b      	ldrb	r3, [r3, #0]
    f4d6:	4413      	add	r3, r2
    f4d8:	b2da      	uxtb	r2, r3
    f4da:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f4de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4e2:	701a      	strb	r2, [r3, #0]
    f4e4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f4e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ec:	781a      	ldrb	r2, [r3, #0]
    f4ee:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f4f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4f6:	781b      	ldrb	r3, [r3, #0]
    f4f8:	4413      	add	r3, r2
    f4fa:	b2da      	uxtb	r2, r3
    f4fc:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f504:	701a      	strb	r2, [r3, #0]
    f506:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f50a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f50e:	781b      	ldrb	r3, [r3, #0]
    f510:	3301      	adds	r3, #1
    f512:	b2da      	uxtb	r2, r3
    f514:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f51c:	701a      	strb	r2, [r3, #0]
    f51e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f526:	781b      	ldrb	r3, [r3, #0]
    f528:	2bff      	cmp	r3, #255	; 0xff
    f52a:	d105      	bne.n	f538 <send_gps_pos+0xa80>
    f52c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f534:	2200      	movs	r2, #0
    f536:	701a      	strb	r2, [r3, #0]
    f538:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f53c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f540:	781b      	ldrb	r3, [r3, #0]
    f542:	461a      	mov	r2, r3
    f544:	f24c 036c 	movw	r3, #49260	; 0xc06c
    f548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f54c:	78d9      	ldrb	r1, [r3, #3]
    f54e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f556:	5499      	strb	r1, [r3, r2]
    f558:	4b8b      	ldr	r3, [pc, #556]	; (f788 <send_gps_pos+0xcd0>)
    f55a:	781a      	ldrb	r2, [r3, #0]
    f55c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f564:	781b      	ldrb	r3, [r3, #0]
    f566:	4413      	add	r3, r2
    f568:	b2da      	uxtb	r2, r3
    f56a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f56e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f572:	701a      	strb	r2, [r3, #0]
    f574:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f57c:	781a      	ldrb	r2, [r3, #0]
    f57e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f582:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f586:	781b      	ldrb	r3, [r3, #0]
    f588:	4413      	add	r3, r2
    f58a:	b2da      	uxtb	r2, r3
    f58c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f594:	701a      	strb	r2, [r3, #0]
    f596:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f59a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f59e:	781b      	ldrb	r3, [r3, #0]
    f5a0:	3301      	adds	r3, #1
    f5a2:	b2da      	uxtb	r2, r3
    f5a4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ac:	701a      	strb	r2, [r3, #0]
    f5ae:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f5b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5b6:	781b      	ldrb	r3, [r3, #0]
    f5b8:	2bff      	cmp	r3, #255	; 0xff
    f5ba:	d105      	bne.n	f5c8 <send_gps_pos+0xb10>
    f5bc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f5c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5c4:	2200      	movs	r2, #0
    f5c6:	701a      	strb	r2, [r3, #0]
    f5c8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f5cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5d0:	781b      	ldrb	r3, [r3, #0]
    f5d2:	461a      	mov	r2, r3
    f5d4:	f24c 0370 	movw	r3, #49264	; 0xc070
    f5d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5dc:	7819      	ldrb	r1, [r3, #0]
    f5de:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f5e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5e6:	5499      	strb	r1, [r3, r2]
    f5e8:	f24c 0370 	movw	r3, #49264	; 0xc070
    f5ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5f0:	781a      	ldrb	r2, [r3, #0]
    f5f2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f5f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5fa:	781b      	ldrb	r3, [r3, #0]
    f5fc:	4413      	add	r3, r2
    f5fe:	b2da      	uxtb	r2, r3
    f600:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f608:	701a      	strb	r2, [r3, #0]
    f60a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f60e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f612:	781a      	ldrb	r2, [r3, #0]
    f614:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f61c:	781b      	ldrb	r3, [r3, #0]
    f61e:	4413      	add	r3, r2
    f620:	b2da      	uxtb	r2, r3
    f622:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f62a:	701a      	strb	r2, [r3, #0]
    f62c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f630:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f634:	781b      	ldrb	r3, [r3, #0]
    f636:	3301      	adds	r3, #1
    f638:	b2da      	uxtb	r2, r3
    f63a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f63e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f642:	701a      	strb	r2, [r3, #0]
    f644:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f64c:	781b      	ldrb	r3, [r3, #0]
    f64e:	2bff      	cmp	r3, #255	; 0xff
    f650:	d105      	bne.n	f65e <send_gps_pos+0xba6>
    f652:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f65a:	2200      	movs	r2, #0
    f65c:	701a      	strb	r2, [r3, #0]
    f65e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f666:	781b      	ldrb	r3, [r3, #0]
    f668:	461a      	mov	r2, r3
    f66a:	f24c 0370 	movw	r3, #49264	; 0xc070
    f66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f672:	7859      	ldrb	r1, [r3, #1]
    f674:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f67c:	5499      	strb	r1, [r3, r2]
    f67e:	4b43      	ldr	r3, [pc, #268]	; (f78c <send_gps_pos+0xcd4>)
    f680:	781a      	ldrb	r2, [r3, #0]
    f682:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f68a:	781b      	ldrb	r3, [r3, #0]
    f68c:	4413      	add	r3, r2
    f68e:	b2da      	uxtb	r2, r3
    f690:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f698:	701a      	strb	r2, [r3, #0]
    f69a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f69e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6a2:	781a      	ldrb	r2, [r3, #0]
    f6a4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f6a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ac:	781b      	ldrb	r3, [r3, #0]
    f6ae:	4413      	add	r3, r2
    f6b0:	b2da      	uxtb	r2, r3
    f6b2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f6b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ba:	701a      	strb	r2, [r3, #0]
    f6bc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f6c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6c4:	781b      	ldrb	r3, [r3, #0]
    f6c6:	3301      	adds	r3, #1
    f6c8:	b2da      	uxtb	r2, r3
    f6ca:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f6ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6d2:	701a      	strb	r2, [r3, #0]
    f6d4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f6d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6dc:	781b      	ldrb	r3, [r3, #0]
    f6de:	2bff      	cmp	r3, #255	; 0xff
    f6e0:	d105      	bne.n	f6ee <send_gps_pos+0xc36>
    f6e2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f6e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ea:	2200      	movs	r2, #0
    f6ec:	701a      	strb	r2, [r3, #0]
    f6ee:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f6f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6f6:	781b      	ldrb	r3, [r3, #0]
    f6f8:	461a      	mov	r2, r3
    f6fa:	f24c 0370 	movw	r3, #49264	; 0xc070
    f6fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f702:	7899      	ldrb	r1, [r3, #2]
    f704:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f70c:	5499      	strb	r1, [r3, r2]
    f70e:	4b20      	ldr	r3, [pc, #128]	; (f790 <send_gps_pos+0xcd8>)
    f710:	781a      	ldrb	r2, [r3, #0]
    f712:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f716:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f71a:	781b      	ldrb	r3, [r3, #0]
    f71c:	4413      	add	r3, r2
    f71e:	b2da      	uxtb	r2, r3
    f720:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f728:	701a      	strb	r2, [r3, #0]
    f72a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f72e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f732:	781a      	ldrb	r2, [r3, #0]
    f734:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f738:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f73c:	781b      	ldrb	r3, [r3, #0]
    f73e:	4413      	add	r3, r2
    f740:	b2da      	uxtb	r2, r3
    f742:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f74a:	701a      	strb	r2, [r3, #0]
    f74c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f754:	781b      	ldrb	r3, [r3, #0]
    f756:	3301      	adds	r3, #1
    f758:	b2da      	uxtb	r2, r3
    f75a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f75e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f762:	701a      	strb	r2, [r3, #0]
    f764:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f76c:	781b      	ldrb	r3, [r3, #0]
    f76e:	2bff      	cmp	r3, #255	; 0xff
    f770:	d110      	bne.n	f794 <send_gps_pos+0xcdc>
    f772:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f776:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f77a:	2200      	movs	r2, #0
    f77c:	701a      	strb	r2, [r3, #0]
    f77e:	e009      	b.n	f794 <send_gps_pos+0xcdc>
    f780:	2004c06d 	.word	0x2004c06d
    f784:	2004c06e 	.word	0x2004c06e
    f788:	2004c06f 	.word	0x2004c06f
    f78c:	2004c071 	.word	0x2004c071
    f790:	2004c072 	.word	0x2004c072
    f794:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f79c:	781b      	ldrb	r3, [r3, #0]
    f79e:	461a      	mov	r2, r3
    f7a0:	f24c 0370 	movw	r3, #49264	; 0xc070
    f7a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7a8:	78d9      	ldrb	r1, [r3, #3]
    f7aa:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f7ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7b2:	5499      	strb	r1, [r3, r2]
    f7b4:	4bd3      	ldr	r3, [pc, #844]	; (fb04 <send_gps_pos+0x104c>)
    f7b6:	781a      	ldrb	r2, [r3, #0]
    f7b8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f7bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7c0:	781b      	ldrb	r3, [r3, #0]
    f7c2:	4413      	add	r3, r2
    f7c4:	b2da      	uxtb	r2, r3
    f7c6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f7ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7ce:	701a      	strb	r2, [r3, #0]
    f7d0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f7d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7d8:	781a      	ldrb	r2, [r3, #0]
    f7da:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f7de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7e2:	781b      	ldrb	r3, [r3, #0]
    f7e4:	4413      	add	r3, r2
    f7e6:	b2da      	uxtb	r2, r3
    f7e8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7f0:	701a      	strb	r2, [r3, #0]
    f7f2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f7f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7fa:	781b      	ldrb	r3, [r3, #0]
    f7fc:	3301      	adds	r3, #1
    f7fe:	b2da      	uxtb	r2, r3
    f800:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f808:	701a      	strb	r2, [r3, #0]
    f80a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f80e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f812:	781b      	ldrb	r3, [r3, #0]
    f814:	2bff      	cmp	r3, #255	; 0xff
    f816:	d105      	bne.n	f824 <send_gps_pos+0xd6c>
    f818:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f81c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f820:	2200      	movs	r2, #0
    f822:	701a      	strb	r2, [r3, #0]
    f824:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f82c:	781b      	ldrb	r3, [r3, #0]
    f82e:	461a      	mov	r2, r3
    f830:	f24c 0374 	movw	r3, #49268	; 0xc074
    f834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f838:	7819      	ldrb	r1, [r3, #0]
    f83a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f83e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f842:	5499      	strb	r1, [r3, r2]
    f844:	f24c 0374 	movw	r3, #49268	; 0xc074
    f848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f84c:	781a      	ldrb	r2, [r3, #0]
    f84e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f856:	781b      	ldrb	r3, [r3, #0]
    f858:	4413      	add	r3, r2
    f85a:	b2da      	uxtb	r2, r3
    f85c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f864:	701a      	strb	r2, [r3, #0]
    f866:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f86a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f86e:	781a      	ldrb	r2, [r3, #0]
    f870:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f878:	781b      	ldrb	r3, [r3, #0]
    f87a:	4413      	add	r3, r2
    f87c:	b2da      	uxtb	r2, r3
    f87e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f886:	701a      	strb	r2, [r3, #0]
    f888:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f88c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f890:	781b      	ldrb	r3, [r3, #0]
    f892:	3301      	adds	r3, #1
    f894:	b2da      	uxtb	r2, r3
    f896:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f89e:	701a      	strb	r2, [r3, #0]
    f8a0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8a8:	781b      	ldrb	r3, [r3, #0]
    f8aa:	2bff      	cmp	r3, #255	; 0xff
    f8ac:	d105      	bne.n	f8ba <send_gps_pos+0xe02>
    f8ae:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8b6:	2200      	movs	r2, #0
    f8b8:	701a      	strb	r2, [r3, #0]
    f8ba:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f8be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8c2:	781b      	ldrb	r3, [r3, #0]
    f8c4:	461a      	mov	r2, r3
    f8c6:	f24c 0374 	movw	r3, #49268	; 0xc074
    f8ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ce:	7859      	ldrb	r1, [r3, #1]
    f8d0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f8d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8d8:	5499      	strb	r1, [r3, r2]
    f8da:	4b8b      	ldr	r3, [pc, #556]	; (fb08 <send_gps_pos+0x1050>)
    f8dc:	781a      	ldrb	r2, [r3, #0]
    f8de:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f8e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8e6:	781b      	ldrb	r3, [r3, #0]
    f8e8:	4413      	add	r3, r2
    f8ea:	b2da      	uxtb	r2, r3
    f8ec:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f8f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8f4:	701a      	strb	r2, [r3, #0]
    f8f6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f8fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8fe:	781a      	ldrb	r2, [r3, #0]
    f900:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f908:	781b      	ldrb	r3, [r3, #0]
    f90a:	4413      	add	r3, r2
    f90c:	b2da      	uxtb	r2, r3
    f90e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f916:	701a      	strb	r2, [r3, #0]
    f918:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f920:	781b      	ldrb	r3, [r3, #0]
    f922:	3301      	adds	r3, #1
    f924:	b2da      	uxtb	r2, r3
    f926:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f92a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f92e:	701a      	strb	r2, [r3, #0]
    f930:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f938:	781b      	ldrb	r3, [r3, #0]
    f93a:	2bff      	cmp	r3, #255	; 0xff
    f93c:	d105      	bne.n	f94a <send_gps_pos+0xe92>
    f93e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f946:	2200      	movs	r2, #0
    f948:	701a      	strb	r2, [r3, #0]
    f94a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f94e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f952:	781b      	ldrb	r3, [r3, #0]
    f954:	461a      	mov	r2, r3
    f956:	f24c 0374 	movw	r3, #49268	; 0xc074
    f95a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f95e:	7899      	ldrb	r1, [r3, #2]
    f960:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f968:	5499      	strb	r1, [r3, r2]
    f96a:	4b68      	ldr	r3, [pc, #416]	; (fb0c <send_gps_pos+0x1054>)
    f96c:	781a      	ldrb	r2, [r3, #0]
    f96e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f976:	781b      	ldrb	r3, [r3, #0]
    f978:	4413      	add	r3, r2
    f97a:	b2da      	uxtb	r2, r3
    f97c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f984:	701a      	strb	r2, [r3, #0]
    f986:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f98a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f98e:	781a      	ldrb	r2, [r3, #0]
    f990:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f998:	781b      	ldrb	r3, [r3, #0]
    f99a:	4413      	add	r3, r2
    f99c:	b2da      	uxtb	r2, r3
    f99e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f9a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9a6:	701a      	strb	r2, [r3, #0]
    f9a8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f9ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9b0:	781b      	ldrb	r3, [r3, #0]
    f9b2:	3301      	adds	r3, #1
    f9b4:	b2da      	uxtb	r2, r3
    f9b6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f9ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9be:	701a      	strb	r2, [r3, #0]
    f9c0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f9c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9c8:	781b      	ldrb	r3, [r3, #0]
    f9ca:	2bff      	cmp	r3, #255	; 0xff
    f9cc:	d105      	bne.n	f9da <send_gps_pos+0xf22>
    f9ce:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f9d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9d6:	2200      	movs	r2, #0
    f9d8:	701a      	strb	r2, [r3, #0]
    f9da:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f9de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9e2:	781b      	ldrb	r3, [r3, #0]
    f9e4:	461a      	mov	r2, r3
    f9e6:	f24c 0374 	movw	r3, #49268	; 0xc074
    f9ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9ee:	78d9      	ldrb	r1, [r3, #3]
    f9f0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f9f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9f8:	5499      	strb	r1, [r3, r2]
    f9fa:	4b45      	ldr	r3, [pc, #276]	; (fb10 <send_gps_pos+0x1058>)
    f9fc:	781a      	ldrb	r2, [r3, #0]
    f9fe:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fa02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa06:	781b      	ldrb	r3, [r3, #0]
    fa08:	4413      	add	r3, r2
    fa0a:	b2da      	uxtb	r2, r3
    fa0c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fa10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa14:	701a      	strb	r2, [r3, #0]
    fa16:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    fa1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa1e:	781a      	ldrb	r2, [r3, #0]
    fa20:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fa24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa28:	781b      	ldrb	r3, [r3, #0]
    fa2a:	4413      	add	r3, r2
    fa2c:	b2da      	uxtb	r2, r3
    fa2e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    fa32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa36:	701a      	strb	r2, [r3, #0]
    fa38:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fa3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa40:	781b      	ldrb	r3, [r3, #0]
    fa42:	3301      	adds	r3, #1
    fa44:	b2da      	uxtb	r2, r3
    fa46:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fa4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa4e:	701a      	strb	r2, [r3, #0]
    fa50:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fa54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa58:	781b      	ldrb	r3, [r3, #0]
    fa5a:	2bff      	cmp	r3, #255	; 0xff
    fa5c:	d105      	bne.n	fa6a <send_gps_pos+0xfb2>
    fa5e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fa62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa66:	2200      	movs	r2, #0
    fa68:	701a      	strb	r2, [r3, #0]
    fa6a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fa6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa72:	781b      	ldrb	r3, [r3, #0]
    fa74:	461a      	mov	r2, r3
    fa76:	f24c 0368 	movw	r3, #49256	; 0xc068
    fa7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa7e:	7819      	ldrb	r1, [r3, #0]
    fa80:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    fa84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa88:	5499      	strb	r1, [r3, r2]
    fa8a:	f24c 0368 	movw	r3, #49256	; 0xc068
    fa8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa92:	781a      	ldrb	r2, [r3, #0]
    fa94:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fa98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa9c:	781b      	ldrb	r3, [r3, #0]
    fa9e:	4413      	add	r3, r2
    faa0:	b2da      	uxtb	r2, r3
    faa2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    faa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faaa:	701a      	strb	r2, [r3, #0]
    faac:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    fab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fab4:	781a      	ldrb	r2, [r3, #0]
    fab6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    faba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fabe:	781b      	ldrb	r3, [r3, #0]
    fac0:	4413      	add	r3, r2
    fac2:	b2da      	uxtb	r2, r3
    fac4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    fac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    facc:	701a      	strb	r2, [r3, #0]
    face:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fad6:	781b      	ldrb	r3, [r3, #0]
    fad8:	3301      	adds	r3, #1
    fada:	b2da      	uxtb	r2, r3
    fadc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fae4:	701a      	strb	r2, [r3, #0]
    fae6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    faea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faee:	781b      	ldrb	r3, [r3, #0]
    faf0:	2bff      	cmp	r3, #255	; 0xff
    faf2:	d10f      	bne.n	fb14 <send_gps_pos+0x105c>
    faf4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    faf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fafc:	2200      	movs	r2, #0
    fafe:	701a      	strb	r2, [r3, #0]
    fb00:	e008      	b.n	fb14 <send_gps_pos+0x105c>
    fb02:	bf00      	nop
    fb04:	2004c073 	.word	0x2004c073
    fb08:	2004c075 	.word	0x2004c075
    fb0c:	2004c076 	.word	0x2004c076
    fb10:	2004c077 	.word	0x2004c077
    fb14:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fb18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb1c:	781b      	ldrb	r3, [r3, #0]
    fb1e:	461a      	mov	r2, r3
    fb20:	f24c 0368 	movw	r3, #49256	; 0xc068
    fb24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb28:	7859      	ldrb	r1, [r3, #1]
    fb2a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    fb2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb32:	5499      	strb	r1, [r3, r2]
    fb34:	4bc0      	ldr	r3, [pc, #768]	; (fe38 <send_gps_pos+0x1380>)
    fb36:	781a      	ldrb	r2, [r3, #0]
    fb38:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fb3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb40:	781b      	ldrb	r3, [r3, #0]
    fb42:	4413      	add	r3, r2
    fb44:	b2da      	uxtb	r2, r3
    fb46:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fb4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb4e:	701a      	strb	r2, [r3, #0]
    fb50:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    fb54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb58:	781a      	ldrb	r2, [r3, #0]
    fb5a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fb5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb62:	781b      	ldrb	r3, [r3, #0]
    fb64:	4413      	add	r3, r2
    fb66:	b2da      	uxtb	r2, r3
    fb68:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    fb6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb70:	701a      	strb	r2, [r3, #0]
    fb72:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fb76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb7a:	781b      	ldrb	r3, [r3, #0]
    fb7c:	3301      	adds	r3, #1
    fb7e:	b2da      	uxtb	r2, r3
    fb80:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fb84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb88:	701a      	strb	r2, [r3, #0]
    fb8a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fb8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb92:	781b      	ldrb	r3, [r3, #0]
    fb94:	2bff      	cmp	r3, #255	; 0xff
    fb96:	d105      	bne.n	fba4 <send_gps_pos+0x10ec>
    fb98:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fb9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fba0:	2200      	movs	r2, #0
    fba2:	701a      	strb	r2, [r3, #0]
    fba4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbac:	781b      	ldrb	r3, [r3, #0]
    fbae:	461a      	mov	r2, r3
    fbb0:	f24c 0368 	movw	r3, #49256	; 0xc068
    fbb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbb8:	7899      	ldrb	r1, [r3, #2]
    fbba:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    fbbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbc2:	5499      	strb	r1, [r3, r2]
    fbc4:	4b9d      	ldr	r3, [pc, #628]	; (fe3c <send_gps_pos+0x1384>)
    fbc6:	781a      	ldrb	r2, [r3, #0]
    fbc8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fbcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbd0:	781b      	ldrb	r3, [r3, #0]
    fbd2:	4413      	add	r3, r2
    fbd4:	b2da      	uxtb	r2, r3
    fbd6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fbda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbde:	701a      	strb	r2, [r3, #0]
    fbe0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    fbe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbe8:	781a      	ldrb	r2, [r3, #0]
    fbea:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fbee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbf2:	781b      	ldrb	r3, [r3, #0]
    fbf4:	4413      	add	r3, r2
    fbf6:	b2da      	uxtb	r2, r3
    fbf8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    fbfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc00:	701a      	strb	r2, [r3, #0]
    fc02:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fc06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc0a:	781b      	ldrb	r3, [r3, #0]
    fc0c:	3301      	adds	r3, #1
    fc0e:	b2da      	uxtb	r2, r3
    fc10:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fc14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc18:	701a      	strb	r2, [r3, #0]
    fc1a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fc1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc22:	781b      	ldrb	r3, [r3, #0]
    fc24:	2bff      	cmp	r3, #255	; 0xff
    fc26:	d105      	bne.n	fc34 <send_gps_pos+0x117c>
    fc28:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fc2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc30:	2200      	movs	r2, #0
    fc32:	701a      	strb	r2, [r3, #0]
    fc34:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fc38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc3c:	781b      	ldrb	r3, [r3, #0]
    fc3e:	461a      	mov	r2, r3
    fc40:	f24c 0368 	movw	r3, #49256	; 0xc068
    fc44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc48:	78d9      	ldrb	r1, [r3, #3]
    fc4a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    fc4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc52:	5499      	strb	r1, [r3, r2]
    fc54:	4b7a      	ldr	r3, [pc, #488]	; (fe40 <send_gps_pos+0x1388>)
    fc56:	781a      	ldrb	r2, [r3, #0]
    fc58:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fc5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc60:	781b      	ldrb	r3, [r3, #0]
    fc62:	4413      	add	r3, r2
    fc64:	b2da      	uxtb	r2, r3
    fc66:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fc6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc6e:	701a      	strb	r2, [r3, #0]
    fc70:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    fc74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc78:	781a      	ldrb	r2, [r3, #0]
    fc7a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fc7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc82:	781b      	ldrb	r3, [r3, #0]
    fc84:	4413      	add	r3, r2
    fc86:	b2da      	uxtb	r2, r3
    fc88:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    fc8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc90:	701a      	strb	r2, [r3, #0]
    fc92:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fc96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc9a:	781b      	ldrb	r3, [r3, #0]
    fc9c:	3301      	adds	r3, #1
    fc9e:	b2da      	uxtb	r2, r3
    fca0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fca8:	701a      	strb	r2, [r3, #0]
    fcaa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fcae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcb2:	781b      	ldrb	r3, [r3, #0]
    fcb4:	2bff      	cmp	r3, #255	; 0xff
    fcb6:	d105      	bne.n	fcc4 <send_gps_pos+0x120c>
    fcb8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fcbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcc0:	2200      	movs	r2, #0
    fcc2:	701a      	strb	r2, [r3, #0]
    fcc4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fcc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fccc:	781b      	ldrb	r3, [r3, #0]
    fcce:	461a      	mov	r2, r3
    fcd0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fcd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcd8:	7819      	ldrb	r1, [r3, #0]
    fcda:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    fcde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fce2:	5499      	strb	r1, [r3, r2]
    fce4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcec:	781b      	ldrb	r3, [r3, #0]
    fcee:	3301      	adds	r3, #1
    fcf0:	b2da      	uxtb	r2, r3
    fcf2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fcf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcfa:	701a      	strb	r2, [r3, #0]
    fcfc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fd00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd04:	781b      	ldrb	r3, [r3, #0]
    fd06:	2bff      	cmp	r3, #255	; 0xff
    fd08:	d105      	bne.n	fd16 <send_gps_pos+0x125e>
    fd0a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fd0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd12:	2200      	movs	r2, #0
    fd14:	701a      	strb	r2, [r3, #0]
    fd16:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fd1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd1e:	781b      	ldrb	r3, [r3, #0]
    fd20:	461a      	mov	r2, r3
    fd22:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    fd26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd2a:	7819      	ldrb	r1, [r3, #0]
    fd2c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    fd30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd34:	5499      	strb	r1, [r3, r2]
    fd36:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fd3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd3e:	781b      	ldrb	r3, [r3, #0]
    fd40:	3301      	adds	r3, #1
    fd42:	b2da      	uxtb	r2, r3
    fd44:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fd48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd4c:	701a      	strb	r2, [r3, #0]
    fd4e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fd52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd56:	781b      	ldrb	r3, [r3, #0]
    fd58:	2bff      	cmp	r3, #255	; 0xff
    fd5a:	d105      	bne.n	fd68 <send_gps_pos+0x12b0>
    fd5c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fd60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd64:	2200      	movs	r2, #0
    fd66:	701a      	strb	r2, [r3, #0]
    fd68:	f242 0339 	movw	r3, #8249	; 0x2039
    fd6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd70:	781b      	ldrb	r3, [r3, #0]
    fd72:	b2db      	uxtb	r3, r3
    fd74:	f003 0310 	and.w	r3, r3, #16
    fd78:	2b00      	cmp	r3, #0
    fd7a:	d15a      	bne.n	fe32 <send_gps_pos+0x137a>
    fd7c:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    fd80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd84:	781b      	ldrb	r3, [r3, #0]
    fd86:	b2db      	uxtb	r3, r3
    fd88:	461a      	mov	r2, r3
    fd8a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    fd8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd92:	5c9a      	ldrb	r2, [r3, r2]
    fd94:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    fd98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd9c:	701a      	strb	r2, [r3, #0]
    fd9e:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    fda2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fda6:	2200      	movs	r2, #0
    fda8:	701a      	strb	r2, [r3, #0]
    fdaa:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    fdae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdb2:	781b      	ldrb	r3, [r3, #0]
    fdb4:	b2db      	uxtb	r3, r3
    fdb6:	3301      	adds	r3, #1
    fdb8:	b2da      	uxtb	r2, r3
    fdba:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    fdbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdc2:	701a      	strb	r2, [r3, #0]
    fdc4:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    fdc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdcc:	781b      	ldrb	r3, [r3, #0]
    fdce:	b2db      	uxtb	r3, r3
    fdd0:	2bff      	cmp	r3, #255	; 0xff
    fdd2:	d105      	bne.n	fde0 <send_gps_pos+0x1328>
    fdd4:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    fdd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fddc:	2200      	movs	r2, #0
    fdde:	701a      	strb	r2, [r3, #0]
    fde0:	f242 0338 	movw	r3, #8248	; 0x2038
    fde4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fde8:	f242 0238 	movw	r2, #8248	; 0x2038
    fdec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fdf0:	7812      	ldrb	r2, [r2, #0]
    fdf2:	b2d2      	uxtb	r2, r2
    fdf4:	f042 0201 	orr.w	r2, r2, #1
    fdf8:	b2d2      	uxtb	r2, r2
    fdfa:	701a      	strb	r2, [r3, #0]
    fdfc:	f242 0339 	movw	r3, #8249	; 0x2039
    fe00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe04:	f242 0239 	movw	r2, #8249	; 0x2039
    fe08:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fe0c:	7812      	ldrb	r2, [r2, #0]
    fe0e:	b2d2      	uxtb	r2, r2
    fe10:	f042 0210 	orr.w	r2, r2, #16
    fe14:	b2d2      	uxtb	r2, r2
    fe16:	701a      	strb	r2, [r3, #0]
    fe18:	e00b      	b.n	fe32 <send_gps_pos+0x137a>
    fe1a:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    fe1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe22:	781b      	ldrb	r3, [r3, #0]
    fe24:	3301      	adds	r3, #1
    fe26:	b2da      	uxtb	r2, r3
    fe28:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    fe2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe30:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
    fe32:	f005 fbfd 	bl	15630 <estimator_update_state_gps>
  }
}
    fe36:	bd80      	pop	{r7, pc}
    fe38:	2004c069 	.word	0x2004c069
    fe3c:	2004c06a 	.word	0x2004c06a
    fe40:	2004c06b 	.word	0x2004c06b

0000fe44 <send_radIR>:

void send_radIR(void){
    fe44:	b480      	push	{r7}
    fe46:	af00      	add	r7, sp, #0
  if (gps_pos_available)
    fe48:	f24c 038e 	movw	r3, #49294	; 0xc08e
    fe4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe50:	781b      	ldrb	r3, [r3, #0]
    fe52:	2b00      	cmp	r3, #0
    fe54:	f000 85e8 	beq.w	10a28 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    fe58:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fe5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe60:	781a      	ldrb	r2, [r3, #0]
    fe62:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    fe66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe6a:	781b      	ldrb	r3, [r3, #0]
    fe6c:	b2db      	uxtb	r3, r3
    fe6e:	429a      	cmp	r2, r3
    fe70:	d313      	bcc.n	fe9a <send_radIR+0x56>
    fe72:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    fe76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe7a:	781b      	ldrb	r3, [r3, #0]
    fe7c:	b2db      	uxtb	r3, r3
    fe7e:	461a      	mov	r2, r3
    fe80:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fe84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe88:	781b      	ldrb	r3, [r3, #0]
    fe8a:	1ad3      	subs	r3, r2, r3
    fe8c:	33ff      	adds	r3, #255	; 0xff
    fe8e:	2b14      	cmp	r3, #20
    fe90:	bfd4      	ite	le
    fe92:	2300      	movle	r3, #0
    fe94:	2301      	movgt	r3, #1
    fe96:	b2db      	uxtb	r3, r3
    fe98:	e011      	b.n	febe <send_radIR+0x7a>
    fe9a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    fe9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fea2:	781b      	ldrb	r3, [r3, #0]
    fea4:	b2db      	uxtb	r3, r3
    fea6:	461a      	mov	r2, r3
    fea8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    feac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feb0:	781b      	ldrb	r3, [r3, #0]
    feb2:	1ad3      	subs	r3, r2, r3
    feb4:	2b14      	cmp	r3, #20
    feb6:	bfd4      	ite	le
    feb8:	2300      	movle	r3, #0
    feba:	2301      	movgt	r3, #1
    febc:	b2db      	uxtb	r3, r3
    febe:	2b00      	cmp	r3, #0
    fec0:	f000 85a6 	beq.w	10a10 <send_radIR+0xbcc>
    fec4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fecc:	781b      	ldrb	r3, [r3, #0]
    fece:	461a      	mov	r2, r3
    fed0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    fed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fed8:	2105      	movs	r1, #5
    feda:	5499      	strb	r1, [r3, r2]
    fedc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fee4:	781b      	ldrb	r3, [r3, #0]
    fee6:	3301      	adds	r3, #1
    fee8:	b2da      	uxtb	r2, r3
    feea:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    feee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fef2:	701a      	strb	r2, [r3, #0]
    fef4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fefc:	781b      	ldrb	r3, [r3, #0]
    fefe:	2bff      	cmp	r3, #255	; 0xff
    ff00:	d105      	bne.n	ff0e <send_radIR+0xca>
    ff02:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ff06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff0a:	2200      	movs	r2, #0
    ff0c:	701a      	strb	r2, [r3, #0]
    ff0e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ff12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff16:	781b      	ldrb	r3, [r3, #0]
    ff18:	461a      	mov	r2, r3
    ff1a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ff1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff22:	2105      	movs	r1, #5
    ff24:	5499      	strb	r1, [r3, r2]
    ff26:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ff2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff2e:	781b      	ldrb	r3, [r3, #0]
    ff30:	3301      	adds	r3, #1
    ff32:	b2da      	uxtb	r2, r3
    ff34:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ff38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff3c:	701a      	strb	r2, [r3, #0]
    ff3e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ff42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff46:	781b      	ldrb	r3, [r3, #0]
    ff48:	2bff      	cmp	r3, #255	; 0xff
    ff4a:	d105      	bne.n	ff58 <send_radIR+0x114>
    ff4c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ff50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff54:	2200      	movs	r2, #0
    ff56:	701a      	strb	r2, [r3, #0]
    ff58:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ff5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff60:	2205      	movs	r2, #5
    ff62:	701a      	strb	r2, [r3, #0]
    ff64:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ff68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff6c:	2205      	movs	r2, #5
    ff6e:	701a      	strb	r2, [r3, #0]
    ff70:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ff74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff78:	781b      	ldrb	r3, [r3, #0]
    ff7a:	461a      	mov	r2, r3
    ff7c:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    ff80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff84:	7819      	ldrb	r1, [r3, #0]
    ff86:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ff8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff8e:	5499      	strb	r1, [r3, r2]
    ff90:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    ff94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff98:	781a      	ldrb	r2, [r3, #0]
    ff9a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ff9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffa2:	781b      	ldrb	r3, [r3, #0]
    ffa4:	4413      	add	r3, r2
    ffa6:	b2da      	uxtb	r2, r3
    ffa8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ffac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffb0:	701a      	strb	r2, [r3, #0]
    ffb2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ffb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffba:	781a      	ldrb	r2, [r3, #0]
    ffbc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ffc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffc4:	781b      	ldrb	r3, [r3, #0]
    ffc6:	4413      	add	r3, r2
    ffc8:	b2da      	uxtb	r2, r3
    ffca:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ffce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffd2:	701a      	strb	r2, [r3, #0]
    ffd4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ffd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffdc:	781b      	ldrb	r3, [r3, #0]
    ffde:	3301      	adds	r3, #1
    ffe0:	b2da      	uxtb	r2, r3
    ffe2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ffe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffea:	701a      	strb	r2, [r3, #0]
    ffec:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fff4:	781b      	ldrb	r3, [r3, #0]
    fff6:	2bff      	cmp	r3, #255	; 0xff
    fff8:	d105      	bne.n	10006 <send_radIR+0x1c2>
    fffa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10002:	2200      	movs	r2, #0
   10004:	701a      	strb	r2, [r3, #0]
   10006:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1000a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1000e:	781b      	ldrb	r3, [r3, #0]
   10010:	461a      	mov	r2, r3
   10012:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
   10016:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1001a:	7859      	ldrb	r1, [r3, #1]
   1001c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10020:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10024:	5499      	strb	r1, [r3, r2]
   10026:	4bd2      	ldr	r3, [pc, #840]	; (10370 <send_radIR+0x52c>)
   10028:	781a      	ldrb	r2, [r3, #0]
   1002a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   1002e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10032:	781b      	ldrb	r3, [r3, #0]
   10034:	4413      	add	r3, r2
   10036:	b2da      	uxtb	r2, r3
   10038:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   1003c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10040:	701a      	strb	r2, [r3, #0]
   10042:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10046:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1004a:	781a      	ldrb	r2, [r3, #0]
   1004c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10050:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10054:	781b      	ldrb	r3, [r3, #0]
   10056:	4413      	add	r3, r2
   10058:	b2da      	uxtb	r2, r3
   1005a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   1005e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10062:	701a      	strb	r2, [r3, #0]
   10064:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10068:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1006c:	781b      	ldrb	r3, [r3, #0]
   1006e:	3301      	adds	r3, #1
   10070:	b2da      	uxtb	r2, r3
   10072:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10076:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1007a:	701a      	strb	r2, [r3, #0]
   1007c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10080:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10084:	781b      	ldrb	r3, [r3, #0]
   10086:	2bff      	cmp	r3, #255	; 0xff
   10088:	d105      	bne.n	10096 <send_radIR+0x252>
   1008a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1008e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10092:	2200      	movs	r2, #0
   10094:	701a      	strb	r2, [r3, #0]
   10096:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1009a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1009e:	781b      	ldrb	r3, [r3, #0]
   100a0:	461a      	mov	r2, r3
   100a2:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
   100a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100aa:	7899      	ldrb	r1, [r3, #2]
   100ac:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   100b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100b4:	5499      	strb	r1, [r3, r2]
   100b6:	4baf      	ldr	r3, [pc, #700]	; (10374 <send_radIR+0x530>)
   100b8:	781a      	ldrb	r2, [r3, #0]
   100ba:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   100be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100c2:	781b      	ldrb	r3, [r3, #0]
   100c4:	4413      	add	r3, r2
   100c6:	b2da      	uxtb	r2, r3
   100c8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   100cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100d0:	701a      	strb	r2, [r3, #0]
   100d2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   100d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100da:	781a      	ldrb	r2, [r3, #0]
   100dc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   100e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100e4:	781b      	ldrb	r3, [r3, #0]
   100e6:	4413      	add	r3, r2
   100e8:	b2da      	uxtb	r2, r3
   100ea:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   100ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100f2:	701a      	strb	r2, [r3, #0]
   100f4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   100f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100fc:	781b      	ldrb	r3, [r3, #0]
   100fe:	3301      	adds	r3, #1
   10100:	b2da      	uxtb	r2, r3
   10102:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10106:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1010a:	701a      	strb	r2, [r3, #0]
   1010c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10110:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10114:	781b      	ldrb	r3, [r3, #0]
   10116:	2bff      	cmp	r3, #255	; 0xff
   10118:	d105      	bne.n	10126 <send_radIR+0x2e2>
   1011a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1011e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10122:	2200      	movs	r2, #0
   10124:	701a      	strb	r2, [r3, #0]
   10126:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1012a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1012e:	781b      	ldrb	r3, [r3, #0]
   10130:	461a      	mov	r2, r3
   10132:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
   10136:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1013a:	78d9      	ldrb	r1, [r3, #3]
   1013c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10140:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10144:	5499      	strb	r1, [r3, r2]
   10146:	4b8c      	ldr	r3, [pc, #560]	; (10378 <send_radIR+0x534>)
   10148:	781a      	ldrb	r2, [r3, #0]
   1014a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   1014e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10152:	781b      	ldrb	r3, [r3, #0]
   10154:	4413      	add	r3, r2
   10156:	b2da      	uxtb	r2, r3
   10158:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   1015c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10160:	701a      	strb	r2, [r3, #0]
   10162:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10166:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1016a:	781a      	ldrb	r2, [r3, #0]
   1016c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10170:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10174:	781b      	ldrb	r3, [r3, #0]
   10176:	4413      	add	r3, r2
   10178:	b2da      	uxtb	r2, r3
   1017a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   1017e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10182:	701a      	strb	r2, [r3, #0]
   10184:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10188:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1018c:	781b      	ldrb	r3, [r3, #0]
   1018e:	3301      	adds	r3, #1
   10190:	b2da      	uxtb	r2, r3
   10192:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10196:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1019a:	701a      	strb	r2, [r3, #0]
   1019c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   101a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101a4:	781b      	ldrb	r3, [r3, #0]
   101a6:	2bff      	cmp	r3, #255	; 0xff
   101a8:	d105      	bne.n	101b6 <send_radIR+0x372>
   101aa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   101ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101b2:	2200      	movs	r2, #0
   101b4:	701a      	strb	r2, [r3, #0]
   101b6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   101ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101be:	781b      	ldrb	r3, [r3, #0]
   101c0:	461a      	mov	r2, r3
   101c2:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
   101c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ca:	7819      	ldrb	r1, [r3, #0]
   101cc:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   101d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101d4:	5499      	strb	r1, [r3, r2]
   101d6:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
   101da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101de:	781a      	ldrb	r2, [r3, #0]
   101e0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   101e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101e8:	781b      	ldrb	r3, [r3, #0]
   101ea:	4413      	add	r3, r2
   101ec:	b2da      	uxtb	r2, r3
   101ee:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   101f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101f6:	701a      	strb	r2, [r3, #0]
   101f8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   101fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10200:	781a      	ldrb	r2, [r3, #0]
   10202:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10206:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1020a:	781b      	ldrb	r3, [r3, #0]
   1020c:	4413      	add	r3, r2
   1020e:	b2da      	uxtb	r2, r3
   10210:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10214:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10218:	701a      	strb	r2, [r3, #0]
   1021a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1021e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10222:	781b      	ldrb	r3, [r3, #0]
   10224:	3301      	adds	r3, #1
   10226:	b2da      	uxtb	r2, r3
   10228:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1022c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10230:	701a      	strb	r2, [r3, #0]
   10232:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10236:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1023a:	781b      	ldrb	r3, [r3, #0]
   1023c:	2bff      	cmp	r3, #255	; 0xff
   1023e:	d105      	bne.n	1024c <send_radIR+0x408>
   10240:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10244:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10248:	2200      	movs	r2, #0
   1024a:	701a      	strb	r2, [r3, #0]
   1024c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10250:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10254:	781b      	ldrb	r3, [r3, #0]
   10256:	461a      	mov	r2, r3
   10258:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
   1025c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10260:	7859      	ldrb	r1, [r3, #1]
   10262:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10266:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1026a:	5499      	strb	r1, [r3, r2]
   1026c:	4b43      	ldr	r3, [pc, #268]	; (1037c <send_radIR+0x538>)
   1026e:	781a      	ldrb	r2, [r3, #0]
   10270:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10274:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10278:	781b      	ldrb	r3, [r3, #0]
   1027a:	4413      	add	r3, r2
   1027c:	b2da      	uxtb	r2, r3
   1027e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10282:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10286:	701a      	strb	r2, [r3, #0]
   10288:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   1028c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10290:	781a      	ldrb	r2, [r3, #0]
   10292:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10296:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1029a:	781b      	ldrb	r3, [r3, #0]
   1029c:	4413      	add	r3, r2
   1029e:	b2da      	uxtb	r2, r3
   102a0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   102a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102a8:	701a      	strb	r2, [r3, #0]
   102aa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   102ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102b2:	781b      	ldrb	r3, [r3, #0]
   102b4:	3301      	adds	r3, #1
   102b6:	b2da      	uxtb	r2, r3
   102b8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   102bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102c0:	701a      	strb	r2, [r3, #0]
   102c2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   102c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ca:	781b      	ldrb	r3, [r3, #0]
   102cc:	2bff      	cmp	r3, #255	; 0xff
   102ce:	d105      	bne.n	102dc <send_radIR+0x498>
   102d0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   102d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102d8:	2200      	movs	r2, #0
   102da:	701a      	strb	r2, [r3, #0]
   102dc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   102e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102e4:	781b      	ldrb	r3, [r3, #0]
   102e6:	461a      	mov	r2, r3
   102e8:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
   102ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102f0:	7899      	ldrb	r1, [r3, #2]
   102f2:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   102f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102fa:	5499      	strb	r1, [r3, r2]
   102fc:	4b20      	ldr	r3, [pc, #128]	; (10380 <send_radIR+0x53c>)
   102fe:	781a      	ldrb	r2, [r3, #0]
   10300:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10304:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10308:	781b      	ldrb	r3, [r3, #0]
   1030a:	4413      	add	r3, r2
   1030c:	b2da      	uxtb	r2, r3
   1030e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10312:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10316:	701a      	strb	r2, [r3, #0]
   10318:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   1031c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10320:	781a      	ldrb	r2, [r3, #0]
   10322:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10326:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1032a:	781b      	ldrb	r3, [r3, #0]
   1032c:	4413      	add	r3, r2
   1032e:	b2da      	uxtb	r2, r3
   10330:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10334:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10338:	701a      	strb	r2, [r3, #0]
   1033a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1033e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10342:	781b      	ldrb	r3, [r3, #0]
   10344:	3301      	adds	r3, #1
   10346:	b2da      	uxtb	r2, r3
   10348:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1034c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10350:	701a      	strb	r2, [r3, #0]
   10352:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10356:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1035a:	781b      	ldrb	r3, [r3, #0]
   1035c:	2bff      	cmp	r3, #255	; 0xff
   1035e:	d111      	bne.n	10384 <send_radIR+0x540>
   10360:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10364:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10368:	2200      	movs	r2, #0
   1036a:	701a      	strb	r2, [r3, #0]
   1036c:	e00a      	b.n	10384 <send_radIR+0x540>
   1036e:	bf00      	nop
   10370:	2004c4f1 	.word	0x2004c4f1
   10374:	2004c4f2 	.word	0x2004c4f2
   10378:	2004c4f3 	.word	0x2004c4f3
   1037c:	2004c4f5 	.word	0x2004c4f5
   10380:	2004c4f6 	.word	0x2004c4f6
   10384:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10388:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1038c:	781b      	ldrb	r3, [r3, #0]
   1038e:	461a      	mov	r2, r3
   10390:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
   10394:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10398:	78d9      	ldrb	r1, [r3, #3]
   1039a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   1039e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103a2:	5499      	strb	r1, [r3, r2]
   103a4:	4bd3      	ldr	r3, [pc, #844]	; (106f4 <send_radIR+0x8b0>)
   103a6:	781a      	ldrb	r2, [r3, #0]
   103a8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   103ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103b0:	781b      	ldrb	r3, [r3, #0]
   103b2:	4413      	add	r3, r2
   103b4:	b2da      	uxtb	r2, r3
   103b6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   103ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103be:	701a      	strb	r2, [r3, #0]
   103c0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   103c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103c8:	781a      	ldrb	r2, [r3, #0]
   103ca:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   103ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103d2:	781b      	ldrb	r3, [r3, #0]
   103d4:	4413      	add	r3, r2
   103d6:	b2da      	uxtb	r2, r3
   103d8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   103dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103e0:	701a      	strb	r2, [r3, #0]
   103e2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   103e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103ea:	781b      	ldrb	r3, [r3, #0]
   103ec:	3301      	adds	r3, #1
   103ee:	b2da      	uxtb	r2, r3
   103f0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   103f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103f8:	701a      	strb	r2, [r3, #0]
   103fa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   103fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10402:	781b      	ldrb	r3, [r3, #0]
   10404:	2bff      	cmp	r3, #255	; 0xff
   10406:	d105      	bne.n	10414 <send_radIR+0x5d0>
   10408:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1040c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10410:	2200      	movs	r2, #0
   10412:	701a      	strb	r2, [r3, #0]
   10414:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10418:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1041c:	781b      	ldrb	r3, [r3, #0]
   1041e:	461a      	mov	r2, r3
   10420:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
   10424:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10428:	7819      	ldrb	r1, [r3, #0]
   1042a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   1042e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10432:	5499      	strb	r1, [r3, r2]
   10434:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
   10438:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1043c:	781a      	ldrb	r2, [r3, #0]
   1043e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10442:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10446:	781b      	ldrb	r3, [r3, #0]
   10448:	4413      	add	r3, r2
   1044a:	b2da      	uxtb	r2, r3
   1044c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10450:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10454:	701a      	strb	r2, [r3, #0]
   10456:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   1045a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1045e:	781a      	ldrb	r2, [r3, #0]
   10460:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10464:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10468:	781b      	ldrb	r3, [r3, #0]
   1046a:	4413      	add	r3, r2
   1046c:	b2da      	uxtb	r2, r3
   1046e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10472:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10476:	701a      	strb	r2, [r3, #0]
   10478:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1047c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10480:	781b      	ldrb	r3, [r3, #0]
   10482:	3301      	adds	r3, #1
   10484:	b2da      	uxtb	r2, r3
   10486:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1048a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1048e:	701a      	strb	r2, [r3, #0]
   10490:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10494:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10498:	781b      	ldrb	r3, [r3, #0]
   1049a:	2bff      	cmp	r3, #255	; 0xff
   1049c:	d105      	bne.n	104aa <send_radIR+0x666>
   1049e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   104a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104a6:	2200      	movs	r2, #0
   104a8:	701a      	strb	r2, [r3, #0]
   104aa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   104ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104b2:	781b      	ldrb	r3, [r3, #0]
   104b4:	461a      	mov	r2, r3
   104b6:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
   104ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104be:	7859      	ldrb	r1, [r3, #1]
   104c0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   104c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104c8:	5499      	strb	r1, [r3, r2]
   104ca:	4b8b      	ldr	r3, [pc, #556]	; (106f8 <send_radIR+0x8b4>)
   104cc:	781a      	ldrb	r2, [r3, #0]
   104ce:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   104d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104d6:	781b      	ldrb	r3, [r3, #0]
   104d8:	4413      	add	r3, r2
   104da:	b2da      	uxtb	r2, r3
   104dc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   104e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104e4:	701a      	strb	r2, [r3, #0]
   104e6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   104ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104ee:	781a      	ldrb	r2, [r3, #0]
   104f0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   104f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104f8:	781b      	ldrb	r3, [r3, #0]
   104fa:	4413      	add	r3, r2
   104fc:	b2da      	uxtb	r2, r3
   104fe:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10502:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10506:	701a      	strb	r2, [r3, #0]
   10508:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1050c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10510:	781b      	ldrb	r3, [r3, #0]
   10512:	3301      	adds	r3, #1
   10514:	b2da      	uxtb	r2, r3
   10516:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1051a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1051e:	701a      	strb	r2, [r3, #0]
   10520:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10524:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10528:	781b      	ldrb	r3, [r3, #0]
   1052a:	2bff      	cmp	r3, #255	; 0xff
   1052c:	d105      	bne.n	1053a <send_radIR+0x6f6>
   1052e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10532:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10536:	2200      	movs	r2, #0
   10538:	701a      	strb	r2, [r3, #0]
   1053a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1053e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10542:	781b      	ldrb	r3, [r3, #0]
   10544:	461a      	mov	r2, r3
   10546:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
   1054a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1054e:	7899      	ldrb	r1, [r3, #2]
   10550:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10554:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10558:	5499      	strb	r1, [r3, r2]
   1055a:	4b68      	ldr	r3, [pc, #416]	; (106fc <send_radIR+0x8b8>)
   1055c:	781a      	ldrb	r2, [r3, #0]
   1055e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10562:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10566:	781b      	ldrb	r3, [r3, #0]
   10568:	4413      	add	r3, r2
   1056a:	b2da      	uxtb	r2, r3
   1056c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10570:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10574:	701a      	strb	r2, [r3, #0]
   10576:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   1057a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1057e:	781a      	ldrb	r2, [r3, #0]
   10580:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10584:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10588:	781b      	ldrb	r3, [r3, #0]
   1058a:	4413      	add	r3, r2
   1058c:	b2da      	uxtb	r2, r3
   1058e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10592:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10596:	701a      	strb	r2, [r3, #0]
   10598:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1059c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105a0:	781b      	ldrb	r3, [r3, #0]
   105a2:	3301      	adds	r3, #1
   105a4:	b2da      	uxtb	r2, r3
   105a6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   105aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ae:	701a      	strb	r2, [r3, #0]
   105b0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   105b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105b8:	781b      	ldrb	r3, [r3, #0]
   105ba:	2bff      	cmp	r3, #255	; 0xff
   105bc:	d105      	bne.n	105ca <send_radIR+0x786>
   105be:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   105c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105c6:	2200      	movs	r2, #0
   105c8:	701a      	strb	r2, [r3, #0]
   105ca:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   105ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105d2:	781b      	ldrb	r3, [r3, #0]
   105d4:	461a      	mov	r2, r3
   105d6:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
   105da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105de:	78d9      	ldrb	r1, [r3, #3]
   105e0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   105e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105e8:	5499      	strb	r1, [r3, r2]
   105ea:	4b45      	ldr	r3, [pc, #276]	; (10700 <send_radIR+0x8bc>)
   105ec:	781a      	ldrb	r2, [r3, #0]
   105ee:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   105f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105f6:	781b      	ldrb	r3, [r3, #0]
   105f8:	4413      	add	r3, r2
   105fa:	b2da      	uxtb	r2, r3
   105fc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10600:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10604:	701a      	strb	r2, [r3, #0]
   10606:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   1060a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1060e:	781a      	ldrb	r2, [r3, #0]
   10610:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10614:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10618:	781b      	ldrb	r3, [r3, #0]
   1061a:	4413      	add	r3, r2
   1061c:	b2da      	uxtb	r2, r3
   1061e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10622:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10626:	701a      	strb	r2, [r3, #0]
   10628:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1062c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10630:	781b      	ldrb	r3, [r3, #0]
   10632:	3301      	adds	r3, #1
   10634:	b2da      	uxtb	r2, r3
   10636:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1063a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1063e:	701a      	strb	r2, [r3, #0]
   10640:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10644:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10648:	781b      	ldrb	r3, [r3, #0]
   1064a:	2bff      	cmp	r3, #255	; 0xff
   1064c:	d105      	bne.n	1065a <send_radIR+0x816>
   1064e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10652:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10656:	2200      	movs	r2, #0
   10658:	701a      	strb	r2, [r3, #0]
   1065a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1065e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10662:	781b      	ldrb	r3, [r3, #0]
   10664:	461a      	mov	r2, r3
   10666:	f240 33f2 	movw	r3, #1010	; 0x3f2
   1066a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1066e:	7819      	ldrb	r1, [r3, #0]
   10670:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10674:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10678:	5499      	strb	r1, [r3, r2]
   1067a:	f240 33f2 	movw	r3, #1010	; 0x3f2
   1067e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10682:	781a      	ldrb	r2, [r3, #0]
   10684:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10688:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1068c:	781b      	ldrb	r3, [r3, #0]
   1068e:	4413      	add	r3, r2
   10690:	b2da      	uxtb	r2, r3
   10692:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10696:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1069a:	701a      	strb	r2, [r3, #0]
   1069c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   106a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106a4:	781a      	ldrb	r2, [r3, #0]
   106a6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   106aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ae:	781b      	ldrb	r3, [r3, #0]
   106b0:	4413      	add	r3, r2
   106b2:	b2da      	uxtb	r2, r3
   106b4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   106b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106bc:	701a      	strb	r2, [r3, #0]
   106be:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   106c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106c6:	781b      	ldrb	r3, [r3, #0]
   106c8:	3301      	adds	r3, #1
   106ca:	b2da      	uxtb	r2, r3
   106cc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   106d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106d4:	701a      	strb	r2, [r3, #0]
   106d6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   106da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106de:	781b      	ldrb	r3, [r3, #0]
   106e0:	2bff      	cmp	r3, #255	; 0xff
   106e2:	d10f      	bne.n	10704 <send_radIR+0x8c0>
   106e4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   106e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ec:	2200      	movs	r2, #0
   106ee:	701a      	strb	r2, [r3, #0]
   106f0:	e008      	b.n	10704 <send_radIR+0x8c0>
   106f2:	bf00      	nop
   106f4:	2004c4f7 	.word	0x2004c4f7
   106f8:	2004c4ed 	.word	0x2004c4ed
   106fc:	2004c4ee 	.word	0x2004c4ee
   10700:	2004c4ef 	.word	0x2004c4ef
   10704:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10708:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1070c:	781b      	ldrb	r3, [r3, #0]
   1070e:	461a      	mov	r2, r3
   10710:	f240 33f2 	movw	r3, #1010	; 0x3f2
   10714:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10718:	7859      	ldrb	r1, [r3, #1]
   1071a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   1071e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10722:	5499      	strb	r1, [r3, r2]
   10724:	4bc2      	ldr	r3, [pc, #776]	; (10a30 <send_radIR+0xbec>)
   10726:	781a      	ldrb	r2, [r3, #0]
   10728:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   1072c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10730:	781b      	ldrb	r3, [r3, #0]
   10732:	4413      	add	r3, r2
   10734:	b2da      	uxtb	r2, r3
   10736:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   1073a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1073e:	701a      	strb	r2, [r3, #0]
   10740:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10744:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10748:	781a      	ldrb	r2, [r3, #0]
   1074a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   1074e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10752:	781b      	ldrb	r3, [r3, #0]
   10754:	4413      	add	r3, r2
   10756:	b2da      	uxtb	r2, r3
   10758:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   1075c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10760:	701a      	strb	r2, [r3, #0]
   10762:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10766:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1076a:	781b      	ldrb	r3, [r3, #0]
   1076c:	3301      	adds	r3, #1
   1076e:	b2da      	uxtb	r2, r3
   10770:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10774:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10778:	701a      	strb	r2, [r3, #0]
   1077a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1077e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10782:	781b      	ldrb	r3, [r3, #0]
   10784:	2bff      	cmp	r3, #255	; 0xff
   10786:	d105      	bne.n	10794 <send_radIR+0x950>
   10788:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1078c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10790:	2200      	movs	r2, #0
   10792:	701a      	strb	r2, [r3, #0]
   10794:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10798:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1079c:	781b      	ldrb	r3, [r3, #0]
   1079e:	461a      	mov	r2, r3
   107a0:	f240 33f4 	movw	r3, #1012	; 0x3f4
   107a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107a8:	7819      	ldrb	r1, [r3, #0]
   107aa:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   107ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107b2:	5499      	strb	r1, [r3, r2]
   107b4:	f240 33f4 	movw	r3, #1012	; 0x3f4
   107b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107bc:	781a      	ldrb	r2, [r3, #0]
   107be:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   107c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107c6:	781b      	ldrb	r3, [r3, #0]
   107c8:	4413      	add	r3, r2
   107ca:	b2da      	uxtb	r2, r3
   107cc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   107d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107d4:	701a      	strb	r2, [r3, #0]
   107d6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   107da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107de:	781a      	ldrb	r2, [r3, #0]
   107e0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   107e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107e8:	781b      	ldrb	r3, [r3, #0]
   107ea:	4413      	add	r3, r2
   107ec:	b2da      	uxtb	r2, r3
   107ee:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   107f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107f6:	701a      	strb	r2, [r3, #0]
   107f8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   107fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10800:	781b      	ldrb	r3, [r3, #0]
   10802:	3301      	adds	r3, #1
   10804:	b2da      	uxtb	r2, r3
   10806:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1080a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1080e:	701a      	strb	r2, [r3, #0]
   10810:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10814:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10818:	781b      	ldrb	r3, [r3, #0]
   1081a:	2bff      	cmp	r3, #255	; 0xff
   1081c:	d105      	bne.n	1082a <send_radIR+0x9e6>
   1081e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10822:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10826:	2200      	movs	r2, #0
   10828:	701a      	strb	r2, [r3, #0]
   1082a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1082e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10832:	781b      	ldrb	r3, [r3, #0]
   10834:	461a      	mov	r2, r3
   10836:	f240 33f4 	movw	r3, #1012	; 0x3f4
   1083a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1083e:	7859      	ldrb	r1, [r3, #1]
   10840:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10844:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10848:	5499      	strb	r1, [r3, r2]
   1084a:	4b7a      	ldr	r3, [pc, #488]	; (10a34 <send_radIR+0xbf0>)
   1084c:	781a      	ldrb	r2, [r3, #0]
   1084e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10852:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10856:	781b      	ldrb	r3, [r3, #0]
   10858:	4413      	add	r3, r2
   1085a:	b2da      	uxtb	r2, r3
   1085c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10860:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10864:	701a      	strb	r2, [r3, #0]
   10866:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   1086a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1086e:	781a      	ldrb	r2, [r3, #0]
   10870:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10874:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10878:	781b      	ldrb	r3, [r3, #0]
   1087a:	4413      	add	r3, r2
   1087c:	b2da      	uxtb	r2, r3
   1087e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10882:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10886:	701a      	strb	r2, [r3, #0]
   10888:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1088c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10890:	781b      	ldrb	r3, [r3, #0]
   10892:	3301      	adds	r3, #1
   10894:	b2da      	uxtb	r2, r3
   10896:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1089a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1089e:	701a      	strb	r2, [r3, #0]
   108a0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   108a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108a8:	781b      	ldrb	r3, [r3, #0]
   108aa:	2bff      	cmp	r3, #255	; 0xff
   108ac:	d105      	bne.n	108ba <send_radIR+0xa76>
   108ae:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   108b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108b6:	2200      	movs	r2, #0
   108b8:	701a      	strb	r2, [r3, #0]
   108ba:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   108be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108c2:	781b      	ldrb	r3, [r3, #0]
   108c4:	461a      	mov	r2, r3
   108c6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   108ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108ce:	7819      	ldrb	r1, [r3, #0]
   108d0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   108d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108d8:	5499      	strb	r1, [r3, r2]
   108da:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   108de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108e2:	781b      	ldrb	r3, [r3, #0]
   108e4:	3301      	adds	r3, #1
   108e6:	b2da      	uxtb	r2, r3
   108e8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   108ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108f0:	701a      	strb	r2, [r3, #0]
   108f2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   108f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108fa:	781b      	ldrb	r3, [r3, #0]
   108fc:	2bff      	cmp	r3, #255	; 0xff
   108fe:	d105      	bne.n	1090c <send_radIR+0xac8>
   10900:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10904:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10908:	2200      	movs	r2, #0
   1090a:	701a      	strb	r2, [r3, #0]
   1090c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10910:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10914:	781b      	ldrb	r3, [r3, #0]
   10916:	461a      	mov	r2, r3
   10918:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   1091c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10920:	7819      	ldrb	r1, [r3, #0]
   10922:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10926:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1092a:	5499      	strb	r1, [r3, r2]
   1092c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10930:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10934:	781b      	ldrb	r3, [r3, #0]
   10936:	3301      	adds	r3, #1
   10938:	b2da      	uxtb	r2, r3
   1093a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1093e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10942:	701a      	strb	r2, [r3, #0]
   10944:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10948:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1094c:	781b      	ldrb	r3, [r3, #0]
   1094e:	2bff      	cmp	r3, #255	; 0xff
   10950:	d105      	bne.n	1095e <send_radIR+0xb1a>
   10952:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10956:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1095a:	2200      	movs	r2, #0
   1095c:	701a      	strb	r2, [r3, #0]
   1095e:	f242 0339 	movw	r3, #8249	; 0x2039
   10962:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10966:	781b      	ldrb	r3, [r3, #0]
   10968:	b2db      	uxtb	r3, r3
   1096a:	f003 0310 	and.w	r3, r3, #16
   1096e:	2b00      	cmp	r3, #0
   10970:	d15a      	bne.n	10a28 <send_radIR+0xbe4>
   10972:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   10976:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1097a:	781b      	ldrb	r3, [r3, #0]
   1097c:	b2db      	uxtb	r3, r3
   1097e:	461a      	mov	r2, r3
   10980:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10984:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10988:	5c9a      	ldrb	r2, [r3, r2]
   1098a:	f64b 73fb 	movw	r3, #49147	; 0xbffb
   1098e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10992:	701a      	strb	r2, [r3, #0]
   10994:	f64b 73fc 	movw	r3, #49148	; 0xbffc
   10998:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1099c:	2200      	movs	r2, #0
   1099e:	701a      	strb	r2, [r3, #0]
   109a0:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   109a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109a8:	781b      	ldrb	r3, [r3, #0]
   109aa:	b2db      	uxtb	r3, r3
   109ac:	3301      	adds	r3, #1
   109ae:	b2da      	uxtb	r2, r3
   109b0:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   109b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109b8:	701a      	strb	r2, [r3, #0]
   109ba:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   109be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109c2:	781b      	ldrb	r3, [r3, #0]
   109c4:	b2db      	uxtb	r3, r3
   109c6:	2bff      	cmp	r3, #255	; 0xff
   109c8:	d105      	bne.n	109d6 <send_radIR+0xb92>
   109ca:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   109ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109d2:	2200      	movs	r2, #0
   109d4:	701a      	strb	r2, [r3, #0]
   109d6:	f242 0338 	movw	r3, #8248	; 0x2038
   109da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109de:	f242 0238 	movw	r2, #8248	; 0x2038
   109e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   109e6:	7812      	ldrb	r2, [r2, #0]
   109e8:	b2d2      	uxtb	r2, r2
   109ea:	f042 0201 	orr.w	r2, r2, #1
   109ee:	b2d2      	uxtb	r2, r2
   109f0:	701a      	strb	r2, [r3, #0]
   109f2:	f242 0339 	movw	r3, #8249	; 0x2039
   109f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109fa:	f242 0239 	movw	r2, #8249	; 0x2039
   109fe:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10a02:	7812      	ldrb	r2, [r2, #0]
   10a04:	b2d2      	uxtb	r2, r2
   10a06:	f042 0210 	orr.w	r2, r2, #16
   10a0a:	b2d2      	uxtb	r2, r2
   10a0c:	701a      	strb	r2, [r3, #0]
   10a0e:	e00b      	b.n	10a28 <send_radIR+0xbe4>
   10a10:	f64b 63f8 	movw	r3, #48888	; 0xbef8
   10a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a18:	781b      	ldrb	r3, [r3, #0]
   10a1a:	3301      	adds	r3, #1
   10a1c:	b2da      	uxtb	r2, r3
   10a1e:	f64b 63f8 	movw	r3, #48888	; 0xbef8
   10a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a26:	701a      	strb	r2, [r3, #0]
}
   10a28:	46bd      	mov	sp, r7
   10a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   10a2e:	4770      	bx	lr
   10a30:	200003f3 	.word	0x200003f3
   10a34:	200003f5 	.word	0x200003f5

00010a38 <send_takeOff>:

void send_takeOff(void){
   10a38:	b580      	push	{r7, lr}
   10a3a:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   10a3c:	f24c 038e 	movw	r3, #49294	; 0xc08e
   10a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a44:	781b      	ldrb	r3, [r3, #0]
   10a46:	2b00      	cmp	r3, #0
   10a48:	f000 8200 	beq.w	10e4c <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   10a4c:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
   10a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a54:	881b      	ldrh	r3, [r3, #0]
   10a56:	2b00      	cmp	r3, #0
   10a58:	f040 81f2 	bne.w	10e40 <send_takeOff+0x408>
   10a5c:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
   10a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a64:	681b      	ldr	r3, [r3, #0]
   10a66:	4618      	mov	r0, r3
   10a68:	f04f 0100 	mov.w	r1, #0
   10a6c:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   10a70:	f007 fddc 	bl	1862c <__aeabi_fcmpgt>
   10a74:	4603      	mov	r3, r0
   10a76:	2b00      	cmp	r3, #0
   10a78:	f000 81e2 	beq.w	10e40 <send_takeOff+0x408>
        estimator_flight_time = 1;
   10a7c:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
   10a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a84:	2201      	movs	r2, #1
   10a86:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   10a88:	f64b 63f0 	movw	r3, #48880	; 0xbef0
   10a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a90:	2201      	movs	r2, #1
   10a92:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   10a94:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a9c:	781a      	ldrb	r2, [r3, #0]
   10a9e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   10aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aa6:	781b      	ldrb	r3, [r3, #0]
   10aa8:	b2db      	uxtb	r3, r3
   10aaa:	429a      	cmp	r2, r3
   10aac:	d313      	bcc.n	10ad6 <send_takeOff+0x9e>
   10aae:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   10ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ab6:	781b      	ldrb	r3, [r3, #0]
   10ab8:	b2db      	uxtb	r3, r3
   10aba:	461a      	mov	r2, r3
   10abc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ac4:	781b      	ldrb	r3, [r3, #0]
   10ac6:	1ad3      	subs	r3, r2, r3
   10ac8:	33ff      	adds	r3, #255	; 0xff
   10aca:	2b06      	cmp	r3, #6
   10acc:	bfd4      	ite	le
   10ace:	2300      	movle	r3, #0
   10ad0:	2301      	movgt	r3, #1
   10ad2:	b2db      	uxtb	r3, r3
   10ad4:	e011      	b.n	10afa <send_takeOff+0xc2>
   10ad6:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   10ada:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ade:	781b      	ldrb	r3, [r3, #0]
   10ae0:	b2db      	uxtb	r3, r3
   10ae2:	461a      	mov	r2, r3
   10ae4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aec:	781b      	ldrb	r3, [r3, #0]
   10aee:	1ad3      	subs	r3, r2, r3
   10af0:	2b06      	cmp	r3, #6
   10af2:	bfd4      	ite	le
   10af4:	2300      	movle	r3, #0
   10af6:	2301      	movgt	r3, #1
   10af8:	b2db      	uxtb	r3, r3
   10afa:	2b00      	cmp	r3, #0
   10afc:	f000 8194 	beq.w	10e28 <send_takeOff+0x3f0>
   10b00:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b08:	781b      	ldrb	r3, [r3, #0]
   10b0a:	461a      	mov	r2, r3
   10b0c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b14:	2105      	movs	r1, #5
   10b16:	5499      	strb	r1, [r3, r2]
   10b18:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b20:	781b      	ldrb	r3, [r3, #0]
   10b22:	3301      	adds	r3, #1
   10b24:	b2da      	uxtb	r2, r3
   10b26:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b2e:	701a      	strb	r2, [r3, #0]
   10b30:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b38:	781b      	ldrb	r3, [r3, #0]
   10b3a:	2bff      	cmp	r3, #255	; 0xff
   10b3c:	d105      	bne.n	10b4a <send_takeOff+0x112>
   10b3e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b46:	2200      	movs	r2, #0
   10b48:	701a      	strb	r2, [r3, #0]
   10b4a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b52:	781b      	ldrb	r3, [r3, #0]
   10b54:	461a      	mov	r2, r3
   10b56:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b5e:	2104      	movs	r1, #4
   10b60:	5499      	strb	r1, [r3, r2]
   10b62:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b6a:	781b      	ldrb	r3, [r3, #0]
   10b6c:	3301      	adds	r3, #1
   10b6e:	b2da      	uxtb	r2, r3
   10b70:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b78:	701a      	strb	r2, [r3, #0]
   10b7a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10b7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b82:	781b      	ldrb	r3, [r3, #0]
   10b84:	2bff      	cmp	r3, #255	; 0xff
   10b86:	d105      	bne.n	10b94 <send_takeOff+0x15c>
   10b88:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b90:	2200      	movs	r2, #0
   10b92:	701a      	strb	r2, [r3, #0]
   10b94:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b9c:	2204      	movs	r2, #4
   10b9e:	701a      	strb	r2, [r3, #0]
   10ba0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ba8:	2204      	movs	r2, #4
   10baa:	701a      	strb	r2, [r3, #0]
   10bac:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bb4:	781b      	ldrb	r3, [r3, #0]
   10bb6:	461a      	mov	r2, r3
   10bb8:	f64b 63da 	movw	r3, #48858	; 0xbeda
   10bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bc0:	7819      	ldrb	r1, [r3, #0]
   10bc2:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10bc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bca:	5499      	strb	r1, [r3, r2]
   10bcc:	f64b 63da 	movw	r3, #48858	; 0xbeda
   10bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bd4:	781a      	ldrb	r2, [r3, #0]
   10bd6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10bda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bde:	781b      	ldrb	r3, [r3, #0]
   10be0:	4413      	add	r3, r2
   10be2:	b2da      	uxtb	r2, r3
   10be4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10be8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bec:	701a      	strb	r2, [r3, #0]
   10bee:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10bf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bf6:	781a      	ldrb	r2, [r3, #0]
   10bf8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c00:	781b      	ldrb	r3, [r3, #0]
   10c02:	4413      	add	r3, r2
   10c04:	b2da      	uxtb	r2, r3
   10c06:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c0e:	701a      	strb	r2, [r3, #0]
   10c10:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c18:	781b      	ldrb	r3, [r3, #0]
   10c1a:	3301      	adds	r3, #1
   10c1c:	b2da      	uxtb	r2, r3
   10c1e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10c22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c26:	701a      	strb	r2, [r3, #0]
   10c28:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10c2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c30:	781b      	ldrb	r3, [r3, #0]
   10c32:	2bff      	cmp	r3, #255	; 0xff
   10c34:	d105      	bne.n	10c42 <send_takeOff+0x20a>
   10c36:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10c3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c3e:	2200      	movs	r2, #0
   10c40:	701a      	strb	r2, [r3, #0]
   10c42:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10c46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c4a:	781b      	ldrb	r3, [r3, #0]
   10c4c:	461a      	mov	r2, r3
   10c4e:	f64b 63da 	movw	r3, #48858	; 0xbeda
   10c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c56:	7859      	ldrb	r1, [r3, #1]
   10c58:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10c5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c60:	5499      	strb	r1, [r3, r2]
   10c62:	4b7b      	ldr	r3, [pc, #492]	; (10e50 <send_takeOff+0x418>)
   10c64:	781a      	ldrb	r2, [r3, #0]
   10c66:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c6e:	781b      	ldrb	r3, [r3, #0]
   10c70:	4413      	add	r3, r2
   10c72:	b2da      	uxtb	r2, r3
   10c74:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c7c:	701a      	strb	r2, [r3, #0]
   10c7e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10c82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c86:	781a      	ldrb	r2, [r3, #0]
   10c88:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10c8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c90:	781b      	ldrb	r3, [r3, #0]
   10c92:	4413      	add	r3, r2
   10c94:	b2da      	uxtb	r2, r3
   10c96:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10c9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c9e:	701a      	strb	r2, [r3, #0]
   10ca0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10ca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ca8:	781b      	ldrb	r3, [r3, #0]
   10caa:	3301      	adds	r3, #1
   10cac:	b2da      	uxtb	r2, r3
   10cae:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10cb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cb6:	701a      	strb	r2, [r3, #0]
   10cb8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cc0:	781b      	ldrb	r3, [r3, #0]
   10cc2:	2bff      	cmp	r3, #255	; 0xff
   10cc4:	d105      	bne.n	10cd2 <send_takeOff+0x29a>
   10cc6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10cca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cce:	2200      	movs	r2, #0
   10cd0:	701a      	strb	r2, [r3, #0]
   10cd2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10cd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cda:	781b      	ldrb	r3, [r3, #0]
   10cdc:	461a      	mov	r2, r3
   10cde:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10ce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ce6:	7819      	ldrb	r1, [r3, #0]
   10ce8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10cec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cf0:	5499      	strb	r1, [r3, r2]
   10cf2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cfa:	781b      	ldrb	r3, [r3, #0]
   10cfc:	3301      	adds	r3, #1
   10cfe:	b2da      	uxtb	r2, r3
   10d00:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10d04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d08:	701a      	strb	r2, [r3, #0]
   10d0a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d12:	781b      	ldrb	r3, [r3, #0]
   10d14:	2bff      	cmp	r3, #255	; 0xff
   10d16:	d105      	bne.n	10d24 <send_takeOff+0x2ec>
   10d18:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10d1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d20:	2200      	movs	r2, #0
   10d22:	701a      	strb	r2, [r3, #0]
   10d24:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d2c:	781b      	ldrb	r3, [r3, #0]
   10d2e:	461a      	mov	r2, r3
   10d30:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d38:	7819      	ldrb	r1, [r3, #0]
   10d3a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10d3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d42:	5499      	strb	r1, [r3, r2]
   10d44:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10d48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d4c:	781b      	ldrb	r3, [r3, #0]
   10d4e:	3301      	adds	r3, #1
   10d50:	b2da      	uxtb	r2, r3
   10d52:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d5a:	701a      	strb	r2, [r3, #0]
   10d5c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10d60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d64:	781b      	ldrb	r3, [r3, #0]
   10d66:	2bff      	cmp	r3, #255	; 0xff
   10d68:	d105      	bne.n	10d76 <send_takeOff+0x33e>
   10d6a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10d6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d72:	2200      	movs	r2, #0
   10d74:	701a      	strb	r2, [r3, #0]
   10d76:	f242 0339 	movw	r3, #8249	; 0x2039
   10d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d7e:	781b      	ldrb	r3, [r3, #0]
   10d80:	b2db      	uxtb	r3, r3
   10d82:	f003 0310 	and.w	r3, r3, #16
   10d86:	2b00      	cmp	r3, #0
   10d88:	d15a      	bne.n	10e40 <send_takeOff+0x408>
   10d8a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   10d8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d92:	781b      	ldrb	r3, [r3, #0]
   10d94:	b2db      	uxtb	r3, r3
   10d96:	461a      	mov	r2, r3
   10d98:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10da0:	5c9a      	ldrb	r2, [r3, r2]
   10da2:	f64b 73fb 	movw	r3, #49147	; 0xbffb
   10da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10daa:	701a      	strb	r2, [r3, #0]
   10dac:	f64b 73fc 	movw	r3, #49148	; 0xbffc
   10db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10db4:	2200      	movs	r2, #0
   10db6:	701a      	strb	r2, [r3, #0]
   10db8:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   10dbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dc0:	781b      	ldrb	r3, [r3, #0]
   10dc2:	b2db      	uxtb	r3, r3
   10dc4:	3301      	adds	r3, #1
   10dc6:	b2da      	uxtb	r2, r3
   10dc8:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   10dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dd0:	701a      	strb	r2, [r3, #0]
   10dd2:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   10dd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dda:	781b      	ldrb	r3, [r3, #0]
   10ddc:	b2db      	uxtb	r3, r3
   10dde:	2bff      	cmp	r3, #255	; 0xff
   10de0:	d105      	bne.n	10dee <send_takeOff+0x3b6>
   10de2:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   10de6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dea:	2200      	movs	r2, #0
   10dec:	701a      	strb	r2, [r3, #0]
   10dee:	f242 0338 	movw	r3, #8248	; 0x2038
   10df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10df6:	f242 0238 	movw	r2, #8248	; 0x2038
   10dfa:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10dfe:	7812      	ldrb	r2, [r2, #0]
   10e00:	b2d2      	uxtb	r2, r2
   10e02:	f042 0201 	orr.w	r2, r2, #1
   10e06:	b2d2      	uxtb	r2, r2
   10e08:	701a      	strb	r2, [r3, #0]
   10e0a:	f242 0339 	movw	r3, #8249	; 0x2039
   10e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e12:	f242 0239 	movw	r2, #8249	; 0x2039
   10e16:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e1a:	7812      	ldrb	r2, [r2, #0]
   10e1c:	b2d2      	uxtb	r2, r2
   10e1e:	f042 0210 	orr.w	r2, r2, #16
   10e22:	b2d2      	uxtb	r2, r2
   10e24:	701a      	strb	r2, [r3, #0]
   10e26:	e00b      	b.n	10e40 <send_takeOff+0x408>
   10e28:	f64b 63f8 	movw	r3, #48888	; 0xbef8
   10e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e30:	781b      	ldrb	r3, [r3, #0]
   10e32:	3301      	adds	r3, #1
   10e34:	b2da      	uxtb	r2, r3
   10e36:	f64b 63f8 	movw	r3, #48888	; 0xbef8
   10e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e3e:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   10e40:	f24c 038e 	movw	r3, #49294	; 0xc08e
   10e44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e48:	2200      	movs	r2, #0
   10e4a:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   10e4c:	bd80      	pop	{r7, pc}
   10e4e:	bf00      	nop
   10e50:	2004bedb 	.word	0x2004bedb
   10e54:	f3af 8000 	nop.w

00010e58 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   10e58:	b480      	push	{r7}
   10e5a:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   10e5c:	f242 0317 	movw	r3, #8215	; 0x2017
   10e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e64:	f242 0217 	movw	r2, #8215	; 0x2017
   10e68:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e6c:	7812      	ldrb	r2, [r2, #0]
   10e6e:	b2d2      	uxtb	r2, r2
   10e70:	f042 0210 	orr.w	r2, r2, #16
   10e74:	b2d2      	uxtb	r2, r2
   10e76:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   10e78:	f242 0331 	movw	r3, #8241	; 0x2031
   10e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e80:	2201      	movs	r2, #1
   10e82:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   10e84:	f242 0333 	movw	r3, #8243	; 0x2033
   10e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e8c:	2219      	movs	r2, #25
   10e8e:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   10e90:	f242 0311 	movw	r3, #8209	; 0x2011
   10e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e98:	f242 0211 	movw	r2, #8209	; 0x2011
   10e9c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ea0:	7812      	ldrb	r2, [r2, #0]
   10ea2:	b2d2      	uxtb	r2, r2
   10ea4:	f062 023f 	orn	r2, r2, #63	; 0x3f
   10ea8:	b2d2      	uxtb	r2, r2
   10eaa:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10eac:	f242 0312 	movw	r3, #8210	; 0x2012
   10eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eb4:	f242 0212 	movw	r2, #8210	; 0x2012
   10eb8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ebc:	7812      	ldrb	r2, [r2, #0]
   10ebe:	b2d2      	uxtb	r2, r2
   10ec0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10ec4:	b2d2      	uxtb	r2, r2
   10ec6:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   10ec8:	f242 0312 	movw	r3, #8210	; 0x2012
   10ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ed0:	f242 0212 	movw	r2, #8210	; 0x2012
   10ed4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ed8:	7812      	ldrb	r2, [r2, #0]
   10eda:	b2d2      	uxtb	r2, r2
   10edc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10ee0:	b2d2      	uxtb	r2, r2
   10ee2:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   10ee4:	f242 033a 	movw	r3, #8250	; 0x203a
   10ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eec:	f242 023a 	movw	r2, #8250	; 0x203a
   10ef0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ef4:	7812      	ldrb	r2, [r2, #0]
   10ef6:	b2d2      	uxtb	r2, r2
   10ef8:	f042 0202 	orr.w	r2, r2, #2
   10efc:	b2d2      	uxtb	r2, r2
   10efe:	701a      	strb	r2, [r3, #0]
}
   10f00:	46bd      	mov	sp, r7
   10f02:	f85d 7b04 	ldr.w	r7, [sp], #4
   10f06:	4770      	bx	lr

00010f08 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   10f08:	b480      	push	{r7}
   10f0a:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   10f0c:	f64b 73fc 	movw	r3, #49148	; 0xbffc
   10f10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f14:	781b      	ldrb	r3, [r3, #0]
   10f16:	2b00      	cmp	r3, #0
   10f18:	d10e      	bne.n	10f38 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10f1a:	f242 0312 	movw	r3, #8210	; 0x2012
   10f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f22:	f242 0212 	movw	r2, #8210	; 0x2012
   10f26:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f2a:	7812      	ldrb	r2, [r2, #0]
   10f2c:	b2d2      	uxtb	r2, r2
   10f2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10f32:	b2d2      	uxtb	r2, r2
   10f34:	701a      	strb	r2, [r3, #0]
   10f36:	e047      	b.n	10fc8 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   10f38:	f64b 73fc 	movw	r3, #49148	; 0xbffc
   10f3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f40:	781b      	ldrb	r3, [r3, #0]
   10f42:	2b08      	cmp	r3, #8
   10f44:	d832      	bhi.n	10fac <__vector_5+0xa4>
    if (tx_byte & 0x01)
   10f46:	f64b 73fb 	movw	r3, #49147	; 0xbffb
   10f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f4e:	781b      	ldrb	r3, [r3, #0]
   10f50:	f003 0301 	and.w	r3, r3, #1
   10f54:	2b00      	cmp	r3, #0
   10f56:	d00e      	beq.n	10f76 <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10f58:	f242 0312 	movw	r3, #8210	; 0x2012
   10f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f60:	f242 0212 	movw	r2, #8210	; 0x2012
   10f64:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f68:	7812      	ldrb	r2, [r2, #0]
   10f6a:	b2d2      	uxtb	r2, r2
   10f6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10f70:	b2d2      	uxtb	r2, r2
   10f72:	701a      	strb	r2, [r3, #0]
   10f74:	e00d      	b.n	10f92 <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10f76:	f242 0312 	movw	r3, #8210	; 0x2012
   10f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f7e:	f242 0212 	movw	r2, #8210	; 0x2012
   10f82:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f86:	7812      	ldrb	r2, [r2, #0]
   10f88:	b2d2      	uxtb	r2, r2
   10f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10f8e:	b2d2      	uxtb	r2, r2
   10f90:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   10f92:	f64b 73fb 	movw	r3, #49147	; 0xbffb
   10f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f9a:	781b      	ldrb	r3, [r3, #0]
   10f9c:	085b      	lsrs	r3, r3, #1
   10f9e:	b2da      	uxtb	r2, r3
   10fa0:	f64b 73fb 	movw	r3, #49147	; 0xbffb
   10fa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fa8:	701a      	strb	r2, [r3, #0]
   10faa:	e00d      	b.n	10fc8 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   10fac:	f242 0312 	movw	r3, #8210	; 0x2012
   10fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fb4:	f242 0212 	movw	r2, #8210	; 0x2012
   10fb8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fbc:	7812      	ldrb	r2, [r2, #0]
   10fbe:	b2d2      	uxtb	r2, r2
   10fc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10fc4:	b2d2      	uxtb	r2, r2
   10fc6:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   10fc8:	f64b 73fc 	movw	r3, #49148	; 0xbffc
   10fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fd0:	781b      	ldrb	r3, [r3, #0]
   10fd2:	3301      	adds	r3, #1
   10fd4:	b2da      	uxtb	r2, r3
   10fd6:	f64b 73fc 	movw	r3, #49148	; 0xbffc
   10fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fde:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   10fe0:	f64b 73fc 	movw	r3, #49148	; 0xbffc
   10fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fe8:	781b      	ldrb	r3, [r3, #0]
   10fea:	2b09      	cmp	r3, #9
   10fec:	d94d      	bls.n	1108a <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   10fee:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ff6:	781a      	ldrb	r2, [r3, #0]
   10ff8:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   10ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11000:	781b      	ldrb	r3, [r3, #0]
   11002:	b2db      	uxtb	r3, r3
   11004:	429a      	cmp	r2, r3
   11006:	d10e      	bne.n	11026 <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   11008:	f242 0339 	movw	r3, #8249	; 0x2039
   1100c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11010:	f242 0239 	movw	r2, #8249	; 0x2039
   11014:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11018:	7812      	ldrb	r2, [r2, #0]
   1101a:	b2d2      	uxtb	r2, r2
   1101c:	f022 0210 	bic.w	r2, r2, #16
   11020:	b2d2      	uxtb	r2, r2
   11022:	701a      	strb	r2, [r3, #0]
   11024:	e031      	b.n	1108a <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   11026:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   1102a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1102e:	781b      	ldrb	r3, [r3, #0]
   11030:	b2db      	uxtb	r3, r3
   11032:	461a      	mov	r2, r3
   11034:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   11038:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1103c:	5c9a      	ldrb	r2, [r3, r2]
   1103e:	f64b 73fb 	movw	r3, #49147	; 0xbffb
   11042:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11046:	701a      	strb	r2, [r3, #0]
   11048:	f64b 73fc 	movw	r3, #49148	; 0xbffc
   1104c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11050:	2200      	movs	r2, #0
   11052:	701a      	strb	r2, [r3, #0]
   11054:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   11058:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1105c:	781b      	ldrb	r3, [r3, #0]
   1105e:	b2db      	uxtb	r3, r3
   11060:	3301      	adds	r3, #1
   11062:	b2da      	uxtb	r2, r3
   11064:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   11068:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1106c:	701a      	strb	r2, [r3, #0]
   1106e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   11072:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11076:	781b      	ldrb	r3, [r3, #0]
   11078:	b2db      	uxtb	r3, r3
   1107a:	2bff      	cmp	r3, #255	; 0xff
   1107c:	d105      	bne.n	1108a <__vector_5+0x182>
   1107e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   11082:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11086:	2200      	movs	r2, #0
   11088:	701a      	strb	r2, [r3, #0]
    }
  }
}
   1108a:	46bd      	mov	sp, r7
   1108c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11090:	4770      	bx	lr
   11092:	bf00      	nop

00011094 <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   11094:	b480      	push	{r7}
   11096:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   11098:	f24c 032f 	movw	r3, #49199	; 0xc02f
   1109c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110a0:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   110a2:	f240 33ee 	movw	r3, #1006	; 0x3ee
   110a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110aa:	2200      	movs	r2, #0
   110ac:	701a      	strb	r2, [r3, #0]
}
   110ae:	46bd      	mov	sp, r7
   110b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   110b4:	4770      	bx	lr
   110b6:	bf00      	nop

000110b8 <link_fbw_send>:

void link_fbw_send(void) {
   110b8:	b480      	push	{r7}
   110ba:	b083      	sub	sp, #12
   110bc:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   110be:	f24c 0334 	movw	r3, #49204	; 0xc034
   110c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110c6:	781b      	ldrb	r3, [r3, #0]
   110c8:	b2db      	uxtb	r3, r3
   110ca:	2b00      	cmp	r3, #0
   110cc:	d00c      	beq.n	110e8 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   110ce:	f24c 0335 	movw	r3, #49205	; 0xc035
   110d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110d6:	781b      	ldrb	r3, [r3, #0]
   110d8:	3301      	adds	r3, #1
   110da:	b2da      	uxtb	r2, r3
   110dc:	f24c 0335 	movw	r3, #49205	; 0xc035
   110e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110e4:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   110e6:	e064      	b.n	111b2 <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   110e8:	f242 030d 	movw	r3, #8205	; 0x200d
   110ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110f0:	2251      	movs	r2, #81	; 0x51
   110f2:	701a      	strb	r2, [r3, #0]
   110f4:	f242 030e 	movw	r3, #8206	; 0x200e
   110f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110fc:	781b      	ldrb	r3, [r3, #0]
   110fe:	b2db      	uxtb	r3, r3
   11100:	b2db      	uxtb	r3, r3
   11102:	b25b      	sxtb	r3, r3
   11104:	2b00      	cmp	r3, #0
   11106:	da05      	bge.n	11114 <link_fbw_send+0x5c>
   11108:	f242 030f 	movw	r3, #8207	; 0x200f
   1110c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11110:	781b      	ldrb	r3, [r3, #0]
   11112:	71fb      	strb	r3, [r7, #7]
   11114:	f242 030d 	movw	r3, #8205	; 0x200d
   11118:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1111c:	f242 020d 	movw	r2, #8205	; 0x200d
   11120:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11124:	7812      	ldrb	r2, [r2, #0]
   11126:	b2d2      	uxtb	r2, r2
   11128:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1112c:	b2d2      	uxtb	r2, r2
   1112e:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   11130:	f24c 0334 	movw	r3, #49204	; 0xc034
   11134:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11138:	2201      	movs	r2, #1
   1113a:	701a      	strb	r2, [r3, #0]
   1113c:	f242 0318 	movw	r3, #8216	; 0x2018
   11140:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11144:	f242 0218 	movw	r2, #8216	; 0x2018
   11148:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1114c:	7812      	ldrb	r2, [r2, #0]
   1114e:	b2d2      	uxtb	r2, r2
   11150:	f022 0201 	bic.w	r2, r2, #1
   11154:	b2d2      	uxtb	r2, r2
   11156:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   11158:	f24c 0331 	movw	r3, #49201	; 0xc031
   1115c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11160:	2200      	movs	r2, #0
   11162:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   11164:	f24c 0332 	movw	r3, #49202	; 0xc032
   11168:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1116c:	2200      	movs	r2, #0
   1116e:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   11170:	f24c 0331 	movw	r3, #49201	; 0xc031
   11174:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11178:	781b      	ldrb	r3, [r3, #0]
   1117a:	461a      	mov	r2, r3
   1117c:	f24c 0318 	movw	r3, #49176	; 0xc018
   11180:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11184:	4413      	add	r3, r2
   11186:	781a      	ldrb	r2, [r3, #0]
   11188:	f24c 0333 	movw	r3, #49203	; 0xc033
   1118c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11190:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   11192:	f242 030f 	movw	r3, #8207	; 0x200f
   11196:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1119a:	f24c 0233 	movw	r2, #49203	; 0xc033
   1119e:	f2c2 0204 	movt	r2, #8196	; 0x2004
   111a2:	7812      	ldrb	r2, [r2, #0]
   111a4:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   111a6:	f24c 032e 	movw	r3, #49198	; 0xc02e
   111aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111ae:	2200      	movs	r2, #0
   111b0:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   111b2:	370c      	adds	r7, #12
   111b4:	46bd      	mov	sp, r7
   111b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   111ba:	4770      	bx	lr

000111bc <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   111bc:	b480      	push	{r7}
   111be:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   111c0:	f242 032a 	movw	r3, #8234	; 0x202a
   111c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111c8:	f242 022c 	movw	r2, #8236	; 0x202c
   111cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111d0:	8812      	ldrh	r2, [r2, #0]
   111d2:	b292      	uxth	r2, r2
   111d4:	32c8      	adds	r2, #200	; 0xc8
   111d6:	b292      	uxth	r2, r2
   111d8:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   111da:	f242 0336 	movw	r3, #8246	; 0x2036
   111de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111e2:	f242 0236 	movw	r2, #8246	; 0x2036
   111e6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111ea:	7812      	ldrb	r2, [r2, #0]
   111ec:	b2d2      	uxtb	r2, r2
   111ee:	f042 0210 	orr.w	r2, r2, #16
   111f2:	b2d2      	uxtb	r2, r2
   111f4:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   111f6:	f242 0337 	movw	r3, #8247	; 0x2037
   111fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111fe:	f242 0237 	movw	r2, #8247	; 0x2037
   11202:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11206:	7812      	ldrb	r2, [r2, #0]
   11208:	b2d2      	uxtb	r2, r2
   1120a:	f042 0210 	orr.w	r2, r2, #16
   1120e:	b2d2      	uxtb	r2, r2
   11210:	701a      	strb	r2, [r3, #0]
}
   11212:	46bd      	mov	sp, r7
   11214:	f85d 7b04 	ldr.w	r7, [sp], #4
   11218:	4770      	bx	lr
   1121a:	bf00      	nop

0001121c <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   1121c:	b480      	push	{r7}
   1121e:	b083      	sub	sp, #12
   11220:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   11222:	f242 0337 	movw	r3, #8247	; 0x2037
   11226:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1122a:	f242 0237 	movw	r2, #8247	; 0x2037
   1122e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11232:	7812      	ldrb	r2, [r2, #0]
   11234:	b2d2      	uxtb	r2, r2
   11236:	f022 0210 	bic.w	r2, r2, #16
   1123a:	b2d2      	uxtb	r2, r2
   1123c:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   1123e:	f24c 0331 	movw	r3, #49201	; 0xc031
   11242:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11246:	781b      	ldrb	r3, [r3, #0]
   11248:	3301      	adds	r3, #1
   1124a:	b2da      	uxtb	r2, r3
   1124c:	f24c 0331 	movw	r3, #49201	; 0xc031
   11250:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11254:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   11256:	f24c 0331 	movw	r3, #49201	; 0xc031
   1125a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1125e:	781b      	ldrb	r3, [r3, #0]
   11260:	2b17      	cmp	r3, #23
   11262:	d162      	bne.n	1132a <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   11264:	f242 030f 	movw	r3, #8207	; 0x200f
   11268:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1126c:	781b      	ldrb	r3, [r3, #0]
   1126e:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   11270:	f24c 0332 	movw	r3, #49202	; 0xc032
   11274:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11278:	781b      	ldrb	r3, [r3, #0]
   1127a:	79fa      	ldrb	r2, [r7, #7]
   1127c:	429a      	cmp	r2, r3
   1127e:	d110      	bne.n	112a2 <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   11280:	f24c 032e 	movw	r3, #49198	; 0xc02e
   11284:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11288:	2201      	movs	r2, #1
   1128a:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   1128c:	f24c 0300 	movw	r3, #49152	; 0xc000
   11290:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11294:	7d1a      	ldrb	r2, [r3, #20]
   11296:	f24c 0330 	movw	r3, #49200	; 0xc030
   1129a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1129e:	701a      	strb	r2, [r3, #0]
   112a0:	e00c      	b.n	112bc <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   112a2:	f24c 032f 	movw	r3, #49199	; 0xc02f
   112a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112aa:	781b      	ldrb	r3, [r3, #0]
   112ac:	b2db      	uxtb	r3, r3
   112ae:	3301      	adds	r3, #1
   112b0:	b2da      	uxtb	r2, r3
   112b2:	f24c 032f 	movw	r3, #49199	; 0xc02f
   112b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112ba:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   112bc:	f240 33ee 	movw	r3, #1006	; 0x3ee
   112c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112c4:	2201      	movs	r2, #1
   112c6:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   112c8:	f24c 0334 	movw	r3, #49204	; 0xc034
   112cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112d0:	2200      	movs	r2, #0
   112d2:	701a      	strb	r2, [r3, #0]
   112d4:	f242 0318 	movw	r3, #8216	; 0x2018
   112d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112dc:	f242 0218 	movw	r2, #8216	; 0x2018
   112e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   112e4:	7812      	ldrb	r2, [r2, #0]
   112e6:	b2d2      	uxtb	r2, r2
   112e8:	f042 0201 	orr.w	r2, r2, #1
   112ec:	b2d2      	uxtb	r2, r2
   112ee:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   112f0:	f242 030d 	movw	r3, #8205	; 0x200d
   112f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112f8:	f242 020d 	movw	r2, #8205	; 0x200d
   112fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11300:	7812      	ldrb	r2, [r2, #0]
   11302:	b2d2      	uxtb	r2, r2
   11304:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11308:	b2d2      	uxtb	r2, r2
   1130a:	701a      	strb	r2, [r3, #0]
   1130c:	f242 030d 	movw	r3, #8205	; 0x200d
   11310:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11314:	f242 020d 	movw	r2, #8205	; 0x200d
   11318:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1131c:	7812      	ldrb	r2, [r2, #0]
   1131e:	b2d2      	uxtb	r2, r2
   11320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11324:	b2d2      	uxtb	r2, r2
   11326:	701a      	strb	r2, [r3, #0]
    return;
   11328:	e051      	b.n	113ce <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   1132a:	f24c 0331 	movw	r3, #49201	; 0xc031
   1132e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11332:	781b      	ldrb	r3, [r3, #0]
   11334:	2b15      	cmp	r3, #21
   11336:	d820      	bhi.n	1137a <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   11338:	f24c 0331 	movw	r3, #49201	; 0xc031
   1133c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11340:	781b      	ldrb	r3, [r3, #0]
   11342:	461a      	mov	r2, r3
   11344:	f24c 0318 	movw	r3, #49176	; 0xc018
   11348:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1134c:	4413      	add	r3, r2
   1134e:	781b      	ldrb	r3, [r3, #0]
   11350:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   11352:	f242 030f 	movw	r3, #8207	; 0x200f
   11356:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1135a:	79fa      	ldrb	r2, [r7, #7]
   1135c:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   1135e:	f24c 0333 	movw	r3, #49203	; 0xc033
   11362:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11366:	781a      	ldrb	r2, [r3, #0]
   11368:	79fb      	ldrb	r3, [r7, #7]
   1136a:	4053      	eors	r3, r2
   1136c:	b2da      	uxtb	r2, r3
   1136e:	f24c 0333 	movw	r3, #49203	; 0xc033
   11372:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11376:	701a      	strb	r2, [r3, #0]
   11378:	e009      	b.n	1138e <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   1137a:	f242 030f 	movw	r3, #8207	; 0x200f
   1137e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11382:	f24c 0233 	movw	r2, #49203	; 0xc033
   11386:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1138a:	7812      	ldrb	r2, [r2, #0]
   1138c:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   1138e:	f242 030f 	movw	r3, #8207	; 0x200f
   11392:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11396:	781b      	ldrb	r3, [r3, #0]
   11398:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   1139a:	f24c 0331 	movw	r3, #49201	; 0xc031
   1139e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113a2:	781b      	ldrb	r3, [r3, #0]
   113a4:	1e5a      	subs	r2, r3, #1
   113a6:	f24c 0300 	movw	r3, #49152	; 0xc000
   113aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113ae:	4413      	add	r3, r2
   113b0:	79fa      	ldrb	r2, [r7, #7]
   113b2:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   113b4:	f24c 0332 	movw	r3, #49202	; 0xc032
   113b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113bc:	781a      	ldrb	r2, [r3, #0]
   113be:	79fb      	ldrb	r3, [r7, #7]
   113c0:	4053      	eors	r3, r2
   113c2:	b2da      	uxtb	r2, r3
   113c4:	f24c 0332 	movw	r3, #49202	; 0xc032
   113c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113cc:	701a      	strb	r2, [r3, #0]
}
   113ce:	370c      	adds	r7, #12
   113d0:	46bd      	mov	sp, r7
   113d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   113d6:	4770      	bx	lr

000113d8 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   113d8:	b480      	push	{r7}
   113da:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   113dc:	f242 0317 	movw	r3, #8215	; 0x2017
   113e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113e4:	f242 0217 	movw	r2, #8215	; 0x2017
   113e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   113ec:	7812      	ldrb	r2, [r2, #0]
   113ee:	b2d2      	uxtb	r2, r2
   113f0:	f042 0206 	orr.w	r2, r2, #6
   113f4:	b2d2      	uxtb	r2, r2
   113f6:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   113f8:	f242 0317 	movw	r3, #8215	; 0x2017
   113fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11400:	f242 0217 	movw	r2, #8215	; 0x2017
   11404:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11408:	7812      	ldrb	r2, [r2, #0]
   1140a:	b2d2      	uxtb	r2, r2
   1140c:	f042 0201 	orr.w	r2, r2, #1
   11410:	b2d2      	uxtb	r2, r2
   11412:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   11414:	f24c 0334 	movw	r3, #49204	; 0xc034
   11418:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1141c:	2200      	movs	r2, #0
   1141e:	701a      	strb	r2, [r3, #0]
   11420:	f242 0318 	movw	r3, #8216	; 0x2018
   11424:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11428:	f242 0218 	movw	r2, #8216	; 0x2018
   1142c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11430:	7812      	ldrb	r2, [r2, #0]
   11432:	b2d2      	uxtb	r2, r2
   11434:	f042 0201 	orr.w	r2, r2, #1
   11438:	b2d2      	uxtb	r2, r2
   1143a:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   1143c:	f242 0302 	movw	r3, #8194	; 0x2002
   11440:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11444:	f242 0202 	movw	r2, #8194	; 0x2002
   11448:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1144c:	7812      	ldrb	r2, [r2, #0]
   1144e:	b2d2      	uxtb	r2, r2
   11450:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11454:	b2d2      	uxtb	r2, r2
   11456:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   11458:	f24c 0334 	movw	r3, #49204	; 0xc034
   1145c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11460:	2200      	movs	r2, #0
   11462:	701a      	strb	r2, [r3, #0]
   11464:	f242 0303 	movw	r3, #8195	; 0x2003
   11468:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1146c:	f242 0203 	movw	r2, #8195	; 0x2003
   11470:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11474:	7812      	ldrb	r2, [r2, #0]
   11476:	b2d2      	uxtb	r2, r2
   11478:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1147c:	b2d2      	uxtb	r2, r2
   1147e:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   11480:	f24c 0334 	movw	r3, #49204	; 0xc034
   11484:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11488:	2200      	movs	r2, #0
   1148a:	701a      	strb	r2, [r3, #0]
}
   1148c:	46bd      	mov	sp, r7
   1148e:	f85d 7b04 	ldr.w	r7, [sp], #4
   11492:	4770      	bx	lr

00011494 <__vector_17>:


SIGNAL(SIG_SPI) {
   11494:	b580      	push	{r7, lr}
   11496:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   11498:	f24c 0334 	movw	r3, #49204	; 0xc034
   1149c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114a0:	781b      	ldrb	r3, [r3, #0]
   114a2:	b2db      	uxtb	r3, r3
   114a4:	2b01      	cmp	r3, #1
   114a6:	d102      	bne.n	114ae <__vector_17+0x1a>
    link_fbw_on_spi_it();
   114a8:	f7ff fe88 	bl	111bc <link_fbw_on_spi_it>
   114ac:	e00b      	b.n	114c6 <__vector_17+0x32>
  else
    fatal_error_nb++;
   114ae:	f64b 63d8 	movw	r3, #48856	; 0xbed8
   114b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114b6:	781b      	ldrb	r3, [r3, #0]
   114b8:	3301      	adds	r3, #1
   114ba:	b2da      	uxtb	r2, r3
   114bc:	f64b 63d8 	movw	r3, #48856	; 0xbed8
   114c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114c4:	701a      	strb	r2, [r3, #0]
}
   114c6:	bd80      	pop	{r7, pc}

000114c8 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   114c8:	b480      	push	{r7}
   114ca:	b083      	sub	sp, #12
   114cc:	af00      	add	r7, sp, #0
   114ce:	4603      	mov	r3, r0
   114d0:	6039      	str	r1, [r7, #0]
   114d2:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   114d4:	79fa      	ldrb	r2, [r7, #7]
   114d6:	f24c 0348 	movw	r3, #49224	; 0xc048
   114da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114de:	6839      	ldr	r1, [r7, #0]
   114e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   114e4:	370c      	adds	r7, #12
   114e6:	46bd      	mov	sp, r7
   114e8:	f85d 7b04 	ldr.w	r7, [sp], #4
   114ec:	4770      	bx	lr
   114ee:	bf00      	nop

000114f0 <adc_init>:

void 
adc_init( void )
{
   114f0:	b480      	push	{r7}
   114f2:	b083      	sub	sp, #12
   114f4:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   114f6:	f242 0362 	movw	r3, #8290	; 0x2062
   114fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114fe:	2200      	movs	r2, #0
   11500:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   11502:	f242 0361 	movw	r3, #8289	; 0x2061
   11506:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1150a:	2200      	movs	r2, #0
   1150c:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   1150e:	f242 0307 	movw	r3, #8199	; 0x2007
   11512:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11516:	2240      	movs	r2, #64	; 0x40
   11518:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   1151a:	f242 0308 	movw	r3, #8200	; 0x2008
   1151e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11522:	f242 0208 	movw	r2, #8200	; 0x2008
   11526:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1152a:	7812      	ldrb	r2, [r2, #0]
   1152c:	b2d2      	uxtb	r2, r2
   1152e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11532:	b2d2      	uxtb	r2, r2
   11534:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   11536:	f242 0306 	movw	r3, #8198	; 0x2006
   1153a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1153e:	22cf      	movs	r2, #207	; 0xcf
   11540:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11542:	2300      	movs	r3, #0
   11544:	71fb      	strb	r3, [r7, #7]
   11546:	e00a      	b.n	1155e <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   11548:	79fa      	ldrb	r2, [r7, #7]
   1154a:	f24c 0348 	movw	r3, #49224	; 0xc048
   1154e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11552:	2100      	movs	r1, #0
   11554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11558:	79fb      	ldrb	r3, [r7, #7]
   1155a:	3301      	adds	r3, #1
   1155c:	71fb      	strb	r3, [r7, #7]
   1155e:	79fb      	ldrb	r3, [r7, #7]
   11560:	2b07      	cmp	r3, #7
   11562:	d9f1      	bls.n	11548 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   11564:	370c      	adds	r7, #12
   11566:	46bd      	mov	sp, r7
   11568:	f85d 7b04 	ldr.w	r7, [sp], #4
   1156c:	4770      	bx	lr
   1156e:	bf00      	nop

00011570 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   11570:	b480      	push	{r7}
   11572:	b085      	sub	sp, #20
   11574:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   11576:	f242 0307 	movw	r3, #8199	; 0x2007
   1157a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1157e:	781b      	ldrb	r3, [r3, #0]
   11580:	b2db      	uxtb	r3, r3
   11582:	f003 0307 	and.w	r3, r3, #7
   11586:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   11588:	7bfa      	ldrb	r2, [r7, #15]
   1158a:	f24c 0348 	movw	r3, #49224	; 0xc048
   1158e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11596:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   11598:	f242 0304 	movw	r3, #8196	; 0x2004
   1159c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115a0:	881b      	ldrh	r3, [r3, #0]
   115a2:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   115a4:	7bfa      	ldrb	r2, [r7, #15]
   115a6:	f24c 0338 	movw	r3, #49208	; 0xc038
   115aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115ae:	88f9      	ldrh	r1, [r7, #6]
   115b0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   115b4:	68bb      	ldr	r3, [r7, #8]
   115b6:	2b00      	cmp	r3, #0
   115b8:	d025      	beq.n	11606 <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   115ba:	68bb      	ldr	r3, [r7, #8]
   115bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   115c0:	3301      	adds	r3, #1
   115c2:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   115c4:	7bbb      	ldrb	r3, [r7, #14]
   115c6:	2b1f      	cmp	r3, #31
   115c8:	d901      	bls.n	115ce <__vector_21+0x5e>
   115ca:	2300      	movs	r3, #0
   115cc:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   115ce:	68bb      	ldr	r3, [r7, #8]
   115d0:	881a      	ldrh	r2, [r3, #0]
   115d2:	7bbb      	ldrb	r3, [r7, #14]
   115d4:	68b9      	ldr	r1, [r7, #8]
   115d6:	005b      	lsls	r3, r3, #1
   115d8:	440b      	add	r3, r1
   115da:	885b      	ldrh	r3, [r3, #2]
   115dc:	1ad3      	subs	r3, r2, r3
   115de:	b29a      	uxth	r2, r3
   115e0:	68bb      	ldr	r3, [r7, #8]
   115e2:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   115e4:	7bbb      	ldrb	r3, [r7, #14]
   115e6:	68ba      	ldr	r2, [r7, #8]
   115e8:	005b      	lsls	r3, r3, #1
   115ea:	4413      	add	r3, r2
   115ec:	88fa      	ldrh	r2, [r7, #6]
   115ee:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   115f0:	68bb      	ldr	r3, [r7, #8]
   115f2:	881a      	ldrh	r2, [r3, #0]
   115f4:	88fb      	ldrh	r3, [r7, #6]
   115f6:	4413      	add	r3, r2
   115f8:	b29a      	uxth	r2, r3
   115fa:	68bb      	ldr	r3, [r7, #8]
   115fc:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   115fe:	68bb      	ldr	r3, [r7, #8]
   11600:	7bba      	ldrb	r2, [r7, #14]
   11602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   11606:	7bfb      	ldrb	r3, [r7, #15]
   11608:	3301      	adds	r3, #1
   1160a:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   1160c:	7bfb      	ldrb	r3, [r7, #15]
   1160e:	2b07      	cmp	r3, #7
   11610:	d901      	bls.n	11616 <__vector_21+0xa6>
    adc_input = 0;
   11612:	2300      	movs	r3, #0
   11614:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   11616:	f242 0307 	movw	r3, #8199	; 0x2007
   1161a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1161e:	7bfa      	ldrb	r2, [r7, #15]
   11620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11624:	b2d2      	uxtb	r2, r2
   11626:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   11628:	f242 0306 	movw	r3, #8198	; 0x2006
   1162c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11630:	f242 0206 	movw	r2, #8198	; 0x2006
   11634:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11638:	7812      	ldrb	r2, [r2, #0]
   1163a:	b2d2      	uxtb	r2, r2
   1163c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11640:	b2d2      	uxtb	r2, r2
   11642:	701a      	strb	r2, [r3, #0]
  
}
   11644:	3714      	adds	r7, #20
   11646:	46bd      	mov	sp, r7
   11648:	f85d 7b04 	ldr.w	r7, [sp], #4
   1164c:	4770      	bx	lr
   1164e:	bf00      	nop

00011650 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   11650:	b580      	push	{r7, lr}
   11652:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   11654:	f003 fca8 	bl	14fa8 <uart1_init>
#endif
  ubx_status = UNINIT;
   11658:	f24c 138f 	movw	r3, #49551	; 0xc18f
   1165c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11660:	2200      	movs	r2, #0
   11662:	701a      	strb	r2, [r3, #0]
}
   11664:	bd80      	pop	{r7, pc}
   11666:	bf00      	nop

00011668 <parse_gps_msg>:

void parse_gps_msg( void ) {
   11668:	b580      	push	{r7, lr}
   1166a:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   1166c:	f24c 1396 	movw	r3, #49558	; 0xc196
   11670:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11674:	781b      	ldrb	r3, [r3, #0]
   11676:	2b01      	cmp	r3, #1
   11678:	f040 80f9 	bne.w	1186e <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   1167c:	f24c 1395 	movw	r3, #49557	; 0xc195
   11680:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11684:	781b      	ldrb	r3, [r3, #0]
   11686:	2b08      	cmp	r3, #8
   11688:	d128      	bne.n	116dc <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   1168a:	f24c 0390 	movw	r3, #49296	; 0xc090
   1168e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11692:	685a      	ldr	r2, [r3, #4]
   11694:	f24c 037c 	movw	r3, #49276	; 0xc07c
   11698:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1169c:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   1169e:	f24c 0390 	movw	r3, #49296	; 0xc090
   116a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116a6:	689a      	ldr	r2, [r3, #8]
   116a8:	f24c 0380 	movw	r3, #49280	; 0xc080
   116ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116b0:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   116b2:	4b73      	ldr	r3, [pc, #460]	; (11880 <parse_gps_msg+0x218>)
   116b4:	681b      	ldr	r3, [r3, #0]
   116b6:	4618      	mov	r0, r3
   116b8:	f006 fda8 	bl	1820c <__aeabi_i2f>
   116bc:	4603      	mov	r3, r0
   116be:	4618      	mov	r0, r3
   116c0:	f04f 0100 	mov.w	r1, #0
   116c4:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   116c8:	f006 fea8 	bl	1841c <__aeabi_fdiv>
   116cc:	4603      	mov	r3, r0
   116ce:	461a      	mov	r2, r3
   116d0:	f24c 036c 	movw	r3, #49260	; 0xc06c
   116d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116d8:	601a      	str	r2, [r3, #0]
   116da:	e0c8      	b.n	1186e <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   116dc:	f24c 1395 	movw	r3, #49557	; 0xc195
   116e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116e4:	781b      	ldrb	r3, [r3, #0]
   116e6:	2b03      	cmp	r3, #3
   116e8:	d10a      	bne.n	11700 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   116ea:	f24c 0390 	movw	r3, #49296	; 0xc090
   116ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116f2:	791a      	ldrb	r2, [r3, #4]
   116f4:	f24c 038c 	movw	r3, #49292	; 0xc08c
   116f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116fc:	701a      	strb	r2, [r3, #0]
   116fe:	e0b6      	b.n	1186e <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   11700:	f24c 1395 	movw	r3, #49557	; 0xc195
   11704:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11708:	781b      	ldrb	r3, [r3, #0]
   1170a:	2b12      	cmp	r3, #18
   1170c:	f040 80af 	bne.w	1186e <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   11710:	4b5c      	ldr	r3, [pc, #368]	; (11884 <parse_gps_msg+0x21c>)
   11712:	681b      	ldr	r3, [r3, #0]
   11714:	4618      	mov	r0, r3
   11716:	f006 fd75 	bl	18204 <__aeabi_ui2f>
   1171a:	4603      	mov	r3, r0
   1171c:	4618      	mov	r0, r3
   1171e:	f04f 0100 	mov.w	r1, #0
   11722:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11726:	f006 fe79 	bl	1841c <__aeabi_fdiv>
   1172a:	4603      	mov	r3, r0
   1172c:	461a      	mov	r2, r3
   1172e:	f24c 0370 	movw	r3, #49264	; 0xc070
   11732:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11736:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   11738:	4b51      	ldr	r3, [pc, #324]	; (11880 <parse_gps_msg+0x218>)
   1173a:	681b      	ldr	r3, [r3, #0]
   1173c:	4618      	mov	r0, r3
   1173e:	f006 fd65 	bl	1820c <__aeabi_i2f>
   11742:	4603      	mov	r3, r0
   11744:	4618      	mov	r0, r3
   11746:	f04f 0100 	mov.w	r1, #0
   1174a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1174e:	f006 fe65 	bl	1841c <__aeabi_fdiv>
   11752:	4603      	mov	r3, r0
   11754:	461a      	mov	r2, r3
   11756:	f24c 0374 	movw	r3, #49268	; 0xc074
   1175a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1175e:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   11760:	4b49      	ldr	r3, [pc, #292]	; (11888 <parse_gps_msg+0x220>)
   11762:	681b      	ldr	r3, [r3, #0]
   11764:	4618      	mov	r0, r3
   11766:	f006 fd51 	bl	1820c <__aeabi_i2f>
   1176a:	4603      	mov	r3, r0
   1176c:	4618      	mov	r0, r3
   1176e:	f006 f90d 	bl	1798c <__aeabi_f2d>
   11772:	4602      	mov	r2, r0
   11774:	460b      	mov	r3, r1
   11776:	4610      	mov	r0, r2
   11778:	4619      	mov	r1, r3
   1177a:	a33d      	add	r3, pc, #244	; (adr r3, 11870 <parse_gps_msg+0x208>)
   1177c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11780:	f006 fa82 	bl	17c88 <__aeabi_ddiv>
   11784:	4602      	mov	r2, r0
   11786:	460b      	mov	r3, r1
   11788:	4610      	mov	r0, r2
   1178a:	4619      	mov	r1, r3
   1178c:	f04f 0200 	mov.w	r2, #0
   11790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   11794:	f2c4 0366 	movt	r3, #16486	; 0x4066
   11798:	f006 fa76 	bl	17c88 <__aeabi_ddiv>
   1179c:	4602      	mov	r2, r0
   1179e:	460b      	mov	r3, r1
   117a0:	4610      	mov	r0, r2
   117a2:	4619      	mov	r1, r3
   117a4:	a334      	add	r3, pc, #208	; (adr r3, 11878 <parse_gps_msg+0x210>)
   117a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   117aa:	f006 f943 	bl	17a34 <__aeabi_dmul>
   117ae:	4602      	mov	r2, r0
   117b0:	460b      	mov	r3, r1
   117b2:	4610      	mov	r0, r2
   117b4:	4619      	mov	r1, r3
   117b6:	f006 fc1f 	bl	17ff8 <__aeabi_d2f>
   117ba:	4602      	mov	r2, r0
   117bc:	f24c 0378 	movw	r3, #49272	; 0xc078
   117c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117c4:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   117c6:	f24c 0390 	movw	r3, #49296	; 0xc090
   117ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117ce:	681b      	ldr	r3, [r3, #0]
   117d0:	4618      	mov	r0, r3
   117d2:	f006 fd17 	bl	18204 <__aeabi_ui2f>
   117d6:	4603      	mov	r3, r0
   117d8:	4618      	mov	r0, r3
   117da:	f04f 0100 	mov.w	r1, #0
   117de:	f2c4 417a 	movt	r1, #17530	; 0x447a
   117e2:	f006 fe1b 	bl	1841c <__aeabi_fdiv>
   117e6:	4603      	mov	r3, r0
   117e8:	461a      	mov	r2, r3
   117ea:	f24c 0368 	movw	r3, #49256	; 0xc068
   117ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117f2:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   117f4:	f24c 037c 	movw	r3, #49276	; 0xc07c
   117f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117fc:	681a      	ldr	r2, [r3, #0]
   117fe:	f248 531f 	movw	r3, #34079	; 0x851f
   11802:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11806:	fb83 1302 	smull	r1, r3, r3, r2
   1180a:	1159      	asrs	r1, r3, #5
   1180c:	17d3      	asrs	r3, r2, #31
   1180e:	1acb      	subs	r3, r1, r3
   11810:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   11814:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   11818:	4618      	mov	r0, r3
   1181a:	f006 fcf7 	bl	1820c <__aeabi_i2f>
   1181e:	4602      	mov	r2, r0
   11820:	f24c 0384 	movw	r3, #49284	; 0xc084
   11824:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11828:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   1182a:	f24c 0380 	movw	r3, #49280	; 0xc080
   1182e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11832:	681a      	ldr	r2, [r3, #0]
   11834:	f248 531f 	movw	r3, #34079	; 0x851f
   11838:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   1183c:	fb83 1302 	smull	r1, r3, r3, r2
   11840:	1159      	asrs	r1, r3, #5
   11842:	17d3      	asrs	r3, r2, #31
   11844:	1aca      	subs	r2, r1, r3
   11846:	f648 231a 	movw	r3, #35354	; 0x8a1a
   1184a:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   1184e:	4413      	add	r3, r2
   11850:	4618      	mov	r0, r3
   11852:	f006 fcdb 	bl	1820c <__aeabi_i2f>
   11856:	4602      	mov	r2, r0
   11858:	f24c 0388 	movw	r3, #49288	; 0xc088
   1185c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11860:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   11862:	f24c 038e 	movw	r3, #49294	; 0xc08e
   11866:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1186a:	2201      	movs	r2, #1
   1186c:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   1186e:	bd80      	pop	{r7, pc}
   11870:	00000000 	.word	0x00000000
   11874:	40f86a00 	.word	0x40f86a00
   11878:	5a7ed197 	.word	0x5a7ed197
   1187c:	400921fb 	.word	0x400921fb
   11880:	2004c09c 	.word	0x2004c09c
   11884:	2004c0a4 	.word	0x2004c0a4
   11888:	2004c0a8 	.word	0x2004c0a8

0001188c <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   1188c:	b480      	push	{r7}
   1188e:	b083      	sub	sp, #12
   11890:	af00      	add	r7, sp, #0
   11892:	4603      	mov	r3, r0
   11894:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   11896:	f24c 138f 	movw	r3, #49551	; 0xc18f
   1189a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1189e:	781b      	ldrb	r3, [r3, #0]
   118a0:	2b06      	cmp	r3, #6
   118a2:	d81d      	bhi.n	118e0 <parse_ubx+0x54>
    ck_a += c;
   118a4:	f24c 1393 	movw	r3, #49555	; 0xc193
   118a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118ac:	781a      	ldrb	r2, [r3, #0]
   118ae:	79fb      	ldrb	r3, [r7, #7]
   118b0:	4413      	add	r3, r2
   118b2:	b2da      	uxtb	r2, r3
   118b4:	f24c 1393 	movw	r3, #49555	; 0xc193
   118b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118bc:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   118be:	f24c 1394 	movw	r3, #49556	; 0xc194
   118c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118c6:	781a      	ldrb	r2, [r3, #0]
   118c8:	f24c 1393 	movw	r3, #49555	; 0xc193
   118cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118d0:	781b      	ldrb	r3, [r3, #0]
   118d2:	4413      	add	r3, r2
   118d4:	b2da      	uxtb	r2, r3
   118d6:	f24c 1394 	movw	r3, #49556	; 0xc194
   118da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118de:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   118e0:	f24c 138f 	movw	r3, #49551	; 0xc18f
   118e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118e8:	781b      	ldrb	r3, [r3, #0]
   118ea:	2b00      	cmp	r3, #0
   118ec:	d110      	bne.n	11910 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   118ee:	79fb      	ldrb	r3, [r7, #7]
   118f0:	2bb5      	cmp	r3, #181	; 0xb5
   118f2:	f040 8135 	bne.w	11b60 <parse_ubx+0x2d4>
      ubx_status++;
   118f6:	f24c 138f 	movw	r3, #49551	; 0xc18f
   118fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118fe:	781b      	ldrb	r3, [r3, #0]
   11900:	3301      	adds	r3, #1
   11902:	b2da      	uxtb	r2, r3
   11904:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11908:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1190c:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   1190e:	e12f      	b.n	11b70 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   11910:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11914:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11918:	781b      	ldrb	r3, [r3, #0]
   1191a:	2b01      	cmp	r3, #1
   1191c:	d11c      	bne.n	11958 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   1191e:	79fb      	ldrb	r3, [r7, #7]
   11920:	2b62      	cmp	r3, #98	; 0x62
   11922:	d000      	beq.n	11926 <parse_ubx+0x9a>
      goto error;
   11924:	e11d      	b.n	11b62 <parse_ubx+0x2d6>
    ck_a = 0;
   11926:	f24c 1393 	movw	r3, #49555	; 0xc193
   1192a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1192e:	2200      	movs	r2, #0
   11930:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   11932:	f24c 1394 	movw	r3, #49556	; 0xc194
   11936:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1193a:	2200      	movs	r2, #0
   1193c:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   1193e:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11942:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11946:	781b      	ldrb	r3, [r3, #0]
   11948:	3301      	adds	r3, #1
   1194a:	b2da      	uxtb	r2, r3
   1194c:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11950:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11954:	701a      	strb	r2, [r3, #0]
   11956:	e103      	b.n	11b60 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11958:	f24c 138f 	movw	r3, #49551	; 0xc18f
   1195c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11960:	781b      	ldrb	r3, [r3, #0]
   11962:	2b02      	cmp	r3, #2
   11964:	d127      	bne.n	119b6 <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   11966:	f24c 038d 	movw	r3, #49293	; 0xc08d
   1196a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1196e:	781b      	ldrb	r3, [r3, #0]
   11970:	b2db      	uxtb	r3, r3
   11972:	2b00      	cmp	r3, #0
   11974:	d00c      	beq.n	11990 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   11976:	f24c 1397 	movw	r3, #49559	; 0xc197
   1197a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1197e:	781b      	ldrb	r3, [r3, #0]
   11980:	3301      	adds	r3, #1
   11982:	b2da      	uxtb	r2, r3
   11984:	f24c 1397 	movw	r3, #49559	; 0xc197
   11988:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1198c:	701a      	strb	r2, [r3, #0]
      goto error;
   1198e:	e0e8      	b.n	11b62 <parse_ubx+0x2d6>
    }
    ubx_class = c;
   11990:	f24c 1396 	movw	r3, #49558	; 0xc196
   11994:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11998:	79fa      	ldrb	r2, [r7, #7]
   1199a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   1199c:	f24c 138f 	movw	r3, #49551	; 0xc18f
   119a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119a4:	781b      	ldrb	r3, [r3, #0]
   119a6:	3301      	adds	r3, #1
   119a8:	b2da      	uxtb	r2, r3
   119aa:	f24c 138f 	movw	r3, #49551	; 0xc18f
   119ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119b2:	701a      	strb	r2, [r3, #0]
   119b4:	e0d4      	b.n	11b60 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   119b6:	f24c 138f 	movw	r3, #49551	; 0xc18f
   119ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119be:	781b      	ldrb	r3, [r3, #0]
   119c0:	2b03      	cmp	r3, #3
   119c2:	d112      	bne.n	119ea <parse_ubx+0x15e>
  {
    ubx_id = c;
   119c4:	f24c 1395 	movw	r3, #49557	; 0xc195
   119c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119cc:	79fa      	ldrb	r2, [r7, #7]
   119ce:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   119d0:	f24c 138f 	movw	r3, #49551	; 0xc18f
   119d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119d8:	781b      	ldrb	r3, [r3, #0]
   119da:	3301      	adds	r3, #1
   119dc:	b2da      	uxtb	r2, r3
   119de:	f24c 138f 	movw	r3, #49551	; 0xc18f
   119e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119e6:	701a      	strb	r2, [r3, #0]
   119e8:	e0ba      	b.n	11b60 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   119ea:	f24c 138f 	movw	r3, #49551	; 0xc18f
   119ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119f2:	781b      	ldrb	r3, [r3, #0]
   119f4:	2b04      	cmp	r3, #4
   119f6:	d113      	bne.n	11a20 <parse_ubx+0x194>
  {
    ubx_len = c;
   119f8:	79fb      	ldrb	r3, [r7, #7]
   119fa:	b29a      	uxth	r2, r3
   119fc:	f24c 1390 	movw	r3, #49552	; 0xc190
   11a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a04:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   11a06:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a0e:	781b      	ldrb	r3, [r3, #0]
   11a10:	3301      	adds	r3, #1
   11a12:	b2da      	uxtb	r2, r3
   11a14:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a1c:	701a      	strb	r2, [r3, #0]
   11a1e:	e09f      	b.n	11b60 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11a20:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a28:	781b      	ldrb	r3, [r3, #0]
   11a2a:	2b05      	cmp	r3, #5
   11a2c:	d12b      	bne.n	11a86 <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   11a2e:	79fb      	ldrb	r3, [r7, #7]
   11a30:	021b      	lsls	r3, r3, #8
   11a32:	b29a      	uxth	r2, r3
   11a34:	f24c 1390 	movw	r3, #49552	; 0xc190
   11a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a3c:	881b      	ldrh	r3, [r3, #0]
   11a3e:	b29b      	uxth	r3, r3
   11a40:	4313      	orrs	r3, r2
   11a42:	b29b      	uxth	r3, r3
   11a44:	b29a      	uxth	r2, r3
   11a46:	f24c 1390 	movw	r3, #49552	; 0xc190
   11a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a4e:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11a50:	f24c 1390 	movw	r3, #49552	; 0xc190
   11a54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a58:	881b      	ldrh	r3, [r3, #0]
   11a5a:	2bff      	cmp	r3, #255	; 0xff
   11a5c:	d900      	bls.n	11a60 <parse_ubx+0x1d4>
      goto error;
   11a5e:	e080      	b.n	11b62 <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11a60:	f24c 1392 	movw	r3, #49554	; 0xc192
   11a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a68:	2200      	movs	r2, #0
   11a6a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11a6c:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a74:	781b      	ldrb	r3, [r3, #0]
   11a76:	3301      	adds	r3, #1
   11a78:	b2da      	uxtb	r2, r3
   11a7a:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a82:	701a      	strb	r2, [r3, #0]
   11a84:	e06c      	b.n	11b60 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   11a86:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11a8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a8e:	781b      	ldrb	r3, [r3, #0]
   11a90:	2b06      	cmp	r3, #6
   11a92:	d131      	bne.n	11af8 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   11a94:	f24c 1392 	movw	r3, #49554	; 0xc192
   11a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a9c:	781b      	ldrb	r3, [r3, #0]
   11a9e:	461a      	mov	r2, r3
   11aa0:	f24c 0390 	movw	r3, #49296	; 0xc090
   11aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aa8:	79f9      	ldrb	r1, [r7, #7]
   11aaa:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   11aac:	f24c 1392 	movw	r3, #49554	; 0xc192
   11ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ab4:	781b      	ldrb	r3, [r3, #0]
   11ab6:	3301      	adds	r3, #1
   11ab8:	b2da      	uxtb	r2, r3
   11aba:	f24c 1392 	movw	r3, #49554	; 0xc192
   11abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ac2:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   11ac4:	f24c 1392 	movw	r3, #49554	; 0xc192
   11ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11acc:	781b      	ldrb	r3, [r3, #0]
   11ace:	461a      	mov	r2, r3
   11ad0:	f24c 1390 	movw	r3, #49552	; 0xc190
   11ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ad8:	881b      	ldrh	r3, [r3, #0]
   11ada:	429a      	cmp	r2, r3
   11adc:	d340      	bcc.n	11b60 <parse_ubx+0x2d4>
      ubx_status++;
   11ade:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ae6:	781b      	ldrb	r3, [r3, #0]
   11ae8:	3301      	adds	r3, #1
   11aea:	b2da      	uxtb	r2, r3
   11aec:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11af0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11af4:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11af6:	e03b      	b.n	11b70 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   11af8:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b00:	781b      	ldrb	r3, [r3, #0]
   11b02:	2b07      	cmp	r3, #7
   11b04:	d115      	bne.n	11b32 <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   11b06:	f24c 1393 	movw	r3, #49555	; 0xc193
   11b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b0e:	781b      	ldrb	r3, [r3, #0]
   11b10:	79fa      	ldrb	r2, [r7, #7]
   11b12:	429a      	cmp	r2, r3
   11b14:	d000      	beq.n	11b18 <parse_ubx+0x28c>
      goto error;
   11b16:	e024      	b.n	11b62 <parse_ubx+0x2d6>
    ubx_status++;
   11b18:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b20:	781b      	ldrb	r3, [r3, #0]
   11b22:	3301      	adds	r3, #1
   11b24:	b2da      	uxtb	r2, r3
   11b26:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b2e:	701a      	strb	r2, [r3, #0]
   11b30:	e016      	b.n	11b60 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   11b32:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b3a:	781b      	ldrb	r3, [r3, #0]
   11b3c:	2b08      	cmp	r3, #8
   11b3e:	d10f      	bne.n	11b60 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11b40:	f24c 1394 	movw	r3, #49556	; 0xc194
   11b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b48:	781b      	ldrb	r3, [r3, #0]
   11b4a:	79fa      	ldrb	r2, [r7, #7]
   11b4c:	429a      	cmp	r2, r3
   11b4e:	d000      	beq.n	11b52 <parse_ubx+0x2c6>
      goto error;
   11b50:	e007      	b.n	11b62 <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   11b52:	f24c 038d 	movw	r3, #49293	; 0xc08d
   11b56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b5a:	2201      	movs	r2, #1
   11b5c:	701a      	strb	r2, [r3, #0]
    goto restart;
   11b5e:	e000      	b.n	11b62 <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11b60:	e006      	b.n	11b70 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   11b62:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b6a:	2200      	movs	r2, #0
   11b6c:	701a      	strb	r2, [r3, #0]
  return;
   11b6e:	bf00      	nop
}
   11b70:	370c      	adds	r7, #12
   11b72:	46bd      	mov	sp, r7
   11b74:	f85d 7b04 	ldr.w	r7, [sp], #4
   11b78:	4770      	bx	lr
   11b7a:	bf00      	nop

00011b7c <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   11b7c:	b580      	push	{r7, lr}
   11b7e:	b082      	sub	sp, #8
   11b80:	af00      	add	r7, sp, #0
   11b82:	f242 039c 	movw	r3, #8348	; 0x209c
   11b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b8a:	781b      	ldrb	r3, [r3, #0]
   11b8c:	71fb      	strb	r3, [r7, #7]
   11b8e:	79fb      	ldrb	r3, [r7, #7]
   11b90:	4618      	mov	r0, r3
   11b92:	f7ff fe7b 	bl	1188c <parse_ubx>
   11b96:	3708      	adds	r7, #8
   11b98:	46bd      	mov	sp, r7
   11b9a:	bd80      	pop	{r7, pc}
   11b9c:	f3af 8000 	nop.w

00011ba0 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   11ba0:	b580      	push	{r7, lr}
   11ba2:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   11ba4:	f240 33f8 	movw	r3, #1016	; 0x3f8
   11ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bac:	f24c 228f 	movw	r2, #49807	; 0xc28f
   11bb0:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   11bb4:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   11bb6:	2001      	movs	r0, #1
   11bb8:	f24c 119c 	movw	r1, #49564	; 0xc19c
   11bbc:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11bc0:	f7ff fc82 	bl	114c8 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   11bc4:	2002      	movs	r0, #2
   11bc6:	f24c 11e0 	movw	r1, #49632	; 0xc1e0
   11bca:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11bce:	f7ff fc7b 	bl	114c8 <adc_buf_channel>
}
   11bd2:	bd80      	pop	{r7, pc}

00011bd4 <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   11bd4:	b480      	push	{r7}
   11bd6:	b083      	sub	sp, #12
   11bd8:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   11bda:	f24c 139c 	movw	r3, #49564	; 0xc19c
   11bde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11be2:	881b      	ldrh	r3, [r3, #0]
   11be4:	095b      	lsrs	r3, r3, #5
   11be6:	b29b      	uxth	r3, r3
   11be8:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   11bea:	f24c 13e0 	movw	r3, #49632	; 0xc1e0
   11bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bf2:	881b      	ldrh	r3, [r3, #0]
   11bf4:	095b      	lsrs	r3, r3, #5
   11bf6:	b29b      	uxth	r3, r3
   11bf8:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   11bfa:	88fb      	ldrh	r3, [r7, #6]
   11bfc:	425b      	negs	r3, r3
   11bfe:	b29a      	uxth	r2, r3
   11c00:	88bb      	ldrh	r3, [r7, #4]
   11c02:	1ad3      	subs	r3, r2, r3
   11c04:	b29a      	uxth	r2, r3
   11c06:	f240 33f2 	movw	r3, #1010	; 0x3f2
   11c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c0e:	881b      	ldrh	r3, [r3, #0]
   11c10:	b29b      	uxth	r3, r3
   11c12:	1ad3      	subs	r3, r2, r3
   11c14:	b29b      	uxth	r3, r3
   11c16:	b29a      	uxth	r2, r3
   11c18:	f24c 1398 	movw	r3, #49560	; 0xc198
   11c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c20:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   11c22:	88ba      	ldrh	r2, [r7, #4]
   11c24:	88fb      	ldrh	r3, [r7, #6]
   11c26:	1ad3      	subs	r3, r2, r3
   11c28:	b29a      	uxth	r2, r3
   11c2a:	f240 33f4 	movw	r3, #1012	; 0x3f4
   11c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c32:	881b      	ldrh	r3, [r3, #0]
   11c34:	b29b      	uxth	r3, r3
   11c36:	1ad3      	subs	r3, r2, r3
   11c38:	b29b      	uxth	r3, r3
   11c3a:	b29a      	uxth	r2, r3
   11c3c:	f24c 139a 	movw	r3, #49562	; 0xc19a
   11c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c44:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   11c46:	370c      	adds	r7, #12
   11c48:	46bd      	mov	sp, r7
   11c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
   11c4e:	4770      	bx	lr

00011c50 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11c50:	b580      	push	{r7, lr}
   11c52:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   11c54:	f24c 139a 	movw	r3, #49562	; 0xc19a
   11c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c5c:	881b      	ldrh	r3, [r3, #0]
   11c5e:	b29b      	uxth	r3, r3
   11c60:	425b      	negs	r3, r3
   11c62:	b29b      	uxth	r3, r3
   11c64:	b29a      	uxth	r2, r3
   11c66:	f240 33f0 	movw	r3, #1008	; 0x3f0
   11c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c6e:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   11c70:	f240 33f0 	movw	r3, #1008	; 0x3f0
   11c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c78:	881b      	ldrh	r3, [r3, #0]
   11c7a:	b21b      	sxth	r3, r3
   11c7c:	4618      	mov	r0, r3
   11c7e:	f005 fe73 	bl	17968 <__aeabi_i2d>
   11c82:	4602      	mov	r2, r0
   11c84:	460b      	mov	r3, r1
   11c86:	f04f 0000 	mov.w	r0, #0
   11c8a:	f04f 0100 	mov.w	r1, #0
   11c8e:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   11c92:	f005 fff9 	bl	17c88 <__aeabi_ddiv>
   11c96:	4602      	mov	r2, r0
   11c98:	460b      	mov	r3, r1
   11c9a:	4610      	mov	r0, r2
   11c9c:	4619      	mov	r1, r3
   11c9e:	f006 f9ab 	bl	17ff8 <__aeabi_d2f>
   11ca2:	4602      	mov	r2, r0
   11ca4:	f240 33f8 	movw	r3, #1016	; 0x3f8
   11ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cac:	601a      	str	r2, [r3, #0]
}
   11cae:	bd80      	pop	{r7, pc}

00011cb0 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   11cb0:	b590      	push	{r4, r7, lr}
   11cb2:	b083      	sub	sp, #12
   11cb4:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   11cb6:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
   11cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cbe:	681a      	ldr	r2, [r3, #0]
   11cc0:	f24c 2324 	movw	r3, #49700	; 0xc224
   11cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cc8:	681b      	ldr	r3, [r3, #0]
   11cca:	4610      	mov	r0, r2
   11ccc:	4619      	mov	r1, r3
   11cce:	f006 f9e7 	bl	180a0 <__aeabi_fsub>
   11cd2:	4603      	mov	r3, r0
   11cd4:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   11cd6:	f240 33fc 	movw	r3, #1020	; 0x3fc
   11cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cde:	681b      	ldr	r3, [r3, #0]
   11ce0:	4618      	mov	r0, r3
   11ce2:	6879      	ldr	r1, [r7, #4]
   11ce4:	f006 fae6 	bl	182b4 <__aeabi_fmul>
   11ce8:	4603      	mov	r3, r0
   11cea:	4618      	mov	r0, r3
   11cec:	f04f 0100 	mov.w	r1, #0
   11cf0:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11cf4:	f006 fc7c 	bl	185f0 <__aeabi_fcmplt>
   11cf8:	4603      	mov	r3, r0
   11cfa:	2b00      	cmp	r3, #0
   11cfc:	d002      	beq.n	11d04 <roll_pitch_pid_run+0x54>
   11cfe:	f64d 2280 	movw	r2, #55936	; 0xda80
   11d02:	e026      	b.n	11d52 <roll_pitch_pid_run+0xa2>
   11d04:	f240 33fc 	movw	r3, #1020	; 0x3fc
   11d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d0c:	681b      	ldr	r3, [r3, #0]
   11d0e:	4618      	mov	r0, r3
   11d10:	6879      	ldr	r1, [r7, #4]
   11d12:	f006 facf 	bl	182b4 <__aeabi_fmul>
   11d16:	4603      	mov	r3, r0
   11d18:	4618      	mov	r0, r3
   11d1a:	f04f 0100 	mov.w	r1, #0
   11d1e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11d22:	f006 fc83 	bl	1862c <__aeabi_fcmpgt>
   11d26:	4603      	mov	r3, r0
   11d28:	2b00      	cmp	r3, #0
   11d2a:	d002      	beq.n	11d32 <roll_pitch_pid_run+0x82>
   11d2c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11d30:	e00e      	b.n	11d50 <roll_pitch_pid_run+0xa0>
   11d32:	f240 33fc 	movw	r3, #1020	; 0x3fc
   11d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d3a:	681b      	ldr	r3, [r3, #0]
   11d3c:	4618      	mov	r0, r3
   11d3e:	6879      	ldr	r1, [r7, #4]
   11d40:	f006 fab8 	bl	182b4 <__aeabi_fmul>
   11d44:	4603      	mov	r3, r0
   11d46:	4618      	mov	r0, r3
   11d48:	f006 fc7a 	bl	18640 <__aeabi_f2iz>
   11d4c:	4603      	mov	r3, r0
   11d4e:	b29b      	uxth	r3, r3
   11d50:	b29a      	uxth	r2, r3
   11d52:	f24c 232e 	movw	r3, #49710	; 0xc22e
   11d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d5a:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   11d5c:	f24c 2334 	movw	r3, #49716	; 0xc234
   11d60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d64:	681b      	ldr	r3, [r3, #0]
   11d66:	4618      	mov	r0, r3
   11d68:	f04f 0100 	mov.w	r1, #0
   11d6c:	f006 fc40 	bl	185f0 <__aeabi_fcmplt>
   11d70:	4603      	mov	r3, r0
   11d72:	2b00      	cmp	r3, #0
   11d74:	d006      	beq.n	11d84 <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   11d76:	f24c 2334 	movw	r3, #49716	; 0xc234
   11d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d7e:	f04f 0200 	mov.w	r2, #0
   11d82:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   11d84:	f24c 43c0 	movw	r3, #50368	; 0xc4c0
   11d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d8c:	681a      	ldr	r2, [r3, #0]
   11d8e:	f24c 2328 	movw	r3, #49704	; 0xc228
   11d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d96:	681b      	ldr	r3, [r3, #0]
   11d98:	4610      	mov	r0, r2
   11d9a:	4619      	mov	r1, r3
   11d9c:	f006 f980 	bl	180a0 <__aeabi_fsub>
   11da0:	4603      	mov	r3, r0
   11da2:	461c      	mov	r4, r3
   11da4:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
   11da8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dac:	681b      	ldr	r3, [r3, #0]
   11dae:	4618      	mov	r0, r3
   11db0:	f04f 0100 	mov.w	r1, #0
   11db4:	f006 fc1c 	bl	185f0 <__aeabi_fcmplt>
   11db8:	4603      	mov	r3, r0
   11dba:	2b00      	cmp	r3, #0
   11dbc:	d007      	beq.n	11dce <roll_pitch_pid_run+0x11e>
   11dbe:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
   11dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dc6:	681b      	ldr	r3, [r3, #0]
   11dc8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11dcc:	e004      	b.n	11dd8 <roll_pitch_pid_run+0x128>
   11dce:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
   11dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dd6:	681a      	ldr	r2, [r3, #0]
   11dd8:	f24c 2334 	movw	r3, #49716	; 0xc234
   11ddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11de0:	681b      	ldr	r3, [r3, #0]
   11de2:	4610      	mov	r0, r2
   11de4:	4619      	mov	r1, r3
   11de6:	f006 fa65 	bl	182b4 <__aeabi_fmul>
   11dea:	4603      	mov	r3, r0
   11dec:	4620      	mov	r0, r4
   11dee:	4619      	mov	r1, r3
   11df0:	f006 f956 	bl	180a0 <__aeabi_fsub>
   11df4:	4603      	mov	r3, r0
   11df6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   11dfa:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   11dfc:	f240 4300 	movw	r3, #1024	; 0x400
   11e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e04:	681b      	ldr	r3, [r3, #0]
   11e06:	4618      	mov	r0, r3
   11e08:	6879      	ldr	r1, [r7, #4]
   11e0a:	f006 fa53 	bl	182b4 <__aeabi_fmul>
   11e0e:	4603      	mov	r3, r0
   11e10:	4618      	mov	r0, r3
   11e12:	f04f 0100 	mov.w	r1, #0
   11e16:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11e1a:	f006 fbe9 	bl	185f0 <__aeabi_fcmplt>
   11e1e:	4603      	mov	r3, r0
   11e20:	2b00      	cmp	r3, #0
   11e22:	d002      	beq.n	11e2a <roll_pitch_pid_run+0x17a>
   11e24:	f64d 2280 	movw	r2, #55936	; 0xda80
   11e28:	e026      	b.n	11e78 <roll_pitch_pid_run+0x1c8>
   11e2a:	f240 4300 	movw	r3, #1024	; 0x400
   11e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e32:	681b      	ldr	r3, [r3, #0]
   11e34:	4618      	mov	r0, r3
   11e36:	6879      	ldr	r1, [r7, #4]
   11e38:	f006 fa3c 	bl	182b4 <__aeabi_fmul>
   11e3c:	4603      	mov	r3, r0
   11e3e:	4618      	mov	r0, r3
   11e40:	f04f 0100 	mov.w	r1, #0
   11e44:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11e48:	f006 fbf0 	bl	1862c <__aeabi_fcmpgt>
   11e4c:	4603      	mov	r3, r0
   11e4e:	2b00      	cmp	r3, #0
   11e50:	d002      	beq.n	11e58 <roll_pitch_pid_run+0x1a8>
   11e52:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11e56:	e00e      	b.n	11e76 <roll_pitch_pid_run+0x1c6>
   11e58:	f240 4300 	movw	r3, #1024	; 0x400
   11e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e60:	681b      	ldr	r3, [r3, #0]
   11e62:	4618      	mov	r0, r3
   11e64:	6879      	ldr	r1, [r7, #4]
   11e66:	f006 fa25 	bl	182b4 <__aeabi_fmul>
   11e6a:	4603      	mov	r3, r0
   11e6c:	4618      	mov	r0, r3
   11e6e:	f006 fbe7 	bl	18640 <__aeabi_f2iz>
   11e72:	4603      	mov	r3, r0
   11e74:	b29b      	uxth	r3, r3
   11e76:	b29a      	uxth	r2, r3
   11e78:	f24c 2330 	movw	r3, #49712	; 0xc230
   11e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e80:	801a      	strh	r2, [r3, #0]
}
   11e82:	370c      	adds	r7, #12
   11e84:	46bd      	mov	sp, r7
   11e86:	bd90      	pop	{r4, r7, pc}

00011e88 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   11e88:	b580      	push	{r7, lr}
   11e8a:	b082      	sub	sp, #8
   11e8c:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   11e8e:	f24c 43e8 	movw	r3, #50408	; 0xc4e8
   11e92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e96:	681a      	ldr	r2, [r3, #0]
   11e98:	f24c 233c 	movw	r3, #49724	; 0xc23c
   11e9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ea0:	681b      	ldr	r3, [r3, #0]
   11ea2:	4610      	mov	r0, r2
   11ea4:	4619      	mov	r1, r3
   11ea6:	f006 f8fb 	bl	180a0 <__aeabi_fsub>
   11eaa:	4603      	mov	r3, r0
   11eac:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   11eae:	e013      	b.n	11ed8 <course_pid_run+0x50>
   11eb0:	6878      	ldr	r0, [r7, #4]
   11eb2:	f005 fd6b 	bl	1798c <__aeabi_f2d>
   11eb6:	4602      	mov	r2, r0
   11eb8:	460b      	mov	r3, r1
   11eba:	4610      	mov	r0, r2
   11ebc:	4619      	mov	r1, r3
   11ebe:	a348      	add	r3, pc, #288	; (adr r3, 11fe0 <course_pid_run+0x158>)
   11ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
   11ec4:	f005 fc02 	bl	176cc <__aeabi_dsub>
   11ec8:	4602      	mov	r2, r0
   11eca:	460b      	mov	r3, r1
   11ecc:	4610      	mov	r0, r2
   11ece:	4619      	mov	r1, r3
   11ed0:	f006 f892 	bl	17ff8 <__aeabi_d2f>
   11ed4:	4603      	mov	r3, r0
   11ed6:	607b      	str	r3, [r7, #4]
   11ed8:	6878      	ldr	r0, [r7, #4]
   11eda:	f005 fd57 	bl	1798c <__aeabi_f2d>
   11ede:	4602      	mov	r2, r0
   11ee0:	460b      	mov	r3, r1
   11ee2:	4610      	mov	r0, r2
   11ee4:	4619      	mov	r1, r3
   11ee6:	a340      	add	r3, pc, #256	; (adr r3, 11fe8 <course_pid_run+0x160>)
   11ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
   11eec:	f006 f832 	bl	17f54 <__aeabi_dcmpgt>
   11ef0:	4603      	mov	r3, r0
   11ef2:	2b00      	cmp	r3, #0
   11ef4:	d1dc      	bne.n	11eb0 <course_pid_run+0x28>
   11ef6:	e013      	b.n	11f20 <course_pid_run+0x98>
   11ef8:	6878      	ldr	r0, [r7, #4]
   11efa:	f005 fd47 	bl	1798c <__aeabi_f2d>
   11efe:	4602      	mov	r2, r0
   11f00:	460b      	mov	r3, r1
   11f02:	4610      	mov	r0, r2
   11f04:	4619      	mov	r1, r3
   11f06:	a336      	add	r3, pc, #216	; (adr r3, 11fe0 <course_pid_run+0x158>)
   11f08:	e9d3 2300 	ldrd	r2, r3, [r3]
   11f0c:	f005 fbe0 	bl	176d0 <__adddf3>
   11f10:	4602      	mov	r2, r0
   11f12:	460b      	mov	r3, r1
   11f14:	4610      	mov	r0, r2
   11f16:	4619      	mov	r1, r3
   11f18:	f006 f86e 	bl	17ff8 <__aeabi_d2f>
   11f1c:	4603      	mov	r3, r0
   11f1e:	607b      	str	r3, [r7, #4]
   11f20:	6878      	ldr	r0, [r7, #4]
   11f22:	f005 fd33 	bl	1798c <__aeabi_f2d>
   11f26:	4602      	mov	r2, r0
   11f28:	460b      	mov	r3, r1
   11f2a:	4610      	mov	r0, r2
   11f2c:	4619      	mov	r1, r3
   11f2e:	a330      	add	r3, pc, #192	; (adr r3, 11ff0 <course_pid_run+0x168>)
   11f30:	e9d3 2300 	ldrd	r2, r3, [r3]
   11f34:	f005 fff0 	bl	17f18 <__aeabi_dcmplt>
   11f38:	4603      	mov	r3, r0
   11f3a:	2b00      	cmp	r3, #0
   11f3c:	d1dc      	bne.n	11ef8 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   11f3e:	f240 4308 	movw	r3, #1032	; 0x408
   11f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f46:	681b      	ldr	r3, [r3, #0]
   11f48:	4618      	mov	r0, r3
   11f4a:	6879      	ldr	r1, [r7, #4]
   11f4c:	f006 f9b2 	bl	182b4 <__aeabi_fmul>
   11f50:	4603      	mov	r3, r0
   11f52:	461a      	mov	r2, r3
   11f54:	f24c 2380 	movw	r3, #49792	; 0xc280
   11f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f5c:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   11f5e:	f24c 2380 	movw	r3, #49792	; 0xc280
   11f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f66:	681a      	ldr	r2, [r3, #0]
   11f68:	f240 430c 	movw	r3, #1036	; 0x40c
   11f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f70:	681b      	ldr	r3, [r3, #0]
   11f72:	4610      	mov	r0, r2
   11f74:	4619      	mov	r1, r3
   11f76:	f006 fb59 	bl	1862c <__aeabi_fcmpgt>
   11f7a:	4603      	mov	r3, r0
   11f7c:	2b00      	cmp	r3, #0
   11f7e:	d00a      	beq.n	11f96 <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   11f80:	f240 430c 	movw	r3, #1036	; 0x40c
   11f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f88:	681a      	ldr	r2, [r3, #0]
   11f8a:	f24c 2380 	movw	r3, #49792	; 0xc280
   11f8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f92:	601a      	str	r2, [r3, #0]
   11f94:	e01e      	b.n	11fd4 <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   11f96:	f240 430c 	movw	r3, #1036	; 0x40c
   11f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f9e:	681b      	ldr	r3, [r3, #0]
   11fa0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11fa4:	f24c 2380 	movw	r3, #49792	; 0xc280
   11fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fac:	681b      	ldr	r3, [r3, #0]
   11fae:	4610      	mov	r0, r2
   11fb0:	4619      	mov	r1, r3
   11fb2:	f006 fb3b 	bl	1862c <__aeabi_fcmpgt>
   11fb6:	4603      	mov	r3, r0
   11fb8:	2b00      	cmp	r3, #0
   11fba:	d00b      	beq.n	11fd4 <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   11fbc:	f240 430c 	movw	r3, #1036	; 0x40c
   11fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fc4:	681b      	ldr	r3, [r3, #0]
   11fc6:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11fca:	f24c 2380 	movw	r3, #49792	; 0xc280
   11fce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fd2:	601a      	str	r2, [r3, #0]
}
   11fd4:	3708      	adds	r7, #8
   11fd6:	46bd      	mov	sp, r7
   11fd8:	bd80      	pop	{r7, pc}
   11fda:	bf00      	nop
   11fdc:	f3af 8000 	nop.w
   11fe0:	54442d18 	.word	0x54442d18
   11fe4:	401921fb 	.word	0x401921fb
   11fe8:	54442d18 	.word	0x54442d18
   11fec:	400921fb 	.word	0x400921fb
   11ff0:	54442d18 	.word	0x54442d18
   11ff4:	c00921fb 	.word	0xc00921fb

00011ff8 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   11ff8:	b5b0      	push	{r4, r5, r7, lr}
   11ffa:	b082      	sub	sp, #8
   11ffc:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   11ffe:	f24c 43cc 	movw	r3, #50380	; 0xc4cc
   12002:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12006:	681a      	ldr	r2, [r3, #0]
   12008:	f24c 2340 	movw	r3, #49728	; 0xc240
   1200c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12010:	681b      	ldr	r3, [r3, #0]
   12012:	4610      	mov	r0, r2
   12014:	4619      	mov	r1, r3
   12016:	f006 f843 	bl	180a0 <__aeabi_fsub>
   1201a:	4603      	mov	r3, r0
   1201c:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   1201e:	f64b 63df 	movw	r3, #48863	; 0xbedf
   12022:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12026:	781b      	ldrb	r3, [r3, #0]
   12028:	2b00      	cmp	r3, #0
   1202a:	f000 80a8 	beq.w	1217e <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   1202e:	f24c 2378 	movw	r3, #49784	; 0xc278
   12032:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12036:	881b      	ldrh	r3, [r3, #0]
   12038:	b29a      	uxth	r2, r3
   1203a:	f24c 232c 	movw	r3, #49708	; 0xc22c
   1203e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12042:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   12044:	f240 4314 	movw	r3, #1044	; 0x414
   12048:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1204c:	681a      	ldr	r2, [r3, #0]
   1204e:	f24c 234c 	movw	r3, #49740	; 0xc24c
   12052:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12056:	681b      	ldr	r3, [r3, #0]
   12058:	4610      	mov	r0, r2
   1205a:	4619      	mov	r1, r3
   1205c:	f006 f92a 	bl	182b4 <__aeabi_fmul>
   12060:	4603      	mov	r3, r0
   12062:	4618      	mov	r0, r3
   12064:	6879      	ldr	r1, [r7, #4]
   12066:	f006 f81d 	bl	180a4 <__addsf3>
   1206a:	4603      	mov	r3, r0
   1206c:	461a      	mov	r2, r3
   1206e:	f240 4310 	movw	r3, #1040	; 0x410
   12072:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12076:	681b      	ldr	r3, [r3, #0]
   12078:	4610      	mov	r0, r2
   1207a:	4619      	mov	r1, r3
   1207c:	f006 f91a 	bl	182b4 <__aeabi_fmul>
   12080:	4603      	mov	r3, r0
   12082:	461a      	mov	r2, r3
   12084:	f24c 2328 	movw	r3, #49704	; 0xc228
   12088:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1208c:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   1208e:	f24c 2328 	movw	r3, #49704	; 0xc228
   12092:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12096:	681a      	ldr	r2, [r3, #0]
   12098:	f240 4318 	movw	r3, #1048	; 0x418
   1209c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120a0:	681b      	ldr	r3, [r3, #0]
   120a2:	4610      	mov	r0, r2
   120a4:	4619      	mov	r1, r3
   120a6:	f006 fac1 	bl	1862c <__aeabi_fcmpgt>
   120aa:	4603      	mov	r3, r0
   120ac:	2b00      	cmp	r3, #0
   120ae:	d009      	beq.n	120c4 <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   120b0:	f240 4318 	movw	r3, #1048	; 0x418
   120b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120b8:	681a      	ldr	r2, [r3, #0]
   120ba:	f24c 2328 	movw	r3, #49704	; 0xc228
   120be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120c2:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   120c4:	f24c 2328 	movw	r3, #49704	; 0xc228
   120c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120cc:	681a      	ldr	r2, [r3, #0]
   120ce:	f240 431c 	movw	r3, #1052	; 0x41c
   120d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120d6:	681b      	ldr	r3, [r3, #0]
   120d8:	4610      	mov	r0, r2
   120da:	4619      	mov	r1, r3
   120dc:	f006 fa88 	bl	185f0 <__aeabi_fcmplt>
   120e0:	4603      	mov	r3, r0
   120e2:	2b00      	cmp	r3, #0
   120e4:	d009      	beq.n	120fa <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   120e6:	f240 431c 	movw	r3, #1052	; 0x41c
   120ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120ee:	681a      	ldr	r2, [r3, #0]
   120f0:	f24c 2328 	movw	r3, #49704	; 0xc228
   120f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120f8:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   120fa:	f24c 234c 	movw	r3, #49740	; 0xc24c
   120fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12102:	681b      	ldr	r3, [r3, #0]
   12104:	4618      	mov	r0, r3
   12106:	6879      	ldr	r1, [r7, #4]
   12108:	f005 ffcc 	bl	180a4 <__addsf3>
   1210c:	4603      	mov	r3, r0
   1210e:	461a      	mov	r2, r3
   12110:	f24c 234c 	movw	r3, #49740	; 0xc24c
   12114:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12118:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   1211a:	f24c 234c 	movw	r3, #49740	; 0xc24c
   1211e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12122:	681b      	ldr	r3, [r3, #0]
   12124:	4618      	mov	r0, r3
   12126:	f04f 0100 	mov.w	r1, #0
   1212a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1212e:	f006 fa7d 	bl	1862c <__aeabi_fcmpgt>
   12132:	4603      	mov	r3, r0
   12134:	2b00      	cmp	r3, #0
   12136:	d008      	beq.n	1214a <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   12138:	f24c 234c 	movw	r3, #49740	; 0xc24c
   1213c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12140:	f04f 0200 	mov.w	r2, #0
   12144:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   12148:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   1214a:	f24c 234c 	movw	r3, #49740	; 0xc24c
   1214e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12152:	681b      	ldr	r3, [r3, #0]
   12154:	4618      	mov	r0, r3
   12156:	f04f 0100 	mov.w	r1, #0
   1215a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1215e:	f006 fa47 	bl	185f0 <__aeabi_fcmplt>
   12162:	4603      	mov	r3, r0
   12164:	2b00      	cmp	r3, #0
   12166:	d100      	bne.n	1216a <climb_pid_run+0x172>
   12168:	e109      	b.n	1237e <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   1216a:	f24c 234c 	movw	r3, #49740	; 0xc24c
   1216e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12172:	f04f 0200 	mov.w	r2, #0
   12176:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   1217a:	601a      	str	r2, [r3, #0]
   1217c:	e0ff      	b.n	1237e <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   1217e:	f24c 2340 	movw	r3, #49728	; 0xc240
   12182:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12186:	681b      	ldr	r3, [r3, #0]
   12188:	4618      	mov	r0, r3
   1218a:	f04f 0100 	mov.w	r1, #0
   1218e:	f006 fa4d 	bl	1862c <__aeabi_fcmpgt>
   12192:	4603      	mov	r3, r0
   12194:	2b00      	cmp	r3, #0
   12196:	d010      	beq.n	121ba <climb_pid_run+0x1c2>
   12198:	f24c 2340 	movw	r3, #49728	; 0xc240
   1219c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121a0:	681a      	ldr	r2, [r3, #0]
   121a2:	f240 4304 	movw	r3, #1028	; 0x404
   121a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121aa:	681b      	ldr	r3, [r3, #0]
   121ac:	4610      	mov	r0, r2
   121ae:	4619      	mov	r1, r3
   121b0:	f006 f880 	bl	182b4 <__aeabi_fmul>
   121b4:	4603      	mov	r3, r0
   121b6:	461a      	mov	r2, r3
   121b8:	e001      	b.n	121be <climb_pid_run+0x1c6>
   121ba:	f04f 0200 	mov.w	r2, #0
   121be:	f24c 2338 	movw	r3, #49720	; 0xc238
   121c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121c6:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   121c8:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   121cc:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   121d0:	f24c 2348 	movw	r3, #49736	; 0xc248
   121d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121d8:	681b      	ldr	r3, [r3, #0]
   121da:	4610      	mov	r0, r2
   121dc:	4619      	mov	r1, r3
   121de:	f006 f869 	bl	182b4 <__aeabi_fmul>
   121e2:	4603      	mov	r3, r0
   121e4:	4618      	mov	r0, r3
   121e6:	6879      	ldr	r1, [r7, #4]
   121e8:	f005 ff5c 	bl	180a4 <__addsf3>
   121ec:	4603      	mov	r3, r0
   121ee:	461a      	mov	r2, r3
   121f0:	f24c 238f 	movw	r3, #49807	; 0xc28f
   121f4:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   121f8:	4610      	mov	r0, r2
   121fa:	4619      	mov	r1, r3
   121fc:	f006 f85a 	bl	182b4 <__aeabi_fmul>
   12200:	4603      	mov	r3, r0
   12202:	4618      	mov	r0, r3
   12204:	f005 fbc2 	bl	1798c <__aeabi_f2d>
   12208:	4602      	mov	r2, r0
   1220a:	460b      	mov	r3, r1
   1220c:	4610      	mov	r0, r2
   1220e:	4619      	mov	r1, r3
   12210:	a35d      	add	r3, pc, #372	; (adr r3, 12388 <climb_pid_run+0x390>)
   12212:	e9d3 2300 	ldrd	r2, r3, [r3]
   12216:	f005 fa5b 	bl	176d0 <__adddf3>
   1221a:	4602      	mov	r2, r0
   1221c:	460b      	mov	r3, r1
   1221e:	4614      	mov	r4, r2
   12220:	461d      	mov	r5, r3
   12222:	f24c 2340 	movw	r3, #49728	; 0xc240
   12226:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1222a:	681b      	ldr	r3, [r3, #0]
   1222c:	4618      	mov	r0, r3
   1222e:	f005 fbad 	bl	1798c <__aeabi_f2d>
   12232:	4602      	mov	r2, r0
   12234:	460b      	mov	r3, r1
   12236:	4610      	mov	r0, r2
   12238:	4619      	mov	r1, r3
   1223a:	a355      	add	r3, pc, #340	; (adr r3, 12390 <climb_pid_run+0x398>)
   1223c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12240:	f005 fbf8 	bl	17a34 <__aeabi_dmul>
   12244:	4602      	mov	r2, r0
   12246:	460b      	mov	r3, r1
   12248:	4620      	mov	r0, r4
   1224a:	4629      	mov	r1, r5
   1224c:	f005 fa40 	bl	176d0 <__adddf3>
   12250:	4602      	mov	r2, r0
   12252:	460b      	mov	r3, r1
   12254:	4610      	mov	r0, r2
   12256:	4619      	mov	r1, r3
   12258:	f005 fece 	bl	17ff8 <__aeabi_d2f>
   1225c:	4603      	mov	r3, r0
   1225e:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   12260:	f24c 2348 	movw	r3, #49736	; 0xc248
   12264:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12268:	681b      	ldr	r3, [r3, #0]
   1226a:	4618      	mov	r0, r3
   1226c:	6879      	ldr	r1, [r7, #4]
   1226e:	f005 ff19 	bl	180a4 <__addsf3>
   12272:	4603      	mov	r3, r0
   12274:	461a      	mov	r2, r3
   12276:	f24c 2348 	movw	r3, #49736	; 0xc248
   1227a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1227e:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   12280:	f24c 2348 	movw	r3, #49736	; 0xc248
   12284:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12288:	681b      	ldr	r3, [r3, #0]
   1228a:	4618      	mov	r0, r3
   1228c:	f04f 0100 	mov.w	r1, #0
   12290:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   12294:	f006 f9ca 	bl	1862c <__aeabi_fcmpgt>
   12298:	4603      	mov	r3, r0
   1229a:	2b00      	cmp	r3, #0
   1229c:	d008      	beq.n	122b0 <climb_pid_run+0x2b8>
   1229e:	f24c 2348 	movw	r3, #49736	; 0xc248
   122a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122a6:	f04f 0200 	mov.w	r2, #0
   122aa:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   122ae:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   122b0:	f24c 2348 	movw	r3, #49736	; 0xc248
   122b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122b8:	681b      	ldr	r3, [r3, #0]
   122ba:	4618      	mov	r0, r3
   122bc:	f04f 0100 	mov.w	r1, #0
   122c0:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   122c4:	f006 f994 	bl	185f0 <__aeabi_fcmplt>
   122c8:	4603      	mov	r3, r0
   122ca:	2b00      	cmp	r3, #0
   122cc:	d008      	beq.n	122e0 <climb_pid_run+0x2e8>
   122ce:	f24c 2348 	movw	r3, #49736	; 0xc248
   122d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122d6:	f04f 0200 	mov.w	r2, #0
   122da:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   122de:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   122e0:	6838      	ldr	r0, [r7, #0]
   122e2:	f04f 0100 	mov.w	r1, #0
   122e6:	f2c4 6116 	movt	r1, #17942	; 0x4616
   122ea:	f005 ffe3 	bl	182b4 <__aeabi_fmul>
   122ee:	4603      	mov	r3, r0
   122f0:	4618      	mov	r0, r3
   122f2:	f04f 0100 	mov.w	r1, #0
   122f6:	f006 f97b 	bl	185f0 <__aeabi_fcmplt>
   122fa:	4603      	mov	r3, r0
   122fc:	2b00      	cmp	r3, #0
   122fe:	d001      	beq.n	12304 <climb_pid_run+0x30c>
   12300:	2200      	movs	r2, #0
   12302:	e022      	b.n	1234a <climb_pid_run+0x352>
   12304:	6838      	ldr	r0, [r7, #0]
   12306:	f04f 0100 	mov.w	r1, #0
   1230a:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1230e:	f005 ffd1 	bl	182b4 <__aeabi_fmul>
   12312:	4603      	mov	r3, r0
   12314:	4618      	mov	r0, r3
   12316:	f04f 0100 	mov.w	r1, #0
   1231a:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1231e:	f006 f985 	bl	1862c <__aeabi_fcmpgt>
   12322:	4603      	mov	r3, r0
   12324:	2b00      	cmp	r3, #0
   12326:	d002      	beq.n	1232e <climb_pid_run+0x336>
   12328:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1232c:	e00c      	b.n	12348 <climb_pid_run+0x350>
   1232e:	6838      	ldr	r0, [r7, #0]
   12330:	f04f 0100 	mov.w	r1, #0
   12334:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12338:	f005 ffbc 	bl	182b4 <__aeabi_fmul>
   1233c:	4603      	mov	r3, r0
   1233e:	4618      	mov	r0, r3
   12340:	f006 f97e 	bl	18640 <__aeabi_f2iz>
   12344:	4603      	mov	r3, r0
   12346:	b29b      	uxth	r3, r3
   12348:	b29a      	uxth	r2, r3
   1234a:	f24c 232c 	movw	r3, #49708	; 0xc22c
   1234e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12352:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   12354:	f24c 237c 	movw	r3, #49788	; 0xc27c
   12358:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1235c:	681a      	ldr	r2, [r3, #0]
   1235e:	f24c 2338 	movw	r3, #49720	; 0xc238
   12362:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12366:	681b      	ldr	r3, [r3, #0]
   12368:	4610      	mov	r0, r2
   1236a:	4619      	mov	r1, r3
   1236c:	f005 fe9a 	bl	180a4 <__addsf3>
   12370:	4603      	mov	r3, r0
   12372:	461a      	mov	r2, r3
   12374:	f24c 2328 	movw	r3, #49704	; 0xc228
   12378:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1237c:	601a      	str	r2, [r3, #0]
  }
}
   1237e:	3708      	adds	r7, #8
   12380:	46bd      	mov	sp, r7
   12382:	bdb0      	pop	{r4, r5, r7, pc}
   12384:	f3af 8000 	nop.w
   12388:	3d70a3d7 	.word	0x3d70a3d7
   1238c:	3fd3d70a 	.word	0x3fd3d70a
   12390:	9999999a 	.word	0x9999999a
   12394:	3fc99999 	.word	0x3fc99999

00012398 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   12398:	b580      	push	{r7, lr}
   1239a:	b082      	sub	sp, #8
   1239c:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   1239e:	f24c 43b4 	movw	r3, #50356	; 0xc4b4
   123a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123a6:	681a      	ldr	r2, [r3, #0]
   123a8:	f240 4324 	movw	r3, #1060	; 0x424
   123ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123b0:	681b      	ldr	r3, [r3, #0]
   123b2:	4610      	mov	r0, r2
   123b4:	4619      	mov	r1, r3
   123b6:	f005 fe73 	bl	180a0 <__aeabi_fsub>
   123ba:	4603      	mov	r3, r0
   123bc:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   123be:	f240 4320 	movw	r3, #1056	; 0x420
   123c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123c6:	681b      	ldr	r3, [r3, #0]
   123c8:	4618      	mov	r0, r3
   123ca:	6879      	ldr	r1, [r7, #4]
   123cc:	f005 ff72 	bl	182b4 <__aeabi_fmul>
   123d0:	4603      	mov	r3, r0
   123d2:	461a      	mov	r2, r3
   123d4:	f24c 2344 	movw	r3, #49732	; 0xc244
   123d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123dc:	681b      	ldr	r3, [r3, #0]
   123de:	4610      	mov	r0, r2
   123e0:	4619      	mov	r1, r3
   123e2:	f005 fe5f 	bl	180a4 <__addsf3>
   123e6:	4603      	mov	r3, r0
   123e8:	461a      	mov	r2, r3
   123ea:	f24c 2340 	movw	r3, #49728	; 0xc240
   123ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123f2:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   123f4:	f24c 2340 	movw	r3, #49728	; 0xc240
   123f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123fc:	681b      	ldr	r3, [r3, #0]
   123fe:	4618      	mov	r0, r3
   12400:	f04f 0100 	mov.w	r1, #0
   12404:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   12408:	f006 f8f2 	bl	185f0 <__aeabi_fcmplt>
   1240c:	4603      	mov	r3, r0
   1240e:	2b00      	cmp	r3, #0
   12410:	d008      	beq.n	12424 <altitude_pid_run+0x8c>
   12412:	f24c 2340 	movw	r3, #49728	; 0xc240
   12416:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1241a:	f04f 0200 	mov.w	r2, #0
   1241e:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   12422:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   12424:	f24c 2340 	movw	r3, #49728	; 0xc240
   12428:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1242c:	681b      	ldr	r3, [r3, #0]
   1242e:	4618      	mov	r0, r3
   12430:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   12434:	f006 f8fa 	bl	1862c <__aeabi_fcmpgt>
   12438:	4603      	mov	r3, r0
   1243a:	2b00      	cmp	r3, #0
   1243c:	d006      	beq.n	1244c <altitude_pid_run+0xb4>
   1243e:	f24c 2340 	movw	r3, #49728	; 0xc240
   12442:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12446:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   1244a:	601a      	str	r2, [r3, #0]
}
   1244c:	3708      	adds	r7, #8
   1244e:	46bd      	mov	sp, r7
   12450:	bd80      	pop	{r7, pc}
   12452:	bf00      	nop
   12454:	f3af 8000 	nop.w

00012458 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   12458:	b5f0      	push	{r4, r5, r6, r7, lr}
   1245a:	b08b      	sub	sp, #44	; 0x2c
   1245c:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   1245e:	f24c 2351 	movw	r3, #49745	; 0xc251
   12462:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12466:	781b      	ldrb	r3, [r3, #0]
   12468:	2b00      	cmp	r3, #0
   1246a:	f040 8169 	bne.w	12740 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   1246e:	f24c 2350 	movw	r3, #49744	; 0xc250
   12472:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12476:	781b      	ldrb	r3, [r3, #0]
   12478:	2b00      	cmp	r3, #0
   1247a:	d13c      	bne.n	124f6 <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   1247c:	f24c 2350 	movw	r3, #49744	; 0xc250
   12480:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12484:	2200      	movs	r2, #0
   12486:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   12488:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
   1248c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12490:	881b      	ldrh	r3, [r3, #0]
   12492:	2b00      	cmp	r3, #0
   12494:	d000      	beq.n	12498 <auto_nav+0x40>
   12496:	e03d      	b.n	12514 <auto_nav+0xbc>
	else NextStage(); 
   12498:	f24c 2350 	movw	r3, #49744	; 0xc250
   1249c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124a0:	781b      	ldrb	r3, [r3, #0]
   124a2:	3301      	adds	r3, #1
   124a4:	b2da      	uxtb	r2, r3
   124a6:	f24c 2350 	movw	r3, #49744	; 0xc250
   124aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124ae:	701a      	strb	r2, [r3, #0]
   124b0:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   124b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124b8:	681a      	ldr	r2, [r3, #0]
   124ba:	f24c 2354 	movw	r3, #49748	; 0xc254
   124be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124c2:	601a      	str	r2, [r3, #0]
   124c4:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   124c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124cc:	681a      	ldr	r2, [r3, #0]
   124ce:	f24c 2358 	movw	r3, #49752	; 0xc258
   124d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124d6:	601a      	str	r2, [r3, #0]
   124d8:	f24c 2364 	movw	r3, #49764	; 0xc264
   124dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124e0:	2200      	movs	r2, #0
   124e2:	801a      	strh	r2, [r3, #0]
   124e4:	f24c 2368 	movw	r3, #49768	; 0xc268
   124e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124ec:	f04f 0200 	mov.w	r2, #0
   124f0:	601a      	str	r2, [r3, #0]
   124f2:	f002 b883 	b.w	145fc <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   124f6:	f24c 2350 	movw	r3, #49744	; 0xc250
   124fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124fe:	781b      	ldrb	r3, [r3, #0]
   12500:	2b01      	cmp	r3, #1
   12502:	d100      	bne.n	12506 <auto_nav+0xae>
    {   Goto(while_1)}
   12504:	e7ba      	b.n	1247c <auto_nav+0x24>
    else if (nav_stage == 2)
   12506:	f24c 2350 	movw	r3, #49744	; 0xc250
   1250a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1250e:	781b      	ldrb	r3, [r3, #0]
   12510:	2b02      	cmp	r3, #2
   12512:	d162      	bne.n	125da <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   12514:	f24c 2350 	movw	r3, #49744	; 0xc250
   12518:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1251c:	2202      	movs	r2, #2
   1251e:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   12520:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
   12524:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12528:	881b      	ldrh	r3, [r3, #0]
   1252a:	2b08      	cmp	r3, #8
   1252c:	d92e      	bls.n	1258c <auto_nav+0x134>
   1252e:	f24c 2350 	movw	r3, #49744	; 0xc250
   12532:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12536:	781b      	ldrb	r3, [r3, #0]
   12538:	3301      	adds	r3, #1
   1253a:	b2da      	uxtb	r2, r3
   1253c:	f24c 2350 	movw	r3, #49744	; 0xc250
   12540:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12544:	701a      	strb	r2, [r3, #0]
   12546:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   1254a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1254e:	681a      	ldr	r2, [r3, #0]
   12550:	f24c 2354 	movw	r3, #49748	; 0xc254
   12554:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12558:	601a      	str	r2, [r3, #0]
   1255a:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   1255e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12562:	681a      	ldr	r2, [r3, #0]
   12564:	f24c 2358 	movw	r3, #49752	; 0xc258
   12568:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1256c:	601a      	str	r2, [r3, #0]
   1256e:	f24c 2364 	movw	r3, #49764	; 0xc264
   12572:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12576:	2200      	movs	r2, #0
   12578:	801a      	strh	r2, [r3, #0]
   1257a:	f24c 2368 	movw	r3, #49768	; 0xc268
   1257e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12582:	f04f 0200 	mov.w	r2, #0
   12586:	601a      	str	r2, [r3, #0]
   12588:	f002 b838 	b.w	145fc <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   1258c:	f24c 233c 	movw	r3, #49724	; 0xc23c
   12590:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12594:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12598:	f2c4 0296 	movt	r2, #16534	; 0x4096
   1259c:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   1259e:	f64b 63df 	movw	r3, #48863	; 0xbedf
   125a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125a6:	2200      	movs	r2, #0
   125a8:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   125aa:	f24c 237c 	movw	r3, #49788	; 0xc27c
   125ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125b2:	f649 129a 	movw	r2, #39322	; 0x999a
   125b6:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   125ba:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   125bc:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   125c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125c4:	2201      	movs	r2, #1
   125c6:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   125c8:	f24c 2378 	movw	r3, #49784	; 0xc278
   125cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125d0:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   125d4:	801a      	strh	r2, [r3, #0]
        }
        return;
   125d6:	f002 b811 	b.w	145fc <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   125da:	f24c 2350 	movw	r3, #49744	; 0xc250
   125de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125e2:	781b      	ldrb	r3, [r3, #0]
   125e4:	2b03      	cmp	r3, #3
   125e6:	d168      	bne.n	126ba <auto_nav+0x262>
     {
	nav_stage = 3;	
   125e8:	f24c 2350 	movw	r3, #49744	; 0xc250
   125ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125f0:	2203      	movs	r2, #3
   125f2:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   125f4:	f24c 43b4 	movw	r3, #50356	; 0xc4b4
   125f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125fc:	681b      	ldr	r3, [r3, #0]
   125fe:	4618      	mov	r0, r3
   12600:	f04f 0100 	mov.w	r1, #0
   12604:	f2c4 3116 	movt	r1, #17174	; 0x4316
   12608:	f006 f810 	bl	1862c <__aeabi_fcmpgt>
   1260c:	4603      	mov	r3, r0
   1260e:	2b00      	cmp	r3, #0
   12610:	d02e      	beq.n	12670 <auto_nav+0x218>
   12612:	f24c 2350 	movw	r3, #49744	; 0xc250
   12616:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1261a:	781b      	ldrb	r3, [r3, #0]
   1261c:	3301      	adds	r3, #1
   1261e:	b2da      	uxtb	r2, r3
   12620:	f24c 2350 	movw	r3, #49744	; 0xc250
   12624:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12628:	701a      	strb	r2, [r3, #0]
   1262a:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   1262e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12632:	681a      	ldr	r2, [r3, #0]
   12634:	f24c 2354 	movw	r3, #49748	; 0xc254
   12638:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1263c:	601a      	str	r2, [r3, #0]
   1263e:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   12642:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12646:	681a      	ldr	r2, [r3, #0]
   12648:	f24c 2358 	movw	r3, #49752	; 0xc258
   1264c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12650:	601a      	str	r2, [r3, #0]
   12652:	f24c 2364 	movw	r3, #49764	; 0xc264
   12656:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1265a:	2200      	movs	r2, #0
   1265c:	801a      	strh	r2, [r3, #0]
   1265e:	f24c 2368 	movw	r3, #49768	; 0xc268
   12662:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12666:	f04f 0200 	mov.w	r2, #0
   1266a:	601a      	str	r2, [r3, #0]
   1266c:	f001 bfc6 	b.w	145fc <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12670:	f24c 233c 	movw	r3, #49724	; 0xc23c
   12674:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12678:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   1267c:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12680:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   12682:	f64b 63df 	movw	r3, #48863	; 0xbedf
   12686:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1268a:	2200      	movs	r2, #0
   1268c:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   1268e:	f24c 237c 	movw	r3, #49788	; 0xc27c
   12692:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12696:	f04f 0200 	mov.w	r2, #0
   1269a:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   1269c:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   126a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126a4:	2202      	movs	r2, #2
   126a6:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   126a8:	f24c 2340 	movw	r3, #49728	; 0xc240
   126ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126b0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   126b4:	601a      	str	r2, [r3, #0]
        }
        return;
   126b6:	f001 bfa1 	b.w	145fc <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   126ba:	f24c 2350 	movw	r3, #49744	; 0xc250
   126be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126c2:	781b      	ldrb	r3, [r3, #0]
   126c4:	2b04      	cmp	r3, #4
   126c6:	f041 8799 	bne.w	145fc <auto_nav+0x21a4>
        NextBlock()
   126ca:	f24c 2351 	movw	r3, #49745	; 0xc251
   126ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126d2:	781b      	ldrb	r3, [r3, #0]
   126d4:	3301      	adds	r3, #1
   126d6:	b2da      	uxtb	r2, r3
   126d8:	f24c 2351 	movw	r3, #49745	; 0xc251
   126dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126e0:	701a      	strb	r2, [r3, #0]
   126e2:	f24c 2350 	movw	r3, #49744	; 0xc250
   126e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126ea:	2200      	movs	r2, #0
   126ec:	701a      	strb	r2, [r3, #0]
   126ee:	f24c 2366 	movw	r3, #49766	; 0xc266
   126f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126f6:	2200      	movs	r2, #0
   126f8:	801a      	strh	r2, [r3, #0]
   126fa:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   126fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12702:	681a      	ldr	r2, [r3, #0]
   12704:	f24c 2354 	movw	r3, #49748	; 0xc254
   12708:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1270c:	601a      	str	r2, [r3, #0]
   1270e:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   12712:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12716:	681a      	ldr	r2, [r3, #0]
   12718:	f24c 2358 	movw	r3, #49752	; 0xc258
   1271c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12720:	601a      	str	r2, [r3, #0]
   12722:	f24c 2364 	movw	r3, #49764	; 0xc264
   12726:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1272a:	2200      	movs	r2, #0
   1272c:	801a      	strh	r2, [r3, #0]
   1272e:	f24c 2368 	movw	r3, #49768	; 0xc268
   12732:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12736:	f04f 0200 	mov.w	r2, #0
   1273a:	601a      	str	r2, [r3, #0]
   1273c:	f001 bf5e 	b.w	145fc <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   12740:	f24c 2351 	movw	r3, #49745	; 0xc251
   12744:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12748:	781b      	ldrb	r3, [r3, #0]
   1274a:	2b01      	cmp	r3, #1
   1274c:	f040 81bc 	bne.w	12ac8 <auto_nav+0x670>
{
    nav_block = 1;
   12750:	f24c 2351 	movw	r3, #49745	; 0xc251
   12754:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12758:	2201      	movs	r2, #1
   1275a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   1275c:	f64b 63e0 	movw	r3, #48864	; 0xbee0
   12760:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12764:	781b      	ldrb	r3, [r3, #0]
   12766:	2b00      	cmp	r3, #0
   12768:	d007      	beq.n	1277a <auto_nav+0x322>
   1276a:	f64b 63e0 	movw	r3, #48864	; 0xbee0
   1276e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12772:	2200      	movs	r2, #0
   12774:	701a      	strb	r2, [r3, #0]
   12776:	2301      	movs	r3, #1
   12778:	e000      	b.n	1277c <auto_nav+0x324>
   1277a:	2300      	movs	r3, #0
   1277c:	2b00      	cmp	r3, #0
   1277e:	d034      	beq.n	127ea <auto_nav+0x392>
	{ GotoBlock(2) }
   12780:	f24c 2351 	movw	r3, #49745	; 0xc251
   12784:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12788:	2202      	movs	r2, #2
   1278a:	701a      	strb	r2, [r3, #0]
   1278c:	f24c 2350 	movw	r3, #49744	; 0xc250
   12790:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12794:	2200      	movs	r2, #0
   12796:	701a      	strb	r2, [r3, #0]
   12798:	f24c 2366 	movw	r3, #49766	; 0xc266
   1279c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127a0:	2200      	movs	r2, #0
   127a2:	801a      	strh	r2, [r3, #0]
   127a4:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   127a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127ac:	681a      	ldr	r2, [r3, #0]
   127ae:	f24c 2354 	movw	r3, #49748	; 0xc254
   127b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127b6:	601a      	str	r2, [r3, #0]
   127b8:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   127bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127c0:	681a      	ldr	r2, [r3, #0]
   127c2:	f24c 2358 	movw	r3, #49752	; 0xc258
   127c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127ca:	601a      	str	r2, [r3, #0]
   127cc:	f24c 2364 	movw	r3, #49764	; 0xc264
   127d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127d4:	2200      	movs	r2, #0
   127d6:	801a      	strh	r2, [r3, #0]
   127d8:	f24c 2368 	movw	r3, #49768	; 0xc268
   127dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127e0:	f04f 0200 	mov.w	r2, #0
   127e4:	601a      	str	r2, [r3, #0]
   127e6:	f001 bf09 	b.w	145fc <auto_nav+0x21a4>
    if(nav_stage == 0)
   127ea:	f24c 2350 	movw	r3, #49744	; 0xc250
   127ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127f2:	781b      	ldrb	r3, [r3, #0]
   127f4:	2b00      	cmp	r3, #0
   127f6:	d12e      	bne.n	12856 <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   127f8:	f24c 2350 	movw	r3, #49744	; 0xc250
   127fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12800:	781b      	ldrb	r3, [r3, #0]
   12802:	3301      	adds	r3, #1
   12804:	b2da      	uxtb	r2, r3
   12806:	f24c 2350 	movw	r3, #49744	; 0xc250
   1280a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1280e:	701a      	strb	r2, [r3, #0]
   12810:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   12814:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12818:	681a      	ldr	r2, [r3, #0]
   1281a:	f24c 2354 	movw	r3, #49748	; 0xc254
   1281e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12822:	601a      	str	r2, [r3, #0]
   12824:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   12828:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1282c:	681a      	ldr	r2, [r3, #0]
   1282e:	f24c 2358 	movw	r3, #49752	; 0xc258
   12832:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12836:	601a      	str	r2, [r3, #0]
   12838:	f24c 2364 	movw	r3, #49764	; 0xc264
   1283c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12840:	2200      	movs	r2, #0
   12842:	801a      	strh	r2, [r3, #0]
   12844:	f24c 2368 	movw	r3, #49768	; 0xc268
   12848:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1284c:	f04f 0200 	mov.w	r2, #0
   12850:	601a      	str	r2, [r3, #0]
   12852:	f001 bed3 	b.w	145fc <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   12856:	f24c 2350 	movw	r3, #49744	; 0xc250
   1285a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1285e:	781b      	ldrb	r3, [r3, #0]
   12860:	2b01      	cmp	r3, #1
   12862:	d169      	bne.n	12938 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   12864:	f24c 2350 	movw	r3, #49744	; 0xc250
   12868:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1286c:	2201      	movs	r2, #1
   1286e:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   12870:	2001      	movs	r0, #1
   12872:	f001 fed1 	bl	14618 <approaching>
   12876:	4603      	mov	r3, r0
   12878:	2b00      	cmp	r3, #0
   1287a:	d034      	beq.n	128e6 <auto_nav+0x48e>
   1287c:	f24c 235c 	movw	r3, #49756	; 0xc25c
   12880:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12884:	2201      	movs	r2, #1
   12886:	701a      	strb	r2, [r3, #0]
   12888:	f24c 2350 	movw	r3, #49744	; 0xc250
   1288c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12890:	781b      	ldrb	r3, [r3, #0]
   12892:	3301      	adds	r3, #1
   12894:	b2da      	uxtb	r2, r3
   12896:	f24c 2350 	movw	r3, #49744	; 0xc250
   1289a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1289e:	701a      	strb	r2, [r3, #0]
   128a0:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   128a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128a8:	681a      	ldr	r2, [r3, #0]
   128aa:	f24c 2354 	movw	r3, #49748	; 0xc254
   128ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128b2:	601a      	str	r2, [r3, #0]
   128b4:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   128b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128bc:	681a      	ldr	r2, [r3, #0]
   128be:	f24c 2358 	movw	r3, #49752	; 0xc258
   128c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128c6:	601a      	str	r2, [r3, #0]
   128c8:	f24c 2364 	movw	r3, #49764	; 0xc264
   128cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128d0:	2200      	movs	r2, #0
   128d2:	801a      	strh	r2, [r3, #0]
   128d4:	f24c 2368 	movw	r3, #49768	; 0xc268
   128d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128dc:	f04f 0200 	mov.w	r2, #0
   128e0:	601a      	str	r2, [r3, #0]
   128e2:	f001 be8b 	b.w	145fc <auto_nav+0x21a4>
            fly_to(1);
   128e6:	2001      	movs	r0, #1
   128e8:	f001 ffca 	bl	14880 <fly_to>
            auto_pitch = FALSE;
   128ec:	f64b 63df 	movw	r3, #48863	; 0xbedf
   128f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128f4:	2200      	movs	r2, #0
   128f6:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   128f8:	f24c 237c 	movw	r3, #49788	; 0xc27c
   128fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12900:	f04f 0200 	mov.w	r2, #0
   12904:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12906:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   1290a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1290e:	2203      	movs	r2, #3
   12910:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12912:	f240 4328 	movw	r3, #1064	; 0x428
   12916:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1291a:	695a      	ldr	r2, [r3, #20]
   1291c:	f240 4324 	movw	r3, #1060	; 0x424
   12920:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12924:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12926:	f24c 2344 	movw	r3, #49732	; 0xc244
   1292a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1292e:	f04f 0200 	mov.w	r2, #0
   12932:	601a      	str	r2, [r3, #0]
          }
          return;
   12934:	f001 be62 	b.w	145fc <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12938:	f24c 2350 	movw	r3, #49744	; 0xc250
   1293c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12940:	781b      	ldrb	r3, [r3, #0]
   12942:	2b02      	cmp	r3, #2
   12944:	d169      	bne.n	12a1a <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   12946:	f24c 2350 	movw	r3, #49744	; 0xc250
   1294a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1294e:	2202      	movs	r2, #2
   12950:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12952:	2004      	movs	r0, #4
   12954:	f001 fe60 	bl	14618 <approaching>
   12958:	4603      	mov	r3, r0
   1295a:	2b00      	cmp	r3, #0
   1295c:	d034      	beq.n	129c8 <auto_nav+0x570>
   1295e:	f24c 235c 	movw	r3, #49756	; 0xc25c
   12962:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12966:	2204      	movs	r2, #4
   12968:	701a      	strb	r2, [r3, #0]
   1296a:	f24c 2350 	movw	r3, #49744	; 0xc250
   1296e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12972:	781b      	ldrb	r3, [r3, #0]
   12974:	3301      	adds	r3, #1
   12976:	b2da      	uxtb	r2, r3
   12978:	f24c 2350 	movw	r3, #49744	; 0xc250
   1297c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12980:	701a      	strb	r2, [r3, #0]
   12982:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   12986:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1298a:	681a      	ldr	r2, [r3, #0]
   1298c:	f24c 2354 	movw	r3, #49748	; 0xc254
   12990:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12994:	601a      	str	r2, [r3, #0]
   12996:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   1299a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1299e:	681a      	ldr	r2, [r3, #0]
   129a0:	f24c 2358 	movw	r3, #49752	; 0xc258
   129a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129a8:	601a      	str	r2, [r3, #0]
   129aa:	f24c 2364 	movw	r3, #49764	; 0xc264
   129ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129b2:	2200      	movs	r2, #0
   129b4:	801a      	strh	r2, [r3, #0]
   129b6:	f24c 2368 	movw	r3, #49768	; 0xc268
   129ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129be:	f04f 0200 	mov.w	r2, #0
   129c2:	601a      	str	r2, [r3, #0]
   129c4:	f001 be1a 	b.w	145fc <auto_nav+0x21a4>
            fly_to(4);
   129c8:	2004      	movs	r0, #4
   129ca:	f001 ff59 	bl	14880 <fly_to>
            auto_pitch = FALSE;
   129ce:	f64b 63df 	movw	r3, #48863	; 0xbedf
   129d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129d6:	2200      	movs	r2, #0
   129d8:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   129da:	f24c 237c 	movw	r3, #49788	; 0xc27c
   129de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129e2:	f04f 0200 	mov.w	r2, #0
   129e6:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   129e8:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   129ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129f0:	2203      	movs	r2, #3
   129f2:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   129f4:	f240 4328 	movw	r3, #1064	; 0x428
   129f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   129fe:	f240 4324 	movw	r3, #1060	; 0x424
   12a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a06:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12a08:	f24c 2344 	movw	r3, #49732	; 0xc244
   12a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a10:	f04f 0200 	mov.w	r2, #0
   12a14:	601a      	str	r2, [r3, #0]
          }
          return;
   12a16:	f001 bdf1 	b.w	145fc <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12a1a:	f24c 2350 	movw	r3, #49744	; 0xc250
   12a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a22:	781b      	ldrb	r3, [r3, #0]
   12a24:	2b03      	cmp	r3, #3
   12a26:	d106      	bne.n	12a36 <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12a28:	f24c 2350 	movw	r3, #49744	; 0xc250
   12a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a30:	2203      	movs	r2, #3
   12a32:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   12a34:	e6e0      	b.n	127f8 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   12a36:	f24c 2350 	movw	r3, #49744	; 0xc250
   12a3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a3e:	781b      	ldrb	r3, [r3, #0]
   12a40:	2b04      	cmp	r3, #4
   12a42:	f041 85db 	bne.w	145fc <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   12a46:	f24c 2350 	movw	r3, #49744	; 0xc250
   12a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a4e:	2204      	movs	r2, #4
   12a50:	701a      	strb	r2, [r3, #0]
        NextBlock()
   12a52:	f24c 2351 	movw	r3, #49745	; 0xc251
   12a56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a5a:	781b      	ldrb	r3, [r3, #0]
   12a5c:	3301      	adds	r3, #1
   12a5e:	b2da      	uxtb	r2, r3
   12a60:	f24c 2351 	movw	r3, #49745	; 0xc251
   12a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a68:	701a      	strb	r2, [r3, #0]
   12a6a:	f24c 2350 	movw	r3, #49744	; 0xc250
   12a6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a72:	2200      	movs	r2, #0
   12a74:	701a      	strb	r2, [r3, #0]
   12a76:	f24c 2366 	movw	r3, #49766	; 0xc266
   12a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a7e:	2200      	movs	r2, #0
   12a80:	801a      	strh	r2, [r3, #0]
   12a82:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   12a86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a8a:	681a      	ldr	r2, [r3, #0]
   12a8c:	f24c 2354 	movw	r3, #49748	; 0xc254
   12a90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a94:	601a      	str	r2, [r3, #0]
   12a96:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   12a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a9e:	681a      	ldr	r2, [r3, #0]
   12aa0:	f24c 2358 	movw	r3, #49752	; 0xc258
   12aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aa8:	601a      	str	r2, [r3, #0]
   12aaa:	f24c 2364 	movw	r3, #49764	; 0xc264
   12aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ab2:	2200      	movs	r2, #0
   12ab4:	801a      	strh	r2, [r3, #0]
   12ab6:	f24c 2368 	movw	r3, #49768	; 0xc268
   12aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12abe:	f04f 0200 	mov.w	r2, #0
   12ac2:	601a      	str	r2, [r3, #0]
   12ac4:	f001 bd9a 	b.w	145fc <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   12ac8:	f24c 2351 	movw	r3, #49745	; 0xc251
   12acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ad0:	781b      	ldrb	r3, [r3, #0]
   12ad2:	2b02      	cmp	r3, #2
   12ad4:	f040 8392 	bne.w	131fc <auto_nav+0xda4>
{
	nav_block = 2;
   12ad8:	f24c 2351 	movw	r3, #49745	; 0xc251
   12adc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ae0:	2202      	movs	r2, #2
   12ae2:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   12ae4:	f64b 63e0 	movw	r3, #48864	; 0xbee0
   12ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aec:	781b      	ldrb	r3, [r3, #0]
   12aee:	2b00      	cmp	r3, #0
   12af0:	d007      	beq.n	12b02 <auto_nav+0x6aa>
   12af2:	f64b 63e0 	movw	r3, #48864	; 0xbee0
   12af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12afa:	2200      	movs	r2, #0
   12afc:	701a      	strb	r2, [r3, #0]
   12afe:	2301      	movs	r3, #1
   12b00:	e000      	b.n	12b04 <auto_nav+0x6ac>
   12b02:	2300      	movs	r3, #0
   12b04:	2b00      	cmp	r3, #0
   12b06:	d034      	beq.n	12b72 <auto_nav+0x71a>
   12b08:	f24c 2351 	movw	r3, #49745	; 0xc251
   12b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b10:	2203      	movs	r2, #3
   12b12:	701a      	strb	r2, [r3, #0]
   12b14:	f24c 2350 	movw	r3, #49744	; 0xc250
   12b18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b1c:	2200      	movs	r2, #0
   12b1e:	701a      	strb	r2, [r3, #0]
   12b20:	f24c 2366 	movw	r3, #49766	; 0xc266
   12b24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b28:	2200      	movs	r2, #0
   12b2a:	801a      	strh	r2, [r3, #0]
   12b2c:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   12b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b34:	681a      	ldr	r2, [r3, #0]
   12b36:	f24c 2354 	movw	r3, #49748	; 0xc254
   12b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b3e:	601a      	str	r2, [r3, #0]
   12b40:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   12b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b48:	681a      	ldr	r2, [r3, #0]
   12b4a:	f24c 2358 	movw	r3, #49752	; 0xc258
   12b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b52:	601a      	str	r2, [r3, #0]
   12b54:	f24c 2364 	movw	r3, #49764	; 0xc264
   12b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b5c:	2200      	movs	r2, #0
   12b5e:	801a      	strh	r2, [r3, #0]
   12b60:	f24c 2368 	movw	r3, #49768	; 0xc268
   12b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b68:	f04f 0200 	mov.w	r2, #0
   12b6c:	601a      	str	r2, [r3, #0]
   12b6e:	f001 bd45 	b.w	145fc <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   12b72:	f24c 2350 	movw	r3, #49744	; 0xc250
   12b76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b7a:	781b      	ldrb	r3, [r3, #0]
   12b7c:	2b00      	cmp	r3, #0
   12b7e:	d134      	bne.n	12bea <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   12b80:	f24c 2350 	movw	r3, #49744	; 0xc250
   12b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b88:	2200      	movs	r2, #0
   12b8a:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   12b8c:	f24c 2350 	movw	r3, #49744	; 0xc250
   12b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b94:	781b      	ldrb	r3, [r3, #0]
   12b96:	3301      	adds	r3, #1
   12b98:	b2da      	uxtb	r2, r3
   12b9a:	f24c 2350 	movw	r3, #49744	; 0xc250
   12b9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ba2:	701a      	strb	r2, [r3, #0]
   12ba4:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   12ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bac:	681a      	ldr	r2, [r3, #0]
   12bae:	f24c 2354 	movw	r3, #49748	; 0xc254
   12bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bb6:	601a      	str	r2, [r3, #0]
   12bb8:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   12bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bc0:	681a      	ldr	r2, [r3, #0]
   12bc2:	f24c 2358 	movw	r3, #49752	; 0xc258
   12bc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bca:	601a      	str	r2, [r3, #0]
   12bcc:	f24c 2364 	movw	r3, #49764	; 0xc264
   12bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bd4:	2200      	movs	r2, #0
   12bd6:	801a      	strh	r2, [r3, #0]
   12bd8:	f24c 2368 	movw	r3, #49768	; 0xc268
   12bdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12be0:	f04f 0200 	mov.w	r2, #0
   12be4:	601a      	str	r2, [r3, #0]
   12be6:	f001 bd09 	b.w	145fc <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   12bea:	f24c 2350 	movw	r3, #49744	; 0xc250
   12bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bf2:	781b      	ldrb	r3, [r3, #0]
   12bf4:	2b01      	cmp	r3, #1
   12bf6:	d169      	bne.n	12ccc <auto_nav+0x874>
    {
         nav_stage =1;
   12bf8:	f24c 2350 	movw	r3, #49744	; 0xc250
   12bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c00:	2201      	movs	r2, #1
   12c02:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   12c04:	2006      	movs	r0, #6
   12c06:	f001 fd07 	bl	14618 <approaching>
   12c0a:	4603      	mov	r3, r0
   12c0c:	2b00      	cmp	r3, #0
   12c0e:	d034      	beq.n	12c7a <auto_nav+0x822>
   12c10:	f24c 235c 	movw	r3, #49756	; 0xc25c
   12c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c18:	2206      	movs	r2, #6
   12c1a:	701a      	strb	r2, [r3, #0]
   12c1c:	f24c 2350 	movw	r3, #49744	; 0xc250
   12c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c24:	781b      	ldrb	r3, [r3, #0]
   12c26:	3301      	adds	r3, #1
   12c28:	b2da      	uxtb	r2, r3
   12c2a:	f24c 2350 	movw	r3, #49744	; 0xc250
   12c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c32:	701a      	strb	r2, [r3, #0]
   12c34:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   12c38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c3c:	681a      	ldr	r2, [r3, #0]
   12c3e:	f24c 2354 	movw	r3, #49748	; 0xc254
   12c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c46:	601a      	str	r2, [r3, #0]
   12c48:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   12c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c50:	681a      	ldr	r2, [r3, #0]
   12c52:	f24c 2358 	movw	r3, #49752	; 0xc258
   12c56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c5a:	601a      	str	r2, [r3, #0]
   12c5c:	f24c 2364 	movw	r3, #49764	; 0xc264
   12c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c64:	2200      	movs	r2, #0
   12c66:	801a      	strh	r2, [r3, #0]
   12c68:	f24c 2368 	movw	r3, #49768	; 0xc268
   12c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c70:	f04f 0200 	mov.w	r2, #0
   12c74:	601a      	str	r2, [r3, #0]
   12c76:	f001 bcc1 	b.w	145fc <auto_nav+0x21a4>
            fly_to(6);
   12c7a:	2006      	movs	r0, #6
   12c7c:	f001 fe00 	bl	14880 <fly_to>
            auto_pitch = FALSE;
   12c80:	f64b 63df 	movw	r3, #48863	; 0xbedf
   12c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c88:	2200      	movs	r2, #0
   12c8a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12c8c:	f24c 237c 	movw	r3, #49788	; 0xc27c
   12c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c94:	f04f 0200 	mov.w	r2, #0
   12c98:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12c9a:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   12c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ca2:	2203      	movs	r2, #3
   12ca4:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   12ca6:	f240 4328 	movw	r3, #1064	; 0x428
   12caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   12cb0:	f240 4324 	movw	r3, #1060	; 0x424
   12cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cb8:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12cba:	f24c 2344 	movw	r3, #49732	; 0xc244
   12cbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cc2:	f04f 0200 	mov.w	r2, #0
   12cc6:	601a      	str	r2, [r3, #0]
          }
          return;
   12cc8:	f001 bc98 	b.w	145fc <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12ccc:	f24c 2350 	movw	r3, #49744	; 0xc250
   12cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cd4:	781b      	ldrb	r3, [r3, #0]
   12cd6:	2b02      	cmp	r3, #2
   12cd8:	d169      	bne.n	12dae <auto_nav+0x956>
     {
         nav_stage =2; 
   12cda:	f24c 2350 	movw	r3, #49744	; 0xc250
   12cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ce2:	2202      	movs	r2, #2
   12ce4:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   12ce6:	2001      	movs	r0, #1
   12ce8:	f001 fc96 	bl	14618 <approaching>
   12cec:	4603      	mov	r3, r0
   12cee:	2b00      	cmp	r3, #0
   12cf0:	d034      	beq.n	12d5c <auto_nav+0x904>
   12cf2:	f24c 235c 	movw	r3, #49756	; 0xc25c
   12cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cfa:	2201      	movs	r2, #1
   12cfc:	701a      	strb	r2, [r3, #0]
   12cfe:	f24c 2350 	movw	r3, #49744	; 0xc250
   12d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d06:	781b      	ldrb	r3, [r3, #0]
   12d08:	3301      	adds	r3, #1
   12d0a:	b2da      	uxtb	r2, r3
   12d0c:	f24c 2350 	movw	r3, #49744	; 0xc250
   12d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d14:	701a      	strb	r2, [r3, #0]
   12d16:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   12d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d1e:	681a      	ldr	r2, [r3, #0]
   12d20:	f24c 2354 	movw	r3, #49748	; 0xc254
   12d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d28:	601a      	str	r2, [r3, #0]
   12d2a:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   12d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d32:	681a      	ldr	r2, [r3, #0]
   12d34:	f24c 2358 	movw	r3, #49752	; 0xc258
   12d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d3c:	601a      	str	r2, [r3, #0]
   12d3e:	f24c 2364 	movw	r3, #49764	; 0xc264
   12d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d46:	2200      	movs	r2, #0
   12d48:	801a      	strh	r2, [r3, #0]
   12d4a:	f24c 2368 	movw	r3, #49768	; 0xc268
   12d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d52:	f04f 0200 	mov.w	r2, #0
   12d56:	601a      	str	r2, [r3, #0]
   12d58:	f001 bc50 	b.w	145fc <auto_nav+0x21a4>
            fly_to(1);
   12d5c:	2001      	movs	r0, #1
   12d5e:	f001 fd8f 	bl	14880 <fly_to>
            auto_pitch = FALSE;
   12d62:	f64b 63df 	movw	r3, #48863	; 0xbedf
   12d66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d6a:	2200      	movs	r2, #0
   12d6c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12d6e:	f24c 237c 	movw	r3, #49788	; 0xc27c
   12d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d76:	f04f 0200 	mov.w	r2, #0
   12d7a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12d7c:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   12d80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d84:	2203      	movs	r2, #3
   12d86:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12d88:	f240 4328 	movw	r3, #1064	; 0x428
   12d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d90:	695a      	ldr	r2, [r3, #20]
   12d92:	f240 4324 	movw	r3, #1060	; 0x424
   12d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d9a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12d9c:	f24c 2344 	movw	r3, #49732	; 0xc244
   12da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12da4:	f04f 0200 	mov.w	r2, #0
   12da8:	601a      	str	r2, [r3, #0]
          }
          return;
   12daa:	f001 bc27 	b.w	145fc <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12dae:	f24c 2350 	movw	r3, #49744	; 0xc250
   12db2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12db6:	781b      	ldrb	r3, [r3, #0]
   12db8:	2b03      	cmp	r3, #3
   12dba:	d16f      	bne.n	12e9c <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   12dbc:	f24c 2350 	movw	r3, #49744	; 0xc250
   12dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dc4:	2203      	movs	r2, #3
   12dc6:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   12dc8:	2002      	movs	r0, #2
   12dca:	f001 fc25 	bl	14618 <approaching>
   12dce:	4603      	mov	r3, r0
   12dd0:	2b00      	cmp	r3, #0
   12dd2:	d034      	beq.n	12e3e <auto_nav+0x9e6>
   12dd4:	f24c 235c 	movw	r3, #49756	; 0xc25c
   12dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ddc:	2202      	movs	r2, #2
   12dde:	701a      	strb	r2, [r3, #0]
   12de0:	f24c 2350 	movw	r3, #49744	; 0xc250
   12de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12de8:	781b      	ldrb	r3, [r3, #0]
   12dea:	3301      	adds	r3, #1
   12dec:	b2da      	uxtb	r2, r3
   12dee:	f24c 2350 	movw	r3, #49744	; 0xc250
   12df2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12df6:	701a      	strb	r2, [r3, #0]
   12df8:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   12dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e00:	681a      	ldr	r2, [r3, #0]
   12e02:	f24c 2354 	movw	r3, #49748	; 0xc254
   12e06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e0a:	601a      	str	r2, [r3, #0]
   12e0c:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   12e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e14:	681a      	ldr	r2, [r3, #0]
   12e16:	f24c 2358 	movw	r3, #49752	; 0xc258
   12e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e1e:	601a      	str	r2, [r3, #0]
   12e20:	f24c 2364 	movw	r3, #49764	; 0xc264
   12e24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e28:	2200      	movs	r2, #0
   12e2a:	801a      	strh	r2, [r3, #0]
   12e2c:	f24c 2368 	movw	r3, #49768	; 0xc268
   12e30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e34:	f04f 0200 	mov.w	r2, #0
   12e38:	601a      	str	r2, [r3, #0]
   12e3a:	f001 bbdf 	b.w	145fc <auto_nav+0x21a4>
            route_to(last_wp, 2);
   12e3e:	f24c 235c 	movw	r3, #49756	; 0xc25c
   12e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e46:	781b      	ldrb	r3, [r3, #0]
   12e48:	4618      	mov	r0, r3
   12e4a:	2102      	movs	r1, #2
   12e4c:	f001 fd3a 	bl	148c4 <route_to>
            auto_pitch = FALSE;
   12e50:	f64b 63df 	movw	r3, #48863	; 0xbedf
   12e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e58:	2200      	movs	r2, #0
   12e5a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12e5c:	f24c 237c 	movw	r3, #49788	; 0xc27c
   12e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e64:	f04f 0200 	mov.w	r2, #0
   12e68:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12e6a:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   12e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e72:	2203      	movs	r2, #3
   12e74:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   12e76:	f240 4328 	movw	r3, #1064	; 0x428
   12e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e7e:	6a1a      	ldr	r2, [r3, #32]
   12e80:	f240 4324 	movw	r3, #1060	; 0x424
   12e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e88:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12e8a:	f24c 2344 	movw	r3, #49732	; 0xc244
   12e8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e92:	f04f 0200 	mov.w	r2, #0
   12e96:	601a      	str	r2, [r3, #0]
          }
          return;
   12e98:	f001 bbb0 	b.w	145fc <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   12e9c:	f24c 2350 	movw	r3, #49744	; 0xc250
   12ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ea4:	781b      	ldrb	r3, [r3, #0]
   12ea6:	2b04      	cmp	r3, #4
   12ea8:	d169      	bne.n	12f7e <auto_nav+0xb26>
       {
          nav_stage = 4;
   12eaa:	f24c 2350 	movw	r3, #49744	; 0xc250
   12eae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eb2:	2204      	movs	r2, #4
   12eb4:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   12eb6:	2003      	movs	r0, #3
   12eb8:	f001 fbae 	bl	14618 <approaching>
   12ebc:	4603      	mov	r3, r0
   12ebe:	2b00      	cmp	r3, #0
   12ec0:	d034      	beq.n	12f2c <auto_nav+0xad4>
   12ec2:	f24c 235c 	movw	r3, #49756	; 0xc25c
   12ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eca:	2203      	movs	r2, #3
   12ecc:	701a      	strb	r2, [r3, #0]
   12ece:	f24c 2350 	movw	r3, #49744	; 0xc250
   12ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ed6:	781b      	ldrb	r3, [r3, #0]
   12ed8:	3301      	adds	r3, #1
   12eda:	b2da      	uxtb	r2, r3
   12edc:	f24c 2350 	movw	r3, #49744	; 0xc250
   12ee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ee4:	701a      	strb	r2, [r3, #0]
   12ee6:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   12eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eee:	681a      	ldr	r2, [r3, #0]
   12ef0:	f24c 2354 	movw	r3, #49748	; 0xc254
   12ef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ef8:	601a      	str	r2, [r3, #0]
   12efa:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   12efe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f02:	681a      	ldr	r2, [r3, #0]
   12f04:	f24c 2358 	movw	r3, #49752	; 0xc258
   12f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f0c:	601a      	str	r2, [r3, #0]
   12f0e:	f24c 2364 	movw	r3, #49764	; 0xc264
   12f12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f16:	2200      	movs	r2, #0
   12f18:	801a      	strh	r2, [r3, #0]
   12f1a:	f24c 2368 	movw	r3, #49768	; 0xc268
   12f1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f22:	f04f 0200 	mov.w	r2, #0
   12f26:	601a      	str	r2, [r3, #0]
   12f28:	f001 bb68 	b.w	145fc <auto_nav+0x21a4>
            fly_to(3);
   12f2c:	2003      	movs	r0, #3
   12f2e:	f001 fca7 	bl	14880 <fly_to>
            auto_pitch = FALSE;
   12f32:	f64b 63df 	movw	r3, #48863	; 0xbedf
   12f36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f3a:	2200      	movs	r2, #0
   12f3c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12f3e:	f24c 237c 	movw	r3, #49788	; 0xc27c
   12f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f46:	f04f 0200 	mov.w	r2, #0
   12f4a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12f4c:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   12f50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f54:	2203      	movs	r2, #3
   12f56:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   12f58:	f240 4328 	movw	r3, #1064	; 0x428
   12f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12f62:	f240 4324 	movw	r3, #1060	; 0x424
   12f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f6a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12f6c:	f24c 2344 	movw	r3, #49732	; 0xc244
   12f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f74:	f04f 0200 	mov.w	r2, #0
   12f78:	601a      	str	r2, [r3, #0]
          }
          return;
   12f7a:	f001 bb3f 	b.w	145fc <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   12f7e:	f24c 2350 	movw	r3, #49744	; 0xc250
   12f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f86:	781b      	ldrb	r3, [r3, #0]
   12f88:	2b05      	cmp	r3, #5
   12f8a:	d169      	bne.n	13060 <auto_nav+0xc08>
       {
          nav_stage =5;
   12f8c:	f24c 2350 	movw	r3, #49744	; 0xc250
   12f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f94:	2205      	movs	r2, #5
   12f96:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12f98:	2004      	movs	r0, #4
   12f9a:	f001 fb3d 	bl	14618 <approaching>
   12f9e:	4603      	mov	r3, r0
   12fa0:	2b00      	cmp	r3, #0
   12fa2:	d034      	beq.n	1300e <auto_nav+0xbb6>
   12fa4:	f24c 235c 	movw	r3, #49756	; 0xc25c
   12fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fac:	2204      	movs	r2, #4
   12fae:	701a      	strb	r2, [r3, #0]
   12fb0:	f24c 2350 	movw	r3, #49744	; 0xc250
   12fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fb8:	781b      	ldrb	r3, [r3, #0]
   12fba:	3301      	adds	r3, #1
   12fbc:	b2da      	uxtb	r2, r3
   12fbe:	f24c 2350 	movw	r3, #49744	; 0xc250
   12fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fc6:	701a      	strb	r2, [r3, #0]
   12fc8:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   12fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fd0:	681a      	ldr	r2, [r3, #0]
   12fd2:	f24c 2354 	movw	r3, #49748	; 0xc254
   12fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fda:	601a      	str	r2, [r3, #0]
   12fdc:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   12fe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fe4:	681a      	ldr	r2, [r3, #0]
   12fe6:	f24c 2358 	movw	r3, #49752	; 0xc258
   12fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fee:	601a      	str	r2, [r3, #0]
   12ff0:	f24c 2364 	movw	r3, #49764	; 0xc264
   12ff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ff8:	2200      	movs	r2, #0
   12ffa:	801a      	strh	r2, [r3, #0]
   12ffc:	f24c 2368 	movw	r3, #49768	; 0xc268
   13000:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13004:	f04f 0200 	mov.w	r2, #0
   13008:	601a      	str	r2, [r3, #0]
   1300a:	f001 baf7 	b.w	145fc <auto_nav+0x21a4>
            fly_to(4);
   1300e:	2004      	movs	r0, #4
   13010:	f001 fc36 	bl	14880 <fly_to>
            auto_pitch = FALSE;
   13014:	f64b 63df 	movw	r3, #48863	; 0xbedf
   13018:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1301c:	2200      	movs	r2, #0
   1301e:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   13020:	f24c 237c 	movw	r3, #49788	; 0xc27c
   13024:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13028:	f04f 0200 	mov.w	r2, #0
   1302c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1302e:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   13032:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13036:	2203      	movs	r2, #3
   13038:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   1303a:	f240 4328 	movw	r3, #1064	; 0x428
   1303e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   13044:	f240 4324 	movw	r3, #1060	; 0x424
   13048:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1304c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1304e:	f24c 2344 	movw	r3, #49732	; 0xc244
   13052:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13056:	f04f 0200 	mov.w	r2, #0
   1305a:	601a      	str	r2, [r3, #0]
          }
          return;
   1305c:	f001 bace 	b.w	145fc <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   13060:	f24c 2350 	movw	r3, #49744	; 0xc250
   13064:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13068:	781b      	ldrb	r3, [r3, #0]
   1306a:	2b06      	cmp	r3, #6
   1306c:	d16f      	bne.n	1314e <auto_nav+0xcf6>
       {
          nav_stage =6;
   1306e:	f24c 2350 	movw	r3, #49744	; 0xc250
   13072:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13076:	2206      	movs	r2, #6
   13078:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   1307a:	2005      	movs	r0, #5
   1307c:	f001 facc 	bl	14618 <approaching>
   13080:	4603      	mov	r3, r0
   13082:	2b00      	cmp	r3, #0
   13084:	d034      	beq.n	130f0 <auto_nav+0xc98>
   13086:	f24c 235c 	movw	r3, #49756	; 0xc25c
   1308a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1308e:	2205      	movs	r2, #5
   13090:	701a      	strb	r2, [r3, #0]
   13092:	f24c 2350 	movw	r3, #49744	; 0xc250
   13096:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1309a:	781b      	ldrb	r3, [r3, #0]
   1309c:	3301      	adds	r3, #1
   1309e:	b2da      	uxtb	r2, r3
   130a0:	f24c 2350 	movw	r3, #49744	; 0xc250
   130a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130a8:	701a      	strb	r2, [r3, #0]
   130aa:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   130ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130b2:	681a      	ldr	r2, [r3, #0]
   130b4:	f24c 2354 	movw	r3, #49748	; 0xc254
   130b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130bc:	601a      	str	r2, [r3, #0]
   130be:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   130c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130c6:	681a      	ldr	r2, [r3, #0]
   130c8:	f24c 2358 	movw	r3, #49752	; 0xc258
   130cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130d0:	601a      	str	r2, [r3, #0]
   130d2:	f24c 2364 	movw	r3, #49764	; 0xc264
   130d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130da:	2200      	movs	r2, #0
   130dc:	801a      	strh	r2, [r3, #0]
   130de:	f24c 2368 	movw	r3, #49768	; 0xc268
   130e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130e6:	f04f 0200 	mov.w	r2, #0
   130ea:	601a      	str	r2, [r3, #0]
   130ec:	f001 ba86 	b.w	145fc <auto_nav+0x21a4>
            route_to(last_wp, 5);
   130f0:	f24c 235c 	movw	r3, #49756	; 0xc25c
   130f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130f8:	781b      	ldrb	r3, [r3, #0]
   130fa:	4618      	mov	r0, r3
   130fc:	2105      	movs	r1, #5
   130fe:	f001 fbe1 	bl	148c4 <route_to>
            auto_pitch = FALSE;
   13102:	f64b 63df 	movw	r3, #48863	; 0xbedf
   13106:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1310a:	2200      	movs	r2, #0
   1310c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1310e:	f24c 237c 	movw	r3, #49788	; 0xc27c
   13112:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13116:	f04f 0200 	mov.w	r2, #0
   1311a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1311c:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   13120:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13124:	2203      	movs	r2, #3
   13126:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   13128:	f240 4328 	movw	r3, #1064	; 0x428
   1312c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   13132:	f240 4324 	movw	r3, #1060	; 0x424
   13136:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1313a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1313c:	f24c 2344 	movw	r3, #49732	; 0xc244
   13140:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13144:	f04f 0200 	mov.w	r2, #0
   13148:	601a      	str	r2, [r3, #0]
          }
          return;
   1314a:	f001 ba57 	b.w	145fc <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   1314e:	f24c 2350 	movw	r3, #49744	; 0xc250
   13152:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13156:	781b      	ldrb	r3, [r3, #0]
   13158:	2b07      	cmp	r3, #7
   1315a:	d106      	bne.n	1316a <auto_nav+0xd12>
       {
	   nav_stage =7;
   1315c:	f24c 2350 	movw	r3, #49744	; 0xc250
   13160:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13164:	2207      	movs	r2, #7
   13166:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   13168:	e50a      	b.n	12b80 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   1316a:	f24c 2350 	movw	r3, #49744	; 0xc250
   1316e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13172:	781b      	ldrb	r3, [r3, #0]
   13174:	2b08      	cmp	r3, #8
   13176:	f041 8241 	bne.w	145fc <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   1317a:	f24c 2350 	movw	r3, #49744	; 0xc250
   1317e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13182:	2208      	movs	r2, #8
   13184:	701a      	strb	r2, [r3, #0]
          NextBlock();
   13186:	f24c 2351 	movw	r3, #49745	; 0xc251
   1318a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1318e:	781b      	ldrb	r3, [r3, #0]
   13190:	3301      	adds	r3, #1
   13192:	b2da      	uxtb	r2, r3
   13194:	f24c 2351 	movw	r3, #49745	; 0xc251
   13198:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1319c:	701a      	strb	r2, [r3, #0]
   1319e:	f24c 2350 	movw	r3, #49744	; 0xc250
   131a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131a6:	2200      	movs	r2, #0
   131a8:	701a      	strb	r2, [r3, #0]
   131aa:	f24c 2366 	movw	r3, #49766	; 0xc266
   131ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131b2:	2200      	movs	r2, #0
   131b4:	801a      	strh	r2, [r3, #0]
   131b6:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   131ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131be:	681a      	ldr	r2, [r3, #0]
   131c0:	f24c 2354 	movw	r3, #49748	; 0xc254
   131c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131c8:	601a      	str	r2, [r3, #0]
   131ca:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   131ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131d2:	681a      	ldr	r2, [r3, #0]
   131d4:	f24c 2358 	movw	r3, #49752	; 0xc258
   131d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131dc:	601a      	str	r2, [r3, #0]
   131de:	f24c 2364 	movw	r3, #49764	; 0xc264
   131e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131e6:	2200      	movs	r2, #0
   131e8:	801a      	strh	r2, [r3, #0]
   131ea:	f24c 2368 	movw	r3, #49768	; 0xc268
   131ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131f2:	f04f 0200 	mov.w	r2, #0
   131f6:	601a      	str	r2, [r3, #0]
   131f8:	f001 ba00 	b.w	145fc <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   131fc:	f24c 2351 	movw	r3, #49745	; 0xc251
   13200:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13204:	781b      	ldrb	r3, [r3, #0]
   13206:	2b03      	cmp	r3, #3
   13208:	f040 8388 	bne.w	1391c <auto_nav+0x14c4>
{
    nav_block = 3;
   1320c:	f24c 2351 	movw	r3, #49745	; 0xc251
   13210:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13214:	2203      	movs	r2, #3
   13216:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   13218:	f64b 63e0 	movw	r3, #48864	; 0xbee0
   1321c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13220:	781b      	ldrb	r3, [r3, #0]
   13222:	2b00      	cmp	r3, #0
   13224:	d007      	beq.n	13236 <auto_nav+0xdde>
   13226:	f64b 63e0 	movw	r3, #48864	; 0xbee0
   1322a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1322e:	2200      	movs	r2, #0
   13230:	701a      	strb	r2, [r3, #0]
   13232:	2301      	movs	r3, #1
   13234:	e000      	b.n	13238 <auto_nav+0xde0>
   13236:	2300      	movs	r3, #0
   13238:	2b00      	cmp	r3, #0
   1323a:	d034      	beq.n	132a6 <auto_nav+0xe4e>
   1323c:	f24c 2351 	movw	r3, #49745	; 0xc251
   13240:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13244:	2204      	movs	r2, #4
   13246:	701a      	strb	r2, [r3, #0]
   13248:	f24c 2350 	movw	r3, #49744	; 0xc250
   1324c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13250:	2200      	movs	r2, #0
   13252:	701a      	strb	r2, [r3, #0]
   13254:	f24c 2366 	movw	r3, #49766	; 0xc266
   13258:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1325c:	2200      	movs	r2, #0
   1325e:	801a      	strh	r2, [r3, #0]
   13260:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   13264:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13268:	681a      	ldr	r2, [r3, #0]
   1326a:	f24c 2354 	movw	r3, #49748	; 0xc254
   1326e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13272:	601a      	str	r2, [r3, #0]
   13274:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   13278:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1327c:	681a      	ldr	r2, [r3, #0]
   1327e:	f24c 2358 	movw	r3, #49752	; 0xc258
   13282:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13286:	601a      	str	r2, [r3, #0]
   13288:	f24c 2364 	movw	r3, #49764	; 0xc264
   1328c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13290:	2200      	movs	r2, #0
   13292:	801a      	strh	r2, [r3, #0]
   13294:	f24c 2368 	movw	r3, #49768	; 0xc268
   13298:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1329c:	f04f 0200 	mov.w	r2, #0
   132a0:	601a      	str	r2, [r3, #0]
   132a2:	f001 b9ab 	b.w	145fc <auto_nav+0x21a4>
    if(nav_stage == 0)
   132a6:	f24c 2350 	movw	r3, #49744	; 0xc250
   132aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ae:	781b      	ldrb	r3, [r3, #0]
   132b0:	2b00      	cmp	r3, #0
   132b2:	f040 82ea 	bne.w	1388a <auto_nav+0x1432>
    {
        nav_stage = 0;
   132b6:	f24c 2350 	movw	r3, #49744	; 0xc250
   132ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132be:	2200      	movs	r2, #0
   132c0:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   132c2:	f64b 63dc 	movw	r3, #48860	; 0xbedc
   132c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ca:	781b      	ldrb	r3, [r3, #0]
   132cc:	2b02      	cmp	r3, #2
   132ce:	f040 81a5 	bne.w	1361c <auto_nav+0x11c4>
   132d2:	f24c 0300 	movw	r3, #49152	; 0xc000
   132d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132da:	88db      	ldrh	r3, [r3, #6]
   132dc:	84fb      	strh	r3, [r7, #38]	; 0x26
   132de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   132e2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   132e6:	dc04      	bgt.n	132f2 <auto_nav+0xe9a>
   132e8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   132ec:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   132f0:	da7e      	bge.n	133f0 <auto_nav+0xf98>
   132f2:	f24c 239c 	movw	r3, #49820	; 0xc29c
   132f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132fa:	681b      	ldr	r3, [r3, #0]
   132fc:	4618      	mov	r0, r3
   132fe:	f004 fb45 	bl	1798c <__aeabi_f2d>
   13302:	4604      	mov	r4, r0
   13304:	460d      	mov	r5, r1
   13306:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   1330a:	4618      	mov	r0, r3
   1330c:	f004 ff7e 	bl	1820c <__aeabi_i2f>
   13310:	4603      	mov	r3, r0
   13312:	4618      	mov	r0, r3
   13314:	f04f 0100 	mov.w	r1, #0
   13318:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1331c:	f005 f87e 	bl	1841c <__aeabi_fdiv>
   13320:	4603      	mov	r3, r0
   13322:	4618      	mov	r0, r3
   13324:	f004 fb32 	bl	1798c <__aeabi_f2d>
   13328:	4602      	mov	r2, r0
   1332a:	460b      	mov	r3, r1
   1332c:	4610      	mov	r0, r2
   1332e:	4619      	mov	r1, r3
   13330:	f04f 0200 	mov.w	r2, #0
   13334:	f04f 0300 	mov.w	r3, #0
   13338:	f2cc 0334 	movt	r3, #49204	; 0xc034
   1333c:	f004 fb7a 	bl	17a34 <__aeabi_dmul>
   13340:	4602      	mov	r2, r0
   13342:	460b      	mov	r3, r1
   13344:	4610      	mov	r0, r2
   13346:	4619      	mov	r1, r3
   13348:	f04f 0200 	mov.w	r2, #0
   1334c:	f04f 0300 	mov.w	r3, #0
   13350:	f004 f9be 	bl	176d0 <__adddf3>
   13354:	4602      	mov	r2, r0
   13356:	460b      	mov	r3, r1
   13358:	4620      	mov	r0, r4
   1335a:	4629      	mov	r1, r5
   1335c:	f004 f9b8 	bl	176d0 <__adddf3>
   13360:	4602      	mov	r2, r0
   13362:	460b      	mov	r3, r1
   13364:	4610      	mov	r0, r2
   13366:	4619      	mov	r1, r3
   13368:	f004 fe46 	bl	17ff8 <__aeabi_d2f>
   1336c:	4602      	mov	r2, r0
   1336e:	f24c 239c 	movw	r3, #49820	; 0xc29c
   13372:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13376:	601a      	str	r2, [r3, #0]
   13378:	f24c 239c 	movw	r3, #49820	; 0xc29c
   1337c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13380:	681b      	ldr	r3, [r3, #0]
   13382:	4618      	mov	r0, r3
   13384:	f04f 0100 	mov.w	r1, #0
   13388:	f2c4 317a 	movt	r1, #17274	; 0x437a
   1338c:	f005 f93a 	bl	18604 <__aeabi_fcmple>
   13390:	4603      	mov	r3, r0
   13392:	2b00      	cmp	r3, #0
   13394:	d005      	beq.n	133a2 <auto_nav+0xf4a>
   13396:	f24c 239c 	movw	r3, #49820	; 0xc29c
   1339a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1339e:	681a      	ldr	r2, [r3, #0]
   133a0:	e003      	b.n	133aa <auto_nav+0xf52>
   133a2:	f04f 0200 	mov.w	r2, #0
   133a6:	f2c4 327a 	movt	r2, #17274	; 0x437a
   133aa:	f24c 239c 	movw	r3, #49820	; 0xc29c
   133ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133b2:	601a      	str	r2, [r3, #0]
   133b4:	f24c 239c 	movw	r3, #49820	; 0xc29c
   133b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133bc:	681b      	ldr	r3, [r3, #0]
   133be:	4618      	mov	r0, r3
   133c0:	f04f 0100 	mov.w	r1, #0
   133c4:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   133c8:	f005 f926 	bl	18618 <__aeabi_fcmpge>
   133cc:	4603      	mov	r3, r0
   133ce:	2b00      	cmp	r3, #0
   133d0:	d005      	beq.n	133de <auto_nav+0xf86>
   133d2:	f24c 239c 	movw	r3, #49820	; 0xc29c
   133d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133da:	681a      	ldr	r2, [r3, #0]
   133dc:	e003      	b.n	133e6 <auto_nav+0xf8e>
   133de:	f04f 0200 	mov.w	r2, #0
   133e2:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   133e6:	f24c 239c 	movw	r3, #49820	; 0xc29c
   133ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133ee:	601a      	str	r2, [r3, #0]
   133f0:	f24c 0300 	movw	r3, #49152	; 0xc000
   133f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133f8:	889b      	ldrh	r3, [r3, #4]
   133fa:	84bb      	strh	r3, [r7, #36]	; 0x24
   133fc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13400:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   13404:	dc04      	bgt.n	13410 <auto_nav+0xfb8>
   13406:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   1340a:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   1340e:	da7e      	bge.n	1350e <auto_nav+0x10b6>
   13410:	f24c 23a0 	movw	r3, #49824	; 0xc2a0
   13414:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13418:	681b      	ldr	r3, [r3, #0]
   1341a:	4618      	mov	r0, r3
   1341c:	f004 fab6 	bl	1798c <__aeabi_f2d>
   13420:	4604      	mov	r4, r0
   13422:	460d      	mov	r5, r1
   13424:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13428:	4618      	mov	r0, r3
   1342a:	f004 feef 	bl	1820c <__aeabi_i2f>
   1342e:	4603      	mov	r3, r0
   13430:	4618      	mov	r0, r3
   13432:	f04f 0100 	mov.w	r1, #0
   13436:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1343a:	f004 ffef 	bl	1841c <__aeabi_fdiv>
   1343e:	4603      	mov	r3, r0
   13440:	4618      	mov	r0, r3
   13442:	f004 faa3 	bl	1798c <__aeabi_f2d>
   13446:	4602      	mov	r2, r0
   13448:	460b      	mov	r3, r1
   1344a:	4610      	mov	r0, r2
   1344c:	4619      	mov	r1, r3
   1344e:	f04f 0200 	mov.w	r2, #0
   13452:	f04f 0300 	mov.w	r3, #0
   13456:	f2cc 0334 	movt	r3, #49204	; 0xc034
   1345a:	f004 faeb 	bl	17a34 <__aeabi_dmul>
   1345e:	4602      	mov	r2, r0
   13460:	460b      	mov	r3, r1
   13462:	4610      	mov	r0, r2
   13464:	4619      	mov	r1, r3
   13466:	f04f 0200 	mov.w	r2, #0
   1346a:	f04f 0300 	mov.w	r3, #0
   1346e:	f004 f92f 	bl	176d0 <__adddf3>
   13472:	4602      	mov	r2, r0
   13474:	460b      	mov	r3, r1
   13476:	4620      	mov	r0, r4
   13478:	4629      	mov	r1, r5
   1347a:	f004 f929 	bl	176d0 <__adddf3>
   1347e:	4602      	mov	r2, r0
   13480:	460b      	mov	r3, r1
   13482:	4610      	mov	r0, r2
   13484:	4619      	mov	r1, r3
   13486:	f004 fdb7 	bl	17ff8 <__aeabi_d2f>
   1348a:	4602      	mov	r2, r0
   1348c:	f24c 23a0 	movw	r3, #49824	; 0xc2a0
   13490:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13494:	601a      	str	r2, [r3, #0]
   13496:	f24c 23a0 	movw	r3, #49824	; 0xc2a0
   1349a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1349e:	681b      	ldr	r3, [r3, #0]
   134a0:	4618      	mov	r0, r3
   134a2:	f04f 0100 	mov.w	r1, #0
   134a6:	f2c4 317a 	movt	r1, #17274	; 0x437a
   134aa:	f005 f8ab 	bl	18604 <__aeabi_fcmple>
   134ae:	4603      	mov	r3, r0
   134b0:	2b00      	cmp	r3, #0
   134b2:	d005      	beq.n	134c0 <auto_nav+0x1068>
   134b4:	f24c 23a0 	movw	r3, #49824	; 0xc2a0
   134b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134bc:	681a      	ldr	r2, [r3, #0]
   134be:	e003      	b.n	134c8 <auto_nav+0x1070>
   134c0:	f04f 0200 	mov.w	r2, #0
   134c4:	f2c4 327a 	movt	r2, #17274	; 0x437a
   134c8:	f24c 23a0 	movw	r3, #49824	; 0xc2a0
   134cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134d0:	601a      	str	r2, [r3, #0]
   134d2:	f24c 23a0 	movw	r3, #49824	; 0xc2a0
   134d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134da:	681b      	ldr	r3, [r3, #0]
   134dc:	4618      	mov	r0, r3
   134de:	f04f 0100 	mov.w	r1, #0
   134e2:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   134e6:	f005 f897 	bl	18618 <__aeabi_fcmpge>
   134ea:	4603      	mov	r3, r0
   134ec:	2b00      	cmp	r3, #0
   134ee:	d005      	beq.n	134fc <auto_nav+0x10a4>
   134f0:	f24c 23a0 	movw	r3, #49824	; 0xc2a0
   134f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134f8:	681a      	ldr	r2, [r3, #0]
   134fa:	e003      	b.n	13504 <auto_nav+0x10ac>
   134fc:	f04f 0200 	mov.w	r2, #0
   13500:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   13504:	f24c 23a0 	movw	r3, #49824	; 0xc2a0
   13508:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1350c:	601a      	str	r2, [r3, #0]
   1350e:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   13512:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13516:	2203      	movs	r2, #3
   13518:	701a      	strb	r2, [r3, #0]
   1351a:	f24c 0300 	movw	r3, #49152	; 0xc000
   1351e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13522:	885b      	ldrh	r3, [r3, #2]
   13524:	847b      	strh	r3, [r7, #34]	; 0x22
   13526:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1352a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   1352e:	dc04      	bgt.n	1353a <auto_nav+0x10e2>
   13530:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13534:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13538:	da70      	bge.n	1361c <auto_nav+0x11c4>
   1353a:	f240 4324 	movw	r3, #1060	; 0x424
   1353e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13542:	681b      	ldr	r3, [r3, #0]
   13544:	4618      	mov	r0, r3
   13546:	f004 fa21 	bl	1798c <__aeabi_f2d>
   1354a:	4604      	mov	r4, r0
   1354c:	460d      	mov	r5, r1
   1354e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13552:	4618      	mov	r0, r3
   13554:	f004 fe5a 	bl	1820c <__aeabi_i2f>
   13558:	4603      	mov	r3, r0
   1355a:	4618      	mov	r0, r3
   1355c:	f04f 0100 	mov.w	r1, #0
   13560:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13564:	f004 ff5a 	bl	1841c <__aeabi_fdiv>
   13568:	4603      	mov	r3, r0
   1356a:	4618      	mov	r0, r3
   1356c:	f004 fa0e 	bl	1798c <__aeabi_f2d>
   13570:	4602      	mov	r2, r0
   13572:	460b      	mov	r3, r1
   13574:	f04f 0000 	mov.w	r0, #0
   13578:	f04f 0100 	mov.w	r1, #0
   1357c:	f004 f8a6 	bl	176cc <__aeabi_dsub>
   13580:	4602      	mov	r2, r0
   13582:	460b      	mov	r3, r1
   13584:	4620      	mov	r0, r4
   13586:	4629      	mov	r1, r5
   13588:	f004 f8a2 	bl	176d0 <__adddf3>
   1358c:	4602      	mov	r2, r0
   1358e:	460b      	mov	r3, r1
   13590:	4610      	mov	r0, r2
   13592:	4619      	mov	r1, r3
   13594:	f004 fd30 	bl	17ff8 <__aeabi_d2f>
   13598:	4602      	mov	r2, r0
   1359a:	f240 4324 	movw	r3, #1060	; 0x424
   1359e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135a2:	601a      	str	r2, [r3, #0]
   135a4:	f240 4324 	movw	r3, #1060	; 0x424
   135a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135ac:	681b      	ldr	r3, [r3, #0]
   135ae:	4618      	mov	r0, r3
   135b0:	f04f 0100 	mov.w	r1, #0
   135b4:	f2c4 312f 	movt	r1, #17199	; 0x432f
   135b8:	f005 f82e 	bl	18618 <__aeabi_fcmpge>
   135bc:	4603      	mov	r3, r0
   135be:	2b00      	cmp	r3, #0
   135c0:	d005      	beq.n	135ce <auto_nav+0x1176>
   135c2:	f240 4324 	movw	r3, #1060	; 0x424
   135c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135ca:	681a      	ldr	r2, [r3, #0]
   135cc:	e003      	b.n	135d6 <auto_nav+0x117e>
   135ce:	f04f 0200 	mov.w	r2, #0
   135d2:	f2c4 322f 	movt	r2, #17199	; 0x432f
   135d6:	f240 4324 	movw	r3, #1060	; 0x424
   135da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135de:	601a      	str	r2, [r3, #0]
   135e0:	f240 4324 	movw	r3, #1060	; 0x424
   135e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135e8:	681b      	ldr	r3, [r3, #0]
   135ea:	4618      	mov	r0, r3
   135ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   135f0:	f2c4 3189 	movt	r1, #17289	; 0x4389
   135f4:	f005 f806 	bl	18604 <__aeabi_fcmple>
   135f8:	4603      	mov	r3, r0
   135fa:	2b00      	cmp	r3, #0
   135fc:	d005      	beq.n	1360a <auto_nav+0x11b2>
   135fe:	f240 4324 	movw	r3, #1060	; 0x424
   13602:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13606:	681a      	ldr	r2, [r3, #0]
   13608:	e003      	b.n	13612 <auto_nav+0x11ba>
   1360a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1360e:	f2c4 3289 	movt	r2, #17289	; 0x4389
   13612:	f240 4324 	movw	r3, #1060	; 0x424
   13616:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1361a:	601a      	str	r2, [r3, #0]
   1361c:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   13620:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13624:	681a      	ldr	r2, [r3, #0]
   13626:	f24c 23a0 	movw	r3, #49824	; 0xc2a0
   1362a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1362e:	681b      	ldr	r3, [r3, #0]
   13630:	4610      	mov	r0, r2
   13632:	4619      	mov	r1, r3
   13634:	f004 fd34 	bl	180a0 <__aeabi_fsub>
   13638:	4603      	mov	r3, r0
   1363a:	4618      	mov	r0, r3
   1363c:	f004 f9a6 	bl	1798c <__aeabi_f2d>
   13640:	4604      	mov	r4, r0
   13642:	460d      	mov	r5, r1
   13644:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   13648:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1364c:	681a      	ldr	r2, [r3, #0]
   1364e:	f24c 239c 	movw	r3, #49820	; 0xc29c
   13652:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13656:	681b      	ldr	r3, [r3, #0]
   13658:	4610      	mov	r0, r2
   1365a:	4619      	mov	r1, r3
   1365c:	f004 fd20 	bl	180a0 <__aeabi_fsub>
   13660:	4603      	mov	r3, r0
   13662:	4618      	mov	r0, r3
   13664:	f004 f992 	bl	1798c <__aeabi_f2d>
   13668:	4602      	mov	r2, r0
   1366a:	460b      	mov	r3, r1
   1366c:	4620      	mov	r0, r4
   1366e:	4629      	mov	r1, r5
   13670:	f002 fa12 	bl	15a98 <pp_atan2>
   13674:	4602      	mov	r2, r0
   13676:	460b      	mov	r3, r1
   13678:	4610      	mov	r0, r2
   1367a:	4619      	mov	r1, r3
   1367c:	f004 fcbc 	bl	17ff8 <__aeabi_d2f>
   13680:	4603      	mov	r3, r0
   13682:	61fb      	str	r3, [r7, #28]
   13684:	69f8      	ldr	r0, [r7, #28]
   13686:	f004 f981 	bl	1798c <__aeabi_f2d>
   1368a:	4604      	mov	r4, r0
   1368c:	460d      	mov	r5, r1
   1368e:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
   13692:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13696:	681b      	ldr	r3, [r3, #0]
   13698:	4618      	mov	r0, r3
   1369a:	f04f 0100 	mov.w	r1, #0
   1369e:	f2cc 2148 	movt	r1, #49736	; 0xc248
   136a2:	f004 fe07 	bl	182b4 <__aeabi_fmul>
   136a6:	4603      	mov	r3, r0
   136a8:	4618      	mov	r0, r3
   136aa:	f004 f96f 	bl	1798c <__aeabi_f2d>
   136ae:	4602      	mov	r2, r0
   136b0:	460b      	mov	r3, r1
   136b2:	f04f 0000 	mov.w	r0, #0
   136b6:	f04f 0100 	mov.w	r1, #0
   136ba:	f2c4 0114 	movt	r1, #16404	; 0x4014
   136be:	f004 fae3 	bl	17c88 <__aeabi_ddiv>
   136c2:	4602      	mov	r2, r0
   136c4:	460b      	mov	r3, r1
   136c6:	4620      	mov	r0, r4
   136c8:	4629      	mov	r1, r5
   136ca:	f004 f801 	bl	176d0 <__adddf3>
   136ce:	4602      	mov	r2, r0
   136d0:	460b      	mov	r3, r1
   136d2:	4610      	mov	r0, r2
   136d4:	4619      	mov	r1, r3
   136d6:	f004 fc8f 	bl	17ff8 <__aeabi_d2f>
   136da:	4603      	mov	r3, r0
   136dc:	61bb      	str	r3, [r7, #24]
   136de:	f24c 239c 	movw	r3, #49820	; 0xc29c
   136e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136e6:	681b      	ldr	r3, [r3, #0]
   136e8:	4618      	mov	r0, r3
   136ea:	f004 f94f 	bl	1798c <__aeabi_f2d>
   136ee:	4604      	mov	r4, r0
   136f0:	460d      	mov	r5, r1
   136f2:	69b8      	ldr	r0, [r7, #24]
   136f4:	f004 f94a 	bl	1798c <__aeabi_f2d>
   136f8:	4602      	mov	r2, r0
   136fa:	460b      	mov	r3, r1
   136fc:	4610      	mov	r0, r2
   136fe:	4619      	mov	r1, r3
   13700:	a3b1      	add	r3, pc, #708	; (adr r3, 139c8 <auto_nav+0x1570>)
   13702:	e9d3 2300 	ldrd	r2, r3, [r3]
   13706:	f003 ffe3 	bl	176d0 <__adddf3>
   1370a:	4602      	mov	r2, r0
   1370c:	460b      	mov	r3, r1
   1370e:	4610      	mov	r0, r2
   13710:	4619      	mov	r1, r3
   13712:	f002 fa81 	bl	15c18 <pp_sin>
   13716:	4602      	mov	r2, r0
   13718:	460b      	mov	r3, r1
   1371a:	4610      	mov	r0, r2
   1371c:	4619      	mov	r1, r3
   1371e:	f04f 0200 	mov.w	r2, #0
   13722:	f04f 0300 	mov.w	r3, #0
   13726:	f2c4 0349 	movt	r3, #16457	; 0x4049
   1372a:	f004 f983 	bl	17a34 <__aeabi_dmul>
   1372e:	4602      	mov	r2, r0
   13730:	460b      	mov	r3, r1
   13732:	4620      	mov	r0, r4
   13734:	4629      	mov	r1, r5
   13736:	f003 ffcb 	bl	176d0 <__adddf3>
   1373a:	4602      	mov	r2, r0
   1373c:	460b      	mov	r3, r1
   1373e:	4610      	mov	r0, r2
   13740:	4619      	mov	r1, r3
   13742:	f004 fc59 	bl	17ff8 <__aeabi_d2f>
   13746:	4606      	mov	r6, r0
   13748:	f24c 23a0 	movw	r3, #49824	; 0xc2a0
   1374c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13750:	681b      	ldr	r3, [r3, #0]
   13752:	4618      	mov	r0, r3
   13754:	f004 f91a 	bl	1798c <__aeabi_f2d>
   13758:	4604      	mov	r4, r0
   1375a:	460d      	mov	r5, r1
   1375c:	69b8      	ldr	r0, [r7, #24]
   1375e:	f004 f915 	bl	1798c <__aeabi_f2d>
   13762:	4602      	mov	r2, r0
   13764:	460b      	mov	r3, r1
   13766:	4610      	mov	r0, r2
   13768:	4619      	mov	r1, r3
   1376a:	f002 fa55 	bl	15c18 <pp_sin>
   1376e:	4602      	mov	r2, r0
   13770:	460b      	mov	r3, r1
   13772:	4610      	mov	r0, r2
   13774:	4619      	mov	r1, r3
   13776:	f04f 0200 	mov.w	r2, #0
   1377a:	f04f 0300 	mov.w	r3, #0
   1377e:	f2c4 0349 	movt	r3, #16457	; 0x4049
   13782:	f004 f957 	bl	17a34 <__aeabi_dmul>
   13786:	4602      	mov	r2, r0
   13788:	460b      	mov	r3, r1
   1378a:	4620      	mov	r0, r4
   1378c:	4629      	mov	r1, r5
   1378e:	f003 ff9f 	bl	176d0 <__adddf3>
   13792:	4602      	mov	r2, r0
   13794:	460b      	mov	r3, r1
   13796:	4610      	mov	r0, r2
   13798:	4619      	mov	r1, r3
   1379a:	f004 fc2d 	bl	17ff8 <__aeabi_d2f>
   1379e:	4603      	mov	r3, r0
   137a0:	4630      	mov	r0, r6
   137a2:	4619      	mov	r1, r3
   137a4:	f001 f81c 	bl	147e0 <fly_to_xy>
   137a8:	69b8      	ldr	r0, [r7, #24]
   137aa:	f004 f8ef 	bl	1798c <__aeabi_f2d>
   137ae:	4602      	mov	r2, r0
   137b0:	460b      	mov	r3, r1
   137b2:	a185      	add	r1, pc, #532	; (adr r1, 139c8 <auto_nav+0x1570>)
   137b4:	e9d1 0100 	ldrd	r0, r1, [r1]
   137b8:	f003 ff88 	bl	176cc <__aeabi_dsub>
   137bc:	4602      	mov	r2, r0
   137be:	460b      	mov	r3, r1
   137c0:	4610      	mov	r0, r2
   137c2:	4619      	mov	r1, r3
   137c4:	a382      	add	r3, pc, #520	; (adr r3, 139d0 <auto_nav+0x1578>)
   137c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   137ca:	f004 fa5d 	bl	17c88 <__aeabi_ddiv>
   137ce:	4602      	mov	r2, r0
   137d0:	460b      	mov	r3, r1
   137d2:	4610      	mov	r0, r2
   137d4:	4619      	mov	r1, r3
   137d6:	f04f 0200 	mov.w	r2, #0
   137da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   137de:	f2c4 0366 	movt	r3, #16486	; 0x4066
   137e2:	f004 f927 	bl	17a34 <__aeabi_dmul>
   137e6:	4602      	mov	r2, r0
   137e8:	460b      	mov	r3, r1
   137ea:	4610      	mov	r0, r2
   137ec:	4619      	mov	r1, r3
   137ee:	f004 fc03 	bl	17ff8 <__aeabi_d2f>
   137f2:	4602      	mov	r2, r0
   137f4:	f24c 236c 	movw	r3, #49772	; 0xc26c
   137f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137fc:	601a      	str	r2, [r3, #0]
   137fe:	e012      	b.n	13826 <auto_nav+0x13ce>
   13800:	f24c 236c 	movw	r3, #49772	; 0xc26c
   13804:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13808:	681b      	ldr	r3, [r3, #0]
   1380a:	4618      	mov	r0, r3
   1380c:	f04f 0100 	mov.w	r1, #0
   13810:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13814:	f004 fc46 	bl	180a4 <__addsf3>
   13818:	4603      	mov	r3, r0
   1381a:	461a      	mov	r2, r3
   1381c:	f24c 236c 	movw	r3, #49772	; 0xc26c
   13820:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13824:	601a      	str	r2, [r3, #0]
   13826:	f24c 236c 	movw	r3, #49772	; 0xc26c
   1382a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1382e:	681b      	ldr	r3, [r3, #0]
   13830:	4618      	mov	r0, r3
   13832:	f04f 0100 	mov.w	r1, #0
   13836:	f004 fedb 	bl	185f0 <__aeabi_fcmplt>
   1383a:	4603      	mov	r3, r0
   1383c:	2b00      	cmp	r3, #0
   1383e:	d1df      	bne.n	13800 <auto_nav+0x13a8>
   13840:	e012      	b.n	13868 <auto_nav+0x1410>
   13842:	f24c 236c 	movw	r3, #49772	; 0xc26c
   13846:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1384a:	681b      	ldr	r3, [r3, #0]
   1384c:	4618      	mov	r0, r3
   1384e:	f04f 0100 	mov.w	r1, #0
   13852:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13856:	f004 fc23 	bl	180a0 <__aeabi_fsub>
   1385a:	4603      	mov	r3, r0
   1385c:	461a      	mov	r2, r3
   1385e:	f24c 236c 	movw	r3, #49772	; 0xc26c
   13862:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13866:	601a      	str	r2, [r3, #0]
   13868:	f24c 236c 	movw	r3, #49772	; 0xc26c
   1386c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13870:	681b      	ldr	r3, [r3, #0]
   13872:	4618      	mov	r0, r3
   13874:	f04f 0100 	mov.w	r1, #0
   13878:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1387c:	f004 fecc 	bl	18618 <__aeabi_fcmpge>
   13880:	4603      	mov	r3, r0
   13882:	2b00      	cmp	r3, #0
   13884:	d1dd      	bne.n	13842 <auto_nav+0x13ea>
        return;
   13886:	f000 beb9 	b.w	145fc <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   1388a:	f24c 2350 	movw	r3, #49744	; 0xc250
   1388e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13892:	781b      	ldrb	r3, [r3, #0]
   13894:	2b01      	cmp	r3, #1
   13896:	f040 86b1 	bne.w	145fc <auto_nav+0x21a4>
    {
        nav_stage = 1;
   1389a:	f24c 2350 	movw	r3, #49744	; 0xc250
   1389e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138a2:	2201      	movs	r2, #1
   138a4:	701a      	strb	r2, [r3, #0]
        NextBlock()
   138a6:	f24c 2351 	movw	r3, #49745	; 0xc251
   138aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138ae:	781b      	ldrb	r3, [r3, #0]
   138b0:	3301      	adds	r3, #1
   138b2:	b2da      	uxtb	r2, r3
   138b4:	f24c 2351 	movw	r3, #49745	; 0xc251
   138b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138bc:	701a      	strb	r2, [r3, #0]
   138be:	f24c 2350 	movw	r3, #49744	; 0xc250
   138c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138c6:	2200      	movs	r2, #0
   138c8:	701a      	strb	r2, [r3, #0]
   138ca:	f24c 2366 	movw	r3, #49766	; 0xc266
   138ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138d2:	2200      	movs	r2, #0
   138d4:	801a      	strh	r2, [r3, #0]
   138d6:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   138da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138de:	681a      	ldr	r2, [r3, #0]
   138e0:	f24c 2354 	movw	r3, #49748	; 0xc254
   138e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138e8:	601a      	str	r2, [r3, #0]
   138ea:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   138ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138f2:	681a      	ldr	r2, [r3, #0]
   138f4:	f24c 2358 	movw	r3, #49752	; 0xc258
   138f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138fc:	601a      	str	r2, [r3, #0]
   138fe:	f24c 2364 	movw	r3, #49764	; 0xc264
   13902:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13906:	2200      	movs	r2, #0
   13908:	801a      	strh	r2, [r3, #0]
   1390a:	f24c 2368 	movw	r3, #49768	; 0xc268
   1390e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13912:	f04f 0200 	mov.w	r2, #0
   13916:	601a      	str	r2, [r3, #0]
   13918:	f000 be70 	b.w	145fc <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   1391c:	f24c 2351 	movw	r3, #49745	; 0xc251
   13920:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13924:	781b      	ldrb	r3, [r3, #0]
   13926:	2b04      	cmp	r3, #4
   13928:	f040 8202 	bne.w	13d30 <auto_nav+0x18d8>
{
    nav_block = 4;
   1392c:	f24c 2351 	movw	r3, #49745	; 0xc251
   13930:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13934:	2204      	movs	r2, #4
   13936:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13938:	f64b 63e0 	movw	r3, #48864	; 0xbee0
   1393c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13940:	781b      	ldrb	r3, [r3, #0]
   13942:	2b00      	cmp	r3, #0
   13944:	d007      	beq.n	13956 <auto_nav+0x14fe>
   13946:	f64b 63e0 	movw	r3, #48864	; 0xbee0
   1394a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1394e:	2200      	movs	r2, #0
   13950:	701a      	strb	r2, [r3, #0]
   13952:	2301      	movs	r3, #1
   13954:	e000      	b.n	13958 <auto_nav+0x1500>
   13956:	2300      	movs	r3, #0
   13958:	2b00      	cmp	r3, #0
   1395a:	d03d      	beq.n	139d8 <auto_nav+0x1580>
   1395c:	f24c 2351 	movw	r3, #49745	; 0xc251
   13960:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13964:	2205      	movs	r2, #5
   13966:	701a      	strb	r2, [r3, #0]
   13968:	f24c 2350 	movw	r3, #49744	; 0xc250
   1396c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13970:	2200      	movs	r2, #0
   13972:	701a      	strb	r2, [r3, #0]
   13974:	f24c 2366 	movw	r3, #49766	; 0xc266
   13978:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1397c:	2200      	movs	r2, #0
   1397e:	801a      	strh	r2, [r3, #0]
   13980:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   13984:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13988:	681a      	ldr	r2, [r3, #0]
   1398a:	f24c 2354 	movw	r3, #49748	; 0xc254
   1398e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13992:	601a      	str	r2, [r3, #0]
   13994:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   13998:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1399c:	681a      	ldr	r2, [r3, #0]
   1399e:	f24c 2358 	movw	r3, #49752	; 0xc258
   139a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139a6:	601a      	str	r2, [r3, #0]
   139a8:	f24c 2364 	movw	r3, #49764	; 0xc264
   139ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139b0:	2200      	movs	r2, #0
   139b2:	801a      	strh	r2, [r3, #0]
   139b4:	f24c 2368 	movw	r3, #49768	; 0xc268
   139b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139bc:	f04f 0200 	mov.w	r2, #0
   139c0:	601a      	str	r2, [r3, #0]
   139c2:	f000 be1b 	b.w	145fc <auto_nav+0x21a4>
   139c6:	bf00      	nop
   139c8:	54442d18 	.word	0x54442d18
   139cc:	3ff921fb 	.word	0x3ff921fb
   139d0:	54442d18 	.word	0x54442d18
   139d4:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   139d8:	f24c 2350 	movw	r3, #49744	; 0xc250
   139dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139e0:	781b      	ldrb	r3, [r3, #0]
   139e2:	2b00      	cmp	r3, #0
   139e4:	f040 815b 	bne.w	13c9e <auto_nav+0x1846>
    {
        nav_stage = 0;
   139e8:	f24c 2350 	movw	r3, #49744	; 0xc250
   139ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139f0:	2200      	movs	r2, #0
   139f2:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   139f4:	f64b 63df 	movw	r3, #48863	; 0xbedf
   139f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139fc:	2200      	movs	r2, #0
   139fe:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13a00:	f24c 237c 	movw	r3, #49788	; 0xc27c
   13a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a08:	f04f 0200 	mov.w	r2, #0
   13a0c:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13a0e:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   13a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a16:	2203      	movs	r2, #3
   13a18:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   13a1a:	f240 4328 	movw	r3, #1064	; 0x428
   13a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a22:	689a      	ldr	r2, [r3, #8]
   13a24:	f240 4324 	movw	r3, #1060	; 0x424
   13a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a2c:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13a2e:	f24c 2344 	movw	r3, #49732	; 0xc244
   13a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a36:	f04f 0200 	mov.w	r2, #0
   13a3a:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   13a3c:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   13a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a44:	681a      	ldr	r2, [r3, #0]
   13a46:	f240 4328 	movw	r3, #1064	; 0x428
   13a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a4e:	685b      	ldr	r3, [r3, #4]
   13a50:	4610      	mov	r0, r2
   13a52:	4619      	mov	r1, r3
   13a54:	f004 fb24 	bl	180a0 <__aeabi_fsub>
   13a58:	4603      	mov	r3, r0
   13a5a:	4618      	mov	r0, r3
   13a5c:	f003 ff96 	bl	1798c <__aeabi_f2d>
   13a60:	4604      	mov	r4, r0
   13a62:	460d      	mov	r5, r1
   13a64:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   13a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a6c:	681a      	ldr	r2, [r3, #0]
   13a6e:	f240 4328 	movw	r3, #1064	; 0x428
   13a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a76:	681b      	ldr	r3, [r3, #0]
   13a78:	4610      	mov	r0, r2
   13a7a:	4619      	mov	r1, r3
   13a7c:	f004 fb10 	bl	180a0 <__aeabi_fsub>
   13a80:	4603      	mov	r3, r0
   13a82:	4618      	mov	r0, r3
   13a84:	f003 ff82 	bl	1798c <__aeabi_f2d>
   13a88:	4602      	mov	r2, r0
   13a8a:	460b      	mov	r3, r1
   13a8c:	4620      	mov	r0, r4
   13a8e:	4629      	mov	r1, r5
   13a90:	f002 f802 	bl	15a98 <pp_atan2>
   13a94:	4602      	mov	r2, r0
   13a96:	460b      	mov	r3, r1
   13a98:	4610      	mov	r0, r2
   13a9a:	4619      	mov	r1, r3
   13a9c:	f004 faac 	bl	17ff8 <__aeabi_d2f>
   13aa0:	4603      	mov	r3, r0
   13aa2:	617b      	str	r3, [r7, #20]
   13aa4:	6978      	ldr	r0, [r7, #20]
   13aa6:	f003 ff71 	bl	1798c <__aeabi_f2d>
   13aaa:	4604      	mov	r4, r0
   13aac:	460d      	mov	r5, r1
   13aae:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
   13ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ab6:	681b      	ldr	r3, [r3, #0]
   13ab8:	4618      	mov	r0, r3
   13aba:	f04f 0100 	mov.w	r1, #0
   13abe:	f2cc 3116 	movt	r1, #49942	; 0xc316
   13ac2:	f004 fbf7 	bl	182b4 <__aeabi_fmul>
   13ac6:	4603      	mov	r3, r0
   13ac8:	4618      	mov	r0, r3
   13aca:	f003 ff5f 	bl	1798c <__aeabi_f2d>
   13ace:	4602      	mov	r2, r0
   13ad0:	460b      	mov	r3, r1
   13ad2:	f04f 0000 	mov.w	r0, #0
   13ad6:	f04f 0100 	mov.w	r1, #0
   13ada:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13ade:	f004 f8d3 	bl	17c88 <__aeabi_ddiv>
   13ae2:	4602      	mov	r2, r0
   13ae4:	460b      	mov	r3, r1
   13ae6:	4620      	mov	r0, r4
   13ae8:	4629      	mov	r1, r5
   13aea:	f003 fdf1 	bl	176d0 <__adddf3>
   13aee:	4602      	mov	r2, r0
   13af0:	460b      	mov	r3, r1
   13af2:	4610      	mov	r0, r2
   13af4:	4619      	mov	r1, r3
   13af6:	f004 fa7f 	bl	17ff8 <__aeabi_d2f>
   13afa:	4603      	mov	r3, r0
   13afc:	613b      	str	r3, [r7, #16]
   13afe:	f240 4328 	movw	r3, #1064	; 0x428
   13b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b06:	681b      	ldr	r3, [r3, #0]
   13b08:	4618      	mov	r0, r3
   13b0a:	f003 ff3f 	bl	1798c <__aeabi_f2d>
   13b0e:	4604      	mov	r4, r0
   13b10:	460d      	mov	r5, r1
   13b12:	6938      	ldr	r0, [r7, #16]
   13b14:	f003 ff3a 	bl	1798c <__aeabi_f2d>
   13b18:	4602      	mov	r2, r0
   13b1a:	460b      	mov	r3, r1
   13b1c:	4610      	mov	r0, r2
   13b1e:	4619      	mov	r1, r3
   13b20:	a3af      	add	r3, pc, #700	; (adr r3, 13de0 <auto_nav+0x1988>)
   13b22:	e9d3 2300 	ldrd	r2, r3, [r3]
   13b26:	f003 fdd3 	bl	176d0 <__adddf3>
   13b2a:	4602      	mov	r2, r0
   13b2c:	460b      	mov	r3, r1
   13b2e:	4610      	mov	r0, r2
   13b30:	4619      	mov	r1, r3
   13b32:	f002 f871 	bl	15c18 <pp_sin>
   13b36:	4602      	mov	r2, r0
   13b38:	460b      	mov	r3, r1
   13b3a:	4610      	mov	r0, r2
   13b3c:	4619      	mov	r1, r3
   13b3e:	a3aa      	add	r3, pc, #680	; (adr r3, 13de8 <auto_nav+0x1990>)
   13b40:	e9d3 2300 	ldrd	r2, r3, [r3]
   13b44:	f003 ff76 	bl	17a34 <__aeabi_dmul>
   13b48:	4602      	mov	r2, r0
   13b4a:	460b      	mov	r3, r1
   13b4c:	4620      	mov	r0, r4
   13b4e:	4629      	mov	r1, r5
   13b50:	f003 fdbe 	bl	176d0 <__adddf3>
   13b54:	4602      	mov	r2, r0
   13b56:	460b      	mov	r3, r1
   13b58:	4610      	mov	r0, r2
   13b5a:	4619      	mov	r1, r3
   13b5c:	f004 fa4c 	bl	17ff8 <__aeabi_d2f>
   13b60:	4606      	mov	r6, r0
   13b62:	f240 4328 	movw	r3, #1064	; 0x428
   13b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b6a:	685b      	ldr	r3, [r3, #4]
   13b6c:	4618      	mov	r0, r3
   13b6e:	f003 ff0d 	bl	1798c <__aeabi_f2d>
   13b72:	4604      	mov	r4, r0
   13b74:	460d      	mov	r5, r1
   13b76:	6938      	ldr	r0, [r7, #16]
   13b78:	f003 ff08 	bl	1798c <__aeabi_f2d>
   13b7c:	4602      	mov	r2, r0
   13b7e:	460b      	mov	r3, r1
   13b80:	4610      	mov	r0, r2
   13b82:	4619      	mov	r1, r3
   13b84:	f002 f848 	bl	15c18 <pp_sin>
   13b88:	4602      	mov	r2, r0
   13b8a:	460b      	mov	r3, r1
   13b8c:	4610      	mov	r0, r2
   13b8e:	4619      	mov	r1, r3
   13b90:	a395      	add	r3, pc, #596	; (adr r3, 13de8 <auto_nav+0x1990>)
   13b92:	e9d3 2300 	ldrd	r2, r3, [r3]
   13b96:	f003 ff4d 	bl	17a34 <__aeabi_dmul>
   13b9a:	4602      	mov	r2, r0
   13b9c:	460b      	mov	r3, r1
   13b9e:	4620      	mov	r0, r4
   13ba0:	4629      	mov	r1, r5
   13ba2:	f003 fd95 	bl	176d0 <__adddf3>
   13ba6:	4602      	mov	r2, r0
   13ba8:	460b      	mov	r3, r1
   13baa:	4610      	mov	r0, r2
   13bac:	4619      	mov	r1, r3
   13bae:	f004 fa23 	bl	17ff8 <__aeabi_d2f>
   13bb2:	4603      	mov	r3, r0
   13bb4:	4630      	mov	r0, r6
   13bb6:	4619      	mov	r1, r3
   13bb8:	f000 fe12 	bl	147e0 <fly_to_xy>
   13bbc:	6938      	ldr	r0, [r7, #16]
   13bbe:	f003 fee5 	bl	1798c <__aeabi_f2d>
   13bc2:	4602      	mov	r2, r0
   13bc4:	460b      	mov	r3, r1
   13bc6:	a186      	add	r1, pc, #536	; (adr r1, 13de0 <auto_nav+0x1988>)
   13bc8:	e9d1 0100 	ldrd	r0, r1, [r1]
   13bcc:	f003 fd7e 	bl	176cc <__aeabi_dsub>
   13bd0:	4602      	mov	r2, r0
   13bd2:	460b      	mov	r3, r1
   13bd4:	4610      	mov	r0, r2
   13bd6:	4619      	mov	r1, r3
   13bd8:	a385      	add	r3, pc, #532	; (adr r3, 13df0 <auto_nav+0x1998>)
   13bda:	e9d3 2300 	ldrd	r2, r3, [r3]
   13bde:	f004 f853 	bl	17c88 <__aeabi_ddiv>
   13be2:	4602      	mov	r2, r0
   13be4:	460b      	mov	r3, r1
   13be6:	4610      	mov	r0, r2
   13be8:	4619      	mov	r1, r3
   13bea:	f04f 0200 	mov.w	r2, #0
   13bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13bf2:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13bf6:	f003 ff1d 	bl	17a34 <__aeabi_dmul>
   13bfa:	4602      	mov	r2, r0
   13bfc:	460b      	mov	r3, r1
   13bfe:	4610      	mov	r0, r2
   13c00:	4619      	mov	r1, r3
   13c02:	f004 f9f9 	bl	17ff8 <__aeabi_d2f>
   13c06:	4602      	mov	r2, r0
   13c08:	f24c 236c 	movw	r3, #49772	; 0xc26c
   13c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c10:	601a      	str	r2, [r3, #0]
   13c12:	e012      	b.n	13c3a <auto_nav+0x17e2>
   13c14:	f24c 236c 	movw	r3, #49772	; 0xc26c
   13c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c1c:	681b      	ldr	r3, [r3, #0]
   13c1e:	4618      	mov	r0, r3
   13c20:	f04f 0100 	mov.w	r1, #0
   13c24:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13c28:	f004 fa3c 	bl	180a4 <__addsf3>
   13c2c:	4603      	mov	r3, r0
   13c2e:	461a      	mov	r2, r3
   13c30:	f24c 236c 	movw	r3, #49772	; 0xc26c
   13c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c38:	601a      	str	r2, [r3, #0]
   13c3a:	f24c 236c 	movw	r3, #49772	; 0xc26c
   13c3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c42:	681b      	ldr	r3, [r3, #0]
   13c44:	4618      	mov	r0, r3
   13c46:	f04f 0100 	mov.w	r1, #0
   13c4a:	f004 fcd1 	bl	185f0 <__aeabi_fcmplt>
   13c4e:	4603      	mov	r3, r0
   13c50:	2b00      	cmp	r3, #0
   13c52:	d1df      	bne.n	13c14 <auto_nav+0x17bc>
   13c54:	e012      	b.n	13c7c <auto_nav+0x1824>
   13c56:	f24c 236c 	movw	r3, #49772	; 0xc26c
   13c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c5e:	681b      	ldr	r3, [r3, #0]
   13c60:	4618      	mov	r0, r3
   13c62:	f04f 0100 	mov.w	r1, #0
   13c66:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13c6a:	f004 fa19 	bl	180a0 <__aeabi_fsub>
   13c6e:	4603      	mov	r3, r0
   13c70:	461a      	mov	r2, r3
   13c72:	f24c 236c 	movw	r3, #49772	; 0xc26c
   13c76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c7a:	601a      	str	r2, [r3, #0]
   13c7c:	f24c 236c 	movw	r3, #49772	; 0xc26c
   13c80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c84:	681b      	ldr	r3, [r3, #0]
   13c86:	4618      	mov	r0, r3
   13c88:	f04f 0100 	mov.w	r1, #0
   13c8c:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13c90:	f004 fcc2 	bl	18618 <__aeabi_fcmpge>
   13c94:	4603      	mov	r3, r0
   13c96:	2b00      	cmp	r3, #0
   13c98:	d1dd      	bne.n	13c56 <auto_nav+0x17fe>
        return;
   13c9a:	f000 bcaf 	b.w	145fc <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13c9e:	f24c 2350 	movw	r3, #49744	; 0xc250
   13ca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ca6:	781b      	ldrb	r3, [r3, #0]
   13ca8:	2b01      	cmp	r3, #1
   13caa:	f040 84a7 	bne.w	145fc <auto_nav+0x21a4>
    {
        nav_stage =1;
   13cae:	f24c 2350 	movw	r3, #49744	; 0xc250
   13cb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cb6:	2201      	movs	r2, #1
   13cb8:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13cba:	f24c 2351 	movw	r3, #49745	; 0xc251
   13cbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cc2:	781b      	ldrb	r3, [r3, #0]
   13cc4:	3301      	adds	r3, #1
   13cc6:	b2da      	uxtb	r2, r3
   13cc8:	f24c 2351 	movw	r3, #49745	; 0xc251
   13ccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cd0:	701a      	strb	r2, [r3, #0]
   13cd2:	f24c 2350 	movw	r3, #49744	; 0xc250
   13cd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cda:	2200      	movs	r2, #0
   13cdc:	701a      	strb	r2, [r3, #0]
   13cde:	f24c 2366 	movw	r3, #49766	; 0xc266
   13ce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ce6:	2200      	movs	r2, #0
   13ce8:	801a      	strh	r2, [r3, #0]
   13cea:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   13cee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cf2:	681a      	ldr	r2, [r3, #0]
   13cf4:	f24c 2354 	movw	r3, #49748	; 0xc254
   13cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cfc:	601a      	str	r2, [r3, #0]
   13cfe:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   13d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d06:	681a      	ldr	r2, [r3, #0]
   13d08:	f24c 2358 	movw	r3, #49752	; 0xc258
   13d0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d10:	601a      	str	r2, [r3, #0]
   13d12:	f24c 2364 	movw	r3, #49764	; 0xc264
   13d16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d1a:	2200      	movs	r2, #0
   13d1c:	801a      	strh	r2, [r3, #0]
   13d1e:	f24c 2368 	movw	r3, #49768	; 0xc268
   13d22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d26:	f04f 0200 	mov.w	r2, #0
   13d2a:	601a      	str	r2, [r3, #0]
   13d2c:	f000 bc66 	b.w	145fc <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13d30:	f24c 2351 	movw	r3, #49745	; 0xc251
   13d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d38:	781b      	ldrb	r3, [r3, #0]
   13d3a:	2b05      	cmp	r3, #5
   13d3c:	f040 845e 	bne.w	145fc <auto_nav+0x21a4>
{
    nav_block = 5;
   13d40:	f24c 2351 	movw	r3, #49745	; 0xc251
   13d44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d48:	2205      	movs	r2, #5
   13d4a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   13d4c:	f64b 63e0 	movw	r3, #48864	; 0xbee0
   13d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d54:	781b      	ldrb	r3, [r3, #0]
   13d56:	2b00      	cmp	r3, #0
   13d58:	d007      	beq.n	13d6a <auto_nav+0x1912>
   13d5a:	f64b 63e0 	movw	r3, #48864	; 0xbee0
   13d5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d62:	2200      	movs	r2, #0
   13d64:	701a      	strb	r2, [r3, #0]
   13d66:	2301      	movs	r3, #1
   13d68:	e000      	b.n	13d6c <auto_nav+0x1914>
   13d6a:	2300      	movs	r3, #0
   13d6c:	2b00      	cmp	r3, #0
   13d6e:	d043      	beq.n	13df8 <auto_nav+0x19a0>
   13d70:	f24c 2351 	movw	r3, #49745	; 0xc251
   13d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d78:	2201      	movs	r2, #1
   13d7a:	701a      	strb	r2, [r3, #0]
   13d7c:	f24c 2350 	movw	r3, #49744	; 0xc250
   13d80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d84:	2200      	movs	r2, #0
   13d86:	701a      	strb	r2, [r3, #0]
   13d88:	f24c 2366 	movw	r3, #49766	; 0xc266
   13d8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d90:	2200      	movs	r2, #0
   13d92:	801a      	strh	r2, [r3, #0]
   13d94:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   13d98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d9c:	681a      	ldr	r2, [r3, #0]
   13d9e:	f24c 2354 	movw	r3, #49748	; 0xc254
   13da2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13da6:	601a      	str	r2, [r3, #0]
   13da8:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   13dac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13db0:	681a      	ldr	r2, [r3, #0]
   13db2:	f24c 2358 	movw	r3, #49752	; 0xc258
   13db6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dba:	601a      	str	r2, [r3, #0]
   13dbc:	f24c 2364 	movw	r3, #49764	; 0xc264
   13dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dc4:	2200      	movs	r2, #0
   13dc6:	801a      	strh	r2, [r3, #0]
   13dc8:	f24c 2368 	movw	r3, #49768	; 0xc268
   13dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dd0:	f04f 0200 	mov.w	r2, #0
   13dd4:	601a      	str	r2, [r3, #0]
   13dd6:	f000 bc11 	b.w	145fc <auto_nav+0x21a4>
   13dda:	bf00      	nop
   13ddc:	f3af 8000 	nop.w
   13de0:	54442d18 	.word	0x54442d18
   13de4:	3ff921fb 	.word	0x3ff921fb
   13de8:	00000000 	.word	0x00000000
   13dec:	4062c000 	.word	0x4062c000
   13df0:	54442d18 	.word	0x54442d18
   13df4:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   13df8:	f24c 2350 	movw	r3, #49744	; 0xc250
   13dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e00:	781b      	ldrb	r3, [r3, #0]
   13e02:	2b00      	cmp	r3, #0
   13e04:	d133      	bne.n	13e6e <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   13e06:	f24c 2350 	movw	r3, #49744	; 0xc250
   13e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e0e:	2200      	movs	r2, #0
   13e10:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   13e12:	f24c 2350 	movw	r3, #49744	; 0xc250
   13e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e1a:	781b      	ldrb	r3, [r3, #0]
   13e1c:	3301      	adds	r3, #1
   13e1e:	b2da      	uxtb	r2, r3
   13e20:	f24c 2350 	movw	r3, #49744	; 0xc250
   13e24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e28:	701a      	strb	r2, [r3, #0]
   13e2a:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   13e2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e32:	681a      	ldr	r2, [r3, #0]
   13e34:	f24c 2354 	movw	r3, #49748	; 0xc254
   13e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e3c:	601a      	str	r2, [r3, #0]
   13e3e:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   13e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e46:	681a      	ldr	r2, [r3, #0]
   13e48:	f24c 2358 	movw	r3, #49752	; 0xc258
   13e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e50:	601a      	str	r2, [r3, #0]
   13e52:	f24c 2364 	movw	r3, #49764	; 0xc264
   13e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e5a:	2200      	movs	r2, #0
   13e5c:	801a      	strh	r2, [r3, #0]
   13e5e:	f24c 2368 	movw	r3, #49768	; 0xc268
   13e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e66:	f04f 0200 	mov.w	r2, #0
   13e6a:	601a      	str	r2, [r3, #0]
   13e6c:	e3c6      	b.n	145fc <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   13e6e:	f24c 2350 	movw	r3, #49744	; 0xc250
   13e72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e76:	781b      	ldrb	r3, [r3, #0]
   13e78:	2b01      	cmp	r3, #1
   13e7a:	f040 81b5 	bne.w	141e8 <auto_nav+0x1d90>
    {
        nav_stage =1;
   13e7e:	f24c 2350 	movw	r3, #49744	; 0xc250
   13e82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e86:	2201      	movs	r2, #1
   13e88:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13e8a:	f64b 63df 	movw	r3, #48863	; 0xbedf
   13e8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e92:	2200      	movs	r2, #0
   13e94:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13e96:	f24c 237c 	movw	r3, #49788	; 0xc27c
   13e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e9e:	f04f 0200 	mov.w	r2, #0
   13ea2:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13ea4:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   13ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eac:	2203      	movs	r2, #3
   13eae:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   13eb0:	f240 4328 	movw	r3, #1064	; 0x428
   13eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13eb8:	695a      	ldr	r2, [r3, #20]
   13eba:	f240 4324 	movw	r3, #1060	; 0x424
   13ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ec2:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13ec4:	f24c 2344 	movw	r3, #49732	; 0xc244
   13ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ecc:	f04f 0200 	mov.w	r2, #0
   13ed0:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   13ed2:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   13ed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eda:	681a      	ldr	r2, [r3, #0]
   13edc:	f240 4328 	movw	r3, #1064	; 0x428
   13ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ee4:	691b      	ldr	r3, [r3, #16]
   13ee6:	4610      	mov	r0, r2
   13ee8:	4619      	mov	r1, r3
   13eea:	f004 f8d9 	bl	180a0 <__aeabi_fsub>
   13eee:	4603      	mov	r3, r0
   13ef0:	4618      	mov	r0, r3
   13ef2:	f003 fd4b 	bl	1798c <__aeabi_f2d>
   13ef6:	4604      	mov	r4, r0
   13ef8:	460d      	mov	r5, r1
   13efa:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   13efe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f02:	681a      	ldr	r2, [r3, #0]
   13f04:	f240 4328 	movw	r3, #1064	; 0x428
   13f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f0c:	68db      	ldr	r3, [r3, #12]
   13f0e:	4610      	mov	r0, r2
   13f10:	4619      	mov	r1, r3
   13f12:	f004 f8c5 	bl	180a0 <__aeabi_fsub>
   13f16:	4603      	mov	r3, r0
   13f18:	4618      	mov	r0, r3
   13f1a:	f003 fd37 	bl	1798c <__aeabi_f2d>
   13f1e:	4602      	mov	r2, r0
   13f20:	460b      	mov	r3, r1
   13f22:	4620      	mov	r0, r4
   13f24:	4629      	mov	r1, r5
   13f26:	f001 fdb7 	bl	15a98 <pp_atan2>
   13f2a:	4602      	mov	r2, r0
   13f2c:	460b      	mov	r3, r1
   13f2e:	4610      	mov	r0, r2
   13f30:	4619      	mov	r1, r3
   13f32:	f004 f861 	bl	17ff8 <__aeabi_d2f>
   13f36:	4603      	mov	r3, r0
   13f38:	60fb      	str	r3, [r7, #12]
   13f3a:	68f8      	ldr	r0, [r7, #12]
   13f3c:	f003 fd26 	bl	1798c <__aeabi_f2d>
   13f40:	4604      	mov	r4, r0
   13f42:	460d      	mov	r5, r1
   13f44:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
   13f48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f4c:	681b      	ldr	r3, [r3, #0]
   13f4e:	4618      	mov	r0, r3
   13f50:	f04f 0100 	mov.w	r1, #0
   13f54:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   13f58:	f004 f9ac 	bl	182b4 <__aeabi_fmul>
   13f5c:	4603      	mov	r3, r0
   13f5e:	4618      	mov	r0, r3
   13f60:	f003 fd14 	bl	1798c <__aeabi_f2d>
   13f64:	4602      	mov	r2, r0
   13f66:	460b      	mov	r3, r1
   13f68:	f04f 0000 	mov.w	r0, #0
   13f6c:	f04f 0100 	mov.w	r1, #0
   13f70:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13f74:	f003 fe88 	bl	17c88 <__aeabi_ddiv>
   13f78:	4602      	mov	r2, r0
   13f7a:	460b      	mov	r3, r1
   13f7c:	4620      	mov	r0, r4
   13f7e:	4629      	mov	r1, r5
   13f80:	f003 fba6 	bl	176d0 <__adddf3>
   13f84:	4602      	mov	r2, r0
   13f86:	460b      	mov	r3, r1
   13f88:	4610      	mov	r0, r2
   13f8a:	4619      	mov	r1, r3
   13f8c:	f004 f834 	bl	17ff8 <__aeabi_d2f>
   13f90:	4603      	mov	r3, r0
   13f92:	60bb      	str	r3, [r7, #8]
   13f94:	f240 4328 	movw	r3, #1064	; 0x428
   13f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f9c:	68db      	ldr	r3, [r3, #12]
   13f9e:	4618      	mov	r0, r3
   13fa0:	f003 fcf4 	bl	1798c <__aeabi_f2d>
   13fa4:	4604      	mov	r4, r0
   13fa6:	460d      	mov	r5, r1
   13fa8:	68b8      	ldr	r0, [r7, #8]
   13faa:	f003 fcef 	bl	1798c <__aeabi_f2d>
   13fae:	4602      	mov	r2, r0
   13fb0:	460b      	mov	r3, r1
   13fb2:	4610      	mov	r0, r2
   13fb4:	4619      	mov	r1, r3
   13fb6:	a388      	add	r3, pc, #544	; (adr r3, 141d8 <auto_nav+0x1d80>)
   13fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   13fbc:	f003 fb88 	bl	176d0 <__adddf3>
   13fc0:	4602      	mov	r2, r0
   13fc2:	460b      	mov	r3, r1
   13fc4:	4610      	mov	r0, r2
   13fc6:	4619      	mov	r1, r3
   13fc8:	f001 fe26 	bl	15c18 <pp_sin>
   13fcc:	4602      	mov	r2, r0
   13fce:	460b      	mov	r3, r1
   13fd0:	4610      	mov	r0, r2
   13fd2:	4619      	mov	r1, r3
   13fd4:	f04f 0200 	mov.w	r2, #0
   13fd8:	f04f 0300 	mov.w	r3, #0
   13fdc:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13fe0:	f003 fd28 	bl	17a34 <__aeabi_dmul>
   13fe4:	4602      	mov	r2, r0
   13fe6:	460b      	mov	r3, r1
   13fe8:	4620      	mov	r0, r4
   13fea:	4629      	mov	r1, r5
   13fec:	f003 fb70 	bl	176d0 <__adddf3>
   13ff0:	4602      	mov	r2, r0
   13ff2:	460b      	mov	r3, r1
   13ff4:	4610      	mov	r0, r2
   13ff6:	4619      	mov	r1, r3
   13ff8:	f003 fffe 	bl	17ff8 <__aeabi_d2f>
   13ffc:	4606      	mov	r6, r0
   13ffe:	f240 4328 	movw	r3, #1064	; 0x428
   14002:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14006:	691b      	ldr	r3, [r3, #16]
   14008:	4618      	mov	r0, r3
   1400a:	f003 fcbf 	bl	1798c <__aeabi_f2d>
   1400e:	4604      	mov	r4, r0
   14010:	460d      	mov	r5, r1
   14012:	68b8      	ldr	r0, [r7, #8]
   14014:	f003 fcba 	bl	1798c <__aeabi_f2d>
   14018:	4602      	mov	r2, r0
   1401a:	460b      	mov	r3, r1
   1401c:	4610      	mov	r0, r2
   1401e:	4619      	mov	r1, r3
   14020:	f001 fdfa 	bl	15c18 <pp_sin>
   14024:	4602      	mov	r2, r0
   14026:	460b      	mov	r3, r1
   14028:	4610      	mov	r0, r2
   1402a:	4619      	mov	r1, r3
   1402c:	f04f 0200 	mov.w	r2, #0
   14030:	f04f 0300 	mov.w	r3, #0
   14034:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14038:	f003 fcfc 	bl	17a34 <__aeabi_dmul>
   1403c:	4602      	mov	r2, r0
   1403e:	460b      	mov	r3, r1
   14040:	4620      	mov	r0, r4
   14042:	4629      	mov	r1, r5
   14044:	f003 fb44 	bl	176d0 <__adddf3>
   14048:	4602      	mov	r2, r0
   1404a:	460b      	mov	r3, r1
   1404c:	4610      	mov	r0, r2
   1404e:	4619      	mov	r1, r3
   14050:	f003 ffd2 	bl	17ff8 <__aeabi_d2f>
   14054:	4603      	mov	r3, r0
   14056:	4630      	mov	r0, r6
   14058:	4619      	mov	r1, r3
   1405a:	f000 fbc1 	bl	147e0 <fly_to_xy>
   1405e:	68b8      	ldr	r0, [r7, #8]
   14060:	f003 fc94 	bl	1798c <__aeabi_f2d>
   14064:	4602      	mov	r2, r0
   14066:	460b      	mov	r3, r1
   14068:	a15b      	add	r1, pc, #364	; (adr r1, 141d8 <auto_nav+0x1d80>)
   1406a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1406e:	f003 fb2d 	bl	176cc <__aeabi_dsub>
   14072:	4602      	mov	r2, r0
   14074:	460b      	mov	r3, r1
   14076:	4610      	mov	r0, r2
   14078:	4619      	mov	r1, r3
   1407a:	a359      	add	r3, pc, #356	; (adr r3, 141e0 <auto_nav+0x1d88>)
   1407c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14080:	f003 fe02 	bl	17c88 <__aeabi_ddiv>
   14084:	4602      	mov	r2, r0
   14086:	460b      	mov	r3, r1
   14088:	4610      	mov	r0, r2
   1408a:	4619      	mov	r1, r3
   1408c:	f04f 0200 	mov.w	r2, #0
   14090:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   14094:	f2c4 0366 	movt	r3, #16486	; 0x4066
   14098:	f003 fccc 	bl	17a34 <__aeabi_dmul>
   1409c:	4602      	mov	r2, r0
   1409e:	460b      	mov	r3, r1
   140a0:	4610      	mov	r0, r2
   140a2:	4619      	mov	r1, r3
   140a4:	f003 ffa8 	bl	17ff8 <__aeabi_d2f>
   140a8:	4602      	mov	r2, r0
   140aa:	f24c 236c 	movw	r3, #49772	; 0xc26c
   140ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140b2:	601a      	str	r2, [r3, #0]
   140b4:	e012      	b.n	140dc <auto_nav+0x1c84>
   140b6:	f24c 236c 	movw	r3, #49772	; 0xc26c
   140ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140be:	681b      	ldr	r3, [r3, #0]
   140c0:	4618      	mov	r0, r3
   140c2:	f04f 0100 	mov.w	r1, #0
   140c6:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   140ca:	f003 ffeb 	bl	180a4 <__addsf3>
   140ce:	4603      	mov	r3, r0
   140d0:	461a      	mov	r2, r3
   140d2:	f24c 236c 	movw	r3, #49772	; 0xc26c
   140d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140da:	601a      	str	r2, [r3, #0]
   140dc:	f24c 236c 	movw	r3, #49772	; 0xc26c
   140e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140e4:	681b      	ldr	r3, [r3, #0]
   140e6:	4618      	mov	r0, r3
   140e8:	f04f 0100 	mov.w	r1, #0
   140ec:	f004 fa80 	bl	185f0 <__aeabi_fcmplt>
   140f0:	4603      	mov	r3, r0
   140f2:	2b00      	cmp	r3, #0
   140f4:	d1df      	bne.n	140b6 <auto_nav+0x1c5e>
   140f6:	e012      	b.n	1411e <auto_nav+0x1cc6>
   140f8:	f24c 236c 	movw	r3, #49772	; 0xc26c
   140fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14100:	681b      	ldr	r3, [r3, #0]
   14102:	4618      	mov	r0, r3
   14104:	f04f 0100 	mov.w	r1, #0
   14108:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1410c:	f003 ffc8 	bl	180a0 <__aeabi_fsub>
   14110:	4603      	mov	r3, r0
   14112:	461a      	mov	r2, r3
   14114:	f24c 236c 	movw	r3, #49772	; 0xc26c
   14118:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1411c:	601a      	str	r2, [r3, #0]
   1411e:	f24c 236c 	movw	r3, #49772	; 0xc26c
   14122:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14126:	681b      	ldr	r3, [r3, #0]
   14128:	4618      	mov	r0, r3
   1412a:	f04f 0100 	mov.w	r1, #0
   1412e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14132:	f004 fa71 	bl	18618 <__aeabi_fcmpge>
   14136:	4603      	mov	r3, r0
   14138:	2b00      	cmp	r3, #0
   1413a:	d1dd      	bne.n	140f8 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   1413c:	f24c 236c 	movw	r3, #49772	; 0xc26c
   14140:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14144:	681b      	ldr	r3, [r3, #0]
   14146:	4618      	mov	r0, r3
   14148:	f04f 0100 	mov.w	r1, #0
   1414c:	f004 fa6e 	bl	1862c <__aeabi_fcmpgt>
   14150:	4603      	mov	r3, r0
   14152:	2b00      	cmp	r3, #0
   14154:	d100      	bne.n	14158 <auto_nav+0x1d00>
        return;
   14156:	e251      	b.n	145fc <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14158:	f24c 236c 	movw	r3, #49772	; 0xc26c
   1415c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14160:	681b      	ldr	r3, [r3, #0]
   14162:	4618      	mov	r0, r3
   14164:	f04f 0100 	mov.w	r1, #0
   14168:	f2c4 1120 	movt	r1, #16672	; 0x4120
   1416c:	f004 fa40 	bl	185f0 <__aeabi_fcmplt>
   14170:	4603      	mov	r3, r0
   14172:	2b00      	cmp	r3, #0
   14174:	d100      	bne.n	14178 <auto_nav+0x1d20>
        return;
   14176:	e241      	b.n	145fc <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14178:	f24c 2350 	movw	r3, #49744	; 0xc250
   1417c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14180:	781b      	ldrb	r3, [r3, #0]
   14182:	3301      	adds	r3, #1
   14184:	b2da      	uxtb	r2, r3
   14186:	f24c 2350 	movw	r3, #49744	; 0xc250
   1418a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1418e:	701a      	strb	r2, [r3, #0]
   14190:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   14194:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14198:	681a      	ldr	r2, [r3, #0]
   1419a:	f24c 2354 	movw	r3, #49748	; 0xc254
   1419e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141a2:	601a      	str	r2, [r3, #0]
   141a4:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   141a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141ac:	681a      	ldr	r2, [r3, #0]
   141ae:	f24c 2358 	movw	r3, #49752	; 0xc258
   141b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141b6:	601a      	str	r2, [r3, #0]
   141b8:	f24c 2364 	movw	r3, #49764	; 0xc264
   141bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141c0:	2200      	movs	r2, #0
   141c2:	801a      	strh	r2, [r3, #0]
   141c4:	f24c 2368 	movw	r3, #49768	; 0xc268
   141c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141cc:	f04f 0200 	mov.w	r2, #0
   141d0:	601a      	str	r2, [r3, #0]
   141d2:	e213      	b.n	145fc <auto_nav+0x21a4>
   141d4:	f3af 8000 	nop.w
   141d8:	54442d18 	.word	0x54442d18
   141dc:	3ff921fb 	.word	0x3ff921fb
   141e0:	54442d18 	.word	0x54442d18
   141e4:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   141e8:	f24c 2350 	movw	r3, #49744	; 0xc250
   141ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141f0:	781b      	ldrb	r3, [r3, #0]
   141f2:	2b02      	cmp	r3, #2
   141f4:	f040 81ad 	bne.w	14552 <auto_nav+0x20fa>
    {
         nav_stage = 2;
   141f8:	f24c 2350 	movw	r3, #49744	; 0xc250
   141fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14200:	2202      	movs	r2, #2
   14202:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   14204:	f64b 63df 	movw	r3, #48863	; 0xbedf
   14208:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1420c:	2200      	movs	r2, #0
   1420e:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   14210:	f24c 237c 	movw	r3, #49788	; 0xc27c
   14214:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14218:	f04f 0200 	mov.w	r2, #0
   1421c:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1421e:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   14222:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14226:	2203      	movs	r2, #3
   14228:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   1422a:	f240 4328 	movw	r3, #1064	; 0x428
   1422e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   14234:	f240 4324 	movw	r3, #1060	; 0x424
   14238:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1423c:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   1423e:	f24c 2344 	movw	r3, #49732	; 0xc244
   14242:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14246:	f04f 0200 	mov.w	r2, #0
   1424a:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   1424c:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   14250:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14254:	681a      	ldr	r2, [r3, #0]
   14256:	f240 4328 	movw	r3, #1064	; 0x428
   1425a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1425e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14260:	4610      	mov	r0, r2
   14262:	4619      	mov	r1, r3
   14264:	f003 ff1c 	bl	180a0 <__aeabi_fsub>
   14268:	4603      	mov	r3, r0
   1426a:	4618      	mov	r0, r3
   1426c:	f003 fb8e 	bl	1798c <__aeabi_f2d>
   14270:	4604      	mov	r4, r0
   14272:	460d      	mov	r5, r1
   14274:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   14278:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1427c:	681a      	ldr	r2, [r3, #0]
   1427e:	f240 4328 	movw	r3, #1064	; 0x428
   14282:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14288:	4610      	mov	r0, r2
   1428a:	4619      	mov	r1, r3
   1428c:	f003 ff08 	bl	180a0 <__aeabi_fsub>
   14290:	4603      	mov	r3, r0
   14292:	4618      	mov	r0, r3
   14294:	f003 fb7a 	bl	1798c <__aeabi_f2d>
   14298:	4602      	mov	r2, r0
   1429a:	460b      	mov	r3, r1
   1429c:	4620      	mov	r0, r4
   1429e:	4629      	mov	r1, r5
   142a0:	f001 fbfa 	bl	15a98 <pp_atan2>
   142a4:	4602      	mov	r2, r0
   142a6:	460b      	mov	r3, r1
   142a8:	4610      	mov	r0, r2
   142aa:	4619      	mov	r1, r3
   142ac:	f003 fea4 	bl	17ff8 <__aeabi_d2f>
   142b0:	4603      	mov	r3, r0
   142b2:	607b      	str	r3, [r7, #4]
   142b4:	6878      	ldr	r0, [r7, #4]
   142b6:	f003 fb69 	bl	1798c <__aeabi_f2d>
   142ba:	4604      	mov	r4, r0
   142bc:	460d      	mov	r5, r1
   142be:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
   142c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142c6:	681b      	ldr	r3, [r3, #0]
   142c8:	4618      	mov	r0, r3
   142ca:	f04f 0100 	mov.w	r1, #0
   142ce:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   142d2:	f003 ffef 	bl	182b4 <__aeabi_fmul>
   142d6:	4603      	mov	r3, r0
   142d8:	4618      	mov	r0, r3
   142da:	f003 fb57 	bl	1798c <__aeabi_f2d>
   142de:	4602      	mov	r2, r0
   142e0:	460b      	mov	r3, r1
   142e2:	f04f 0000 	mov.w	r0, #0
   142e6:	f04f 0100 	mov.w	r1, #0
   142ea:	f2c4 0114 	movt	r1, #16404	; 0x4014
   142ee:	f003 fccb 	bl	17c88 <__aeabi_ddiv>
   142f2:	4602      	mov	r2, r0
   142f4:	460b      	mov	r3, r1
   142f6:	4620      	mov	r0, r4
   142f8:	4629      	mov	r1, r5
   142fa:	f003 f9e9 	bl	176d0 <__adddf3>
   142fe:	4602      	mov	r2, r0
   14300:	460b      	mov	r3, r1
   14302:	4610      	mov	r0, r2
   14304:	4619      	mov	r1, r3
   14306:	f003 fe77 	bl	17ff8 <__aeabi_d2f>
   1430a:	4603      	mov	r3, r0
   1430c:	603b      	str	r3, [r7, #0]
   1430e:	f240 4328 	movw	r3, #1064	; 0x428
   14312:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14318:	4618      	mov	r0, r3
   1431a:	f003 fb37 	bl	1798c <__aeabi_f2d>
   1431e:	4604      	mov	r4, r0
   14320:	460d      	mov	r5, r1
   14322:	6838      	ldr	r0, [r7, #0]
   14324:	f003 fb32 	bl	1798c <__aeabi_f2d>
   14328:	4602      	mov	r2, r0
   1432a:	460b      	mov	r3, r1
   1432c:	4610      	mov	r0, r2
   1432e:	4619      	mov	r1, r3
   14330:	a3b5      	add	r3, pc, #724	; (adr r3, 14608 <auto_nav+0x21b0>)
   14332:	e9d3 2300 	ldrd	r2, r3, [r3]
   14336:	f003 f9cb 	bl	176d0 <__adddf3>
   1433a:	4602      	mov	r2, r0
   1433c:	460b      	mov	r3, r1
   1433e:	4610      	mov	r0, r2
   14340:	4619      	mov	r1, r3
   14342:	f001 fc69 	bl	15c18 <pp_sin>
   14346:	4602      	mov	r2, r0
   14348:	460b      	mov	r3, r1
   1434a:	4610      	mov	r0, r2
   1434c:	4619      	mov	r1, r3
   1434e:	f04f 0200 	mov.w	r2, #0
   14352:	f04f 0300 	mov.w	r3, #0
   14356:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1435a:	f003 fb6b 	bl	17a34 <__aeabi_dmul>
   1435e:	4602      	mov	r2, r0
   14360:	460b      	mov	r3, r1
   14362:	4620      	mov	r0, r4
   14364:	4629      	mov	r1, r5
   14366:	f003 f9b3 	bl	176d0 <__adddf3>
   1436a:	4602      	mov	r2, r0
   1436c:	460b      	mov	r3, r1
   1436e:	4610      	mov	r0, r2
   14370:	4619      	mov	r1, r3
   14372:	f003 fe41 	bl	17ff8 <__aeabi_d2f>
   14376:	4606      	mov	r6, r0
   14378:	f240 4328 	movw	r3, #1064	; 0x428
   1437c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14382:	4618      	mov	r0, r3
   14384:	f003 fb02 	bl	1798c <__aeabi_f2d>
   14388:	4604      	mov	r4, r0
   1438a:	460d      	mov	r5, r1
   1438c:	6838      	ldr	r0, [r7, #0]
   1438e:	f003 fafd 	bl	1798c <__aeabi_f2d>
   14392:	4602      	mov	r2, r0
   14394:	460b      	mov	r3, r1
   14396:	4610      	mov	r0, r2
   14398:	4619      	mov	r1, r3
   1439a:	f001 fc3d 	bl	15c18 <pp_sin>
   1439e:	4602      	mov	r2, r0
   143a0:	460b      	mov	r3, r1
   143a2:	4610      	mov	r0, r2
   143a4:	4619      	mov	r1, r3
   143a6:	f04f 0200 	mov.w	r2, #0
   143aa:	f04f 0300 	mov.w	r3, #0
   143ae:	f2c4 0359 	movt	r3, #16473	; 0x4059
   143b2:	f003 fb3f 	bl	17a34 <__aeabi_dmul>
   143b6:	4602      	mov	r2, r0
   143b8:	460b      	mov	r3, r1
   143ba:	4620      	mov	r0, r4
   143bc:	4629      	mov	r1, r5
   143be:	f003 f987 	bl	176d0 <__adddf3>
   143c2:	4602      	mov	r2, r0
   143c4:	460b      	mov	r3, r1
   143c6:	4610      	mov	r0, r2
   143c8:	4619      	mov	r1, r3
   143ca:	f003 fe15 	bl	17ff8 <__aeabi_d2f>
   143ce:	4603      	mov	r3, r0
   143d0:	4630      	mov	r0, r6
   143d2:	4619      	mov	r1, r3
   143d4:	f000 fa04 	bl	147e0 <fly_to_xy>
   143d8:	6838      	ldr	r0, [r7, #0]
   143da:	f003 fad7 	bl	1798c <__aeabi_f2d>
   143de:	4602      	mov	r2, r0
   143e0:	460b      	mov	r3, r1
   143e2:	a189      	add	r1, pc, #548	; (adr r1, 14608 <auto_nav+0x21b0>)
   143e4:	e9d1 0100 	ldrd	r0, r1, [r1]
   143e8:	f003 f970 	bl	176cc <__aeabi_dsub>
   143ec:	4602      	mov	r2, r0
   143ee:	460b      	mov	r3, r1
   143f0:	4610      	mov	r0, r2
   143f2:	4619      	mov	r1, r3
   143f4:	a386      	add	r3, pc, #536	; (adr r3, 14610 <auto_nav+0x21b8>)
   143f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   143fa:	f003 fc45 	bl	17c88 <__aeabi_ddiv>
   143fe:	4602      	mov	r2, r0
   14400:	460b      	mov	r3, r1
   14402:	4610      	mov	r0, r2
   14404:	4619      	mov	r1, r3
   14406:	f04f 0200 	mov.w	r2, #0
   1440a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1440e:	f2c4 0366 	movt	r3, #16486	; 0x4066
   14412:	f003 fb0f 	bl	17a34 <__aeabi_dmul>
   14416:	4602      	mov	r2, r0
   14418:	460b      	mov	r3, r1
   1441a:	4610      	mov	r0, r2
   1441c:	4619      	mov	r1, r3
   1441e:	f003 fdeb 	bl	17ff8 <__aeabi_d2f>
   14422:	4602      	mov	r2, r0
   14424:	f24c 236c 	movw	r3, #49772	; 0xc26c
   14428:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1442c:	601a      	str	r2, [r3, #0]
   1442e:	e012      	b.n	14456 <auto_nav+0x1ffe>
   14430:	f24c 236c 	movw	r3, #49772	; 0xc26c
   14434:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14438:	681b      	ldr	r3, [r3, #0]
   1443a:	4618      	mov	r0, r3
   1443c:	f04f 0100 	mov.w	r1, #0
   14440:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14444:	f003 fe2e 	bl	180a4 <__addsf3>
   14448:	4603      	mov	r3, r0
   1444a:	461a      	mov	r2, r3
   1444c:	f24c 236c 	movw	r3, #49772	; 0xc26c
   14450:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14454:	601a      	str	r2, [r3, #0]
   14456:	f24c 236c 	movw	r3, #49772	; 0xc26c
   1445a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1445e:	681b      	ldr	r3, [r3, #0]
   14460:	4618      	mov	r0, r3
   14462:	f04f 0100 	mov.w	r1, #0
   14466:	f004 f8c3 	bl	185f0 <__aeabi_fcmplt>
   1446a:	4603      	mov	r3, r0
   1446c:	2b00      	cmp	r3, #0
   1446e:	d1df      	bne.n	14430 <auto_nav+0x1fd8>
   14470:	e012      	b.n	14498 <auto_nav+0x2040>
   14472:	f24c 236c 	movw	r3, #49772	; 0xc26c
   14476:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1447a:	681b      	ldr	r3, [r3, #0]
   1447c:	4618      	mov	r0, r3
   1447e:	f04f 0100 	mov.w	r1, #0
   14482:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14486:	f003 fe0b 	bl	180a0 <__aeabi_fsub>
   1448a:	4603      	mov	r3, r0
   1448c:	461a      	mov	r2, r3
   1448e:	f24c 236c 	movw	r3, #49772	; 0xc26c
   14492:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14496:	601a      	str	r2, [r3, #0]
   14498:	f24c 236c 	movw	r3, #49772	; 0xc26c
   1449c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144a0:	681b      	ldr	r3, [r3, #0]
   144a2:	4618      	mov	r0, r3
   144a4:	f04f 0100 	mov.w	r1, #0
   144a8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   144ac:	f004 f8b4 	bl	18618 <__aeabi_fcmpge>
   144b0:	4603      	mov	r3, r0
   144b2:	2b00      	cmp	r3, #0
   144b4:	d1dd      	bne.n	14472 <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   144b6:	f24c 236c 	movw	r3, #49772	; 0xc26c
   144ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144be:	681b      	ldr	r3, [r3, #0]
   144c0:	4618      	mov	r0, r3
   144c2:	f04f 0100 	mov.w	r1, #0
   144c6:	f2c4 3134 	movt	r1, #17204	; 0x4334
   144ca:	f004 f8af 	bl	1862c <__aeabi_fcmpgt>
   144ce:	4603      	mov	r3, r0
   144d0:	2b00      	cmp	r3, #0
   144d2:	d100      	bne.n	144d6 <auto_nav+0x207e>
          return;
   144d4:	e092      	b.n	145fc <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   144d6:	f24c 236c 	movw	r3, #49772	; 0xc26c
   144da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144de:	681b      	ldr	r3, [r3, #0]
   144e0:	4618      	mov	r0, r3
   144e2:	f04f 0100 	mov.w	r1, #0
   144e6:	f2c4 313e 	movt	r1, #17214	; 0x433e
   144ea:	f004 f881 	bl	185f0 <__aeabi_fcmplt>
   144ee:	4603      	mov	r3, r0
   144f0:	2b00      	cmp	r3, #0
   144f2:	d100      	bne.n	144f6 <auto_nav+0x209e>
          return;
   144f4:	e082      	b.n	145fc <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   144f6:	f24c 2350 	movw	r3, #49744	; 0xc250
   144fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144fe:	781b      	ldrb	r3, [r3, #0]
   14500:	3301      	adds	r3, #1
   14502:	b2da      	uxtb	r2, r3
   14504:	f24c 2350 	movw	r3, #49744	; 0xc250
   14508:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1450c:	701a      	strb	r2, [r3, #0]
   1450e:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   14512:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14516:	681a      	ldr	r2, [r3, #0]
   14518:	f24c 2354 	movw	r3, #49748	; 0xc254
   1451c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14520:	601a      	str	r2, [r3, #0]
   14522:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   14526:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1452a:	681a      	ldr	r2, [r3, #0]
   1452c:	f24c 2358 	movw	r3, #49752	; 0xc258
   14530:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14534:	601a      	str	r2, [r3, #0]
   14536:	f24c 2364 	movw	r3, #49764	; 0xc264
   1453a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1453e:	2200      	movs	r2, #0
   14540:	801a      	strh	r2, [r3, #0]
   14542:	f24c 2368 	movw	r3, #49768	; 0xc268
   14546:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1454a:	f04f 0200 	mov.w	r2, #0
   1454e:	601a      	str	r2, [r3, #0]
   14550:	e054      	b.n	145fc <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   14552:	f24c 2350 	movw	r3, #49744	; 0xc250
   14556:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1455a:	781b      	ldrb	r3, [r3, #0]
   1455c:	2b03      	cmp	r3, #3
   1455e:	d106      	bne.n	1456e <auto_nav+0x2116>
    {
	  nav_stage = 3;
   14560:	f24c 2350 	movw	r3, #49744	; 0xc250
   14564:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14568:	2203      	movs	r2, #3
   1456a:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   1456c:	e44b      	b.n	13e06 <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   1456e:	f24c 2350 	movw	r3, #49744	; 0xc250
   14572:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14576:	781b      	ldrb	r3, [r3, #0]
   14578:	2b04      	cmp	r3, #4
   1457a:	d13f      	bne.n	145fc <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   1457c:	f24c 2350 	movw	r3, #49744	; 0xc250
   14580:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14584:	2204      	movs	r2, #4
   14586:	701a      	strb	r2, [r3, #0]
        NextBlock()
   14588:	f24c 2351 	movw	r3, #49745	; 0xc251
   1458c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14590:	781b      	ldrb	r3, [r3, #0]
   14592:	3301      	adds	r3, #1
   14594:	b2da      	uxtb	r2, r3
   14596:	f24c 2351 	movw	r3, #49745	; 0xc251
   1459a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1459e:	701a      	strb	r2, [r3, #0]
   145a0:	f24c 2350 	movw	r3, #49744	; 0xc250
   145a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145a8:	2200      	movs	r2, #0
   145aa:	701a      	strb	r2, [r3, #0]
   145ac:	f24c 2366 	movw	r3, #49766	; 0xc266
   145b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145b4:	2200      	movs	r2, #0
   145b6:	801a      	strh	r2, [r3, #0]
   145b8:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   145bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145c0:	681a      	ldr	r2, [r3, #0]
   145c2:	f24c 2354 	movw	r3, #49748	; 0xc254
   145c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145ca:	601a      	str	r2, [r3, #0]
   145cc:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   145d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145d4:	681a      	ldr	r2, [r3, #0]
   145d6:	f24c 2358 	movw	r3, #49752	; 0xc258
   145da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145de:	601a      	str	r2, [r3, #0]
   145e0:	f24c 2364 	movw	r3, #49764	; 0xc264
   145e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145e8:	2200      	movs	r2, #0
   145ea:	801a      	strh	r2, [r3, #0]
   145ec:	f24c 2368 	movw	r3, #49768	; 0xc268
   145f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145f4:	f04f 0200 	mov.w	r2, #0
   145f8:	601a      	str	r2, [r3, #0]
   145fa:	bf00      	nop
    else { }
}
else { }

//#endif
}
   145fc:	372c      	adds	r7, #44	; 0x2c
   145fe:	46bd      	mov	sp, r7
   14600:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14602:	bf00      	nop
   14604:	f3af 8000 	nop.w
   14608:	54442d18 	.word	0x54442d18
   1460c:	3ff921fb 	.word	0x3ff921fb
   14610:	54442d18 	.word	0x54442d18
   14614:	400921fb 	.word	0x400921fb

00014618 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   14618:	b590      	push	{r4, r7, lr}
   1461a:	b087      	sub	sp, #28
   1461c:	af00      	add	r7, sp, #0
   1461e:	4603      	mov	r3, r0
   14620:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   14622:	79f9      	ldrb	r1, [r7, #7]
   14624:	f240 4228 	movw	r2, #1064	; 0x428
   14628:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1462c:	460b      	mov	r3, r1
   1462e:	005b      	lsls	r3, r3, #1
   14630:	440b      	add	r3, r1
   14632:	009b      	lsls	r3, r3, #2
   14634:	4413      	add	r3, r2
   14636:	681a      	ldr	r2, [r3, #0]
   14638:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   1463c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14640:	681b      	ldr	r3, [r3, #0]
   14642:	4610      	mov	r0, r2
   14644:	4619      	mov	r1, r3
   14646:	f003 fd2b 	bl	180a0 <__aeabi_fsub>
   1464a:	4603      	mov	r3, r0
   1464c:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   1464e:	79f9      	ldrb	r1, [r7, #7]
   14650:	f240 4228 	movw	r2, #1064	; 0x428
   14654:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14658:	460b      	mov	r3, r1
   1465a:	005b      	lsls	r3, r3, #1
   1465c:	440b      	add	r3, r1
   1465e:	009b      	lsls	r3, r3, #2
   14660:	4413      	add	r3, r2
   14662:	3304      	adds	r3, #4
   14664:	681a      	ldr	r2, [r3, #0]
   14666:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   1466a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1466e:	681b      	ldr	r3, [r3, #0]
   14670:	4610      	mov	r0, r2
   14672:	4619      	mov	r1, r3
   14674:	f003 fd14 	bl	180a0 <__aeabi_fsub>
   14678:	4603      	mov	r3, r0
   1467a:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   1467c:	6978      	ldr	r0, [r7, #20]
   1467e:	6979      	ldr	r1, [r7, #20]
   14680:	f003 fe18 	bl	182b4 <__aeabi_fmul>
   14684:	4603      	mov	r3, r0
   14686:	461c      	mov	r4, r3
   14688:	6938      	ldr	r0, [r7, #16]
   1468a:	6939      	ldr	r1, [r7, #16]
   1468c:	f003 fe12 	bl	182b4 <__aeabi_fmul>
   14690:	4603      	mov	r3, r0
   14692:	4620      	mov	r0, r4
   14694:	4619      	mov	r1, r3
   14696:	f003 fd05 	bl	180a4 <__addsf3>
   1469a:	4603      	mov	r3, r0
   1469c:	461a      	mov	r2, r3
   1469e:	f24c 2384 	movw	r3, #49796	; 0xc284
   146a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146a6:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   146a8:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
   146ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146b0:	681b      	ldr	r3, [r3, #0]
   146b2:	4618      	mov	r0, r3
   146b4:	f04f 0100 	mov.w	r1, #0
   146b8:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   146bc:	f003 fdfa 	bl	182b4 <__aeabi_fmul>
   146c0:	4603      	mov	r3, r0
   146c2:	461a      	mov	r2, r3
   146c4:	f24c 2390 	movw	r3, #49808	; 0xc290
   146c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146cc:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   146ce:	f24c 2390 	movw	r3, #49808	; 0xc290
   146d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146d6:	681b      	ldr	r3, [r3, #0]
   146d8:	4618      	mov	r0, r3
   146da:	f04f 0100 	mov.w	r1, #0
   146de:	f2c4 2120 	movt	r1, #16928	; 0x4220
   146e2:	f003 ff85 	bl	185f0 <__aeabi_fcmplt>
   146e6:	4603      	mov	r3, r0
   146e8:	2b00      	cmp	r3, #0
   146ea:	d004      	beq.n	146f6 <approaching+0xde>
   146ec:	f04f 0200 	mov.w	r2, #0
   146f0:	f2c4 2220 	movt	r2, #16928	; 0x4220
   146f4:	e004      	b.n	14700 <approaching+0xe8>
   146f6:	f24c 2390 	movw	r3, #49808	; 0xc290
   146fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146fe:	681a      	ldr	r2, [r3, #0]
   14700:	f24c 2390 	movw	r3, #49808	; 0xc290
   14704:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14708:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   1470a:	f24c 2390 	movw	r3, #49808	; 0xc290
   1470e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14712:	681a      	ldr	r2, [r3, #0]
   14714:	f24c 2390 	movw	r3, #49808	; 0xc290
   14718:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1471c:	681b      	ldr	r3, [r3, #0]
   1471e:	4610      	mov	r0, r2
   14720:	4619      	mov	r1, r3
   14722:	f003 fdc7 	bl	182b4 <__aeabi_fmul>
   14726:	4603      	mov	r3, r0
   14728:	461a      	mov	r2, r3
   1472a:	f24c 2384 	movw	r3, #49796	; 0xc284
   1472e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14732:	681b      	ldr	r3, [r3, #0]
   14734:	4610      	mov	r0, r2
   14736:	4619      	mov	r1, r3
   14738:	f003 ff78 	bl	1862c <__aeabi_fcmpgt>
   1473c:	4603      	mov	r3, r0
   1473e:	2b00      	cmp	r3, #0
   14740:	d001      	beq.n	14746 <approaching+0x12e>
    return TRUE;
   14742:	2301      	movs	r3, #1
   14744:	e048      	b.n	147d8 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   14746:	79f9      	ldrb	r1, [r7, #7]
   14748:	f240 4228 	movw	r2, #1064	; 0x428
   1474c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14750:	460b      	mov	r3, r1
   14752:	005b      	lsls	r3, r3, #1
   14754:	440b      	add	r3, r1
   14756:	009b      	lsls	r3, r3, #2
   14758:	4413      	add	r3, r2
   1475a:	681a      	ldr	r2, [r3, #0]
   1475c:	f24c 2354 	movw	r3, #49748	; 0xc254
   14760:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14764:	681b      	ldr	r3, [r3, #0]
   14766:	4610      	mov	r0, r2
   14768:	4619      	mov	r1, r3
   1476a:	f003 fc99 	bl	180a0 <__aeabi_fsub>
   1476e:	4603      	mov	r3, r0
   14770:	4618      	mov	r0, r3
   14772:	6979      	ldr	r1, [r7, #20]
   14774:	f003 fd9e 	bl	182b4 <__aeabi_fmul>
   14778:	4603      	mov	r3, r0
   1477a:	461c      	mov	r4, r3
   1477c:	79f9      	ldrb	r1, [r7, #7]
   1477e:	f240 4228 	movw	r2, #1064	; 0x428
   14782:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14786:	460b      	mov	r3, r1
   14788:	005b      	lsls	r3, r3, #1
   1478a:	440b      	add	r3, r1
   1478c:	009b      	lsls	r3, r3, #2
   1478e:	4413      	add	r3, r2
   14790:	3304      	adds	r3, #4
   14792:	681a      	ldr	r2, [r3, #0]
   14794:	f24c 2358 	movw	r3, #49752	; 0xc258
   14798:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1479c:	681b      	ldr	r3, [r3, #0]
   1479e:	4610      	mov	r0, r2
   147a0:	4619      	mov	r1, r3
   147a2:	f003 fc7d 	bl	180a0 <__aeabi_fsub>
   147a6:	4603      	mov	r3, r0
   147a8:	4618      	mov	r0, r3
   147aa:	6939      	ldr	r1, [r7, #16]
   147ac:	f003 fd82 	bl	182b4 <__aeabi_fmul>
   147b0:	4603      	mov	r3, r0
   147b2:	4620      	mov	r0, r4
   147b4:	4619      	mov	r1, r3
   147b6:	f003 fc75 	bl	180a4 <__addsf3>
   147ba:	4603      	mov	r3, r0
   147bc:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   147be:	2301      	movs	r3, #1
   147c0:	461c      	mov	r4, r3
   147c2:	68f8      	ldr	r0, [r7, #12]
   147c4:	f04f 0100 	mov.w	r1, #0
   147c8:	f003 ff12 	bl	185f0 <__aeabi_fcmplt>
   147cc:	4603      	mov	r3, r0
   147ce:	2b00      	cmp	r3, #0
   147d0:	d101      	bne.n	147d6 <approaching+0x1be>
   147d2:	2300      	movs	r3, #0
   147d4:	461c      	mov	r4, r3
   147d6:	b2e3      	uxtb	r3, r4
}
   147d8:	4618      	mov	r0, r3
   147da:	371c      	adds	r7, #28
   147dc:	46bd      	mov	sp, r7
   147de:	bd90      	pop	{r4, r7, pc}

000147e0 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   147e0:	b5b0      	push	{r4, r5, r7, lr}
   147e2:	b082      	sub	sp, #8
   147e4:	af00      	add	r7, sp, #0
   147e6:	6078      	str	r0, [r7, #4]
   147e8:	6039      	str	r1, [r7, #0]
  desired_x = x;
   147ea:	f24c 2370 	movw	r3, #49776	; 0xc270
   147ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147f2:	687a      	ldr	r2, [r7, #4]
   147f4:	601a      	str	r2, [r3, #0]
  desired_y = y;
   147f6:	f24c 2374 	movw	r3, #49780	; 0xc274
   147fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147fe:	683a      	ldr	r2, [r7, #0]
   14800:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   14802:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   14806:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1480a:	681b      	ldr	r3, [r3, #0]
   1480c:	6838      	ldr	r0, [r7, #0]
   1480e:	4619      	mov	r1, r3
   14810:	f003 fc46 	bl	180a0 <__aeabi_fsub>
   14814:	4603      	mov	r3, r0
   14816:	4618      	mov	r0, r3
   14818:	f003 f8b8 	bl	1798c <__aeabi_f2d>
   1481c:	4604      	mov	r4, r0
   1481e:	460d      	mov	r5, r1
   14820:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   14824:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14828:	681b      	ldr	r3, [r3, #0]
   1482a:	6878      	ldr	r0, [r7, #4]
   1482c:	4619      	mov	r1, r3
   1482e:	f003 fc37 	bl	180a0 <__aeabi_fsub>
   14832:	4603      	mov	r3, r0
   14834:	4618      	mov	r0, r3
   14836:	f003 f8a9 	bl	1798c <__aeabi_f2d>
   1483a:	4602      	mov	r2, r0
   1483c:	460b      	mov	r3, r1
   1483e:	4620      	mov	r0, r4
   14840:	4629      	mov	r1, r5
   14842:	f001 f929 	bl	15a98 <pp_atan2>
   14846:	4602      	mov	r2, r0
   14848:	460b      	mov	r3, r1
   1484a:	a10b      	add	r1, pc, #44	; (adr r1, 14878 <fly_to_xy+0x98>)
   1484c:	e9d1 0100 	ldrd	r0, r1, [r1]
   14850:	f002 ff3c 	bl	176cc <__aeabi_dsub>
   14854:	4602      	mov	r2, r0
   14856:	460b      	mov	r3, r1
   14858:	4610      	mov	r0, r2
   1485a:	4619      	mov	r1, r3
   1485c:	f003 fbcc 	bl	17ff8 <__aeabi_d2f>
   14860:	4602      	mov	r2, r0
   14862:	f24c 233c 	movw	r3, #49724	; 0xc23c
   14866:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1486a:	601a      	str	r2, [r3, #0]
}
   1486c:	3708      	adds	r7, #8
   1486e:	46bd      	mov	sp, r7
   14870:	bdb0      	pop	{r4, r5, r7, pc}
   14872:	bf00      	nop
   14874:	f3af 8000 	nop.w
   14878:	54442d18 	.word	0x54442d18
   1487c:	3ff921fb 	.word	0x3ff921fb

00014880 <fly_to>:

static void fly_to(uint8_t wp) { 
   14880:	b580      	push	{r7, lr}
   14882:	b082      	sub	sp, #8
   14884:	af00      	add	r7, sp, #0
   14886:	4603      	mov	r3, r0
   14888:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   1488a:	79f9      	ldrb	r1, [r7, #7]
   1488c:	f240 4228 	movw	r2, #1064	; 0x428
   14890:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14894:	460b      	mov	r3, r1
   14896:	005b      	lsls	r3, r3, #1
   14898:	440b      	add	r3, r1
   1489a:	009b      	lsls	r3, r3, #2
   1489c:	4413      	add	r3, r2
   1489e:	6818      	ldr	r0, [r3, #0]
   148a0:	79f9      	ldrb	r1, [r7, #7]
   148a2:	f240 4228 	movw	r2, #1064	; 0x428
   148a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   148aa:	460b      	mov	r3, r1
   148ac:	005b      	lsls	r3, r3, #1
   148ae:	440b      	add	r3, r1
   148b0:	009b      	lsls	r3, r3, #2
   148b2:	4413      	add	r3, r2
   148b4:	3304      	adds	r3, #4
   148b6:	681b      	ldr	r3, [r3, #0]
   148b8:	4619      	mov	r1, r3
   148ba:	f7ff ff91 	bl	147e0 <fly_to_xy>
}
   148be:	3708      	adds	r7, #8
   148c0:	46bd      	mov	sp, r7
   148c2:	bd80      	pop	{r7, pc}

000148c4 <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   148c4:	b5b0      	push	{r4, r5, r7, lr}
   148c6:	b088      	sub	sp, #32
   148c8:	af00      	add	r7, sp, #0
   148ca:	4602      	mov	r2, r0
   148cc:	460b      	mov	r3, r1
   148ce:	71fa      	strb	r2, [r7, #7]
   148d0:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   148d2:	79f9      	ldrb	r1, [r7, #7]
   148d4:	f240 4228 	movw	r2, #1064	; 0x428
   148d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   148dc:	460b      	mov	r3, r1
   148de:	005b      	lsls	r3, r3, #1
   148e0:	440b      	add	r3, r1
   148e2:	009b      	lsls	r3, r3, #2
   148e4:	4413      	add	r3, r2
   148e6:	681b      	ldr	r3, [r3, #0]
   148e8:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   148ea:	79f9      	ldrb	r1, [r7, #7]
   148ec:	f240 4228 	movw	r2, #1064	; 0x428
   148f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   148f4:	460b      	mov	r3, r1
   148f6:	005b      	lsls	r3, r3, #1
   148f8:	440b      	add	r3, r1
   148fa:	009b      	lsls	r3, r3, #2
   148fc:	4413      	add	r3, r2
   148fe:	3304      	adds	r3, #4
   14900:	681b      	ldr	r3, [r3, #0]
   14902:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   14904:	79b9      	ldrb	r1, [r7, #6]
   14906:	f240 4228 	movw	r2, #1064	; 0x428
   1490a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1490e:	460b      	mov	r3, r1
   14910:	005b      	lsls	r3, r3, #1
   14912:	440b      	add	r3, r1
   14914:	009b      	lsls	r3, r3, #2
   14916:	4413      	add	r3, r2
   14918:	681b      	ldr	r3, [r3, #0]
   1491a:	4618      	mov	r0, r3
   1491c:	69f9      	ldr	r1, [r7, #28]
   1491e:	f003 fbbf 	bl	180a0 <__aeabi_fsub>
   14922:	4603      	mov	r3, r0
   14924:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   14926:	79b9      	ldrb	r1, [r7, #6]
   14928:	f240 4228 	movw	r2, #1064	; 0x428
   1492c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14930:	460b      	mov	r3, r1
   14932:	005b      	lsls	r3, r3, #1
   14934:	440b      	add	r3, r1
   14936:	009b      	lsls	r3, r3, #2
   14938:	4413      	add	r3, r2
   1493a:	3304      	adds	r3, #4
   1493c:	681b      	ldr	r3, [r3, #0]
   1493e:	4618      	mov	r0, r3
   14940:	69b9      	ldr	r1, [r7, #24]
   14942:	f003 fbad 	bl	180a0 <__aeabi_fsub>
   14946:	4603      	mov	r3, r0
   14948:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   1494a:	6978      	ldr	r0, [r7, #20]
   1494c:	6979      	ldr	r1, [r7, #20]
   1494e:	f003 fcb1 	bl	182b4 <__aeabi_fmul>
   14952:	4603      	mov	r3, r0
   14954:	461c      	mov	r4, r3
   14956:	6938      	ldr	r0, [r7, #16]
   14958:	6939      	ldr	r1, [r7, #16]
   1495a:	f003 fcab 	bl	182b4 <__aeabi_fmul>
   1495e:	4603      	mov	r3, r0
   14960:	4620      	mov	r0, r4
   14962:	4619      	mov	r1, r3
   14964:	f003 fb9e 	bl	180a4 <__addsf3>
   14968:	4603      	mov	r3, r0
   1496a:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   1496c:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   14970:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14974:	681b      	ldr	r3, [r3, #0]
   14976:	4618      	mov	r0, r3
   14978:	69f9      	ldr	r1, [r7, #28]
   1497a:	f003 fb91 	bl	180a0 <__aeabi_fsub>
   1497e:	4603      	mov	r3, r0
   14980:	4618      	mov	r0, r3
   14982:	6979      	ldr	r1, [r7, #20]
   14984:	f003 fc96 	bl	182b4 <__aeabi_fmul>
   14988:	4603      	mov	r3, r0
   1498a:	461c      	mov	r4, r3
   1498c:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   14990:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14994:	681b      	ldr	r3, [r3, #0]
   14996:	4618      	mov	r0, r3
   14998:	69b9      	ldr	r1, [r7, #24]
   1499a:	f003 fb81 	bl	180a0 <__aeabi_fsub>
   1499e:	4603      	mov	r3, r0
   149a0:	4618      	mov	r0, r3
   149a2:	6939      	ldr	r1, [r7, #16]
   149a4:	f003 fc86 	bl	182b4 <__aeabi_fmul>
   149a8:	4603      	mov	r3, r0
   149aa:	4620      	mov	r0, r4
   149ac:	4619      	mov	r1, r3
   149ae:	f003 fb79 	bl	180a4 <__addsf3>
   149b2:	4603      	mov	r3, r0
   149b4:	4618      	mov	r0, r3
   149b6:	68f9      	ldr	r1, [r7, #12]
   149b8:	f003 fd30 	bl	1841c <__aeabi_fdiv>
   149bc:	4603      	mov	r3, r0
   149be:	461a      	mov	r2, r3
   149c0:	f24c 2394 	movw	r3, #49812	; 0xc294
   149c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149c8:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   149ca:	f24c 2394 	movw	r3, #49812	; 0xc294
   149ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149d2:	681b      	ldr	r3, [r3, #0]
   149d4:	4618      	mov	r0, r3
   149d6:	f04f 0100 	mov.w	r1, #0
   149da:	f003 fe1d 	bl	18618 <__aeabi_fcmpge>
   149de:	4603      	mov	r3, r0
   149e0:	2b00      	cmp	r3, #0
   149e2:	d005      	beq.n	149f0 <route_to+0x12c>
   149e4:	f24c 2394 	movw	r3, #49812	; 0xc294
   149e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149ec:	681a      	ldr	r2, [r3, #0]
   149ee:	e001      	b.n	149f4 <route_to+0x130>
   149f0:	f04f 0200 	mov.w	r2, #0
   149f4:	f24c 2394 	movw	r3, #49812	; 0xc294
   149f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149fc:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   149fe:	68f8      	ldr	r0, [r7, #12]
   14a00:	f002 ffc4 	bl	1798c <__aeabi_f2d>
   14a04:	4602      	mov	r2, r0
   14a06:	460b      	mov	r3, r1
   14a08:	4610      	mov	r0, r2
   14a0a:	4619      	mov	r1, r3
   14a0c:	f001 f9f4 	bl	15df8 <pp_sqrt>
   14a10:	4602      	mov	r2, r0
   14a12:	460b      	mov	r3, r1
   14a14:	4610      	mov	r0, r2
   14a16:	4619      	mov	r1, r3
   14a18:	f003 faee 	bl	17ff8 <__aeabi_d2f>
   14a1c:	4602      	mov	r2, r0
   14a1e:	f24c 2398 	movw	r3, #49816	; 0xc298
   14a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a26:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14a28:	f24c 2394 	movw	r3, #49812	; 0xc294
   14a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a30:	681b      	ldr	r3, [r3, #0]
   14a32:	4618      	mov	r0, r3
   14a34:	f002 ffaa 	bl	1798c <__aeabi_f2d>
   14a38:	4604      	mov	r4, r0
   14a3a:	460d      	mov	r5, r1
   14a3c:	f24c 2390 	movw	r3, #49808	; 0xc290
   14a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a44:	681a      	ldr	r2, [r3, #0]
   14a46:	f24c 2398 	movw	r3, #49816	; 0xc298
   14a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a4e:	681b      	ldr	r3, [r3, #0]
   14a50:	4610      	mov	r0, r2
   14a52:	4619      	mov	r1, r3
   14a54:	f003 fce2 	bl	1841c <__aeabi_fdiv>
   14a58:	4603      	mov	r3, r0
   14a5a:	4618      	mov	r0, r3
   14a5c:	f04f 0100 	mov.w	r1, #0
   14a60:	f003 fdda 	bl	18618 <__aeabi_fcmpge>
   14a64:	4603      	mov	r3, r0
   14a66:	2b00      	cmp	r3, #0
   14a68:	d014      	beq.n	14a94 <route_to+0x1d0>
   14a6a:	f24c 2390 	movw	r3, #49808	; 0xc290
   14a6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a72:	681a      	ldr	r2, [r3, #0]
   14a74:	f24c 2398 	movw	r3, #49816	; 0xc298
   14a78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a7c:	681b      	ldr	r3, [r3, #0]
   14a7e:	4610      	mov	r0, r2
   14a80:	4619      	mov	r1, r3
   14a82:	f003 fccb 	bl	1841c <__aeabi_fdiv>
   14a86:	4603      	mov	r3, r0
   14a88:	4618      	mov	r0, r3
   14a8a:	f002 ff7f 	bl	1798c <__aeabi_f2d>
   14a8e:	4602      	mov	r2, r0
   14a90:	460b      	mov	r3, r1
   14a92:	e003      	b.n	14a9c <route_to+0x1d8>
   14a94:	f04f 0200 	mov.w	r2, #0
   14a98:	f04f 0300 	mov.w	r3, #0
   14a9c:	4620      	mov	r0, r4
   14a9e:	4629      	mov	r1, r5
   14aa0:	f002 fe16 	bl	176d0 <__adddf3>
   14aa4:	4602      	mov	r2, r0
   14aa6:	460b      	mov	r3, r1
   14aa8:	4610      	mov	r0, r2
   14aaa:	4619      	mov	r1, r3
   14aac:	f003 faa4 	bl	17ff8 <__aeabi_d2f>
   14ab0:	4602      	mov	r2, r0
   14ab2:	f24c 2394 	movw	r3, #49812	; 0xc294
   14ab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14aba:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   14abc:	f24c 2394 	movw	r3, #49812	; 0xc294
   14ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ac4:	681b      	ldr	r3, [r3, #0]
   14ac6:	4618      	mov	r0, r3
   14ac8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14acc:	f003 fda4 	bl	18618 <__aeabi_fcmpge>
   14ad0:	4603      	mov	r3, r0
   14ad2:	2b00      	cmp	r3, #0
   14ad4:	d002      	beq.n	14adc <route_to+0x218>
   14ad6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   14ada:	e004      	b.n	14ae6 <route_to+0x222>
   14adc:	f24c 2394 	movw	r3, #49812	; 0xc294
   14ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ae4:	681a      	ldr	r2, [r3, #0]
   14ae6:	f24c 2394 	movw	r3, #49812	; 0xc294
   14aea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14aee:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   14af0:	f24c 2394 	movw	r3, #49812	; 0xc294
   14af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14af8:	681b      	ldr	r3, [r3, #0]
   14afa:	4618      	mov	r0, r3
   14afc:	6979      	ldr	r1, [r7, #20]
   14afe:	f003 fbd9 	bl	182b4 <__aeabi_fmul>
   14b02:	4603      	mov	r3, r0
   14b04:	4618      	mov	r0, r3
   14b06:	69f9      	ldr	r1, [r7, #28]
   14b08:	f003 facc 	bl	180a4 <__addsf3>
   14b0c:	4603      	mov	r3, r0
   14b0e:	461c      	mov	r4, r3
   14b10:	f24c 2394 	movw	r3, #49812	; 0xc294
   14b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b18:	681b      	ldr	r3, [r3, #0]
   14b1a:	4618      	mov	r0, r3
   14b1c:	6939      	ldr	r1, [r7, #16]
   14b1e:	f003 fbc9 	bl	182b4 <__aeabi_fmul>
   14b22:	4603      	mov	r3, r0
   14b24:	4618      	mov	r0, r3
   14b26:	69b9      	ldr	r1, [r7, #24]
   14b28:	f003 fabc 	bl	180a4 <__addsf3>
   14b2c:	4603      	mov	r3, r0
   14b2e:	4620      	mov	r0, r4
   14b30:	4619      	mov	r1, r3
   14b32:	f7ff fe55 	bl	147e0 <fly_to_xy>
}
   14b36:	3720      	adds	r7, #32
   14b38:	46bd      	mov	sp, r7
   14b3a:	bdb0      	pop	{r4, r5, r7, pc}

00014b3c <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   14b3c:	b590      	push	{r4, r7, lr}
   14b3e:	b083      	sub	sp, #12
   14b40:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   14b42:	f240 4328 	movw	r3, #1064	; 0x428
   14b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b4a:	681a      	ldr	r2, [r3, #0]
   14b4c:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   14b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b54:	681b      	ldr	r3, [r3, #0]
   14b56:	4610      	mov	r0, r2
   14b58:	4619      	mov	r1, r3
   14b5a:	f003 faa1 	bl	180a0 <__aeabi_fsub>
   14b5e:	4603      	mov	r3, r0
   14b60:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   14b62:	f240 4328 	movw	r3, #1064	; 0x428
   14b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b6a:	685a      	ldr	r2, [r3, #4]
   14b6c:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   14b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b74:	681b      	ldr	r3, [r3, #0]
   14b76:	4610      	mov	r0, r2
   14b78:	4619      	mov	r1, r3
   14b7a:	f003 fa91 	bl	180a0 <__aeabi_fsub>
   14b7e:	4603      	mov	r3, r0
   14b80:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   14b82:	6878      	ldr	r0, [r7, #4]
   14b84:	6879      	ldr	r1, [r7, #4]
   14b86:	f003 fb95 	bl	182b4 <__aeabi_fmul>
   14b8a:	4603      	mov	r3, r0
   14b8c:	461c      	mov	r4, r3
   14b8e:	6838      	ldr	r0, [r7, #0]
   14b90:	6839      	ldr	r1, [r7, #0]
   14b92:	f003 fb8f 	bl	182b4 <__aeabi_fmul>
   14b96:	4603      	mov	r3, r0
   14b98:	4620      	mov	r0, r4
   14b9a:	4619      	mov	r1, r3
   14b9c:	f003 fa82 	bl	180a4 <__addsf3>
   14ba0:	4603      	mov	r3, r0
   14ba2:	461a      	mov	r2, r3
   14ba4:	f24c 2388 	movw	r3, #49800	; 0xc288
   14ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bac:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   14bae:	f24c 2388 	movw	r3, #49800	; 0xc288
   14bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bb6:	681b      	ldr	r3, [r3, #0]
   14bb8:	2201      	movs	r2, #1
   14bba:	4614      	mov	r4, r2
   14bbc:	4618      	mov	r0, r3
   14bbe:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   14bc2:	f6c4 0174 	movt	r1, #18548	; 0x4874
   14bc6:	f003 fd31 	bl	1862c <__aeabi_fcmpgt>
   14bca:	4603      	mov	r3, r0
   14bcc:	2b00      	cmp	r3, #0
   14bce:	d101      	bne.n	14bd4 <compute_dist2_to_home+0x98>
   14bd0:	2300      	movs	r3, #0
   14bd2:	461c      	mov	r4, r3
   14bd4:	b2e3      	uxtb	r3, r4
   14bd6:	461a      	mov	r2, r3
   14bd8:	f24c 238c 	movw	r3, #49804	; 0xc28c
   14bdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14be0:	701a      	strb	r2, [r3, #0]
}
   14be2:	370c      	adds	r7, #12
   14be4:	46bd      	mov	sp, r7
   14be6:	bd90      	pop	{r4, r7, pc}

00014be8 <nav_home>:

void nav_home(void) {
   14be8:	b580      	push	{r7, lr}
   14bea:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   14bec:	f24c 237c 	movw	r3, #49788	; 0xc27c
   14bf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bf4:	f04f 0200 	mov.w	r2, #0
   14bf8:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14bfa:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   14bfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c02:	2203      	movs	r2, #3
   14c04:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   14c06:	f240 4324 	movw	r3, #1060	; 0x424
   14c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c0e:	f04f 0200 	mov.w	r2, #0
   14c12:	f2c4 322f 	movt	r2, #17199	; 0x432f
   14c16:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14c18:	f7ff ff90 	bl	14b3c <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   14c1c:	f24c 2388 	movw	r3, #49800	; 0xc288
   14c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c24:	681a      	ldr	r2, [r3, #0]
   14c26:	f24c 2384 	movw	r3, #49796	; 0xc284
   14c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c2e:	601a      	str	r2, [r3, #0]
}
   14c30:	bd80      	pop	{r7, pc}
   14c32:	bf00      	nop

00014c34 <nav_update>:

void nav_update(void) {
   14c34:	b580      	push	{r7, lr}
   14c36:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14c38:	f7ff ff80 	bl	14b3c <compute_dist2_to_home>

  auto_nav();
   14c3c:	f7fd fc0c 	bl	12458 <auto_nav>
}
   14c40:	bd80      	pop	{r7, pc}
   14c42:	bf00      	nop

00014c44 <nav_init>:


void nav_init(void) {
   14c44:	b480      	push	{r7}
   14c46:	af00      	add	r7, sp, #0
  nav_block = 0;
   14c48:	f24c 2351 	movw	r3, #49745	; 0xc251
   14c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c50:	2200      	movs	r2, #0
   14c52:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   14c54:	f24c 2350 	movw	r3, #49744	; 0xc250
   14c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c5c:	2200      	movs	r2, #0
   14c5e:	701a      	strb	r2, [r3, #0]
}
   14c60:	46bd      	mov	sp, r7
   14c62:	f85d 7b04 	ldr.w	r7, [sp], #4
   14c66:	4770      	bx	lr

00014c68 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14c68:	b480      	push	{r7}
   14c6a:	b083      	sub	sp, #12
   14c6c:	af00      	add	r7, sp, #0
   14c6e:	4603      	mov	r3, r0
   14c70:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   14c72:	f242 030a 	movw	r3, #8202	; 0x200a
   14c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c7a:	781b      	ldrb	r3, [r3, #0]
   14c7c:	b2db      	uxtb	r3, r3
   14c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14c82:	2b00      	cmp	r3, #0
   14c84:	d028      	beq.n	14cd8 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   14c86:	f24c 23a5 	movw	r3, #49829	; 0xc2a5
   14c8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c8e:	781b      	ldrb	r3, [r3, #0]
   14c90:	b2db      	uxtb	r3, r3
   14c92:	461a      	mov	r2, r3
   14c94:	f24c 23a4 	movw	r3, #49828	; 0xc2a4
   14c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c9c:	781b      	ldrb	r3, [r3, #0]
   14c9e:	3301      	adds	r3, #1
   14ca0:	429a      	cmp	r2, r3
   14ca2:	d100      	bne.n	14ca6 <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14ca4:	e02c      	b.n	14d00 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   14ca6:	f24c 23a4 	movw	r3, #49828	; 0xc2a4
   14caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cae:	781b      	ldrb	r3, [r3, #0]
   14cb0:	461a      	mov	r2, r3
   14cb2:	f24c 23a8 	movw	r3, #49832	; 0xc2a8
   14cb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cba:	79f9      	ldrb	r1, [r7, #7]
   14cbc:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   14cbe:	f24c 23a4 	movw	r3, #49828	; 0xc2a4
   14cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cc6:	781b      	ldrb	r3, [r3, #0]
   14cc8:	3301      	adds	r3, #1
   14cca:	b2da      	uxtb	r2, r3
   14ccc:	f24c 23a4 	movw	r3, #49828	; 0xc2a4
   14cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cd4:	701a      	strb	r2, [r3, #0]
   14cd6:	e013      	b.n	14d00 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   14cd8:	f242 030c 	movw	r3, #8204	; 0x200c
   14cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ce0:	79fa      	ldrb	r2, [r7, #7]
   14ce2:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   14ce4:	f242 030a 	movw	r3, #8202	; 0x200a
   14ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cec:	f242 020a 	movw	r2, #8202	; 0x200a
   14cf0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14cf4:	7812      	ldrb	r2, [r2, #0]
   14cf6:	b2d2      	uxtb	r2, r2
   14cf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14cfc:	b2d2      	uxtb	r2, r2
   14cfe:	701a      	strb	r2, [r3, #0]
  }
}
   14d00:	370c      	adds	r7, #12
   14d02:	46bd      	mov	sp, r7
   14d04:	f85d 7b04 	ldr.w	r7, [sp], #4
   14d08:	4770      	bx	lr
   14d0a:	bf00      	nop

00014d0c <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   14d0c:	b480      	push	{r7}
   14d0e:	b083      	sub	sp, #12
   14d10:	af00      	add	r7, sp, #0
   14d12:	4603      	mov	r3, r0
   14d14:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   14d16:	f242 039a 	movw	r3, #8346	; 0x209a
   14d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d1e:	781b      	ldrb	r3, [r3, #0]
   14d20:	b2db      	uxtb	r3, r3
   14d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14d26:	2b00      	cmp	r3, #0
   14d28:	d028      	beq.n	14d7c <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   14d2a:	f24c 33a9 	movw	r3, #50089	; 0xc3a9
   14d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d32:	781b      	ldrb	r3, [r3, #0]
   14d34:	b2db      	uxtb	r3, r3
   14d36:	461a      	mov	r2, r3
   14d38:	f24c 33a8 	movw	r3, #50088	; 0xc3a8
   14d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d40:	781b      	ldrb	r3, [r3, #0]
   14d42:	3301      	adds	r3, #1
   14d44:	429a      	cmp	r2, r3
   14d46:	d100      	bne.n	14d4a <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14d48:	e02c      	b.n	14da4 <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   14d4a:	f24c 33a8 	movw	r3, #50088	; 0xc3a8
   14d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d52:	781b      	ldrb	r3, [r3, #0]
   14d54:	461a      	mov	r2, r3
   14d56:	f24c 33ac 	movw	r3, #50092	; 0xc3ac
   14d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d5e:	79f9      	ldrb	r1, [r7, #7]
   14d60:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   14d62:	f24c 33a8 	movw	r3, #50088	; 0xc3a8
   14d66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d6a:	781b      	ldrb	r3, [r3, #0]
   14d6c:	3301      	adds	r3, #1
   14d6e:	b2da      	uxtb	r2, r3
   14d70:	f24c 33a8 	movw	r3, #50088	; 0xc3a8
   14d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d78:	701a      	strb	r2, [r3, #0]
   14d7a:	e013      	b.n	14da4 <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   14d7c:	f242 039c 	movw	r3, #8348	; 0x209c
   14d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d84:	79fa      	ldrb	r2, [r7, #7]
   14d86:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   14d88:	f242 039a 	movw	r3, #8346	; 0x209a
   14d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d90:	f242 029a 	movw	r2, #8346	; 0x209a
   14d94:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14d98:	7812      	ldrb	r2, [r2, #0]
   14d9a:	b2d2      	uxtb	r2, r2
   14d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14da0:	b2d2      	uxtb	r2, r2
   14da2:	701a      	strb	r2, [r3, #0]
  }
}
   14da4:	370c      	adds	r7, #12
   14da6:	46bd      	mov	sp, r7
   14da8:	f85d 7b04 	ldr.w	r7, [sp], #4
   14dac:	4770      	bx	lr
   14dae:	bf00      	nop

00014db0 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   14db0:	b580      	push	{r7, lr}
   14db2:	b084      	sub	sp, #16
   14db4:	af00      	add	r7, sp, #0
   14db6:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   14db8:	2300      	movs	r3, #0
   14dba:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   14dbc:	e009      	b.n	14dd2 <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   14dbe:	7bfb      	ldrb	r3, [r7, #15]
   14dc0:	687a      	ldr	r2, [r7, #4]
   14dc2:	4413      	add	r3, r2
   14dc4:	781b      	ldrb	r3, [r3, #0]
   14dc6:	4618      	mov	r0, r3
   14dc8:	f7ff ff4e 	bl	14c68 <uart0_transmit>
    i++;
   14dcc:	7bfb      	ldrb	r3, [r7, #15]
   14dce:	3301      	adds	r3, #1
   14dd0:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   14dd2:	7bfb      	ldrb	r3, [r7, #15]
   14dd4:	687a      	ldr	r2, [r7, #4]
   14dd6:	4413      	add	r3, r2
   14dd8:	781b      	ldrb	r3, [r3, #0]
   14dda:	2b00      	cmp	r3, #0
   14ddc:	d1ef      	bne.n	14dbe <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   14dde:	3710      	adds	r7, #16
   14de0:	46bd      	mov	sp, r7
   14de2:	bd80      	pop	{r7, pc}

00014de4 <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   14de4:	b590      	push	{r4, r7, lr}
   14de6:	b089      	sub	sp, #36	; 0x24
   14de8:	af00      	add	r7, sp, #0
   14dea:	4603      	mov	r3, r0
   14dec:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   14dee:	f648 1360 	movw	r3, #35168	; 0x8960
   14df2:	f2c0 0301 	movt	r3, #1
   14df6:	f107 040c 	add.w	r4, r7, #12
   14dfa:	6818      	ldr	r0, [r3, #0]
   14dfc:	6859      	ldr	r1, [r3, #4]
   14dfe:	689a      	ldr	r2, [r3, #8]
   14e00:	68db      	ldr	r3, [r3, #12]
   14e02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   14e04:	79fb      	ldrb	r3, [r7, #7]
   14e06:	091b      	lsrs	r3, r3, #4
   14e08:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   14e0a:	79fb      	ldrb	r3, [r7, #7]
   14e0c:	f003 030f 	and.w	r3, r3, #15
   14e10:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   14e12:	230f      	movs	r3, #15
   14e14:	77fb      	strb	r3, [r7, #31]
    low = 15;
   14e16:	230f      	movs	r3, #15
   14e18:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   14e1a:	7ffb      	ldrb	r3, [r7, #31]
   14e1c:	f107 0220 	add.w	r2, r7, #32
   14e20:	4413      	add	r3, r2
   14e22:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14e26:	4618      	mov	r0, r3
   14e28:	f7ff ff1e 	bl	14c68 <uart0_transmit>
  uart0_transmit(hex[low]);
   14e2c:	7fbb      	ldrb	r3, [r7, #30]
   14e2e:	f107 0220 	add.w	r2, r7, #32
   14e32:	4413      	add	r3, r2
   14e34:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14e38:	4618      	mov	r0, r3
   14e3a:	f7ff ff15 	bl	14c68 <uart0_transmit>
}
   14e3e:	3724      	adds	r7, #36	; 0x24
   14e40:	46bd      	mov	sp, r7
   14e42:	bd90      	pop	{r4, r7, pc}

00014e44 <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   14e44:	b480      	push	{r7}
   14e46:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   14e48:	f24c 23a4 	movw	r3, #49828	; 0xc2a4
   14e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e50:	781a      	ldrb	r2, [r3, #0]
   14e52:	f24c 23a5 	movw	r3, #49829	; 0xc2a5
   14e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e5a:	781b      	ldrb	r3, [r3, #0]
   14e5c:	b2db      	uxtb	r3, r3
   14e5e:	429a      	cmp	r2, r3
   14e60:	d10e      	bne.n	14e80 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   14e62:	f242 030a 	movw	r3, #8202	; 0x200a
   14e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e6a:	f242 020a 	movw	r2, #8202	; 0x200a
   14e6e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14e72:	7812      	ldrb	r2, [r2, #0]
   14e74:	b2d2      	uxtb	r2, r2
   14e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14e7a:	b2d2      	uxtb	r2, r2
   14e7c:	701a      	strb	r2, [r3, #0]
   14e7e:	e01d      	b.n	14ebc <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   14e80:	f242 030c 	movw	r3, #8204	; 0x200c
   14e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e88:	f24c 22a5 	movw	r2, #49829	; 0xc2a5
   14e8c:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14e90:	7812      	ldrb	r2, [r2, #0]
   14e92:	b2d2      	uxtb	r2, r2
   14e94:	4611      	mov	r1, r2
   14e96:	f24c 22a8 	movw	r2, #49832	; 0xc2a8
   14e9a:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14e9e:	5c52      	ldrb	r2, [r2, r1]
   14ea0:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   14ea2:	f24c 23a5 	movw	r3, #49829	; 0xc2a5
   14ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14eaa:	781b      	ldrb	r3, [r3, #0]
   14eac:	b2db      	uxtb	r3, r3
   14eae:	3301      	adds	r3, #1
   14eb0:	b2da      	uxtb	r2, r3
   14eb2:	f24c 23a5 	movw	r3, #49829	; 0xc2a5
   14eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14eba:	701a      	strb	r2, [r3, #0]
  }
}
   14ebc:	46bd      	mov	sp, r7
   14ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
   14ec2:	4770      	bx	lr

00014ec4 <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   14ec4:	b480      	push	{r7}
   14ec6:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   14ec8:	f24c 33a8 	movw	r3, #50088	; 0xc3a8
   14ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ed0:	781a      	ldrb	r2, [r3, #0]
   14ed2:	f24c 33a9 	movw	r3, #50089	; 0xc3a9
   14ed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14eda:	781b      	ldrb	r3, [r3, #0]
   14edc:	b2db      	uxtb	r3, r3
   14ede:	429a      	cmp	r2, r3
   14ee0:	d10e      	bne.n	14f00 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   14ee2:	f242 039a 	movw	r3, #8346	; 0x209a
   14ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14eea:	f242 029a 	movw	r2, #8346	; 0x209a
   14eee:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ef2:	7812      	ldrb	r2, [r2, #0]
   14ef4:	b2d2      	uxtb	r2, r2
   14ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14efa:	b2d2      	uxtb	r2, r2
   14efc:	701a      	strb	r2, [r3, #0]
   14efe:	e01d      	b.n	14f3c <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   14f00:	f242 039c 	movw	r3, #8348	; 0x209c
   14f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f08:	f24c 32a9 	movw	r2, #50089	; 0xc3a9
   14f0c:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14f10:	7812      	ldrb	r2, [r2, #0]
   14f12:	b2d2      	uxtb	r2, r2
   14f14:	4611      	mov	r1, r2
   14f16:	f24c 32ac 	movw	r2, #50092	; 0xc3ac
   14f1a:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14f1e:	5c52      	ldrb	r2, [r2, r1]
   14f20:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   14f22:	f24c 33a9 	movw	r3, #50089	; 0xc3a9
   14f26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f2a:	781b      	ldrb	r3, [r3, #0]
   14f2c:	b2db      	uxtb	r3, r3
   14f2e:	3301      	adds	r3, #1
   14f30:	b2da      	uxtb	r2, r3
   14f32:	f24c 33a9 	movw	r3, #50089	; 0xc3a9
   14f36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f3a:	701a      	strb	r2, [r3, #0]
  }
}
   14f3c:	46bd      	mov	sp, r7
   14f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
   14f42:	4770      	bx	lr

00014f44 <uart0_init>:

void uart0_init( void ) {
   14f44:	b480      	push	{r7}
   14f46:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   14f48:	f242 0390 	movw	r3, #8336	; 0x2090
   14f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f50:	2200      	movs	r2, #0
   14f52:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   14f54:	f242 0309 	movw	r3, #8201	; 0x2009
   14f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f5c:	2219      	movs	r2, #25
   14f5e:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   14f60:	f242 030b 	movw	r3, #8203	; 0x200b
   14f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f68:	2200      	movs	r2, #0
   14f6a:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   14f6c:	f242 030a 	movw	r3, #8202	; 0x200a
   14f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f74:	2218      	movs	r2, #24
   14f76:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   14f78:	f242 0395 	movw	r3, #8341	; 0x2095
   14f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f80:	2206      	movs	r2, #6
   14f82:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   14f84:	f242 030a 	movw	r3, #8202	; 0x200a
   14f88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f8c:	f242 020a 	movw	r2, #8202	; 0x200a
   14f90:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14f94:	7812      	ldrb	r2, [r2, #0]
   14f96:	b2d2      	uxtb	r2, r2
   14f98:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14f9c:	b2d2      	uxtb	r2, r2
   14f9e:	701a      	strb	r2, [r3, #0]
}
   14fa0:	46bd      	mov	sp, r7
   14fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
   14fa6:	4770      	bx	lr

00014fa8 <uart1_init>:

void uart1_init( void ) {
   14fa8:	b480      	push	{r7}
   14faa:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   14fac:	f242 0398 	movw	r3, #8344	; 0x2098
   14fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fb4:	2200      	movs	r2, #0
   14fb6:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   14fb8:	f242 0399 	movw	r3, #8345	; 0x2099
   14fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fc0:	2219      	movs	r2, #25
   14fc2:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   14fc4:	f242 039b 	movw	r3, #8347	; 0x209b
   14fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fcc:	2200      	movs	r2, #0
   14fce:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   14fd0:	f242 039a 	movw	r3, #8346	; 0x209a
   14fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fd8:	2218      	movs	r2, #24
   14fda:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   14fdc:	f242 039d 	movw	r3, #8349	; 0x209d
   14fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fe4:	2206      	movs	r2, #6
   14fe6:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   14fe8:	f242 039a 	movw	r3, #8346	; 0x209a
   14fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ff0:	f242 029a 	movw	r2, #8346	; 0x209a
   14ff4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ff8:	7812      	ldrb	r2, [r2, #0]
   14ffa:	b2d2      	uxtb	r2, r2
   14ffc:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15000:	b2d2      	uxtb	r2, r2
   15002:	701a      	strb	r2, [r3, #0]
}
   15004:	46bd      	mov	sp, r7
   15006:	f85d 7b04 	ldr.w	r7, [sp], #4
   1500a:	4770      	bx	lr
   1500c:	0000      	movs	r0, r0
	...

00015010 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   15010:	b480      	push	{r7}
   15012:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   15014:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   15018:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1501c:	f04f 0200 	mov.w	r2, #0
   15020:	601a      	str	r2, [r3, #0]
   15022:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   15026:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1502a:	f04f 0200 	mov.w	r2, #0
   1502e:	601a      	str	r2, [r3, #0]
   15030:	f24c 43b4 	movw	r3, #50356	; 0xc4b4
   15034:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15038:	f04f 0200 	mov.w	r2, #0
   1503c:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   1503e:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
   15042:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15046:	f04f 0200 	mov.w	r2, #0
   1504a:	601a      	str	r2, [r3, #0]
   1504c:	f24c 43bc 	movw	r3, #50364	; 0xc4bc
   15050:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15054:	f04f 0200 	mov.w	r2, #0
   15058:	601a      	str	r2, [r3, #0]
   1505a:	f24c 43c0 	movw	r3, #50368	; 0xc4c0
   1505e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15062:	f04f 0200 	mov.w	r2, #0
   15066:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   15068:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
   1506c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15070:	f04f 0200 	mov.w	r2, #0
   15074:	601a      	str	r2, [r3, #0]
   15076:	f24c 43e8 	movw	r3, #50408	; 0xc4e8
   1507a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1507e:	f04f 0200 	mov.w	r2, #0
   15082:	601a      	str	r2, [r3, #0]
   15084:	f24c 43cc 	movw	r3, #50380	; 0xc4cc
   15088:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1508c:	f04f 0200 	mov.w	r2, #0
   15090:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   15092:	f24c 43d0 	movw	r3, #50384	; 0xc4d0
   15096:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1509a:	f04f 0200 	mov.w	r2, #0
   1509e:	601a      	str	r2, [r3, #0]
   150a0:	f24c 43d4 	movw	r3, #50388	; 0xc4d4
   150a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150a8:	f04f 0200 	mov.w	r2, #0
   150ac:	601a      	str	r2, [r3, #0]
   150ae:	f24c 43d8 	movw	r3, #50392	; 0xc4d8
   150b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150b6:	f04f 0200 	mov.w	r2, #0
   150ba:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   150bc:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
   150c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150c4:	2200      	movs	r2, #0
   150c6:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   150c8:	f240 33f8 	movw	r3, #1016	; 0x3f8
   150cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150d0:	681a      	ldr	r2, [r3, #0]
   150d2:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
   150d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150da:	601a      	str	r2, [r3, #0]
}
   150dc:	46bd      	mov	sp, r7
   150de:	f85d 7b04 	ldr.w	r7, [sp], #4
   150e2:	4770      	bx	lr

000150e4 <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   150e4:	b580      	push	{r7, lr}
   150e6:	b082      	sub	sp, #8
   150e8:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   150ea:	f240 33ec 	movw	r3, #1004	; 0x3ec
   150ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150f2:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   150f4:	2b01      	cmp	r3, #1
   150f6:	d105      	bne.n	15104 <estimator_update_state_infrared+0x20>
   150f8:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
   150fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15100:	681b      	ldr	r3, [r3, #0]
   15102:	e004      	b.n	1510e <estimator_update_state_infrared+0x2a>
   15104:	f240 33f8 	movw	r3, #1016	; 0x3f8
   15108:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1510c:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   1510e:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   15110:	f24c 1398 	movw	r3, #49560	; 0xc198
   15114:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15118:	881b      	ldrh	r3, [r3, #0]
   1511a:	b21b      	sxth	r3, r3
   1511c:	4618      	mov	r0, r3
   1511e:	f003 f875 	bl	1820c <__aeabi_i2f>
   15122:	4603      	mov	r3, r0
   15124:	4618      	mov	r0, r3
   15126:	6879      	ldr	r1, [r7, #4]
   15128:	f003 f8c4 	bl	182b4 <__aeabi_fmul>
   1512c:	4603      	mov	r3, r0
   1512e:	461a      	mov	r2, r3
   15130:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
   15134:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15138:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   1513a:	f24c 139a 	movw	r3, #49562	; 0xc19a
   1513e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15142:	881b      	ldrh	r3, [r3, #0]
   15144:	b21b      	sxth	r3, r3
   15146:	4618      	mov	r0, r3
   15148:	f003 f860 	bl	1820c <__aeabi_i2f>
   1514c:	4603      	mov	r3, r0
   1514e:	4618      	mov	r0, r3
   15150:	6879      	ldr	r1, [r7, #4]
   15152:	f003 f8af 	bl	182b4 <__aeabi_fmul>
   15156:	4603      	mov	r3, r0
   15158:	461a      	mov	r2, r3
   1515a:	f24c 43c0 	movw	r3, #50368	; 0xc4c0
   1515e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15162:	601a      	str	r2, [r3, #0]
}
   15164:	3708      	adds	r7, #8
   15166:	46bd      	mov	sp, r7
   15168:	bd80      	pop	{r7, pc}
   1516a:	bf00      	nop

0001516c <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   1516c:	b5b0      	push	{r4, r5, r7, lr}
   1516e:	b084      	sub	sp, #16
   15170:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   15172:	f24c 43f8 	movw	r3, #50424	; 0xc4f8
   15176:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1517a:	781b      	ldrb	r3, [r3, #0]
   1517c:	2b00      	cmp	r3, #0
   1517e:	f000 81e8 	beq.w	15552 <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   15182:	f24c 0368 	movw	r3, #49256	; 0xc068
   15186:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1518a:	681a      	ldr	r2, [r3, #0]
   1518c:	f24c 43fc 	movw	r3, #50428	; 0xc4fc
   15190:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15194:	681b      	ldr	r3, [r3, #0]
   15196:	4610      	mov	r0, r2
   15198:	4619      	mov	r1, r3
   1519a:	f002 ff81 	bl	180a0 <__aeabi_fsub>
   1519e:	4603      	mov	r3, r0
   151a0:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   151a2:	68b8      	ldr	r0, [r7, #8]
   151a4:	f002 fbf2 	bl	1798c <__aeabi_f2d>
   151a8:	4602      	mov	r2, r0
   151aa:	460b      	mov	r3, r1
   151ac:	4610      	mov	r0, r2
   151ae:	4619      	mov	r1, r3
   151b0:	a385      	add	r3, pc, #532	; (adr r3, 153c8 <estimator_update_ir_estim+0x25c>)
   151b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   151b6:	f002 fecd 	bl	17f54 <__aeabi_dcmpgt>
   151ba:	4603      	mov	r3, r0
   151bc:	2b00      	cmp	r3, #0
   151be:	d100      	bne.n	151c2 <estimator_update_ir_estim+0x56>
   151c0:	e219      	b.n	155f6 <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   151c2:	f24c 43e8 	movw	r3, #50408	; 0xc4e8
   151c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151ca:	681a      	ldr	r2, [r3, #0]
   151cc:	f24c 5300 	movw	r3, #50432	; 0xc500
   151d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151d4:	681b      	ldr	r3, [r3, #0]
   151d6:	4610      	mov	r0, r2
   151d8:	4619      	mov	r1, r3
   151da:	f002 ff61 	bl	180a0 <__aeabi_fsub>
   151de:	4603      	mov	r3, r0
   151e0:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   151e2:	e013      	b.n	1520c <estimator_update_ir_estim+0xa0>
   151e4:	68f8      	ldr	r0, [r7, #12]
   151e6:	f002 fbd1 	bl	1798c <__aeabi_f2d>
   151ea:	4602      	mov	r2, r0
   151ec:	460b      	mov	r3, r1
   151ee:	4610      	mov	r0, r2
   151f0:	4619      	mov	r1, r3
   151f2:	a377      	add	r3, pc, #476	; (adr r3, 153d0 <estimator_update_ir_estim+0x264>)
   151f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   151f8:	f002 fa68 	bl	176cc <__aeabi_dsub>
   151fc:	4602      	mov	r2, r0
   151fe:	460b      	mov	r3, r1
   15200:	4610      	mov	r0, r2
   15202:	4619      	mov	r1, r3
   15204:	f002 fef8 	bl	17ff8 <__aeabi_d2f>
   15208:	4603      	mov	r3, r0
   1520a:	60fb      	str	r3, [r7, #12]
   1520c:	68f8      	ldr	r0, [r7, #12]
   1520e:	f002 fbbd 	bl	1798c <__aeabi_f2d>
   15212:	4602      	mov	r2, r0
   15214:	460b      	mov	r3, r1
   15216:	4610      	mov	r0, r2
   15218:	4619      	mov	r1, r3
   1521a:	a36f      	add	r3, pc, #444	; (adr r3, 153d8 <estimator_update_ir_estim+0x26c>)
   1521c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15220:	f002 fe98 	bl	17f54 <__aeabi_dcmpgt>
   15224:	4603      	mov	r3, r0
   15226:	2b00      	cmp	r3, #0
   15228:	d1dc      	bne.n	151e4 <estimator_update_ir_estim+0x78>
   1522a:	e013      	b.n	15254 <estimator_update_ir_estim+0xe8>
   1522c:	68f8      	ldr	r0, [r7, #12]
   1522e:	f002 fbad 	bl	1798c <__aeabi_f2d>
   15232:	4602      	mov	r2, r0
   15234:	460b      	mov	r3, r1
   15236:	4610      	mov	r0, r2
   15238:	4619      	mov	r1, r3
   1523a:	a365      	add	r3, pc, #404	; (adr r3, 153d0 <estimator_update_ir_estim+0x264>)
   1523c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15240:	f002 fa46 	bl	176d0 <__adddf3>
   15244:	4602      	mov	r2, r0
   15246:	460b      	mov	r3, r1
   15248:	4610      	mov	r0, r2
   1524a:	4619      	mov	r1, r3
   1524c:	f002 fed4 	bl	17ff8 <__aeabi_d2f>
   15250:	4603      	mov	r3, r0
   15252:	60fb      	str	r3, [r7, #12]
   15254:	68f8      	ldr	r0, [r7, #12]
   15256:	f002 fb99 	bl	1798c <__aeabi_f2d>
   1525a:	4602      	mov	r2, r0
   1525c:	460b      	mov	r3, r1
   1525e:	4610      	mov	r0, r2
   15260:	4619      	mov	r1, r3
   15262:	a35f      	add	r3, pc, #380	; (adr r3, 153e0 <estimator_update_ir_estim+0x274>)
   15264:	e9d3 2300 	ldrd	r2, r3, [r3]
   15268:	f002 fe56 	bl	17f18 <__aeabi_dcmplt>
   1526c:	4603      	mov	r3, r0
   1526e:	2b00      	cmp	r3, #0
   15270:	d1dc      	bne.n	1522c <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   15272:	68f8      	ldr	r0, [r7, #12]
   15274:	68b9      	ldr	r1, [r7, #8]
   15276:	f003 f8d1 	bl	1841c <__aeabi_fdiv>
   1527a:	4603      	mov	r3, r0
   1527c:	4618      	mov	r0, r3
   1527e:	f002 fb85 	bl	1798c <__aeabi_f2d>
   15282:	4602      	mov	r2, r0
   15284:	460b      	mov	r3, r1
   15286:	4610      	mov	r0, r2
   15288:	4619      	mov	r1, r3
   1528a:	f04f 0200 	mov.w	r2, #0
   1528e:	f04f 0300 	mov.w	r3, #0
   15292:	f2c4 0324 	movt	r3, #16420	; 0x4024
   15296:	f002 fbcd 	bl	17a34 <__aeabi_dmul>
   1529a:	4602      	mov	r2, r0
   1529c:	460b      	mov	r3, r1
   1529e:	4610      	mov	r0, r2
   152a0:	4619      	mov	r1, r3
   152a2:	a351      	add	r3, pc, #324	; (adr r3, 153e8 <estimator_update_ir_estim+0x27c>)
   152a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   152a8:	f002 fcee 	bl	17c88 <__aeabi_ddiv>
   152ac:	4602      	mov	r2, r0
   152ae:	460b      	mov	r3, r1
   152b0:	4610      	mov	r0, r2
   152b2:	4619      	mov	r1, r3
   152b4:	f002 fea0 	bl	17ff8 <__aeabi_d2f>
   152b8:	4603      	mov	r3, r0
   152ba:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   152bc:	e013      	b.n	152e6 <estimator_update_ir_estim+0x17a>
   152be:	68f8      	ldr	r0, [r7, #12]
   152c0:	f002 fb64 	bl	1798c <__aeabi_f2d>
   152c4:	4602      	mov	r2, r0
   152c6:	460b      	mov	r3, r1
   152c8:	4610      	mov	r0, r2
   152ca:	4619      	mov	r1, r3
   152cc:	a340      	add	r3, pc, #256	; (adr r3, 153d0 <estimator_update_ir_estim+0x264>)
   152ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   152d2:	f002 f9fb 	bl	176cc <__aeabi_dsub>
   152d6:	4602      	mov	r2, r0
   152d8:	460b      	mov	r3, r1
   152da:	4610      	mov	r0, r2
   152dc:	4619      	mov	r1, r3
   152de:	f002 fe8b 	bl	17ff8 <__aeabi_d2f>
   152e2:	4603      	mov	r3, r0
   152e4:	60fb      	str	r3, [r7, #12]
   152e6:	68f8      	ldr	r0, [r7, #12]
   152e8:	f002 fb50 	bl	1798c <__aeabi_f2d>
   152ec:	4602      	mov	r2, r0
   152ee:	460b      	mov	r3, r1
   152f0:	4610      	mov	r0, r2
   152f2:	4619      	mov	r1, r3
   152f4:	a338      	add	r3, pc, #224	; (adr r3, 153d8 <estimator_update_ir_estim+0x26c>)
   152f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   152fa:	f002 fe2b 	bl	17f54 <__aeabi_dcmpgt>
   152fe:	4603      	mov	r3, r0
   15300:	2b00      	cmp	r3, #0
   15302:	d1dc      	bne.n	152be <estimator_update_ir_estim+0x152>
   15304:	e013      	b.n	1532e <estimator_update_ir_estim+0x1c2>
   15306:	68f8      	ldr	r0, [r7, #12]
   15308:	f002 fb40 	bl	1798c <__aeabi_f2d>
   1530c:	4602      	mov	r2, r0
   1530e:	460b      	mov	r3, r1
   15310:	4610      	mov	r0, r2
   15312:	4619      	mov	r1, r3
   15314:	a32e      	add	r3, pc, #184	; (adr r3, 153d0 <estimator_update_ir_estim+0x264>)
   15316:	e9d3 2300 	ldrd	r2, r3, [r3]
   1531a:	f002 f9d9 	bl	176d0 <__adddf3>
   1531e:	4602      	mov	r2, r0
   15320:	460b      	mov	r3, r1
   15322:	4610      	mov	r0, r2
   15324:	4619      	mov	r1, r3
   15326:	f002 fe67 	bl	17ff8 <__aeabi_d2f>
   1532a:	4603      	mov	r3, r0
   1532c:	60fb      	str	r3, [r7, #12]
   1532e:	68f8      	ldr	r0, [r7, #12]
   15330:	f002 fb2c 	bl	1798c <__aeabi_f2d>
   15334:	4602      	mov	r2, r0
   15336:	460b      	mov	r3, r1
   15338:	4610      	mov	r0, r2
   1533a:	4619      	mov	r1, r3
   1533c:	a328      	add	r3, pc, #160	; (adr r3, 153e0 <estimator_update_ir_estim+0x274>)
   1533e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15342:	f002 fde9 	bl	17f18 <__aeabi_dcmplt>
   15346:	4603      	mov	r3, r0
   15348:	2b00      	cmp	r3, #0
   1534a:	d1dc      	bne.n	15306 <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   1534c:	f24c 1398 	movw	r3, #49560	; 0xc198
   15350:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15354:	881b      	ldrh	r3, [r3, #0]
   15356:	b21b      	sxth	r3, r3
   15358:	4618      	mov	r0, r3
   1535a:	f002 ff57 	bl	1820c <__aeabi_i2f>
   1535e:	4602      	mov	r2, r0
   15360:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
   15364:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15368:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   1536a:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
   1536e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15372:	68fa      	ldr	r2, [r7, #12]
   15374:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   15376:	68f8      	ldr	r0, [r7, #12]
   15378:	f04f 0100 	mov.w	r1, #0
   1537c:	f003 f938 	bl	185f0 <__aeabi_fcmplt>
   15380:	4603      	mov	r3, r0
   15382:	2b00      	cmp	r3, #0
   15384:	d003      	beq.n	1538e <estimator_update_ir_estim+0x222>
   15386:	68fb      	ldr	r3, [r7, #12]
   15388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   1538c:	e000      	b.n	15390 <estimator_update_ir_estim+0x224>
   1538e:	68fb      	ldr	r3, [r7, #12]
   15390:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   15392:	6878      	ldr	r0, [r7, #4]
   15394:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   15398:	f003 f92a 	bl	185f0 <__aeabi_fcmplt>
   1539c:	4603      	mov	r3, r0
   1539e:	2b00      	cmp	r3, #0
   153a0:	d100      	bne.n	153a4 <estimator_update_ir_estim+0x238>
   153a2:	e128      	b.n	155f6 <estimator_update_ir_estim+0x48a>
   153a4:	6878      	ldr	r0, [r7, #4]
   153a6:	f002 faf1 	bl	1798c <__aeabi_f2d>
   153aa:	4602      	mov	r2, r0
   153ac:	460b      	mov	r3, r1
   153ae:	4610      	mov	r0, r2
   153b0:	4619      	mov	r1, r3
   153b2:	a30f      	add	r3, pc, #60	; (adr r3, 153f0 <estimator_update_ir_estim+0x284>)
   153b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   153b8:	f002 fdcc 	bl	17f54 <__aeabi_dcmpgt>
   153bc:	4603      	mov	r3, r0
   153be:	2b00      	cmp	r3, #0
   153c0:	d11a      	bne.n	153f8 <estimator_update_ir_estim+0x28c>
   153c2:	e118      	b.n	155f6 <estimator_update_ir_estim+0x48a>
   153c4:	f3af 8000 	nop.w
   153c8:	9999999a 	.word	0x9999999a
   153cc:	3fb99999 	.word	0x3fb99999
   153d0:	54442d18 	.word	0x54442d18
   153d4:	401921fb 	.word	0x401921fb
   153d8:	54442d18 	.word	0x54442d18
   153dc:	400921fb 	.word	0x400921fb
   153e0:	54442d18 	.word	0x54442d18
   153e4:	c00921fb 	.word	0xc00921fb
   153e8:	51eb851f 	.word	0x51eb851f
   153ec:	40239eb8 	.word	0x40239eb8
   153f0:	9999999a 	.word	0x9999999a
   153f4:	3fa99999 	.word	0x3fa99999
   153f8:	f240 33f0 	movw	r3, #1008	; 0x3f0
   153fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15400:	881b      	ldrh	r3, [r3, #0]
   15402:	b21b      	sxth	r3, r3
   15404:	425b      	negs	r3, r3
   15406:	0fda      	lsrs	r2, r3, #31
   15408:	4413      	add	r3, r2
   1540a:	105b      	asrs	r3, r3, #1
   1540c:	461a      	mov	r2, r3
   1540e:	f24c 1398 	movw	r3, #49560	; 0xc198
   15412:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15416:	881b      	ldrh	r3, [r3, #0]
   15418:	b21b      	sxth	r3, r3
   1541a:	429a      	cmp	r2, r3
   1541c:	f280 8098 	bge.w	15550 <estimator_update_ir_estim+0x3e4>
   15420:	f240 33f0 	movw	r3, #1008	; 0x3f0
   15424:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15428:	881b      	ldrh	r3, [r3, #0]
   1542a:	b21b      	sxth	r3, r3
   1542c:	0fda      	lsrs	r2, r3, #31
   1542e:	4413      	add	r3, r2
   15430:	105b      	asrs	r3, r3, #1
   15432:	b29a      	uxth	r2, r3
   15434:	f24c 1398 	movw	r3, #49560	; 0xc198
   15438:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1543c:	881b      	ldrh	r3, [r3, #0]
   1543e:	b212      	sxth	r2, r2
   15440:	b21b      	sxth	r3, r3
   15442:	429a      	cmp	r2, r3
   15444:	f340 8084 	ble.w	15550 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   15448:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
   1544c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15450:	681a      	ldr	r2, [r3, #0]
   15452:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
   15456:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1545a:	681b      	ldr	r3, [r3, #0]
   1545c:	4610      	mov	r0, r2
   1545e:	4619      	mov	r1, r3
   15460:	f002 ff28 	bl	182b4 <__aeabi_fmul>
   15464:	4603      	mov	r3, r0
   15466:	4618      	mov	r0, r3
   15468:	f002 fa90 	bl	1798c <__aeabi_f2d>
   1546c:	4604      	mov	r4, r0
   1546e:	460d      	mov	r5, r1
   15470:	f24c 5304 	movw	r3, #50436	; 0xc504
   15474:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15478:	681b      	ldr	r3, [r3, #0]
   1547a:	4618      	mov	r0, r3
   1547c:	f002 fa86 	bl	1798c <__aeabi_f2d>
   15480:	4602      	mov	r2, r0
   15482:	460b      	mov	r3, r1
   15484:	4610      	mov	r0, r2
   15486:	4619      	mov	r1, r3
   15488:	a367      	add	r3, pc, #412	; (adr r3, 15628 <estimator_update_ir_estim+0x4bc>)
   1548a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1548e:	f002 fad1 	bl	17a34 <__aeabi_dmul>
   15492:	4602      	mov	r2, r0
   15494:	460b      	mov	r3, r1
   15496:	4620      	mov	r0, r4
   15498:	4629      	mov	r1, r5
   1549a:	f002 f919 	bl	176d0 <__adddf3>
   1549e:	4602      	mov	r2, r0
   154a0:	460b      	mov	r3, r1
   154a2:	4610      	mov	r0, r2
   154a4:	4619      	mov	r1, r3
   154a6:	f002 fda7 	bl	17ff8 <__aeabi_d2f>
   154aa:	4602      	mov	r2, r0
   154ac:	f24c 5304 	movw	r3, #50436	; 0xc504
   154b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   154b4:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   154b6:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
   154ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   154be:	681a      	ldr	r2, [r3, #0]
   154c0:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
   154c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   154c8:	681b      	ldr	r3, [r3, #0]
   154ca:	4610      	mov	r0, r2
   154cc:	4619      	mov	r1, r3
   154ce:	f002 fef1 	bl	182b4 <__aeabi_fmul>
   154d2:	4603      	mov	r3, r0
   154d4:	4618      	mov	r0, r3
   154d6:	f002 fa59 	bl	1798c <__aeabi_f2d>
   154da:	4604      	mov	r4, r0
   154dc:	460d      	mov	r5, r1
   154de:	f24c 5308 	movw	r3, #50440	; 0xc508
   154e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   154e6:	681b      	ldr	r3, [r3, #0]
   154e8:	4618      	mov	r0, r3
   154ea:	f002 fa4f 	bl	1798c <__aeabi_f2d>
   154ee:	4602      	mov	r2, r0
   154f0:	460b      	mov	r3, r1
   154f2:	4610      	mov	r0, r2
   154f4:	4619      	mov	r1, r3
   154f6:	a34c      	add	r3, pc, #304	; (adr r3, 15628 <estimator_update_ir_estim+0x4bc>)
   154f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   154fc:	f002 fa9a 	bl	17a34 <__aeabi_dmul>
   15500:	4602      	mov	r2, r0
   15502:	460b      	mov	r3, r1
   15504:	4620      	mov	r0, r4
   15506:	4629      	mov	r1, r5
   15508:	f002 f8e2 	bl	176d0 <__adddf3>
   1550c:	4602      	mov	r2, r0
   1550e:	460b      	mov	r3, r1
   15510:	4610      	mov	r0, r2
   15512:	4619      	mov	r1, r3
   15514:	f002 fd70 	bl	17ff8 <__aeabi_d2f>
   15518:	4602      	mov	r2, r0
   1551a:	f24c 5308 	movw	r3, #50440	; 0xc508
   1551e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15522:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   15524:	f24c 5304 	movw	r3, #50436	; 0xc504
   15528:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1552c:	681a      	ldr	r2, [r3, #0]
   1552e:	f24c 5308 	movw	r3, #50440	; 0xc508
   15532:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15536:	681b      	ldr	r3, [r3, #0]
   15538:	4610      	mov	r0, r2
   1553a:	4619      	mov	r1, r3
   1553c:	f002 ff6e 	bl	1841c <__aeabi_fdiv>
   15540:	4603      	mov	r3, r0
   15542:	461a      	mov	r2, r3
   15544:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
   15548:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1554c:	601a      	str	r2, [r3, #0]
   1554e:	e052      	b.n	155f6 <estimator_update_ir_estim+0x48a>
   15550:	e051      	b.n	155f6 <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   15552:	f24c 43f8 	movw	r3, #50424	; 0xc4f8
   15556:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1555a:	2201      	movs	r2, #1
   1555c:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   1555e:	f240 33f0 	movw	r3, #1008	; 0x3f0
   15562:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15566:	881b      	ldrh	r3, [r3, #0]
   15568:	b21b      	sxth	r3, r3
   1556a:	4618      	mov	r0, r3
   1556c:	f002 fe4e 	bl	1820c <__aeabi_i2f>
   15570:	4603      	mov	r3, r0
   15572:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   15574:	6838      	ldr	r0, [r7, #0]
   15576:	6839      	ldr	r1, [r7, #0]
   15578:	f002 fe9c 	bl	182b4 <__aeabi_fmul>
   1557c:	4603      	mov	r3, r0
   1557e:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   15580:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
   15584:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15588:	681b      	ldr	r3, [r3, #0]
   1558a:	4618      	mov	r0, r3
   1558c:	f002 f9fe 	bl	1798c <__aeabi_f2d>
   15590:	4602      	mov	r2, r0
   15592:	460b      	mov	r3, r1
   15594:	4610      	mov	r0, r2
   15596:	4619      	mov	r1, r3
   15598:	f04f 0200 	mov.w	r2, #0
   1559c:	f04f 0300 	mov.w	r3, #0
   155a0:	f2c4 0359 	movt	r3, #16473	; 0x4059
   155a4:	f002 fa46 	bl	17a34 <__aeabi_dmul>
   155a8:	4602      	mov	r2, r0
   155aa:	460b      	mov	r3, r1
   155ac:	4614      	mov	r4, r2
   155ae:	461d      	mov	r5, r3
   155b0:	6838      	ldr	r0, [r7, #0]
   155b2:	f002 f9eb 	bl	1798c <__aeabi_f2d>
   155b6:	4602      	mov	r2, r0
   155b8:	460b      	mov	r3, r1
   155ba:	4620      	mov	r0, r4
   155bc:	4629      	mov	r1, r5
   155be:	f002 fa39 	bl	17a34 <__aeabi_dmul>
   155c2:	4602      	mov	r2, r0
   155c4:	460b      	mov	r3, r1
   155c6:	4610      	mov	r0, r2
   155c8:	4619      	mov	r1, r3
   155ca:	f002 fd15 	bl	17ff8 <__aeabi_d2f>
   155ce:	4602      	mov	r2, r0
   155d0:	f24c 5304 	movw	r3, #50436	; 0xc504
   155d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155d8:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   155da:	6838      	ldr	r0, [r7, #0]
   155dc:	f04f 0100 	mov.w	r1, #0
   155e0:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   155e4:	f002 fe66 	bl	182b4 <__aeabi_fmul>
   155e8:	4603      	mov	r3, r0
   155ea:	461a      	mov	r2, r3
   155ec:	f24c 5308 	movw	r3, #50440	; 0xc508
   155f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155f4:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   155f6:	f24c 43e8 	movw	r3, #50408	; 0xc4e8
   155fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155fe:	681a      	ldr	r2, [r3, #0]
   15600:	f24c 5300 	movw	r3, #50432	; 0xc500
   15604:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15608:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   1560a:	f24c 0368 	movw	r3, #49256	; 0xc068
   1560e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15612:	681a      	ldr	r2, [r3, #0]
   15614:	f24c 43fc 	movw	r3, #50428	; 0xc4fc
   15618:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1561c:	601a      	str	r2, [r3, #0]
}
   1561e:	3710      	adds	r7, #16
   15620:	46bd      	mov	sp, r7
   15622:	bdb0      	pop	{r4, r5, r7, pc}
   15624:	f3af 8000 	nop.w
   15628:	d916872b 	.word	0xd916872b
   1562c:	3feff7ce 	.word	0x3feff7ce

00015630 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   15630:	b580      	push	{r7, lr}
   15632:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   15634:	f24c 038c 	movw	r3, #49292	; 0xc08c
   15638:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1563c:	781b      	ldrb	r3, [r3, #0]
   1563e:	f003 0320 	and.w	r3, r3, #32
   15642:	2b00      	cmp	r3, #0
   15644:	d044      	beq.n	156d0 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   15646:	f24c 0384 	movw	r3, #49284	; 0xc084
   1564a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1564e:	681a      	ldr	r2, [r3, #0]
   15650:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   15654:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15658:	601a      	str	r2, [r3, #0]
   1565a:	f24c 0388 	movw	r3, #49288	; 0xc088
   1565e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15662:	681a      	ldr	r2, [r3, #0]
   15664:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   15668:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1566c:	601a      	str	r2, [r3, #0]
   1566e:	f24c 036c 	movw	r3, #49260	; 0xc06c
   15672:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15676:	681a      	ldr	r2, [r3, #0]
   15678:	f24c 43b4 	movw	r3, #50356	; 0xc4b4
   1567c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15680:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   15682:	f24c 0370 	movw	r3, #49264	; 0xc070
   15686:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1568a:	681a      	ldr	r2, [r3, #0]
   1568c:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
   15690:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15694:	601a      	str	r2, [r3, #0]
   15696:	f24c 0378 	movw	r3, #49272	; 0xc078
   1569a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1569e:	681a      	ldr	r2, [r3, #0]
   156a0:	f24c 43e8 	movw	r3, #50408	; 0xc4e8
   156a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156a8:	601a      	str	r2, [r3, #0]
   156aa:	f24c 0374 	movw	r3, #49268	; 0xc074
   156ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156b2:	681a      	ldr	r2, [r3, #0]
   156b4:	f24c 43cc 	movw	r3, #50380	; 0xc4cc
   156b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156bc:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   156be:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
   156c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156c6:	881b      	ldrh	r3, [r3, #0]
   156c8:	2b00      	cmp	r3, #0
   156ca:	d001      	beq.n	156d0 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   156cc:	f7ff fd4e 	bl	1516c <estimator_update_ir_estim>
  }
}
   156d0:	bd80      	pop	{r7, pc}
   156d2:	bf00      	nop

000156d4 <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   156d4:	b480      	push	{r7}
   156d6:	af00      	add	r7, sp, #0
  
}
   156d8:	46bd      	mov	sp, r7
   156da:	f85d 7b04 	ldr.w	r7, [sp], #4
   156de:	4770      	bx	lr

000156e0 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   156e0:	b5b0      	push	{r4, r5, r7, lr}
   156e2:	b082      	sub	sp, #8
   156e4:	af00      	add	r7, sp, #0
   156e6:	4603      	mov	r3, r0
   156e8:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   156ea:	f64b 63dc 	movw	r3, #48860	; 0xbedc
   156ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156f2:	781b      	ldrb	r3, [r3, #0]
   156f4:	2b01      	cmp	r3, #1
   156f6:	f040 80e0 	bne.w	158ba <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   156fa:	f24c 530c 	movw	r3, #50444	; 0xc50c
   156fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15702:	781b      	ldrb	r3, [r3, #0]
   15704:	2b02      	cmp	r3, #2
   15706:	d168      	bne.n	157da <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   15708:	79fb      	ldrb	r3, [r7, #7]
   1570a:	2b00      	cmp	r3, #0
   1570c:	d013      	beq.n	15736 <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   1570e:	f240 33f4 	movw	r3, #1012	; 0x3f4
   15712:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15716:	881a      	ldrh	r2, [r3, #0]
   15718:	f24c 5312 	movw	r3, #50450	; 0xc512
   1571c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15720:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15722:	f24c 0300 	movw	r3, #49152	; 0xc000
   15726:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1572a:	895a      	ldrh	r2, [r3, #10]
   1572c:	f24c 530e 	movw	r3, #50446	; 0xc50e
   15730:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15734:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15736:	f24c 0300 	movw	r3, #49152	; 0xc000
   1573a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1573e:	895b      	ldrh	r3, [r3, #10]
   15740:	b21a      	sxth	r2, r3
   15742:	f24c 530e 	movw	r3, #50446	; 0xc50e
   15746:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1574a:	881b      	ldrh	r3, [r3, #0]
   1574c:	b21b      	sxth	r3, r3
   1574e:	1ad3      	subs	r3, r2, r3
   15750:	4618      	mov	r0, r3
   15752:	f002 fd5b 	bl	1820c <__aeabi_i2f>
   15756:	4603      	mov	r3, r0
   15758:	4618      	mov	r0, r3
   1575a:	f002 f917 	bl	1798c <__aeabi_f2d>
   1575e:	4602      	mov	r2, r0
   15760:	460b      	mov	r3, r1
   15762:	4610      	mov	r0, r2
   15764:	4619      	mov	r1, r3
   15766:	f04f 0200 	mov.w	r2, #0
   1576a:	f04f 0300 	mov.w	r3, #0
   1576e:	f2c4 034e 	movt	r3, #16462	; 0x404e
   15772:	f002 f95f 	bl	17a34 <__aeabi_dmul>
   15776:	4602      	mov	r2, r0
   15778:	460b      	mov	r3, r1
   1577a:	4610      	mov	r0, r2
   1577c:	4619      	mov	r1, r3
   1577e:	f04f 0200 	mov.w	r2, #0
   15782:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15786:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1578a:	f002 fa7d 	bl	17c88 <__aeabi_ddiv>
   1578e:	4602      	mov	r2, r0
   15790:	460b      	mov	r3, r1
   15792:	4610      	mov	r0, r2
   15794:	4619      	mov	r1, r3
   15796:	f002 fbe7 	bl	17f68 <__aeabi_d2iz>
   1579a:	4603      	mov	r3, r0
   1579c:	b29b      	uxth	r3, r3
   1579e:	b29a      	uxth	r2, r3
   157a0:	f24c 5312 	movw	r3, #50450	; 0xc512
   157a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157a8:	881b      	ldrh	r3, [r3, #0]
   157aa:	b29b      	uxth	r3, r3
   157ac:	4413      	add	r3, r2
   157ae:	b29b      	uxth	r3, r3
   157b0:	b29a      	uxth	r2, r3
   157b2:	f240 33f4 	movw	r3, #1012	; 0x3f4
   157b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157ba:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   157bc:	f240 33f4 	movw	r3, #1012	; 0x3f4
   157c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157c4:	881b      	ldrh	r3, [r3, #0]
   157c6:	b21b      	sxth	r3, r3
   157c8:	4618      	mov	r0, r3
   157ca:	f002 fd1f 	bl	1820c <__aeabi_i2f>
   157ce:	4602      	mov	r2, r0
   157d0:	f64b 63e8 	movw	r3, #48872	; 0xbee8
   157d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157d8:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   157da:	f24c 530c 	movw	r3, #50444	; 0xc50c
   157de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157e2:	781b      	ldrb	r3, [r3, #0]
   157e4:	2b02      	cmp	r3, #2
   157e6:	d168      	bne.n	158ba <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   157e8:	79fb      	ldrb	r3, [r7, #7]
   157ea:	2b00      	cmp	r3, #0
   157ec:	d013      	beq.n	15816 <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   157ee:	f240 33f2 	movw	r3, #1010	; 0x3f2
   157f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157f6:	881a      	ldrh	r2, [r3, #0]
   157f8:	f24c 5314 	movw	r3, #50452	; 0xc514
   157fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15800:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15802:	f24c 0300 	movw	r3, #49152	; 0xc000
   15806:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1580a:	899a      	ldrh	r2, [r3, #12]
   1580c:	f24c 5310 	movw	r3, #50448	; 0xc510
   15810:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15814:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15816:	f24c 0300 	movw	r3, #49152	; 0xc000
   1581a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1581e:	899b      	ldrh	r3, [r3, #12]
   15820:	b21a      	sxth	r2, r3
   15822:	f24c 5310 	movw	r3, #50448	; 0xc510
   15826:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1582a:	881b      	ldrh	r3, [r3, #0]
   1582c:	b21b      	sxth	r3, r3
   1582e:	1ad3      	subs	r3, r2, r3
   15830:	4618      	mov	r0, r3
   15832:	f002 fceb 	bl	1820c <__aeabi_i2f>
   15836:	4603      	mov	r3, r0
   15838:	4618      	mov	r0, r3
   1583a:	f002 f8a7 	bl	1798c <__aeabi_f2d>
   1583e:	4602      	mov	r2, r0
   15840:	460b      	mov	r3, r1
   15842:	4610      	mov	r0, r2
   15844:	4619      	mov	r1, r3
   15846:	f04f 0200 	mov.w	r2, #0
   1584a:	f04f 0300 	mov.w	r3, #0
   1584e:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   15852:	f002 f8ef 	bl	17a34 <__aeabi_dmul>
   15856:	4602      	mov	r2, r0
   15858:	460b      	mov	r3, r1
   1585a:	4610      	mov	r0, r2
   1585c:	4619      	mov	r1, r3
   1585e:	f04f 0200 	mov.w	r2, #0
   15862:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15866:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1586a:	f002 fa0d 	bl	17c88 <__aeabi_ddiv>
   1586e:	4602      	mov	r2, r0
   15870:	460b      	mov	r3, r1
   15872:	4610      	mov	r0, r2
   15874:	4619      	mov	r1, r3
   15876:	f002 fb77 	bl	17f68 <__aeabi_d2iz>
   1587a:	4603      	mov	r3, r0
   1587c:	b29b      	uxth	r3, r3
   1587e:	b29a      	uxth	r2, r3
   15880:	f24c 5314 	movw	r3, #50452	; 0xc514
   15884:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15888:	881b      	ldrh	r3, [r3, #0]
   1588a:	b29b      	uxth	r3, r3
   1588c:	4413      	add	r3, r2
   1588e:	b29b      	uxth	r3, r3
   15890:	b29a      	uxth	r2, r3
   15892:	f240 33f2 	movw	r3, #1010	; 0x3f2
   15896:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1589a:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   1589c:	f240 33f2 	movw	r3, #1010	; 0x3f2
   158a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158a4:	881b      	ldrh	r3, [r3, #0]
   158a6:	b21b      	sxth	r3, r3
   158a8:	4618      	mov	r0, r3
   158aa:	f002 fcaf 	bl	1820c <__aeabi_i2f>
   158ae:	4602      	mov	r2, r0
   158b0:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   158b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158b8:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   158ba:	f64b 63dc 	movw	r3, #48860	; 0xbedc
   158be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158c2:	781b      	ldrb	r3, [r3, #0]
   158c4:	2b02      	cmp	r3, #2
   158c6:	f040 80da 	bne.w	15a7e <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   158ca:	f24c 530c 	movw	r3, #50444	; 0xc50c
   158ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158d2:	781b      	ldrb	r3, [r3, #0]
   158d4:	2b02      	cmp	r3, #2
   158d6:	d165      	bne.n	159a4 <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   158d8:	79fb      	ldrb	r3, [r7, #7]
   158da:	2b00      	cmp	r3, #0
   158dc:	d013      	beq.n	15906 <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   158de:	f240 4308 	movw	r3, #1032	; 0x408
   158e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158e6:	681a      	ldr	r2, [r3, #0]
   158e8:	f24c 5318 	movw	r3, #50456	; 0xc518
   158ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158f0:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   158f2:	f24c 0300 	movw	r3, #49152	; 0xc000
   158f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158fa:	895a      	ldrh	r2, [r3, #10]
   158fc:	f24c 530e 	movw	r3, #50446	; 0xc50e
   15900:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15904:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15906:	f24c 5318 	movw	r3, #50456	; 0xc518
   1590a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1590e:	681b      	ldr	r3, [r3, #0]
   15910:	4618      	mov	r0, r3
   15912:	f002 f83b 	bl	1798c <__aeabi_f2d>
   15916:	4604      	mov	r4, r0
   15918:	460d      	mov	r5, r1
   1591a:	f24c 0300 	movw	r3, #49152	; 0xc000
   1591e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15922:	895b      	ldrh	r3, [r3, #10]
   15924:	b21a      	sxth	r2, r3
   15926:	f24c 530e 	movw	r3, #50446	; 0xc50e
   1592a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1592e:	881b      	ldrh	r3, [r3, #0]
   15930:	b21b      	sxth	r3, r3
   15932:	1ad3      	subs	r3, r2, r3
   15934:	4618      	mov	r0, r3
   15936:	f002 fc69 	bl	1820c <__aeabi_i2f>
   1593a:	4603      	mov	r3, r0
   1593c:	4618      	mov	r0, r3
   1593e:	f002 f825 	bl	1798c <__aeabi_f2d>
   15942:	4602      	mov	r2, r0
   15944:	460b      	mov	r3, r1
   15946:	4610      	mov	r0, r2
   15948:	4619      	mov	r1, r3
   1594a:	a34f      	add	r3, pc, #316	; (adr r3, 15a88 <inflight_calib+0x3a8>)
   1594c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15950:	f002 f870 	bl	17a34 <__aeabi_dmul>
   15954:	4602      	mov	r2, r0
   15956:	460b      	mov	r3, r1
   15958:	4610      	mov	r0, r2
   1595a:	4619      	mov	r1, r3
   1595c:	f04f 0200 	mov.w	r2, #0
   15960:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15964:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15968:	f002 f98e 	bl	17c88 <__aeabi_ddiv>
   1596c:	4602      	mov	r2, r0
   1596e:	460b      	mov	r3, r1
   15970:	4620      	mov	r0, r4
   15972:	4629      	mov	r1, r5
   15974:	f001 feac 	bl	176d0 <__adddf3>
   15978:	4602      	mov	r2, r0
   1597a:	460b      	mov	r3, r1
   1597c:	4610      	mov	r0, r2
   1597e:	4619      	mov	r1, r3
   15980:	f002 fb3a 	bl	17ff8 <__aeabi_d2f>
   15984:	4602      	mov	r2, r0
   15986:	f240 4308 	movw	r3, #1032	; 0x408
   1598a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1598e:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   15990:	f240 4308 	movw	r3, #1032	; 0x408
   15994:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15998:	681a      	ldr	r2, [r3, #0]
   1599a:	f64b 63e8 	movw	r3, #48872	; 0xbee8
   1599e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159a2:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   159a4:	f24c 530c 	movw	r3, #50444	; 0xc50c
   159a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159ac:	781b      	ldrb	r3, [r3, #0]
   159ae:	2b02      	cmp	r3, #2
   159b0:	d165      	bne.n	15a7e <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   159b2:	79fb      	ldrb	r3, [r7, #7]
   159b4:	2b00      	cmp	r3, #0
   159b6:	d013      	beq.n	159e0 <inflight_calib+0x300>
        max_roll_init = max_roll;
   159b8:	f240 430c 	movw	r3, #1036	; 0x40c
   159bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159c0:	681a      	ldr	r2, [r3, #0]
   159c2:	f24c 531c 	movw	r3, #50460	; 0xc51c
   159c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159ca:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   159cc:	f24c 0300 	movw	r3, #49152	; 0xc000
   159d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159d4:	899a      	ldrh	r2, [r3, #12]
   159d6:	f24c 5310 	movw	r3, #50448	; 0xc510
   159da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159de:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   159e0:	f24c 531c 	movw	r3, #50460	; 0xc51c
   159e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159e8:	681b      	ldr	r3, [r3, #0]
   159ea:	4618      	mov	r0, r3
   159ec:	f001 ffce 	bl	1798c <__aeabi_f2d>
   159f0:	4604      	mov	r4, r0
   159f2:	460d      	mov	r5, r1
   159f4:	f24c 0300 	movw	r3, #49152	; 0xc000
   159f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159fc:	899b      	ldrh	r3, [r3, #12]
   159fe:	b21a      	sxth	r2, r3
   15a00:	f24c 5310 	movw	r3, #50448	; 0xc510
   15a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a08:	881b      	ldrh	r3, [r3, #0]
   15a0a:	b21b      	sxth	r3, r3
   15a0c:	1ad3      	subs	r3, r2, r3
   15a0e:	4618      	mov	r0, r3
   15a10:	f002 fbfc 	bl	1820c <__aeabi_i2f>
   15a14:	4603      	mov	r3, r0
   15a16:	4618      	mov	r0, r3
   15a18:	f001 ffb8 	bl	1798c <__aeabi_f2d>
   15a1c:	4602      	mov	r2, r0
   15a1e:	460b      	mov	r3, r1
   15a20:	4610      	mov	r0, r2
   15a22:	4619      	mov	r1, r3
   15a24:	a31a      	add	r3, pc, #104	; (adr r3, 15a90 <inflight_calib+0x3b0>)
   15a26:	e9d3 2300 	ldrd	r2, r3, [r3]
   15a2a:	f002 f803 	bl	17a34 <__aeabi_dmul>
   15a2e:	4602      	mov	r2, r0
   15a30:	460b      	mov	r3, r1
   15a32:	4610      	mov	r0, r2
   15a34:	4619      	mov	r1, r3
   15a36:	f04f 0200 	mov.w	r2, #0
   15a3a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15a3e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15a42:	f002 f921 	bl	17c88 <__aeabi_ddiv>
   15a46:	4602      	mov	r2, r0
   15a48:	460b      	mov	r3, r1
   15a4a:	4620      	mov	r0, r4
   15a4c:	4629      	mov	r1, r5
   15a4e:	f001 fe3f 	bl	176d0 <__adddf3>
   15a52:	4602      	mov	r2, r0
   15a54:	460b      	mov	r3, r1
   15a56:	4610      	mov	r0, r2
   15a58:	4619      	mov	r1, r3
   15a5a:	f002 facd 	bl	17ff8 <__aeabi_d2f>
   15a5e:	4602      	mov	r2, r0
   15a60:	f240 430c 	movw	r3, #1036	; 0x40c
   15a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a68:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   15a6a:	f240 430c 	movw	r3, #1036	; 0x40c
   15a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a72:	681a      	ldr	r2, [r3, #0]
   15a74:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   15a78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a7c:	601a      	str	r2, [r3, #0]
    }
  }
}
   15a7e:	3708      	adds	r7, #8
   15a80:	46bd      	mov	sp, r7
   15a82:	bdb0      	pop	{r4, r5, r7, pc}
   15a84:	f3af 8000 	nop.w
   15a88:	9999999a 	.word	0x9999999a
   15a8c:	3fb99999 	.word	0x3fb99999
   15a90:	9999999a 	.word	0x9999999a
   15a94:	bfc99999 	.word	0xbfc99999

00015a98 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   15a98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   15a9c:	b08e      	sub	sp, #56	; 0x38
   15a9e:	af00      	add	r7, sp, #0
   15aa0:	e9c7 0102 	strd	r0, r1, [r7, #8]
   15aa4:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   15aa8:	a357      	add	r3, pc, #348	; (adr r3, 15c08 <pp_atan2+0x170>)
   15aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   15aae:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   15ab2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15ab6:	f04f 0200 	mov.w	r2, #0
   15aba:	f04f 0300 	mov.w	r3, #0
   15abe:	f2c4 0308 	movt	r3, #16392	; 0x4008
   15ac2:	f001 ffb7 	bl	17a34 <__aeabi_dmul>
   15ac6:	4602      	mov	r2, r0
   15ac8:	460b      	mov	r3, r1
   15aca:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   15ace:	e9d7 0100 	ldrd	r0, r1, [r7]
   15ad2:	f04f 0200 	mov.w	r2, #0
   15ad6:	f04f 0300 	mov.w	r3, #0
   15ada:	f002 fa1d 	bl	17f18 <__aeabi_dcmplt>
   15ade:	4603      	mov	r3, r0
   15ae0:	2b00      	cmp	r3, #0
   15ae2:	d009      	beq.n	15af8 <pp_atan2+0x60>
   15ae4:	a14a      	add	r1, pc, #296	; (adr r1, 15c10 <pp_atan2+0x178>)
   15ae6:	e9d1 0100 	ldrd	r0, r1, [r1]
   15aea:	e9d7 2300 	ldrd	r2, r3, [r7]
   15aee:	f001 fded 	bl	176cc <__aeabi_dsub>
   15af2:	4602      	mov	r2, r0
   15af4:	460b      	mov	r3, r1
   15af6:	e008      	b.n	15b0a <pp_atan2+0x72>
   15af8:	e9d7 0100 	ldrd	r0, r1, [r7]
   15afc:	a344      	add	r3, pc, #272	; (adr r3, 15c10 <pp_atan2+0x178>)
   15afe:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b02:	f001 fde5 	bl	176d0 <__adddf3>
   15b06:	4602      	mov	r2, r0
   15b08:	460b      	mov	r3, r1
   15b0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   15b0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15b12:	f04f 0200 	mov.w	r2, #0
   15b16:	f04f 0300 	mov.w	r3, #0
   15b1a:	f002 fa1b 	bl	17f54 <__aeabi_dcmpgt>
   15b1e:	4603      	mov	r3, r0
   15b20:	2b00      	cmp	r3, #0
   15b22:	d02a      	beq.n	15b7a <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   15b24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15b2c:	f001 fdce 	bl	176cc <__aeabi_dsub>
   15b30:	4602      	mov	r2, r0
   15b32:	460b      	mov	r3, r1
   15b34:	4690      	mov	r8, r2
   15b36:	4699      	mov	r9, r3
   15b38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15b40:	f001 fdc6 	bl	176d0 <__adddf3>
   15b44:	4602      	mov	r2, r0
   15b46:	460b      	mov	r3, r1
   15b48:	4640      	mov	r0, r8
   15b4a:	4649      	mov	r1, r9
   15b4c:	f002 f89c 	bl	17c88 <__aeabi_ddiv>
   15b50:	4602      	mov	r2, r0
   15b52:	460b      	mov	r3, r1
   15b54:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15b58:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15b60:	f001 ff68 	bl	17a34 <__aeabi_dmul>
   15b64:	4602      	mov	r2, r0
   15b66:	460b      	mov	r3, r1
   15b68:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b6c:	f001 fdae 	bl	176cc <__aeabi_dsub>
   15b70:	4602      	mov	r2, r0
   15b72:	460b      	mov	r3, r1
   15b74:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15b78:	e029      	b.n	15bce <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   15b7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15b7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15b82:	f001 fda5 	bl	176d0 <__adddf3>
   15b86:	4602      	mov	r2, r0
   15b88:	460b      	mov	r3, r1
   15b8a:	4690      	mov	r8, r2
   15b8c:	4699      	mov	r9, r3
   15b8e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15b92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   15b96:	f001 fd99 	bl	176cc <__aeabi_dsub>
   15b9a:	4602      	mov	r2, r0
   15b9c:	460b      	mov	r3, r1
   15b9e:	4640      	mov	r0, r8
   15ba0:	4649      	mov	r1, r9
   15ba2:	f002 f871 	bl	17c88 <__aeabi_ddiv>
   15ba6:	4602      	mov	r2, r0
   15ba8:	460b      	mov	r3, r1
   15baa:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   15bae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15bb2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15bb6:	f001 ff3d 	bl	17a34 <__aeabi_dmul>
   15bba:	4602      	mov	r2, r0
   15bbc:	460b      	mov	r3, r1
   15bbe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   15bc2:	f001 fd83 	bl	176cc <__aeabi_dsub>
   15bc6:	4602      	mov	r2, r0
   15bc8:	460b      	mov	r3, r1
   15bca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   15bce:	e9d7 0100 	ldrd	r0, r1, [r7]
   15bd2:	f04f 0200 	mov.w	r2, #0
   15bd6:	f04f 0300 	mov.w	r3, #0
   15bda:	f002 f99d 	bl	17f18 <__aeabi_dcmplt>
   15bde:	4603      	mov	r3, r0
   15be0:	2b00      	cmp	r3, #0
   15be2:	d004      	beq.n	15bee <pp_atan2+0x156>
		return (-angle);
   15be4:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15be8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15bec:	e001      	b.n	15bf2 <pp_atan2+0x15a>
	else
		return angle;
   15bee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   15bf2:	4622      	mov	r2, r4
   15bf4:	462b      	mov	r3, r5
}
   15bf6:	4610      	mov	r0, r2
   15bf8:	4619      	mov	r1, r3
   15bfa:	3738      	adds	r7, #56	; 0x38
   15bfc:	46bd      	mov	sp, r7
   15bfe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   15c02:	bf00      	nop
   15c04:	f3af 8000 	nop.w
   15c08:	54442d18 	.word	0x54442d18
   15c0c:	3fe921fb 	.word	0x3fe921fb
   15c10:	d9d7bdbb 	.word	0xd9d7bdbb
   15c14:	3ddb7cdf 	.word	0x3ddb7cdf

00015c18 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15c18:	b5b0      	push	{r4, r5, r7, lr}
   15c1a:	b08c      	sub	sp, #48	; 0x30
   15c1c:	af00      	add	r7, sp, #0
   15c1e:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   15c22:	e9d7 2300 	ldrd	r2, r3, [r7]
   15c26:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15c2a:	2301      	movs	r3, #1
   15c2c:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   15c2e:	e00a      	b.n	15c46 <pp_sin+0x2e>
   15c30:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c34:	a35a      	add	r3, pc, #360	; (adr r3, 15da0 <pp_sin+0x188>)
   15c36:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c3a:	f001 fd49 	bl	176d0 <__adddf3>
   15c3e:	4602      	mov	r2, r0
   15c40:	460b      	mov	r3, r1
   15c42:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15c46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c4a:	a357      	add	r3, pc, #348	; (adr r3, 15da8 <pp_sin+0x190>)
   15c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c50:	f002 f962 	bl	17f18 <__aeabi_dcmplt>
   15c54:	4603      	mov	r3, r0
   15c56:	2b00      	cmp	r3, #0
   15c58:	d1ea      	bne.n	15c30 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   15c5a:	e00a      	b.n	15c72 <pp_sin+0x5a>
   15c5c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c60:	a34f      	add	r3, pc, #316	; (adr r3, 15da0 <pp_sin+0x188>)
   15c62:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c66:	f001 fd31 	bl	176cc <__aeabi_dsub>
   15c6a:	4602      	mov	r2, r0
   15c6c:	460b      	mov	r3, r1
   15c6e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15c72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c76:	a34e      	add	r3, pc, #312	; (adr r3, 15db0 <pp_sin+0x198>)
   15c78:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c7c:	f002 f96a 	bl	17f54 <__aeabi_dcmpgt>
   15c80:	4603      	mov	r3, r0
   15c82:	2b00      	cmp	r3, #0
   15c84:	d1ea      	bne.n	15c5c <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   15c86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c8a:	a34b      	add	r3, pc, #300	; (adr r3, 15db8 <pp_sin+0x1a0>)
   15c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c90:	f002 f960 	bl	17f54 <__aeabi_dcmpgt>
   15c94:	4603      	mov	r3, r0
   15c96:	2b00      	cmp	r3, #0
   15c98:	d00d      	beq.n	15cb6 <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   15c9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c9e:	a348      	add	r3, pc, #288	; (adr r3, 15dc0 <pp_sin+0x1a8>)
   15ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ca4:	f001 fd12 	bl	176cc <__aeabi_dsub>
   15ca8:	4602      	mov	r2, r0
   15caa:	460b      	mov	r3, r1
   15cac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   15cb0:	f04f 33ff 	mov.w	r3, #4294967295
   15cb4:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   15cb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15cba:	a343      	add	r3, pc, #268	; (adr r3, 15dc8 <pp_sin+0x1b0>)
   15cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   15cc0:	f001 ffe2 	bl	17c88 <__aeabi_ddiv>
   15cc4:	4602      	mov	r2, r0
   15cc6:	460b      	mov	r3, r1
   15cc8:	e9c7 2306 	strd	r2, r3, [r7, #24]
   15ccc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15cd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15cd4:	f001 feae 	bl	17a34 <__aeabi_dmul>
   15cd8:	4602      	mov	r2, r0
   15cda:	460b      	mov	r3, r1
   15cdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15ce0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15ce4:	a33a      	add	r3, pc, #232	; (adr r3, 15dd0 <pp_sin+0x1b8>)
   15ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
   15cea:	f001 fea3 	bl	17a34 <__aeabi_dmul>
   15cee:	4602      	mov	r2, r0
   15cf0:	460b      	mov	r3, r1
	      - .00467376557) * q2
   15cf2:	4610      	mov	r0, r2
   15cf4:	4619      	mov	r1, r3
   15cf6:	a338      	add	r3, pc, #224	; (adr r3, 15dd8 <pp_sin+0x1c0>)
   15cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   15cfc:	f001 fce6 	bl	176cc <__aeabi_dsub>
   15d00:	4602      	mov	r2, r0
   15d02:	460b      	mov	r3, r1
   15d04:	4610      	mov	r0, r2
   15d06:	4619      	mov	r1, r3
   15d08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15d0c:	f001 fe92 	bl	17a34 <__aeabi_dmul>
   15d10:	4602      	mov	r2, r0
   15d12:	460b      	mov	r3, r1
	      + .07968967928) * q2
   15d14:	4610      	mov	r0, r2
   15d16:	4619      	mov	r1, r3
   15d18:	a331      	add	r3, pc, #196	; (adr r3, 15de0 <pp_sin+0x1c8>)
   15d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d1e:	f001 fcd7 	bl	176d0 <__adddf3>
   15d22:	4602      	mov	r2, r0
   15d24:	460b      	mov	r3, r1
   15d26:	4610      	mov	r0, r2
   15d28:	4619      	mov	r1, r3
   15d2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15d2e:	f001 fe81 	bl	17a34 <__aeabi_dmul>
   15d32:	4602      	mov	r2, r0
   15d34:	460b      	mov	r3, r1
	      - .64596371106) * q2
   15d36:	4610      	mov	r0, r2
   15d38:	4619      	mov	r1, r3
   15d3a:	a32b      	add	r3, pc, #172	; (adr r3, 15de8 <pp_sin+0x1d0>)
   15d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d40:	f001 fcc4 	bl	176cc <__aeabi_dsub>
   15d44:	4602      	mov	r2, r0
   15d46:	460b      	mov	r3, r1
   15d48:	4610      	mov	r0, r2
   15d4a:	4619      	mov	r1, r3
   15d4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15d50:	f001 fe70 	bl	17a34 <__aeabi_dmul>
   15d54:	4602      	mov	r2, r0
   15d56:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15d58:	4610      	mov	r0, r2
   15d5a:	4619      	mov	r1, r3
   15d5c:	a324      	add	r3, pc, #144	; (adr r3, 15df0 <pp_sin+0x1d8>)
   15d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d62:	f001 fcb5 	bl	176d0 <__adddf3>
   15d66:	4602      	mov	r2, r0
   15d68:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   15d6a:	4610      	mov	r0, r2
   15d6c:	4619      	mov	r1, r3
   15d6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15d72:	f001 fe5f 	bl	17a34 <__aeabi_dmul>
   15d76:	4602      	mov	r2, r0
   15d78:	460b      	mov	r3, r1
   15d7a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   15d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15d80:	2b00      	cmp	r3, #0
   15d82:	da04      	bge.n	15d8e <pp_sin+0x176>
   15d84:	68bc      	ldr	r4, [r7, #8]
   15d86:	68fb      	ldr	r3, [r7, #12]
   15d88:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15d8c:	e001      	b.n	15d92 <pp_sin+0x17a>
   15d8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   15d92:	4622      	mov	r2, r4
   15d94:	462b      	mov	r3, r5
}
   15d96:	4610      	mov	r0, r2
   15d98:	4619      	mov	r1, r3
   15d9a:	3730      	adds	r7, #48	; 0x30
   15d9c:	46bd      	mov	sp, r7
   15d9e:	bdb0      	pop	{r4, r5, r7, pc}
   15da0:	54442d18 	.word	0x54442d18
   15da4:	401921fb 	.word	0x401921fb
   15da8:	54442d18 	.word	0x54442d18
   15dac:	bff921fb 	.word	0xbff921fb
   15db0:	7f3321d2 	.word	0x7f3321d2
   15db4:	4012d97c 	.word	0x4012d97c
   15db8:	54442d18 	.word	0x54442d18
   15dbc:	3ff921fb 	.word	0x3ff921fb
   15dc0:	54442d18 	.word	0x54442d18
   15dc4:	400921fb 	.word	0x400921fb
   15dc8:	5443d6f4 	.word	0x5443d6f4
   15dcc:	3ff921fb 	.word	0x3ff921fb
   15dd0:	48a890af 	.word	0x48a890af
   15dd4:	3f23daf7 	.word	0x3f23daf7
   15dd8:	645b6d0e 	.word	0x645b6d0e
   15ddc:	3f7324cc 	.word	0x3f7324cc
   15de0:	f65619a5 	.word	0xf65619a5
   15de4:	3fb4668a 	.word	0x3fb4668a
   15de8:	16acf9cd 	.word	0x16acf9cd
   15dec:	3fe4abbc 	.word	0x3fe4abbc
   15df0:	520817f7 	.word	0x520817f7
   15df4:	3ff921fb 	.word	0x3ff921fb

00015df8 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   15df8:	b480      	push	{r7}
   15dfa:	b083      	sub	sp, #12
   15dfc:	af00      	add	r7, sp, #0
   15dfe:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   15e02:	4610      	mov	r0, r2
   15e04:	4619      	mov	r1, r3
   15e06:	370c      	adds	r7, #12
   15e08:	46bd      	mov	sp, r7
   15e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
   15e0e:	4770      	bx	lr

00015e10 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   15e10:	b480      	push	{r7}
   15e12:	b083      	sub	sp, #12
   15e14:	af00      	add	r7, sp, #0
   15e16:	4603      	mov	r3, r0
   15e18:	6039      	str	r1, [r7, #0]
   15e1a:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   15e1c:	79fa      	ldrb	r2, [r7, #7]
   15e1e:	f24c 5330 	movw	r3, #50480	; 0xc530
   15e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15e26:	6839      	ldr	r1, [r7, #0]
   15e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   15e2c:	370c      	adds	r7, #12
   15e2e:	46bd      	mov	sp, r7
   15e30:	f85d 7b04 	ldr.w	r7, [sp], #4
   15e34:	4770      	bx	lr
   15e36:	bf00      	nop

00015e38 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   15e38:	b480      	push	{r7}
   15e3a:	b083      	sub	sp, #12
   15e3c:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   15e3e:	f242 0315 	movw	r3, #8213	; 0x2015
   15e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e46:	2200      	movs	r2, #0
   15e48:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   15e4a:	f242 0314 	movw	r3, #8212	; 0x2014
   15e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e52:	2200      	movs	r2, #0
   15e54:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   15e56:	f242 0307 	movw	r3, #8199	; 0x2007
   15e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e5e:	22c0      	movs	r2, #192	; 0xc0
   15e60:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   15e62:	f242 0306 	movw	r3, #8198	; 0x2006
   15e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e6a:	22cf      	movs	r2, #207	; 0xcf
   15e6c:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15e6e:	2300      	movs	r3, #0
   15e70:	71fb      	strb	r3, [r7, #7]
   15e72:	e00a      	b.n	15e8a <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   15e74:	79fa      	ldrb	r2, [r7, #7]
   15e76:	f24c 5330 	movw	r3, #50480	; 0xc530
   15e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15e7e:	2100      	movs	r1, #0
   15e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15e84:	79fb      	ldrb	r3, [r7, #7]
   15e86:	3301      	adds	r3, #1
   15e88:	71fb      	strb	r3, [r7, #7]
   15e8a:	79fb      	ldrb	r3, [r7, #7]
   15e8c:	2b07      	cmp	r3, #7
   15e8e:	d9f1      	bls.n	15e74 <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   15e90:	370c      	adds	r7, #12
   15e92:	46bd      	mov	sp, r7
   15e94:	f85d 7b04 	ldr.w	r7, [sp], #4
   15e98:	4770      	bx	lr
   15e9a:	bf00      	nop

00015e9c <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   15e9c:	b480      	push	{r7}
   15e9e:	b083      	sub	sp, #12
   15ea0:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   15ea2:	f242 0326 	movw	r3, #8230	; 0x2026
   15ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15eaa:	881b      	ldrh	r3, [r3, #0]
   15eac:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   15eae:	f24c 538c 	movw	r3, #50572	; 0xc58c
   15eb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15eb6:	881b      	ldrh	r3, [r3, #0]
   15eb8:	88fa      	ldrh	r2, [r7, #6]
   15eba:	1ad3      	subs	r3, r2, r3
   15ebc:	80bb      	strh	r3, [r7, #4]
  last		= this;
   15ebe:	f24c 538c 	movw	r3, #50572	; 0xc58c
   15ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ec6:	88fa      	ldrh	r2, [r7, #6]
   15ec8:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   15eca:	f24c 538e 	movw	r3, #50574	; 0xc58e
   15ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ed2:	781b      	ldrb	r3, [r3, #0]
   15ed4:	2b00      	cmp	r3, #0
   15ed6:	d11e      	bne.n	15f16 <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   15ed8:	f242 0324 	movw	r3, #8228	; 0x2024
   15edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ee0:	781b      	ldrb	r3, [r3, #0]
   15ee2:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   15ee4:	f24c 538f 	movw	r3, #50575	; 0xc58f
   15ee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15eec:	781b      	ldrb	r3, [r3, #0]
   15eee:	78fa      	ldrb	r2, [r7, #3]
   15ef0:	1ad3      	subs	r3, r2, r3
   15ef2:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   15ef4:	f24c 538f 	movw	r3, #50575	; 0xc58f
   15ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15efc:	78fa      	ldrb	r2, [r7, #3]
   15efe:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   15f00:	78bb      	ldrb	r3, [r7, #2]
   15f02:	2b6d      	cmp	r3, #109	; 0x6d
   15f04:	d906      	bls.n	15f14 <__vector_34+0x78>
      state = 1;
   15f06:	f24c 538e 	movw	r3, #50574	; 0xc58e
   15f0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f0e:	2201      	movs	r2, #1
   15f10:	701a      	strb	r2, [r3, #0]
   15f12:	e053      	b.n	15fbc <__vector_34+0x120>
   15f14:	e052      	b.n	15fbc <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   15f16:	88bb      	ldrh	r3, [r7, #4]
   15f18:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   15f1c:	d304      	bcc.n	15f28 <__vector_34+0x8c>
   15f1e:	88ba      	ldrh	r2, [r7, #4]
   15f20:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   15f24:	429a      	cmp	r2, r3
   15f26:	d911      	bls.n	15f4c <__vector_34+0xb0>
      RestartPpmCycle();
   15f28:	f24c 538e 	movw	r3, #50574	; 0xc58e
   15f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f30:	2200      	movs	r2, #0
   15f32:	701a      	strb	r2, [r3, #0]
   15f34:	f242 0324 	movw	r3, #8228	; 0x2024
   15f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f3c:	781b      	ldrb	r3, [r3, #0]
   15f3e:	b2da      	uxtb	r2, r3
   15f40:	f24c 538f 	movw	r3, #50575	; 0xc58f
   15f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f48:	701a      	strb	r2, [r3, #0]
   15f4a:	e038      	b.n	15fbe <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   15f4c:	f24c 538e 	movw	r3, #50574	; 0xc58e
   15f50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f54:	781b      	ldrb	r3, [r3, #0]
   15f56:	1e5a      	subs	r2, r3, #1
   15f58:	f24c 5350 	movw	r3, #50512	; 0xc550
   15f5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f60:	88b9      	ldrh	r1, [r7, #4]
   15f62:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   15f66:	f24c 538e 	movw	r3, #50574	; 0xc58e
   15f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f6e:	781b      	ldrb	r3, [r3, #0]
   15f70:	2b08      	cmp	r3, #8
   15f72:	d917      	bls.n	15fa4 <__vector_34+0x108>
      ppm_valid	= 1;
   15f74:	f24c 538b 	movw	r3, #50571	; 0xc58b
   15f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f7c:	2201      	movs	r2, #1
   15f7e:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   15f80:	f24c 538e 	movw	r3, #50574	; 0xc58e
   15f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f88:	2200      	movs	r2, #0
   15f8a:	701a      	strb	r2, [r3, #0]
   15f8c:	f242 0324 	movw	r3, #8228	; 0x2024
   15f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f94:	781b      	ldrb	r3, [r3, #0]
   15f96:	b2da      	uxtb	r2, r3
   15f98:	f24c 538f 	movw	r3, #50575	; 0xc58f
   15f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fa0:	701a      	strb	r2, [r3, #0]
   15fa2:	e00c      	b.n	15fbe <__vector_34+0x122>
    } else 
      state++;
   15fa4:	f24c 538e 	movw	r3, #50574	; 0xc58e
   15fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fac:	781b      	ldrb	r3, [r3, #0]
   15fae:	3301      	adds	r3, #1
   15fb0:	b2da      	uxtb	r2, r3
   15fb2:	f24c 538e 	movw	r3, #50574	; 0xc58e
   15fb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fba:	701a      	strb	r2, [r3, #0]
  }
  return;
   15fbc:	bf00      	nop
}
   15fbe:	370c      	adds	r7, #12
   15fc0:	46bd      	mov	sp, r7
   15fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
   15fc6:	4770      	bx	lr

00015fc8 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   15fc8:	b590      	push	{r4, r7, lr}
   15fca:	b083      	sub	sp, #12
   15fcc:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   15fce:	f24c 5350 	movw	r3, #50512	; 0xc550
   15fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fd6:	881b      	ldrh	r3, [r3, #0]
   15fd8:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   15fdc:	b29b      	uxth	r3, r3
   15fde:	80fb      	strh	r3, [r7, #6]
   15fe0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15fe4:	4618      	mov	r0, r3
   15fe6:	f002 f911 	bl	1820c <__aeabi_i2f>
   15fea:	4603      	mov	r3, r0
   15fec:	4618      	mov	r0, r3
   15fee:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   15ff2:	f002 f95f 	bl	182b4 <__aeabi_fmul>
   15ff6:	4603      	mov	r3, r0
   15ff8:	4618      	mov	r0, r3
   15ffa:	f002 fb21 	bl	18640 <__aeabi_f2iz>
   15ffe:	4603      	mov	r3, r0
   16000:	b29a      	uxth	r2, r3
   16002:	f24c 5364 	movw	r3, #50532	; 0xc564
   16006:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1600a:	801a      	strh	r2, [r3, #0]
   1600c:	f24c 5364 	movw	r3, #50532	; 0xc564
   16010:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16014:	881b      	ldrh	r3, [r3, #0]
   16016:	b21b      	sxth	r3, r3
   16018:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1601c:	dd07      	ble.n	1602e <last_radio_from_ppm+0x66>
   1601e:	f24c 5364 	movw	r3, #50532	; 0xc564
   16022:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16026:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1602a:	801a      	strh	r2, [r3, #0]
   1602c:	e00d      	b.n	1604a <last_radio_from_ppm+0x82>
   1602e:	f24c 5364 	movw	r3, #50532	; 0xc564
   16032:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16036:	881b      	ldrh	r3, [r3, #0]
   16038:	b21b      	sxth	r3, r3
   1603a:	2b00      	cmp	r3, #0
   1603c:	da05      	bge.n	1604a <last_radio_from_ppm+0x82>
   1603e:	f24c 5364 	movw	r3, #50532	; 0xc564
   16042:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16046:	2200      	movs	r2, #0
   16048:	801a      	strh	r2, [r3, #0]
   1604a:	f24c 5350 	movw	r3, #50512	; 0xc550
   1604e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16052:	885b      	ldrh	r3, [r3, #2]
   16054:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16058:	b29b      	uxth	r3, r3
   1605a:	80fb      	strh	r3, [r7, #6]
   1605c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16060:	4618      	mov	r0, r3
   16062:	f002 f8d3 	bl	1820c <__aeabi_i2f>
   16066:	4603      	mov	r3, r0
   16068:	4618      	mov	r0, r3
   1606a:	f002 fae9 	bl	18640 <__aeabi_f2iz>
   1606e:	4603      	mov	r3, r0
   16070:	b29a      	uxth	r2, r3
   16072:	f24c 5364 	movw	r3, #50532	; 0xc564
   16076:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1607a:	805a      	strh	r2, [r3, #2]
   1607c:	f24c 5364 	movw	r3, #50532	; 0xc564
   16080:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16084:	885b      	ldrh	r3, [r3, #2]
   16086:	b21b      	sxth	r3, r3
   16088:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1608c:	dd07      	ble.n	1609e <last_radio_from_ppm+0xd6>
   1608e:	f24c 5364 	movw	r3, #50532	; 0xc564
   16092:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16096:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1609a:	805a      	strh	r2, [r3, #2]
   1609c:	e00f      	b.n	160be <last_radio_from_ppm+0xf6>
   1609e:	f24c 5364 	movw	r3, #50532	; 0xc564
   160a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160a6:	885b      	ldrh	r3, [r3, #2]
   160a8:	b21b      	sxth	r3, r3
   160aa:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   160ae:	da06      	bge.n	160be <last_radio_from_ppm+0xf6>
   160b0:	f24c 5364 	movw	r3, #50532	; 0xc564
   160b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160b8:	f64d 2280 	movw	r2, #55936	; 0xda80
   160bc:	805a      	strh	r2, [r3, #2]
   160be:	f24c 5350 	movw	r3, #50512	; 0xc550
   160c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160c6:	889b      	ldrh	r3, [r3, #4]
   160c8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   160cc:	b29b      	uxth	r3, r3
   160ce:	80fb      	strh	r3, [r7, #6]
   160d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   160d4:	4618      	mov	r0, r3
   160d6:	f002 f899 	bl	1820c <__aeabi_i2f>
   160da:	4603      	mov	r3, r0
   160dc:	4618      	mov	r0, r3
   160de:	f002 faaf 	bl	18640 <__aeabi_f2iz>
   160e2:	4603      	mov	r3, r0
   160e4:	b29a      	uxth	r2, r3
   160e6:	f24c 5364 	movw	r3, #50532	; 0xc564
   160ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160ee:	809a      	strh	r2, [r3, #4]
   160f0:	f24c 5364 	movw	r3, #50532	; 0xc564
   160f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160f8:	889b      	ldrh	r3, [r3, #4]
   160fa:	b21b      	sxth	r3, r3
   160fc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16100:	dd07      	ble.n	16112 <last_radio_from_ppm+0x14a>
   16102:	f24c 5364 	movw	r3, #50532	; 0xc564
   16106:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1610a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1610e:	809a      	strh	r2, [r3, #4]
   16110:	e00f      	b.n	16132 <last_radio_from_ppm+0x16a>
   16112:	f24c 5364 	movw	r3, #50532	; 0xc564
   16116:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1611a:	889b      	ldrh	r3, [r3, #4]
   1611c:	b21b      	sxth	r3, r3
   1611e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16122:	da06      	bge.n	16132 <last_radio_from_ppm+0x16a>
   16124:	f24c 5364 	movw	r3, #50532	; 0xc564
   16128:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1612c:	f64d 2280 	movw	r2, #55936	; 0xda80
   16130:	809a      	strh	r2, [r3, #4]
   16132:	f24c 5350 	movw	r3, #50512	; 0xc550
   16136:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1613a:	88db      	ldrh	r3, [r3, #6]
   1613c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16140:	b29b      	uxth	r3, r3
   16142:	80fb      	strh	r3, [r7, #6]
   16144:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16148:	4618      	mov	r0, r3
   1614a:	f002 f85f 	bl	1820c <__aeabi_i2f>
   1614e:	4603      	mov	r3, r0
   16150:	4618      	mov	r0, r3
   16152:	f002 fa75 	bl	18640 <__aeabi_f2iz>
   16156:	4603      	mov	r3, r0
   16158:	b29a      	uxth	r2, r3
   1615a:	f24c 5364 	movw	r3, #50532	; 0xc564
   1615e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16162:	80da      	strh	r2, [r3, #6]
   16164:	f24c 5364 	movw	r3, #50532	; 0xc564
   16168:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1616c:	88db      	ldrh	r3, [r3, #6]
   1616e:	b21b      	sxth	r3, r3
   16170:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16174:	dd07      	ble.n	16186 <last_radio_from_ppm+0x1be>
   16176:	f24c 5364 	movw	r3, #50532	; 0xc564
   1617a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1617e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16182:	80da      	strh	r2, [r3, #6]
   16184:	e00f      	b.n	161a6 <last_radio_from_ppm+0x1de>
   16186:	f24c 5364 	movw	r3, #50532	; 0xc564
   1618a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1618e:	88db      	ldrh	r3, [r3, #6]
   16190:	b21b      	sxth	r3, r3
   16192:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16196:	da06      	bge.n	161a6 <last_radio_from_ppm+0x1de>
   16198:	f24c 5364 	movw	r3, #50532	; 0xc564
   1619c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161a0:	f64d 2280 	movw	r2, #55936	; 0xda80
   161a4:	80da      	strh	r2, [r3, #6]
   161a6:	f24c 5350 	movw	r3, #50512	; 0xc550
   161aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161ae:	891b      	ldrh	r3, [r3, #8]
   161b0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   161b4:	b29b      	uxth	r3, r3
   161b6:	80fb      	strh	r3, [r7, #6]
   161b8:	f24c 5378 	movw	r3, #50552	; 0xc578
   161bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161c0:	891b      	ldrh	r3, [r3, #8]
   161c2:	b21b      	sxth	r3, r3
   161c4:	4618      	mov	r0, r3
   161c6:	f002 f821 	bl	1820c <__aeabi_i2f>
   161ca:	4604      	mov	r4, r0
   161cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   161d0:	4618      	mov	r0, r3
   161d2:	f002 f81b 	bl	1820c <__aeabi_i2f>
   161d6:	4603      	mov	r3, r0
   161d8:	4618      	mov	r0, r3
   161da:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   161de:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   161e2:	f002 f867 	bl	182b4 <__aeabi_fmul>
   161e6:	4603      	mov	r3, r0
   161e8:	4620      	mov	r0, r4
   161ea:	4619      	mov	r1, r3
   161ec:	f001 ff5a 	bl	180a4 <__addsf3>
   161f0:	4603      	mov	r3, r0
   161f2:	4618      	mov	r0, r3
   161f4:	f002 fa24 	bl	18640 <__aeabi_f2iz>
   161f8:	4603      	mov	r3, r0
   161fa:	b29a      	uxth	r2, r3
   161fc:	f24c 5378 	movw	r3, #50552	; 0xc578
   16200:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16204:	811a      	strh	r2, [r3, #8]
   16206:	f24c 5350 	movw	r3, #50512	; 0xc550
   1620a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1620e:	895b      	ldrh	r3, [r3, #10]
   16210:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16214:	b29b      	uxth	r3, r3
   16216:	80fb      	strh	r3, [r7, #6]
   16218:	f24c 5378 	movw	r3, #50552	; 0xc578
   1621c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16220:	895b      	ldrh	r3, [r3, #10]
   16222:	b21b      	sxth	r3, r3
   16224:	4618      	mov	r0, r3
   16226:	f001 fff1 	bl	1820c <__aeabi_i2f>
   1622a:	4604      	mov	r4, r0
   1622c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16230:	4618      	mov	r0, r3
   16232:	f001 ffeb 	bl	1820c <__aeabi_i2f>
   16236:	4603      	mov	r3, r0
   16238:	4618      	mov	r0, r3
   1623a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1623e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16242:	f002 f837 	bl	182b4 <__aeabi_fmul>
   16246:	4603      	mov	r3, r0
   16248:	4620      	mov	r0, r4
   1624a:	4619      	mov	r1, r3
   1624c:	f001 ff2a 	bl	180a4 <__addsf3>
   16250:	4603      	mov	r3, r0
   16252:	4618      	mov	r0, r3
   16254:	f002 f9f4 	bl	18640 <__aeabi_f2iz>
   16258:	4603      	mov	r3, r0
   1625a:	b29a      	uxth	r2, r3
   1625c:	f24c 5378 	movw	r3, #50552	; 0xc578
   16260:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16264:	815a      	strh	r2, [r3, #10]
   16266:	f24c 5350 	movw	r3, #50512	; 0xc550
   1626a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1626e:	899b      	ldrh	r3, [r3, #12]
   16270:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16274:	b29b      	uxth	r3, r3
   16276:	80fb      	strh	r3, [r7, #6]
   16278:	f24c 5378 	movw	r3, #50552	; 0xc578
   1627c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16280:	899b      	ldrh	r3, [r3, #12]
   16282:	b21b      	sxth	r3, r3
   16284:	4618      	mov	r0, r3
   16286:	f001 ffc1 	bl	1820c <__aeabi_i2f>
   1628a:	4604      	mov	r4, r0
   1628c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16290:	4618      	mov	r0, r3
   16292:	f001 ffbb 	bl	1820c <__aeabi_i2f>
   16296:	4603      	mov	r3, r0
   16298:	4618      	mov	r0, r3
   1629a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1629e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   162a2:	f002 f807 	bl	182b4 <__aeabi_fmul>
   162a6:	4603      	mov	r3, r0
   162a8:	4620      	mov	r0, r4
   162aa:	4619      	mov	r1, r3
   162ac:	f001 fefa 	bl	180a4 <__addsf3>
   162b0:	4603      	mov	r3, r0
   162b2:	4618      	mov	r0, r3
   162b4:	f002 f9c4 	bl	18640 <__aeabi_f2iz>
   162b8:	4603      	mov	r3, r0
   162ba:	b29a      	uxth	r2, r3
   162bc:	f24c 5378 	movw	r3, #50552	; 0xc578
   162c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162c4:	819a      	strh	r2, [r3, #12]
   162c6:	f24c 5350 	movw	r3, #50512	; 0xc550
   162ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162ce:	89db      	ldrh	r3, [r3, #14]
   162d0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   162d4:	b29b      	uxth	r3, r3
   162d6:	80fb      	strh	r3, [r7, #6]
   162d8:	f24c 5378 	movw	r3, #50552	; 0xc578
   162dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162e0:	89db      	ldrh	r3, [r3, #14]
   162e2:	b21b      	sxth	r3, r3
   162e4:	4618      	mov	r0, r3
   162e6:	f001 ff91 	bl	1820c <__aeabi_i2f>
   162ea:	4604      	mov	r4, r0
   162ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   162f0:	4618      	mov	r0, r3
   162f2:	f001 ff8b 	bl	1820c <__aeabi_i2f>
   162f6:	4603      	mov	r3, r0
   162f8:	4618      	mov	r0, r3
   162fa:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   162fe:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16302:	f001 ffd7 	bl	182b4 <__aeabi_fmul>
   16306:	4603      	mov	r3, r0
   16308:	4620      	mov	r0, r4
   1630a:	4619      	mov	r1, r3
   1630c:	f001 feca 	bl	180a4 <__addsf3>
   16310:	4603      	mov	r3, r0
   16312:	4618      	mov	r0, r3
   16314:	f002 f994 	bl	18640 <__aeabi_f2iz>
   16318:	4603      	mov	r3, r0
   1631a:	b29a      	uxth	r2, r3
   1631c:	f24c 5378 	movw	r3, #50552	; 0xc578
   16320:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16324:	81da      	strh	r2, [r3, #14]
   16326:	f24c 5350 	movw	r3, #50512	; 0xc550
   1632a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1632e:	8a1b      	ldrh	r3, [r3, #16]
   16330:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16334:	b29b      	uxth	r3, r3
   16336:	80fb      	strh	r3, [r7, #6]
   16338:	f24c 5378 	movw	r3, #50552	; 0xc578
   1633c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16340:	8a1b      	ldrh	r3, [r3, #16]
   16342:	b21b      	sxth	r3, r3
   16344:	4618      	mov	r0, r3
   16346:	f001 ff61 	bl	1820c <__aeabi_i2f>
   1634a:	4604      	mov	r4, r0
   1634c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16350:	4618      	mov	r0, r3
   16352:	f001 ff5b 	bl	1820c <__aeabi_i2f>
   16356:	4603      	mov	r3, r0
   16358:	4618      	mov	r0, r3
   1635a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1635e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16362:	f001 ffa7 	bl	182b4 <__aeabi_fmul>
   16366:	4603      	mov	r3, r0
   16368:	4620      	mov	r0, r4
   1636a:	4619      	mov	r1, r3
   1636c:	f001 fe9a 	bl	180a4 <__addsf3>
   16370:	4603      	mov	r3, r0
   16372:	4618      	mov	r0, r3
   16374:	f002 f964 	bl	18640 <__aeabi_f2iz>
   16378:	4603      	mov	r3, r0
   1637a:	b29a      	uxth	r2, r3
   1637c:	f24c 5378 	movw	r3, #50552	; 0xc578
   16380:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16384:	821a      	strh	r2, [r3, #16]
   16386:	f24c 5390 	movw	r3, #50576	; 0xc590
   1638a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1638e:	781b      	ldrb	r3, [r3, #0]
   16390:	3301      	adds	r3, #1
   16392:	b2da      	uxtb	r2, r3
   16394:	f24c 5390 	movw	r3, #50576	; 0xc590
   16398:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1639c:	701a      	strb	r2, [r3, #0]
   1639e:	f24c 5390 	movw	r3, #50576	; 0xc590
   163a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163a6:	781b      	ldrb	r3, [r3, #0]
   163a8:	2b0a      	cmp	r3, #10
   163aa:	f040 8101 	bne.w	165b0 <last_radio_from_ppm+0x5e8>
   163ae:	f24c 5390 	movw	r3, #50576	; 0xc590
   163b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163b6:	2200      	movs	r2, #0
   163b8:	701a      	strb	r2, [r3, #0]
   163ba:	f24c 5378 	movw	r3, #50552	; 0xc578
   163be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163c2:	891a      	ldrh	r2, [r3, #8]
   163c4:	f24c 5364 	movw	r3, #50532	; 0xc564
   163c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163cc:	811a      	strh	r2, [r3, #8]
   163ce:	f24c 5378 	movw	r3, #50552	; 0xc578
   163d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163d6:	2200      	movs	r2, #0
   163d8:	811a      	strh	r2, [r3, #8]
   163da:	f24c 5364 	movw	r3, #50532	; 0xc564
   163de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163e2:	891b      	ldrh	r3, [r3, #8]
   163e4:	b21b      	sxth	r3, r3
   163e6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   163ea:	dd07      	ble.n	163fc <last_radio_from_ppm+0x434>
   163ec:	f24c 5364 	movw	r3, #50532	; 0xc564
   163f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   163f8:	811a      	strh	r2, [r3, #8]
   163fa:	e00f      	b.n	1641c <last_radio_from_ppm+0x454>
   163fc:	f24c 5364 	movw	r3, #50532	; 0xc564
   16400:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16404:	891b      	ldrh	r3, [r3, #8]
   16406:	b21b      	sxth	r3, r3
   16408:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1640c:	da06      	bge.n	1641c <last_radio_from_ppm+0x454>
   1640e:	f24c 5364 	movw	r3, #50532	; 0xc564
   16412:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16416:	f64d 2280 	movw	r2, #55936	; 0xda80
   1641a:	811a      	strh	r2, [r3, #8]
   1641c:	f24c 5378 	movw	r3, #50552	; 0xc578
   16420:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16424:	895a      	ldrh	r2, [r3, #10]
   16426:	f24c 5364 	movw	r3, #50532	; 0xc564
   1642a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1642e:	815a      	strh	r2, [r3, #10]
   16430:	f24c 5378 	movw	r3, #50552	; 0xc578
   16434:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16438:	2200      	movs	r2, #0
   1643a:	815a      	strh	r2, [r3, #10]
   1643c:	f24c 5364 	movw	r3, #50532	; 0xc564
   16440:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16444:	895b      	ldrh	r3, [r3, #10]
   16446:	b21b      	sxth	r3, r3
   16448:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1644c:	dd07      	ble.n	1645e <last_radio_from_ppm+0x496>
   1644e:	f24c 5364 	movw	r3, #50532	; 0xc564
   16452:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16456:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1645a:	815a      	strh	r2, [r3, #10]
   1645c:	e00f      	b.n	1647e <last_radio_from_ppm+0x4b6>
   1645e:	f24c 5364 	movw	r3, #50532	; 0xc564
   16462:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16466:	895b      	ldrh	r3, [r3, #10]
   16468:	b21b      	sxth	r3, r3
   1646a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1646e:	da06      	bge.n	1647e <last_radio_from_ppm+0x4b6>
   16470:	f24c 5364 	movw	r3, #50532	; 0xc564
   16474:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16478:	f64d 2280 	movw	r2, #55936	; 0xda80
   1647c:	815a      	strh	r2, [r3, #10]
   1647e:	f24c 5378 	movw	r3, #50552	; 0xc578
   16482:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16486:	899a      	ldrh	r2, [r3, #12]
   16488:	f24c 5364 	movw	r3, #50532	; 0xc564
   1648c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16490:	819a      	strh	r2, [r3, #12]
   16492:	f24c 5378 	movw	r3, #50552	; 0xc578
   16496:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1649a:	2200      	movs	r2, #0
   1649c:	819a      	strh	r2, [r3, #12]
   1649e:	f24c 5364 	movw	r3, #50532	; 0xc564
   164a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164a6:	899b      	ldrh	r3, [r3, #12]
   164a8:	b21b      	sxth	r3, r3
   164aa:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   164ae:	dd07      	ble.n	164c0 <last_radio_from_ppm+0x4f8>
   164b0:	f24c 5364 	movw	r3, #50532	; 0xc564
   164b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   164bc:	819a      	strh	r2, [r3, #12]
   164be:	e00f      	b.n	164e0 <last_radio_from_ppm+0x518>
   164c0:	f24c 5364 	movw	r3, #50532	; 0xc564
   164c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164c8:	899b      	ldrh	r3, [r3, #12]
   164ca:	b21b      	sxth	r3, r3
   164cc:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   164d0:	da06      	bge.n	164e0 <last_radio_from_ppm+0x518>
   164d2:	f24c 5364 	movw	r3, #50532	; 0xc564
   164d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164da:	f64d 2280 	movw	r2, #55936	; 0xda80
   164de:	819a      	strh	r2, [r3, #12]
   164e0:	f24c 5378 	movw	r3, #50552	; 0xc578
   164e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164e8:	89da      	ldrh	r2, [r3, #14]
   164ea:	f24c 5364 	movw	r3, #50532	; 0xc564
   164ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164f2:	81da      	strh	r2, [r3, #14]
   164f4:	f24c 5378 	movw	r3, #50552	; 0xc578
   164f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164fc:	2200      	movs	r2, #0
   164fe:	81da      	strh	r2, [r3, #14]
   16500:	f24c 5364 	movw	r3, #50532	; 0xc564
   16504:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16508:	89db      	ldrh	r3, [r3, #14]
   1650a:	b21b      	sxth	r3, r3
   1650c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16510:	dd07      	ble.n	16522 <last_radio_from_ppm+0x55a>
   16512:	f24c 5364 	movw	r3, #50532	; 0xc564
   16516:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1651a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1651e:	81da      	strh	r2, [r3, #14]
   16520:	e00f      	b.n	16542 <last_radio_from_ppm+0x57a>
   16522:	f24c 5364 	movw	r3, #50532	; 0xc564
   16526:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1652a:	89db      	ldrh	r3, [r3, #14]
   1652c:	b21b      	sxth	r3, r3
   1652e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16532:	da06      	bge.n	16542 <last_radio_from_ppm+0x57a>
   16534:	f24c 5364 	movw	r3, #50532	; 0xc564
   16538:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1653c:	f64d 2280 	movw	r2, #55936	; 0xda80
   16540:	81da      	strh	r2, [r3, #14]
   16542:	f24c 5378 	movw	r3, #50552	; 0xc578
   16546:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1654a:	8a1a      	ldrh	r2, [r3, #16]
   1654c:	f24c 5364 	movw	r3, #50532	; 0xc564
   16550:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16554:	821a      	strh	r2, [r3, #16]
   16556:	f24c 5378 	movw	r3, #50552	; 0xc578
   1655a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1655e:	2200      	movs	r2, #0
   16560:	821a      	strh	r2, [r3, #16]
   16562:	f24c 5364 	movw	r3, #50532	; 0xc564
   16566:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1656a:	8a1b      	ldrh	r3, [r3, #16]
   1656c:	b21b      	sxth	r3, r3
   1656e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16572:	dd07      	ble.n	16584 <last_radio_from_ppm+0x5bc>
   16574:	f24c 5364 	movw	r3, #50532	; 0xc564
   16578:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1657c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16580:	821a      	strh	r2, [r3, #16]
   16582:	e00f      	b.n	165a4 <last_radio_from_ppm+0x5dc>
   16584:	f24c 5364 	movw	r3, #50532	; 0xc564
   16588:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1658c:	8a1b      	ldrh	r3, [r3, #16]
   1658e:	b21b      	sxth	r3, r3
   16590:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16594:	da06      	bge.n	165a4 <last_radio_from_ppm+0x5dc>
   16596:	f24c 5364 	movw	r3, #50532	; 0xc564
   1659a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1659e:	f64d 2280 	movw	r2, #55936	; 0xda80
   165a2:	821a      	strh	r2, [r3, #16]
   165a4:	f24c 538a 	movw	r3, #50570	; 0xc58a
   165a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165ac:	2201      	movs	r2, #1
   165ae:	701a      	strb	r2, [r3, #0]
}
   165b0:	370c      	adds	r7, #12
   165b2:	46bd      	mov	sp, r7
   165b4:	bd90      	pop	{r4, r7, pc}
   165b6:	bf00      	nop

000165b8 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   165b8:	b480      	push	{r7}
   165ba:	af00      	add	r7, sp, #0
  idx_buf = 0;
   165bc:	f24c 53c4 	movw	r3, #50628	; 0xc5c4
   165c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165c4:	2200      	movs	r2, #0
   165c6:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   165c8:	f24c 53c5 	movw	r3, #50629	; 0xc5c5
   165cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165d0:	2200      	movs	r2, #0
   165d2:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   165d4:	f24c 53c4 	movw	r3, #50628	; 0xc5c4
   165d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165dc:	781b      	ldrb	r3, [r3, #0]
   165de:	b2db      	uxtb	r3, r3
   165e0:	461a      	mov	r2, r3
   165e2:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
   165e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165ea:	4413      	add	r3, r2
   165ec:	781a      	ldrb	r2, [r3, #0]
   165ee:	f24c 53c6 	movw	r3, #50630	; 0xc5c6
   165f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165f6:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   165f8:	f242 030f 	movw	r3, #8207	; 0x200f
   165fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16600:	f24c 52c6 	movw	r2, #50630	; 0xc5c6
   16604:	f2c2 0204 	movt	r2, #8196	; 0x2004
   16608:	7812      	ldrb	r2, [r2, #0]
   1660a:	b2d2      	uxtb	r2, r2
   1660c:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   1660e:	f24c 53c2 	movw	r3, #50626	; 0xc5c2
   16612:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16616:	2200      	movs	r2, #0
   16618:	701a      	strb	r2, [r3, #0]
}
   1661a:	46bd      	mov	sp, r7
   1661c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16620:	4770      	bx	lr
   16622:	bf00      	nop

00016624 <fbw_spi_init>:

void fbw_spi_init(void) {
   16624:	b480      	push	{r7}
   16626:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   16628:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
   1662c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16630:	2200      	movs	r2, #0
   16632:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   16634:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
   16638:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1663c:	2200      	movs	r2, #0
   1663e:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   16640:	f242 0317 	movw	r3, #8215	; 0x2017
   16644:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16648:	f242 0217 	movw	r2, #8215	; 0x2017
   1664c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16650:	7812      	ldrb	r2, [r2, #0]
   16652:	b2d2      	uxtb	r2, r2
   16654:	f042 0210 	orr.w	r2, r2, #16
   16658:	b2d2      	uxtb	r2, r2
   1665a:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   1665c:	f242 030d 	movw	r3, #8205	; 0x200d
   16660:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16664:	2240      	movs	r2, #64	; 0x40
   16666:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   16668:	f242 030d 	movw	r3, #8205	; 0x200d
   1666c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16670:	f242 020d 	movw	r2, #8205	; 0x200d
   16674:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16678:	7812      	ldrb	r2, [r2, #0]
   1667a:	b2d2      	uxtb	r2, r2
   1667c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16680:	b2d2      	uxtb	r2, r2
   16682:	701a      	strb	r2, [r3, #0]
}
   16684:	46bd      	mov	sp, r7
   16686:	f85d 7b04 	ldr.w	r7, [sp], #4
   1668a:	4770      	bx	lr
   1668c:	0000      	movs	r0, r0
	...

00016690 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   16690:	b480      	push	{r7}
   16692:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   16694:	f242 032f 	movw	r3, #8239	; 0x202f
   16698:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1669c:	2200      	movs	r2, #0
   1669e:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   166a0:	f242 032e 	movw	r3, #8238	; 0x202e
   166a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166a8:	2201      	movs	r2, #1
   166aa:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   166ac:	f242 0325 	movw	r3, #8229	; 0x2025
   166b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166b4:	2207      	movs	r2, #7
   166b6:	701a      	strb	r2, [r3, #0]
}
   166b8:	46bd      	mov	sp, r7
   166ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   166be:	4770      	bx	lr

000166c0 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   166c0:	b480      	push	{r7}
   166c2:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   166c4:	f242 032e 	movw	r3, #8238	; 0x202e
   166c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166cc:	f242 022e 	movw	r2, #8238	; 0x202e
   166d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   166d4:	7812      	ldrb	r2, [r2, #0]
   166d6:	b2d2      	uxtb	r2, r2
   166d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   166dc:	b2d2      	uxtb	r2, r2
   166de:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   166e0:	f242 032e 	movw	r3, #8238	; 0x202e
   166e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166e8:	f242 022e 	movw	r2, #8238	; 0x202e
   166ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
   166f0:	7812      	ldrb	r2, [r2, #0]
   166f2:	b2d2      	uxtb	r2, r2
   166f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   166f8:	b2d2      	uxtb	r2, r2
   166fa:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   166fc:	f242 0317 	movw	r3, #8215	; 0x2017
   16700:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16704:	f242 0217 	movw	r2, #8215	; 0x2017
   16708:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1670c:	7812      	ldrb	r2, [r2, #0]
   1670e:	b2d2      	uxtb	r2, r2
   16710:	f022 0201 	bic.w	r2, r2, #1
   16714:	b2d2      	uxtb	r2, r2
   16716:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   16718:	f242 0337 	movw	r3, #8247	; 0x2037
   1671c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16720:	f242 0237 	movw	r2, #8247	; 0x2037
   16724:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16728:	7812      	ldrb	r2, [r2, #0]
   1672a:	b2d2      	uxtb	r2, r2
   1672c:	f042 0220 	orr.w	r2, r2, #32
   16730:	b2d2      	uxtb	r2, r2
   16732:	701a      	strb	r2, [r3, #0]
}
   16734:	46bd      	mov	sp, r7
   16736:	f85d 7b04 	ldr.w	r7, [sp], #4
   1673a:	4770      	bx	lr

0001673c <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   1673c:	b580      	push	{r7, lr}
   1673e:	b082      	sub	sp, #8
   16740:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16742:	2300      	movs	r3, #0
   16744:	71fb      	strb	r3, [r7, #7]
   16746:	e010      	b.n	1676a <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   16748:	79fa      	ldrb	r2, [r7, #7]
   1674a:	79f9      	ldrb	r1, [r7, #7]
   1674c:	f24c 5364 	movw	r3, #50532	; 0xc564
   16750:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16754:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   16758:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
   1675c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16760:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16764:	79fb      	ldrb	r3, [r7, #7]
   16766:	3301      	adds	r3, #1
   16768:	71fb      	strb	r3, [r7, #7]
   1676a:	79fb      	ldrb	r3, [r7, #7]
   1676c:	2b08      	cmp	r3, #8
   1676e:	d9eb      	bls.n	16748 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   16770:	f24c 6354 	movw	r3, #50772	; 0xc654
   16774:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16778:	781b      	ldrb	r3, [r3, #0]
   1677a:	2b00      	cmp	r3, #0
   1677c:	bf0c      	ite	eq
   1677e:	2300      	moveq	r3, #0
   16780:	2301      	movne	r3, #1
   16782:	b2db      	uxtb	r3, r3
   16784:	461a      	mov	r2, r3
   16786:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
   1678a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1678e:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   16790:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
   16794:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16798:	7cdb      	ldrb	r3, [r3, #19]
   1679a:	b2da      	uxtb	r2, r3
   1679c:	f24c 6356 	movw	r3, #50774	; 0xc656
   167a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167a4:	781b      	ldrb	r3, [r3, #0]
   167a6:	2b00      	cmp	r3, #0
   167a8:	d001      	beq.n	167ae <to_autopilot_from_last_radio+0x72>
   167aa:	2302      	movs	r3, #2
   167ac:	e000      	b.n	167b0 <to_autopilot_from_last_radio+0x74>
   167ae:	2300      	movs	r3, #0
   167b0:	4313      	orrs	r3, r2
   167b2:	b2db      	uxtb	r3, r3
   167b4:	b2da      	uxtb	r2, r3
   167b6:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
   167ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167be:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   167c0:	f24c 538a 	movw	r3, #50570	; 0xc58a
   167c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167c8:	781b      	ldrb	r3, [r3, #0]
   167ca:	2b00      	cmp	r3, #0
   167cc:	d012      	beq.n	167f4 <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   167ce:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
   167d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167d6:	7cdb      	ldrb	r3, [r3, #19]
   167d8:	f043 0304 	orr.w	r3, r3, #4
   167dc:	b2da      	uxtb	r2, r3
   167de:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
   167e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167e6:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   167e8:	f24c 538a 	movw	r3, #50570	; 0xc58a
   167ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167f0:	2200      	movs	r2, #0
   167f2:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   167f4:	f24c 6358 	movw	r3, #50776	; 0xc658
   167f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167fc:	781a      	ldrb	r2, [r3, #0]
   167fe:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
   16802:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16806:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   16808:	f24c 53c8 	movw	r3, #50632	; 0xc5c8
   1680c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16810:	881b      	ldrh	r3, [r3, #0]
   16812:	4618      	mov	r0, r3
   16814:	f001 f8a8 	bl	17968 <__aeabi_i2d>
   16818:	4602      	mov	r2, r0
   1681a:	460b      	mov	r3, r1
   1681c:	4610      	mov	r0, r2
   1681e:	4619      	mov	r1, r3
   16820:	a31b      	add	r3, pc, #108	; (adr r3, 16890 <to_autopilot_from_last_radio+0x154>)
   16822:	e9d3 2300 	ldrd	r2, r3, [r3]
   16826:	f001 f905 	bl	17a34 <__aeabi_dmul>
   1682a:	4602      	mov	r2, r0
   1682c:	460b      	mov	r3, r1
   1682e:	4610      	mov	r0, r2
   16830:	4619      	mov	r1, r3
   16832:	f04f 0200 	mov.w	r2, #0
   16836:	f04f 0300 	mov.w	r3, #0
   1683a:	f2c4 0340 	movt	r3, #16448	; 0x4040
   1683e:	f001 fa23 	bl	17c88 <__aeabi_ddiv>
   16842:	4602      	mov	r2, r0
   16844:	460b      	mov	r3, r1
   16846:	4610      	mov	r0, r2
   16848:	4619      	mov	r1, r3
   1684a:	a313      	add	r3, pc, #76	; (adr r3, 16898 <to_autopilot_from_last_radio+0x15c>)
   1684c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16850:	f000 ff3e 	bl	176d0 <__adddf3>
   16854:	4602      	mov	r2, r0
   16856:	460b      	mov	r3, r1
   16858:	4610      	mov	r0, r2
   1685a:	4619      	mov	r1, r3
   1685c:	f04f 0200 	mov.w	r2, #0
   16860:	f04f 0300 	mov.w	r3, #0
   16864:	f2c4 0324 	movt	r3, #16420	; 0x4024
   16868:	f001 f8e4 	bl	17a34 <__aeabi_dmul>
   1686c:	4602      	mov	r2, r0
   1686e:	460b      	mov	r3, r1
   16870:	4610      	mov	r0, r2
   16872:	4619      	mov	r1, r3
   16874:	f001 fba0 	bl	17fb8 <__aeabi_d2uiz>
   16878:	4603      	mov	r3, r0
   1687a:	b2da      	uxtb	r2, r3
   1687c:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
   16880:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16884:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   16886:	3708      	adds	r7, #8
   16888:	46bd      	mov	sp, r7
   1688a:	bd80      	pop	{r7, pc}
   1688c:	f3af 8000 	nop.w
   16890:	1eb851ec 	.word	0x1eb851ec
   16894:	3f91eb85 	.word	0x3f91eb85
   16898:	020c49ba 	.word	0x020c49ba
   1689c:	3fb6872b 	.word	0x3fb6872b

000168a0 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   168a0:	b580      	push	{r7, lr}
   168a2:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
//   if ( !SpiIsSelected() && spi_was_interrupted ) 
   {
      spi_was_interrupted = FALSE;
   168a4:	f24c 53c3 	movw	r3, #50627	; 0xc5c3
   168a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168ac:	2200      	movs	r2, #0
   168ae:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   168b0:	f7ff ff44 	bl	1673c <to_autopilot_from_last_radio>
      spi_reset();
   168b4:	f7ff fe80 	bl	165b8 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   168b8:	bd80      	pop	{r7, pc}
   168ba:	bf00      	nop

000168bc <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   168bc:	b580      	push	{r7, lr}
   168be:	af00      	add	r7, sp, #0
  uart_init_tx();
   168c0:	f000 fb02 	bl	16ec8 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   168c4:	f648 1084 	movw	r0, #35204	; 0x8984
   168c8:	f2c0 0001 	movt	r0, #1
   168cc:	f000 fbda 	bl	17084 <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   168d0:	f7ff fab2 	bl	15e38 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   168d4:	2003      	movs	r0, #3
   168d6:	f24c 51c8 	movw	r1, #50632	; 0xc5c8
   168da:	f2c2 0104 	movt	r1, #8196	; 0x2004
   168de:	f7ff fa97 	bl	15e10 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   168e2:	2006      	movs	r0, #6
   168e4:	f24c 610c 	movw	r1, #50700	; 0xc60c
   168e8:	f2c2 0104 	movt	r1, #8196	; 0x2004
   168ec:	f7ff fa90 	bl	15e10 <fbw_adc_buf_channel>
#endif
  timer_init();
   168f0:	f7ff fece 	bl	16690 <timer_init>
  servo_init();
   168f4:	f000 f894 	bl	16a20 <servo_init>
  ppm_init();
   168f8:	f7ff fee2 	bl	166c0 <ppm_init>
  fbw_spi_init();
   168fc:	f7ff fe92 	bl	16624 <fbw_spi_init>
  //sei(); //FN
}
   16900:	bd80      	pop	{r7, pc}
   16902:	bf00      	nop

00016904 <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   16904:	b580      	push	{r7, lr}
   16906:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    //if( ppm_valid ) 
    {
      ppm_valid = FALSE;
   16908:	f24c 538b 	movw	r3, #50571	; 0xc58b
   1690c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16910:	2200      	movs	r2, #0
   16912:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   16914:	f24c 6357 	movw	r3, #50775	; 0xc657
   16918:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1691c:	781b      	ldrb	r3, [r3, #0]
   1691e:	3301      	adds	r3, #1
   16920:	b2da      	uxtb	r2, r3
   16922:	f24c 6357 	movw	r3, #50775	; 0xc657
   16926:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1692a:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   1692c:	f24c 6354 	movw	r3, #50772	; 0xc654
   16930:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16934:	2201      	movs	r2, #1
   16936:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16938:	f24c 6356 	movw	r3, #50774	; 0xc656
   1693c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16940:	2200      	movs	r2, #0
   16942:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   16944:	f24c 6352 	movw	r3, #50770	; 0xc652
   16948:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1694c:	2200      	movs	r2, #0
   1694e:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16950:	f7ff fb3a 	bl	15fc8 <last_radio_from_ppm>
      //if (last_radio_contains_avg_channels) 
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   16954:	f24c 5364 	movw	r3, #50532	; 0xc564
   16958:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1695c:	891b      	ldrh	r3, [r3, #8]
   1695e:	b21b      	sxth	r3, r3
   16960:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   16964:	bfb4      	ite	lt
   16966:	2300      	movlt	r3, #0
   16968:	2301      	movge	r3, #1
   1696a:	b2db      	uxtb	r3, r3
   1696c:	461a      	mov	r2, r3
   1696e:	f24c 6350 	movw	r3, #50768	; 0xc650
   16972:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16976:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   16978:	f24c 6350 	movw	r3, #50768	; 0xc650
   1697c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16980:	781b      	ldrb	r3, [r3, #0]
   16982:	2b00      	cmp	r3, #0
   16984:	d105      	bne.n	16992 <test_ppm_task+0x8e>
      {
	servo_set(last_radio);
   16986:	f24c 5064 	movw	r0, #50532	; 0xc564
   1698a:	f2c2 0004 	movt	r0, #8196	; 0x2004
   1698e:	f000 f925 	bl	16bdc <servo_set>
      }
    } 
    //else if (mode == MODE_MANUAL && radio_really_lost) 
    {
      mode = MODE_AUTO;
   16992:	f24c 6350 	movw	r3, #50768	; 0xc650
   16996:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1699a:	2201      	movs	r2, #1
   1699c:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= STALLED_TIME) 
    {
      radio_ok = FALSE;
   1699e:	f24c 6354 	movw	r3, #50772	; 0xc654
   169a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169a6:	2200      	movs	r2, #0
   169a8:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= REALLY_STALLED_TIME) 
    {
      radio_really_lost = TRUE;
   169aa:	f24c 6356 	movw	r3, #50774	; 0xc656
   169ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169b2:	2201      	movs	r2, #1
   169b4:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   169b6:	bd80      	pop	{r7, pc}

000169b8 <check_failsafe_task>:
void check_failsafe_task(void)
{
   169b8:	b580      	push	{r7, lr}
   169ba:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    //if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
    {
      servo_set(failsafe);
   169bc:	f648 1070 	movw	r0, #35184	; 0x8970
   169c0:	f2c0 0001 	movt	r0, #1
   169c4:	f000 f90a 	bl	16bdc <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   169c8:	bd80      	pop	{r7, pc}
   169ca:	bf00      	nop

000169cc <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   169cc:	b580      	push	{r7, lr}
   169ce:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     //if ( !SpiIsSelected() && spi_was_interrupted ) 
     {
         if (mega128_receive_valid)
   169d0:	f24c 53c2 	movw	r3, #50626	; 0xc5c2
   169d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169d8:	781b      	ldrb	r3, [r3, #0]
   169da:	b2db      	uxtb	r3, r3
   169dc:	2b00      	cmp	r3, #0
   169de:	d018      	beq.n	16a12 <check_mega128_values_task+0x46>
         { 
             time_since_last_mega128 = 0;
   169e0:	f24c 6351 	movw	r3, #50769	; 0xc651
   169e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169e8:	2200      	movs	r2, #0
   169ea:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   169ec:	f24c 6355 	movw	r3, #50773	; 0xc655
   169f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169f4:	2201      	movs	r2, #1
   169f6:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   169f8:	f24c 6350 	movw	r3, #50768	; 0xc650
   169fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a00:	781b      	ldrb	r3, [r3, #0]
   16a02:	2b01      	cmp	r3, #1
   16a04:	d105      	bne.n	16a12 <check_mega128_values_task+0x46>
                 servo_set(from_mega128.channels);
   16a06:	f24c 5094 	movw	r0, #50580	; 0xc594
   16a0a:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16a0e:	f000 f8e5 	bl	16bdc <servo_set>
         }
     }
     //if (time_since_last_mega128 == STALLED_TIME) 
     {
         mega128_ok = FALSE;
   16a12:	f24c 6355 	movw	r3, #50773	; 0xc655
   16a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a1a:	2200      	movs	r2, #0
   16a1c:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   16a1e:	bd80      	pop	{r7, pc}

00016a20 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16a20:	b480      	push	{r7}
   16a22:	b083      	sub	sp, #12
   16a24:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   16a26:	f242 0311 	movw	r3, #8209	; 0x2011
   16a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a2e:	f242 0211 	movw	r2, #8209	; 0x2011
   16a32:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16a36:	7812      	ldrb	r2, [r2, #0]
   16a38:	b2d2      	uxtb	r2, r2
   16a3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16a3e:	b2d2      	uxtb	r2, r2
   16a40:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   16a42:	f242 0317 	movw	r3, #8215	; 0x2017
   16a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a4a:	f242 0217 	movw	r2, #8215	; 0x2017
   16a4e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16a52:	7812      	ldrb	r2, [r2, #0]
   16a54:	b2d2      	uxtb	r2, r2
   16a56:	f042 0202 	orr.w	r2, r2, #2
   16a5a:	b2d2      	uxtb	r2, r2
   16a5c:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16a5e:	f242 0312 	movw	r3, #8210	; 0x2012
   16a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a66:	f242 0212 	movw	r2, #8210	; 0x2012
   16a6a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16a6e:	7812      	ldrb	r2, [r2, #0]
   16a70:	b2d2      	uxtb	r2, r2
   16a72:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16a76:	b2d2      	uxtb	r2, r2
   16a78:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   16a7a:	f242 0318 	movw	r3, #8216	; 0x2018
   16a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a82:	f242 0218 	movw	r2, #8216	; 0x2018
   16a86:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16a8a:	7812      	ldrb	r2, [r2, #0]
   16a8c:	b2d2      	uxtb	r2, r2
   16a8e:	f022 0202 	bic.w	r2, r2, #2
   16a92:	b2d2      	uxtb	r2, r2
   16a94:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16a96:	2300      	movs	r3, #0
   16a98:	71fb      	strb	r3, [r7, #7]
   16a9a:	e00b      	b.n	16ab4 <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   16a9c:	79fa      	ldrb	r2, [r7, #7]
   16a9e:	f24c 635c 	movw	r3, #50780	; 0xc65c
   16aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16aa6:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   16aaa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16aae:	79fb      	ldrb	r3, [r7, #7]
   16ab0:	3301      	adds	r3, #1
   16ab2:	71fb      	strb	r3, [r7, #7]
   16ab4:	79fb      	ldrb	r3, [r7, #7]
   16ab6:	2b09      	cmp	r3, #9
   16ab8:	d9f0      	bls.n	16a9c <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   16aba:	f242 032a 	movw	r3, #8234	; 0x202a
   16abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ac2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   16ac6:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   16ac8:	f242 032f 	movw	r3, #8239	; 0x202f
   16acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ad0:	f242 022f 	movw	r2, #8239	; 0x202f
   16ad4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16ad8:	7812      	ldrb	r2, [r2, #0]
   16ada:	b2d2      	uxtb	r2, r2
   16adc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16ae0:	b2d2      	uxtb	r2, r2
   16ae2:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   16ae4:	f242 0336 	movw	r3, #8246	; 0x2036
   16ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16aec:	2210      	movs	r2, #16
   16aee:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16af0:	f242 0312 	movw	r3, #8210	; 0x2012
   16af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16af8:	f242 0212 	movw	r2, #8210	; 0x2012
   16afc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16b00:	7812      	ldrb	r2, [r2, #0]
   16b02:	b2d2      	uxtb	r2, r2
   16b04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16b08:	b2d2      	uxtb	r2, r2
   16b0a:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   16b0c:	f242 0337 	movw	r3, #8247	; 0x2037
   16b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b14:	f242 0237 	movw	r2, #8247	; 0x2037
   16b18:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16b1c:	7812      	ldrb	r2, [r2, #0]
   16b1e:	b2d2      	uxtb	r2, r2
   16b20:	f042 0210 	orr.w	r2, r2, #16
   16b24:	b2d2      	uxtb	r2, r2
   16b26:	701a      	strb	r2, [r3, #0]
}
   16b28:	370c      	adds	r7, #12
   16b2a:	46bd      	mov	sp, r7
   16b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16b30:	4770      	bx	lr
   16b32:	bf00      	nop

00016b34 <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   16b34:	b480      	push	{r7}
   16b36:	b083      	sub	sp, #12
   16b38:	af00      	add	r7, sp, #0
   16b3a:	4602      	mov	r2, r0
   16b3c:	460b      	mov	r3, r1
   16b3e:	71fa      	strb	r2, [r7, #7]
   16b40:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   16b42:	79f9      	ldrb	r1, [r7, #7]
   16b44:	88bb      	ldrh	r3, [r7, #4]
   16b46:	011b      	lsls	r3, r3, #4
   16b48:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16b4c:	d308      	bcc.n	16b60 <servo_set_one+0x2c>
   16b4e:	88bb      	ldrh	r3, [r7, #4]
   16b50:	011b      	lsls	r3, r3, #4
   16b52:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16b56:	bf28      	it	cs
   16b58:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16b5c:	b29a      	uxth	r2, r3
   16b5e:	e001      	b.n	16b64 <servo_set_one+0x30>
   16b60:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16b64:	f24c 635c 	movw	r3, #50780	; 0xc65c
   16b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b6c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   16b70:	370c      	adds	r7, #12
   16b72:	46bd      	mov	sp, r7
   16b74:	f85d 7b04 	ldr.w	r7, [sp], #4
   16b78:	4770      	bx	lr
   16b7a:	bf00      	nop

00016b7c <servo_transmit>:

void 
servo_transmit(void) {
   16b7c:	b580      	push	{r7, lr}
   16b7e:	b082      	sub	sp, #8
   16b80:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   16b82:	2000      	movs	r0, #0
   16b84:	f000 f9e6 	bl	16f54 <uart_transmit>
   16b88:	2000      	movs	r0, #0
   16b8a:	f000 f9e3 	bl	16f54 <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16b8e:	2300      	movs	r3, #0
   16b90:	71fb      	strb	r3, [r7, #7]
   16b92:	e01a      	b.n	16bca <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   16b94:	79fa      	ldrb	r2, [r7, #7]
   16b96:	f24c 635c 	movw	r3, #50780	; 0xc65c
   16b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b9e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16ba2:	0a1b      	lsrs	r3, r3, #8
   16ba4:	b29b      	uxth	r3, r3
   16ba6:	b2db      	uxtb	r3, r3
   16ba8:	4618      	mov	r0, r3
   16baa:	f000 f9d3 	bl	16f54 <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   16bae:	79fa      	ldrb	r2, [r7, #7]
   16bb0:	f24c 635c 	movw	r3, #50780	; 0xc65c
   16bb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bb8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16bbc:	b2db      	uxtb	r3, r3
   16bbe:	4618      	mov	r0, r3
   16bc0:	f000 f9c8 	bl	16f54 <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16bc4:	79fb      	ldrb	r3, [r7, #7]
   16bc6:	3301      	adds	r3, #1
   16bc8:	71fb      	strb	r3, [r7, #7]
   16bca:	79fb      	ldrb	r3, [r7, #7]
   16bcc:	2b09      	cmp	r3, #9
   16bce:	d9e1      	bls.n	16b94 <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   16bd0:	200a      	movs	r0, #10
   16bd2:	f000 f9bf 	bl	16f54 <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   16bd6:	3708      	adds	r7, #8
   16bd8:	46bd      	mov	sp, r7
   16bda:	bd80      	pop	{r7, pc}

00016bdc <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   16bdc:	b5b0      	push	{r4, r5, r7, lr}
   16bde:	b084      	sub	sp, #16
   16be0:	af00      	add	r7, sp, #0
   16be2:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   16be4:	687b      	ldr	r3, [r7, #4]
   16be6:	330a      	adds	r3, #10
   16be8:	881b      	ldrh	r3, [r3, #0]
   16bea:	b21b      	sxth	r3, r3
   16bec:	005b      	lsls	r3, r3, #1
   16bee:	4618      	mov	r0, r3
   16bf0:	f000 feba 	bl	17968 <__aeabi_i2d>
   16bf4:	4602      	mov	r2, r0
   16bf6:	460b      	mov	r3, r1
   16bf8:	4610      	mov	r0, r2
   16bfa:	4619      	mov	r1, r3
   16bfc:	a3a6      	add	r3, pc, #664	; (adr r3, 16e98 <servo_set+0x2bc>)
   16bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   16c02:	f000 ff17 	bl	17a34 <__aeabi_dmul>
   16c06:	4602      	mov	r2, r0
   16c08:	460b      	mov	r3, r1
   16c0a:	4610      	mov	r0, r2
   16c0c:	4619      	mov	r1, r3
   16c0e:	f001 f9ab 	bl	17f68 <__aeabi_d2iz>
   16c12:	4603      	mov	r3, r0
   16c14:	b29b      	uxth	r3, r3
   16c16:	b29b      	uxth	r3, r3
   16c18:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16c1c:	81fb      	strh	r3, [r7, #14]
   16c1e:	89fb      	ldrh	r3, [r7, #14]
   16c20:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16c24:	d307      	bcc.n	16c36 <servo_set+0x5a>
   16c26:	89fb      	ldrh	r3, [r7, #14]
   16c28:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16c2c:	bf28      	it	cs
   16c2e:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16c32:	b29a      	uxth	r2, r3
   16c34:	e001      	b.n	16c3a <servo_set+0x5e>
   16c36:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16c3a:	f24c 635c 	movw	r3, #50780	; 0xc65c
   16c3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c42:	80da      	strh	r2, [r3, #6]
   16c44:	687b      	ldr	r3, [r7, #4]
   16c46:	881b      	ldrh	r3, [r3, #0]
   16c48:	b21b      	sxth	r3, r3
   16c4a:	005b      	lsls	r3, r3, #1
   16c4c:	4618      	mov	r0, r3
   16c4e:	f000 fe8b 	bl	17968 <__aeabi_i2d>
   16c52:	4602      	mov	r2, r0
   16c54:	460b      	mov	r3, r1
   16c56:	4610      	mov	r0, r2
   16c58:	4619      	mov	r1, r3
   16c5a:	a38f      	add	r3, pc, #572	; (adr r3, 16e98 <servo_set+0x2bc>)
   16c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16c60:	f000 fee8 	bl	17a34 <__aeabi_dmul>
   16c64:	4602      	mov	r2, r0
   16c66:	460b      	mov	r3, r1
   16c68:	4610      	mov	r0, r2
   16c6a:	4619      	mov	r1, r3
   16c6c:	f001 f97c 	bl	17f68 <__aeabi_d2iz>
   16c70:	4603      	mov	r3, r0
   16c72:	b29b      	uxth	r3, r3
   16c74:	b29b      	uxth	r3, r3
   16c76:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16c7a:	81fb      	strh	r3, [r7, #14]
   16c7c:	89fb      	ldrh	r3, [r7, #14]
   16c7e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16c82:	d307      	bcc.n	16c94 <servo_set+0xb8>
   16c84:	89fb      	ldrh	r3, [r7, #14]
   16c86:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16c8a:	bf28      	it	cs
   16c8c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16c90:	b29a      	uxth	r2, r3
   16c92:	e001      	b.n	16c98 <servo_set+0xbc>
   16c94:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16c98:	f24c 635c 	movw	r3, #50780	; 0xc65c
   16c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ca0:	825a      	strh	r2, [r3, #18]
   16ca2:	687b      	ldr	r3, [r7, #4]
   16ca4:	3304      	adds	r3, #4
   16ca6:	881b      	ldrh	r3, [r3, #0]
   16ca8:	b21b      	sxth	r3, r3
   16caa:	4618      	mov	r0, r3
   16cac:	f000 fe5c 	bl	17968 <__aeabi_i2d>
   16cb0:	4602      	mov	r2, r0
   16cb2:	460b      	mov	r3, r1
   16cb4:	4610      	mov	r0, r2
   16cb6:	4619      	mov	r1, r3
   16cb8:	a379      	add	r3, pc, #484	; (adr r3, 16ea0 <servo_set+0x2c4>)
   16cba:	e9d3 2300 	ldrd	r2, r3, [r3]
   16cbe:	f000 feb9 	bl	17a34 <__aeabi_dmul>
   16cc2:	4602      	mov	r2, r0
   16cc4:	460b      	mov	r3, r1
   16cc6:	4610      	mov	r0, r2
   16cc8:	4619      	mov	r1, r3
   16cca:	f001 f94d 	bl	17f68 <__aeabi_d2iz>
   16cce:	4603      	mov	r3, r0
   16cd0:	b29b      	uxth	r3, r3
   16cd2:	b29b      	uxth	r3, r3
   16cd4:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   16cd8:	3320      	adds	r3, #32
   16cda:	81fb      	strh	r3, [r7, #14]
   16cdc:	89fb      	ldrh	r3, [r7, #14]
   16cde:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16ce2:	d307      	bcc.n	16cf4 <servo_set+0x118>
   16ce4:	89fb      	ldrh	r3, [r7, #14]
   16ce6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16cea:	bf28      	it	cs
   16cec:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16cf0:	b29a      	uxth	r2, r3
   16cf2:	e001      	b.n	16cf8 <servo_set+0x11c>
   16cf4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16cf8:	f24c 635c 	movw	r3, #50780	; 0xc65c
   16cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d00:	819a      	strh	r2, [r3, #12]
   16d02:	687b      	ldr	r3, [r7, #4]
   16d04:	885b      	ldrh	r3, [r3, #2]
   16d06:	81bb      	strh	r3, [r7, #12]
   16d08:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16d0c:	2b00      	cmp	r3, #0
   16d0e:	dd06      	ble.n	16d1e <servo_set+0x142>
   16d10:	f04f 0400 	mov.w	r4, #0
   16d14:	f04f 0500 	mov.w	r5, #0
   16d18:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16d1c:	e002      	b.n	16d24 <servo_set+0x148>
   16d1e:	a562      	add	r5, pc, #392	; (adr r5, 16ea8 <servo_set+0x2cc>)
   16d20:	e9d5 4500 	ldrd	r4, r5, [r5]
   16d24:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16d28:	4618      	mov	r0, r3
   16d2a:	f000 fe1d 	bl	17968 <__aeabi_i2d>
   16d2e:	4602      	mov	r2, r0
   16d30:	460b      	mov	r3, r1
   16d32:	4620      	mov	r0, r4
   16d34:	4629      	mov	r1, r5
   16d36:	f000 fe7d 	bl	17a34 <__aeabi_dmul>
   16d3a:	4602      	mov	r2, r0
   16d3c:	460b      	mov	r3, r1
   16d3e:	4610      	mov	r0, r2
   16d40:	4619      	mov	r1, r3
   16d42:	a35b      	add	r3, pc, #364	; (adr r3, 16eb0 <servo_set+0x2d4>)
   16d44:	e9d3 2300 	ldrd	r2, r3, [r3]
   16d48:	f000 fe74 	bl	17a34 <__aeabi_dmul>
   16d4c:	4602      	mov	r2, r0
   16d4e:	460b      	mov	r3, r1
   16d50:	4610      	mov	r0, r2
   16d52:	4619      	mov	r1, r3
   16d54:	f001 f908 	bl	17f68 <__aeabi_d2iz>
   16d58:	4603      	mov	r3, r0
   16d5a:	b29b      	uxth	r3, r3
   16d5c:	b29b      	uxth	r3, r3
   16d5e:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   16d62:	81fb      	strh	r3, [r7, #14]
   16d64:	89fb      	ldrh	r3, [r7, #14]
   16d66:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16d6a:	d307      	bcc.n	16d7c <servo_set+0x1a0>
   16d6c:	89fb      	ldrh	r3, [r7, #14]
   16d6e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16d72:	bf28      	it	cs
   16d74:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16d78:	b29a      	uxth	r2, r3
   16d7a:	e001      	b.n	16d80 <servo_set+0x1a4>
   16d7c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16d80:	f24c 635c 	movw	r3, #50780	; 0xc65c
   16d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d88:	801a      	strh	r2, [r3, #0]
   16d8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16d8e:	2b00      	cmp	r3, #0
   16d90:	dd03      	ble.n	16d9a <servo_set+0x1be>
   16d92:	a545      	add	r5, pc, #276	; (adr r5, 16ea8 <servo_set+0x2cc>)
   16d94:	e9d5 4500 	ldrd	r4, r5, [r5]
   16d98:	e005      	b.n	16da6 <servo_set+0x1ca>
   16d9a:	f04f 0400 	mov.w	r4, #0
   16d9e:	f04f 0500 	mov.w	r5, #0
   16da2:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16da6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16daa:	4618      	mov	r0, r3
   16dac:	f000 fddc 	bl	17968 <__aeabi_i2d>
   16db0:	4602      	mov	r2, r0
   16db2:	460b      	mov	r3, r1
   16db4:	4620      	mov	r0, r4
   16db6:	4629      	mov	r1, r5
   16db8:	f000 fe3c 	bl	17a34 <__aeabi_dmul>
   16dbc:	4602      	mov	r2, r0
   16dbe:	460b      	mov	r3, r1
   16dc0:	4610      	mov	r0, r2
   16dc2:	4619      	mov	r1, r3
   16dc4:	a33c      	add	r3, pc, #240	; (adr r3, 16eb8 <servo_set+0x2dc>)
   16dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   16dca:	f000 fe33 	bl	17a34 <__aeabi_dmul>
   16dce:	4602      	mov	r2, r0
   16dd0:	460b      	mov	r3, r1
   16dd2:	4610      	mov	r0, r2
   16dd4:	4619      	mov	r1, r3
   16dd6:	f001 f8c7 	bl	17f68 <__aeabi_d2iz>
   16dda:	4603      	mov	r3, r0
   16ddc:	b29b      	uxth	r3, r3
   16dde:	b29b      	uxth	r3, r3
   16de0:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   16de4:	3320      	adds	r3, #32
   16de6:	81fb      	strh	r3, [r7, #14]
   16de8:	89fb      	ldrh	r3, [r7, #14]
   16dea:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16dee:	d307      	bcc.n	16e00 <servo_set+0x224>
   16df0:	89fb      	ldrh	r3, [r7, #14]
   16df2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16df6:	bf28      	it	cs
   16df8:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16dfc:	b29a      	uxth	r2, r3
   16dfe:	e001      	b.n	16e04 <servo_set+0x228>
   16e00:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16e04:	f24c 635c 	movw	r3, #50780	; 0xc65c
   16e08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e0c:	809a      	strh	r2, [r3, #4]
   16e0e:	687b      	ldr	r3, [r7, #4]
   16e10:	3306      	adds	r3, #6
   16e12:	881b      	ldrh	r3, [r3, #0]
   16e14:	b21b      	sxth	r3, r3
   16e16:	4618      	mov	r0, r3
   16e18:	f000 fda6 	bl	17968 <__aeabi_i2d>
   16e1c:	4604      	mov	r4, r0
   16e1e:	460d      	mov	r5, r1
   16e20:	687b      	ldr	r3, [r7, #4]
   16e22:	3302      	adds	r3, #2
   16e24:	881b      	ldrh	r3, [r3, #0]
   16e26:	b21b      	sxth	r3, r3
   16e28:	4618      	mov	r0, r3
   16e2a:	f000 fd9d 	bl	17968 <__aeabi_i2d>
   16e2e:	4602      	mov	r2, r0
   16e30:	460b      	mov	r3, r1
   16e32:	4620      	mov	r0, r4
   16e34:	4629      	mov	r1, r5
   16e36:	f000 fc4b 	bl	176d0 <__adddf3>
   16e3a:	4602      	mov	r2, r0
   16e3c:	460b      	mov	r3, r1
   16e3e:	4610      	mov	r0, r2
   16e40:	4619      	mov	r1, r3
   16e42:	a31f      	add	r3, pc, #124	; (adr r3, 16ec0 <servo_set+0x2e4>)
   16e44:	e9d3 2300 	ldrd	r2, r3, [r3]
   16e48:	f000 fdf4 	bl	17a34 <__aeabi_dmul>
   16e4c:	4602      	mov	r2, r0
   16e4e:	460b      	mov	r3, r1
   16e50:	4610      	mov	r0, r2
   16e52:	4619      	mov	r1, r3
   16e54:	f001 f888 	bl	17f68 <__aeabi_d2iz>
   16e58:	4603      	mov	r3, r0
   16e5a:	b29b      	uxth	r3, r3
   16e5c:	b29b      	uxth	r3, r3
   16e5e:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   16e62:	3320      	adds	r3, #32
   16e64:	81fb      	strh	r3, [r7, #14]
   16e66:	89fb      	ldrh	r3, [r7, #14]
   16e68:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16e6c:	d307      	bcc.n	16e7e <servo_set+0x2a2>
   16e6e:	89fb      	ldrh	r3, [r7, #14]
   16e70:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16e74:	bf28      	it	cs
   16e76:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16e7a:	b29a      	uxth	r2, r3
   16e7c:	e001      	b.n	16e82 <servo_set+0x2a6>
   16e7e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16e82:	f24c 635c 	movw	r3, #50780	; 0xc65c
   16e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e8a:	81da      	strh	r2, [r3, #14]
}
   16e8c:	3710      	adds	r7, #16
   16e8e:	46bd      	mov	sp, r7
   16e90:	bdb0      	pop	{r4, r5, r7, pc}
   16e92:	bf00      	nop
   16e94:	f3af 8000 	nop.w
   16e98:	aaaa9ef0 	.word	0xaaaa9ef0
   16e9c:	3feaaaaa 	.word	0x3feaaaaa
   16ea0:	fc96473e 	.word	0xfc96473e
   16ea4:	3fdfc962 	.word	0x3fdfc962
   16ea8:	51eb851f 	.word	0x51eb851f
   16eac:	3fe51eb8 	.word	0x3fe51eb8
   16eb0:	9999999a 	.word	0x9999999a
   16eb4:	bfe19999 	.word	0xbfe19999
   16eb8:	aaaa9ef0 	.word	0xaaaa9ef0
   16ebc:	bfe0aaaa 	.word	0xbfe0aaaa
   16ec0:	eeeed77a 	.word	0xeeeed77a
   16ec4:	bfdeeeee 	.word	0xbfdeeeee

00016ec8 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   16ec8:	b480      	push	{r7}
   16eca:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   16ecc:	f242 0320 	movw	r3, #8224	; 0x2020
   16ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ed4:	2200      	movs	r2, #0
   16ed6:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   16ed8:	f242 0309 	movw	r3, #8201	; 0x2009
   16edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ee0:	2219      	movs	r2, #25
   16ee2:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   16ee4:	f242 030b 	movw	r3, #8203	; 0x200b
   16ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16eec:	2200      	movs	r2, #0
   16eee:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   16ef0:	f242 030a 	movw	r3, #8202	; 0x200a
   16ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ef8:	2208      	movs	r2, #8
   16efa:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   16efc:	f242 0320 	movw	r3, #8224	; 0x2020
   16f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16f04:	2286      	movs	r2, #134	; 0x86
   16f06:	701a      	strb	r2, [r3, #0]
}
   16f08:	46bd      	mov	sp, r7
   16f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
   16f0e:	4770      	bx	lr

00016f10 <uart_init_rx>:

void uart_init_rx() {
   16f10:	b480      	push	{r7}
   16f12:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   16f14:	f242 030a 	movw	r3, #8202	; 0x200a
   16f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16f1c:	f242 020a 	movw	r2, #8202	; 0x200a
   16f20:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16f24:	7812      	ldrb	r2, [r2, #0]
   16f26:	b2d2      	uxtb	r2, r2
   16f28:	f042 0210 	orr.w	r2, r2, #16
   16f2c:	b2d2      	uxtb	r2, r2
   16f2e:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   16f30:	f242 030a 	movw	r3, #8202	; 0x200a
   16f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16f38:	f242 020a 	movw	r2, #8202	; 0x200a
   16f3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16f40:	7812      	ldrb	r2, [r2, #0]
   16f42:	b2d2      	uxtb	r2, r2
   16f44:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16f48:	b2d2      	uxtb	r2, r2
   16f4a:	701a      	strb	r2, [r3, #0]
}
   16f4c:	46bd      	mov	sp, r7
   16f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16f52:	4770      	bx	lr

00016f54 <uart_transmit>:

void uart_transmit( unsigned char data ) {
   16f54:	b480      	push	{r7}
   16f56:	b083      	sub	sp, #12
   16f58:	af00      	add	r7, sp, #0
   16f5a:	4603      	mov	r3, r0
   16f5c:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   16f5e:	f242 030a 	movw	r3, #8202	; 0x200a
   16f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16f66:	781b      	ldrb	r3, [r3, #0]
   16f68:	b2db      	uxtb	r3, r3
   16f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   16f6e:	2b00      	cmp	r3, #0
   16f70:	d028      	beq.n	16fc4 <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   16f72:	f24c 6371 	movw	r3, #50801	; 0xc671
   16f76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f7a:	781b      	ldrb	r3, [r3, #0]
   16f7c:	b2db      	uxtb	r3, r3
   16f7e:	461a      	mov	r2, r3
   16f80:	f24c 6370 	movw	r3, #50800	; 0xc670
   16f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f88:	781b      	ldrb	r3, [r3, #0]
   16f8a:	3301      	adds	r3, #1
   16f8c:	429a      	cmp	r2, r3
   16f8e:	d100      	bne.n	16f92 <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   16f90:	e02c      	b.n	16fec <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   16f92:	f24c 6370 	movw	r3, #50800	; 0xc670
   16f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f9a:	781b      	ldrb	r3, [r3, #0]
   16f9c:	461a      	mov	r2, r3
   16f9e:	f24c 6374 	movw	r3, #50804	; 0xc674
   16fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16fa6:	79f9      	ldrb	r1, [r7, #7]
   16fa8:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   16faa:	f24c 6370 	movw	r3, #50800	; 0xc670
   16fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16fb2:	781b      	ldrb	r3, [r3, #0]
   16fb4:	3301      	adds	r3, #1
   16fb6:	b2da      	uxtb	r2, r3
   16fb8:	f24c 6370 	movw	r3, #50800	; 0xc670
   16fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16fc0:	701a      	strb	r2, [r3, #0]
   16fc2:	e013      	b.n	16fec <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   16fc4:	f242 030c 	movw	r3, #8204	; 0x200c
   16fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16fcc:	79fa      	ldrb	r2, [r7, #7]
   16fce:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   16fd0:	f242 030a 	movw	r3, #8202	; 0x200a
   16fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16fd8:	f242 020a 	movw	r2, #8202	; 0x200a
   16fdc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16fe0:	7812      	ldrb	r2, [r2, #0]
   16fe2:	b2d2      	uxtb	r2, r2
   16fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16fe8:	b2d2      	uxtb	r2, r2
   16fea:	701a      	strb	r2, [r3, #0]
  }
}
   16fec:	370c      	adds	r7, #12
   16fee:	46bd      	mov	sp, r7
   16ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
   16ff4:	4770      	bx	lr
   16ff6:	bf00      	nop

00016ff8 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   16ff8:	b590      	push	{r4, r7, lr}
   16ffa:	b089      	sub	sp, #36	; 0x24
   16ffc:	af00      	add	r7, sp, #0
   16ffe:	4603      	mov	r3, r0
   17000:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   17002:	f648 13c4 	movw	r3, #35268	; 0x89c4
   17006:	f2c0 0301 	movt	r3, #1
   1700a:	f107 040c 	add.w	r4, r7, #12
   1700e:	6818      	ldr	r0, [r3, #0]
   17010:	6859      	ldr	r1, [r3, #4]
   17012:	689a      	ldr	r2, [r3, #8]
   17014:	68db      	ldr	r3, [r3, #12]
   17016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   17018:	79fb      	ldrb	r3, [r7, #7]
   1701a:	091b      	lsrs	r3, r3, #4
   1701c:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   1701e:	79fb      	ldrb	r3, [r7, #7]
   17020:	f003 030f 	and.w	r3, r3, #15
   17024:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   17026:	230f      	movs	r3, #15
   17028:	77fb      	strb	r3, [r7, #31]
        low = 15;
   1702a:	230f      	movs	r3, #15
   1702c:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   1702e:	7ffb      	ldrb	r3, [r7, #31]
   17030:	f107 0220 	add.w	r2, r7, #32
   17034:	4413      	add	r3, r2
   17036:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1703a:	4618      	mov	r0, r3
   1703c:	f7ff ff8a 	bl	16f54 <uart_transmit>
  uart_transmit(hex[low]);
   17040:	7fbb      	ldrb	r3, [r7, #30]
   17042:	f107 0220 	add.w	r2, r7, #32
   17046:	4413      	add	r3, r2
   17048:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1704c:	4618      	mov	r0, r3
   1704e:	f7ff ff81 	bl	16f54 <uart_transmit>
} 
   17052:	3724      	adds	r7, #36	; 0x24
   17054:	46bd      	mov	sp, r7
   17056:	bd90      	pop	{r4, r7, pc}

00017058 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   17058:	b580      	push	{r7, lr}
   1705a:	b084      	sub	sp, #16
   1705c:	af00      	add	r7, sp, #0
   1705e:	4603      	mov	r3, r0
   17060:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   17062:	88fb      	ldrh	r3, [r7, #6]
   17064:	0a1b      	lsrs	r3, r3, #8
   17066:	b29b      	uxth	r3, r3
   17068:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   1706a:	88fb      	ldrh	r3, [r7, #6]
   1706c:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   1706e:	7bfb      	ldrb	r3, [r7, #15]
   17070:	4618      	mov	r0, r3
   17072:	f7ff ffc1 	bl	16ff8 <uart_print_hex>
  uart_print_hex(low);
   17076:	7bbb      	ldrb	r3, [r7, #14]
   17078:	4618      	mov	r0, r3
   1707a:	f7ff ffbd 	bl	16ff8 <uart_print_hex>
}
   1707e:	3710      	adds	r7, #16
   17080:	46bd      	mov	sp, r7
   17082:	bd80      	pop	{r7, pc}

00017084 <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   17084:	b580      	push	{r7, lr}
   17086:	b084      	sub	sp, #16
   17088:	af00      	add	r7, sp, #0
   1708a:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   1708c:	2300      	movs	r3, #0
   1708e:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   17090:	e009      	b.n	170a6 <uart_print_string+0x22>
    uart_transmit(s[i]);
   17092:	7bfb      	ldrb	r3, [r7, #15]
   17094:	687a      	ldr	r2, [r7, #4]
   17096:	4413      	add	r3, r2
   17098:	781b      	ldrb	r3, [r3, #0]
   1709a:	4618      	mov	r0, r3
   1709c:	f7ff ff5a 	bl	16f54 <uart_transmit>
    i++;
   170a0:	7bfb      	ldrb	r3, [r7, #15]
   170a2:	3301      	adds	r3, #1
   170a4:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   170a6:	7bfb      	ldrb	r3, [r7, #15]
   170a8:	687a      	ldr	r2, [r7, #4]
   170aa:	4413      	add	r3, r2
   170ac:	781b      	ldrb	r3, [r3, #0]
   170ae:	2b00      	cmp	r3, #0
   170b0:	d1ef      	bne.n	17092 <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   170b2:	3710      	adds	r7, #16
   170b4:	46bd      	mov	sp, r7
   170b6:	bd80      	pop	{r7, pc}

000170b8 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   170b8:	b480      	push	{r7}
   170ba:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   170bc:	f24c 6370 	movw	r3, #50800	; 0xc670
   170c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   170c4:	781a      	ldrb	r2, [r3, #0]
   170c6:	f24c 6371 	movw	r3, #50801	; 0xc671
   170ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   170ce:	781b      	ldrb	r3, [r3, #0]
   170d0:	b2db      	uxtb	r3, r3
   170d2:	429a      	cmp	r2, r3
   170d4:	d10e      	bne.n	170f4 <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   170d6:	f242 030a 	movw	r3, #8202	; 0x200a
   170da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170de:	f242 020a 	movw	r2, #8202	; 0x200a
   170e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   170e6:	7812      	ldrb	r2, [r2, #0]
   170e8:	b2d2      	uxtb	r2, r2
   170ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   170ee:	b2d2      	uxtb	r2, r2
   170f0:	701a      	strb	r2, [r3, #0]
   170f2:	e01d      	b.n	17130 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   170f4:	f242 030c 	movw	r3, #8204	; 0x200c
   170f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170fc:	f24c 6271 	movw	r2, #50801	; 0xc671
   17100:	f2c2 0204 	movt	r2, #8196	; 0x2004
   17104:	7812      	ldrb	r2, [r2, #0]
   17106:	b2d2      	uxtb	r2, r2
   17108:	4611      	mov	r1, r2
   1710a:	f24c 6274 	movw	r2, #50804	; 0xc674
   1710e:	f2c2 0204 	movt	r2, #8196	; 0x2004
   17112:	5c52      	ldrb	r2, [r2, r1]
   17114:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   17116:	f24c 6371 	movw	r3, #50801	; 0xc671
   1711a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1711e:	781b      	ldrb	r3, [r3, #0]
   17120:	b2db      	uxtb	r3, r3
   17122:	3301      	adds	r3, #1
   17124:	b2da      	uxtb	r2, r3
   17126:	f24c 6371 	movw	r3, #50801	; 0xc671
   1712a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1712e:	701a      	strb	r2, [r3, #0]
  }
}
   17130:	46bd      	mov	sp, r7
   17132:	f85d 7b04 	ldr.w	r7, [sp], #4
   17136:	4770      	bx	lr

00017138 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   17138:	b580      	push	{r7, lr}
   1713a:	b082      	sub	sp, #8
   1713c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   1713e:	2010      	movs	r0, #16
   17140:	2101      	movs	r1, #1
   17142:	f7e9 fe3d 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   17146:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1714a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1714e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   17152:	2201      	movs	r2, #1
   17154:	f7ea f944 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   17158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1715c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   1715e:	2310      	movs	r3, #16
   17160:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17162:	2303      	movs	r3, #3
   17164:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   17166:	1d3b      	adds	r3, r7, #4
   17168:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1716c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17170:	4619      	mov	r1, r3
   17172:	f7e9 fff9 	bl	1168 <GPIO_Init>
}
   17176:	3708      	adds	r7, #8
   17178:	46bd      	mov	sp, r7
   1717a:	bd80      	pop	{r7, pc}

0001717c <init_button>:

void init_button(void)
{
   1717c:	b580      	push	{r7, lr}
   1717e:	b082      	sub	sp, #8
   17180:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   17182:	2004      	movs	r0, #4
   17184:	2101      	movs	r1, #1
   17186:	f7e9 fe1b 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   1718a:	2301      	movs	r3, #1
   1718c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   1718e:	2304      	movs	r3, #4
   17190:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17192:	2303      	movs	r3, #3
   17194:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   17196:	1d3b      	adds	r3, r7, #4
   17198:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1719c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   171a0:	4619      	mov	r1, r3
   171a2:	f7e9 ffe1 	bl	1168 <GPIO_Init>
}
   171a6:	3708      	adds	r7, #8
   171a8:	46bd      	mov	sp, r7
   171aa:	bd80      	pop	{r7, pc}

000171ac <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   171ac:	b580      	push	{r7, lr}
   171ae:	b084      	sub	sp, #16
   171b0:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   171b2:	2001      	movs	r0, #1
   171b4:	2101      	movs	r1, #1
   171b6:	f7e9 fe03 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   171ba:	2000      	movs	r0, #0
   171bc:	2100      	movs	r1, #0
   171be:	f7ea fa07 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   171c2:	2301      	movs	r3, #1
   171c4:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   171c6:	2300      	movs	r3, #0
   171c8:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   171ca:	2308      	movs	r3, #8
   171cc:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   171ce:	2301      	movs	r3, #1
   171d0:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   171d2:	f107 0308 	add.w	r3, r7, #8
   171d6:	4618      	mov	r0, r3
   171d8:	f7ea ff00 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   171dc:	2306      	movs	r3, #6
   171de:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   171e0:	230f      	movs	r3, #15
   171e2:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   171e4:	230f      	movs	r3, #15
   171e6:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   171e8:	2301      	movs	r3, #1
   171ea:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   171ec:	1d3b      	adds	r3, r7, #4
   171ee:	4618      	mov	r0, r3
   171f0:	f7eb f82e 	bl	2250 <NVIC_Init>
}
   171f4:	3710      	adds	r7, #16
   171f6:	46bd      	mov	sp, r7
   171f8:	bd80      	pop	{r7, pc}
   171fa:	bf00      	nop

000171fc <init_rs232>:

void init_rs232(void)
{
   171fc:	b580      	push	{r7, lr}
   171fe:	b086      	sub	sp, #24
   17200:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   17202:	2005      	movs	r0, #5
   17204:	2101      	movs	r1, #1
   17206:	f7e9 fddb 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   1720a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   1720e:	2101      	movs	r1, #1
   17210:	f7e9 fdfe 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   17214:	2308      	movs	r3, #8
   17216:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   17218:	2304      	movs	r3, #4
   1721a:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   1721c:	1d3b      	adds	r3, r7, #4
   1721e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   17222:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17226:	4619      	mov	r1, r3
   17228:	f7e9 ff9e 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   1722c:	2304      	movs	r3, #4
   1722e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17230:	2303      	movs	r3, #3
   17232:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   17234:	2318      	movs	r3, #24
   17236:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   17238:	1d3b      	adds	r3, r7, #4
   1723a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1723e:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17242:	4619      	mov	r1, r3
   17244:	f7e9 ff90 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   17248:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1724c:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   1724e:	2300      	movs	r3, #0
   17250:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   17252:	2300      	movs	r3, #0
   17254:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   17256:	2300      	movs	r3, #0
   17258:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   1725a:	2300      	movs	r3, #0
   1725c:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   1725e:	230c      	movs	r3, #12
   17260:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   17262:	f107 0308 	add.w	r3, r7, #8
   17266:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1726a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1726e:	4619      	mov	r1, r3
   17270:	f7ea fa62 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   17274:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17278:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1727c:	2101      	movs	r1, #1
   1727e:	f7ea fb79 	bl	1974 <USART_Cmd>
}
   17282:	3718      	adds	r7, #24
   17284:	46bd      	mov	sp, r7
   17286:	bd80      	pop	{r7, pc}

00017288 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   17288:	b580      	push	{r7, lr}
   1728a:	b082      	sub	sp, #8
   1728c:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   1728e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17292:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17296:	f240 7127 	movw	r1, #1831	; 0x727
   1729a:	2200      	movs	r2, #0
   1729c:	f7ea fb8a 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   172a0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   172a4:	f2c4 0000 	movt	r0, #16384	; 0x4000
   172a8:	f240 5125 	movw	r1, #1317	; 0x525
   172ac:	2201      	movs	r2, #1
   172ae:	f7ea fb81 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   172b2:	2326      	movs	r3, #38	; 0x26
   172b4:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   172b6:	2300      	movs	r3, #0
   172b8:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   172ba:	2301      	movs	r3, #1
   172bc:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   172be:	1d3b      	adds	r3, r7, #4
   172c0:	4618      	mov	r0, r3
   172c2:	f7ea ffc5 	bl	2250 <NVIC_Init>
}
   172c6:	3708      	adds	r7, #8
   172c8:	46bd      	mov	sp, r7
   172ca:	bd80      	pop	{r7, pc}

000172cc <enable_rs232>:

void enable_rs232(void)
{
   172cc:	b580      	push	{r7, lr}
   172ce:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   172d0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   172d4:	f2c4 0000 	movt	r0, #16384	; 0x4000
   172d8:	2101      	movs	r1, #1
   172da:	f7ea fb4b 	bl	1974 <USART_Cmd>
}
   172de:	bd80      	pop	{r7, pc}

000172e0 <send_byte>:

void send_byte(uint8_t b)
{
   172e0:	b580      	push	{r7, lr}
   172e2:	b082      	sub	sp, #8
   172e4:	af00      	add	r7, sp, #0
   172e6:	4603      	mov	r3, r0
   172e8:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   172ea:	bf00      	nop
   172ec:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   172f0:	f2c4 0000 	movt	r0, #16384	; 0x4000
   172f4:	2180      	movs	r1, #128	; 0x80
   172f6:	f7ea fda9 	bl	1e4c <USART_GetFlagStatus>
   172fa:	4603      	mov	r3, r0
   172fc:	2b00      	cmp	r3, #0
   172fe:	d0f5      	beq.n	172ec <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   17300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   17304:	f2c4 0301 	movt	r3, #16385	; 0x4001
   17308:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1730c:	f2c4 0201 	movt	r2, #16385	; 0x4001
   17310:	68d2      	ldr	r2, [r2, #12]
   17312:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   17316:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   17318:	79fb      	ldrb	r3, [r7, #7]
   1731a:	b29b      	uxth	r3, r3
   1731c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17320:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17324:	4619      	mov	r1, r3
   17326:	f7ea fc45 	bl	1bb4 <USART_SendData>
}
   1732a:	3708      	adds	r7, #8
   1732c:	46bd      	mov	sp, r7
   1732e:	bd80      	pop	{r7, pc}

00017330 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   17330:	b580      	push	{r7, lr}
   17332:	b082      	sub	sp, #8
   17334:	af00      	add	r7, sp, #0
   17336:	4603      	mov	r3, r0
   17338:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   1733a:	79fb      	ldrb	r3, [r7, #7]
   1733c:	3330      	adds	r3, #48	; 0x30
   1733e:	b2db      	uxtb	r3, r3
   17340:	4618      	mov	r0, r3
   17342:	f7ff ffcd 	bl	172e0 <send_byte>
}
   17346:	3708      	adds	r7, #8
   17348:	46bd      	mov	sp, r7
   1734a:	bd80      	pop	{r7, pc}

0001734c <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   1734c:	b580      	push	{r7, lr}
   1734e:	b084      	sub	sp, #16
   17350:	af00      	add	r7, sp, #0
   17352:	6078      	str	r0, [r7, #4]
    int i = 0;
   17354:	2300      	movs	r3, #0
   17356:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   17358:	e009      	b.n	1736e <vPrintString+0x22>
    {
        send_byte(string[i]);
   1735a:	68fb      	ldr	r3, [r7, #12]
   1735c:	687a      	ldr	r2, [r7, #4]
   1735e:	4413      	add	r3, r2
   17360:	781b      	ldrb	r3, [r3, #0]
   17362:	4618      	mov	r0, r3
   17364:	f7ff ffbc 	bl	172e0 <send_byte>
        i++;
   17368:	68fb      	ldr	r3, [r7, #12]
   1736a:	3301      	adds	r3, #1
   1736c:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   1736e:	68fb      	ldr	r3, [r7, #12]
   17370:	687a      	ldr	r2, [r7, #4]
   17372:	4413      	add	r3, r2
   17374:	781b      	ldrb	r3, [r3, #0]
   17376:	2b00      	cmp	r3, #0
   17378:	d1ef      	bne.n	1735a <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   1737a:	3710      	adds	r7, #16
   1737c:	46bd      	mov	sp, r7
   1737e:	bd80      	pop	{r7, pc}

00017380 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   17380:	b580      	push	{r7, lr}
   17382:	b08a      	sub	sp, #40	; 0x28
   17384:	af00      	add	r7, sp, #0
   17386:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   17388:	2300      	movs	r3, #0
   1738a:	623b      	str	r3, [r7, #32]
    long num = c_num;
   1738c:	687b      	ldr	r3, [r7, #4]
   1738e:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   17390:	69fb      	ldr	r3, [r7, #28]
   17392:	2b00      	cmp	r3, #0
   17394:	d106      	bne.n	173a4 <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   17396:	f648 10d4 	movw	r0, #35284	; 0x89d4
   1739a:	f2c0 0001 	movt	r0, #1
   1739e:	f7ff ffd5 	bl	1734c <vPrintString>
   173a2:	e062      	b.n	1746a <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   173a4:	e024      	b.n	173f0 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   173a6:	69f9      	ldr	r1, [r7, #28]
   173a8:	f246 6367 	movw	r3, #26215	; 0x6667
   173ac:	f2c6 6366 	movt	r3, #26214	; 0x6666
   173b0:	fb83 2301 	smull	r2, r3, r3, r1
   173b4:	109a      	asrs	r2, r3, #2
   173b6:	17cb      	asrs	r3, r1, #31
   173b8:	1ad2      	subs	r2, r2, r3
   173ba:	4613      	mov	r3, r2
   173bc:	009b      	lsls	r3, r3, #2
   173be:	4413      	add	r3, r2
   173c0:	005b      	lsls	r3, r3, #1
   173c2:	1aca      	subs	r2, r1, r3
   173c4:	b2d3      	uxtb	r3, r2
   173c6:	3330      	adds	r3, #48	; 0x30
   173c8:	b2da      	uxtb	r2, r3
   173ca:	f107 010c 	add.w	r1, r7, #12
   173ce:	6a3b      	ldr	r3, [r7, #32]
   173d0:	440b      	add	r3, r1
   173d2:	701a      	strb	r2, [r3, #0]
            count ++;
   173d4:	6a3b      	ldr	r3, [r7, #32]
   173d6:	3301      	adds	r3, #1
   173d8:	623b      	str	r3, [r7, #32]
            num /= 10;
   173da:	69fa      	ldr	r2, [r7, #28]
   173dc:	f246 6367 	movw	r3, #26215	; 0x6667
   173e0:	f2c6 6366 	movt	r3, #26214	; 0x6666
   173e4:	fb83 1302 	smull	r1, r3, r3, r2
   173e8:	1099      	asrs	r1, r3, #2
   173ea:	17d3      	asrs	r3, r2, #31
   173ec:	1acb      	subs	r3, r1, r3
   173ee:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   173f0:	69fb      	ldr	r3, [r7, #28]
   173f2:	2b00      	cmp	r3, #0
   173f4:	d1d7      	bne.n	173a6 <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   173f6:	f107 020c 	add.w	r2, r7, #12
   173fa:	6a3b      	ldr	r3, [r7, #32]
   173fc:	4413      	add	r3, r2
   173fe:	2200      	movs	r2, #0
   17400:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   17402:	2300      	movs	r3, #0
   17404:	627b      	str	r3, [r7, #36]	; 0x24
   17406:	e020      	b.n	1744a <vPrintNumber+0xca>
        {
            tmp = time[i];
   17408:	f107 020c 	add.w	r2, r7, #12
   1740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1740e:	4413      	add	r3, r2
   17410:	781b      	ldrb	r3, [r3, #0]
   17412:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   17414:	6a3a      	ldr	r2, [r7, #32]
   17416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17418:	1ad3      	subs	r3, r2, r3
   1741a:	3b01      	subs	r3, #1
   1741c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   17420:	4413      	add	r3, r2
   17422:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   17426:	f107 010c 	add.w	r1, r7, #12
   1742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1742c:	440b      	add	r3, r1
   1742e:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   17430:	6a3a      	ldr	r2, [r7, #32]
   17432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17434:	1ad3      	subs	r3, r2, r3
   17436:	3b01      	subs	r3, #1
   17438:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1743c:	440b      	add	r3, r1
   1743e:	7efa      	ldrb	r2, [r7, #27]
   17440:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   17444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17446:	3301      	adds	r3, #1
   17448:	627b      	str	r3, [r7, #36]	; 0x24
   1744a:	6a3b      	ldr	r3, [r7, #32]
   1744c:	085a      	lsrs	r2, r3, #1
   1744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17450:	429a      	cmp	r2, r3
   17452:	d8d9      	bhi.n	17408 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   17454:	f107 030c 	add.w	r3, r7, #12
   17458:	4618      	mov	r0, r3
   1745a:	f7ff ff77 	bl	1734c <vPrintString>
        vPrintString("\n\r");
   1745e:	f648 10d8 	movw	r0, #35288	; 0x89d8
   17462:	f2c0 0001 	movt	r0, #1
   17466:	f7ff ff71 	bl	1734c <vPrintString>
    }
}
   1746a:	3728      	adds	r7, #40	; 0x28
   1746c:	46bd      	mov	sp, r7
   1746e:	bd80      	pop	{r7, pc}

00017470 <vInitInitialise>:

extern xTaskComplete[NUMBEROFTASK];


void vInitInitialise()
{
   17470:	b480      	push	{r7}
   17472:	b083      	sub	sp, #12
   17474:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    for(i = 0; i < NUMBEROFTASK; ++ i)
   17476:	2300      	movs	r3, #0
   17478:	607b      	str	r3, [r7, #4]
   1747a:	e00a      	b.n	17492 <vInitInitialise+0x22>
    {
        IS_INIT[i] = 0;
   1747c:	f24c 7374 	movw	r3, #51060	; 0xc774
   17480:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17484:	687a      	ldr	r2, [r7, #4]
   17486:	2100      	movs	r1, #0
   17488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


void vInitInitialise()
{
    portBASE_TYPE i;
    for(i = 0; i < NUMBEROFTASK; ++ i)
   1748c:	687b      	ldr	r3, [r7, #4]
   1748e:	3301      	adds	r3, #1
   17490:	607b      	str	r3, [r7, #4]
   17492:	687b      	ldr	r3, [r7, #4]
   17494:	2b0c      	cmp	r3, #12
   17496:	ddf1      	ble.n	1747c <vInitInitialise+0xc>
    {
        IS_INIT[i] = 0;
    }
}
   17498:	370c      	adds	r7, #12
   1749a:	46bd      	mov	sp, r7
   1749c:	f85d 7b04 	ldr.w	r7, [sp], #4
   174a0:	4770      	bx	lr
   174a2:	bf00      	nop

000174a4 <main>:

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   174a4:	b590      	push	{r4, r7, lr}
   174a6:	b089      	sub	sp, #36	; 0x24
   174a8:	af04      	add	r7, sp, #16
    init_led();
   174aa:	f7ff fe45 	bl	17138 <init_led>
    init_rs232();
   174ae:	f7ff fea5 	bl	171fc <init_rs232>
    enable_rs232_interrupts();
   174b2:	f7ff fee9 	bl	17288 <enable_rs232_interrupts>
    enable_rs232();
   174b6:	f7ff ff09 	bl	172cc <enable_rs232>

    //vTaskCompleteInitialise();
    vInitInitialise();
   174ba:	f7ff ffd9 	bl	17470 <vInitInitialise>
    vSemaphoreInitialise();
   174be:	f7eb fdfb 	bl	30b8 <vSemaphoreInitialise>
    vParameterInitialise();
   174c2:	f7eb fe39 	bl	3138 <vParameterInitialise>
    vInitialiseEventLists(NUMBEROFEVENTS);  // parameter from app.h 
   174c6:	200d      	movs	r0, #13
   174c8:	f7eb fa1e 	bl	2908 <vInitialiseEventLists>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;
   174cc:	2300      	movs	r3, #0
   174ce:	607b      	str	r3, [r7, #4]

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);
   174d0:	2301      	movs	r3, #1
   174d2:	9300      	str	r3, [sp, #0]
   174d4:	4b41      	ldr	r3, [pc, #260]	; (175dc <main+0x138>)
   174d6:	9301      	str	r3, [sp, #4]
   174d8:	2300      	movs	r3, #0
   174da:	9302      	str	r3, [sp, #8]
   174dc:	2300      	movs	r3, #0
   174de:	9303      	str	r3, [sp, #12]
   174e0:	f643 203d 	movw	r0, #14909	; 0x3a3d
   174e4:	f2c0 0000 	movt	r0, #0
   174e8:	f648 11dc 	movw	r1, #35292	; 0x89dc
   174ec:	f2c0 0101 	movt	r1, #1
   174f0:	2280      	movs	r2, #128	; 0x80
   174f2:	4b3b      	ldr	r3, [pc, #236]	; (175e0 <main+0x13c>)
   174f4:	f7ed fa02 	bl	48fc <xTaskGenericCreate>

    for( i = 0; i < NUMBEROFSERVANT-1; ++ i )
   174f8:	2300      	movs	r3, #0
   174fa:	60fb      	str	r3, [r7, #12]
   174fc:	e064      	b.n	175c8 <main+0x124>
    {
        for(j = 0; j < NUMBEROFTASK; ++ j)
   174fe:	2300      	movs	r3, #0
   17500:	60bb      	str	r3, [r7, #8]
   17502:	e00f      	b.n	17524 <main+0x80>
        {
            if( i == xSensorOfTask[j] )
   17504:	f240 0360 	movw	r3, #96	; 0x60
   17508:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1750c:	68ba      	ldr	r2, [r7, #8]
   1750e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   17512:	68fb      	ldr	r3, [r7, #12]
   17514:	429a      	cmp	r2, r3
   17516:	d102      	bne.n	1751e <main+0x7a>
            {
                flag = 1;  // sensor 
   17518:	2301      	movs	r3, #1
   1751a:	607b      	str	r3, [r7, #4]
                break;
   1751c:	e005      	b.n	1752a <main+0x86>

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);

    for( i = 0; i < NUMBEROFSERVANT-1; ++ i )
    {
        for(j = 0; j < NUMBEROFTASK; ++ j)
   1751e:	68bb      	ldr	r3, [r7, #8]
   17520:	3301      	adds	r3, #1
   17522:	60bb      	str	r3, [r7, #8]
   17524:	68bb      	ldr	r3, [r7, #8]
   17526:	2b0c      	cmp	r3, #12
   17528:	ddec      	ble.n	17504 <main+0x60>
                flag = 1;  // sensor 
                break;
            }
        }
        // create sensor 
        if(flag == 1)
   1752a:	687b      	ldr	r3, [r7, #4]
   1752c:	2b01      	cmp	r3, #1
   1752e:	d125      	bne.n	1757c <main+0xd8>
        {
            flag = 0; 
   17530:	2300      	movs	r3, #0
   17532:	607b      	str	r3, [r7, #4]
            xTaskCreate( vSensor, "sensor", SERVANT_STACK_SIZE, (void *)&pvParameters[i], tskIDLE_PRIORITY + 2, &xTaskOfHandle[i] );
   17534:	68fb      	ldr	r3, [r7, #12]
   17536:	222c      	movs	r2, #44	; 0x2c
   17538:	fb02 f203 	mul.w	r2, r2, r3
   1753c:	f240 5378 	movw	r3, #1400	; 0x578
   17540:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17544:	18d4      	adds	r4, r2, r3
   17546:	68fb      	ldr	r3, [r7, #12]
   17548:	009a      	lsls	r2, r3, #2
   1754a:	f640 4308 	movw	r3, #3080	; 0xc08
   1754e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17552:	4413      	add	r3, r2
   17554:	2202      	movs	r2, #2
   17556:	9200      	str	r2, [sp, #0]
   17558:	9301      	str	r3, [sp, #4]
   1755a:	2300      	movs	r3, #0
   1755c:	9302      	str	r3, [sp, #8]
   1755e:	2300      	movs	r3, #0
   17560:	9303      	str	r3, [sp, #12]
   17562:	f243 50b1 	movw	r0, #13745	; 0x35b1
   17566:	f2c0 0000 	movt	r0, #0
   1756a:	f648 11e8 	movw	r1, #35304	; 0x89e8
   1756e:	f2c0 0101 	movt	r1, #1
   17572:	2280      	movs	r2, #128	; 0x80
   17574:	4623      	mov	r3, r4
   17576:	f7ed f9c1 	bl	48fc <xTaskGenericCreate>
   1757a:	e022      	b.n	175c2 <main+0x11e>
        }
        else  // create servant
        {
            xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[i], tskIDLE_PRIORITY + 2, &xTaskOfHandle[i] );
   1757c:	68fb      	ldr	r3, [r7, #12]
   1757e:	222c      	movs	r2, #44	; 0x2c
   17580:	fb02 f203 	mul.w	r2, r2, r3
   17584:	f240 5378 	movw	r3, #1400	; 0x578
   17588:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1758c:	18d4      	adds	r4, r2, r3
   1758e:	68fb      	ldr	r3, [r7, #12]
   17590:	009a      	lsls	r2, r3, #2
   17592:	f640 4308 	movw	r3, #3080	; 0xc08
   17596:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1759a:	4413      	add	r3, r2
   1759c:	2202      	movs	r2, #2
   1759e:	9200      	str	r2, [sp, #0]
   175a0:	9301      	str	r3, [sp, #4]
   175a2:	2300      	movs	r3, #0
   175a4:	9302      	str	r3, [sp, #8]
   175a6:	2300      	movs	r3, #0
   175a8:	9303      	str	r3, [sp, #12]
   175aa:	f643 001d 	movw	r0, #14365	; 0x381d
   175ae:	f2c0 0000 	movt	r0, #0
   175b2:	f648 11f0 	movw	r1, #35312	; 0x89f0
   175b6:	f2c0 0101 	movt	r1, #1
   175ba:	2280      	movs	r2, #128	; 0x80
   175bc:	4623      	mov	r3, r4
   175be:	f7ed f99d 	bl	48fc <xTaskGenericCreate>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);

    for( i = 0; i < NUMBEROFSERVANT-1; ++ i )
   175c2:	68fb      	ldr	r3, [r7, #12]
   175c4:	3301      	adds	r3, #1
   175c6:	60fb      	str	r3, [r7, #12]
   175c8:	68fb      	ldr	r3, [r7, #12]
   175ca:	2b21      	cmp	r3, #33	; 0x21
   175cc:	dd97      	ble.n	174fe <main+0x5a>
        {
            xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[i], tskIDLE_PRIORITY + 2, &xTaskOfHandle[i] );
        }
    }
    /* Start running the task. */
    vTaskStartScheduler();
   175ce:	f7ed fd13 	bl	4ff8 <vTaskStartScheduler>

    return 0;
   175d2:	2300      	movs	r3, #0
}
   175d4:	4618      	mov	r0, r3
   175d6:	3714      	adds	r7, #20
   175d8:	46bd      	mov	sp, r7
   175da:	bd90      	pop	{r4, r7, pc}
   175dc:	20000c90 	.word	0x20000c90
   175e0:	20000b50 	.word	0x20000b50

000175e4 <myTraceCreate>:

void myTraceCreate      (){
   175e4:	b480      	push	{r7}
   175e6:	af00      	add	r7, sp, #0
}
   175e8:	46bd      	mov	sp, r7
   175ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   175ee:	4770      	bx	lr

000175f0 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   175f0:	b480      	push	{r7}
   175f2:	af00      	add	r7, sp, #0
}
   175f4:	46bd      	mov	sp, r7
   175f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   175fa:	4770      	bx	lr

000175fc <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   175fc:	b480      	push	{r7}
   175fe:	af00      	add	r7, sp, #0
}
   17600:	46bd      	mov	sp, r7
   17602:	f85d 7b04 	ldr.w	r7, [sp], #4
   17606:	4770      	bx	lr

00017608 <vApplicationTickHook>:
 *
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   17608:	b580      	push	{r7, lr}
   1760a:	b082      	sub	sp, #8
   1760c:	af00      	add	r7, sp, #0
    portTickType xCurrentTime = xTaskGetTickCount();
   1760e:	f7ed fddd 	bl	51cc <xTaskGetTickCount>
   17612:	6038      	str	r0, [r7, #0]
    portBASE_TYPE i;
    /* init task */
    if(xCurrentTime > 0 && xCurrentTime < 2501)
   17614:	683b      	ldr	r3, [r7, #0]
   17616:	2b00      	cmp	r3, #0
   17618:	d040      	beq.n	1769c <vApplicationTickHook+0x94>
   1761a:	683a      	ldr	r2, [r7, #0]
   1761c:	f640 13c4 	movw	r3, #2500	; 0x9c4
   17620:	429a      	cmp	r2, r3
   17622:	d83b      	bhi.n	1769c <vApplicationTickHook+0x94>
    {
        for(i = 0; i < NUMBEROFTASK; ++i)
   17624:	2300      	movs	r3, #0
   17626:	607b      	str	r3, [r7, #4]
   17628:	e035      	b.n	17696 <vApplicationTickHook+0x8e>
        {
            if( IS_INIT[i] == 0 && xCurrentTime % xPeriodOfTask[i] == 0 )
   1762a:	f24c 7374 	movw	r3, #51060	; 0xc774
   1762e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17632:	687a      	ldr	r2, [r7, #4]
   17634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   17638:	2b00      	cmp	r3, #0
   1763a:	d129      	bne.n	17690 <vApplicationTickHook+0x88>
   1763c:	f240 032c 	movw	r3, #44	; 0x2c
   17640:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17644:	687a      	ldr	r2, [r7, #4]
   17646:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1764a:	683b      	ldr	r3, [r7, #0]
   1764c:	fbb3 f1f2 	udiv	r1, r3, r2
   17650:	fb02 f201 	mul.w	r2, r2, r1
   17654:	1a9b      	subs	r3, r3, r2
   17656:	2b00      	cmp	r3, #0
   17658:	d11a      	bne.n	17690 <vApplicationTickHook+0x88>
            {
                IS_INIT[i] = 1;
   1765a:	f24c 7374 	movw	r3, #51060	; 0xc774
   1765e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17662:	687a      	ldr	r2, [r7, #4]
   17664:	2101      	movs	r1, #1
   17666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xSemaphoreGive( xBinarySemaphore[xSensorOfTask[i]] );
   1766a:	f240 0360 	movw	r3, #96	; 0x60
   1766e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17672:	687a      	ldr	r2, [r7, #4]
   17674:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   17678:	f640 337c 	movw	r3, #2940	; 0xb7c
   1767c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   17684:	4618      	mov	r0, r3
   17686:	2100      	movs	r1, #0
   17688:	2200      	movs	r2, #0
   1768a:	2300      	movs	r3, #0
   1768c:	f7ec fe24 	bl	42d8 <xQueueGenericSend>
    portTickType xCurrentTime = xTaskGetTickCount();
    portBASE_TYPE i;
    /* init task */
    if(xCurrentTime > 0 && xCurrentTime < 2501)
    {
        for(i = 0; i < NUMBEROFTASK; ++i)
   17690:	687b      	ldr	r3, [r7, #4]
   17692:	3301      	adds	r3, #1
   17694:	607b      	str	r3, [r7, #4]
   17696:	687b      	ldr	r3, [r7, #4]
   17698:	2b0c      	cmp	r3, #12
   1769a:	ddc6      	ble.n	1762a <vApplicationTickHook+0x22>
    }
    
    // R-Servant will be suspend when no events need to be proceeded.
    // As a result, we need to send semaphore to R-Servant to triggered it processing events 
    // when time meeting the start time of every task period
    if(Is_Executable_Event_Arrive())
   1769c:	f7eb fbf8 	bl	2e90 <Is_Executable_Event_Arrive>
   176a0:	4603      	mov	r3, r0
   176a2:	2b00      	cmp	r3, #0
   176a4:	d00b      	beq.n	176be <vApplicationTickHook+0xb6>
    {
       xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT - 1] ); 
   176a6:	f640 337c 	movw	r3, #2940	; 0xb7c
   176aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   176ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   176b2:	4618      	mov	r0, r3
   176b4:	2100      	movs	r1, #0
   176b6:	2200      	movs	r2, #0
   176b8:	2300      	movs	r3, #0
   176ba:	f7ec fe0d 	bl	42d8 <xQueueGenericSend>
    }
}
   176be:	3708      	adds	r7, #8
   176c0:	46bd      	mov	sp, r7
   176c2:	bd80      	pop	{r7, pc}

000176c4 <__aeabi_drsub>:
   176c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   176c8:	e002      	b.n	176d0 <__adddf3>
   176ca:	bf00      	nop

000176cc <__aeabi_dsub>:
   176cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000176d0 <__adddf3>:
   176d0:	b530      	push	{r4, r5, lr}
   176d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   176d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   176da:	ea94 0f05 	teq	r4, r5
   176de:	bf08      	it	eq
   176e0:	ea90 0f02 	teqeq	r0, r2
   176e4:	bf1f      	itttt	ne
   176e6:	ea54 0c00 	orrsne.w	ip, r4, r0
   176ea:	ea55 0c02 	orrsne.w	ip, r5, r2
   176ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   176f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   176f6:	f000 80e2 	beq.w	178be <__adddf3+0x1ee>
   176fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   176fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   17702:	bfb8      	it	lt
   17704:	426d      	neglt	r5, r5
   17706:	dd0c      	ble.n	17722 <__adddf3+0x52>
   17708:	442c      	add	r4, r5
   1770a:	ea80 0202 	eor.w	r2, r0, r2
   1770e:	ea81 0303 	eor.w	r3, r1, r3
   17712:	ea82 0000 	eor.w	r0, r2, r0
   17716:	ea83 0101 	eor.w	r1, r3, r1
   1771a:	ea80 0202 	eor.w	r2, r0, r2
   1771e:	ea81 0303 	eor.w	r3, r1, r3
   17722:	2d36      	cmp	r5, #54	; 0x36
   17724:	bf88      	it	hi
   17726:	bd30      	pophi	{r4, r5, pc}
   17728:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1772c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17730:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   17734:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   17738:	d002      	beq.n	17740 <__adddf3+0x70>
   1773a:	4240      	negs	r0, r0
   1773c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17740:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   17744:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17748:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1774c:	d002      	beq.n	17754 <__adddf3+0x84>
   1774e:	4252      	negs	r2, r2
   17750:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   17754:	ea94 0f05 	teq	r4, r5
   17758:	f000 80a7 	beq.w	178aa <__adddf3+0x1da>
   1775c:	f1a4 0401 	sub.w	r4, r4, #1
   17760:	f1d5 0e20 	rsbs	lr, r5, #32
   17764:	db0d      	blt.n	17782 <__adddf3+0xb2>
   17766:	fa02 fc0e 	lsl.w	ip, r2, lr
   1776a:	fa22 f205 	lsr.w	r2, r2, r5
   1776e:	1880      	adds	r0, r0, r2
   17770:	f141 0100 	adc.w	r1, r1, #0
   17774:	fa03 f20e 	lsl.w	r2, r3, lr
   17778:	1880      	adds	r0, r0, r2
   1777a:	fa43 f305 	asr.w	r3, r3, r5
   1777e:	4159      	adcs	r1, r3
   17780:	e00e      	b.n	177a0 <__adddf3+0xd0>
   17782:	f1a5 0520 	sub.w	r5, r5, #32
   17786:	f10e 0e20 	add.w	lr, lr, #32
   1778a:	2a01      	cmp	r2, #1
   1778c:	fa03 fc0e 	lsl.w	ip, r3, lr
   17790:	bf28      	it	cs
   17792:	f04c 0c02 	orrcs.w	ip, ip, #2
   17796:	fa43 f305 	asr.w	r3, r3, r5
   1779a:	18c0      	adds	r0, r0, r3
   1779c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   177a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   177a4:	d507      	bpl.n	177b6 <__adddf3+0xe6>
   177a6:	f04f 0e00 	mov.w	lr, #0
   177aa:	f1dc 0c00 	rsbs	ip, ip, #0
   177ae:	eb7e 0000 	sbcs.w	r0, lr, r0
   177b2:	eb6e 0101 	sbc.w	r1, lr, r1
   177b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   177ba:	d31b      	bcc.n	177f4 <__adddf3+0x124>
   177bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   177c0:	d30c      	bcc.n	177dc <__adddf3+0x10c>
   177c2:	0849      	lsrs	r1, r1, #1
   177c4:	ea5f 0030 	movs.w	r0, r0, rrx
   177c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   177cc:	f104 0401 	add.w	r4, r4, #1
   177d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   177d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   177d8:	f080 809a 	bcs.w	17910 <__adddf3+0x240>
   177dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   177e0:	bf08      	it	eq
   177e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   177e6:	f150 0000 	adcs.w	r0, r0, #0
   177ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   177ee:	ea41 0105 	orr.w	r1, r1, r5
   177f2:	bd30      	pop	{r4, r5, pc}
   177f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   177f8:	4140      	adcs	r0, r0
   177fa:	eb41 0101 	adc.w	r1, r1, r1
   177fe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17802:	f1a4 0401 	sub.w	r4, r4, #1
   17806:	d1e9      	bne.n	177dc <__adddf3+0x10c>
   17808:	f091 0f00 	teq	r1, #0
   1780c:	bf04      	itt	eq
   1780e:	4601      	moveq	r1, r0
   17810:	2000      	moveq	r0, #0
   17812:	fab1 f381 	clz	r3, r1
   17816:	bf08      	it	eq
   17818:	3320      	addeq	r3, #32
   1781a:	f1a3 030b 	sub.w	r3, r3, #11
   1781e:	f1b3 0220 	subs.w	r2, r3, #32
   17822:	da0c      	bge.n	1783e <__adddf3+0x16e>
   17824:	320c      	adds	r2, #12
   17826:	dd08      	ble.n	1783a <__adddf3+0x16a>
   17828:	f102 0c14 	add.w	ip, r2, #20
   1782c:	f1c2 020c 	rsb	r2, r2, #12
   17830:	fa01 f00c 	lsl.w	r0, r1, ip
   17834:	fa21 f102 	lsr.w	r1, r1, r2
   17838:	e00c      	b.n	17854 <__adddf3+0x184>
   1783a:	f102 0214 	add.w	r2, r2, #20
   1783e:	bfd8      	it	le
   17840:	f1c2 0c20 	rsble	ip, r2, #32
   17844:	fa01 f102 	lsl.w	r1, r1, r2
   17848:	fa20 fc0c 	lsr.w	ip, r0, ip
   1784c:	bfdc      	itt	le
   1784e:	ea41 010c 	orrle.w	r1, r1, ip
   17852:	4090      	lslle	r0, r2
   17854:	1ae4      	subs	r4, r4, r3
   17856:	bfa2      	ittt	ge
   17858:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1785c:	4329      	orrge	r1, r5
   1785e:	bd30      	popge	{r4, r5, pc}
   17860:	ea6f 0404 	mvn.w	r4, r4
   17864:	3c1f      	subs	r4, #31
   17866:	da1c      	bge.n	178a2 <__adddf3+0x1d2>
   17868:	340c      	adds	r4, #12
   1786a:	dc0e      	bgt.n	1788a <__adddf3+0x1ba>
   1786c:	f104 0414 	add.w	r4, r4, #20
   17870:	f1c4 0220 	rsb	r2, r4, #32
   17874:	fa20 f004 	lsr.w	r0, r0, r4
   17878:	fa01 f302 	lsl.w	r3, r1, r2
   1787c:	ea40 0003 	orr.w	r0, r0, r3
   17880:	fa21 f304 	lsr.w	r3, r1, r4
   17884:	ea45 0103 	orr.w	r1, r5, r3
   17888:	bd30      	pop	{r4, r5, pc}
   1788a:	f1c4 040c 	rsb	r4, r4, #12
   1788e:	f1c4 0220 	rsb	r2, r4, #32
   17892:	fa20 f002 	lsr.w	r0, r0, r2
   17896:	fa01 f304 	lsl.w	r3, r1, r4
   1789a:	ea40 0003 	orr.w	r0, r0, r3
   1789e:	4629      	mov	r1, r5
   178a0:	bd30      	pop	{r4, r5, pc}
   178a2:	fa21 f004 	lsr.w	r0, r1, r4
   178a6:	4629      	mov	r1, r5
   178a8:	bd30      	pop	{r4, r5, pc}
   178aa:	f094 0f00 	teq	r4, #0
   178ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   178b2:	bf06      	itte	eq
   178b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   178b8:	3401      	addeq	r4, #1
   178ba:	3d01      	subne	r5, #1
   178bc:	e74e      	b.n	1775c <__adddf3+0x8c>
   178be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   178c2:	bf18      	it	ne
   178c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   178c8:	d029      	beq.n	1791e <__adddf3+0x24e>
   178ca:	ea94 0f05 	teq	r4, r5
   178ce:	bf08      	it	eq
   178d0:	ea90 0f02 	teqeq	r0, r2
   178d4:	d005      	beq.n	178e2 <__adddf3+0x212>
   178d6:	ea54 0c00 	orrs.w	ip, r4, r0
   178da:	bf04      	itt	eq
   178dc:	4619      	moveq	r1, r3
   178de:	4610      	moveq	r0, r2
   178e0:	bd30      	pop	{r4, r5, pc}
   178e2:	ea91 0f03 	teq	r1, r3
   178e6:	bf1e      	ittt	ne
   178e8:	2100      	movne	r1, #0
   178ea:	2000      	movne	r0, #0
   178ec:	bd30      	popne	{r4, r5, pc}
   178ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   178f2:	d105      	bne.n	17900 <__adddf3+0x230>
   178f4:	0040      	lsls	r0, r0, #1
   178f6:	4149      	adcs	r1, r1
   178f8:	bf28      	it	cs
   178fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   178fe:	bd30      	pop	{r4, r5, pc}
   17900:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17904:	bf3c      	itt	cc
   17906:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1790a:	bd30      	popcc	{r4, r5, pc}
   1790c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17910:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   17914:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17918:	f04f 0000 	mov.w	r0, #0
   1791c:	bd30      	pop	{r4, r5, pc}
   1791e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17922:	bf1a      	itte	ne
   17924:	4619      	movne	r1, r3
   17926:	4610      	movne	r0, r2
   17928:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1792c:	bf1c      	itt	ne
   1792e:	460b      	movne	r3, r1
   17930:	4602      	movne	r2, r0
   17932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17936:	bf06      	itte	eq
   17938:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1793c:	ea91 0f03 	teqeq	r1, r3
   17940:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   17944:	bd30      	pop	{r4, r5, pc}
   17946:	bf00      	nop

00017948 <__aeabi_ui2d>:
   17948:	f090 0f00 	teq	r0, #0
   1794c:	bf04      	itt	eq
   1794e:	2100      	moveq	r1, #0
   17950:	4770      	bxeq	lr
   17952:	b530      	push	{r4, r5, lr}
   17954:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17958:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1795c:	f04f 0500 	mov.w	r5, #0
   17960:	f04f 0100 	mov.w	r1, #0
   17964:	e750      	b.n	17808 <__adddf3+0x138>
   17966:	bf00      	nop

00017968 <__aeabi_i2d>:
   17968:	f090 0f00 	teq	r0, #0
   1796c:	bf04      	itt	eq
   1796e:	2100      	moveq	r1, #0
   17970:	4770      	bxeq	lr
   17972:	b530      	push	{r4, r5, lr}
   17974:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17978:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1797c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   17980:	bf48      	it	mi
   17982:	4240      	negmi	r0, r0
   17984:	f04f 0100 	mov.w	r1, #0
   17988:	e73e      	b.n	17808 <__adddf3+0x138>
   1798a:	bf00      	nop

0001798c <__aeabi_f2d>:
   1798c:	0042      	lsls	r2, r0, #1
   1798e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   17992:	ea4f 0131 	mov.w	r1, r1, rrx
   17996:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1799a:	bf1f      	itttt	ne
   1799c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   179a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   179a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   179a8:	4770      	bxne	lr
   179aa:	f092 0f00 	teq	r2, #0
   179ae:	bf14      	ite	ne
   179b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   179b4:	4770      	bxeq	lr
   179b6:	b530      	push	{r4, r5, lr}
   179b8:	f44f 7460 	mov.w	r4, #896	; 0x380
   179bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   179c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   179c4:	e720      	b.n	17808 <__adddf3+0x138>
   179c6:	bf00      	nop

000179c8 <__aeabi_ul2d>:
   179c8:	ea50 0201 	orrs.w	r2, r0, r1
   179cc:	bf08      	it	eq
   179ce:	4770      	bxeq	lr
   179d0:	b530      	push	{r4, r5, lr}
   179d2:	f04f 0500 	mov.w	r5, #0
   179d6:	e00a      	b.n	179ee <__aeabi_l2d+0x16>

000179d8 <__aeabi_l2d>:
   179d8:	ea50 0201 	orrs.w	r2, r0, r1
   179dc:	bf08      	it	eq
   179de:	4770      	bxeq	lr
   179e0:	b530      	push	{r4, r5, lr}
   179e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   179e6:	d502      	bpl.n	179ee <__aeabi_l2d+0x16>
   179e8:	4240      	negs	r0, r0
   179ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   179ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
   179f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   179f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   179fa:	f43f aedc 	beq.w	177b6 <__adddf3+0xe6>
   179fe:	f04f 0203 	mov.w	r2, #3
   17a02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17a06:	bf18      	it	ne
   17a08:	3203      	addne	r2, #3
   17a0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17a0e:	bf18      	it	ne
   17a10:	3203      	addne	r2, #3
   17a12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   17a16:	f1c2 0320 	rsb	r3, r2, #32
   17a1a:	fa00 fc03 	lsl.w	ip, r0, r3
   17a1e:	fa20 f002 	lsr.w	r0, r0, r2
   17a22:	fa01 fe03 	lsl.w	lr, r1, r3
   17a26:	ea40 000e 	orr.w	r0, r0, lr
   17a2a:	fa21 f102 	lsr.w	r1, r1, r2
   17a2e:	4414      	add	r4, r2
   17a30:	e6c1      	b.n	177b6 <__adddf3+0xe6>
   17a32:	bf00      	nop

00017a34 <__aeabi_dmul>:
   17a34:	b570      	push	{r4, r5, r6, lr}
   17a36:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17a3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17a3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17a42:	bf1d      	ittte	ne
   17a44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17a48:	ea94 0f0c 	teqne	r4, ip
   17a4c:	ea95 0f0c 	teqne	r5, ip
   17a50:	f000 f8de 	bleq	17c10 <__aeabi_dmul+0x1dc>
   17a54:	442c      	add	r4, r5
   17a56:	ea81 0603 	eor.w	r6, r1, r3
   17a5a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   17a5e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   17a62:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   17a66:	bf18      	it	ne
   17a68:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   17a6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17a70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17a74:	d038      	beq.n	17ae8 <__aeabi_dmul+0xb4>
   17a76:	fba0 ce02 	umull	ip, lr, r0, r2
   17a7a:	f04f 0500 	mov.w	r5, #0
   17a7e:	fbe1 e502 	umlal	lr, r5, r1, r2
   17a82:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   17a86:	fbe0 e503 	umlal	lr, r5, r0, r3
   17a8a:	f04f 0600 	mov.w	r6, #0
   17a8e:	fbe1 5603 	umlal	r5, r6, r1, r3
   17a92:	f09c 0f00 	teq	ip, #0
   17a96:	bf18      	it	ne
   17a98:	f04e 0e01 	orrne.w	lr, lr, #1
   17a9c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   17aa0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17aa4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17aa8:	d204      	bcs.n	17ab4 <__aeabi_dmul+0x80>
   17aaa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17aae:	416d      	adcs	r5, r5
   17ab0:	eb46 0606 	adc.w	r6, r6, r6
   17ab4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17ab8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17abc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17ac0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17ac4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17ac8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17acc:	bf88      	it	hi
   17ace:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17ad2:	d81e      	bhi.n	17b12 <__aeabi_dmul+0xde>
   17ad4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17ad8:	bf08      	it	eq
   17ada:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17ade:	f150 0000 	adcs.w	r0, r0, #0
   17ae2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17ae6:	bd70      	pop	{r4, r5, r6, pc}
   17ae8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17aec:	ea46 0101 	orr.w	r1, r6, r1
   17af0:	ea40 0002 	orr.w	r0, r0, r2
   17af4:	ea81 0103 	eor.w	r1, r1, r3
   17af8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17afc:	bfc2      	ittt	gt
   17afe:	ebd4 050c 	rsbsgt	r5, r4, ip
   17b02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17b06:	bd70      	popgt	{r4, r5, r6, pc}
   17b08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17b0c:	f04f 0e00 	mov.w	lr, #0
   17b10:	3c01      	subs	r4, #1
   17b12:	f300 80ab 	bgt.w	17c6c <__aeabi_dmul+0x238>
   17b16:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17b1a:	bfde      	ittt	le
   17b1c:	2000      	movle	r0, #0
   17b1e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17b22:	bd70      	pople	{r4, r5, r6, pc}
   17b24:	f1c4 0400 	rsb	r4, r4, #0
   17b28:	3c20      	subs	r4, #32
   17b2a:	da35      	bge.n	17b98 <__aeabi_dmul+0x164>
   17b2c:	340c      	adds	r4, #12
   17b2e:	dc1b      	bgt.n	17b68 <__aeabi_dmul+0x134>
   17b30:	f104 0414 	add.w	r4, r4, #20
   17b34:	f1c4 0520 	rsb	r5, r4, #32
   17b38:	fa00 f305 	lsl.w	r3, r0, r5
   17b3c:	fa20 f004 	lsr.w	r0, r0, r4
   17b40:	fa01 f205 	lsl.w	r2, r1, r5
   17b44:	ea40 0002 	orr.w	r0, r0, r2
   17b48:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   17b4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17b50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17b54:	fa21 f604 	lsr.w	r6, r1, r4
   17b58:	eb42 0106 	adc.w	r1, r2, r6
   17b5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17b60:	bf08      	it	eq
   17b62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17b66:	bd70      	pop	{r4, r5, r6, pc}
   17b68:	f1c4 040c 	rsb	r4, r4, #12
   17b6c:	f1c4 0520 	rsb	r5, r4, #32
   17b70:	fa00 f304 	lsl.w	r3, r0, r4
   17b74:	fa20 f005 	lsr.w	r0, r0, r5
   17b78:	fa01 f204 	lsl.w	r2, r1, r4
   17b7c:	ea40 0002 	orr.w	r0, r0, r2
   17b80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17b84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17b88:	f141 0100 	adc.w	r1, r1, #0
   17b8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17b90:	bf08      	it	eq
   17b92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17b96:	bd70      	pop	{r4, r5, r6, pc}
   17b98:	f1c4 0520 	rsb	r5, r4, #32
   17b9c:	fa00 f205 	lsl.w	r2, r0, r5
   17ba0:	ea4e 0e02 	orr.w	lr, lr, r2
   17ba4:	fa20 f304 	lsr.w	r3, r0, r4
   17ba8:	fa01 f205 	lsl.w	r2, r1, r5
   17bac:	ea43 0302 	orr.w	r3, r3, r2
   17bb0:	fa21 f004 	lsr.w	r0, r1, r4
   17bb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17bb8:	fa21 f204 	lsr.w	r2, r1, r4
   17bbc:	ea20 0002 	bic.w	r0, r0, r2
   17bc0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17bc4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17bc8:	bf08      	it	eq
   17bca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17bce:	bd70      	pop	{r4, r5, r6, pc}
   17bd0:	f094 0f00 	teq	r4, #0
   17bd4:	d10f      	bne.n	17bf6 <__aeabi_dmul+0x1c2>
   17bd6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17bda:	0040      	lsls	r0, r0, #1
   17bdc:	eb41 0101 	adc.w	r1, r1, r1
   17be0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17be4:	bf08      	it	eq
   17be6:	3c01      	subeq	r4, #1
   17be8:	d0f7      	beq.n	17bda <__aeabi_dmul+0x1a6>
   17bea:	ea41 0106 	orr.w	r1, r1, r6
   17bee:	f095 0f00 	teq	r5, #0
   17bf2:	bf18      	it	ne
   17bf4:	4770      	bxne	lr
   17bf6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17bfa:	0052      	lsls	r2, r2, #1
   17bfc:	eb43 0303 	adc.w	r3, r3, r3
   17c00:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17c04:	bf08      	it	eq
   17c06:	3d01      	subeq	r5, #1
   17c08:	d0f7      	beq.n	17bfa <__aeabi_dmul+0x1c6>
   17c0a:	ea43 0306 	orr.w	r3, r3, r6
   17c0e:	4770      	bx	lr
   17c10:	ea94 0f0c 	teq	r4, ip
   17c14:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17c18:	bf18      	it	ne
   17c1a:	ea95 0f0c 	teqne	r5, ip
   17c1e:	d00c      	beq.n	17c3a <__aeabi_dmul+0x206>
   17c20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17c24:	bf18      	it	ne
   17c26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17c2a:	d1d1      	bne.n	17bd0 <__aeabi_dmul+0x19c>
   17c2c:	ea81 0103 	eor.w	r1, r1, r3
   17c30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17c34:	f04f 0000 	mov.w	r0, #0
   17c38:	bd70      	pop	{r4, r5, r6, pc}
   17c3a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17c3e:	bf06      	itte	eq
   17c40:	4610      	moveq	r0, r2
   17c42:	4619      	moveq	r1, r3
   17c44:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17c48:	d019      	beq.n	17c7e <__aeabi_dmul+0x24a>
   17c4a:	ea94 0f0c 	teq	r4, ip
   17c4e:	d102      	bne.n	17c56 <__aeabi_dmul+0x222>
   17c50:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17c54:	d113      	bne.n	17c7e <__aeabi_dmul+0x24a>
   17c56:	ea95 0f0c 	teq	r5, ip
   17c5a:	d105      	bne.n	17c68 <__aeabi_dmul+0x234>
   17c5c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17c60:	bf1c      	itt	ne
   17c62:	4610      	movne	r0, r2
   17c64:	4619      	movne	r1, r3
   17c66:	d10a      	bne.n	17c7e <__aeabi_dmul+0x24a>
   17c68:	ea81 0103 	eor.w	r1, r1, r3
   17c6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17c70:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17c74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17c78:	f04f 0000 	mov.w	r0, #0
   17c7c:	bd70      	pop	{r4, r5, r6, pc}
   17c7e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17c82:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17c86:	bd70      	pop	{r4, r5, r6, pc}

00017c88 <__aeabi_ddiv>:
   17c88:	b570      	push	{r4, r5, r6, lr}
   17c8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17c8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17c92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17c96:	bf1d      	ittte	ne
   17c98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17c9c:	ea94 0f0c 	teqne	r4, ip
   17ca0:	ea95 0f0c 	teqne	r5, ip
   17ca4:	f000 f8a7 	bleq	17df6 <__aeabi_ddiv+0x16e>
   17ca8:	eba4 0405 	sub.w	r4, r4, r5
   17cac:	ea81 0e03 	eor.w	lr, r1, r3
   17cb0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17cb4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17cb8:	f000 8088 	beq.w	17dcc <__aeabi_ddiv+0x144>
   17cbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17cc0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17cc4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17cc8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17ccc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17cd0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17cd4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17cd8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17cdc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17ce0:	429d      	cmp	r5, r3
   17ce2:	bf08      	it	eq
   17ce4:	4296      	cmpeq	r6, r2
   17ce6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17cea:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17cee:	d202      	bcs.n	17cf6 <__aeabi_ddiv+0x6e>
   17cf0:	085b      	lsrs	r3, r3, #1
   17cf2:	ea4f 0232 	mov.w	r2, r2, rrx
   17cf6:	1ab6      	subs	r6, r6, r2
   17cf8:	eb65 0503 	sbc.w	r5, r5, r3
   17cfc:	085b      	lsrs	r3, r3, #1
   17cfe:	ea4f 0232 	mov.w	r2, r2, rrx
   17d02:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   17d06:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17d0a:	ebb6 0e02 	subs.w	lr, r6, r2
   17d0e:	eb75 0e03 	sbcs.w	lr, r5, r3
   17d12:	bf22      	ittt	cs
   17d14:	1ab6      	subcs	r6, r6, r2
   17d16:	4675      	movcs	r5, lr
   17d18:	ea40 000c 	orrcs.w	r0, r0, ip
   17d1c:	085b      	lsrs	r3, r3, #1
   17d1e:	ea4f 0232 	mov.w	r2, r2, rrx
   17d22:	ebb6 0e02 	subs.w	lr, r6, r2
   17d26:	eb75 0e03 	sbcs.w	lr, r5, r3
   17d2a:	bf22      	ittt	cs
   17d2c:	1ab6      	subcs	r6, r6, r2
   17d2e:	4675      	movcs	r5, lr
   17d30:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   17d34:	085b      	lsrs	r3, r3, #1
   17d36:	ea4f 0232 	mov.w	r2, r2, rrx
   17d3a:	ebb6 0e02 	subs.w	lr, r6, r2
   17d3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   17d42:	bf22      	ittt	cs
   17d44:	1ab6      	subcs	r6, r6, r2
   17d46:	4675      	movcs	r5, lr
   17d48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   17d4c:	085b      	lsrs	r3, r3, #1
   17d4e:	ea4f 0232 	mov.w	r2, r2, rrx
   17d52:	ebb6 0e02 	subs.w	lr, r6, r2
   17d56:	eb75 0e03 	sbcs.w	lr, r5, r3
   17d5a:	bf22      	ittt	cs
   17d5c:	1ab6      	subcs	r6, r6, r2
   17d5e:	4675      	movcs	r5, lr
   17d60:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   17d64:	ea55 0e06 	orrs.w	lr, r5, r6
   17d68:	d018      	beq.n	17d9c <__aeabi_ddiv+0x114>
   17d6a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   17d6e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   17d72:	ea4f 1606 	mov.w	r6, r6, lsl #4
   17d76:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   17d7a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   17d7e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   17d82:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   17d86:	d1c0      	bne.n	17d0a <__aeabi_ddiv+0x82>
   17d88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17d8c:	d10b      	bne.n	17da6 <__aeabi_ddiv+0x11e>
   17d8e:	ea41 0100 	orr.w	r1, r1, r0
   17d92:	f04f 0000 	mov.w	r0, #0
   17d96:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   17d9a:	e7b6      	b.n	17d0a <__aeabi_ddiv+0x82>
   17d9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17da0:	bf04      	itt	eq
   17da2:	4301      	orreq	r1, r0
   17da4:	2000      	moveq	r0, #0
   17da6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17daa:	bf88      	it	hi
   17dac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17db0:	f63f aeaf 	bhi.w	17b12 <__aeabi_dmul+0xde>
   17db4:	ebb5 0c03 	subs.w	ip, r5, r3
   17db8:	bf04      	itt	eq
   17dba:	ebb6 0c02 	subseq.w	ip, r6, r2
   17dbe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17dc2:	f150 0000 	adcs.w	r0, r0, #0
   17dc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17dca:	bd70      	pop	{r4, r5, r6, pc}
   17dcc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   17dd0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   17dd4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   17dd8:	bfc2      	ittt	gt
   17dda:	ebd4 050c 	rsbsgt	r5, r4, ip
   17dde:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17de2:	bd70      	popgt	{r4, r5, r6, pc}
   17de4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17de8:	f04f 0e00 	mov.w	lr, #0
   17dec:	3c01      	subs	r4, #1
   17dee:	e690      	b.n	17b12 <__aeabi_dmul+0xde>
   17df0:	ea45 0e06 	orr.w	lr, r5, r6
   17df4:	e68d      	b.n	17b12 <__aeabi_dmul+0xde>
   17df6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17dfa:	ea94 0f0c 	teq	r4, ip
   17dfe:	bf08      	it	eq
   17e00:	ea95 0f0c 	teqeq	r5, ip
   17e04:	f43f af3b 	beq.w	17c7e <__aeabi_dmul+0x24a>
   17e08:	ea94 0f0c 	teq	r4, ip
   17e0c:	d10a      	bne.n	17e24 <__aeabi_ddiv+0x19c>
   17e0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17e12:	f47f af34 	bne.w	17c7e <__aeabi_dmul+0x24a>
   17e16:	ea95 0f0c 	teq	r5, ip
   17e1a:	f47f af25 	bne.w	17c68 <__aeabi_dmul+0x234>
   17e1e:	4610      	mov	r0, r2
   17e20:	4619      	mov	r1, r3
   17e22:	e72c      	b.n	17c7e <__aeabi_dmul+0x24a>
   17e24:	ea95 0f0c 	teq	r5, ip
   17e28:	d106      	bne.n	17e38 <__aeabi_ddiv+0x1b0>
   17e2a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17e2e:	f43f aefd 	beq.w	17c2c <__aeabi_dmul+0x1f8>
   17e32:	4610      	mov	r0, r2
   17e34:	4619      	mov	r1, r3
   17e36:	e722      	b.n	17c7e <__aeabi_dmul+0x24a>
   17e38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17e3c:	bf18      	it	ne
   17e3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17e42:	f47f aec5 	bne.w	17bd0 <__aeabi_dmul+0x19c>
   17e46:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   17e4a:	f47f af0d 	bne.w	17c68 <__aeabi_dmul+0x234>
   17e4e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   17e52:	f47f aeeb 	bne.w	17c2c <__aeabi_dmul+0x1f8>
   17e56:	e712      	b.n	17c7e <__aeabi_dmul+0x24a>

00017e58 <__gedf2>:
   17e58:	f04f 3cff 	mov.w	ip, #4294967295
   17e5c:	e006      	b.n	17e6c <__cmpdf2+0x4>
   17e5e:	bf00      	nop

00017e60 <__ledf2>:
   17e60:	f04f 0c01 	mov.w	ip, #1
   17e64:	e002      	b.n	17e6c <__cmpdf2+0x4>
   17e66:	bf00      	nop

00017e68 <__cmpdf2>:
   17e68:	f04f 0c01 	mov.w	ip, #1
   17e6c:	f84d cd04 	str.w	ip, [sp, #-4]!
   17e70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17e74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17e78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17e7c:	bf18      	it	ne
   17e7e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   17e82:	d01b      	beq.n	17ebc <__cmpdf2+0x54>
   17e84:	b001      	add	sp, #4
   17e86:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   17e8a:	bf0c      	ite	eq
   17e8c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   17e90:	ea91 0f03 	teqne	r1, r3
   17e94:	bf02      	ittt	eq
   17e96:	ea90 0f02 	teqeq	r0, r2
   17e9a:	2000      	moveq	r0, #0
   17e9c:	4770      	bxeq	lr
   17e9e:	f110 0f00 	cmn.w	r0, #0
   17ea2:	ea91 0f03 	teq	r1, r3
   17ea6:	bf58      	it	pl
   17ea8:	4299      	cmppl	r1, r3
   17eaa:	bf08      	it	eq
   17eac:	4290      	cmpeq	r0, r2
   17eae:	bf2c      	ite	cs
   17eb0:	17d8      	asrcs	r0, r3, #31
   17eb2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   17eb6:	f040 0001 	orr.w	r0, r0, #1
   17eba:	4770      	bx	lr
   17ebc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17ec0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17ec4:	d102      	bne.n	17ecc <__cmpdf2+0x64>
   17ec6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   17eca:	d107      	bne.n	17edc <__cmpdf2+0x74>
   17ecc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17ed0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17ed4:	d1d6      	bne.n	17e84 <__cmpdf2+0x1c>
   17ed6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   17eda:	d0d3      	beq.n	17e84 <__cmpdf2+0x1c>
   17edc:	f85d 0b04 	ldr.w	r0, [sp], #4
   17ee0:	4770      	bx	lr
   17ee2:	bf00      	nop

00017ee4 <__aeabi_cdrcmple>:
   17ee4:	4684      	mov	ip, r0
   17ee6:	4610      	mov	r0, r2
   17ee8:	4662      	mov	r2, ip
   17eea:	468c      	mov	ip, r1
   17eec:	4619      	mov	r1, r3
   17eee:	4663      	mov	r3, ip
   17ef0:	e000      	b.n	17ef4 <__aeabi_cdcmpeq>
   17ef2:	bf00      	nop

00017ef4 <__aeabi_cdcmpeq>:
   17ef4:	b501      	push	{r0, lr}
   17ef6:	f7ff ffb7 	bl	17e68 <__cmpdf2>
   17efa:	2800      	cmp	r0, #0
   17efc:	bf48      	it	mi
   17efe:	f110 0f00 	cmnmi.w	r0, #0
   17f02:	bd01      	pop	{r0, pc}

00017f04 <__aeabi_dcmpeq>:
   17f04:	f84d ed08 	str.w	lr, [sp, #-8]!
   17f08:	f7ff fff4 	bl	17ef4 <__aeabi_cdcmpeq>
   17f0c:	bf0c      	ite	eq
   17f0e:	2001      	moveq	r0, #1
   17f10:	2000      	movne	r0, #0
   17f12:	f85d fb08 	ldr.w	pc, [sp], #8
   17f16:	bf00      	nop

00017f18 <__aeabi_dcmplt>:
   17f18:	f84d ed08 	str.w	lr, [sp, #-8]!
   17f1c:	f7ff ffea 	bl	17ef4 <__aeabi_cdcmpeq>
   17f20:	bf34      	ite	cc
   17f22:	2001      	movcc	r0, #1
   17f24:	2000      	movcs	r0, #0
   17f26:	f85d fb08 	ldr.w	pc, [sp], #8
   17f2a:	bf00      	nop

00017f2c <__aeabi_dcmple>:
   17f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   17f30:	f7ff ffe0 	bl	17ef4 <__aeabi_cdcmpeq>
   17f34:	bf94      	ite	ls
   17f36:	2001      	movls	r0, #1
   17f38:	2000      	movhi	r0, #0
   17f3a:	f85d fb08 	ldr.w	pc, [sp], #8
   17f3e:	bf00      	nop

00017f40 <__aeabi_dcmpge>:
   17f40:	f84d ed08 	str.w	lr, [sp, #-8]!
   17f44:	f7ff ffce 	bl	17ee4 <__aeabi_cdrcmple>
   17f48:	bf94      	ite	ls
   17f4a:	2001      	movls	r0, #1
   17f4c:	2000      	movhi	r0, #0
   17f4e:	f85d fb08 	ldr.w	pc, [sp], #8
   17f52:	bf00      	nop

00017f54 <__aeabi_dcmpgt>:
   17f54:	f84d ed08 	str.w	lr, [sp, #-8]!
   17f58:	f7ff ffc4 	bl	17ee4 <__aeabi_cdrcmple>
   17f5c:	bf34      	ite	cc
   17f5e:	2001      	movcc	r0, #1
   17f60:	2000      	movcs	r0, #0
   17f62:	f85d fb08 	ldr.w	pc, [sp], #8
   17f66:	bf00      	nop

00017f68 <__aeabi_d2iz>:
   17f68:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17f6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17f70:	d215      	bcs.n	17f9e <__aeabi_d2iz+0x36>
   17f72:	d511      	bpl.n	17f98 <__aeabi_d2iz+0x30>
   17f74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17f78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17f7c:	d912      	bls.n	17fa4 <__aeabi_d2iz+0x3c>
   17f7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17f82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17f86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   17f8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17f8e:	fa23 f002 	lsr.w	r0, r3, r2
   17f92:	bf18      	it	ne
   17f94:	4240      	negne	r0, r0
   17f96:	4770      	bx	lr
   17f98:	f04f 0000 	mov.w	r0, #0
   17f9c:	4770      	bx	lr
   17f9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   17fa2:	d105      	bne.n	17fb0 <__aeabi_d2iz+0x48>
   17fa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   17fa8:	bf08      	it	eq
   17faa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   17fae:	4770      	bx	lr
   17fb0:	f04f 0000 	mov.w	r0, #0
   17fb4:	4770      	bx	lr
   17fb6:	bf00      	nop

00017fb8 <__aeabi_d2uiz>:
   17fb8:	004a      	lsls	r2, r1, #1
   17fba:	d211      	bcs.n	17fe0 <__aeabi_d2uiz+0x28>
   17fbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17fc0:	d211      	bcs.n	17fe6 <__aeabi_d2uiz+0x2e>
   17fc2:	d50d      	bpl.n	17fe0 <__aeabi_d2uiz+0x28>
   17fc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17fc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17fcc:	d40e      	bmi.n	17fec <__aeabi_d2uiz+0x34>
   17fce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17fd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17fd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   17fda:	fa23 f002 	lsr.w	r0, r3, r2
   17fde:	4770      	bx	lr
   17fe0:	f04f 0000 	mov.w	r0, #0
   17fe4:	4770      	bx	lr
   17fe6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   17fea:	d102      	bne.n	17ff2 <__aeabi_d2uiz+0x3a>
   17fec:	f04f 30ff 	mov.w	r0, #4294967295
   17ff0:	4770      	bx	lr
   17ff2:	f04f 0000 	mov.w	r0, #0
   17ff6:	4770      	bx	lr

00017ff8 <__aeabi_d2f>:
   17ff8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17ffc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   18000:	bf24      	itt	cs
   18002:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   18006:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1800a:	d90d      	bls.n	18028 <__aeabi_d2f+0x30>
   1800c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18010:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   18014:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   18018:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1801c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   18020:	bf08      	it	eq
   18022:	f020 0001 	biceq.w	r0, r0, #1
   18026:	4770      	bx	lr
   18028:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1802c:	d121      	bne.n	18072 <__aeabi_d2f+0x7a>
   1802e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   18032:	bfbc      	itt	lt
   18034:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   18038:	4770      	bxlt	lr
   1803a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1803e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   18042:	f1c2 0218 	rsb	r2, r2, #24
   18046:	f1c2 0c20 	rsb	ip, r2, #32
   1804a:	fa10 f30c 	lsls.w	r3, r0, ip
   1804e:	fa20 f002 	lsr.w	r0, r0, r2
   18052:	bf18      	it	ne
   18054:	f040 0001 	orrne.w	r0, r0, #1
   18058:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1805c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   18060:	fa03 fc0c 	lsl.w	ip, r3, ip
   18064:	ea40 000c 	orr.w	r0, r0, ip
   18068:	fa23 f302 	lsr.w	r3, r3, r2
   1806c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   18070:	e7cc      	b.n	1800c <__aeabi_d2f+0x14>
   18072:	ea7f 5362 	mvns.w	r3, r2, asr #21
   18076:	d107      	bne.n	18088 <__aeabi_d2f+0x90>
   18078:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1807c:	bf1e      	ittt	ne
   1807e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   18082:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   18086:	4770      	bxne	lr
   18088:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1808c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18090:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18094:	4770      	bx	lr
   18096:	bf00      	nop

00018098 <__aeabi_frsub>:
   18098:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1809c:	e002      	b.n	180a4 <__addsf3>
   1809e:	bf00      	nop

000180a0 <__aeabi_fsub>:
   180a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000180a4 <__addsf3>:
   180a4:	0042      	lsls	r2, r0, #1
   180a6:	bf1f      	itttt	ne
   180a8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   180ac:	ea92 0f03 	teqne	r2, r3
   180b0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   180b4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   180b8:	d06a      	beq.n	18190 <__addsf3+0xec>
   180ba:	ea4f 6212 	mov.w	r2, r2, lsr #24
   180be:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   180c2:	bfc1      	itttt	gt
   180c4:	18d2      	addgt	r2, r2, r3
   180c6:	4041      	eorgt	r1, r0
   180c8:	4048      	eorgt	r0, r1
   180ca:	4041      	eorgt	r1, r0
   180cc:	bfb8      	it	lt
   180ce:	425b      	neglt	r3, r3
   180d0:	2b19      	cmp	r3, #25
   180d2:	bf88      	it	hi
   180d4:	4770      	bxhi	lr
   180d6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   180da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   180de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   180e2:	bf18      	it	ne
   180e4:	4240      	negne	r0, r0
   180e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   180ea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   180ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   180f2:	bf18      	it	ne
   180f4:	4249      	negne	r1, r1
   180f6:	ea92 0f03 	teq	r2, r3
   180fa:	d03f      	beq.n	1817c <__addsf3+0xd8>
   180fc:	f1a2 0201 	sub.w	r2, r2, #1
   18100:	fa41 fc03 	asr.w	ip, r1, r3
   18104:	eb10 000c 	adds.w	r0, r0, ip
   18108:	f1c3 0320 	rsb	r3, r3, #32
   1810c:	fa01 f103 	lsl.w	r1, r1, r3
   18110:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18114:	d502      	bpl.n	1811c <__addsf3+0x78>
   18116:	4249      	negs	r1, r1
   18118:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1811c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18120:	d313      	bcc.n	1814a <__addsf3+0xa6>
   18122:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   18126:	d306      	bcc.n	18136 <__addsf3+0x92>
   18128:	0840      	lsrs	r0, r0, #1
   1812a:	ea4f 0131 	mov.w	r1, r1, rrx
   1812e:	f102 0201 	add.w	r2, r2, #1
   18132:	2afe      	cmp	r2, #254	; 0xfe
   18134:	d251      	bcs.n	181da <__addsf3+0x136>
   18136:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1813a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1813e:	bf08      	it	eq
   18140:	f020 0001 	biceq.w	r0, r0, #1
   18144:	ea40 0003 	orr.w	r0, r0, r3
   18148:	4770      	bx	lr
   1814a:	0049      	lsls	r1, r1, #1
   1814c:	eb40 0000 	adc.w	r0, r0, r0
   18150:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   18154:	f1a2 0201 	sub.w	r2, r2, #1
   18158:	d1ed      	bne.n	18136 <__addsf3+0x92>
   1815a:	fab0 fc80 	clz	ip, r0
   1815e:	f1ac 0c08 	sub.w	ip, ip, #8
   18162:	ebb2 020c 	subs.w	r2, r2, ip
   18166:	fa00 f00c 	lsl.w	r0, r0, ip
   1816a:	bfaa      	itet	ge
   1816c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   18170:	4252      	neglt	r2, r2
   18172:	4318      	orrge	r0, r3
   18174:	bfbc      	itt	lt
   18176:	40d0      	lsrlt	r0, r2
   18178:	4318      	orrlt	r0, r3
   1817a:	4770      	bx	lr
   1817c:	f092 0f00 	teq	r2, #0
   18180:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   18184:	bf06      	itte	eq
   18186:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1818a:	3201      	addeq	r2, #1
   1818c:	3b01      	subne	r3, #1
   1818e:	e7b5      	b.n	180fc <__addsf3+0x58>
   18190:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18194:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18198:	bf18      	it	ne
   1819a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1819e:	d021      	beq.n	181e4 <__addsf3+0x140>
   181a0:	ea92 0f03 	teq	r2, r3
   181a4:	d004      	beq.n	181b0 <__addsf3+0x10c>
   181a6:	f092 0f00 	teq	r2, #0
   181aa:	bf08      	it	eq
   181ac:	4608      	moveq	r0, r1
   181ae:	4770      	bx	lr
   181b0:	ea90 0f01 	teq	r0, r1
   181b4:	bf1c      	itt	ne
   181b6:	2000      	movne	r0, #0
   181b8:	4770      	bxne	lr
   181ba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   181be:	d104      	bne.n	181ca <__addsf3+0x126>
   181c0:	0040      	lsls	r0, r0, #1
   181c2:	bf28      	it	cs
   181c4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   181c8:	4770      	bx	lr
   181ca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   181ce:	bf3c      	itt	cc
   181d0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   181d4:	4770      	bxcc	lr
   181d6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   181da:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   181de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   181e2:	4770      	bx	lr
   181e4:	ea7f 6222 	mvns.w	r2, r2, asr #24
   181e8:	bf16      	itet	ne
   181ea:	4608      	movne	r0, r1
   181ec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   181f0:	4601      	movne	r1, r0
   181f2:	0242      	lsls	r2, r0, #9
   181f4:	bf06      	itte	eq
   181f6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   181fa:	ea90 0f01 	teqeq	r0, r1
   181fe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   18202:	4770      	bx	lr

00018204 <__aeabi_ui2f>:
   18204:	f04f 0300 	mov.w	r3, #0
   18208:	e004      	b.n	18214 <__aeabi_i2f+0x8>
   1820a:	bf00      	nop

0001820c <__aeabi_i2f>:
   1820c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   18210:	bf48      	it	mi
   18212:	4240      	negmi	r0, r0
   18214:	ea5f 0c00 	movs.w	ip, r0
   18218:	bf08      	it	eq
   1821a:	4770      	bxeq	lr
   1821c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   18220:	4601      	mov	r1, r0
   18222:	f04f 0000 	mov.w	r0, #0
   18226:	e01c      	b.n	18262 <__aeabi_l2f+0x2a>

00018228 <__aeabi_ul2f>:
   18228:	ea50 0201 	orrs.w	r2, r0, r1
   1822c:	bf08      	it	eq
   1822e:	4770      	bxeq	lr
   18230:	f04f 0300 	mov.w	r3, #0
   18234:	e00a      	b.n	1824c <__aeabi_l2f+0x14>
   18236:	bf00      	nop

00018238 <__aeabi_l2f>:
   18238:	ea50 0201 	orrs.w	r2, r0, r1
   1823c:	bf08      	it	eq
   1823e:	4770      	bxeq	lr
   18240:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   18244:	d502      	bpl.n	1824c <__aeabi_l2f+0x14>
   18246:	4240      	negs	r0, r0
   18248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1824c:	ea5f 0c01 	movs.w	ip, r1
   18250:	bf02      	ittt	eq
   18252:	4684      	moveq	ip, r0
   18254:	4601      	moveq	r1, r0
   18256:	2000      	moveq	r0, #0
   18258:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1825c:	bf08      	it	eq
   1825e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   18262:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   18266:	fabc f28c 	clz	r2, ip
   1826a:	3a08      	subs	r2, #8
   1826c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   18270:	db10      	blt.n	18294 <__aeabi_l2f+0x5c>
   18272:	fa01 fc02 	lsl.w	ip, r1, r2
   18276:	4463      	add	r3, ip
   18278:	fa00 fc02 	lsl.w	ip, r0, r2
   1827c:	f1c2 0220 	rsb	r2, r2, #32
   18280:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   18284:	fa20 f202 	lsr.w	r2, r0, r2
   18288:	eb43 0002 	adc.w	r0, r3, r2
   1828c:	bf08      	it	eq
   1828e:	f020 0001 	biceq.w	r0, r0, #1
   18292:	4770      	bx	lr
   18294:	f102 0220 	add.w	r2, r2, #32
   18298:	fa01 fc02 	lsl.w	ip, r1, r2
   1829c:	f1c2 0220 	rsb	r2, r2, #32
   182a0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   182a4:	fa21 f202 	lsr.w	r2, r1, r2
   182a8:	eb43 0002 	adc.w	r0, r3, r2
   182ac:	bf08      	it	eq
   182ae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   182b2:	4770      	bx	lr

000182b4 <__aeabi_fmul>:
   182b4:	f04f 0cff 	mov.w	ip, #255	; 0xff
   182b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   182bc:	bf1e      	ittt	ne
   182be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   182c2:	ea92 0f0c 	teqne	r2, ip
   182c6:	ea93 0f0c 	teqne	r3, ip
   182ca:	d06f      	beq.n	183ac <__aeabi_fmul+0xf8>
   182cc:	441a      	add	r2, r3
   182ce:	ea80 0c01 	eor.w	ip, r0, r1
   182d2:	0240      	lsls	r0, r0, #9
   182d4:	bf18      	it	ne
   182d6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   182da:	d01e      	beq.n	1831a <__aeabi_fmul+0x66>
   182dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   182e0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   182e4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   182e8:	fba0 3101 	umull	r3, r1, r0, r1
   182ec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   182f0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   182f4:	bf3e      	ittt	cc
   182f6:	0049      	lslcc	r1, r1, #1
   182f8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   182fc:	005b      	lslcc	r3, r3, #1
   182fe:	ea40 0001 	orr.w	r0, r0, r1
   18302:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   18306:	2afd      	cmp	r2, #253	; 0xfd
   18308:	d81d      	bhi.n	18346 <__aeabi_fmul+0x92>
   1830a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1830e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18312:	bf08      	it	eq
   18314:	f020 0001 	biceq.w	r0, r0, #1
   18318:	4770      	bx	lr
   1831a:	f090 0f00 	teq	r0, #0
   1831e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   18322:	bf08      	it	eq
   18324:	0249      	lsleq	r1, r1, #9
   18326:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1832a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1832e:	3a7f      	subs	r2, #127	; 0x7f
   18330:	bfc2      	ittt	gt
   18332:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   18336:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1833a:	4770      	bxgt	lr
   1833c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18340:	f04f 0300 	mov.w	r3, #0
   18344:	3a01      	subs	r2, #1
   18346:	dc5d      	bgt.n	18404 <__aeabi_fmul+0x150>
   18348:	f112 0f19 	cmn.w	r2, #25
   1834c:	bfdc      	itt	le
   1834e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   18352:	4770      	bxle	lr
   18354:	f1c2 0200 	rsb	r2, r2, #0
   18358:	0041      	lsls	r1, r0, #1
   1835a:	fa21 f102 	lsr.w	r1, r1, r2
   1835e:	f1c2 0220 	rsb	r2, r2, #32
   18362:	fa00 fc02 	lsl.w	ip, r0, r2
   18366:	ea5f 0031 	movs.w	r0, r1, rrx
   1836a:	f140 0000 	adc.w	r0, r0, #0
   1836e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   18372:	bf08      	it	eq
   18374:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18378:	4770      	bx	lr
   1837a:	f092 0f00 	teq	r2, #0
   1837e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18382:	bf02      	ittt	eq
   18384:	0040      	lsleq	r0, r0, #1
   18386:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1838a:	3a01      	subeq	r2, #1
   1838c:	d0f9      	beq.n	18382 <__aeabi_fmul+0xce>
   1838e:	ea40 000c 	orr.w	r0, r0, ip
   18392:	f093 0f00 	teq	r3, #0
   18396:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1839a:	bf02      	ittt	eq
   1839c:	0049      	lsleq	r1, r1, #1
   1839e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   183a2:	3b01      	subeq	r3, #1
   183a4:	d0f9      	beq.n	1839a <__aeabi_fmul+0xe6>
   183a6:	ea41 010c 	orr.w	r1, r1, ip
   183aa:	e78f      	b.n	182cc <__aeabi_fmul+0x18>
   183ac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   183b0:	ea92 0f0c 	teq	r2, ip
   183b4:	bf18      	it	ne
   183b6:	ea93 0f0c 	teqne	r3, ip
   183ba:	d00a      	beq.n	183d2 <__aeabi_fmul+0x11e>
   183bc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   183c0:	bf18      	it	ne
   183c2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   183c6:	d1d8      	bne.n	1837a <__aeabi_fmul+0xc6>
   183c8:	ea80 0001 	eor.w	r0, r0, r1
   183cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   183d0:	4770      	bx	lr
   183d2:	f090 0f00 	teq	r0, #0
   183d6:	bf17      	itett	ne
   183d8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   183dc:	4608      	moveq	r0, r1
   183de:	f091 0f00 	teqne	r1, #0
   183e2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   183e6:	d014      	beq.n	18412 <__aeabi_fmul+0x15e>
   183e8:	ea92 0f0c 	teq	r2, ip
   183ec:	d101      	bne.n	183f2 <__aeabi_fmul+0x13e>
   183ee:	0242      	lsls	r2, r0, #9
   183f0:	d10f      	bne.n	18412 <__aeabi_fmul+0x15e>
   183f2:	ea93 0f0c 	teq	r3, ip
   183f6:	d103      	bne.n	18400 <__aeabi_fmul+0x14c>
   183f8:	024b      	lsls	r3, r1, #9
   183fa:	bf18      	it	ne
   183fc:	4608      	movne	r0, r1
   183fe:	d108      	bne.n	18412 <__aeabi_fmul+0x15e>
   18400:	ea80 0001 	eor.w	r0, r0, r1
   18404:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18408:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1840c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18410:	4770      	bx	lr
   18412:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18416:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1841a:	4770      	bx	lr

0001841c <__aeabi_fdiv>:
   1841c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18420:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18424:	bf1e      	ittt	ne
   18426:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1842a:	ea92 0f0c 	teqne	r2, ip
   1842e:	ea93 0f0c 	teqne	r3, ip
   18432:	d069      	beq.n	18508 <__aeabi_fdiv+0xec>
   18434:	eba2 0203 	sub.w	r2, r2, r3
   18438:	ea80 0c01 	eor.w	ip, r0, r1
   1843c:	0249      	lsls	r1, r1, #9
   1843e:	ea4f 2040 	mov.w	r0, r0, lsl #9
   18442:	d037      	beq.n	184b4 <__aeabi_fdiv+0x98>
   18444:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18448:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   1844c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   18450:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18454:	428b      	cmp	r3, r1
   18456:	bf38      	it	cc
   18458:	005b      	lslcc	r3, r3, #1
   1845a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1845e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   18462:	428b      	cmp	r3, r1
   18464:	bf24      	itt	cs
   18466:	1a5b      	subcs	r3, r3, r1
   18468:	ea40 000c 	orrcs.w	r0, r0, ip
   1846c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   18470:	bf24      	itt	cs
   18472:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   18476:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1847a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1847e:	bf24      	itt	cs
   18480:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   18484:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18488:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1848c:	bf24      	itt	cs
   1848e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   18492:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18496:	011b      	lsls	r3, r3, #4
   18498:	bf18      	it	ne
   1849a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1849e:	d1e0      	bne.n	18462 <__aeabi_fdiv+0x46>
   184a0:	2afd      	cmp	r2, #253	; 0xfd
   184a2:	f63f af50 	bhi.w	18346 <__aeabi_fmul+0x92>
   184a6:	428b      	cmp	r3, r1
   184a8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   184ac:	bf08      	it	eq
   184ae:	f020 0001 	biceq.w	r0, r0, #1
   184b2:	4770      	bx	lr
   184b4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   184b8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   184bc:	327f      	adds	r2, #127	; 0x7f
   184be:	bfc2      	ittt	gt
   184c0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   184c4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   184c8:	4770      	bxgt	lr
   184ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   184ce:	f04f 0300 	mov.w	r3, #0
   184d2:	3a01      	subs	r2, #1
   184d4:	e737      	b.n	18346 <__aeabi_fmul+0x92>
   184d6:	f092 0f00 	teq	r2, #0
   184da:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   184de:	bf02      	ittt	eq
   184e0:	0040      	lsleq	r0, r0, #1
   184e2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   184e6:	3a01      	subeq	r2, #1
   184e8:	d0f9      	beq.n	184de <__aeabi_fdiv+0xc2>
   184ea:	ea40 000c 	orr.w	r0, r0, ip
   184ee:	f093 0f00 	teq	r3, #0
   184f2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   184f6:	bf02      	ittt	eq
   184f8:	0049      	lsleq	r1, r1, #1
   184fa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   184fe:	3b01      	subeq	r3, #1
   18500:	d0f9      	beq.n	184f6 <__aeabi_fdiv+0xda>
   18502:	ea41 010c 	orr.w	r1, r1, ip
   18506:	e795      	b.n	18434 <__aeabi_fdiv+0x18>
   18508:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1850c:	ea92 0f0c 	teq	r2, ip
   18510:	d108      	bne.n	18524 <__aeabi_fdiv+0x108>
   18512:	0242      	lsls	r2, r0, #9
   18514:	f47f af7d 	bne.w	18412 <__aeabi_fmul+0x15e>
   18518:	ea93 0f0c 	teq	r3, ip
   1851c:	f47f af70 	bne.w	18400 <__aeabi_fmul+0x14c>
   18520:	4608      	mov	r0, r1
   18522:	e776      	b.n	18412 <__aeabi_fmul+0x15e>
   18524:	ea93 0f0c 	teq	r3, ip
   18528:	d104      	bne.n	18534 <__aeabi_fdiv+0x118>
   1852a:	024b      	lsls	r3, r1, #9
   1852c:	f43f af4c 	beq.w	183c8 <__aeabi_fmul+0x114>
   18530:	4608      	mov	r0, r1
   18532:	e76e      	b.n	18412 <__aeabi_fmul+0x15e>
   18534:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18538:	bf18      	it	ne
   1853a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1853e:	d1ca      	bne.n	184d6 <__aeabi_fdiv+0xba>
   18540:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   18544:	f47f af5c 	bne.w	18400 <__aeabi_fmul+0x14c>
   18548:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   1854c:	f47f af3c 	bne.w	183c8 <__aeabi_fmul+0x114>
   18550:	e75f      	b.n	18412 <__aeabi_fmul+0x15e>
   18552:	bf00      	nop

00018554 <__gesf2>:
   18554:	f04f 3cff 	mov.w	ip, #4294967295
   18558:	e006      	b.n	18568 <__cmpsf2+0x4>
   1855a:	bf00      	nop

0001855c <__lesf2>:
   1855c:	f04f 0c01 	mov.w	ip, #1
   18560:	e002      	b.n	18568 <__cmpsf2+0x4>
   18562:	bf00      	nop

00018564 <__cmpsf2>:
   18564:	f04f 0c01 	mov.w	ip, #1
   18568:	f84d cd04 	str.w	ip, [sp, #-4]!
   1856c:	ea4f 0240 	mov.w	r2, r0, lsl #1
   18570:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18574:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18578:	bf18      	it	ne
   1857a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1857e:	d011      	beq.n	185a4 <__cmpsf2+0x40>
   18580:	b001      	add	sp, #4
   18582:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   18586:	bf18      	it	ne
   18588:	ea90 0f01 	teqne	r0, r1
   1858c:	bf58      	it	pl
   1858e:	ebb2 0003 	subspl.w	r0, r2, r3
   18592:	bf88      	it	hi
   18594:	17c8      	asrhi	r0, r1, #31
   18596:	bf38      	it	cc
   18598:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   1859c:	bf18      	it	ne
   1859e:	f040 0001 	orrne.w	r0, r0, #1
   185a2:	4770      	bx	lr
   185a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   185a8:	d102      	bne.n	185b0 <__cmpsf2+0x4c>
   185aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   185ae:	d105      	bne.n	185bc <__cmpsf2+0x58>
   185b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   185b4:	d1e4      	bne.n	18580 <__cmpsf2+0x1c>
   185b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   185ba:	d0e1      	beq.n	18580 <__cmpsf2+0x1c>
   185bc:	f85d 0b04 	ldr.w	r0, [sp], #4
   185c0:	4770      	bx	lr
   185c2:	bf00      	nop

000185c4 <__aeabi_cfrcmple>:
   185c4:	4684      	mov	ip, r0
   185c6:	4608      	mov	r0, r1
   185c8:	4661      	mov	r1, ip
   185ca:	e7ff      	b.n	185cc <__aeabi_cfcmpeq>

000185cc <__aeabi_cfcmpeq>:
   185cc:	b50f      	push	{r0, r1, r2, r3, lr}
   185ce:	f7ff ffc9 	bl	18564 <__cmpsf2>
   185d2:	2800      	cmp	r0, #0
   185d4:	bf48      	it	mi
   185d6:	f110 0f00 	cmnmi.w	r0, #0
   185da:	bd0f      	pop	{r0, r1, r2, r3, pc}

000185dc <__aeabi_fcmpeq>:
   185dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   185e0:	f7ff fff4 	bl	185cc <__aeabi_cfcmpeq>
   185e4:	bf0c      	ite	eq
   185e6:	2001      	moveq	r0, #1
   185e8:	2000      	movne	r0, #0
   185ea:	f85d fb08 	ldr.w	pc, [sp], #8
   185ee:	bf00      	nop

000185f0 <__aeabi_fcmplt>:
   185f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   185f4:	f7ff ffea 	bl	185cc <__aeabi_cfcmpeq>
   185f8:	bf34      	ite	cc
   185fa:	2001      	movcc	r0, #1
   185fc:	2000      	movcs	r0, #0
   185fe:	f85d fb08 	ldr.w	pc, [sp], #8
   18602:	bf00      	nop

00018604 <__aeabi_fcmple>:
   18604:	f84d ed08 	str.w	lr, [sp, #-8]!
   18608:	f7ff ffe0 	bl	185cc <__aeabi_cfcmpeq>
   1860c:	bf94      	ite	ls
   1860e:	2001      	movls	r0, #1
   18610:	2000      	movhi	r0, #0
   18612:	f85d fb08 	ldr.w	pc, [sp], #8
   18616:	bf00      	nop

00018618 <__aeabi_fcmpge>:
   18618:	f84d ed08 	str.w	lr, [sp, #-8]!
   1861c:	f7ff ffd2 	bl	185c4 <__aeabi_cfrcmple>
   18620:	bf94      	ite	ls
   18622:	2001      	movls	r0, #1
   18624:	2000      	movhi	r0, #0
   18626:	f85d fb08 	ldr.w	pc, [sp], #8
   1862a:	bf00      	nop

0001862c <__aeabi_fcmpgt>:
   1862c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18630:	f7ff ffc8 	bl	185c4 <__aeabi_cfrcmple>
   18634:	bf34      	ite	cc
   18636:	2001      	movcc	r0, #1
   18638:	2000      	movcs	r0, #0
   1863a:	f85d fb08 	ldr.w	pc, [sp], #8
   1863e:	bf00      	nop

00018640 <__aeabi_f2iz>:
   18640:	ea4f 0240 	mov.w	r2, r0, lsl #1
   18644:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   18648:	d30f      	bcc.n	1866a <__aeabi_f2iz+0x2a>
   1864a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1864e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   18652:	d90d      	bls.n	18670 <__aeabi_f2iz+0x30>
   18654:	ea4f 2300 	mov.w	r3, r0, lsl #8
   18658:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1865c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18660:	fa23 f002 	lsr.w	r0, r3, r2
   18664:	bf18      	it	ne
   18666:	4240      	negne	r0, r0
   18668:	4770      	bx	lr
   1866a:	f04f 0000 	mov.w	r0, #0
   1866e:	4770      	bx	lr
   18670:	f112 0f61 	cmn.w	r2, #97	; 0x61
   18674:	d101      	bne.n	1867a <__aeabi_f2iz+0x3a>
   18676:	0242      	lsls	r2, r0, #9
   18678:	d105      	bne.n	18686 <__aeabi_f2iz+0x46>
   1867a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   1867e:	bf08      	it	eq
   18680:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   18684:	4770      	bx	lr
   18686:	f04f 0000 	mov.w	r0, #0
   1868a:	4770      	bx	lr

0001868c <memcpy>:
   1868c:	2a0f      	cmp	r2, #15
   1868e:	b4f0      	push	{r4, r5, r6, r7}
   18690:	d945      	bls.n	1871e <memcpy+0x92>
   18692:	ea40 0301 	orr.w	r3, r0, r1
   18696:	079b      	lsls	r3, r3, #30
   18698:	d145      	bne.n	18726 <memcpy+0x9a>
   1869a:	f1a2 0710 	sub.w	r7, r2, #16
   1869e:	460c      	mov	r4, r1
   186a0:	4603      	mov	r3, r0
   186a2:	093f      	lsrs	r7, r7, #4
   186a4:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   186a8:	3610      	adds	r6, #16
   186aa:	6825      	ldr	r5, [r4, #0]
   186ac:	3310      	adds	r3, #16
   186ae:	3410      	adds	r4, #16
   186b0:	f843 5c10 	str.w	r5, [r3, #-16]
   186b4:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   186b8:	f843 5c0c 	str.w	r5, [r3, #-12]
   186bc:	f854 5c08 	ldr.w	r5, [r4, #-8]
   186c0:	f843 5c08 	str.w	r5, [r3, #-8]
   186c4:	f854 5c04 	ldr.w	r5, [r4, #-4]
   186c8:	f843 5c04 	str.w	r5, [r3, #-4]
   186cc:	42b3      	cmp	r3, r6
   186ce:	d1ec      	bne.n	186aa <memcpy+0x1e>
   186d0:	1c7b      	adds	r3, r7, #1
   186d2:	f002 0c0f 	and.w	ip, r2, #15
   186d6:	f1bc 0f03 	cmp.w	ip, #3
   186da:	ea4f 1303 	mov.w	r3, r3, lsl #4
   186de:	4419      	add	r1, r3
   186e0:	4403      	add	r3, r0
   186e2:	d922      	bls.n	1872a <memcpy+0x9e>
   186e4:	460e      	mov	r6, r1
   186e6:	461d      	mov	r5, r3
   186e8:	4664      	mov	r4, ip
   186ea:	f856 7b04 	ldr.w	r7, [r6], #4
   186ee:	3c04      	subs	r4, #4
   186f0:	2c03      	cmp	r4, #3
   186f2:	f845 7b04 	str.w	r7, [r5], #4
   186f6:	d8f8      	bhi.n	186ea <memcpy+0x5e>
   186f8:	f1ac 0404 	sub.w	r4, ip, #4
   186fc:	f002 0203 	and.w	r2, r2, #3
   18700:	f024 0403 	bic.w	r4, r4, #3
   18704:	3404      	adds	r4, #4
   18706:	4423      	add	r3, r4
   18708:	4421      	add	r1, r4
   1870a:	b132      	cbz	r2, 1871a <memcpy+0x8e>
   1870c:	440a      	add	r2, r1
   1870e:	f811 4b01 	ldrb.w	r4, [r1], #1
   18712:	4291      	cmp	r1, r2
   18714:	f803 4b01 	strb.w	r4, [r3], #1
   18718:	d1f9      	bne.n	1870e <memcpy+0x82>
   1871a:	bcf0      	pop	{r4, r5, r6, r7}
   1871c:	4770      	bx	lr
   1871e:	4603      	mov	r3, r0
   18720:	2a00      	cmp	r2, #0
   18722:	d1f3      	bne.n	1870c <memcpy+0x80>
   18724:	e7f9      	b.n	1871a <memcpy+0x8e>
   18726:	4603      	mov	r3, r0
   18728:	e7f0      	b.n	1870c <memcpy+0x80>
   1872a:	4662      	mov	r2, ip
   1872c:	2a00      	cmp	r2, #0
   1872e:	d1ed      	bne.n	1870c <memcpy+0x80>
   18730:	e7f3      	b.n	1871a <memcpy+0x8e>
   18732:	bf00      	nop

00018734 <memset>:
   18734:	0783      	lsls	r3, r0, #30
   18736:	b4f0      	push	{r4, r5, r6, r7}
   18738:	d048      	beq.n	187cc <memset+0x98>
   1873a:	1e54      	subs	r4, r2, #1
   1873c:	2a00      	cmp	r2, #0
   1873e:	d043      	beq.n	187c8 <memset+0x94>
   18740:	b2cd      	uxtb	r5, r1
   18742:	4603      	mov	r3, r0
   18744:	e002      	b.n	1874c <memset+0x18>
   18746:	2c00      	cmp	r4, #0
   18748:	d03e      	beq.n	187c8 <memset+0x94>
   1874a:	4614      	mov	r4, r2
   1874c:	f803 5b01 	strb.w	r5, [r3], #1
   18750:	f013 0f03 	tst.w	r3, #3
   18754:	f104 32ff 	add.w	r2, r4, #4294967295
   18758:	d1f5      	bne.n	18746 <memset+0x12>
   1875a:	2c03      	cmp	r4, #3
   1875c:	d92d      	bls.n	187ba <memset+0x86>
   1875e:	b2cd      	uxtb	r5, r1
   18760:	2c0f      	cmp	r4, #15
   18762:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   18766:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1876a:	d918      	bls.n	1879e <memset+0x6a>
   1876c:	f1a4 0710 	sub.w	r7, r4, #16
   18770:	f103 0610 	add.w	r6, r3, #16
   18774:	461a      	mov	r2, r3
   18776:	093f      	lsrs	r7, r7, #4
   18778:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   1877c:	6015      	str	r5, [r2, #0]
   1877e:	3210      	adds	r2, #16
   18780:	f842 5c0c 	str.w	r5, [r2, #-12]
   18784:	f842 5c08 	str.w	r5, [r2, #-8]
   18788:	f842 5c04 	str.w	r5, [r2, #-4]
   1878c:	42b2      	cmp	r2, r6
   1878e:	d1f5      	bne.n	1877c <memset+0x48>
   18790:	f004 040f 	and.w	r4, r4, #15
   18794:	3701      	adds	r7, #1
   18796:	2c03      	cmp	r4, #3
   18798:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   1879c:	d90d      	bls.n	187ba <memset+0x86>
   1879e:	461e      	mov	r6, r3
   187a0:	4622      	mov	r2, r4
   187a2:	3a04      	subs	r2, #4
   187a4:	f846 5b04 	str.w	r5, [r6], #4
   187a8:	2a03      	cmp	r2, #3
   187aa:	d8fa      	bhi.n	187a2 <memset+0x6e>
   187ac:	1f22      	subs	r2, r4, #4
   187ae:	f004 0403 	and.w	r4, r4, #3
   187b2:	f022 0203 	bic.w	r2, r2, #3
   187b6:	3204      	adds	r2, #4
   187b8:	4413      	add	r3, r2
   187ba:	b12c      	cbz	r4, 187c8 <memset+0x94>
   187bc:	b2c9      	uxtb	r1, r1
   187be:	441c      	add	r4, r3
   187c0:	f803 1b01 	strb.w	r1, [r3], #1
   187c4:	42a3      	cmp	r3, r4
   187c6:	d1fb      	bne.n	187c0 <memset+0x8c>
   187c8:	bcf0      	pop	{r4, r5, r6, r7}
   187ca:	4770      	bx	lr
   187cc:	4614      	mov	r4, r2
   187ce:	4603      	mov	r3, r0
   187d0:	e7c3      	b.n	1875a <memset+0x26>
   187d2:	bf00      	nop

000187d4 <strncpy>:
   187d4:	ea40 0301 	orr.w	r3, r0, r1
   187d8:	079b      	lsls	r3, r3, #30
   187da:	b470      	push	{r4, r5, r6}
   187dc:	d12b      	bne.n	18836 <strncpy+0x62>
   187de:	2a03      	cmp	r2, #3
   187e0:	bf84      	itt	hi
   187e2:	460b      	movhi	r3, r1
   187e4:	4605      	movhi	r5, r0
   187e6:	d926      	bls.n	18836 <strncpy+0x62>
   187e8:	4619      	mov	r1, r3
   187ea:	f853 4b04 	ldr.w	r4, [r3], #4
   187ee:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   187f2:	ea26 0604 	bic.w	r6, r6, r4
   187f6:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   187fa:	d105      	bne.n	18808 <strncpy+0x34>
   187fc:	3a04      	subs	r2, #4
   187fe:	f845 4b04 	str.w	r4, [r5], #4
   18802:	2a03      	cmp	r2, #3
   18804:	4619      	mov	r1, r3
   18806:	d8ef      	bhi.n	187e8 <strncpy+0x14>
   18808:	b19a      	cbz	r2, 18832 <strncpy+0x5e>
   1880a:	780c      	ldrb	r4, [r1, #0]
   1880c:	3a01      	subs	r2, #1
   1880e:	1c6b      	adds	r3, r5, #1
   18810:	702c      	strb	r4, [r5, #0]
   18812:	b13c      	cbz	r4, 18824 <strncpy+0x50>
   18814:	b16a      	cbz	r2, 18832 <strncpy+0x5e>
   18816:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1881a:	3a01      	subs	r2, #1
   1881c:	f803 4b01 	strb.w	r4, [r3], #1
   18820:	2c00      	cmp	r4, #0
   18822:	d1f7      	bne.n	18814 <strncpy+0x40>
   18824:	b12a      	cbz	r2, 18832 <strncpy+0x5e>
   18826:	441a      	add	r2, r3
   18828:	2100      	movs	r1, #0
   1882a:	f803 1b01 	strb.w	r1, [r3], #1
   1882e:	4293      	cmp	r3, r2
   18830:	d1fb      	bne.n	1882a <strncpy+0x56>
   18832:	bc70      	pop	{r4, r5, r6}
   18834:	4770      	bx	lr
   18836:	4605      	mov	r5, r0
   18838:	e7e6      	b.n	18808 <strncpy+0x34>
   1883a:	bf00      	nop

0001883c <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   1883c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   1883e:	e003      	b.n	18848 <LoopCopyDataInit>

00018840 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   18840:	4b0a      	ldr	r3, [pc, #40]	; (1886c <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   18842:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   18844:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   18846:	3104      	adds	r1, #4

00018848 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18848:	4809      	ldr	r0, [pc, #36]	; (18870 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   1884a:	4b0a      	ldr	r3, [pc, #40]	; (18874 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   1884c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   1884e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   18850:	d3f6      	bcc.n	18840 <CopyDataInit>
	ldr	r2, =_sbss
   18852:	4a09      	ldr	r2, [pc, #36]	; (18878 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   18854:	e002      	b.n	1885c <LoopFillZerobss>

00018856 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   18856:	2300      	movs	r3, #0
	str	r3, [r2], #4
   18858:	f842 3b04 	str.w	r3, [r2], #4

0001885c <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   1885c:	4b07      	ldr	r3, [pc, #28]	; (1887c <LoopFillZerobss+0x20>)
	cmp	r2, r3
   1885e:	429a      	cmp	r2, r3
	bcc	FillZerobss
   18860:	d3f9      	bcc.n	18856 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   18862:	f7e7 fd6b 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   18866:	f7fe fe1d 	bl	174a4 <main>
	bx	lr    
   1886a:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   1886c:	000189f8 	.word	0x000189f8
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18870:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   18874:	20000488 	.word	0x20000488
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   18878:	20000488 	.word	0x20000488
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   1887c:	2004c7a8 	.word	0x2004c7a8

00018880 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   18880:	e7fe      	b.n	18880 <ADC1_2_IRQHandler>
   18882:	0000      	movs	r0, r0
   18884:	206f4e20 	.word	0x206f4e20
   18888:	656c6449 	.word	0x656c6449
   1888c:	65764520 	.word	0x65764520
   18890:	2073746e 	.word	0x2073746e
   18894:	69617661 	.word	0x69617661
   18898:	6c62616c 	.word	0x6c62616c
   1889c:	000d0a65 	.word	0x000d0a65
   188a0:	6c6c616d 	.word	0x6c6c616d
   188a4:	6620636f 	.word	0x6620636f
   188a8:	6520726f 	.word	0x6520726f
   188ac:	746e6576 	.word	0x746e6576
   188b0:	61747320 	.word	0x61747320
   188b4:	66206b63 	.word	0x66206b63
   188b8:	656c6961 	.word	0x656c6961
   188bc:	000d0a64 	.word	0x000d0a64
   188c0:	72656874 	.word	0x72656874
   188c4:	72612065 	.word	0x72612065
   188c8:	65732065 	.word	0x65732065
   188cc:	726f736e 	.word	0x726f736e
   188d0:	73696d20 	.word	0x73696d20
   188d4:	676e6973 	.word	0x676e6973
   188d8:	61656420 	.word	0x61656420
   188dc:	6e696c64 	.word	0x6e696c64
   188e0:	000d0a65 	.word	0x000d0a65
   188e4:	72656874 	.word	0x72656874
   188e8:	72612065 	.word	0x72612065
   188ec:	65732065 	.word	0x65732065
   188f0:	6e617672 	.word	0x6e617672
   188f4:	6d207374 	.word	0x6d207374
   188f8:	69737369 	.word	0x69737369
   188fc:	6420676e 	.word	0x6420676e
   18900:	6c646165 	.word	0x6c646165
   18904:	0a656e69 	.word	0x0a656e69
   18908:	0000000d 	.word	0x0000000d
   1890c:	6f727245 	.word	0x6f727245
   18910:	54203a72 	.word	0x54203a72
   18914:	20736968 	.word	0x20736968
   18918:	6e657665 	.word	0x6e657665
   1891c:	61682074 	.word	0x61682074
   18920:	72612073 	.word	0x72612073
   18924:	65766972 	.word	0x65766972
   18928:	0a212164 	.word	0x0a212164
   1892c:	0000000d 	.word	0x0000000d
   18930:	454c4449 	.word	0x454c4449
   18934:	00000000 	.word	0x00000000

00018938 <ulKernelPriority>:
   18938:	0000007f                                ....

0001893c <heapSTRUCT_SIZE>:
   1893c:	00010010                                         ..

0001893e <version>:
   1893e:	3d5a0001                                         ..

00018940 <utm_east0>:
   18940:	00093d5a                                Z=..

00018944 <utm_north0>:
   18944:	005875e6                                .uX.

00018948 <climb_pgain>:
   18948:	bcf5c28f                                ....

0001894c <climb_igain>:
   1894c:	3dcccccd                                ...=

00018950 <level_gaz>:
   18950:	3e9eb852                                R..>

00018954 <nav_east0>:
   18954:	00093d5a                                Z=..

00018958 <nav_north0>:
   18958:	005875e6                                .uX.

0001895c <nb_waypoint>:
   1895c:	00000007 33323130 37363534 42413938     ....0123456789AB
   1896c:	46454443                                CDEF

00018970 <failsafe>:
	...
   18984:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   18994:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   189a4:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   189b4:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   189c4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   189d4:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   189e4:	00000074 736e6573 0000726f 76726573     t...sensor..serv
   189f4:	00746e61                                ant.
