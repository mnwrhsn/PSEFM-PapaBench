
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 05 20 2d 8a 01 00 71 8a 01 00 71 8a 01 00     .P. -...q...q...
      10:	71 8a 01 00 71 8a 01 00 71 8a 01 00 00 00 00 00     q...q...q.......
	...
      2c:	f9 5b 00 00 71 8a 01 00 00 00 00 00 05 5d 00 00     .[..q........]..
      3c:	41 5d 00 00 71 8a 01 00 71 8a 01 00 71 8a 01 00     A]..q...q...q...
      4c:	71 8a 01 00 71 8a 01 00 71 8a 01 00 71 8a 01 00     q...q...q...q...
      5c:	71 8a 01 00 71 8a 01 00 71 8a 01 00 71 8a 01 00     q...q...q...q...
      6c:	71 8a 01 00 71 8a 01 00 71 8a 01 00 71 8a 01 00     q...q...q...q...
      7c:	71 8a 01 00 71 8a 01 00 71 8a 01 00 71 8a 01 00     q...q...q...q...
      8c:	71 8a 01 00 71 8a 01 00 71 8a 01 00 71 8a 01 00     q...q...q...q...
      9c:	71 8a 01 00 71 8a 01 00 71 8a 01 00 71 8a 01 00     q...q...q...q...
      ac:	71 8a 01 00 71 8a 01 00 71 8a 01 00 71 8a 01 00     q...q...q...q...
      bc:	71 8a 01 00 71 8a 01 00 71 8a 01 00 71 8a 01 00     q...q...q...q...
      cc:	71 8a 01 00 71 8a 01 00 71 8a 01 00 71 8a 01 00     q...q...q...q...
      dc:	71 8a 01 00 71 8a 01 00 71 8a 01 00 71 8a 01 00     q...q...q...q...
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00018b64 	.word	0x00018b64
     6d0:	20000000 	.word	0x20000000
     6d4:	200005d8 	.word	0x200005d8
     6d8:	200005d8 	.word	0x200005d8
     6dc:	2004cdd8 	.word	0x2004cdd8

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fccb 	bl	5d94 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 6344 	movw	r3, #1604	; 0x644
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 6344 	movw	r3, #1604	; 0x644
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fe70 	bl	4130 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fe6b 	bl	4130 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0205 	rsb	r2, r3, #5
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 6348 	movw	r3, #1608	; 0x648
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 6348 	movw	r3, #1608	; 0x648
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fe4b 	bl	4148 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 634c 	movw	r3, #1612	; 0x64c
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 6344 	movw	r3, #1604	; 0x644
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fe8a 	bl	4208 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 6344 	movw	r3, #1604	; 0x644
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 634c 	movw	r3, #1612	; 0x64c
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 632c 	movw	r3, #1580	; 0x62c
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 6344 	movw	r3, #1604	; 0x644
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fe34 	bl	4198 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 6328 	movw	r3, #1576	; 0x628
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 6344 	movw	r3, #1604	; 0x644
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fe24 	bl	4198 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 6344 	movw	r3, #1604	; 0x644
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fe17 	bl	4198 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 6330 	movw	r3, #1584	; 0x630
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fe38 	bl	4208 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fe2f 	bl	4208 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 6348 	movw	r3, #1608	; 0x648
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 6348 	movw	r3, #1608	; 0x648
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fdae 	bl	4148 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 6330 	movw	r3, #1584	; 0x630
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fe7d 	bl	5304 <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 6350 	movw	r3, #1616	; 0x650
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 6354 	movw	r3, #1620	; 0x654
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 634c 	movw	r3, #1612	; 0x64c
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 634c 	movw	r3, #1612	; 0x64c
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 6354 	movw	r3, #1620	; 0x654
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 6354 	movw	r3, #1620	; 0x654
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 634c 	movw	r3, #1612	; 0x64c
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 6328 	movw	r3, #1576	; 0x628
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 632c 	movw	r3, #1580	; 0x62c
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 6328 	movw	r3, #1576	; 0x628
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 632c 	movw	r3, #1580	; 0x62c
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 6328 	movw	r3, #1576	; 0x628
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 634c 	movw	r3, #1612	; 0x64c
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fda2 	bl	4208 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fd99 	bl	4208 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 6348 	movw	r3, #1608	; 0x648
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 6348 	movw	r3, #1608	; 0x648
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fd14 	bl	4148 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 6328 	movw	r3, #1576	; 0x628
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 6354 	movw	r3, #1620	; 0x654
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 634c 	movw	r3, #1612	; 0x64c
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 6350 	movw	r3, #1616	; 0x650
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 6348 	movw	r3, #1608	; 0x648
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 6348 	movw	r3, #1608	; 0x648
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 6348 	movw	r3, #1608	; 0x648
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 6348 	movw	r3, #1608	; 0x648
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 6348 	movw	r3, #1608	; 0x648
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 6344 	movw	r3, #1604	; 0x644
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 6344 	movw	r3, #1604	; 0x644
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 6344 	movw	r3, #1604	; 0x644
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 6344 	movw	r3, #1604	; 0x644
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 fc4b 	bl	40f0 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 6000 	movw	r0, #1536	; 0x600
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 fc3f 	bl	40f0 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 6014 	movw	r0, #1556	; 0x614
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 fc39 	bl	40f0 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 6030 	movw	r0, #1584	; 0x630
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 fc33 	bl	40f0 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 6328 	movw	r3, #1576	; 0x628
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 6200 	movw	r2, #1536	; 0x600
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 632c 	movw	r3, #1580	; 0x62c
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 6214 	movw	r2, #1556	; 0x614
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 fc9d 	bl	4208 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 6030 	movw	r0, #1584	; 0x630
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 fc34 	bl	4148 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 6344 	movw	r3, #1604	; 0x644
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <xIsERLNull>:
static void vEventSetxTag(portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent );

// if xEventReadyList is not null,
// then return the type of destination servant of the first event
portBASE_TYPE xIsERLNull()
{
    2908:	b580      	push	{r7, lr}
    290a:	b082      	sub	sp, #8
    290c:	af00      	add	r7, sp, #0
    portBASE_TYPE pxDestination;
    struct tag * xTag;
    if(listCURRENT_LIST_LENGTH(&xEventReadyList) > 0)
    290e:	f640 03f8 	movw	r3, #2296	; 0x8f8
    2912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2916:	681b      	ldr	r3, [r3, #0]
    2918:	2b00      	cmp	r3, #0
    291a:	d029      	beq.n	2970 <xIsERLNull+0x68>
    {
        pxDestination = xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); 
    291c:	f640 03f8 	movw	r3, #2296	; 0x8f8
    2920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2924:	68db      	ldr	r3, [r3, #12]
    2926:	68db      	ldr	r3, [r3, #12]
    2928:	4618      	mov	r0, r3
    292a:	f000 f83f 	bl	29ac <xEventGetpxDestination>
    292e:	6078      	str	r0, [r7, #4]
        xTag = xEventGetxTag(xEventReadyList.xListEnd.pxNext->pvOwner);
    2930:	f640 03f8 	movw	r3, #2296	; 0x8f8
    2934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2938:	68db      	ldr	r3, [r3, #12]
    293a:	68db      	ldr	r3, [r3, #12]
    293c:	4618      	mov	r0, r3
    293e:	f000 f841 	bl	29c4 <xEventGetxTag>
    2942:	6038      	str	r0, [r7, #0]
        if( xTaskGetTickCount() >= xTag->xTimestamp )
    2944:	f002 fcde 	bl	5304 <xTaskGetTickCount>
    2948:	4602      	mov	r2, r0
    294a:	683b      	ldr	r3, [r7, #0]
    294c:	685b      	ldr	r3, [r3, #4]
    294e:	429a      	cmp	r2, r3
    2950:	d30c      	bcc.n	296c <xIsERLNull+0x64>
            return xContexts[pxDestination].xType; 
    2952:	f640 120c 	movw	r2, #2316	; 0x90c
    2956:	f2c2 0200 	movt	r2, #8192	; 0x2000
    295a:	6879      	ldr	r1, [r7, #4]
    295c:	460b      	mov	r3, r1
    295e:	00db      	lsls	r3, r3, #3
    2960:	1a5b      	subs	r3, r3, r1
    2962:	00db      	lsls	r3, r3, #3
    2964:	4413      	add	r3, r2
    2966:	3304      	adds	r3, #4
    2968:	681b      	ldr	r3, [r3, #0]
    296a:	e003      	b.n	2974 <xIsERLNull+0x6c>
        else
            return 0;
    296c:	2300      	movs	r3, #0
    296e:	e001      	b.n	2974 <xIsERLNull+0x6c>
    }
    return -1;
    2970:	f04f 33ff 	mov.w	r3, #4294967295
}
    2974:	4618      	mov	r0, r3
    2976:	3708      	adds	r7, #8
    2978:	46bd      	mov	sp, r7
    297a:	bd80      	pop	{r7, pc}

0000297c <xEventGetxDeadline>:

portTickType xEventGetxDeadline( xEventHandle pxEvent )
{
    297c:	b480      	push	{r7}
    297e:	b083      	sub	sp, #12
    2980:	af00      	add	r7, sp, #0
    2982:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->xTag.xDeadline;
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	689b      	ldr	r3, [r3, #8]
}
    2988:	4618      	mov	r0, r3
    298a:	370c      	adds	r7, #12
    298c:	46bd      	mov	sp, r7
    298e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2992:	4770      	bx	lr

00002994 <xEventGetpxSource>:

portBASE_TYPE xEventGetpxSource( xEventHandle pxEvent )
{
    2994:	b480      	push	{r7}
    2996:	b083      	sub	sp, #12
    2998:	af00      	add	r7, sp, #0
    299a:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    299c:	687b      	ldr	r3, [r7, #4]
    299e:	681b      	ldr	r3, [r3, #0]
}
    29a0:	4618      	mov	r0, r3
    29a2:	370c      	adds	r7, #12
    29a4:	46bd      	mov	sp, r7
    29a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29aa:	4770      	bx	lr

000029ac <xEventGetpxDestination>:

portBASE_TYPE xEventGetpxDestination( xEventHandle pxEvent)
{
    29ac:	b480      	push	{r7}
    29ae:	b083      	sub	sp, #12
    29b0:	af00      	add	r7, sp, #0
    29b2:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    29b4:	687b      	ldr	r3, [r7, #4]
    29b6:	685b      	ldr	r3, [r3, #4]
}
    29b8:	4618      	mov	r0, r3
    29ba:	370c      	adds	r7, #12
    29bc:	46bd      	mov	sp, r7
    29be:	f85d 7b04 	ldr.w	r7, [sp], #4
    29c2:	4770      	bx	lr

000029c4 <xEventGetxTag>:

struct tag * xEventGetxTag( xEventHandle pxEvent)
{
    29c4:	b480      	push	{r7}
    29c6:	b083      	sub	sp, #12
    29c8:	af00      	add	r7, sp, #0
    29ca:	6078      	str	r0, [r7, #4]
    return (struct tag *)&((eveECB *) pxEvent)->xTag;
    29cc:	687b      	ldr	r3, [r7, #4]
    29ce:	3308      	adds	r3, #8
}
    29d0:	4618      	mov	r0, r3
    29d2:	370c      	adds	r7, #12
    29d4:	46bd      	mov	sp, r7
    29d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29da:	4770      	bx	lr

000029dc <xEventGetxData>:

struct eventData * xEventGetxData( xEventHandle pxEvent)
{
    29dc:	b480      	push	{r7}
    29de:	b083      	sub	sp, #12
    29e0:	af00      	add	r7, sp, #0
    29e2:	6078      	str	r0, [r7, #4]
    return (struct eventData *)&((eveECB *) pxEvent)->xData;
    29e4:	687b      	ldr	r3, [r7, #4]
    29e6:	3318      	adds	r3, #24
}
    29e8:	4618      	mov	r0, r3
    29ea:	370c      	adds	r7, #12
    29ec:	46bd      	mov	sp, r7
    29ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    29f2:	4770      	bx	lr

000029f4 <getGCD>:

static portBASE_TYPE getGCD(portTickType t1, portTickType t2)
{
    29f4:	b580      	push	{r7, lr}
    29f6:	b082      	sub	sp, #8
    29f8:	af00      	add	r7, sp, #0
    29fa:	6078      	str	r0, [r7, #4]
    29fc:	6039      	str	r1, [r7, #0]
    return t1%t2==0 ? t2 : getGCD(t2, t1 % t2);
    29fe:	687b      	ldr	r3, [r7, #4]
    2a00:	683a      	ldr	r2, [r7, #0]
    2a02:	fbb3 f2f2 	udiv	r2, r3, r2
    2a06:	6839      	ldr	r1, [r7, #0]
    2a08:	fb01 f202 	mul.w	r2, r1, r2
    2a0c:	1a9b      	subs	r3, r3, r2
    2a0e:	2b00      	cmp	r3, #0
    2a10:	d00d      	beq.n	2a2e <getGCD+0x3a>
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	683a      	ldr	r2, [r7, #0]
    2a16:	fbb3 f2f2 	udiv	r2, r3, r2
    2a1a:	6839      	ldr	r1, [r7, #0]
    2a1c:	fb01 f202 	mul.w	r2, r1, r2
    2a20:	1a9b      	subs	r3, r3, r2
    2a22:	6838      	ldr	r0, [r7, #0]
    2a24:	4619      	mov	r1, r3
    2a26:	f7ff ffe5 	bl	29f4 <getGCD>
    2a2a:	4603      	mov	r3, r0
    2a2c:	e000      	b.n	2a30 <getGCD+0x3c>
    2a2e:	683b      	ldr	r3, [r7, #0]
}
    2a30:	4618      	mov	r0, r3
    2a32:	3708      	adds	r7, #8
    2a34:	46bd      	mov	sp, r7
    2a36:	bd80      	pop	{r7, pc}

00002a38 <GCDOfTaskPeriod>:

static portTickType GCDOfTaskPeriod()
{
    2a38:	b580      	push	{r7, lr}
    2a3a:	b082      	sub	sp, #8
    2a3c:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];
    2a3e:	f240 0328 	movw	r3, #40	; 0x28
    2a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a46:	681b      	ldr	r3, [r3, #0]
    2a48:	603b      	str	r3, [r7, #0]

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a4a:	2301      	movs	r3, #1
    2a4c:	607b      	str	r3, [r7, #4]
    2a4e:	e00f      	b.n	2a70 <GCDOfTaskPeriod+0x38>
    {
        result = getGCD(result , xPeriodOfTask[i]); 
    2a50:	f240 0328 	movw	r3, #40	; 0x28
    2a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a58:	687a      	ldr	r2, [r7, #4]
    2a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2a5e:	6838      	ldr	r0, [r7, #0]
    2a60:	4619      	mov	r1, r3
    2a62:	f7ff ffc7 	bl	29f4 <getGCD>
    2a66:	4603      	mov	r3, r0
    2a68:	603b      	str	r3, [r7, #0]
static portTickType GCDOfTaskPeriod()
{
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a6a:	687b      	ldr	r3, [r7, #4]
    2a6c:	3301      	adds	r3, #1
    2a6e:	607b      	str	r3, [r7, #4]
    2a70:	687b      	ldr	r3, [r7, #4]
    2a72:	2b0c      	cmp	r3, #12
    2a74:	ddec      	ble.n	2a50 <GCDOfTaskPeriod+0x18>
    {
        result = getGCD(result , xPeriodOfTask[i]); 
    }
    return result;
    2a76:	683b      	ldr	r3, [r7, #0]
}
    2a78:	4618      	mov	r0, r3
    2a7a:	3708      	adds	r7, #8
    2a7c:	46bd      	mov	sp, r7
    2a7e:	bd80      	pop	{r7, pc}

00002a80 <vInitialiseEventLists>:

void vInitialiseEventLists() 
{
    2a80:	b590      	push	{r4, r7, lr}
    2a82:	b091      	sub	sp, #68	; 0x44
    2a84:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU, i;
    eveECB * pxIdleEvents[NUMBEROFEVENTS];
    eveECB * pxEndFlagEvent;

    // init the GCD of Task period;
    GCDPeriod = GCDOfTaskPeriod();
    2a86:	f7ff ffd7 	bl	2a38 <GCDOfTaskPeriod>
    2a8a:	4602      	mov	r2, r0
    2a8c:	f240 6358 	movw	r3, #1624	; 0x658
    2a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a94:	601a      	str	r2, [r3, #0]

    vListInitialise( ( xList * ) &xEventIdleList);
    2a96:	f640 0094 	movw	r0, #2196	; 0x894
    2a9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a9e:	f001 fb27 	bl	40f0 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutablePool );
    2aa2:	f640 00a8 	movw	r0, #2216	; 0x8a8
    2aa6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2aaa:	f001 fb21 	bl	40f0 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    2aae:	f640 00bc 	movw	r0, #2236	; 0x8bc
    2ab2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ab6:	f001 fb1b 	bl	40f0 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutablePool );
    2aba:	f640 00d0 	movw	r0, #2256	; 0x8d0
    2abe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ac2:	f001 fb15 	bl	40f0 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutableList );
    2ac6:	f640 00e4 	movw	r0, #2276	; 0x8e4
    2aca:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ace:	f001 fb0f 	bl	40f0 <vListInitialise>
    vListInitialise( (xList * ) & xEventReadyList);
    2ad2:	f640 00f8 	movw	r0, #2296	; 0x8f8
    2ad6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ada:	f001 fb09 	bl	40f0 <vListInitialise>

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2ade:	2300      	movs	r3, #0
    2ae0:	63bb      	str	r3, [r7, #56]	; 0x38
    2ae2:	e02b      	b.n	2b3c <vInitialiseEventLists+0xbc>
    {
        pxIdleEvents[i] = (eveECB *) pvPortMalloc(sizeof(eveECB)); 
    2ae4:	6bbc      	ldr	r4, [r7, #56]	; 0x38
    2ae6:	2034      	movs	r0, #52	; 0x34
    2ae8:	f003 f954 	bl	5d94 <pvPortMalloc>
    2aec:	4602      	mov	r2, r0
    2aee:	00a3      	lsls	r3, r4, #2
    2af0:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2af4:	440b      	add	r3, r1
    2af6:	f843 2c3c 	str.w	r2, [r3, #-60]
        listSET_LIST_ITEM_OWNER( (xListItem *) & (pxIdleEvents[i]->xEventListItem), pxIdleEvents[i]);
    2afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2afc:	009b      	lsls	r3, r3, #2
    2afe:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2b02:	4413      	add	r3, r2
    2b04:	f853 2c3c 	ldr.w	r2, [r3, #-60]
    2b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b0a:	009b      	lsls	r3, r3, #2
    2b0c:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2b10:	440b      	add	r3, r1
    2b12:	f853 3c3c 	ldr.w	r3, [r3, #-60]
    2b16:	62d3      	str	r3, [r2, #44]	; 0x2c
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    2b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b1a:	009b      	lsls	r3, r3, #2
    2b1c:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2b20:	4413      	add	r3, r2
    2b22:	f853 3c3c 	ldr.w	r3, [r3, #-60]
    2b26:	3320      	adds	r3, #32
    2b28:	f640 0094 	movw	r0, #2196	; 0x894
    2b2c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b30:	4619      	mov	r1, r3
    2b32:	f001 fb09 	bl	4148 <vListInsertEnd>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    vListInitialise( ( xList * ) &xEventExecutablePool );
    vListInitialise( ( xList * ) &xEventExecutableList );
    vListInitialise( (xList * ) & xEventReadyList);

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b38:	3301      	adds	r3, #1
    2b3a:	63bb      	str	r3, [r7, #56]	; 0x38
    2b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b3e:	2b0c      	cmp	r3, #12
    2b40:	ddd0      	ble.n	2ae4 <vInitialiseEventLists+0x64>
        listSET_LIST_ITEM_OWNER( (xListItem *) & (pxIdleEvents[i]->xEventListItem), pxIdleEvents[i]);
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    }

    // Creating an End FLag Event and insert into the end of xEventList, which needs sorted events
}
    2b42:	3744      	adds	r7, #68	; 0x44
    2b44:	46bd      	mov	sp, r7
    2b46:	bd90      	pop	{r4, r7, pc}

00002b48 <xIsExecutableEventArrive>:

portBASE_TYPE xIsExecutableEventArrive()
{
    2b48:	b580      	push	{r7, lr}
    2b4a:	b086      	sub	sp, #24
    2b4c:	af00      	add	r7, sp, #0
    volatile xListItem * pxIterator;
    portTickType xCurrentTime;
    portBASE_TYPE xLen, i;
    struct tag * xTag;
    
    if((xLen = listCURRENT_LIST_LENGTH(&xEventNonExecutablePool)) > 0)
    2b4e:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b56:	681b      	ldr	r3, [r3, #0]
    2b58:	60fb      	str	r3, [r7, #12]
    2b5a:	68fb      	ldr	r3, [r7, #12]
    2b5c:	2b00      	cmp	r3, #0
    2b5e:	dd22      	ble.n	2ba6 <xIsExecutableEventArrive+0x5e>
    {

        pxIterator = (xListItem *)(xEventNonExecutablePool.xListEnd.pxNext);
    2b60:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b68:	68db      	ldr	r3, [r3, #12]
    2b6a:	617b      	str	r3, [r7, #20]
        xCurrentTime = xTaskGetTickCount();
    2b6c:	f002 fbca 	bl	5304 <xTaskGetTickCount>
    2b70:	60b8      	str	r0, [r7, #8]
        for( i = 0; i < xLen ; i++ ) 
    2b72:	2300      	movs	r3, #0
    2b74:	613b      	str	r3, [r7, #16]
    2b76:	e012      	b.n	2b9e <xIsExecutableEventArrive+0x56>
        {
            xTag = xEventGetxTag( pxIterator->pvOwner );
    2b78:	697b      	ldr	r3, [r7, #20]
    2b7a:	68db      	ldr	r3, [r3, #12]
    2b7c:	4618      	mov	r0, r3
    2b7e:	f7ff ff21 	bl	29c4 <xEventGetxTag>
    2b82:	6078      	str	r0, [r7, #4]
            if(xTag->xTimestamp <= xCurrentTime) return pdTRUE;
    2b84:	687b      	ldr	r3, [r7, #4]
    2b86:	685a      	ldr	r2, [r3, #4]
    2b88:	68bb      	ldr	r3, [r7, #8]
    2b8a:	429a      	cmp	r2, r3
    2b8c:	d801      	bhi.n	2b92 <xIsExecutableEventArrive+0x4a>
    2b8e:	2301      	movs	r3, #1
    2b90:	e00a      	b.n	2ba8 <xIsExecutableEventArrive+0x60>
            pxIterator = pxIterator->pxNext;
    2b92:	697b      	ldr	r3, [r7, #20]
    2b94:	685b      	ldr	r3, [r3, #4]
    2b96:	617b      	str	r3, [r7, #20]
    if((xLen = listCURRENT_LIST_LENGTH(&xEventNonExecutablePool)) > 0)
    {

        pxIterator = (xListItem *)(xEventNonExecutablePool.xListEnd.pxNext);
        xCurrentTime = xTaskGetTickCount();
        for( i = 0; i < xLen ; i++ ) 
    2b98:	693b      	ldr	r3, [r7, #16]
    2b9a:	3301      	adds	r3, #1
    2b9c:	613b      	str	r3, [r7, #16]
    2b9e:	693a      	ldr	r2, [r7, #16]
    2ba0:	68fb      	ldr	r3, [r7, #12]
    2ba2:	429a      	cmp	r2, r3
    2ba4:	dbe8      	blt.n	2b78 <xIsExecutableEventArrive+0x30>
            xTag = xEventGetxTag( pxIterator->pvOwner );
            if(xTag->xTimestamp <= xCurrentTime) return pdTRUE;
            pxIterator = pxIterator->pxNext;
        }
    }
    return pdFALSE;
    2ba6:	2300      	movs	r3, #0
}
    2ba8:	4618      	mov	r0, r3
    2baa:	3718      	adds	r7, #24
    2bac:	46bd      	mov	sp, r7
    2bae:	bd80      	pop	{r7, pc}

00002bb0 <xCompareFunction>:

/* executable event comparison function is used in xEventExecutableList. 
 * The event with earlist deadline will be scheduled to execute first */
static portBASE_TYPE xCompareFunction( const struct tag * t1, const struct tag * t2 )
{
    2bb0:	b480      	push	{r7}
    2bb2:	b083      	sub	sp, #12
    2bb4:	af00      	add	r7, sp, #0
    2bb6:	6078      	str	r0, [r7, #4]
    2bb8:	6039      	str	r1, [r7, #0]
    if( t1->xDeadline < t2->xDeadline)
    2bba:	687b      	ldr	r3, [r7, #4]
    2bbc:	681a      	ldr	r2, [r3, #0]
    2bbe:	683b      	ldr	r3, [r7, #0]
    2bc0:	681b      	ldr	r3, [r3, #0]
    2bc2:	429a      	cmp	r2, r3
    2bc4:	d201      	bcs.n	2bca <xCompareFunction+0x1a>
    {
        return pdTRUE;
    2bc6:	2301      	movs	r3, #1
    2bc8:	e02a      	b.n	2c20 <xCompareFunction+0x70>
    }
    else if( t1->xDeadline == t2->xDeadline)
    2bca:	687b      	ldr	r3, [r7, #4]
    2bcc:	681a      	ldr	r2, [r3, #0]
    2bce:	683b      	ldr	r3, [r7, #0]
    2bd0:	681b      	ldr	r3, [r3, #0]
    2bd2:	429a      	cmp	r2, r3
    2bd4:	d123      	bne.n	2c1e <xCompareFunction+0x6e>
    {
        if( t1->xTimestamp < t2->xTimestamp)
    2bd6:	687b      	ldr	r3, [r7, #4]
    2bd8:	685a      	ldr	r2, [r3, #4]
    2bda:	683b      	ldr	r3, [r7, #0]
    2bdc:	685b      	ldr	r3, [r3, #4]
    2bde:	429a      	cmp	r2, r3
    2be0:	d201      	bcs.n	2be6 <xCompareFunction+0x36>
        {
            return pdTRUE;
    2be2:	2301      	movs	r3, #1
    2be4:	e01c      	b.n	2c20 <xCompareFunction+0x70>
        }
        else if( t1->xTimestamp == t2->xTimestamp )
    2be6:	687b      	ldr	r3, [r7, #4]
    2be8:	685a      	ldr	r2, [r3, #4]
    2bea:	683b      	ldr	r3, [r7, #0]
    2bec:	685b      	ldr	r3, [r3, #4]
    2bee:	429a      	cmp	r2, r3
    2bf0:	d115      	bne.n	2c1e <xCompareFunction+0x6e>
        {
            if( t1->xMicroStep < t2->xMicroStep)
    2bf2:	687b      	ldr	r3, [r7, #4]
    2bf4:	68da      	ldr	r2, [r3, #12]
    2bf6:	683b      	ldr	r3, [r7, #0]
    2bf8:	68db      	ldr	r3, [r3, #12]
    2bfa:	429a      	cmp	r2, r3
    2bfc:	da01      	bge.n	2c02 <xCompareFunction+0x52>
            {
                return pdTRUE;
    2bfe:	2301      	movs	r3, #1
    2c00:	e00e      	b.n	2c20 <xCompareFunction+0x70>
            }
            else if(t1->xMicroStep == t2->xMicroStep && t1->xLevel < t2->xLevel )
    2c02:	687b      	ldr	r3, [r7, #4]
    2c04:	68da      	ldr	r2, [r3, #12]
    2c06:	683b      	ldr	r3, [r7, #0]
    2c08:	68db      	ldr	r3, [r3, #12]
    2c0a:	429a      	cmp	r2, r3
    2c0c:	d107      	bne.n	2c1e <xCompareFunction+0x6e>
    2c0e:	687b      	ldr	r3, [r7, #4]
    2c10:	689a      	ldr	r2, [r3, #8]
    2c12:	683b      	ldr	r3, [r7, #0]
    2c14:	689b      	ldr	r3, [r3, #8]
    2c16:	429a      	cmp	r2, r3
    2c18:	da01      	bge.n	2c1e <xCompareFunction+0x6e>
            {
                return pdTRUE;
    2c1a:	2301      	movs	r3, #1
    2c1c:	e000      	b.n	2c20 <xCompareFunction+0x70>
            }
        }
    }

    return pdFALSE;
    2c1e:	2300      	movs	r3, #0
}
    2c20:	4618      	mov	r0, r3
    2c22:	370c      	adds	r7, #12
    2c24:	46bd      	mov	sp, r7
    2c26:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c2a:	4770      	bx	lr

00002c2c <vEventSetxTag>:

static void vEventSetxTag( portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent )
{
    2c2c:	b480      	push	{r7}
    2c2e:	b087      	sub	sp, #28
    2c30:	af00      	add	r7, sp, #0
    2c32:	60f8      	str	r0, [r7, #12]
    2c34:	60b9      	str	r1, [r7, #8]
    2c36:	607a      	str	r2, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2c38:	687b      	ldr	r3, [r7, #4]
    2c3a:	617b      	str	r3, [r7, #20]

    /* EDF scheduling algorithm */
    pxEvent->xTag.xDeadline = xDeadline ;
    2c3c:	697b      	ldr	r3, [r7, #20]
    2c3e:	68fa      	ldr	r2, [r7, #12]
    2c40:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp;
    2c42:	697b      	ldr	r3, [r7, #20]
    2c44:	68ba      	ldr	r2, [r7, #8]
    2c46:	60da      	str	r2, [r3, #12]

    /*the microstep is not used now*/
    pxEvent->xTag.xMicroStep = 0;
    2c48:	697b      	ldr	r3, [r7, #20]
    2c4a:	2200      	movs	r2, #0
    2c4c:	615a      	str	r2, [r3, #20]
}
    2c4e:	371c      	adds	r7, #28
    2c50:	46bd      	mov	sp, r7
    2c52:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c56:	4770      	bx	lr

00002c58 <prvEventListGenericInsert>:

/* insert event to xEventNonExecutableList in terms of comparison function 1 */
static void prvEventListGenericInsert( xListItem *pxNewListItem )
{
    2c58:	b580      	push	{r7, lr}
    2c5a:	b088      	sub	sp, #32
    2c5c:	af00      	add	r7, sp, #0
    2c5e:	6078      	str	r0, [r7, #4]
    struct tag * xTagOfInsertion;
    xList * pxList = &xEventExecutableList; 
    2c60:	f640 03e4 	movw	r3, #2276	; 0x8e4
    2c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c68:	617b      	str	r3, [r7, #20]
    volatile xListItem *pxIterator;
    portBASE_TYPE xLen, i;

    xTagOfInsertion = xEventGetxTag(pxNewListItem->pvOwner);
    2c6a:	687b      	ldr	r3, [r7, #4]
    2c6c:	68db      	ldr	r3, [r3, #12]
    2c6e:	4618      	mov	r0, r3
    2c70:	f7ff fea8 	bl	29c4 <xEventGetxTag>
    2c74:	6138      	str	r0, [r7, #16]

    taskENTER_CRITICAL();
    2c76:	f003 f813 	bl	5ca0 <vPortEnterCritical>
    // inserting start from the ending of list
    xLen = listCURRENT_LIST_LENGTH(&xEventExecutableList);
    2c7a:	f640 03e4 	movw	r3, #2276	; 0x8e4
    2c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c82:	681b      	ldr	r3, [r3, #0]
    2c84:	60fb      	str	r3, [r7, #12]
    pxIterator = (xListItem *)&(pxList->xListEnd);
    2c86:	697b      	ldr	r3, [r7, #20]
    2c88:	3308      	adds	r3, #8
    2c8a:	61fb      	str	r3, [r7, #28]
    for( i = 0; i < xLen && xCompareFunction( xTagOfInsertion, xEventGetxTag( pxIterator->pxPrevious->pvOwner )); i ++)
    2c8c:	2300      	movs	r3, #0
    2c8e:	61bb      	str	r3, [r7, #24]
    2c90:	e005      	b.n	2c9e <prvEventListGenericInsert+0x46>
    { 
        pxIterator = pxIterator->pxPrevious;
    2c92:	69fb      	ldr	r3, [r7, #28]
    2c94:	689b      	ldr	r3, [r3, #8]
    2c96:	61fb      	str	r3, [r7, #28]

    taskENTER_CRITICAL();
    // inserting start from the ending of list
    xLen = listCURRENT_LIST_LENGTH(&xEventExecutableList);
    pxIterator = (xListItem *)&(pxList->xListEnd);
    for( i = 0; i < xLen && xCompareFunction( xTagOfInsertion, xEventGetxTag( pxIterator->pxPrevious->pvOwner )); i ++)
    2c98:	69bb      	ldr	r3, [r7, #24]
    2c9a:	3301      	adds	r3, #1
    2c9c:	61bb      	str	r3, [r7, #24]
    2c9e:	69ba      	ldr	r2, [r7, #24]
    2ca0:	68fb      	ldr	r3, [r7, #12]
    2ca2:	429a      	cmp	r2, r3
    2ca4:	da0d      	bge.n	2cc2 <prvEventListGenericInsert+0x6a>
    2ca6:	69fb      	ldr	r3, [r7, #28]
    2ca8:	689b      	ldr	r3, [r3, #8]
    2caa:	68db      	ldr	r3, [r3, #12]
    2cac:	4618      	mov	r0, r3
    2cae:	f7ff fe89 	bl	29c4 <xEventGetxTag>
    2cb2:	4603      	mov	r3, r0
    2cb4:	6938      	ldr	r0, [r7, #16]
    2cb6:	4619      	mov	r1, r3
    2cb8:	f7ff ff7a 	bl	2bb0 <xCompareFunction>
    2cbc:	4603      	mov	r3, r0
    2cbe:	2b00      	cmp	r3, #0
    2cc0:	d1e7      	bne.n	2c92 <prvEventListGenericInsert+0x3a>
    { 
        pxIterator = pxIterator->pxPrevious;
    } 
    //vPrintString("hello,world\n\r");

    taskEXIT_CRITICAL();
    2cc2:	f003 f803 	bl	5ccc <vPortExitCritical>

    pxIterator = pxIterator->pxPrevious;
    2cc6:	69fb      	ldr	r3, [r7, #28]
    2cc8:	689b      	ldr	r3, [r3, #8]
    2cca:	61fb      	str	r3, [r7, #28]
    
    // insert the new event after a smaller one from the back of list
    pxNewListItem->pxNext = pxIterator->pxNext;
    2ccc:	69fb      	ldr	r3, [r7, #28]
    2cce:	685a      	ldr	r2, [r3, #4]
    2cd0:	687b      	ldr	r3, [r7, #4]
    2cd2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2cd4:	687b      	ldr	r3, [r7, #4]
    2cd6:	685b      	ldr	r3, [r3, #4]
    2cd8:	687a      	ldr	r2, [r7, #4]
    2cda:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2cdc:	687b      	ldr	r3, [r7, #4]
    2cde:	69fa      	ldr	r2, [r7, #28]
    2ce0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2ce2:	69fb      	ldr	r3, [r7, #28]
    2ce4:	687a      	ldr	r2, [r7, #4]
    2ce6:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2ce8:	687b      	ldr	r3, [r7, #4]
    2cea:	697a      	ldr	r2, [r7, #20]
    2cec:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2cee:	697b      	ldr	r3, [r7, #20]
    2cf0:	681b      	ldr	r3, [r3, #0]
    2cf2:	1c5a      	adds	r2, r3, #1
    2cf4:	697b      	ldr	r3, [r7, #20]
    2cf6:	601a      	str	r2, [r3, #0]
}
    2cf8:	3720      	adds	r7, #32
    2cfa:	46bd      	mov	sp, r7
    2cfc:	bd80      	pop	{r7, pc}
    2cfe:	bf00      	nop

00002d00 <pxEventGenericCreate>:


xEventHandle pxEventGenericCreate( portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData * pdData)
{
    2d00:	b580      	push	{r7, lr}
    2d02:	b086      	sub	sp, #24
    2d04:	af00      	add	r7, sp, #0
    2d06:	60f8      	str	r0, [r7, #12]
    2d08:	60b9      	str	r1, [r7, #8]
    2d0a:	607a      	str	r2, [r7, #4]
    2d0c:	603b      	str	r3, [r7, #0]
    eveECB * pxNewEvent = NULL;
    2d0e:	2300      	movs	r3, #0
    2d10:	617b      	str	r3, [r7, #20]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2d12:	f002 ffc5 	bl	5ca0 <vPortEnterCritical>

    pxNewEvent = (eveECB *)xEventIdleList.xListEnd.pxNext->pvOwner;
    2d16:	f640 0394 	movw	r3, #2196	; 0x894
    2d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d1e:	68db      	ldr	r3, [r3, #12]
    2d20:	68db      	ldr	r3, [r3, #12]
    2d22:	617b      	str	r3, [r7, #20]
    vListRemove( (xListItem *)&pxNewEvent->xEventListItem );
    2d24:	697b      	ldr	r3, [r7, #20]
    2d26:	3320      	adds	r3, #32
    2d28:	4618      	mov	r0, r3
    2d2a:	f001 fa6d 	bl	4208 <vListRemove>

    pxNewEvent->pxSource = pxSource;
    2d2e:	697b      	ldr	r3, [r7, #20]
    2d30:	68fa      	ldr	r2, [r7, #12]
    2d32:	601a      	str	r2, [r3, #0]
    vEventSetxTag( xDeadline, xTimestamp, pxNewEvent );
    2d34:	68b8      	ldr	r0, [r7, #8]
    2d36:	6879      	ldr	r1, [r7, #4]
    2d38:	697a      	ldr	r2, [r7, #20]
    2d3a:	f7ff ff77 	bl	2c2c <vEventSetxTag>
    ((eveECB *) pxNewEvent)->xData = *pdData;
    2d3e:	697b      	ldr	r3, [r7, #20]
    2d40:	683a      	ldr	r2, [r7, #0]
    2d42:	3318      	adds	r3, #24
    2d44:	e892 0003 	ldmia.w	r2, {r0, r1}
    2d48:	e883 0003 	stmia.w	r3, {r0, r1}
    listSET_LIST_ITEM_OWNER( (xListItem *) &pxNewEvent->xEventListItem, pxNewEvent);
    2d4c:	697b      	ldr	r3, [r7, #20]
    2d4e:	697a      	ldr	r2, [r7, #20]
    2d50:	62da      	str	r2, [r3, #44]	; 0x2c

    taskEXIT_CRITICAL();
    2d52:	f002 ffbb 	bl	5ccc <vPortExitCritical>

    return pxNewEvent;
    2d56:	697b      	ldr	r3, [r7, #20]
}
    2d58:	4618      	mov	r0, r3
    2d5a:	3718      	adds	r7, #24
    2d5c:	46bd      	mov	sp, r7
    2d5e:	bd80      	pop	{r7, pc}

00002d60 <vEventGenericScatter>:


// find the executable events from xEventNonExecutablePool.
// scatter the events and transit them into xEventExecutablePool
void vEventGenericScatter()
{
    2d60:	b580      	push	{r7, lr}
    2d62:	b08c      	sub	sp, #48	; 0x30
    2d64:	af00      	add	r7, sp, #0
    portBASE_TYPE pxSource, pxDestination, outs;
    struct tag * xTag;
    eveECB * pxEvent , * pxCopyEvent; 
    xListItem * temp_pxEventListItem;
    portTickType xCurrentTime;
    volatile xListItem * pxIterator = xEventNonExecutablePool.xListEnd.pxNext;
    2d66:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d6e:	68db      	ldr	r3, [r3, #12]
    2d70:	627b      	str	r3, [r7, #36]	; 0x24

    // event scatter
    if( (xLen = listCURRENT_LIST_LENGTH( &xEventNonExecutablePool )) > 0)
    2d72:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d7a:	681b      	ldr	r3, [r3, #0]
    2d7c:	623b      	str	r3, [r7, #32]
    2d7e:	6a3b      	ldr	r3, [r7, #32]
    2d80:	2b00      	cmp	r3, #0
    2d82:	f340 80d1 	ble.w	2f28 <vEventGenericScatter+0x1c8>
    {
        xCurrentTime = xTaskGetTickCount();
    2d86:	f002 fabd 	bl	5304 <xTaskGetTickCount>
    2d8a:	61f8      	str	r0, [r7, #28]
        // search executable event from nonexecutable pool
        for(j = 0; j < xLen; j ++ )
    2d8c:	2300      	movs	r3, #0
    2d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    2d90:	e0c5      	b.n	2f1e <vEventGenericScatter+0x1be>
        {
            xTag = xEventGetxTag( pxIterator->pvOwner ); 
    2d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d94:	68db      	ldr	r3, [r3, #12]
    2d96:	4618      	mov	r0, r3
    2d98:	f7ff fe14 	bl	29c4 <xEventGetxTag>
    2d9c:	61b8      	str	r0, [r7, #24]
            // find one
            if( xTag->xTimestamp <= xCurrentTime )
    2d9e:	69bb      	ldr	r3, [r7, #24]
    2da0:	685a      	ldr	r2, [r3, #4]
    2da2:	69fb      	ldr	r3, [r7, #28]
    2da4:	429a      	cmp	r2, r3
    2da6:	f200 80b4 	bhi.w	2f12 <vEventGenericScatter+0x1b2>
            {
                pxEvent = (eveECB *) pxIterator->pvOwner;
    2daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dac:	68db      	ldr	r3, [r3, #12]
    2dae:	617b      	str	r3, [r7, #20]
                outs = xContexts[ pxEvent->pxSource ].xNumOfOut; // used for cloning
    2db0:	697b      	ldr	r3, [r7, #20]
    2db2:	6819      	ldr	r1, [r3, #0]
    2db4:	f640 120c 	movw	r2, #2316	; 0x90c
    2db8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2dbc:	460b      	mov	r3, r1
    2dbe:	00db      	lsls	r3, r3, #3
    2dc0:	1a5b      	subs	r3, r3, r1
    2dc2:	00db      	lsls	r3, r3, #3
    2dc4:	4413      	add	r3, r2
    2dc6:	3310      	adds	r3, #16
    2dc8:	681b      	ldr	r3, [r3, #0]
    2dca:	613b      	str	r3, [r7, #16]

                taskENTER_CRITICAL();
    2dcc:	f002 ff68 	bl	5ca0 <vPortEnterCritical>
                temp_pxEventListItem = (xListItem *) pxIterator;
    2dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dd2:	60fb      	str	r3, [r7, #12]
                pxIterator = pxIterator->pxNext;
    2dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dd6:	685b      	ldr	r3, [r3, #4]
    2dd8:	627b      	str	r3, [r7, #36]	; 0x24
                vListRemove(temp_pxEventListItem);
    2dda:	68f8      	ldr	r0, [r7, #12]
    2ddc:	f001 fa14 	bl	4208 <vListRemove>
                // complete the information of the origin event.
                pxEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[0];
    2de0:	697b      	ldr	r3, [r7, #20]
    2de2:	6819      	ldr	r1, [r3, #0]
    2de4:	f640 120c 	movw	r2, #2316	; 0x90c
    2de8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2dec:	460b      	mov	r3, r1
    2dee:	00db      	lsls	r3, r3, #3
    2df0:	1a5b      	subs	r3, r3, r1
    2df2:	00db      	lsls	r3, r3, #3
    2df4:	4413      	add	r3, r2
    2df6:	331c      	adds	r3, #28
    2df8:	681a      	ldr	r2, [r3, #0]
    2dfa:	697b      	ldr	r3, [r7, #20]
    2dfc:	605a      	str	r2, [r3, #4]
                xContexts[pxEvent->pxDestination].xInBoolCount++;
    2dfe:	697b      	ldr	r3, [r7, #20]
    2e00:	685a      	ldr	r2, [r3, #4]
    2e02:	f640 110c 	movw	r1, #2316	; 0x90c
    2e06:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2e0a:	4613      	mov	r3, r2
    2e0c:	00db      	lsls	r3, r3, #3
    2e0e:	1a9b      	subs	r3, r3, r2
    2e10:	00db      	lsls	r3, r3, #3
    2e12:	440b      	add	r3, r1
    2e14:	3334      	adds	r3, #52	; 0x34
    2e16:	681b      	ldr	r3, [r3, #0]
    2e18:	1c58      	adds	r0, r3, #1
    2e1a:	f640 110c 	movw	r1, #2316	; 0x90c
    2e1e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2e22:	4613      	mov	r3, r2
    2e24:	00db      	lsls	r3, r3, #3
    2e26:	1a9b      	subs	r3, r3, r2
    2e28:	00db      	lsls	r3, r3, #3
    2e2a:	440b      	add	r3, r1
    2e2c:	3334      	adds	r3, #52	; 0x34
    2e2e:	6018      	str	r0, [r3, #0]
                pxEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xMyFlag;
    2e30:	697b      	ldr	r3, [r7, #20]
    2e32:	6859      	ldr	r1, [r3, #4]
    2e34:	f640 120c 	movw	r2, #2316	; 0x90c
    2e38:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2e3c:	460b      	mov	r3, r1
    2e3e:	00db      	lsls	r3, r3, #3
    2e40:	1a5b      	subs	r3, r3, r1
    2e42:	00db      	lsls	r3, r3, #3
    2e44:	4413      	add	r3, r2
    2e46:	681a      	ldr	r2, [r3, #0]
    2e48:	697b      	ldr	r3, [r7, #20]
    2e4a:	611a      	str	r2, [r3, #16]
                vListInsertEnd(&xEventExecutablePool, temp_pxEventListItem);
    2e4c:	f640 00d0 	movw	r0, #2256	; 0x8d0
    2e50:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2e54:	68f9      	ldr	r1, [r7, #12]
    2e56:	f001 f977 	bl	4148 <vListInsertEnd>

                // copy one event to multiples
                for(i = 1; i < outs; ++ i)
    2e5a:	2301      	movs	r3, #1
    2e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    2e5e:	e051      	b.n	2f04 <vEventGenericScatter+0x1a4>
                {
                    pxCopyEvent = (eveECB *)pxEventGenericCreate(pxSource, pxEvent->xTag.xDeadline, pxEvent->xTag.xTimestamp, &pxEvent->xData);
    2e60:	697b      	ldr	r3, [r7, #20]
    2e62:	6899      	ldr	r1, [r3, #8]
    2e64:	697b      	ldr	r3, [r7, #20]
    2e66:	68da      	ldr	r2, [r3, #12]
    2e68:	697b      	ldr	r3, [r7, #20]
    2e6a:	3318      	adds	r3, #24
    2e6c:	68b8      	ldr	r0, [r7, #8]
    2e6e:	f7ff ff47 	bl	2d00 <pxEventGenericCreate>
    2e72:	6078      	str	r0, [r7, #4]
                    // complete the information of the copied event.
                    pxCopyEvent->xTag.xMicroStep = i;
    2e74:	687b      	ldr	r3, [r7, #4]
    2e76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2e78:	615a      	str	r2, [r3, #20]

                    pxCopyEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[i];
    2e7a:	697b      	ldr	r3, [r7, #20]
    2e7c:	6819      	ldr	r1, [r3, #0]
    2e7e:	f640 120c 	movw	r2, #2316	; 0x90c
    2e82:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2e86:	460b      	mov	r3, r1
    2e88:	00db      	lsls	r3, r3, #3
    2e8a:	1a5b      	subs	r3, r3, r1
    2e8c:	005b      	lsls	r3, r3, #1
    2e8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    2e90:	440b      	add	r3, r1
    2e92:	3306      	adds	r3, #6
    2e94:	009b      	lsls	r3, r3, #2
    2e96:	4413      	add	r3, r2
    2e98:	685a      	ldr	r2, [r3, #4]
    2e9a:	687b      	ldr	r3, [r7, #4]
    2e9c:	605a      	str	r2, [r3, #4]
                    xContexts[pxCopyEvent->pxDestination].xInBoolCount++;
    2e9e:	687b      	ldr	r3, [r7, #4]
    2ea0:	685a      	ldr	r2, [r3, #4]
    2ea2:	f640 110c 	movw	r1, #2316	; 0x90c
    2ea6:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2eaa:	4613      	mov	r3, r2
    2eac:	00db      	lsls	r3, r3, #3
    2eae:	1a9b      	subs	r3, r3, r2
    2eb0:	00db      	lsls	r3, r3, #3
    2eb2:	440b      	add	r3, r1
    2eb4:	3334      	adds	r3, #52	; 0x34
    2eb6:	681b      	ldr	r3, [r3, #0]
    2eb8:	1c58      	adds	r0, r3, #1
    2eba:	f640 110c 	movw	r1, #2316	; 0x90c
    2ebe:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2ec2:	4613      	mov	r3, r2
    2ec4:	00db      	lsls	r3, r3, #3
    2ec6:	1a9b      	subs	r3, r3, r2
    2ec8:	00db      	lsls	r3, r3, #3
    2eca:	440b      	add	r3, r1
    2ecc:	3334      	adds	r3, #52	; 0x34
    2ece:	6018      	str	r0, [r3, #0]
                    pxCopyEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xMyFlag; 
    2ed0:	697b      	ldr	r3, [r7, #20]
    2ed2:	6859      	ldr	r1, [r3, #4]
    2ed4:	f640 120c 	movw	r2, #2316	; 0x90c
    2ed8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2edc:	460b      	mov	r3, r1
    2ede:	00db      	lsls	r3, r3, #3
    2ee0:	1a5b      	subs	r3, r3, r1
    2ee2:	00db      	lsls	r3, r3, #3
    2ee4:	4413      	add	r3, r2
    2ee6:	681a      	ldr	r2, [r3, #0]
    2ee8:	687b      	ldr	r3, [r7, #4]
    2eea:	611a      	str	r2, [r3, #16]
                    vListInsertEnd(&xEventExecutablePool, &pxCopyEvent->xEventListItem);
    2eec:	687b      	ldr	r3, [r7, #4]
    2eee:	3320      	adds	r3, #32
    2ef0:	f640 00d0 	movw	r0, #2256	; 0x8d0
    2ef4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ef8:	4619      	mov	r1, r3
    2efa:	f001 f925 	bl	4148 <vListInsertEnd>
                xContexts[pxEvent->pxDestination].xInBoolCount++;
                pxEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xMyFlag;
                vListInsertEnd(&xEventExecutablePool, temp_pxEventListItem);

                // copy one event to multiples
                for(i = 1; i < outs; ++ i)
    2efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2f00:	3301      	adds	r3, #1
    2f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    2f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2f06:	693b      	ldr	r3, [r7, #16]
    2f08:	429a      	cmp	r2, r3
    2f0a:	dba9      	blt.n	2e60 <vEventGenericScatter+0x100>
                    pxCopyEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[i];
                    xContexts[pxCopyEvent->pxDestination].xInBoolCount++;
                    pxCopyEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xMyFlag; 
                    vListInsertEnd(&xEventExecutablePool, &pxCopyEvent->xEventListItem);
                }
                taskEXIT_CRITICAL();
    2f0c:	f002 fede 	bl	5ccc <vPortExitCritical>
    2f10:	e002      	b.n	2f18 <vEventGenericScatter+0x1b8>
            }
            else
            {
                pxIterator = pxIterator->pxNext;
    2f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2f14:	685b      	ldr	r3, [r3, #4]
    2f16:	627b      	str	r3, [r7, #36]	; 0x24
    // event scatter
    if( (xLen = listCURRENT_LIST_LENGTH( &xEventNonExecutablePool )) > 0)
    {
        xCurrentTime = xTaskGetTickCount();
        // search executable event from nonexecutable pool
        for(j = 0; j < xLen; j ++ )
    2f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2f1a:	3301      	adds	r3, #1
    2f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    2f1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2f20:	6a3b      	ldr	r3, [r7, #32]
    2f22:	429a      	cmp	r2, r3
    2f24:	f6ff af35 	blt.w	2d92 <vEventGenericScatter+0x32>
            {
                pxIterator = pxIterator->pxNext;
            }
        }
    }
}
    2f28:	3730      	adds	r7, #48	; 0x30
    2f2a:	46bd      	mov	sp, r7
    2f2c:	bd80      	pop	{r7, pc}
    2f2e:	bf00      	nop

00002f30 <clearEventReduceTrack>:


static void clearEventReduceTrack()
{
    2f30:	b480      	push	{r7}
    2f32:	b083      	sub	sp, #12
    2f34:	af00      	add	r7, sp, #0
    portBASE_TYPE i = NUMBEROFSERVANT;
    2f36:	232f      	movs	r3, #47	; 0x2f
    2f38:	607b      	str	r3, [r7, #4]
    while(i--)
    2f3a:	e030      	b.n	2f9e <clearEventReduceTrack+0x6e>
    {
        xEventReduceTrack[i].pxEvent = NULL; 
    2f3c:	f240 6260 	movw	r2, #1632	; 0x660
    2f40:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f44:	6879      	ldr	r1, [r7, #4]
    2f46:	460b      	mov	r3, r1
    2f48:	005b      	lsls	r3, r3, #1
    2f4a:	440b      	add	r3, r1
    2f4c:	009b      	lsls	r3, r3, #2
    2f4e:	4413      	add	r3, r2
    2f50:	2200      	movs	r2, #0
    2f52:	601a      	str	r2, [r3, #0]
        xEventReduceTrack[i].xNumOfEvent = xEventReduceTrack[i].AllArrive = 0;
    2f54:	f240 6260 	movw	r2, #1632	; 0x660
    2f58:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f5c:	6879      	ldr	r1, [r7, #4]
    2f5e:	460b      	mov	r3, r1
    2f60:	005b      	lsls	r3, r3, #1
    2f62:	440b      	add	r3, r1
    2f64:	009b      	lsls	r3, r3, #2
    2f66:	4413      	add	r3, r2
    2f68:	3308      	adds	r3, #8
    2f6a:	2200      	movs	r2, #0
    2f6c:	601a      	str	r2, [r3, #0]
    2f6e:	f240 6260 	movw	r2, #1632	; 0x660
    2f72:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f76:	6879      	ldr	r1, [r7, #4]
    2f78:	460b      	mov	r3, r1
    2f7a:	005b      	lsls	r3, r3, #1
    2f7c:	440b      	add	r3, r1
    2f7e:	009b      	lsls	r3, r3, #2
    2f80:	4413      	add	r3, r2
    2f82:	3308      	adds	r3, #8
    2f84:	6818      	ldr	r0, [r3, #0]
    2f86:	f240 6260 	movw	r2, #1632	; 0x660
    2f8a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f8e:	6879      	ldr	r1, [r7, #4]
    2f90:	460b      	mov	r3, r1
    2f92:	005b      	lsls	r3, r3, #1
    2f94:	440b      	add	r3, r1
    2f96:	009b      	lsls	r3, r3, #2
    2f98:	4413      	add	r3, r2
    2f9a:	3304      	adds	r3, #4
    2f9c:	6018      	str	r0, [r3, #0]


static void clearEventReduceTrack()
{
    portBASE_TYPE i = NUMBEROFSERVANT;
    while(i--)
    2f9e:	687b      	ldr	r3, [r7, #4]
    2fa0:	1e5a      	subs	r2, r3, #1
    2fa2:	607a      	str	r2, [r7, #4]
    2fa4:	2b00      	cmp	r3, #0
    2fa6:	d1c9      	bne.n	2f3c <clearEventReduceTrack+0xc>
    {
        xEventReduceTrack[i].pxEvent = NULL; 
        xEventReduceTrack[i].xNumOfEvent = xEventReduceTrack[i].AllArrive = 0;
    }
}
    2fa8:	370c      	adds	r7, #12
    2faa:	46bd      	mov	sp, r7
    2fac:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fb0:	4770      	bx	lr
    2fb2:	bf00      	nop

00002fb4 <vEventGenericReduce>:

void vEventGenericReduce()
{
    2fb4:	b580      	push	{r7, lr}
    2fb6:	b08a      	sub	sp, #40	; 0x28
    2fb8:	af00      	add	r7, sp, #0
    struct tag * temp_tag;
    struct eventData * temp_data;
    volatile xListItem * pxIterator;
    eveRT * temp_RT;

    if( (xLen = listCURRENT_LIST_LENGTH( &xEventExecutablePool )) > 0 )
    2fba:	f640 03d0 	movw	r3, #2256	; 0x8d0
    2fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fc2:	681b      	ldr	r3, [r3, #0]
    2fc4:	61fb      	str	r3, [r7, #28]
    2fc6:	69fb      	ldr	r3, [r7, #28]
    2fc8:	2b00      	cmp	r3, #0
    2fca:	f340 80ea 	ble.w	31a2 <vEventGenericReduce+0x1ee>
    {
        clearEventReduceTrack();
    2fce:	f7ff ffaf 	bl	2f30 <clearEventReduceTrack>
        pxIterator = (xListItem *) xEventExecutablePool.xListEnd.pxNext;
    2fd2:	f640 03d0 	movw	r3, #2256	; 0x8d0
    2fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fda:	68db      	ldr	r3, [r3, #12]
    2fdc:	623b      	str	r3, [r7, #32]
        for( i = 0; i < xLen; i++)
    2fde:	2300      	movs	r3, #0
    2fe0:	627b      	str	r3, [r7, #36]	; 0x24
    2fe2:	e0a6      	b.n	3132 <vEventGenericReduce+0x17e>
        {
            pxDestination = xEventGetpxDestination( pxIterator->pvOwner );
    2fe4:	6a3b      	ldr	r3, [r7, #32]
    2fe6:	68db      	ldr	r3, [r3, #12]
    2fe8:	4618      	mov	r0, r3
    2fea:	f7ff fcdf 	bl	29ac <xEventGetpxDestination>
    2fee:	61b8      	str	r0, [r7, #24]
            if(xContexts[pxDestination].xInBoolCount == xContexts[pxDestination].xNumOfIn )
    2ff0:	f640 120c 	movw	r2, #2316	; 0x90c
    2ff4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2ff8:	69b9      	ldr	r1, [r7, #24]
    2ffa:	460b      	mov	r3, r1
    2ffc:	00db      	lsls	r3, r3, #3
    2ffe:	1a5b      	subs	r3, r3, r1
    3000:	00db      	lsls	r3, r3, #3
    3002:	4413      	add	r3, r2
    3004:	3334      	adds	r3, #52	; 0x34
    3006:	6818      	ldr	r0, [r3, #0]
    3008:	f640 120c 	movw	r2, #2316	; 0x90c
    300c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3010:	69b9      	ldr	r1, [r7, #24]
    3012:	460b      	mov	r3, r1
    3014:	00db      	lsls	r3, r3, #3
    3016:	1a5b      	subs	r3, r3, r1
    3018:	00db      	lsls	r3, r3, #3
    301a:	4413      	add	r3, r2
    301c:	330c      	adds	r3, #12
    301e:	681b      	ldr	r3, [r3, #0]
    3020:	4298      	cmp	r0, r3
    3022:	f040 8083 	bne.w	312c <vEventGenericReduce+0x178>
            {
                temp_RT = &xEventReduceTrack[pxDestination];
    3026:	69ba      	ldr	r2, [r7, #24]
    3028:	4613      	mov	r3, r2
    302a:	005b      	lsls	r3, r3, #1
    302c:	4413      	add	r3, r2
    302e:	009b      	lsls	r3, r3, #2
    3030:	f240 6260 	movw	r2, #1632	; 0x660
    3034:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3038:	4413      	add	r3, r2
    303a:	617b      	str	r3, [r7, #20]
                if(xContexts[pxDestination].xInBoolCount > 1)
    303c:	f640 120c 	movw	r2, #2316	; 0x90c
    3040:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3044:	69b9      	ldr	r1, [r7, #24]
    3046:	460b      	mov	r3, r1
    3048:	00db      	lsls	r3, r3, #3
    304a:	1a5b      	subs	r3, r3, r1
    304c:	00db      	lsls	r3, r3, #3
    304e:	4413      	add	r3, r2
    3050:	3334      	adds	r3, #52	; 0x34
    3052:	681b      	ldr	r3, [r3, #0]
    3054:	2b01      	cmp	r3, #1
    3056:	dd57      	ble.n	3108 <vEventGenericReduce+0x154>
                {
                    if( (temp_count = temp_RT->xNumOfEvent) > 0 )
    3058:	697b      	ldr	r3, [r7, #20]
    305a:	685b      	ldr	r3, [r3, #4]
    305c:	613b      	str	r3, [r7, #16]
    305e:	693b      	ldr	r3, [r7, #16]
    3060:	2b00      	cmp	r3, #0
    3062:	dd41      	ble.n	30e8 <vEventGenericReduce+0x134>
                    {
                        temp_data = xEventGetxData( pxIterator->pvOwner );  
    3064:	6a3b      	ldr	r3, [r7, #32]
    3066:	68db      	ldr	r3, [r3, #12]
    3068:	4618      	mov	r0, r3
    306a:	f7ff fcb7 	bl	29dc <xEventGetxData>
    306e:	60f8      	str	r0, [r7, #12]
                        temp_tag = xEventGetxTag( pxIterator->pvOwner );
    3070:	6a3b      	ldr	r3, [r7, #32]
    3072:	68db      	ldr	r3, [r3, #12]
    3074:	4618      	mov	r0, r3
    3076:	f7ff fca5 	bl	29c4 <xEventGetxTag>
    307a:	60b8      	str	r0, [r7, #8]
                        ((eveECB *)temp_RT->pxEvent)->xData.xDataArray[temp_count] = temp_data->xDataArray[0];
    307c:	697b      	ldr	r3, [r7, #20]
    307e:	681b      	ldr	r3, [r3, #0]
    3080:	68fa      	ldr	r2, [r7, #12]
    3082:	6811      	ldr	r1, [r2, #0]
    3084:	693a      	ldr	r2, [r7, #16]
    3086:	3206      	adds	r2, #6
    3088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                        if( temp_RT->xNumOfEvent++ == xContexts[pxDestination].xInBoolCount - 1)
    308c:	697b      	ldr	r3, [r7, #20]
    308e:	6859      	ldr	r1, [r3, #4]
    3090:	1c4a      	adds	r2, r1, #1
    3092:	697b      	ldr	r3, [r7, #20]
    3094:	605a      	str	r2, [r3, #4]
    3096:	f640 120c 	movw	r2, #2316	; 0x90c
    309a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    309e:	69b8      	ldr	r0, [r7, #24]
    30a0:	4603      	mov	r3, r0
    30a2:	00db      	lsls	r3, r3, #3
    30a4:	1a1b      	subs	r3, r3, r0
    30a6:	00db      	lsls	r3, r3, #3
    30a8:	4413      	add	r3, r2
    30aa:	3334      	adds	r3, #52	; 0x34
    30ac:	681b      	ldr	r3, [r3, #0]
    30ae:	3b01      	subs	r3, #1
    30b0:	4299      	cmp	r1, r3
    30b2:	d102      	bne.n	30ba <vEventGenericReduce+0x106>
                        {
                            temp_RT->AllArrive = 1;  // all events are found
    30b4:	697b      	ldr	r3, [r7, #20]
    30b6:	2201      	movs	r2, #1
    30b8:	609a      	str	r2, [r3, #8]
                        }
                        if(((eveECB *)temp_RT->pxEvent)->xTag.xTimestamp < temp_tag->xTimestamp)
    30ba:	697b      	ldr	r3, [r7, #20]
    30bc:	681b      	ldr	r3, [r3, #0]
    30be:	68da      	ldr	r2, [r3, #12]
    30c0:	68bb      	ldr	r3, [r7, #8]
    30c2:	685b      	ldr	r3, [r3, #4]
    30c4:	429a      	cmp	r2, r3
    30c6:	d204      	bcs.n	30d2 <vEventGenericReduce+0x11e>
                        {
                            ((eveECB *)temp_RT->pxEvent)->xTag.xTimestamp = temp_tag->xTimestamp;
    30c8:	697b      	ldr	r3, [r7, #20]
    30ca:	681b      	ldr	r3, [r3, #0]
    30cc:	68ba      	ldr	r2, [r7, #8]
    30ce:	6852      	ldr	r2, [r2, #4]
    30d0:	60da      	str	r2, [r3, #12]
                        }

                        temp_pxEventListItem = (xListItem *) pxIterator;
    30d2:	6a3b      	ldr	r3, [r7, #32]
    30d4:	607b      	str	r3, [r7, #4]
                        pxIterator = pxIterator->pxNext;
    30d6:	6a3b      	ldr	r3, [r7, #32]
    30d8:	685b      	ldr	r3, [r3, #4]
    30da:	623b      	str	r3, [r7, #32]
                        vEventGenericDelete(temp_pxEventListItem->pvOwner);  // delete the redundant events
    30dc:	687b      	ldr	r3, [r7, #4]
    30de:	68db      	ldr	r3, [r3, #12]
    30e0:	4618      	mov	r0, r3
    30e2:	f000 fa1d 	bl	3520 <vEventGenericDelete>
    30e6:	e021      	b.n	312c <vEventGenericReduce+0x178>
                    }
                    else  // the fist one of reduce event
                    {
                        temp_RT->pxEvent = pxIterator->pvOwner; 
    30e8:	6a3b      	ldr	r3, [r7, #32]
    30ea:	68da      	ldr	r2, [r3, #12]
    30ec:	697b      	ldr	r3, [r7, #20]
    30ee:	601a      	str	r2, [r3, #0]
                        temp_RT->xNumOfEvent = 1;
    30f0:	697b      	ldr	r3, [r7, #20]
    30f2:	2201      	movs	r2, #1
    30f4:	605a      	str	r2, [r3, #4]
                        
                        temp_pxEventListItem = (xListItem *) pxIterator;
    30f6:	6a3b      	ldr	r3, [r7, #32]
    30f8:	607b      	str	r3, [r7, #4]
                        pxIterator = pxIterator->pxNext;
    30fa:	6a3b      	ldr	r3, [r7, #32]
    30fc:	685b      	ldr	r3, [r3, #4]
    30fe:	623b      	str	r3, [r7, #32]
                        vListRemove(temp_pxEventListItem);
    3100:	6878      	ldr	r0, [r7, #4]
    3102:	f001 f881 	bl	4208 <vListRemove>
    3106:	e011      	b.n	312c <vEventGenericReduce+0x178>
                    }
                }
                else // only one event for the target servant
                {
                    temp_RT->pxEvent = pxIterator->pvOwner; 
    3108:	6a3b      	ldr	r3, [r7, #32]
    310a:	68da      	ldr	r2, [r3, #12]
    310c:	697b      	ldr	r3, [r7, #20]
    310e:	601a      	str	r2, [r3, #0]
                    temp_RT->xNumOfEvent = 1;
    3110:	697b      	ldr	r3, [r7, #20]
    3112:	2201      	movs	r2, #1
    3114:	605a      	str	r2, [r3, #4]
                    temp_RT->AllArrive = 1;
    3116:	697b      	ldr	r3, [r7, #20]
    3118:	2201      	movs	r2, #1
    311a:	609a      	str	r2, [r3, #8]
                 
                    temp_pxEventListItem = (xListItem *) pxIterator;
    311c:	6a3b      	ldr	r3, [r7, #32]
    311e:	607b      	str	r3, [r7, #4]
                    pxIterator = pxIterator->pxNext;
    3120:	6a3b      	ldr	r3, [r7, #32]
    3122:	685b      	ldr	r3, [r3, #4]
    3124:	623b      	str	r3, [r7, #32]
                    vListRemove(temp_pxEventListItem);
    3126:	6878      	ldr	r0, [r7, #4]
    3128:	f001 f86e 	bl	4208 <vListRemove>

    if( (xLen = listCURRENT_LIST_LENGTH( &xEventExecutablePool )) > 0 )
    {
        clearEventReduceTrack();
        pxIterator = (xListItem *) xEventExecutablePool.xListEnd.pxNext;
        for( i = 0; i < xLen; i++)
    312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    312e:	3301      	adds	r3, #1
    3130:	627b      	str	r3, [r7, #36]	; 0x24
    3132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3134:	69fb      	ldr	r3, [r7, #28]
    3136:	429a      	cmp	r2, r3
    3138:	f6ff af54 	blt.w	2fe4 <vEventGenericReduce+0x30>
                    vListRemove(temp_pxEventListItem);
                }

            }
        } // end for
        for(i=0; i<NUMBEROFSERVANT; ++i)
    313c:	2300      	movs	r3, #0
    313e:	627b      	str	r3, [r7, #36]	; 0x24
    3140:	e02c      	b.n	319c <vEventGenericReduce+0x1e8>
        {
            if(xEventReduceTrack[i].AllArrive)
    3142:	f240 6260 	movw	r2, #1632	; 0x660
    3146:	f2c2 0200 	movt	r2, #8192	; 0x2000
    314a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    314c:	460b      	mov	r3, r1
    314e:	005b      	lsls	r3, r3, #1
    3150:	440b      	add	r3, r1
    3152:	009b      	lsls	r3, r3, #2
    3154:	4413      	add	r3, r2
    3156:	3308      	adds	r3, #8
    3158:	681b      	ldr	r3, [r3, #0]
    315a:	2b00      	cmp	r3, #0
    315c:	d01b      	beq.n	3196 <vEventGenericReduce+0x1e2>
            {
                prvEventListGenericInsert(&((eveECB *)xEventReduceTrack[i].pxEvent)->xEventListItem);
    315e:	f240 6260 	movw	r2, #1632	; 0x660
    3162:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3166:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3168:	460b      	mov	r3, r1
    316a:	005b      	lsls	r3, r3, #1
    316c:	440b      	add	r3, r1
    316e:	009b      	lsls	r3, r3, #2
    3170:	4413      	add	r3, r2
    3172:	681b      	ldr	r3, [r3, #0]
    3174:	3320      	adds	r3, #32
    3176:	4618      	mov	r0, r3
    3178:	f7ff fd6e 	bl	2c58 <prvEventListGenericInsert>
                xContexts[i].xInBoolCount = 0;  // important recovery !!!!!
    317c:	f640 120c 	movw	r2, #2316	; 0x90c
    3180:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3184:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3186:	460b      	mov	r3, r1
    3188:	00db      	lsls	r3, r3, #3
    318a:	1a5b      	subs	r3, r3, r1
    318c:	00db      	lsls	r3, r3, #3
    318e:	4413      	add	r3, r2
    3190:	3334      	adds	r3, #52	; 0x34
    3192:	2200      	movs	r2, #0
    3194:	601a      	str	r2, [r3, #0]
                    vListRemove(temp_pxEventListItem);
                }

            }
        } // end for
        for(i=0; i<NUMBEROFSERVANT; ++i)
    3196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3198:	3301      	adds	r3, #1
    319a:	627b      	str	r3, [r7, #36]	; 0x24
    319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    319e:	2b2e      	cmp	r3, #46	; 0x2e
    31a0:	ddcf      	ble.n	3142 <vEventGenericReduce+0x18e>
                prvEventListGenericInsert(&((eveECB *)xEventReduceTrack[i].pxEvent)->xEventListItem);
                xContexts[i].xInBoolCount = 0;  // important recovery !!!!!
            }
        } // end for
    } // end if
}
    31a2:	3728      	adds	r7, #40	; 0x28
    31a4:	46bd      	mov	sp, r7
    31a6:	bd80      	pop	{r7, pc}

000031a8 <pOverLap>:


static portBASE_TYPE pOverLap( xListItem * pxEventListItem)
{
    31a8:	b480      	push	{r7}
    31aa:	b087      	sub	sp, #28
    31ac:	af00      	add	r7, sp, #0
    31ae:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent = (eveECB *)pxEventListItem->pvOwner;
    31b0:	687b      	ldr	r3, [r7, #4]
    31b2:	68db      	ldr	r3, [r3, #12]
    31b4:	617b      	str	r3, [r7, #20]
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    31b6:	697b      	ldr	r3, [r7, #20]
    31b8:	685b      	ldr	r3, [r3, #4]
    31ba:	613b      	str	r3, [r7, #16]
    portTickType start = pxEvent->xTag.xTimestamp;
    31bc:	697b      	ldr	r3, [r7, #20]
    31be:	68db      	ldr	r3, [r3, #12]
    31c0:	60fb      	str	r3, [r7, #12]
    portTickType end   = start + xContexts[pxDestination].xLet;
    31c2:	f640 120c 	movw	r2, #2316	; 0x90c
    31c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    31ca:	6939      	ldr	r1, [r7, #16]
    31cc:	460b      	mov	r3, r1
    31ce:	00db      	lsls	r3, r3, #3
    31d0:	1a5b      	subs	r3, r3, r1
    31d2:	00db      	lsls	r3, r3, #3
    31d4:	4413      	add	r3, r2
    31d6:	3324      	adds	r3, #36	; 0x24
    31d8:	681a      	ldr	r2, [r3, #0]
    31da:	68fb      	ldr	r3, [r7, #12]
    31dc:	4413      	add	r3, r2
    31de:	60bb      	str	r3, [r7, #8]

    // different execution time overlaped
    if( start % GCDPeriod < INPUT || start % GCDPeriod > (GCDPeriod - OUTPUT) || 
    31e0:	f240 6358 	movw	r3, #1624	; 0x658
    31e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31e8:	681a      	ldr	r2, [r3, #0]
    31ea:	68fb      	ldr	r3, [r7, #12]
    31ec:	fbb3 f1f2 	udiv	r1, r3, r2
    31f0:	fb02 f201 	mul.w	r2, r2, r1
    31f4:	1a9b      	subs	r3, r3, r2
    31f6:	2b02      	cmp	r3, #2
    31f8:	d932      	bls.n	3260 <pOverLap+0xb8>
    31fa:	f240 6358 	movw	r3, #1624	; 0x658
    31fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3202:	681a      	ldr	r2, [r3, #0]
    3204:	68fb      	ldr	r3, [r7, #12]
    3206:	fbb3 f1f2 	udiv	r1, r3, r2
    320a:	fb02 f201 	mul.w	r2, r2, r1
    320e:	1a9a      	subs	r2, r3, r2
    3210:	f240 6358 	movw	r3, #1624	; 0x658
    3214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3218:	681b      	ldr	r3, [r3, #0]
    321a:	3b03      	subs	r3, #3
    321c:	429a      	cmp	r2, r3
    321e:	d81f      	bhi.n	3260 <pOverLap+0xb8>
            end % GCDPeriod < INPUT || end % GCDPeriod > (GCDPeriod - OUTPUT))
    3220:	f240 6358 	movw	r3, #1624	; 0x658
    3224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3228:	681a      	ldr	r2, [r3, #0]
    322a:	68bb      	ldr	r3, [r7, #8]
    322c:	fbb3 f1f2 	udiv	r1, r3, r2
    3230:	fb02 f201 	mul.w	r2, r2, r1
    3234:	1a9b      	subs	r3, r3, r2
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    portTickType start = pxEvent->xTag.xTimestamp;
    portTickType end   = start + xContexts[pxDestination].xLet;

    // different execution time overlaped
    if( start % GCDPeriod < INPUT || start % GCDPeriod > (GCDPeriod - OUTPUT) || 
    3236:	2b02      	cmp	r3, #2
    3238:	d912      	bls.n	3260 <pOverLap+0xb8>
            end % GCDPeriod < INPUT || end % GCDPeriod > (GCDPeriod - OUTPUT))
    323a:	f240 6358 	movw	r3, #1624	; 0x658
    323e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3242:	681a      	ldr	r2, [r3, #0]
    3244:	68bb      	ldr	r3, [r7, #8]
    3246:	fbb3 f1f2 	udiv	r1, r3, r2
    324a:	fb02 f201 	mul.w	r2, r2, r1
    324e:	1a9a      	subs	r2, r3, r2
    3250:	f240 6358 	movw	r3, #1624	; 0x658
    3254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3258:	681b      	ldr	r3, [r3, #0]
    325a:	3b03      	subs	r3, #3
    325c:	429a      	cmp	r2, r3
    325e:	d901      	bls.n	3264 <pOverLap+0xbc>
    {
        return 1;
    3260:	2301      	movs	r3, #1
    3262:	e000      	b.n	3266 <pOverLap+0xbe>
    }
    return 0;
    3264:	2300      	movs	r3, #0
}
    3266:	4618      	mov	r0, r3
    3268:	371c      	adds	r7, #28
    326a:	46bd      	mov	sp, r7
    326c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3270:	4770      	bx	lr
    3272:	bf00      	nop

00003274 <vSetTimestamp>:

static void vSetTimestamp( xListItem * pxEventListItem)
{
    3274:	b580      	push	{r7, lr}
    3276:	b086      	sub	sp, #24
    3278:	af00      	add	r7, sp, #0
    327a:	6078      	str	r0, [r7, #4]
    portBASE_TYPE i, flag;
    portTickType nextComputingStart;
    eveECB *pxEvent;  
    
    pxEvent = (eveECB *) pxEventListItem->pvOwner;
    327c:	687b      	ldr	r3, [r7, #4]
    327e:	68db      	ldr	r3, [r3, #12]
    3280:	617b      	str	r3, [r7, #20]
    pxEvent->xTag.xTimestamp = xFutureModelTime;// update model time
    3282:	f240 635c 	movw	r3, #1628	; 0x65c
    3286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    328a:	681a      	ldr	r2, [r3, #0]
    328c:	697b      	ldr	r3, [r7, #20]
    328e:	60da      	str	r2, [r3, #12]
    nextComputingStart = (xFutureModelTime/GCDPeriod) * GCDPeriod + GCDPeriod + INPUT;
    3290:	f240 635c 	movw	r3, #1628	; 0x65c
    3294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3298:	681a      	ldr	r2, [r3, #0]
    329a:	f240 6358 	movw	r3, #1624	; 0x658
    329e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32a2:	681b      	ldr	r3, [r3, #0]
    32a4:	fbb2 f3f3 	udiv	r3, r2, r3
    32a8:	1c5a      	adds	r2, r3, #1
    32aa:	f240 6358 	movw	r3, #1624	; 0x658
    32ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32b2:	681b      	ldr	r3, [r3, #0]
    32b4:	fb03 f302 	mul.w	r3, r3, r2
    32b8:	3303      	adds	r3, #3
    32ba:	613b      	str	r3, [r7, #16]
    flag = pOverLap(pxEventListItem);
    32bc:	6878      	ldr	r0, [r7, #4]
    32be:	f7ff ff73 	bl	31a8 <pOverLap>
    32c2:	60f8      	str	r0, [r7, #12]

    if( !flag  && xFutureModelTime < nextComputingStart) // not overlaped
    32c4:	68fb      	ldr	r3, [r7, #12]
    32c6:	2b00      	cmp	r3, #0
    32c8:	d112      	bne.n	32f0 <vSetTimestamp+0x7c>
    32ca:	f240 635c 	movw	r3, #1628	; 0x65c
    32ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32d2:	681a      	ldr	r2, [r3, #0]
    32d4:	693b      	ldr	r3, [r7, #16]
    32d6:	429a      	cmp	r2, r3
    32d8:	d20a      	bcs.n	32f0 <vSetTimestamp+0x7c>
    {
        vListRemove( pxEventListItem); 
    32da:	6878      	ldr	r0, [r7, #4]
    32dc:	f000 ff94 	bl	4208 <vListRemove>
        vListInsertEnd(&xEventReadyList, pxEventListItem);
    32e0:	f640 00f8 	movw	r0, #2296	; 0x8f8
    32e4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    32e8:	6879      	ldr	r1, [r7, #4]
    32ea:	f000 ff2d 	bl	4148 <vListInsertEnd>
    32ee:	e02c      	b.n	334a <vSetTimestamp+0xd6>
    }
    else if ( flag && xFutureModelTime < nextComputingStart ) 
    32f0:	68fb      	ldr	r3, [r7, #12]
    32f2:	2b00      	cmp	r3, #0
    32f4:	d01f      	beq.n	3336 <vSetTimestamp+0xc2>
    32f6:	f240 635c 	movw	r3, #1628	; 0x65c
    32fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32fe:	681a      	ldr	r2, [r3, #0]
    3300:	693b      	ldr	r3, [r7, #16]
    3302:	429a      	cmp	r2, r3
    3304:	d217      	bcs.n	3336 <vSetTimestamp+0xc2>
    {
        // set the future model time to start time of next LET
        xFutureModelTime = nextComputingStart; 
    3306:	f240 635c 	movw	r3, #1628	; 0x65c
    330a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    330e:	693a      	ldr	r2, [r7, #16]
    3310:	601a      	str	r2, [r3, #0]
        pxEvent->xTag.xTimestamp = xFutureModelTime;
    3312:	f240 635c 	movw	r3, #1628	; 0x65c
    3316:	f2c2 0300 	movt	r3, #8192	; 0x2000
    331a:	681a      	ldr	r2, [r3, #0]
    331c:	697b      	ldr	r3, [r7, #20]
    331e:	60da      	str	r2, [r3, #12]

        vListRemove( pxEventListItem); 
    3320:	6878      	ldr	r0, [r7, #4]
    3322:	f000 ff71 	bl	4208 <vListRemove>
        vListInsertEnd(&xEventNonExecutablePool, pxEventListItem);
    3326:	f640 00a8 	movw	r0, #2216	; 0x8a8
    332a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    332e:	6879      	ldr	r1, [r7, #4]
    3330:	f000 ff0a 	bl	4148 <vListInsertEnd>
    3334:	e009      	b.n	334a <vSetTimestamp+0xd6>
    }
    else
    {
        vListRemove( pxEventListItem); 
    3336:	6878      	ldr	r0, [r7, #4]
    3338:	f000 ff66 	bl	4208 <vListRemove>
        vListInsertEnd(&xEventNonExecutablePool, pxEventListItem);
    333c:	f640 00a8 	movw	r0, #2216	; 0x8a8
    3340:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3344:	6879      	ldr	r1, [r7, #4]
    3346:	f000 feff 	bl	4148 <vListInsertEnd>
    }
    xFutureModelTime += xContexts[pxEvent->pxDestination].xLet;  
    334a:	697b      	ldr	r3, [r7, #20]
    334c:	6859      	ldr	r1, [r3, #4]
    334e:	f640 120c 	movw	r2, #2316	; 0x90c
    3352:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3356:	460b      	mov	r3, r1
    3358:	00db      	lsls	r3, r3, #3
    335a:	1a5b      	subs	r3, r3, r1
    335c:	00db      	lsls	r3, r3, #3
    335e:	4413      	add	r3, r2
    3360:	3324      	adds	r3, #36	; 0x24
    3362:	681a      	ldr	r2, [r3, #0]
    3364:	f240 635c 	movw	r3, #1628	; 0x65c
    3368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    336c:	681b      	ldr	r3, [r3, #0]
    336e:	441a      	add	r2, r3
    3370:	f240 635c 	movw	r3, #1628	; 0x65c
    3374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3378:	601a      	str	r2, [r3, #0]
}
    337a:	3718      	adds	r7, #24
    337c:	46bd      	mov	sp, r7
    337e:	bd80      	pop	{r7, pc}

00003380 <pEqualxDeadline>:

static portBASE_TYPE pEqualxDeadline(struct tag * xTag1, struct tag * xTag2)
{
    3380:	b480      	push	{r7}
    3382:	b083      	sub	sp, #12
    3384:	af00      	add	r7, sp, #0
    3386:	6078      	str	r0, [r7, #4]
    3388:	6039      	str	r1, [r7, #0]
    return (xTag1->xDeadline == xTag2->xDeadline);
    338a:	687b      	ldr	r3, [r7, #4]
    338c:	681a      	ldr	r2, [r3, #0]
    338e:	683b      	ldr	r3, [r7, #0]
    3390:	681b      	ldr	r3, [r3, #0]
    3392:	429a      	cmp	r2, r3
    3394:	bf14      	ite	ne
    3396:	2300      	movne	r3, #0
    3398:	2301      	moveq	r3, #1
    339a:	b2db      	uxtb	r3, r3
}
    339c:	4618      	mov	r0, r3
    339e:	370c      	adds	r7, #12
    33a0:	46bd      	mov	sp, r7
    33a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    33a6:	4770      	bx	lr

000033a8 <xEventGenericSerialize>:

// update the timestamp of event in xEventExecutableList in terms of xFutureModelTime
portBASE_TYPE xEventGenericSerialize()
{
    33a8:	b580      	push	{r7, lr}
    33aa:	b084      	sub	sp, #16
    33ac:	af00      	add	r7, sp, #0
    xListItem * flag_pxEventListItem;
    struct tag * origin_tag;
    portBASE_TYPE count = 1;
    33ae:	2301      	movs	r3, #1
    33b0:	60bb      	str	r3, [r7, #8]

    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 0 )
    33b2:	f640 03e4 	movw	r3, #2276	; 0x8e4
    33b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33ba:	681b      	ldr	r3, [r3, #0]
    33bc:	2b00      	cmp	r3, #0
    33be:	d00a      	beq.n	33d6 <xEventGenericSerialize+0x2e>
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    33c0:	f640 03e4 	movw	r3, #2276	; 0x8e4
    33c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33c8:	68db      	ldr	r3, [r3, #12]
    33ca:	68db      	ldr	r3, [r3, #12]
    33cc:	4618      	mov	r0, r3
    33ce:	f7ff faf9 	bl	29c4 <xEventGetxTag>
    33d2:	60f8      	str	r0, [r7, #12]
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 0 )
    33d4:	e035      	b.n	3442 <xEventGenericSerialize+0x9a>
    33d6:	e034      	b.n	3442 <xEventGenericSerialize+0x9a>
    {
        flag_pxEventListItem = (xListItem *) xEventExecutableList.xListEnd.pxNext;
    33d8:	f640 03e4 	movw	r3, #2276	; 0x8e4
    33dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33e0:	68db      	ldr	r3, [r3, #12]
    33e2:	607b      	str	r3, [r7, #4]
        // only the timestamp of c_servant need updating
        // only remove events that have same xDeadline with the first event in xEventExecutableList to xEventReadyList

        if( xContexts[xEventGetpxDestination(flag_pxEventListItem->pvOwner)].xType == 2 )
    33e4:	687b      	ldr	r3, [r7, #4]
    33e6:	68db      	ldr	r3, [r3, #12]
    33e8:	4618      	mov	r0, r3
    33ea:	f7ff fadf 	bl	29ac <xEventGetpxDestination>
    33ee:	4601      	mov	r1, r0
    33f0:	f640 120c 	movw	r2, #2316	; 0x90c
    33f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    33f8:	460b      	mov	r3, r1
    33fa:	00db      	lsls	r3, r3, #3
    33fc:	1a5b      	subs	r3, r3, r1
    33fe:	00db      	lsls	r3, r3, #3
    3400:	4413      	add	r3, r2
    3402:	3304      	adds	r3, #4
    3404:	681b      	ldr	r3, [r3, #0]
    3406:	2b02      	cmp	r3, #2
    3408:	d111      	bne.n	342e <xEventGenericSerialize+0x86>
        {
            if( pEqualxDeadline( xEventGetxTag( flag_pxEventListItem->pvOwner ), origin_tag ))
    340a:	687b      	ldr	r3, [r7, #4]
    340c:	68db      	ldr	r3, [r3, #12]
    340e:	4618      	mov	r0, r3
    3410:	f7ff fad8 	bl	29c4 <xEventGetxTag>
    3414:	4603      	mov	r3, r0
    3416:	4618      	mov	r0, r3
    3418:	68f9      	ldr	r1, [r7, #12]
    341a:	f7ff ffb1 	bl	3380 <pEqualxDeadline>
    341e:	4603      	mov	r3, r0
    3420:	2b00      	cmp	r3, #0
    3422:	d003      	beq.n	342c <xEventGenericSerialize+0x84>
            {
                // update the timestamp of event
                // if overlaped, then remove the event to xEventNonExecutablePool
                // else, remove the event to xEvenReadyList
                vSetTimestamp( flag_pxEventListItem);
    3424:	6878      	ldr	r0, [r7, #4]
    3426:	f7ff ff25 	bl	3274 <vSetTimestamp>
    342a:	e00a      	b.n	3442 <xEventGenericSerialize+0x9a>
            }
            else
            {
                break;
    342c:	e010      	b.n	3450 <xEventGenericSerialize+0xa8>
            }
        }
        else
        {
            vListRemove( flag_pxEventListItem );
    342e:	6878      	ldr	r0, [r7, #4]
    3430:	f000 feea 	bl	4208 <vListRemove>
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
    3434:	f640 00f8 	movw	r0, #2296	; 0x8f8
    3438:	f2c2 0000 	movt	r0, #8192	; 0x2000
    343c:	6879      	ldr	r1, [r7, #4]
    343e:	f000 fe83 	bl	4148 <vListInsertEnd>
    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 0 )
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 0 )
    3442:	f640 03e4 	movw	r3, #2276	; 0x8e4
    3446:	f2c2 0300 	movt	r3, #8192	; 0x2000
    344a:	681b      	ldr	r3, [r3, #0]
    344c:	2b00      	cmp	r3, #0
    344e:	d1c3      	bne.n	33d8 <xEventGenericSerialize+0x30>
            vListRemove( flag_pxEventListItem );
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
        }
    }

    if( listCURRENT_LIST_LENGTH( &xEventReadyList ) > 0 )
    3450:	f640 03f8 	movw	r3, #2296	; 0x8f8
    3454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3458:	681b      	ldr	r3, [r3, #0]
    345a:	2b00      	cmp	r3, #0
    345c:	d00a      	beq.n	3474 <xEventGenericSerialize+0xcc>
    {
        return xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); //  the first one repsenting the type of events
    345e:	f640 03f8 	movw	r3, #2296	; 0x8f8
    3462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3466:	68db      	ldr	r3, [r3, #12]
    3468:	68db      	ldr	r3, [r3, #12]
    346a:	4618      	mov	r0, r3
    346c:	f7ff fa9e 	bl	29ac <xEventGetpxDestination>
    3470:	4603      	mov	r3, r0
    3472:	e001      	b.n	3478 <xEventGenericSerialize+0xd0>
    }
    return -1; // no event avaliable
    3474:	f04f 33ff 	mov.w	r3, #4294967295
}
    3478:	4618      	mov	r0, r3
    347a:	3710      	adds	r7, #16
    347c:	46bd      	mov	sp, r7
    347e:	bd80      	pop	{r7, pc}

00003480 <vEventGenericSend>:

void vEventGenericSend( xEventHandle pxEvent )
{
    3480:	b580      	push	{r7, lr}
    3482:	b082      	sub	sp, #8
    3484:	af00      	add	r7, sp, #0
    3486:	6078      	str	r0, [r7, #4]
    vListInsertEnd(&xEventNonExecutablePool, (xListItem *)&((eveECB *)pxEvent)->xEventListItem);
    3488:	687b      	ldr	r3, [r7, #4]
    348a:	3320      	adds	r3, #32
    348c:	f640 00a8 	movw	r0, #2216	; 0x8a8
    3490:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3494:	4619      	mov	r1, r3
    3496:	f000 fe57 	bl	4148 <vListInsertEnd>
}
    349a:	3708      	adds	r7, #8
    349c:	46bd      	mov	sp, r7
    349e:	bd80      	pop	{r7, pc}

000034a0 <pxEventGenericReceive>:

xEventHandle pxEventGenericReceive()
{
    34a0:	b580      	push	{r7, lr}
    34a2:	b082      	sub	sp, #8
    34a4:	af00      	add	r7, sp, #0
    // xEventReadyList must not be null, which is ensured by servant
    xListItem * pxEventList;

    taskENTER_CRITICAL();
    34a6:	f002 fbfb 	bl	5ca0 <vPortEnterCritical>
    pxEventList= (xListItem *)xEventReadyList.xListEnd.pxNext;
    34aa:	f640 03f8 	movw	r3, #2296	; 0x8f8
    34ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34b2:	68db      	ldr	r3, [r3, #12]
    34b4:	607b      	str	r3, [r7, #4]
    vListRemove(pxEventList);
    34b6:	6878      	ldr	r0, [r7, #4]
    34b8:	f000 fea6 	bl	4208 <vListRemove>
    vListInsertEnd(&xEventNonExecutablePool, pxEventList);  // reuse event, which will be update by servant 
    34bc:	f640 00a8 	movw	r0, #2216	; 0x8a8
    34c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    34c4:	6879      	ldr	r1, [r7, #4]
    34c6:	f000 fe3f 	bl	4148 <vListInsertEnd>
    taskEXIT_CRITICAL();
    34ca:	f002 fbff 	bl	5ccc <vPortExitCritical>

    return (xEventHandle) pxEventList->pvOwner;
    34ce:	687b      	ldr	r3, [r7, #4]
    34d0:	68db      	ldr	r3, [r3, #12]
}
    34d2:	4618      	mov	r0, r3
    34d4:	3708      	adds	r7, #8
    34d6:	46bd      	mov	sp, r7
    34d8:	bd80      	pop	{r7, pc}
    34da:	bf00      	nop

000034dc <vEventGenericUpdate>:

void vEventGenericUpdate( xEventHandle xEvent, portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData * xData)
{
    34dc:	b480      	push	{r7}
    34de:	b087      	sub	sp, #28
    34e0:	af00      	add	r7, sp, #0
    34e2:	60f8      	str	r0, [r7, #12]
    34e4:	60b9      	str	r1, [r7, #8]
    34e6:	607a      	str	r2, [r7, #4]
    34e8:	603b      	str	r3, [r7, #0]
    eveECB * pxEvent = (eveECB *)xEvent;
    34ea:	68fb      	ldr	r3, [r7, #12]
    34ec:	617b      	str	r3, [r7, #20]
    pxEvent->pxSource = pxSource;
    34ee:	697b      	ldr	r3, [r7, #20]
    34f0:	68ba      	ldr	r2, [r7, #8]
    34f2:	601a      	str	r2, [r3, #0]
    pxEvent->xTag.xDeadline = xDeadline;
    34f4:	697b      	ldr	r3, [r7, #20]
    34f6:	687a      	ldr	r2, [r7, #4]
    34f8:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp; 
    34fa:	697b      	ldr	r3, [r7, #20]
    34fc:	683a      	ldr	r2, [r7, #0]
    34fe:	60da      	str	r2, [r3, #12]
    pxEvent->xTag.xMicroStep = 0;
    3500:	697b      	ldr	r3, [r7, #20]
    3502:	2200      	movs	r2, #0
    3504:	615a      	str	r2, [r3, #20]
    pxEvent->xData = *xData;
    3506:	697b      	ldr	r3, [r7, #20]
    3508:	6a3a      	ldr	r2, [r7, #32]
    350a:	3318      	adds	r3, #24
    350c:	e892 0003 	ldmia.w	r2, {r0, r1}
    3510:	e883 0003 	stmia.w	r3, {r0, r1}
}
    3514:	371c      	adds	r7, #28
    3516:	46bd      	mov	sp, r7
    3518:	f85d 7b04 	ldr.w	r7, [sp], #4
    351c:	4770      	bx	lr
    351e:	bf00      	nop

00003520 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    3520:	b580      	push	{r7, lr}
    3522:	b084      	sub	sp, #16
    3524:	af00      	add	r7, sp, #0
    3526:	6078      	str	r0, [r7, #4]
    xListItem * pxEventItem;
    taskENTER_CRITICAL();
    3528:	f002 fbba 	bl	5ca0 <vPortEnterCritical>

    pxEventItem = &((eveECB *)xEvent)->xEventListItem;
    352c:	687b      	ldr	r3, [r7, #4]
    352e:	3320      	adds	r3, #32
    3530:	60fb      	str	r3, [r7, #12]
    vListRemove (pxEventItem);
    3532:	68f8      	ldr	r0, [r7, #12]
    3534:	f000 fe68 	bl	4208 <vListRemove>
    vListInsertEnd( &xEventIdleList, pxEventItem );
    3538:	f640 0094 	movw	r0, #2196	; 0x894
    353c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3540:	68f9      	ldr	r1, [r7, #12]
    3542:	f000 fe01 	bl	4148 <vListInsertEnd>

    taskEXIT_CRITICAL();
    3546:	f002 fbc1 	bl	5ccc <vPortExitCritical>
}
    354a:	3710      	adds	r7, #16
    354c:	46bd      	mov	sp, r7
    354e:	bd80      	pop	{r7, pc}

00003550 <vSemaphoreInitialise>:

extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    3550:	b580      	push	{r7, lr}
    3552:	b082      	sub	sp, #8
    3554:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    3556:	2300      	movs	r3, #0
    3558:	607b      	str	r3, [r7, #4]
    355a:	e033      	b.n	35c4 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    355c:	2001      	movs	r0, #1
    355e:	2100      	movs	r1, #0
    3560:	2203      	movs	r2, #3
    3562:	f000 fec7 	bl	42f4 <xQueueGenericCreate>
    3566:	4601      	mov	r1, r0
    3568:	f241 3354 	movw	r3, #4948	; 0x1354
    356c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3570:	687a      	ldr	r2, [r7, #4]
    3572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    3576:	f241 3354 	movw	r3, #4948	; 0x1354
    357a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    357e:	687a      	ldr	r2, [r7, #4]
    3580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3584:	2b00      	cmp	r3, #0
    3586:	d00c      	beq.n	35a2 <vSemaphoreInitialise+0x52>
    3588:	f241 3354 	movw	r3, #4948	; 0x1354
    358c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3590:	687a      	ldr	r2, [r7, #4]
    3592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3596:	4618      	mov	r0, r3
    3598:	2100      	movs	r1, #0
    359a:	2200      	movs	r2, #0
    359c:	2300      	movs	r3, #0
    359e:	f000 ff37 	bl	4410 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    35a2:	f241 3354 	movw	r3, #4948	; 0x1354
    35a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35aa:	687a      	ldr	r2, [r7, #4]
    35ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35b0:	4618      	mov	r0, r3
    35b2:	2100      	movs	r1, #0
    35b4:	f04f 32ff 	mov.w	r2, #4294967295
    35b8:	2300      	movs	r3, #0
    35ba:	f000 ffef 	bl	459c <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    35be:	687b      	ldr	r3, [r7, #4]
    35c0:	3301      	adds	r3, #1
    35c2:	607b      	str	r3, [r7, #4]
    35c4:	687b      	ldr	r3, [r7, #4]
    35c6:	2b03      	cmp	r3, #3
    35c8:	ddc8      	ble.n	355c <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    35ca:	3708      	adds	r7, #8
    35cc:	46bd      	mov	sp, r7
    35ce:	bd80      	pop	{r7, pc}

000035d0 <vContextInit>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vContextInit()
{
    35d0:	b480      	push	{r7}
    35d2:	b085      	sub	sp, #20
    35d4:	af00      	add	r7, sp, #0
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    35d6:	2300      	movs	r3, #0
    35d8:	60fb      	str	r3, [r7, #12]
    35da:	e0a1      	b.n	3720 <vContextInit+0x150>
    {
        xContexts[i].xMyFlag = i;
    35dc:	f640 120c 	movw	r2, #2316	; 0x90c
    35e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35e4:	68f9      	ldr	r1, [r7, #12]
    35e6:	460b      	mov	r3, r1
    35e8:	00db      	lsls	r3, r3, #3
    35ea:	1a5b      	subs	r3, r3, r1
    35ec:	00db      	lsls	r3, r3, #3
    35ee:	4413      	add	r3, r2
    35f0:	68fa      	ldr	r2, [r7, #12]
    35f2:	601a      	str	r2, [r3, #0]
        xContexts[i].xType = 2;
    35f4:	f640 120c 	movw	r2, #2316	; 0x90c
    35f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35fc:	68f9      	ldr	r1, [r7, #12]
    35fe:	460b      	mov	r3, r1
    3600:	00db      	lsls	r3, r3, #3
    3602:	1a5b      	subs	r3, r3, r1
    3604:	00db      	lsls	r3, r3, #3
    3606:	4413      	add	r3, r2
    3608:	3304      	adds	r3, #4
    360a:	2202      	movs	r2, #2
    360c:	601a      	str	r2, [r3, #0]
        xContexts[i].xCount = 1; // the first period of task is used to init system
    360e:	f640 120c 	movw	r2, #2316	; 0x90c
    3612:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3616:	68f9      	ldr	r1, [r7, #12]
    3618:	460b      	mov	r3, r1
    361a:	00db      	lsls	r3, r3, #3
    361c:	1a5b      	subs	r3, r3, r1
    361e:	00db      	lsls	r3, r3, #3
    3620:	4413      	add	r3, r2
    3622:	3308      	adds	r3, #8
    3624:	2201      	movs	r2, #1
    3626:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfIn = 0;
    3628:	f640 120c 	movw	r2, #2316	; 0x90c
    362c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3630:	68f9      	ldr	r1, [r7, #12]
    3632:	460b      	mov	r3, r1
    3634:	00db      	lsls	r3, r3, #3
    3636:	1a5b      	subs	r3, r3, r1
    3638:	00db      	lsls	r3, r3, #3
    363a:	4413      	add	r3, r2
    363c:	330c      	adds	r3, #12
    363e:	2200      	movs	r2, #0
    3640:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfOut = 0;
    3642:	f640 120c 	movw	r2, #2316	; 0x90c
    3646:	f2c2 0200 	movt	r2, #8192	; 0x2000
    364a:	68f9      	ldr	r1, [r7, #12]
    364c:	460b      	mov	r3, r1
    364e:	00db      	lsls	r3, r3, #3
    3650:	1a5b      	subs	r3, r3, r1
    3652:	00db      	lsls	r3, r3, #3
    3654:	4413      	add	r3, r2
    3656:	3310      	adds	r3, #16
    3658:	2200      	movs	r2, #0
    365a:	601a      	str	r2, [r3, #0]
        xContexts[i].xLet = xLetOfServant[i];
    365c:	f240 03c4 	movw	r3, #196	; 0xc4
    3660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3664:	68fa      	ldr	r2, [r7, #12]
    3666:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    366a:	f640 120c 	movw	r2, #2316	; 0x90c
    366e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3672:	68f9      	ldr	r1, [r7, #12]
    3674:	460b      	mov	r3, r1
    3676:	00db      	lsls	r3, r3, #3
    3678:	1a5b      	subs	r3, r3, r1
    367a:	00db      	lsls	r3, r3, #3
    367c:	4413      	add	r3, r2
    367e:	3324      	adds	r3, #36	; 0x24
    3680:	6018      	str	r0, [r3, #0]
        xContexts[i].xFp = xServantTable[i];
    3682:	f240 4374 	movw	r3, #1140	; 0x474
    3686:	f2c2 0300 	movt	r3, #8192	; 0x2000
    368a:	68fa      	ldr	r2, [r7, #12]
    368c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3690:	f640 120c 	movw	r2, #2316	; 0x90c
    3694:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3698:	68f9      	ldr	r1, [r7, #12]
    369a:	460b      	mov	r3, r1
    369c:	00db      	lsls	r3, r3, #3
    369e:	1a5b      	subs	r3, r3, r1
    36a0:	00db      	lsls	r3, r3, #3
    36a2:	4413      	add	r3, r2
    36a4:	3328      	adds	r3, #40	; 0x28
    36a6:	6018      	str	r0, [r3, #0]
        xContexts[i].xTaskId = xTaskOfServant[i];
    36a8:	f240 1380 	movw	r3, #384	; 0x180
    36ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36b0:	68fa      	ldr	r2, [r7, #12]
    36b2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    36b6:	f640 120c 	movw	r2, #2316	; 0x90c
    36ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36be:	68f9      	ldr	r1, [r7, #12]
    36c0:	460b      	mov	r3, r1
    36c2:	00db      	lsls	r3, r3, #3
    36c4:	1a5b      	subs	r3, r3, r1
    36c6:	00db      	lsls	r3, r3, #3
    36c8:	4413      	add	r3, r2
    36ca:	3330      	adds	r3, #48	; 0x30
    36cc:	6018      	str	r0, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
    36ce:	f240 1380 	movw	r3, #384	; 0x180
    36d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36d6:	68fa      	ldr	r2, [r7, #12]
    36d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    36dc:	f240 0328 	movw	r3, #40	; 0x28
    36e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36e4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    36e8:	f640 120c 	movw	r2, #2316	; 0x90c
    36ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36f0:	68f9      	ldr	r1, [r7, #12]
    36f2:	460b      	mov	r3, r1
    36f4:	00db      	lsls	r3, r3, #3
    36f6:	1a5b      	subs	r3, r3, r1
    36f8:	00db      	lsls	r3, r3, #3
    36fa:	4413      	add	r3, r2
    36fc:	332c      	adds	r3, #44	; 0x2c
    36fe:	6018      	str	r0, [r3, #0]
        xContexts[i].xInBoolCount = 0;
    3700:	f640 120c 	movw	r2, #2316	; 0x90c
    3704:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3708:	68f9      	ldr	r1, [r7, #12]
    370a:	460b      	mov	r3, r1
    370c:	00db      	lsls	r3, r3, #3
    370e:	1a5b      	subs	r3, r3, r1
    3710:	00db      	lsls	r3, r3, #3
    3712:	4413      	add	r3, r2
    3714:	3334      	adds	r3, #52	; 0x34
    3716:	2200      	movs	r2, #0
    3718:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    371a:	68fb      	ldr	r3, [r7, #12]
    371c:	3301      	adds	r3, #1
    371e:	60fb      	str	r3, [r7, #12]
    3720:	68fb      	ldr	r3, [r7, #12]
    3722:	2b2e      	cmp	r3, #46	; 0x2e
    3724:	f77f af5a 	ble.w	35dc <vContextInit+0xc>
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    3728:	2300      	movs	r3, #0
    372a:	60fb      	str	r3, [r7, #12]
    372c:	e028      	b.n	3780 <vContextInit+0x1b0>
    {
        xContexts[xSensorOfTask[i]].xType = 1;
    372e:	f240 035c 	movw	r3, #92	; 0x5c
    3732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3736:	68fa      	ldr	r2, [r7, #12]
    3738:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    373c:	f640 120c 	movw	r2, #2316	; 0x90c
    3740:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3744:	460b      	mov	r3, r1
    3746:	00db      	lsls	r3, r3, #3
    3748:	1a5b      	subs	r3, r3, r1
    374a:	00db      	lsls	r3, r3, #3
    374c:	4413      	add	r3, r2
    374e:	3304      	adds	r3, #4
    3750:	2201      	movs	r2, #1
    3752:	601a      	str	r2, [r3, #0]
        xContexts[xActuatorOfTask[i]].xType = 3;
    3754:	f240 0390 	movw	r3, #144	; 0x90
    3758:	f2c2 0300 	movt	r3, #8192	; 0x2000
    375c:	68fa      	ldr	r2, [r7, #12]
    375e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3762:	f640 120c 	movw	r2, #2316	; 0x90c
    3766:	f2c2 0200 	movt	r2, #8192	; 0x2000
    376a:	460b      	mov	r3, r1
    376c:	00db      	lsls	r3, r3, #3
    376e:	1a5b      	subs	r3, r3, r1
    3770:	00db      	lsls	r3, r3, #3
    3772:	4413      	add	r3, r2
    3774:	3304      	adds	r3, #4
    3776:	2203      	movs	r2, #3
    3778:	601a      	str	r2, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    377a:	68fb      	ldr	r3, [r7, #12]
    377c:	3301      	adds	r3, #1
    377e:	60fb      	str	r3, [r7, #12]
    3780:	68fb      	ldr	r3, [r7, #12]
    3782:	2b0c      	cmp	r3, #12
    3784:	ddd3      	ble.n	372e <vContextInit+0x15e>
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3786:	2300      	movs	r3, #0
    3788:	60fb      	str	r3, [r7, #12]
    378a:	e084      	b.n	3896 <vContextInit+0x2c6>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    378c:	f240 223c 	movw	r2, #572	; 0x23c
    3790:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3794:	68f9      	ldr	r1, [r7, #12]
    3796:	460b      	mov	r3, r1
    3798:	005b      	lsls	r3, r3, #1
    379a:	440b      	add	r3, r1
    379c:	009b      	lsls	r3, r3, #2
    379e:	4413      	add	r3, r2
    37a0:	3304      	adds	r3, #4
    37a2:	681b      	ldr	r3, [r3, #0]
    37a4:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    37a6:	f240 223c 	movw	r2, #572	; 0x23c
    37aa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37ae:	68f9      	ldr	r1, [r7, #12]
    37b0:	460b      	mov	r3, r1
    37b2:	005b      	lsls	r3, r3, #1
    37b4:	440b      	add	r3, r1
    37b6:	009b      	lsls	r3, r3, #2
    37b8:	4413      	add	r3, r2
    37ba:	3308      	adds	r3, #8
    37bc:	681b      	ldr	r3, [r3, #0]
    37be:	607b      	str	r3, [r7, #4]

        xContexts[xSource].xOutFlag[xContexts[xSource].xNumOfOut] = xDest;
    37c0:	f640 120c 	movw	r2, #2316	; 0x90c
    37c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37c8:	68b9      	ldr	r1, [r7, #8]
    37ca:	460b      	mov	r3, r1
    37cc:	00db      	lsls	r3, r3, #3
    37ce:	1a5b      	subs	r3, r3, r1
    37d0:	00db      	lsls	r3, r3, #3
    37d2:	4413      	add	r3, r2
    37d4:	3310      	adds	r3, #16
    37d6:	6818      	ldr	r0, [r3, #0]
    37d8:	f640 120c 	movw	r2, #2316	; 0x90c
    37dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37e0:	68b9      	ldr	r1, [r7, #8]
    37e2:	460b      	mov	r3, r1
    37e4:	00db      	lsls	r3, r3, #3
    37e6:	1a5b      	subs	r3, r3, r1
    37e8:	005b      	lsls	r3, r3, #1
    37ea:	4403      	add	r3, r0
    37ec:	3306      	adds	r3, #6
    37ee:	009b      	lsls	r3, r3, #2
    37f0:	4413      	add	r3, r2
    37f2:	687a      	ldr	r2, [r7, #4]
    37f4:	605a      	str	r2, [r3, #4]
        xContexts[xSource].xNumOfOut ++;
    37f6:	f640 120c 	movw	r2, #2316	; 0x90c
    37fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37fe:	68b9      	ldr	r1, [r7, #8]
    3800:	460b      	mov	r3, r1
    3802:	00db      	lsls	r3, r3, #3
    3804:	1a5b      	subs	r3, r3, r1
    3806:	00db      	lsls	r3, r3, #3
    3808:	4413      	add	r3, r2
    380a:	3310      	adds	r3, #16
    380c:	681b      	ldr	r3, [r3, #0]
    380e:	1c58      	adds	r0, r3, #1
    3810:	f640 120c 	movw	r2, #2316	; 0x90c
    3814:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3818:	68b9      	ldr	r1, [r7, #8]
    381a:	460b      	mov	r3, r1
    381c:	00db      	lsls	r3, r3, #3
    381e:	1a5b      	subs	r3, r3, r1
    3820:	00db      	lsls	r3, r3, #3
    3822:	4413      	add	r3, r2
    3824:	3310      	adds	r3, #16
    3826:	6018      	str	r0, [r3, #0]

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
    3828:	f640 120c 	movw	r2, #2316	; 0x90c
    382c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3830:	6879      	ldr	r1, [r7, #4]
    3832:	460b      	mov	r3, r1
    3834:	00db      	lsls	r3, r3, #3
    3836:	1a5b      	subs	r3, r3, r1
    3838:	00db      	lsls	r3, r3, #3
    383a:	4413      	add	r3, r2
    383c:	330c      	adds	r3, #12
    383e:	6818      	ldr	r0, [r3, #0]
    3840:	f640 120c 	movw	r2, #2316	; 0x90c
    3844:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3848:	6879      	ldr	r1, [r7, #4]
    384a:	460b      	mov	r3, r1
    384c:	00db      	lsls	r3, r3, #3
    384e:	1a5b      	subs	r3, r3, r1
    3850:	005b      	lsls	r3, r3, #1
    3852:	4403      	add	r3, r0
    3854:	3304      	adds	r3, #4
    3856:	009b      	lsls	r3, r3, #2
    3858:	4413      	add	r3, r2
    385a:	68ba      	ldr	r2, [r7, #8]
    385c:	605a      	str	r2, [r3, #4]
        xContexts[xDest].xNumOfIn ++;
    385e:	f640 120c 	movw	r2, #2316	; 0x90c
    3862:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3866:	6879      	ldr	r1, [r7, #4]
    3868:	460b      	mov	r3, r1
    386a:	00db      	lsls	r3, r3, #3
    386c:	1a5b      	subs	r3, r3, r1
    386e:	00db      	lsls	r3, r3, #3
    3870:	4413      	add	r3, r2
    3872:	330c      	adds	r3, #12
    3874:	681b      	ldr	r3, [r3, #0]
    3876:	1c58      	adds	r0, r3, #1
    3878:	f640 120c 	movw	r2, #2316	; 0x90c
    387c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3880:	6879      	ldr	r1, [r7, #4]
    3882:	460b      	mov	r3, r1
    3884:	00db      	lsls	r3, r3, #3
    3886:	1a5b      	subs	r3, r3, r1
    3888:	00db      	lsls	r3, r3, #3
    388a:	4413      	add	r3, r2
    388c:	330c      	adds	r3, #12
    388e:	6018      	str	r0, [r3, #0]
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3890:	68fb      	ldr	r3, [r7, #12]
    3892:	3301      	adds	r3, #1
    3894:	60fb      	str	r3, [r7, #12]
    3896:	f240 233c 	movw	r3, #572	; 0x23c
    389a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    389e:	681a      	ldr	r2, [r3, #0]
    38a0:	68fb      	ldr	r3, [r7, #12]
    38a2:	429a      	cmp	r2, r3
    38a4:	f73f af72 	bgt.w	378c <vContextInit+0x1bc>
        xContexts[xSource].xNumOfOut ++;

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
        xContexts[xDest].xNumOfIn ++;
    }
}
    38a8:	3714      	adds	r7, #20
    38aa:	46bd      	mov	sp, r7
    38ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    38b0:	4770      	bx	lr
    38b2:	bf00      	nop

000038b4 <vSensor>:

void vSensor( void * pvParameter )
{
    38b4:	b580      	push	{r7, lr}
    38b6:	b08c      	sub	sp, #48	; 0x30
    38b8:	af02      	add	r7, sp, #8
    38ba:	6078      	str	r0, [r7, #4]
    struct tag * xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );
    38bc:	f241 3354 	movw	r3, #4948	; 0x1354
    38c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38c4:	685b      	ldr	r3, [r3, #4]
    38c6:	4618      	mov	r0, r3
    38c8:	2100      	movs	r1, #0
    38ca:	f04f 32ff 	mov.w	r2, #4294967295
    38ce:	2300      	movs	r3, #0
    38d0:	f000 fe64 	bl	459c <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    38d4:	e058      	b.n	3988 <vSensor+0xd4>
        {
            if(boolFlag == 0)
    38d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    38d8:	2b00      	cmp	r3, #0
    38da:	d100      	bne.n	38de <vSensor+0x2a>
                continue;
    38dc:	e054      	b.n	3988 <vSensor+0xd4>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    38de:	f7ff fddf 	bl	34a0 <pxEventGenericReceive>
    38e2:	6238      	str	r0, [r7, #32]
            xMyFlag = xEventGetpxDestination( pxEvent );
    38e4:	6a38      	ldr	r0, [r7, #32]
    38e6:	f7ff f861 	bl	29ac <xEventGetpxDestination>
    38ea:	61f8      	str	r0, [r7, #28]
            xMyData = xEventGetxData( pxEvent );
    38ec:	6a38      	ldr	r0, [r7, #32]
    38ee:	f7ff f875 	bl	29dc <xEventGetxData>
    38f2:	61b8      	str	r0, [r7, #24]
            xMyTag = xEventGetxTag( pxEvent );
    38f4:	6a38      	ldr	r0, [r7, #32]
    38f6:	f7ff f865 	bl	29c4 <xEventGetxTag>
    38fa:	6178      	str	r0, [r7, #20]
            xContexts[xMyFlag].xCount ++;
    38fc:	f640 120c 	movw	r2, #2316	; 0x90c
    3900:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3904:	69f9      	ldr	r1, [r7, #28]
    3906:	460b      	mov	r3, r1
    3908:	00db      	lsls	r3, r3, #3
    390a:	1a5b      	subs	r3, r3, r1
    390c:	00db      	lsls	r3, r3, #3
    390e:	4413      	add	r3, r2
    3910:	3308      	adds	r3, #8
    3912:	681b      	ldr	r3, [r3, #0]
    3914:	1c58      	adds	r0, r3, #1
    3916:	f640 120c 	movw	r2, #2316	; 0x90c
    391a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    391e:	69f9      	ldr	r1, [r7, #28]
    3920:	460b      	mov	r3, r1
    3922:	00db      	lsls	r3, r3, #3
    3924:	1a5b      	subs	r3, r3, r1
    3926:	00db      	lsls	r3, r3, #3
    3928:	4413      	add	r3, r2
    392a:	3308      	adds	r3, #8
    392c:	6018      	str	r0, [r3, #0]
            xDeadline= xEventGetxDeadline( pxEvent ); 
    392e:	6a38      	ldr	r0, [r7, #32]
    3930:	f7ff f824 	bl	297c <xEventGetxDeadline>
    3934:	6138      	str	r0, [r7, #16]
            xTimestamp = xMyTag->xTimestamp + INPUT;   
    3936:	697b      	ldr	r3, [r7, #20]
    3938:	685b      	ldr	r3, [r3, #4]
    393a:	3303      	adds	r3, #3
    393c:	60fb      	str	r3, [r7, #12]
            xFutureModelTime = xTimestamp;  // init the future model time to the start of LET execution duration.
    393e:	f240 635c 	movw	r3, #1628	; 0x65c
    3942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3946:	68fa      	ldr	r2, [r7, #12]
    3948:	601a      	str	r2, [r3, #0]
            vPrintNumber(xMyFlag);
    394a:	69f8      	ldr	r0, [r7, #28]
    394c:	f013 fe20 	bl	17590 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3950:	f001 fcd8 	bl	5304 <xTaskGetTickCount>
    3954:	4603      	mov	r3, r0
    3956:	4618      	mov	r0, r3
    3958:	f013 fe1a 	bl	17590 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
    395c:	f640 120c 	movw	r2, #2316	; 0x90c
    3960:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3964:	69f9      	ldr	r1, [r7, #28]
    3966:	460b      	mov	r3, r1
    3968:	00db      	lsls	r3, r3, #3
    396a:	1a5b      	subs	r3, r3, r1
    396c:	00db      	lsls	r3, r3, #3
    396e:	4413      	add	r3, r2
    3970:	3328      	adds	r3, #40	; 0x28
    3972:	681b      	ldr	r3, [r3, #0]
    3974:	69b8      	ldr	r0, [r7, #24]
    3976:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData );  // reuse event
    3978:	69bb      	ldr	r3, [r7, #24]
    397a:	9300      	str	r3, [sp, #0]
    397c:	6a38      	ldr	r0, [r7, #32]
    397e:	69f9      	ldr	r1, [r7, #28]
    3980:	693a      	ldr	r2, [r7, #16]
    3982:	68fb      	ldr	r3, [r7, #12]
    3984:	f7ff fdaa 	bl	34dc <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3988:	f7fe ffbe 	bl	2908 <xIsERLNull>
    398c:	6278      	str	r0, [r7, #36]	; 0x24
    398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3990:	f1b3 3fff 	cmp.w	r3, #4294967295
    3994:	d19f      	bne.n	38d6 <vSensor+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData );  // reuse event
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3996:	f241 3354 	movw	r3, #4948	; 0x1354
    399a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    399e:	681b      	ldr	r3, [r3, #0]
    39a0:	4618      	mov	r0, r3
    39a2:	2100      	movs	r1, #0
    39a4:	2200      	movs	r2, #0
    39a6:	2300      	movs	r3, #0
    39a8:	f000 fd32 	bl	4410 <xQueueGenericSend>
    }
    39ac:	e786      	b.n	38bc <vSensor+0x8>
    39ae:	bf00      	nop

000039b0 <vServant>:
}

void vServant( void * pvParameter )
{
    39b0:	b580      	push	{r7, lr}
    39b2:	b08c      	sub	sp, #48	; 0x30
    39b4:	af02      	add	r7, sp, #8
    39b6:	6078      	str	r0, [r7, #4]
    struct eventData * xMyData;
    struct tag * xMyTag;
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );
    39b8:	f241 3354 	movw	r3, #4948	; 0x1354
    39bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39c0:	689b      	ldr	r3, [r3, #8]
    39c2:	4618      	mov	r0, r3
    39c4:	2100      	movs	r1, #0
    39c6:	f04f 32ff 	mov.w	r2, #4294967295
    39ca:	2300      	movs	r3, #0
    39cc:	f000 fde6 	bl	459c <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    39d0:	e081      	b.n	3ad6 <vServant+0x126>
        {
            if(boolFlag == 0)
    39d2:	6a3b      	ldr	r3, [r7, #32]
    39d4:	2b00      	cmp	r3, #0
    39d6:	d100      	bne.n	39da <vServant+0x2a>
                continue;
    39d8:	e07d      	b.n	3ad6 <vServant+0x126>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    39da:	f7ff fd61 	bl	34a0 <pxEventGenericReceive>
    39de:	61f8      	str	r0, [r7, #28]
            xMyFlag = xEventGetpxDestination( pxEvent );
    39e0:	69f8      	ldr	r0, [r7, #28]
    39e2:	f7fe ffe3 	bl	29ac <xEventGetpxDestination>
    39e6:	61b8      	str	r0, [r7, #24]
            xMyData = xEventGetxData( pxEvent );
    39e8:	69f8      	ldr	r0, [r7, #28]
    39ea:	f7fe fff7 	bl	29dc <xEventGetxData>
    39ee:	6178      	str	r0, [r7, #20]
            xMyTag = xEventGetxTag( pxEvent );
    39f0:	69f8      	ldr	r0, [r7, #28]
    39f2:	f7fe ffe7 	bl	29c4 <xEventGetxTag>
    39f6:	6138      	str	r0, [r7, #16]
            xContexts[xMyFlag].xCount ++;
    39f8:	f640 120c 	movw	r2, #2316	; 0x90c
    39fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a00:	69b9      	ldr	r1, [r7, #24]
    3a02:	460b      	mov	r3, r1
    3a04:	00db      	lsls	r3, r3, #3
    3a06:	1a5b      	subs	r3, r3, r1
    3a08:	00db      	lsls	r3, r3, #3
    3a0a:	4413      	add	r3, r2
    3a0c:	3308      	adds	r3, #8
    3a0e:	681b      	ldr	r3, [r3, #0]
    3a10:	1c58      	adds	r0, r3, #1
    3a12:	f640 120c 	movw	r2, #2316	; 0x90c
    3a16:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a1a:	69b9      	ldr	r1, [r7, #24]
    3a1c:	460b      	mov	r3, r1
    3a1e:	00db      	lsls	r3, r3, #3
    3a20:	1a5b      	subs	r3, r3, r1
    3a22:	00db      	lsls	r3, r3, #3
    3a24:	4413      	add	r3, r2
    3a26:	3308      	adds	r3, #8
    3a28:	6018      	str	r0, [r3, #0]
            xDeadline = xEventGetxDeadline( pxEvent ); 
    3a2a:	69f8      	ldr	r0, [r7, #28]
    3a2c:	f7fe ffa6 	bl	297c <xEventGetxDeadline>
    3a30:	60f8      	str	r0, [r7, #12]
            // set the timestamp of event in terms of destination servant
            // if destination is actuator, then set as the EndOfLET
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
    3a32:	f640 120c 	movw	r2, #2316	; 0x90c
    3a36:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a3a:	69b9      	ldr	r1, [r7, #24]
    3a3c:	460b      	mov	r3, r1
    3a3e:	00db      	lsls	r3, r3, #3
    3a40:	1a5b      	subs	r3, r3, r1
    3a42:	00db      	lsls	r3, r3, #3
    3a44:	4413      	add	r3, r2
    3a46:	331c      	adds	r3, #28
    3a48:	681b      	ldr	r3, [r3, #0]
    3a4a:	60bb      	str	r3, [r7, #8]
            switch(xContexts[pxDestination].xType)
    3a4c:	f640 120c 	movw	r2, #2316	; 0x90c
    3a50:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a54:	68b9      	ldr	r1, [r7, #8]
    3a56:	460b      	mov	r3, r1
    3a58:	00db      	lsls	r3, r3, #3
    3a5a:	1a5b      	subs	r3, r3, r1
    3a5c:	00db      	lsls	r3, r3, #3
    3a5e:	4413      	add	r3, r2
    3a60:	3304      	adds	r3, #4
    3a62:	681b      	ldr	r3, [r3, #0]
    3a64:	2b02      	cmp	r3, #2
    3a66:	d002      	beq.n	3a6e <vServant+0xbe>
    3a68:	2b03      	cmp	r3, #3
    3a6a:	d011      	beq.n	3a90 <vServant+0xe0>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xDeadline - OUTPUT; 
                    break;
                default:
                    break;
    3a6c:	e014      	b.n	3a98 <vServant+0xe8>
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
            switch(xContexts[pxDestination].xType)
            {
                case 2:
                    xTimestamp = xMyTag->xTimestamp + xContexts[xMyFlag].xLet;
    3a6e:	693b      	ldr	r3, [r7, #16]
    3a70:	6858      	ldr	r0, [r3, #4]
    3a72:	f640 120c 	movw	r2, #2316	; 0x90c
    3a76:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a7a:	69b9      	ldr	r1, [r7, #24]
    3a7c:	460b      	mov	r3, r1
    3a7e:	00db      	lsls	r3, r3, #3
    3a80:	1a5b      	subs	r3, r3, r1
    3a82:	00db      	lsls	r3, r3, #3
    3a84:	4413      	add	r3, r2
    3a86:	3324      	adds	r3, #36	; 0x24
    3a88:	681b      	ldr	r3, [r3, #0]
    3a8a:	4403      	add	r3, r0
    3a8c:	627b      	str	r3, [r7, #36]	; 0x24
                    break;
    3a8e:	e003      	b.n	3a98 <vServant+0xe8>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xDeadline - OUTPUT; 
    3a90:	68fb      	ldr	r3, [r7, #12]
    3a92:	3b03      	subs	r3, #3
    3a94:	627b      	str	r3, [r7, #36]	; 0x24
                    break;
    3a96:	bf00      	nop
                default:
                    break;
                    // wrong events type
            }
            vPrintNumber(xMyFlag);
    3a98:	69b8      	ldr	r0, [r7, #24]
    3a9a:	f013 fd79 	bl	17590 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3a9e:	f001 fc31 	bl	5304 <xTaskGetTickCount>
    3aa2:	4603      	mov	r3, r0
    3aa4:	4618      	mov	r0, r3
    3aa6:	f013 fd73 	bl	17590 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
    3aaa:	f640 120c 	movw	r2, #2316	; 0x90c
    3aae:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ab2:	69b9      	ldr	r1, [r7, #24]
    3ab4:	460b      	mov	r3, r1
    3ab6:	00db      	lsls	r3, r3, #3
    3ab8:	1a5b      	subs	r3, r3, r1
    3aba:	00db      	lsls	r3, r3, #3
    3abc:	4413      	add	r3, r2
    3abe:	3328      	adds	r3, #40	; 0x28
    3ac0:	681b      	ldr	r3, [r3, #0]
    3ac2:	6978      	ldr	r0, [r7, #20]
    3ac4:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData );
    3ac6:	697b      	ldr	r3, [r7, #20]
    3ac8:	9300      	str	r3, [sp, #0]
    3aca:	69f8      	ldr	r0, [r7, #28]
    3acc:	69b9      	ldr	r1, [r7, #24]
    3ace:	68fa      	ldr	r2, [r7, #12]
    3ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3ad2:	f7ff fd03 	bl	34dc <vEventGenericUpdate>
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3ad6:	f7fe ff17 	bl	2908 <xIsERLNull>
    3ada:	6238      	str	r0, [r7, #32]
    3adc:	6a3b      	ldr	r3, [r7, #32]
    3ade:	f1b3 3fff 	cmp.w	r3, #4294967295
    3ae2:	f47f af76 	bne.w	39d2 <vServant+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData );
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3ae6:	f241 3354 	movw	r3, #4948	; 0x1354
    3aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3aee:	681b      	ldr	r3, [r3, #0]
    3af0:	4618      	mov	r0, r3
    3af2:	2100      	movs	r1, #0
    3af4:	2200      	movs	r2, #0
    3af6:	2300      	movs	r3, #0
    3af8:	f000 fc8a 	bl	4410 <xQueueGenericSend>
    }
    3afc:	e75c      	b.n	39b8 <vServant+0x8>
    3afe:	bf00      	nop

00003b00 <vActuator>:

}

void vActuator( void * pvParameter )
{
    3b00:	b580      	push	{r7, lr}
    3b02:	b08c      	sub	sp, #48	; 0x30
    3b04:	af02      	add	r7, sp, #8
    3b06:	6078      	str	r0, [r7, #4]
    struct tag * xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );
    3b08:	f241 3354 	movw	r3, #4948	; 0x1354
    3b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b10:	68db      	ldr	r3, [r3, #12]
    3b12:	4618      	mov	r0, r3
    3b14:	2100      	movs	r1, #0
    3b16:	f04f 32ff 	mov.w	r2, #4294967295
    3b1a:	2300      	movs	r3, #0
    3b1c:	f000 fd3e 	bl	459c <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3b20:	e05f      	b.n	3be2 <vActuator+0xe2>
        {
            if(boolFlag == 0)
    3b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3b24:	2b00      	cmp	r3, #0
    3b26:	d100      	bne.n	3b2a <vActuator+0x2a>
                continue;
    3b28:	e05b      	b.n	3be2 <vActuator+0xe2>

            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    3b2a:	f7ff fcb9 	bl	34a0 <pxEventGenericReceive>
    3b2e:	6238      	str	r0, [r7, #32]
            xMyFlag = xEventGetpxDestination( pxEvent );
    3b30:	6a38      	ldr	r0, [r7, #32]
    3b32:	f7fe ff3b 	bl	29ac <xEventGetpxDestination>
    3b36:	61f8      	str	r0, [r7, #28]
            xMyData = xEventGetxData( pxEvent );
    3b38:	6a38      	ldr	r0, [r7, #32]
    3b3a:	f7fe ff4f 	bl	29dc <xEventGetxData>
    3b3e:	61b8      	str	r0, [r7, #24]
            xMyTag = xEventGetxTag( pxEvent );
    3b40:	6a38      	ldr	r0, [r7, #32]
    3b42:	f7fe ff3f 	bl	29c4 <xEventGetxTag>
    3b46:	6178      	str	r0, [r7, #20]
            xContexts[xMyFlag].xCount ++;
    3b48:	f640 120c 	movw	r2, #2316	; 0x90c
    3b4c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b50:	69f9      	ldr	r1, [r7, #28]
    3b52:	460b      	mov	r3, r1
    3b54:	00db      	lsls	r3, r3, #3
    3b56:	1a5b      	subs	r3, r3, r1
    3b58:	00db      	lsls	r3, r3, #3
    3b5a:	4413      	add	r3, r2
    3b5c:	3308      	adds	r3, #8
    3b5e:	681b      	ldr	r3, [r3, #0]
    3b60:	1c58      	adds	r0, r3, #1
    3b62:	f640 120c 	movw	r2, #2316	; 0x90c
    3b66:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b6a:	69f9      	ldr	r1, [r7, #28]
    3b6c:	460b      	mov	r3, r1
    3b6e:	00db      	lsls	r3, r3, #3
    3b70:	1a5b      	subs	r3, r3, r1
    3b72:	00db      	lsls	r3, r3, #3
    3b74:	4413      	add	r3, r2
    3b76:	3308      	adds	r3, #8
    3b78:	6018      	str	r0, [r3, #0]
            xDeadline = xEventGetxDeadline( pxEvent ) + xContexts[xMyFlag].xPeriod; 
    3b7a:	6a38      	ldr	r0, [r7, #32]
    3b7c:	f7fe fefe 	bl	297c <xEventGetxDeadline>
    3b80:	f640 120c 	movw	r2, #2316	; 0x90c
    3b84:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b88:	69f9      	ldr	r1, [r7, #28]
    3b8a:	460b      	mov	r3, r1
    3b8c:	00db      	lsls	r3, r3, #3
    3b8e:	1a5b      	subs	r3, r3, r1
    3b90:	00db      	lsls	r3, r3, #3
    3b92:	4413      	add	r3, r2
    3b94:	332c      	adds	r3, #44	; 0x2c
    3b96:	681b      	ldr	r3, [r3, #0]
    3b98:	4403      	add	r3, r0
    3b9a:	613b      	str	r3, [r7, #16]
            xTimestamp = xMyTag->xTimestamp + OUTPUT;  // all sensor are scheduled to execute start from 0 to 4 ms of every period
    3b9c:	697b      	ldr	r3, [r7, #20]
    3b9e:	685b      	ldr	r3, [r3, #4]
    3ba0:	3303      	adds	r3, #3
    3ba2:	60fb      	str	r3, [r7, #12]
            vPrintNumber(xMyFlag);
    3ba4:	69f8      	ldr	r0, [r7, #28]
    3ba6:	f013 fcf3 	bl	17590 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3baa:	f001 fbab 	bl	5304 <xTaskGetTickCount>
    3bae:	4603      	mov	r3, r0
    3bb0:	4618      	mov	r0, r3
    3bb2:	f013 fced 	bl	17590 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
    3bb6:	f640 120c 	movw	r2, #2316	; 0x90c
    3bba:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3bbe:	69f9      	ldr	r1, [r7, #28]
    3bc0:	460b      	mov	r3, r1
    3bc2:	00db      	lsls	r3, r3, #3
    3bc4:	1a5b      	subs	r3, r3, r1
    3bc6:	00db      	lsls	r3, r3, #3
    3bc8:	4413      	add	r3, r2
    3bca:	3328      	adds	r3, #40	; 0x28
    3bcc:	681b      	ldr	r3, [r3, #0]
    3bce:	69b8      	ldr	r0, [r7, #24]
    3bd0:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData ); // update the information of output event 
    3bd2:	69bb      	ldr	r3, [r7, #24]
    3bd4:	9300      	str	r3, [sp, #0]
    3bd6:	6a38      	ldr	r0, [r7, #32]
    3bd8:	69f9      	ldr	r1, [r7, #28]
    3bda:	693a      	ldr	r2, [r7, #16]
    3bdc:	68fb      	ldr	r3, [r7, #12]
    3bde:	f7ff fc7d 	bl	34dc <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3be2:	f7fe fe91 	bl	2908 <xIsERLNull>
    3be6:	6278      	str	r0, [r7, #36]	; 0x24
    3be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3bea:	f1b3 3fff 	cmp.w	r3, #4294967295
    3bee:	d198      	bne.n	3b22 <vActuator+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData ); // update the information of output event 
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3bf0:	f241 3354 	movw	r3, #4948	; 0x1354
    3bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bf8:	681b      	ldr	r3, [r3, #0]
    3bfa:	4618      	mov	r0, r3
    3bfc:	2100      	movs	r1, #0
    3bfe:	2200      	movs	r2, #0
    3c00:	2300      	movs	r3, #0
    3c02:	f000 fc05 	bl	4410 <xQueueGenericSend>
    }
    3c06:	e77f      	b.n	3b08 <vActuator+0x8>

00003c08 <vR_Servant>:
}


void vR_Servant( void * pvParameter)
{
    3c08:	b580      	push	{r7, lr}
    3c0a:	b084      	sub	sp, #16
    3c0c:	af00      	add	r7, sp, #0
    3c0e:	6078      	str	r0, [r7, #4]
    portBASE_TYPE pxDestination;
    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[0], portMAX_DELAY );
    3c10:	f241 3354 	movw	r3, #4948	; 0x1354
    3c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c18:	681b      	ldr	r3, [r3, #0]
    3c1a:	4618      	mov	r0, r3
    3c1c:	2100      	movs	r1, #0
    3c1e:	f04f 32ff 	mov.w	r2, #4294967295
    3c22:	2300      	movs	r3, #0
    3c24:	f000 fcba 	bl	459c <xQueueGenericReceive>
        vPrintString("R-Servant\n\r");
    3c28:	f648 2074 	movw	r0, #35444	; 0x8a74
    3c2c:	f2c0 0001 	movt	r0, #1
    3c30:	f013 fc94 	bl	1755c <vPrintString>

        // transit the events from events pool to nonexecutable event list
        // Copy one event to multiple when communication mode is 1 to N
        vEventScatter();
    3c34:	f7ff f894 	bl	2d60 <vEventGenericScatter>

        // reduce multiple event for destination to one when communication mode is N to 1,
        // and transit the event from executable event pool to executable event list
        vEventReduce(); 
    3c38:	f7ff f9bc 	bl	2fb4 <vEventGenericReduce>

        // serialize the timestamp of simulataneous events,
        // and transit the ready events to ready list
        // return the pxDestination of the first ready event in ready list
        pxDestination = xEventSerialize(); 
    3c3c:	f7ff fbb4 	bl	33a8 <xEventGenericSerialize>
    3c40:	60f8      	str	r0, [r7, #12]
        if(pxDestination != -1)
    3c42:	68fb      	ldr	r3, [r7, #12]
    3c44:	f1b3 3fff 	cmp.w	r3, #4294967295
    3c48:	d036      	beq.n	3cb8 <vR_Servant+0xb0>
        {
            switch(xContexts[pxDestination].xType)
    3c4a:	f640 120c 	movw	r2, #2316	; 0x90c
    3c4e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3c52:	68f9      	ldr	r1, [r7, #12]
    3c54:	460b      	mov	r3, r1
    3c56:	00db      	lsls	r3, r3, #3
    3c58:	1a5b      	subs	r3, r3, r1
    3c5a:	00db      	lsls	r3, r3, #3
    3c5c:	4413      	add	r3, r2
    3c5e:	3304      	adds	r3, #4
    3c60:	681b      	ldr	r3, [r3, #0]
    3c62:	2b02      	cmp	r3, #2
    3c64:	d010      	beq.n	3c88 <vR_Servant+0x80>
    3c66:	2b03      	cmp	r3, #3
    3c68:	d01a      	beq.n	3ca0 <vR_Servant+0x98>
    3c6a:	2b01      	cmp	r3, #1
    3c6c:	d000      	beq.n	3c70 <vR_Servant+0x68>
                    break;
                case 3:
                    xSemaphoreGive( xBinarySemaphore[3] );
                    break;
                default:
                    break;
    3c6e:	e023      	b.n	3cb8 <vR_Servant+0xb0>
        if(pxDestination != -1)
        {
            switch(xContexts[pxDestination].xType)
            {
                case 1:
                    xSemaphoreGive( xBinarySemaphore[1] );
    3c70:	f241 3354 	movw	r3, #4948	; 0x1354
    3c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c78:	685b      	ldr	r3, [r3, #4]
    3c7a:	4618      	mov	r0, r3
    3c7c:	2100      	movs	r1, #0
    3c7e:	2200      	movs	r2, #0
    3c80:	2300      	movs	r3, #0
    3c82:	f000 fbc5 	bl	4410 <xQueueGenericSend>
                    break;
    3c86:	e017      	b.n	3cb8 <vR_Servant+0xb0>
                case 2:
                    xSemaphoreGive( xBinarySemaphore[2] );
    3c88:	f241 3354 	movw	r3, #4948	; 0x1354
    3c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c90:	689b      	ldr	r3, [r3, #8]
    3c92:	4618      	mov	r0, r3
    3c94:	2100      	movs	r1, #0
    3c96:	2200      	movs	r2, #0
    3c98:	2300      	movs	r3, #0
    3c9a:	f000 fbb9 	bl	4410 <xQueueGenericSend>
                    break;
    3c9e:	e00b      	b.n	3cb8 <vR_Servant+0xb0>
                case 3:
                    xSemaphoreGive( xBinarySemaphore[3] );
    3ca0:	f241 3354 	movw	r3, #4948	; 0x1354
    3ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ca8:	68db      	ldr	r3, [r3, #12]
    3caa:	4618      	mov	r0, r3
    3cac:	2100      	movs	r1, #0
    3cae:	2200      	movs	r2, #0
    3cb0:	2300      	movs	r3, #0
    3cb2:	f000 fbad 	bl	4410 <xQueueGenericSend>
                    break;
    3cb6:	bf00      	nop
                default:
                    break;
                    // no event available 
            }
        }
    }
    3cb8:	e7aa      	b.n	3c10 <vR_Servant+0x8>
    3cba:	bf00      	nop

00003cbc <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
    3cbc:	b480      	push	{r7}
    3cbe:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
    3cc0:	f242 032f 	movw	r3, #8239	; 0x202f
    3cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cc8:	2200      	movs	r2, #0
    3cca:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
    3ccc:	f242 032e 	movw	r3, #8238	; 0x202e
    3cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cd4:	2201      	movs	r2, #1
    3cd6:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
    3cd8:	f242 0325 	movw	r3, #8229	; 0x2025
    3cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ce0:	2207      	movs	r2, #7
    3ce2:	701a      	strb	r2, [r3, #0]
}
    3ce4:	46bd      	mov	sp, r7
    3ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cea:	4770      	bx	lr

00003cec <PapabenchInit>:
extern void ir_init();
extern void estimator_init();
extern void fbw_init();

void PapabenchInit()
{
    3cec:	b580      	push	{r7, lr}
    3cee:	af00      	add	r7, sp, #0
    timer_init();
    3cf0:	f7ff ffe4 	bl	3cbc <timer_init>
    modem_init();
    3cf4:	f00d f940 	bl	10f78 <modem_init>
    adc_init();
    3cf8:	f00d fc8a 	bl	11610 <adc_init>
#ifdef CTL_BRD_V1_1
    adc_buf_channel(ADC_CHANNEL_BAT, &buf_bat);
#endif
    spi_init();
    3cfc:	f00d fbfc 	bl	114f8 <spi_init>
    link_fbw_init();
    3d00:	f00d fa58 	bl	111b4 <link_fbw_init>
    gps_init();
    3d04:	f00d fd34 	bl	11770 <gps_init>
    nav_init();
    3d08:	f011 f82c 	bl	14d64 <nav_init>
    ir_init();
    3d0c:	f00d ffd8 	bl	11cc0 <ir_init>
    estimator_init();
    3d10:	f011 fa0e 	bl	15130 <estimator_init>
#ifdef PAPABENCH_SINGLE
    fbw_init();
#endif
}
    3d14:	bd80      	pop	{r7, pc}
    3d16:	bf00      	nop

00003d18 <s_0>:
#define SUNNYBEIKE 1
#ifdef SUNNYBEIKE

/*task0*/
void s_0(struct eventData * pxDataArray) 
{
    3d18:	b480      	push	{r7}
    3d1a:	b083      	sub	sp, #12
    3d1c:	af00      	add	r7, sp, #0
    3d1e:	6078      	str	r0, [r7, #4]
    // do actuator
    // do sensor
}
    3d20:	370c      	adds	r7, #12
    3d22:	46bd      	mov	sp, r7
    3d24:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d28:	4770      	bx	lr
    3d2a:	bf00      	nop

00003d2c <s_1>:
void s_1(struct eventData * pxDataArray) 
{
    3d2c:	b580      	push	{r7, lr}
    3d2e:	b082      	sub	sp, #8
    3d30:	af00      	add	r7, sp, #0
    3d32:	6078      	str	r0, [r7, #4]
    last_radio_from_ppm(); // ppm.h
    3d34:	f012 f9d8 	bl	160e8 <last_radio_from_ppm>
}
    3d38:	3708      	adds	r7, #8
    3d3a:	46bd      	mov	sp, r7
    3d3c:	bd80      	pop	{r7, pc}
    3d3e:	bf00      	nop

00003d40 <s_2>:
void s_2(struct eventData * pxDataArray) 
{
    3d40:	b480      	push	{r7}
    3d42:	b083      	sub	sp, #12
    3d44:	af00      	add	r7, sp, #0
    3d46:	6078      	str	r0, [r7, #4]
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    3d48:	370c      	adds	r7, #12
    3d4a:	46bd      	mov	sp, r7
    3d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d50:	4770      	bx	lr
    3d52:	bf00      	nop

00003d54 <s_3>:
void s_3(struct eventData * pxDataArray) 
{
    3d54:	b480      	push	{r7}
    3d56:	b083      	sub	sp, #12
    3d58:	af00      	add	r7, sp, #0
    3d5a:	6078      	str	r0, [r7, #4]
}
    3d5c:	370c      	adds	r7, #12
    3d5e:	46bd      	mov	sp, r7
    3d60:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d64:	4770      	bx	lr
    3d66:	bf00      	nop

00003d68 <s_4>:

/*task1*/
void s_4(struct eventData * pxDataArray) 
{
    3d68:	b480      	push	{r7}
    3d6a:	b083      	sub	sp, #12
    3d6c:	af00      	add	r7, sp, #0
    3d6e:	6078      	str	r0, [r7, #4]
}
    3d70:	370c      	adds	r7, #12
    3d72:	46bd      	mov	sp, r7
    3d74:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d78:	4770      	bx	lr
    3d7a:	bf00      	nop

00003d7c <s_5>:
void s_5(struct eventData * pxDataArray) 
{
    3d7c:	b580      	push	{r7, lr}
    3d7e:	b082      	sub	sp, #8
    3d80:	af00      	add	r7, sp, #0
    3d82:	6078      	str	r0, [r7, #4]
    to_autopilot_from_last_radio(); // main.c
    3d84:	f012 fd6a 	bl	1685c <to_autopilot_from_last_radio>
}
    3d88:	3708      	adds	r7, #8
    3d8a:	46bd      	mov	sp, r7
    3d8c:	bd80      	pop	{r7, pc}
    3d8e:	bf00      	nop

00003d90 <s_6>:
void s_6(struct eventData * pxDataArray) 
{
    3d90:	b580      	push	{r7, lr}
    3d92:	b082      	sub	sp, #8
    3d94:	af00      	add	r7, sp, #0
    3d96:	6078      	str	r0, [r7, #4]
    spi_reset(); // spi_fbw.h
    3d98:	f012 fc9e 	bl	166d8 <spi_reset>
}
    3d9c:	3708      	adds	r7, #8
    3d9e:	46bd      	mov	sp, r7
    3da0:	bd80      	pop	{r7, pc}
    3da2:	bf00      	nop

00003da4 <s_7>:
void s_7(struct eventData * pxDataArray) 
{
    3da4:	b480      	push	{r7}
    3da6:	b083      	sub	sp, #12
    3da8:	af00      	add	r7, sp, #0
    3daa:	6078      	str	r0, [r7, #4]
}
    3dac:	370c      	adds	r7, #12
    3dae:	46bd      	mov	sp, r7
    3db0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3db4:	4770      	bx	lr
    3db6:	bf00      	nop

00003db8 <s_8>:

/*task 2*/ 
void s_8(struct eventData * pxDataArray) 
{
    3db8:	b480      	push	{r7}
    3dba:	b083      	sub	sp, #12
    3dbc:	af00      	add	r7, sp, #0
    3dbe:	6078      	str	r0, [r7, #4]
}
    3dc0:	370c      	adds	r7, #12
    3dc2:	46bd      	mov	sp, r7
    3dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dc8:	4770      	bx	lr
    3dca:	bf00      	nop

00003dcc <s_9>:
void s_9(struct eventData * pxDataArray) 
{
    3dcc:	b580      	push	{r7, lr}
    3dce:	b082      	sub	sp, #8
    3dd0:	af00      	add	r7, sp, #0
    3dd2:	6078      	str	r0, [r7, #4]
    check_mega128_values_task(); // main.c
    3dd4:	f012 fee6 	bl	16ba4 <check_mega128_values_task>
}
    3dd8:	3708      	adds	r7, #8
    3dda:	46bd      	mov	sp, r7
    3ddc:	bd80      	pop	{r7, pc}
    3dde:	bf00      	nop

00003de0 <s_10>:
void s_10(struct eventData * pxDataArray) 
{
    3de0:	b480      	push	{r7}
    3de2:	b083      	sub	sp, #12
    3de4:	af00      	add	r7, sp, #0
    3de6:	6078      	str	r0, [r7, #4]
}
    3de8:	370c      	adds	r7, #12
    3dea:	46bd      	mov	sp, r7
    3dec:	f85d 7b04 	ldr.w	r7, [sp], #4
    3df0:	4770      	bx	lr
    3df2:	bf00      	nop

00003df4 <s_11>:

/*task 3, servant 8, 9*/ 
void s_11(struct eventData * pxDataArray) 
{
    3df4:	b480      	push	{r7}
    3df6:	b083      	sub	sp, #12
    3df8:	af00      	add	r7, sp, #0
    3dfa:	6078      	str	r0, [r7, #4]
}
    3dfc:	370c      	adds	r7, #12
    3dfe:	46bd      	mov	sp, r7
    3e00:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e04:	4770      	bx	lr
    3e06:	bf00      	nop

00003e08 <s_12>:
void s_12(struct eventData * pxDataArray) 
{
    3e08:	b580      	push	{r7, lr}
    3e0a:	b082      	sub	sp, #8
    3e0c:	af00      	add	r7, sp, #0
    3e0e:	6078      	str	r0, [r7, #4]
    servo_transmit(); //servo.h
    3e10:	f012 ffbc 	bl	16d8c <servo_transmit>
}
    3e14:	3708      	adds	r7, #8
    3e16:	46bd      	mov	sp, r7
    3e18:	bd80      	pop	{r7, pc}
    3e1a:	bf00      	nop

00003e1c <s_13>:
void s_13(struct eventData * pxDataArray) 
{
    3e1c:	b480      	push	{r7}
    3e1e:	b083      	sub	sp, #12
    3e20:	af00      	add	r7, sp, #0
    3e22:	6078      	str	r0, [r7, #4]
}
    3e24:	370c      	adds	r7, #12
    3e26:	46bd      	mov	sp, r7
    3e28:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e2c:	4770      	bx	lr
    3e2e:	bf00      	nop

00003e30 <s_14>:

/*task 4, servant 10, 11*/
void s_14(struct eventData * pxDataArray) 
{
    3e30:	b480      	push	{r7}
    3e32:	b083      	sub	sp, #12
    3e34:	af00      	add	r7, sp, #0
    3e36:	6078      	str	r0, [r7, #4]
}
    3e38:	370c      	adds	r7, #12
    3e3a:	46bd      	mov	sp, r7
    3e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e40:	4770      	bx	lr
    3e42:	bf00      	nop

00003e44 <s_15>:
void s_15(struct eventData * pxDataArray) 
{
    3e44:	b580      	push	{r7, lr}
    3e46:	b082      	sub	sp, #8
    3e48:	af00      	add	r7, sp, #0
    3e4a:	6078      	str	r0, [r7, #4]
    check_failsafe_task(); // main.c
    3e4c:	f012 fe84 	bl	16b58 <check_failsafe_task>
}
    3e50:	3708      	adds	r7, #8
    3e52:	46bd      	mov	sp, r7
    3e54:	bd80      	pop	{r7, pc}
    3e56:	bf00      	nop

00003e58 <s_16>:
void s_16(struct eventData * pxDataArray) 
{
    3e58:	b480      	push	{r7}
    3e5a:	b083      	sub	sp, #12
    3e5c:	af00      	add	r7, sp, #0
    3e5e:	6078      	str	r0, [r7, #4]
}
    3e60:	370c      	adds	r7, #12
    3e62:	46bd      	mov	sp, r7
    3e64:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e68:	4770      	bx	lr
    3e6a:	bf00      	nop

00003e6c <s_17>:

/*task 5, servant 12, 13, 14*/
void s_17(struct eventData * pxDataArray) 
{
    3e6c:	b480      	push	{r7}
    3e6e:	b083      	sub	sp, #12
    3e70:	af00      	add	r7, sp, #0
    3e72:	6078      	str	r0, [r7, #4]
}
    3e74:	370c      	adds	r7, #12
    3e76:	46bd      	mov	sp, r7
    3e78:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e7c:	4770      	bx	lr
    3e7e:	bf00      	nop

00003e80 <s_18>:
void s_18(struct eventData * pxDataArray) 
{
    3e80:	b580      	push	{r7, lr}
    3e82:	b082      	sub	sp, #8
    3e84:	af00      	add	r7, sp, #0
    3e86:	6078      	str	r0, [r7, #4]
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    3e88:	f009 f8b8 	bl	cffc <radio_control_task>
}
    3e8c:	3708      	adds	r7, #8
    3e8e:	46bd      	mov	sp, r7
    3e90:	bd80      	pop	{r7, pc}
    3e92:	bf00      	nop

00003e94 <s_19>:
void s_19(struct eventData * pxDataArray) 
{
    3e94:	b580      	push	{r7, lr}
    3e96:	b082      	sub	sp, #8
    3e98:	af00      	add	r7, sp, #0
    3e9a:	6078      	str	r0, [r7, #4]
    ir_gain_calib(); //infrared.h
    3e9c:	f00d ff68 	bl	11d70 <ir_gain_calib>
}
    3ea0:	3708      	adds	r7, #8
    3ea2:	46bd      	mov	sp, r7
    3ea4:	bd80      	pop	{r7, pc}
    3ea6:	bf00      	nop

00003ea8 <s_20>:
void s_20(struct eventData * pxDataArray) 
{
    3ea8:	b480      	push	{r7}
    3eaa:	b083      	sub	sp, #12
    3eac:	af00      	add	r7, sp, #0
    3eae:	6078      	str	r0, [r7, #4]
}
    3eb0:	370c      	adds	r7, #12
    3eb2:	46bd      	mov	sp, r7
    3eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3eb8:	4770      	bx	lr
    3eba:	bf00      	nop

00003ebc <s_21>:

/*task 6, servant 15,16,17,18*/ 
void s_21(struct eventData * pxDataArray) 
{
    3ebc:	b480      	push	{r7}
    3ebe:	b083      	sub	sp, #12
    3ec0:	af00      	add	r7, sp, #0
    3ec2:	6078      	str	r0, [r7, #4]
}
    3ec4:	370c      	adds	r7, #12
    3ec6:	46bd      	mov	sp, r7
    3ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ecc:	4770      	bx	lr
    3ece:	bf00      	nop

00003ed0 <s_22>:
void s_22(struct eventData * pxDataArray) 
{
    3ed0:	b580      	push	{r7, lr}
    3ed2:	b082      	sub	sp, #8
    3ed4:	af00      	add	r7, sp, #0
    3ed6:	6078      	str	r0, [r7, #4]
    ir_update(); // infrared.h
    3ed8:	f00d ff0c 	bl	11cf4 <ir_update>
}
    3edc:	3708      	adds	r7, #8
    3ede:	46bd      	mov	sp, r7
    3ee0:	bd80      	pop	{r7, pc}
    3ee2:	bf00      	nop

00003ee4 <s_23>:
void s_23(struct eventData * pxDataArray) 
{
    3ee4:	b580      	push	{r7, lr}
    3ee6:	b082      	sub	sp, #8
    3ee8:	af00      	add	r7, sp, #0
    3eea:	6078      	str	r0, [r7, #4]
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3eec:	f011 f98a 	bl	15204 <estimator_update_state_infrared>
}
    3ef0:	3708      	adds	r7, #8
    3ef2:	46bd      	mov	sp, r7
    3ef4:	bd80      	pop	{r7, pc}
    3ef6:	bf00      	nop

00003ef8 <s_24>:
void s_24(struct eventData * pxDataArray) 
{
    3ef8:	b580      	push	{r7, lr}
    3efa:	b082      	sub	sp, #8
    3efc:	af00      	add	r7, sp, #0
    3efe:	6078      	str	r0, [r7, #4]
    roll_pitch_pid_run(); // pid.h
    3f00:	f00d ff66 	bl	11dd0 <roll_pitch_pid_run>
}
    3f04:	3708      	adds	r7, #8
    3f06:	46bd      	mov	sp, r7
    3f08:	bd80      	pop	{r7, pc}
    3f0a:	bf00      	nop

00003f0c <s_25>:
void s_25(struct eventData * pxDataArray) 
{
    3f0c:	b480      	push	{r7}
    3f0e:	b083      	sub	sp, #12
    3f10:	af00      	add	r7, sp, #0
    3f12:	6078      	str	r0, [r7, #4]
}
    3f14:	370c      	adds	r7, #12
    3f16:	46bd      	mov	sp, r7
    3f18:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f1c:	4770      	bx	lr
    3f1e:	bf00      	nop

00003f20 <s_26>:

/*task 7, servant 19, 20*/
void s_26(struct eventData * pxDataArray) 
{
    3f20:	b480      	push	{r7}
    3f22:	b083      	sub	sp, #12
    3f24:	af00      	add	r7, sp, #0
    3f26:	6078      	str	r0, [r7, #4]
}
    3f28:	370c      	adds	r7, #12
    3f2a:	46bd      	mov	sp, r7
    3f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f30:	4770      	bx	lr
    3f32:	bf00      	nop

00003f34 <s_27>:
void s_27(struct eventData * pxDataArray) 
{
    3f34:	b580      	push	{r7, lr}
    3f36:	b082      	sub	sp, #8
    3f38:	af00      	add	r7, sp, #0
    3f3a:	6078      	str	r0, [r7, #4]
    link_fbw_send(); //link_fbw.h
    3f3c:	f00d f94c 	bl	111d8 <link_fbw_send>
}
    3f40:	3708      	adds	r7, #8
    3f42:	46bd      	mov	sp, r7
    3f44:	bd80      	pop	{r7, pc}
    3f46:	bf00      	nop

00003f48 <s_28>:
void s_28(struct eventData * pxDataArray) 
{}
    3f48:	b480      	push	{r7}
    3f4a:	b083      	sub	sp, #12
    3f4c:	af00      	add	r7, sp, #0
    3f4e:	6078      	str	r0, [r7, #4]
    3f50:	370c      	adds	r7, #12
    3f52:	46bd      	mov	sp, r7
    3f54:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f58:	4770      	bx	lr
    3f5a:	bf00      	nop

00003f5c <s_29>:

/*task 8, sevrvant 21,22,23*/
void s_29(struct eventData * pxDataArray) 
{
    3f5c:	b480      	push	{r7}
    3f5e:	b083      	sub	sp, #12
    3f60:	af00      	add	r7, sp, #0
    3f62:	6078      	str	r0, [r7, #4]
}
    3f64:	370c      	adds	r7, #12
    3f66:	46bd      	mov	sp, r7
    3f68:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f6c:	4770      	bx	lr
    3f6e:	bf00      	nop

00003f70 <s_30>:
void s_30(struct eventData * pxDataArray) 
{
    3f70:	b580      	push	{r7, lr}
    3f72:	b082      	sub	sp, #8
    3f74:	af00      	add	r7, sp, #0
    3f76:	6078      	str	r0, [r7, #4]
    parse_gps_msg(); //gps.h
    3f78:	f00d fc06 	bl	11788 <parse_gps_msg>
}
    3f7c:	3708      	adds	r7, #8
    3f7e:	46bd      	mov	sp, r7
    3f80:	bd80      	pop	{r7, pc}
    3f82:	bf00      	nop

00003f84 <s_31>:
void s_31(struct eventData * pxDataArray) 
{
    3f84:	b580      	push	{r7, lr}
    3f86:	b082      	sub	sp, #8
    3f88:	af00      	add	r7, sp, #0
    3f8a:	6078      	str	r0, [r7, #4]
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    3f8c:	f00a fe24 	bl	ebd8 <send_gps_pos>
    send_radIR();
    3f90:	f00b ffe8 	bl	ff64 <send_radIR>
    send_takeOff();
    3f94:	f00c fde0 	bl	10b58 <send_takeOff>
}
    3f98:	3708      	adds	r7, #8
    3f9a:	46bd      	mov	sp, r7
    3f9c:	bd80      	pop	{r7, pc}
    3f9e:	bf00      	nop

00003fa0 <s_32>:
void s_32(struct eventData * pxDataArray) 
{}
    3fa0:	b480      	push	{r7}
    3fa2:	b083      	sub	sp, #12
    3fa4:	af00      	add	r7, sp, #0
    3fa6:	6078      	str	r0, [r7, #4]
    3fa8:	370c      	adds	r7, #12
    3faa:	46bd      	mov	sp, r7
    3fac:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fb0:	4770      	bx	lr
    3fb2:	bf00      	nop

00003fb4 <s_33>:

/*task 9, servant 24, 25, 26, 27*/
void s_33(struct eventData * pxDataArray) 
{
    3fb4:	b480      	push	{r7}
    3fb6:	b083      	sub	sp, #12
    3fb8:	af00      	add	r7, sp, #0
    3fba:	6078      	str	r0, [r7, #4]
}
    3fbc:	370c      	adds	r7, #12
    3fbe:	46bd      	mov	sp, r7
    3fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fc4:	4770      	bx	lr
    3fc6:	bf00      	nop

00003fc8 <s_34>:
void s_34(struct eventData * pxDataArray) 
{
    3fc8:	b580      	push	{r7, lr}
    3fca:	b082      	sub	sp, #8
    3fcc:	af00      	add	r7, sp, #0
    3fce:	6078      	str	r0, [r7, #4]
    nav_home(); // nav.h
    3fd0:	f010 fe9a 	bl	14d08 <nav_home>
}
    3fd4:	3708      	adds	r7, #8
    3fd6:	46bd      	mov	sp, r7
    3fd8:	bd80      	pop	{r7, pc}
    3fda:	bf00      	nop

00003fdc <s_35>:
void s_35(struct eventData * pxDataArray) 
{
    3fdc:	b580      	push	{r7, lr}
    3fde:	b082      	sub	sp, #8
    3fe0:	af00      	add	r7, sp, #0
    3fe2:	6078      	str	r0, [r7, #4]
    nav_update(); // nav.h
    3fe4:	f010 feb6 	bl	14d54 <nav_update>
}
    3fe8:	3708      	adds	r7, #8
    3fea:	46bd      	mov	sp, r7
    3fec:	bd80      	pop	{r7, pc}
    3fee:	bf00      	nop

00003ff0 <s_36>:
void s_36(struct eventData * pxDataArray) 
{
    3ff0:	b580      	push	{r7, lr}
    3ff2:	b082      	sub	sp, #8
    3ff4:	af00      	add	r7, sp, #0
    3ff6:	6078      	str	r0, [r7, #4]
    course_pid_run(); // pid.h
    3ff8:	f00d ffd6 	bl	11fa8 <course_pid_run>
}
    3ffc:	3708      	adds	r7, #8
    3ffe:	46bd      	mov	sp, r7
    4000:	bd80      	pop	{r7, pc}
    4002:	bf00      	nop

00004004 <s_37>:
void s_37(struct eventData * pxDataArray) 
{}
    4004:	b480      	push	{r7}
    4006:	b083      	sub	sp, #12
    4008:	af00      	add	r7, sp, #0
    400a:	6078      	str	r0, [r7, #4]
    400c:	370c      	adds	r7, #12
    400e:	46bd      	mov	sp, r7
    4010:	f85d 7b04 	ldr.w	r7, [sp], #4
    4014:	4770      	bx	lr
    4016:	bf00      	nop

00004018 <s_38>:

/*task 10, servant 28, 29*/
void s_38(struct eventData * pxDataArray) 
{
    4018:	b480      	push	{r7}
    401a:	b083      	sub	sp, #12
    401c:	af00      	add	r7, sp, #0
    401e:	6078      	str	r0, [r7, #4]
}
    4020:	370c      	adds	r7, #12
    4022:	46bd      	mov	sp, r7
    4024:	f85d 7b04 	ldr.w	r7, [sp], #4
    4028:	4770      	bx	lr
    402a:	bf00      	nop

0000402c <s_39>:
void s_39(struct eventData * pxDataArray) 
{
    402c:	b580      	push	{r7, lr}
    402e:	b082      	sub	sp, #8
    4030:	af00      	add	r7, sp, #0
    4032:	6078      	str	r0, [r7, #4]
    altitude_pid_run(); // pid.h
    4034:	f00e fa40 	bl	124b8 <altitude_pid_run>
}
    4038:	3708      	adds	r7, #8
    403a:	46bd      	mov	sp, r7
    403c:	bd80      	pop	{r7, pc}
    403e:	bf00      	nop

00004040 <s_40>:
void s_40(struct eventData * pxDataArray) 
{}
    4040:	b480      	push	{r7}
    4042:	b083      	sub	sp, #12
    4044:	af00      	add	r7, sp, #0
    4046:	6078      	str	r0, [r7, #4]
    4048:	370c      	adds	r7, #12
    404a:	46bd      	mov	sp, r7
    404c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4050:	4770      	bx	lr
    4052:	bf00      	nop

00004054 <s_41>:

/*task 11, servant 30, 31*/
void s_41(struct eventData * pxDataArray) 
{
    4054:	b480      	push	{r7}
    4056:	b083      	sub	sp, #12
    4058:	af00      	add	r7, sp, #0
    405a:	6078      	str	r0, [r7, #4]
}
    405c:	370c      	adds	r7, #12
    405e:	46bd      	mov	sp, r7
    4060:	f85d 7b04 	ldr.w	r7, [sp], #4
    4064:	4770      	bx	lr
    4066:	bf00      	nop

00004068 <s_42>:
void s_42(struct eventData * pxDataArray) 
{
    4068:	b580      	push	{r7, lr}
    406a:	b082      	sub	sp, #8
    406c:	af00      	add	r7, sp, #0
    406e:	6078      	str	r0, [r7, #4]
    climb_pid_run(); // pid.h
    4070:	f00e f852 	bl	12118 <climb_pid_run>
}
    4074:	3708      	adds	r7, #8
    4076:	46bd      	mov	sp, r7
    4078:	bd80      	pop	{r7, pc}
    407a:	bf00      	nop

0000407c <s_43>:
void s_43(struct eventData * pxDataArray) 
{}
    407c:	b480      	push	{r7}
    407e:	b083      	sub	sp, #12
    4080:	af00      	add	r7, sp, #0
    4082:	6078      	str	r0, [r7, #4]
    4084:	370c      	adds	r7, #12
    4086:	46bd      	mov	sp, r7
    4088:	f85d 7b04 	ldr.w	r7, [sp], #4
    408c:	4770      	bx	lr
    408e:	bf00      	nop

00004090 <s_44>:

/*task 12, servant 32, 33*/
void s_44(struct eventData * pxDataArray) 
{
    4090:	b480      	push	{r7}
    4092:	b083      	sub	sp, #12
    4094:	af00      	add	r7, sp, #0
    4096:	6078      	str	r0, [r7, #4]
}
    4098:	370c      	adds	r7, #12
    409a:	46bd      	mov	sp, r7
    409c:	f85d 7b04 	ldr.w	r7, [sp], #4
    40a0:	4770      	bx	lr
    40a2:	bf00      	nop

000040a4 <s_45>:
void s_45(struct eventData * pxDataArray) 
{
    40a4:	b580      	push	{r7, lr}
    40a6:	b082      	sub	sp, #8
    40a8:	af00      	add	r7, sp, #0
    40aa:	6078      	str	r0, [r7, #4]
    // main.c
    send_boot();
    40ac:	f003 fa1e 	bl	74ec <send_boot>
    send_attitude();
    40b0:	f004 f9f4 	bl	849c <send_attitude>
    send_adc();
    40b4:	f004 feee 	bl	8e94 <send_adc>
    send_settings();
    40b8:	f005 f97c 	bl	93b4 <send_settings>
    send_desired();
    40bc:	f005 fd86 	bl	9bcc <send_desired>
    send_bat();
    40c0:	f006 fcbc 	bl	aa3c <send_bat>
    send_climb();
    40c4:	f007 f878 	bl	b1b8 <send_climb>
    send_mode();
    40c8:	f007 fdf0 	bl	bcac <send_mode>
    send_debug();
    40cc:	f008 f8ca 	bl	c264 <send_debug>
    send_nav_ref();
    40d0:	f008 fba6 	bl	c820 <send_nav_ref>
}
    40d4:	3708      	adds	r7, #8
    40d6:	46bd      	mov	sp, r7
    40d8:	bd80      	pop	{r7, pc}
    40da:	bf00      	nop

000040dc <s_46>:
void s_46(struct eventData * pxDataArray) 
{}
    40dc:	b480      	push	{r7}
    40de:	b083      	sub	sp, #12
    40e0:	af00      	add	r7, sp, #0
    40e2:	6078      	str	r0, [r7, #4]
    40e4:	370c      	adds	r7, #12
    40e6:	46bd      	mov	sp, r7
    40e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    40ec:	4770      	bx	lr
    40ee:	bf00      	nop

000040f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    40f0:	b480      	push	{r7}
    40f2:	b083      	sub	sp, #12
    40f4:	af00      	add	r7, sp, #0
    40f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    40f8:	687b      	ldr	r3, [r7, #4]
    40fa:	f103 0208 	add.w	r2, r3, #8
    40fe:	687b      	ldr	r3, [r7, #4]
    4100:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    4102:	687b      	ldr	r3, [r7, #4]
    4104:	f04f 32ff 	mov.w	r2, #4294967295
    4108:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    410a:	687b      	ldr	r3, [r7, #4]
    410c:	f103 0208 	add.w	r2, r3, #8
    4110:	687b      	ldr	r3, [r7, #4]
    4112:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    4114:	687b      	ldr	r3, [r7, #4]
    4116:	f103 0208 	add.w	r2, r3, #8
    411a:	687b      	ldr	r3, [r7, #4]
    411c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    411e:	687b      	ldr	r3, [r7, #4]
    4120:	2200      	movs	r2, #0
    4122:	601a      	str	r2, [r3, #0]
}
    4124:	370c      	adds	r7, #12
    4126:	46bd      	mov	sp, r7
    4128:	f85d 7b04 	ldr.w	r7, [sp], #4
    412c:	4770      	bx	lr
    412e:	bf00      	nop

00004130 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    4130:	b480      	push	{r7}
    4132:	b083      	sub	sp, #12
    4134:	af00      	add	r7, sp, #0
    4136:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    4138:	687b      	ldr	r3, [r7, #4]
    413a:	2200      	movs	r2, #0
    413c:	611a      	str	r2, [r3, #16]
}
    413e:	370c      	adds	r7, #12
    4140:	46bd      	mov	sp, r7
    4142:	f85d 7b04 	ldr.w	r7, [sp], #4
    4146:	4770      	bx	lr

00004148 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    4148:	b480      	push	{r7}
    414a:	b085      	sub	sp, #20
    414c:	af00      	add	r7, sp, #0
    414e:	6078      	str	r0, [r7, #4]
    4150:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    4152:	687b      	ldr	r3, [r7, #4]
    4154:	685b      	ldr	r3, [r3, #4]
    4156:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    4158:	68fb      	ldr	r3, [r7, #12]
    415a:	685a      	ldr	r2, [r3, #4]
    415c:	683b      	ldr	r3, [r7, #0]
    415e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    4160:	687b      	ldr	r3, [r7, #4]
    4162:	685a      	ldr	r2, [r3, #4]
    4164:	683b      	ldr	r3, [r7, #0]
    4166:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    4168:	68fb      	ldr	r3, [r7, #12]
    416a:	685b      	ldr	r3, [r3, #4]
    416c:	683a      	ldr	r2, [r7, #0]
    416e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    4170:	68fb      	ldr	r3, [r7, #12]
    4172:	683a      	ldr	r2, [r7, #0]
    4174:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    4176:	687b      	ldr	r3, [r7, #4]
    4178:	683a      	ldr	r2, [r7, #0]
    417a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    417c:	683b      	ldr	r3, [r7, #0]
    417e:	687a      	ldr	r2, [r7, #4]
    4180:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    4182:	687b      	ldr	r3, [r7, #4]
    4184:	681b      	ldr	r3, [r3, #0]
    4186:	1c5a      	adds	r2, r3, #1
    4188:	687b      	ldr	r3, [r7, #4]
    418a:	601a      	str	r2, [r3, #0]
}
    418c:	3714      	adds	r7, #20
    418e:	46bd      	mov	sp, r7
    4190:	f85d 7b04 	ldr.w	r7, [sp], #4
    4194:	4770      	bx	lr
    4196:	bf00      	nop

00004198 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    4198:	b480      	push	{r7}
    419a:	b085      	sub	sp, #20
    419c:	af00      	add	r7, sp, #0
    419e:	6078      	str	r0, [r7, #4]
    41a0:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    41a2:	683b      	ldr	r3, [r7, #0]
    41a4:	681b      	ldr	r3, [r3, #0]
    41a6:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    41a8:	68bb      	ldr	r3, [r7, #8]
    41aa:	f1b3 3fff 	cmp.w	r3, #4294967295
    41ae:	d103      	bne.n	41b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    41b0:	687b      	ldr	r3, [r7, #4]
    41b2:	691b      	ldr	r3, [r3, #16]
    41b4:	60fb      	str	r3, [r7, #12]
    41b6:	e00c      	b.n	41d2 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    41b8:	687b      	ldr	r3, [r7, #4]
    41ba:	3308      	adds	r3, #8
    41bc:	60fb      	str	r3, [r7, #12]
    41be:	e002      	b.n	41c6 <vListInsert+0x2e>
    41c0:	68fb      	ldr	r3, [r7, #12]
    41c2:	685b      	ldr	r3, [r3, #4]
    41c4:	60fb      	str	r3, [r7, #12]
    41c6:	68fb      	ldr	r3, [r7, #12]
    41c8:	685b      	ldr	r3, [r3, #4]
    41ca:	681a      	ldr	r2, [r3, #0]
    41cc:	68bb      	ldr	r3, [r7, #8]
    41ce:	429a      	cmp	r2, r3
    41d0:	d9f6      	bls.n	41c0 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    41d2:	68fb      	ldr	r3, [r7, #12]
    41d4:	685a      	ldr	r2, [r3, #4]
    41d6:	683b      	ldr	r3, [r7, #0]
    41d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    41da:	683b      	ldr	r3, [r7, #0]
    41dc:	685b      	ldr	r3, [r3, #4]
    41de:	683a      	ldr	r2, [r7, #0]
    41e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    41e2:	683b      	ldr	r3, [r7, #0]
    41e4:	68fa      	ldr	r2, [r7, #12]
    41e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    41e8:	68fb      	ldr	r3, [r7, #12]
    41ea:	683a      	ldr	r2, [r7, #0]
    41ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    41ee:	683b      	ldr	r3, [r7, #0]
    41f0:	687a      	ldr	r2, [r7, #4]
    41f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    41f4:	687b      	ldr	r3, [r7, #4]
    41f6:	681b      	ldr	r3, [r3, #0]
    41f8:	1c5a      	adds	r2, r3, #1
    41fa:	687b      	ldr	r3, [r7, #4]
    41fc:	601a      	str	r2, [r3, #0]
}
    41fe:	3714      	adds	r7, #20
    4200:	46bd      	mov	sp, r7
    4202:	f85d 7b04 	ldr.w	r7, [sp], #4
    4206:	4770      	bx	lr

00004208 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    4208:	b480      	push	{r7}
    420a:	b085      	sub	sp, #20
    420c:	af00      	add	r7, sp, #0
    420e:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    4210:	687b      	ldr	r3, [r7, #4]
    4212:	685b      	ldr	r3, [r3, #4]
    4214:	687a      	ldr	r2, [r7, #4]
    4216:	6892      	ldr	r2, [r2, #8]
    4218:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    421a:	687b      	ldr	r3, [r7, #4]
    421c:	689b      	ldr	r3, [r3, #8]
    421e:	687a      	ldr	r2, [r7, #4]
    4220:	6852      	ldr	r2, [r2, #4]
    4222:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    4224:	687b      	ldr	r3, [r7, #4]
    4226:	691b      	ldr	r3, [r3, #16]
    4228:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    422a:	68fb      	ldr	r3, [r7, #12]
    422c:	685a      	ldr	r2, [r3, #4]
    422e:	687b      	ldr	r3, [r7, #4]
    4230:	429a      	cmp	r2, r3
    4232:	d103      	bne.n	423c <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    4234:	687b      	ldr	r3, [r7, #4]
    4236:	689a      	ldr	r2, [r3, #8]
    4238:	68fb      	ldr	r3, [r7, #12]
    423a:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    423c:	687b      	ldr	r3, [r7, #4]
    423e:	2200      	movs	r2, #0
    4240:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    4242:	68fb      	ldr	r3, [r7, #12]
    4244:	681b      	ldr	r3, [r3, #0]
    4246:	1e5a      	subs	r2, r3, #1
    4248:	68fb      	ldr	r3, [r7, #12]
    424a:	601a      	str	r2, [r3, #0]
}
    424c:	3714      	adds	r7, #20
    424e:	46bd      	mov	sp, r7
    4250:	f85d 7b04 	ldr.w	r7, [sp], #4
    4254:	4770      	bx	lr
    4256:	bf00      	nop

00004258 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    4258:	b580      	push	{r7, lr}
    425a:	b084      	sub	sp, #16
    425c:	af00      	add	r7, sp, #0
    425e:	6078      	str	r0, [r7, #4]
    4260:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    4262:	2301      	movs	r3, #1
    4264:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    4266:	683b      	ldr	r3, [r7, #0]
    4268:	2b01      	cmp	r3, #1
    426a:	d00b      	beq.n	4284 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    426c:	687b      	ldr	r3, [r7, #4]
    426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4270:	2b00      	cmp	r3, #0
    4272:	d001      	beq.n	4278 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    4274:	2300      	movs	r3, #0
    4276:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4278:	687b      	ldr	r3, [r7, #4]
    427a:	691b      	ldr	r3, [r3, #16]
    427c:	2b00      	cmp	r3, #0
    427e:	d001      	beq.n	4284 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    4280:	2300      	movs	r3, #0
    4282:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    4284:	68fb      	ldr	r3, [r7, #12]
    4286:	2b01      	cmp	r3, #1
    4288:	d12f      	bne.n	42ea <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    428a:	687b      	ldr	r3, [r7, #4]
    428c:	681a      	ldr	r2, [r3, #0]
    428e:	687b      	ldr	r3, [r7, #4]
    4290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4292:	6879      	ldr	r1, [r7, #4]
    4294:	6c09      	ldr	r1, [r1, #64]	; 0x40
    4296:	fb01 f303 	mul.w	r3, r1, r3
    429a:	441a      	add	r2, r3
    429c:	687b      	ldr	r3, [r7, #4]
    429e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    42a0:	687b      	ldr	r3, [r7, #4]
    42a2:	2200      	movs	r2, #0
    42a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    42a6:	687b      	ldr	r3, [r7, #4]
    42a8:	681a      	ldr	r2, [r3, #0]
    42aa:	687b      	ldr	r3, [r7, #4]
    42ac:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    42ae:	687b      	ldr	r3, [r7, #4]
    42b0:	681a      	ldr	r2, [r3, #0]
    42b2:	687b      	ldr	r3, [r7, #4]
    42b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    42b6:	3b01      	subs	r3, #1
    42b8:	6879      	ldr	r1, [r7, #4]
    42ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
    42bc:	fb01 f303 	mul.w	r3, r1, r3
    42c0:	441a      	add	r2, r3
    42c2:	687b      	ldr	r3, [r7, #4]
    42c4:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    42c6:	687b      	ldr	r3, [r7, #4]
    42c8:	f04f 32ff 	mov.w	r2, #4294967295
    42cc:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    42ce:	687b      	ldr	r3, [r7, #4]
    42d0:	f04f 32ff 	mov.w	r2, #4294967295
    42d4:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    42d6:	687b      	ldr	r3, [r7, #4]
    42d8:	3310      	adds	r3, #16
    42da:	4618      	mov	r0, r3
    42dc:	f7ff ff08 	bl	40f0 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    42e0:	687b      	ldr	r3, [r7, #4]
    42e2:	3324      	adds	r3, #36	; 0x24
    42e4:	4618      	mov	r0, r3
    42e6:	f7ff ff03 	bl	40f0 <vListInitialise>
	}

	return xReturn;
    42ea:	68fb      	ldr	r3, [r7, #12]
}
    42ec:	4618      	mov	r0, r3
    42ee:	3710      	adds	r7, #16
    42f0:	46bd      	mov	sp, r7
    42f2:	bd80      	pop	{r7, pc}

000042f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    42f4:	b580      	push	{r7, lr}
    42f6:	b088      	sub	sp, #32
    42f8:	af00      	add	r7, sp, #0
    42fa:	60f8      	str	r0, [r7, #12]
    42fc:	60b9      	str	r1, [r7, #8]
    42fe:	4613      	mov	r3, r2
    4300:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    4302:	2300      	movs	r3, #0
    4304:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    4306:	68fb      	ldr	r3, [r7, #12]
    4308:	2b00      	cmp	r3, #0
    430a:	d026      	beq.n	435a <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    430c:	204c      	movs	r0, #76	; 0x4c
    430e:	f001 fd41 	bl	5d94 <pvPortMalloc>
    4312:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    4314:	69bb      	ldr	r3, [r7, #24]
    4316:	2b00      	cmp	r3, #0
    4318:	d01f      	beq.n	435a <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    431a:	68fb      	ldr	r3, [r7, #12]
    431c:	68ba      	ldr	r2, [r7, #8]
    431e:	fb02 f303 	mul.w	r3, r2, r3
    4322:	3301      	adds	r3, #1
    4324:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    4326:	6978      	ldr	r0, [r7, #20]
    4328:	f001 fd34 	bl	5d94 <pvPortMalloc>
    432c:	4602      	mov	r2, r0
    432e:	69bb      	ldr	r3, [r7, #24]
    4330:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    4332:	69bb      	ldr	r3, [r7, #24]
    4334:	681b      	ldr	r3, [r3, #0]
    4336:	2b00      	cmp	r3, #0
    4338:	d00c      	beq.n	4354 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    433a:	69bb      	ldr	r3, [r7, #24]
    433c:	68fa      	ldr	r2, [r7, #12]
    433e:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    4340:	69bb      	ldr	r3, [r7, #24]
    4342:	68ba      	ldr	r2, [r7, #8]
    4344:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    4346:	69b8      	ldr	r0, [r7, #24]
    4348:	2101      	movs	r1, #1
    434a:	f7ff ff85 	bl	4258 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    434e:	69bb      	ldr	r3, [r7, #24]
    4350:	61fb      	str	r3, [r7, #28]
    4352:	e002      	b.n	435a <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    4354:	69b8      	ldr	r0, [r7, #24]
    4356:	f001 fde1 	bl	5f1c <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    435a:	69fb      	ldr	r3, [r7, #28]
}
    435c:	4618      	mov	r0, r3
    435e:	3720      	adds	r7, #32
    4360:	46bd      	mov	sp, r7
    4362:	bd80      	pop	{r7, pc}

00004364 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    4364:	b580      	push	{r7, lr}
    4366:	b084      	sub	sp, #16
    4368:	af00      	add	r7, sp, #0
    436a:	4603      	mov	r3, r0
    436c:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    436e:	204c      	movs	r0, #76	; 0x4c
    4370:	f001 fd10 	bl	5d94 <pvPortMalloc>
    4374:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    4376:	68fb      	ldr	r3, [r7, #12]
    4378:	2b00      	cmp	r3, #0
    437a:	d02c      	beq.n	43d6 <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    437c:	68fb      	ldr	r3, [r7, #12]
    437e:	2200      	movs	r2, #0
    4380:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    4382:	68fb      	ldr	r3, [r7, #12]
    4384:	2200      	movs	r2, #0
    4386:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    4388:	68fb      	ldr	r3, [r7, #12]
    438a:	2200      	movs	r2, #0
    438c:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    438e:	68fb      	ldr	r3, [r7, #12]
    4390:	2200      	movs	r2, #0
    4392:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4394:	68fb      	ldr	r3, [r7, #12]
    4396:	2200      	movs	r2, #0
    4398:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    439a:	68fb      	ldr	r3, [r7, #12]
    439c:	2201      	movs	r2, #1
    439e:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    43a0:	68fb      	ldr	r3, [r7, #12]
    43a2:	2200      	movs	r2, #0
    43a4:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    43a6:	68fb      	ldr	r3, [r7, #12]
    43a8:	f04f 32ff 	mov.w	r2, #4294967295
    43ac:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    43ae:	68fb      	ldr	r3, [r7, #12]
    43b0:	f04f 32ff 	mov.w	r2, #4294967295
    43b4:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    43b6:	68fb      	ldr	r3, [r7, #12]
    43b8:	3310      	adds	r3, #16
    43ba:	4618      	mov	r0, r3
    43bc:	f7ff fe98 	bl	40f0 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    43c0:	68fb      	ldr	r3, [r7, #12]
    43c2:	3324      	adds	r3, #36	; 0x24
    43c4:	4618      	mov	r0, r3
    43c6:	f7ff fe93 	bl	40f0 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    43ca:	68f8      	ldr	r0, [r7, #12]
    43cc:	2100      	movs	r1, #0
    43ce:	2200      	movs	r2, #0
    43d0:	2300      	movs	r3, #0
    43d2:	f000 f81d 	bl	4410 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    43d6:	68fb      	ldr	r3, [r7, #12]
	}
    43d8:	4618      	mov	r0, r3
    43da:	3710      	adds	r7, #16
    43dc:	46bd      	mov	sp, r7
    43de:	bd80      	pop	{r7, pc}

000043e0 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    43e0:	b580      	push	{r7, lr}
    43e2:	b084      	sub	sp, #16
    43e4:	af00      	add	r7, sp, #0
    43e6:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    43e8:	f001 fc5a 	bl	5ca0 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    43ec:	687b      	ldr	r3, [r7, #4]
    43ee:	681b      	ldr	r3, [r3, #0]
    43f0:	2b00      	cmp	r3, #0
    43f2:	d103      	bne.n	43fc <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    43f4:	687b      	ldr	r3, [r7, #4]
    43f6:	685b      	ldr	r3, [r3, #4]
    43f8:	60fb      	str	r3, [r7, #12]
    43fa:	e001      	b.n	4400 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    43fc:	2300      	movs	r3, #0
    43fe:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    4400:	f001 fc64 	bl	5ccc <vPortExitCritical>
		
		return pxReturn;
    4404:	68fb      	ldr	r3, [r7, #12]
	}
    4406:	4618      	mov	r0, r3
    4408:	3710      	adds	r7, #16
    440a:	46bd      	mov	sp, r7
    440c:	bd80      	pop	{r7, pc}
    440e:	bf00      	nop

00004410 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    4410:	b580      	push	{r7, lr}
    4412:	b088      	sub	sp, #32
    4414:	af00      	add	r7, sp, #0
    4416:	60f8      	str	r0, [r7, #12]
    4418:	60b9      	str	r1, [r7, #8]
    441a:	607a      	str	r2, [r7, #4]
    441c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    441e:	2300      	movs	r3, #0
    4420:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    4422:	f001 fc3d 	bl	5ca0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    4426:	68fb      	ldr	r3, [r7, #12]
    4428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    442a:	68fb      	ldr	r3, [r7, #12]
    442c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    442e:	429a      	cmp	r2, r3
    4430:	d216      	bcs.n	4460 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4432:	68f8      	ldr	r0, [r7, #12]
    4434:	68b9      	ldr	r1, [r7, #8]
    4436:	683a      	ldr	r2, [r7, #0]
    4438:	f000 f9d6 	bl	47e8 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    443c:	68fb      	ldr	r3, [r7, #12]
    443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4440:	2b00      	cmp	r3, #0
    4442:	d009      	beq.n	4458 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    4444:	68fb      	ldr	r3, [r7, #12]
    4446:	3324      	adds	r3, #36	; 0x24
    4448:	4618      	mov	r0, r3
    444a:	f001 f89f 	bl	558c <xTaskRemoveFromEventList>
    444e:	4603      	mov	r3, r0
    4450:	2b01      	cmp	r3, #1
    4452:	d101      	bne.n	4458 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    4454:	f001 fc16 	bl	5c84 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    4458:	f001 fc38 	bl	5ccc <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    445c:	2301      	movs	r3, #1
    445e:	e059      	b.n	4514 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4460:	687b      	ldr	r3, [r7, #4]
    4462:	2b00      	cmp	r3, #0
    4464:	d103      	bne.n	446e <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4466:	f001 fc31 	bl	5ccc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    446a:	2300      	movs	r3, #0
    446c:	e052      	b.n	4514 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    446e:	69fb      	ldr	r3, [r7, #28]
    4470:	2b00      	cmp	r3, #0
    4472:	d106      	bne.n	4482 <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    4474:	f107 0314 	add.w	r3, r7, #20
    4478:	4618      	mov	r0, r3
    447a:	f001 f8df 	bl	563c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    447e:	2301      	movs	r3, #1
    4480:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    4482:	f001 fc23 	bl	5ccc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4486:	f000 fe93 	bl	51b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    448a:	f001 fc09 	bl	5ca0 <vPortEnterCritical>
    448e:	68fb      	ldr	r3, [r7, #12]
    4490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4492:	f1b3 3fff 	cmp.w	r3, #4294967295
    4496:	d102      	bne.n	449e <xQueueGenericSend+0x8e>
    4498:	68fb      	ldr	r3, [r7, #12]
    449a:	2200      	movs	r2, #0
    449c:	645a      	str	r2, [r3, #68]	; 0x44
    449e:	68fb      	ldr	r3, [r7, #12]
    44a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    44a2:	f1b3 3fff 	cmp.w	r3, #4294967295
    44a6:	d102      	bne.n	44ae <xQueueGenericSend+0x9e>
    44a8:	68fb      	ldr	r3, [r7, #12]
    44aa:	2200      	movs	r2, #0
    44ac:	649a      	str	r2, [r3, #72]	; 0x48
    44ae:	f001 fc0d 	bl	5ccc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    44b2:	f107 0214 	add.w	r2, r7, #20
    44b6:	1d3b      	adds	r3, r7, #4
    44b8:	4610      	mov	r0, r2
    44ba:	4619      	mov	r1, r3
    44bc:	f001 f8d6 	bl	566c <xTaskCheckForTimeOut>
    44c0:	4603      	mov	r3, r0
    44c2:	2b00      	cmp	r3, #0
    44c4:	d11e      	bne.n	4504 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    44c6:	68f8      	ldr	r0, [r7, #12]
    44c8:	f000 fa86 	bl	49d8 <prvIsQueueFull>
    44cc:	4603      	mov	r3, r0
    44ce:	2b00      	cmp	r3, #0
    44d0:	d012      	beq.n	44f8 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    44d2:	68fb      	ldr	r3, [r7, #12]
    44d4:	f103 0210 	add.w	r2, r3, #16
    44d8:	687b      	ldr	r3, [r7, #4]
    44da:	4610      	mov	r0, r2
    44dc:	4619      	mov	r1, r3
    44de:	f001 f81d 	bl	551c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    44e2:	68f8      	ldr	r0, [r7, #12]
    44e4:	f000 fa02 	bl	48ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    44e8:	f000 fe74 	bl	51d4 <xTaskResumeAll>
    44ec:	4603      	mov	r3, r0
    44ee:	2b00      	cmp	r3, #0
    44f0:	d10f      	bne.n	4512 <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    44f2:	f001 fbc7 	bl	5c84 <vPortYieldFromISR>
    44f6:	e00c      	b.n	4512 <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    44f8:	68f8      	ldr	r0, [r7, #12]
    44fa:	f000 f9f7 	bl	48ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
    44fe:	f000 fe69 	bl	51d4 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    4502:	e78e      	b.n	4422 <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    4504:	68f8      	ldr	r0, [r7, #12]
    4506:	f000 f9f1 	bl	48ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
    450a:	f000 fe63 	bl	51d4 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    450e:	2300      	movs	r3, #0
    4510:	e000      	b.n	4514 <xQueueGenericSend+0x104>
		}
	}
    4512:	e786      	b.n	4422 <xQueueGenericSend+0x12>
}
    4514:	4618      	mov	r0, r3
    4516:	3720      	adds	r7, #32
    4518:	46bd      	mov	sp, r7
    451a:	bd80      	pop	{r7, pc}

0000451c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    451c:	b580      	push	{r7, lr}
    451e:	b086      	sub	sp, #24
    4520:	af00      	add	r7, sp, #0
    4522:	60f8      	str	r0, [r7, #12]
    4524:	60b9      	str	r1, [r7, #8]
    4526:	607a      	str	r2, [r7, #4]
    4528:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    452a:	2300      	movs	r3, #0
    452c:	613b      	str	r3, [r7, #16]
    452e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4532:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    4536:	68fb      	ldr	r3, [r7, #12]
    4538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    453a:	68fb      	ldr	r3, [r7, #12]
    453c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    453e:	429a      	cmp	r2, r3
    4540:	d221      	bcs.n	4586 <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4542:	68f8      	ldr	r0, [r7, #12]
    4544:	68b9      	ldr	r1, [r7, #8]
    4546:	683a      	ldr	r2, [r7, #0]
    4548:	f000 f94e 	bl	47e8 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    454c:	68fb      	ldr	r3, [r7, #12]
    454e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4550:	f1b3 3fff 	cmp.w	r3, #4294967295
    4554:	d10f      	bne.n	4576 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4556:	68fb      	ldr	r3, [r7, #12]
    4558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    455a:	2b00      	cmp	r3, #0
    455c:	d010      	beq.n	4580 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    455e:	68fb      	ldr	r3, [r7, #12]
    4560:	3324      	adds	r3, #36	; 0x24
    4562:	4618      	mov	r0, r3
    4564:	f001 f812 	bl	558c <xTaskRemoveFromEventList>
    4568:	4603      	mov	r3, r0
    456a:	2b00      	cmp	r3, #0
    456c:	d008      	beq.n	4580 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    456e:	687b      	ldr	r3, [r7, #4]
    4570:	2201      	movs	r2, #1
    4572:	601a      	str	r2, [r3, #0]
    4574:	e004      	b.n	4580 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    4576:	68fb      	ldr	r3, [r7, #12]
    4578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    457a:	1c5a      	adds	r2, r3, #1
    457c:	68fb      	ldr	r3, [r7, #12]
    457e:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    4580:	2301      	movs	r3, #1
    4582:	617b      	str	r3, [r7, #20]
    4584:	e001      	b.n	458a <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    4586:	2300      	movs	r3, #0
    4588:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    458a:	f04f 0000 	mov.w	r0, #0
    458e:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4592:	697b      	ldr	r3, [r7, #20]
}
    4594:	4618      	mov	r0, r3
    4596:	3718      	adds	r7, #24
    4598:	46bd      	mov	sp, r7
    459a:	bd80      	pop	{r7, pc}

0000459c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    459c:	b580      	push	{r7, lr}
    459e:	b088      	sub	sp, #32
    45a0:	af00      	add	r7, sp, #0
    45a2:	60f8      	str	r0, [r7, #12]
    45a4:	60b9      	str	r1, [r7, #8]
    45a6:	607a      	str	r2, [r7, #4]
    45a8:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    45aa:	2300      	movs	r3, #0
    45ac:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    45ae:	f001 fb77 	bl	5ca0 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    45b2:	68fb      	ldr	r3, [r7, #12]
    45b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    45b6:	2b00      	cmp	r3, #0
    45b8:	d03b      	beq.n	4632 <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    45ba:	68fb      	ldr	r3, [r7, #12]
    45bc:	68db      	ldr	r3, [r3, #12]
    45be:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    45c0:	68f8      	ldr	r0, [r7, #12]
    45c2:	68b9      	ldr	r1, [r7, #8]
    45c4:	f000 f96c 	bl	48a0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    45c8:	683b      	ldr	r3, [r7, #0]
    45ca:	2b00      	cmp	r3, #0
    45cc:	d11c      	bne.n	4608 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    45ce:	68fb      	ldr	r3, [r7, #12]
    45d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    45d2:	1e5a      	subs	r2, r3, #1
    45d4:	68fb      	ldr	r3, [r7, #12]
    45d6:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    45d8:	68fb      	ldr	r3, [r7, #12]
    45da:	681b      	ldr	r3, [r3, #0]
    45dc:	2b00      	cmp	r3, #0
    45de:	d104      	bne.n	45ea <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    45e0:	f001 f9f6 	bl	59d0 <xTaskGetCurrentTaskHandle>
    45e4:	4602      	mov	r2, r0
    45e6:	68fb      	ldr	r3, [r7, #12]
    45e8:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    45ea:	68fb      	ldr	r3, [r7, #12]
    45ec:	691b      	ldr	r3, [r3, #16]
    45ee:	2b00      	cmp	r3, #0
    45f0:	d01b      	beq.n	462a <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    45f2:	68fb      	ldr	r3, [r7, #12]
    45f4:	3310      	adds	r3, #16
    45f6:	4618      	mov	r0, r3
    45f8:	f000 ffc8 	bl	558c <xTaskRemoveFromEventList>
    45fc:	4603      	mov	r3, r0
    45fe:	2b01      	cmp	r3, #1
    4600:	d113      	bne.n	462a <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    4602:	f001 fb3f 	bl	5c84 <vPortYieldFromISR>
    4606:	e010      	b.n	462a <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    4608:	68fb      	ldr	r3, [r7, #12]
    460a:	69ba      	ldr	r2, [r7, #24]
    460c:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    460e:	68fb      	ldr	r3, [r7, #12]
    4610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4612:	2b00      	cmp	r3, #0
    4614:	d009      	beq.n	462a <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4616:	68fb      	ldr	r3, [r7, #12]
    4618:	3324      	adds	r3, #36	; 0x24
    461a:	4618      	mov	r0, r3
    461c:	f000 ffb6 	bl	558c <xTaskRemoveFromEventList>
    4620:	4603      	mov	r3, r0
    4622:	2b00      	cmp	r3, #0
    4624:	d001      	beq.n	462a <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    4626:	f001 fb2d 	bl	5c84 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    462a:	f001 fb4f 	bl	5ccc <vPortExitCritical>
				return pdPASS;
    462e:	2301      	movs	r3, #1
    4630:	e066      	b.n	4700 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4632:	687b      	ldr	r3, [r7, #4]
    4634:	2b00      	cmp	r3, #0
    4636:	d103      	bne.n	4640 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4638:	f001 fb48 	bl	5ccc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    463c:	2300      	movs	r3, #0
    463e:	e05f      	b.n	4700 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    4640:	69fb      	ldr	r3, [r7, #28]
    4642:	2b00      	cmp	r3, #0
    4644:	d106      	bne.n	4654 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    4646:	f107 0310 	add.w	r3, r7, #16
    464a:	4618      	mov	r0, r3
    464c:	f000 fff6 	bl	563c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4650:	2301      	movs	r3, #1
    4652:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    4654:	f001 fb3a 	bl	5ccc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4658:	f000 fdaa 	bl	51b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    465c:	f001 fb20 	bl	5ca0 <vPortEnterCritical>
    4660:	68fb      	ldr	r3, [r7, #12]
    4662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4664:	f1b3 3fff 	cmp.w	r3, #4294967295
    4668:	d102      	bne.n	4670 <xQueueGenericReceive+0xd4>
    466a:	68fb      	ldr	r3, [r7, #12]
    466c:	2200      	movs	r2, #0
    466e:	645a      	str	r2, [r3, #68]	; 0x44
    4670:	68fb      	ldr	r3, [r7, #12]
    4672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4674:	f1b3 3fff 	cmp.w	r3, #4294967295
    4678:	d102      	bne.n	4680 <xQueueGenericReceive+0xe4>
    467a:	68fb      	ldr	r3, [r7, #12]
    467c:	2200      	movs	r2, #0
    467e:	649a      	str	r2, [r3, #72]	; 0x48
    4680:	f001 fb24 	bl	5ccc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4684:	f107 0210 	add.w	r2, r7, #16
    4688:	1d3b      	adds	r3, r7, #4
    468a:	4610      	mov	r0, r2
    468c:	4619      	mov	r1, r3
    468e:	f000 ffed 	bl	566c <xTaskCheckForTimeOut>
    4692:	4603      	mov	r3, r0
    4694:	2b00      	cmp	r3, #0
    4696:	d12b      	bne.n	46f0 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4698:	68f8      	ldr	r0, [r7, #12]
    469a:	f000 f973 	bl	4984 <prvIsQueueEmpty>
    469e:	4603      	mov	r3, r0
    46a0:	2b00      	cmp	r3, #0
    46a2:	d01f      	beq.n	46e4 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    46a4:	68fb      	ldr	r3, [r7, #12]
    46a6:	681b      	ldr	r3, [r3, #0]
    46a8:	2b00      	cmp	r3, #0
    46aa:	d108      	bne.n	46be <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    46ac:	f001 faf8 	bl	5ca0 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    46b0:	68fb      	ldr	r3, [r7, #12]
    46b2:	685b      	ldr	r3, [r3, #4]
    46b4:	4618      	mov	r0, r3
    46b6:	f001 f99b 	bl	59f0 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    46ba:	f001 fb07 	bl	5ccc <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    46be:	68fb      	ldr	r3, [r7, #12]
    46c0:	f103 0224 	add.w	r2, r3, #36	; 0x24
    46c4:	687b      	ldr	r3, [r7, #4]
    46c6:	4610      	mov	r0, r2
    46c8:	4619      	mov	r1, r3
    46ca:	f000 ff27 	bl	551c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    46ce:	68f8      	ldr	r0, [r7, #12]
    46d0:	f000 f90c 	bl	48ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    46d4:	f000 fd7e 	bl	51d4 <xTaskResumeAll>
    46d8:	4603      	mov	r3, r0
    46da:	2b00      	cmp	r3, #0
    46dc:	d10f      	bne.n	46fe <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    46de:	f001 fad1 	bl	5c84 <vPortYieldFromISR>
    46e2:	e00c      	b.n	46fe <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    46e4:	68f8      	ldr	r0, [r7, #12]
    46e6:	f000 f901 	bl	48ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
    46ea:	f000 fd73 	bl	51d4 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    46ee:	e75e      	b.n	45ae <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    46f0:	68f8      	ldr	r0, [r7, #12]
    46f2:	f000 f8fb 	bl	48ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
    46f6:	f000 fd6d 	bl	51d4 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    46fa:	2300      	movs	r3, #0
    46fc:	e000      	b.n	4700 <xQueueGenericReceive+0x164>
		}
	}
    46fe:	e756      	b.n	45ae <xQueueGenericReceive+0x12>
}
    4700:	4618      	mov	r0, r3
    4702:	3720      	adds	r7, #32
    4704:	46bd      	mov	sp, r7
    4706:	bd80      	pop	{r7, pc}

00004708 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    4708:	b580      	push	{r7, lr}
    470a:	b086      	sub	sp, #24
    470c:	af00      	add	r7, sp, #0
    470e:	60f8      	str	r0, [r7, #12]
    4710:	60b9      	str	r1, [r7, #8]
    4712:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4714:	2300      	movs	r3, #0
    4716:	613b      	str	r3, [r7, #16]
    4718:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    471c:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    4720:	68fb      	ldr	r3, [r7, #12]
    4722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4724:	2b00      	cmp	r3, #0
    4726:	d025      	beq.n	4774 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    4728:	68f8      	ldr	r0, [r7, #12]
    472a:	68b9      	ldr	r1, [r7, #8]
    472c:	f000 f8b8 	bl	48a0 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    4730:	68fb      	ldr	r3, [r7, #12]
    4732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4734:	1e5a      	subs	r2, r3, #1
    4736:	68fb      	ldr	r3, [r7, #12]
    4738:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    473a:	68fb      	ldr	r3, [r7, #12]
    473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    473e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4742:	d10f      	bne.n	4764 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4744:	68fb      	ldr	r3, [r7, #12]
    4746:	691b      	ldr	r3, [r3, #16]
    4748:	2b00      	cmp	r3, #0
    474a:	d010      	beq.n	476e <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    474c:	68fb      	ldr	r3, [r7, #12]
    474e:	3310      	adds	r3, #16
    4750:	4618      	mov	r0, r3
    4752:	f000 ff1b 	bl	558c <xTaskRemoveFromEventList>
    4756:	4603      	mov	r3, r0
    4758:	2b00      	cmp	r3, #0
    475a:	d008      	beq.n	476e <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    475c:	687b      	ldr	r3, [r7, #4]
    475e:	2201      	movs	r2, #1
    4760:	601a      	str	r2, [r3, #0]
    4762:	e004      	b.n	476e <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    4764:	68fb      	ldr	r3, [r7, #12]
    4766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4768:	1c5a      	adds	r2, r3, #1
    476a:	68fb      	ldr	r3, [r7, #12]
    476c:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    476e:	2301      	movs	r3, #1
    4770:	617b      	str	r3, [r7, #20]
    4772:	e001      	b.n	4778 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    4774:	2300      	movs	r3, #0
    4776:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4778:	f04f 0000 	mov.w	r0, #0
    477c:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4780:	697b      	ldr	r3, [r7, #20]
}
    4782:	4618      	mov	r0, r3
    4784:	3718      	adds	r7, #24
    4786:	46bd      	mov	sp, r7
    4788:	bd80      	pop	{r7, pc}
    478a:	bf00      	nop

0000478c <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    478c:	b580      	push	{r7, lr}
    478e:	b084      	sub	sp, #16
    4790:	af00      	add	r7, sp, #0
    4792:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    4794:	f001 fa84 	bl	5ca0 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    4798:	687b      	ldr	r3, [r7, #4]
    479a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    479c:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    479e:	f001 fa95 	bl	5ccc <vPortExitCritical>

	return uxReturn;
    47a2:	68fb      	ldr	r3, [r7, #12]
}
    47a4:	4618      	mov	r0, r3
    47a6:	3710      	adds	r7, #16
    47a8:	46bd      	mov	sp, r7
    47aa:	bd80      	pop	{r7, pc}

000047ac <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    47ac:	b480      	push	{r7}
    47ae:	b085      	sub	sp, #20
    47b0:	af00      	add	r7, sp, #0
    47b2:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    47b4:	687b      	ldr	r3, [r7, #4]
    47b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47b8:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    47ba:	68fb      	ldr	r3, [r7, #12]
}
    47bc:	4618      	mov	r0, r3
    47be:	3714      	adds	r7, #20
    47c0:	46bd      	mov	sp, r7
    47c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    47c6:	4770      	bx	lr

000047c8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    47c8:	b580      	push	{r7, lr}
    47ca:	b082      	sub	sp, #8
    47cc:	af00      	add	r7, sp, #0
    47ce:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    47d0:	687b      	ldr	r3, [r7, #4]
    47d2:	681b      	ldr	r3, [r3, #0]
    47d4:	4618      	mov	r0, r3
    47d6:	f001 fba1 	bl	5f1c <vPortFree>
	vPortFree( pxQueue );
    47da:	6878      	ldr	r0, [r7, #4]
    47dc:	f001 fb9e 	bl	5f1c <vPortFree>
}
    47e0:	3708      	adds	r7, #8
    47e2:	46bd      	mov	sp, r7
    47e4:	bd80      	pop	{r7, pc}
    47e6:	bf00      	nop

000047e8 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    47e8:	b580      	push	{r7, lr}
    47ea:	b084      	sub	sp, #16
    47ec:	af00      	add	r7, sp, #0
    47ee:	60f8      	str	r0, [r7, #12]
    47f0:	60b9      	str	r1, [r7, #8]
    47f2:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    47f4:	68fb      	ldr	r3, [r7, #12]
    47f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    47f8:	2b00      	cmp	r3, #0
    47fa:	d10c      	bne.n	4816 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    47fc:	68fb      	ldr	r3, [r7, #12]
    47fe:	681b      	ldr	r3, [r3, #0]
    4800:	2b00      	cmp	r3, #0
    4802:	d145      	bne.n	4890 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    4804:	68fb      	ldr	r3, [r7, #12]
    4806:	685b      	ldr	r3, [r3, #4]
    4808:	4618      	mov	r0, r3
    480a:	f001 f955 	bl	5ab8 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    480e:	68fb      	ldr	r3, [r7, #12]
    4810:	2200      	movs	r2, #0
    4812:	605a      	str	r2, [r3, #4]
    4814:	e03c      	b.n	4890 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    4816:	687b      	ldr	r3, [r7, #4]
    4818:	2b00      	cmp	r3, #0
    481a:	d11a      	bne.n	4852 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    481c:	68fb      	ldr	r3, [r7, #12]
    481e:	689a      	ldr	r2, [r3, #8]
    4820:	68fb      	ldr	r3, [r7, #12]
    4822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4824:	4610      	mov	r0, r2
    4826:	68b9      	ldr	r1, [r7, #8]
    4828:	461a      	mov	r2, r3
    482a:	f014 f827 	bl	1887c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    482e:	68fb      	ldr	r3, [r7, #12]
    4830:	689a      	ldr	r2, [r3, #8]
    4832:	68fb      	ldr	r3, [r7, #12]
    4834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4836:	441a      	add	r2, r3
    4838:	68fb      	ldr	r3, [r7, #12]
    483a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    483c:	68fb      	ldr	r3, [r7, #12]
    483e:	689a      	ldr	r2, [r3, #8]
    4840:	68fb      	ldr	r3, [r7, #12]
    4842:	685b      	ldr	r3, [r3, #4]
    4844:	429a      	cmp	r2, r3
    4846:	d323      	bcc.n	4890 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    4848:	68fb      	ldr	r3, [r7, #12]
    484a:	681a      	ldr	r2, [r3, #0]
    484c:	68fb      	ldr	r3, [r7, #12]
    484e:	609a      	str	r2, [r3, #8]
    4850:	e01e      	b.n	4890 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4852:	68fb      	ldr	r3, [r7, #12]
    4854:	68da      	ldr	r2, [r3, #12]
    4856:	68fb      	ldr	r3, [r7, #12]
    4858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    485a:	4610      	mov	r0, r2
    485c:	68b9      	ldr	r1, [r7, #8]
    485e:	461a      	mov	r2, r3
    4860:	f014 f80c 	bl	1887c <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    4864:	68fb      	ldr	r3, [r7, #12]
    4866:	68da      	ldr	r2, [r3, #12]
    4868:	68fb      	ldr	r3, [r7, #12]
    486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    486c:	425b      	negs	r3, r3
    486e:	441a      	add	r2, r3
    4870:	68fb      	ldr	r3, [r7, #12]
    4872:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    4874:	68fb      	ldr	r3, [r7, #12]
    4876:	68da      	ldr	r2, [r3, #12]
    4878:	68fb      	ldr	r3, [r7, #12]
    487a:	681b      	ldr	r3, [r3, #0]
    487c:	429a      	cmp	r2, r3
    487e:	d207      	bcs.n	4890 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4880:	68fb      	ldr	r3, [r7, #12]
    4882:	685a      	ldr	r2, [r3, #4]
    4884:	68fb      	ldr	r3, [r7, #12]
    4886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4888:	425b      	negs	r3, r3
    488a:	441a      	add	r2, r3
    488c:	68fb      	ldr	r3, [r7, #12]
    488e:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    4890:	68fb      	ldr	r3, [r7, #12]
    4892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4894:	1c5a      	adds	r2, r3, #1
    4896:	68fb      	ldr	r3, [r7, #12]
    4898:	639a      	str	r2, [r3, #56]	; 0x38
}
    489a:	3710      	adds	r7, #16
    489c:	46bd      	mov	sp, r7
    489e:	bd80      	pop	{r7, pc}

000048a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    48a0:	b580      	push	{r7, lr}
    48a2:	b082      	sub	sp, #8
    48a4:	af00      	add	r7, sp, #0
    48a6:	6078      	str	r0, [r7, #4]
    48a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    48aa:	687b      	ldr	r3, [r7, #4]
    48ac:	681b      	ldr	r3, [r3, #0]
    48ae:	2b00      	cmp	r3, #0
    48b0:	d019      	beq.n	48e6 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    48b2:	687b      	ldr	r3, [r7, #4]
    48b4:	68da      	ldr	r2, [r3, #12]
    48b6:	687b      	ldr	r3, [r7, #4]
    48b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48ba:	441a      	add	r2, r3
    48bc:	687b      	ldr	r3, [r7, #4]
    48be:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    48c0:	687b      	ldr	r3, [r7, #4]
    48c2:	68da      	ldr	r2, [r3, #12]
    48c4:	687b      	ldr	r3, [r7, #4]
    48c6:	685b      	ldr	r3, [r3, #4]
    48c8:	429a      	cmp	r2, r3
    48ca:	d303      	bcc.n	48d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    48cc:	687b      	ldr	r3, [r7, #4]
    48ce:	681a      	ldr	r2, [r3, #0]
    48d0:	687b      	ldr	r3, [r7, #4]
    48d2:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    48d4:	687b      	ldr	r3, [r7, #4]
    48d6:	68da      	ldr	r2, [r3, #12]
    48d8:	687b      	ldr	r3, [r7, #4]
    48da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48dc:	6838      	ldr	r0, [r7, #0]
    48de:	4611      	mov	r1, r2
    48e0:	461a      	mov	r2, r3
    48e2:	f013 ffcb 	bl	1887c <memcpy>
	}
}
    48e6:	3708      	adds	r7, #8
    48e8:	46bd      	mov	sp, r7
    48ea:	bd80      	pop	{r7, pc}

000048ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    48ec:	b580      	push	{r7, lr}
    48ee:	b082      	sub	sp, #8
    48f0:	af00      	add	r7, sp, #0
    48f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    48f4:	f001 f9d4 	bl	5ca0 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    48f8:	e014      	b.n	4924 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    48fa:	687b      	ldr	r3, [r7, #4]
    48fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    48fe:	2b00      	cmp	r3, #0
    4900:	d00f      	beq.n	4922 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4902:	687b      	ldr	r3, [r7, #4]
    4904:	3324      	adds	r3, #36	; 0x24
    4906:	4618      	mov	r0, r3
    4908:	f000 fe40 	bl	558c <xTaskRemoveFromEventList>
    490c:	4603      	mov	r3, r0
    490e:	2b00      	cmp	r3, #0
    4910:	d001      	beq.n	4916 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    4912:	f000 fef7 	bl	5704 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    4916:	687b      	ldr	r3, [r7, #4]
    4918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    491a:	1e5a      	subs	r2, r3, #1
    491c:	687b      	ldr	r3, [r7, #4]
    491e:	649a      	str	r2, [r3, #72]	; 0x48
    4920:	e000      	b.n	4924 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    4922:	e003      	b.n	492c <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    4924:	687b      	ldr	r3, [r7, #4]
    4926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4928:	2b00      	cmp	r3, #0
    492a:	dce6      	bgt.n	48fa <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    492c:	687b      	ldr	r3, [r7, #4]
    492e:	f04f 32ff 	mov.w	r2, #4294967295
    4932:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    4934:	f001 f9ca 	bl	5ccc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    4938:	f001 f9b2 	bl	5ca0 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    493c:	e014      	b.n	4968 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    493e:	687b      	ldr	r3, [r7, #4]
    4940:	691b      	ldr	r3, [r3, #16]
    4942:	2b00      	cmp	r3, #0
    4944:	d00f      	beq.n	4966 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4946:	687b      	ldr	r3, [r7, #4]
    4948:	3310      	adds	r3, #16
    494a:	4618      	mov	r0, r3
    494c:	f000 fe1e 	bl	558c <xTaskRemoveFromEventList>
    4950:	4603      	mov	r3, r0
    4952:	2b00      	cmp	r3, #0
    4954:	d001      	beq.n	495a <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    4956:	f000 fed5 	bl	5704 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    495a:	687b      	ldr	r3, [r7, #4]
    495c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    495e:	1e5a      	subs	r2, r3, #1
    4960:	687b      	ldr	r3, [r7, #4]
    4962:	645a      	str	r2, [r3, #68]	; 0x44
    4964:	e000      	b.n	4968 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    4966:	e003      	b.n	4970 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4968:	687b      	ldr	r3, [r7, #4]
    496a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    496c:	2b00      	cmp	r3, #0
    496e:	dce6      	bgt.n	493e <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4970:	687b      	ldr	r3, [r7, #4]
    4972:	f04f 32ff 	mov.w	r2, #4294967295
    4976:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    4978:	f001 f9a8 	bl	5ccc <vPortExitCritical>
}
    497c:	3708      	adds	r7, #8
    497e:	46bd      	mov	sp, r7
    4980:	bd80      	pop	{r7, pc}
    4982:	bf00      	nop

00004984 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    4984:	b580      	push	{r7, lr}
    4986:	b084      	sub	sp, #16
    4988:	af00      	add	r7, sp, #0
    498a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    498c:	f001 f988 	bl	5ca0 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4990:	687b      	ldr	r3, [r7, #4]
    4992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4994:	2b00      	cmp	r3, #0
    4996:	bf14      	ite	ne
    4998:	2300      	movne	r3, #0
    499a:	2301      	moveq	r3, #1
    499c:	b2db      	uxtb	r3, r3
    499e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    49a0:	f001 f994 	bl	5ccc <vPortExitCritical>

	return xReturn;
    49a4:	68fb      	ldr	r3, [r7, #12]
}
    49a6:	4618      	mov	r0, r3
    49a8:	3710      	adds	r7, #16
    49aa:	46bd      	mov	sp, r7
    49ac:	bd80      	pop	{r7, pc}
    49ae:	bf00      	nop

000049b0 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    49b0:	b480      	push	{r7}
    49b2:	b085      	sub	sp, #20
    49b4:	af00      	add	r7, sp, #0
    49b6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    49b8:	687b      	ldr	r3, [r7, #4]
    49ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    49bc:	2b00      	cmp	r3, #0
    49be:	bf14      	ite	ne
    49c0:	2300      	movne	r3, #0
    49c2:	2301      	moveq	r3, #1
    49c4:	b2db      	uxtb	r3, r3
    49c6:	60fb      	str	r3, [r7, #12]

	return xReturn;
    49c8:	68fb      	ldr	r3, [r7, #12]
}
    49ca:	4618      	mov	r0, r3
    49cc:	3714      	adds	r7, #20
    49ce:	46bd      	mov	sp, r7
    49d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    49d4:	4770      	bx	lr
    49d6:	bf00      	nop

000049d8 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    49d8:	b580      	push	{r7, lr}
    49da:	b084      	sub	sp, #16
    49dc:	af00      	add	r7, sp, #0
    49de:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    49e0:	f001 f95e 	bl	5ca0 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    49e4:	687b      	ldr	r3, [r7, #4]
    49e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    49e8:	687b      	ldr	r3, [r7, #4]
    49ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    49ec:	429a      	cmp	r2, r3
    49ee:	bf14      	ite	ne
    49f0:	2300      	movne	r3, #0
    49f2:	2301      	moveq	r3, #1
    49f4:	b2db      	uxtb	r3, r3
    49f6:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    49f8:	f001 f968 	bl	5ccc <vPortExitCritical>

	return xReturn;
    49fc:	68fb      	ldr	r3, [r7, #12]
}
    49fe:	4618      	mov	r0, r3
    4a00:	3710      	adds	r7, #16
    4a02:	46bd      	mov	sp, r7
    4a04:	bd80      	pop	{r7, pc}
    4a06:	bf00      	nop

00004a08 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    4a08:	b480      	push	{r7}
    4a0a:	b085      	sub	sp, #20
    4a0c:	af00      	add	r7, sp, #0
    4a0e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4a10:	687b      	ldr	r3, [r7, #4]
    4a12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4a14:	687b      	ldr	r3, [r7, #4]
    4a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4a18:	429a      	cmp	r2, r3
    4a1a:	bf14      	ite	ne
    4a1c:	2300      	movne	r3, #0
    4a1e:	2301      	moveq	r3, #1
    4a20:	b2db      	uxtb	r3, r3
    4a22:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4a24:	68fb      	ldr	r3, [r7, #12]
}
    4a26:	4618      	mov	r0, r3
    4a28:	3714      	adds	r7, #20
    4a2a:	46bd      	mov	sp, r7
    4a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a30:	4770      	bx	lr
    4a32:	bf00      	nop

00004a34 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    4a34:	b580      	push	{r7, lr}
    4a36:	b08a      	sub	sp, #40	; 0x28
    4a38:	af02      	add	r7, sp, #8
    4a3a:	60f8      	str	r0, [r7, #12]
    4a3c:	60b9      	str	r1, [r7, #8]
    4a3e:	603b      	str	r3, [r7, #0]
    4a40:	4613      	mov	r3, r2
    4a42:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    4a44:	88fb      	ldrh	r3, [r7, #6]
    4a46:	4618      	mov	r0, r3
    4a48:	6b39      	ldr	r1, [r7, #48]	; 0x30
    4a4a:	f000 ff7f 	bl	594c <prvAllocateTCBAndStack>
    4a4e:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4a50:	69bb      	ldr	r3, [r7, #24]
    4a52:	2b00      	cmp	r3, #0
    4a54:	f000 80a1 	beq.w	4b9a <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    4a58:	69bb      	ldr	r3, [r7, #24]
    4a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4a5c:	88fb      	ldrh	r3, [r7, #6]
    4a5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4a62:	3b01      	subs	r3, #1
    4a64:	009b      	lsls	r3, r3, #2
    4a66:	4413      	add	r3, r2
    4a68:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    4a6a:	697b      	ldr	r3, [r7, #20]
    4a6c:	f023 0307 	bic.w	r3, r3, #7
    4a70:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    4a72:	88fb      	ldrh	r3, [r7, #6]
    4a74:	9300      	str	r3, [sp, #0]
    4a76:	69b8      	ldr	r0, [r7, #24]
    4a78:	68b9      	ldr	r1, [r7, #8]
    4a7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4a7e:	f000 fe57 	bl	5730 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4a82:	6978      	ldr	r0, [r7, #20]
    4a84:	68f9      	ldr	r1, [r7, #12]
    4a86:	683a      	ldr	r2, [r7, #0]
    4a88:	f001 f88c 	bl	5ba4 <pxPortInitialiseStack>
    4a8c:	4602      	mov	r2, r0
    4a8e:	69bb      	ldr	r3, [r7, #24]
    4a90:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    4a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4a94:	2b00      	cmp	r3, #0
    4a96:	d002      	beq.n	4a9e <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4a9a:	69ba      	ldr	r2, [r7, #24]
    4a9c:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4a9e:	f001 f8ff 	bl	5ca0 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    4aa2:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aaa:	681b      	ldr	r3, [r3, #0]
    4aac:	1c5a      	adds	r2, r3, #1
    4aae:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ab6:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    4ab8:	f241 4310 	movw	r3, #5136	; 0x1410
    4abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ac0:	681b      	ldr	r3, [r3, #0]
    4ac2:	2b00      	cmp	r3, #0
    4ac4:	d10f      	bne.n	4ae6 <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    4ac6:	f241 4310 	movw	r3, #5136	; 0x1410
    4aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ace:	69ba      	ldr	r2, [r7, #24]
    4ad0:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    4ad2:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ada:	681b      	ldr	r3, [r3, #0]
    4adc:	2b01      	cmp	r3, #1
    4ade:	d118      	bne.n	4b12 <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    4ae0:	f000 fe5c 	bl	579c <prvInitialiseTaskLists>
    4ae4:	e015      	b.n	4b12 <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    4ae6:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aee:	681b      	ldr	r3, [r3, #0]
    4af0:	2b00      	cmp	r3, #0
    4af2:	d10e      	bne.n	4b12 <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    4af4:	f241 4310 	movw	r3, #5136	; 0x1410
    4af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4afc:	681b      	ldr	r3, [r3, #0]
    4afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4b02:	429a      	cmp	r2, r3
    4b04:	d805      	bhi.n	4b12 <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    4b06:	f241 4310 	movw	r3, #5136	; 0x1410
    4b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b0e:	69ba      	ldr	r2, [r7, #24]
    4b10:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    4b12:	69bb      	ldr	r3, [r7, #24]
    4b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b16:	f241 43f0 	movw	r3, #5360	; 0x14f0
    4b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b1e:	681b      	ldr	r3, [r3, #0]
    4b20:	429a      	cmp	r2, r3
    4b22:	d906      	bls.n	4b32 <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    4b24:	69bb      	ldr	r3, [r7, #24]
    4b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b28:	f241 43f0 	movw	r3, #5360	; 0x14f0
    4b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b30:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    4b32:	f241 530c 	movw	r3, #5388	; 0x150c
    4b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b3a:	681b      	ldr	r3, [r3, #0]
    4b3c:	1c5a      	adds	r2, r3, #1
    4b3e:	f241 530c 	movw	r3, #5388	; 0x150c
    4b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b46:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    4b48:	69bb      	ldr	r3, [r7, #24]
    4b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b4c:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b54:	681b      	ldr	r3, [r3, #0]
    4b56:	429a      	cmp	r2, r3
    4b58:	d906      	bls.n	4b68 <xTaskGenericCreate+0x134>
    4b5a:	69bb      	ldr	r3, [r7, #24]
    4b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b5e:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b66:	601a      	str	r2, [r3, #0]
    4b68:	69bb      	ldr	r3, [r7, #24]
    4b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b6c:	4613      	mov	r3, r2
    4b6e:	009b      	lsls	r3, r3, #2
    4b70:	4413      	add	r3, r2
    4b72:	009b      	lsls	r3, r3, #2
    4b74:	f241 4214 	movw	r2, #5140	; 0x1414
    4b78:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4b7c:	441a      	add	r2, r3
    4b7e:	69bb      	ldr	r3, [r7, #24]
    4b80:	3304      	adds	r3, #4
    4b82:	4610      	mov	r0, r2
    4b84:	4619      	mov	r1, r3
    4b86:	f7ff fadf 	bl	4148 <vListInsertEnd>

			xReturn = pdPASS;
    4b8a:	2301      	movs	r3, #1
    4b8c:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    4b8e:	69b8      	ldr	r0, [r7, #24]
    4b90:	f012 fe78 	bl	17884 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    4b94:	f001 f89a 	bl	5ccc <vPortExitCritical>
    4b98:	e002      	b.n	4ba0 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4b9a:	f04f 33ff 	mov.w	r3, #4294967295
    4b9e:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4ba0:	69fb      	ldr	r3, [r7, #28]
    4ba2:	2b01      	cmp	r3, #1
    4ba4:	d111      	bne.n	4bca <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    4ba6:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bae:	681b      	ldr	r3, [r3, #0]
    4bb0:	2b00      	cmp	r3, #0
    4bb2:	d00a      	beq.n	4bca <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    4bb4:	f241 4310 	movw	r3, #5136	; 0x1410
    4bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bbc:	681b      	ldr	r3, [r3, #0]
    4bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4bc2:	429a      	cmp	r2, r3
    4bc4:	d201      	bcs.n	4bca <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    4bc6:	f001 f85d 	bl	5c84 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    4bca:	69fb      	ldr	r3, [r7, #28]
}
    4bcc:	4618      	mov	r0, r3
    4bce:	3720      	adds	r7, #32
    4bd0:	46bd      	mov	sp, r7
    4bd2:	bd80      	pop	{r7, pc}

00004bd4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    4bd4:	b580      	push	{r7, lr}
    4bd6:	b084      	sub	sp, #16
    4bd8:	af00      	add	r7, sp, #0
    4bda:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4bdc:	f001 f860 	bl	5ca0 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    4be0:	f241 4310 	movw	r3, #5136	; 0x1410
    4be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4be8:	681b      	ldr	r3, [r3, #0]
    4bea:	687a      	ldr	r2, [r7, #4]
    4bec:	429a      	cmp	r2, r3
    4bee:	d101      	bne.n	4bf4 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    4bf0:	2300      	movs	r3, #0
    4bf2:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    4bf4:	687b      	ldr	r3, [r7, #4]
    4bf6:	2b00      	cmp	r3, #0
    4bf8:	d105      	bne.n	4c06 <vTaskDelete+0x32>
    4bfa:	f241 4310 	movw	r3, #5136	; 0x1410
    4bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c02:	681b      	ldr	r3, [r3, #0]
    4c04:	e000      	b.n	4c08 <vTaskDelete+0x34>
    4c06:	687b      	ldr	r3, [r7, #4]
    4c08:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4c0a:	68fb      	ldr	r3, [r7, #12]
    4c0c:	3304      	adds	r3, #4
    4c0e:	4618      	mov	r0, r3
    4c10:	f7ff fafa 	bl	4208 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4c14:	68fb      	ldr	r3, [r7, #12]
    4c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c18:	2b00      	cmp	r3, #0
    4c1a:	d004      	beq.n	4c26 <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4c1c:	68fb      	ldr	r3, [r7, #12]
    4c1e:	3318      	adds	r3, #24
    4c20:	4618      	mov	r0, r3
    4c22:	f7ff faf1 	bl	4208 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    4c26:	68fb      	ldr	r3, [r7, #12]
    4c28:	3304      	adds	r3, #4
    4c2a:	f241 40bc 	movw	r0, #5308	; 0x14bc
    4c2e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4c32:	4619      	mov	r1, r3
    4c34:	f7ff fa88 	bl	4148 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4c38:	f241 43d0 	movw	r3, #5328	; 0x14d0
    4c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c40:	681b      	ldr	r3, [r3, #0]
    4c42:	1c5a      	adds	r2, r3, #1
    4c44:	f241 43d0 	movw	r3, #5328	; 0x14d0
    4c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c4c:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4c4e:	f241 530c 	movw	r3, #5388	; 0x150c
    4c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c56:	681b      	ldr	r3, [r3, #0]
    4c58:	1c5a      	adds	r2, r3, #1
    4c5a:	f241 530c 	movw	r3, #5388	; 0x150c
    4c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c62:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4c64:	f001 f832 	bl	5ccc <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4c68:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c70:	681b      	ldr	r3, [r3, #0]
    4c72:	2b00      	cmp	r3, #0
    4c74:	d004      	beq.n	4c80 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4c76:	687b      	ldr	r3, [r7, #4]
    4c78:	2b00      	cmp	r3, #0
    4c7a:	d101      	bne.n	4c80 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    4c7c:	f001 f802 	bl	5c84 <vPortYieldFromISR>
			}
		}
	}
    4c80:	3710      	adds	r7, #16
    4c82:	46bd      	mov	sp, r7
    4c84:	bd80      	pop	{r7, pc}
    4c86:	bf00      	nop

00004c88 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4c88:	b580      	push	{r7, lr}
    4c8a:	b086      	sub	sp, #24
    4c8c:	af00      	add	r7, sp, #0
    4c8e:	6078      	str	r0, [r7, #4]
    4c90:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4c92:	2300      	movs	r3, #0
    4c94:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    4c96:	f000 fa8b 	bl	51b0 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4c9a:	687b      	ldr	r3, [r7, #4]
    4c9c:	681a      	ldr	r2, [r3, #0]
    4c9e:	683b      	ldr	r3, [r7, #0]
    4ca0:	4413      	add	r3, r2
    4ca2:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    4ca4:	687b      	ldr	r3, [r7, #4]
    4ca6:	681a      	ldr	r2, [r3, #0]
    4ca8:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cb0:	681b      	ldr	r3, [r3, #0]
    4cb2:	429a      	cmp	r2, r3
    4cb4:	d90f      	bls.n	4cd6 <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    4cb6:	687b      	ldr	r3, [r7, #4]
    4cb8:	681a      	ldr	r2, [r3, #0]
    4cba:	693b      	ldr	r3, [r7, #16]
    4cbc:	429a      	cmp	r2, r3
    4cbe:	d919      	bls.n	4cf4 <vTaskDelayUntil+0x6c>
    4cc0:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cc8:	681b      	ldr	r3, [r3, #0]
    4cca:	693a      	ldr	r2, [r7, #16]
    4ccc:	429a      	cmp	r2, r3
    4cce:	d911      	bls.n	4cf4 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4cd0:	2301      	movs	r3, #1
    4cd2:	617b      	str	r3, [r7, #20]
    4cd4:	e00e      	b.n	4cf4 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4cd6:	687b      	ldr	r3, [r7, #4]
    4cd8:	681a      	ldr	r2, [r3, #0]
    4cda:	693b      	ldr	r3, [r7, #16]
    4cdc:	429a      	cmp	r2, r3
    4cde:	d807      	bhi.n	4cf0 <vTaskDelayUntil+0x68>
    4ce0:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ce8:	681b      	ldr	r3, [r3, #0]
    4cea:	693a      	ldr	r2, [r7, #16]
    4cec:	429a      	cmp	r2, r3
    4cee:	d901      	bls.n	4cf4 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4cf0:	2301      	movs	r3, #1
    4cf2:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4cf4:	687b      	ldr	r3, [r7, #4]
    4cf6:	693a      	ldr	r2, [r7, #16]
    4cf8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    4cfa:	697b      	ldr	r3, [r7, #20]
    4cfc:	2b00      	cmp	r3, #0
    4cfe:	d00b      	beq.n	4d18 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4d00:	f241 4310 	movw	r3, #5136	; 0x1410
    4d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d08:	681b      	ldr	r3, [r3, #0]
    4d0a:	3304      	adds	r3, #4
    4d0c:	4618      	mov	r0, r3
    4d0e:	f7ff fa7b 	bl	4208 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4d12:	6938      	ldr	r0, [r7, #16]
    4d14:	f000 fdd6 	bl	58c4 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4d18:	f000 fa5c 	bl	51d4 <xTaskResumeAll>
    4d1c:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4d1e:	68fb      	ldr	r3, [r7, #12]
    4d20:	2b00      	cmp	r3, #0
    4d22:	d101      	bne.n	4d28 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    4d24:	f000 ffae 	bl	5c84 <vPortYieldFromISR>
		}
	}
    4d28:	3718      	adds	r7, #24
    4d2a:	46bd      	mov	sp, r7
    4d2c:	bd80      	pop	{r7, pc}
    4d2e:	bf00      	nop

00004d30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4d30:	b580      	push	{r7, lr}
    4d32:	b084      	sub	sp, #16
    4d34:	af00      	add	r7, sp, #0
    4d36:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4d38:	2300      	movs	r3, #0
    4d3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4d3c:	687b      	ldr	r3, [r7, #4]
    4d3e:	2b00      	cmp	r3, #0
    4d40:	d018      	beq.n	4d74 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4d42:	f000 fa35 	bl	51b0 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4d46:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d4e:	681a      	ldr	r2, [r3, #0]
    4d50:	687b      	ldr	r3, [r7, #4]
    4d52:	4413      	add	r3, r2
    4d54:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4d56:	f241 4310 	movw	r3, #5136	; 0x1410
    4d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d5e:	681b      	ldr	r3, [r3, #0]
    4d60:	3304      	adds	r3, #4
    4d62:	4618      	mov	r0, r3
    4d64:	f7ff fa50 	bl	4208 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4d68:	68b8      	ldr	r0, [r7, #8]
    4d6a:	f000 fdab 	bl	58c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4d6e:	f000 fa31 	bl	51d4 <xTaskResumeAll>
    4d72:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4d74:	68fb      	ldr	r3, [r7, #12]
    4d76:	2b00      	cmp	r3, #0
    4d78:	d101      	bne.n	4d7e <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    4d7a:	f000 ff83 	bl	5c84 <vPortYieldFromISR>
		}
	}
    4d7e:	3710      	adds	r7, #16
    4d80:	46bd      	mov	sp, r7
    4d82:	bd80      	pop	{r7, pc}

00004d84 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4d84:	b580      	push	{r7, lr}
    4d86:	b084      	sub	sp, #16
    4d88:	af00      	add	r7, sp, #0
    4d8a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4d8c:	f000 ff88 	bl	5ca0 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4d90:	687b      	ldr	r3, [r7, #4]
    4d92:	2b00      	cmp	r3, #0
    4d94:	d105      	bne.n	4da2 <uxTaskPriorityGet+0x1e>
    4d96:	f241 4310 	movw	r3, #5136	; 0x1410
    4d9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d9e:	681b      	ldr	r3, [r3, #0]
    4da0:	e000      	b.n	4da4 <uxTaskPriorityGet+0x20>
    4da2:	687b      	ldr	r3, [r7, #4]
    4da4:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    4da6:	68fb      	ldr	r3, [r7, #12]
    4da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4daa:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    4dac:	f000 ff8e 	bl	5ccc <vPortExitCritical>

		return uxReturn;
    4db0:	68bb      	ldr	r3, [r7, #8]
	}
    4db2:	4618      	mov	r0, r3
    4db4:	3710      	adds	r7, #16
    4db6:	46bd      	mov	sp, r7
    4db8:	bd80      	pop	{r7, pc}
    4dba:	bf00      	nop

00004dbc <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    4dbc:	b580      	push	{r7, lr}
    4dbe:	b086      	sub	sp, #24
    4dc0:	af00      	add	r7, sp, #0
    4dc2:	6078      	str	r0, [r7, #4]
    4dc4:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4dc6:	2300      	movs	r3, #0
    4dc8:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    4dca:	683b      	ldr	r3, [r7, #0]
    4dcc:	2b04      	cmp	r3, #4
    4dce:	d901      	bls.n	4dd4 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4dd0:	2304      	movs	r3, #4
    4dd2:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4dd4:	f000 ff64 	bl	5ca0 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4dd8:	f241 4310 	movw	r3, #5136	; 0x1410
    4ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4de0:	681b      	ldr	r3, [r3, #0]
    4de2:	687a      	ldr	r2, [r7, #4]
    4de4:	429a      	cmp	r2, r3
    4de6:	d101      	bne.n	4dec <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4de8:	2300      	movs	r3, #0
    4dea:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4dec:	687b      	ldr	r3, [r7, #4]
    4dee:	2b00      	cmp	r3, #0
    4df0:	d105      	bne.n	4dfe <vTaskPrioritySet+0x42>
    4df2:	f241 4310 	movw	r3, #5136	; 0x1410
    4df6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dfa:	681b      	ldr	r3, [r3, #0]
    4dfc:	e000      	b.n	4e00 <vTaskPrioritySet+0x44>
    4dfe:	687b      	ldr	r3, [r7, #4]
    4e00:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    4e02:	693b      	ldr	r3, [r7, #16]
    4e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4e06:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    4e08:	68fa      	ldr	r2, [r7, #12]
    4e0a:	683b      	ldr	r3, [r7, #0]
    4e0c:	429a      	cmp	r2, r3
    4e0e:	d058      	beq.n	4ec2 <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4e10:	683a      	ldr	r2, [r7, #0]
    4e12:	68fb      	ldr	r3, [r7, #12]
    4e14:	429a      	cmp	r2, r3
    4e16:	d905      	bls.n	4e24 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4e18:	687b      	ldr	r3, [r7, #4]
    4e1a:	2b00      	cmp	r3, #0
    4e1c:	d007      	beq.n	4e2e <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    4e1e:	2301      	movs	r3, #1
    4e20:	617b      	str	r3, [r7, #20]
    4e22:	e004      	b.n	4e2e <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4e24:	687b      	ldr	r3, [r7, #4]
    4e26:	2b00      	cmp	r3, #0
    4e28:	d101      	bne.n	4e2e <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    4e2a:	2301      	movs	r3, #1
    4e2c:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4e2e:	693b      	ldr	r3, [r7, #16]
    4e30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4e32:	693b      	ldr	r3, [r7, #16]
    4e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e36:	429a      	cmp	r2, r3
    4e38:	d102      	bne.n	4e40 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    4e3a:	693b      	ldr	r3, [r7, #16]
    4e3c:	683a      	ldr	r2, [r7, #0]
    4e3e:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4e40:	693b      	ldr	r3, [r7, #16]
    4e42:	683a      	ldr	r2, [r7, #0]
    4e44:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    4e46:	683b      	ldr	r3, [r7, #0]
    4e48:	f1c3 0205 	rsb	r2, r3, #5
    4e4c:	693b      	ldr	r3, [r7, #16]
    4e4e:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4e50:	693b      	ldr	r3, [r7, #16]
    4e52:	6959      	ldr	r1, [r3, #20]
    4e54:	68fa      	ldr	r2, [r7, #12]
    4e56:	4613      	mov	r3, r2
    4e58:	009b      	lsls	r3, r3, #2
    4e5a:	4413      	add	r3, r2
    4e5c:	009b      	lsls	r3, r3, #2
    4e5e:	f241 4214 	movw	r2, #5140	; 0x1414
    4e62:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4e66:	4413      	add	r3, r2
    4e68:	4299      	cmp	r1, r3
    4e6a:	d125      	bne.n	4eb8 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4e6c:	693b      	ldr	r3, [r7, #16]
    4e6e:	3304      	adds	r3, #4
    4e70:	4618      	mov	r0, r3
    4e72:	f7ff f9c9 	bl	4208 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4e76:	693b      	ldr	r3, [r7, #16]
    4e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e7a:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e82:	681b      	ldr	r3, [r3, #0]
    4e84:	429a      	cmp	r2, r3
    4e86:	d906      	bls.n	4e96 <vTaskPrioritySet+0xda>
    4e88:	693b      	ldr	r3, [r7, #16]
    4e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e8c:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e94:	601a      	str	r2, [r3, #0]
    4e96:	693b      	ldr	r3, [r7, #16]
    4e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e9a:	4613      	mov	r3, r2
    4e9c:	009b      	lsls	r3, r3, #2
    4e9e:	4413      	add	r3, r2
    4ea0:	009b      	lsls	r3, r3, #2
    4ea2:	f241 4214 	movw	r2, #5140	; 0x1414
    4ea6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4eaa:	441a      	add	r2, r3
    4eac:	693b      	ldr	r3, [r7, #16]
    4eae:	3304      	adds	r3, #4
    4eb0:	4610      	mov	r0, r2
    4eb2:	4619      	mov	r1, r3
    4eb4:	f7ff f948 	bl	4148 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4eb8:	697b      	ldr	r3, [r7, #20]
    4eba:	2b01      	cmp	r3, #1
    4ebc:	d101      	bne.n	4ec2 <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    4ebe:	f000 fee1 	bl	5c84 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4ec2:	f000 ff03 	bl	5ccc <vPortExitCritical>
	}
    4ec6:	3718      	adds	r7, #24
    4ec8:	46bd      	mov	sp, r7
    4eca:	bd80      	pop	{r7, pc}

00004ecc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    4ecc:	b580      	push	{r7, lr}
    4ece:	b084      	sub	sp, #16
    4ed0:	af00      	add	r7, sp, #0
    4ed2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4ed4:	f000 fee4 	bl	5ca0 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4ed8:	f241 4310 	movw	r3, #5136	; 0x1410
    4edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ee0:	681b      	ldr	r3, [r3, #0]
    4ee2:	687a      	ldr	r2, [r7, #4]
    4ee4:	429a      	cmp	r2, r3
    4ee6:	d101      	bne.n	4eec <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4ee8:	2300      	movs	r3, #0
    4eea:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4eec:	687b      	ldr	r3, [r7, #4]
    4eee:	2b00      	cmp	r3, #0
    4ef0:	d105      	bne.n	4efe <vTaskSuspend+0x32>
    4ef2:	f241 4310 	movw	r3, #5136	; 0x1410
    4ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4efa:	681b      	ldr	r3, [r3, #0]
    4efc:	e000      	b.n	4f00 <vTaskSuspend+0x34>
    4efe:	687b      	ldr	r3, [r7, #4]
    4f00:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4f02:	68fb      	ldr	r3, [r7, #12]
    4f04:	3304      	adds	r3, #4
    4f06:	4618      	mov	r0, r3
    4f08:	f7ff f97e 	bl	4208 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4f0c:	68fb      	ldr	r3, [r7, #12]
    4f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f10:	2b00      	cmp	r3, #0
    4f12:	d004      	beq.n	4f1e <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4f14:	68fb      	ldr	r3, [r7, #12]
    4f16:	3318      	adds	r3, #24
    4f18:	4618      	mov	r0, r3
    4f1a:	f7ff f975 	bl	4208 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4f1e:	68fb      	ldr	r3, [r7, #12]
    4f20:	3304      	adds	r3, #4
    4f22:	f241 40d4 	movw	r0, #5332	; 0x14d4
    4f26:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4f2a:	4619      	mov	r1, r3
    4f2c:	f7ff f90c 	bl	4148 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4f30:	f000 fecc 	bl	5ccc <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4f34:	687b      	ldr	r3, [r7, #4]
    4f36:	2b00      	cmp	r3, #0
    4f38:	d11e      	bne.n	4f78 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4f3a:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f42:	681b      	ldr	r3, [r3, #0]
    4f44:	2b00      	cmp	r3, #0
    4f46:	d002      	beq.n	4f4e <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4f48:	f000 fe9c 	bl	5c84 <vPortYieldFromISR>
    4f4c:	e014      	b.n	4f78 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4f4e:	f241 43d4 	movw	r3, #5332	; 0x14d4
    4f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f56:	681a      	ldr	r2, [r3, #0]
    4f58:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f60:	681b      	ldr	r3, [r3, #0]
    4f62:	429a      	cmp	r2, r3
    4f64:	d106      	bne.n	4f74 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4f66:	f241 4310 	movw	r3, #5136	; 0x1410
    4f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f6e:	2200      	movs	r2, #0
    4f70:	601a      	str	r2, [r3, #0]
    4f72:	e001      	b.n	4f78 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    4f74:	f000 fa76 	bl	5464 <vTaskSwitchContext>
				}
			}
		}
	}
    4f78:	3710      	adds	r7, #16
    4f7a:	46bd      	mov	sp, r7
    4f7c:	bd80      	pop	{r7, pc}
    4f7e:	bf00      	nop

00004f80 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4f80:	b480      	push	{r7}
    4f82:	b085      	sub	sp, #20
    4f84:	af00      	add	r7, sp, #0
    4f86:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4f88:	2300      	movs	r3, #0
    4f8a:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    4f8c:	687b      	ldr	r3, [r7, #4]
    4f8e:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4f90:	68bb      	ldr	r3, [r7, #8]
    4f92:	695a      	ldr	r2, [r3, #20]
    4f94:	f241 43d4 	movw	r3, #5332	; 0x14d4
    4f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f9c:	429a      	cmp	r2, r3
    4f9e:	d10d      	bne.n	4fbc <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    4fa0:	68bb      	ldr	r3, [r7, #8]
    4fa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4fa4:	f241 43a8 	movw	r3, #5288	; 0x14a8
    4fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fac:	429a      	cmp	r2, r3
    4fae:	d005      	beq.n	4fbc <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4fb0:	68bb      	ldr	r3, [r7, #8]
    4fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4fb4:	2b00      	cmp	r3, #0
    4fb6:	d101      	bne.n	4fbc <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    4fb8:	2301      	movs	r3, #1
    4fba:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    4fbc:	68fb      	ldr	r3, [r7, #12]
	}
    4fbe:	4618      	mov	r0, r3
    4fc0:	3714      	adds	r7, #20
    4fc2:	46bd      	mov	sp, r7
    4fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fc8:	4770      	bx	lr
    4fca:	bf00      	nop

00004fcc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    4fcc:	b580      	push	{r7, lr}
    4fce:	b084      	sub	sp, #16
    4fd0:	af00      	add	r7, sp, #0
    4fd2:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    4fd4:	687b      	ldr	r3, [r7, #4]
    4fd6:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    4fd8:	68fb      	ldr	r3, [r7, #12]
    4fda:	2b00      	cmp	r3, #0
    4fdc:	d043      	beq.n	5066 <vTaskResume+0x9a>
    4fde:	f241 4310 	movw	r3, #5136	; 0x1410
    4fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fe6:	681b      	ldr	r3, [r3, #0]
    4fe8:	68fa      	ldr	r2, [r7, #12]
    4fea:	429a      	cmp	r2, r3
    4fec:	d03b      	beq.n	5066 <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    4fee:	f000 fe57 	bl	5ca0 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4ff2:	68f8      	ldr	r0, [r7, #12]
    4ff4:	f7ff ffc4 	bl	4f80 <xTaskIsTaskSuspended>
    4ff8:	4603      	mov	r3, r0
    4ffa:	2b01      	cmp	r3, #1
    4ffc:	d131      	bne.n	5062 <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4ffe:	68fb      	ldr	r3, [r7, #12]
    5000:	3304      	adds	r3, #4
    5002:	4618      	mov	r0, r3
    5004:	f7ff f900 	bl	4208 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5008:	68fb      	ldr	r3, [r7, #12]
    500a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    500c:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5010:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5014:	681b      	ldr	r3, [r3, #0]
    5016:	429a      	cmp	r2, r3
    5018:	d906      	bls.n	5028 <vTaskResume+0x5c>
    501a:	68fb      	ldr	r3, [r7, #12]
    501c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    501e:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5026:	601a      	str	r2, [r3, #0]
    5028:	68fb      	ldr	r3, [r7, #12]
    502a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    502c:	4613      	mov	r3, r2
    502e:	009b      	lsls	r3, r3, #2
    5030:	4413      	add	r3, r2
    5032:	009b      	lsls	r3, r3, #2
    5034:	f241 4214 	movw	r2, #5140	; 0x1414
    5038:	f2c2 0200 	movt	r2, #8192	; 0x2000
    503c:	441a      	add	r2, r3
    503e:	68fb      	ldr	r3, [r7, #12]
    5040:	3304      	adds	r3, #4
    5042:	4610      	mov	r0, r2
    5044:	4619      	mov	r1, r3
    5046:	f7ff f87f 	bl	4148 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    504a:	68fb      	ldr	r3, [r7, #12]
    504c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    504e:	f241 4310 	movw	r3, #5136	; 0x1410
    5052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5056:	681b      	ldr	r3, [r3, #0]
    5058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    505a:	429a      	cmp	r2, r3
    505c:	d301      	bcc.n	5062 <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    505e:	f000 fe11 	bl	5c84 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    5062:	f000 fe33 	bl	5ccc <vPortExitCritical>
		}
	}
    5066:	3710      	adds	r7, #16
    5068:	46bd      	mov	sp, r7
    506a:	bd80      	pop	{r7, pc}

0000506c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    506c:	b580      	push	{r7, lr}
    506e:	b086      	sub	sp, #24
    5070:	af00      	add	r7, sp, #0
    5072:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    5074:	2300      	movs	r3, #0
    5076:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    5078:	687b      	ldr	r3, [r7, #4]
    507a:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    507c:	2300      	movs	r3, #0
    507e:	60fb      	str	r3, [r7, #12]
    5080:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5084:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    5088:	6938      	ldr	r0, [r7, #16]
    508a:	f7ff ff79 	bl	4f80 <xTaskIsTaskSuspended>
    508e:	4603      	mov	r3, r0
    5090:	2b01      	cmp	r3, #1
    5092:	d144      	bne.n	511e <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5094:	f241 43fc 	movw	r3, #5372	; 0x14fc
    5098:	f2c2 0300 	movt	r3, #8192	; 0x2000
    509c:	681b      	ldr	r3, [r3, #0]
    509e:	2b00      	cmp	r3, #0
    50a0:	d134      	bne.n	510c <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    50a2:	693b      	ldr	r3, [r7, #16]
    50a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50a6:	f241 4310 	movw	r3, #5136	; 0x1410
    50aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50ae:	681b      	ldr	r3, [r3, #0]
    50b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    50b2:	429a      	cmp	r2, r3
    50b4:	bf34      	ite	cc
    50b6:	2300      	movcc	r3, #0
    50b8:	2301      	movcs	r3, #1
    50ba:	b2db      	uxtb	r3, r3
    50bc:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    50be:	693b      	ldr	r3, [r7, #16]
    50c0:	3304      	adds	r3, #4
    50c2:	4618      	mov	r0, r3
    50c4:	f7ff f8a0 	bl	4208 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    50c8:	693b      	ldr	r3, [r7, #16]
    50ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50cc:	f241 43f4 	movw	r3, #5364	; 0x14f4
    50d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50d4:	681b      	ldr	r3, [r3, #0]
    50d6:	429a      	cmp	r2, r3
    50d8:	d906      	bls.n	50e8 <xTaskResumeFromISR+0x7c>
    50da:	693b      	ldr	r3, [r7, #16]
    50dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50de:	f241 43f4 	movw	r3, #5364	; 0x14f4
    50e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50e6:	601a      	str	r2, [r3, #0]
    50e8:	693b      	ldr	r3, [r7, #16]
    50ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50ec:	4613      	mov	r3, r2
    50ee:	009b      	lsls	r3, r3, #2
    50f0:	4413      	add	r3, r2
    50f2:	009b      	lsls	r3, r3, #2
    50f4:	f241 4214 	movw	r2, #5140	; 0x1414
    50f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    50fc:	441a      	add	r2, r3
    50fe:	693b      	ldr	r3, [r7, #16]
    5100:	3304      	adds	r3, #4
    5102:	4610      	mov	r0, r2
    5104:	4619      	mov	r1, r3
    5106:	f7ff f81f 	bl	4148 <vListInsertEnd>
    510a:	e008      	b.n	511e <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    510c:	693b      	ldr	r3, [r7, #16]
    510e:	3318      	adds	r3, #24
    5110:	f241 40a8 	movw	r0, #5288	; 0x14a8
    5114:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5118:	4619      	mov	r1, r3
    511a:	f7ff f815 	bl	4148 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    511e:	f04f 0000 	mov.w	r0, #0
    5122:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    5126:	697b      	ldr	r3, [r7, #20]
	}
    5128:	4618      	mov	r0, r3
    512a:	3718      	adds	r7, #24
    512c:	46bd      	mov	sp, r7
    512e:	bd80      	pop	{r7, pc}

00005130 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    5130:	b580      	push	{r7, lr}
    5132:	b086      	sub	sp, #24
    5134:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    5136:	2300      	movs	r3, #0
    5138:	9300      	str	r3, [sp, #0]
    513a:	2300      	movs	r3, #0
    513c:	9301      	str	r3, [sp, #4]
    513e:	2300      	movs	r3, #0
    5140:	9302      	str	r3, [sp, #8]
    5142:	2300      	movs	r3, #0
    5144:	9303      	str	r3, [sp, #12]
    5146:	f245 701d 	movw	r0, #22301	; 0x571d
    514a:	f2c0 0000 	movt	r0, #0
    514e:	f648 2180 	movw	r1, #35456	; 0x8a80
    5152:	f2c0 0101 	movt	r1, #1
    5156:	2280      	movs	r2, #128	; 0x80
    5158:	2300      	movs	r3, #0
    515a:	f7ff fc6b 	bl	4a34 <xTaskGenericCreate>
    515e:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    5160:	687b      	ldr	r3, [r7, #4]
    5162:	2b01      	cmp	r3, #1
    5164:	d111      	bne.n	518a <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    5166:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    516a:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    516e:	f241 43f8 	movw	r3, #5368	; 0x14f8
    5172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5176:	2201      	movs	r2, #1
    5178:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    517a:	f241 43ec 	movw	r3, #5356	; 0x14ec
    517e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5182:	2200      	movs	r2, #0
    5184:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    5186:	f000 fd4f 	bl	5c28 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    518a:	3708      	adds	r7, #8
    518c:	46bd      	mov	sp, r7
    518e:	bd80      	pop	{r7, pc}

00005190 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    5190:	b580      	push	{r7, lr}
    5192:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    5194:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5198:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    519c:	f241 43f8 	movw	r3, #5368	; 0x14f8
    51a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51a4:	2200      	movs	r2, #0
    51a6:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    51a8:	f000 fd66 	bl	5c78 <vPortEndScheduler>
}
    51ac:	bd80      	pop	{r7, pc}
    51ae:	bf00      	nop

000051b0 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    51b0:	b480      	push	{r7}
    51b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    51b4:	f241 43fc 	movw	r3, #5372	; 0x14fc
    51b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51bc:	681b      	ldr	r3, [r3, #0]
    51be:	1c5a      	adds	r2, r3, #1
    51c0:	f241 43fc 	movw	r3, #5372	; 0x14fc
    51c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51c8:	601a      	str	r2, [r3, #0]
}
    51ca:	46bd      	mov	sp, r7
    51cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    51d0:	4770      	bx	lr
    51d2:	bf00      	nop

000051d4 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    51d4:	b590      	push	{r4, r7, lr}
    51d6:	b083      	sub	sp, #12
    51d8:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    51da:	2300      	movs	r3, #0
    51dc:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    51de:	f000 fd5f 	bl	5ca0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    51e2:	f241 43fc 	movw	r3, #5372	; 0x14fc
    51e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ea:	681b      	ldr	r3, [r3, #0]
    51ec:	1e5a      	subs	r2, r3, #1
    51ee:	f241 43fc 	movw	r3, #5372	; 0x14fc
    51f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51f6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    51f8:	f241 43fc 	movw	r3, #5372	; 0x14fc
    51fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5200:	681b      	ldr	r3, [r3, #0]
    5202:	2b00      	cmp	r3, #0
    5204:	d177      	bne.n	52f6 <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    5206:	f241 43e8 	movw	r3, #5352	; 0x14e8
    520a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    520e:	681b      	ldr	r3, [r3, #0]
    5210:	2b00      	cmp	r3, #0
    5212:	d070      	beq.n	52f6 <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    5214:	2300      	movs	r3, #0
    5216:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    5218:	e036      	b.n	5288 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    521a:	f241 43a8 	movw	r3, #5288	; 0x14a8
    521e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5222:	68db      	ldr	r3, [r3, #12]
    5224:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    5226:	f104 0318 	add.w	r3, r4, #24
    522a:	4618      	mov	r0, r3
    522c:	f7fe ffec 	bl	4208 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    5230:	1d23      	adds	r3, r4, #4
    5232:	4618      	mov	r0, r3
    5234:	f7fe ffe8 	bl	4208 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5238:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    523a:	f241 43f4 	movw	r3, #5364	; 0x14f4
    523e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5242:	681b      	ldr	r3, [r3, #0]
    5244:	429a      	cmp	r2, r3
    5246:	d905      	bls.n	5254 <xTaskResumeAll+0x80>
    5248:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    524a:	f241 43f4 	movw	r3, #5364	; 0x14f4
    524e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5252:	601a      	str	r2, [r3, #0]
    5254:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5256:	4613      	mov	r3, r2
    5258:	009b      	lsls	r3, r3, #2
    525a:	4413      	add	r3, r2
    525c:	009b      	lsls	r3, r3, #2
    525e:	f241 4214 	movw	r2, #5140	; 0x1414
    5262:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5266:	441a      	add	r2, r3
    5268:	1d23      	adds	r3, r4, #4
    526a:	4610      	mov	r0, r2
    526c:	4619      	mov	r1, r3
    526e:	f7fe ff6b 	bl	4148 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5272:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5274:	f241 4310 	movw	r3, #5136	; 0x1410
    5278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    527c:	681b      	ldr	r3, [r3, #0]
    527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5280:	429a      	cmp	r2, r3
    5282:	d301      	bcc.n	5288 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    5284:	2301      	movs	r3, #1
    5286:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    5288:	f241 43a8 	movw	r3, #5288	; 0x14a8
    528c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5290:	681b      	ldr	r3, [r3, #0]
    5292:	2b00      	cmp	r3, #0
    5294:	d1c1      	bne.n	521a <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5296:	f241 5300 	movw	r3, #5376	; 0x1500
    529a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    529e:	681b      	ldr	r3, [r3, #0]
    52a0:	2b00      	cmp	r3, #0
    52a2:	d014      	beq.n	52ce <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    52a4:	e00c      	b.n	52c0 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    52a6:	f000 f865 	bl	5374 <vTaskIncrementTick>
						--uxMissedTicks;
    52aa:	f241 5300 	movw	r3, #5376	; 0x1500
    52ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52b2:	681b      	ldr	r3, [r3, #0]
    52b4:	1e5a      	subs	r2, r3, #1
    52b6:	f241 5300 	movw	r3, #5376	; 0x1500
    52ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52be:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    52c0:	f241 5300 	movw	r3, #5376	; 0x1500
    52c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52c8:	681b      	ldr	r3, [r3, #0]
    52ca:	2b00      	cmp	r3, #0
    52cc:	d1eb      	bne.n	52a6 <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    52ce:	683b      	ldr	r3, [r7, #0]
    52d0:	2b01      	cmp	r3, #1
    52d2:	d006      	beq.n	52e2 <xTaskResumeAll+0x10e>
    52d4:	f241 5304 	movw	r3, #5380	; 0x1504
    52d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52dc:	681b      	ldr	r3, [r3, #0]
    52de:	2b01      	cmp	r3, #1
    52e0:	d109      	bne.n	52f6 <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    52e2:	2301      	movs	r3, #1
    52e4:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    52e6:	f241 5304 	movw	r3, #5380	; 0x1504
    52ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52ee:	2200      	movs	r2, #0
    52f0:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    52f2:	f000 fcc7 	bl	5c84 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    52f6:	f000 fce9 	bl	5ccc <vPortExitCritical>

	return xAlreadyYielded;
    52fa:	687b      	ldr	r3, [r7, #4]
}
    52fc:	4618      	mov	r0, r3
    52fe:	370c      	adds	r7, #12
    5300:	46bd      	mov	sp, r7
    5302:	bd90      	pop	{r4, r7, pc}

00005304 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    5304:	b580      	push	{r7, lr}
    5306:	b082      	sub	sp, #8
    5308:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    530a:	f000 fcc9 	bl	5ca0 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    530e:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5316:	681b      	ldr	r3, [r3, #0]
    5318:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    531a:	f000 fcd7 	bl	5ccc <vPortExitCritical>

	return xTicks;
    531e:	687b      	ldr	r3, [r7, #4]
}
    5320:	4618      	mov	r0, r3
    5322:	3708      	adds	r7, #8
    5324:	46bd      	mov	sp, r7
    5326:	bd80      	pop	{r7, pc}

00005328 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    5328:	b480      	push	{r7}
    532a:	b083      	sub	sp, #12
    532c:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    532e:	2300      	movs	r3, #0
    5330:	607b      	str	r3, [r7, #4]
    5332:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5336:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    533a:	f241 43ec 	movw	r3, #5356	; 0x14ec
    533e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5342:	681b      	ldr	r3, [r3, #0]
    5344:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    5346:	f04f 0000 	mov.w	r0, #0
    534a:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    534e:	683b      	ldr	r3, [r7, #0]
}
    5350:	4618      	mov	r0, r3
    5352:	370c      	adds	r7, #12
    5354:	46bd      	mov	sp, r7
    5356:	f85d 7b04 	ldr.w	r7, [sp], #4
    535a:	4770      	bx	lr

0000535c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    535c:	b480      	push	{r7}
    535e:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    5360:	f241 43e8 	movw	r3, #5352	; 0x14e8
    5364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5368:	681b      	ldr	r3, [r3, #0]
}
    536a:	4618      	mov	r0, r3
    536c:	46bd      	mov	sp, r7
    536e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5372:	4770      	bx	lr

00005374 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    5374:	b580      	push	{r7, lr}
    5376:	b082      	sub	sp, #8
    5378:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    537a:	f241 43fc 	movw	r3, #5372	; 0x14fc
    537e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5382:	681b      	ldr	r3, [r3, #0]
    5384:	2b00      	cmp	r3, #0
    5386:	d153      	bne.n	5430 <vTaskIncrementTick+0xbc>
	{
		++xTickCount;
    5388:	f241 43ec 	movw	r3, #5356	; 0x14ec
    538c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5390:	681b      	ldr	r3, [r3, #0]
    5392:	1c5a      	adds	r2, r3, #1
    5394:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    539c:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    539e:	f241 43ec 	movw	r3, #5356	; 0x14ec
    53a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53a6:	681b      	ldr	r3, [r3, #0]
    53a8:	2b00      	cmp	r3, #0
    53aa:	d140      	bne.n	542e <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    53ac:	f241 43a0 	movw	r3, #5280	; 0x14a0
    53b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53b4:	681b      	ldr	r3, [r3, #0]
    53b6:	607b      	str	r3, [r7, #4]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    53b8:	f241 43a4 	movw	r3, #5284	; 0x14a4
    53bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53c0:	681a      	ldr	r2, [r3, #0]
    53c2:	f241 43a0 	movw	r3, #5280	; 0x14a0
    53c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ca:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    53cc:	f241 43a4 	movw	r3, #5284	; 0x14a4
    53d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53d4:	687a      	ldr	r2, [r7, #4]
    53d6:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    53d8:	f241 5308 	movw	r3, #5384	; 0x1508
    53dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53e0:	681b      	ldr	r3, [r3, #0]
    53e2:	1c5a      	adds	r2, r3, #1
    53e4:	f241 5308 	movw	r3, #5384	; 0x1508
    53e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ec:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    53ee:	f241 43a0 	movw	r3, #5280	; 0x14a0
    53f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53f6:	681b      	ldr	r3, [r3, #0]
    53f8:	681b      	ldr	r3, [r3, #0]
    53fa:	2b00      	cmp	r3, #0
    53fc:	d107      	bne.n	540e <vTaskIncrementTick+0x9a>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    53fe:	f240 5330 	movw	r3, #1328	; 0x530
    5402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5406:	f04f 32ff 	mov.w	r2, #4294967295
    540a:	601a      	str	r2, [r3, #0]
    540c:	e00f      	b.n	542e <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    540e:	f241 43a0 	movw	r3, #5280	; 0x14a0
    5412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5416:	681b      	ldr	r3, [r3, #0]
    5418:	68db      	ldr	r3, [r3, #12]
    541a:	68db      	ldr	r3, [r3, #12]
    541c:	603b      	str	r3, [r7, #0]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    541e:	683b      	ldr	r3, [r7, #0]
    5420:	685a      	ldr	r2, [r3, #4]
    5422:	f240 5330 	movw	r3, #1328	; 0x530
    5426:	f2c2 0300 	movt	r3, #8192	; 0x2000
    542a:	601a      	str	r2, [r3, #0]
    542c:	e00d      	b.n	544a <vTaskIncrementTick+0xd6>
    542e:	e00c      	b.n	544a <vTaskIncrementTick+0xd6>
		/* See if this tick has made a timeout expire. */
		//prvCheckDelayedTasks();
	}
	else
	{
		++uxMissedTicks;
    5430:	f241 5300 	movw	r3, #5376	; 0x1500
    5434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5438:	681b      	ldr	r3, [r3, #0]
    543a:	1c5a      	adds	r2, r3, #1
    543c:	f241 5300 	movw	r3, #5376	; 0x1500
    5440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5444:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    5446:	f012 fa2f 	bl	178a8 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    544a:	f241 5300 	movw	r3, #5376	; 0x1500
    544e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5452:	681b      	ldr	r3, [r3, #0]
    5454:	2b00      	cmp	r3, #0
    5456:	d101      	bne.n	545c <vTaskIncrementTick+0xe8>
		{
			vApplicationTickHook();
    5458:	f012 fa26 	bl	178a8 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    545c:	3708      	adds	r7, #8
    545e:	46bd      	mov	sp, r7
    5460:	bd80      	pop	{r7, pc}
    5462:	bf00      	nop

00005464 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    5464:	b580      	push	{r7, lr}
    5466:	b082      	sub	sp, #8
    5468:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    546a:	f241 43fc 	movw	r3, #5372	; 0x14fc
    546e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5472:	681b      	ldr	r3, [r3, #0]
    5474:	2b00      	cmp	r3, #0
    5476:	d006      	beq.n	5486 <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    5478:	f241 5304 	movw	r3, #5380	; 0x1504
    547c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5480:	2201      	movs	r2, #1
    5482:	601a      	str	r2, [r3, #0]
    5484:	e047      	b.n	5516 <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    5486:	f012 fa09 	bl	1789c <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    548a:	e00a      	b.n	54a2 <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    548c:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5490:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5494:	681b      	ldr	r3, [r3, #0]
    5496:	1e5a      	subs	r2, r3, #1
    5498:	f241 43f4 	movw	r3, #5364	; 0x14f4
    549c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54a0:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    54a2:	f241 43f4 	movw	r3, #5364	; 0x14f4
    54a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54aa:	6819      	ldr	r1, [r3, #0]
    54ac:	f241 4214 	movw	r2, #5140	; 0x1414
    54b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    54b4:	460b      	mov	r3, r1
    54b6:	009b      	lsls	r3, r3, #2
    54b8:	440b      	add	r3, r1
    54ba:	009b      	lsls	r3, r3, #2
    54bc:	4413      	add	r3, r2
    54be:	681b      	ldr	r3, [r3, #0]
    54c0:	2b00      	cmp	r3, #0
    54c2:	d0e3      	beq.n	548c <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    54c4:	f241 43f4 	movw	r3, #5364	; 0x14f4
    54c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54cc:	681a      	ldr	r2, [r3, #0]
    54ce:	4613      	mov	r3, r2
    54d0:	009b      	lsls	r3, r3, #2
    54d2:	4413      	add	r3, r2
    54d4:	009b      	lsls	r3, r3, #2
    54d6:	f241 4214 	movw	r2, #5140	; 0x1414
    54da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    54de:	4413      	add	r3, r2
    54e0:	607b      	str	r3, [r7, #4]
    54e2:	687b      	ldr	r3, [r7, #4]
    54e4:	685b      	ldr	r3, [r3, #4]
    54e6:	685a      	ldr	r2, [r3, #4]
    54e8:	687b      	ldr	r3, [r7, #4]
    54ea:	605a      	str	r2, [r3, #4]
    54ec:	687b      	ldr	r3, [r7, #4]
    54ee:	685a      	ldr	r2, [r3, #4]
    54f0:	687b      	ldr	r3, [r7, #4]
    54f2:	3308      	adds	r3, #8
    54f4:	429a      	cmp	r2, r3
    54f6:	d104      	bne.n	5502 <vTaskSwitchContext+0x9e>
    54f8:	687b      	ldr	r3, [r7, #4]
    54fa:	685b      	ldr	r3, [r3, #4]
    54fc:	685a      	ldr	r2, [r3, #4]
    54fe:	687b      	ldr	r3, [r7, #4]
    5500:	605a      	str	r2, [r3, #4]
    5502:	687b      	ldr	r3, [r7, #4]
    5504:	685b      	ldr	r3, [r3, #4]
    5506:	68da      	ldr	r2, [r3, #12]
    5508:	f241 4310 	movw	r3, #5136	; 0x1410
    550c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5510:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    5512:	f012 f9bd 	bl	17890 <myTraceSwitchedIn>
	}
}
    5516:	3708      	adds	r7, #8
    5518:	46bd      	mov	sp, r7
    551a:	bd80      	pop	{r7, pc}

0000551c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    551c:	b580      	push	{r7, lr}
    551e:	b084      	sub	sp, #16
    5520:	af00      	add	r7, sp, #0
    5522:	6078      	str	r0, [r7, #4]
    5524:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    5526:	f241 4310 	movw	r3, #5136	; 0x1410
    552a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    552e:	681b      	ldr	r3, [r3, #0]
    5530:	3318      	adds	r3, #24
    5532:	6878      	ldr	r0, [r7, #4]
    5534:	4619      	mov	r1, r3
    5536:	f7fe fe2f 	bl	4198 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    553a:	f241 4310 	movw	r3, #5136	; 0x1410
    553e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5542:	681b      	ldr	r3, [r3, #0]
    5544:	3304      	adds	r3, #4
    5546:	4618      	mov	r0, r3
    5548:	f7fe fe5e 	bl	4208 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    554c:	683b      	ldr	r3, [r7, #0]
    554e:	f1b3 3fff 	cmp.w	r3, #4294967295
    5552:	d10d      	bne.n	5570 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5554:	f241 4310 	movw	r3, #5136	; 0x1410
    5558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    555c:	681b      	ldr	r3, [r3, #0]
    555e:	3304      	adds	r3, #4
    5560:	f241 40d4 	movw	r0, #5332	; 0x14d4
    5564:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5568:	4619      	mov	r1, r3
    556a:	f7fe fded 	bl	4148 <vListInsertEnd>
    556e:	e00a      	b.n	5586 <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    5570:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5574:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5578:	681a      	ldr	r2, [r3, #0]
    557a:	683b      	ldr	r3, [r7, #0]
    557c:	4413      	add	r3, r2
    557e:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    5580:	68f8      	ldr	r0, [r7, #12]
    5582:	f000 f99f 	bl	58c4 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    5586:	3710      	adds	r7, #16
    5588:	46bd      	mov	sp, r7
    558a:	bd80      	pop	{r7, pc}

0000558c <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    558c:	b580      	push	{r7, lr}
    558e:	b084      	sub	sp, #16
    5590:	af00      	add	r7, sp, #0
    5592:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5594:	687b      	ldr	r3, [r7, #4]
    5596:	68db      	ldr	r3, [r3, #12]
    5598:	68db      	ldr	r3, [r3, #12]
    559a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    559c:	68bb      	ldr	r3, [r7, #8]
    559e:	3318      	adds	r3, #24
    55a0:	4618      	mov	r0, r3
    55a2:	f7fe fe31 	bl	4208 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    55a6:	f241 43fc 	movw	r3, #5372	; 0x14fc
    55aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55ae:	681b      	ldr	r3, [r3, #0]
    55b0:	2b00      	cmp	r3, #0
    55b2:	d126      	bne.n	5602 <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    55b4:	68bb      	ldr	r3, [r7, #8]
    55b6:	3304      	adds	r3, #4
    55b8:	4618      	mov	r0, r3
    55ba:	f7fe fe25 	bl	4208 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    55be:	68bb      	ldr	r3, [r7, #8]
    55c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55c2:	f241 43f4 	movw	r3, #5364	; 0x14f4
    55c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55ca:	681b      	ldr	r3, [r3, #0]
    55cc:	429a      	cmp	r2, r3
    55ce:	d906      	bls.n	55de <xTaskRemoveFromEventList+0x52>
    55d0:	68bb      	ldr	r3, [r7, #8]
    55d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55d4:	f241 43f4 	movw	r3, #5364	; 0x14f4
    55d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55dc:	601a      	str	r2, [r3, #0]
    55de:	68bb      	ldr	r3, [r7, #8]
    55e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55e2:	4613      	mov	r3, r2
    55e4:	009b      	lsls	r3, r3, #2
    55e6:	4413      	add	r3, r2
    55e8:	009b      	lsls	r3, r3, #2
    55ea:	f241 4214 	movw	r2, #5140	; 0x1414
    55ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    55f2:	441a      	add	r2, r3
    55f4:	68bb      	ldr	r3, [r7, #8]
    55f6:	3304      	adds	r3, #4
    55f8:	4610      	mov	r0, r2
    55fa:	4619      	mov	r1, r3
    55fc:	f7fe fda4 	bl	4148 <vListInsertEnd>
    5600:	e008      	b.n	5614 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    5602:	68bb      	ldr	r3, [r7, #8]
    5604:	3318      	adds	r3, #24
    5606:	f241 40a8 	movw	r0, #5288	; 0x14a8
    560a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    560e:	4619      	mov	r1, r3
    5610:	f7fe fd9a 	bl	4148 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5614:	68bb      	ldr	r3, [r7, #8]
    5616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5618:	f241 4310 	movw	r3, #5136	; 0x1410
    561c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5620:	681b      	ldr	r3, [r3, #0]
    5622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5624:	429a      	cmp	r2, r3
    5626:	d302      	bcc.n	562e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    5628:	2301      	movs	r3, #1
    562a:	60fb      	str	r3, [r7, #12]
    562c:	e001      	b.n	5632 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    562e:	2300      	movs	r3, #0
    5630:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    5632:	68fb      	ldr	r3, [r7, #12]
}
    5634:	4618      	mov	r0, r3
    5636:	3710      	adds	r7, #16
    5638:	46bd      	mov	sp, r7
    563a:	bd80      	pop	{r7, pc}

0000563c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    563c:	b480      	push	{r7}
    563e:	b083      	sub	sp, #12
    5640:	af00      	add	r7, sp, #0
    5642:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    5644:	f241 5308 	movw	r3, #5384	; 0x1508
    5648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    564c:	681a      	ldr	r2, [r3, #0]
    564e:	687b      	ldr	r3, [r7, #4]
    5650:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    5652:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    565a:	681a      	ldr	r2, [r3, #0]
    565c:	687b      	ldr	r3, [r7, #4]
    565e:	605a      	str	r2, [r3, #4]
}
    5660:	370c      	adds	r7, #12
    5662:	46bd      	mov	sp, r7
    5664:	f85d 7b04 	ldr.w	r7, [sp], #4
    5668:	4770      	bx	lr
    566a:	bf00      	nop

0000566c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    566c:	b580      	push	{r7, lr}
    566e:	b084      	sub	sp, #16
    5670:	af00      	add	r7, sp, #0
    5672:	6078      	str	r0, [r7, #4]
    5674:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    5676:	f000 fb13 	bl	5ca0 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    567a:	683b      	ldr	r3, [r7, #0]
    567c:	681b      	ldr	r3, [r3, #0]
    567e:	f1b3 3fff 	cmp.w	r3, #4294967295
    5682:	d102      	bne.n	568a <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    5684:	2300      	movs	r3, #0
    5686:	60fb      	str	r3, [r7, #12]
    5688:	e035      	b.n	56f6 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    568a:	687b      	ldr	r3, [r7, #4]
    568c:	681a      	ldr	r2, [r3, #0]
    568e:	f241 5308 	movw	r3, #5384	; 0x1508
    5692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5696:	681b      	ldr	r3, [r3, #0]
    5698:	429a      	cmp	r2, r3
    569a:	d00b      	beq.n	56b4 <xTaskCheckForTimeOut+0x48>
    569c:	687b      	ldr	r3, [r7, #4]
    569e:	685a      	ldr	r2, [r3, #4]
    56a0:	f241 43ec 	movw	r3, #5356	; 0x14ec
    56a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56a8:	681b      	ldr	r3, [r3, #0]
    56aa:	429a      	cmp	r2, r3
    56ac:	d802      	bhi.n	56b4 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    56ae:	2301      	movs	r3, #1
    56b0:	60fb      	str	r3, [r7, #12]
    56b2:	e020      	b.n	56f6 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    56b4:	f241 43ec 	movw	r3, #5356	; 0x14ec
    56b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56bc:	681a      	ldr	r2, [r3, #0]
    56be:	687b      	ldr	r3, [r7, #4]
    56c0:	685b      	ldr	r3, [r3, #4]
    56c2:	1ad2      	subs	r2, r2, r3
    56c4:	683b      	ldr	r3, [r7, #0]
    56c6:	681b      	ldr	r3, [r3, #0]
    56c8:	429a      	cmp	r2, r3
    56ca:	d212      	bcs.n	56f2 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    56cc:	683b      	ldr	r3, [r7, #0]
    56ce:	681a      	ldr	r2, [r3, #0]
    56d0:	687b      	ldr	r3, [r7, #4]
    56d2:	6859      	ldr	r1, [r3, #4]
    56d4:	f241 43ec 	movw	r3, #5356	; 0x14ec
    56d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56dc:	681b      	ldr	r3, [r3, #0]
    56de:	1acb      	subs	r3, r1, r3
    56e0:	441a      	add	r2, r3
    56e2:	683b      	ldr	r3, [r7, #0]
    56e4:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    56e6:	6878      	ldr	r0, [r7, #4]
    56e8:	f7ff ffa8 	bl	563c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    56ec:	2300      	movs	r3, #0
    56ee:	60fb      	str	r3, [r7, #12]
    56f0:	e001      	b.n	56f6 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    56f2:	2301      	movs	r3, #1
    56f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    56f6:	f000 fae9 	bl	5ccc <vPortExitCritical>

	return xReturn;
    56fa:	68fb      	ldr	r3, [r7, #12]
}
    56fc:	4618      	mov	r0, r3
    56fe:	3710      	adds	r7, #16
    5700:	46bd      	mov	sp, r7
    5702:	bd80      	pop	{r7, pc}

00005704 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    5704:	b480      	push	{r7}
    5706:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    5708:	f241 5304 	movw	r3, #5380	; 0x1504
    570c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5710:	2201      	movs	r2, #1
    5712:	601a      	str	r2, [r3, #0]
}
    5714:	46bd      	mov	sp, r7
    5716:	f85d 7b04 	ldr.w	r7, [sp], #4
    571a:	4770      	bx	lr

0000571c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    571c:	b580      	push	{r7, lr}
    571e:	b082      	sub	sp, #8
    5720:	af00      	add	r7, sp, #0
    5722:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    5724:	f000 f886 	bl	5834 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    5728:	f000 faac 	bl	5c84 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    572c:	e7fa      	b.n	5724 <prvIdleTask+0x8>
    572e:	bf00      	nop

00005730 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    5730:	b580      	push	{r7, lr}
    5732:	b084      	sub	sp, #16
    5734:	af00      	add	r7, sp, #0
    5736:	60f8      	str	r0, [r7, #12]
    5738:	60b9      	str	r1, [r7, #8]
    573a:	607a      	str	r2, [r7, #4]
    573c:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    573e:	68fb      	ldr	r3, [r7, #12]
    5740:	3334      	adds	r3, #52	; 0x34
    5742:	4618      	mov	r0, r3
    5744:	68b9      	ldr	r1, [r7, #8]
    5746:	2210      	movs	r2, #16
    5748:	f013 f93c 	bl	189c4 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    574c:	68fb      	ldr	r3, [r7, #12]
    574e:	2200      	movs	r2, #0
    5750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    5754:	687b      	ldr	r3, [r7, #4]
    5756:	2b04      	cmp	r3, #4
    5758:	d901      	bls.n	575e <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    575a:	2304      	movs	r3, #4
    575c:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    575e:	68fb      	ldr	r3, [r7, #12]
    5760:	687a      	ldr	r2, [r7, #4]
    5762:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    5764:	68fb      	ldr	r3, [r7, #12]
    5766:	687a      	ldr	r2, [r7, #4]
    5768:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    576a:	68fb      	ldr	r3, [r7, #12]
    576c:	3304      	adds	r3, #4
    576e:	4618      	mov	r0, r3
    5770:	f7fe fcde 	bl	4130 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    5774:	68fb      	ldr	r3, [r7, #12]
    5776:	3318      	adds	r3, #24
    5778:	4618      	mov	r0, r3
    577a:	f7fe fcd9 	bl	4130 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    577e:	68fb      	ldr	r3, [r7, #12]
    5780:	68fa      	ldr	r2, [r7, #12]
    5782:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5784:	687b      	ldr	r3, [r7, #4]
    5786:	f1c3 0205 	rsb	r2, r3, #5
    578a:	68fb      	ldr	r3, [r7, #12]
    578c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    578e:	68fb      	ldr	r3, [r7, #12]
    5790:	68fa      	ldr	r2, [r7, #12]
    5792:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    5794:	3710      	adds	r7, #16
    5796:	46bd      	mov	sp, r7
    5798:	bd80      	pop	{r7, pc}
    579a:	bf00      	nop

0000579c <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    579c:	b580      	push	{r7, lr}
    579e:	b082      	sub	sp, #8
    57a0:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    57a2:	2300      	movs	r3, #0
    57a4:	607b      	str	r3, [r7, #4]
    57a6:	e00f      	b.n	57c8 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    57a8:	687a      	ldr	r2, [r7, #4]
    57aa:	4613      	mov	r3, r2
    57ac:	009b      	lsls	r3, r3, #2
    57ae:	4413      	add	r3, r2
    57b0:	009b      	lsls	r3, r3, #2
    57b2:	f241 4214 	movw	r2, #5140	; 0x1414
    57b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    57ba:	4413      	add	r3, r2
    57bc:	4618      	mov	r0, r3
    57be:	f7fe fc97 	bl	40f0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    57c2:	687b      	ldr	r3, [r7, #4]
    57c4:	3301      	adds	r3, #1
    57c6:	607b      	str	r3, [r7, #4]
    57c8:	687b      	ldr	r3, [r7, #4]
    57ca:	2b04      	cmp	r3, #4
    57cc:	d9ec      	bls.n	57a8 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    57ce:	f241 4078 	movw	r0, #5240	; 0x1478
    57d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    57d6:	f7fe fc8b 	bl	40f0 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    57da:	f241 408c 	movw	r0, #5260	; 0x148c
    57de:	f2c2 0000 	movt	r0, #8192	; 0x2000
    57e2:	f7fe fc85 	bl	40f0 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    57e6:	f241 40a8 	movw	r0, #5288	; 0x14a8
    57ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
    57ee:	f7fe fc7f 	bl	40f0 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    57f2:	f241 40bc 	movw	r0, #5308	; 0x14bc
    57f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    57fa:	f7fe fc79 	bl	40f0 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    57fe:	f241 40d4 	movw	r0, #5332	; 0x14d4
    5802:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5806:	f7fe fc73 	bl	40f0 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    580a:	f241 43a0 	movw	r3, #5280	; 0x14a0
    580e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5812:	f241 4278 	movw	r2, #5240	; 0x1478
    5816:	f2c2 0200 	movt	r2, #8192	; 0x2000
    581a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    581c:	f241 43a4 	movw	r3, #5284	; 0x14a4
    5820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5824:	f241 428c 	movw	r2, #5260	; 0x148c
    5828:	f2c2 0200 	movt	r2, #8192	; 0x2000
    582c:	601a      	str	r2, [r3, #0]
}
    582e:	3708      	adds	r7, #8
    5830:	46bd      	mov	sp, r7
    5832:	bd80      	pop	{r7, pc}

00005834 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    5834:	b580      	push	{r7, lr}
    5836:	b082      	sub	sp, #8
    5838:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    583a:	f241 43d0 	movw	r3, #5328	; 0x14d0
    583e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5842:	681b      	ldr	r3, [r3, #0]
    5844:	2b00      	cmp	r3, #0
    5846:	d03a      	beq.n	58be <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    5848:	f7ff fcb2 	bl	51b0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    584c:	f241 43bc 	movw	r3, #5308	; 0x14bc
    5850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5854:	681b      	ldr	r3, [r3, #0]
    5856:	2b00      	cmp	r3, #0
    5858:	bf14      	ite	ne
    585a:	2300      	movne	r3, #0
    585c:	2301      	moveq	r3, #1
    585e:	b2db      	uxtb	r3, r3
    5860:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    5862:	f7ff fcb7 	bl	51d4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    5866:	687b      	ldr	r3, [r7, #4]
    5868:	2b00      	cmp	r3, #0
    586a:	d128      	bne.n	58be <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    586c:	f000 fa18 	bl	5ca0 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    5870:	f241 43bc 	movw	r3, #5308	; 0x14bc
    5874:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5878:	68db      	ldr	r3, [r3, #12]
    587a:	68db      	ldr	r3, [r3, #12]
    587c:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    587e:	683b      	ldr	r3, [r7, #0]
    5880:	3304      	adds	r3, #4
    5882:	4618      	mov	r0, r3
    5884:	f7fe fcc0 	bl	4208 <vListRemove>
					--uxCurrentNumberOfTasks;
    5888:	f241 43e8 	movw	r3, #5352	; 0x14e8
    588c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5890:	681b      	ldr	r3, [r3, #0]
    5892:	1e5a      	subs	r2, r3, #1
    5894:	f241 43e8 	movw	r3, #5352	; 0x14e8
    5898:	f2c2 0300 	movt	r3, #8192	; 0x2000
    589c:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    589e:	f241 43d0 	movw	r3, #5328	; 0x14d0
    58a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58a6:	681b      	ldr	r3, [r3, #0]
    58a8:	1e5a      	subs	r2, r3, #1
    58aa:	f241 43d0 	movw	r3, #5328	; 0x14d0
    58ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58b2:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    58b4:	f000 fa0a 	bl	5ccc <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    58b8:	6838      	ldr	r0, [r7, #0]
    58ba:	f000 f879 	bl	59b0 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    58be:	3708      	adds	r7, #8
    58c0:	46bd      	mov	sp, r7
    58c2:	bd80      	pop	{r7, pc}

000058c4 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    58c4:	b580      	push	{r7, lr}
    58c6:	b082      	sub	sp, #8
    58c8:	af00      	add	r7, sp, #0
    58ca:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    58cc:	f241 4310 	movw	r3, #5136	; 0x1410
    58d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58d4:	681b      	ldr	r3, [r3, #0]
    58d6:	687a      	ldr	r2, [r7, #4]
    58d8:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    58da:	f241 43ec 	movw	r3, #5356	; 0x14ec
    58de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58e2:	681b      	ldr	r3, [r3, #0]
    58e4:	687a      	ldr	r2, [r7, #4]
    58e6:	429a      	cmp	r2, r3
    58e8:	d20f      	bcs.n	590a <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    58ea:	f241 43a4 	movw	r3, #5284	; 0x14a4
    58ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58f2:	681a      	ldr	r2, [r3, #0]
    58f4:	f241 4310 	movw	r3, #5136	; 0x1410
    58f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58fc:	681b      	ldr	r3, [r3, #0]
    58fe:	3304      	adds	r3, #4
    5900:	4610      	mov	r0, r2
    5902:	4619      	mov	r1, r3
    5904:	f7fe fc48 	bl	4198 <vListInsert>
    5908:	e01c      	b.n	5944 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    590a:	f241 43a0 	movw	r3, #5280	; 0x14a0
    590e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5912:	681a      	ldr	r2, [r3, #0]
    5914:	f241 4310 	movw	r3, #5136	; 0x1410
    5918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    591c:	681b      	ldr	r3, [r3, #0]
    591e:	3304      	adds	r3, #4
    5920:	4610      	mov	r0, r2
    5922:	4619      	mov	r1, r3
    5924:	f7fe fc38 	bl	4198 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    5928:	f240 5330 	movw	r3, #1328	; 0x530
    592c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5930:	681b      	ldr	r3, [r3, #0]
    5932:	687a      	ldr	r2, [r7, #4]
    5934:	429a      	cmp	r2, r3
    5936:	d205      	bcs.n	5944 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    5938:	f240 5330 	movw	r3, #1328	; 0x530
    593c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5940:	687a      	ldr	r2, [r7, #4]
    5942:	601a      	str	r2, [r3, #0]
		}
	}
}
    5944:	3708      	adds	r7, #8
    5946:	46bd      	mov	sp, r7
    5948:	bd80      	pop	{r7, pc}
    594a:	bf00      	nop

0000594c <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    594c:	b580      	push	{r7, lr}
    594e:	b084      	sub	sp, #16
    5950:	af00      	add	r7, sp, #0
    5952:	4603      	mov	r3, r0
    5954:	6039      	str	r1, [r7, #0]
    5956:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    5958:	2050      	movs	r0, #80	; 0x50
    595a:	f000 fa1b 	bl	5d94 <pvPortMalloc>
    595e:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    5960:	68fb      	ldr	r3, [r7, #12]
    5962:	2b00      	cmp	r3, #0
    5964:	d01f      	beq.n	59a6 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    5966:	683b      	ldr	r3, [r7, #0]
    5968:	2b00      	cmp	r3, #0
    596a:	d106      	bne.n	597a <prvAllocateTCBAndStack+0x2e>
    596c:	88fb      	ldrh	r3, [r7, #6]
    596e:	009b      	lsls	r3, r3, #2
    5970:	4618      	mov	r0, r3
    5972:	f000 fa0f 	bl	5d94 <pvPortMalloc>
    5976:	4603      	mov	r3, r0
    5978:	e000      	b.n	597c <prvAllocateTCBAndStack+0x30>
    597a:	683b      	ldr	r3, [r7, #0]
    597c:	68fa      	ldr	r2, [r7, #12]
    597e:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    5980:	68fb      	ldr	r3, [r7, #12]
    5982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5984:	2b00      	cmp	r3, #0
    5986:	d105      	bne.n	5994 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    5988:	68f8      	ldr	r0, [r7, #12]
    598a:	f000 fac7 	bl	5f1c <vPortFree>
			pxNewTCB = NULL;
    598e:	2300      	movs	r3, #0
    5990:	60fb      	str	r3, [r7, #12]
    5992:	e008      	b.n	59a6 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5994:	68fb      	ldr	r3, [r7, #12]
    5996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5998:	88fb      	ldrh	r3, [r7, #6]
    599a:	009b      	lsls	r3, r3, #2
    599c:	4610      	mov	r0, r2
    599e:	21a5      	movs	r1, #165	; 0xa5
    59a0:	461a      	mov	r2, r3
    59a2:	f012 ffbf 	bl	18924 <memset>
		}
	}

	return pxNewTCB;
    59a6:	68fb      	ldr	r3, [r7, #12]
}
    59a8:	4618      	mov	r0, r3
    59aa:	3710      	adds	r7, #16
    59ac:	46bd      	mov	sp, r7
    59ae:	bd80      	pop	{r7, pc}

000059b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    59b0:	b580      	push	{r7, lr}
    59b2:	b082      	sub	sp, #8
    59b4:	af00      	add	r7, sp, #0
    59b6:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    59b8:	687b      	ldr	r3, [r7, #4]
    59ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    59bc:	4618      	mov	r0, r3
    59be:	f000 faad 	bl	5f1c <vPortFree>
		vPortFree( pxTCB );
    59c2:	6878      	ldr	r0, [r7, #4]
    59c4:	f000 faaa 	bl	5f1c <vPortFree>
	}
    59c8:	3708      	adds	r7, #8
    59ca:	46bd      	mov	sp, r7
    59cc:	bd80      	pop	{r7, pc}
    59ce:	bf00      	nop

000059d0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    59d0:	b480      	push	{r7}
    59d2:	b083      	sub	sp, #12
    59d4:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    59d6:	f241 4310 	movw	r3, #5136	; 0x1410
    59da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59de:	681b      	ldr	r3, [r3, #0]
    59e0:	607b      	str	r3, [r7, #4]

		return xReturn;
    59e2:	687b      	ldr	r3, [r7, #4]
	}
    59e4:	4618      	mov	r0, r3
    59e6:	370c      	adds	r7, #12
    59e8:	46bd      	mov	sp, r7
    59ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    59ee:	4770      	bx	lr

000059f0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    59f0:	b580      	push	{r7, lr}
    59f2:	b084      	sub	sp, #16
    59f4:	af00      	add	r7, sp, #0
    59f6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    59f8:	687b      	ldr	r3, [r7, #4]
    59fa:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    59fc:	68fb      	ldr	r3, [r7, #12]
    59fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a00:	f241 4310 	movw	r3, #5136	; 0x1410
    5a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a08:	681b      	ldr	r3, [r3, #0]
    5a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5a0c:	429a      	cmp	r2, r3
    5a0e:	d24f      	bcs.n	5ab0 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    5a10:	f241 4310 	movw	r3, #5136	; 0x1410
    5a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a18:	681b      	ldr	r3, [r3, #0]
    5a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5a1c:	f1c3 0205 	rsb	r2, r3, #5
    5a20:	68fb      	ldr	r3, [r7, #12]
    5a22:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    5a24:	68fb      	ldr	r3, [r7, #12]
    5a26:	6959      	ldr	r1, [r3, #20]
    5a28:	68fb      	ldr	r3, [r7, #12]
    5a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a2c:	4613      	mov	r3, r2
    5a2e:	009b      	lsls	r3, r3, #2
    5a30:	4413      	add	r3, r2
    5a32:	009b      	lsls	r3, r3, #2
    5a34:	f241 4214 	movw	r2, #5140	; 0x1414
    5a38:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5a3c:	4413      	add	r3, r2
    5a3e:	4299      	cmp	r1, r3
    5a40:	d12e      	bne.n	5aa0 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    5a42:	68fb      	ldr	r3, [r7, #12]
    5a44:	3304      	adds	r3, #4
    5a46:	4618      	mov	r0, r3
    5a48:	f7fe fbde 	bl	4208 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5a4c:	f241 4310 	movw	r3, #5136	; 0x1410
    5a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a54:	681b      	ldr	r3, [r3, #0]
    5a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a58:	68fb      	ldr	r3, [r7, #12]
    5a5a:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    5a5c:	68fb      	ldr	r3, [r7, #12]
    5a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a60:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a68:	681b      	ldr	r3, [r3, #0]
    5a6a:	429a      	cmp	r2, r3
    5a6c:	d906      	bls.n	5a7c <vTaskPriorityInherit+0x8c>
    5a6e:	68fb      	ldr	r3, [r7, #12]
    5a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a72:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a7a:	601a      	str	r2, [r3, #0]
    5a7c:	68fb      	ldr	r3, [r7, #12]
    5a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a80:	4613      	mov	r3, r2
    5a82:	009b      	lsls	r3, r3, #2
    5a84:	4413      	add	r3, r2
    5a86:	009b      	lsls	r3, r3, #2
    5a88:	f241 4214 	movw	r2, #5140	; 0x1414
    5a8c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5a90:	441a      	add	r2, r3
    5a92:	68fb      	ldr	r3, [r7, #12]
    5a94:	3304      	adds	r3, #4
    5a96:	4610      	mov	r0, r2
    5a98:	4619      	mov	r1, r3
    5a9a:	f7fe fb55 	bl	4148 <vListInsertEnd>
    5a9e:	e007      	b.n	5ab0 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5aa0:	f241 4310 	movw	r3, #5136	; 0x1410
    5aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aa8:	681b      	ldr	r3, [r3, #0]
    5aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5aac:	68fb      	ldr	r3, [r7, #12]
    5aae:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    5ab0:	3710      	adds	r7, #16
    5ab2:	46bd      	mov	sp, r7
    5ab4:	bd80      	pop	{r7, pc}
    5ab6:	bf00      	nop

00005ab8 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    5ab8:	b580      	push	{r7, lr}
    5aba:	b084      	sub	sp, #16
    5abc:	af00      	add	r7, sp, #0
    5abe:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5ac0:	687b      	ldr	r3, [r7, #4]
    5ac2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5ac4:	687b      	ldr	r3, [r7, #4]
    5ac6:	2b00      	cmp	r3, #0
    5ac8:	d035      	beq.n	5b36 <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    5aca:	68fb      	ldr	r3, [r7, #12]
    5acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5ace:	68fb      	ldr	r3, [r7, #12]
    5ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5ad2:	429a      	cmp	r2, r3
    5ad4:	d02f      	beq.n	5b36 <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    5ad6:	68fb      	ldr	r3, [r7, #12]
    5ad8:	3304      	adds	r3, #4
    5ada:	4618      	mov	r0, r3
    5adc:	f7fe fb94 	bl	4208 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5ae0:	68fb      	ldr	r3, [r7, #12]
    5ae2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5ae4:	68fb      	ldr	r3, [r7, #12]
    5ae6:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    5ae8:	68fb      	ldr	r3, [r7, #12]
    5aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5aec:	f1c3 0205 	rsb	r2, r3, #5
    5af0:	68fb      	ldr	r3, [r7, #12]
    5af2:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    5af4:	68fb      	ldr	r3, [r7, #12]
    5af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5af8:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b00:	681b      	ldr	r3, [r3, #0]
    5b02:	429a      	cmp	r2, r3
    5b04:	d906      	bls.n	5b14 <vTaskPriorityDisinherit+0x5c>
    5b06:	68fb      	ldr	r3, [r7, #12]
    5b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b0a:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b12:	601a      	str	r2, [r3, #0]
    5b14:	68fb      	ldr	r3, [r7, #12]
    5b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b18:	4613      	mov	r3, r2
    5b1a:	009b      	lsls	r3, r3, #2
    5b1c:	4413      	add	r3, r2
    5b1e:	009b      	lsls	r3, r3, #2
    5b20:	f241 4214 	movw	r2, #5140	; 0x1414
    5b24:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5b28:	441a      	add	r2, r3
    5b2a:	68fb      	ldr	r3, [r7, #12]
    5b2c:	3304      	adds	r3, #4
    5b2e:	4610      	mov	r0, r2
    5b30:	4619      	mov	r1, r3
    5b32:	f7fe fb09 	bl	4148 <vListInsertEnd>
			}
		}
	}
    5b36:	3710      	adds	r7, #16
    5b38:	46bd      	mov	sp, r7
    5b3a:	bd80      	pop	{r7, pc}

00005b3c <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    5b3c:	b480      	push	{r7}
    5b3e:	b083      	sub	sp, #12
    5b40:	af00      	add	r7, sp, #0
    5b42:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    5b44:	687b      	ldr	r3, [r7, #4]
    5b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    5b48:	4618      	mov	r0, r3
    5b4a:	370c      	adds	r7, #12
    5b4c:	46bd      	mov	sp, r7
    5b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b52:	4770      	bx	lr

00005b54 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    5b54:	b480      	push	{r7}
    5b56:	b083      	sub	sp, #12
    5b58:	af00      	add	r7, sp, #0
    5b5a:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    5b5c:	687b      	ldr	r3, [r7, #4]
    5b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    5b60:	4618      	mov	r0, r3
    5b62:	370c      	adds	r7, #12
    5b64:	46bd      	mov	sp, r7
    5b66:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b6a:	4770      	bx	lr

00005b6c <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    5b6c:	b480      	push	{r7}
    5b6e:	b083      	sub	sp, #12
    5b70:	af00      	add	r7, sp, #0
    5b72:	6078      	str	r0, [r7, #4]
    5b74:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    5b76:	687b      	ldr	r3, [r7, #4]
    5b78:	683a      	ldr	r2, [r7, #0]
    5b7a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    5b7c:	370c      	adds	r7, #12
    5b7e:	46bd      	mov	sp, r7
    5b80:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b84:	4770      	bx	lr
    5b86:	bf00      	nop

00005b88 <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    5b88:	b480      	push	{r7}
    5b8a:	b083      	sub	sp, #12
    5b8c:	af00      	add	r7, sp, #0
    5b8e:	6078      	str	r0, [r7, #4]
    5b90:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    5b92:	687b      	ldr	r3, [r7, #4]
    5b94:	683a      	ldr	r2, [r7, #0]
    5b96:	649a      	str	r2, [r3, #72]	; 0x48
    }
    5b98:	370c      	adds	r7, #12
    5b9a:	46bd      	mov	sp, r7
    5b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ba0:	4770      	bx	lr
    5ba2:	bf00      	nop

00005ba4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5ba4:	b480      	push	{r7}
    5ba6:	b085      	sub	sp, #20
    5ba8:	af00      	add	r7, sp, #0
    5baa:	60f8      	str	r0, [r7, #12]
    5bac:	60b9      	str	r1, [r7, #8]
    5bae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5bb0:	68fb      	ldr	r3, [r7, #12]
    5bb2:	3b04      	subs	r3, #4
    5bb4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5bb6:	68fb      	ldr	r3, [r7, #12]
    5bb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5bbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5bbe:	68fb      	ldr	r3, [r7, #12]
    5bc0:	3b04      	subs	r3, #4
    5bc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5bc4:	68ba      	ldr	r2, [r7, #8]
    5bc6:	68fb      	ldr	r3, [r7, #12]
    5bc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5bca:	68fb      	ldr	r3, [r7, #12]
    5bcc:	3b04      	subs	r3, #4
    5bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    5bd0:	68fb      	ldr	r3, [r7, #12]
    5bd2:	2200      	movs	r2, #0
    5bd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5bd6:	68fb      	ldr	r3, [r7, #12]
    5bd8:	3b14      	subs	r3, #20
    5bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    5bdc:	687a      	ldr	r2, [r7, #4]
    5bde:	68fb      	ldr	r3, [r7, #12]
    5be0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5be2:	68fb      	ldr	r3, [r7, #12]
    5be4:	3b20      	subs	r3, #32
    5be6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5be8:	68fb      	ldr	r3, [r7, #12]
}
    5bea:	4618      	mov	r0, r3
    5bec:	3714      	adds	r7, #20
    5bee:	46bd      	mov	sp, r7
    5bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bf4:	4770      	bx	lr
    5bf6:	bf00      	nop

00005bf8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5bf8:	4b06      	ldr	r3, [pc, #24]	; (5c14 <pxCurrentTCBConst2>)
    5bfa:	6819      	ldr	r1, [r3, #0]
    5bfc:	6808      	ldr	r0, [r1, #0]
    5bfe:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5c02:	f380 8809 	msr	PSP, r0
    5c06:	f04f 0000 	mov.w	r0, #0
    5c0a:	f380 8811 	msr	BASEPRI, r0
    5c0e:	f04e 0e0d 	orr.w	lr, lr, #13
    5c12:	4770      	bx	lr

00005c14 <pxCurrentTCBConst2>:
    5c14:	20001410 	.word	0x20001410

00005c18 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    5c18:	485d      	ldr	r0, [pc, #372]	; (5d90 <prvSetupTimerInterrupt+0x2c>)
    5c1a:	6800      	ldr	r0, [r0, #0]
    5c1c:	6800      	ldr	r0, [r0, #0]
    5c1e:	f380 8808 	msr	MSP, r0
    5c22:	b662      	cpsie	i
    5c24:	df00      	svc	0
    5c26:	bf00      	nop

00005c28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    5c28:	b580      	push	{r7, lr}
    5c2a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    5c2c:	f64e 5320 	movw	r3, #60704	; 0xed20
    5c30:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5c34:	f64e 5220 	movw	r2, #60704	; 0xed20
    5c38:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5c3c:	6812      	ldr	r2, [r2, #0]
    5c3e:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    5c42:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5c44:	f64e 5320 	movw	r3, #60704	; 0xed20
    5c48:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5c4c:	f64e 5220 	movw	r2, #60704	; 0xed20
    5c50:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5c54:	6812      	ldr	r2, [r2, #0]
    5c56:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    5c5a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5c5c:	f000 f882 	bl	5d64 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5c60:	f240 5334 	movw	r3, #1332	; 0x534
    5c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c68:	2200      	movs	r2, #0
    5c6a:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5c6c:	f7ff ffd4 	bl	5c18 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5c70:	2300      	movs	r3, #0
}
    5c72:	4618      	mov	r0, r3
    5c74:	bd80      	pop	{r7, pc}
    5c76:	bf00      	nop

00005c78 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5c78:	b480      	push	{r7}
    5c7a:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5c7c:	46bd      	mov	sp, r7
    5c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c82:	4770      	bx	lr

00005c84 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5c84:	b480      	push	{r7}
    5c86:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5c88:	f64e 5304 	movw	r3, #60676	; 0xed04
    5c8c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5c94:	601a      	str	r2, [r3, #0]
}
    5c96:	46bd      	mov	sp, r7
    5c98:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c9c:	4770      	bx	lr
    5c9e:	bf00      	nop

00005ca0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5ca0:	b480      	push	{r7}
    5ca2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5ca4:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5ca8:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5cac:	f240 5334 	movw	r3, #1332	; 0x534
    5cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cb4:	681b      	ldr	r3, [r3, #0]
    5cb6:	1c5a      	adds	r2, r3, #1
    5cb8:	f240 5334 	movw	r3, #1332	; 0x534
    5cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cc0:	601a      	str	r2, [r3, #0]
}
    5cc2:	46bd      	mov	sp, r7
    5cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cc8:	4770      	bx	lr
    5cca:	bf00      	nop

00005ccc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5ccc:	b480      	push	{r7}
    5cce:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5cd0:	f240 5334 	movw	r3, #1332	; 0x534
    5cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cd8:	681b      	ldr	r3, [r3, #0]
    5cda:	1e5a      	subs	r2, r3, #1
    5cdc:	f240 5334 	movw	r3, #1332	; 0x534
    5ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ce4:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5ce6:	f240 5334 	movw	r3, #1332	; 0x534
    5cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cee:	681b      	ldr	r3, [r3, #0]
    5cf0:	2b00      	cmp	r3, #0
    5cf2:	d103      	bne.n	5cfc <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5cf4:	f04f 0000 	mov.w	r0, #0
    5cf8:	f380 8811 	msr	BASEPRI, r0
	}
}
    5cfc:	46bd      	mov	sp, r7
    5cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d02:	4770      	bx	lr

00005d04 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5d04:	f3ef 8009 	mrs	r0, PSP
    5d08:	4b0c      	ldr	r3, [pc, #48]	; (5d3c <pxCurrentTCBConst>)
    5d0a:	681a      	ldr	r2, [r3, #0]
    5d0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5d10:	6010      	str	r0, [r2, #0]
    5d12:	e92d 4008 	stmdb	sp!, {r3, lr}
    5d16:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5d1a:	f380 8811 	msr	BASEPRI, r0
    5d1e:	f7ff fba1 	bl	5464 <vTaskSwitchContext>
    5d22:	f04f 0000 	mov.w	r0, #0
    5d26:	f380 8811 	msr	BASEPRI, r0
    5d2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5d2e:	6819      	ldr	r1, [r3, #0]
    5d30:	6808      	ldr	r0, [r1, #0]
    5d32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5d36:	f380 8809 	msr	PSP, r0
    5d3a:	4770      	bx	lr

00005d3c <pxCurrentTCBConst>:
    5d3c:	20001410 	.word	0x20001410

00005d40 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5d40:	b580      	push	{r7, lr}
    5d42:	b082      	sub	sp, #8
    5d44:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5d46:	2300      	movs	r3, #0
    5d48:	607b      	str	r3, [r7, #4]
    5d4a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5d4e:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    5d52:	f7ff fb0f 	bl	5374 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5d56:	f04f 0000 	mov.w	r0, #0
    5d5a:	f380 8811 	msr	BASEPRI, r0
}
    5d5e:	3708      	adds	r7, #8
    5d60:	46bd      	mov	sp, r7
    5d62:	bd80      	pop	{r7, pc}

00005d64 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5d64:	b480      	push	{r7}
    5d66:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5d68:	f24e 0314 	movw	r3, #57364	; 0xe014
    5d6c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5d70:	f644 32bf 	movw	r2, #19391	; 0x4bbf
    5d74:	f2c0 0203 	movt	r2, #3
    5d78:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5d7a:	f24e 0310 	movw	r3, #57360	; 0xe010
    5d7e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5d82:	2207      	movs	r2, #7
    5d84:	601a      	str	r2, [r3, #0]
}
    5d86:	46bd      	mov	sp, r7
    5d88:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d8c:	4770      	bx	lr
    5d8e:	0000      	.short	0x0000
    5d90:	e000ed08 	.word	0xe000ed08

00005d94 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5d94:	b580      	push	{r7, lr}
    5d96:	b08a      	sub	sp, #40	; 0x28
    5d98:	af00      	add	r7, sp, #0
    5d9a:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5d9c:	2300      	movs	r3, #0
    5d9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5da0:	f7ff fa06 	bl	51b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5da4:	f24c 5320 	movw	r3, #50464	; 0xc520
    5da8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dac:	681b      	ldr	r3, [r3, #0]
    5dae:	2b00      	cmp	r3, #0
    5db0:	d130      	bne.n	5e14 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5db2:	f24c 5310 	movw	r3, #50448	; 0xc510
    5db6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dba:	f241 5210 	movw	r2, #5392	; 0x1510
    5dbe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5dc2:	601a      	str	r2, [r3, #0]
    5dc4:	f24c 5310 	movw	r3, #50448	; 0xc510
    5dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dcc:	2200      	movs	r2, #0
    5dce:	605a      	str	r2, [r3, #4]
    5dd0:	f24c 5318 	movw	r3, #50456	; 0xc518
    5dd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dd8:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5ddc:	605a      	str	r2, [r3, #4]
    5dde:	f24c 5318 	movw	r3, #50456	; 0xc518
    5de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5de6:	2200      	movs	r2, #0
    5de8:	601a      	str	r2, [r3, #0]
    5dea:	f241 5310 	movw	r3, #5392	; 0x1510
    5dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5df2:	617b      	str	r3, [r7, #20]
    5df4:	697b      	ldr	r3, [r7, #20]
    5df6:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5dfa:	605a      	str	r2, [r3, #4]
    5dfc:	697a      	ldr	r2, [r7, #20]
    5dfe:	f24c 5318 	movw	r3, #50456	; 0xc518
    5e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e06:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5e08:	f24c 5320 	movw	r3, #50464	; 0xc520
    5e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e10:	2201      	movs	r2, #1
    5e12:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5e14:	687b      	ldr	r3, [r7, #4]
    5e16:	2b00      	cmp	r3, #0
    5e18:	d00d      	beq.n	5e36 <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5e1a:	2310      	movs	r3, #16
    5e1c:	687a      	ldr	r2, [r7, #4]
    5e1e:	4413      	add	r3, r2
    5e20:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5e22:	687b      	ldr	r3, [r7, #4]
    5e24:	f003 0307 	and.w	r3, r3, #7
    5e28:	2b00      	cmp	r3, #0
    5e2a:	d004      	beq.n	5e36 <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5e2c:	687b      	ldr	r3, [r7, #4]
    5e2e:	f023 0307 	bic.w	r3, r3, #7
    5e32:	3308      	adds	r3, #8
    5e34:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5e36:	687b      	ldr	r3, [r7, #4]
    5e38:	2b00      	cmp	r3, #0
    5e3a:	d068      	beq.n	5f0e <pvPortMalloc+0x17a>
    5e3c:	687b      	ldr	r3, [r7, #4]
    5e3e:	f5b3 2f96 	cmp.w	r3, #307200	; 0x4b000
    5e42:	d264      	bcs.n	5f0e <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5e44:	f24c 5310 	movw	r3, #50448	; 0xc510
    5e48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e4c:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5e4e:	f24c 5310 	movw	r3, #50448	; 0xc510
    5e52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e56:	681b      	ldr	r3, [r3, #0]
    5e58:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5e5a:	e004      	b.n	5e66 <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e5e:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e62:	681b      	ldr	r3, [r3, #0]
    5e64:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e68:	685a      	ldr	r2, [r3, #4]
    5e6a:	687b      	ldr	r3, [r7, #4]
    5e6c:	429a      	cmp	r2, r3
    5e6e:	d203      	bcs.n	5e78 <pvPortMalloc+0xe4>
    5e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e72:	681b      	ldr	r3, [r3, #0]
    5e74:	2b00      	cmp	r3, #0
    5e76:	d1f1      	bne.n	5e5c <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5e7a:	f24c 5318 	movw	r3, #50456	; 0xc518
    5e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e82:	429a      	cmp	r2, r3
    5e84:	d043      	beq.n	5f0e <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5e86:	6a3b      	ldr	r3, [r7, #32]
    5e88:	681a      	ldr	r2, [r3, #0]
    5e8a:	2310      	movs	r3, #16
    5e8c:	4413      	add	r3, r2
    5e8e:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    5e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e92:	681a      	ldr	r2, [r3, #0]
    5e94:	6a3b      	ldr	r3, [r7, #32]
    5e96:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    5e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e9a:	685a      	ldr	r2, [r3, #4]
    5e9c:	687b      	ldr	r3, [r7, #4]
    5e9e:	1ad2      	subs	r2, r2, r3
    5ea0:	2310      	movs	r3, #16
    5ea2:	005b      	lsls	r3, r3, #1
    5ea4:	429a      	cmp	r2, r3
    5ea6:	d925      	bls.n	5ef4 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    5ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5eaa:	687b      	ldr	r3, [r7, #4]
    5eac:	4413      	add	r3, r2
    5eae:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5eb2:	685a      	ldr	r2, [r3, #4]
    5eb4:	687b      	ldr	r3, [r7, #4]
    5eb6:	1ad2      	subs	r2, r2, r3
    5eb8:	693b      	ldr	r3, [r7, #16]
    5eba:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ebe:	687a      	ldr	r2, [r7, #4]
    5ec0:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    5ec2:	693b      	ldr	r3, [r7, #16]
    5ec4:	685b      	ldr	r3, [r3, #4]
    5ec6:	60fb      	str	r3, [r7, #12]
    5ec8:	f24c 5310 	movw	r3, #50448	; 0xc510
    5ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ed0:	61bb      	str	r3, [r7, #24]
    5ed2:	e002      	b.n	5eda <pvPortMalloc+0x146>
    5ed4:	69bb      	ldr	r3, [r7, #24]
    5ed6:	681b      	ldr	r3, [r3, #0]
    5ed8:	61bb      	str	r3, [r7, #24]
    5eda:	69bb      	ldr	r3, [r7, #24]
    5edc:	681b      	ldr	r3, [r3, #0]
    5ede:	685a      	ldr	r2, [r3, #4]
    5ee0:	68fb      	ldr	r3, [r7, #12]
    5ee2:	429a      	cmp	r2, r3
    5ee4:	d3f6      	bcc.n	5ed4 <pvPortMalloc+0x140>
    5ee6:	69bb      	ldr	r3, [r7, #24]
    5ee8:	681a      	ldr	r2, [r3, #0]
    5eea:	693b      	ldr	r3, [r7, #16]
    5eec:	601a      	str	r2, [r3, #0]
    5eee:	69bb      	ldr	r3, [r7, #24]
    5ef0:	693a      	ldr	r2, [r7, #16]
    5ef2:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5ef4:	f240 5338 	movw	r3, #1336	; 0x538
    5ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5efc:	681a      	ldr	r2, [r3, #0]
    5efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f00:	685b      	ldr	r3, [r3, #4]
    5f02:	1ad2      	subs	r2, r2, r3
    5f04:	f240 5338 	movw	r3, #1336	; 0x538
    5f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f0c:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    5f0e:	f7ff f961 	bl	51d4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    5f12:	69fb      	ldr	r3, [r7, #28]
}
    5f14:	4618      	mov	r0, r3
    5f16:	3728      	adds	r7, #40	; 0x28
    5f18:	46bd      	mov	sp, r7
    5f1a:	bd80      	pop	{r7, pc}

00005f1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    5f1c:	b580      	push	{r7, lr}
    5f1e:	b086      	sub	sp, #24
    5f20:	af00      	add	r7, sp, #0
    5f22:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    5f24:	687b      	ldr	r3, [r7, #4]
    5f26:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    5f28:	687b      	ldr	r3, [r7, #4]
    5f2a:	2b00      	cmp	r3, #0
    5f2c:	d030      	beq.n	5f90 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    5f2e:	2310      	movs	r3, #16
    5f30:	425b      	negs	r3, r3
    5f32:	693a      	ldr	r2, [r7, #16]
    5f34:	4413      	add	r3, r2
    5f36:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    5f38:	693b      	ldr	r3, [r7, #16]
    5f3a:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    5f3c:	f7ff f938 	bl	51b0 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    5f40:	68fb      	ldr	r3, [r7, #12]
    5f42:	685b      	ldr	r3, [r3, #4]
    5f44:	60bb      	str	r3, [r7, #8]
    5f46:	f24c 5310 	movw	r3, #50448	; 0xc510
    5f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f4e:	617b      	str	r3, [r7, #20]
    5f50:	e002      	b.n	5f58 <vPortFree+0x3c>
    5f52:	697b      	ldr	r3, [r7, #20]
    5f54:	681b      	ldr	r3, [r3, #0]
    5f56:	617b      	str	r3, [r7, #20]
    5f58:	697b      	ldr	r3, [r7, #20]
    5f5a:	681b      	ldr	r3, [r3, #0]
    5f5c:	685a      	ldr	r2, [r3, #4]
    5f5e:	68bb      	ldr	r3, [r7, #8]
    5f60:	429a      	cmp	r2, r3
    5f62:	d3f6      	bcc.n	5f52 <vPortFree+0x36>
    5f64:	697b      	ldr	r3, [r7, #20]
    5f66:	681a      	ldr	r2, [r3, #0]
    5f68:	68fb      	ldr	r3, [r7, #12]
    5f6a:	601a      	str	r2, [r3, #0]
    5f6c:	697b      	ldr	r3, [r7, #20]
    5f6e:	68fa      	ldr	r2, [r7, #12]
    5f70:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    5f72:	68fb      	ldr	r3, [r7, #12]
    5f74:	685a      	ldr	r2, [r3, #4]
    5f76:	f240 5338 	movw	r3, #1336	; 0x538
    5f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f7e:	681b      	ldr	r3, [r3, #0]
    5f80:	441a      	add	r2, r3
    5f82:	f240 5338 	movw	r3, #1336	; 0x538
    5f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f8a:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    5f8c:	f7ff f922 	bl	51d4 <xTaskResumeAll>
	}
}
    5f90:	3718      	adds	r7, #24
    5f92:	46bd      	mov	sp, r7
    5f94:	bd80      	pop	{r7, pc}
    5f96:	bf00      	nop

00005f98 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    5f98:	b480      	push	{r7}
    5f9a:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    5f9c:	f240 5338 	movw	r3, #1336	; 0x538
    5fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fa4:	681b      	ldr	r3, [r3, #0]
}
    5fa6:	4618      	mov	r0, r3
    5fa8:	46bd      	mov	sp, r7
    5faa:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fae:	4770      	bx	lr

00005fb0 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    5fb0:	b480      	push	{r7}
    5fb2:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    5fb4:	46bd      	mov	sp, r7
    5fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fba:	4770      	bx	lr
    5fbc:	0000      	movs	r0, r0
	...

00005fc0 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    5fc0:	b580      	push	{r7, lr}
    5fc2:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    5fc4:	f24c 5342 	movw	r3, #50498	; 0xc542
    5fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fcc:	781b      	ldrb	r3, [r3, #0]
    5fce:	2b00      	cmp	r3, #0
    5fd0:	f040 815d 	bne.w	628e <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    5fd4:	f24c 532a 	movw	r3, #50474	; 0xc52a
    5fd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fdc:	881b      	ldrh	r3, [r3, #0]
    5fde:	2b09      	cmp	r3, #9
    5fe0:	f201 8145 	bhi.w	726e <ground_calibrate+0x12ae>
    5fe4:	f24c 532c 	movw	r3, #50476	; 0xc52c
    5fe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fec:	781b      	ldrb	r3, [r3, #0]
    5fee:	2b01      	cmp	r3, #1
    5ff0:	f041 813d 	bne.w	726e <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    5ff4:	f24c 5342 	movw	r3, #50498	; 0xc542
    5ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ffc:	2201      	movs	r2, #1
    5ffe:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    6000:	f24c 5349 	movw	r3, #50505	; 0xc549
    6004:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6008:	781a      	ldrb	r2, [r3, #0]
    600a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    600e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6012:	781b      	ldrb	r3, [r3, #0]
    6014:	b2db      	uxtb	r3, r3
    6016:	429a      	cmp	r2, r3
    6018:	d313      	bcc.n	6042 <ground_calibrate+0x82>
    601a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    601e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6022:	781b      	ldrb	r3, [r3, #0]
    6024:	b2db      	uxtb	r3, r3
    6026:	461a      	mov	r2, r3
    6028:	f24c 5349 	movw	r3, #50505	; 0xc549
    602c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6030:	781b      	ldrb	r3, [r3, #0]
    6032:	1ad3      	subs	r3, r2, r3
    6034:	33ff      	adds	r3, #255	; 0xff
    6036:	2b04      	cmp	r3, #4
    6038:	bfd4      	ite	le
    603a:	2300      	movle	r3, #0
    603c:	2301      	movgt	r3, #1
    603e:	b2db      	uxtb	r3, r3
    6040:	e011      	b.n	6066 <ground_calibrate+0xa6>
    6042:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    604a:	781b      	ldrb	r3, [r3, #0]
    604c:	b2db      	uxtb	r3, r3
    604e:	461a      	mov	r2, r3
    6050:	f24c 5349 	movw	r3, #50505	; 0xc549
    6054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6058:	781b      	ldrb	r3, [r3, #0]
    605a:	1ad3      	subs	r3, r2, r3
    605c:	2b04      	cmp	r3, #4
    605e:	bfd4      	ite	le
    6060:	2300      	movle	r3, #0
    6062:	2301      	movgt	r3, #1
    6064:	b2db      	uxtb	r3, r3
    6066:	2b00      	cmp	r3, #0
    6068:	f000 8103 	beq.w	6272 <ground_calibrate+0x2b2>
    606c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6074:	781b      	ldrb	r3, [r3, #0]
    6076:	461a      	mov	r2, r3
    6078:	f24c 534c 	movw	r3, #50508	; 0xc54c
    607c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6080:	2105      	movs	r1, #5
    6082:	5499      	strb	r1, [r3, r2]
    6084:	f24c 5349 	movw	r3, #50505	; 0xc549
    6088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    608c:	781b      	ldrb	r3, [r3, #0]
    608e:	3301      	adds	r3, #1
    6090:	b2da      	uxtb	r2, r3
    6092:	f24c 5349 	movw	r3, #50505	; 0xc549
    6096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    609a:	701a      	strb	r2, [r3, #0]
    609c:	f24c 5349 	movw	r3, #50505	; 0xc549
    60a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60a4:	781b      	ldrb	r3, [r3, #0]
    60a6:	2bff      	cmp	r3, #255	; 0xff
    60a8:	d105      	bne.n	60b6 <ground_calibrate+0xf6>
    60aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    60ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60b2:	2200      	movs	r2, #0
    60b4:	701a      	strb	r2, [r3, #0]
    60b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    60ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60be:	781b      	ldrb	r3, [r3, #0]
    60c0:	461a      	mov	r2, r3
    60c2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    60c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60ca:	2102      	movs	r1, #2
    60cc:	5499      	strb	r1, [r3, r2]
    60ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    60d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60d6:	781b      	ldrb	r3, [r3, #0]
    60d8:	3301      	adds	r3, #1
    60da:	b2da      	uxtb	r2, r3
    60dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    60e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60e4:	701a      	strb	r2, [r3, #0]
    60e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    60ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60ee:	781b      	ldrb	r3, [r3, #0]
    60f0:	2bff      	cmp	r3, #255	; 0xff
    60f2:	d105      	bne.n	6100 <ground_calibrate+0x140>
    60f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    60f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60fc:	2200      	movs	r2, #0
    60fe:	701a      	strb	r2, [r3, #0]
    6100:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6108:	2202      	movs	r2, #2
    610a:	701a      	strb	r2, [r3, #0]
    610c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6114:	2202      	movs	r2, #2
    6116:	701a      	strb	r2, [r3, #0]
    6118:	f24c 5349 	movw	r3, #50505	; 0xc549
    611c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6120:	781b      	ldrb	r3, [r3, #0]
    6122:	461a      	mov	r2, r3
    6124:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    612c:	7819      	ldrb	r1, [r3, #0]
    612e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6136:	5499      	strb	r1, [r3, r2]
    6138:	f24c 5349 	movw	r3, #50505	; 0xc549
    613c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6140:	781b      	ldrb	r3, [r3, #0]
    6142:	3301      	adds	r3, #1
    6144:	b2da      	uxtb	r2, r3
    6146:	f24c 5349 	movw	r3, #50505	; 0xc549
    614a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    614e:	701a      	strb	r2, [r3, #0]
    6150:	f24c 5349 	movw	r3, #50505	; 0xc549
    6154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6158:	781b      	ldrb	r3, [r3, #0]
    615a:	2bff      	cmp	r3, #255	; 0xff
    615c:	d105      	bne.n	616a <ground_calibrate+0x1aa>
    615e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6162:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6166:	2200      	movs	r2, #0
    6168:	701a      	strb	r2, [r3, #0]
    616a:	f24c 5349 	movw	r3, #50505	; 0xc549
    616e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6172:	781b      	ldrb	r3, [r3, #0]
    6174:	461a      	mov	r2, r3
    6176:	f24c 634e 	movw	r3, #50766	; 0xc64e
    617a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    617e:	7819      	ldrb	r1, [r3, #0]
    6180:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6188:	5499      	strb	r1, [r3, r2]
    618a:	f24c 5349 	movw	r3, #50505	; 0xc549
    618e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6192:	781b      	ldrb	r3, [r3, #0]
    6194:	3301      	adds	r3, #1
    6196:	b2da      	uxtb	r2, r3
    6198:	f24c 5349 	movw	r3, #50505	; 0xc549
    619c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61a0:	701a      	strb	r2, [r3, #0]
    61a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    61a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61aa:	781b      	ldrb	r3, [r3, #0]
    61ac:	2bff      	cmp	r3, #255	; 0xff
    61ae:	d105      	bne.n	61bc <ground_calibrate+0x1fc>
    61b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    61b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61b8:	2200      	movs	r2, #0
    61ba:	701a      	strb	r2, [r3, #0]
    61bc:	f242 0339 	movw	r3, #8249	; 0x2039
    61c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61c4:	781b      	ldrb	r3, [r3, #0]
    61c6:	b2db      	uxtb	r3, r3
    61c8:	f003 0310 	and.w	r3, r3, #16
    61cc:	2b00      	cmp	r3, #0
    61ce:	f041 804e 	bne.w	726e <ground_calibrate+0x12ae>
    61d2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    61d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61da:	781b      	ldrb	r3, [r3, #0]
    61dc:	b2db      	uxtb	r3, r3
    61de:	461a      	mov	r2, r3
    61e0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    61e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61e8:	5c9a      	ldrb	r2, [r3, r2]
    61ea:	f24c 634b 	movw	r3, #50763	; 0xc64b
    61ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61f2:	701a      	strb	r2, [r3, #0]
    61f4:	f24c 634c 	movw	r3, #50764	; 0xc64c
    61f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61fc:	2200      	movs	r2, #0
    61fe:	701a      	strb	r2, [r3, #0]
    6200:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6208:	781b      	ldrb	r3, [r3, #0]
    620a:	b2db      	uxtb	r3, r3
    620c:	3301      	adds	r3, #1
    620e:	b2da      	uxtb	r2, r3
    6210:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6218:	701a      	strb	r2, [r3, #0]
    621a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    621e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6222:	781b      	ldrb	r3, [r3, #0]
    6224:	b2db      	uxtb	r3, r3
    6226:	2bff      	cmp	r3, #255	; 0xff
    6228:	d105      	bne.n	6236 <ground_calibrate+0x276>
    622a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    622e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6232:	2200      	movs	r2, #0
    6234:	701a      	strb	r2, [r3, #0]
    6236:	f242 0338 	movw	r3, #8248	; 0x2038
    623a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    623e:	f242 0238 	movw	r2, #8248	; 0x2038
    6242:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6246:	7812      	ldrb	r2, [r2, #0]
    6248:	b2d2      	uxtb	r2, r2
    624a:	f042 0201 	orr.w	r2, r2, #1
    624e:	b2d2      	uxtb	r2, r2
    6250:	701a      	strb	r2, [r3, #0]
    6252:	f242 0339 	movw	r3, #8249	; 0x2039
    6256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    625a:	f242 0239 	movw	r2, #8249	; 0x2039
    625e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6262:	7812      	ldrb	r2, [r2, #0]
    6264:	b2d2      	uxtb	r2, r2
    6266:	f042 0210 	orr.w	r2, r2, #16
    626a:	b2d2      	uxtb	r2, r2
    626c:	701a      	strb	r2, [r3, #0]
    626e:	f000 bffe 	b.w	726e <ground_calibrate+0x12ae>
    6272:	f24c 5348 	movw	r3, #50504	; 0xc548
    6276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    627a:	781b      	ldrb	r3, [r3, #0]
    627c:	3301      	adds	r3, #1
    627e:	b2da      	uxtb	r2, r3
    6280:	f24c 5348 	movw	r3, #50504	; 0xc548
    6284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6288:	701a      	strb	r2, [r3, #0]
    628a:	f000 bff0 	b.w	726e <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    628e:	f24c 5342 	movw	r3, #50498	; 0xc542
    6292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6296:	781b      	ldrb	r3, [r3, #0]
    6298:	2b01      	cmp	r3, #1
    629a:	f040 87e8 	bne.w	726e <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    629e:	f24c 6350 	movw	r3, #50768	; 0xc650
    62a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62a6:	885b      	ldrh	r3, [r3, #2]
    62a8:	b21b      	sxth	r3, r3
    62aa:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    62ae:	db09      	blt.n	62c4 <ground_calibrate+0x304>
    62b0:	f24c 6350 	movw	r3, #50768	; 0xc650
    62b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62b8:	885b      	ldrh	r3, [r3, #2]
    62ba:	b21b      	sxth	r3, r3
    62bc:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    62c0:	f340 87d5 	ble.w	726e <ground_calibrate+0x12ae>
      ir_gain_calib();
    62c4:	f00b fd54 	bl	11d70 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    62c8:	f240 5348 	movw	r3, #1352	; 0x548
    62cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62d0:	681a      	ldr	r2, [r3, #0]
    62d2:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    62d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62da:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    62dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    62e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62e4:	781a      	ldrb	r2, [r3, #0]
    62e6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    62ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ee:	781b      	ldrb	r3, [r3, #0]
    62f0:	b2db      	uxtb	r3, r3
    62f2:	429a      	cmp	r2, r3
    62f4:	d313      	bcc.n	631e <ground_calibrate+0x35e>
    62f6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    62fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62fe:	781b      	ldrb	r3, [r3, #0]
    6300:	b2db      	uxtb	r3, r3
    6302:	461a      	mov	r2, r3
    6304:	f24c 5349 	movw	r3, #50505	; 0xc549
    6308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    630c:	781b      	ldrb	r3, [r3, #0]
    630e:	1ad3      	subs	r3, r2, r3
    6310:	33ff      	adds	r3, #255	; 0xff
    6312:	2b14      	cmp	r3, #20
    6314:	bfd4      	ite	le
    6316:	2300      	movle	r3, #0
    6318:	2301      	movgt	r3, #1
    631a:	b2db      	uxtb	r3, r3
    631c:	e011      	b.n	6342 <ground_calibrate+0x382>
    631e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6326:	781b      	ldrb	r3, [r3, #0]
    6328:	b2db      	uxtb	r3, r3
    632a:	461a      	mov	r2, r3
    632c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6334:	781b      	ldrb	r3, [r3, #0]
    6336:	1ad3      	subs	r3, r2, r3
    6338:	2b14      	cmp	r3, #20
    633a:	bfd4      	ite	le
    633c:	2300      	movle	r3, #0
    633e:	2301      	movgt	r3, #1
    6340:	b2db      	uxtb	r3, r3
    6342:	2b00      	cmp	r3, #0
    6344:	f000 85a6 	beq.w	6e94 <ground_calibrate+0xed4>
    6348:	f24c 5349 	movw	r3, #50505	; 0xc549
    634c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6350:	781b      	ldrb	r3, [r3, #0]
    6352:	461a      	mov	r2, r3
    6354:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    635c:	2105      	movs	r1, #5
    635e:	5499      	strb	r1, [r3, r2]
    6360:	f24c 5349 	movw	r3, #50505	; 0xc549
    6364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6368:	781b      	ldrb	r3, [r3, #0]
    636a:	3301      	adds	r3, #1
    636c:	b2da      	uxtb	r2, r3
    636e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6376:	701a      	strb	r2, [r3, #0]
    6378:	f24c 5349 	movw	r3, #50505	; 0xc549
    637c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6380:	781b      	ldrb	r3, [r3, #0]
    6382:	2bff      	cmp	r3, #255	; 0xff
    6384:	d105      	bne.n	6392 <ground_calibrate+0x3d2>
    6386:	f24c 5349 	movw	r3, #50505	; 0xc549
    638a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    638e:	2200      	movs	r2, #0
    6390:	701a      	strb	r2, [r3, #0]
    6392:	f24c 5349 	movw	r3, #50505	; 0xc549
    6396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    639a:	781b      	ldrb	r3, [r3, #0]
    639c:	461a      	mov	r2, r3
    639e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    63a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63a6:	2105      	movs	r1, #5
    63a8:	5499      	strb	r1, [r3, r2]
    63aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    63ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63b2:	781b      	ldrb	r3, [r3, #0]
    63b4:	3301      	adds	r3, #1
    63b6:	b2da      	uxtb	r2, r3
    63b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    63bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63c0:	701a      	strb	r2, [r3, #0]
    63c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    63c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ca:	781b      	ldrb	r3, [r3, #0]
    63cc:	2bff      	cmp	r3, #255	; 0xff
    63ce:	d105      	bne.n	63dc <ground_calibrate+0x41c>
    63d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    63d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63d8:	2200      	movs	r2, #0
    63da:	701a      	strb	r2, [r3, #0]
    63dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    63e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63e4:	2205      	movs	r2, #5
    63e6:	701a      	strb	r2, [r3, #0]
    63e8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    63ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63f0:	2205      	movs	r2, #5
    63f2:	701a      	strb	r2, [r3, #0]
    63f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    63f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63fc:	781b      	ldrb	r3, [r3, #0]
    63fe:	461a      	mov	r2, r3
    6400:	f64c 3340 	movw	r3, #52032	; 0xcb40
    6404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6408:	7819      	ldrb	r1, [r3, #0]
    640a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    640e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6412:	5499      	strb	r1, [r3, r2]
    6414:	f64c 3340 	movw	r3, #52032	; 0xcb40
    6418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    641c:	781a      	ldrb	r2, [r3, #0]
    641e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6426:	781b      	ldrb	r3, [r3, #0]
    6428:	4413      	add	r3, r2
    642a:	b2da      	uxtb	r2, r3
    642c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6434:	701a      	strb	r2, [r3, #0]
    6436:	f24c 634e 	movw	r3, #50766	; 0xc64e
    643a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    643e:	781a      	ldrb	r2, [r3, #0]
    6440:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6448:	781b      	ldrb	r3, [r3, #0]
    644a:	4413      	add	r3, r2
    644c:	b2da      	uxtb	r2, r3
    644e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6456:	701a      	strb	r2, [r3, #0]
    6458:	f24c 5349 	movw	r3, #50505	; 0xc549
    645c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6460:	781b      	ldrb	r3, [r3, #0]
    6462:	3301      	adds	r3, #1
    6464:	b2da      	uxtb	r2, r3
    6466:	f24c 5349 	movw	r3, #50505	; 0xc549
    646a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    646e:	701a      	strb	r2, [r3, #0]
    6470:	f24c 5349 	movw	r3, #50505	; 0xc549
    6474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6478:	781b      	ldrb	r3, [r3, #0]
    647a:	2bff      	cmp	r3, #255	; 0xff
    647c:	d105      	bne.n	648a <ground_calibrate+0x4ca>
    647e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6486:	2200      	movs	r2, #0
    6488:	701a      	strb	r2, [r3, #0]
    648a:	f24c 5349 	movw	r3, #50505	; 0xc549
    648e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6492:	781b      	ldrb	r3, [r3, #0]
    6494:	461a      	mov	r2, r3
    6496:	f64c 3340 	movw	r3, #52032	; 0xcb40
    649a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    649e:	7859      	ldrb	r1, [r3, #1]
    64a0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    64a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64a8:	5499      	strb	r1, [r3, r2]
    64aa:	4bd2      	ldr	r3, [pc, #840]	; (67f4 <ground_calibrate+0x834>)
    64ac:	781a      	ldrb	r2, [r3, #0]
    64ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    64b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64b6:	781b      	ldrb	r3, [r3, #0]
    64b8:	4413      	add	r3, r2
    64ba:	b2da      	uxtb	r2, r3
    64bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    64c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64c4:	701a      	strb	r2, [r3, #0]
    64c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    64ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64ce:	781a      	ldrb	r2, [r3, #0]
    64d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    64d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64d8:	781b      	ldrb	r3, [r3, #0]
    64da:	4413      	add	r3, r2
    64dc:	b2da      	uxtb	r2, r3
    64de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    64e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64e6:	701a      	strb	r2, [r3, #0]
    64e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    64ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64f0:	781b      	ldrb	r3, [r3, #0]
    64f2:	3301      	adds	r3, #1
    64f4:	b2da      	uxtb	r2, r3
    64f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    64fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64fe:	701a      	strb	r2, [r3, #0]
    6500:	f24c 5349 	movw	r3, #50505	; 0xc549
    6504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6508:	781b      	ldrb	r3, [r3, #0]
    650a:	2bff      	cmp	r3, #255	; 0xff
    650c:	d105      	bne.n	651a <ground_calibrate+0x55a>
    650e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6516:	2200      	movs	r2, #0
    6518:	701a      	strb	r2, [r3, #0]
    651a:	f24c 5349 	movw	r3, #50505	; 0xc549
    651e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6522:	781b      	ldrb	r3, [r3, #0]
    6524:	461a      	mov	r2, r3
    6526:	f64c 3340 	movw	r3, #52032	; 0xcb40
    652a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    652e:	7899      	ldrb	r1, [r3, #2]
    6530:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6538:	5499      	strb	r1, [r3, r2]
    653a:	4baf      	ldr	r3, [pc, #700]	; (67f8 <ground_calibrate+0x838>)
    653c:	781a      	ldrb	r2, [r3, #0]
    653e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6546:	781b      	ldrb	r3, [r3, #0]
    6548:	4413      	add	r3, r2
    654a:	b2da      	uxtb	r2, r3
    654c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6554:	701a      	strb	r2, [r3, #0]
    6556:	f24c 634e 	movw	r3, #50766	; 0xc64e
    655a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    655e:	781a      	ldrb	r2, [r3, #0]
    6560:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6568:	781b      	ldrb	r3, [r3, #0]
    656a:	4413      	add	r3, r2
    656c:	b2da      	uxtb	r2, r3
    656e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6576:	701a      	strb	r2, [r3, #0]
    6578:	f24c 5349 	movw	r3, #50505	; 0xc549
    657c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6580:	781b      	ldrb	r3, [r3, #0]
    6582:	3301      	adds	r3, #1
    6584:	b2da      	uxtb	r2, r3
    6586:	f24c 5349 	movw	r3, #50505	; 0xc549
    658a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    658e:	701a      	strb	r2, [r3, #0]
    6590:	f24c 5349 	movw	r3, #50505	; 0xc549
    6594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6598:	781b      	ldrb	r3, [r3, #0]
    659a:	2bff      	cmp	r3, #255	; 0xff
    659c:	d105      	bne.n	65aa <ground_calibrate+0x5ea>
    659e:	f24c 5349 	movw	r3, #50505	; 0xc549
    65a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65a6:	2200      	movs	r2, #0
    65a8:	701a      	strb	r2, [r3, #0]
    65aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    65ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65b2:	781b      	ldrb	r3, [r3, #0]
    65b4:	461a      	mov	r2, r3
    65b6:	f64c 3340 	movw	r3, #52032	; 0xcb40
    65ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65be:	78d9      	ldrb	r1, [r3, #3]
    65c0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    65c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65c8:	5499      	strb	r1, [r3, r2]
    65ca:	4b8c      	ldr	r3, [pc, #560]	; (67fc <ground_calibrate+0x83c>)
    65cc:	781a      	ldrb	r2, [r3, #0]
    65ce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    65d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65d6:	781b      	ldrb	r3, [r3, #0]
    65d8:	4413      	add	r3, r2
    65da:	b2da      	uxtb	r2, r3
    65dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    65e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65e4:	701a      	strb	r2, [r3, #0]
    65e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    65ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ee:	781a      	ldrb	r2, [r3, #0]
    65f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    65f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65f8:	781b      	ldrb	r3, [r3, #0]
    65fa:	4413      	add	r3, r2
    65fc:	b2da      	uxtb	r2, r3
    65fe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6606:	701a      	strb	r2, [r3, #0]
    6608:	f24c 5349 	movw	r3, #50505	; 0xc549
    660c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6610:	781b      	ldrb	r3, [r3, #0]
    6612:	3301      	adds	r3, #1
    6614:	b2da      	uxtb	r2, r3
    6616:	f24c 5349 	movw	r3, #50505	; 0xc549
    661a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    661e:	701a      	strb	r2, [r3, #0]
    6620:	f24c 5349 	movw	r3, #50505	; 0xc549
    6624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6628:	781b      	ldrb	r3, [r3, #0]
    662a:	2bff      	cmp	r3, #255	; 0xff
    662c:	d105      	bne.n	663a <ground_calibrate+0x67a>
    662e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6636:	2200      	movs	r2, #0
    6638:	701a      	strb	r2, [r3, #0]
    663a:	f24c 5349 	movw	r3, #50505	; 0xc549
    663e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6642:	781b      	ldrb	r3, [r3, #0]
    6644:	461a      	mov	r2, r3
    6646:	f64c 3344 	movw	r3, #52036	; 0xcb44
    664a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    664e:	7819      	ldrb	r1, [r3, #0]
    6650:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6658:	5499      	strb	r1, [r3, r2]
    665a:	f64c 3344 	movw	r3, #52036	; 0xcb44
    665e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6662:	781a      	ldrb	r2, [r3, #0]
    6664:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    666c:	781b      	ldrb	r3, [r3, #0]
    666e:	4413      	add	r3, r2
    6670:	b2da      	uxtb	r2, r3
    6672:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    667a:	701a      	strb	r2, [r3, #0]
    667c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6684:	781a      	ldrb	r2, [r3, #0]
    6686:	f24c 634d 	movw	r3, #50765	; 0xc64d
    668a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    668e:	781b      	ldrb	r3, [r3, #0]
    6690:	4413      	add	r3, r2
    6692:	b2da      	uxtb	r2, r3
    6694:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    669c:	701a      	strb	r2, [r3, #0]
    669e:	f24c 5349 	movw	r3, #50505	; 0xc549
    66a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66a6:	781b      	ldrb	r3, [r3, #0]
    66a8:	3301      	adds	r3, #1
    66aa:	b2da      	uxtb	r2, r3
    66ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    66b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66b4:	701a      	strb	r2, [r3, #0]
    66b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    66ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66be:	781b      	ldrb	r3, [r3, #0]
    66c0:	2bff      	cmp	r3, #255	; 0xff
    66c2:	d105      	bne.n	66d0 <ground_calibrate+0x710>
    66c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    66c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66cc:	2200      	movs	r2, #0
    66ce:	701a      	strb	r2, [r3, #0]
    66d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    66d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66d8:	781b      	ldrb	r3, [r3, #0]
    66da:	461a      	mov	r2, r3
    66dc:	f64c 3344 	movw	r3, #52036	; 0xcb44
    66e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66e4:	7859      	ldrb	r1, [r3, #1]
    66e6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    66ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ee:	5499      	strb	r1, [r3, r2]
    66f0:	4b43      	ldr	r3, [pc, #268]	; (6800 <ground_calibrate+0x840>)
    66f2:	781a      	ldrb	r2, [r3, #0]
    66f4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    66f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66fc:	781b      	ldrb	r3, [r3, #0]
    66fe:	4413      	add	r3, r2
    6700:	b2da      	uxtb	r2, r3
    6702:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6706:	f2c2 0304 	movt	r3, #8196	; 0x2004
    670a:	701a      	strb	r2, [r3, #0]
    670c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6714:	781a      	ldrb	r2, [r3, #0]
    6716:	f24c 634d 	movw	r3, #50765	; 0xc64d
    671a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    671e:	781b      	ldrb	r3, [r3, #0]
    6720:	4413      	add	r3, r2
    6722:	b2da      	uxtb	r2, r3
    6724:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    672c:	701a      	strb	r2, [r3, #0]
    672e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6736:	781b      	ldrb	r3, [r3, #0]
    6738:	3301      	adds	r3, #1
    673a:	b2da      	uxtb	r2, r3
    673c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6744:	701a      	strb	r2, [r3, #0]
    6746:	f24c 5349 	movw	r3, #50505	; 0xc549
    674a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    674e:	781b      	ldrb	r3, [r3, #0]
    6750:	2bff      	cmp	r3, #255	; 0xff
    6752:	d105      	bne.n	6760 <ground_calibrate+0x7a0>
    6754:	f24c 5349 	movw	r3, #50505	; 0xc549
    6758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    675c:	2200      	movs	r2, #0
    675e:	701a      	strb	r2, [r3, #0]
    6760:	f24c 5349 	movw	r3, #50505	; 0xc549
    6764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6768:	781b      	ldrb	r3, [r3, #0]
    676a:	461a      	mov	r2, r3
    676c:	f64c 3344 	movw	r3, #52036	; 0xcb44
    6770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6774:	7899      	ldrb	r1, [r3, #2]
    6776:	f24c 534c 	movw	r3, #50508	; 0xc54c
    677a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    677e:	5499      	strb	r1, [r3, r2]
    6780:	4b20      	ldr	r3, [pc, #128]	; (6804 <ground_calibrate+0x844>)
    6782:	781a      	ldrb	r2, [r3, #0]
    6784:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    678c:	781b      	ldrb	r3, [r3, #0]
    678e:	4413      	add	r3, r2
    6790:	b2da      	uxtb	r2, r3
    6792:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    679a:	701a      	strb	r2, [r3, #0]
    679c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    67a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67a4:	781a      	ldrb	r2, [r3, #0]
    67a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    67aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ae:	781b      	ldrb	r3, [r3, #0]
    67b0:	4413      	add	r3, r2
    67b2:	b2da      	uxtb	r2, r3
    67b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    67b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67bc:	701a      	strb	r2, [r3, #0]
    67be:	f24c 5349 	movw	r3, #50505	; 0xc549
    67c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67c6:	781b      	ldrb	r3, [r3, #0]
    67c8:	3301      	adds	r3, #1
    67ca:	b2da      	uxtb	r2, r3
    67cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    67d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67d4:	701a      	strb	r2, [r3, #0]
    67d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    67da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67de:	781b      	ldrb	r3, [r3, #0]
    67e0:	2bff      	cmp	r3, #255	; 0xff
    67e2:	d111      	bne.n	6808 <ground_calibrate+0x848>
    67e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    67e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ec:	2200      	movs	r2, #0
    67ee:	701a      	strb	r2, [r3, #0]
    67f0:	e00a      	b.n	6808 <ground_calibrate+0x848>
    67f2:	bf00      	nop
    67f4:	2004cb41 	.word	0x2004cb41
    67f8:	2004cb42 	.word	0x2004cb42
    67fc:	2004cb43 	.word	0x2004cb43
    6800:	2004cb45 	.word	0x2004cb45
    6804:	2004cb46 	.word	0x2004cb46
    6808:	f24c 5349 	movw	r3, #50505	; 0xc549
    680c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6810:	781b      	ldrb	r3, [r3, #0]
    6812:	461a      	mov	r2, r3
    6814:	f64c 3344 	movw	r3, #52036	; 0xcb44
    6818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    681c:	78d9      	ldrb	r1, [r3, #3]
    681e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6826:	5499      	strb	r1, [r3, r2]
    6828:	4bd3      	ldr	r3, [pc, #844]	; (6b78 <ground_calibrate+0xbb8>)
    682a:	781a      	ldrb	r2, [r3, #0]
    682c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6834:	781b      	ldrb	r3, [r3, #0]
    6836:	4413      	add	r3, r2
    6838:	b2da      	uxtb	r2, r3
    683a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    683e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6842:	701a      	strb	r2, [r3, #0]
    6844:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    684c:	781a      	ldrb	r2, [r3, #0]
    684e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6856:	781b      	ldrb	r3, [r3, #0]
    6858:	4413      	add	r3, r2
    685a:	b2da      	uxtb	r2, r3
    685c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6864:	701a      	strb	r2, [r3, #0]
    6866:	f24c 5349 	movw	r3, #50505	; 0xc549
    686a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    686e:	781b      	ldrb	r3, [r3, #0]
    6870:	3301      	adds	r3, #1
    6872:	b2da      	uxtb	r2, r3
    6874:	f24c 5349 	movw	r3, #50505	; 0xc549
    6878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    687c:	701a      	strb	r2, [r3, #0]
    687e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6886:	781b      	ldrb	r3, [r3, #0]
    6888:	2bff      	cmp	r3, #255	; 0xff
    688a:	d105      	bne.n	6898 <ground_calibrate+0x8d8>
    688c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6894:	2200      	movs	r2, #0
    6896:	701a      	strb	r2, [r3, #0]
    6898:	f24c 5349 	movw	r3, #50505	; 0xc549
    689c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68a0:	781b      	ldrb	r3, [r3, #0]
    68a2:	461a      	mov	r2, r3
    68a4:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    68a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ac:	7819      	ldrb	r1, [r3, #0]
    68ae:	f24c 534c 	movw	r3, #50508	; 0xc54c
    68b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68b6:	5499      	strb	r1, [r3, r2]
    68b8:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    68bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68c0:	781a      	ldrb	r2, [r3, #0]
    68c2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    68c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ca:	781b      	ldrb	r3, [r3, #0]
    68cc:	4413      	add	r3, r2
    68ce:	b2da      	uxtb	r2, r3
    68d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    68d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68d8:	701a      	strb	r2, [r3, #0]
    68da:	f24c 634e 	movw	r3, #50766	; 0xc64e
    68de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68e2:	781a      	ldrb	r2, [r3, #0]
    68e4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    68e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ec:	781b      	ldrb	r3, [r3, #0]
    68ee:	4413      	add	r3, r2
    68f0:	b2da      	uxtb	r2, r3
    68f2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    68f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68fa:	701a      	strb	r2, [r3, #0]
    68fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    6900:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6904:	781b      	ldrb	r3, [r3, #0]
    6906:	3301      	adds	r3, #1
    6908:	b2da      	uxtb	r2, r3
    690a:	f24c 5349 	movw	r3, #50505	; 0xc549
    690e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6912:	701a      	strb	r2, [r3, #0]
    6914:	f24c 5349 	movw	r3, #50505	; 0xc549
    6918:	f2c2 0304 	movt	r3, #8196	; 0x2004
    691c:	781b      	ldrb	r3, [r3, #0]
    691e:	2bff      	cmp	r3, #255	; 0xff
    6920:	d105      	bne.n	692e <ground_calibrate+0x96e>
    6922:	f24c 5349 	movw	r3, #50505	; 0xc549
    6926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    692a:	2200      	movs	r2, #0
    692c:	701a      	strb	r2, [r3, #0]
    692e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6936:	781b      	ldrb	r3, [r3, #0]
    6938:	461a      	mov	r2, r3
    693a:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    693e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6942:	7859      	ldrb	r1, [r3, #1]
    6944:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    694c:	5499      	strb	r1, [r3, r2]
    694e:	4b8b      	ldr	r3, [pc, #556]	; (6b7c <ground_calibrate+0xbbc>)
    6950:	781a      	ldrb	r2, [r3, #0]
    6952:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6956:	f2c2 0304 	movt	r3, #8196	; 0x2004
    695a:	781b      	ldrb	r3, [r3, #0]
    695c:	4413      	add	r3, r2
    695e:	b2da      	uxtb	r2, r3
    6960:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6968:	701a      	strb	r2, [r3, #0]
    696a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    696e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6972:	781a      	ldrb	r2, [r3, #0]
    6974:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    697c:	781b      	ldrb	r3, [r3, #0]
    697e:	4413      	add	r3, r2
    6980:	b2da      	uxtb	r2, r3
    6982:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    698a:	701a      	strb	r2, [r3, #0]
    698c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6994:	781b      	ldrb	r3, [r3, #0]
    6996:	3301      	adds	r3, #1
    6998:	b2da      	uxtb	r2, r3
    699a:	f24c 5349 	movw	r3, #50505	; 0xc549
    699e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69a2:	701a      	strb	r2, [r3, #0]
    69a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    69a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ac:	781b      	ldrb	r3, [r3, #0]
    69ae:	2bff      	cmp	r3, #255	; 0xff
    69b0:	d105      	bne.n	69be <ground_calibrate+0x9fe>
    69b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    69b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ba:	2200      	movs	r2, #0
    69bc:	701a      	strb	r2, [r3, #0]
    69be:	f24c 5349 	movw	r3, #50505	; 0xc549
    69c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69c6:	781b      	ldrb	r3, [r3, #0]
    69c8:	461a      	mov	r2, r3
    69ca:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    69ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69d2:	7899      	ldrb	r1, [r3, #2]
    69d4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    69d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69dc:	5499      	strb	r1, [r3, r2]
    69de:	4b68      	ldr	r3, [pc, #416]	; (6b80 <ground_calibrate+0xbc0>)
    69e0:	781a      	ldrb	r2, [r3, #0]
    69e2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    69e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ea:	781b      	ldrb	r3, [r3, #0]
    69ec:	4413      	add	r3, r2
    69ee:	b2da      	uxtb	r2, r3
    69f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    69f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69f8:	701a      	strb	r2, [r3, #0]
    69fa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    69fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a02:	781a      	ldrb	r2, [r3, #0]
    6a04:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a0c:	781b      	ldrb	r3, [r3, #0]
    6a0e:	4413      	add	r3, r2
    6a10:	b2da      	uxtb	r2, r3
    6a12:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a1a:	701a      	strb	r2, [r3, #0]
    6a1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a24:	781b      	ldrb	r3, [r3, #0]
    6a26:	3301      	adds	r3, #1
    6a28:	b2da      	uxtb	r2, r3
    6a2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a32:	701a      	strb	r2, [r3, #0]
    6a34:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a3c:	781b      	ldrb	r3, [r3, #0]
    6a3e:	2bff      	cmp	r3, #255	; 0xff
    6a40:	d105      	bne.n	6a4e <ground_calibrate+0xa8e>
    6a42:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a4a:	2200      	movs	r2, #0
    6a4c:	701a      	strb	r2, [r3, #0]
    6a4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a56:	781b      	ldrb	r3, [r3, #0]
    6a58:	461a      	mov	r2, r3
    6a5a:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6a5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a62:	78d9      	ldrb	r1, [r3, #3]
    6a64:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a6c:	5499      	strb	r1, [r3, r2]
    6a6e:	4b45      	ldr	r3, [pc, #276]	; (6b84 <ground_calibrate+0xbc4>)
    6a70:	781a      	ldrb	r2, [r3, #0]
    6a72:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a7a:	781b      	ldrb	r3, [r3, #0]
    6a7c:	4413      	add	r3, r2
    6a7e:	b2da      	uxtb	r2, r3
    6a80:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a88:	701a      	strb	r2, [r3, #0]
    6a8a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a92:	781a      	ldrb	r2, [r3, #0]
    6a94:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a9c:	781b      	ldrb	r3, [r3, #0]
    6a9e:	4413      	add	r3, r2
    6aa0:	b2da      	uxtb	r2, r3
    6aa2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aaa:	701a      	strb	r2, [r3, #0]
    6aac:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ab4:	781b      	ldrb	r3, [r3, #0]
    6ab6:	3301      	adds	r3, #1
    6ab8:	b2da      	uxtb	r2, r3
    6aba:	f24c 5349 	movw	r3, #50505	; 0xc549
    6abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ac2:	701a      	strb	r2, [r3, #0]
    6ac4:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6acc:	781b      	ldrb	r3, [r3, #0]
    6ace:	2bff      	cmp	r3, #255	; 0xff
    6ad0:	d105      	bne.n	6ade <ground_calibrate+0xb1e>
    6ad2:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ada:	2200      	movs	r2, #0
    6adc:	701a      	strb	r2, [r3, #0]
    6ade:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ae6:	781b      	ldrb	r3, [r3, #0]
    6ae8:	461a      	mov	r2, r3
    6aea:	f240 5342 	movw	r3, #1346	; 0x542
    6aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6af2:	7819      	ldrb	r1, [r3, #0]
    6af4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6afc:	5499      	strb	r1, [r3, r2]
    6afe:	f240 5342 	movw	r3, #1346	; 0x542
    6b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b06:	781a      	ldrb	r2, [r3, #0]
    6b08:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b10:	781b      	ldrb	r3, [r3, #0]
    6b12:	4413      	add	r3, r2
    6b14:	b2da      	uxtb	r2, r3
    6b16:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b1e:	701a      	strb	r2, [r3, #0]
    6b20:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6b24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b28:	781a      	ldrb	r2, [r3, #0]
    6b2a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b32:	781b      	ldrb	r3, [r3, #0]
    6b34:	4413      	add	r3, r2
    6b36:	b2da      	uxtb	r2, r3
    6b38:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6b3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b40:	701a      	strb	r2, [r3, #0]
    6b42:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b4a:	781b      	ldrb	r3, [r3, #0]
    6b4c:	3301      	adds	r3, #1
    6b4e:	b2da      	uxtb	r2, r3
    6b50:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b58:	701a      	strb	r2, [r3, #0]
    6b5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b62:	781b      	ldrb	r3, [r3, #0]
    6b64:	2bff      	cmp	r3, #255	; 0xff
    6b66:	d10f      	bne.n	6b88 <ground_calibrate+0xbc8>
    6b68:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b70:	2200      	movs	r2, #0
    6b72:	701a      	strb	r2, [r3, #0]
    6b74:	e008      	b.n	6b88 <ground_calibrate+0xbc8>
    6b76:	bf00      	nop
    6b78:	2004cb47 	.word	0x2004cb47
    6b7c:	2004cb3d 	.word	0x2004cb3d
    6b80:	2004cb3e 	.word	0x2004cb3e
    6b84:	2004cb3f 	.word	0x2004cb3f
    6b88:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b90:	781b      	ldrb	r3, [r3, #0]
    6b92:	461a      	mov	r2, r3
    6b94:	f240 5342 	movw	r3, #1346	; 0x542
    6b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b9c:	7859      	ldrb	r1, [r3, #1]
    6b9e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ba6:	5499      	strb	r1, [r3, r2]
    6ba8:	4bd4      	ldr	r3, [pc, #848]	; (6efc <ground_calibrate+0xf3c>)
    6baa:	781a      	ldrb	r2, [r3, #0]
    6bac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bb4:	781b      	ldrb	r3, [r3, #0]
    6bb6:	4413      	add	r3, r2
    6bb8:	b2da      	uxtb	r2, r3
    6bba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6bbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bc2:	701a      	strb	r2, [r3, #0]
    6bc4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bcc:	781a      	ldrb	r2, [r3, #0]
    6bce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bd6:	781b      	ldrb	r3, [r3, #0]
    6bd8:	4413      	add	r3, r2
    6bda:	b2da      	uxtb	r2, r3
    6bdc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6be4:	701a      	strb	r2, [r3, #0]
    6be6:	f24c 5349 	movw	r3, #50505	; 0xc549
    6bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bee:	781b      	ldrb	r3, [r3, #0]
    6bf0:	3301      	adds	r3, #1
    6bf2:	b2da      	uxtb	r2, r3
    6bf4:	f24c 5349 	movw	r3, #50505	; 0xc549
    6bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bfc:	701a      	strb	r2, [r3, #0]
    6bfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c06:	781b      	ldrb	r3, [r3, #0]
    6c08:	2bff      	cmp	r3, #255	; 0xff
    6c0a:	d105      	bne.n	6c18 <ground_calibrate+0xc58>
    6c0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c14:	2200      	movs	r2, #0
    6c16:	701a      	strb	r2, [r3, #0]
    6c18:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c20:	781b      	ldrb	r3, [r3, #0]
    6c22:	461a      	mov	r2, r3
    6c24:	f240 5344 	movw	r3, #1348	; 0x544
    6c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c2c:	7819      	ldrb	r1, [r3, #0]
    6c2e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c36:	5499      	strb	r1, [r3, r2]
    6c38:	f240 5344 	movw	r3, #1348	; 0x544
    6c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c40:	781a      	ldrb	r2, [r3, #0]
    6c42:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c4a:	781b      	ldrb	r3, [r3, #0]
    6c4c:	4413      	add	r3, r2
    6c4e:	b2da      	uxtb	r2, r3
    6c50:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c58:	701a      	strb	r2, [r3, #0]
    6c5a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6c5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c62:	781a      	ldrb	r2, [r3, #0]
    6c64:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c6c:	781b      	ldrb	r3, [r3, #0]
    6c6e:	4413      	add	r3, r2
    6c70:	b2da      	uxtb	r2, r3
    6c72:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6c76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c7a:	701a      	strb	r2, [r3, #0]
    6c7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c84:	781b      	ldrb	r3, [r3, #0]
    6c86:	3301      	adds	r3, #1
    6c88:	b2da      	uxtb	r2, r3
    6c8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c92:	701a      	strb	r2, [r3, #0]
    6c94:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c9c:	781b      	ldrb	r3, [r3, #0]
    6c9e:	2bff      	cmp	r3, #255	; 0xff
    6ca0:	d105      	bne.n	6cae <ground_calibrate+0xcee>
    6ca2:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6caa:	2200      	movs	r2, #0
    6cac:	701a      	strb	r2, [r3, #0]
    6cae:	f24c 5349 	movw	r3, #50505	; 0xc549
    6cb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cb6:	781b      	ldrb	r3, [r3, #0]
    6cb8:	461a      	mov	r2, r3
    6cba:	f240 5344 	movw	r3, #1348	; 0x544
    6cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cc2:	7859      	ldrb	r1, [r3, #1]
    6cc4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ccc:	5499      	strb	r1, [r3, r2]
    6cce:	4b8c      	ldr	r3, [pc, #560]	; (6f00 <ground_calibrate+0xf40>)
    6cd0:	781a      	ldrb	r2, [r3, #0]
    6cd2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6cd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cda:	781b      	ldrb	r3, [r3, #0]
    6cdc:	4413      	add	r3, r2
    6cde:	b2da      	uxtb	r2, r3
    6ce0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ce8:	701a      	strb	r2, [r3, #0]
    6cea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6cee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cf2:	781a      	ldrb	r2, [r3, #0]
    6cf4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cfc:	781b      	ldrb	r3, [r3, #0]
    6cfe:	4413      	add	r3, r2
    6d00:	b2da      	uxtb	r2, r3
    6d02:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6d06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d0a:	701a      	strb	r2, [r3, #0]
    6d0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d14:	781b      	ldrb	r3, [r3, #0]
    6d16:	3301      	adds	r3, #1
    6d18:	b2da      	uxtb	r2, r3
    6d1a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d22:	701a      	strb	r2, [r3, #0]
    6d24:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d2c:	781b      	ldrb	r3, [r3, #0]
    6d2e:	2bff      	cmp	r3, #255	; 0xff
    6d30:	d105      	bne.n	6d3e <ground_calibrate+0xd7e>
    6d32:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d3a:	2200      	movs	r2, #0
    6d3c:	701a      	strb	r2, [r3, #0]
    6d3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d46:	781b      	ldrb	r3, [r3, #0]
    6d48:	461a      	mov	r2, r3
    6d4a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d52:	7819      	ldrb	r1, [r3, #0]
    6d54:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d5c:	5499      	strb	r1, [r3, r2]
    6d5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d66:	781b      	ldrb	r3, [r3, #0]
    6d68:	3301      	adds	r3, #1
    6d6a:	b2da      	uxtb	r2, r3
    6d6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d74:	701a      	strb	r2, [r3, #0]
    6d76:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d7e:	781b      	ldrb	r3, [r3, #0]
    6d80:	2bff      	cmp	r3, #255	; 0xff
    6d82:	d105      	bne.n	6d90 <ground_calibrate+0xdd0>
    6d84:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d8c:	2200      	movs	r2, #0
    6d8e:	701a      	strb	r2, [r3, #0]
    6d90:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d98:	781b      	ldrb	r3, [r3, #0]
    6d9a:	461a      	mov	r2, r3
    6d9c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6da4:	7819      	ldrb	r1, [r3, #0]
    6da6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dae:	5499      	strb	r1, [r3, r2]
    6db0:	f24c 5349 	movw	r3, #50505	; 0xc549
    6db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6db8:	781b      	ldrb	r3, [r3, #0]
    6dba:	3301      	adds	r3, #1
    6dbc:	b2da      	uxtb	r2, r3
    6dbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    6dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dc6:	701a      	strb	r2, [r3, #0]
    6dc8:	f24c 5349 	movw	r3, #50505	; 0xc549
    6dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dd0:	781b      	ldrb	r3, [r3, #0]
    6dd2:	2bff      	cmp	r3, #255	; 0xff
    6dd4:	d105      	bne.n	6de2 <ground_calibrate+0xe22>
    6dd6:	f24c 5349 	movw	r3, #50505	; 0xc549
    6dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dde:	2200      	movs	r2, #0
    6de0:	701a      	strb	r2, [r3, #0]
    6de2:	f242 0339 	movw	r3, #8249	; 0x2039
    6de6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dea:	781b      	ldrb	r3, [r3, #0]
    6dec:	b2db      	uxtb	r3, r3
    6dee:	f003 0310 	and.w	r3, r3, #16
    6df2:	2b00      	cmp	r3, #0
    6df4:	d15a      	bne.n	6eac <ground_calibrate+0xeec>
    6df6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6dfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dfe:	781b      	ldrb	r3, [r3, #0]
    6e00:	b2db      	uxtb	r3, r3
    6e02:	461a      	mov	r2, r3
    6e04:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6e08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e0c:	5c9a      	ldrb	r2, [r3, r2]
    6e0e:	f24c 634b 	movw	r3, #50763	; 0xc64b
    6e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e16:	701a      	strb	r2, [r3, #0]
    6e18:	f24c 634c 	movw	r3, #50764	; 0xc64c
    6e1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e20:	2200      	movs	r2, #0
    6e22:	701a      	strb	r2, [r3, #0]
    6e24:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e2c:	781b      	ldrb	r3, [r3, #0]
    6e2e:	b2db      	uxtb	r3, r3
    6e30:	3301      	adds	r3, #1
    6e32:	b2da      	uxtb	r2, r3
    6e34:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e3c:	701a      	strb	r2, [r3, #0]
    6e3e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e46:	781b      	ldrb	r3, [r3, #0]
    6e48:	b2db      	uxtb	r3, r3
    6e4a:	2bff      	cmp	r3, #255	; 0xff
    6e4c:	d105      	bne.n	6e5a <ground_calibrate+0xe9a>
    6e4e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6e52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e56:	2200      	movs	r2, #0
    6e58:	701a      	strb	r2, [r3, #0]
    6e5a:	f242 0338 	movw	r3, #8248	; 0x2038
    6e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e62:	f242 0238 	movw	r2, #8248	; 0x2038
    6e66:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6e6a:	7812      	ldrb	r2, [r2, #0]
    6e6c:	b2d2      	uxtb	r2, r2
    6e6e:	f042 0201 	orr.w	r2, r2, #1
    6e72:	b2d2      	uxtb	r2, r2
    6e74:	701a      	strb	r2, [r3, #0]
    6e76:	f242 0339 	movw	r3, #8249	; 0x2039
    6e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e7e:	f242 0239 	movw	r2, #8249	; 0x2039
    6e82:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6e86:	7812      	ldrb	r2, [r2, #0]
    6e88:	b2d2      	uxtb	r2, r2
    6e8a:	f042 0210 	orr.w	r2, r2, #16
    6e8e:	b2d2      	uxtb	r2, r2
    6e90:	701a      	strb	r2, [r3, #0]
    6e92:	e00b      	b.n	6eac <ground_calibrate+0xeec>
    6e94:	f24c 5348 	movw	r3, #50504	; 0xc548
    6e98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e9c:	781b      	ldrb	r3, [r3, #0]
    6e9e:	3301      	adds	r3, #1
    6ea0:	b2da      	uxtb	r2, r3
    6ea2:	f24c 5348 	movw	r3, #50504	; 0xc548
    6ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eaa:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    6eac:	f24c 5342 	movw	r3, #50498	; 0xc542
    6eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eb4:	2202      	movs	r2, #2
    6eb6:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    6eb8:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ec0:	781a      	ldrb	r2, [r3, #0]
    6ec2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eca:	781b      	ldrb	r3, [r3, #0]
    6ecc:	b2db      	uxtb	r3, r3
    6ece:	429a      	cmp	r2, r3
    6ed0:	d318      	bcc.n	6f04 <ground_calibrate+0xf44>
    6ed2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6ed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eda:	781b      	ldrb	r3, [r3, #0]
    6edc:	b2db      	uxtb	r3, r3
    6ede:	461a      	mov	r2, r3
    6ee0:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ee8:	781b      	ldrb	r3, [r3, #0]
    6eea:	1ad3      	subs	r3, r2, r3
    6eec:	33ff      	adds	r3, #255	; 0xff
    6eee:	2b06      	cmp	r3, #6
    6ef0:	bfd4      	ite	le
    6ef2:	2300      	movle	r3, #0
    6ef4:	2301      	movgt	r3, #1
    6ef6:	b2db      	uxtb	r3, r3
    6ef8:	e016      	b.n	6f28 <ground_calibrate+0xf68>
    6efa:	bf00      	nop
    6efc:	20000543 	.word	0x20000543
    6f00:	20000545 	.word	0x20000545
    6f04:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f0c:	781b      	ldrb	r3, [r3, #0]
    6f0e:	b2db      	uxtb	r3, r3
    6f10:	461a      	mov	r2, r3
    6f12:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f1a:	781b      	ldrb	r3, [r3, #0]
    6f1c:	1ad3      	subs	r3, r2, r3
    6f1e:	2b06      	cmp	r3, #6
    6f20:	bfd4      	ite	le
    6f22:	2300      	movle	r3, #0
    6f24:	2301      	movgt	r3, #1
    6f26:	b2db      	uxtb	r3, r3
    6f28:	2b00      	cmp	r3, #0
    6f2a:	f000 8194 	beq.w	7256 <ground_calibrate+0x1296>
    6f2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f36:	781b      	ldrb	r3, [r3, #0]
    6f38:	461a      	mov	r2, r3
    6f3a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6f3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f42:	2105      	movs	r1, #5
    6f44:	5499      	strb	r1, [r3, r2]
    6f46:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f4e:	781b      	ldrb	r3, [r3, #0]
    6f50:	3301      	adds	r3, #1
    6f52:	b2da      	uxtb	r2, r3
    6f54:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f5c:	701a      	strb	r2, [r3, #0]
    6f5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f66:	781b      	ldrb	r3, [r3, #0]
    6f68:	2bff      	cmp	r3, #255	; 0xff
    6f6a:	d105      	bne.n	6f78 <ground_calibrate+0xfb8>
    6f6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f74:	2200      	movs	r2, #0
    6f76:	701a      	strb	r2, [r3, #0]
    6f78:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f80:	781b      	ldrb	r3, [r3, #0]
    6f82:	461a      	mov	r2, r3
    6f84:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f8c:	2103      	movs	r1, #3
    6f8e:	5499      	strb	r1, [r3, r2]
    6f90:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f98:	781b      	ldrb	r3, [r3, #0]
    6f9a:	3301      	adds	r3, #1
    6f9c:	b2da      	uxtb	r2, r3
    6f9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fa6:	701a      	strb	r2, [r3, #0]
    6fa8:	f24c 5349 	movw	r3, #50505	; 0xc549
    6fac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fb0:	781b      	ldrb	r3, [r3, #0]
    6fb2:	2bff      	cmp	r3, #255	; 0xff
    6fb4:	d105      	bne.n	6fc2 <ground_calibrate+0x1002>
    6fb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    6fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fbe:	2200      	movs	r2, #0
    6fc0:	701a      	strb	r2, [r3, #0]
    6fc2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6fc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fca:	2203      	movs	r2, #3
    6fcc:	701a      	strb	r2, [r3, #0]
    6fce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fd6:	2203      	movs	r2, #3
    6fd8:	701a      	strb	r2, [r3, #0]
    6fda:	f24c 5349 	movw	r3, #50505	; 0xc549
    6fde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fe2:	781b      	ldrb	r3, [r3, #0]
    6fe4:	461a      	mov	r2, r3
    6fe6:	f240 5340 	movw	r3, #1344	; 0x540
    6fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fee:	7819      	ldrb	r1, [r3, #0]
    6ff0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6ff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ff8:	5499      	strb	r1, [r3, r2]
    6ffa:	f240 5340 	movw	r3, #1344	; 0x540
    6ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7002:	781a      	ldrb	r2, [r3, #0]
    7004:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    700c:	781b      	ldrb	r3, [r3, #0]
    700e:	4413      	add	r3, r2
    7010:	b2da      	uxtb	r2, r3
    7012:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    701a:	701a      	strb	r2, [r3, #0]
    701c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7024:	781a      	ldrb	r2, [r3, #0]
    7026:	f24c 634d 	movw	r3, #50765	; 0xc64d
    702a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    702e:	781b      	ldrb	r3, [r3, #0]
    7030:	4413      	add	r3, r2
    7032:	b2da      	uxtb	r2, r3
    7034:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    703c:	701a      	strb	r2, [r3, #0]
    703e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7046:	781b      	ldrb	r3, [r3, #0]
    7048:	3301      	adds	r3, #1
    704a:	b2da      	uxtb	r2, r3
    704c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7054:	701a      	strb	r2, [r3, #0]
    7056:	f24c 5349 	movw	r3, #50505	; 0xc549
    705a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    705e:	781b      	ldrb	r3, [r3, #0]
    7060:	2bff      	cmp	r3, #255	; 0xff
    7062:	d105      	bne.n	7070 <ground_calibrate+0x10b0>
    7064:	f24c 5349 	movw	r3, #50505	; 0xc549
    7068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    706c:	2200      	movs	r2, #0
    706e:	701a      	strb	r2, [r3, #0]
    7070:	f24c 5349 	movw	r3, #50505	; 0xc549
    7074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7078:	781b      	ldrb	r3, [r3, #0]
    707a:	461a      	mov	r2, r3
    707c:	f240 5340 	movw	r3, #1344	; 0x540
    7080:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7084:	7859      	ldrb	r1, [r3, #1]
    7086:	f24c 534c 	movw	r3, #50508	; 0xc54c
    708a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    708e:	5499      	strb	r1, [r3, r2]
    7090:	4b77      	ldr	r3, [pc, #476]	; (7270 <ground_calibrate+0x12b0>)
    7092:	781a      	ldrb	r2, [r3, #0]
    7094:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    709c:	781b      	ldrb	r3, [r3, #0]
    709e:	4413      	add	r3, r2
    70a0:	b2da      	uxtb	r2, r3
    70a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    70a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70aa:	701a      	strb	r2, [r3, #0]
    70ac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    70b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70b4:	781a      	ldrb	r2, [r3, #0]
    70b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    70ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70be:	781b      	ldrb	r3, [r3, #0]
    70c0:	4413      	add	r3, r2
    70c2:	b2da      	uxtb	r2, r3
    70c4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    70c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70cc:	701a      	strb	r2, [r3, #0]
    70ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    70d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70d6:	781b      	ldrb	r3, [r3, #0]
    70d8:	3301      	adds	r3, #1
    70da:	b2da      	uxtb	r2, r3
    70dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    70e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70e4:	701a      	strb	r2, [r3, #0]
    70e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    70ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70ee:	781b      	ldrb	r3, [r3, #0]
    70f0:	2bff      	cmp	r3, #255	; 0xff
    70f2:	d105      	bne.n	7100 <ground_calibrate+0x1140>
    70f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    70f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70fc:	2200      	movs	r2, #0
    70fe:	701a      	strb	r2, [r3, #0]
    7100:	f24c 5349 	movw	r3, #50505	; 0xc549
    7104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7108:	781b      	ldrb	r3, [r3, #0]
    710a:	461a      	mov	r2, r3
    710c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7114:	7819      	ldrb	r1, [r3, #0]
    7116:	f24c 534c 	movw	r3, #50508	; 0xc54c
    711a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    711e:	5499      	strb	r1, [r3, r2]
    7120:	f24c 5349 	movw	r3, #50505	; 0xc549
    7124:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7128:	781b      	ldrb	r3, [r3, #0]
    712a:	3301      	adds	r3, #1
    712c:	b2da      	uxtb	r2, r3
    712e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7136:	701a      	strb	r2, [r3, #0]
    7138:	f24c 5349 	movw	r3, #50505	; 0xc549
    713c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7140:	781b      	ldrb	r3, [r3, #0]
    7142:	2bff      	cmp	r3, #255	; 0xff
    7144:	d105      	bne.n	7152 <ground_calibrate+0x1192>
    7146:	f24c 5349 	movw	r3, #50505	; 0xc549
    714a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    714e:	2200      	movs	r2, #0
    7150:	701a      	strb	r2, [r3, #0]
    7152:	f24c 5349 	movw	r3, #50505	; 0xc549
    7156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    715a:	781b      	ldrb	r3, [r3, #0]
    715c:	461a      	mov	r2, r3
    715e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7162:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7166:	7819      	ldrb	r1, [r3, #0]
    7168:	f24c 534c 	movw	r3, #50508	; 0xc54c
    716c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7170:	5499      	strb	r1, [r3, r2]
    7172:	f24c 5349 	movw	r3, #50505	; 0xc549
    7176:	f2c2 0304 	movt	r3, #8196	; 0x2004
    717a:	781b      	ldrb	r3, [r3, #0]
    717c:	3301      	adds	r3, #1
    717e:	b2da      	uxtb	r2, r3
    7180:	f24c 5349 	movw	r3, #50505	; 0xc549
    7184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7188:	701a      	strb	r2, [r3, #0]
    718a:	f24c 5349 	movw	r3, #50505	; 0xc549
    718e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7192:	781b      	ldrb	r3, [r3, #0]
    7194:	2bff      	cmp	r3, #255	; 0xff
    7196:	d105      	bne.n	71a4 <ground_calibrate+0x11e4>
    7198:	f24c 5349 	movw	r3, #50505	; 0xc549
    719c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71a0:	2200      	movs	r2, #0
    71a2:	701a      	strb	r2, [r3, #0]
    71a4:	f242 0339 	movw	r3, #8249	; 0x2039
    71a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71ac:	781b      	ldrb	r3, [r3, #0]
    71ae:	b2db      	uxtb	r3, r3
    71b0:	f003 0310 	and.w	r3, r3, #16
    71b4:	2b00      	cmp	r3, #0
    71b6:	d15a      	bne.n	726e <ground_calibrate+0x12ae>
    71b8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    71bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71c0:	781b      	ldrb	r3, [r3, #0]
    71c2:	b2db      	uxtb	r3, r3
    71c4:	461a      	mov	r2, r3
    71c6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    71ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ce:	5c9a      	ldrb	r2, [r3, r2]
    71d0:	f24c 634b 	movw	r3, #50763	; 0xc64b
    71d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71d8:	701a      	strb	r2, [r3, #0]
    71da:	f24c 634c 	movw	r3, #50764	; 0xc64c
    71de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71e2:	2200      	movs	r2, #0
    71e4:	701a      	strb	r2, [r3, #0]
    71e6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    71ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ee:	781b      	ldrb	r3, [r3, #0]
    71f0:	b2db      	uxtb	r3, r3
    71f2:	3301      	adds	r3, #1
    71f4:	b2da      	uxtb	r2, r3
    71f6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    71fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71fe:	701a      	strb	r2, [r3, #0]
    7200:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7208:	781b      	ldrb	r3, [r3, #0]
    720a:	b2db      	uxtb	r3, r3
    720c:	2bff      	cmp	r3, #255	; 0xff
    720e:	d105      	bne.n	721c <ground_calibrate+0x125c>
    7210:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7218:	2200      	movs	r2, #0
    721a:	701a      	strb	r2, [r3, #0]
    721c:	f242 0338 	movw	r3, #8248	; 0x2038
    7220:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7224:	f242 0238 	movw	r2, #8248	; 0x2038
    7228:	f2c2 0200 	movt	r2, #8192	; 0x2000
    722c:	7812      	ldrb	r2, [r2, #0]
    722e:	b2d2      	uxtb	r2, r2
    7230:	f042 0201 	orr.w	r2, r2, #1
    7234:	b2d2      	uxtb	r2, r2
    7236:	701a      	strb	r2, [r3, #0]
    7238:	f242 0339 	movw	r3, #8249	; 0x2039
    723c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7240:	f242 0239 	movw	r2, #8249	; 0x2039
    7244:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7248:	7812      	ldrb	r2, [r2, #0]
    724a:	b2d2      	uxtb	r2, r2
    724c:	f042 0210 	orr.w	r2, r2, #16
    7250:	b2d2      	uxtb	r2, r2
    7252:	701a      	strb	r2, [r3, #0]
    7254:	e00b      	b.n	726e <ground_calibrate+0x12ae>
    7256:	f24c 5348 	movw	r3, #50504	; 0xc548
    725a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    725e:	781b      	ldrb	r3, [r3, #0]
    7260:	3301      	adds	r3, #1
    7262:	b2da      	uxtb	r2, r3
    7264:	f24c 5348 	movw	r3, #50504	; 0xc548
    7268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    726c:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    726e:	bd80      	pop	{r7, pc}
    7270:	20000541 	.word	0x20000541

00007274 <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    7274:	b480      	push	{r7}
    7276:	b083      	sub	sp, #12
    7278:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    727a:	f24c 532c 	movw	r3, #50476	; 0xc52c
    727e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7282:	781b      	ldrb	r3, [r3, #0]
    7284:	2b03      	cmp	r3, #3
    7286:	d10c      	bne.n	72a2 <pprz_mode_update+0x2e>
    7288:	f24c 5330 	movw	r3, #50480	; 0xc530
    728c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7290:	781b      	ldrb	r3, [r3, #0]
    7292:	2b00      	cmp	r3, #0
    7294:	d032      	beq.n	72fc <pprz_mode_update+0x88>
    7296:	f24c 5330 	movw	r3, #50480	; 0xc530
    729a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    729e:	2200      	movs	r2, #0
    72a0:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    72a2:	f24c 6350 	movw	r3, #50768	; 0xc650
    72a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72aa:	891b      	ldrh	r3, [r3, #8]
    72ac:	b21b      	sxth	r3, r3
    72ae:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    72b2:	dc0f      	bgt.n	72d4 <pprz_mode_update+0x60>
    72b4:	f24c 6350 	movw	r3, #50768	; 0xc650
    72b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72bc:	891b      	ldrh	r3, [r3, #8]
    72be:	b21a      	sxth	r2, r3
    72c0:	f64e 5341 	movw	r3, #60737	; 0xed41
    72c4:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    72c8:	429a      	cmp	r2, r3
    72ca:	bfb4      	ite	lt
    72cc:	2300      	movlt	r3, #0
    72ce:	2301      	movge	r3, #1
    72d0:	b2db      	uxtb	r3, r3
    72d2:	e000      	b.n	72d6 <pprz_mode_update+0x62>
    72d4:	2302      	movs	r3, #2
    72d6:	71fb      	strb	r3, [r7, #7]
    72d8:	f24c 532c 	movw	r3, #50476	; 0xc52c
    72dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72e0:	781b      	ldrb	r3, [r3, #0]
    72e2:	79fa      	ldrb	r2, [r7, #7]
    72e4:	429a      	cmp	r2, r3
    72e6:	d007      	beq.n	72f8 <pprz_mode_update+0x84>
    72e8:	f24c 532c 	movw	r3, #50476	; 0xc52c
    72ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72f0:	79fa      	ldrb	r2, [r7, #7]
    72f2:	701a      	strb	r2, [r3, #0]
    72f4:	2301      	movs	r3, #1
    72f6:	e002      	b.n	72fe <pprz_mode_update+0x8a>
    72f8:	2300      	movs	r3, #0
    72fa:	e000      	b.n	72fe <pprz_mode_update+0x8a>
  } else
    return FALSE;
    72fc:	2300      	movs	r3, #0
}
    72fe:	4618      	mov	r0, r3
    7300:	370c      	adds	r7, #12
    7302:	46bd      	mov	sp, r7
    7304:	f85d 7b04 	ldr.w	r7, [sp], #4
    7308:	4770      	bx	lr
    730a:	bf00      	nop

0000730c <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    730c:	b480      	push	{r7}
    730e:	b083      	sub	sp, #12
    7310:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    7312:	f24c 6350 	movw	r3, #50768	; 0xc650
    7316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    731a:	89db      	ldrh	r3, [r3, #14]
    731c:	b21a      	sxth	r2, r3
    731e:	f640 437f 	movw	r3, #3199	; 0xc7f
    7322:	429a      	cmp	r2, r3
    7324:	bfd4      	ite	le
    7326:	2300      	movle	r3, #0
    7328:	2301      	movgt	r3, #1
    732a:	b2db      	uxtb	r3, r3
    732c:	71fb      	strb	r3, [r7, #7]
    732e:	f240 533c 	movw	r3, #1340	; 0x53c
    7332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7336:	781b      	ldrb	r3, [r3, #0]
    7338:	79fa      	ldrb	r2, [r7, #7]
    733a:	429a      	cmp	r2, r3
    733c:	d007      	beq.n	734e <ir_estim_mode_update+0x42>
    733e:	f240 533c 	movw	r3, #1340	; 0x53c
    7342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7346:	79fa      	ldrb	r2, [r7, #7]
    7348:	701a      	strb	r2, [r3, #0]
    734a:	2301      	movs	r3, #1
    734c:	e000      	b.n	7350 <ir_estim_mode_update+0x44>
    734e:	2300      	movs	r3, #0
}
    7350:	4618      	mov	r0, r3
    7352:	370c      	adds	r7, #12
    7354:	46bd      	mov	sp, r7
    7356:	f85d 7b04 	ldr.w	r7, [sp], #4
    735a:	4770      	bx	lr

0000735c <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    735c:	b480      	push	{r7}
    735e:	b083      	sub	sp, #12
    7360:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    7362:	f24c 6350 	movw	r3, #50768	; 0xc650
    7366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    736a:	7cdb      	ldrb	r3, [r3, #19]
    736c:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    736e:	f24c 5333 	movw	r3, #50483	; 0xc533
    7372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7376:	781b      	ldrb	r3, [r3, #0]
    7378:	79fa      	ldrb	r2, [r7, #7]
    737a:	429a      	cmp	r2, r3
    737c:	d017      	beq.n	73ae <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    737e:	f24c 5333 	movw	r3, #50483	; 0xc533
    7382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7386:	781b      	ldrb	r3, [r3, #0]
    7388:	461a      	mov	r2, r3
    738a:	79fb      	ldrb	r3, [r7, #7]
    738c:	4053      	eors	r3, r2
    738e:	f003 0303 	and.w	r3, r3, #3
    7392:	2b00      	cmp	r3, #0
    7394:	bf0c      	ite	eq
    7396:	2300      	moveq	r3, #0
    7398:	2301      	movne	r3, #1
    739a:	b2db      	uxtb	r3, r3
    739c:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    739e:	f24c 5333 	movw	r3, #50483	; 0xc533
    73a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73a6:	79fa      	ldrb	r2, [r7, #7]
    73a8:	701a      	strb	r2, [r3, #0]
    return changed;
    73aa:	79bb      	ldrb	r3, [r7, #6]
    73ac:	e000      	b.n	73b0 <mcu1_status_update+0x54>
  }
  return FALSE;
    73ae:	2300      	movs	r3, #0
}
    73b0:	4618      	mov	r0, r3
    73b2:	370c      	adds	r7, #12
    73b4:	46bd      	mov	sp, r7
    73b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    73ba:	4770      	bx	lr

000073bc <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    73bc:	b480      	push	{r7}
    73be:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    73c0:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    73c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73c8:	781b      	ldrb	r3, [r3, #0]
    73ca:	2b00      	cmp	r3, #0
    73cc:	d12a      	bne.n	7424 <events_update+0x68>
    73ce:	f24c 6350 	movw	r3, #50768	; 0xc650
    73d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73d6:	895b      	ldrh	r3, [r3, #10]
    73d8:	b21b      	sxth	r3, r3
    73da:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    73de:	dd21      	ble.n	7424 <events_update+0x68>
    73e0:	f24c 5344 	movw	r3, #50500	; 0xc544
    73e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73e8:	881b      	ldrh	r3, [r3, #0]
    73ea:	2b13      	cmp	r3, #19
    73ec:	d819      	bhi.n	7422 <events_update+0x66>
    73ee:	f24c 5344 	movw	r3, #50500	; 0xc544
    73f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73f6:	881b      	ldrh	r3, [r3, #0]
    73f8:	3301      	adds	r3, #1
    73fa:	b29a      	uxth	r2, r3
    73fc:	f24c 5344 	movw	r3, #50500	; 0xc544
    7400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7404:	801a      	strh	r2, [r3, #0]
    7406:	f24c 5344 	movw	r3, #50500	; 0xc544
    740a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    740e:	881b      	ldrh	r3, [r3, #0]
    7410:	2b14      	cmp	r3, #20
    7412:	d106      	bne.n	7422 <events_update+0x66>
    7414:	f24c 5330 	movw	r3, #50480	; 0xc530
    7418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    741c:	2201      	movs	r2, #1
    741e:	701a      	strb	r2, [r3, #0]
    7420:	e00c      	b.n	743c <events_update+0x80>
    7422:	e00b      	b.n	743c <events_update+0x80>
    7424:	f24c 5344 	movw	r3, #50500	; 0xc544
    7428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    742c:	2200      	movs	r2, #0
    742e:	801a      	strh	r2, [r3, #0]
    7430:	f24c 5330 	movw	r3, #50480	; 0xc530
    7434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7438:	2200      	movs	r2, #0
    743a:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    743c:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    7440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7444:	781b      	ldrb	r3, [r3, #0]
    7446:	2b00      	cmp	r3, #0
    7448:	d12a      	bne.n	74a0 <events_update+0xe4>
    744a:	f24c 6350 	movw	r3, #50768	; 0xc650
    744e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7452:	895b      	ldrh	r3, [r3, #10]
    7454:	b21b      	sxth	r3, r3
    7456:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    745a:	da21      	bge.n	74a0 <events_update+0xe4>
    745c:	f24c 5346 	movw	r3, #50502	; 0xc546
    7460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7464:	881b      	ldrh	r3, [r3, #0]
    7466:	2b13      	cmp	r3, #19
    7468:	d819      	bhi.n	749e <events_update+0xe2>
    746a:	f24c 5346 	movw	r3, #50502	; 0xc546
    746e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7472:	881b      	ldrh	r3, [r3, #0]
    7474:	3301      	adds	r3, #1
    7476:	b29a      	uxth	r2, r3
    7478:	f24c 5346 	movw	r3, #50502	; 0xc546
    747c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7480:	801a      	strh	r2, [r3, #0]
    7482:	f24c 5346 	movw	r3, #50502	; 0xc546
    7486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    748a:	881b      	ldrh	r3, [r3, #0]
    748c:	2b14      	cmp	r3, #20
    748e:	d106      	bne.n	749e <events_update+0xe2>
    7490:	f24c 5331 	movw	r3, #50481	; 0xc531
    7494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7498:	2201      	movs	r2, #1
    749a:	701a      	strb	r2, [r3, #0]
    749c:	e00c      	b.n	74b8 <events_update+0xfc>
    749e:	e00b      	b.n	74b8 <events_update+0xfc>
    74a0:	f24c 5346 	movw	r3, #50502	; 0xc546
    74a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74a8:	2200      	movs	r2, #0
    74aa:	801a      	strh	r2, [r3, #0]
    74ac:	f24c 5331 	movw	r3, #50481	; 0xc531
    74b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74b4:	2200      	movs	r2, #0
    74b6:	701a      	strb	r2, [r3, #0]
}  
    74b8:	46bd      	mov	sp, r7
    74ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    74be:	4770      	bx	lr

000074c0 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    74c0:	b480      	push	{r7}
    74c2:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    74c4:	f24c 6350 	movw	r3, #50768	; 0xc650
    74c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74cc:	88da      	ldrh	r2, [r3, #6]
    74ce:	f24c 6368 	movw	r3, #50792	; 0xc668
    74d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74d6:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    74d8:	f24c 6368 	movw	r3, #50792	; 0xc668
    74dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74e0:	2200      	movs	r2, #0
    74e2:	74da      	strb	r2, [r3, #19]
}
    74e4:	46bd      	mov	sp, r7
    74e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    74ea:	4770      	bx	lr

000074ec <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    74ec:	b480      	push	{r7}
    74ee:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  if (boot) 
    74f0:	f240 533d 	movw	r3, #1341	; 0x53d
    74f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74f8:	781b      	ldrb	r3, [r3, #0]
    74fa:	2b00      	cmp	r3, #0
    74fc:	f000 87c6 	beq.w	848c <send_boot+0xfa0>
  {
      DOWNLINK_SEND_BOOT(&version);
    7500:	f24c 5349 	movw	r3, #50505	; 0xc549
    7504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7508:	781a      	ldrb	r2, [r3, #0]
    750a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    750e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7512:	781b      	ldrb	r3, [r3, #0]
    7514:	b2db      	uxtb	r3, r3
    7516:	429a      	cmp	r2, r3
    7518:	d313      	bcc.n	7542 <send_boot+0x56>
    751a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    751e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7522:	781b      	ldrb	r3, [r3, #0]
    7524:	b2db      	uxtb	r3, r3
    7526:	461a      	mov	r2, r3
    7528:	f24c 5349 	movw	r3, #50505	; 0xc549
    752c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7530:	781b      	ldrb	r3, [r3, #0]
    7532:	1ad3      	subs	r3, r2, r3
    7534:	33ff      	adds	r3, #255	; 0xff
    7536:	2b06      	cmp	r3, #6
    7538:	bfd4      	ite	le
    753a:	2300      	movle	r3, #0
    753c:	2301      	movgt	r3, #1
    753e:	b2db      	uxtb	r3, r3
    7540:	e011      	b.n	7566 <send_boot+0x7a>
    7542:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    754a:	781b      	ldrb	r3, [r3, #0]
    754c:	b2db      	uxtb	r3, r3
    754e:	461a      	mov	r2, r3
    7550:	f24c 5349 	movw	r3, #50505	; 0xc549
    7554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7558:	781b      	ldrb	r3, [r3, #0]
    755a:	1ad3      	subs	r3, r2, r3
    755c:	2b06      	cmp	r3, #6
    755e:	bfd4      	ite	le
    7560:	2300      	movle	r3, #0
    7562:	2301      	movgt	r3, #1
    7564:	b2db      	uxtb	r3, r3
    7566:	2b00      	cmp	r3, #0
    7568:	f000 8194 	beq.w	7894 <send_boot+0x3a8>
    756c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7574:	781b      	ldrb	r3, [r3, #0]
    7576:	461a      	mov	r2, r3
    7578:	f24c 534c 	movw	r3, #50508	; 0xc54c
    757c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7580:	2105      	movs	r1, #5
    7582:	5499      	strb	r1, [r3, r2]
    7584:	f24c 5349 	movw	r3, #50505	; 0xc549
    7588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    758c:	781b      	ldrb	r3, [r3, #0]
    758e:	3301      	adds	r3, #1
    7590:	b2da      	uxtb	r2, r3
    7592:	f24c 5349 	movw	r3, #50505	; 0xc549
    7596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    759a:	701a      	strb	r2, [r3, #0]
    759c:	f24c 5349 	movw	r3, #50505	; 0xc549
    75a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75a4:	781b      	ldrb	r3, [r3, #0]
    75a6:	2bff      	cmp	r3, #255	; 0xff
    75a8:	d105      	bne.n	75b6 <send_boot+0xca>
    75aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    75ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75b2:	2200      	movs	r2, #0
    75b4:	701a      	strb	r2, [r3, #0]
    75b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    75ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75be:	781b      	ldrb	r3, [r3, #0]
    75c0:	461a      	mov	r2, r3
    75c2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    75c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75ca:	2101      	movs	r1, #1
    75cc:	5499      	strb	r1, [r3, r2]
    75ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    75d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75d6:	781b      	ldrb	r3, [r3, #0]
    75d8:	3301      	adds	r3, #1
    75da:	b2da      	uxtb	r2, r3
    75dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    75e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75e4:	701a      	strb	r2, [r3, #0]
    75e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    75ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75ee:	781b      	ldrb	r3, [r3, #0]
    75f0:	2bff      	cmp	r3, #255	; 0xff
    75f2:	d105      	bne.n	7600 <send_boot+0x114>
    75f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    75f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75fc:	2200      	movs	r2, #0
    75fe:	701a      	strb	r2, [r3, #0]
    7600:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7608:	2201      	movs	r2, #1
    760a:	701a      	strb	r2, [r3, #0]
    760c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7614:	2201      	movs	r2, #1
    7616:	701a      	strb	r2, [r3, #0]
    7618:	f24c 5349 	movw	r3, #50505	; 0xc549
    761c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7620:	781b      	ldrb	r3, [r3, #0]
    7622:	461a      	mov	r2, r3
    7624:	f648 238e 	movw	r3, #35470	; 0x8a8e
    7628:	f2c0 0301 	movt	r3, #1
    762c:	7819      	ldrb	r1, [r3, #0]
    762e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7636:	5499      	strb	r1, [r3, r2]
    7638:	f648 238e 	movw	r3, #35470	; 0x8a8e
    763c:	f2c0 0301 	movt	r3, #1
    7640:	781a      	ldrb	r2, [r3, #0]
    7642:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    764a:	781b      	ldrb	r3, [r3, #0]
    764c:	4413      	add	r3, r2
    764e:	b2da      	uxtb	r2, r3
    7650:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7658:	701a      	strb	r2, [r3, #0]
    765a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    765e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7662:	781a      	ldrb	r2, [r3, #0]
    7664:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    766c:	781b      	ldrb	r3, [r3, #0]
    766e:	4413      	add	r3, r2
    7670:	b2da      	uxtb	r2, r3
    7672:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    767a:	701a      	strb	r2, [r3, #0]
    767c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7684:	781b      	ldrb	r3, [r3, #0]
    7686:	3301      	adds	r3, #1
    7688:	b2da      	uxtb	r2, r3
    768a:	f24c 5349 	movw	r3, #50505	; 0xc549
    768e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7692:	701a      	strb	r2, [r3, #0]
    7694:	f24c 5349 	movw	r3, #50505	; 0xc549
    7698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    769c:	781b      	ldrb	r3, [r3, #0]
    769e:	2bff      	cmp	r3, #255	; 0xff
    76a0:	d105      	bne.n	76ae <send_boot+0x1c2>
    76a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    76a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76aa:	2200      	movs	r2, #0
    76ac:	701a      	strb	r2, [r3, #0]
    76ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    76b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76b6:	781b      	ldrb	r3, [r3, #0]
    76b8:	461a      	mov	r2, r3
    76ba:	f648 238e 	movw	r3, #35470	; 0x8a8e
    76be:	f2c0 0301 	movt	r3, #1
    76c2:	7859      	ldrb	r1, [r3, #1]
    76c4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    76c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76cc:	5499      	strb	r1, [r3, r2]
    76ce:	4b88      	ldr	r3, [pc, #544]	; (78f0 <send_boot+0x404>)
    76d0:	781a      	ldrb	r2, [r3, #0]
    76d2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    76d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76da:	781b      	ldrb	r3, [r3, #0]
    76dc:	4413      	add	r3, r2
    76de:	b2da      	uxtb	r2, r3
    76e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    76e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76e8:	701a      	strb	r2, [r3, #0]
    76ea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    76ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76f2:	781a      	ldrb	r2, [r3, #0]
    76f4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    76f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76fc:	781b      	ldrb	r3, [r3, #0]
    76fe:	4413      	add	r3, r2
    7700:	b2da      	uxtb	r2, r3
    7702:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7706:	f2c2 0304 	movt	r3, #8196	; 0x2004
    770a:	701a      	strb	r2, [r3, #0]
    770c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7714:	781b      	ldrb	r3, [r3, #0]
    7716:	3301      	adds	r3, #1
    7718:	b2da      	uxtb	r2, r3
    771a:	f24c 5349 	movw	r3, #50505	; 0xc549
    771e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7722:	701a      	strb	r2, [r3, #0]
    7724:	f24c 5349 	movw	r3, #50505	; 0xc549
    7728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    772c:	781b      	ldrb	r3, [r3, #0]
    772e:	2bff      	cmp	r3, #255	; 0xff
    7730:	d105      	bne.n	773e <send_boot+0x252>
    7732:	f24c 5349 	movw	r3, #50505	; 0xc549
    7736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    773a:	2200      	movs	r2, #0
    773c:	701a      	strb	r2, [r3, #0]
    773e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7746:	781b      	ldrb	r3, [r3, #0]
    7748:	461a      	mov	r2, r3
    774a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    774e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7752:	7819      	ldrb	r1, [r3, #0]
    7754:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    775c:	5499      	strb	r1, [r3, r2]
    775e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7766:	781b      	ldrb	r3, [r3, #0]
    7768:	3301      	adds	r3, #1
    776a:	b2da      	uxtb	r2, r3
    776c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7774:	701a      	strb	r2, [r3, #0]
    7776:	f24c 5349 	movw	r3, #50505	; 0xc549
    777a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    777e:	781b      	ldrb	r3, [r3, #0]
    7780:	2bff      	cmp	r3, #255	; 0xff
    7782:	d105      	bne.n	7790 <send_boot+0x2a4>
    7784:	f24c 5349 	movw	r3, #50505	; 0xc549
    7788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    778c:	2200      	movs	r2, #0
    778e:	701a      	strb	r2, [r3, #0]
    7790:	f24c 5349 	movw	r3, #50505	; 0xc549
    7794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7798:	781b      	ldrb	r3, [r3, #0]
    779a:	461a      	mov	r2, r3
    779c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    77a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77a4:	7819      	ldrb	r1, [r3, #0]
    77a6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    77aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ae:	5499      	strb	r1, [r3, r2]
    77b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    77b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77b8:	781b      	ldrb	r3, [r3, #0]
    77ba:	3301      	adds	r3, #1
    77bc:	b2da      	uxtb	r2, r3
    77be:	f24c 5349 	movw	r3, #50505	; 0xc549
    77c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77c6:	701a      	strb	r2, [r3, #0]
    77c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    77cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77d0:	781b      	ldrb	r3, [r3, #0]
    77d2:	2bff      	cmp	r3, #255	; 0xff
    77d4:	d105      	bne.n	77e2 <send_boot+0x2f6>
    77d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    77da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77de:	2200      	movs	r2, #0
    77e0:	701a      	strb	r2, [r3, #0]
    77e2:	f242 0339 	movw	r3, #8249	; 0x2039
    77e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77ea:	781b      	ldrb	r3, [r3, #0]
    77ec:	b2db      	uxtb	r3, r3
    77ee:	f003 0310 	and.w	r3, r3, #16
    77f2:	2b00      	cmp	r3, #0
    77f4:	d15a      	bne.n	78ac <send_boot+0x3c0>
    77f6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    77fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77fe:	781b      	ldrb	r3, [r3, #0]
    7800:	b2db      	uxtb	r3, r3
    7802:	461a      	mov	r2, r3
    7804:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    780c:	5c9a      	ldrb	r2, [r3, r2]
    780e:	f24c 634b 	movw	r3, #50763	; 0xc64b
    7812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7816:	701a      	strb	r2, [r3, #0]
    7818:	f24c 634c 	movw	r3, #50764	; 0xc64c
    781c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7820:	2200      	movs	r2, #0
    7822:	701a      	strb	r2, [r3, #0]
    7824:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    782c:	781b      	ldrb	r3, [r3, #0]
    782e:	b2db      	uxtb	r3, r3
    7830:	3301      	adds	r3, #1
    7832:	b2da      	uxtb	r2, r3
    7834:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    783c:	701a      	strb	r2, [r3, #0]
    783e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7846:	781b      	ldrb	r3, [r3, #0]
    7848:	b2db      	uxtb	r3, r3
    784a:	2bff      	cmp	r3, #255	; 0xff
    784c:	d105      	bne.n	785a <send_boot+0x36e>
    784e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7856:	2200      	movs	r2, #0
    7858:	701a      	strb	r2, [r3, #0]
    785a:	f242 0338 	movw	r3, #8248	; 0x2038
    785e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7862:	f242 0238 	movw	r2, #8248	; 0x2038
    7866:	f2c2 0200 	movt	r2, #8192	; 0x2000
    786a:	7812      	ldrb	r2, [r2, #0]
    786c:	b2d2      	uxtb	r2, r2
    786e:	f042 0201 	orr.w	r2, r2, #1
    7872:	b2d2      	uxtb	r2, r2
    7874:	701a      	strb	r2, [r3, #0]
    7876:	f242 0339 	movw	r3, #8249	; 0x2039
    787a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    787e:	f242 0239 	movw	r2, #8249	; 0x2039
    7882:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7886:	7812      	ldrb	r2, [r2, #0]
    7888:	b2d2      	uxtb	r2, r2
    788a:	f042 0210 	orr.w	r2, r2, #16
    788e:	b2d2      	uxtb	r2, r2
    7890:	701a      	strb	r2, [r3, #0]
    7892:	e00b      	b.n	78ac <send_boot+0x3c0>
    7894:	f24c 5348 	movw	r3, #50504	; 0xc548
    7898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    789c:	781b      	ldrb	r3, [r3, #0]
    789e:	3301      	adds	r3, #1
    78a0:	b2da      	uxtb	r2, r3
    78a2:	f24c 5348 	movw	r3, #50504	; 0xc548
    78a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78aa:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    78ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    78b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78b4:	781a      	ldrb	r2, [r3, #0]
    78b6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    78ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78be:	781b      	ldrb	r3, [r3, #0]
    78c0:	b2db      	uxtb	r3, r3
    78c2:	429a      	cmp	r2, r3
    78c4:	d316      	bcc.n	78f4 <send_boot+0x408>
    78c6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    78ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ce:	781b      	ldrb	r3, [r3, #0]
    78d0:	b2db      	uxtb	r3, r3
    78d2:	461a      	mov	r2, r3
    78d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    78d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78dc:	781b      	ldrb	r3, [r3, #0]
    78de:	1ad3      	subs	r3, r2, r3
    78e0:	33ff      	adds	r3, #255	; 0xff
    78e2:	2b14      	cmp	r3, #20
    78e4:	bfd4      	ite	le
    78e6:	2300      	movle	r3, #0
    78e8:	2301      	movgt	r3, #1
    78ea:	b2db      	uxtb	r3, r3
    78ec:	e014      	b.n	7918 <send_boot+0x42c>
    78ee:	bf00      	nop
    78f0:	00018a8f 	.word	0x00018a8f
    78f4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    78f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78fc:	781b      	ldrb	r3, [r3, #0]
    78fe:	b2db      	uxtb	r3, r3
    7900:	461a      	mov	r2, r3
    7902:	f24c 5349 	movw	r3, #50505	; 0xc549
    7906:	f2c2 0304 	movt	r3, #8196	; 0x2004
    790a:	781b      	ldrb	r3, [r3, #0]
    790c:	1ad3      	subs	r3, r2, r3
    790e:	2b14      	cmp	r3, #20
    7910:	bfd4      	ite	le
    7912:	2300      	movle	r3, #0
    7914:	2301      	movgt	r3, #1
    7916:	b2db      	uxtb	r3, r3
    7918:	2b00      	cmp	r3, #0
    791a:	f000 85a5 	beq.w	8468 <send_boot+0xf7c>
    791e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7926:	781b      	ldrb	r3, [r3, #0]
    7928:	461a      	mov	r2, r3
    792a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    792e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7932:	2105      	movs	r1, #5
    7934:	5499      	strb	r1, [r3, r2]
    7936:	f24c 5349 	movw	r3, #50505	; 0xc549
    793a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    793e:	781b      	ldrb	r3, [r3, #0]
    7940:	3301      	adds	r3, #1
    7942:	b2da      	uxtb	r2, r3
    7944:	f24c 5349 	movw	r3, #50505	; 0xc549
    7948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    794c:	701a      	strb	r2, [r3, #0]
    794e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7956:	781b      	ldrb	r3, [r3, #0]
    7958:	2bff      	cmp	r3, #255	; 0xff
    795a:	d105      	bne.n	7968 <send_boot+0x47c>
    795c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7964:	2200      	movs	r2, #0
    7966:	701a      	strb	r2, [r3, #0]
    7968:	f24c 5349 	movw	r3, #50505	; 0xc549
    796c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7970:	781b      	ldrb	r3, [r3, #0]
    7972:	461a      	mov	r2, r3
    7974:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    797c:	2105      	movs	r1, #5
    797e:	5499      	strb	r1, [r3, r2]
    7980:	f24c 5349 	movw	r3, #50505	; 0xc549
    7984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7988:	781b      	ldrb	r3, [r3, #0]
    798a:	3301      	adds	r3, #1
    798c:	b2da      	uxtb	r2, r3
    798e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7996:	701a      	strb	r2, [r3, #0]
    7998:	f24c 5349 	movw	r3, #50505	; 0xc549
    799c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79a0:	781b      	ldrb	r3, [r3, #0]
    79a2:	2bff      	cmp	r3, #255	; 0xff
    79a4:	d105      	bne.n	79b2 <send_boot+0x4c6>
    79a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    79aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ae:	2200      	movs	r2, #0
    79b0:	701a      	strb	r2, [r3, #0]
    79b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    79b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ba:	2205      	movs	r2, #5
    79bc:	701a      	strb	r2, [r3, #0]
    79be:	f24c 634e 	movw	r3, #50766	; 0xc64e
    79c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79c6:	2205      	movs	r2, #5
    79c8:	701a      	strb	r2, [r3, #0]
    79ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    79ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79d2:	781b      	ldrb	r3, [r3, #0]
    79d4:	461a      	mov	r2, r3
    79d6:	f64c 3340 	movw	r3, #52032	; 0xcb40
    79da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79de:	7819      	ldrb	r1, [r3, #0]
    79e0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    79e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79e8:	5499      	strb	r1, [r3, r2]
    79ea:	f64c 3340 	movw	r3, #52032	; 0xcb40
    79ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79f2:	781a      	ldrb	r2, [r3, #0]
    79f4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    79f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79fc:	781b      	ldrb	r3, [r3, #0]
    79fe:	4413      	add	r3, r2
    7a00:	b2da      	uxtb	r2, r3
    7a02:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a0a:	701a      	strb	r2, [r3, #0]
    7a0c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a14:	781a      	ldrb	r2, [r3, #0]
    7a16:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7a1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a1e:	781b      	ldrb	r3, [r3, #0]
    7a20:	4413      	add	r3, r2
    7a22:	b2da      	uxtb	r2, r3
    7a24:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a2c:	701a      	strb	r2, [r3, #0]
    7a2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a36:	781b      	ldrb	r3, [r3, #0]
    7a38:	3301      	adds	r3, #1
    7a3a:	b2da      	uxtb	r2, r3
    7a3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a44:	701a      	strb	r2, [r3, #0]
    7a46:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a4e:	781b      	ldrb	r3, [r3, #0]
    7a50:	2bff      	cmp	r3, #255	; 0xff
    7a52:	d105      	bne.n	7a60 <send_boot+0x574>
    7a54:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a5c:	2200      	movs	r2, #0
    7a5e:	701a      	strb	r2, [r3, #0]
    7a60:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a68:	781b      	ldrb	r3, [r3, #0]
    7a6a:	461a      	mov	r2, r3
    7a6c:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a74:	7859      	ldrb	r1, [r3, #1]
    7a76:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a7e:	5499      	strb	r1, [r3, r2]
    7a80:	4bd1      	ldr	r3, [pc, #836]	; (7dc8 <send_boot+0x8dc>)
    7a82:	781a      	ldrb	r2, [r3, #0]
    7a84:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a8c:	781b      	ldrb	r3, [r3, #0]
    7a8e:	4413      	add	r3, r2
    7a90:	b2da      	uxtb	r2, r3
    7a92:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a9a:	701a      	strb	r2, [r3, #0]
    7a9c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7aa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aa4:	781a      	ldrb	r2, [r3, #0]
    7aa6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7aaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aae:	781b      	ldrb	r3, [r3, #0]
    7ab0:	4413      	add	r3, r2
    7ab2:	b2da      	uxtb	r2, r3
    7ab4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7abc:	701a      	strb	r2, [r3, #0]
    7abe:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ac6:	781b      	ldrb	r3, [r3, #0]
    7ac8:	3301      	adds	r3, #1
    7aca:	b2da      	uxtb	r2, r3
    7acc:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ad4:	701a      	strb	r2, [r3, #0]
    7ad6:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ade:	781b      	ldrb	r3, [r3, #0]
    7ae0:	2bff      	cmp	r3, #255	; 0xff
    7ae2:	d105      	bne.n	7af0 <send_boot+0x604>
    7ae4:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aec:	2200      	movs	r2, #0
    7aee:	701a      	strb	r2, [r3, #0]
    7af0:	f24c 5349 	movw	r3, #50505	; 0xc549
    7af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7af8:	781b      	ldrb	r3, [r3, #0]
    7afa:	461a      	mov	r2, r3
    7afc:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b04:	7899      	ldrb	r1, [r3, #2]
    7b06:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b0e:	5499      	strb	r1, [r3, r2]
    7b10:	4bae      	ldr	r3, [pc, #696]	; (7dcc <send_boot+0x8e0>)
    7b12:	781a      	ldrb	r2, [r3, #0]
    7b14:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b1c:	781b      	ldrb	r3, [r3, #0]
    7b1e:	4413      	add	r3, r2
    7b20:	b2da      	uxtb	r2, r3
    7b22:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b2a:	701a      	strb	r2, [r3, #0]
    7b2c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b34:	781a      	ldrb	r2, [r3, #0]
    7b36:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b3e:	781b      	ldrb	r3, [r3, #0]
    7b40:	4413      	add	r3, r2
    7b42:	b2da      	uxtb	r2, r3
    7b44:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b4c:	701a      	strb	r2, [r3, #0]
    7b4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b56:	781b      	ldrb	r3, [r3, #0]
    7b58:	3301      	adds	r3, #1
    7b5a:	b2da      	uxtb	r2, r3
    7b5c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b64:	701a      	strb	r2, [r3, #0]
    7b66:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b6e:	781b      	ldrb	r3, [r3, #0]
    7b70:	2bff      	cmp	r3, #255	; 0xff
    7b72:	d105      	bne.n	7b80 <send_boot+0x694>
    7b74:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b7c:	2200      	movs	r2, #0
    7b7e:	701a      	strb	r2, [r3, #0]
    7b80:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b88:	781b      	ldrb	r3, [r3, #0]
    7b8a:	461a      	mov	r2, r3
    7b8c:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b94:	78d9      	ldrb	r1, [r3, #3]
    7b96:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b9e:	5499      	strb	r1, [r3, r2]
    7ba0:	4b8b      	ldr	r3, [pc, #556]	; (7dd0 <send_boot+0x8e4>)
    7ba2:	781a      	ldrb	r2, [r3, #0]
    7ba4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bac:	781b      	ldrb	r3, [r3, #0]
    7bae:	4413      	add	r3, r2
    7bb0:	b2da      	uxtb	r2, r3
    7bb2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7bb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bba:	701a      	strb	r2, [r3, #0]
    7bbc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7bc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bc4:	781a      	ldrb	r2, [r3, #0]
    7bc6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bce:	781b      	ldrb	r3, [r3, #0]
    7bd0:	4413      	add	r3, r2
    7bd2:	b2da      	uxtb	r2, r3
    7bd4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bdc:	701a      	strb	r2, [r3, #0]
    7bde:	f24c 5349 	movw	r3, #50505	; 0xc549
    7be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7be6:	781b      	ldrb	r3, [r3, #0]
    7be8:	3301      	adds	r3, #1
    7bea:	b2da      	uxtb	r2, r3
    7bec:	f24c 5349 	movw	r3, #50505	; 0xc549
    7bf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bf4:	701a      	strb	r2, [r3, #0]
    7bf6:	f24c 5349 	movw	r3, #50505	; 0xc549
    7bfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bfe:	781b      	ldrb	r3, [r3, #0]
    7c00:	2bff      	cmp	r3, #255	; 0xff
    7c02:	d105      	bne.n	7c10 <send_boot+0x724>
    7c04:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c0c:	2200      	movs	r2, #0
    7c0e:	701a      	strb	r2, [r3, #0]
    7c10:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c18:	781b      	ldrb	r3, [r3, #0]
    7c1a:	461a      	mov	r2, r3
    7c1c:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c24:	7819      	ldrb	r1, [r3, #0]
    7c26:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c2e:	5499      	strb	r1, [r3, r2]
    7c30:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c38:	781a      	ldrb	r2, [r3, #0]
    7c3a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c42:	781b      	ldrb	r3, [r3, #0]
    7c44:	4413      	add	r3, r2
    7c46:	b2da      	uxtb	r2, r3
    7c48:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c50:	701a      	strb	r2, [r3, #0]
    7c52:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7c56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c5a:	781a      	ldrb	r2, [r3, #0]
    7c5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c64:	781b      	ldrb	r3, [r3, #0]
    7c66:	4413      	add	r3, r2
    7c68:	b2da      	uxtb	r2, r3
    7c6a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7c6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c72:	701a      	strb	r2, [r3, #0]
    7c74:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c7c:	781b      	ldrb	r3, [r3, #0]
    7c7e:	3301      	adds	r3, #1
    7c80:	b2da      	uxtb	r2, r3
    7c82:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c8a:	701a      	strb	r2, [r3, #0]
    7c8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c94:	781b      	ldrb	r3, [r3, #0]
    7c96:	2bff      	cmp	r3, #255	; 0xff
    7c98:	d105      	bne.n	7ca6 <send_boot+0x7ba>
    7c9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ca2:	2200      	movs	r2, #0
    7ca4:	701a      	strb	r2, [r3, #0]
    7ca6:	f24c 5349 	movw	r3, #50505	; 0xc549
    7caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cae:	781b      	ldrb	r3, [r3, #0]
    7cb0:	461a      	mov	r2, r3
    7cb2:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7cb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cba:	7859      	ldrb	r1, [r3, #1]
    7cbc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7cc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cc4:	5499      	strb	r1, [r3, r2]
    7cc6:	4b43      	ldr	r3, [pc, #268]	; (7dd4 <send_boot+0x8e8>)
    7cc8:	781a      	ldrb	r2, [r3, #0]
    7cca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cd2:	781b      	ldrb	r3, [r3, #0]
    7cd4:	4413      	add	r3, r2
    7cd6:	b2da      	uxtb	r2, r3
    7cd8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ce0:	701a      	strb	r2, [r3, #0]
    7ce2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7ce6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cea:	781a      	ldrb	r2, [r3, #0]
    7cec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7cf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cf4:	781b      	ldrb	r3, [r3, #0]
    7cf6:	4413      	add	r3, r2
    7cf8:	b2da      	uxtb	r2, r3
    7cfa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7cfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d02:	701a      	strb	r2, [r3, #0]
    7d04:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d0c:	781b      	ldrb	r3, [r3, #0]
    7d0e:	3301      	adds	r3, #1
    7d10:	b2da      	uxtb	r2, r3
    7d12:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d1a:	701a      	strb	r2, [r3, #0]
    7d1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d24:	781b      	ldrb	r3, [r3, #0]
    7d26:	2bff      	cmp	r3, #255	; 0xff
    7d28:	d105      	bne.n	7d36 <send_boot+0x84a>
    7d2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d32:	2200      	movs	r2, #0
    7d34:	701a      	strb	r2, [r3, #0]
    7d36:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d3e:	781b      	ldrb	r3, [r3, #0]
    7d40:	461a      	mov	r2, r3
    7d42:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d4a:	7899      	ldrb	r1, [r3, #2]
    7d4c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d54:	5499      	strb	r1, [r3, r2]
    7d56:	4b20      	ldr	r3, [pc, #128]	; (7dd8 <send_boot+0x8ec>)
    7d58:	781a      	ldrb	r2, [r3, #0]
    7d5a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d62:	781b      	ldrb	r3, [r3, #0]
    7d64:	4413      	add	r3, r2
    7d66:	b2da      	uxtb	r2, r3
    7d68:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d70:	701a      	strb	r2, [r3, #0]
    7d72:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7d76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d7a:	781a      	ldrb	r2, [r3, #0]
    7d7c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d84:	781b      	ldrb	r3, [r3, #0]
    7d86:	4413      	add	r3, r2
    7d88:	b2da      	uxtb	r2, r3
    7d8a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7d8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d92:	701a      	strb	r2, [r3, #0]
    7d94:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d9c:	781b      	ldrb	r3, [r3, #0]
    7d9e:	3301      	adds	r3, #1
    7da0:	b2da      	uxtb	r2, r3
    7da2:	f24c 5349 	movw	r3, #50505	; 0xc549
    7da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7daa:	701a      	strb	r2, [r3, #0]
    7dac:	f24c 5349 	movw	r3, #50505	; 0xc549
    7db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7db4:	781b      	ldrb	r3, [r3, #0]
    7db6:	2bff      	cmp	r3, #255	; 0xff
    7db8:	d110      	bne.n	7ddc <send_boot+0x8f0>
    7dba:	f24c 5349 	movw	r3, #50505	; 0xc549
    7dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dc2:	2200      	movs	r2, #0
    7dc4:	701a      	strb	r2, [r3, #0]
    7dc6:	e009      	b.n	7ddc <send_boot+0x8f0>
    7dc8:	2004cb41 	.word	0x2004cb41
    7dcc:	2004cb42 	.word	0x2004cb42
    7dd0:	2004cb43 	.word	0x2004cb43
    7dd4:	2004cb45 	.word	0x2004cb45
    7dd8:	2004cb46 	.word	0x2004cb46
    7ddc:	f24c 5349 	movw	r3, #50505	; 0xc549
    7de0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7de4:	781b      	ldrb	r3, [r3, #0]
    7de6:	461a      	mov	r2, r3
    7de8:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7df0:	78d9      	ldrb	r1, [r3, #3]
    7df2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dfa:	5499      	strb	r1, [r3, r2]
    7dfc:	4bd3      	ldr	r3, [pc, #844]	; (814c <send_boot+0xc60>)
    7dfe:	781a      	ldrb	r2, [r3, #0]
    7e00:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e08:	781b      	ldrb	r3, [r3, #0]
    7e0a:	4413      	add	r3, r2
    7e0c:	b2da      	uxtb	r2, r3
    7e0e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e16:	701a      	strb	r2, [r3, #0]
    7e18:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7e1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e20:	781a      	ldrb	r2, [r3, #0]
    7e22:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e2a:	781b      	ldrb	r3, [r3, #0]
    7e2c:	4413      	add	r3, r2
    7e2e:	b2da      	uxtb	r2, r3
    7e30:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7e34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e38:	701a      	strb	r2, [r3, #0]
    7e3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e42:	781b      	ldrb	r3, [r3, #0]
    7e44:	3301      	adds	r3, #1
    7e46:	b2da      	uxtb	r2, r3
    7e48:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e50:	701a      	strb	r2, [r3, #0]
    7e52:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e5a:	781b      	ldrb	r3, [r3, #0]
    7e5c:	2bff      	cmp	r3, #255	; 0xff
    7e5e:	d105      	bne.n	7e6c <send_boot+0x980>
    7e60:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e68:	2200      	movs	r2, #0
    7e6a:	701a      	strb	r2, [r3, #0]
    7e6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e74:	781b      	ldrb	r3, [r3, #0]
    7e76:	461a      	mov	r2, r3
    7e78:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e80:	7819      	ldrb	r1, [r3, #0]
    7e82:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e8a:	5499      	strb	r1, [r3, r2]
    7e8c:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e94:	781a      	ldrb	r2, [r3, #0]
    7e96:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e9e:	781b      	ldrb	r3, [r3, #0]
    7ea0:	4413      	add	r3, r2
    7ea2:	b2da      	uxtb	r2, r3
    7ea4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eac:	701a      	strb	r2, [r3, #0]
    7eae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7eb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eb6:	781a      	ldrb	r2, [r3, #0]
    7eb8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ec0:	781b      	ldrb	r3, [r3, #0]
    7ec2:	4413      	add	r3, r2
    7ec4:	b2da      	uxtb	r2, r3
    7ec6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7eca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ece:	701a      	strb	r2, [r3, #0]
    7ed0:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ed8:	781b      	ldrb	r3, [r3, #0]
    7eda:	3301      	adds	r3, #1
    7edc:	b2da      	uxtb	r2, r3
    7ede:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ee6:	701a      	strb	r2, [r3, #0]
    7ee8:	f24c 5349 	movw	r3, #50505	; 0xc549
    7eec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ef0:	781b      	ldrb	r3, [r3, #0]
    7ef2:	2bff      	cmp	r3, #255	; 0xff
    7ef4:	d105      	bne.n	7f02 <send_boot+0xa16>
    7ef6:	f24c 5349 	movw	r3, #50505	; 0xc549
    7efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7efe:	2200      	movs	r2, #0
    7f00:	701a      	strb	r2, [r3, #0]
    7f02:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f0a:	781b      	ldrb	r3, [r3, #0]
    7f0c:	461a      	mov	r2, r3
    7f0e:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7f12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f16:	7859      	ldrb	r1, [r3, #1]
    7f18:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7f1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f20:	5499      	strb	r1, [r3, r2]
    7f22:	4b8b      	ldr	r3, [pc, #556]	; (8150 <send_boot+0xc64>)
    7f24:	781a      	ldrb	r2, [r3, #0]
    7f26:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f2e:	781b      	ldrb	r3, [r3, #0]
    7f30:	4413      	add	r3, r2
    7f32:	b2da      	uxtb	r2, r3
    7f34:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f3c:	701a      	strb	r2, [r3, #0]
    7f3e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f46:	781a      	ldrb	r2, [r3, #0]
    7f48:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f50:	781b      	ldrb	r3, [r3, #0]
    7f52:	4413      	add	r3, r2
    7f54:	b2da      	uxtb	r2, r3
    7f56:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7f5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f5e:	701a      	strb	r2, [r3, #0]
    7f60:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f68:	781b      	ldrb	r3, [r3, #0]
    7f6a:	3301      	adds	r3, #1
    7f6c:	b2da      	uxtb	r2, r3
    7f6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f76:	701a      	strb	r2, [r3, #0]
    7f78:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f80:	781b      	ldrb	r3, [r3, #0]
    7f82:	2bff      	cmp	r3, #255	; 0xff
    7f84:	d105      	bne.n	7f92 <send_boot+0xaa6>
    7f86:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f8e:	2200      	movs	r2, #0
    7f90:	701a      	strb	r2, [r3, #0]
    7f92:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f9a:	781b      	ldrb	r3, [r3, #0]
    7f9c:	461a      	mov	r2, r3
    7f9e:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fa6:	7899      	ldrb	r1, [r3, #2]
    7fa8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7fac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fb0:	5499      	strb	r1, [r3, r2]
    7fb2:	4b68      	ldr	r3, [pc, #416]	; (8154 <send_boot+0xc68>)
    7fb4:	781a      	ldrb	r2, [r3, #0]
    7fb6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fbe:	781b      	ldrb	r3, [r3, #0]
    7fc0:	4413      	add	r3, r2
    7fc2:	b2da      	uxtb	r2, r3
    7fc4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fcc:	701a      	strb	r2, [r3, #0]
    7fce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fd6:	781a      	ldrb	r2, [r3, #0]
    7fd8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7fdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fe0:	781b      	ldrb	r3, [r3, #0]
    7fe2:	4413      	add	r3, r2
    7fe4:	b2da      	uxtb	r2, r3
    7fe6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fee:	701a      	strb	r2, [r3, #0]
    7ff0:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ff8:	781b      	ldrb	r3, [r3, #0]
    7ffa:	3301      	adds	r3, #1
    7ffc:	b2da      	uxtb	r2, r3
    7ffe:	f24c 5349 	movw	r3, #50505	; 0xc549
    8002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8006:	701a      	strb	r2, [r3, #0]
    8008:	f24c 5349 	movw	r3, #50505	; 0xc549
    800c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8010:	781b      	ldrb	r3, [r3, #0]
    8012:	2bff      	cmp	r3, #255	; 0xff
    8014:	d105      	bne.n	8022 <send_boot+0xb36>
    8016:	f24c 5349 	movw	r3, #50505	; 0xc549
    801a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    801e:	2200      	movs	r2, #0
    8020:	701a      	strb	r2, [r3, #0]
    8022:	f24c 5349 	movw	r3, #50505	; 0xc549
    8026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    802a:	781b      	ldrb	r3, [r3, #0]
    802c:	461a      	mov	r2, r3
    802e:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    8032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8036:	78d9      	ldrb	r1, [r3, #3]
    8038:	f24c 534c 	movw	r3, #50508	; 0xc54c
    803c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8040:	5499      	strb	r1, [r3, r2]
    8042:	4b45      	ldr	r3, [pc, #276]	; (8158 <send_boot+0xc6c>)
    8044:	781a      	ldrb	r2, [r3, #0]
    8046:	f24c 634d 	movw	r3, #50765	; 0xc64d
    804a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    804e:	781b      	ldrb	r3, [r3, #0]
    8050:	4413      	add	r3, r2
    8052:	b2da      	uxtb	r2, r3
    8054:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    805c:	701a      	strb	r2, [r3, #0]
    805e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8066:	781a      	ldrb	r2, [r3, #0]
    8068:	f24c 634d 	movw	r3, #50765	; 0xc64d
    806c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8070:	781b      	ldrb	r3, [r3, #0]
    8072:	4413      	add	r3, r2
    8074:	b2da      	uxtb	r2, r3
    8076:	f24c 634e 	movw	r3, #50766	; 0xc64e
    807a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    807e:	701a      	strb	r2, [r3, #0]
    8080:	f24c 5349 	movw	r3, #50505	; 0xc549
    8084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8088:	781b      	ldrb	r3, [r3, #0]
    808a:	3301      	adds	r3, #1
    808c:	b2da      	uxtb	r2, r3
    808e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8096:	701a      	strb	r2, [r3, #0]
    8098:	f24c 5349 	movw	r3, #50505	; 0xc549
    809c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80a0:	781b      	ldrb	r3, [r3, #0]
    80a2:	2bff      	cmp	r3, #255	; 0xff
    80a4:	d105      	bne.n	80b2 <send_boot+0xbc6>
    80a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    80aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ae:	2200      	movs	r2, #0
    80b0:	701a      	strb	r2, [r3, #0]
    80b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    80b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ba:	781b      	ldrb	r3, [r3, #0]
    80bc:	461a      	mov	r2, r3
    80be:	f240 5342 	movw	r3, #1346	; 0x542
    80c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80c6:	7819      	ldrb	r1, [r3, #0]
    80c8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    80cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80d0:	5499      	strb	r1, [r3, r2]
    80d2:	f240 5342 	movw	r3, #1346	; 0x542
    80d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80da:	781a      	ldrb	r2, [r3, #0]
    80dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    80e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80e4:	781b      	ldrb	r3, [r3, #0]
    80e6:	4413      	add	r3, r2
    80e8:	b2da      	uxtb	r2, r3
    80ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    80ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80f2:	701a      	strb	r2, [r3, #0]
    80f4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    80f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80fc:	781a      	ldrb	r2, [r3, #0]
    80fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8106:	781b      	ldrb	r3, [r3, #0]
    8108:	4413      	add	r3, r2
    810a:	b2da      	uxtb	r2, r3
    810c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8114:	701a      	strb	r2, [r3, #0]
    8116:	f24c 5349 	movw	r3, #50505	; 0xc549
    811a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    811e:	781b      	ldrb	r3, [r3, #0]
    8120:	3301      	adds	r3, #1
    8122:	b2da      	uxtb	r2, r3
    8124:	f24c 5349 	movw	r3, #50505	; 0xc549
    8128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    812c:	701a      	strb	r2, [r3, #0]
    812e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8136:	781b      	ldrb	r3, [r3, #0]
    8138:	2bff      	cmp	r3, #255	; 0xff
    813a:	d10f      	bne.n	815c <send_boot+0xc70>
    813c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8144:	2200      	movs	r2, #0
    8146:	701a      	strb	r2, [r3, #0]
    8148:	e008      	b.n	815c <send_boot+0xc70>
    814a:	bf00      	nop
    814c:	2004cb47 	.word	0x2004cb47
    8150:	2004cb3d 	.word	0x2004cb3d
    8154:	2004cb3e 	.word	0x2004cb3e
    8158:	2004cb3f 	.word	0x2004cb3f
    815c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8164:	781b      	ldrb	r3, [r3, #0]
    8166:	461a      	mov	r2, r3
    8168:	f240 5342 	movw	r3, #1346	; 0x542
    816c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8170:	7859      	ldrb	r1, [r3, #1]
    8172:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8176:	f2c2 0304 	movt	r3, #8196	; 0x2004
    817a:	5499      	strb	r1, [r3, r2]
    817c:	4bc5      	ldr	r3, [pc, #788]	; (8494 <send_boot+0xfa8>)
    817e:	781a      	ldrb	r2, [r3, #0]
    8180:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8188:	781b      	ldrb	r3, [r3, #0]
    818a:	4413      	add	r3, r2
    818c:	b2da      	uxtb	r2, r3
    818e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8196:	701a      	strb	r2, [r3, #0]
    8198:	f24c 634e 	movw	r3, #50766	; 0xc64e
    819c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81a0:	781a      	ldrb	r2, [r3, #0]
    81a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    81a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81aa:	781b      	ldrb	r3, [r3, #0]
    81ac:	4413      	add	r3, r2
    81ae:	b2da      	uxtb	r2, r3
    81b0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    81b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81b8:	701a      	strb	r2, [r3, #0]
    81ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    81be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81c2:	781b      	ldrb	r3, [r3, #0]
    81c4:	3301      	adds	r3, #1
    81c6:	b2da      	uxtb	r2, r3
    81c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    81cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81d0:	701a      	strb	r2, [r3, #0]
    81d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    81d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81da:	781b      	ldrb	r3, [r3, #0]
    81dc:	2bff      	cmp	r3, #255	; 0xff
    81de:	d105      	bne.n	81ec <send_boot+0xd00>
    81e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    81e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81e8:	2200      	movs	r2, #0
    81ea:	701a      	strb	r2, [r3, #0]
    81ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    81f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81f4:	781b      	ldrb	r3, [r3, #0]
    81f6:	461a      	mov	r2, r3
    81f8:	f240 5344 	movw	r3, #1348	; 0x544
    81fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8200:	7819      	ldrb	r1, [r3, #0]
    8202:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    820a:	5499      	strb	r1, [r3, r2]
    820c:	f240 5344 	movw	r3, #1348	; 0x544
    8210:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8214:	781a      	ldrb	r2, [r3, #0]
    8216:	f24c 634d 	movw	r3, #50765	; 0xc64d
    821a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    821e:	781b      	ldrb	r3, [r3, #0]
    8220:	4413      	add	r3, r2
    8222:	b2da      	uxtb	r2, r3
    8224:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    822c:	701a      	strb	r2, [r3, #0]
    822e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8236:	781a      	ldrb	r2, [r3, #0]
    8238:	f24c 634d 	movw	r3, #50765	; 0xc64d
    823c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8240:	781b      	ldrb	r3, [r3, #0]
    8242:	4413      	add	r3, r2
    8244:	b2da      	uxtb	r2, r3
    8246:	f24c 634e 	movw	r3, #50766	; 0xc64e
    824a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    824e:	701a      	strb	r2, [r3, #0]
    8250:	f24c 5349 	movw	r3, #50505	; 0xc549
    8254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8258:	781b      	ldrb	r3, [r3, #0]
    825a:	3301      	adds	r3, #1
    825c:	b2da      	uxtb	r2, r3
    825e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8266:	701a      	strb	r2, [r3, #0]
    8268:	f24c 5349 	movw	r3, #50505	; 0xc549
    826c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8270:	781b      	ldrb	r3, [r3, #0]
    8272:	2bff      	cmp	r3, #255	; 0xff
    8274:	d105      	bne.n	8282 <send_boot+0xd96>
    8276:	f24c 5349 	movw	r3, #50505	; 0xc549
    827a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    827e:	2200      	movs	r2, #0
    8280:	701a      	strb	r2, [r3, #0]
    8282:	f24c 5349 	movw	r3, #50505	; 0xc549
    8286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    828a:	781b      	ldrb	r3, [r3, #0]
    828c:	461a      	mov	r2, r3
    828e:	f240 5344 	movw	r3, #1348	; 0x544
    8292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8296:	7859      	ldrb	r1, [r3, #1]
    8298:	f24c 534c 	movw	r3, #50508	; 0xc54c
    829c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82a0:	5499      	strb	r1, [r3, r2]
    82a2:	4b7d      	ldr	r3, [pc, #500]	; (8498 <send_boot+0xfac>)
    82a4:	781a      	ldrb	r2, [r3, #0]
    82a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    82aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ae:	781b      	ldrb	r3, [r3, #0]
    82b0:	4413      	add	r3, r2
    82b2:	b2da      	uxtb	r2, r3
    82b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    82b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82bc:	701a      	strb	r2, [r3, #0]
    82be:	f24c 634e 	movw	r3, #50766	; 0xc64e
    82c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82c6:	781a      	ldrb	r2, [r3, #0]
    82c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    82cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82d0:	781b      	ldrb	r3, [r3, #0]
    82d2:	4413      	add	r3, r2
    82d4:	b2da      	uxtb	r2, r3
    82d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    82da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82de:	701a      	strb	r2, [r3, #0]
    82e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    82e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82e8:	781b      	ldrb	r3, [r3, #0]
    82ea:	3301      	adds	r3, #1
    82ec:	b2da      	uxtb	r2, r3
    82ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    82f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82f6:	701a      	strb	r2, [r3, #0]
    82f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    82fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8300:	781b      	ldrb	r3, [r3, #0]
    8302:	2bff      	cmp	r3, #255	; 0xff
    8304:	d105      	bne.n	8312 <send_boot+0xe26>
    8306:	f24c 5349 	movw	r3, #50505	; 0xc549
    830a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    830e:	2200      	movs	r2, #0
    8310:	701a      	strb	r2, [r3, #0]
    8312:	f24c 5349 	movw	r3, #50505	; 0xc549
    8316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    831a:	781b      	ldrb	r3, [r3, #0]
    831c:	461a      	mov	r2, r3
    831e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8326:	7819      	ldrb	r1, [r3, #0]
    8328:	f24c 534c 	movw	r3, #50508	; 0xc54c
    832c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8330:	5499      	strb	r1, [r3, r2]
    8332:	f24c 5349 	movw	r3, #50505	; 0xc549
    8336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    833a:	781b      	ldrb	r3, [r3, #0]
    833c:	3301      	adds	r3, #1
    833e:	b2da      	uxtb	r2, r3
    8340:	f24c 5349 	movw	r3, #50505	; 0xc549
    8344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8348:	701a      	strb	r2, [r3, #0]
    834a:	f24c 5349 	movw	r3, #50505	; 0xc549
    834e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8352:	781b      	ldrb	r3, [r3, #0]
    8354:	2bff      	cmp	r3, #255	; 0xff
    8356:	d105      	bne.n	8364 <send_boot+0xe78>
    8358:	f24c 5349 	movw	r3, #50505	; 0xc549
    835c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8360:	2200      	movs	r2, #0
    8362:	701a      	strb	r2, [r3, #0]
    8364:	f24c 5349 	movw	r3, #50505	; 0xc549
    8368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    836c:	781b      	ldrb	r3, [r3, #0]
    836e:	461a      	mov	r2, r3
    8370:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8378:	7819      	ldrb	r1, [r3, #0]
    837a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    837e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8382:	5499      	strb	r1, [r3, r2]
    8384:	f24c 5349 	movw	r3, #50505	; 0xc549
    8388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    838c:	781b      	ldrb	r3, [r3, #0]
    838e:	3301      	adds	r3, #1
    8390:	b2da      	uxtb	r2, r3
    8392:	f24c 5349 	movw	r3, #50505	; 0xc549
    8396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    839a:	701a      	strb	r2, [r3, #0]
    839c:	f24c 5349 	movw	r3, #50505	; 0xc549
    83a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83a4:	781b      	ldrb	r3, [r3, #0]
    83a6:	2bff      	cmp	r3, #255	; 0xff
    83a8:	d105      	bne.n	83b6 <send_boot+0xeca>
    83aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    83ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83b2:	2200      	movs	r2, #0
    83b4:	701a      	strb	r2, [r3, #0]
    83b6:	f242 0339 	movw	r3, #8249	; 0x2039
    83ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83be:	781b      	ldrb	r3, [r3, #0]
    83c0:	b2db      	uxtb	r3, r3
    83c2:	f003 0310 	and.w	r3, r3, #16
    83c6:	2b00      	cmp	r3, #0
    83c8:	d15a      	bne.n	8480 <send_boot+0xf94>
    83ca:	f24c 534a 	movw	r3, #50506	; 0xc54a
    83ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	b2db      	uxtb	r3, r3
    83d6:	461a      	mov	r2, r3
    83d8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    83dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83e0:	5c9a      	ldrb	r2, [r3, r2]
    83e2:	f24c 634b 	movw	r3, #50763	; 0xc64b
    83e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ea:	701a      	strb	r2, [r3, #0]
    83ec:	f24c 634c 	movw	r3, #50764	; 0xc64c
    83f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83f4:	2200      	movs	r2, #0
    83f6:	701a      	strb	r2, [r3, #0]
    83f8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    83fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8400:	781b      	ldrb	r3, [r3, #0]
    8402:	b2db      	uxtb	r3, r3
    8404:	3301      	adds	r3, #1
    8406:	b2da      	uxtb	r2, r3
    8408:	f24c 534a 	movw	r3, #50506	; 0xc54a
    840c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8410:	701a      	strb	r2, [r3, #0]
    8412:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    841a:	781b      	ldrb	r3, [r3, #0]
    841c:	b2db      	uxtb	r3, r3
    841e:	2bff      	cmp	r3, #255	; 0xff
    8420:	d105      	bne.n	842e <send_boot+0xf42>
    8422:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    842a:	2200      	movs	r2, #0
    842c:	701a      	strb	r2, [r3, #0]
    842e:	f242 0338 	movw	r3, #8248	; 0x2038
    8432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8436:	f242 0238 	movw	r2, #8248	; 0x2038
    843a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    843e:	7812      	ldrb	r2, [r2, #0]
    8440:	b2d2      	uxtb	r2, r2
    8442:	f042 0201 	orr.w	r2, r2, #1
    8446:	b2d2      	uxtb	r2, r2
    8448:	701a      	strb	r2, [r3, #0]
    844a:	f242 0339 	movw	r3, #8249	; 0x2039
    844e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8452:	f242 0239 	movw	r2, #8249	; 0x2039
    8456:	f2c2 0200 	movt	r2, #8192	; 0x2000
    845a:	7812      	ldrb	r2, [r2, #0]
    845c:	b2d2      	uxtb	r2, r2
    845e:	f042 0210 	orr.w	r2, r2, #16
    8462:	b2d2      	uxtb	r2, r2
    8464:	701a      	strb	r2, [r3, #0]
    8466:	e00b      	b.n	8480 <send_boot+0xf94>
    8468:	f24c 5348 	movw	r3, #50504	; 0xc548
    846c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8470:	781b      	ldrb	r3, [r3, #0]
    8472:	3301      	adds	r3, #1
    8474:	b2da      	uxtb	r2, r3
    8476:	f24c 5348 	movw	r3, #50504	; 0xc548
    847a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    847e:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    8480:	f240 533d 	movw	r3, #1341	; 0x53d
    8484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8488:	2200      	movs	r2, #0
    848a:	701a      	strb	r2, [r3, #0]
  }
}
    848c:	46bd      	mov	sp, r7
    848e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8492:	4770      	bx	lr
    8494:	20000543 	.word	0x20000543
    8498:	20000545 	.word	0x20000545

0000849c <send_attitude>:
void send_attitude(void){ //499ms
    849c:	b480      	push	{r7}
    849e:	af00      	add	r7, sp, #0
    // add by wanbo
  if(!boot)
    84a0:	f240 533d 	movw	r3, #1341	; 0x53d
    84a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84a8:	781b      	ldrb	r3, [r3, #0]
    84aa:	2b00      	cmp	r3, #0
    84ac:	f040 84ee 	bne.w	8e8c <send_attitude+0x9f0>
  {
    count++;
    84b0:	f24c 5341 	movw	r3, #50497	; 0xc541
    84b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84b8:	781b      	ldrb	r3, [r3, #0]
    84ba:	3301      	adds	r3, #1
    84bc:	b2da      	uxtb	r2, r3
    84be:	f24c 5341 	movw	r3, #50497	; 0xc541
    84c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84c6:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    84c8:	f24c 5341 	movw	r3, #50497	; 0xc541
    84cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84d0:	781b      	ldrb	r3, [r3, #0]
    84d2:	2bfa      	cmp	r3, #250	; 0xfa
    84d4:	d105      	bne.n	84e2 <send_attitude+0x46>
    84d6:	f24c 5341 	movw	r3, #50497	; 0xc541
    84da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84de:	2200      	movs	r2, #0
    84e0:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    84e2:	f24c 5341 	movw	r3, #50497	; 0xc541
    84e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84ea:	781a      	ldrb	r2, [r3, #0]
    84ec:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    84f0:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    84f4:	fba3 1302 	umull	r1, r3, r3, r2
    84f8:	0899      	lsrs	r1, r3, #2
    84fa:	460b      	mov	r3, r1
    84fc:	009b      	lsls	r3, r3, #2
    84fe:	440b      	add	r3, r1
    8500:	1ad3      	subs	r3, r2, r3
    8502:	b2db      	uxtb	r3, r3
    8504:	2b00      	cmp	r3, #0
    8506:	f040 84c1 	bne.w	8e8c <send_attitude+0x9f0>
       PERIODIC_SEND_ATTITUDE(); 
    850a:	f24c 5349 	movw	r3, #50505	; 0xc549
    850e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8512:	781a      	ldrb	r2, [r3, #0]
    8514:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    851c:	781b      	ldrb	r3, [r3, #0]
    851e:	b2db      	uxtb	r3, r3
    8520:	429a      	cmp	r2, r3
    8522:	d313      	bcc.n	854c <send_attitude+0xb0>
    8524:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    852c:	781b      	ldrb	r3, [r3, #0]
    852e:	b2db      	uxtb	r3, r3
    8530:	461a      	mov	r2, r3
    8532:	f24c 5349 	movw	r3, #50505	; 0xc549
    8536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    853a:	781b      	ldrb	r3, [r3, #0]
    853c:	1ad3      	subs	r3, r2, r3
    853e:	33ff      	adds	r3, #255	; 0xff
    8540:	2b10      	cmp	r3, #16
    8542:	bfd4      	ite	le
    8544:	2300      	movle	r3, #0
    8546:	2301      	movgt	r3, #1
    8548:	b2db      	uxtb	r3, r3
    854a:	e011      	b.n	8570 <send_attitude+0xd4>
    854c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8554:	781b      	ldrb	r3, [r3, #0]
    8556:	b2db      	uxtb	r3, r3
    8558:	461a      	mov	r2, r3
    855a:	f24c 5349 	movw	r3, #50505	; 0xc549
    855e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8562:	781b      	ldrb	r3, [r3, #0]
    8564:	1ad3      	subs	r3, r2, r3
    8566:	2b10      	cmp	r3, #16
    8568:	bfd4      	ite	le
    856a:	2300      	movle	r3, #0
    856c:	2301      	movgt	r3, #1
    856e:	b2db      	uxtb	r3, r3
    8570:	2b00      	cmp	r3, #0
    8572:	f000 847f 	beq.w	8e74 <send_attitude+0x9d8>
    8576:	f24c 5349 	movw	r3, #50505	; 0xc549
    857a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    857e:	781b      	ldrb	r3, [r3, #0]
    8580:	461a      	mov	r2, r3
    8582:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    858a:	2105      	movs	r1, #5
    858c:	5499      	strb	r1, [r3, r2]
    858e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8596:	781b      	ldrb	r3, [r3, #0]
    8598:	3301      	adds	r3, #1
    859a:	b2da      	uxtb	r2, r3
    859c:	f24c 5349 	movw	r3, #50505	; 0xc549
    85a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85a4:	701a      	strb	r2, [r3, #0]
    85a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    85aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ae:	781b      	ldrb	r3, [r3, #0]
    85b0:	2bff      	cmp	r3, #255	; 0xff
    85b2:	d105      	bne.n	85c0 <send_attitude+0x124>
    85b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    85b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85bc:	2200      	movs	r2, #0
    85be:	701a      	strb	r2, [r3, #0]
    85c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    85c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85c8:	781b      	ldrb	r3, [r3, #0]
    85ca:	461a      	mov	r2, r3
    85cc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    85d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85d4:	2106      	movs	r1, #6
    85d6:	5499      	strb	r1, [r3, r2]
    85d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    85dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85e0:	781b      	ldrb	r3, [r3, #0]
    85e2:	3301      	adds	r3, #1
    85e4:	b2da      	uxtb	r2, r3
    85e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    85ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ee:	701a      	strb	r2, [r3, #0]
    85f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    85f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85f8:	781b      	ldrb	r3, [r3, #0]
    85fa:	2bff      	cmp	r3, #255	; 0xff
    85fc:	d105      	bne.n	860a <send_attitude+0x16e>
    85fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    8602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8606:	2200      	movs	r2, #0
    8608:	701a      	strb	r2, [r3, #0]
    860a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    860e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8612:	2206      	movs	r2, #6
    8614:	701a      	strb	r2, [r3, #0]
    8616:	f24c 634e 	movw	r3, #50766	; 0xc64e
    861a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    861e:	2206      	movs	r2, #6
    8620:	701a      	strb	r2, [r3, #0]
    8622:	f24c 5349 	movw	r3, #50505	; 0xc549
    8626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    862a:	781b      	ldrb	r3, [r3, #0]
    862c:	461a      	mov	r2, r3
    862e:	f64c 3308 	movw	r3, #51976	; 0xcb08
    8632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8636:	7819      	ldrb	r1, [r3, #0]
    8638:	f24c 534c 	movw	r3, #50508	; 0xc54c
    863c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8640:	5499      	strb	r1, [r3, r2]
    8642:	f64c 3308 	movw	r3, #51976	; 0xcb08
    8646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    864a:	781a      	ldrb	r2, [r3, #0]
    864c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8654:	781b      	ldrb	r3, [r3, #0]
    8656:	4413      	add	r3, r2
    8658:	b2da      	uxtb	r2, r3
    865a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    865e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8662:	701a      	strb	r2, [r3, #0]
    8664:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    866c:	781a      	ldrb	r2, [r3, #0]
    866e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8676:	781b      	ldrb	r3, [r3, #0]
    8678:	4413      	add	r3, r2
    867a:	b2da      	uxtb	r2, r3
    867c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8684:	701a      	strb	r2, [r3, #0]
    8686:	f24c 5349 	movw	r3, #50505	; 0xc549
    868a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    868e:	781b      	ldrb	r3, [r3, #0]
    8690:	3301      	adds	r3, #1
    8692:	b2da      	uxtb	r2, r3
    8694:	f24c 5349 	movw	r3, #50505	; 0xc549
    8698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    869c:	701a      	strb	r2, [r3, #0]
    869e:	f24c 5349 	movw	r3, #50505	; 0xc549
    86a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86a6:	781b      	ldrb	r3, [r3, #0]
    86a8:	2bff      	cmp	r3, #255	; 0xff
    86aa:	d105      	bne.n	86b8 <send_attitude+0x21c>
    86ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    86b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86b4:	2200      	movs	r2, #0
    86b6:	701a      	strb	r2, [r3, #0]
    86b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    86bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86c0:	781b      	ldrb	r3, [r3, #0]
    86c2:	461a      	mov	r2, r3
    86c4:	f64c 3308 	movw	r3, #51976	; 0xcb08
    86c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86cc:	7859      	ldrb	r1, [r3, #1]
    86ce:	f24c 534c 	movw	r3, #50508	; 0xc54c
    86d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86d6:	5499      	strb	r1, [r3, r2]
    86d8:	4bd1      	ldr	r3, [pc, #836]	; (8a20 <send_attitude+0x584>)
    86da:	781a      	ldrb	r2, [r3, #0]
    86dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    86e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86e4:	781b      	ldrb	r3, [r3, #0]
    86e6:	4413      	add	r3, r2
    86e8:	b2da      	uxtb	r2, r3
    86ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    86ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86f2:	701a      	strb	r2, [r3, #0]
    86f4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    86f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86fc:	781a      	ldrb	r2, [r3, #0]
    86fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8706:	781b      	ldrb	r3, [r3, #0]
    8708:	4413      	add	r3, r2
    870a:	b2da      	uxtb	r2, r3
    870c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8714:	701a      	strb	r2, [r3, #0]
    8716:	f24c 5349 	movw	r3, #50505	; 0xc549
    871a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    871e:	781b      	ldrb	r3, [r3, #0]
    8720:	3301      	adds	r3, #1
    8722:	b2da      	uxtb	r2, r3
    8724:	f24c 5349 	movw	r3, #50505	; 0xc549
    8728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    872c:	701a      	strb	r2, [r3, #0]
    872e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8736:	781b      	ldrb	r3, [r3, #0]
    8738:	2bff      	cmp	r3, #255	; 0xff
    873a:	d105      	bne.n	8748 <send_attitude+0x2ac>
    873c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8744:	2200      	movs	r2, #0
    8746:	701a      	strb	r2, [r3, #0]
    8748:	f24c 5349 	movw	r3, #50505	; 0xc549
    874c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8750:	781b      	ldrb	r3, [r3, #0]
    8752:	461a      	mov	r2, r3
    8754:	f64c 3308 	movw	r3, #51976	; 0xcb08
    8758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    875c:	7899      	ldrb	r1, [r3, #2]
    875e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8766:	5499      	strb	r1, [r3, r2]
    8768:	4bae      	ldr	r3, [pc, #696]	; (8a24 <send_attitude+0x588>)
    876a:	781a      	ldrb	r2, [r3, #0]
    876c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8774:	781b      	ldrb	r3, [r3, #0]
    8776:	4413      	add	r3, r2
    8778:	b2da      	uxtb	r2, r3
    877a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    877e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8782:	701a      	strb	r2, [r3, #0]
    8784:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    878c:	781a      	ldrb	r2, [r3, #0]
    878e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8796:	781b      	ldrb	r3, [r3, #0]
    8798:	4413      	add	r3, r2
    879a:	b2da      	uxtb	r2, r3
    879c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    87a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87a4:	701a      	strb	r2, [r3, #0]
    87a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    87aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ae:	781b      	ldrb	r3, [r3, #0]
    87b0:	3301      	adds	r3, #1
    87b2:	b2da      	uxtb	r2, r3
    87b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    87b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87bc:	701a      	strb	r2, [r3, #0]
    87be:	f24c 5349 	movw	r3, #50505	; 0xc549
    87c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87c6:	781b      	ldrb	r3, [r3, #0]
    87c8:	2bff      	cmp	r3, #255	; 0xff
    87ca:	d105      	bne.n	87d8 <send_attitude+0x33c>
    87cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    87d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87d4:	2200      	movs	r2, #0
    87d6:	701a      	strb	r2, [r3, #0]
    87d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    87dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87e0:	781b      	ldrb	r3, [r3, #0]
    87e2:	461a      	mov	r2, r3
    87e4:	f64c 3308 	movw	r3, #51976	; 0xcb08
    87e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ec:	78d9      	ldrb	r1, [r3, #3]
    87ee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    87f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87f6:	5499      	strb	r1, [r3, r2]
    87f8:	4b8b      	ldr	r3, [pc, #556]	; (8a28 <send_attitude+0x58c>)
    87fa:	781a      	ldrb	r2, [r3, #0]
    87fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8804:	781b      	ldrb	r3, [r3, #0]
    8806:	4413      	add	r3, r2
    8808:	b2da      	uxtb	r2, r3
    880a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    880e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8812:	701a      	strb	r2, [r3, #0]
    8814:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    881c:	781a      	ldrb	r2, [r3, #0]
    881e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8826:	781b      	ldrb	r3, [r3, #0]
    8828:	4413      	add	r3, r2
    882a:	b2da      	uxtb	r2, r3
    882c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8834:	701a      	strb	r2, [r3, #0]
    8836:	f24c 5349 	movw	r3, #50505	; 0xc549
    883a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    883e:	781b      	ldrb	r3, [r3, #0]
    8840:	3301      	adds	r3, #1
    8842:	b2da      	uxtb	r2, r3
    8844:	f24c 5349 	movw	r3, #50505	; 0xc549
    8848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    884c:	701a      	strb	r2, [r3, #0]
    884e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8856:	781b      	ldrb	r3, [r3, #0]
    8858:	2bff      	cmp	r3, #255	; 0xff
    885a:	d105      	bne.n	8868 <send_attitude+0x3cc>
    885c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8864:	2200      	movs	r2, #0
    8866:	701a      	strb	r2, [r3, #0]
    8868:	f24c 5349 	movw	r3, #50505	; 0xc549
    886c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8870:	781b      	ldrb	r3, [r3, #0]
    8872:	461a      	mov	r2, r3
    8874:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    8878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    887c:	7819      	ldrb	r1, [r3, #0]
    887e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8886:	5499      	strb	r1, [r3, r2]
    8888:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    888c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8890:	781a      	ldrb	r2, [r3, #0]
    8892:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    889a:	781b      	ldrb	r3, [r3, #0]
    889c:	4413      	add	r3, r2
    889e:	b2da      	uxtb	r2, r3
    88a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    88a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88a8:	701a      	strb	r2, [r3, #0]
    88aa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    88ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88b2:	781a      	ldrb	r2, [r3, #0]
    88b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    88b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88bc:	781b      	ldrb	r3, [r3, #0]
    88be:	4413      	add	r3, r2
    88c0:	b2da      	uxtb	r2, r3
    88c2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    88c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ca:	701a      	strb	r2, [r3, #0]
    88cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    88d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88d4:	781b      	ldrb	r3, [r3, #0]
    88d6:	3301      	adds	r3, #1
    88d8:	b2da      	uxtb	r2, r3
    88da:	f24c 5349 	movw	r3, #50505	; 0xc549
    88de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88e2:	701a      	strb	r2, [r3, #0]
    88e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    88e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ec:	781b      	ldrb	r3, [r3, #0]
    88ee:	2bff      	cmp	r3, #255	; 0xff
    88f0:	d105      	bne.n	88fe <send_attitude+0x462>
    88f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    88f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88fa:	2200      	movs	r2, #0
    88fc:	701a      	strb	r2, [r3, #0]
    88fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    8902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8906:	781b      	ldrb	r3, [r3, #0]
    8908:	461a      	mov	r2, r3
    890a:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    890e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8912:	7859      	ldrb	r1, [r3, #1]
    8914:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8918:	f2c2 0304 	movt	r3, #8196	; 0x2004
    891c:	5499      	strb	r1, [r3, r2]
    891e:	4b43      	ldr	r3, [pc, #268]	; (8a2c <send_attitude+0x590>)
    8920:	781a      	ldrb	r2, [r3, #0]
    8922:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    892a:	781b      	ldrb	r3, [r3, #0]
    892c:	4413      	add	r3, r2
    892e:	b2da      	uxtb	r2, r3
    8930:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8938:	701a      	strb	r2, [r3, #0]
    893a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    893e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8942:	781a      	ldrb	r2, [r3, #0]
    8944:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    894c:	781b      	ldrb	r3, [r3, #0]
    894e:	4413      	add	r3, r2
    8950:	b2da      	uxtb	r2, r3
    8952:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8956:	f2c2 0304 	movt	r3, #8196	; 0x2004
    895a:	701a      	strb	r2, [r3, #0]
    895c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8964:	781b      	ldrb	r3, [r3, #0]
    8966:	3301      	adds	r3, #1
    8968:	b2da      	uxtb	r2, r3
    896a:	f24c 5349 	movw	r3, #50505	; 0xc549
    896e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8972:	701a      	strb	r2, [r3, #0]
    8974:	f24c 5349 	movw	r3, #50505	; 0xc549
    8978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    897c:	781b      	ldrb	r3, [r3, #0]
    897e:	2bff      	cmp	r3, #255	; 0xff
    8980:	d105      	bne.n	898e <send_attitude+0x4f2>
    8982:	f24c 5349 	movw	r3, #50505	; 0xc549
    8986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    898a:	2200      	movs	r2, #0
    898c:	701a      	strb	r2, [r3, #0]
    898e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8996:	781b      	ldrb	r3, [r3, #0]
    8998:	461a      	mov	r2, r3
    899a:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    899e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89a2:	7899      	ldrb	r1, [r3, #2]
    89a4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    89a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ac:	5499      	strb	r1, [r3, r2]
    89ae:	4b20      	ldr	r3, [pc, #128]	; (8a30 <send_attitude+0x594>)
    89b0:	781a      	ldrb	r2, [r3, #0]
    89b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    89b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ba:	781b      	ldrb	r3, [r3, #0]
    89bc:	4413      	add	r3, r2
    89be:	b2da      	uxtb	r2, r3
    89c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    89c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89c8:	701a      	strb	r2, [r3, #0]
    89ca:	f24c 634e 	movw	r3, #50766	; 0xc64e
    89ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89d2:	781a      	ldrb	r2, [r3, #0]
    89d4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    89d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89dc:	781b      	ldrb	r3, [r3, #0]
    89de:	4413      	add	r3, r2
    89e0:	b2da      	uxtb	r2, r3
    89e2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    89e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ea:	701a      	strb	r2, [r3, #0]
    89ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    89f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89f4:	781b      	ldrb	r3, [r3, #0]
    89f6:	3301      	adds	r3, #1
    89f8:	b2da      	uxtb	r2, r3
    89fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    89fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a02:	701a      	strb	r2, [r3, #0]
    8a04:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a0c:	781b      	ldrb	r3, [r3, #0]
    8a0e:	2bff      	cmp	r3, #255	; 0xff
    8a10:	d110      	bne.n	8a34 <send_attitude+0x598>
    8a12:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a1a:	2200      	movs	r2, #0
    8a1c:	701a      	strb	r2, [r3, #0]
    8a1e:	e009      	b.n	8a34 <send_attitude+0x598>
    8a20:	2004cb09 	.word	0x2004cb09
    8a24:	2004cb0a 	.word	0x2004cb0a
    8a28:	2004cb0b 	.word	0x2004cb0b
    8a2c:	2004cb0d 	.word	0x2004cb0d
    8a30:	2004cb0e 	.word	0x2004cb0e
    8a34:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a3c:	781b      	ldrb	r3, [r3, #0]
    8a3e:	461a      	mov	r2, r3
    8a40:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    8a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a48:	78d9      	ldrb	r1, [r3, #3]
    8a4a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a52:	5499      	strb	r1, [r3, r2]
    8a54:	4bc2      	ldr	r3, [pc, #776]	; (8d60 <send_attitude+0x8c4>)
    8a56:	781a      	ldrb	r2, [r3, #0]
    8a58:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a60:	781b      	ldrb	r3, [r3, #0]
    8a62:	4413      	add	r3, r2
    8a64:	b2da      	uxtb	r2, r3
    8a66:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a6e:	701a      	strb	r2, [r3, #0]
    8a70:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8a74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a78:	781a      	ldrb	r2, [r3, #0]
    8a7a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a82:	781b      	ldrb	r3, [r3, #0]
    8a84:	4413      	add	r3, r2
    8a86:	b2da      	uxtb	r2, r3
    8a88:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a90:	701a      	strb	r2, [r3, #0]
    8a92:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a9a:	781b      	ldrb	r3, [r3, #0]
    8a9c:	3301      	adds	r3, #1
    8a9e:	b2da      	uxtb	r2, r3
    8aa0:	f24c 5349 	movw	r3, #50505	; 0xc549
    8aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aa8:	701a      	strb	r2, [r3, #0]
    8aaa:	f24c 5349 	movw	r3, #50505	; 0xc549
    8aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ab2:	781b      	ldrb	r3, [r3, #0]
    8ab4:	2bff      	cmp	r3, #255	; 0xff
    8ab6:	d105      	bne.n	8ac4 <send_attitude+0x628>
    8ab8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8abc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ac0:	2200      	movs	r2, #0
    8ac2:	701a      	strb	r2, [r3, #0]
    8ac4:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8acc:	781b      	ldrb	r3, [r3, #0]
    8ace:	461a      	mov	r2, r3
    8ad0:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ad8:	7819      	ldrb	r1, [r3, #0]
    8ada:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ae2:	5499      	strb	r1, [r3, r2]
    8ae4:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aec:	781a      	ldrb	r2, [r3, #0]
    8aee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8af6:	781b      	ldrb	r3, [r3, #0]
    8af8:	4413      	add	r3, r2
    8afa:	b2da      	uxtb	r2, r3
    8afc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b04:	701a      	strb	r2, [r3, #0]
    8b06:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b0e:	781a      	ldrb	r2, [r3, #0]
    8b10:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b18:	781b      	ldrb	r3, [r3, #0]
    8b1a:	4413      	add	r3, r2
    8b1c:	b2da      	uxtb	r2, r3
    8b1e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8b22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b26:	701a      	strb	r2, [r3, #0]
    8b28:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b30:	781b      	ldrb	r3, [r3, #0]
    8b32:	3301      	adds	r3, #1
    8b34:	b2da      	uxtb	r2, r3
    8b36:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b3e:	701a      	strb	r2, [r3, #0]
    8b40:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b48:	781b      	ldrb	r3, [r3, #0]
    8b4a:	2bff      	cmp	r3, #255	; 0xff
    8b4c:	d105      	bne.n	8b5a <send_attitude+0x6be>
    8b4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b56:	2200      	movs	r2, #0
    8b58:	701a      	strb	r2, [r3, #0]
    8b5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b62:	781b      	ldrb	r3, [r3, #0]
    8b64:	461a      	mov	r2, r3
    8b66:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b6e:	7859      	ldrb	r1, [r3, #1]
    8b70:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b78:	5499      	strb	r1, [r3, r2]
    8b7a:	4b7a      	ldr	r3, [pc, #488]	; (8d64 <send_attitude+0x8c8>)
    8b7c:	781a      	ldrb	r2, [r3, #0]
    8b7e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b86:	781b      	ldrb	r3, [r3, #0]
    8b88:	4413      	add	r3, r2
    8b8a:	b2da      	uxtb	r2, r3
    8b8c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b94:	701a      	strb	r2, [r3, #0]
    8b96:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b9e:	781a      	ldrb	r2, [r3, #0]
    8ba0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ba8:	781b      	ldrb	r3, [r3, #0]
    8baa:	4413      	add	r3, r2
    8bac:	b2da      	uxtb	r2, r3
    8bae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bb6:	701a      	strb	r2, [r3, #0]
    8bb8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bc0:	781b      	ldrb	r3, [r3, #0]
    8bc2:	3301      	adds	r3, #1
    8bc4:	b2da      	uxtb	r2, r3
    8bc6:	f24c 5349 	movw	r3, #50505	; 0xc549
    8bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bce:	701a      	strb	r2, [r3, #0]
    8bd0:	f24c 5349 	movw	r3, #50505	; 0xc549
    8bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bd8:	781b      	ldrb	r3, [r3, #0]
    8bda:	2bff      	cmp	r3, #255	; 0xff
    8bdc:	d105      	bne.n	8bea <send_attitude+0x74e>
    8bde:	f24c 5349 	movw	r3, #50505	; 0xc549
    8be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8be6:	2200      	movs	r2, #0
    8be8:	701a      	strb	r2, [r3, #0]
    8bea:	f24c 5349 	movw	r3, #50505	; 0xc549
    8bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bf2:	781b      	ldrb	r3, [r3, #0]
    8bf4:	461a      	mov	r2, r3
    8bf6:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8bfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bfe:	7899      	ldrb	r1, [r3, #2]
    8c00:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c08:	5499      	strb	r1, [r3, r2]
    8c0a:	4b57      	ldr	r3, [pc, #348]	; (8d68 <send_attitude+0x8cc>)
    8c0c:	781a      	ldrb	r2, [r3, #0]
    8c0e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c16:	781b      	ldrb	r3, [r3, #0]
    8c18:	4413      	add	r3, r2
    8c1a:	b2da      	uxtb	r2, r3
    8c1c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c24:	701a      	strb	r2, [r3, #0]
    8c26:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c2e:	781a      	ldrb	r2, [r3, #0]
    8c30:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c38:	781b      	ldrb	r3, [r3, #0]
    8c3a:	4413      	add	r3, r2
    8c3c:	b2da      	uxtb	r2, r3
    8c3e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c46:	701a      	strb	r2, [r3, #0]
    8c48:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c50:	781b      	ldrb	r3, [r3, #0]
    8c52:	3301      	adds	r3, #1
    8c54:	b2da      	uxtb	r2, r3
    8c56:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c5e:	701a      	strb	r2, [r3, #0]
    8c60:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c68:	781b      	ldrb	r3, [r3, #0]
    8c6a:	2bff      	cmp	r3, #255	; 0xff
    8c6c:	d105      	bne.n	8c7a <send_attitude+0x7de>
    8c6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c76:	2200      	movs	r2, #0
    8c78:	701a      	strb	r2, [r3, #0]
    8c7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c82:	781b      	ldrb	r3, [r3, #0]
    8c84:	461a      	mov	r2, r3
    8c86:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8c8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c8e:	78d9      	ldrb	r1, [r3, #3]
    8c90:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c98:	5499      	strb	r1, [r3, r2]
    8c9a:	4b34      	ldr	r3, [pc, #208]	; (8d6c <send_attitude+0x8d0>)
    8c9c:	781a      	ldrb	r2, [r3, #0]
    8c9e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8ca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ca6:	781b      	ldrb	r3, [r3, #0]
    8ca8:	4413      	add	r3, r2
    8caa:	b2da      	uxtb	r2, r3
    8cac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cb4:	701a      	strb	r2, [r3, #0]
    8cb6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cbe:	781a      	ldrb	r2, [r3, #0]
    8cc0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cc8:	781b      	ldrb	r3, [r3, #0]
    8cca:	4413      	add	r3, r2
    8ccc:	b2da      	uxtb	r2, r3
    8cce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8cd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cd6:	701a      	strb	r2, [r3, #0]
    8cd8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ce0:	781b      	ldrb	r3, [r3, #0]
    8ce2:	3301      	adds	r3, #1
    8ce4:	b2da      	uxtb	r2, r3
    8ce6:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cee:	701a      	strb	r2, [r3, #0]
    8cf0:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cf8:	781b      	ldrb	r3, [r3, #0]
    8cfa:	2bff      	cmp	r3, #255	; 0xff
    8cfc:	d105      	bne.n	8d0a <send_attitude+0x86e>
    8cfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d06:	2200      	movs	r2, #0
    8d08:	701a      	strb	r2, [r3, #0]
    8d0a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d12:	781b      	ldrb	r3, [r3, #0]
    8d14:	461a      	mov	r2, r3
    8d16:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d1e:	7819      	ldrb	r1, [r3, #0]
    8d20:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d28:	5499      	strb	r1, [r3, r2]
    8d2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d32:	781b      	ldrb	r3, [r3, #0]
    8d34:	3301      	adds	r3, #1
    8d36:	b2da      	uxtb	r2, r3
    8d38:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d40:	701a      	strb	r2, [r3, #0]
    8d42:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d4a:	781b      	ldrb	r3, [r3, #0]
    8d4c:	2bff      	cmp	r3, #255	; 0xff
    8d4e:	d10f      	bne.n	8d70 <send_attitude+0x8d4>
    8d50:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d58:	2200      	movs	r2, #0
    8d5a:	701a      	strb	r2, [r3, #0]
    8d5c:	e008      	b.n	8d70 <send_attitude+0x8d4>
    8d5e:	bf00      	nop
    8d60:	2004cb0f 	.word	0x2004cb0f
    8d64:	2004cb11 	.word	0x2004cb11
    8d68:	2004cb12 	.word	0x2004cb12
    8d6c:	2004cb13 	.word	0x2004cb13
    8d70:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d78:	781b      	ldrb	r3, [r3, #0]
    8d7a:	461a      	mov	r2, r3
    8d7c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8d80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d84:	7819      	ldrb	r1, [r3, #0]
    8d86:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d8e:	5499      	strb	r1, [r3, r2]
    8d90:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d98:	781b      	ldrb	r3, [r3, #0]
    8d9a:	3301      	adds	r3, #1
    8d9c:	b2da      	uxtb	r2, r3
    8d9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8da2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8da6:	701a      	strb	r2, [r3, #0]
    8da8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8dac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8db0:	781b      	ldrb	r3, [r3, #0]
    8db2:	2bff      	cmp	r3, #255	; 0xff
    8db4:	d105      	bne.n	8dc2 <send_attitude+0x926>
    8db6:	f24c 5349 	movw	r3, #50505	; 0xc549
    8dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dbe:	2200      	movs	r2, #0
    8dc0:	701a      	strb	r2, [r3, #0]
    8dc2:	f242 0339 	movw	r3, #8249	; 0x2039
    8dc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dca:	781b      	ldrb	r3, [r3, #0]
    8dcc:	b2db      	uxtb	r3, r3
    8dce:	f003 0310 	and.w	r3, r3, #16
    8dd2:	2b00      	cmp	r3, #0
    8dd4:	d15a      	bne.n	8e8c <send_attitude+0x9f0>
    8dd6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dde:	781b      	ldrb	r3, [r3, #0]
    8de0:	b2db      	uxtb	r3, r3
    8de2:	461a      	mov	r2, r3
    8de4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8de8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dec:	5c9a      	ldrb	r2, [r3, r2]
    8dee:	f24c 634b 	movw	r3, #50763	; 0xc64b
    8df2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8df6:	701a      	strb	r2, [r3, #0]
    8df8:	f24c 634c 	movw	r3, #50764	; 0xc64c
    8dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e00:	2200      	movs	r2, #0
    8e02:	701a      	strb	r2, [r3, #0]
    8e04:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8e08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e0c:	781b      	ldrb	r3, [r3, #0]
    8e0e:	b2db      	uxtb	r3, r3
    8e10:	3301      	adds	r3, #1
    8e12:	b2da      	uxtb	r2, r3
    8e14:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e1c:	701a      	strb	r2, [r3, #0]
    8e1e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e26:	781b      	ldrb	r3, [r3, #0]
    8e28:	b2db      	uxtb	r3, r3
    8e2a:	2bff      	cmp	r3, #255	; 0xff
    8e2c:	d105      	bne.n	8e3a <send_attitude+0x99e>
    8e2e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8e32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e36:	2200      	movs	r2, #0
    8e38:	701a      	strb	r2, [r3, #0]
    8e3a:	f242 0338 	movw	r3, #8248	; 0x2038
    8e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e42:	f242 0238 	movw	r2, #8248	; 0x2038
    8e46:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8e4a:	7812      	ldrb	r2, [r2, #0]
    8e4c:	b2d2      	uxtb	r2, r2
    8e4e:	f042 0201 	orr.w	r2, r2, #1
    8e52:	b2d2      	uxtb	r2, r2
    8e54:	701a      	strb	r2, [r3, #0]
    8e56:	f242 0339 	movw	r3, #8249	; 0x2039
    8e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e5e:	f242 0239 	movw	r2, #8249	; 0x2039
    8e62:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8e66:	7812      	ldrb	r2, [r2, #0]
    8e68:	b2d2      	uxtb	r2, r2
    8e6a:	f042 0210 	orr.w	r2, r2, #16
    8e6e:	b2d2      	uxtb	r2, r2
    8e70:	701a      	strb	r2, [r3, #0]
    8e72:	e00b      	b.n	8e8c <send_attitude+0x9f0>
    8e74:	f24c 5348 	movw	r3, #50504	; 0xc548
    8e78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e7c:	781b      	ldrb	r3, [r3, #0]
    8e7e:	3301      	adds	r3, #1
    8e80:	b2da      	uxtb	r2, r3
    8e82:	f24c 5348 	movw	r3, #50504	; 0xc548
    8e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e8a:	701a      	strb	r2, [r3, #0]
  }
}
    8e8c:	46bd      	mov	sp, r7
    8e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e92:	4770      	bx	lr

00008e94 <send_adc>:
  
void send_adc(void){  //500ms
    8e94:	b480      	push	{r7}
    8e96:	af00      	add	r7, sp, #0
  if(!boot)
    8e98:	f240 533d 	movw	r3, #1341	; 0x53d
    8e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ea0:	781b      	ldrb	r3, [r3, #0]
    8ea2:	2b00      	cmp	r3, #0
    8ea4:	f040 827d 	bne.w	93a2 <send_adc+0x50e>
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    8ea8:	f24c 5341 	movw	r3, #50497	; 0xc541
    8eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eb0:	781a      	ldrb	r2, [r3, #0]
    8eb2:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8eb6:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8eba:	fba3 1302 	umull	r1, r3, r3, r2
    8ebe:	0899      	lsrs	r1, r3, #2
    8ec0:	460b      	mov	r3, r1
    8ec2:	009b      	lsls	r3, r3, #2
    8ec4:	440b      	add	r3, r1
    8ec6:	1ad3      	subs	r3, r2, r3
    8ec8:	b2db      	uxtb	r3, r3
    8eca:	2b01      	cmp	r3, #1
    8ecc:	f040 8269 	bne.w	93a2 <send_adc+0x50e>
    8ed0:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ed8:	781a      	ldrb	r2, [r3, #0]
    8eda:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8ede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ee2:	781b      	ldrb	r3, [r3, #0]
    8ee4:	b2db      	uxtb	r3, r3
    8ee6:	429a      	cmp	r2, r3
    8ee8:	d313      	bcc.n	8f12 <send_adc+0x7e>
    8eea:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ef2:	781b      	ldrb	r3, [r3, #0]
    8ef4:	b2db      	uxtb	r3, r3
    8ef6:	461a      	mov	r2, r3
    8ef8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8efc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f00:	781b      	ldrb	r3, [r3, #0]
    8f02:	1ad3      	subs	r3, r2, r3
    8f04:	33ff      	adds	r3, #255	; 0xff
    8f06:	2b08      	cmp	r3, #8
    8f08:	bfd4      	ite	le
    8f0a:	2300      	movle	r3, #0
    8f0c:	2301      	movgt	r3, #1
    8f0e:	b2db      	uxtb	r3, r3
    8f10:	e011      	b.n	8f36 <send_adc+0xa2>
    8f12:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8f16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f1a:	781b      	ldrb	r3, [r3, #0]
    8f1c:	b2db      	uxtb	r3, r3
    8f1e:	461a      	mov	r2, r3
    8f20:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f28:	781b      	ldrb	r3, [r3, #0]
    8f2a:	1ad3      	subs	r3, r2, r3
    8f2c:	2b08      	cmp	r3, #8
    8f2e:	bfd4      	ite	le
    8f30:	2300      	movle	r3, #0
    8f32:	2301      	movgt	r3, #1
    8f34:	b2db      	uxtb	r3, r3
    8f36:	2b00      	cmp	r3, #0
    8f38:	f000 8227 	beq.w	938a <send_adc+0x4f6>
    8f3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f44:	781b      	ldrb	r3, [r3, #0]
    8f46:	461a      	mov	r2, r3
    8f48:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f50:	2105      	movs	r1, #5
    8f52:	5499      	strb	r1, [r3, r2]
    8f54:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f5c:	781b      	ldrb	r3, [r3, #0]
    8f5e:	3301      	adds	r3, #1
    8f60:	b2da      	uxtb	r2, r3
    8f62:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f6a:	701a      	strb	r2, [r3, #0]
    8f6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f74:	781b      	ldrb	r3, [r3, #0]
    8f76:	2bff      	cmp	r3, #255	; 0xff
    8f78:	d105      	bne.n	8f86 <send_adc+0xf2>
    8f7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f82:	2200      	movs	r2, #0
    8f84:	701a      	strb	r2, [r3, #0]
    8f86:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f8e:	781b      	ldrb	r3, [r3, #0]
    8f90:	461a      	mov	r2, r3
    8f92:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f9a:	2107      	movs	r1, #7
    8f9c:	5499      	strb	r1, [r3, r2]
    8f9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fa6:	781b      	ldrb	r3, [r3, #0]
    8fa8:	3301      	adds	r3, #1
    8faa:	b2da      	uxtb	r2, r3
    8fac:	f24c 5349 	movw	r3, #50505	; 0xc549
    8fb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fb4:	701a      	strb	r2, [r3, #0]
    8fb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    8fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fbe:	781b      	ldrb	r3, [r3, #0]
    8fc0:	2bff      	cmp	r3, #255	; 0xff
    8fc2:	d105      	bne.n	8fd0 <send_adc+0x13c>
    8fc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    8fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fcc:	2200      	movs	r2, #0
    8fce:	701a      	strb	r2, [r3, #0]
    8fd0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8fd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fd8:	2207      	movs	r2, #7
    8fda:	701a      	strb	r2, [r3, #0]
    8fdc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8fe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fe4:	2207      	movs	r2, #7
    8fe6:	701a      	strb	r2, [r3, #0]
    8fe8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ff0:	781b      	ldrb	r3, [r3, #0]
    8ff2:	461a      	mov	r2, r3
    8ff4:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    8ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ffc:	7819      	ldrb	r1, [r3, #0]
    8ffe:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9006:	5499      	strb	r1, [r3, r2]
    9008:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    900c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9010:	781a      	ldrb	r2, [r3, #0]
    9012:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    901a:	781b      	ldrb	r3, [r3, #0]
    901c:	4413      	add	r3, r2
    901e:	b2da      	uxtb	r2, r3
    9020:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9028:	701a      	strb	r2, [r3, #0]
    902a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    902e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9032:	781a      	ldrb	r2, [r3, #0]
    9034:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    903c:	781b      	ldrb	r3, [r3, #0]
    903e:	4413      	add	r3, r2
    9040:	b2da      	uxtb	r2, r3
    9042:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    904a:	701a      	strb	r2, [r3, #0]
    904c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9054:	781b      	ldrb	r3, [r3, #0]
    9056:	3301      	adds	r3, #1
    9058:	b2da      	uxtb	r2, r3
    905a:	f24c 5349 	movw	r3, #50505	; 0xc549
    905e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9062:	701a      	strb	r2, [r3, #0]
    9064:	f24c 5349 	movw	r3, #50505	; 0xc549
    9068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    906c:	781b      	ldrb	r3, [r3, #0]
    906e:	2bff      	cmp	r3, #255	; 0xff
    9070:	d105      	bne.n	907e <send_adc+0x1ea>
    9072:	f24c 5349 	movw	r3, #50505	; 0xc549
    9076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    907a:	2200      	movs	r2, #0
    907c:	701a      	strb	r2, [r3, #0]
    907e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9086:	781b      	ldrb	r3, [r3, #0]
    9088:	461a      	mov	r2, r3
    908a:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    908e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9092:	7859      	ldrb	r1, [r3, #1]
    9094:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    909c:	5499      	strb	r1, [r3, r2]
    909e:	4bc3      	ldr	r3, [pc, #780]	; (93ac <send_adc+0x518>)
    90a0:	781a      	ldrb	r2, [r3, #0]
    90a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    90a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90aa:	781b      	ldrb	r3, [r3, #0]
    90ac:	4413      	add	r3, r2
    90ae:	b2da      	uxtb	r2, r3
    90b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    90b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90b8:	701a      	strb	r2, [r3, #0]
    90ba:	f24c 634e 	movw	r3, #50766	; 0xc64e
    90be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90c2:	781a      	ldrb	r2, [r3, #0]
    90c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    90c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90cc:	781b      	ldrb	r3, [r3, #0]
    90ce:	4413      	add	r3, r2
    90d0:	b2da      	uxtb	r2, r3
    90d2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    90d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90da:	701a      	strb	r2, [r3, #0]
    90dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    90e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90e4:	781b      	ldrb	r3, [r3, #0]
    90e6:	3301      	adds	r3, #1
    90e8:	b2da      	uxtb	r2, r3
    90ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    90ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90f2:	701a      	strb	r2, [r3, #0]
    90f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    90f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90fc:	781b      	ldrb	r3, [r3, #0]
    90fe:	2bff      	cmp	r3, #255	; 0xff
    9100:	d105      	bne.n	910e <send_adc+0x27a>
    9102:	f24c 5349 	movw	r3, #50505	; 0xc549
    9106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    910a:	2200      	movs	r2, #0
    910c:	701a      	strb	r2, [r3, #0]
    910e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9116:	781b      	ldrb	r3, [r3, #0]
    9118:	461a      	mov	r2, r3
    911a:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
    911e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9122:	7819      	ldrb	r1, [r3, #0]
    9124:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    912c:	5499      	strb	r1, [r3, r2]
    912e:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
    9132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9136:	781a      	ldrb	r2, [r3, #0]
    9138:	f24c 634d 	movw	r3, #50765	; 0xc64d
    913c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9140:	781b      	ldrb	r3, [r3, #0]
    9142:	4413      	add	r3, r2
    9144:	b2da      	uxtb	r2, r3
    9146:	f24c 634d 	movw	r3, #50765	; 0xc64d
    914a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    914e:	701a      	strb	r2, [r3, #0]
    9150:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9158:	781a      	ldrb	r2, [r3, #0]
    915a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    915e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9162:	781b      	ldrb	r3, [r3, #0]
    9164:	4413      	add	r3, r2
    9166:	b2da      	uxtb	r2, r3
    9168:	f24c 634e 	movw	r3, #50766	; 0xc64e
    916c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9170:	701a      	strb	r2, [r3, #0]
    9172:	f24c 5349 	movw	r3, #50505	; 0xc549
    9176:	f2c2 0304 	movt	r3, #8196	; 0x2004
    917a:	781b      	ldrb	r3, [r3, #0]
    917c:	3301      	adds	r3, #1
    917e:	b2da      	uxtb	r2, r3
    9180:	f24c 5349 	movw	r3, #50505	; 0xc549
    9184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9188:	701a      	strb	r2, [r3, #0]
    918a:	f24c 5349 	movw	r3, #50505	; 0xc549
    918e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9192:	781b      	ldrb	r3, [r3, #0]
    9194:	2bff      	cmp	r3, #255	; 0xff
    9196:	d105      	bne.n	91a4 <send_adc+0x310>
    9198:	f24c 5349 	movw	r3, #50505	; 0xc549
    919c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91a0:	2200      	movs	r2, #0
    91a2:	701a      	strb	r2, [r3, #0]
    91a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    91a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ac:	781b      	ldrb	r3, [r3, #0]
    91ae:	461a      	mov	r2, r3
    91b0:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
    91b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91b8:	7859      	ldrb	r1, [r3, #1]
    91ba:	f24c 534c 	movw	r3, #50508	; 0xc54c
    91be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91c2:	5499      	strb	r1, [r3, r2]
    91c4:	4b7a      	ldr	r3, [pc, #488]	; (93b0 <send_adc+0x51c>)
    91c6:	781a      	ldrb	r2, [r3, #0]
    91c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    91cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91d0:	781b      	ldrb	r3, [r3, #0]
    91d2:	4413      	add	r3, r2
    91d4:	b2da      	uxtb	r2, r3
    91d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    91da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91de:	701a      	strb	r2, [r3, #0]
    91e0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    91e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91e8:	781a      	ldrb	r2, [r3, #0]
    91ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    91ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91f2:	781b      	ldrb	r3, [r3, #0]
    91f4:	4413      	add	r3, r2
    91f6:	b2da      	uxtb	r2, r3
    91f8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    91fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9200:	701a      	strb	r2, [r3, #0]
    9202:	f24c 5349 	movw	r3, #50505	; 0xc549
    9206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    920a:	781b      	ldrb	r3, [r3, #0]
    920c:	3301      	adds	r3, #1
    920e:	b2da      	uxtb	r2, r3
    9210:	f24c 5349 	movw	r3, #50505	; 0xc549
    9214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9218:	701a      	strb	r2, [r3, #0]
    921a:	f24c 5349 	movw	r3, #50505	; 0xc549
    921e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9222:	781b      	ldrb	r3, [r3, #0]
    9224:	2bff      	cmp	r3, #255	; 0xff
    9226:	d105      	bne.n	9234 <send_adc+0x3a0>
    9228:	f24c 5349 	movw	r3, #50505	; 0xc549
    922c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9230:	2200      	movs	r2, #0
    9232:	701a      	strb	r2, [r3, #0]
    9234:	f24c 5349 	movw	r3, #50505	; 0xc549
    9238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    923c:	781b      	ldrb	r3, [r3, #0]
    923e:	461a      	mov	r2, r3
    9240:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9248:	7819      	ldrb	r1, [r3, #0]
    924a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    924e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9252:	5499      	strb	r1, [r3, r2]
    9254:	f24c 5349 	movw	r3, #50505	; 0xc549
    9258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    925c:	781b      	ldrb	r3, [r3, #0]
    925e:	3301      	adds	r3, #1
    9260:	b2da      	uxtb	r2, r3
    9262:	f24c 5349 	movw	r3, #50505	; 0xc549
    9266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    926a:	701a      	strb	r2, [r3, #0]
    926c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9274:	781b      	ldrb	r3, [r3, #0]
    9276:	2bff      	cmp	r3, #255	; 0xff
    9278:	d105      	bne.n	9286 <send_adc+0x3f2>
    927a:	f24c 5349 	movw	r3, #50505	; 0xc549
    927e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9282:	2200      	movs	r2, #0
    9284:	701a      	strb	r2, [r3, #0]
    9286:	f24c 5349 	movw	r3, #50505	; 0xc549
    928a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    928e:	781b      	ldrb	r3, [r3, #0]
    9290:	461a      	mov	r2, r3
    9292:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    929a:	7819      	ldrb	r1, [r3, #0]
    929c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    92a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92a4:	5499      	strb	r1, [r3, r2]
    92a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    92aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ae:	781b      	ldrb	r3, [r3, #0]
    92b0:	3301      	adds	r3, #1
    92b2:	b2da      	uxtb	r2, r3
    92b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    92b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92bc:	701a      	strb	r2, [r3, #0]
    92be:	f24c 5349 	movw	r3, #50505	; 0xc549
    92c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92c6:	781b      	ldrb	r3, [r3, #0]
    92c8:	2bff      	cmp	r3, #255	; 0xff
    92ca:	d105      	bne.n	92d8 <send_adc+0x444>
    92cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    92d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92d4:	2200      	movs	r2, #0
    92d6:	701a      	strb	r2, [r3, #0]
    92d8:	f242 0339 	movw	r3, #8249	; 0x2039
    92dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92e0:	781b      	ldrb	r3, [r3, #0]
    92e2:	b2db      	uxtb	r3, r3
    92e4:	f003 0310 	and.w	r3, r3, #16
    92e8:	2b00      	cmp	r3, #0
    92ea:	d15a      	bne.n	93a2 <send_adc+0x50e>
    92ec:	f24c 534a 	movw	r3, #50506	; 0xc54a
    92f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92f4:	781b      	ldrb	r3, [r3, #0]
    92f6:	b2db      	uxtb	r3, r3
    92f8:	461a      	mov	r2, r3
    92fa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    92fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9302:	5c9a      	ldrb	r2, [r3, r2]
    9304:	f24c 634b 	movw	r3, #50763	; 0xc64b
    9308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    930c:	701a      	strb	r2, [r3, #0]
    930e:	f24c 634c 	movw	r3, #50764	; 0xc64c
    9312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9316:	2200      	movs	r2, #0
    9318:	701a      	strb	r2, [r3, #0]
    931a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    931e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9322:	781b      	ldrb	r3, [r3, #0]
    9324:	b2db      	uxtb	r3, r3
    9326:	3301      	adds	r3, #1
    9328:	b2da      	uxtb	r2, r3
    932a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    932e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9332:	701a      	strb	r2, [r3, #0]
    9334:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    933c:	781b      	ldrb	r3, [r3, #0]
    933e:	b2db      	uxtb	r3, r3
    9340:	2bff      	cmp	r3, #255	; 0xff
    9342:	d105      	bne.n	9350 <send_adc+0x4bc>
    9344:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    934c:	2200      	movs	r2, #0
    934e:	701a      	strb	r2, [r3, #0]
    9350:	f242 0338 	movw	r3, #8248	; 0x2038
    9354:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9358:	f242 0238 	movw	r2, #8248	; 0x2038
    935c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9360:	7812      	ldrb	r2, [r2, #0]
    9362:	b2d2      	uxtb	r2, r2
    9364:	f042 0201 	orr.w	r2, r2, #1
    9368:	b2d2      	uxtb	r2, r2
    936a:	701a      	strb	r2, [r3, #0]
    936c:	f242 0339 	movw	r3, #8249	; 0x2039
    9370:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9374:	f242 0239 	movw	r2, #8249	; 0x2039
    9378:	f2c2 0200 	movt	r2, #8192	; 0x2000
    937c:	7812      	ldrb	r2, [r2, #0]
    937e:	b2d2      	uxtb	r2, r2
    9380:	f042 0210 	orr.w	r2, r2, #16
    9384:	b2d2      	uxtb	r2, r2
    9386:	701a      	strb	r2, [r3, #0]
    9388:	e00b      	b.n	93a2 <send_adc+0x50e>
    938a:	f24c 5348 	movw	r3, #50504	; 0xc548
    938e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9392:	781b      	ldrb	r3, [r3, #0]
    9394:	3301      	adds	r3, #1
    9396:	b2da      	uxtb	r2, r3
    9398:	f24c 5348 	movw	r3, #50504	; 0xc548
    939c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93a0:	701a      	strb	r2, [r3, #0]
}
    93a2:	46bd      	mov	sp, r7
    93a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    93a8:	4770      	bx	lr
    93aa:	bf00      	nop
    93ac:	2004c7e9 	.word	0x2004c7e9
    93b0:	2004c7eb 	.word	0x2004c7eb

000093b4 <send_settings>:
void send_settings(void){ //500ms
    93b4:	b480      	push	{r7}
    93b6:	af00      	add	r7, sp, #0
  if(!boot)
    93b8:	f240 533d 	movw	r3, #1341	; 0x53d
    93bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93c0:	781b      	ldrb	r3, [r3, #0]
    93c2:	2b00      	cmp	r3, #0
    93c4:	f040 83fb 	bne.w	9bbe <send_settings+0x80a>
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    93c8:	f24c 5341 	movw	r3, #50497	; 0xc541
    93cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93d0:	781a      	ldrb	r2, [r3, #0]
    93d2:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    93d6:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    93da:	fba3 1302 	umull	r1, r3, r3, r2
    93de:	0899      	lsrs	r1, r3, #2
    93e0:	460b      	mov	r3, r1
    93e2:	009b      	lsls	r3, r3, #2
    93e4:	440b      	add	r3, r1
    93e6:	1ad3      	subs	r3, r2, r3
    93e8:	b2db      	uxtb	r3, r3
    93ea:	2b02      	cmp	r3, #2
    93ec:	f040 83e7 	bne.w	9bbe <send_settings+0x80a>
    93f0:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    93f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93f8:	781b      	ldrb	r3, [r3, #0]
    93fa:	2b00      	cmp	r3, #0
    93fc:	f000 83df 	beq.w	9bbe <send_settings+0x80a>
    9400:	f24c 5349 	movw	r3, #50505	; 0xc549
    9404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9408:	781a      	ldrb	r2, [r3, #0]
    940a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    940e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9412:	781b      	ldrb	r3, [r3, #0]
    9414:	b2db      	uxtb	r3, r3
    9416:	429a      	cmp	r2, r3
    9418:	d313      	bcc.n	9442 <send_settings+0x8e>
    941a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    941e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9422:	781b      	ldrb	r3, [r3, #0]
    9424:	b2db      	uxtb	r3, r3
    9426:	461a      	mov	r2, r3
    9428:	f24c 5349 	movw	r3, #50505	; 0xc549
    942c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9430:	781b      	ldrb	r3, [r3, #0]
    9432:	1ad3      	subs	r3, r2, r3
    9434:	33ff      	adds	r3, #255	; 0xff
    9436:	2b0d      	cmp	r3, #13
    9438:	bfd4      	ite	le
    943a:	2300      	movle	r3, #0
    943c:	2301      	movgt	r3, #1
    943e:	b2db      	uxtb	r3, r3
    9440:	e011      	b.n	9466 <send_settings+0xb2>
    9442:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    944a:	781b      	ldrb	r3, [r3, #0]
    944c:	b2db      	uxtb	r3, r3
    944e:	461a      	mov	r2, r3
    9450:	f24c 5349 	movw	r3, #50505	; 0xc549
    9454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9458:	781b      	ldrb	r3, [r3, #0]
    945a:	1ad3      	subs	r3, r2, r3
    945c:	2b0d      	cmp	r3, #13
    945e:	bfd4      	ite	le
    9460:	2300      	movle	r3, #0
    9462:	2301      	movgt	r3, #1
    9464:	b2db      	uxtb	r3, r3
    9466:	2b00      	cmp	r3, #0
    9468:	f000 839d 	beq.w	9ba6 <send_settings+0x7f2>
    946c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9474:	781b      	ldrb	r3, [r3, #0]
    9476:	461a      	mov	r2, r3
    9478:	f24c 534c 	movw	r3, #50508	; 0xc54c
    947c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9480:	2105      	movs	r1, #5
    9482:	5499      	strb	r1, [r3, r2]
    9484:	f24c 5349 	movw	r3, #50505	; 0xc549
    9488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    948c:	781b      	ldrb	r3, [r3, #0]
    948e:	3301      	adds	r3, #1
    9490:	b2da      	uxtb	r2, r3
    9492:	f24c 5349 	movw	r3, #50505	; 0xc549
    9496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    949a:	701a      	strb	r2, [r3, #0]
    949c:	f24c 5349 	movw	r3, #50505	; 0xc549
    94a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94a4:	781b      	ldrb	r3, [r3, #0]
    94a6:	2bff      	cmp	r3, #255	; 0xff
    94a8:	d105      	bne.n	94b6 <send_settings+0x102>
    94aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    94ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94b2:	2200      	movs	r2, #0
    94b4:	701a      	strb	r2, [r3, #0]
    94b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    94ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94be:	781b      	ldrb	r3, [r3, #0]
    94c0:	461a      	mov	r2, r3
    94c2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    94c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94ca:	2111      	movs	r1, #17
    94cc:	5499      	strb	r1, [r3, r2]
    94ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    94d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94d6:	781b      	ldrb	r3, [r3, #0]
    94d8:	3301      	adds	r3, #1
    94da:	b2da      	uxtb	r2, r3
    94dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    94e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94e4:	701a      	strb	r2, [r3, #0]
    94e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    94ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94ee:	781b      	ldrb	r3, [r3, #0]
    94f0:	2bff      	cmp	r3, #255	; 0xff
    94f2:	d105      	bne.n	9500 <send_settings+0x14c>
    94f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    94f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94fc:	2200      	movs	r2, #0
    94fe:	701a      	strb	r2, [r3, #0]
    9500:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9508:	2211      	movs	r2, #17
    950a:	701a      	strb	r2, [r3, #0]
    950c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9514:	2211      	movs	r2, #17
    9516:	701a      	strb	r2, [r3, #0]
    9518:	f24c 5349 	movw	r3, #50505	; 0xc549
    951c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9520:	781b      	ldrb	r3, [r3, #0]
    9522:	461a      	mov	r2, r3
    9524:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    9528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    952c:	7819      	ldrb	r1, [r3, #0]
    952e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9536:	5499      	strb	r1, [r3, r2]
    9538:	f24c 634d 	movw	r3, #50765	; 0xc64d
    953c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9540:	781a      	ldrb	r2, [r3, #0]
    9542:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    9546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    954a:	781b      	ldrb	r3, [r3, #0]
    954c:	4413      	add	r3, r2
    954e:	b2da      	uxtb	r2, r3
    9550:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9558:	701a      	strb	r2, [r3, #0]
    955a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    955e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9562:	781a      	ldrb	r2, [r3, #0]
    9564:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    956c:	781b      	ldrb	r3, [r3, #0]
    956e:	4413      	add	r3, r2
    9570:	b2da      	uxtb	r2, r3
    9572:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    957a:	701a      	strb	r2, [r3, #0]
    957c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9584:	781b      	ldrb	r3, [r3, #0]
    9586:	3301      	adds	r3, #1
    9588:	b2da      	uxtb	r2, r3
    958a:	f24c 5349 	movw	r3, #50505	; 0xc549
    958e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9592:	701a      	strb	r2, [r3, #0]
    9594:	f24c 5349 	movw	r3, #50505	; 0xc549
    9598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    959c:	781b      	ldrb	r3, [r3, #0]
    959e:	2bff      	cmp	r3, #255	; 0xff
    95a0:	d105      	bne.n	95ae <send_settings+0x1fa>
    95a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    95a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95aa:	2200      	movs	r2, #0
    95ac:	701a      	strb	r2, [r3, #0]
    95ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    95b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95b6:	781b      	ldrb	r3, [r3, #0]
    95b8:	461a      	mov	r2, r3
    95ba:	f24c 5338 	movw	r3, #50488	; 0xc538
    95be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95c2:	7819      	ldrb	r1, [r3, #0]
    95c4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    95c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95cc:	5499      	strb	r1, [r3, r2]
    95ce:	f24c 5338 	movw	r3, #50488	; 0xc538
    95d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95d6:	781a      	ldrb	r2, [r3, #0]
    95d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    95dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95e0:	781b      	ldrb	r3, [r3, #0]
    95e2:	4413      	add	r3, r2
    95e4:	b2da      	uxtb	r2, r3
    95e6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    95ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ee:	701a      	strb	r2, [r3, #0]
    95f0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    95f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95f8:	781a      	ldrb	r2, [r3, #0]
    95fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    95fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9602:	781b      	ldrb	r3, [r3, #0]
    9604:	4413      	add	r3, r2
    9606:	b2da      	uxtb	r2, r3
    9608:	f24c 634e 	movw	r3, #50766	; 0xc64e
    960c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9610:	701a      	strb	r2, [r3, #0]
    9612:	f24c 5349 	movw	r3, #50505	; 0xc549
    9616:	f2c2 0304 	movt	r3, #8196	; 0x2004
    961a:	781b      	ldrb	r3, [r3, #0]
    961c:	3301      	adds	r3, #1
    961e:	b2da      	uxtb	r2, r3
    9620:	f24c 5349 	movw	r3, #50505	; 0xc549
    9624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9628:	701a      	strb	r2, [r3, #0]
    962a:	f24c 5349 	movw	r3, #50505	; 0xc549
    962e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9632:	781b      	ldrb	r3, [r3, #0]
    9634:	2bff      	cmp	r3, #255	; 0xff
    9636:	d105      	bne.n	9644 <send_settings+0x290>
    9638:	f24c 5349 	movw	r3, #50505	; 0xc549
    963c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9640:	2200      	movs	r2, #0
    9642:	701a      	strb	r2, [r3, #0]
    9644:	f24c 5349 	movw	r3, #50505	; 0xc549
    9648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    964c:	781b      	ldrb	r3, [r3, #0]
    964e:	461a      	mov	r2, r3
    9650:	f24c 5338 	movw	r3, #50488	; 0xc538
    9654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9658:	7859      	ldrb	r1, [r3, #1]
    965a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    965e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9662:	5499      	strb	r1, [r3, r2]
    9664:	4bd1      	ldr	r3, [pc, #836]	; (99ac <send_settings+0x5f8>)
    9666:	781a      	ldrb	r2, [r3, #0]
    9668:	f24c 634d 	movw	r3, #50765	; 0xc64d
    966c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9670:	781b      	ldrb	r3, [r3, #0]
    9672:	4413      	add	r3, r2
    9674:	b2da      	uxtb	r2, r3
    9676:	f24c 634d 	movw	r3, #50765	; 0xc64d
    967a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    967e:	701a      	strb	r2, [r3, #0]
    9680:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9688:	781a      	ldrb	r2, [r3, #0]
    968a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    968e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9692:	781b      	ldrb	r3, [r3, #0]
    9694:	4413      	add	r3, r2
    9696:	b2da      	uxtb	r2, r3
    9698:	f24c 634e 	movw	r3, #50766	; 0xc64e
    969c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96a0:	701a      	strb	r2, [r3, #0]
    96a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    96a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96aa:	781b      	ldrb	r3, [r3, #0]
    96ac:	3301      	adds	r3, #1
    96ae:	b2da      	uxtb	r2, r3
    96b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    96b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96b8:	701a      	strb	r2, [r3, #0]
    96ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    96be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96c2:	781b      	ldrb	r3, [r3, #0]
    96c4:	2bff      	cmp	r3, #255	; 0xff
    96c6:	d105      	bne.n	96d4 <send_settings+0x320>
    96c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    96cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96d0:	2200      	movs	r2, #0
    96d2:	701a      	strb	r2, [r3, #0]
    96d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    96d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96dc:	781b      	ldrb	r3, [r3, #0]
    96de:	461a      	mov	r2, r3
    96e0:	f24c 5338 	movw	r3, #50488	; 0xc538
    96e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96e8:	7899      	ldrb	r1, [r3, #2]
    96ea:	f24c 534c 	movw	r3, #50508	; 0xc54c
    96ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96f2:	5499      	strb	r1, [r3, r2]
    96f4:	4bae      	ldr	r3, [pc, #696]	; (99b0 <send_settings+0x5fc>)
    96f6:	781a      	ldrb	r2, [r3, #0]
    96f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    96fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9700:	781b      	ldrb	r3, [r3, #0]
    9702:	4413      	add	r3, r2
    9704:	b2da      	uxtb	r2, r3
    9706:	f24c 634d 	movw	r3, #50765	; 0xc64d
    970a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    970e:	701a      	strb	r2, [r3, #0]
    9710:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9718:	781a      	ldrb	r2, [r3, #0]
    971a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    971e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9722:	781b      	ldrb	r3, [r3, #0]
    9724:	4413      	add	r3, r2
    9726:	b2da      	uxtb	r2, r3
    9728:	f24c 634e 	movw	r3, #50766	; 0xc64e
    972c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9730:	701a      	strb	r2, [r3, #0]
    9732:	f24c 5349 	movw	r3, #50505	; 0xc549
    9736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    973a:	781b      	ldrb	r3, [r3, #0]
    973c:	3301      	adds	r3, #1
    973e:	b2da      	uxtb	r2, r3
    9740:	f24c 5349 	movw	r3, #50505	; 0xc549
    9744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9748:	701a      	strb	r2, [r3, #0]
    974a:	f24c 5349 	movw	r3, #50505	; 0xc549
    974e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9752:	781b      	ldrb	r3, [r3, #0]
    9754:	2bff      	cmp	r3, #255	; 0xff
    9756:	d105      	bne.n	9764 <send_settings+0x3b0>
    9758:	f24c 5349 	movw	r3, #50505	; 0xc549
    975c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9760:	2200      	movs	r2, #0
    9762:	701a      	strb	r2, [r3, #0]
    9764:	f24c 5349 	movw	r3, #50505	; 0xc549
    9768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    976c:	781b      	ldrb	r3, [r3, #0]
    976e:	461a      	mov	r2, r3
    9770:	f24c 5338 	movw	r3, #50488	; 0xc538
    9774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9778:	78d9      	ldrb	r1, [r3, #3]
    977a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    977e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9782:	5499      	strb	r1, [r3, r2]
    9784:	4b8b      	ldr	r3, [pc, #556]	; (99b4 <send_settings+0x600>)
    9786:	781a      	ldrb	r2, [r3, #0]
    9788:	f24c 634d 	movw	r3, #50765	; 0xc64d
    978c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9790:	781b      	ldrb	r3, [r3, #0]
    9792:	4413      	add	r3, r2
    9794:	b2da      	uxtb	r2, r3
    9796:	f24c 634d 	movw	r3, #50765	; 0xc64d
    979a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    979e:	701a      	strb	r2, [r3, #0]
    97a0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    97a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97a8:	781a      	ldrb	r2, [r3, #0]
    97aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    97ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97b2:	781b      	ldrb	r3, [r3, #0]
    97b4:	4413      	add	r3, r2
    97b6:	b2da      	uxtb	r2, r3
    97b8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    97bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97c0:	701a      	strb	r2, [r3, #0]
    97c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    97c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ca:	781b      	ldrb	r3, [r3, #0]
    97cc:	3301      	adds	r3, #1
    97ce:	b2da      	uxtb	r2, r3
    97d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    97d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97d8:	701a      	strb	r2, [r3, #0]
    97da:	f24c 5349 	movw	r3, #50505	; 0xc549
    97de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97e2:	781b      	ldrb	r3, [r3, #0]
    97e4:	2bff      	cmp	r3, #255	; 0xff
    97e6:	d105      	bne.n	97f4 <send_settings+0x440>
    97e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    97ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97f0:	2200      	movs	r2, #0
    97f2:	701a      	strb	r2, [r3, #0]
    97f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    97f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97fc:	781b      	ldrb	r3, [r3, #0]
    97fe:	461a      	mov	r2, r3
    9800:	f24c 533c 	movw	r3, #50492	; 0xc53c
    9804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9808:	7819      	ldrb	r1, [r3, #0]
    980a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    980e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9812:	5499      	strb	r1, [r3, r2]
    9814:	f24c 533c 	movw	r3, #50492	; 0xc53c
    9818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    981c:	781a      	ldrb	r2, [r3, #0]
    981e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9826:	781b      	ldrb	r3, [r3, #0]
    9828:	4413      	add	r3, r2
    982a:	b2da      	uxtb	r2, r3
    982c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9834:	701a      	strb	r2, [r3, #0]
    9836:	f24c 634e 	movw	r3, #50766	; 0xc64e
    983a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    983e:	781a      	ldrb	r2, [r3, #0]
    9840:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9848:	781b      	ldrb	r3, [r3, #0]
    984a:	4413      	add	r3, r2
    984c:	b2da      	uxtb	r2, r3
    984e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9856:	701a      	strb	r2, [r3, #0]
    9858:	f24c 5349 	movw	r3, #50505	; 0xc549
    985c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9860:	781b      	ldrb	r3, [r3, #0]
    9862:	3301      	adds	r3, #1
    9864:	b2da      	uxtb	r2, r3
    9866:	f24c 5349 	movw	r3, #50505	; 0xc549
    986a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    986e:	701a      	strb	r2, [r3, #0]
    9870:	f24c 5349 	movw	r3, #50505	; 0xc549
    9874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9878:	781b      	ldrb	r3, [r3, #0]
    987a:	2bff      	cmp	r3, #255	; 0xff
    987c:	d105      	bne.n	988a <send_settings+0x4d6>
    987e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9886:	2200      	movs	r2, #0
    9888:	701a      	strb	r2, [r3, #0]
    988a:	f24c 5349 	movw	r3, #50505	; 0xc549
    988e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9892:	781b      	ldrb	r3, [r3, #0]
    9894:	461a      	mov	r2, r3
    9896:	f24c 533c 	movw	r3, #50492	; 0xc53c
    989a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    989e:	7859      	ldrb	r1, [r3, #1]
    98a0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    98a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98a8:	5499      	strb	r1, [r3, r2]
    98aa:	4b43      	ldr	r3, [pc, #268]	; (99b8 <send_settings+0x604>)
    98ac:	781a      	ldrb	r2, [r3, #0]
    98ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    98b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98b6:	781b      	ldrb	r3, [r3, #0]
    98b8:	4413      	add	r3, r2
    98ba:	b2da      	uxtb	r2, r3
    98bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    98c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98c4:	701a      	strb	r2, [r3, #0]
    98c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    98ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ce:	781a      	ldrb	r2, [r3, #0]
    98d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    98d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98d8:	781b      	ldrb	r3, [r3, #0]
    98da:	4413      	add	r3, r2
    98dc:	b2da      	uxtb	r2, r3
    98de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    98e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98e6:	701a      	strb	r2, [r3, #0]
    98e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    98ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98f0:	781b      	ldrb	r3, [r3, #0]
    98f2:	3301      	adds	r3, #1
    98f4:	b2da      	uxtb	r2, r3
    98f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    98fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98fe:	701a      	strb	r2, [r3, #0]
    9900:	f24c 5349 	movw	r3, #50505	; 0xc549
    9904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9908:	781b      	ldrb	r3, [r3, #0]
    990a:	2bff      	cmp	r3, #255	; 0xff
    990c:	d105      	bne.n	991a <send_settings+0x566>
    990e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9916:	2200      	movs	r2, #0
    9918:	701a      	strb	r2, [r3, #0]
    991a:	f24c 5349 	movw	r3, #50505	; 0xc549
    991e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9922:	781b      	ldrb	r3, [r3, #0]
    9924:	461a      	mov	r2, r3
    9926:	f24c 533c 	movw	r3, #50492	; 0xc53c
    992a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    992e:	7899      	ldrb	r1, [r3, #2]
    9930:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9938:	5499      	strb	r1, [r3, r2]
    993a:	4b20      	ldr	r3, [pc, #128]	; (99bc <send_settings+0x608>)
    993c:	781a      	ldrb	r2, [r3, #0]
    993e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9946:	781b      	ldrb	r3, [r3, #0]
    9948:	4413      	add	r3, r2
    994a:	b2da      	uxtb	r2, r3
    994c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9954:	701a      	strb	r2, [r3, #0]
    9956:	f24c 634e 	movw	r3, #50766	; 0xc64e
    995a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    995e:	781a      	ldrb	r2, [r3, #0]
    9960:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9968:	781b      	ldrb	r3, [r3, #0]
    996a:	4413      	add	r3, r2
    996c:	b2da      	uxtb	r2, r3
    996e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9976:	701a      	strb	r2, [r3, #0]
    9978:	f24c 5349 	movw	r3, #50505	; 0xc549
    997c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9980:	781b      	ldrb	r3, [r3, #0]
    9982:	3301      	adds	r3, #1
    9984:	b2da      	uxtb	r2, r3
    9986:	f24c 5349 	movw	r3, #50505	; 0xc549
    998a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    998e:	701a      	strb	r2, [r3, #0]
    9990:	f24c 5349 	movw	r3, #50505	; 0xc549
    9994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9998:	781b      	ldrb	r3, [r3, #0]
    999a:	2bff      	cmp	r3, #255	; 0xff
    999c:	d110      	bne.n	99c0 <send_settings+0x60c>
    999e:	f24c 5349 	movw	r3, #50505	; 0xc549
    99a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99a6:	2200      	movs	r2, #0
    99a8:	701a      	strb	r2, [r3, #0]
    99aa:	e009      	b.n	99c0 <send_settings+0x60c>
    99ac:	2004c539 	.word	0x2004c539
    99b0:	2004c53a 	.word	0x2004c53a
    99b4:	2004c53b 	.word	0x2004c53b
    99b8:	2004c53d 	.word	0x2004c53d
    99bc:	2004c53e 	.word	0x2004c53e
    99c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    99c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99c8:	781b      	ldrb	r3, [r3, #0]
    99ca:	461a      	mov	r2, r3
    99cc:	f24c 533c 	movw	r3, #50492	; 0xc53c
    99d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99d4:	78d9      	ldrb	r1, [r3, #3]
    99d6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    99da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99de:	5499      	strb	r1, [r3, r2]
    99e0:	4b79      	ldr	r3, [pc, #484]	; (9bc8 <send_settings+0x814>)
    99e2:	781a      	ldrb	r2, [r3, #0]
    99e4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    99e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99ec:	781b      	ldrb	r3, [r3, #0]
    99ee:	4413      	add	r3, r2
    99f0:	b2da      	uxtb	r2, r3
    99f2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    99f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99fa:	701a      	strb	r2, [r3, #0]
    99fc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a04:	781a      	ldrb	r2, [r3, #0]
    9a06:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a0e:	781b      	ldrb	r3, [r3, #0]
    9a10:	4413      	add	r3, r2
    9a12:	b2da      	uxtb	r2, r3
    9a14:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a1c:	701a      	strb	r2, [r3, #0]
    9a1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a26:	781b      	ldrb	r3, [r3, #0]
    9a28:	3301      	adds	r3, #1
    9a2a:	b2da      	uxtb	r2, r3
    9a2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a34:	701a      	strb	r2, [r3, #0]
    9a36:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a3e:	781b      	ldrb	r3, [r3, #0]
    9a40:	2bff      	cmp	r3, #255	; 0xff
    9a42:	d105      	bne.n	9a50 <send_settings+0x69c>
    9a44:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a4c:	2200      	movs	r2, #0
    9a4e:	701a      	strb	r2, [r3, #0]
    9a50:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a58:	781b      	ldrb	r3, [r3, #0]
    9a5a:	461a      	mov	r2, r3
    9a5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a64:	7819      	ldrb	r1, [r3, #0]
    9a66:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a6e:	5499      	strb	r1, [r3, r2]
    9a70:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a78:	781b      	ldrb	r3, [r3, #0]
    9a7a:	3301      	adds	r3, #1
    9a7c:	b2da      	uxtb	r2, r3
    9a7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a86:	701a      	strb	r2, [r3, #0]
    9a88:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a90:	781b      	ldrb	r3, [r3, #0]
    9a92:	2bff      	cmp	r3, #255	; 0xff
    9a94:	d105      	bne.n	9aa2 <send_settings+0x6ee>
    9a96:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a9e:	2200      	movs	r2, #0
    9aa0:	701a      	strb	r2, [r3, #0]
    9aa2:	f24c 5349 	movw	r3, #50505	; 0xc549
    9aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aaa:	781b      	ldrb	r3, [r3, #0]
    9aac:	461a      	mov	r2, r3
    9aae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ab6:	7819      	ldrb	r1, [r3, #0]
    9ab8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9abc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ac0:	5499      	strb	r1, [r3, r2]
    9ac2:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aca:	781b      	ldrb	r3, [r3, #0]
    9acc:	3301      	adds	r3, #1
    9ace:	b2da      	uxtb	r2, r3
    9ad0:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ad8:	701a      	strb	r2, [r3, #0]
    9ada:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ae2:	781b      	ldrb	r3, [r3, #0]
    9ae4:	2bff      	cmp	r3, #255	; 0xff
    9ae6:	d105      	bne.n	9af4 <send_settings+0x740>
    9ae8:	f24c 5349 	movw	r3, #50505	; 0xc549
    9aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9af0:	2200      	movs	r2, #0
    9af2:	701a      	strb	r2, [r3, #0]
    9af4:	f242 0339 	movw	r3, #8249	; 0x2039
    9af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9afc:	781b      	ldrb	r3, [r3, #0]
    9afe:	b2db      	uxtb	r3, r3
    9b00:	f003 0310 	and.w	r3, r3, #16
    9b04:	2b00      	cmp	r3, #0
    9b06:	d15a      	bne.n	9bbe <send_settings+0x80a>
    9b08:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b10:	781b      	ldrb	r3, [r3, #0]
    9b12:	b2db      	uxtb	r3, r3
    9b14:	461a      	mov	r2, r3
    9b16:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9b1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b1e:	5c9a      	ldrb	r2, [r3, r2]
    9b20:	f24c 634b 	movw	r3, #50763	; 0xc64b
    9b24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b28:	701a      	strb	r2, [r3, #0]
    9b2a:	f24c 634c 	movw	r3, #50764	; 0xc64c
    9b2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b32:	2200      	movs	r2, #0
    9b34:	701a      	strb	r2, [r3, #0]
    9b36:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b3e:	781b      	ldrb	r3, [r3, #0]
    9b40:	b2db      	uxtb	r3, r3
    9b42:	3301      	adds	r3, #1
    9b44:	b2da      	uxtb	r2, r3
    9b46:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9b4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b4e:	701a      	strb	r2, [r3, #0]
    9b50:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9b54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b58:	781b      	ldrb	r3, [r3, #0]
    9b5a:	b2db      	uxtb	r3, r3
    9b5c:	2bff      	cmp	r3, #255	; 0xff
    9b5e:	d105      	bne.n	9b6c <send_settings+0x7b8>
    9b60:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b68:	2200      	movs	r2, #0
    9b6a:	701a      	strb	r2, [r3, #0]
    9b6c:	f242 0338 	movw	r3, #8248	; 0x2038
    9b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b74:	f242 0238 	movw	r2, #8248	; 0x2038
    9b78:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9b7c:	7812      	ldrb	r2, [r2, #0]
    9b7e:	b2d2      	uxtb	r2, r2
    9b80:	f042 0201 	orr.w	r2, r2, #1
    9b84:	b2d2      	uxtb	r2, r2
    9b86:	701a      	strb	r2, [r3, #0]
    9b88:	f242 0339 	movw	r3, #8249	; 0x2039
    9b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b90:	f242 0239 	movw	r2, #8249	; 0x2039
    9b94:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9b98:	7812      	ldrb	r2, [r2, #0]
    9b9a:	b2d2      	uxtb	r2, r2
    9b9c:	f042 0210 	orr.w	r2, r2, #16
    9ba0:	b2d2      	uxtb	r2, r2
    9ba2:	701a      	strb	r2, [r3, #0]
    9ba4:	e00b      	b.n	9bbe <send_settings+0x80a>
    9ba6:	f24c 5348 	movw	r3, #50504	; 0xc548
    9baa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bae:	781b      	ldrb	r3, [r3, #0]
    9bb0:	3301      	adds	r3, #1
    9bb2:	b2da      	uxtb	r2, r3
    9bb4:	f24c 5348 	movw	r3, #50504	; 0xc548
    9bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bbc:	701a      	strb	r2, [r3, #0]
}
    9bbe:	46bd      	mov	sp, r7
    9bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9bc4:	4770      	bx	lr
    9bc6:	bf00      	nop
    9bc8:	2004c53f 	.word	0x2004c53f

00009bcc <send_desired>:
void send_desired(void){  //1000ms
    9bcc:	b480      	push	{r7}
    9bce:	af00      	add	r7, sp, #0
  if(!boot)
    9bd0:	f240 533d 	movw	r3, #1341	; 0x53d
    9bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bd8:	781b      	ldrb	r3, [r3, #0]
    9bda:	2b00      	cmp	r3, #0
    9bdc:	f040 8727 	bne.w	aa2e <send_desired+0xe62>
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9be0:	f24c 5341 	movw	r3, #50497	; 0xc541
    9be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9be8:	781a      	ldrb	r2, [r3, #0]
    9bea:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9bee:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9bf2:	fba3 1302 	umull	r1, r3, r3, r2
    9bf6:	08d9      	lsrs	r1, r3, #3
    9bf8:	460b      	mov	r3, r1
    9bfa:	009b      	lsls	r3, r3, #2
    9bfc:	440b      	add	r3, r1
    9bfe:	005b      	lsls	r3, r3, #1
    9c00:	1ad3      	subs	r3, r2, r3
    9c02:	b2db      	uxtb	r3, r3
    9c04:	2b03      	cmp	r3, #3
    9c06:	f040 8712 	bne.w	aa2e <send_desired+0xe62>
    9c0a:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c12:	781a      	ldrb	r2, [r3, #0]
    9c14:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c1c:	781b      	ldrb	r3, [r3, #0]
    9c1e:	b2db      	uxtb	r3, r3
    9c20:	429a      	cmp	r2, r3
    9c22:	d313      	bcc.n	9c4c <send_desired+0x80>
    9c24:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c2c:	781b      	ldrb	r3, [r3, #0]
    9c2e:	b2db      	uxtb	r3, r3
    9c30:	461a      	mov	r2, r3
    9c32:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c3a:	781b      	ldrb	r3, [r3, #0]
    9c3c:	1ad3      	subs	r3, r2, r3
    9c3e:	33ff      	adds	r3, #255	; 0xff
    9c40:	2b18      	cmp	r3, #24
    9c42:	bfd4      	ite	le
    9c44:	2300      	movle	r3, #0
    9c46:	2301      	movgt	r3, #1
    9c48:	b2db      	uxtb	r3, r3
    9c4a:	e011      	b.n	9c70 <send_desired+0xa4>
    9c4c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9c50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c54:	781b      	ldrb	r3, [r3, #0]
    9c56:	b2db      	uxtb	r3, r3
    9c58:	461a      	mov	r2, r3
    9c5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c62:	781b      	ldrb	r3, [r3, #0]
    9c64:	1ad3      	subs	r3, r2, r3
    9c66:	2b18      	cmp	r3, #24
    9c68:	bfd4      	ite	le
    9c6a:	2300      	movle	r3, #0
    9c6c:	2301      	movgt	r3, #1
    9c6e:	b2db      	uxtb	r3, r3
    9c70:	2b00      	cmp	r3, #0
    9c72:	f000 86d0 	beq.w	aa16 <send_desired+0xe4a>
    9c76:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c7e:	781b      	ldrb	r3, [r3, #0]
    9c80:	461a      	mov	r2, r3
    9c82:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9c86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c8a:	2105      	movs	r1, #5
    9c8c:	5499      	strb	r1, [r3, r2]
    9c8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c96:	781b      	ldrb	r3, [r3, #0]
    9c98:	3301      	adds	r3, #1
    9c9a:	b2da      	uxtb	r2, r3
    9c9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ca4:	701a      	strb	r2, [r3, #0]
    9ca6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cae:	781b      	ldrb	r3, [r3, #0]
    9cb0:	2bff      	cmp	r3, #255	; 0xff
    9cb2:	d105      	bne.n	9cc0 <send_desired+0xf4>
    9cb4:	f24c 5349 	movw	r3, #50505	; 0xc549
    9cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cbc:	2200      	movs	r2, #0
    9cbe:	701a      	strb	r2, [r3, #0]
    9cc0:	f24c 5349 	movw	r3, #50505	; 0xc549
    9cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cc8:	781b      	ldrb	r3, [r3, #0]
    9cca:	461a      	mov	r2, r3
    9ccc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cd4:	2112      	movs	r1, #18
    9cd6:	5499      	strb	r1, [r3, r2]
    9cd8:	f24c 5349 	movw	r3, #50505	; 0xc549
    9cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ce0:	781b      	ldrb	r3, [r3, #0]
    9ce2:	3301      	adds	r3, #1
    9ce4:	b2da      	uxtb	r2, r3
    9ce6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cee:	701a      	strb	r2, [r3, #0]
    9cf0:	f24c 5349 	movw	r3, #50505	; 0xc549
    9cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cf8:	781b      	ldrb	r3, [r3, #0]
    9cfa:	2bff      	cmp	r3, #255	; 0xff
    9cfc:	d105      	bne.n	9d0a <send_desired+0x13e>
    9cfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d06:	2200      	movs	r2, #0
    9d08:	701a      	strb	r2, [r3, #0]
    9d0a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d12:	2212      	movs	r2, #18
    9d14:	701a      	strb	r2, [r3, #0]
    9d16:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d1e:	2212      	movs	r2, #18
    9d20:	701a      	strb	r2, [r3, #0]
    9d22:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d2a:	781b      	ldrb	r3, [r3, #0]
    9d2c:	461a      	mov	r2, r3
    9d2e:	f64c 0374 	movw	r3, #51316	; 0xc874
    9d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d36:	7819      	ldrb	r1, [r3, #0]
    9d38:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d40:	5499      	strb	r1, [r3, r2]
    9d42:	f64c 0374 	movw	r3, #51316	; 0xc874
    9d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d4a:	781a      	ldrb	r2, [r3, #0]
    9d4c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d54:	781b      	ldrb	r3, [r3, #0]
    9d56:	4413      	add	r3, r2
    9d58:	b2da      	uxtb	r2, r3
    9d5a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9d5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d62:	701a      	strb	r2, [r3, #0]
    9d64:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9d68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d6c:	781a      	ldrb	r2, [r3, #0]
    9d6e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d76:	781b      	ldrb	r3, [r3, #0]
    9d78:	4413      	add	r3, r2
    9d7a:	b2da      	uxtb	r2, r3
    9d7c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9d80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d84:	701a      	strb	r2, [r3, #0]
    9d86:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d8e:	781b      	ldrb	r3, [r3, #0]
    9d90:	3301      	adds	r3, #1
    9d92:	b2da      	uxtb	r2, r3
    9d94:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d9c:	701a      	strb	r2, [r3, #0]
    9d9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9da2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9da6:	781b      	ldrb	r3, [r3, #0]
    9da8:	2bff      	cmp	r3, #255	; 0xff
    9daa:	d105      	bne.n	9db8 <send_desired+0x1ec>
    9dac:	f24c 5349 	movw	r3, #50505	; 0xc549
    9db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9db4:	2200      	movs	r2, #0
    9db6:	701a      	strb	r2, [r3, #0]
    9db8:	f24c 5349 	movw	r3, #50505	; 0xc549
    9dbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dc0:	781b      	ldrb	r3, [r3, #0]
    9dc2:	461a      	mov	r2, r3
    9dc4:	f64c 0374 	movw	r3, #51316	; 0xc874
    9dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dcc:	7859      	ldrb	r1, [r3, #1]
    9dce:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dd6:	5499      	strb	r1, [r3, r2]
    9dd8:	4bd1      	ldr	r3, [pc, #836]	; (a120 <send_desired+0x554>)
    9dda:	781a      	ldrb	r2, [r3, #0]
    9ddc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9de0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9de4:	781b      	ldrb	r3, [r3, #0]
    9de6:	4413      	add	r3, r2
    9de8:	b2da      	uxtb	r2, r3
    9dea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9dee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9df2:	701a      	strb	r2, [r3, #0]
    9df4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9df8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dfc:	781a      	ldrb	r2, [r3, #0]
    9dfe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e06:	781b      	ldrb	r3, [r3, #0]
    9e08:	4413      	add	r3, r2
    9e0a:	b2da      	uxtb	r2, r3
    9e0c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e14:	701a      	strb	r2, [r3, #0]
    9e16:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e1e:	781b      	ldrb	r3, [r3, #0]
    9e20:	3301      	adds	r3, #1
    9e22:	b2da      	uxtb	r2, r3
    9e24:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e2c:	701a      	strb	r2, [r3, #0]
    9e2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e36:	781b      	ldrb	r3, [r3, #0]
    9e38:	2bff      	cmp	r3, #255	; 0xff
    9e3a:	d105      	bne.n	9e48 <send_desired+0x27c>
    9e3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e44:	2200      	movs	r2, #0
    9e46:	701a      	strb	r2, [r3, #0]
    9e48:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e50:	781b      	ldrb	r3, [r3, #0]
    9e52:	461a      	mov	r2, r3
    9e54:	f64c 0374 	movw	r3, #51316	; 0xc874
    9e58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e5c:	7899      	ldrb	r1, [r3, #2]
    9e5e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e66:	5499      	strb	r1, [r3, r2]
    9e68:	4bae      	ldr	r3, [pc, #696]	; (a124 <send_desired+0x558>)
    9e6a:	781a      	ldrb	r2, [r3, #0]
    9e6c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e74:	781b      	ldrb	r3, [r3, #0]
    9e76:	4413      	add	r3, r2
    9e78:	b2da      	uxtb	r2, r3
    9e7a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e82:	701a      	strb	r2, [r3, #0]
    9e84:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e8c:	781a      	ldrb	r2, [r3, #0]
    9e8e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e96:	781b      	ldrb	r3, [r3, #0]
    9e98:	4413      	add	r3, r2
    9e9a:	b2da      	uxtb	r2, r3
    9e9c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ea4:	701a      	strb	r2, [r3, #0]
    9ea6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eae:	781b      	ldrb	r3, [r3, #0]
    9eb0:	3301      	adds	r3, #1
    9eb2:	b2da      	uxtb	r2, r3
    9eb4:	f24c 5349 	movw	r3, #50505	; 0xc549
    9eb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ebc:	701a      	strb	r2, [r3, #0]
    9ebe:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ec6:	781b      	ldrb	r3, [r3, #0]
    9ec8:	2bff      	cmp	r3, #255	; 0xff
    9eca:	d105      	bne.n	9ed8 <send_desired+0x30c>
    9ecc:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ed4:	2200      	movs	r2, #0
    9ed6:	701a      	strb	r2, [r3, #0]
    9ed8:	f24c 5349 	movw	r3, #50505	; 0xc549
    9edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ee0:	781b      	ldrb	r3, [r3, #0]
    9ee2:	461a      	mov	r2, r3
    9ee4:	f64c 0374 	movw	r3, #51316	; 0xc874
    9ee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eec:	78d9      	ldrb	r1, [r3, #3]
    9eee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9ef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ef6:	5499      	strb	r1, [r3, r2]
    9ef8:	4b8b      	ldr	r3, [pc, #556]	; (a128 <send_desired+0x55c>)
    9efa:	781a      	ldrb	r2, [r3, #0]
    9efc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f04:	781b      	ldrb	r3, [r3, #0]
    9f06:	4413      	add	r3, r2
    9f08:	b2da      	uxtb	r2, r3
    9f0a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f12:	701a      	strb	r2, [r3, #0]
    9f14:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f1c:	781a      	ldrb	r2, [r3, #0]
    9f1e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f26:	781b      	ldrb	r3, [r3, #0]
    9f28:	4413      	add	r3, r2
    9f2a:	b2da      	uxtb	r2, r3
    9f2c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f34:	701a      	strb	r2, [r3, #0]
    9f36:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f3e:	781b      	ldrb	r3, [r3, #0]
    9f40:	3301      	adds	r3, #1
    9f42:	b2da      	uxtb	r2, r3
    9f44:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f4c:	701a      	strb	r2, [r3, #0]
    9f4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f56:	781b      	ldrb	r3, [r3, #0]
    9f58:	2bff      	cmp	r3, #255	; 0xff
    9f5a:	d105      	bne.n	9f68 <send_desired+0x39c>
    9f5c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f64:	2200      	movs	r2, #0
    9f66:	701a      	strb	r2, [r3, #0]
    9f68:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f70:	781b      	ldrb	r3, [r3, #0]
    9f72:	461a      	mov	r2, r3
    9f74:	f64c 0378 	movw	r3, #51320	; 0xc878
    9f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f7c:	7819      	ldrb	r1, [r3, #0]
    9f7e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f86:	5499      	strb	r1, [r3, r2]
    9f88:	f64c 0378 	movw	r3, #51320	; 0xc878
    9f8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f90:	781a      	ldrb	r2, [r3, #0]
    9f92:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f9a:	781b      	ldrb	r3, [r3, #0]
    9f9c:	4413      	add	r3, r2
    9f9e:	b2da      	uxtb	r2, r3
    9fa0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9fa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fa8:	701a      	strb	r2, [r3, #0]
    9faa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fb2:	781a      	ldrb	r2, [r3, #0]
    9fb4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9fb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fbc:	781b      	ldrb	r3, [r3, #0]
    9fbe:	4413      	add	r3, r2
    9fc0:	b2da      	uxtb	r2, r3
    9fc2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9fc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fca:	701a      	strb	r2, [r3, #0]
    9fcc:	f24c 5349 	movw	r3, #50505	; 0xc549
    9fd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fd4:	781b      	ldrb	r3, [r3, #0]
    9fd6:	3301      	adds	r3, #1
    9fd8:	b2da      	uxtb	r2, r3
    9fda:	f24c 5349 	movw	r3, #50505	; 0xc549
    9fde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fe2:	701a      	strb	r2, [r3, #0]
    9fe4:	f24c 5349 	movw	r3, #50505	; 0xc549
    9fe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fec:	781b      	ldrb	r3, [r3, #0]
    9fee:	2bff      	cmp	r3, #255	; 0xff
    9ff0:	d105      	bne.n	9ffe <send_desired+0x432>
    9ff2:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ffa:	2200      	movs	r2, #0
    9ffc:	701a      	strb	r2, [r3, #0]
    9ffe:	f24c 5349 	movw	r3, #50505	; 0xc549
    a002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a006:	781b      	ldrb	r3, [r3, #0]
    a008:	461a      	mov	r2, r3
    a00a:	f64c 0378 	movw	r3, #51320	; 0xc878
    a00e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a012:	7859      	ldrb	r1, [r3, #1]
    a014:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a01c:	5499      	strb	r1, [r3, r2]
    a01e:	4b43      	ldr	r3, [pc, #268]	; (a12c <send_desired+0x560>)
    a020:	781a      	ldrb	r2, [r3, #0]
    a022:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a02a:	781b      	ldrb	r3, [r3, #0]
    a02c:	4413      	add	r3, r2
    a02e:	b2da      	uxtb	r2, r3
    a030:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a038:	701a      	strb	r2, [r3, #0]
    a03a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a03e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a042:	781a      	ldrb	r2, [r3, #0]
    a044:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a04c:	781b      	ldrb	r3, [r3, #0]
    a04e:	4413      	add	r3, r2
    a050:	b2da      	uxtb	r2, r3
    a052:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a05a:	701a      	strb	r2, [r3, #0]
    a05c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a064:	781b      	ldrb	r3, [r3, #0]
    a066:	3301      	adds	r3, #1
    a068:	b2da      	uxtb	r2, r3
    a06a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a06e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a072:	701a      	strb	r2, [r3, #0]
    a074:	f24c 5349 	movw	r3, #50505	; 0xc549
    a078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a07c:	781b      	ldrb	r3, [r3, #0]
    a07e:	2bff      	cmp	r3, #255	; 0xff
    a080:	d105      	bne.n	a08e <send_desired+0x4c2>
    a082:	f24c 5349 	movw	r3, #50505	; 0xc549
    a086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a08a:	2200      	movs	r2, #0
    a08c:	701a      	strb	r2, [r3, #0]
    a08e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a096:	781b      	ldrb	r3, [r3, #0]
    a098:	461a      	mov	r2, r3
    a09a:	f64c 0378 	movw	r3, #51320	; 0xc878
    a09e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0a2:	7899      	ldrb	r1, [r3, #2]
    a0a4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a0a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ac:	5499      	strb	r1, [r3, r2]
    a0ae:	4b20      	ldr	r3, [pc, #128]	; (a130 <send_desired+0x564>)
    a0b0:	781a      	ldrb	r2, [r3, #0]
    a0b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ba:	781b      	ldrb	r3, [r3, #0]
    a0bc:	4413      	add	r3, r2
    a0be:	b2da      	uxtb	r2, r3
    a0c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a0c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0c8:	701a      	strb	r2, [r3, #0]
    a0ca:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a0ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0d2:	781a      	ldrb	r2, [r3, #0]
    a0d4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a0d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0dc:	781b      	ldrb	r3, [r3, #0]
    a0de:	4413      	add	r3, r2
    a0e0:	b2da      	uxtb	r2, r3
    a0e2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a0e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ea:	701a      	strb	r2, [r3, #0]
    a0ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0f4:	781b      	ldrb	r3, [r3, #0]
    a0f6:	3301      	adds	r3, #1
    a0f8:	b2da      	uxtb	r2, r3
    a0fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a102:	701a      	strb	r2, [r3, #0]
    a104:	f24c 5349 	movw	r3, #50505	; 0xc549
    a108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a10c:	781b      	ldrb	r3, [r3, #0]
    a10e:	2bff      	cmp	r3, #255	; 0xff
    a110:	d110      	bne.n	a134 <send_desired+0x568>
    a112:	f24c 5349 	movw	r3, #50505	; 0xc549
    a116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a11a:	2200      	movs	r2, #0
    a11c:	701a      	strb	r2, [r3, #0]
    a11e:	e009      	b.n	a134 <send_desired+0x568>
    a120:	2004c875 	.word	0x2004c875
    a124:	2004c876 	.word	0x2004c876
    a128:	2004c877 	.word	0x2004c877
    a12c:	2004c879 	.word	0x2004c879
    a130:	2004c87a 	.word	0x2004c87a
    a134:	f24c 5349 	movw	r3, #50505	; 0xc549
    a138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a13c:	781b      	ldrb	r3, [r3, #0]
    a13e:	461a      	mov	r2, r3
    a140:	f64c 0378 	movw	r3, #51320	; 0xc878
    a144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a148:	78d9      	ldrb	r1, [r3, #3]
    a14a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a14e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a152:	5499      	strb	r1, [r3, r2]
    a154:	4bd3      	ldr	r3, [pc, #844]	; (a4a4 <send_desired+0x8d8>)
    a156:	781a      	ldrb	r2, [r3, #0]
    a158:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a15c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a160:	781b      	ldrb	r3, [r3, #0]
    a162:	4413      	add	r3, r2
    a164:	b2da      	uxtb	r2, r3
    a166:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a16a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a16e:	701a      	strb	r2, [r3, #0]
    a170:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a178:	781a      	ldrb	r2, [r3, #0]
    a17a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a17e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a182:	781b      	ldrb	r3, [r3, #0]
    a184:	4413      	add	r3, r2
    a186:	b2da      	uxtb	r2, r3
    a188:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a18c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a190:	701a      	strb	r2, [r3, #0]
    a192:	f24c 5349 	movw	r3, #50505	; 0xc549
    a196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a19a:	781b      	ldrb	r3, [r3, #0]
    a19c:	3301      	adds	r3, #1
    a19e:	b2da      	uxtb	r2, r3
    a1a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a1a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1a8:	701a      	strb	r2, [r3, #0]
    a1aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    a1ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1b2:	781b      	ldrb	r3, [r3, #0]
    a1b4:	2bff      	cmp	r3, #255	; 0xff
    a1b6:	d105      	bne.n	a1c4 <send_desired+0x5f8>
    a1b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1c0:	2200      	movs	r2, #0
    a1c2:	701a      	strb	r2, [r3, #0]
    a1c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    a1c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1cc:	781b      	ldrb	r3, [r3, #0]
    a1ce:	461a      	mov	r2, r3
    a1d0:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a1d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1d8:	7819      	ldrb	r1, [r3, #0]
    a1da:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a1de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1e2:	5499      	strb	r1, [r3, r2]
    a1e4:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a1e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ec:	781a      	ldrb	r2, [r3, #0]
    a1ee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a1f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1f6:	781b      	ldrb	r3, [r3, #0]
    a1f8:	4413      	add	r3, r2
    a1fa:	b2da      	uxtb	r2, r3
    a1fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a204:	701a      	strb	r2, [r3, #0]
    a206:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a20a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a20e:	781a      	ldrb	r2, [r3, #0]
    a210:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a218:	781b      	ldrb	r3, [r3, #0]
    a21a:	4413      	add	r3, r2
    a21c:	b2da      	uxtb	r2, r3
    a21e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a226:	701a      	strb	r2, [r3, #0]
    a228:	f24c 5349 	movw	r3, #50505	; 0xc549
    a22c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a230:	781b      	ldrb	r3, [r3, #0]
    a232:	3301      	adds	r3, #1
    a234:	b2da      	uxtb	r2, r3
    a236:	f24c 5349 	movw	r3, #50505	; 0xc549
    a23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a23e:	701a      	strb	r2, [r3, #0]
    a240:	f24c 5349 	movw	r3, #50505	; 0xc549
    a244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a248:	781b      	ldrb	r3, [r3, #0]
    a24a:	2bff      	cmp	r3, #255	; 0xff
    a24c:	d105      	bne.n	a25a <send_desired+0x68e>
    a24e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a256:	2200      	movs	r2, #0
    a258:	701a      	strb	r2, [r3, #0]
    a25a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a25e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a262:	781b      	ldrb	r3, [r3, #0]
    a264:	461a      	mov	r2, r3
    a266:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a26e:	7859      	ldrb	r1, [r3, #1]
    a270:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a278:	5499      	strb	r1, [r3, r2]
    a27a:	4b8b      	ldr	r3, [pc, #556]	; (a4a8 <send_desired+0x8dc>)
    a27c:	781a      	ldrb	r2, [r3, #0]
    a27e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a286:	781b      	ldrb	r3, [r3, #0]
    a288:	4413      	add	r3, r2
    a28a:	b2da      	uxtb	r2, r3
    a28c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a294:	701a      	strb	r2, [r3, #0]
    a296:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a29e:	781a      	ldrb	r2, [r3, #0]
    a2a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a2a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2a8:	781b      	ldrb	r3, [r3, #0]
    a2aa:	4413      	add	r3, r2
    a2ac:	b2da      	uxtb	r2, r3
    a2ae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a2b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2b6:	701a      	strb	r2, [r3, #0]
    a2b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2c0:	781b      	ldrb	r3, [r3, #0]
    a2c2:	3301      	adds	r3, #1
    a2c4:	b2da      	uxtb	r2, r3
    a2c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2ce:	701a      	strb	r2, [r3, #0]
    a2d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2d8:	781b      	ldrb	r3, [r3, #0]
    a2da:	2bff      	cmp	r3, #255	; 0xff
    a2dc:	d105      	bne.n	a2ea <send_desired+0x71e>
    a2de:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2e6:	2200      	movs	r2, #0
    a2e8:	701a      	strb	r2, [r3, #0]
    a2ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2f2:	781b      	ldrb	r3, [r3, #0]
    a2f4:	461a      	mov	r2, r3
    a2f6:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2fe:	7899      	ldrb	r1, [r3, #2]
    a300:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a308:	5499      	strb	r1, [r3, r2]
    a30a:	4b68      	ldr	r3, [pc, #416]	; (a4ac <send_desired+0x8e0>)
    a30c:	781a      	ldrb	r2, [r3, #0]
    a30e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a316:	781b      	ldrb	r3, [r3, #0]
    a318:	4413      	add	r3, r2
    a31a:	b2da      	uxtb	r2, r3
    a31c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a320:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a324:	701a      	strb	r2, [r3, #0]
    a326:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a32a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a32e:	781a      	ldrb	r2, [r3, #0]
    a330:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a334:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a338:	781b      	ldrb	r3, [r3, #0]
    a33a:	4413      	add	r3, r2
    a33c:	b2da      	uxtb	r2, r3
    a33e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a346:	701a      	strb	r2, [r3, #0]
    a348:	f24c 5349 	movw	r3, #50505	; 0xc549
    a34c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a350:	781b      	ldrb	r3, [r3, #0]
    a352:	3301      	adds	r3, #1
    a354:	b2da      	uxtb	r2, r3
    a356:	f24c 5349 	movw	r3, #50505	; 0xc549
    a35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a35e:	701a      	strb	r2, [r3, #0]
    a360:	f24c 5349 	movw	r3, #50505	; 0xc549
    a364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a368:	781b      	ldrb	r3, [r3, #0]
    a36a:	2bff      	cmp	r3, #255	; 0xff
    a36c:	d105      	bne.n	a37a <send_desired+0x7ae>
    a36e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a376:	2200      	movs	r2, #0
    a378:	701a      	strb	r2, [r3, #0]
    a37a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a37e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a382:	781b      	ldrb	r3, [r3, #0]
    a384:	461a      	mov	r2, r3
    a386:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a38a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a38e:	78d9      	ldrb	r1, [r3, #3]
    a390:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a398:	5499      	strb	r1, [r3, r2]
    a39a:	4b45      	ldr	r3, [pc, #276]	; (a4b0 <send_desired+0x8e4>)
    a39c:	781a      	ldrb	r2, [r3, #0]
    a39e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a3a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3a6:	781b      	ldrb	r3, [r3, #0]
    a3a8:	4413      	add	r3, r2
    a3aa:	b2da      	uxtb	r2, r3
    a3ac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a3b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3b4:	701a      	strb	r2, [r3, #0]
    a3b6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3be:	781a      	ldrb	r2, [r3, #0]
    a3c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a3c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3c8:	781b      	ldrb	r3, [r3, #0]
    a3ca:	4413      	add	r3, r2
    a3cc:	b2da      	uxtb	r2, r3
    a3ce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a3d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3d6:	701a      	strb	r2, [r3, #0]
    a3d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3e0:	781b      	ldrb	r3, [r3, #0]
    a3e2:	3301      	adds	r3, #1
    a3e4:	b2da      	uxtb	r2, r3
    a3e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ee:	701a      	strb	r2, [r3, #0]
    a3f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3f8:	781b      	ldrb	r3, [r3, #0]
    a3fa:	2bff      	cmp	r3, #255	; 0xff
    a3fc:	d105      	bne.n	a40a <send_desired+0x83e>
    a3fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    a402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a406:	2200      	movs	r2, #0
    a408:	701a      	strb	r2, [r3, #0]
    a40a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a40e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a412:	781b      	ldrb	r3, [r3, #0]
    a414:	461a      	mov	r2, r3
    a416:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a41a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a41e:	7819      	ldrb	r1, [r3, #0]
    a420:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a428:	5499      	strb	r1, [r3, r2]
    a42a:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a42e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a432:	781a      	ldrb	r2, [r3, #0]
    a434:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a43c:	781b      	ldrb	r3, [r3, #0]
    a43e:	4413      	add	r3, r2
    a440:	b2da      	uxtb	r2, r3
    a442:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a44a:	701a      	strb	r2, [r3, #0]
    a44c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a454:	781a      	ldrb	r2, [r3, #0]
    a456:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a45a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a45e:	781b      	ldrb	r3, [r3, #0]
    a460:	4413      	add	r3, r2
    a462:	b2da      	uxtb	r2, r3
    a464:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a46c:	701a      	strb	r2, [r3, #0]
    a46e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a476:	781b      	ldrb	r3, [r3, #0]
    a478:	3301      	adds	r3, #1
    a47a:	b2da      	uxtb	r2, r3
    a47c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a484:	701a      	strb	r2, [r3, #0]
    a486:	f24c 5349 	movw	r3, #50505	; 0xc549
    a48a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a48e:	781b      	ldrb	r3, [r3, #0]
    a490:	2bff      	cmp	r3, #255	; 0xff
    a492:	d10f      	bne.n	a4b4 <send_desired+0x8e8>
    a494:	f24c 5349 	movw	r3, #50505	; 0xc549
    a498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a49c:	2200      	movs	r2, #0
    a49e:	701a      	strb	r2, [r3, #0]
    a4a0:	e008      	b.n	a4b4 <send_desired+0x8e8>
    a4a2:	bf00      	nop
    a4a4:	2004c87b 	.word	0x2004c87b
    a4a8:	2004c8c1 	.word	0x2004c8c1
    a4ac:	2004c8c2 	.word	0x2004c8c2
    a4b0:	2004c8c3 	.word	0x2004c8c3
    a4b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    a4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4bc:	781b      	ldrb	r3, [r3, #0]
    a4be:	461a      	mov	r2, r3
    a4c0:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a4c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4c8:	7859      	ldrb	r1, [r3, #1]
    a4ca:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a4ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4d2:	5499      	strb	r1, [r3, r2]
    a4d4:	4bd1      	ldr	r3, [pc, #836]	; (a81c <send_desired+0xc50>)
    a4d6:	781a      	ldrb	r2, [r3, #0]
    a4d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a4dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4e0:	781b      	ldrb	r3, [r3, #0]
    a4e2:	4413      	add	r3, r2
    a4e4:	b2da      	uxtb	r2, r3
    a4e6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a4ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4ee:	701a      	strb	r2, [r3, #0]
    a4f0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a4f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4f8:	781a      	ldrb	r2, [r3, #0]
    a4fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a4fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a502:	781b      	ldrb	r3, [r3, #0]
    a504:	4413      	add	r3, r2
    a506:	b2da      	uxtb	r2, r3
    a508:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a50c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a510:	701a      	strb	r2, [r3, #0]
    a512:	f24c 5349 	movw	r3, #50505	; 0xc549
    a516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a51a:	781b      	ldrb	r3, [r3, #0]
    a51c:	3301      	adds	r3, #1
    a51e:	b2da      	uxtb	r2, r3
    a520:	f24c 5349 	movw	r3, #50505	; 0xc549
    a524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a528:	701a      	strb	r2, [r3, #0]
    a52a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a52e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a532:	781b      	ldrb	r3, [r3, #0]
    a534:	2bff      	cmp	r3, #255	; 0xff
    a536:	d105      	bne.n	a544 <send_desired+0x978>
    a538:	f24c 5349 	movw	r3, #50505	; 0xc549
    a53c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a540:	2200      	movs	r2, #0
    a542:	701a      	strb	r2, [r3, #0]
    a544:	f24c 5349 	movw	r3, #50505	; 0xc549
    a548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a54c:	781b      	ldrb	r3, [r3, #0]
    a54e:	461a      	mov	r2, r3
    a550:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a558:	7899      	ldrb	r1, [r3, #2]
    a55a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a562:	5499      	strb	r1, [r3, r2]
    a564:	4bae      	ldr	r3, [pc, #696]	; (a820 <send_desired+0xc54>)
    a566:	781a      	ldrb	r2, [r3, #0]
    a568:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a56c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a570:	781b      	ldrb	r3, [r3, #0]
    a572:	4413      	add	r3, r2
    a574:	b2da      	uxtb	r2, r3
    a576:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a57a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a57e:	701a      	strb	r2, [r3, #0]
    a580:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a588:	781a      	ldrb	r2, [r3, #0]
    a58a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a58e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a592:	781b      	ldrb	r3, [r3, #0]
    a594:	4413      	add	r3, r2
    a596:	b2da      	uxtb	r2, r3
    a598:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a59c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5a0:	701a      	strb	r2, [r3, #0]
    a5a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a5a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5aa:	781b      	ldrb	r3, [r3, #0]
    a5ac:	3301      	adds	r3, #1
    a5ae:	b2da      	uxtb	r2, r3
    a5b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a5b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5b8:	701a      	strb	r2, [r3, #0]
    a5ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    a5be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5c2:	781b      	ldrb	r3, [r3, #0]
    a5c4:	2bff      	cmp	r3, #255	; 0xff
    a5c6:	d105      	bne.n	a5d4 <send_desired+0xa08>
    a5c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a5cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5d0:	2200      	movs	r2, #0
    a5d2:	701a      	strb	r2, [r3, #0]
    a5d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    a5d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5dc:	781b      	ldrb	r3, [r3, #0]
    a5de:	461a      	mov	r2, r3
    a5e0:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a5e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5e8:	78d9      	ldrb	r1, [r3, #3]
    a5ea:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a5ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5f2:	5499      	strb	r1, [r3, r2]
    a5f4:	4b8b      	ldr	r3, [pc, #556]	; (a824 <send_desired+0xc58>)
    a5f6:	781a      	ldrb	r2, [r3, #0]
    a5f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a5fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a600:	781b      	ldrb	r3, [r3, #0]
    a602:	4413      	add	r3, r2
    a604:	b2da      	uxtb	r2, r3
    a606:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a60a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a60e:	701a      	strb	r2, [r3, #0]
    a610:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a618:	781a      	ldrb	r2, [r3, #0]
    a61a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a61e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a622:	781b      	ldrb	r3, [r3, #0]
    a624:	4413      	add	r3, r2
    a626:	b2da      	uxtb	r2, r3
    a628:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a630:	701a      	strb	r2, [r3, #0]
    a632:	f24c 5349 	movw	r3, #50505	; 0xc549
    a636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a63a:	781b      	ldrb	r3, [r3, #0]
    a63c:	3301      	adds	r3, #1
    a63e:	b2da      	uxtb	r2, r3
    a640:	f24c 5349 	movw	r3, #50505	; 0xc549
    a644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a648:	701a      	strb	r2, [r3, #0]
    a64a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a64e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a652:	781b      	ldrb	r3, [r3, #0]
    a654:	2bff      	cmp	r3, #255	; 0xff
    a656:	d105      	bne.n	a664 <send_desired+0xa98>
    a658:	f24c 5349 	movw	r3, #50505	; 0xc549
    a65c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a660:	2200      	movs	r2, #0
    a662:	701a      	strb	r2, [r3, #0]
    a664:	f24c 5349 	movw	r3, #50505	; 0xc549
    a668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a66c:	781b      	ldrb	r3, [r3, #0]
    a66e:	461a      	mov	r2, r3
    a670:	f240 5374 	movw	r3, #1396	; 0x574
    a674:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a678:	7819      	ldrb	r1, [r3, #0]
    a67a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a67e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a682:	5499      	strb	r1, [r3, r2]
    a684:	f240 5374 	movw	r3, #1396	; 0x574
    a688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a68c:	781a      	ldrb	r2, [r3, #0]
    a68e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a696:	781b      	ldrb	r3, [r3, #0]
    a698:	4413      	add	r3, r2
    a69a:	b2da      	uxtb	r2, r3
    a69c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a6a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6a4:	701a      	strb	r2, [r3, #0]
    a6a6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a6aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ae:	781a      	ldrb	r2, [r3, #0]
    a6b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a6b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6b8:	781b      	ldrb	r3, [r3, #0]
    a6ba:	4413      	add	r3, r2
    a6bc:	b2da      	uxtb	r2, r3
    a6be:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a6c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6c6:	701a      	strb	r2, [r3, #0]
    a6c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6d0:	781b      	ldrb	r3, [r3, #0]
    a6d2:	3301      	adds	r3, #1
    a6d4:	b2da      	uxtb	r2, r3
    a6d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6de:	701a      	strb	r2, [r3, #0]
    a6e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6e8:	781b      	ldrb	r3, [r3, #0]
    a6ea:	2bff      	cmp	r3, #255	; 0xff
    a6ec:	d105      	bne.n	a6fa <send_desired+0xb2e>
    a6ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6f6:	2200      	movs	r2, #0
    a6f8:	701a      	strb	r2, [r3, #0]
    a6fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a702:	781b      	ldrb	r3, [r3, #0]
    a704:	461a      	mov	r2, r3
    a706:	f240 5374 	movw	r3, #1396	; 0x574
    a70a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a70e:	7859      	ldrb	r1, [r3, #1]
    a710:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a718:	5499      	strb	r1, [r3, r2]
    a71a:	4b43      	ldr	r3, [pc, #268]	; (a828 <send_desired+0xc5c>)
    a71c:	781a      	ldrb	r2, [r3, #0]
    a71e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a726:	781b      	ldrb	r3, [r3, #0]
    a728:	4413      	add	r3, r2
    a72a:	b2da      	uxtb	r2, r3
    a72c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a734:	701a      	strb	r2, [r3, #0]
    a736:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a73a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a73e:	781a      	ldrb	r2, [r3, #0]
    a740:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a748:	781b      	ldrb	r3, [r3, #0]
    a74a:	4413      	add	r3, r2
    a74c:	b2da      	uxtb	r2, r3
    a74e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a756:	701a      	strb	r2, [r3, #0]
    a758:	f24c 5349 	movw	r3, #50505	; 0xc549
    a75c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a760:	781b      	ldrb	r3, [r3, #0]
    a762:	3301      	adds	r3, #1
    a764:	b2da      	uxtb	r2, r3
    a766:	f24c 5349 	movw	r3, #50505	; 0xc549
    a76a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a76e:	701a      	strb	r2, [r3, #0]
    a770:	f24c 5349 	movw	r3, #50505	; 0xc549
    a774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a778:	781b      	ldrb	r3, [r3, #0]
    a77a:	2bff      	cmp	r3, #255	; 0xff
    a77c:	d105      	bne.n	a78a <send_desired+0xbbe>
    a77e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a786:	2200      	movs	r2, #0
    a788:	701a      	strb	r2, [r3, #0]
    a78a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a78e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a792:	781b      	ldrb	r3, [r3, #0]
    a794:	461a      	mov	r2, r3
    a796:	f240 5374 	movw	r3, #1396	; 0x574
    a79a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a79e:	7899      	ldrb	r1, [r3, #2]
    a7a0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a7a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7a8:	5499      	strb	r1, [r3, r2]
    a7aa:	4b20      	ldr	r3, [pc, #128]	; (a82c <send_desired+0xc60>)
    a7ac:	781a      	ldrb	r2, [r3, #0]
    a7ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a7b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7b6:	781b      	ldrb	r3, [r3, #0]
    a7b8:	4413      	add	r3, r2
    a7ba:	b2da      	uxtb	r2, r3
    a7bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a7c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7c4:	701a      	strb	r2, [r3, #0]
    a7c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a7ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7ce:	781a      	ldrb	r2, [r3, #0]
    a7d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a7d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7d8:	781b      	ldrb	r3, [r3, #0]
    a7da:	4413      	add	r3, r2
    a7dc:	b2da      	uxtb	r2, r3
    a7de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a7e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7e6:	701a      	strb	r2, [r3, #0]
    a7e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7f0:	781b      	ldrb	r3, [r3, #0]
    a7f2:	3301      	adds	r3, #1
    a7f4:	b2da      	uxtb	r2, r3
    a7f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7fe:	701a      	strb	r2, [r3, #0]
    a800:	f24c 5349 	movw	r3, #50505	; 0xc549
    a804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a808:	781b      	ldrb	r3, [r3, #0]
    a80a:	2bff      	cmp	r3, #255	; 0xff
    a80c:	d110      	bne.n	a830 <send_desired+0xc64>
    a80e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a816:	2200      	movs	r2, #0
    a818:	701a      	strb	r2, [r3, #0]
    a81a:	e009      	b.n	a830 <send_desired+0xc64>
    a81c:	2004c8c5 	.word	0x2004c8c5
    a820:	2004c8c6 	.word	0x2004c8c6
    a824:	2004c8c7 	.word	0x2004c8c7
    a828:	20000575 	.word	0x20000575
    a82c:	20000576 	.word	0x20000576
    a830:	f24c 5349 	movw	r3, #50505	; 0xc549
    a834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a838:	781b      	ldrb	r3, [r3, #0]
    a83a:	461a      	mov	r2, r3
    a83c:	f240 5374 	movw	r3, #1396	; 0x574
    a840:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a844:	78d9      	ldrb	r1, [r3, #3]
    a846:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a84a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a84e:	5499      	strb	r1, [r3, r2]
    a850:	4b79      	ldr	r3, [pc, #484]	; (aa38 <send_desired+0xe6c>)
    a852:	781a      	ldrb	r2, [r3, #0]
    a854:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a85c:	781b      	ldrb	r3, [r3, #0]
    a85e:	4413      	add	r3, r2
    a860:	b2da      	uxtb	r2, r3
    a862:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a86a:	701a      	strb	r2, [r3, #0]
    a86c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a874:	781a      	ldrb	r2, [r3, #0]
    a876:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a87a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a87e:	781b      	ldrb	r3, [r3, #0]
    a880:	4413      	add	r3, r2
    a882:	b2da      	uxtb	r2, r3
    a884:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a888:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a88c:	701a      	strb	r2, [r3, #0]
    a88e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a896:	781b      	ldrb	r3, [r3, #0]
    a898:	3301      	adds	r3, #1
    a89a:	b2da      	uxtb	r2, r3
    a89c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8a4:	701a      	strb	r2, [r3, #0]
    a8a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8ae:	781b      	ldrb	r3, [r3, #0]
    a8b0:	2bff      	cmp	r3, #255	; 0xff
    a8b2:	d105      	bne.n	a8c0 <send_desired+0xcf4>
    a8b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8bc:	2200      	movs	r2, #0
    a8be:	701a      	strb	r2, [r3, #0]
    a8c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8c8:	781b      	ldrb	r3, [r3, #0]
    a8ca:	461a      	mov	r2, r3
    a8cc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a8d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8d4:	7819      	ldrb	r1, [r3, #0]
    a8d6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8de:	5499      	strb	r1, [r3, r2]
    a8e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8e8:	781b      	ldrb	r3, [r3, #0]
    a8ea:	3301      	adds	r3, #1
    a8ec:	b2da      	uxtb	r2, r3
    a8ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8f6:	701a      	strb	r2, [r3, #0]
    a8f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a900:	781b      	ldrb	r3, [r3, #0]
    a902:	2bff      	cmp	r3, #255	; 0xff
    a904:	d105      	bne.n	a912 <send_desired+0xd46>
    a906:	f24c 5349 	movw	r3, #50505	; 0xc549
    a90a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a90e:	2200      	movs	r2, #0
    a910:	701a      	strb	r2, [r3, #0]
    a912:	f24c 5349 	movw	r3, #50505	; 0xc549
    a916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a91a:	781b      	ldrb	r3, [r3, #0]
    a91c:	461a      	mov	r2, r3
    a91e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a926:	7819      	ldrb	r1, [r3, #0]
    a928:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a92c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a930:	5499      	strb	r1, [r3, r2]
    a932:	f24c 5349 	movw	r3, #50505	; 0xc549
    a936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a93a:	781b      	ldrb	r3, [r3, #0]
    a93c:	3301      	adds	r3, #1
    a93e:	b2da      	uxtb	r2, r3
    a940:	f24c 5349 	movw	r3, #50505	; 0xc549
    a944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a948:	701a      	strb	r2, [r3, #0]
    a94a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a94e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a952:	781b      	ldrb	r3, [r3, #0]
    a954:	2bff      	cmp	r3, #255	; 0xff
    a956:	d105      	bne.n	a964 <send_desired+0xd98>
    a958:	f24c 5349 	movw	r3, #50505	; 0xc549
    a95c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a960:	2200      	movs	r2, #0
    a962:	701a      	strb	r2, [r3, #0]
    a964:	f242 0339 	movw	r3, #8249	; 0x2039
    a968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a96c:	781b      	ldrb	r3, [r3, #0]
    a96e:	b2db      	uxtb	r3, r3
    a970:	f003 0310 	and.w	r3, r3, #16
    a974:	2b00      	cmp	r3, #0
    a976:	d15a      	bne.n	aa2e <send_desired+0xe62>
    a978:	f24c 534a 	movw	r3, #50506	; 0xc54a
    a97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a980:	781b      	ldrb	r3, [r3, #0]
    a982:	b2db      	uxtb	r3, r3
    a984:	461a      	mov	r2, r3
    a986:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a98a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a98e:	5c9a      	ldrb	r2, [r3, r2]
    a990:	f24c 634b 	movw	r3, #50763	; 0xc64b
    a994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a998:	701a      	strb	r2, [r3, #0]
    a99a:	f24c 634c 	movw	r3, #50764	; 0xc64c
    a99e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9a2:	2200      	movs	r2, #0
    a9a4:	701a      	strb	r2, [r3, #0]
    a9a6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    a9aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9ae:	781b      	ldrb	r3, [r3, #0]
    a9b0:	b2db      	uxtb	r3, r3
    a9b2:	3301      	adds	r3, #1
    a9b4:	b2da      	uxtb	r2, r3
    a9b6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    a9ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9be:	701a      	strb	r2, [r3, #0]
    a9c0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    a9c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9c8:	781b      	ldrb	r3, [r3, #0]
    a9ca:	b2db      	uxtb	r3, r3
    a9cc:	2bff      	cmp	r3, #255	; 0xff
    a9ce:	d105      	bne.n	a9dc <send_desired+0xe10>
    a9d0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    a9d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9d8:	2200      	movs	r2, #0
    a9da:	701a      	strb	r2, [r3, #0]
    a9dc:	f242 0338 	movw	r3, #8248	; 0x2038
    a9e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9e4:	f242 0238 	movw	r2, #8248	; 0x2038
    a9e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a9ec:	7812      	ldrb	r2, [r2, #0]
    a9ee:	b2d2      	uxtb	r2, r2
    a9f0:	f042 0201 	orr.w	r2, r2, #1
    a9f4:	b2d2      	uxtb	r2, r2
    a9f6:	701a      	strb	r2, [r3, #0]
    a9f8:	f242 0339 	movw	r3, #8249	; 0x2039
    a9fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa00:	f242 0239 	movw	r2, #8249	; 0x2039
    aa04:	f2c2 0200 	movt	r2, #8192	; 0x2000
    aa08:	7812      	ldrb	r2, [r2, #0]
    aa0a:	b2d2      	uxtb	r2, r2
    aa0c:	f042 0210 	orr.w	r2, r2, #16
    aa10:	b2d2      	uxtb	r2, r2
    aa12:	701a      	strb	r2, [r3, #0]
    aa14:	e00b      	b.n	aa2e <send_desired+0xe62>
    aa16:	f24c 5348 	movw	r3, #50504	; 0xc548
    aa1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa1e:	781b      	ldrb	r3, [r3, #0]
    aa20:	3301      	adds	r3, #1
    aa22:	b2da      	uxtb	r2, r3
    aa24:	f24c 5348 	movw	r3, #50504	; 0xc548
    aa28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa2c:	701a      	strb	r2, [r3, #0]
}
    aa2e:	46bd      	mov	sp, r7
    aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa34:	4770      	bx	lr
    aa36:	bf00      	nop
    aa38:	20000577 	.word	0x20000577

0000aa3c <send_bat>:
void send_bat(void){  //2000ms
    aa3c:	b480      	push	{r7}
    aa3e:	af00      	add	r7, sp, #0
  if(!boot)
    aa40:	f240 533d 	movw	r3, #1341	; 0x53d
    aa44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa48:	781b      	ldrb	r3, [r3, #0]
    aa4a:	2b00      	cmp	r3, #0
    aa4c:	f040 83af 	bne.w	b1ae <send_bat+0x772>
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    aa50:	f24c 5341 	movw	r3, #50497	; 0xc541
    aa54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa58:	781a      	ldrb	r2, [r3, #0]
    aa5a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    aa5e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    aa62:	fba3 1302 	umull	r1, r3, r3, r2
    aa66:	0919      	lsrs	r1, r3, #4
    aa68:	460b      	mov	r3, r1
    aa6a:	009b      	lsls	r3, r3, #2
    aa6c:	440b      	add	r3, r1
    aa6e:	009b      	lsls	r3, r3, #2
    aa70:	1ad3      	subs	r3, r2, r3
    aa72:	b2db      	uxtb	r3, r3
    aa74:	2b08      	cmp	r3, #8
    aa76:	f040 839a 	bne.w	b1ae <send_bat+0x772>
    aa7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa82:	781a      	ldrb	r2, [r3, #0]
    aa84:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aa88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa8c:	781b      	ldrb	r3, [r3, #0]
    aa8e:	b2db      	uxtb	r3, r3
    aa90:	429a      	cmp	r2, r3
    aa92:	d313      	bcc.n	aabc <send_bat+0x80>
    aa94:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aa98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa9c:	781b      	ldrb	r3, [r3, #0]
    aa9e:	b2db      	uxtb	r3, r3
    aaa0:	461a      	mov	r2, r3
    aaa2:	f24c 5349 	movw	r3, #50505	; 0xc549
    aaa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaaa:	781b      	ldrb	r3, [r3, #0]
    aaac:	1ad3      	subs	r3, r2, r3
    aaae:	33ff      	adds	r3, #255	; 0xff
    aab0:	2b0c      	cmp	r3, #12
    aab2:	bfd4      	ite	le
    aab4:	2300      	movle	r3, #0
    aab6:	2301      	movgt	r3, #1
    aab8:	b2db      	uxtb	r3, r3
    aaba:	e011      	b.n	aae0 <send_bat+0xa4>
    aabc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aac4:	781b      	ldrb	r3, [r3, #0]
    aac6:	b2db      	uxtb	r3, r3
    aac8:	461a      	mov	r2, r3
    aaca:	f24c 5349 	movw	r3, #50505	; 0xc549
    aace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aad2:	781b      	ldrb	r3, [r3, #0]
    aad4:	1ad3      	subs	r3, r2, r3
    aad6:	2b0c      	cmp	r3, #12
    aad8:	bfd4      	ite	le
    aada:	2300      	movle	r3, #0
    aadc:	2301      	movgt	r3, #1
    aade:	b2db      	uxtb	r3, r3
    aae0:	2b00      	cmp	r3, #0
    aae2:	f000 8358 	beq.w	b196 <send_bat+0x75a>
    aae6:	f24c 5349 	movw	r3, #50505	; 0xc549
    aaea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaee:	781b      	ldrb	r3, [r3, #0]
    aaf0:	461a      	mov	r2, r3
    aaf2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    aaf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aafa:	2105      	movs	r1, #5
    aafc:	5499      	strb	r1, [r3, r2]
    aafe:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab06:	781b      	ldrb	r3, [r3, #0]
    ab08:	3301      	adds	r3, #1
    ab0a:	b2da      	uxtb	r2, r3
    ab0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab14:	701a      	strb	r2, [r3, #0]
    ab16:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab1e:	781b      	ldrb	r3, [r3, #0]
    ab20:	2bff      	cmp	r3, #255	; 0xff
    ab22:	d105      	bne.n	ab30 <send_bat+0xf4>
    ab24:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab2c:	2200      	movs	r2, #0
    ab2e:	701a      	strb	r2, [r3, #0]
    ab30:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab38:	781b      	ldrb	r3, [r3, #0]
    ab3a:	461a      	mov	r2, r3
    ab3c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ab40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab44:	210c      	movs	r1, #12
    ab46:	5499      	strb	r1, [r3, r2]
    ab48:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab50:	781b      	ldrb	r3, [r3, #0]
    ab52:	3301      	adds	r3, #1
    ab54:	b2da      	uxtb	r2, r3
    ab56:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab5e:	701a      	strb	r2, [r3, #0]
    ab60:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab68:	781b      	ldrb	r3, [r3, #0]
    ab6a:	2bff      	cmp	r3, #255	; 0xff
    ab6c:	d105      	bne.n	ab7a <send_bat+0x13e>
    ab6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab76:	2200      	movs	r2, #0
    ab78:	701a      	strb	r2, [r3, #0]
    ab7a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ab7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab82:	220c      	movs	r2, #12
    ab84:	701a      	strb	r2, [r3, #0]
    ab86:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ab8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab8e:	220c      	movs	r2, #12
    ab90:	701a      	strb	r2, [r3, #0]
    ab92:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab9a:	781b      	ldrb	r3, [r3, #0]
    ab9c:	461a      	mov	r2, r3
    ab9e:	f24c 5332 	movw	r3, #50482	; 0xc532
    aba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aba6:	7819      	ldrb	r1, [r3, #0]
    aba8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    abac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abb0:	5499      	strb	r1, [r3, r2]
    abb2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    abb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abba:	781a      	ldrb	r2, [r3, #0]
    abbc:	f24c 5332 	movw	r3, #50482	; 0xc532
    abc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abc4:	781b      	ldrb	r3, [r3, #0]
    abc6:	4413      	add	r3, r2
    abc8:	b2da      	uxtb	r2, r3
    abca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    abce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abd2:	701a      	strb	r2, [r3, #0]
    abd4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    abd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abdc:	781a      	ldrb	r2, [r3, #0]
    abde:	f24c 634d 	movw	r3, #50765	; 0xc64d
    abe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abe6:	781b      	ldrb	r3, [r3, #0]
    abe8:	4413      	add	r3, r2
    abea:	b2da      	uxtb	r2, r3
    abec:	f24c 634e 	movw	r3, #50766	; 0xc64e
    abf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abf4:	701a      	strb	r2, [r3, #0]
    abf6:	f24c 5349 	movw	r3, #50505	; 0xc549
    abfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abfe:	781b      	ldrb	r3, [r3, #0]
    ac00:	3301      	adds	r3, #1
    ac02:	b2da      	uxtb	r2, r3
    ac04:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac0c:	701a      	strb	r2, [r3, #0]
    ac0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac16:	781b      	ldrb	r3, [r3, #0]
    ac18:	2bff      	cmp	r3, #255	; 0xff
    ac1a:	d105      	bne.n	ac28 <send_bat+0x1ec>
    ac1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac24:	2200      	movs	r2, #0
    ac26:	701a      	strb	r2, [r3, #0]
    ac28:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac30:	781b      	ldrb	r3, [r3, #0]
    ac32:	461a      	mov	r2, r3
    ac34:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    ac38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac3c:	7819      	ldrb	r1, [r3, #0]
    ac3e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ac42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac46:	5499      	strb	r1, [r3, r2]
    ac48:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    ac4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac50:	781a      	ldrb	r2, [r3, #0]
    ac52:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ac56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac5a:	781b      	ldrb	r3, [r3, #0]
    ac5c:	4413      	add	r3, r2
    ac5e:	b2da      	uxtb	r2, r3
    ac60:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ac64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac68:	701a      	strb	r2, [r3, #0]
    ac6a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ac6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac72:	781a      	ldrb	r2, [r3, #0]
    ac74:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ac78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac7c:	781b      	ldrb	r3, [r3, #0]
    ac7e:	4413      	add	r3, r2
    ac80:	b2da      	uxtb	r2, r3
    ac82:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ac86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac8a:	701a      	strb	r2, [r3, #0]
    ac8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac94:	781b      	ldrb	r3, [r3, #0]
    ac96:	3301      	adds	r3, #1
    ac98:	b2da      	uxtb	r2, r3
    ac9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aca2:	701a      	strb	r2, [r3, #0]
    aca4:	f24c 5349 	movw	r3, #50505	; 0xc549
    aca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acac:	781b      	ldrb	r3, [r3, #0]
    acae:	2bff      	cmp	r3, #255	; 0xff
    acb0:	d105      	bne.n	acbe <send_bat+0x282>
    acb2:	f24c 5349 	movw	r3, #50505	; 0xc549
    acb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acba:	2200      	movs	r2, #0
    acbc:	701a      	strb	r2, [r3, #0]
    acbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    acc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acc6:	781b      	ldrb	r3, [r3, #0]
    acc8:	461a      	mov	r2, r3
    acca:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    acce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acd2:	7859      	ldrb	r1, [r3, #1]
    acd4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    acd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acdc:	5499      	strb	r1, [r3, r2]
    acde:	4bd5      	ldr	r3, [pc, #852]	; (b034 <send_bat+0x5f8>)
    ace0:	781a      	ldrb	r2, [r3, #0]
    ace2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ace6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acea:	781b      	ldrb	r3, [r3, #0]
    acec:	4413      	add	r3, r2
    acee:	b2da      	uxtb	r2, r3
    acf0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    acf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acf8:	701a      	strb	r2, [r3, #0]
    acfa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    acfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad02:	781a      	ldrb	r2, [r3, #0]
    ad04:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad0c:	781b      	ldrb	r3, [r3, #0]
    ad0e:	4413      	add	r3, r2
    ad10:	b2da      	uxtb	r2, r3
    ad12:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ad16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad1a:	701a      	strb	r2, [r3, #0]
    ad1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad24:	781b      	ldrb	r3, [r3, #0]
    ad26:	3301      	adds	r3, #1
    ad28:	b2da      	uxtb	r2, r3
    ad2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad32:	701a      	strb	r2, [r3, #0]
    ad34:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad3c:	781b      	ldrb	r3, [r3, #0]
    ad3e:	2bff      	cmp	r3, #255	; 0xff
    ad40:	d105      	bne.n	ad4e <send_bat+0x312>
    ad42:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad4a:	2200      	movs	r2, #0
    ad4c:	701a      	strb	r2, [r3, #0]
    ad4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad56:	781b      	ldrb	r3, [r3, #0]
    ad58:	461a      	mov	r2, r3
    ad5a:	f24c 5335 	movw	r3, #50485	; 0xc535
    ad5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad62:	7819      	ldrb	r1, [r3, #0]
    ad64:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ad68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad6c:	5499      	strb	r1, [r3, r2]
    ad6e:	f24c 5335 	movw	r3, #50485	; 0xc535
    ad72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad76:	781a      	ldrb	r2, [r3, #0]
    ad78:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad80:	781b      	ldrb	r3, [r3, #0]
    ad82:	4413      	add	r3, r2
    ad84:	b2da      	uxtb	r2, r3
    ad86:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad8e:	701a      	strb	r2, [r3, #0]
    ad90:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ad94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad98:	781a      	ldrb	r2, [r3, #0]
    ad9a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ada2:	781b      	ldrb	r3, [r3, #0]
    ada4:	4413      	add	r3, r2
    ada6:	b2da      	uxtb	r2, r3
    ada8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    adac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adb0:	701a      	strb	r2, [r3, #0]
    adb2:	f24c 5349 	movw	r3, #50505	; 0xc549
    adb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adba:	781b      	ldrb	r3, [r3, #0]
    adbc:	3301      	adds	r3, #1
    adbe:	b2da      	uxtb	r2, r3
    adc0:	f24c 5349 	movw	r3, #50505	; 0xc549
    adc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adc8:	701a      	strb	r2, [r3, #0]
    adca:	f24c 5349 	movw	r3, #50505	; 0xc549
    adce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    add2:	781b      	ldrb	r3, [r3, #0]
    add4:	2bff      	cmp	r3, #255	; 0xff
    add6:	d105      	bne.n	ade4 <send_bat+0x3a8>
    add8:	f24c 5349 	movw	r3, #50505	; 0xc549
    addc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ade0:	2200      	movs	r2, #0
    ade2:	701a      	strb	r2, [r3, #0]
    ade4:	f24c 5349 	movw	r3, #50505	; 0xc549
    ade8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adec:	781b      	ldrb	r3, [r3, #0]
    adee:	461a      	mov	r2, r3
    adf0:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
    adf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adf8:	7819      	ldrb	r1, [r3, #0]
    adfa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    adfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae02:	5499      	strb	r1, [r3, r2]
    ae04:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
    ae08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae0c:	781a      	ldrb	r2, [r3, #0]
    ae0e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae16:	781b      	ldrb	r3, [r3, #0]
    ae18:	4413      	add	r3, r2
    ae1a:	b2da      	uxtb	r2, r3
    ae1c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae24:	701a      	strb	r2, [r3, #0]
    ae26:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ae2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae2e:	781a      	ldrb	r2, [r3, #0]
    ae30:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae38:	781b      	ldrb	r3, [r3, #0]
    ae3a:	4413      	add	r3, r2
    ae3c:	b2da      	uxtb	r2, r3
    ae3e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ae42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae46:	701a      	strb	r2, [r3, #0]
    ae48:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae50:	781b      	ldrb	r3, [r3, #0]
    ae52:	3301      	adds	r3, #1
    ae54:	b2da      	uxtb	r2, r3
    ae56:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae5e:	701a      	strb	r2, [r3, #0]
    ae60:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae68:	781b      	ldrb	r3, [r3, #0]
    ae6a:	2bff      	cmp	r3, #255	; 0xff
    ae6c:	d105      	bne.n	ae7a <send_bat+0x43e>
    ae6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae76:	2200      	movs	r2, #0
    ae78:	701a      	strb	r2, [r3, #0]
    ae7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae82:	781b      	ldrb	r3, [r3, #0]
    ae84:	461a      	mov	r2, r3
    ae86:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
    ae8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae8e:	7859      	ldrb	r1, [r3, #1]
    ae90:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ae94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae98:	5499      	strb	r1, [r3, r2]
    ae9a:	4b67      	ldr	r3, [pc, #412]	; (b038 <send_bat+0x5fc>)
    ae9c:	781a      	ldrb	r2, [r3, #0]
    ae9e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    aea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aea6:	781b      	ldrb	r3, [r3, #0]
    aea8:	4413      	add	r3, r2
    aeaa:	b2da      	uxtb	r2, r3
    aeac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    aeb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeb4:	701a      	strb	r2, [r3, #0]
    aeb6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    aeba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aebe:	781a      	ldrb	r2, [r3, #0]
    aec0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    aec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aec8:	781b      	ldrb	r3, [r3, #0]
    aeca:	4413      	add	r3, r2
    aecc:	b2da      	uxtb	r2, r3
    aece:	f24c 634e 	movw	r3, #50766	; 0xc64e
    aed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aed6:	701a      	strb	r2, [r3, #0]
    aed8:	f24c 5349 	movw	r3, #50505	; 0xc549
    aedc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aee0:	781b      	ldrb	r3, [r3, #0]
    aee2:	3301      	adds	r3, #1
    aee4:	b2da      	uxtb	r2, r3
    aee6:	f24c 5349 	movw	r3, #50505	; 0xc549
    aeea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeee:	701a      	strb	r2, [r3, #0]
    aef0:	f24c 5349 	movw	r3, #50505	; 0xc549
    aef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aef8:	781b      	ldrb	r3, [r3, #0]
    aefa:	2bff      	cmp	r3, #255	; 0xff
    aefc:	d105      	bne.n	af0a <send_bat+0x4ce>
    aefe:	f24c 5349 	movw	r3, #50505	; 0xc549
    af02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af06:	2200      	movs	r2, #0
    af08:	701a      	strb	r2, [r3, #0]
    af0a:	f24c 5349 	movw	r3, #50505	; 0xc549
    af0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af12:	781b      	ldrb	r3, [r3, #0]
    af14:	461a      	mov	r2, r3
    af16:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    af1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af1e:	7819      	ldrb	r1, [r3, #0]
    af20:	f24c 534c 	movw	r3, #50508	; 0xc54c
    af24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af28:	5499      	strb	r1, [r3, r2]
    af2a:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    af2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af32:	781a      	ldrb	r2, [r3, #0]
    af34:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af3c:	781b      	ldrb	r3, [r3, #0]
    af3e:	4413      	add	r3, r2
    af40:	b2da      	uxtb	r2, r3
    af42:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af4a:	701a      	strb	r2, [r3, #0]
    af4c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    af50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af54:	781a      	ldrb	r2, [r3, #0]
    af56:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af5e:	781b      	ldrb	r3, [r3, #0]
    af60:	4413      	add	r3, r2
    af62:	b2da      	uxtb	r2, r3
    af64:	f24c 634e 	movw	r3, #50766	; 0xc64e
    af68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af6c:	701a      	strb	r2, [r3, #0]
    af6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    af72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af76:	781b      	ldrb	r3, [r3, #0]
    af78:	3301      	adds	r3, #1
    af7a:	b2da      	uxtb	r2, r3
    af7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    af80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af84:	701a      	strb	r2, [r3, #0]
    af86:	f24c 5349 	movw	r3, #50505	; 0xc549
    af8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af8e:	781b      	ldrb	r3, [r3, #0]
    af90:	2bff      	cmp	r3, #255	; 0xff
    af92:	d105      	bne.n	afa0 <send_bat+0x564>
    af94:	f24c 5349 	movw	r3, #50505	; 0xc549
    af98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af9c:	2200      	movs	r2, #0
    af9e:	701a      	strb	r2, [r3, #0]
    afa0:	f24c 5349 	movw	r3, #50505	; 0xc549
    afa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afa8:	781b      	ldrb	r3, [r3, #0]
    afaa:	461a      	mov	r2, r3
    afac:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    afb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afb4:	7859      	ldrb	r1, [r3, #1]
    afb6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    afba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afbe:	5499      	strb	r1, [r3, r2]
    afc0:	4b1e      	ldr	r3, [pc, #120]	; (b03c <send_bat+0x600>)
    afc2:	781a      	ldrb	r2, [r3, #0]
    afc4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    afc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afcc:	781b      	ldrb	r3, [r3, #0]
    afce:	4413      	add	r3, r2
    afd0:	b2da      	uxtb	r2, r3
    afd2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    afd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afda:	701a      	strb	r2, [r3, #0]
    afdc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    afe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afe4:	781a      	ldrb	r2, [r3, #0]
    afe6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    afea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afee:	781b      	ldrb	r3, [r3, #0]
    aff0:	4413      	add	r3, r2
    aff2:	b2da      	uxtb	r2, r3
    aff4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    aff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    affc:	701a      	strb	r2, [r3, #0]
    affe:	f24c 5349 	movw	r3, #50505	; 0xc549
    b002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b006:	781b      	ldrb	r3, [r3, #0]
    b008:	3301      	adds	r3, #1
    b00a:	b2da      	uxtb	r2, r3
    b00c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b014:	701a      	strb	r2, [r3, #0]
    b016:	f24c 5349 	movw	r3, #50505	; 0xc549
    b01a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b01e:	781b      	ldrb	r3, [r3, #0]
    b020:	2bff      	cmp	r3, #255	; 0xff
    b022:	d10d      	bne.n	b040 <send_bat+0x604>
    b024:	f24c 5349 	movw	r3, #50505	; 0xc549
    b028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b02c:	2200      	movs	r2, #0
    b02e:	701a      	strb	r2, [r3, #0]
    b030:	e006      	b.n	b040 <send_bat+0x604>
    b032:	bf00      	nop
    b034:	2004cb2d 	.word	0x2004cb2d
    b038:	2004c8b7 	.word	0x2004c8b7
    b03c:	2004c8b5 	.word	0x2004c8b5
    b040:	f24c 5349 	movw	r3, #50505	; 0xc549
    b044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b048:	781b      	ldrb	r3, [r3, #0]
    b04a:	461a      	mov	r2, r3
    b04c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b054:	7819      	ldrb	r1, [r3, #0]
    b056:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b05a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b05e:	5499      	strb	r1, [r3, r2]
    b060:	f24c 5349 	movw	r3, #50505	; 0xc549
    b064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b068:	781b      	ldrb	r3, [r3, #0]
    b06a:	3301      	adds	r3, #1
    b06c:	b2da      	uxtb	r2, r3
    b06e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b076:	701a      	strb	r2, [r3, #0]
    b078:	f24c 5349 	movw	r3, #50505	; 0xc549
    b07c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b080:	781b      	ldrb	r3, [r3, #0]
    b082:	2bff      	cmp	r3, #255	; 0xff
    b084:	d105      	bne.n	b092 <send_bat+0x656>
    b086:	f24c 5349 	movw	r3, #50505	; 0xc549
    b08a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b08e:	2200      	movs	r2, #0
    b090:	701a      	strb	r2, [r3, #0]
    b092:	f24c 5349 	movw	r3, #50505	; 0xc549
    b096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b09a:	781b      	ldrb	r3, [r3, #0]
    b09c:	461a      	mov	r2, r3
    b09e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b0a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0a6:	7819      	ldrb	r1, [r3, #0]
    b0a8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b0ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0b0:	5499      	strb	r1, [r3, r2]
    b0b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ba:	781b      	ldrb	r3, [r3, #0]
    b0bc:	3301      	adds	r3, #1
    b0be:	b2da      	uxtb	r2, r3
    b0c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b0c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0c8:	701a      	strb	r2, [r3, #0]
    b0ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    b0ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0d2:	781b      	ldrb	r3, [r3, #0]
    b0d4:	2bff      	cmp	r3, #255	; 0xff
    b0d6:	d105      	bne.n	b0e4 <send_bat+0x6a8>
    b0d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b0dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0e0:	2200      	movs	r2, #0
    b0e2:	701a      	strb	r2, [r3, #0]
    b0e4:	f242 0339 	movw	r3, #8249	; 0x2039
    b0e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0ec:	781b      	ldrb	r3, [r3, #0]
    b0ee:	b2db      	uxtb	r3, r3
    b0f0:	f003 0310 	and.w	r3, r3, #16
    b0f4:	2b00      	cmp	r3, #0
    b0f6:	d15a      	bne.n	b1ae <send_bat+0x772>
    b0f8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b0fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b100:	781b      	ldrb	r3, [r3, #0]
    b102:	b2db      	uxtb	r3, r3
    b104:	461a      	mov	r2, r3
    b106:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b10a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b10e:	5c9a      	ldrb	r2, [r3, r2]
    b110:	f24c 634b 	movw	r3, #50763	; 0xc64b
    b114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b118:	701a      	strb	r2, [r3, #0]
    b11a:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b11e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b122:	2200      	movs	r2, #0
    b124:	701a      	strb	r2, [r3, #0]
    b126:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b12a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b12e:	781b      	ldrb	r3, [r3, #0]
    b130:	b2db      	uxtb	r3, r3
    b132:	3301      	adds	r3, #1
    b134:	b2da      	uxtb	r2, r3
    b136:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b13a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b13e:	701a      	strb	r2, [r3, #0]
    b140:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b148:	781b      	ldrb	r3, [r3, #0]
    b14a:	b2db      	uxtb	r3, r3
    b14c:	2bff      	cmp	r3, #255	; 0xff
    b14e:	d105      	bne.n	b15c <send_bat+0x720>
    b150:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b158:	2200      	movs	r2, #0
    b15a:	701a      	strb	r2, [r3, #0]
    b15c:	f242 0338 	movw	r3, #8248	; 0x2038
    b160:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b164:	f242 0238 	movw	r2, #8248	; 0x2038
    b168:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b16c:	7812      	ldrb	r2, [r2, #0]
    b16e:	b2d2      	uxtb	r2, r2
    b170:	f042 0201 	orr.w	r2, r2, #1
    b174:	b2d2      	uxtb	r2, r2
    b176:	701a      	strb	r2, [r3, #0]
    b178:	f242 0339 	movw	r3, #8249	; 0x2039
    b17c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b180:	f242 0239 	movw	r2, #8249	; 0x2039
    b184:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b188:	7812      	ldrb	r2, [r2, #0]
    b18a:	b2d2      	uxtb	r2, r2
    b18c:	f042 0210 	orr.w	r2, r2, #16
    b190:	b2d2      	uxtb	r2, r2
    b192:	701a      	strb	r2, [r3, #0]
    b194:	e00b      	b.n	b1ae <send_bat+0x772>
    b196:	f24c 5348 	movw	r3, #50504	; 0xc548
    b19a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b19e:	781b      	ldrb	r3, [r3, #0]
    b1a0:	3301      	adds	r3, #1
    b1a2:	b2da      	uxtb	r2, r3
    b1a4:	f24c 5348 	movw	r3, #50504	; 0xc548
    b1a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1ac:	701a      	strb	r2, [r3, #0]
}
    b1ae:	46bd      	mov	sp, r7
    b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1b4:	4770      	bx	lr
    b1b6:	bf00      	nop

0000b1b8 <send_climb>:
void send_climb(void){  //2000ms
    b1b8:	b480      	push	{r7}
    b1ba:	af00      	add	r7, sp, #0
  if(!boot)
    b1bc:	f240 533d 	movw	r3, #1341	; 0x53d
    b1c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1c4:	781b      	ldrb	r3, [r3, #0]
    b1c6:	2b00      	cmp	r3, #0
    b1c8:	f040 8569 	bne.w	bc9e <send_climb+0xae6>
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    b1cc:	f24c 5341 	movw	r3, #50497	; 0xc541
    b1d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1d4:	781a      	ldrb	r2, [r3, #0]
    b1d6:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    b1da:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    b1de:	fba3 1302 	umull	r1, r3, r3, r2
    b1e2:	0919      	lsrs	r1, r3, #4
    b1e4:	460b      	mov	r3, r1
    b1e6:	009b      	lsls	r3, r3, #2
    b1e8:	440b      	add	r3, r1
    b1ea:	009b      	lsls	r3, r3, #2
    b1ec:	1ad3      	subs	r3, r2, r3
    b1ee:	b2db      	uxtb	r3, r3
    b1f0:	2b12      	cmp	r3, #18
    b1f2:	f040 8554 	bne.w	bc9e <send_climb+0xae6>
    b1f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b1fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1fe:	781a      	ldrb	r2, [r3, #0]
    b200:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b208:	781b      	ldrb	r3, [r3, #0]
    b20a:	b2db      	uxtb	r3, r3
    b20c:	429a      	cmp	r2, r3
    b20e:	d313      	bcc.n	b238 <send_climb+0x80>
    b210:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b218:	781b      	ldrb	r3, [r3, #0]
    b21a:	b2db      	uxtb	r3, r3
    b21c:	461a      	mov	r2, r3
    b21e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b226:	781b      	ldrb	r3, [r3, #0]
    b228:	1ad3      	subs	r3, r2, r3
    b22a:	33ff      	adds	r3, #255	; 0xff
    b22c:	2b12      	cmp	r3, #18
    b22e:	bfd4      	ite	le
    b230:	2300      	movle	r3, #0
    b232:	2301      	movgt	r3, #1
    b234:	b2db      	uxtb	r3, r3
    b236:	e011      	b.n	b25c <send_climb+0xa4>
    b238:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b23c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b240:	781b      	ldrb	r3, [r3, #0]
    b242:	b2db      	uxtb	r3, r3
    b244:	461a      	mov	r2, r3
    b246:	f24c 5349 	movw	r3, #50505	; 0xc549
    b24a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b24e:	781b      	ldrb	r3, [r3, #0]
    b250:	1ad3      	subs	r3, r2, r3
    b252:	2b12      	cmp	r3, #18
    b254:	bfd4      	ite	le
    b256:	2300      	movle	r3, #0
    b258:	2301      	movgt	r3, #1
    b25a:	b2db      	uxtb	r3, r3
    b25c:	2b00      	cmp	r3, #0
    b25e:	f000 8512 	beq.w	bc86 <send_climb+0xace>
    b262:	f24c 5349 	movw	r3, #50505	; 0xc549
    b266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b26a:	781b      	ldrb	r3, [r3, #0]
    b26c:	461a      	mov	r2, r3
    b26e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b276:	2105      	movs	r1, #5
    b278:	5499      	strb	r1, [r3, r2]
    b27a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b27e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b282:	781b      	ldrb	r3, [r3, #0]
    b284:	3301      	adds	r3, #1
    b286:	b2da      	uxtb	r2, r3
    b288:	f24c 5349 	movw	r3, #50505	; 0xc549
    b28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b290:	701a      	strb	r2, [r3, #0]
    b292:	f24c 5349 	movw	r3, #50505	; 0xc549
    b296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b29a:	781b      	ldrb	r3, [r3, #0]
    b29c:	2bff      	cmp	r3, #255	; 0xff
    b29e:	d105      	bne.n	b2ac <send_climb+0xf4>
    b2a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b2a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2a8:	2200      	movs	r2, #0
    b2aa:	701a      	strb	r2, [r3, #0]
    b2ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    b2b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2b4:	781b      	ldrb	r3, [r3, #0]
    b2b6:	461a      	mov	r2, r3
    b2b8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b2bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2c0:	210e      	movs	r1, #14
    b2c2:	5499      	strb	r1, [r3, r2]
    b2c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    b2c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2cc:	781b      	ldrb	r3, [r3, #0]
    b2ce:	3301      	adds	r3, #1
    b2d0:	b2da      	uxtb	r2, r3
    b2d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b2d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2da:	701a      	strb	r2, [r3, #0]
    b2dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    b2e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2e4:	781b      	ldrb	r3, [r3, #0]
    b2e6:	2bff      	cmp	r3, #255	; 0xff
    b2e8:	d105      	bne.n	b2f6 <send_climb+0x13e>
    b2ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    b2ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2f2:	2200      	movs	r2, #0
    b2f4:	701a      	strb	r2, [r3, #0]
    b2f6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2fe:	220e      	movs	r2, #14
    b300:	701a      	strb	r2, [r3, #0]
    b302:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b30a:	220e      	movs	r2, #14
    b30c:	701a      	strb	r2, [r3, #0]
    b30e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b316:	781b      	ldrb	r3, [r3, #0]
    b318:	461a      	mov	r2, r3
    b31a:	f64c 037c 	movw	r3, #51324	; 0xc87c
    b31e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b322:	7819      	ldrb	r1, [r3, #0]
    b324:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b32c:	5499      	strb	r1, [r3, r2]
    b32e:	f64c 037c 	movw	r3, #51324	; 0xc87c
    b332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b336:	781a      	ldrb	r2, [r3, #0]
    b338:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b33c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b340:	781b      	ldrb	r3, [r3, #0]
    b342:	4413      	add	r3, r2
    b344:	b2da      	uxtb	r2, r3
    b346:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b34a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b34e:	701a      	strb	r2, [r3, #0]
    b350:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b358:	781a      	ldrb	r2, [r3, #0]
    b35a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b35e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b362:	781b      	ldrb	r3, [r3, #0]
    b364:	4413      	add	r3, r2
    b366:	b2da      	uxtb	r2, r3
    b368:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b36c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b370:	701a      	strb	r2, [r3, #0]
    b372:	f24c 5349 	movw	r3, #50505	; 0xc549
    b376:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b37a:	781b      	ldrb	r3, [r3, #0]
    b37c:	3301      	adds	r3, #1
    b37e:	b2da      	uxtb	r2, r3
    b380:	f24c 5349 	movw	r3, #50505	; 0xc549
    b384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b388:	701a      	strb	r2, [r3, #0]
    b38a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b38e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b392:	781b      	ldrb	r3, [r3, #0]
    b394:	2bff      	cmp	r3, #255	; 0xff
    b396:	d105      	bne.n	b3a4 <send_climb+0x1ec>
    b398:	f24c 5349 	movw	r3, #50505	; 0xc549
    b39c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3a0:	2200      	movs	r2, #0
    b3a2:	701a      	strb	r2, [r3, #0]
    b3a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3ac:	781b      	ldrb	r3, [r3, #0]
    b3ae:	461a      	mov	r2, r3
    b3b0:	f64c 037c 	movw	r3, #51324	; 0xc87c
    b3b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3b8:	7859      	ldrb	r1, [r3, #1]
    b3ba:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b3be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3c2:	5499      	strb	r1, [r3, r2]
    b3c4:	4bd3      	ldr	r3, [pc, #844]	; (b714 <send_climb+0x55c>)
    b3c6:	781a      	ldrb	r2, [r3, #0]
    b3c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b3cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3d0:	781b      	ldrb	r3, [r3, #0]
    b3d2:	4413      	add	r3, r2
    b3d4:	b2da      	uxtb	r2, r3
    b3d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b3da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3de:	701a      	strb	r2, [r3, #0]
    b3e0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b3e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3e8:	781a      	ldrb	r2, [r3, #0]
    b3ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b3ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3f2:	781b      	ldrb	r3, [r3, #0]
    b3f4:	4413      	add	r3, r2
    b3f6:	b2da      	uxtb	r2, r3
    b3f8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b3fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b400:	701a      	strb	r2, [r3, #0]
    b402:	f24c 5349 	movw	r3, #50505	; 0xc549
    b406:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b40a:	781b      	ldrb	r3, [r3, #0]
    b40c:	3301      	adds	r3, #1
    b40e:	b2da      	uxtb	r2, r3
    b410:	f24c 5349 	movw	r3, #50505	; 0xc549
    b414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b418:	701a      	strb	r2, [r3, #0]
    b41a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b41e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b422:	781b      	ldrb	r3, [r3, #0]
    b424:	2bff      	cmp	r3, #255	; 0xff
    b426:	d105      	bne.n	b434 <send_climb+0x27c>
    b428:	f24c 5349 	movw	r3, #50505	; 0xc549
    b42c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b430:	2200      	movs	r2, #0
    b432:	701a      	strb	r2, [r3, #0]
    b434:	f24c 5349 	movw	r3, #50505	; 0xc549
    b438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b43c:	781b      	ldrb	r3, [r3, #0]
    b43e:	461a      	mov	r2, r3
    b440:	f64c 0390 	movw	r3, #51344	; 0xc890
    b444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b448:	7819      	ldrb	r1, [r3, #0]
    b44a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b44e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b452:	5499      	strb	r1, [r3, r2]
    b454:	f64c 0390 	movw	r3, #51344	; 0xc890
    b458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b45c:	781a      	ldrb	r2, [r3, #0]
    b45e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b466:	781b      	ldrb	r3, [r3, #0]
    b468:	4413      	add	r3, r2
    b46a:	b2da      	uxtb	r2, r3
    b46c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b474:	701a      	strb	r2, [r3, #0]
    b476:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b47a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b47e:	781a      	ldrb	r2, [r3, #0]
    b480:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b488:	781b      	ldrb	r3, [r3, #0]
    b48a:	4413      	add	r3, r2
    b48c:	b2da      	uxtb	r2, r3
    b48e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b496:	701a      	strb	r2, [r3, #0]
    b498:	f24c 5349 	movw	r3, #50505	; 0xc549
    b49c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4a0:	781b      	ldrb	r3, [r3, #0]
    b4a2:	3301      	adds	r3, #1
    b4a4:	b2da      	uxtb	r2, r3
    b4a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ae:	701a      	strb	r2, [r3, #0]
    b4b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4b8:	781b      	ldrb	r3, [r3, #0]
    b4ba:	2bff      	cmp	r3, #255	; 0xff
    b4bc:	d105      	bne.n	b4ca <send_climb+0x312>
    b4be:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4c6:	2200      	movs	r2, #0
    b4c8:	701a      	strb	r2, [r3, #0]
    b4ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4d2:	781b      	ldrb	r3, [r3, #0]
    b4d4:	461a      	mov	r2, r3
    b4d6:	f64c 0390 	movw	r3, #51344	; 0xc890
    b4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4de:	7859      	ldrb	r1, [r3, #1]
    b4e0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b4e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4e8:	5499      	strb	r1, [r3, r2]
    b4ea:	4b8b      	ldr	r3, [pc, #556]	; (b718 <send_climb+0x560>)
    b4ec:	781a      	ldrb	r2, [r3, #0]
    b4ee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b4f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4f6:	781b      	ldrb	r3, [r3, #0]
    b4f8:	4413      	add	r3, r2
    b4fa:	b2da      	uxtb	r2, r3
    b4fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b504:	701a      	strb	r2, [r3, #0]
    b506:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b50a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b50e:	781a      	ldrb	r2, [r3, #0]
    b510:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b518:	781b      	ldrb	r3, [r3, #0]
    b51a:	4413      	add	r3, r2
    b51c:	b2da      	uxtb	r2, r3
    b51e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b526:	701a      	strb	r2, [r3, #0]
    b528:	f24c 5349 	movw	r3, #50505	; 0xc549
    b52c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b530:	781b      	ldrb	r3, [r3, #0]
    b532:	3301      	adds	r3, #1
    b534:	b2da      	uxtb	r2, r3
    b536:	f24c 5349 	movw	r3, #50505	; 0xc549
    b53a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b53e:	701a      	strb	r2, [r3, #0]
    b540:	f24c 5349 	movw	r3, #50505	; 0xc549
    b544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b548:	781b      	ldrb	r3, [r3, #0]
    b54a:	2bff      	cmp	r3, #255	; 0xff
    b54c:	d105      	bne.n	b55a <send_climb+0x3a2>
    b54e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b556:	2200      	movs	r2, #0
    b558:	701a      	strb	r2, [r3, #0]
    b55a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b562:	781b      	ldrb	r3, [r3, #0]
    b564:	461a      	mov	r2, r3
    b566:	f64c 0390 	movw	r3, #51344	; 0xc890
    b56a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b56e:	7899      	ldrb	r1, [r3, #2]
    b570:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b578:	5499      	strb	r1, [r3, r2]
    b57a:	4b68      	ldr	r3, [pc, #416]	; (b71c <send_climb+0x564>)
    b57c:	781a      	ldrb	r2, [r3, #0]
    b57e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b582:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b586:	781b      	ldrb	r3, [r3, #0]
    b588:	4413      	add	r3, r2
    b58a:	b2da      	uxtb	r2, r3
    b58c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b594:	701a      	strb	r2, [r3, #0]
    b596:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b59a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b59e:	781a      	ldrb	r2, [r3, #0]
    b5a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b5a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5a8:	781b      	ldrb	r3, [r3, #0]
    b5aa:	4413      	add	r3, r2
    b5ac:	b2da      	uxtb	r2, r3
    b5ae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b5b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5b6:	701a      	strb	r2, [r3, #0]
    b5b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5c0:	781b      	ldrb	r3, [r3, #0]
    b5c2:	3301      	adds	r3, #1
    b5c4:	b2da      	uxtb	r2, r3
    b5c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ce:	701a      	strb	r2, [r3, #0]
    b5d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5d8:	781b      	ldrb	r3, [r3, #0]
    b5da:	2bff      	cmp	r3, #255	; 0xff
    b5dc:	d105      	bne.n	b5ea <send_climb+0x432>
    b5de:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5e6:	2200      	movs	r2, #0
    b5e8:	701a      	strb	r2, [r3, #0]
    b5ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5f2:	781b      	ldrb	r3, [r3, #0]
    b5f4:	461a      	mov	r2, r3
    b5f6:	f64c 0390 	movw	r3, #51344	; 0xc890
    b5fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5fe:	78d9      	ldrb	r1, [r3, #3]
    b600:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b608:	5499      	strb	r1, [r3, r2]
    b60a:	4b45      	ldr	r3, [pc, #276]	; (b720 <send_climb+0x568>)
    b60c:	781a      	ldrb	r2, [r3, #0]
    b60e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b616:	781b      	ldrb	r3, [r3, #0]
    b618:	4413      	add	r3, r2
    b61a:	b2da      	uxtb	r2, r3
    b61c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b624:	701a      	strb	r2, [r3, #0]
    b626:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b62a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b62e:	781a      	ldrb	r2, [r3, #0]
    b630:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b638:	781b      	ldrb	r3, [r3, #0]
    b63a:	4413      	add	r3, r2
    b63c:	b2da      	uxtb	r2, r3
    b63e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b646:	701a      	strb	r2, [r3, #0]
    b648:	f24c 5349 	movw	r3, #50505	; 0xc549
    b64c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b650:	781b      	ldrb	r3, [r3, #0]
    b652:	3301      	adds	r3, #1
    b654:	b2da      	uxtb	r2, r3
    b656:	f24c 5349 	movw	r3, #50505	; 0xc549
    b65a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b65e:	701a      	strb	r2, [r3, #0]
    b660:	f24c 5349 	movw	r3, #50505	; 0xc549
    b664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b668:	781b      	ldrb	r3, [r3, #0]
    b66a:	2bff      	cmp	r3, #255	; 0xff
    b66c:	d105      	bne.n	b67a <send_climb+0x4c2>
    b66e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b676:	2200      	movs	r2, #0
    b678:	701a      	strb	r2, [r3, #0]
    b67a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b67e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b682:	781b      	ldrb	r3, [r3, #0]
    b684:	461a      	mov	r2, r3
    b686:	f64c 0398 	movw	r3, #51352	; 0xc898
    b68a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b68e:	7819      	ldrb	r1, [r3, #0]
    b690:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b698:	5499      	strb	r1, [r3, r2]
    b69a:	f64c 0398 	movw	r3, #51352	; 0xc898
    b69e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6a2:	781a      	ldrb	r2, [r3, #0]
    b6a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b6a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6ac:	781b      	ldrb	r3, [r3, #0]
    b6ae:	4413      	add	r3, r2
    b6b0:	b2da      	uxtb	r2, r3
    b6b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b6b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6ba:	701a      	strb	r2, [r3, #0]
    b6bc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b6c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6c4:	781a      	ldrb	r2, [r3, #0]
    b6c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b6ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6ce:	781b      	ldrb	r3, [r3, #0]
    b6d0:	4413      	add	r3, r2
    b6d2:	b2da      	uxtb	r2, r3
    b6d4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b6d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6dc:	701a      	strb	r2, [r3, #0]
    b6de:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6e6:	781b      	ldrb	r3, [r3, #0]
    b6e8:	3301      	adds	r3, #1
    b6ea:	b2da      	uxtb	r2, r3
    b6ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6f4:	701a      	strb	r2, [r3, #0]
    b6f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6fe:	781b      	ldrb	r3, [r3, #0]
    b700:	2bff      	cmp	r3, #255	; 0xff
    b702:	d10f      	bne.n	b724 <send_climb+0x56c>
    b704:	f24c 5349 	movw	r3, #50505	; 0xc549
    b708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b70c:	2200      	movs	r2, #0
    b70e:	701a      	strb	r2, [r3, #0]
    b710:	e008      	b.n	b724 <send_climb+0x56c>
    b712:	bf00      	nop
    b714:	2004c87d 	.word	0x2004c87d
    b718:	2004c891 	.word	0x2004c891
    b71c:	2004c892 	.word	0x2004c892
    b720:	2004c893 	.word	0x2004c893
    b724:	f24c 5349 	movw	r3, #50505	; 0xc549
    b728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b72c:	781b      	ldrb	r3, [r3, #0]
    b72e:	461a      	mov	r2, r3
    b730:	f64c 0398 	movw	r3, #51352	; 0xc898
    b734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b738:	7859      	ldrb	r1, [r3, #1]
    b73a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b73e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b742:	5499      	strb	r1, [r3, r2]
    b744:	4bd1      	ldr	r3, [pc, #836]	; (ba8c <send_climb+0x8d4>)
    b746:	781a      	ldrb	r2, [r3, #0]
    b748:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b74c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b750:	781b      	ldrb	r3, [r3, #0]
    b752:	4413      	add	r3, r2
    b754:	b2da      	uxtb	r2, r3
    b756:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b75a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b75e:	701a      	strb	r2, [r3, #0]
    b760:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b768:	781a      	ldrb	r2, [r3, #0]
    b76a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b76e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b772:	781b      	ldrb	r3, [r3, #0]
    b774:	4413      	add	r3, r2
    b776:	b2da      	uxtb	r2, r3
    b778:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b77c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b780:	701a      	strb	r2, [r3, #0]
    b782:	f24c 5349 	movw	r3, #50505	; 0xc549
    b786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b78a:	781b      	ldrb	r3, [r3, #0]
    b78c:	3301      	adds	r3, #1
    b78e:	b2da      	uxtb	r2, r3
    b790:	f24c 5349 	movw	r3, #50505	; 0xc549
    b794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b798:	701a      	strb	r2, [r3, #0]
    b79a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b79e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7a2:	781b      	ldrb	r3, [r3, #0]
    b7a4:	2bff      	cmp	r3, #255	; 0xff
    b7a6:	d105      	bne.n	b7b4 <send_climb+0x5fc>
    b7a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7b0:	2200      	movs	r2, #0
    b7b2:	701a      	strb	r2, [r3, #0]
    b7b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7bc:	781b      	ldrb	r3, [r3, #0]
    b7be:	461a      	mov	r2, r3
    b7c0:	f64c 0398 	movw	r3, #51352	; 0xc898
    b7c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7c8:	7899      	ldrb	r1, [r3, #2]
    b7ca:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b7ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7d2:	5499      	strb	r1, [r3, r2]
    b7d4:	4bae      	ldr	r3, [pc, #696]	; (ba90 <send_climb+0x8d8>)
    b7d6:	781a      	ldrb	r2, [r3, #0]
    b7d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b7dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7e0:	781b      	ldrb	r3, [r3, #0]
    b7e2:	4413      	add	r3, r2
    b7e4:	b2da      	uxtb	r2, r3
    b7e6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b7ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ee:	701a      	strb	r2, [r3, #0]
    b7f0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b7f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7f8:	781a      	ldrb	r2, [r3, #0]
    b7fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b7fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b802:	781b      	ldrb	r3, [r3, #0]
    b804:	4413      	add	r3, r2
    b806:	b2da      	uxtb	r2, r3
    b808:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b80c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b810:	701a      	strb	r2, [r3, #0]
    b812:	f24c 5349 	movw	r3, #50505	; 0xc549
    b816:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b81a:	781b      	ldrb	r3, [r3, #0]
    b81c:	3301      	adds	r3, #1
    b81e:	b2da      	uxtb	r2, r3
    b820:	f24c 5349 	movw	r3, #50505	; 0xc549
    b824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b828:	701a      	strb	r2, [r3, #0]
    b82a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b82e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b832:	781b      	ldrb	r3, [r3, #0]
    b834:	2bff      	cmp	r3, #255	; 0xff
    b836:	d105      	bne.n	b844 <send_climb+0x68c>
    b838:	f24c 5349 	movw	r3, #50505	; 0xc549
    b83c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b840:	2200      	movs	r2, #0
    b842:	701a      	strb	r2, [r3, #0]
    b844:	f24c 5349 	movw	r3, #50505	; 0xc549
    b848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b84c:	781b      	ldrb	r3, [r3, #0]
    b84e:	461a      	mov	r2, r3
    b850:	f64c 0398 	movw	r3, #51352	; 0xc898
    b854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b858:	78d9      	ldrb	r1, [r3, #3]
    b85a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b85e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b862:	5499      	strb	r1, [r3, r2]
    b864:	4b8b      	ldr	r3, [pc, #556]	; (ba94 <send_climb+0x8dc>)
    b866:	781a      	ldrb	r2, [r3, #0]
    b868:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b86c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b870:	781b      	ldrb	r3, [r3, #0]
    b872:	4413      	add	r3, r2
    b874:	b2da      	uxtb	r2, r3
    b876:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b87a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b87e:	701a      	strb	r2, [r3, #0]
    b880:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b888:	781a      	ldrb	r2, [r3, #0]
    b88a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b88e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b892:	781b      	ldrb	r3, [r3, #0]
    b894:	4413      	add	r3, r2
    b896:	b2da      	uxtb	r2, r3
    b898:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b89c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8a0:	701a      	strb	r2, [r3, #0]
    b8a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8aa:	781b      	ldrb	r3, [r3, #0]
    b8ac:	3301      	adds	r3, #1
    b8ae:	b2da      	uxtb	r2, r3
    b8b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8b8:	701a      	strb	r2, [r3, #0]
    b8ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8c2:	781b      	ldrb	r3, [r3, #0]
    b8c4:	2bff      	cmp	r3, #255	; 0xff
    b8c6:	d105      	bne.n	b8d4 <send_climb+0x71c>
    b8c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8d0:	2200      	movs	r2, #0
    b8d2:	701a      	strb	r2, [r3, #0]
    b8d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8dc:	781b      	ldrb	r3, [r3, #0]
    b8de:	461a      	mov	r2, r3
    b8e0:	f648 2398 	movw	r3, #35480	; 0x8a98
    b8e4:	f2c0 0301 	movt	r3, #1
    b8e8:	7819      	ldrb	r1, [r3, #0]
    b8ea:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b8ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8f2:	5499      	strb	r1, [r3, r2]
    b8f4:	f648 2398 	movw	r3, #35480	; 0x8a98
    b8f8:	f2c0 0301 	movt	r3, #1
    b8fc:	781a      	ldrb	r2, [r3, #0]
    b8fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b906:	781b      	ldrb	r3, [r3, #0]
    b908:	4413      	add	r3, r2
    b90a:	b2da      	uxtb	r2, r3
    b90c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b914:	701a      	strb	r2, [r3, #0]
    b916:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b91a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b91e:	781a      	ldrb	r2, [r3, #0]
    b920:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b928:	781b      	ldrb	r3, [r3, #0]
    b92a:	4413      	add	r3, r2
    b92c:	b2da      	uxtb	r2, r3
    b92e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b936:	701a      	strb	r2, [r3, #0]
    b938:	f24c 5349 	movw	r3, #50505	; 0xc549
    b93c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b940:	781b      	ldrb	r3, [r3, #0]
    b942:	3301      	adds	r3, #1
    b944:	b2da      	uxtb	r2, r3
    b946:	f24c 5349 	movw	r3, #50505	; 0xc549
    b94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b94e:	701a      	strb	r2, [r3, #0]
    b950:	f24c 5349 	movw	r3, #50505	; 0xc549
    b954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b958:	781b      	ldrb	r3, [r3, #0]
    b95a:	2bff      	cmp	r3, #255	; 0xff
    b95c:	d105      	bne.n	b96a <send_climb+0x7b2>
    b95e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b966:	2200      	movs	r2, #0
    b968:	701a      	strb	r2, [r3, #0]
    b96a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b96e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b972:	781b      	ldrb	r3, [r3, #0]
    b974:	461a      	mov	r2, r3
    b976:	f648 2398 	movw	r3, #35480	; 0x8a98
    b97a:	f2c0 0301 	movt	r3, #1
    b97e:	7859      	ldrb	r1, [r3, #1]
    b980:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b988:	5499      	strb	r1, [r3, r2]
    b98a:	4b43      	ldr	r3, [pc, #268]	; (ba98 <send_climb+0x8e0>)
    b98c:	781a      	ldrb	r2, [r3, #0]
    b98e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b996:	781b      	ldrb	r3, [r3, #0]
    b998:	4413      	add	r3, r2
    b99a:	b2da      	uxtb	r2, r3
    b99c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b9a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9a4:	701a      	strb	r2, [r3, #0]
    b9a6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b9aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9ae:	781a      	ldrb	r2, [r3, #0]
    b9b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b9b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9b8:	781b      	ldrb	r3, [r3, #0]
    b9ba:	4413      	add	r3, r2
    b9bc:	b2da      	uxtb	r2, r3
    b9be:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b9c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9c6:	701a      	strb	r2, [r3, #0]
    b9c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9d0:	781b      	ldrb	r3, [r3, #0]
    b9d2:	3301      	adds	r3, #1
    b9d4:	b2da      	uxtb	r2, r3
    b9d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9de:	701a      	strb	r2, [r3, #0]
    b9e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9e8:	781b      	ldrb	r3, [r3, #0]
    b9ea:	2bff      	cmp	r3, #255	; 0xff
    b9ec:	d105      	bne.n	b9fa <send_climb+0x842>
    b9ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9f6:	2200      	movs	r2, #0
    b9f8:	701a      	strb	r2, [r3, #0]
    b9fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba02:	781b      	ldrb	r3, [r3, #0]
    ba04:	461a      	mov	r2, r3
    ba06:	f648 2398 	movw	r3, #35480	; 0x8a98
    ba0a:	f2c0 0301 	movt	r3, #1
    ba0e:	7899      	ldrb	r1, [r3, #2]
    ba10:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ba14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba18:	5499      	strb	r1, [r3, r2]
    ba1a:	4b20      	ldr	r3, [pc, #128]	; (ba9c <send_climb+0x8e4>)
    ba1c:	781a      	ldrb	r2, [r3, #0]
    ba1e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba26:	781b      	ldrb	r3, [r3, #0]
    ba28:	4413      	add	r3, r2
    ba2a:	b2da      	uxtb	r2, r3
    ba2c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba34:	701a      	strb	r2, [r3, #0]
    ba36:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ba3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba3e:	781a      	ldrb	r2, [r3, #0]
    ba40:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba48:	781b      	ldrb	r3, [r3, #0]
    ba4a:	4413      	add	r3, r2
    ba4c:	b2da      	uxtb	r2, r3
    ba4e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ba52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba56:	701a      	strb	r2, [r3, #0]
    ba58:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba60:	781b      	ldrb	r3, [r3, #0]
    ba62:	3301      	adds	r3, #1
    ba64:	b2da      	uxtb	r2, r3
    ba66:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba6e:	701a      	strb	r2, [r3, #0]
    ba70:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba78:	781b      	ldrb	r3, [r3, #0]
    ba7a:	2bff      	cmp	r3, #255	; 0xff
    ba7c:	d110      	bne.n	baa0 <send_climb+0x8e8>
    ba7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba86:	2200      	movs	r2, #0
    ba88:	701a      	strb	r2, [r3, #0]
    ba8a:	e009      	b.n	baa0 <send_climb+0x8e8>
    ba8c:	2004c899 	.word	0x2004c899
    ba90:	2004c89a 	.word	0x2004c89a
    ba94:	2004c89b 	.word	0x2004c89b
    ba98:	00018a99 	.word	0x00018a99
    ba9c:	00018a9a 	.word	0x00018a9a
    baa0:	f24c 5349 	movw	r3, #50505	; 0xc549
    baa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baa8:	781b      	ldrb	r3, [r3, #0]
    baaa:	461a      	mov	r2, r3
    baac:	f648 2398 	movw	r3, #35480	; 0x8a98
    bab0:	f2c0 0301 	movt	r3, #1
    bab4:	78d9      	ldrb	r1, [r3, #3]
    bab6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    baba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    babe:	5499      	strb	r1, [r3, r2]
    bac0:	4b79      	ldr	r3, [pc, #484]	; (bca8 <send_climb+0xaf0>)
    bac2:	781a      	ldrb	r2, [r3, #0]
    bac4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bacc:	781b      	ldrb	r3, [r3, #0]
    bace:	4413      	add	r3, r2
    bad0:	b2da      	uxtb	r2, r3
    bad2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bada:	701a      	strb	r2, [r3, #0]
    badc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bae4:	781a      	ldrb	r2, [r3, #0]
    bae6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    baea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baee:	781b      	ldrb	r3, [r3, #0]
    baf0:	4413      	add	r3, r2
    baf2:	b2da      	uxtb	r2, r3
    baf4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    baf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bafc:	701a      	strb	r2, [r3, #0]
    bafe:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb06:	781b      	ldrb	r3, [r3, #0]
    bb08:	3301      	adds	r3, #1
    bb0a:	b2da      	uxtb	r2, r3
    bb0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb14:	701a      	strb	r2, [r3, #0]
    bb16:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb1e:	781b      	ldrb	r3, [r3, #0]
    bb20:	2bff      	cmp	r3, #255	; 0xff
    bb22:	d105      	bne.n	bb30 <send_climb+0x978>
    bb24:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb2c:	2200      	movs	r2, #0
    bb2e:	701a      	strb	r2, [r3, #0]
    bb30:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb38:	781b      	ldrb	r3, [r3, #0]
    bb3a:	461a      	mov	r2, r3
    bb3c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bb40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb44:	7819      	ldrb	r1, [r3, #0]
    bb46:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bb4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb4e:	5499      	strb	r1, [r3, r2]
    bb50:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb58:	781b      	ldrb	r3, [r3, #0]
    bb5a:	3301      	adds	r3, #1
    bb5c:	b2da      	uxtb	r2, r3
    bb5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb66:	701a      	strb	r2, [r3, #0]
    bb68:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb70:	781b      	ldrb	r3, [r3, #0]
    bb72:	2bff      	cmp	r3, #255	; 0xff
    bb74:	d105      	bne.n	bb82 <send_climb+0x9ca>
    bb76:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb7e:	2200      	movs	r2, #0
    bb80:	701a      	strb	r2, [r3, #0]
    bb82:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb8a:	781b      	ldrb	r3, [r3, #0]
    bb8c:	461a      	mov	r2, r3
    bb8e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bb92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb96:	7819      	ldrb	r1, [r3, #0]
    bb98:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bb9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bba0:	5499      	strb	r1, [r3, r2]
    bba2:	f24c 5349 	movw	r3, #50505	; 0xc549
    bba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbaa:	781b      	ldrb	r3, [r3, #0]
    bbac:	3301      	adds	r3, #1
    bbae:	b2da      	uxtb	r2, r3
    bbb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    bbb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbb8:	701a      	strb	r2, [r3, #0]
    bbba:	f24c 5349 	movw	r3, #50505	; 0xc549
    bbbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbc2:	781b      	ldrb	r3, [r3, #0]
    bbc4:	2bff      	cmp	r3, #255	; 0xff
    bbc6:	d105      	bne.n	bbd4 <send_climb+0xa1c>
    bbc8:	f24c 5349 	movw	r3, #50505	; 0xc549
    bbcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbd0:	2200      	movs	r2, #0
    bbd2:	701a      	strb	r2, [r3, #0]
    bbd4:	f242 0339 	movw	r3, #8249	; 0x2039
    bbd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbdc:	781b      	ldrb	r3, [r3, #0]
    bbde:	b2db      	uxtb	r3, r3
    bbe0:	f003 0310 	and.w	r3, r3, #16
    bbe4:	2b00      	cmp	r3, #0
    bbe6:	d15a      	bne.n	bc9e <send_climb+0xae6>
    bbe8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bbec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbf0:	781b      	ldrb	r3, [r3, #0]
    bbf2:	b2db      	uxtb	r3, r3
    bbf4:	461a      	mov	r2, r3
    bbf6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bbfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbfe:	5c9a      	ldrb	r2, [r3, r2]
    bc00:	f24c 634b 	movw	r3, #50763	; 0xc64b
    bc04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc08:	701a      	strb	r2, [r3, #0]
    bc0a:	f24c 634c 	movw	r3, #50764	; 0xc64c
    bc0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc12:	2200      	movs	r2, #0
    bc14:	701a      	strb	r2, [r3, #0]
    bc16:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bc1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc1e:	781b      	ldrb	r3, [r3, #0]
    bc20:	b2db      	uxtb	r3, r3
    bc22:	3301      	adds	r3, #1
    bc24:	b2da      	uxtb	r2, r3
    bc26:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bc2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc2e:	701a      	strb	r2, [r3, #0]
    bc30:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bc34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc38:	781b      	ldrb	r3, [r3, #0]
    bc3a:	b2db      	uxtb	r3, r3
    bc3c:	2bff      	cmp	r3, #255	; 0xff
    bc3e:	d105      	bne.n	bc4c <send_climb+0xa94>
    bc40:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bc44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc48:	2200      	movs	r2, #0
    bc4a:	701a      	strb	r2, [r3, #0]
    bc4c:	f242 0338 	movw	r3, #8248	; 0x2038
    bc50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc54:	f242 0238 	movw	r2, #8248	; 0x2038
    bc58:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bc5c:	7812      	ldrb	r2, [r2, #0]
    bc5e:	b2d2      	uxtb	r2, r2
    bc60:	f042 0201 	orr.w	r2, r2, #1
    bc64:	b2d2      	uxtb	r2, r2
    bc66:	701a      	strb	r2, [r3, #0]
    bc68:	f242 0339 	movw	r3, #8249	; 0x2039
    bc6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc70:	f242 0239 	movw	r2, #8249	; 0x2039
    bc74:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bc78:	7812      	ldrb	r2, [r2, #0]
    bc7a:	b2d2      	uxtb	r2, r2
    bc7c:	f042 0210 	orr.w	r2, r2, #16
    bc80:	b2d2      	uxtb	r2, r2
    bc82:	701a      	strb	r2, [r3, #0]
    bc84:	e00b      	b.n	bc9e <send_climb+0xae6>
    bc86:	f24c 5348 	movw	r3, #50504	; 0xc548
    bc8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc8e:	781b      	ldrb	r3, [r3, #0]
    bc90:	3301      	adds	r3, #1
    bc92:	b2da      	uxtb	r2, r3
    bc94:	f24c 5348 	movw	r3, #50504	; 0xc548
    bc98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc9c:	701a      	strb	r2, [r3, #0]
}
    bc9e:	46bd      	mov	sp, r7
    bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
    bca4:	4770      	bx	lr
    bca6:	bf00      	nop
    bca8:	00018a9b 	.word	0x00018a9b

0000bcac <send_mode>:
void send_mode(void){  //5000ms
    bcac:	b480      	push	{r7}
    bcae:	af00      	add	r7, sp, #0
  if(!boot)
    bcb0:	f240 533d 	movw	r3, #1341	; 0x53d
    bcb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcb8:	781b      	ldrb	r3, [r3, #0]
    bcba:	2b00      	cmp	r3, #0
    bcbc:	f040 82ce 	bne.w	c25c <send_mode+0x5b0>
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    bcc0:	f24c 5341 	movw	r3, #50497	; 0xc541
    bcc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcc8:	781a      	ldrb	r2, [r3, #0]
    bcca:	f248 531f 	movw	r3, #34079	; 0x851f
    bcce:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    bcd2:	fba3 1302 	umull	r1, r3, r3, r2
    bcd6:	091b      	lsrs	r3, r3, #4
    bcd8:	2132      	movs	r1, #50	; 0x32
    bcda:	fb01 f303 	mul.w	r3, r1, r3
    bcde:	1ad3      	subs	r3, r2, r3
    bce0:	b2db      	uxtb	r3, r3
    bce2:	2b09      	cmp	r3, #9
    bce4:	f040 82ba 	bne.w	c25c <send_mode+0x5b0>
    bce8:	f24c 5349 	movw	r3, #50505	; 0xc549
    bcec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcf0:	781a      	ldrb	r2, [r3, #0]
    bcf2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bcf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcfa:	781b      	ldrb	r3, [r3, #0]
    bcfc:	b2db      	uxtb	r3, r3
    bcfe:	429a      	cmp	r2, r3
    bd00:	d313      	bcc.n	bd2a <send_mode+0x7e>
    bd02:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bd06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd0a:	781b      	ldrb	r3, [r3, #0]
    bd0c:	b2db      	uxtb	r3, r3
    bd0e:	461a      	mov	r2, r3
    bd10:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd18:	781b      	ldrb	r3, [r3, #0]
    bd1a:	1ad3      	subs	r3, r2, r3
    bd1c:	33ff      	adds	r3, #255	; 0xff
    bd1e:	2b09      	cmp	r3, #9
    bd20:	bfd4      	ite	le
    bd22:	2300      	movle	r3, #0
    bd24:	2301      	movgt	r3, #1
    bd26:	b2db      	uxtb	r3, r3
    bd28:	e011      	b.n	bd4e <send_mode+0xa2>
    bd2a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bd2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd32:	781b      	ldrb	r3, [r3, #0]
    bd34:	b2db      	uxtb	r3, r3
    bd36:	461a      	mov	r2, r3
    bd38:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd40:	781b      	ldrb	r3, [r3, #0]
    bd42:	1ad3      	subs	r3, r2, r3
    bd44:	2b09      	cmp	r3, #9
    bd46:	bfd4      	ite	le
    bd48:	2300      	movle	r3, #0
    bd4a:	2301      	movgt	r3, #1
    bd4c:	b2db      	uxtb	r3, r3
    bd4e:	2b00      	cmp	r3, #0
    bd50:	f000 8278 	beq.w	c244 <send_mode+0x598>
    bd54:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd5c:	781b      	ldrb	r3, [r3, #0]
    bd5e:	461a      	mov	r2, r3
    bd60:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bd64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd68:	2105      	movs	r1, #5
    bd6a:	5499      	strb	r1, [r3, r2]
    bd6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd74:	781b      	ldrb	r3, [r3, #0]
    bd76:	3301      	adds	r3, #1
    bd78:	b2da      	uxtb	r2, r3
    bd7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd82:	701a      	strb	r2, [r3, #0]
    bd84:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd8c:	781b      	ldrb	r3, [r3, #0]
    bd8e:	2bff      	cmp	r3, #255	; 0xff
    bd90:	d105      	bne.n	bd9e <send_mode+0xf2>
    bd92:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd9a:	2200      	movs	r2, #0
    bd9c:	701a      	strb	r2, [r3, #0]
    bd9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    bda2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bda6:	781b      	ldrb	r3, [r3, #0]
    bda8:	461a      	mov	r2, r3
    bdaa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bdae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdb2:	210b      	movs	r1, #11
    bdb4:	5499      	strb	r1, [r3, r2]
    bdb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    bdba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdbe:	781b      	ldrb	r3, [r3, #0]
    bdc0:	3301      	adds	r3, #1
    bdc2:	b2da      	uxtb	r2, r3
    bdc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    bdc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdcc:	701a      	strb	r2, [r3, #0]
    bdce:	f24c 5349 	movw	r3, #50505	; 0xc549
    bdd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdd6:	781b      	ldrb	r3, [r3, #0]
    bdd8:	2bff      	cmp	r3, #255	; 0xff
    bdda:	d105      	bne.n	bde8 <send_mode+0x13c>
    bddc:	f24c 5349 	movw	r3, #50505	; 0xc549
    bde0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bde4:	2200      	movs	r2, #0
    bde6:	701a      	strb	r2, [r3, #0]
    bde8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bdec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdf0:	220b      	movs	r2, #11
    bdf2:	701a      	strb	r2, [r3, #0]
    bdf4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bdf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdfc:	220b      	movs	r2, #11
    bdfe:	701a      	strb	r2, [r3, #0]
    be00:	f24c 5349 	movw	r3, #50505	; 0xc549
    be04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be08:	781b      	ldrb	r3, [r3, #0]
    be0a:	461a      	mov	r2, r3
    be0c:	f24c 532c 	movw	r3, #50476	; 0xc52c
    be10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be14:	7819      	ldrb	r1, [r3, #0]
    be16:	f24c 534c 	movw	r3, #50508	; 0xc54c
    be1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be1e:	5499      	strb	r1, [r3, r2]
    be20:	f24c 634d 	movw	r3, #50765	; 0xc64d
    be24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be28:	781a      	ldrb	r2, [r3, #0]
    be2a:	f24c 532c 	movw	r3, #50476	; 0xc52c
    be2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be32:	781b      	ldrb	r3, [r3, #0]
    be34:	4413      	add	r3, r2
    be36:	b2da      	uxtb	r2, r3
    be38:	f24c 634d 	movw	r3, #50765	; 0xc64d
    be3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be40:	701a      	strb	r2, [r3, #0]
    be42:	f24c 634e 	movw	r3, #50766	; 0xc64e
    be46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be4a:	781a      	ldrb	r2, [r3, #0]
    be4c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    be50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be54:	781b      	ldrb	r3, [r3, #0]
    be56:	4413      	add	r3, r2
    be58:	b2da      	uxtb	r2, r3
    be5a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    be5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be62:	701a      	strb	r2, [r3, #0]
    be64:	f24c 5349 	movw	r3, #50505	; 0xc549
    be68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be6c:	781b      	ldrb	r3, [r3, #0]
    be6e:	3301      	adds	r3, #1
    be70:	b2da      	uxtb	r2, r3
    be72:	f24c 5349 	movw	r3, #50505	; 0xc549
    be76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be7a:	701a      	strb	r2, [r3, #0]
    be7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    be80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be84:	781b      	ldrb	r3, [r3, #0]
    be86:	2bff      	cmp	r3, #255	; 0xff
    be88:	d105      	bne.n	be96 <send_mode+0x1ea>
    be8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    be8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be92:	2200      	movs	r2, #0
    be94:	701a      	strb	r2, [r3, #0]
    be96:	f24c 5349 	movw	r3, #50505	; 0xc549
    be9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be9e:	781b      	ldrb	r3, [r3, #0]
    bea0:	461a      	mov	r2, r3
    bea2:	f24c 532d 	movw	r3, #50477	; 0xc52d
    bea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beaa:	7819      	ldrb	r1, [r3, #0]
    beac:	f24c 534c 	movw	r3, #50508	; 0xc54c
    beb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beb4:	5499      	strb	r1, [r3, r2]
    beb6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    beba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bebe:	781a      	ldrb	r2, [r3, #0]
    bec0:	f24c 532d 	movw	r3, #50477	; 0xc52d
    bec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bec8:	781b      	ldrb	r3, [r3, #0]
    beca:	4413      	add	r3, r2
    becc:	b2da      	uxtb	r2, r3
    bece:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bed6:	701a      	strb	r2, [r3, #0]
    bed8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bedc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bee0:	781a      	ldrb	r2, [r3, #0]
    bee2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beea:	781b      	ldrb	r3, [r3, #0]
    beec:	4413      	add	r3, r2
    beee:	b2da      	uxtb	r2, r3
    bef0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bef8:	701a      	strb	r2, [r3, #0]
    befa:	f24c 5349 	movw	r3, #50505	; 0xc549
    befe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf02:	781b      	ldrb	r3, [r3, #0]
    bf04:	3301      	adds	r3, #1
    bf06:	b2da      	uxtb	r2, r3
    bf08:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf10:	701a      	strb	r2, [r3, #0]
    bf12:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf1a:	781b      	ldrb	r3, [r3, #0]
    bf1c:	2bff      	cmp	r3, #255	; 0xff
    bf1e:	d105      	bne.n	bf2c <send_mode+0x280>
    bf20:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf28:	2200      	movs	r2, #0
    bf2a:	701a      	strb	r2, [r3, #0]
    bf2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf34:	781b      	ldrb	r3, [r3, #0]
    bf36:	461a      	mov	r2, r3
    bf38:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    bf3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf40:	7819      	ldrb	r1, [r3, #0]
    bf42:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bf46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf4a:	5499      	strb	r1, [r3, r2]
    bf4c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf54:	781a      	ldrb	r2, [r3, #0]
    bf56:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    bf5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf5e:	781b      	ldrb	r3, [r3, #0]
    bf60:	4413      	add	r3, r2
    bf62:	b2da      	uxtb	r2, r3
    bf64:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf6c:	701a      	strb	r2, [r3, #0]
    bf6e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bf72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf76:	781a      	ldrb	r2, [r3, #0]
    bf78:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf80:	781b      	ldrb	r3, [r3, #0]
    bf82:	4413      	add	r3, r2
    bf84:	b2da      	uxtb	r2, r3
    bf86:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bf8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf8e:	701a      	strb	r2, [r3, #0]
    bf90:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf98:	781b      	ldrb	r3, [r3, #0]
    bf9a:	3301      	adds	r3, #1
    bf9c:	b2da      	uxtb	r2, r3
    bf9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    bfa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfa6:	701a      	strb	r2, [r3, #0]
    bfa8:	f24c 5349 	movw	r3, #50505	; 0xc549
    bfac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfb0:	781b      	ldrb	r3, [r3, #0]
    bfb2:	2bff      	cmp	r3, #255	; 0xff
    bfb4:	d105      	bne.n	bfc2 <send_mode+0x316>
    bfb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    bfba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfbe:	2200      	movs	r2, #0
    bfc0:	701a      	strb	r2, [r3, #0]
    bfc2:	f24c 5349 	movw	r3, #50505	; 0xc549
    bfc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfca:	781b      	ldrb	r3, [r3, #0]
    bfcc:	461a      	mov	r2, r3
    bfce:	f24c 5333 	movw	r3, #50483	; 0xc533
    bfd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfd6:	7819      	ldrb	r1, [r3, #0]
    bfd8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bfdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfe0:	5499      	strb	r1, [r3, r2]
    bfe2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bfe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfea:	781a      	ldrb	r2, [r3, #0]
    bfec:	f24c 5333 	movw	r3, #50483	; 0xc533
    bff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bff4:	781b      	ldrb	r3, [r3, #0]
    bff6:	4413      	add	r3, r2
    bff8:	b2da      	uxtb	r2, r3
    bffa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c002:	701a      	strb	r2, [r3, #0]
    c004:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c00c:	781a      	ldrb	r2, [r3, #0]
    c00e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c016:	781b      	ldrb	r3, [r3, #0]
    c018:	4413      	add	r3, r2
    c01a:	b2da      	uxtb	r2, r3
    c01c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c024:	701a      	strb	r2, [r3, #0]
    c026:	f24c 5349 	movw	r3, #50505	; 0xc549
    c02a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c02e:	781b      	ldrb	r3, [r3, #0]
    c030:	3301      	adds	r3, #1
    c032:	b2da      	uxtb	r2, r3
    c034:	f24c 5349 	movw	r3, #50505	; 0xc549
    c038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c03c:	701a      	strb	r2, [r3, #0]
    c03e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c046:	781b      	ldrb	r3, [r3, #0]
    c048:	2bff      	cmp	r3, #255	; 0xff
    c04a:	d105      	bne.n	c058 <send_mode+0x3ac>
    c04c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c054:	2200      	movs	r2, #0
    c056:	701a      	strb	r2, [r3, #0]
    c058:	f24c 5349 	movw	r3, #50505	; 0xc549
    c05c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c060:	781b      	ldrb	r3, [r3, #0]
    c062:	461a      	mov	r2, r3
    c064:	f240 533c 	movw	r3, #1340	; 0x53c
    c068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c06c:	7819      	ldrb	r1, [r3, #0]
    c06e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c076:	5499      	strb	r1, [r3, r2]
    c078:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c07c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c080:	781a      	ldrb	r2, [r3, #0]
    c082:	f240 533c 	movw	r3, #1340	; 0x53c
    c086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c08a:	781b      	ldrb	r3, [r3, #0]
    c08c:	4413      	add	r3, r2
    c08e:	b2da      	uxtb	r2, r3
    c090:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c094:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c098:	701a      	strb	r2, [r3, #0]
    c09a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c09e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0a2:	781a      	ldrb	r2, [r3, #0]
    c0a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c0a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0ac:	781b      	ldrb	r3, [r3, #0]
    c0ae:	4413      	add	r3, r2
    c0b0:	b2da      	uxtb	r2, r3
    c0b2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0ba:	701a      	strb	r2, [r3, #0]
    c0bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0c4:	781b      	ldrb	r3, [r3, #0]
    c0c6:	3301      	adds	r3, #1
    c0c8:	b2da      	uxtb	r2, r3
    c0ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0d2:	701a      	strb	r2, [r3, #0]
    c0d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0dc:	781b      	ldrb	r3, [r3, #0]
    c0de:	2bff      	cmp	r3, #255	; 0xff
    c0e0:	d105      	bne.n	c0ee <send_mode+0x442>
    c0e2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0ea:	2200      	movs	r2, #0
    c0ec:	701a      	strb	r2, [r3, #0]
    c0ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0f6:	781b      	ldrb	r3, [r3, #0]
    c0f8:	461a      	mov	r2, r3
    c0fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c0fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c102:	7819      	ldrb	r1, [r3, #0]
    c104:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c10c:	5499      	strb	r1, [r3, r2]
    c10e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c116:	781b      	ldrb	r3, [r3, #0]
    c118:	3301      	adds	r3, #1
    c11a:	b2da      	uxtb	r2, r3
    c11c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c124:	701a      	strb	r2, [r3, #0]
    c126:	f24c 5349 	movw	r3, #50505	; 0xc549
    c12a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c12e:	781b      	ldrb	r3, [r3, #0]
    c130:	2bff      	cmp	r3, #255	; 0xff
    c132:	d105      	bne.n	c140 <send_mode+0x494>
    c134:	f24c 5349 	movw	r3, #50505	; 0xc549
    c138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c13c:	2200      	movs	r2, #0
    c13e:	701a      	strb	r2, [r3, #0]
    c140:	f24c 5349 	movw	r3, #50505	; 0xc549
    c144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c148:	781b      	ldrb	r3, [r3, #0]
    c14a:	461a      	mov	r2, r3
    c14c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c154:	7819      	ldrb	r1, [r3, #0]
    c156:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c15a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c15e:	5499      	strb	r1, [r3, r2]
    c160:	f24c 5349 	movw	r3, #50505	; 0xc549
    c164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c168:	781b      	ldrb	r3, [r3, #0]
    c16a:	3301      	adds	r3, #1
    c16c:	b2da      	uxtb	r2, r3
    c16e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c176:	701a      	strb	r2, [r3, #0]
    c178:	f24c 5349 	movw	r3, #50505	; 0xc549
    c17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c180:	781b      	ldrb	r3, [r3, #0]
    c182:	2bff      	cmp	r3, #255	; 0xff
    c184:	d105      	bne.n	c192 <send_mode+0x4e6>
    c186:	f24c 5349 	movw	r3, #50505	; 0xc549
    c18a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c18e:	2200      	movs	r2, #0
    c190:	701a      	strb	r2, [r3, #0]
    c192:	f242 0339 	movw	r3, #8249	; 0x2039
    c196:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c19a:	781b      	ldrb	r3, [r3, #0]
    c19c:	b2db      	uxtb	r3, r3
    c19e:	f003 0310 	and.w	r3, r3, #16
    c1a2:	2b00      	cmp	r3, #0
    c1a4:	d15a      	bne.n	c25c <send_mode+0x5b0>
    c1a6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c1aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1ae:	781b      	ldrb	r3, [r3, #0]
    c1b0:	b2db      	uxtb	r3, r3
    c1b2:	461a      	mov	r2, r3
    c1b4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c1b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1bc:	5c9a      	ldrb	r2, [r3, r2]
    c1be:	f24c 634b 	movw	r3, #50763	; 0xc64b
    c1c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1c6:	701a      	strb	r2, [r3, #0]
    c1c8:	f24c 634c 	movw	r3, #50764	; 0xc64c
    c1cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1d0:	2200      	movs	r2, #0
    c1d2:	701a      	strb	r2, [r3, #0]
    c1d4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c1d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1dc:	781b      	ldrb	r3, [r3, #0]
    c1de:	b2db      	uxtb	r3, r3
    c1e0:	3301      	adds	r3, #1
    c1e2:	b2da      	uxtb	r2, r3
    c1e4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c1e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1ec:	701a      	strb	r2, [r3, #0]
    c1ee:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c1f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1f6:	781b      	ldrb	r3, [r3, #0]
    c1f8:	b2db      	uxtb	r3, r3
    c1fa:	2bff      	cmp	r3, #255	; 0xff
    c1fc:	d105      	bne.n	c20a <send_mode+0x55e>
    c1fe:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c206:	2200      	movs	r2, #0
    c208:	701a      	strb	r2, [r3, #0]
    c20a:	f242 0338 	movw	r3, #8248	; 0x2038
    c20e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c212:	f242 0238 	movw	r2, #8248	; 0x2038
    c216:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c21a:	7812      	ldrb	r2, [r2, #0]
    c21c:	b2d2      	uxtb	r2, r2
    c21e:	f042 0201 	orr.w	r2, r2, #1
    c222:	b2d2      	uxtb	r2, r2
    c224:	701a      	strb	r2, [r3, #0]
    c226:	f242 0339 	movw	r3, #8249	; 0x2039
    c22a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c22e:	f242 0239 	movw	r2, #8249	; 0x2039
    c232:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c236:	7812      	ldrb	r2, [r2, #0]
    c238:	b2d2      	uxtb	r2, r2
    c23a:	f042 0210 	orr.w	r2, r2, #16
    c23e:	b2d2      	uxtb	r2, r2
    c240:	701a      	strb	r2, [r3, #0]
    c242:	e00b      	b.n	c25c <send_mode+0x5b0>
    c244:	f24c 5348 	movw	r3, #50504	; 0xc548
    c248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c24c:	781b      	ldrb	r3, [r3, #0]
    c24e:	3301      	adds	r3, #1
    c250:	b2da      	uxtb	r2, r3
    c252:	f24c 5348 	movw	r3, #50504	; 0xc548
    c256:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c25a:	701a      	strb	r2, [r3, #0]
}
    c25c:	46bd      	mov	sp, r7
    c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c262:	4770      	bx	lr

0000c264 <send_debug>:
void send_debug(void){  //5000ms
    c264:	b480      	push	{r7}
    c266:	af00      	add	r7, sp, #0
  if(!boot)
    c268:	f240 533d 	movw	r3, #1341	; 0x53d
    c26c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c270:	781b      	ldrb	r3, [r3, #0]
    c272:	2b00      	cmp	r3, #0
    c274:	f040 82cf 	bne.w	c816 <send_debug+0x5b2>
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    c278:	f24c 5341 	movw	r3, #50497	; 0xc541
    c27c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c280:	781a      	ldrb	r2, [r3, #0]
    c282:	f248 531f 	movw	r3, #34079	; 0x851f
    c286:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c28a:	fba3 1302 	umull	r1, r3, r3, r2
    c28e:	091b      	lsrs	r3, r3, #4
    c290:	2132      	movs	r1, #50	; 0x32
    c292:	fb01 f303 	mul.w	r3, r1, r3
    c296:	1ad3      	subs	r3, r2, r3
    c298:	b2db      	uxtb	r3, r3
    c29a:	2b1d      	cmp	r3, #29
    c29c:	f040 82bb 	bne.w	c816 <send_debug+0x5b2>
    c2a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c2a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2a8:	781a      	ldrb	r2, [r3, #0]
    c2aa:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2b2:	781b      	ldrb	r3, [r3, #0]
    c2b4:	b2db      	uxtb	r3, r3
    c2b6:	429a      	cmp	r2, r3
    c2b8:	d313      	bcc.n	c2e2 <send_debug+0x7e>
    c2ba:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c2be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2c2:	781b      	ldrb	r3, [r3, #0]
    c2c4:	b2db      	uxtb	r3, r3
    c2c6:	461a      	mov	r2, r3
    c2c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c2cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2d0:	781b      	ldrb	r3, [r3, #0]
    c2d2:	1ad3      	subs	r3, r2, r3
    c2d4:	33ff      	adds	r3, #255	; 0xff
    c2d6:	2b09      	cmp	r3, #9
    c2d8:	bfd4      	ite	le
    c2da:	2300      	movle	r3, #0
    c2dc:	2301      	movgt	r3, #1
    c2de:	b2db      	uxtb	r3, r3
    c2e0:	e011      	b.n	c306 <send_debug+0xa2>
    c2e2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c2e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ea:	781b      	ldrb	r3, [r3, #0]
    c2ec:	b2db      	uxtb	r3, r3
    c2ee:	461a      	mov	r2, r3
    c2f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c2f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2f8:	781b      	ldrb	r3, [r3, #0]
    c2fa:	1ad3      	subs	r3, r2, r3
    c2fc:	2b09      	cmp	r3, #9
    c2fe:	bfd4      	ite	le
    c300:	2300      	movle	r3, #0
    c302:	2301      	movgt	r3, #1
    c304:	b2db      	uxtb	r3, r3
    c306:	2b00      	cmp	r3, #0
    c308:	f000 8279 	beq.w	c7fe <send_debug+0x59a>
    c30c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c310:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c314:	781b      	ldrb	r3, [r3, #0]
    c316:	461a      	mov	r2, r3
    c318:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c31c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c320:	2105      	movs	r1, #5
    c322:	5499      	strb	r1, [r3, r2]
    c324:	f24c 5349 	movw	r3, #50505	; 0xc549
    c328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c32c:	781b      	ldrb	r3, [r3, #0]
    c32e:	3301      	adds	r3, #1
    c330:	b2da      	uxtb	r2, r3
    c332:	f24c 5349 	movw	r3, #50505	; 0xc549
    c336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c33a:	701a      	strb	r2, [r3, #0]
    c33c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c344:	781b      	ldrb	r3, [r3, #0]
    c346:	2bff      	cmp	r3, #255	; 0xff
    c348:	d105      	bne.n	c356 <send_debug+0xf2>
    c34a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c34e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c352:	2200      	movs	r2, #0
    c354:	701a      	strb	r2, [r3, #0]
    c356:	f24c 5349 	movw	r3, #50505	; 0xc549
    c35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c35e:	781b      	ldrb	r3, [r3, #0]
    c360:	461a      	mov	r2, r3
    c362:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c36a:	210d      	movs	r1, #13
    c36c:	5499      	strb	r1, [r3, r2]
    c36e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c376:	781b      	ldrb	r3, [r3, #0]
    c378:	3301      	adds	r3, #1
    c37a:	b2da      	uxtb	r2, r3
    c37c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c380:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c384:	701a      	strb	r2, [r3, #0]
    c386:	f24c 5349 	movw	r3, #50505	; 0xc549
    c38a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c38e:	781b      	ldrb	r3, [r3, #0]
    c390:	2bff      	cmp	r3, #255	; 0xff
    c392:	d105      	bne.n	c3a0 <send_debug+0x13c>
    c394:	f24c 5349 	movw	r3, #50505	; 0xc549
    c398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c39c:	2200      	movs	r2, #0
    c39e:	701a      	strb	r2, [r3, #0]
    c3a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3a8:	220d      	movs	r2, #13
    c3aa:	701a      	strb	r2, [r3, #0]
    c3ac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c3b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3b4:	220d      	movs	r2, #13
    c3b6:	701a      	strb	r2, [r3, #0]
    c3b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3c0:	781b      	ldrb	r3, [r3, #0]
    c3c2:	461a      	mov	r2, r3
    c3c4:	f24c 637f 	movw	r3, #50815	; 0xc67f
    c3c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3cc:	781b      	ldrb	r3, [r3, #0]
    c3ce:	b2d9      	uxtb	r1, r3
    c3d0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c3d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3d8:	5499      	strb	r1, [r3, r2]
    c3da:	f24c 637f 	movw	r3, #50815	; 0xc67f
    c3de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3e2:	781a      	ldrb	r2, [r3, #0]
    c3e4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c3e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3ec:	781b      	ldrb	r3, [r3, #0]
    c3ee:	4413      	add	r3, r2
    c3f0:	b2da      	uxtb	r2, r3
    c3f2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c3f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3fa:	701a      	strb	r2, [r3, #0]
    c3fc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c404:	781a      	ldrb	r2, [r3, #0]
    c406:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c40a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c40e:	781b      	ldrb	r3, [r3, #0]
    c410:	4413      	add	r3, r2
    c412:	b2da      	uxtb	r2, r3
    c414:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c41c:	701a      	strb	r2, [r3, #0]
    c41e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c426:	781b      	ldrb	r3, [r3, #0]
    c428:	3301      	adds	r3, #1
    c42a:	b2da      	uxtb	r2, r3
    c42c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c434:	701a      	strb	r2, [r3, #0]
    c436:	f24c 5349 	movw	r3, #50505	; 0xc549
    c43a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c43e:	781b      	ldrb	r3, [r3, #0]
    c440:	2bff      	cmp	r3, #255	; 0xff
    c442:	d105      	bne.n	c450 <send_debug+0x1ec>
    c444:	f24c 5349 	movw	r3, #50505	; 0xc549
    c448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c44c:	2200      	movs	r2, #0
    c44e:	701a      	strb	r2, [r3, #0]
    c450:	f24c 5349 	movw	r3, #50505	; 0xc549
    c454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c458:	781b      	ldrb	r3, [r3, #0]
    c45a:	461a      	mov	r2, r3
    c45c:	f24c 6380 	movw	r3, #50816	; 0xc680
    c460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c464:	7819      	ldrb	r1, [r3, #0]
    c466:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c46a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c46e:	5499      	strb	r1, [r3, r2]
    c470:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c478:	781a      	ldrb	r2, [r3, #0]
    c47a:	f24c 6380 	movw	r3, #50816	; 0xc680
    c47e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c482:	781b      	ldrb	r3, [r3, #0]
    c484:	4413      	add	r3, r2
    c486:	b2da      	uxtb	r2, r3
    c488:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c48c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c490:	701a      	strb	r2, [r3, #0]
    c492:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c49a:	781a      	ldrb	r2, [r3, #0]
    c49c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c4a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4a4:	781b      	ldrb	r3, [r3, #0]
    c4a6:	4413      	add	r3, r2
    c4a8:	b2da      	uxtb	r2, r3
    c4aa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c4ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4b2:	701a      	strb	r2, [r3, #0]
    c4b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4bc:	781b      	ldrb	r3, [r3, #0]
    c4be:	3301      	adds	r3, #1
    c4c0:	b2da      	uxtb	r2, r3
    c4c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c4c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ca:	701a      	strb	r2, [r3, #0]
    c4cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    c4d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4d4:	781b      	ldrb	r3, [r3, #0]
    c4d6:	2bff      	cmp	r3, #255	; 0xff
    c4d8:	d105      	bne.n	c4e6 <send_debug+0x282>
    c4da:	f24c 5349 	movw	r3, #50505	; 0xc549
    c4de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4e2:	2200      	movs	r2, #0
    c4e4:	701a      	strb	r2, [r3, #0]
    c4e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c4ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ee:	781b      	ldrb	r3, [r3, #0]
    c4f0:	461a      	mov	r2, r3
    c4f2:	f24c 5348 	movw	r3, #50504	; 0xc548
    c4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4fa:	7819      	ldrb	r1, [r3, #0]
    c4fc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c504:	5499      	strb	r1, [r3, r2]
    c506:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c50a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c50e:	781a      	ldrb	r2, [r3, #0]
    c510:	f24c 5348 	movw	r3, #50504	; 0xc548
    c514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c518:	781b      	ldrb	r3, [r3, #0]
    c51a:	4413      	add	r3, r2
    c51c:	b2da      	uxtb	r2, r3
    c51e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c526:	701a      	strb	r2, [r3, #0]
    c528:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c52c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c530:	781a      	ldrb	r2, [r3, #0]
    c532:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c53a:	781b      	ldrb	r3, [r3, #0]
    c53c:	4413      	add	r3, r2
    c53e:	b2da      	uxtb	r2, r3
    c540:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c548:	701a      	strb	r2, [r3, #0]
    c54a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c54e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c552:	781b      	ldrb	r3, [r3, #0]
    c554:	3301      	adds	r3, #1
    c556:	b2da      	uxtb	r2, r3
    c558:	f24c 5349 	movw	r3, #50505	; 0xc549
    c55c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c560:	701a      	strb	r2, [r3, #0]
    c562:	f24c 5349 	movw	r3, #50505	; 0xc549
    c566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c56a:	781b      	ldrb	r3, [r3, #0]
    c56c:	2bff      	cmp	r3, #255	; 0xff
    c56e:	d105      	bne.n	c57c <send_debug+0x318>
    c570:	f24c 5349 	movw	r3, #50505	; 0xc549
    c574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c578:	2200      	movs	r2, #0
    c57a:	701a      	strb	r2, [r3, #0]
    c57c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c584:	781b      	ldrb	r3, [r3, #0]
    c586:	461a      	mov	r2, r3
    c588:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
    c58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c590:	7819      	ldrb	r1, [r3, #0]
    c592:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c59a:	5499      	strb	r1, [r3, r2]
    c59c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c5a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5a4:	781a      	ldrb	r2, [r3, #0]
    c5a6:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
    c5aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5ae:	781b      	ldrb	r3, [r3, #0]
    c5b0:	4413      	add	r3, r2
    c5b2:	b2da      	uxtb	r2, r3
    c5b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c5b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5bc:	701a      	strb	r2, [r3, #0]
    c5be:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c5c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5c6:	781a      	ldrb	r2, [r3, #0]
    c5c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c5cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5d0:	781b      	ldrb	r3, [r3, #0]
    c5d2:	4413      	add	r3, r2
    c5d4:	b2da      	uxtb	r2, r3
    c5d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c5da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5de:	701a      	strb	r2, [r3, #0]
    c5e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5e8:	781b      	ldrb	r3, [r3, #0]
    c5ea:	3301      	adds	r3, #1
    c5ec:	b2da      	uxtb	r2, r3
    c5ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5f6:	701a      	strb	r2, [r3, #0]
    c5f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c600:	781b      	ldrb	r3, [r3, #0]
    c602:	2bff      	cmp	r3, #255	; 0xff
    c604:	d105      	bne.n	c612 <send_debug+0x3ae>
    c606:	f24c 5349 	movw	r3, #50505	; 0xc549
    c60a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c60e:	2200      	movs	r2, #0
    c610:	701a      	strb	r2, [r3, #0]
    c612:	f24c 5349 	movw	r3, #50505	; 0xc549
    c616:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c61a:	781b      	ldrb	r3, [r3, #0]
    c61c:	461a      	mov	r2, r3
    c61e:	f24c 5334 	movw	r3, #50484	; 0xc534
    c622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c626:	7819      	ldrb	r1, [r3, #0]
    c628:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c630:	5499      	strb	r1, [r3, r2]
    c632:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c63a:	781a      	ldrb	r2, [r3, #0]
    c63c:	f24c 5334 	movw	r3, #50484	; 0xc534
    c640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c644:	781b      	ldrb	r3, [r3, #0]
    c646:	4413      	add	r3, r2
    c648:	b2da      	uxtb	r2, r3
    c64a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c64e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c652:	701a      	strb	r2, [r3, #0]
    c654:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c65c:	781a      	ldrb	r2, [r3, #0]
    c65e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c666:	781b      	ldrb	r3, [r3, #0]
    c668:	4413      	add	r3, r2
    c66a:	b2da      	uxtb	r2, r3
    c66c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c674:	701a      	strb	r2, [r3, #0]
    c676:	f24c 5349 	movw	r3, #50505	; 0xc549
    c67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c67e:	781b      	ldrb	r3, [r3, #0]
    c680:	3301      	adds	r3, #1
    c682:	b2da      	uxtb	r2, r3
    c684:	f24c 5349 	movw	r3, #50505	; 0xc549
    c688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c68c:	701a      	strb	r2, [r3, #0]
    c68e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c696:	781b      	ldrb	r3, [r3, #0]
    c698:	2bff      	cmp	r3, #255	; 0xff
    c69a:	d105      	bne.n	c6a8 <send_debug+0x444>
    c69c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6a4:	2200      	movs	r2, #0
    c6a6:	701a      	strb	r2, [r3, #0]
    c6a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6b0:	781b      	ldrb	r3, [r3, #0]
    c6b2:	461a      	mov	r2, r3
    c6b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c6b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6bc:	7819      	ldrb	r1, [r3, #0]
    c6be:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c6c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6c6:	5499      	strb	r1, [r3, r2]
    c6c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6d0:	781b      	ldrb	r3, [r3, #0]
    c6d2:	3301      	adds	r3, #1
    c6d4:	b2da      	uxtb	r2, r3
    c6d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6de:	701a      	strb	r2, [r3, #0]
    c6e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6e8:	781b      	ldrb	r3, [r3, #0]
    c6ea:	2bff      	cmp	r3, #255	; 0xff
    c6ec:	d105      	bne.n	c6fa <send_debug+0x496>
    c6ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6f6:	2200      	movs	r2, #0
    c6f8:	701a      	strb	r2, [r3, #0]
    c6fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c702:	781b      	ldrb	r3, [r3, #0]
    c704:	461a      	mov	r2, r3
    c706:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c70a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c70e:	7819      	ldrb	r1, [r3, #0]
    c710:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c718:	5499      	strb	r1, [r3, r2]
    c71a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c71e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c722:	781b      	ldrb	r3, [r3, #0]
    c724:	3301      	adds	r3, #1
    c726:	b2da      	uxtb	r2, r3
    c728:	f24c 5349 	movw	r3, #50505	; 0xc549
    c72c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c730:	701a      	strb	r2, [r3, #0]
    c732:	f24c 5349 	movw	r3, #50505	; 0xc549
    c736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c73a:	781b      	ldrb	r3, [r3, #0]
    c73c:	2bff      	cmp	r3, #255	; 0xff
    c73e:	d105      	bne.n	c74c <send_debug+0x4e8>
    c740:	f24c 5349 	movw	r3, #50505	; 0xc549
    c744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c748:	2200      	movs	r2, #0
    c74a:	701a      	strb	r2, [r3, #0]
    c74c:	f242 0339 	movw	r3, #8249	; 0x2039
    c750:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c754:	781b      	ldrb	r3, [r3, #0]
    c756:	b2db      	uxtb	r3, r3
    c758:	f003 0310 	and.w	r3, r3, #16
    c75c:	2b00      	cmp	r3, #0
    c75e:	d15a      	bne.n	c816 <send_debug+0x5b2>
    c760:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c768:	781b      	ldrb	r3, [r3, #0]
    c76a:	b2db      	uxtb	r3, r3
    c76c:	461a      	mov	r2, r3
    c76e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c776:	5c9a      	ldrb	r2, [r3, r2]
    c778:	f24c 634b 	movw	r3, #50763	; 0xc64b
    c77c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c780:	701a      	strb	r2, [r3, #0]
    c782:	f24c 634c 	movw	r3, #50764	; 0xc64c
    c786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c78a:	2200      	movs	r2, #0
    c78c:	701a      	strb	r2, [r3, #0]
    c78e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c796:	781b      	ldrb	r3, [r3, #0]
    c798:	b2db      	uxtb	r3, r3
    c79a:	3301      	adds	r3, #1
    c79c:	b2da      	uxtb	r2, r3
    c79e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c7a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7a6:	701a      	strb	r2, [r3, #0]
    c7a8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c7ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7b0:	781b      	ldrb	r3, [r3, #0]
    c7b2:	b2db      	uxtb	r3, r3
    c7b4:	2bff      	cmp	r3, #255	; 0xff
    c7b6:	d105      	bne.n	c7c4 <send_debug+0x560>
    c7b8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c7bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7c0:	2200      	movs	r2, #0
    c7c2:	701a      	strb	r2, [r3, #0]
    c7c4:	f242 0338 	movw	r3, #8248	; 0x2038
    c7c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7cc:	f242 0238 	movw	r2, #8248	; 0x2038
    c7d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c7d4:	7812      	ldrb	r2, [r2, #0]
    c7d6:	b2d2      	uxtb	r2, r2
    c7d8:	f042 0201 	orr.w	r2, r2, #1
    c7dc:	b2d2      	uxtb	r2, r2
    c7de:	701a      	strb	r2, [r3, #0]
    c7e0:	f242 0339 	movw	r3, #8249	; 0x2039
    c7e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7e8:	f242 0239 	movw	r2, #8249	; 0x2039
    c7ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c7f0:	7812      	ldrb	r2, [r2, #0]
    c7f2:	b2d2      	uxtb	r2, r2
    c7f4:	f042 0210 	orr.w	r2, r2, #16
    c7f8:	b2d2      	uxtb	r2, r2
    c7fa:	701a      	strb	r2, [r3, #0]
    c7fc:	e00b      	b.n	c816 <send_debug+0x5b2>
    c7fe:	f24c 5348 	movw	r3, #50504	; 0xc548
    c802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c806:	781b      	ldrb	r3, [r3, #0]
    c808:	3301      	adds	r3, #1
    c80a:	b2da      	uxtb	r2, r3
    c80c:	f24c 5348 	movw	r3, #50504	; 0xc548
    c810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c814:	701a      	strb	r2, [r3, #0]
}
    c816:	46bd      	mov	sp, r7
    c818:	f85d 7b04 	ldr.w	r7, [sp], #4
    c81c:	4770      	bx	lr
    c81e:	bf00      	nop

0000c820 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c820:	b480      	push	{r7}
    c822:	af00      	add	r7, sp, #0
  if(!boot)
    c824:	f240 533d 	movw	r3, #1341	; 0x53d
    c828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c82c:	781b      	ldrb	r3, [r3, #0]
    c82e:	2b00      	cmp	r3, #0
    c830:	f040 83a9 	bne.w	cf86 <send_nav_ref+0x766>
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c834:	f24c 5341 	movw	r3, #50497	; 0xc541
    c838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c83c:	781a      	ldrb	r2, [r3, #0]
    c83e:	f248 531f 	movw	r3, #34079	; 0x851f
    c842:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c846:	fba3 1302 	umull	r1, r3, r3, r2
    c84a:	095b      	lsrs	r3, r3, #5
    c84c:	2164      	movs	r1, #100	; 0x64
    c84e:	fb01 f303 	mul.w	r3, r1, r3
    c852:	1ad3      	subs	r3, r2, r3
    c854:	b2db      	uxtb	r3, r3
    c856:	2b31      	cmp	r3, #49	; 0x31
    c858:	f040 8395 	bne.w	cf86 <send_nav_ref+0x766>
    c85c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c864:	781a      	ldrb	r2, [r3, #0]
    c866:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c86a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c86e:	781b      	ldrb	r3, [r3, #0]
    c870:	b2db      	uxtb	r3, r3
    c872:	429a      	cmp	r2, r3
    c874:	d313      	bcc.n	c89e <send_nav_ref+0x7e>
    c876:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c87a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c87e:	781b      	ldrb	r3, [r3, #0]
    c880:	b2db      	uxtb	r3, r3
    c882:	461a      	mov	r2, r3
    c884:	f24c 5349 	movw	r3, #50505	; 0xc549
    c888:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c88c:	781b      	ldrb	r3, [r3, #0]
    c88e:	1ad3      	subs	r3, r2, r3
    c890:	33ff      	adds	r3, #255	; 0xff
    c892:	2b0c      	cmp	r3, #12
    c894:	bfd4      	ite	le
    c896:	2300      	movle	r3, #0
    c898:	2301      	movgt	r3, #1
    c89a:	b2db      	uxtb	r3, r3
    c89c:	e011      	b.n	c8c2 <send_nav_ref+0xa2>
    c89e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c8a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8a6:	781b      	ldrb	r3, [r3, #0]
    c8a8:	b2db      	uxtb	r3, r3
    c8aa:	461a      	mov	r2, r3
    c8ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    c8b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8b4:	781b      	ldrb	r3, [r3, #0]
    c8b6:	1ad3      	subs	r3, r2, r3
    c8b8:	2b0c      	cmp	r3, #12
    c8ba:	bfd4      	ite	le
    c8bc:	2300      	movle	r3, #0
    c8be:	2301      	movgt	r3, #1
    c8c0:	b2db      	uxtb	r3, r3
    c8c2:	2b00      	cmp	r3, #0
    c8c4:	f000 8353 	beq.w	cf6e <send_nav_ref+0x74e>
    c8c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8d0:	781b      	ldrb	r3, [r3, #0]
    c8d2:	461a      	mov	r2, r3
    c8d4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c8d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8dc:	2105      	movs	r1, #5
    c8de:	5499      	strb	r1, [r3, r2]
    c8e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8e8:	781b      	ldrb	r3, [r3, #0]
    c8ea:	3301      	adds	r3, #1
    c8ec:	b2da      	uxtb	r2, r3
    c8ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    c8f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8f6:	701a      	strb	r2, [r3, #0]
    c8f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c900:	781b      	ldrb	r3, [r3, #0]
    c902:	2bff      	cmp	r3, #255	; 0xff
    c904:	d105      	bne.n	c912 <send_nav_ref+0xf2>
    c906:	f24c 5349 	movw	r3, #50505	; 0xc549
    c90a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c90e:	2200      	movs	r2, #0
    c910:	701a      	strb	r2, [r3, #0]
    c912:	f24c 5349 	movw	r3, #50505	; 0xc549
    c916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c91a:	781b      	ldrb	r3, [r3, #0]
    c91c:	461a      	mov	r2, r3
    c91e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c926:	2109      	movs	r1, #9
    c928:	5499      	strb	r1, [r3, r2]
    c92a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c92e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c932:	781b      	ldrb	r3, [r3, #0]
    c934:	3301      	adds	r3, #1
    c936:	b2da      	uxtb	r2, r3
    c938:	f24c 5349 	movw	r3, #50505	; 0xc549
    c93c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c940:	701a      	strb	r2, [r3, #0]
    c942:	f24c 5349 	movw	r3, #50505	; 0xc549
    c946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c94a:	781b      	ldrb	r3, [r3, #0]
    c94c:	2bff      	cmp	r3, #255	; 0xff
    c94e:	d105      	bne.n	c95c <send_nav_ref+0x13c>
    c950:	f24c 5349 	movw	r3, #50505	; 0xc549
    c954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c958:	2200      	movs	r2, #0
    c95a:	701a      	strb	r2, [r3, #0]
    c95c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c964:	2209      	movs	r2, #9
    c966:	701a      	strb	r2, [r3, #0]
    c968:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c970:	2209      	movs	r2, #9
    c972:	701a      	strb	r2, [r3, #0]
    c974:	f24c 5349 	movw	r3, #50505	; 0xc549
    c978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c97c:	781b      	ldrb	r3, [r3, #0]
    c97e:	461a      	mov	r2, r3
    c980:	f648 2390 	movw	r3, #35472	; 0x8a90
    c984:	f2c0 0301 	movt	r3, #1
    c988:	7819      	ldrb	r1, [r3, #0]
    c98a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c98e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c992:	5499      	strb	r1, [r3, r2]
    c994:	f648 2390 	movw	r3, #35472	; 0x8a90
    c998:	f2c0 0301 	movt	r3, #1
    c99c:	781a      	ldrb	r2, [r3, #0]
    c99e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c9a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9a6:	781b      	ldrb	r3, [r3, #0]
    c9a8:	4413      	add	r3, r2
    c9aa:	b2da      	uxtb	r2, r3
    c9ac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c9b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9b4:	701a      	strb	r2, [r3, #0]
    c9b6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c9ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9be:	781a      	ldrb	r2, [r3, #0]
    c9c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c9c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9c8:	781b      	ldrb	r3, [r3, #0]
    c9ca:	4413      	add	r3, r2
    c9cc:	b2da      	uxtb	r2, r3
    c9ce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c9d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9d6:	701a      	strb	r2, [r3, #0]
    c9d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9e0:	781b      	ldrb	r3, [r3, #0]
    c9e2:	3301      	adds	r3, #1
    c9e4:	b2da      	uxtb	r2, r3
    c9e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ee:	701a      	strb	r2, [r3, #0]
    c9f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9f8:	781b      	ldrb	r3, [r3, #0]
    c9fa:	2bff      	cmp	r3, #255	; 0xff
    c9fc:	d105      	bne.n	ca0a <send_nav_ref+0x1ea>
    c9fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca06:	2200      	movs	r2, #0
    ca08:	701a      	strb	r2, [r3, #0]
    ca0a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca12:	781b      	ldrb	r3, [r3, #0]
    ca14:	461a      	mov	r2, r3
    ca16:	f648 2390 	movw	r3, #35472	; 0x8a90
    ca1a:	f2c0 0301 	movt	r3, #1
    ca1e:	7859      	ldrb	r1, [r3, #1]
    ca20:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ca24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca28:	5499      	strb	r1, [r3, r2]
    ca2a:	4bd2      	ldr	r3, [pc, #840]	; (cd74 <send_nav_ref+0x554>)
    ca2c:	781a      	ldrb	r2, [r3, #0]
    ca2e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ca32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca36:	781b      	ldrb	r3, [r3, #0]
    ca38:	4413      	add	r3, r2
    ca3a:	b2da      	uxtb	r2, r3
    ca3c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ca40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca44:	701a      	strb	r2, [r3, #0]
    ca46:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ca4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca4e:	781a      	ldrb	r2, [r3, #0]
    ca50:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ca54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca58:	781b      	ldrb	r3, [r3, #0]
    ca5a:	4413      	add	r3, r2
    ca5c:	b2da      	uxtb	r2, r3
    ca5e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ca62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca66:	701a      	strb	r2, [r3, #0]
    ca68:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca70:	781b      	ldrb	r3, [r3, #0]
    ca72:	3301      	adds	r3, #1
    ca74:	b2da      	uxtb	r2, r3
    ca76:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca7e:	701a      	strb	r2, [r3, #0]
    ca80:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca88:	781b      	ldrb	r3, [r3, #0]
    ca8a:	2bff      	cmp	r3, #255	; 0xff
    ca8c:	d105      	bne.n	ca9a <send_nav_ref+0x27a>
    ca8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca96:	2200      	movs	r2, #0
    ca98:	701a      	strb	r2, [r3, #0]
    ca9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caa2:	781b      	ldrb	r3, [r3, #0]
    caa4:	461a      	mov	r2, r3
    caa6:	f648 2390 	movw	r3, #35472	; 0x8a90
    caaa:	f2c0 0301 	movt	r3, #1
    caae:	7899      	ldrb	r1, [r3, #2]
    cab0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cab8:	5499      	strb	r1, [r3, r2]
    caba:	4baf      	ldr	r3, [pc, #700]	; (cd78 <send_nav_ref+0x558>)
    cabc:	781a      	ldrb	r2, [r3, #0]
    cabe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cac6:	781b      	ldrb	r3, [r3, #0]
    cac8:	4413      	add	r3, r2
    caca:	b2da      	uxtb	r2, r3
    cacc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cad4:	701a      	strb	r2, [r3, #0]
    cad6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cade:	781a      	ldrb	r2, [r3, #0]
    cae0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cae8:	781b      	ldrb	r3, [r3, #0]
    caea:	4413      	add	r3, r2
    caec:	b2da      	uxtb	r2, r3
    caee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    caf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caf6:	701a      	strb	r2, [r3, #0]
    caf8:	f24c 5349 	movw	r3, #50505	; 0xc549
    cafc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb00:	781b      	ldrb	r3, [r3, #0]
    cb02:	3301      	adds	r3, #1
    cb04:	b2da      	uxtb	r2, r3
    cb06:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb0e:	701a      	strb	r2, [r3, #0]
    cb10:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb18:	781b      	ldrb	r3, [r3, #0]
    cb1a:	2bff      	cmp	r3, #255	; 0xff
    cb1c:	d105      	bne.n	cb2a <send_nav_ref+0x30a>
    cb1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb26:	2200      	movs	r2, #0
    cb28:	701a      	strb	r2, [r3, #0]
    cb2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb32:	781b      	ldrb	r3, [r3, #0]
    cb34:	461a      	mov	r2, r3
    cb36:	f648 2390 	movw	r3, #35472	; 0x8a90
    cb3a:	f2c0 0301 	movt	r3, #1
    cb3e:	78d9      	ldrb	r1, [r3, #3]
    cb40:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cb44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb48:	5499      	strb	r1, [r3, r2]
    cb4a:	4b8c      	ldr	r3, [pc, #560]	; (cd7c <send_nav_ref+0x55c>)
    cb4c:	781a      	ldrb	r2, [r3, #0]
    cb4e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb56:	781b      	ldrb	r3, [r3, #0]
    cb58:	4413      	add	r3, r2
    cb5a:	b2da      	uxtb	r2, r3
    cb5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb64:	701a      	strb	r2, [r3, #0]
    cb66:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cb6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb6e:	781a      	ldrb	r2, [r3, #0]
    cb70:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb78:	781b      	ldrb	r3, [r3, #0]
    cb7a:	4413      	add	r3, r2
    cb7c:	b2da      	uxtb	r2, r3
    cb7e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cb82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb86:	701a      	strb	r2, [r3, #0]
    cb88:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb90:	781b      	ldrb	r3, [r3, #0]
    cb92:	3301      	adds	r3, #1
    cb94:	b2da      	uxtb	r2, r3
    cb96:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb9e:	701a      	strb	r2, [r3, #0]
    cba0:	f24c 5349 	movw	r3, #50505	; 0xc549
    cba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cba8:	781b      	ldrb	r3, [r3, #0]
    cbaa:	2bff      	cmp	r3, #255	; 0xff
    cbac:	d105      	bne.n	cbba <send_nav_ref+0x39a>
    cbae:	f24c 5349 	movw	r3, #50505	; 0xc549
    cbb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbb6:	2200      	movs	r2, #0
    cbb8:	701a      	strb	r2, [r3, #0]
    cbba:	f24c 5349 	movw	r3, #50505	; 0xc549
    cbbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbc2:	781b      	ldrb	r3, [r3, #0]
    cbc4:	461a      	mov	r2, r3
    cbc6:	f648 2394 	movw	r3, #35476	; 0x8a94
    cbca:	f2c0 0301 	movt	r3, #1
    cbce:	7819      	ldrb	r1, [r3, #0]
    cbd0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cbd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbd8:	5499      	strb	r1, [r3, r2]
    cbda:	f648 2394 	movw	r3, #35476	; 0x8a94
    cbde:	f2c0 0301 	movt	r3, #1
    cbe2:	781a      	ldrb	r2, [r3, #0]
    cbe4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cbe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbec:	781b      	ldrb	r3, [r3, #0]
    cbee:	4413      	add	r3, r2
    cbf0:	b2da      	uxtb	r2, r3
    cbf2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cbf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbfa:	701a      	strb	r2, [r3, #0]
    cbfc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cc00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc04:	781a      	ldrb	r2, [r3, #0]
    cc06:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc0e:	781b      	ldrb	r3, [r3, #0]
    cc10:	4413      	add	r3, r2
    cc12:	b2da      	uxtb	r2, r3
    cc14:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cc18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc1c:	701a      	strb	r2, [r3, #0]
    cc1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc26:	781b      	ldrb	r3, [r3, #0]
    cc28:	3301      	adds	r3, #1
    cc2a:	b2da      	uxtb	r2, r3
    cc2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc34:	701a      	strb	r2, [r3, #0]
    cc36:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc3e:	781b      	ldrb	r3, [r3, #0]
    cc40:	2bff      	cmp	r3, #255	; 0xff
    cc42:	d105      	bne.n	cc50 <send_nav_ref+0x430>
    cc44:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc4c:	2200      	movs	r2, #0
    cc4e:	701a      	strb	r2, [r3, #0]
    cc50:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc58:	781b      	ldrb	r3, [r3, #0]
    cc5a:	461a      	mov	r2, r3
    cc5c:	f648 2394 	movw	r3, #35476	; 0x8a94
    cc60:	f2c0 0301 	movt	r3, #1
    cc64:	7859      	ldrb	r1, [r3, #1]
    cc66:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cc6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc6e:	5499      	strb	r1, [r3, r2]
    cc70:	4b43      	ldr	r3, [pc, #268]	; (cd80 <send_nav_ref+0x560>)
    cc72:	781a      	ldrb	r2, [r3, #0]
    cc74:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc7c:	781b      	ldrb	r3, [r3, #0]
    cc7e:	4413      	add	r3, r2
    cc80:	b2da      	uxtb	r2, r3
    cc82:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc8a:	701a      	strb	r2, [r3, #0]
    cc8c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cc90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc94:	781a      	ldrb	r2, [r3, #0]
    cc96:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc9e:	781b      	ldrb	r3, [r3, #0]
    cca0:	4413      	add	r3, r2
    cca2:	b2da      	uxtb	r2, r3
    cca4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccac:	701a      	strb	r2, [r3, #0]
    ccae:	f24c 5349 	movw	r3, #50505	; 0xc549
    ccb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccb6:	781b      	ldrb	r3, [r3, #0]
    ccb8:	3301      	adds	r3, #1
    ccba:	b2da      	uxtb	r2, r3
    ccbc:	f24c 5349 	movw	r3, #50505	; 0xc549
    ccc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccc4:	701a      	strb	r2, [r3, #0]
    ccc6:	f24c 5349 	movw	r3, #50505	; 0xc549
    ccca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccce:	781b      	ldrb	r3, [r3, #0]
    ccd0:	2bff      	cmp	r3, #255	; 0xff
    ccd2:	d105      	bne.n	cce0 <send_nav_ref+0x4c0>
    ccd4:	f24c 5349 	movw	r3, #50505	; 0xc549
    ccd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccdc:	2200      	movs	r2, #0
    ccde:	701a      	strb	r2, [r3, #0]
    cce0:	f24c 5349 	movw	r3, #50505	; 0xc549
    cce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cce8:	781b      	ldrb	r3, [r3, #0]
    ccea:	461a      	mov	r2, r3
    ccec:	f648 2394 	movw	r3, #35476	; 0x8a94
    ccf0:	f2c0 0301 	movt	r3, #1
    ccf4:	7899      	ldrb	r1, [r3, #2]
    ccf6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ccfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccfe:	5499      	strb	r1, [r3, r2]
    cd00:	4b20      	ldr	r3, [pc, #128]	; (cd84 <send_nav_ref+0x564>)
    cd02:	781a      	ldrb	r2, [r3, #0]
    cd04:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd0c:	781b      	ldrb	r3, [r3, #0]
    cd0e:	4413      	add	r3, r2
    cd10:	b2da      	uxtb	r2, r3
    cd12:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd1a:	701a      	strb	r2, [r3, #0]
    cd1c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cd20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd24:	781a      	ldrb	r2, [r3, #0]
    cd26:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd2e:	781b      	ldrb	r3, [r3, #0]
    cd30:	4413      	add	r3, r2
    cd32:	b2da      	uxtb	r2, r3
    cd34:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cd38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd3c:	701a      	strb	r2, [r3, #0]
    cd3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd46:	781b      	ldrb	r3, [r3, #0]
    cd48:	3301      	adds	r3, #1
    cd4a:	b2da      	uxtb	r2, r3
    cd4c:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd54:	701a      	strb	r2, [r3, #0]
    cd56:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd5e:	781b      	ldrb	r3, [r3, #0]
    cd60:	2bff      	cmp	r3, #255	; 0xff
    cd62:	d111      	bne.n	cd88 <send_nav_ref+0x568>
    cd64:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd6c:	2200      	movs	r2, #0
    cd6e:	701a      	strb	r2, [r3, #0]
    cd70:	e00a      	b.n	cd88 <send_nav_ref+0x568>
    cd72:	bf00      	nop
    cd74:	00018a91 	.word	0x00018a91
    cd78:	00018a92 	.word	0x00018a92
    cd7c:	00018a93 	.word	0x00018a93
    cd80:	00018a95 	.word	0x00018a95
    cd84:	00018a96 	.word	0x00018a96
    cd88:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd90:	781b      	ldrb	r3, [r3, #0]
    cd92:	461a      	mov	r2, r3
    cd94:	f648 2394 	movw	r3, #35476	; 0x8a94
    cd98:	f2c0 0301 	movt	r3, #1
    cd9c:	78d9      	ldrb	r1, [r3, #3]
    cd9e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cda2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cda6:	5499      	strb	r1, [r3, r2]
    cda8:	4b79      	ldr	r3, [pc, #484]	; (cf90 <send_nav_ref+0x770>)
    cdaa:	781a      	ldrb	r2, [r3, #0]
    cdac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cdb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdb4:	781b      	ldrb	r3, [r3, #0]
    cdb6:	4413      	add	r3, r2
    cdb8:	b2da      	uxtb	r2, r3
    cdba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cdbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdc2:	701a      	strb	r2, [r3, #0]
    cdc4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cdc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdcc:	781a      	ldrb	r2, [r3, #0]
    cdce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cdd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdd6:	781b      	ldrb	r3, [r3, #0]
    cdd8:	4413      	add	r3, r2
    cdda:	b2da      	uxtb	r2, r3
    cddc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cde0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cde4:	701a      	strb	r2, [r3, #0]
    cde6:	f24c 5349 	movw	r3, #50505	; 0xc549
    cdea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdee:	781b      	ldrb	r3, [r3, #0]
    cdf0:	3301      	adds	r3, #1
    cdf2:	b2da      	uxtb	r2, r3
    cdf4:	f24c 5349 	movw	r3, #50505	; 0xc549
    cdf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdfc:	701a      	strb	r2, [r3, #0]
    cdfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce06:	781b      	ldrb	r3, [r3, #0]
    ce08:	2bff      	cmp	r3, #255	; 0xff
    ce0a:	d105      	bne.n	ce18 <send_nav_ref+0x5f8>
    ce0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce14:	2200      	movs	r2, #0
    ce16:	701a      	strb	r2, [r3, #0]
    ce18:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce20:	781b      	ldrb	r3, [r3, #0]
    ce22:	461a      	mov	r2, r3
    ce24:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ce28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce2c:	7819      	ldrb	r1, [r3, #0]
    ce2e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ce32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce36:	5499      	strb	r1, [r3, r2]
    ce38:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce40:	781b      	ldrb	r3, [r3, #0]
    ce42:	3301      	adds	r3, #1
    ce44:	b2da      	uxtb	r2, r3
    ce46:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce4e:	701a      	strb	r2, [r3, #0]
    ce50:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce58:	781b      	ldrb	r3, [r3, #0]
    ce5a:	2bff      	cmp	r3, #255	; 0xff
    ce5c:	d105      	bne.n	ce6a <send_nav_ref+0x64a>
    ce5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce66:	2200      	movs	r2, #0
    ce68:	701a      	strb	r2, [r3, #0]
    ce6a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce72:	781b      	ldrb	r3, [r3, #0]
    ce74:	461a      	mov	r2, r3
    ce76:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ce7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce7e:	7819      	ldrb	r1, [r3, #0]
    ce80:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ce84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce88:	5499      	strb	r1, [r3, r2]
    ce8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce92:	781b      	ldrb	r3, [r3, #0]
    ce94:	3301      	adds	r3, #1
    ce96:	b2da      	uxtb	r2, r3
    ce98:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cea0:	701a      	strb	r2, [r3, #0]
    cea2:	f24c 5349 	movw	r3, #50505	; 0xc549
    cea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceaa:	781b      	ldrb	r3, [r3, #0]
    ceac:	2bff      	cmp	r3, #255	; 0xff
    ceae:	d105      	bne.n	cebc <send_nav_ref+0x69c>
    ceb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    ceb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceb8:	2200      	movs	r2, #0
    ceba:	701a      	strb	r2, [r3, #0]
    cebc:	f242 0339 	movw	r3, #8249	; 0x2039
    cec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cec4:	781b      	ldrb	r3, [r3, #0]
    cec6:	b2db      	uxtb	r3, r3
    cec8:	f003 0310 	and.w	r3, r3, #16
    cecc:	2b00      	cmp	r3, #0
    cece:	d15a      	bne.n	cf86 <send_nav_ref+0x766>
    ced0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ced4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ced8:	781b      	ldrb	r3, [r3, #0]
    ceda:	b2db      	uxtb	r3, r3
    cedc:	461a      	mov	r2, r3
    cede:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cee6:	5c9a      	ldrb	r2, [r3, r2]
    cee8:	f24c 634b 	movw	r3, #50763	; 0xc64b
    ceec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cef0:	701a      	strb	r2, [r3, #0]
    cef2:	f24c 634c 	movw	r3, #50764	; 0xc64c
    cef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cefa:	2200      	movs	r2, #0
    cefc:	701a      	strb	r2, [r3, #0]
    cefe:	f24c 534a 	movw	r3, #50506	; 0xc54a
    cf02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf06:	781b      	ldrb	r3, [r3, #0]
    cf08:	b2db      	uxtb	r3, r3
    cf0a:	3301      	adds	r3, #1
    cf0c:	b2da      	uxtb	r2, r3
    cf0e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    cf12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf16:	701a      	strb	r2, [r3, #0]
    cf18:	f24c 534a 	movw	r3, #50506	; 0xc54a
    cf1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf20:	781b      	ldrb	r3, [r3, #0]
    cf22:	b2db      	uxtb	r3, r3
    cf24:	2bff      	cmp	r3, #255	; 0xff
    cf26:	d105      	bne.n	cf34 <send_nav_ref+0x714>
    cf28:	f24c 534a 	movw	r3, #50506	; 0xc54a
    cf2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf30:	2200      	movs	r2, #0
    cf32:	701a      	strb	r2, [r3, #0]
    cf34:	f242 0338 	movw	r3, #8248	; 0x2038
    cf38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf3c:	f242 0238 	movw	r2, #8248	; 0x2038
    cf40:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cf44:	7812      	ldrb	r2, [r2, #0]
    cf46:	b2d2      	uxtb	r2, r2
    cf48:	f042 0201 	orr.w	r2, r2, #1
    cf4c:	b2d2      	uxtb	r2, r2
    cf4e:	701a      	strb	r2, [r3, #0]
    cf50:	f242 0339 	movw	r3, #8249	; 0x2039
    cf54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf58:	f242 0239 	movw	r2, #8249	; 0x2039
    cf5c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cf60:	7812      	ldrb	r2, [r2, #0]
    cf62:	b2d2      	uxtb	r2, r2
    cf64:	f042 0210 	orr.w	r2, r2, #16
    cf68:	b2d2      	uxtb	r2, r2
    cf6a:	701a      	strb	r2, [r3, #0]
    cf6c:	e00b      	b.n	cf86 <send_nav_ref+0x766>
    cf6e:	f24c 5348 	movw	r3, #50504	; 0xc548
    cf72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf76:	781b      	ldrb	r3, [r3, #0]
    cf78:	3301      	adds	r3, #1
    cf7a:	b2da      	uxtb	r2, r3
    cf7c:	f24c 5348 	movw	r3, #50504	; 0xc548
    cf80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf84:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    cf86:	46bd      	mov	sp, r7
    cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf8c:	4770      	bx	lr
    cf8e:	bf00      	nop
    cf90:	00018a97 	.word	0x00018a97

0000cf94 <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    cf94:	b480      	push	{r7}
    cf96:	b083      	sub	sp, #12
    cf98:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    cf9a:	f24c 6350 	movw	r3, #50768	; 0xc650
    cf9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfa2:	8a1b      	ldrh	r3, [r3, #16]
    cfa4:	b21b      	sxth	r3, r3
    cfa6:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    cfaa:	db0d      	blt.n	cfc8 <inflight_calib_mode_update+0x34>
    cfac:	f24c 6350 	movw	r3, #50768	; 0xc650
    cfb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfb4:	8a1b      	ldrh	r3, [r3, #16]
    cfb6:	b21a      	sxth	r2, r3
    cfb8:	f640 437f 	movw	r3, #3199	; 0xc7f
    cfbc:	429a      	cmp	r2, r3
    cfbe:	bfd4      	ite	le
    cfc0:	2300      	movle	r3, #0
    cfc2:	2301      	movgt	r3, #1
    cfc4:	b2db      	uxtb	r3, r3
    cfc6:	e000      	b.n	cfca <inflight_calib_mode_update+0x36>
    cfc8:	2302      	movs	r3, #2
    cfca:	71fb      	strb	r3, [r7, #7]
    cfcc:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    cfd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfd4:	781b      	ldrb	r3, [r3, #0]
    cfd6:	79fa      	ldrb	r2, [r7, #7]
    cfd8:	429a      	cmp	r2, r3
    cfda:	d007      	beq.n	cfec <inflight_calib_mode_update+0x58>
    cfdc:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    cfe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfe4:	79fa      	ldrb	r2, [r7, #7]
    cfe6:	701a      	strb	r2, [r3, #0]
    cfe8:	2301      	movs	r3, #1
    cfea:	e000      	b.n	cfee <inflight_calib_mode_update+0x5a>
    cfec:	2300      	movs	r3, #0
}
    cfee:	4618      	mov	r0, r3
    cff0:	370c      	adds	r7, #12
    cff2:	46bd      	mov	sp, r7
    cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
    cff8:	4770      	bx	lr
    cffa:	bf00      	nop

0000cffc <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    cffc:	b580      	push	{r7, lr}
    cffe:	b082      	sub	sp, #8
    d000:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    d002:	f24c 637e 	movw	r3, #50814	; 0xc67e
    d006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d00a:	2201      	movs	r2, #1
    d00c:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    d00e:	f24c 637e 	movw	r3, #50814	; 0xc67e
    d012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d016:	781b      	ldrb	r3, [r3, #0]
    d018:	b2db      	uxtb	r3, r3
    d01a:	2b00      	cmp	r3, #0
    d01c:	f000 83c0 	beq.w	d7a0 <radio_control_task+0x7a4>
    uint8_t mode_changed = FALSE;
    d020:	2300      	movs	r3, #0
    d022:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    d024:	f7fa fa4c 	bl	74c0 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    d028:	4b3e      	ldr	r3, [pc, #248]	; (d124 <radio_control_task+0x128>)
    d02a:	781b      	ldrb	r3, [r3, #0]
    d02c:	b2db      	uxtb	r3, r3
    d02e:	f003 0302 	and.w	r3, r3, #2
    d032:	2b00      	cmp	r3, #0
    d034:	d00d      	beq.n	d052 <radio_control_task+0x56>
    d036:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d03a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d03e:	781b      	ldrb	r3, [r3, #0]
    d040:	2b01      	cmp	r3, #1
    d042:	d00d      	beq.n	d060 <radio_control_task+0x64>
    d044:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d04c:	781b      	ldrb	r3, [r3, #0]
    d04e:	2b00      	cmp	r3, #0
    d050:	d006      	beq.n	d060 <radio_control_task+0x64>
    d052:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    d056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d05a:	781b      	ldrb	r3, [r3, #0]
    d05c:	2b00      	cmp	r3, #0
    d05e:	d007      	beq.n	d070 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    d060:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d068:	2203      	movs	r2, #3
    d06a:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    d06c:	2301      	movs	r3, #1
    d06e:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    d070:	4b2c      	ldr	r3, [pc, #176]	; (d124 <radio_control_task+0x128>)
    d072:	781b      	ldrb	r3, [r3, #0]
    d074:	b2db      	uxtb	r3, r3
    d076:	f003 0304 	and.w	r3, r3, #4
    d07a:	2b00      	cmp	r3, #0
    d07c:	d023      	beq.n	d0c6 <radio_control_task+0xca>
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    d07e:	f7fa f8f9 	bl	7274 <pprz_mode_update>
    d082:	4603      	mov	r3, r0
    d084:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    d086:	79fa      	ldrb	r2, [r7, #7]
    d088:	79bb      	ldrb	r3, [r7, #6]
    d08a:	4313      	orrs	r3, r2
    d08c:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    d08e:	f7fa f93d 	bl	730c <ir_estim_mode_update>
    d092:	4603      	mov	r3, r0
    d094:	461a      	mov	r2, r3
    d096:	79fb      	ldrb	r3, [r7, #7]
    d098:	4313      	orrs	r3, r2
    d09a:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    d09c:	f7ff ff7a 	bl	cf94 <inflight_calib_mode_update>
    d0a0:	4603      	mov	r3, r0
    d0a2:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    d0a4:	797b      	ldrb	r3, [r7, #5]
    d0a6:	2b00      	cmp	r3, #0
    d0a8:	d102      	bne.n	d0b0 <radio_control_task+0xb4>
    d0aa:	79bb      	ldrb	r3, [r7, #6]
    d0ac:	2b00      	cmp	r3, #0
    d0ae:	d001      	beq.n	d0b4 <radio_control_task+0xb8>
    d0b0:	2301      	movs	r3, #1
    d0b2:	e000      	b.n	d0b6 <radio_control_task+0xba>
    d0b4:	2300      	movs	r3, #0
    d0b6:	b2db      	uxtb	r3, r3
    d0b8:	4618      	mov	r0, r3
    d0ba:	f008 fba1 	bl	15800 <inflight_calib>
      mode_changed |= calib_mode_changed;
    d0be:	79fa      	ldrb	r2, [r7, #7]
    d0c0:	797b      	ldrb	r3, [r7, #5]
    d0c2:	4313      	orrs	r3, r2
    d0c4:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    d0c6:	f7fa f949 	bl	735c <mcu1_status_update>
    d0ca:	4603      	mov	r3, r0
    d0cc:	461a      	mov	r2, r3
    d0ce:	79fb      	ldrb	r3, [r7, #7]
    d0d0:	4313      	orrs	r3, r2
    d0d2:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    d0d4:	2301      	movs	r3, #1
    d0d6:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    d0d8:	79fb      	ldrb	r3, [r7, #7]
    d0da:	2b00      	cmp	r3, #0
    d0dc:	f000 82bd 	beq.w	d65a <radio_control_task+0x65e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    d0e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d0e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0e8:	781a      	ldrb	r2, [r3, #0]
    d0ea:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d0ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0f2:	781b      	ldrb	r3, [r3, #0]
    d0f4:	b2db      	uxtb	r3, r3
    d0f6:	429a      	cmp	r2, r3
    d0f8:	d316      	bcc.n	d128 <radio_control_task+0x12c>
    d0fa:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d0fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d102:	781b      	ldrb	r3, [r3, #0]
    d104:	b2db      	uxtb	r3, r3
    d106:	461a      	mov	r2, r3
    d108:	f24c 5349 	movw	r3, #50505	; 0xc549
    d10c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d110:	781b      	ldrb	r3, [r3, #0]
    d112:	1ad3      	subs	r3, r2, r3
    d114:	33ff      	adds	r3, #255	; 0xff
    d116:	2b09      	cmp	r3, #9
    d118:	bfd4      	ite	le
    d11a:	2300      	movle	r3, #0
    d11c:	2301      	movgt	r3, #1
    d11e:	b2db      	uxtb	r3, r3
    d120:	e014      	b.n	d14c <radio_control_task+0x150>
    d122:	bf00      	nop
    d124:	2004c663 	.word	0x2004c663
    d128:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d12c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d130:	781b      	ldrb	r3, [r3, #0]
    d132:	b2db      	uxtb	r3, r3
    d134:	461a      	mov	r2, r3
    d136:	f24c 5349 	movw	r3, #50505	; 0xc549
    d13a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d13e:	781b      	ldrb	r3, [r3, #0]
    d140:	1ad3      	subs	r3, r2, r3
    d142:	2b09      	cmp	r3, #9
    d144:	bfd4      	ite	le
    d146:	2300      	movle	r3, #0
    d148:	2301      	movgt	r3, #1
    d14a:	b2db      	uxtb	r3, r3
    d14c:	2b00      	cmp	r3, #0
    d14e:	f000 8278 	beq.w	d642 <radio_control_task+0x646>
    d152:	f24c 5349 	movw	r3, #50505	; 0xc549
    d156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d15a:	781b      	ldrb	r3, [r3, #0]
    d15c:	461a      	mov	r2, r3
    d15e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d162:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d166:	2105      	movs	r1, #5
    d168:	5499      	strb	r1, [r3, r2]
    d16a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d16e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d172:	781b      	ldrb	r3, [r3, #0]
    d174:	3301      	adds	r3, #1
    d176:	b2da      	uxtb	r2, r3
    d178:	f24c 5349 	movw	r3, #50505	; 0xc549
    d17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d180:	701a      	strb	r2, [r3, #0]
    d182:	f24c 5349 	movw	r3, #50505	; 0xc549
    d186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d18a:	781b      	ldrb	r3, [r3, #0]
    d18c:	2bff      	cmp	r3, #255	; 0xff
    d18e:	d105      	bne.n	d19c <radio_control_task+0x1a0>
    d190:	f24c 5349 	movw	r3, #50505	; 0xc549
    d194:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d198:	2200      	movs	r2, #0
    d19a:	701a      	strb	r2, [r3, #0]
    d19c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d1a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1a4:	781b      	ldrb	r3, [r3, #0]
    d1a6:	461a      	mov	r2, r3
    d1a8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d1ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1b0:	210b      	movs	r1, #11
    d1b2:	5499      	strb	r1, [r3, r2]
    d1b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d1b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1bc:	781b      	ldrb	r3, [r3, #0]
    d1be:	3301      	adds	r3, #1
    d1c0:	b2da      	uxtb	r2, r3
    d1c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    d1c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1ca:	701a      	strb	r2, [r3, #0]
    d1cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    d1d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1d4:	781b      	ldrb	r3, [r3, #0]
    d1d6:	2bff      	cmp	r3, #255	; 0xff
    d1d8:	d105      	bne.n	d1e6 <radio_control_task+0x1ea>
    d1da:	f24c 5349 	movw	r3, #50505	; 0xc549
    d1de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1e2:	2200      	movs	r2, #0
    d1e4:	701a      	strb	r2, [r3, #0]
    d1e6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d1ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1ee:	220b      	movs	r2, #11
    d1f0:	701a      	strb	r2, [r3, #0]
    d1f2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d1f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1fa:	220b      	movs	r2, #11
    d1fc:	701a      	strb	r2, [r3, #0]
    d1fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    d202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d206:	781b      	ldrb	r3, [r3, #0]
    d208:	461a      	mov	r2, r3
    d20a:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d20e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d212:	7819      	ldrb	r1, [r3, #0]
    d214:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d218:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d21c:	5499      	strb	r1, [r3, r2]
    d21e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d226:	781a      	ldrb	r2, [r3, #0]
    d228:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d22c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d230:	781b      	ldrb	r3, [r3, #0]
    d232:	4413      	add	r3, r2
    d234:	b2da      	uxtb	r2, r3
    d236:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d23e:	701a      	strb	r2, [r3, #0]
    d240:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d248:	781a      	ldrb	r2, [r3, #0]
    d24a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d24e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d252:	781b      	ldrb	r3, [r3, #0]
    d254:	4413      	add	r3, r2
    d256:	b2da      	uxtb	r2, r3
    d258:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d25c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d260:	701a      	strb	r2, [r3, #0]
    d262:	f24c 5349 	movw	r3, #50505	; 0xc549
    d266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d26a:	781b      	ldrb	r3, [r3, #0]
    d26c:	3301      	adds	r3, #1
    d26e:	b2da      	uxtb	r2, r3
    d270:	f24c 5349 	movw	r3, #50505	; 0xc549
    d274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d278:	701a      	strb	r2, [r3, #0]
    d27a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d27e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d282:	781b      	ldrb	r3, [r3, #0]
    d284:	2bff      	cmp	r3, #255	; 0xff
    d286:	d105      	bne.n	d294 <radio_control_task+0x298>
    d288:	f24c 5349 	movw	r3, #50505	; 0xc549
    d28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d290:	2200      	movs	r2, #0
    d292:	701a      	strb	r2, [r3, #0]
    d294:	f24c 5349 	movw	r3, #50505	; 0xc549
    d298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d29c:	781b      	ldrb	r3, [r3, #0]
    d29e:	461a      	mov	r2, r3
    d2a0:	f24c 532d 	movw	r3, #50477	; 0xc52d
    d2a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2a8:	7819      	ldrb	r1, [r3, #0]
    d2aa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2b2:	5499      	strb	r1, [r3, r2]
    d2b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d2b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2bc:	781a      	ldrb	r2, [r3, #0]
    d2be:	f24c 532d 	movw	r3, #50477	; 0xc52d
    d2c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2c6:	781b      	ldrb	r3, [r3, #0]
    d2c8:	4413      	add	r3, r2
    d2ca:	b2da      	uxtb	r2, r3
    d2cc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2d4:	701a      	strb	r2, [r3, #0]
    d2d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d2da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2de:	781a      	ldrb	r2, [r3, #0]
    d2e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d2e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2e8:	781b      	ldrb	r3, [r3, #0]
    d2ea:	4413      	add	r3, r2
    d2ec:	b2da      	uxtb	r2, r3
    d2ee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d2f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2f6:	701a      	strb	r2, [r3, #0]
    d2f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d300:	781b      	ldrb	r3, [r3, #0]
    d302:	3301      	adds	r3, #1
    d304:	b2da      	uxtb	r2, r3
    d306:	f24c 5349 	movw	r3, #50505	; 0xc549
    d30a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d30e:	701a      	strb	r2, [r3, #0]
    d310:	f24c 5349 	movw	r3, #50505	; 0xc549
    d314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d318:	781b      	ldrb	r3, [r3, #0]
    d31a:	2bff      	cmp	r3, #255	; 0xff
    d31c:	d105      	bne.n	d32a <radio_control_task+0x32e>
    d31e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d326:	2200      	movs	r2, #0
    d328:	701a      	strb	r2, [r3, #0]
    d32a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d32e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d332:	781b      	ldrb	r3, [r3, #0]
    d334:	461a      	mov	r2, r3
    d336:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d33a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d33e:	7819      	ldrb	r1, [r3, #0]
    d340:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d348:	5499      	strb	r1, [r3, r2]
    d34a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d34e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d352:	781a      	ldrb	r2, [r3, #0]
    d354:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d35c:	781b      	ldrb	r3, [r3, #0]
    d35e:	4413      	add	r3, r2
    d360:	b2da      	uxtb	r2, r3
    d362:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d36a:	701a      	strb	r2, [r3, #0]
    d36c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d374:	781a      	ldrb	r2, [r3, #0]
    d376:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d37a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d37e:	781b      	ldrb	r3, [r3, #0]
    d380:	4413      	add	r3, r2
    d382:	b2da      	uxtb	r2, r3
    d384:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d38c:	701a      	strb	r2, [r3, #0]
    d38e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d396:	781b      	ldrb	r3, [r3, #0]
    d398:	3301      	adds	r3, #1
    d39a:	b2da      	uxtb	r2, r3
    d39c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d3a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3a4:	701a      	strb	r2, [r3, #0]
    d3a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    d3aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3ae:	781b      	ldrb	r3, [r3, #0]
    d3b0:	2bff      	cmp	r3, #255	; 0xff
    d3b2:	d105      	bne.n	d3c0 <radio_control_task+0x3c4>
    d3b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3bc:	2200      	movs	r2, #0
    d3be:	701a      	strb	r2, [r3, #0]
    d3c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d3c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3c8:	781b      	ldrb	r3, [r3, #0]
    d3ca:	461a      	mov	r2, r3
    d3cc:	f24c 5333 	movw	r3, #50483	; 0xc533
    d3d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3d4:	7819      	ldrb	r1, [r3, #0]
    d3d6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d3da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3de:	5499      	strb	r1, [r3, r2]
    d3e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d3e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3e8:	781a      	ldrb	r2, [r3, #0]
    d3ea:	f24c 5333 	movw	r3, #50483	; 0xc533
    d3ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3f2:	781b      	ldrb	r3, [r3, #0]
    d3f4:	4413      	add	r3, r2
    d3f6:	b2da      	uxtb	r2, r3
    d3f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d3fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d400:	701a      	strb	r2, [r3, #0]
    d402:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d406:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d40a:	781a      	ldrb	r2, [r3, #0]
    d40c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d410:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d414:	781b      	ldrb	r3, [r3, #0]
    d416:	4413      	add	r3, r2
    d418:	b2da      	uxtb	r2, r3
    d41a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d41e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d422:	701a      	strb	r2, [r3, #0]
    d424:	f24c 5349 	movw	r3, #50505	; 0xc549
    d428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d42c:	781b      	ldrb	r3, [r3, #0]
    d42e:	3301      	adds	r3, #1
    d430:	b2da      	uxtb	r2, r3
    d432:	f24c 5349 	movw	r3, #50505	; 0xc549
    d436:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d43a:	701a      	strb	r2, [r3, #0]
    d43c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d444:	781b      	ldrb	r3, [r3, #0]
    d446:	2bff      	cmp	r3, #255	; 0xff
    d448:	d105      	bne.n	d456 <radio_control_task+0x45a>
    d44a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d44e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d452:	2200      	movs	r2, #0
    d454:	701a      	strb	r2, [r3, #0]
    d456:	f24c 5349 	movw	r3, #50505	; 0xc549
    d45a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d45e:	781b      	ldrb	r3, [r3, #0]
    d460:	461a      	mov	r2, r3
    d462:	f240 533c 	movw	r3, #1340	; 0x53c
    d466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d46a:	7819      	ldrb	r1, [r3, #0]
    d46c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d474:	5499      	strb	r1, [r3, r2]
    d476:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d47a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d47e:	781a      	ldrb	r2, [r3, #0]
    d480:	f240 533c 	movw	r3, #1340	; 0x53c
    d484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d488:	781b      	ldrb	r3, [r3, #0]
    d48a:	4413      	add	r3, r2
    d48c:	b2da      	uxtb	r2, r3
    d48e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d496:	701a      	strb	r2, [r3, #0]
    d498:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d49c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4a0:	781a      	ldrb	r2, [r3, #0]
    d4a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d4a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4aa:	781b      	ldrb	r3, [r3, #0]
    d4ac:	4413      	add	r3, r2
    d4ae:	b2da      	uxtb	r2, r3
    d4b0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d4b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4b8:	701a      	strb	r2, [r3, #0]
    d4ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4c2:	781b      	ldrb	r3, [r3, #0]
    d4c4:	3301      	adds	r3, #1
    d4c6:	b2da      	uxtb	r2, r3
    d4c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4d0:	701a      	strb	r2, [r3, #0]
    d4d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4da:	781b      	ldrb	r3, [r3, #0]
    d4dc:	2bff      	cmp	r3, #255	; 0xff
    d4de:	d105      	bne.n	d4ec <radio_control_task+0x4f0>
    d4e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4e8:	2200      	movs	r2, #0
    d4ea:	701a      	strb	r2, [r3, #0]
    d4ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4f4:	781b      	ldrb	r3, [r3, #0]
    d4f6:	461a      	mov	r2, r3
    d4f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d4fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d500:	7819      	ldrb	r1, [r3, #0]
    d502:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d50a:	5499      	strb	r1, [r3, r2]
    d50c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d514:	781b      	ldrb	r3, [r3, #0]
    d516:	3301      	adds	r3, #1
    d518:	b2da      	uxtb	r2, r3
    d51a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d51e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d522:	701a      	strb	r2, [r3, #0]
    d524:	f24c 5349 	movw	r3, #50505	; 0xc549
    d528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d52c:	781b      	ldrb	r3, [r3, #0]
    d52e:	2bff      	cmp	r3, #255	; 0xff
    d530:	d105      	bne.n	d53e <radio_control_task+0x542>
    d532:	f24c 5349 	movw	r3, #50505	; 0xc549
    d536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d53a:	2200      	movs	r2, #0
    d53c:	701a      	strb	r2, [r3, #0]
    d53e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d546:	781b      	ldrb	r3, [r3, #0]
    d548:	461a      	mov	r2, r3
    d54a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d54e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d552:	7819      	ldrb	r1, [r3, #0]
    d554:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d55c:	5499      	strb	r1, [r3, r2]
    d55e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d566:	781b      	ldrb	r3, [r3, #0]
    d568:	3301      	adds	r3, #1
    d56a:	b2da      	uxtb	r2, r3
    d56c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d574:	701a      	strb	r2, [r3, #0]
    d576:	f24c 5349 	movw	r3, #50505	; 0xc549
    d57a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d57e:	781b      	ldrb	r3, [r3, #0]
    d580:	2bff      	cmp	r3, #255	; 0xff
    d582:	d105      	bne.n	d590 <radio_control_task+0x594>
    d584:	f24c 5349 	movw	r3, #50505	; 0xc549
    d588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d58c:	2200      	movs	r2, #0
    d58e:	701a      	strb	r2, [r3, #0]
    d590:	f242 0339 	movw	r3, #8249	; 0x2039
    d594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d598:	781b      	ldrb	r3, [r3, #0]
    d59a:	b2db      	uxtb	r3, r3
    d59c:	f003 0310 	and.w	r3, r3, #16
    d5a0:	2b00      	cmp	r3, #0
    d5a2:	d15a      	bne.n	d65a <radio_control_task+0x65e>
    d5a4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ac:	781b      	ldrb	r3, [r3, #0]
    d5ae:	b2db      	uxtb	r3, r3
    d5b0:	461a      	mov	r2, r3
    d5b2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d5b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ba:	5c9a      	ldrb	r2, [r3, r2]
    d5bc:	f24c 634b 	movw	r3, #50763	; 0xc64b
    d5c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5c4:	701a      	strb	r2, [r3, #0]
    d5c6:	f24c 634c 	movw	r3, #50764	; 0xc64c
    d5ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ce:	2200      	movs	r2, #0
    d5d0:	701a      	strb	r2, [r3, #0]
    d5d2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d5d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5da:	781b      	ldrb	r3, [r3, #0]
    d5dc:	b2db      	uxtb	r3, r3
    d5de:	3301      	adds	r3, #1
    d5e0:	b2da      	uxtb	r2, r3
    d5e2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d5e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ea:	701a      	strb	r2, [r3, #0]
    d5ec:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d5f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5f4:	781b      	ldrb	r3, [r3, #0]
    d5f6:	b2db      	uxtb	r3, r3
    d5f8:	2bff      	cmp	r3, #255	; 0xff
    d5fa:	d105      	bne.n	d608 <radio_control_task+0x60c>
    d5fc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d604:	2200      	movs	r2, #0
    d606:	701a      	strb	r2, [r3, #0]
    d608:	f242 0338 	movw	r3, #8248	; 0x2038
    d60c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d610:	f242 0238 	movw	r2, #8248	; 0x2038
    d614:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d618:	7812      	ldrb	r2, [r2, #0]
    d61a:	b2d2      	uxtb	r2, r2
    d61c:	f042 0201 	orr.w	r2, r2, #1
    d620:	b2d2      	uxtb	r2, r2
    d622:	701a      	strb	r2, [r3, #0]
    d624:	f242 0339 	movw	r3, #8249	; 0x2039
    d628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d62c:	f242 0239 	movw	r2, #8249	; 0x2039
    d630:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d634:	7812      	ldrb	r2, [r2, #0]
    d636:	b2d2      	uxtb	r2, r2
    d638:	f042 0210 	orr.w	r2, r2, #16
    d63c:	b2d2      	uxtb	r2, r2
    d63e:	701a      	strb	r2, [r3, #0]
    d640:	e00b      	b.n	d65a <radio_control_task+0x65e>
    d642:	f24c 5348 	movw	r3, #50504	; 0xc548
    d646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d64a:	781b      	ldrb	r3, [r3, #0]
    d64c:	3301      	adds	r3, #1
    d64e:	b2da      	uxtb	r2, r3
    d650:	f24c 5348 	movw	r3, #50504	; 0xc548
    d654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d658:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d65a:	f24c 6350 	movw	r3, #50768	; 0xc650
    d65e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d662:	885b      	ldrh	r3, [r3, #2]
    d664:	b21b      	sxth	r3, r3
    d666:	4618      	mov	r0, r3
    d668:	f00a fec8 	bl	183fc <__aeabi_i2f>
    d66c:	4603      	mov	r3, r0
    d66e:	4618      	mov	r0, r3
    d670:	f04f 0100 	mov.w	r1, #0
    d674:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d678:	f00a ffc8 	bl	1860c <__aeabi_fdiv>
    d67c:	4603      	mov	r3, r0
    d67e:	4618      	mov	r0, r3
    d680:	f00a fa7c 	bl	17b7c <__aeabi_f2d>
    d684:	4602      	mov	r2, r0
    d686:	460b      	mov	r3, r1
    d688:	4610      	mov	r0, r2
    d68a:	4619      	mov	r1, r3
    d68c:	a346      	add	r3, pc, #280	; (adr r3, d7a8 <radio_control_task+0x7ac>)
    d68e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d692:	f00a fac7 	bl	17c24 <__aeabi_dmul>
    d696:	4602      	mov	r2, r0
    d698:	460b      	mov	r3, r1
    d69a:	4610      	mov	r0, r2
    d69c:	4619      	mov	r1, r3
    d69e:	f04f 0200 	mov.w	r2, #0
    d6a2:	f04f 0300 	mov.w	r3, #0
    d6a6:	f00a f90b 	bl	178c0 <__adddf3>
    d6aa:	4602      	mov	r2, r0
    d6ac:	460b      	mov	r3, r1
    d6ae:	4610      	mov	r0, r2
    d6b0:	4619      	mov	r1, r3
    d6b2:	f00a fd99 	bl	181e8 <__aeabi_d2f>
    d6b6:	4602      	mov	r2, r0
    d6b8:	f64c 0374 	movw	r3, #51316	; 0xc874
    d6bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6c0:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d6c2:	f24c 6350 	movw	r3, #50768	; 0xc650
    d6c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6ca:	889b      	ldrh	r3, [r3, #4]
    d6cc:	b21b      	sxth	r3, r3
    d6ce:	4618      	mov	r0, r3
    d6d0:	f00a fe94 	bl	183fc <__aeabi_i2f>
    d6d4:	4603      	mov	r3, r0
    d6d6:	4618      	mov	r0, r3
    d6d8:	f04f 0100 	mov.w	r1, #0
    d6dc:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d6e0:	f00a ff94 	bl	1860c <__aeabi_fdiv>
    d6e4:	4603      	mov	r3, r0
    d6e6:	4618      	mov	r0, r3
    d6e8:	f00a fa48 	bl	17b7c <__aeabi_f2d>
    d6ec:	4602      	mov	r2, r0
    d6ee:	460b      	mov	r3, r1
    d6f0:	4610      	mov	r0, r2
    d6f2:	4619      	mov	r1, r3
    d6f4:	f04f 0200 	mov.w	r2, #0
    d6f8:	f04f 0300 	mov.w	r3, #0
    d6fc:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d700:	f00a fa90 	bl	17c24 <__aeabi_dmul>
    d704:	4602      	mov	r2, r0
    d706:	460b      	mov	r3, r1
    d708:	4610      	mov	r0, r2
    d70a:	4619      	mov	r1, r3
    d70c:	f04f 0200 	mov.w	r2, #0
    d710:	f04f 0300 	mov.w	r3, #0
    d714:	f00a f8d4 	bl	178c0 <__adddf3>
    d718:	4602      	mov	r2, r0
    d71a:	460b      	mov	r3, r1
    d71c:	4610      	mov	r0, r2
    d71e:	4619      	mov	r1, r3
    d720:	f00a fd62 	bl	181e8 <__aeabi_d2f>
    d724:	4602      	mov	r2, r0
    d726:	f64c 0378 	movw	r3, #51320	; 0xc878
    d72a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d72e:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d730:	f24c 6350 	movw	r3, #50768	; 0xc650
    d734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d738:	881a      	ldrh	r2, [r3, #0]
    d73a:	f64c 037c 	movw	r3, #51324	; 0xc87c
    d73e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d742:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d744:	f24c 6350 	movw	r3, #50768	; 0xc650
    d748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d74c:	7c9a      	ldrb	r2, [r3, #18]
    d74e:	f24c 5334 	movw	r3, #50484	; 0xc534
    d752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d756:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d758:	f24c 6350 	movw	r3, #50768	; 0xc650
    d75c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d760:	7d5a      	ldrb	r2, [r3, #21]
    d762:	f24c 5332 	movw	r3, #50482	; 0xc532
    d766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d76a:	701a      	strb	r2, [r3, #0]

    events_update();
    d76c:	f7f9 fe26 	bl	73bc <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d770:	f7f8 fc26 	bl	5fc0 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d774:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d77c:	781b      	ldrb	r3, [r3, #0]
    d77e:	2b02      	cmp	r3, #2
    d780:	d10e      	bne.n	d7a0 <radio_control_task+0x7a4>
    d782:	f24c 6350 	movw	r3, #50768	; 0xc650
    d786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d78a:	881b      	ldrh	r3, [r3, #0]
    d78c:	b21b      	sxth	r3, r3
    d78e:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d792:	dd05      	ble.n	d7a0 <radio_control_task+0x7a4>
	launch = TRUE;
    d794:	f24c 5340 	movw	r3, #50496	; 0xc540
    d798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d79c:	2201      	movs	r2, #1
    d79e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d7a0:	3708      	adds	r7, #8
    d7a2:	46bd      	mov	sp, r7
    d7a4:	bd80      	pop	{r7, pc}
    d7a6:	bf00      	nop
    d7a8:	33333333 	.word	0x33333333
    d7ac:	bfe33333 	.word	0xbfe33333

0000d7b0 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d7b0:	b580      	push	{r7, lr}
    d7b2:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d7b4:	f24c 532e 	movw	r3, #50478	; 0xc52e
    d7b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7bc:	2203      	movs	r2, #3
    d7be:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d7c0:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d7c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7c8:	781b      	ldrb	r3, [r3, #0]
    d7ca:	2b03      	cmp	r3, #3
    d7cc:	d102      	bne.n	d7d4 <navigation_update+0x24>
    nav_home();
    d7ce:	f007 fa9b 	bl	14d08 <nav_home>
    d7d2:	e001      	b.n	d7d8 <navigation_update+0x28>
  else
    nav_update();
    d7d4:	f007 fabe 	bl	14d54 <nav_update>
}
    d7d8:	bd80      	pop	{r7, pc}
    d7da:	bf00      	nop

0000d7dc <send_nav_values>:

void send_nav_values(void){
    d7dc:	b480      	push	{r7}
    d7de:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d7e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d7e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7e8:	781a      	ldrb	r2, [r3, #0]
    d7ea:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d7ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7f2:	781b      	ldrb	r3, [r3, #0]
    d7f4:	b2db      	uxtb	r3, r3
    d7f6:	429a      	cmp	r2, r3
    d7f8:	d313      	bcc.n	d822 <send_nav_values+0x46>
    d7fa:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d7fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d802:	781b      	ldrb	r3, [r3, #0]
    d804:	b2db      	uxtb	r3, r3
    d806:	461a      	mov	r2, r3
    d808:	f24c 5349 	movw	r3, #50505	; 0xc549
    d80c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d810:	781b      	ldrb	r3, [r3, #0]
    d812:	1ad3      	subs	r3, r2, r3
    d814:	33ff      	adds	r3, #255	; 0xff
    d816:	2b1e      	cmp	r3, #30
    d818:	bfd4      	ite	le
    d81a:	2300      	movle	r3, #0
    d81c:	2301      	movgt	r3, #1
    d81e:	b2db      	uxtb	r3, r3
    d820:	e011      	b.n	d846 <send_nav_values+0x6a>
    d822:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d82a:	781b      	ldrb	r3, [r3, #0]
    d82c:	b2db      	uxtb	r3, r3
    d82e:	461a      	mov	r2, r3
    d830:	f24c 5349 	movw	r3, #50505	; 0xc549
    d834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d838:	781b      	ldrb	r3, [r3, #0]
    d83a:	1ad3      	subs	r3, r2, r3
    d83c:	2b1e      	cmp	r3, #30
    d83e:	bfd4      	ite	le
    d840:	2300      	movle	r3, #0
    d842:	2301      	movgt	r3, #1
    d844:	b2db      	uxtb	r3, r3
    d846:	2b00      	cmp	r3, #0
    d848:	f001 8094 	beq.w	e974 <send_nav_values+0x1198>
    d84c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d854:	781b      	ldrb	r3, [r3, #0]
    d856:	461a      	mov	r2, r3
    d858:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d860:	2105      	movs	r1, #5
    d862:	5499      	strb	r1, [r3, r2]
    d864:	f24c 5349 	movw	r3, #50505	; 0xc549
    d868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d86c:	781b      	ldrb	r3, [r3, #0]
    d86e:	3301      	adds	r3, #1
    d870:	b2da      	uxtb	r2, r3
    d872:	f24c 5349 	movw	r3, #50505	; 0xc549
    d876:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d87a:	701a      	strb	r2, [r3, #0]
    d87c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d884:	781b      	ldrb	r3, [r3, #0]
    d886:	2bff      	cmp	r3, #255	; 0xff
    d888:	d105      	bne.n	d896 <send_nav_values+0xba>
    d88a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d88e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d892:	2200      	movs	r2, #0
    d894:	701a      	strb	r2, [r3, #0]
    d896:	f24c 5349 	movw	r3, #50505	; 0xc549
    d89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d89e:	781b      	ldrb	r3, [r3, #0]
    d8a0:	461a      	mov	r2, r3
    d8a2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d8a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8aa:	210a      	movs	r1, #10
    d8ac:	5499      	strb	r1, [r3, r2]
    d8ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    d8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8b6:	781b      	ldrb	r3, [r3, #0]
    d8b8:	3301      	adds	r3, #1
    d8ba:	b2da      	uxtb	r2, r3
    d8bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    d8c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8c4:	701a      	strb	r2, [r3, #0]
    d8c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    d8ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8ce:	781b      	ldrb	r3, [r3, #0]
    d8d0:	2bff      	cmp	r3, #255	; 0xff
    d8d2:	d105      	bne.n	d8e0 <send_nav_values+0x104>
    d8d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d8d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8dc:	2200      	movs	r2, #0
    d8de:	701a      	strb	r2, [r3, #0]
    d8e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8e8:	220a      	movs	r2, #10
    d8ea:	701a      	strb	r2, [r3, #0]
    d8ec:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d8f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8f4:	220a      	movs	r2, #10
    d8f6:	701a      	strb	r2, [r3, #0]
    d8f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    d8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d900:	781b      	ldrb	r3, [r3, #0]
    d902:	461a      	mov	r2, r3
    d904:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
    d908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d90c:	7819      	ldrb	r1, [r3, #0]
    d90e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d916:	5499      	strb	r1, [r3, r2]
    d918:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d920:	781a      	ldrb	r2, [r3, #0]
    d922:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
    d926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d92a:	781b      	ldrb	r3, [r3, #0]
    d92c:	4413      	add	r3, r2
    d92e:	b2da      	uxtb	r2, r3
    d930:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d938:	701a      	strb	r2, [r3, #0]
    d93a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d93e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d942:	781a      	ldrb	r2, [r3, #0]
    d944:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d94c:	781b      	ldrb	r3, [r3, #0]
    d94e:	4413      	add	r3, r2
    d950:	b2da      	uxtb	r2, r3
    d952:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d956:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d95a:	701a      	strb	r2, [r3, #0]
    d95c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d964:	781b      	ldrb	r3, [r3, #0]
    d966:	3301      	adds	r3, #1
    d968:	b2da      	uxtb	r2, r3
    d96a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d96e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d972:	701a      	strb	r2, [r3, #0]
    d974:	f24c 5349 	movw	r3, #50505	; 0xc549
    d978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d97c:	781b      	ldrb	r3, [r3, #0]
    d97e:	2bff      	cmp	r3, #255	; 0xff
    d980:	d105      	bne.n	d98e <send_nav_values+0x1b2>
    d982:	f24c 5349 	movw	r3, #50505	; 0xc549
    d986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d98a:	2200      	movs	r2, #0
    d98c:	701a      	strb	r2, [r3, #0]
    d98e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d996:	781b      	ldrb	r3, [r3, #0]
    d998:	461a      	mov	r2, r3
    d99a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
    d99e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9a2:	7819      	ldrb	r1, [r3, #0]
    d9a4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d9a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ac:	5499      	strb	r1, [r3, r2]
    d9ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d9b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9b6:	781a      	ldrb	r2, [r3, #0]
    d9b8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
    d9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9c0:	781b      	ldrb	r3, [r3, #0]
    d9c2:	4413      	add	r3, r2
    d9c4:	b2da      	uxtb	r2, r3
    d9c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d9ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ce:	701a      	strb	r2, [r3, #0]
    d9d0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d9d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9d8:	781a      	ldrb	r2, [r3, #0]
    d9da:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d9de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9e2:	781b      	ldrb	r3, [r3, #0]
    d9e4:	4413      	add	r3, r2
    d9e6:	b2da      	uxtb	r2, r3
    d9e8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d9ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9f0:	701a      	strb	r2, [r3, #0]
    d9f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9fa:	781b      	ldrb	r3, [r3, #0]
    d9fc:	3301      	adds	r3, #1
    d9fe:	b2da      	uxtb	r2, r3
    da00:	f24c 5349 	movw	r3, #50505	; 0xc549
    da04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da08:	701a      	strb	r2, [r3, #0]
    da0a:	f24c 5349 	movw	r3, #50505	; 0xc549
    da0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da12:	781b      	ldrb	r3, [r3, #0]
    da14:	2bff      	cmp	r3, #255	; 0xff
    da16:	d105      	bne.n	da24 <send_nav_values+0x248>
    da18:	f24c 5349 	movw	r3, #50505	; 0xc549
    da1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da20:	2200      	movs	r2, #0
    da22:	701a      	strb	r2, [r3, #0]
    da24:	f24c 5349 	movw	r3, #50505	; 0xc549
    da28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da2c:	781b      	ldrb	r3, [r3, #0]
    da2e:	461a      	mov	r2, r3
    da30:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    da34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da38:	7819      	ldrb	r1, [r3, #0]
    da3a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    da3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da42:	5499      	strb	r1, [r3, r2]
    da44:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    da48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da4c:	781a      	ldrb	r2, [r3, #0]
    da4e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da56:	781b      	ldrb	r3, [r3, #0]
    da58:	4413      	add	r3, r2
    da5a:	b2da      	uxtb	r2, r3
    da5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da64:	701a      	strb	r2, [r3, #0]
    da66:	f24c 634e 	movw	r3, #50766	; 0xc64e
    da6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da6e:	781a      	ldrb	r2, [r3, #0]
    da70:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da78:	781b      	ldrb	r3, [r3, #0]
    da7a:	4413      	add	r3, r2
    da7c:	b2da      	uxtb	r2, r3
    da7e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    da82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da86:	701a      	strb	r2, [r3, #0]
    da88:	f24c 5349 	movw	r3, #50505	; 0xc549
    da8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da90:	781b      	ldrb	r3, [r3, #0]
    da92:	3301      	adds	r3, #1
    da94:	b2da      	uxtb	r2, r3
    da96:	f24c 5349 	movw	r3, #50505	; 0xc549
    da9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da9e:	701a      	strb	r2, [r3, #0]
    daa0:	f24c 5349 	movw	r3, #50505	; 0xc549
    daa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daa8:	781b      	ldrb	r3, [r3, #0]
    daaa:	2bff      	cmp	r3, #255	; 0xff
    daac:	d105      	bne.n	daba <send_nav_values+0x2de>
    daae:	f24c 5349 	movw	r3, #50505	; 0xc549
    dab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dab6:	2200      	movs	r2, #0
    dab8:	701a      	strb	r2, [r3, #0]
    daba:	f24c 5349 	movw	r3, #50505	; 0xc549
    dabe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dac2:	781b      	ldrb	r3, [r3, #0]
    dac4:	461a      	mov	r2, r3
    dac6:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    daca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dace:	7859      	ldrb	r1, [r3, #1]
    dad0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dad8:	5499      	strb	r1, [r3, r2]
    dada:	4bd2      	ldr	r3, [pc, #840]	; (de24 <send_nav_values+0x648>)
    dadc:	781a      	ldrb	r2, [r3, #0]
    dade:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dae6:	781b      	ldrb	r3, [r3, #0]
    dae8:	4413      	add	r3, r2
    daea:	b2da      	uxtb	r2, r3
    daec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    daf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daf4:	701a      	strb	r2, [r3, #0]
    daf6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dafe:	781a      	ldrb	r2, [r3, #0]
    db00:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db08:	781b      	ldrb	r3, [r3, #0]
    db0a:	4413      	add	r3, r2
    db0c:	b2da      	uxtb	r2, r3
    db0e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    db12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db16:	701a      	strb	r2, [r3, #0]
    db18:	f24c 5349 	movw	r3, #50505	; 0xc549
    db1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db20:	781b      	ldrb	r3, [r3, #0]
    db22:	3301      	adds	r3, #1
    db24:	b2da      	uxtb	r2, r3
    db26:	f24c 5349 	movw	r3, #50505	; 0xc549
    db2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db2e:	701a      	strb	r2, [r3, #0]
    db30:	f24c 5349 	movw	r3, #50505	; 0xc549
    db34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db38:	781b      	ldrb	r3, [r3, #0]
    db3a:	2bff      	cmp	r3, #255	; 0xff
    db3c:	d105      	bne.n	db4a <send_nav_values+0x36e>
    db3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    db42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db46:	2200      	movs	r2, #0
    db48:	701a      	strb	r2, [r3, #0]
    db4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    db4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db52:	781b      	ldrb	r3, [r3, #0]
    db54:	461a      	mov	r2, r3
    db56:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    db5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db5e:	7899      	ldrb	r1, [r3, #2]
    db60:	f24c 534c 	movw	r3, #50508	; 0xc54c
    db64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db68:	5499      	strb	r1, [r3, r2]
    db6a:	4baf      	ldr	r3, [pc, #700]	; (de28 <send_nav_values+0x64c>)
    db6c:	781a      	ldrb	r2, [r3, #0]
    db6e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db76:	781b      	ldrb	r3, [r3, #0]
    db78:	4413      	add	r3, r2
    db7a:	b2da      	uxtb	r2, r3
    db7c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db84:	701a      	strb	r2, [r3, #0]
    db86:	f24c 634e 	movw	r3, #50766	; 0xc64e
    db8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db8e:	781a      	ldrb	r2, [r3, #0]
    db90:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db98:	781b      	ldrb	r3, [r3, #0]
    db9a:	4413      	add	r3, r2
    db9c:	b2da      	uxtb	r2, r3
    db9e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dba6:	701a      	strb	r2, [r3, #0]
    dba8:	f24c 5349 	movw	r3, #50505	; 0xc549
    dbac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbb0:	781b      	ldrb	r3, [r3, #0]
    dbb2:	3301      	adds	r3, #1
    dbb4:	b2da      	uxtb	r2, r3
    dbb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    dbba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbbe:	701a      	strb	r2, [r3, #0]
    dbc0:	f24c 5349 	movw	r3, #50505	; 0xc549
    dbc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbc8:	781b      	ldrb	r3, [r3, #0]
    dbca:	2bff      	cmp	r3, #255	; 0xff
    dbcc:	d105      	bne.n	dbda <send_nav_values+0x3fe>
    dbce:	f24c 5349 	movw	r3, #50505	; 0xc549
    dbd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbd6:	2200      	movs	r2, #0
    dbd8:	701a      	strb	r2, [r3, #0]
    dbda:	f24c 5349 	movw	r3, #50505	; 0xc549
    dbde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbe2:	781b      	ldrb	r3, [r3, #0]
    dbe4:	461a      	mov	r2, r3
    dbe6:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    dbea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbee:	78d9      	ldrb	r1, [r3, #3]
    dbf0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dbf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbf8:	5499      	strb	r1, [r3, r2]
    dbfa:	4b8c      	ldr	r3, [pc, #560]	; (de2c <send_nav_values+0x650>)
    dbfc:	781a      	ldrb	r2, [r3, #0]
    dbfe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc06:	781b      	ldrb	r3, [r3, #0]
    dc08:	4413      	add	r3, r2
    dc0a:	b2da      	uxtb	r2, r3
    dc0c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc14:	701a      	strb	r2, [r3, #0]
    dc16:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dc1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc1e:	781a      	ldrb	r2, [r3, #0]
    dc20:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc28:	781b      	ldrb	r3, [r3, #0]
    dc2a:	4413      	add	r3, r2
    dc2c:	b2da      	uxtb	r2, r3
    dc2e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dc32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc36:	701a      	strb	r2, [r3, #0]
    dc38:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc40:	781b      	ldrb	r3, [r3, #0]
    dc42:	3301      	adds	r3, #1
    dc44:	b2da      	uxtb	r2, r3
    dc46:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc4e:	701a      	strb	r2, [r3, #0]
    dc50:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc58:	781b      	ldrb	r3, [r3, #0]
    dc5a:	2bff      	cmp	r3, #255	; 0xff
    dc5c:	d105      	bne.n	dc6a <send_nav_values+0x48e>
    dc5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc66:	2200      	movs	r2, #0
    dc68:	701a      	strb	r2, [r3, #0]
    dc6a:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc72:	781b      	ldrb	r3, [r3, #0]
    dc74:	461a      	mov	r2, r3
    dc76:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dc7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc7e:	7819      	ldrb	r1, [r3, #0]
    dc80:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dc84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc88:	5499      	strb	r1, [r3, r2]
    dc8a:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dc8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc92:	781a      	ldrb	r2, [r3, #0]
    dc94:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc9c:	781b      	ldrb	r3, [r3, #0]
    dc9e:	4413      	add	r3, r2
    dca0:	b2da      	uxtb	r2, r3
    dca2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcaa:	701a      	strb	r2, [r3, #0]
    dcac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dcb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcb4:	781a      	ldrb	r2, [r3, #0]
    dcb6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dcba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcbe:	781b      	ldrb	r3, [r3, #0]
    dcc0:	4413      	add	r3, r2
    dcc2:	b2da      	uxtb	r2, r3
    dcc4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dcc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dccc:	701a      	strb	r2, [r3, #0]
    dcce:	f24c 5349 	movw	r3, #50505	; 0xc549
    dcd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcd6:	781b      	ldrb	r3, [r3, #0]
    dcd8:	3301      	adds	r3, #1
    dcda:	b2da      	uxtb	r2, r3
    dcdc:	f24c 5349 	movw	r3, #50505	; 0xc549
    dce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dce4:	701a      	strb	r2, [r3, #0]
    dce6:	f24c 5349 	movw	r3, #50505	; 0xc549
    dcea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcee:	781b      	ldrb	r3, [r3, #0]
    dcf0:	2bff      	cmp	r3, #255	; 0xff
    dcf2:	d105      	bne.n	dd00 <send_nav_values+0x524>
    dcf4:	f24c 5349 	movw	r3, #50505	; 0xc549
    dcf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcfc:	2200      	movs	r2, #0
    dcfe:	701a      	strb	r2, [r3, #0]
    dd00:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd08:	781b      	ldrb	r3, [r3, #0]
    dd0a:	461a      	mov	r2, r3
    dd0c:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dd10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd14:	7859      	ldrb	r1, [r3, #1]
    dd16:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dd1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd1e:	5499      	strb	r1, [r3, r2]
    dd20:	4b43      	ldr	r3, [pc, #268]	; (de30 <send_nav_values+0x654>)
    dd22:	781a      	ldrb	r2, [r3, #0]
    dd24:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd2c:	781b      	ldrb	r3, [r3, #0]
    dd2e:	4413      	add	r3, r2
    dd30:	b2da      	uxtb	r2, r3
    dd32:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd3a:	701a      	strb	r2, [r3, #0]
    dd3c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dd40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd44:	781a      	ldrb	r2, [r3, #0]
    dd46:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd4e:	781b      	ldrb	r3, [r3, #0]
    dd50:	4413      	add	r3, r2
    dd52:	b2da      	uxtb	r2, r3
    dd54:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dd58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd5c:	701a      	strb	r2, [r3, #0]
    dd5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd66:	781b      	ldrb	r3, [r3, #0]
    dd68:	3301      	adds	r3, #1
    dd6a:	b2da      	uxtb	r2, r3
    dd6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd74:	701a      	strb	r2, [r3, #0]
    dd76:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd7e:	781b      	ldrb	r3, [r3, #0]
    dd80:	2bff      	cmp	r3, #255	; 0xff
    dd82:	d105      	bne.n	dd90 <send_nav_values+0x5b4>
    dd84:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd8c:	2200      	movs	r2, #0
    dd8e:	701a      	strb	r2, [r3, #0]
    dd90:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd98:	781b      	ldrb	r3, [r3, #0]
    dd9a:	461a      	mov	r2, r3
    dd9c:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dda0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dda4:	7899      	ldrb	r1, [r3, #2]
    dda6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ddaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddae:	5499      	strb	r1, [r3, r2]
    ddb0:	4b20      	ldr	r3, [pc, #128]	; (de34 <send_nav_values+0x658>)
    ddb2:	781a      	ldrb	r2, [r3, #0]
    ddb4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ddb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddbc:	781b      	ldrb	r3, [r3, #0]
    ddbe:	4413      	add	r3, r2
    ddc0:	b2da      	uxtb	r2, r3
    ddc2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ddc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddca:	701a      	strb	r2, [r3, #0]
    ddcc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ddd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddd4:	781a      	ldrb	r2, [r3, #0]
    ddd6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ddda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddde:	781b      	ldrb	r3, [r3, #0]
    dde0:	4413      	add	r3, r2
    dde2:	b2da      	uxtb	r2, r3
    dde4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dde8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddec:	701a      	strb	r2, [r3, #0]
    ddee:	f24c 5349 	movw	r3, #50505	; 0xc549
    ddf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddf6:	781b      	ldrb	r3, [r3, #0]
    ddf8:	3301      	adds	r3, #1
    ddfa:	b2da      	uxtb	r2, r3
    ddfc:	f24c 5349 	movw	r3, #50505	; 0xc549
    de00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de04:	701a      	strb	r2, [r3, #0]
    de06:	f24c 5349 	movw	r3, #50505	; 0xc549
    de0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de0e:	781b      	ldrb	r3, [r3, #0]
    de10:	2bff      	cmp	r3, #255	; 0xff
    de12:	d111      	bne.n	de38 <send_nav_values+0x65c>
    de14:	f24c 5349 	movw	r3, #50505	; 0xc549
    de18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de1c:	2200      	movs	r2, #0
    de1e:	701a      	strb	r2, [r3, #0]
    de20:	e00a      	b.n	de38 <send_nav_values+0x65c>
    de22:	bf00      	nop
    de24:	2004cafd 	.word	0x2004cafd
    de28:	2004cafe 	.word	0x2004cafe
    de2c:	2004caff 	.word	0x2004caff
    de30:	2004cb01 	.word	0x2004cb01
    de34:	2004cb02 	.word	0x2004cb02
    de38:	f24c 5349 	movw	r3, #50505	; 0xc549
    de3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de40:	781b      	ldrb	r3, [r3, #0]
    de42:	461a      	mov	r2, r3
    de44:	f64c 3300 	movw	r3, #51968	; 0xcb00
    de48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de4c:	78d9      	ldrb	r1, [r3, #3]
    de4e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    de52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de56:	5499      	strb	r1, [r3, r2]
    de58:	4bd3      	ldr	r3, [pc, #844]	; (e1a8 <send_nav_values+0x9cc>)
    de5a:	781a      	ldrb	r2, [r3, #0]
    de5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de64:	781b      	ldrb	r3, [r3, #0]
    de66:	4413      	add	r3, r2
    de68:	b2da      	uxtb	r2, r3
    de6a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de72:	701a      	strb	r2, [r3, #0]
    de74:	f24c 634e 	movw	r3, #50766	; 0xc64e
    de78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de7c:	781a      	ldrb	r2, [r3, #0]
    de7e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de86:	781b      	ldrb	r3, [r3, #0]
    de88:	4413      	add	r3, r2
    de8a:	b2da      	uxtb	r2, r3
    de8c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    de90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de94:	701a      	strb	r2, [r3, #0]
    de96:	f24c 5349 	movw	r3, #50505	; 0xc549
    de9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de9e:	781b      	ldrb	r3, [r3, #0]
    dea0:	3301      	adds	r3, #1
    dea2:	b2da      	uxtb	r2, r3
    dea4:	f24c 5349 	movw	r3, #50505	; 0xc549
    dea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deac:	701a      	strb	r2, [r3, #0]
    deae:	f24c 5349 	movw	r3, #50505	; 0xc549
    deb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deb6:	781b      	ldrb	r3, [r3, #0]
    deb8:	2bff      	cmp	r3, #255	; 0xff
    deba:	d105      	bne.n	dec8 <send_nav_values+0x6ec>
    debc:	f24c 5349 	movw	r3, #50505	; 0xc549
    dec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dec4:	2200      	movs	r2, #0
    dec6:	701a      	strb	r2, [r3, #0]
    dec8:	f24c 5349 	movw	r3, #50505	; 0xc549
    decc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ded0:	781b      	ldrb	r3, [r3, #0]
    ded2:	461a      	mov	r2, r3
    ded4:	f64c 038c 	movw	r3, #51340	; 0xc88c
    ded8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dedc:	7819      	ldrb	r1, [r3, #0]
    dede:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dee6:	5499      	strb	r1, [r3, r2]
    dee8:	f64c 038c 	movw	r3, #51340	; 0xc88c
    deec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    def0:	781a      	ldrb	r2, [r3, #0]
    def2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    def6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    defa:	781b      	ldrb	r3, [r3, #0]
    defc:	4413      	add	r3, r2
    defe:	b2da      	uxtb	r2, r3
    df00:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df08:	701a      	strb	r2, [r3, #0]
    df0a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    df0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df12:	781a      	ldrb	r2, [r3, #0]
    df14:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df1c:	781b      	ldrb	r3, [r3, #0]
    df1e:	4413      	add	r3, r2
    df20:	b2da      	uxtb	r2, r3
    df22:	f24c 634e 	movw	r3, #50766	; 0xc64e
    df26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df2a:	701a      	strb	r2, [r3, #0]
    df2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    df30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df34:	781b      	ldrb	r3, [r3, #0]
    df36:	3301      	adds	r3, #1
    df38:	b2da      	uxtb	r2, r3
    df3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    df3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df42:	701a      	strb	r2, [r3, #0]
    df44:	f24c 5349 	movw	r3, #50505	; 0xc549
    df48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df4c:	781b      	ldrb	r3, [r3, #0]
    df4e:	2bff      	cmp	r3, #255	; 0xff
    df50:	d105      	bne.n	df5e <send_nav_values+0x782>
    df52:	f24c 5349 	movw	r3, #50505	; 0xc549
    df56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df5a:	2200      	movs	r2, #0
    df5c:	701a      	strb	r2, [r3, #0]
    df5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    df62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df66:	781b      	ldrb	r3, [r3, #0]
    df68:	461a      	mov	r2, r3
    df6a:	f64c 038c 	movw	r3, #51340	; 0xc88c
    df6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df72:	7859      	ldrb	r1, [r3, #1]
    df74:	f24c 534c 	movw	r3, #50508	; 0xc54c
    df78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df7c:	5499      	strb	r1, [r3, r2]
    df7e:	4b8b      	ldr	r3, [pc, #556]	; (e1ac <send_nav_values+0x9d0>)
    df80:	781a      	ldrb	r2, [r3, #0]
    df82:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df8a:	781b      	ldrb	r3, [r3, #0]
    df8c:	4413      	add	r3, r2
    df8e:	b2da      	uxtb	r2, r3
    df90:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df98:	701a      	strb	r2, [r3, #0]
    df9a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    df9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfa2:	781a      	ldrb	r2, [r3, #0]
    dfa4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dfa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfac:	781b      	ldrb	r3, [r3, #0]
    dfae:	4413      	add	r3, r2
    dfb0:	b2da      	uxtb	r2, r3
    dfb2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dfb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfba:	701a      	strb	r2, [r3, #0]
    dfbc:	f24c 5349 	movw	r3, #50505	; 0xc549
    dfc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfc4:	781b      	ldrb	r3, [r3, #0]
    dfc6:	3301      	adds	r3, #1
    dfc8:	b2da      	uxtb	r2, r3
    dfca:	f24c 5349 	movw	r3, #50505	; 0xc549
    dfce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfd2:	701a      	strb	r2, [r3, #0]
    dfd4:	f24c 5349 	movw	r3, #50505	; 0xc549
    dfd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfdc:	781b      	ldrb	r3, [r3, #0]
    dfde:	2bff      	cmp	r3, #255	; 0xff
    dfe0:	d105      	bne.n	dfee <send_nav_values+0x812>
    dfe2:	f24c 5349 	movw	r3, #50505	; 0xc549
    dfe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfea:	2200      	movs	r2, #0
    dfec:	701a      	strb	r2, [r3, #0]
    dfee:	f24c 5349 	movw	r3, #50505	; 0xc549
    dff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dff6:	781b      	ldrb	r3, [r3, #0]
    dff8:	461a      	mov	r2, r3
    dffa:	f64c 038c 	movw	r3, #51340	; 0xc88c
    dffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e002:	7899      	ldrb	r1, [r3, #2]
    e004:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e00c:	5499      	strb	r1, [r3, r2]
    e00e:	4b68      	ldr	r3, [pc, #416]	; (e1b0 <send_nav_values+0x9d4>)
    e010:	781a      	ldrb	r2, [r3, #0]
    e012:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e01a:	781b      	ldrb	r3, [r3, #0]
    e01c:	4413      	add	r3, r2
    e01e:	b2da      	uxtb	r2, r3
    e020:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e028:	701a      	strb	r2, [r3, #0]
    e02a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e02e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e032:	781a      	ldrb	r2, [r3, #0]
    e034:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e03c:	781b      	ldrb	r3, [r3, #0]
    e03e:	4413      	add	r3, r2
    e040:	b2da      	uxtb	r2, r3
    e042:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e04a:	701a      	strb	r2, [r3, #0]
    e04c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e054:	781b      	ldrb	r3, [r3, #0]
    e056:	3301      	adds	r3, #1
    e058:	b2da      	uxtb	r2, r3
    e05a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e05e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e062:	701a      	strb	r2, [r3, #0]
    e064:	f24c 5349 	movw	r3, #50505	; 0xc549
    e068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e06c:	781b      	ldrb	r3, [r3, #0]
    e06e:	2bff      	cmp	r3, #255	; 0xff
    e070:	d105      	bne.n	e07e <send_nav_values+0x8a2>
    e072:	f24c 5349 	movw	r3, #50505	; 0xc549
    e076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e07a:	2200      	movs	r2, #0
    e07c:	701a      	strb	r2, [r3, #0]
    e07e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e086:	781b      	ldrb	r3, [r3, #0]
    e088:	461a      	mov	r2, r3
    e08a:	f64c 038c 	movw	r3, #51340	; 0xc88c
    e08e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e092:	78d9      	ldrb	r1, [r3, #3]
    e094:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e09c:	5499      	strb	r1, [r3, r2]
    e09e:	4b45      	ldr	r3, [pc, #276]	; (e1b4 <send_nav_values+0x9d8>)
    e0a0:	781a      	ldrb	r2, [r3, #0]
    e0a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e0a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0aa:	781b      	ldrb	r3, [r3, #0]
    e0ac:	4413      	add	r3, r2
    e0ae:	b2da      	uxtb	r2, r3
    e0b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e0b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0b8:	701a      	strb	r2, [r3, #0]
    e0ba:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e0be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0c2:	781a      	ldrb	r2, [r3, #0]
    e0c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e0c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0cc:	781b      	ldrb	r3, [r3, #0]
    e0ce:	4413      	add	r3, r2
    e0d0:	b2da      	uxtb	r2, r3
    e0d2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0da:	701a      	strb	r2, [r3, #0]
    e0dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0e4:	781b      	ldrb	r3, [r3, #0]
    e0e6:	3301      	adds	r3, #1
    e0e8:	b2da      	uxtb	r2, r3
    e0ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0f2:	701a      	strb	r2, [r3, #0]
    e0f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0fc:	781b      	ldrb	r3, [r3, #0]
    e0fe:	2bff      	cmp	r3, #255	; 0xff
    e100:	d105      	bne.n	e10e <send_nav_values+0x932>
    e102:	f24c 5349 	movw	r3, #50505	; 0xc549
    e106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e10a:	2200      	movs	r2, #0
    e10c:	701a      	strb	r2, [r3, #0]
    e10e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e116:	781b      	ldrb	r3, [r3, #0]
    e118:	461a      	mov	r2, r3
    e11a:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e11e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e122:	7819      	ldrb	r1, [r3, #0]
    e124:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e12c:	5499      	strb	r1, [r3, r2]
    e12e:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e136:	781a      	ldrb	r2, [r3, #0]
    e138:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e13c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e140:	781b      	ldrb	r3, [r3, #0]
    e142:	4413      	add	r3, r2
    e144:	b2da      	uxtb	r2, r3
    e146:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e14a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e14e:	701a      	strb	r2, [r3, #0]
    e150:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e158:	781a      	ldrb	r2, [r3, #0]
    e15a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e15e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e162:	781b      	ldrb	r3, [r3, #0]
    e164:	4413      	add	r3, r2
    e166:	b2da      	uxtb	r2, r3
    e168:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e16c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e170:	701a      	strb	r2, [r3, #0]
    e172:	f24c 5349 	movw	r3, #50505	; 0xc549
    e176:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e17a:	781b      	ldrb	r3, [r3, #0]
    e17c:	3301      	adds	r3, #1
    e17e:	b2da      	uxtb	r2, r3
    e180:	f24c 5349 	movw	r3, #50505	; 0xc549
    e184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e188:	701a      	strb	r2, [r3, #0]
    e18a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e18e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e192:	781b      	ldrb	r3, [r3, #0]
    e194:	2bff      	cmp	r3, #255	; 0xff
    e196:	d10f      	bne.n	e1b8 <send_nav_values+0x9dc>
    e198:	f24c 5349 	movw	r3, #50505	; 0xc549
    e19c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1a0:	2200      	movs	r2, #0
    e1a2:	701a      	strb	r2, [r3, #0]
    e1a4:	e008      	b.n	e1b8 <send_nav_values+0x9dc>
    e1a6:	bf00      	nop
    e1a8:	2004cb03 	.word	0x2004cb03
    e1ac:	2004c88d 	.word	0x2004c88d
    e1b0:	2004c88e 	.word	0x2004c88e
    e1b4:	2004c88f 	.word	0x2004c88f
    e1b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1c0:	781b      	ldrb	r3, [r3, #0]
    e1c2:	461a      	mov	r2, r3
    e1c4:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e1c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1cc:	7859      	ldrb	r1, [r3, #1]
    e1ce:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e1d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1d6:	5499      	strb	r1, [r3, r2]
    e1d8:	4bd1      	ldr	r3, [pc, #836]	; (e520 <send_nav_values+0xd44>)
    e1da:	781a      	ldrb	r2, [r3, #0]
    e1dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e1e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1e4:	781b      	ldrb	r3, [r3, #0]
    e1e6:	4413      	add	r3, r2
    e1e8:	b2da      	uxtb	r2, r3
    e1ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e1ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1f2:	701a      	strb	r2, [r3, #0]
    e1f4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e1f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1fc:	781a      	ldrb	r2, [r3, #0]
    e1fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e206:	781b      	ldrb	r3, [r3, #0]
    e208:	4413      	add	r3, r2
    e20a:	b2da      	uxtb	r2, r3
    e20c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e214:	701a      	strb	r2, [r3, #0]
    e216:	f24c 5349 	movw	r3, #50505	; 0xc549
    e21a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e21e:	781b      	ldrb	r3, [r3, #0]
    e220:	3301      	adds	r3, #1
    e222:	b2da      	uxtb	r2, r3
    e224:	f24c 5349 	movw	r3, #50505	; 0xc549
    e228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e22c:	701a      	strb	r2, [r3, #0]
    e22e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e236:	781b      	ldrb	r3, [r3, #0]
    e238:	2bff      	cmp	r3, #255	; 0xff
    e23a:	d105      	bne.n	e248 <send_nav_values+0xa6c>
    e23c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e244:	2200      	movs	r2, #0
    e246:	701a      	strb	r2, [r3, #0]
    e248:	f24c 5349 	movw	r3, #50505	; 0xc549
    e24c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e250:	781b      	ldrb	r3, [r3, #0]
    e252:	461a      	mov	r2, r3
    e254:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e25c:	7899      	ldrb	r1, [r3, #2]
    e25e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e266:	5499      	strb	r1, [r3, r2]
    e268:	4bae      	ldr	r3, [pc, #696]	; (e524 <send_nav_values+0xd48>)
    e26a:	781a      	ldrb	r2, [r3, #0]
    e26c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e274:	781b      	ldrb	r3, [r3, #0]
    e276:	4413      	add	r3, r2
    e278:	b2da      	uxtb	r2, r3
    e27a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e27e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e282:	701a      	strb	r2, [r3, #0]
    e284:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e288:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e28c:	781a      	ldrb	r2, [r3, #0]
    e28e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e296:	781b      	ldrb	r3, [r3, #0]
    e298:	4413      	add	r3, r2
    e29a:	b2da      	uxtb	r2, r3
    e29c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e2a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2a4:	701a      	strb	r2, [r3, #0]
    e2a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e2aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ae:	781b      	ldrb	r3, [r3, #0]
    e2b0:	3301      	adds	r3, #1
    e2b2:	b2da      	uxtb	r2, r3
    e2b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e2b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2bc:	701a      	strb	r2, [r3, #0]
    e2be:	f24c 5349 	movw	r3, #50505	; 0xc549
    e2c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2c6:	781b      	ldrb	r3, [r3, #0]
    e2c8:	2bff      	cmp	r3, #255	; 0xff
    e2ca:	d105      	bne.n	e2d8 <send_nav_values+0xafc>
    e2cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    e2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2d4:	2200      	movs	r2, #0
    e2d6:	701a      	strb	r2, [r3, #0]
    e2d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e2dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2e0:	781b      	ldrb	r3, [r3, #0]
    e2e2:	461a      	mov	r2, r3
    e2e4:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ec:	78d9      	ldrb	r1, [r3, #3]
    e2ee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e2f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2f6:	5499      	strb	r1, [r3, r2]
    e2f8:	4b8b      	ldr	r3, [pc, #556]	; (e528 <send_nav_values+0xd4c>)
    e2fa:	781a      	ldrb	r2, [r3, #0]
    e2fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e304:	781b      	ldrb	r3, [r3, #0]
    e306:	4413      	add	r3, r2
    e308:	b2da      	uxtb	r2, r3
    e30a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e30e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e312:	701a      	strb	r2, [r3, #0]
    e314:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e31c:	781a      	ldrb	r2, [r3, #0]
    e31e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e326:	781b      	ldrb	r3, [r3, #0]
    e328:	4413      	add	r3, r2
    e32a:	b2da      	uxtb	r2, r3
    e32c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e334:	701a      	strb	r2, [r3, #0]
    e336:	f24c 5349 	movw	r3, #50505	; 0xc549
    e33a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e33e:	781b      	ldrb	r3, [r3, #0]
    e340:	3301      	adds	r3, #1
    e342:	b2da      	uxtb	r2, r3
    e344:	f24c 5349 	movw	r3, #50505	; 0xc549
    e348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e34c:	701a      	strb	r2, [r3, #0]
    e34e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e352:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e356:	781b      	ldrb	r3, [r3, #0]
    e358:	2bff      	cmp	r3, #255	; 0xff
    e35a:	d105      	bne.n	e368 <send_nav_values+0xb8c>
    e35c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e364:	2200      	movs	r2, #0
    e366:	701a      	strb	r2, [r3, #0]
    e368:	f24c 5349 	movw	r3, #50505	; 0xc549
    e36c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e370:	781b      	ldrb	r3, [r3, #0]
    e372:	461a      	mov	r2, r3
    e374:	f240 5358 	movw	r3, #1368	; 0x558
    e378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e37c:	7819      	ldrb	r1, [r3, #0]
    e37e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e386:	5499      	strb	r1, [r3, r2]
    e388:	f240 5358 	movw	r3, #1368	; 0x558
    e38c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e390:	781a      	ldrb	r2, [r3, #0]
    e392:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e39a:	781b      	ldrb	r3, [r3, #0]
    e39c:	4413      	add	r3, r2
    e39e:	b2da      	uxtb	r2, r3
    e3a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3a8:	701a      	strb	r2, [r3, #0]
    e3aa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3b2:	781a      	ldrb	r2, [r3, #0]
    e3b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3bc:	781b      	ldrb	r3, [r3, #0]
    e3be:	4413      	add	r3, r2
    e3c0:	b2da      	uxtb	r2, r3
    e3c2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e3c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ca:	701a      	strb	r2, [r3, #0]
    e3cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3d4:	781b      	ldrb	r3, [r3, #0]
    e3d6:	3301      	adds	r3, #1
    e3d8:	b2da      	uxtb	r2, r3
    e3da:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3e2:	701a      	strb	r2, [r3, #0]
    e3e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ec:	781b      	ldrb	r3, [r3, #0]
    e3ee:	2bff      	cmp	r3, #255	; 0xff
    e3f0:	d105      	bne.n	e3fe <send_nav_values+0xc22>
    e3f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3fa:	2200      	movs	r2, #0
    e3fc:	701a      	strb	r2, [r3, #0]
    e3fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    e402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e406:	781b      	ldrb	r3, [r3, #0]
    e408:	461a      	mov	r2, r3
    e40a:	f240 5358 	movw	r3, #1368	; 0x558
    e40e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e412:	7859      	ldrb	r1, [r3, #1]
    e414:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e41c:	5499      	strb	r1, [r3, r2]
    e41e:	4b43      	ldr	r3, [pc, #268]	; (e52c <send_nav_values+0xd50>)
    e420:	781a      	ldrb	r2, [r3, #0]
    e422:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e42a:	781b      	ldrb	r3, [r3, #0]
    e42c:	4413      	add	r3, r2
    e42e:	b2da      	uxtb	r2, r3
    e430:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e438:	701a      	strb	r2, [r3, #0]
    e43a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e43e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e442:	781a      	ldrb	r2, [r3, #0]
    e444:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e44c:	781b      	ldrb	r3, [r3, #0]
    e44e:	4413      	add	r3, r2
    e450:	b2da      	uxtb	r2, r3
    e452:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e45a:	701a      	strb	r2, [r3, #0]
    e45c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e464:	781b      	ldrb	r3, [r3, #0]
    e466:	3301      	adds	r3, #1
    e468:	b2da      	uxtb	r2, r3
    e46a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e46e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e472:	701a      	strb	r2, [r3, #0]
    e474:	f24c 5349 	movw	r3, #50505	; 0xc549
    e478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e47c:	781b      	ldrb	r3, [r3, #0]
    e47e:	2bff      	cmp	r3, #255	; 0xff
    e480:	d105      	bne.n	e48e <send_nav_values+0xcb2>
    e482:	f24c 5349 	movw	r3, #50505	; 0xc549
    e486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e48a:	2200      	movs	r2, #0
    e48c:	701a      	strb	r2, [r3, #0]
    e48e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e496:	781b      	ldrb	r3, [r3, #0]
    e498:	461a      	mov	r2, r3
    e49a:	f240 5358 	movw	r3, #1368	; 0x558
    e49e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4a2:	7899      	ldrb	r1, [r3, #2]
    e4a4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ac:	5499      	strb	r1, [r3, r2]
    e4ae:	4b20      	ldr	r3, [pc, #128]	; (e530 <send_nav_values+0xd54>)
    e4b0:	781a      	ldrb	r2, [r3, #0]
    e4b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ba:	781b      	ldrb	r3, [r3, #0]
    e4bc:	4413      	add	r3, r2
    e4be:	b2da      	uxtb	r2, r3
    e4c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e4c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4c8:	701a      	strb	r2, [r3, #0]
    e4ca:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e4ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4d2:	781a      	ldrb	r2, [r3, #0]
    e4d4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e4d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4dc:	781b      	ldrb	r3, [r3, #0]
    e4de:	4413      	add	r3, r2
    e4e0:	b2da      	uxtb	r2, r3
    e4e2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e4e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ea:	701a      	strb	r2, [r3, #0]
    e4ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4f4:	781b      	ldrb	r3, [r3, #0]
    e4f6:	3301      	adds	r3, #1
    e4f8:	b2da      	uxtb	r2, r3
    e4fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e502:	701a      	strb	r2, [r3, #0]
    e504:	f24c 5349 	movw	r3, #50505	; 0xc549
    e508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e50c:	781b      	ldrb	r3, [r3, #0]
    e50e:	2bff      	cmp	r3, #255	; 0xff
    e510:	d110      	bne.n	e534 <send_nav_values+0xd58>
    e512:	f24c 5349 	movw	r3, #50505	; 0xc549
    e516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e51a:	2200      	movs	r2, #0
    e51c:	701a      	strb	r2, [r3, #0]
    e51e:	e009      	b.n	e534 <send_nav_values+0xd58>
    e520:	2004c8d5 	.word	0x2004c8d5
    e524:	2004c8d6 	.word	0x2004c8d6
    e528:	2004c8d7 	.word	0x2004c8d7
    e52c:	20000559 	.word	0x20000559
    e530:	2000055a 	.word	0x2000055a
    e534:	f24c 5349 	movw	r3, #50505	; 0xc549
    e538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e53c:	781b      	ldrb	r3, [r3, #0]
    e53e:	461a      	mov	r2, r3
    e540:	f240 5358 	movw	r3, #1368	; 0x558
    e544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e548:	78d9      	ldrb	r1, [r3, #3]
    e54a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e54e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e552:	5499      	strb	r1, [r3, r2]
    e554:	4bc2      	ldr	r3, [pc, #776]	; (e860 <send_nav_values+0x1084>)
    e556:	781a      	ldrb	r2, [r3, #0]
    e558:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e55c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e560:	781b      	ldrb	r3, [r3, #0]
    e562:	4413      	add	r3, r2
    e564:	b2da      	uxtb	r2, r3
    e566:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e56a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e56e:	701a      	strb	r2, [r3, #0]
    e570:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e578:	781a      	ldrb	r2, [r3, #0]
    e57a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e57e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e582:	781b      	ldrb	r3, [r3, #0]
    e584:	4413      	add	r3, r2
    e586:	b2da      	uxtb	r2, r3
    e588:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e590:	701a      	strb	r2, [r3, #0]
    e592:	f24c 5349 	movw	r3, #50505	; 0xc549
    e596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e59a:	781b      	ldrb	r3, [r3, #0]
    e59c:	3301      	adds	r3, #1
    e59e:	b2da      	uxtb	r2, r3
    e5a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    e5a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5a8:	701a      	strb	r2, [r3, #0]
    e5aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    e5ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5b2:	781b      	ldrb	r3, [r3, #0]
    e5b4:	2bff      	cmp	r3, #255	; 0xff
    e5b6:	d105      	bne.n	e5c4 <send_nav_values+0xde8>
    e5b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e5bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5c0:	2200      	movs	r2, #0
    e5c2:	701a      	strb	r2, [r3, #0]
    e5c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e5c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5cc:	781b      	ldrb	r3, [r3, #0]
    e5ce:	461a      	mov	r2, r3
    e5d0:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e5d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5d8:	7819      	ldrb	r1, [r3, #0]
    e5da:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e5de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5e2:	5499      	strb	r1, [r3, r2]
    e5e4:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e5e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5ec:	781a      	ldrb	r2, [r3, #0]
    e5ee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e5f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5f6:	781b      	ldrb	r3, [r3, #0]
    e5f8:	4413      	add	r3, r2
    e5fa:	b2da      	uxtb	r2, r3
    e5fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e604:	701a      	strb	r2, [r3, #0]
    e606:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e60a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e60e:	781a      	ldrb	r2, [r3, #0]
    e610:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e618:	781b      	ldrb	r3, [r3, #0]
    e61a:	4413      	add	r3, r2
    e61c:	b2da      	uxtb	r2, r3
    e61e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e626:	701a      	strb	r2, [r3, #0]
    e628:	f24c 5349 	movw	r3, #50505	; 0xc549
    e62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e630:	781b      	ldrb	r3, [r3, #0]
    e632:	3301      	adds	r3, #1
    e634:	b2da      	uxtb	r2, r3
    e636:	f24c 5349 	movw	r3, #50505	; 0xc549
    e63a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e63e:	701a      	strb	r2, [r3, #0]
    e640:	f24c 5349 	movw	r3, #50505	; 0xc549
    e644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e648:	781b      	ldrb	r3, [r3, #0]
    e64a:	2bff      	cmp	r3, #255	; 0xff
    e64c:	d105      	bne.n	e65a <send_nav_values+0xe7e>
    e64e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e656:	2200      	movs	r2, #0
    e658:	701a      	strb	r2, [r3, #0]
    e65a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e65e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e662:	781b      	ldrb	r3, [r3, #0]
    e664:	461a      	mov	r2, r3
    e666:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e66a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e66e:	7859      	ldrb	r1, [r3, #1]
    e670:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e678:	5499      	strb	r1, [r3, r2]
    e67a:	4b7a      	ldr	r3, [pc, #488]	; (e864 <send_nav_values+0x1088>)
    e67c:	781a      	ldrb	r2, [r3, #0]
    e67e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e686:	781b      	ldrb	r3, [r3, #0]
    e688:	4413      	add	r3, r2
    e68a:	b2da      	uxtb	r2, r3
    e68c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e690:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e694:	701a      	strb	r2, [r3, #0]
    e696:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e69a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e69e:	781a      	ldrb	r2, [r3, #0]
    e6a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e6a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6a8:	781b      	ldrb	r3, [r3, #0]
    e6aa:	4413      	add	r3, r2
    e6ac:	b2da      	uxtb	r2, r3
    e6ae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e6b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6b6:	701a      	strb	r2, [r3, #0]
    e6b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6c0:	781b      	ldrb	r3, [r3, #0]
    e6c2:	3301      	adds	r3, #1
    e6c4:	b2da      	uxtb	r2, r3
    e6c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6ce:	701a      	strb	r2, [r3, #0]
    e6d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6d8:	781b      	ldrb	r3, [r3, #0]
    e6da:	2bff      	cmp	r3, #255	; 0xff
    e6dc:	d105      	bne.n	e6ea <send_nav_values+0xf0e>
    e6de:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6e6:	2200      	movs	r2, #0
    e6e8:	701a      	strb	r2, [r3, #0]
    e6ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6f2:	781b      	ldrb	r3, [r3, #0]
    e6f4:	461a      	mov	r2, r3
    e6f6:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e6fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6fe:	7899      	ldrb	r1, [r3, #2]
    e700:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e708:	5499      	strb	r1, [r3, r2]
    e70a:	4b57      	ldr	r3, [pc, #348]	; (e868 <send_nav_values+0x108c>)
    e70c:	781a      	ldrb	r2, [r3, #0]
    e70e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e716:	781b      	ldrb	r3, [r3, #0]
    e718:	4413      	add	r3, r2
    e71a:	b2da      	uxtb	r2, r3
    e71c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e724:	701a      	strb	r2, [r3, #0]
    e726:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e72a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e72e:	781a      	ldrb	r2, [r3, #0]
    e730:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e738:	781b      	ldrb	r3, [r3, #0]
    e73a:	4413      	add	r3, r2
    e73c:	b2da      	uxtb	r2, r3
    e73e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e746:	701a      	strb	r2, [r3, #0]
    e748:	f24c 5349 	movw	r3, #50505	; 0xc549
    e74c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e750:	781b      	ldrb	r3, [r3, #0]
    e752:	3301      	adds	r3, #1
    e754:	b2da      	uxtb	r2, r3
    e756:	f24c 5349 	movw	r3, #50505	; 0xc549
    e75a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e75e:	701a      	strb	r2, [r3, #0]
    e760:	f24c 5349 	movw	r3, #50505	; 0xc549
    e764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e768:	781b      	ldrb	r3, [r3, #0]
    e76a:	2bff      	cmp	r3, #255	; 0xff
    e76c:	d105      	bne.n	e77a <send_nav_values+0xf9e>
    e76e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e776:	2200      	movs	r2, #0
    e778:	701a      	strb	r2, [r3, #0]
    e77a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e77e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e782:	781b      	ldrb	r3, [r3, #0]
    e784:	461a      	mov	r2, r3
    e786:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e78a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e78e:	78d9      	ldrb	r1, [r3, #3]
    e790:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e798:	5499      	strb	r1, [r3, r2]
    e79a:	4b34      	ldr	r3, [pc, #208]	; (e86c <send_nav_values+0x1090>)
    e79c:	781a      	ldrb	r2, [r3, #0]
    e79e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e7a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7a6:	781b      	ldrb	r3, [r3, #0]
    e7a8:	4413      	add	r3, r2
    e7aa:	b2da      	uxtb	r2, r3
    e7ac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e7b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7b4:	701a      	strb	r2, [r3, #0]
    e7b6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e7ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7be:	781a      	ldrb	r2, [r3, #0]
    e7c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e7c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7c8:	781b      	ldrb	r3, [r3, #0]
    e7ca:	4413      	add	r3, r2
    e7cc:	b2da      	uxtb	r2, r3
    e7ce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e7d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7d6:	701a      	strb	r2, [r3, #0]
    e7d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7e0:	781b      	ldrb	r3, [r3, #0]
    e7e2:	3301      	adds	r3, #1
    e7e4:	b2da      	uxtb	r2, r3
    e7e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ee:	701a      	strb	r2, [r3, #0]
    e7f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7f8:	781b      	ldrb	r3, [r3, #0]
    e7fa:	2bff      	cmp	r3, #255	; 0xff
    e7fc:	d105      	bne.n	e80a <send_nav_values+0x102e>
    e7fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    e802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e806:	2200      	movs	r2, #0
    e808:	701a      	strb	r2, [r3, #0]
    e80a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e80e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e812:	781b      	ldrb	r3, [r3, #0]
    e814:	461a      	mov	r2, r3
    e816:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e81a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e81e:	7819      	ldrb	r1, [r3, #0]
    e820:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e828:	5499      	strb	r1, [r3, r2]
    e82a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e82e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e832:	781b      	ldrb	r3, [r3, #0]
    e834:	3301      	adds	r3, #1
    e836:	b2da      	uxtb	r2, r3
    e838:	f24c 5349 	movw	r3, #50505	; 0xc549
    e83c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e840:	701a      	strb	r2, [r3, #0]
    e842:	f24c 5349 	movw	r3, #50505	; 0xc549
    e846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e84a:	781b      	ldrb	r3, [r3, #0]
    e84c:	2bff      	cmp	r3, #255	; 0xff
    e84e:	d10f      	bne.n	e870 <send_nav_values+0x1094>
    e850:	f24c 5349 	movw	r3, #50505	; 0xc549
    e854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e858:	2200      	movs	r2, #0
    e85a:	701a      	strb	r2, [r3, #0]
    e85c:	e008      	b.n	e870 <send_nav_values+0x1094>
    e85e:	bf00      	nop
    e860:	2000055b 	.word	0x2000055b
    e864:	2004c8d9 	.word	0x2004c8d9
    e868:	2004c8da 	.word	0x2004c8da
    e86c:	2004c8db 	.word	0x2004c8db
    e870:	f24c 5349 	movw	r3, #50505	; 0xc549
    e874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e878:	781b      	ldrb	r3, [r3, #0]
    e87a:	461a      	mov	r2, r3
    e87c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e884:	7819      	ldrb	r1, [r3, #0]
    e886:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e88a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e88e:	5499      	strb	r1, [r3, r2]
    e890:	f24c 5349 	movw	r3, #50505	; 0xc549
    e894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e898:	781b      	ldrb	r3, [r3, #0]
    e89a:	3301      	adds	r3, #1
    e89c:	b2da      	uxtb	r2, r3
    e89e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e8a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8a6:	701a      	strb	r2, [r3, #0]
    e8a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e8ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8b0:	781b      	ldrb	r3, [r3, #0]
    e8b2:	2bff      	cmp	r3, #255	; 0xff
    e8b4:	d105      	bne.n	e8c2 <send_nav_values+0x10e6>
    e8b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e8ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8be:	2200      	movs	r2, #0
    e8c0:	701a      	strb	r2, [r3, #0]
    e8c2:	f242 0339 	movw	r3, #8249	; 0x2039
    e8c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8ca:	781b      	ldrb	r3, [r3, #0]
    e8cc:	b2db      	uxtb	r3, r3
    e8ce:	f003 0310 	and.w	r3, r3, #16
    e8d2:	2b00      	cmp	r3, #0
    e8d4:	d15a      	bne.n	e98c <send_nav_values+0x11b0>
    e8d6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8de:	781b      	ldrb	r3, [r3, #0]
    e8e0:	b2db      	uxtb	r3, r3
    e8e2:	461a      	mov	r2, r3
    e8e4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e8e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8ec:	5c9a      	ldrb	r2, [r3, r2]
    e8ee:	f24c 634b 	movw	r3, #50763	; 0xc64b
    e8f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8f6:	701a      	strb	r2, [r3, #0]
    e8f8:	f24c 634c 	movw	r3, #50764	; 0xc64c
    e8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e900:	2200      	movs	r2, #0
    e902:	701a      	strb	r2, [r3, #0]
    e904:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e90c:	781b      	ldrb	r3, [r3, #0]
    e90e:	b2db      	uxtb	r3, r3
    e910:	3301      	adds	r3, #1
    e912:	b2da      	uxtb	r2, r3
    e914:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e918:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e91c:	701a      	strb	r2, [r3, #0]
    e91e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e926:	781b      	ldrb	r3, [r3, #0]
    e928:	b2db      	uxtb	r3, r3
    e92a:	2bff      	cmp	r3, #255	; 0xff
    e92c:	d105      	bne.n	e93a <send_nav_values+0x115e>
    e92e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e936:	2200      	movs	r2, #0
    e938:	701a      	strb	r2, [r3, #0]
    e93a:	f242 0338 	movw	r3, #8248	; 0x2038
    e93e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e942:	f242 0238 	movw	r2, #8248	; 0x2038
    e946:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e94a:	7812      	ldrb	r2, [r2, #0]
    e94c:	b2d2      	uxtb	r2, r2
    e94e:	f042 0201 	orr.w	r2, r2, #1
    e952:	b2d2      	uxtb	r2, r2
    e954:	701a      	strb	r2, [r3, #0]
    e956:	f242 0339 	movw	r3, #8249	; 0x2039
    e95a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e95e:	f242 0239 	movw	r2, #8249	; 0x2039
    e962:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e966:	7812      	ldrb	r2, [r2, #0]
    e968:	b2d2      	uxtb	r2, r2
    e96a:	f042 0210 	orr.w	r2, r2, #16
    e96e:	b2d2      	uxtb	r2, r2
    e970:	701a      	strb	r2, [r3, #0]
    e972:	e00b      	b.n	e98c <send_nav_values+0x11b0>
    e974:	f24c 5348 	movw	r3, #50504	; 0xc548
    e978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e97c:	781b      	ldrb	r3, [r3, #0]
    e97e:	3301      	adds	r3, #1
    e980:	b2da      	uxtb	r2, r3
    e982:	f24c 5348 	movw	r3, #50504	; 0xc548
    e986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e98a:	701a      	strb	r2, [r3, #0]
}
    e98c:	46bd      	mov	sp, r7
    e98e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e992:	4770      	bx	lr

0000e994 <course_run>:

void course_run(void){
    e994:	b580      	push	{r7, lr}
    e996:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e998:	f24c 532c 	movw	r3, #50476	; 0xc52c
    e99c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9a0:	781b      	ldrb	r3, [r3, #0]
    e9a2:	2b02      	cmp	r3, #2
    e9a4:	d006      	beq.n	e9b4 <course_run+0x20>
    e9a6:	f24c 532c 	movw	r3, #50476	; 0xc52c
    e9aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9ae:	781b      	ldrb	r3, [r3, #0]
    e9b0:	2b03      	cmp	r3, #3
    e9b2:	d112      	bne.n	e9da <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    e9b4:	f24c 532e 	movw	r3, #50478	; 0xc52e
    e9b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9bc:	781b      	ldrb	r3, [r3, #0]
    e9be:	2b02      	cmp	r3, #2
    e9c0:	d901      	bls.n	e9c6 <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    e9c2:	f003 faf1 	bl	11fa8 <course_pid_run>
    desired_roll = nav_desired_roll;
    e9c6:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    e9ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9ce:	681a      	ldr	r2, [r3, #0]
    e9d0:	f64c 0374 	movw	r3, #51316	; 0xc874
    e9d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9d8:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    e9da:	bd80      	pop	{r7, pc}

0000e9dc <altitude_control_task>:

void altitude_control_task(void)
{
    e9dc:	b580      	push	{r7, lr}
    e9de:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    e9e0:	f24c 532c 	movw	r3, #50476	; 0xc52c
    e9e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9e8:	781b      	ldrb	r3, [r3, #0]
    e9ea:	2b02      	cmp	r3, #2
    e9ec:	d006      	beq.n	e9fc <altitude_control_task+0x20>
    e9ee:	f24c 532c 	movw	r3, #50476	; 0xc52c
    e9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9f6:	781b      	ldrb	r3, [r3, #0]
    e9f8:	2b03      	cmp	r3, #3
    e9fa:	d108      	bne.n	ea0e <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    e9fc:	f24c 532d 	movw	r3, #50477	; 0xc52d
    ea00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea04:	781b      	ldrb	r3, [r3, #0]
    ea06:	2b03      	cmp	r3, #3
    ea08:	d101      	bne.n	ea0e <altitude_control_task+0x32>
      			altitude_pid_run();
    ea0a:	f003 fd55 	bl	124b8 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    ea0e:	bd80      	pop	{r7, pc}

0000ea10 <climb_control_task>:
void climb_control_task(void)
{
    ea10:	b580      	push	{r7, lr}
    ea12:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    ea14:	f24c 532c 	movw	r3, #50476	; 0xc52c
    ea18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea1c:	781b      	ldrb	r3, [r3, #0]
    ea1e:	2b02      	cmp	r3, #2
    ea20:	d006      	beq.n	ea30 <climb_control_task+0x20>
    ea22:	f24c 532c 	movw	r3, #50476	; 0xc52c
    ea26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea2a:	781b      	ldrb	r3, [r3, #0]
    ea2c:	2b03      	cmp	r3, #3
    ea2e:	d135      	bne.n	ea9c <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    ea30:	f24c 532d 	movw	r3, #50477	; 0xc52d
    ea34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea38:	781b      	ldrb	r3, [r3, #0]
    ea3a:	2b01      	cmp	r3, #1
    ea3c:	d901      	bls.n	ea42 <climb_control_task+0x32>
        	climb_pid_run();
    ea3e:	f003 fb6b 	bl	12118 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    ea42:	f24c 532d 	movw	r3, #50477	; 0xc52d
    ea46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea4a:	781b      	ldrb	r3, [r3, #0]
    ea4c:	2b01      	cmp	r3, #1
    ea4e:	d10a      	bne.n	ea66 <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    ea50:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
    ea54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea58:	881b      	ldrh	r3, [r3, #0]
    ea5a:	b29a      	uxth	r2, r3
    ea5c:	f64c 037c 	movw	r3, #51324	; 0xc87c
    ea60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea64:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    ea66:	f24c 5335 	movw	r3, #50485	; 0xc535
    ea6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea6e:	781b      	ldrb	r3, [r3, #0]
    ea70:	2b00      	cmp	r3, #0
    ea72:	d10d      	bne.n	ea90 <climb_control_task+0x80>
    ea74:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    ea78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea7c:	881b      	ldrh	r3, [r3, #0]
    ea7e:	2b00      	cmp	r3, #0
    ea80:	d10c      	bne.n	ea9c <climb_control_task+0x8c>
    ea82:	f24c 5340 	movw	r3, #50496	; 0xc540
    ea86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea8a:	781b      	ldrb	r3, [r3, #0]
    ea8c:	2b00      	cmp	r3, #0
    ea8e:	d105      	bne.n	ea9c <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    ea90:	f64c 037c 	movw	r3, #51324	; 0xc87c
    ea94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea98:	2200      	movs	r2, #0
    ea9a:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    ea9c:	bd80      	pop	{r7, pc}
    ea9e:	bf00      	nop

0000eaa0 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    eaa0:	b580      	push	{r7, lr}
    eaa2:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    eaa4:	f003 f926 	bl	11cf4 <ir_update>
    estimator_update_state_infrared();
    eaa8:	f006 fbac 	bl	15204 <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    eaac:	f003 f990 	bl	11dd0 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    eab0:	f64c 037c 	movw	r3, #51324	; 0xc87c
    eab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eab8:	881a      	ldrh	r2, [r3, #0]
    eaba:	f24c 6368 	movw	r3, #50792	; 0xc668
    eabe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eac2:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    eac4:	f64c 037e 	movw	r3, #51326	; 0xc87e
    eac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eacc:	881a      	ldrh	r2, [r3, #0]
    eace:	f24c 6368 	movw	r3, #50792	; 0xc668
    ead2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ead6:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    ead8:	f64c 0380 	movw	r3, #51328	; 0xc880
    eadc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eae0:	881a      	ldrh	r2, [r3, #0]
    eae2:	f24c 6368 	movw	r3, #50792	; 0xc668
    eae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaea:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    eaec:	f64c 3308 	movw	r3, #51976	; 0xcb08
    eaf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaf4:	681b      	ldr	r3, [r3, #0]
    eaf6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    eafa:	4618      	mov	r0, r3
    eafc:	f009 f83e 	bl	17b7c <__aeabi_f2d>
    eb00:	4602      	mov	r2, r0
    eb02:	460b      	mov	r3, r1
    eb04:	4610      	mov	r0, r2
    eb06:	4619      	mov	r1, r3
    eb08:	f04f 0200 	mov.w	r2, #0
    eb0c:	f04f 0300 	mov.w	r3, #0
    eb10:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    eb14:	f009 f886 	bl	17c24 <__aeabi_dmul>
    eb18:	4602      	mov	r2, r0
    eb1a:	460b      	mov	r3, r1
    eb1c:	4610      	mov	r0, r2
    eb1e:	4619      	mov	r1, r3
    eb20:	f04f 0200 	mov.w	r2, #0
    eb24:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    eb28:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    eb2c:	f009 faec 	bl	18108 <__aeabi_dcmplt>
    eb30:	4603      	mov	r3, r0
    eb32:	2b00      	cmp	r3, #0
    eb34:	d002      	beq.n	eb3c <stabilisation_task+0x9c>
    eb36:	f64d 2280 	movw	r2, #55936	; 0xda80
    eb3a:	e046      	b.n	ebca <stabilisation_task+0x12a>
    eb3c:	f64c 3308 	movw	r3, #51976	; 0xcb08
    eb40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb44:	681b      	ldr	r3, [r3, #0]
    eb46:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    eb4a:	4618      	mov	r0, r3
    eb4c:	f009 f816 	bl	17b7c <__aeabi_f2d>
    eb50:	4602      	mov	r2, r0
    eb52:	460b      	mov	r3, r1
    eb54:	4610      	mov	r0, r2
    eb56:	4619      	mov	r1, r3
    eb58:	f04f 0200 	mov.w	r2, #0
    eb5c:	f04f 0300 	mov.w	r3, #0
    eb60:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    eb64:	f009 f85e 	bl	17c24 <__aeabi_dmul>
    eb68:	4602      	mov	r2, r0
    eb6a:	460b      	mov	r3, r1
    eb6c:	4610      	mov	r0, r2
    eb6e:	4619      	mov	r1, r3
    eb70:	f04f 0200 	mov.w	r2, #0
    eb74:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    eb78:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    eb7c:	f009 fae2 	bl	18144 <__aeabi_dcmpgt>
    eb80:	4603      	mov	r3, r0
    eb82:	2b00      	cmp	r3, #0
    eb84:	d002      	beq.n	eb8c <stabilisation_task+0xec>
    eb86:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    eb8a:	e01d      	b.n	ebc8 <stabilisation_task+0x128>
    eb8c:	f64c 3308 	movw	r3, #51976	; 0xcb08
    eb90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb94:	681b      	ldr	r3, [r3, #0]
    eb96:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    eb9a:	4618      	mov	r0, r3
    eb9c:	f008 ffee 	bl	17b7c <__aeabi_f2d>
    eba0:	4602      	mov	r2, r0
    eba2:	460b      	mov	r3, r1
    eba4:	4610      	mov	r0, r2
    eba6:	4619      	mov	r1, r3
    eba8:	f04f 0200 	mov.w	r2, #0
    ebac:	f04f 0300 	mov.w	r3, #0
    ebb0:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ebb4:	f009 f836 	bl	17c24 <__aeabi_dmul>
    ebb8:	4602      	mov	r2, r0
    ebba:	460b      	mov	r3, r1
    ebbc:	4610      	mov	r0, r2
    ebbe:	4619      	mov	r1, r3
    ebc0:	f009 faca 	bl	18158 <__aeabi_d2iz>
    ebc4:	4603      	mov	r3, r0
    ebc6:	b29b      	uxth	r3, r3
    ebc8:	b29a      	uxth	r2, r3
    ebca:	f24c 6368 	movw	r3, #50792	; 0xc668
    ebce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebd2:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    ebd4:	bd80      	pop	{r7, pc}
    ebd6:	bf00      	nop

0000ebd8 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    ebd8:	b580      	push	{r7, lr}
    ebda:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    ebdc:	f24c 63dd 	movw	r3, #50909	; 0xc6dd
    ebe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebe4:	2200      	movs	r2, #0
    ebe6:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    ebe8:	f24c 63de 	movw	r3, #50910	; 0xc6de
    ebec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebf0:	781b      	ldrb	r3, [r3, #0]
    ebf2:	2b00      	cmp	r3, #0
    ebf4:	f001 81af 	beq.w	ff56 <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    ebf8:	f24c 5349 	movw	r3, #50505	; 0xc549
    ebfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec00:	781a      	ldrb	r2, [r3, #0]
    ec02:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ec06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec0a:	781b      	ldrb	r3, [r3, #0]
    ec0c:	b2db      	uxtb	r3, r3
    ec0e:	429a      	cmp	r2, r3
    ec10:	d313      	bcc.n	ec3a <send_gps_pos+0x62>
    ec12:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ec16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec1a:	781b      	ldrb	r3, [r3, #0]
    ec1c:	b2db      	uxtb	r3, r3
    ec1e:	461a      	mov	r2, r3
    ec20:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec28:	781b      	ldrb	r3, [r3, #0]
    ec2a:	1ad3      	subs	r3, r2, r3
    ec2c:	33ff      	adds	r3, #255	; 0xff
    ec2e:	2b21      	cmp	r3, #33	; 0x21
    ec30:	bfd4      	ite	le
    ec32:	2300      	movle	r3, #0
    ec34:	2301      	movgt	r3, #1
    ec36:	b2db      	uxtb	r3, r3
    ec38:	e011      	b.n	ec5e <send_gps_pos+0x86>
    ec3a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ec3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec42:	781b      	ldrb	r3, [r3, #0]
    ec44:	b2db      	uxtb	r3, r3
    ec46:	461a      	mov	r2, r3
    ec48:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec50:	781b      	ldrb	r3, [r3, #0]
    ec52:	1ad3      	subs	r3, r2, r3
    ec54:	2b21      	cmp	r3, #33	; 0x21
    ec56:	bfd4      	ite	le
    ec58:	2300      	movle	r3, #0
    ec5a:	2301      	movgt	r3, #1
    ec5c:	b2db      	uxtb	r3, r3
    ec5e:	2b00      	cmp	r3, #0
    ec60:	f001 816b 	beq.w	ff3a <send_gps_pos+0x1362>
    ec64:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec6c:	781b      	ldrb	r3, [r3, #0]
    ec6e:	461a      	mov	r2, r3
    ec70:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ec74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec78:	2105      	movs	r1, #5
    ec7a:	5499      	strb	r1, [r3, r2]
    ec7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec84:	781b      	ldrb	r3, [r3, #0]
    ec86:	3301      	adds	r3, #1
    ec88:	b2da      	uxtb	r2, r3
    ec8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec92:	701a      	strb	r2, [r3, #0]
    ec94:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec9c:	781b      	ldrb	r3, [r3, #0]
    ec9e:	2bff      	cmp	r3, #255	; 0xff
    eca0:	d105      	bne.n	ecae <send_gps_pos+0xd6>
    eca2:	f24c 5349 	movw	r3, #50505	; 0xc549
    eca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecaa:	2200      	movs	r2, #0
    ecac:	701a      	strb	r2, [r3, #0]
    ecae:	f24c 5349 	movw	r3, #50505	; 0xc549
    ecb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecb6:	781b      	ldrb	r3, [r3, #0]
    ecb8:	461a      	mov	r2, r3
    ecba:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ecbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecc2:	2108      	movs	r1, #8
    ecc4:	5499      	strb	r1, [r3, r2]
    ecc6:	f24c 5349 	movw	r3, #50505	; 0xc549
    ecca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecce:	781b      	ldrb	r3, [r3, #0]
    ecd0:	3301      	adds	r3, #1
    ecd2:	b2da      	uxtb	r2, r3
    ecd4:	f24c 5349 	movw	r3, #50505	; 0xc549
    ecd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecdc:	701a      	strb	r2, [r3, #0]
    ecde:	f24c 5349 	movw	r3, #50505	; 0xc549
    ece2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ece6:	781b      	ldrb	r3, [r3, #0]
    ece8:	2bff      	cmp	r3, #255	; 0xff
    ecea:	d105      	bne.n	ecf8 <send_gps_pos+0x120>
    ecec:	f24c 5349 	movw	r3, #50505	; 0xc549
    ecf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecf4:	2200      	movs	r2, #0
    ecf6:	701a      	strb	r2, [r3, #0]
    ecf8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ecfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed00:	2208      	movs	r2, #8
    ed02:	701a      	strb	r2, [r3, #0]
    ed04:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ed08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed0c:	2208      	movs	r2, #8
    ed0e:	701a      	strb	r2, [r3, #0]
    ed10:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed18:	781b      	ldrb	r3, [r3, #0]
    ed1a:	461a      	mov	r2, r3
    ed1c:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
    ed20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed24:	7819      	ldrb	r1, [r3, #0]
    ed26:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ed2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed2e:	5499      	strb	r1, [r3, r2]
    ed30:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ed34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed38:	781a      	ldrb	r2, [r3, #0]
    ed3a:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
    ed3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed42:	781b      	ldrb	r3, [r3, #0]
    ed44:	4413      	add	r3, r2
    ed46:	b2da      	uxtb	r2, r3
    ed48:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ed4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed50:	701a      	strb	r2, [r3, #0]
    ed52:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ed56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed5a:	781a      	ldrb	r2, [r3, #0]
    ed5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ed60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed64:	781b      	ldrb	r3, [r3, #0]
    ed66:	4413      	add	r3, r2
    ed68:	b2da      	uxtb	r2, r3
    ed6a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ed6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed72:	701a      	strb	r2, [r3, #0]
    ed74:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed7c:	781b      	ldrb	r3, [r3, #0]
    ed7e:	3301      	adds	r3, #1
    ed80:	b2da      	uxtb	r2, r3
    ed82:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed8a:	701a      	strb	r2, [r3, #0]
    ed8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed94:	781b      	ldrb	r3, [r3, #0]
    ed96:	2bff      	cmp	r3, #255	; 0xff
    ed98:	d105      	bne.n	eda6 <send_gps_pos+0x1ce>
    ed9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eda2:	2200      	movs	r2, #0
    eda4:	701a      	strb	r2, [r3, #0]
    eda6:	f24c 5349 	movw	r3, #50505	; 0xc549
    edaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edae:	781b      	ldrb	r3, [r3, #0]
    edb0:	461a      	mov	r2, r3
    edb2:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    edb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edba:	7819      	ldrb	r1, [r3, #0]
    edbc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    edc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edc4:	5499      	strb	r1, [r3, r2]
    edc6:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    edca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edce:	781a      	ldrb	r2, [r3, #0]
    edd0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    edd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edd8:	781b      	ldrb	r3, [r3, #0]
    edda:	4413      	add	r3, r2
    eddc:	b2da      	uxtb	r2, r3
    edde:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ede2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ede6:	701a      	strb	r2, [r3, #0]
    ede8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    edec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edf0:	781a      	ldrb	r2, [r3, #0]
    edf2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    edf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edfa:	781b      	ldrb	r3, [r3, #0]
    edfc:	4413      	add	r3, r2
    edfe:	b2da      	uxtb	r2, r3
    ee00:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ee04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee08:	701a      	strb	r2, [r3, #0]
    ee0a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee12:	781b      	ldrb	r3, [r3, #0]
    ee14:	3301      	adds	r3, #1
    ee16:	b2da      	uxtb	r2, r3
    ee18:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee20:	701a      	strb	r2, [r3, #0]
    ee22:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee2a:	781b      	ldrb	r3, [r3, #0]
    ee2c:	2bff      	cmp	r3, #255	; 0xff
    ee2e:	d105      	bne.n	ee3c <send_gps_pos+0x264>
    ee30:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee38:	2200      	movs	r2, #0
    ee3a:	701a      	strb	r2, [r3, #0]
    ee3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee44:	781b      	ldrb	r3, [r3, #0]
    ee46:	461a      	mov	r2, r3
    ee48:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    ee4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee50:	7859      	ldrb	r1, [r3, #1]
    ee52:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ee56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee5a:	5499      	strb	r1, [r3, r2]
    ee5c:	4bd1      	ldr	r3, [pc, #836]	; (f1a4 <send_gps_pos+0x5cc>)
    ee5e:	781a      	ldrb	r2, [r3, #0]
    ee60:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee68:	781b      	ldrb	r3, [r3, #0]
    ee6a:	4413      	add	r3, r2
    ee6c:	b2da      	uxtb	r2, r3
    ee6e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee76:	701a      	strb	r2, [r3, #0]
    ee78:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ee7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee80:	781a      	ldrb	r2, [r3, #0]
    ee82:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee8a:	781b      	ldrb	r3, [r3, #0]
    ee8c:	4413      	add	r3, r2
    ee8e:	b2da      	uxtb	r2, r3
    ee90:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ee94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee98:	701a      	strb	r2, [r3, #0]
    ee9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eea2:	781b      	ldrb	r3, [r3, #0]
    eea4:	3301      	adds	r3, #1
    eea6:	b2da      	uxtb	r2, r3
    eea8:	f24c 5349 	movw	r3, #50505	; 0xc549
    eeac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeb0:	701a      	strb	r2, [r3, #0]
    eeb2:	f24c 5349 	movw	r3, #50505	; 0xc549
    eeb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeba:	781b      	ldrb	r3, [r3, #0]
    eebc:	2bff      	cmp	r3, #255	; 0xff
    eebe:	d105      	bne.n	eecc <send_gps_pos+0x2f4>
    eec0:	f24c 5349 	movw	r3, #50505	; 0xc549
    eec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eec8:	2200      	movs	r2, #0
    eeca:	701a      	strb	r2, [r3, #0]
    eecc:	f24c 5349 	movw	r3, #50505	; 0xc549
    eed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eed4:	781b      	ldrb	r3, [r3, #0]
    eed6:	461a      	mov	r2, r3
    eed8:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    eedc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eee0:	7899      	ldrb	r1, [r3, #2]
    eee2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    eee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeea:	5499      	strb	r1, [r3, r2]
    eeec:	4bae      	ldr	r3, [pc, #696]	; (f1a8 <send_gps_pos+0x5d0>)
    eeee:	781a      	ldrb	r2, [r3, #0]
    eef0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    eef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eef8:	781b      	ldrb	r3, [r3, #0]
    eefa:	4413      	add	r3, r2
    eefc:	b2da      	uxtb	r2, r3
    eefe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef06:	701a      	strb	r2, [r3, #0]
    ef08:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ef0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef10:	781a      	ldrb	r2, [r3, #0]
    ef12:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef1a:	781b      	ldrb	r3, [r3, #0]
    ef1c:	4413      	add	r3, r2
    ef1e:	b2da      	uxtb	r2, r3
    ef20:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ef24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef28:	701a      	strb	r2, [r3, #0]
    ef2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef32:	781b      	ldrb	r3, [r3, #0]
    ef34:	3301      	adds	r3, #1
    ef36:	b2da      	uxtb	r2, r3
    ef38:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef40:	701a      	strb	r2, [r3, #0]
    ef42:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef4a:	781b      	ldrb	r3, [r3, #0]
    ef4c:	2bff      	cmp	r3, #255	; 0xff
    ef4e:	d105      	bne.n	ef5c <send_gps_pos+0x384>
    ef50:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef58:	2200      	movs	r2, #0
    ef5a:	701a      	strb	r2, [r3, #0]
    ef5c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef64:	781b      	ldrb	r3, [r3, #0]
    ef66:	461a      	mov	r2, r3
    ef68:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    ef6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef70:	78d9      	ldrb	r1, [r3, #3]
    ef72:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ef76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef7a:	5499      	strb	r1, [r3, r2]
    ef7c:	4b8b      	ldr	r3, [pc, #556]	; (f1ac <send_gps_pos+0x5d4>)
    ef7e:	781a      	ldrb	r2, [r3, #0]
    ef80:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef88:	781b      	ldrb	r3, [r3, #0]
    ef8a:	4413      	add	r3, r2
    ef8c:	b2da      	uxtb	r2, r3
    ef8e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef96:	701a      	strb	r2, [r3, #0]
    ef98:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ef9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efa0:	781a      	ldrb	r2, [r3, #0]
    efa2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    efa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efaa:	781b      	ldrb	r3, [r3, #0]
    efac:	4413      	add	r3, r2
    efae:	b2da      	uxtb	r2, r3
    efb0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    efb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efb8:	701a      	strb	r2, [r3, #0]
    efba:	f24c 5349 	movw	r3, #50505	; 0xc549
    efbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efc2:	781b      	ldrb	r3, [r3, #0]
    efc4:	3301      	adds	r3, #1
    efc6:	b2da      	uxtb	r2, r3
    efc8:	f24c 5349 	movw	r3, #50505	; 0xc549
    efcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efd0:	701a      	strb	r2, [r3, #0]
    efd2:	f24c 5349 	movw	r3, #50505	; 0xc549
    efd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efda:	781b      	ldrb	r3, [r3, #0]
    efdc:	2bff      	cmp	r3, #255	; 0xff
    efde:	d105      	bne.n	efec <send_gps_pos+0x414>
    efe0:	f24c 5349 	movw	r3, #50505	; 0xc549
    efe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efe8:	2200      	movs	r2, #0
    efea:	701a      	strb	r2, [r3, #0]
    efec:	f24c 5349 	movw	r3, #50505	; 0xc549
    eff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eff4:	781b      	ldrb	r3, [r3, #0]
    eff6:	461a      	mov	r2, r3
    eff8:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    effc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f000:	7819      	ldrb	r1, [r3, #0]
    f002:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f00a:	5499      	strb	r1, [r3, r2]
    f00c:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f014:	781a      	ldrb	r2, [r3, #0]
    f016:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f01a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f01e:	781b      	ldrb	r3, [r3, #0]
    f020:	4413      	add	r3, r2
    f022:	b2da      	uxtb	r2, r3
    f024:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f02c:	701a      	strb	r2, [r3, #0]
    f02e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f036:	781a      	ldrb	r2, [r3, #0]
    f038:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f03c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f040:	781b      	ldrb	r3, [r3, #0]
    f042:	4413      	add	r3, r2
    f044:	b2da      	uxtb	r2, r3
    f046:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f04a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f04e:	701a      	strb	r2, [r3, #0]
    f050:	f24c 5349 	movw	r3, #50505	; 0xc549
    f054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f058:	781b      	ldrb	r3, [r3, #0]
    f05a:	3301      	adds	r3, #1
    f05c:	b2da      	uxtb	r2, r3
    f05e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f066:	701a      	strb	r2, [r3, #0]
    f068:	f24c 5349 	movw	r3, #50505	; 0xc549
    f06c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f070:	781b      	ldrb	r3, [r3, #0]
    f072:	2bff      	cmp	r3, #255	; 0xff
    f074:	d105      	bne.n	f082 <send_gps_pos+0x4aa>
    f076:	f24c 5349 	movw	r3, #50505	; 0xc549
    f07a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f07e:	2200      	movs	r2, #0
    f080:	701a      	strb	r2, [r3, #0]
    f082:	f24c 5349 	movw	r3, #50505	; 0xc549
    f086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f08a:	781b      	ldrb	r3, [r3, #0]
    f08c:	461a      	mov	r2, r3
    f08e:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f096:	7859      	ldrb	r1, [r3, #1]
    f098:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f09c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0a0:	5499      	strb	r1, [r3, r2]
    f0a2:	4b43      	ldr	r3, [pc, #268]	; (f1b0 <send_gps_pos+0x5d8>)
    f0a4:	781a      	ldrb	r2, [r3, #0]
    f0a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f0aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ae:	781b      	ldrb	r3, [r3, #0]
    f0b0:	4413      	add	r3, r2
    f0b2:	b2da      	uxtb	r2, r3
    f0b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f0b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0bc:	701a      	strb	r2, [r3, #0]
    f0be:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f0c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0c6:	781a      	ldrb	r2, [r3, #0]
    f0c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f0cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0d0:	781b      	ldrb	r3, [r3, #0]
    f0d2:	4413      	add	r3, r2
    f0d4:	b2da      	uxtb	r2, r3
    f0d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f0da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0de:	701a      	strb	r2, [r3, #0]
    f0e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0e8:	781b      	ldrb	r3, [r3, #0]
    f0ea:	3301      	adds	r3, #1
    f0ec:	b2da      	uxtb	r2, r3
    f0ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0f6:	701a      	strb	r2, [r3, #0]
    f0f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f100:	781b      	ldrb	r3, [r3, #0]
    f102:	2bff      	cmp	r3, #255	; 0xff
    f104:	d105      	bne.n	f112 <send_gps_pos+0x53a>
    f106:	f24c 5349 	movw	r3, #50505	; 0xc549
    f10a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f10e:	2200      	movs	r2, #0
    f110:	701a      	strb	r2, [r3, #0]
    f112:	f24c 5349 	movw	r3, #50505	; 0xc549
    f116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f11a:	781b      	ldrb	r3, [r3, #0]
    f11c:	461a      	mov	r2, r3
    f11e:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f126:	7899      	ldrb	r1, [r3, #2]
    f128:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f12c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f130:	5499      	strb	r1, [r3, r2]
    f132:	4b20      	ldr	r3, [pc, #128]	; (f1b4 <send_gps_pos+0x5dc>)
    f134:	781a      	ldrb	r2, [r3, #0]
    f136:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f13a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f13e:	781b      	ldrb	r3, [r3, #0]
    f140:	4413      	add	r3, r2
    f142:	b2da      	uxtb	r2, r3
    f144:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f14c:	701a      	strb	r2, [r3, #0]
    f14e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f156:	781a      	ldrb	r2, [r3, #0]
    f158:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f15c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f160:	781b      	ldrb	r3, [r3, #0]
    f162:	4413      	add	r3, r2
    f164:	b2da      	uxtb	r2, r3
    f166:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f16a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f16e:	701a      	strb	r2, [r3, #0]
    f170:	f24c 5349 	movw	r3, #50505	; 0xc549
    f174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f178:	781b      	ldrb	r3, [r3, #0]
    f17a:	3301      	adds	r3, #1
    f17c:	b2da      	uxtb	r2, r3
    f17e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f186:	701a      	strb	r2, [r3, #0]
    f188:	f24c 5349 	movw	r3, #50505	; 0xc549
    f18c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f190:	781b      	ldrb	r3, [r3, #0]
    f192:	2bff      	cmp	r3, #255	; 0xff
    f194:	d110      	bne.n	f1b8 <send_gps_pos+0x5e0>
    f196:	f24c 5349 	movw	r3, #50505	; 0xc549
    f19a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f19e:	2200      	movs	r2, #0
    f1a0:	701a      	strb	r2, [r3, #0]
    f1a2:	e009      	b.n	f1b8 <send_gps_pos+0x5e0>
    f1a4:	2004c6cd 	.word	0x2004c6cd
    f1a8:	2004c6ce 	.word	0x2004c6ce
    f1ac:	2004c6cf 	.word	0x2004c6cf
    f1b0:	2004c6d1 	.word	0x2004c6d1
    f1b4:	2004c6d2 	.word	0x2004c6d2
    f1b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1c0:	781b      	ldrb	r3, [r3, #0]
    f1c2:	461a      	mov	r2, r3
    f1c4:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f1c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1cc:	78d9      	ldrb	r1, [r3, #3]
    f1ce:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f1d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1d6:	5499      	strb	r1, [r3, r2]
    f1d8:	4bd3      	ldr	r3, [pc, #844]	; (f528 <send_gps_pos+0x950>)
    f1da:	781a      	ldrb	r2, [r3, #0]
    f1dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f1e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1e4:	781b      	ldrb	r3, [r3, #0]
    f1e6:	4413      	add	r3, r2
    f1e8:	b2da      	uxtb	r2, r3
    f1ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f1ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1f2:	701a      	strb	r2, [r3, #0]
    f1f4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f1f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1fc:	781a      	ldrb	r2, [r3, #0]
    f1fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f206:	781b      	ldrb	r3, [r3, #0]
    f208:	4413      	add	r3, r2
    f20a:	b2da      	uxtb	r2, r3
    f20c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f214:	701a      	strb	r2, [r3, #0]
    f216:	f24c 5349 	movw	r3, #50505	; 0xc549
    f21a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f21e:	781b      	ldrb	r3, [r3, #0]
    f220:	3301      	adds	r3, #1
    f222:	b2da      	uxtb	r2, r3
    f224:	f24c 5349 	movw	r3, #50505	; 0xc549
    f228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f22c:	701a      	strb	r2, [r3, #0]
    f22e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f236:	781b      	ldrb	r3, [r3, #0]
    f238:	2bff      	cmp	r3, #255	; 0xff
    f23a:	d105      	bne.n	f248 <send_gps_pos+0x670>
    f23c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f244:	2200      	movs	r2, #0
    f246:	701a      	strb	r2, [r3, #0]
    f248:	f24c 5349 	movw	r3, #50505	; 0xc549
    f24c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f250:	781b      	ldrb	r3, [r3, #0]
    f252:	461a      	mov	r2, r3
    f254:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f25c:	7819      	ldrb	r1, [r3, #0]
    f25e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f266:	5499      	strb	r1, [r3, r2]
    f268:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f26c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f270:	781a      	ldrb	r2, [r3, #0]
    f272:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f27a:	781b      	ldrb	r3, [r3, #0]
    f27c:	4413      	add	r3, r2
    f27e:	b2da      	uxtb	r2, r3
    f280:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f288:	701a      	strb	r2, [r3, #0]
    f28a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f28e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f292:	781a      	ldrb	r2, [r3, #0]
    f294:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f29c:	781b      	ldrb	r3, [r3, #0]
    f29e:	4413      	add	r3, r2
    f2a0:	b2da      	uxtb	r2, r3
    f2a2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f2a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2aa:	701a      	strb	r2, [r3, #0]
    f2ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    f2b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2b4:	781b      	ldrb	r3, [r3, #0]
    f2b6:	3301      	adds	r3, #1
    f2b8:	b2da      	uxtb	r2, r3
    f2ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    f2be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2c2:	701a      	strb	r2, [r3, #0]
    f2c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f2c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2cc:	781b      	ldrb	r3, [r3, #0]
    f2ce:	2bff      	cmp	r3, #255	; 0xff
    f2d0:	d105      	bne.n	f2de <send_gps_pos+0x706>
    f2d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f2d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2da:	2200      	movs	r2, #0
    f2dc:	701a      	strb	r2, [r3, #0]
    f2de:	f24c 5349 	movw	r3, #50505	; 0xc549
    f2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2e6:	781b      	ldrb	r3, [r3, #0]
    f2e8:	461a      	mov	r2, r3
    f2ea:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f2ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2f2:	7859      	ldrb	r1, [r3, #1]
    f2f4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f2f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2fc:	5499      	strb	r1, [r3, r2]
    f2fe:	4b8b      	ldr	r3, [pc, #556]	; (f52c <send_gps_pos+0x954>)
    f300:	781a      	ldrb	r2, [r3, #0]
    f302:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f30a:	781b      	ldrb	r3, [r3, #0]
    f30c:	4413      	add	r3, r2
    f30e:	b2da      	uxtb	r2, r3
    f310:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f318:	701a      	strb	r2, [r3, #0]
    f31a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f31e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f322:	781a      	ldrb	r2, [r3, #0]
    f324:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f32c:	781b      	ldrb	r3, [r3, #0]
    f32e:	4413      	add	r3, r2
    f330:	b2da      	uxtb	r2, r3
    f332:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f33a:	701a      	strb	r2, [r3, #0]
    f33c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f344:	781b      	ldrb	r3, [r3, #0]
    f346:	3301      	adds	r3, #1
    f348:	b2da      	uxtb	r2, r3
    f34a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f34e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f352:	701a      	strb	r2, [r3, #0]
    f354:	f24c 5349 	movw	r3, #50505	; 0xc549
    f358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f35c:	781b      	ldrb	r3, [r3, #0]
    f35e:	2bff      	cmp	r3, #255	; 0xff
    f360:	d105      	bne.n	f36e <send_gps_pos+0x796>
    f362:	f24c 5349 	movw	r3, #50505	; 0xc549
    f366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f36a:	2200      	movs	r2, #0
    f36c:	701a      	strb	r2, [r3, #0]
    f36e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f376:	781b      	ldrb	r3, [r3, #0]
    f378:	461a      	mov	r2, r3
    f37a:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f37e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f382:	7899      	ldrb	r1, [r3, #2]
    f384:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f38c:	5499      	strb	r1, [r3, r2]
    f38e:	4b68      	ldr	r3, [pc, #416]	; (f530 <send_gps_pos+0x958>)
    f390:	781a      	ldrb	r2, [r3, #0]
    f392:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f39a:	781b      	ldrb	r3, [r3, #0]
    f39c:	4413      	add	r3, r2
    f39e:	b2da      	uxtb	r2, r3
    f3a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3a8:	701a      	strb	r2, [r3, #0]
    f3aa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3b2:	781a      	ldrb	r2, [r3, #0]
    f3b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3bc:	781b      	ldrb	r3, [r3, #0]
    f3be:	4413      	add	r3, r2
    f3c0:	b2da      	uxtb	r2, r3
    f3c2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f3c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ca:	701a      	strb	r2, [r3, #0]
    f3cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3d4:	781b      	ldrb	r3, [r3, #0]
    f3d6:	3301      	adds	r3, #1
    f3d8:	b2da      	uxtb	r2, r3
    f3da:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3e2:	701a      	strb	r2, [r3, #0]
    f3e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ec:	781b      	ldrb	r3, [r3, #0]
    f3ee:	2bff      	cmp	r3, #255	; 0xff
    f3f0:	d105      	bne.n	f3fe <send_gps_pos+0x826>
    f3f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3fa:	2200      	movs	r2, #0
    f3fc:	701a      	strb	r2, [r3, #0]
    f3fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    f402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f406:	781b      	ldrb	r3, [r3, #0]
    f408:	461a      	mov	r2, r3
    f40a:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f40e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f412:	78d9      	ldrb	r1, [r3, #3]
    f414:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f41c:	5499      	strb	r1, [r3, r2]
    f41e:	4b45      	ldr	r3, [pc, #276]	; (f534 <send_gps_pos+0x95c>)
    f420:	781a      	ldrb	r2, [r3, #0]
    f422:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f42a:	781b      	ldrb	r3, [r3, #0]
    f42c:	4413      	add	r3, r2
    f42e:	b2da      	uxtb	r2, r3
    f430:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f438:	701a      	strb	r2, [r3, #0]
    f43a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f43e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f442:	781a      	ldrb	r2, [r3, #0]
    f444:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f44c:	781b      	ldrb	r3, [r3, #0]
    f44e:	4413      	add	r3, r2
    f450:	b2da      	uxtb	r2, r3
    f452:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f45a:	701a      	strb	r2, [r3, #0]
    f45c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f464:	781b      	ldrb	r3, [r3, #0]
    f466:	3301      	adds	r3, #1
    f468:	b2da      	uxtb	r2, r3
    f46a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f46e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f472:	701a      	strb	r2, [r3, #0]
    f474:	f24c 5349 	movw	r3, #50505	; 0xc549
    f478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f47c:	781b      	ldrb	r3, [r3, #0]
    f47e:	2bff      	cmp	r3, #255	; 0xff
    f480:	d105      	bne.n	f48e <send_gps_pos+0x8b6>
    f482:	f24c 5349 	movw	r3, #50505	; 0xc549
    f486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f48a:	2200      	movs	r2, #0
    f48c:	701a      	strb	r2, [r3, #0]
    f48e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f496:	781b      	ldrb	r3, [r3, #0]
    f498:	461a      	mov	r2, r3
    f49a:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4a2:	7819      	ldrb	r1, [r3, #0]
    f4a4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ac:	5499      	strb	r1, [r3, r2]
    f4ae:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f4b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4b6:	781a      	ldrb	r2, [r3, #0]
    f4b8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f4bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4c0:	781b      	ldrb	r3, [r3, #0]
    f4c2:	4413      	add	r3, r2
    f4c4:	b2da      	uxtb	r2, r3
    f4c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f4ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ce:	701a      	strb	r2, [r3, #0]
    f4d0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f4d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4d8:	781a      	ldrb	r2, [r3, #0]
    f4da:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f4de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4e2:	781b      	ldrb	r3, [r3, #0]
    f4e4:	4413      	add	r3, r2
    f4e6:	b2da      	uxtb	r2, r3
    f4e8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f4ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4f0:	701a      	strb	r2, [r3, #0]
    f4f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4fa:	781b      	ldrb	r3, [r3, #0]
    f4fc:	3301      	adds	r3, #1
    f4fe:	b2da      	uxtb	r2, r3
    f500:	f24c 5349 	movw	r3, #50505	; 0xc549
    f504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f508:	701a      	strb	r2, [r3, #0]
    f50a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f50e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f512:	781b      	ldrb	r3, [r3, #0]
    f514:	2bff      	cmp	r3, #255	; 0xff
    f516:	d10f      	bne.n	f538 <send_gps_pos+0x960>
    f518:	f24c 5349 	movw	r3, #50505	; 0xc549
    f51c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f520:	2200      	movs	r2, #0
    f522:	701a      	strb	r2, [r3, #0]
    f524:	e008      	b.n	f538 <send_gps_pos+0x960>
    f526:	bf00      	nop
    f528:	2004c6d3 	.word	0x2004c6d3
    f52c:	2004c6c9 	.word	0x2004c6c9
    f530:	2004c6ca 	.word	0x2004c6ca
    f534:	2004c6cb 	.word	0x2004c6cb
    f538:	f24c 5349 	movw	r3, #50505	; 0xc549
    f53c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f540:	781b      	ldrb	r3, [r3, #0]
    f542:	461a      	mov	r2, r3
    f544:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f54c:	7859      	ldrb	r1, [r3, #1]
    f54e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f556:	5499      	strb	r1, [r3, r2]
    f558:	4bd1      	ldr	r3, [pc, #836]	; (f8a0 <send_gps_pos+0xcc8>)
    f55a:	781a      	ldrb	r2, [r3, #0]
    f55c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f564:	781b      	ldrb	r3, [r3, #0]
    f566:	4413      	add	r3, r2
    f568:	b2da      	uxtb	r2, r3
    f56a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f56e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f572:	701a      	strb	r2, [r3, #0]
    f574:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f57c:	781a      	ldrb	r2, [r3, #0]
    f57e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f582:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f586:	781b      	ldrb	r3, [r3, #0]
    f588:	4413      	add	r3, r2
    f58a:	b2da      	uxtb	r2, r3
    f58c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f594:	701a      	strb	r2, [r3, #0]
    f596:	f24c 5349 	movw	r3, #50505	; 0xc549
    f59a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f59e:	781b      	ldrb	r3, [r3, #0]
    f5a0:	3301      	adds	r3, #1
    f5a2:	b2da      	uxtb	r2, r3
    f5a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ac:	701a      	strb	r2, [r3, #0]
    f5ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    f5b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5b6:	781b      	ldrb	r3, [r3, #0]
    f5b8:	2bff      	cmp	r3, #255	; 0xff
    f5ba:	d105      	bne.n	f5c8 <send_gps_pos+0x9f0>
    f5bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f5c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5c4:	2200      	movs	r2, #0
    f5c6:	701a      	strb	r2, [r3, #0]
    f5c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f5cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5d0:	781b      	ldrb	r3, [r3, #0]
    f5d2:	461a      	mov	r2, r3
    f5d4:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f5d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5dc:	7899      	ldrb	r1, [r3, #2]
    f5de:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f5e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5e6:	5499      	strb	r1, [r3, r2]
    f5e8:	4bae      	ldr	r3, [pc, #696]	; (f8a4 <send_gps_pos+0xccc>)
    f5ea:	781a      	ldrb	r2, [r3, #0]
    f5ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f5f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5f4:	781b      	ldrb	r3, [r3, #0]
    f5f6:	4413      	add	r3, r2
    f5f8:	b2da      	uxtb	r2, r3
    f5fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f5fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f602:	701a      	strb	r2, [r3, #0]
    f604:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f60c:	781a      	ldrb	r2, [r3, #0]
    f60e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f616:	781b      	ldrb	r3, [r3, #0]
    f618:	4413      	add	r3, r2
    f61a:	b2da      	uxtb	r2, r3
    f61c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f624:	701a      	strb	r2, [r3, #0]
    f626:	f24c 5349 	movw	r3, #50505	; 0xc549
    f62a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f62e:	781b      	ldrb	r3, [r3, #0]
    f630:	3301      	adds	r3, #1
    f632:	b2da      	uxtb	r2, r3
    f634:	f24c 5349 	movw	r3, #50505	; 0xc549
    f638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f63c:	701a      	strb	r2, [r3, #0]
    f63e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f646:	781b      	ldrb	r3, [r3, #0]
    f648:	2bff      	cmp	r3, #255	; 0xff
    f64a:	d105      	bne.n	f658 <send_gps_pos+0xa80>
    f64c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f654:	2200      	movs	r2, #0
    f656:	701a      	strb	r2, [r3, #0]
    f658:	f24c 5349 	movw	r3, #50505	; 0xc549
    f65c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f660:	781b      	ldrb	r3, [r3, #0]
    f662:	461a      	mov	r2, r3
    f664:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f66c:	78d9      	ldrb	r1, [r3, #3]
    f66e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f676:	5499      	strb	r1, [r3, r2]
    f678:	4b8b      	ldr	r3, [pc, #556]	; (f8a8 <send_gps_pos+0xcd0>)
    f67a:	781a      	ldrb	r2, [r3, #0]
    f67c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f684:	781b      	ldrb	r3, [r3, #0]
    f686:	4413      	add	r3, r2
    f688:	b2da      	uxtb	r2, r3
    f68a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f68e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f692:	701a      	strb	r2, [r3, #0]
    f694:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f69c:	781a      	ldrb	r2, [r3, #0]
    f69e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6a6:	781b      	ldrb	r3, [r3, #0]
    f6a8:	4413      	add	r3, r2
    f6aa:	b2da      	uxtb	r2, r3
    f6ac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f6b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6b4:	701a      	strb	r2, [r3, #0]
    f6b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6be:	781b      	ldrb	r3, [r3, #0]
    f6c0:	3301      	adds	r3, #1
    f6c2:	b2da      	uxtb	r2, r3
    f6c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6cc:	701a      	strb	r2, [r3, #0]
    f6ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6d6:	781b      	ldrb	r3, [r3, #0]
    f6d8:	2bff      	cmp	r3, #255	; 0xff
    f6da:	d105      	bne.n	f6e8 <send_gps_pos+0xb10>
    f6dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6e4:	2200      	movs	r2, #0
    f6e6:	701a      	strb	r2, [r3, #0]
    f6e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6f0:	781b      	ldrb	r3, [r3, #0]
    f6f2:	461a      	mov	r2, r3
    f6f4:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f6f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6fc:	7819      	ldrb	r1, [r3, #0]
    f6fe:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f706:	5499      	strb	r1, [r3, r2]
    f708:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f70c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f710:	781a      	ldrb	r2, [r3, #0]
    f712:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f716:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f71a:	781b      	ldrb	r3, [r3, #0]
    f71c:	4413      	add	r3, r2
    f71e:	b2da      	uxtb	r2, r3
    f720:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f728:	701a      	strb	r2, [r3, #0]
    f72a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f72e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f732:	781a      	ldrb	r2, [r3, #0]
    f734:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f738:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f73c:	781b      	ldrb	r3, [r3, #0]
    f73e:	4413      	add	r3, r2
    f740:	b2da      	uxtb	r2, r3
    f742:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f74a:	701a      	strb	r2, [r3, #0]
    f74c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f754:	781b      	ldrb	r3, [r3, #0]
    f756:	3301      	adds	r3, #1
    f758:	b2da      	uxtb	r2, r3
    f75a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f75e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f762:	701a      	strb	r2, [r3, #0]
    f764:	f24c 5349 	movw	r3, #50505	; 0xc549
    f768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f76c:	781b      	ldrb	r3, [r3, #0]
    f76e:	2bff      	cmp	r3, #255	; 0xff
    f770:	d105      	bne.n	f77e <send_gps_pos+0xba6>
    f772:	f24c 5349 	movw	r3, #50505	; 0xc549
    f776:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f77a:	2200      	movs	r2, #0
    f77c:	701a      	strb	r2, [r3, #0]
    f77e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f786:	781b      	ldrb	r3, [r3, #0]
    f788:	461a      	mov	r2, r3
    f78a:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f78e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f792:	7859      	ldrb	r1, [r3, #1]
    f794:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f79c:	5499      	strb	r1, [r3, r2]
    f79e:	4b43      	ldr	r3, [pc, #268]	; (f8ac <send_gps_pos+0xcd4>)
    f7a0:	781a      	ldrb	r2, [r3, #0]
    f7a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f7a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7aa:	781b      	ldrb	r3, [r3, #0]
    f7ac:	4413      	add	r3, r2
    f7ae:	b2da      	uxtb	r2, r3
    f7b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f7b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7b8:	701a      	strb	r2, [r3, #0]
    f7ba:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f7be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7c2:	781a      	ldrb	r2, [r3, #0]
    f7c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f7c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7cc:	781b      	ldrb	r3, [r3, #0]
    f7ce:	4413      	add	r3, r2
    f7d0:	b2da      	uxtb	r2, r3
    f7d2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f7d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7da:	701a      	strb	r2, [r3, #0]
    f7dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7e4:	781b      	ldrb	r3, [r3, #0]
    f7e6:	3301      	adds	r3, #1
    f7e8:	b2da      	uxtb	r2, r3
    f7ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7f2:	701a      	strb	r2, [r3, #0]
    f7f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7fc:	781b      	ldrb	r3, [r3, #0]
    f7fe:	2bff      	cmp	r3, #255	; 0xff
    f800:	d105      	bne.n	f80e <send_gps_pos+0xc36>
    f802:	f24c 5349 	movw	r3, #50505	; 0xc549
    f806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f80a:	2200      	movs	r2, #0
    f80c:	701a      	strb	r2, [r3, #0]
    f80e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f816:	781b      	ldrb	r3, [r3, #0]
    f818:	461a      	mov	r2, r3
    f81a:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f81e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f822:	7899      	ldrb	r1, [r3, #2]
    f824:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f82c:	5499      	strb	r1, [r3, r2]
    f82e:	4b20      	ldr	r3, [pc, #128]	; (f8b0 <send_gps_pos+0xcd8>)
    f830:	781a      	ldrb	r2, [r3, #0]
    f832:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f83a:	781b      	ldrb	r3, [r3, #0]
    f83c:	4413      	add	r3, r2
    f83e:	b2da      	uxtb	r2, r3
    f840:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f848:	701a      	strb	r2, [r3, #0]
    f84a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f84e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f852:	781a      	ldrb	r2, [r3, #0]
    f854:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f85c:	781b      	ldrb	r3, [r3, #0]
    f85e:	4413      	add	r3, r2
    f860:	b2da      	uxtb	r2, r3
    f862:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f86a:	701a      	strb	r2, [r3, #0]
    f86c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f874:	781b      	ldrb	r3, [r3, #0]
    f876:	3301      	adds	r3, #1
    f878:	b2da      	uxtb	r2, r3
    f87a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f87e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f882:	701a      	strb	r2, [r3, #0]
    f884:	f24c 5349 	movw	r3, #50505	; 0xc549
    f888:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f88c:	781b      	ldrb	r3, [r3, #0]
    f88e:	2bff      	cmp	r3, #255	; 0xff
    f890:	d110      	bne.n	f8b4 <send_gps_pos+0xcdc>
    f892:	f24c 5349 	movw	r3, #50505	; 0xc549
    f896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f89a:	2200      	movs	r2, #0
    f89c:	701a      	strb	r2, [r3, #0]
    f89e:	e009      	b.n	f8b4 <send_gps_pos+0xcdc>
    f8a0:	2004c6bd 	.word	0x2004c6bd
    f8a4:	2004c6be 	.word	0x2004c6be
    f8a8:	2004c6bf 	.word	0x2004c6bf
    f8ac:	2004c6c1 	.word	0x2004c6c1
    f8b0:	2004c6c2 	.word	0x2004c6c2
    f8b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8bc:	781b      	ldrb	r3, [r3, #0]
    f8be:	461a      	mov	r2, r3
    f8c0:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f8c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8c8:	78d9      	ldrb	r1, [r3, #3]
    f8ca:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f8ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8d2:	5499      	strb	r1, [r3, r2]
    f8d4:	4bd3      	ldr	r3, [pc, #844]	; (fc24 <send_gps_pos+0x104c>)
    f8d6:	781a      	ldrb	r2, [r3, #0]
    f8d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f8dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8e0:	781b      	ldrb	r3, [r3, #0]
    f8e2:	4413      	add	r3, r2
    f8e4:	b2da      	uxtb	r2, r3
    f8e6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f8ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ee:	701a      	strb	r2, [r3, #0]
    f8f0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f8f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8f8:	781a      	ldrb	r2, [r3, #0]
    f8fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f8fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f902:	781b      	ldrb	r3, [r3, #0]
    f904:	4413      	add	r3, r2
    f906:	b2da      	uxtb	r2, r3
    f908:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f90c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f910:	701a      	strb	r2, [r3, #0]
    f912:	f24c 5349 	movw	r3, #50505	; 0xc549
    f916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f91a:	781b      	ldrb	r3, [r3, #0]
    f91c:	3301      	adds	r3, #1
    f91e:	b2da      	uxtb	r2, r3
    f920:	f24c 5349 	movw	r3, #50505	; 0xc549
    f924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f928:	701a      	strb	r2, [r3, #0]
    f92a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f92e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f932:	781b      	ldrb	r3, [r3, #0]
    f934:	2bff      	cmp	r3, #255	; 0xff
    f936:	d105      	bne.n	f944 <send_gps_pos+0xd6c>
    f938:	f24c 5349 	movw	r3, #50505	; 0xc549
    f93c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f940:	2200      	movs	r2, #0
    f942:	701a      	strb	r2, [r3, #0]
    f944:	f24c 5349 	movw	r3, #50505	; 0xc549
    f948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f94c:	781b      	ldrb	r3, [r3, #0]
    f94e:	461a      	mov	r2, r3
    f950:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    f954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f958:	7819      	ldrb	r1, [r3, #0]
    f95a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f95e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f962:	5499      	strb	r1, [r3, r2]
    f964:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    f968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f96c:	781a      	ldrb	r2, [r3, #0]
    f96e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f976:	781b      	ldrb	r3, [r3, #0]
    f978:	4413      	add	r3, r2
    f97a:	b2da      	uxtb	r2, r3
    f97c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f984:	701a      	strb	r2, [r3, #0]
    f986:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f98a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f98e:	781a      	ldrb	r2, [r3, #0]
    f990:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f998:	781b      	ldrb	r3, [r3, #0]
    f99a:	4413      	add	r3, r2
    f99c:	b2da      	uxtb	r2, r3
    f99e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f9a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9a6:	701a      	strb	r2, [r3, #0]
    f9a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f9ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9b0:	781b      	ldrb	r3, [r3, #0]
    f9b2:	3301      	adds	r3, #1
    f9b4:	b2da      	uxtb	r2, r3
    f9b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f9ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9be:	701a      	strb	r2, [r3, #0]
    f9c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f9c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9c8:	781b      	ldrb	r3, [r3, #0]
    f9ca:	2bff      	cmp	r3, #255	; 0xff
    f9cc:	d105      	bne.n	f9da <send_gps_pos+0xe02>
    f9ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    f9d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9d6:	2200      	movs	r2, #0
    f9d8:	701a      	strb	r2, [r3, #0]
    f9da:	f24c 5349 	movw	r3, #50505	; 0xc549
    f9de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9e2:	781b      	ldrb	r3, [r3, #0]
    f9e4:	461a      	mov	r2, r3
    f9e6:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    f9ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9ee:	7859      	ldrb	r1, [r3, #1]
    f9f0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f9f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9f8:	5499      	strb	r1, [r3, r2]
    f9fa:	4b8b      	ldr	r3, [pc, #556]	; (fc28 <send_gps_pos+0x1050>)
    f9fc:	781a      	ldrb	r2, [r3, #0]
    f9fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa06:	781b      	ldrb	r3, [r3, #0]
    fa08:	4413      	add	r3, r2
    fa0a:	b2da      	uxtb	r2, r3
    fa0c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa14:	701a      	strb	r2, [r3, #0]
    fa16:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fa1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa1e:	781a      	ldrb	r2, [r3, #0]
    fa20:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa28:	781b      	ldrb	r3, [r3, #0]
    fa2a:	4413      	add	r3, r2
    fa2c:	b2da      	uxtb	r2, r3
    fa2e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fa32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa36:	701a      	strb	r2, [r3, #0]
    fa38:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa40:	781b      	ldrb	r3, [r3, #0]
    fa42:	3301      	adds	r3, #1
    fa44:	b2da      	uxtb	r2, r3
    fa46:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa4e:	701a      	strb	r2, [r3, #0]
    fa50:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa58:	781b      	ldrb	r3, [r3, #0]
    fa5a:	2bff      	cmp	r3, #255	; 0xff
    fa5c:	d105      	bne.n	fa6a <send_gps_pos+0xe92>
    fa5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa66:	2200      	movs	r2, #0
    fa68:	701a      	strb	r2, [r3, #0]
    fa6a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa72:	781b      	ldrb	r3, [r3, #0]
    fa74:	461a      	mov	r2, r3
    fa76:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fa7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa7e:	7899      	ldrb	r1, [r3, #2]
    fa80:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fa84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa88:	5499      	strb	r1, [r3, r2]
    fa8a:	4b68      	ldr	r3, [pc, #416]	; (fc2c <send_gps_pos+0x1054>)
    fa8c:	781a      	ldrb	r2, [r3, #0]
    fa8e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa96:	781b      	ldrb	r3, [r3, #0]
    fa98:	4413      	add	r3, r2
    fa9a:	b2da      	uxtb	r2, r3
    fa9c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    faa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faa4:	701a      	strb	r2, [r3, #0]
    faa6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    faaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faae:	781a      	ldrb	r2, [r3, #0]
    fab0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fab8:	781b      	ldrb	r3, [r3, #0]
    faba:	4413      	add	r3, r2
    fabc:	b2da      	uxtb	r2, r3
    fabe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fac6:	701a      	strb	r2, [r3, #0]
    fac8:	f24c 5349 	movw	r3, #50505	; 0xc549
    facc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fad0:	781b      	ldrb	r3, [r3, #0]
    fad2:	3301      	adds	r3, #1
    fad4:	b2da      	uxtb	r2, r3
    fad6:	f24c 5349 	movw	r3, #50505	; 0xc549
    fada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fade:	701a      	strb	r2, [r3, #0]
    fae0:	f24c 5349 	movw	r3, #50505	; 0xc549
    fae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fae8:	781b      	ldrb	r3, [r3, #0]
    faea:	2bff      	cmp	r3, #255	; 0xff
    faec:	d105      	bne.n	fafa <send_gps_pos+0xf22>
    faee:	f24c 5349 	movw	r3, #50505	; 0xc549
    faf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faf6:	2200      	movs	r2, #0
    faf8:	701a      	strb	r2, [r3, #0]
    fafa:	f24c 5349 	movw	r3, #50505	; 0xc549
    fafe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb02:	781b      	ldrb	r3, [r3, #0]
    fb04:	461a      	mov	r2, r3
    fb06:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fb0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb0e:	78d9      	ldrb	r1, [r3, #3]
    fb10:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fb14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb18:	5499      	strb	r1, [r3, r2]
    fb1a:	4b45      	ldr	r3, [pc, #276]	; (fc30 <send_gps_pos+0x1058>)
    fb1c:	781a      	ldrb	r2, [r3, #0]
    fb1e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb26:	781b      	ldrb	r3, [r3, #0]
    fb28:	4413      	add	r3, r2
    fb2a:	b2da      	uxtb	r2, r3
    fb2c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb34:	701a      	strb	r2, [r3, #0]
    fb36:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fb3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb3e:	781a      	ldrb	r2, [r3, #0]
    fb40:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb48:	781b      	ldrb	r3, [r3, #0]
    fb4a:	4413      	add	r3, r2
    fb4c:	b2da      	uxtb	r2, r3
    fb4e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fb52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb56:	701a      	strb	r2, [r3, #0]
    fb58:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb60:	781b      	ldrb	r3, [r3, #0]
    fb62:	3301      	adds	r3, #1
    fb64:	b2da      	uxtb	r2, r3
    fb66:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb6e:	701a      	strb	r2, [r3, #0]
    fb70:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb78:	781b      	ldrb	r3, [r3, #0]
    fb7a:	2bff      	cmp	r3, #255	; 0xff
    fb7c:	d105      	bne.n	fb8a <send_gps_pos+0xfb2>
    fb7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb86:	2200      	movs	r2, #0
    fb88:	701a      	strb	r2, [r3, #0]
    fb8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb92:	781b      	ldrb	r3, [r3, #0]
    fb94:	461a      	mov	r2, r3
    fb96:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fb9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb9e:	7819      	ldrb	r1, [r3, #0]
    fba0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fba8:	5499      	strb	r1, [r3, r2]
    fbaa:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fbae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbb2:	781a      	ldrb	r2, [r3, #0]
    fbb4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fbb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbbc:	781b      	ldrb	r3, [r3, #0]
    fbbe:	4413      	add	r3, r2
    fbc0:	b2da      	uxtb	r2, r3
    fbc2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fbc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbca:	701a      	strb	r2, [r3, #0]
    fbcc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fbd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbd4:	781a      	ldrb	r2, [r3, #0]
    fbd6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fbda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbde:	781b      	ldrb	r3, [r3, #0]
    fbe0:	4413      	add	r3, r2
    fbe2:	b2da      	uxtb	r2, r3
    fbe4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fbe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbec:	701a      	strb	r2, [r3, #0]
    fbee:	f24c 5349 	movw	r3, #50505	; 0xc549
    fbf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbf6:	781b      	ldrb	r3, [r3, #0]
    fbf8:	3301      	adds	r3, #1
    fbfa:	b2da      	uxtb	r2, r3
    fbfc:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc04:	701a      	strb	r2, [r3, #0]
    fc06:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc0e:	781b      	ldrb	r3, [r3, #0]
    fc10:	2bff      	cmp	r3, #255	; 0xff
    fc12:	d10f      	bne.n	fc34 <send_gps_pos+0x105c>
    fc14:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc1c:	2200      	movs	r2, #0
    fc1e:	701a      	strb	r2, [r3, #0]
    fc20:	e008      	b.n	fc34 <send_gps_pos+0x105c>
    fc22:	bf00      	nop
    fc24:	2004c6c3 	.word	0x2004c6c3
    fc28:	2004c6c5 	.word	0x2004c6c5
    fc2c:	2004c6c6 	.word	0x2004c6c6
    fc30:	2004c6c7 	.word	0x2004c6c7
    fc34:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc3c:	781b      	ldrb	r3, [r3, #0]
    fc3e:	461a      	mov	r2, r3
    fc40:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fc44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc48:	7859      	ldrb	r1, [r3, #1]
    fc4a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fc4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc52:	5499      	strb	r1, [r3, r2]
    fc54:	4bc0      	ldr	r3, [pc, #768]	; (ff58 <send_gps_pos+0x1380>)
    fc56:	781a      	ldrb	r2, [r3, #0]
    fc58:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc60:	781b      	ldrb	r3, [r3, #0]
    fc62:	4413      	add	r3, r2
    fc64:	b2da      	uxtb	r2, r3
    fc66:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc6e:	701a      	strb	r2, [r3, #0]
    fc70:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fc74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc78:	781a      	ldrb	r2, [r3, #0]
    fc7a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc82:	781b      	ldrb	r3, [r3, #0]
    fc84:	4413      	add	r3, r2
    fc86:	b2da      	uxtb	r2, r3
    fc88:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fc8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc90:	701a      	strb	r2, [r3, #0]
    fc92:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc9a:	781b      	ldrb	r3, [r3, #0]
    fc9c:	3301      	adds	r3, #1
    fc9e:	b2da      	uxtb	r2, r3
    fca0:	f24c 5349 	movw	r3, #50505	; 0xc549
    fca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fca8:	701a      	strb	r2, [r3, #0]
    fcaa:	f24c 5349 	movw	r3, #50505	; 0xc549
    fcae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcb2:	781b      	ldrb	r3, [r3, #0]
    fcb4:	2bff      	cmp	r3, #255	; 0xff
    fcb6:	d105      	bne.n	fcc4 <send_gps_pos+0x10ec>
    fcb8:	f24c 5349 	movw	r3, #50505	; 0xc549
    fcbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcc0:	2200      	movs	r2, #0
    fcc2:	701a      	strb	r2, [r3, #0]
    fcc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    fcc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fccc:	781b      	ldrb	r3, [r3, #0]
    fcce:	461a      	mov	r2, r3
    fcd0:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fcd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcd8:	7899      	ldrb	r1, [r3, #2]
    fcda:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fcde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fce2:	5499      	strb	r1, [r3, r2]
    fce4:	4b9d      	ldr	r3, [pc, #628]	; (ff5c <send_gps_pos+0x1384>)
    fce6:	781a      	ldrb	r2, [r3, #0]
    fce8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fcec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcf0:	781b      	ldrb	r3, [r3, #0]
    fcf2:	4413      	add	r3, r2
    fcf4:	b2da      	uxtb	r2, r3
    fcf6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fcfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcfe:	701a      	strb	r2, [r3, #0]
    fd00:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fd04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd08:	781a      	ldrb	r2, [r3, #0]
    fd0a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd12:	781b      	ldrb	r3, [r3, #0]
    fd14:	4413      	add	r3, r2
    fd16:	b2da      	uxtb	r2, r3
    fd18:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fd1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd20:	701a      	strb	r2, [r3, #0]
    fd22:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd2a:	781b      	ldrb	r3, [r3, #0]
    fd2c:	3301      	adds	r3, #1
    fd2e:	b2da      	uxtb	r2, r3
    fd30:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd38:	701a      	strb	r2, [r3, #0]
    fd3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd42:	781b      	ldrb	r3, [r3, #0]
    fd44:	2bff      	cmp	r3, #255	; 0xff
    fd46:	d105      	bne.n	fd54 <send_gps_pos+0x117c>
    fd48:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd50:	2200      	movs	r2, #0
    fd52:	701a      	strb	r2, [r3, #0]
    fd54:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd5c:	781b      	ldrb	r3, [r3, #0]
    fd5e:	461a      	mov	r2, r3
    fd60:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fd64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd68:	78d9      	ldrb	r1, [r3, #3]
    fd6a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fd6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd72:	5499      	strb	r1, [r3, r2]
    fd74:	4b7a      	ldr	r3, [pc, #488]	; (ff60 <send_gps_pos+0x1388>)
    fd76:	781a      	ldrb	r2, [r3, #0]
    fd78:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd80:	781b      	ldrb	r3, [r3, #0]
    fd82:	4413      	add	r3, r2
    fd84:	b2da      	uxtb	r2, r3
    fd86:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd8e:	701a      	strb	r2, [r3, #0]
    fd90:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fd94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd98:	781a      	ldrb	r2, [r3, #0]
    fd9a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fda2:	781b      	ldrb	r3, [r3, #0]
    fda4:	4413      	add	r3, r2
    fda6:	b2da      	uxtb	r2, r3
    fda8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fdac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdb0:	701a      	strb	r2, [r3, #0]
    fdb2:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdba:	781b      	ldrb	r3, [r3, #0]
    fdbc:	3301      	adds	r3, #1
    fdbe:	b2da      	uxtb	r2, r3
    fdc0:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdc8:	701a      	strb	r2, [r3, #0]
    fdca:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdd2:	781b      	ldrb	r3, [r3, #0]
    fdd4:	2bff      	cmp	r3, #255	; 0xff
    fdd6:	d105      	bne.n	fde4 <send_gps_pos+0x120c>
    fdd8:	f24c 5349 	movw	r3, #50505	; 0xc549
    fddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fde0:	2200      	movs	r2, #0
    fde2:	701a      	strb	r2, [r3, #0]
    fde4:	f24c 5349 	movw	r3, #50505	; 0xc549
    fde8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdec:	781b      	ldrb	r3, [r3, #0]
    fdee:	461a      	mov	r2, r3
    fdf0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fdf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdf8:	7819      	ldrb	r1, [r3, #0]
    fdfa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fdfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe02:	5499      	strb	r1, [r3, r2]
    fe04:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe0c:	781b      	ldrb	r3, [r3, #0]
    fe0e:	3301      	adds	r3, #1
    fe10:	b2da      	uxtb	r2, r3
    fe12:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe1a:	701a      	strb	r2, [r3, #0]
    fe1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe24:	781b      	ldrb	r3, [r3, #0]
    fe26:	2bff      	cmp	r3, #255	; 0xff
    fe28:	d105      	bne.n	fe36 <send_gps_pos+0x125e>
    fe2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe32:	2200      	movs	r2, #0
    fe34:	701a      	strb	r2, [r3, #0]
    fe36:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe3e:	781b      	ldrb	r3, [r3, #0]
    fe40:	461a      	mov	r2, r3
    fe42:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fe46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe4a:	7819      	ldrb	r1, [r3, #0]
    fe4c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fe50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe54:	5499      	strb	r1, [r3, r2]
    fe56:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe5e:	781b      	ldrb	r3, [r3, #0]
    fe60:	3301      	adds	r3, #1
    fe62:	b2da      	uxtb	r2, r3
    fe64:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe6c:	701a      	strb	r2, [r3, #0]
    fe6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe76:	781b      	ldrb	r3, [r3, #0]
    fe78:	2bff      	cmp	r3, #255	; 0xff
    fe7a:	d105      	bne.n	fe88 <send_gps_pos+0x12b0>
    fe7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe84:	2200      	movs	r2, #0
    fe86:	701a      	strb	r2, [r3, #0]
    fe88:	f242 0339 	movw	r3, #8249	; 0x2039
    fe8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe90:	781b      	ldrb	r3, [r3, #0]
    fe92:	b2db      	uxtb	r3, r3
    fe94:	f003 0310 	and.w	r3, r3, #16
    fe98:	2b00      	cmp	r3, #0
    fe9a:	d15a      	bne.n	ff52 <send_gps_pos+0x137a>
    fe9c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    fea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fea4:	781b      	ldrb	r3, [r3, #0]
    fea6:	b2db      	uxtb	r3, r3
    fea8:	461a      	mov	r2, r3
    feaa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    feae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feb2:	5c9a      	ldrb	r2, [r3, r2]
    feb4:	f24c 634b 	movw	r3, #50763	; 0xc64b
    feb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    febc:	701a      	strb	r2, [r3, #0]
    febe:	f24c 634c 	movw	r3, #50764	; 0xc64c
    fec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fec6:	2200      	movs	r2, #0
    fec8:	701a      	strb	r2, [r3, #0]
    feca:	f24c 534a 	movw	r3, #50506	; 0xc54a
    fece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fed2:	781b      	ldrb	r3, [r3, #0]
    fed4:	b2db      	uxtb	r3, r3
    fed6:	3301      	adds	r3, #1
    fed8:	b2da      	uxtb	r2, r3
    feda:	f24c 534a 	movw	r3, #50506	; 0xc54a
    fede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fee2:	701a      	strb	r2, [r3, #0]
    fee4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    fee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feec:	781b      	ldrb	r3, [r3, #0]
    feee:	b2db      	uxtb	r3, r3
    fef0:	2bff      	cmp	r3, #255	; 0xff
    fef2:	d105      	bne.n	ff00 <send_gps_pos+0x1328>
    fef4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    fef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fefc:	2200      	movs	r2, #0
    fefe:	701a      	strb	r2, [r3, #0]
    ff00:	f242 0338 	movw	r3, #8248	; 0x2038
    ff04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff08:	f242 0238 	movw	r2, #8248	; 0x2038
    ff0c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ff10:	7812      	ldrb	r2, [r2, #0]
    ff12:	b2d2      	uxtb	r2, r2
    ff14:	f042 0201 	orr.w	r2, r2, #1
    ff18:	b2d2      	uxtb	r2, r2
    ff1a:	701a      	strb	r2, [r3, #0]
    ff1c:	f242 0339 	movw	r3, #8249	; 0x2039
    ff20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff24:	f242 0239 	movw	r2, #8249	; 0x2039
    ff28:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ff2c:	7812      	ldrb	r2, [r2, #0]
    ff2e:	b2d2      	uxtb	r2, r2
    ff30:	f042 0210 	orr.w	r2, r2, #16
    ff34:	b2d2      	uxtb	r2, r2
    ff36:	701a      	strb	r2, [r3, #0]
    ff38:	e00b      	b.n	ff52 <send_gps_pos+0x137a>
    ff3a:	f24c 5348 	movw	r3, #50504	; 0xc548
    ff3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff42:	781b      	ldrb	r3, [r3, #0]
    ff44:	3301      	adds	r3, #1
    ff46:	b2da      	uxtb	r2, r3
    ff48:	f24c 5348 	movw	r3, #50504	; 0xc548
    ff4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff50:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
    ff52:	f005 fbfd 	bl	15750 <estimator_update_state_gps>
  }
}
    ff56:	bd80      	pop	{r7, pc}
    ff58:	2004c6b9 	.word	0x2004c6b9
    ff5c:	2004c6ba 	.word	0x2004c6ba
    ff60:	2004c6bb 	.word	0x2004c6bb

0000ff64 <send_radIR>:

void send_radIR(void){
    ff64:	b480      	push	{r7}
    ff66:	af00      	add	r7, sp, #0
  if (gps_pos_available)
    ff68:	f24c 63de 	movw	r3, #50910	; 0xc6de
    ff6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff70:	781b      	ldrb	r3, [r3, #0]
    ff72:	2b00      	cmp	r3, #0
    ff74:	f000 85e8 	beq.w	10b48 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    ff78:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff80:	781a      	ldrb	r2, [r3, #0]
    ff82:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ff86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff8a:	781b      	ldrb	r3, [r3, #0]
    ff8c:	b2db      	uxtb	r3, r3
    ff8e:	429a      	cmp	r2, r3
    ff90:	d313      	bcc.n	ffba <send_radIR+0x56>
    ff92:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ff96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff9a:	781b      	ldrb	r3, [r3, #0]
    ff9c:	b2db      	uxtb	r3, r3
    ff9e:	461a      	mov	r2, r3
    ffa0:	f24c 5349 	movw	r3, #50505	; 0xc549
    ffa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffa8:	781b      	ldrb	r3, [r3, #0]
    ffaa:	1ad3      	subs	r3, r2, r3
    ffac:	33ff      	adds	r3, #255	; 0xff
    ffae:	2b14      	cmp	r3, #20
    ffb0:	bfd4      	ite	le
    ffb2:	2300      	movle	r3, #0
    ffb4:	2301      	movgt	r3, #1
    ffb6:	b2db      	uxtb	r3, r3
    ffb8:	e011      	b.n	ffde <send_radIR+0x7a>
    ffba:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ffbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffc2:	781b      	ldrb	r3, [r3, #0]
    ffc4:	b2db      	uxtb	r3, r3
    ffc6:	461a      	mov	r2, r3
    ffc8:	f24c 5349 	movw	r3, #50505	; 0xc549
    ffcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffd0:	781b      	ldrb	r3, [r3, #0]
    ffd2:	1ad3      	subs	r3, r2, r3
    ffd4:	2b14      	cmp	r3, #20
    ffd6:	bfd4      	ite	le
    ffd8:	2300      	movle	r3, #0
    ffda:	2301      	movgt	r3, #1
    ffdc:	b2db      	uxtb	r3, r3
    ffde:	2b00      	cmp	r3, #0
    ffe0:	f000 85a6 	beq.w	10b30 <send_radIR+0xbcc>
    ffe4:	f24c 5349 	movw	r3, #50505	; 0xc549
    ffe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffec:	781b      	ldrb	r3, [r3, #0]
    ffee:	461a      	mov	r2, r3
    fff0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fff8:	2105      	movs	r1, #5
    fffa:	5499      	strb	r1, [r3, r2]
    fffc:	f24c 5349 	movw	r3, #50505	; 0xc549
   10000:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10004:	781b      	ldrb	r3, [r3, #0]
   10006:	3301      	adds	r3, #1
   10008:	b2da      	uxtb	r2, r3
   1000a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1000e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10012:	701a      	strb	r2, [r3, #0]
   10014:	f24c 5349 	movw	r3, #50505	; 0xc549
   10018:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1001c:	781b      	ldrb	r3, [r3, #0]
   1001e:	2bff      	cmp	r3, #255	; 0xff
   10020:	d105      	bne.n	1002e <send_radIR+0xca>
   10022:	f24c 5349 	movw	r3, #50505	; 0xc549
   10026:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1002a:	2200      	movs	r2, #0
   1002c:	701a      	strb	r2, [r3, #0]
   1002e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10032:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10036:	781b      	ldrb	r3, [r3, #0]
   10038:	461a      	mov	r2, r3
   1003a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1003e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10042:	2105      	movs	r1, #5
   10044:	5499      	strb	r1, [r3, r2]
   10046:	f24c 5349 	movw	r3, #50505	; 0xc549
   1004a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1004e:	781b      	ldrb	r3, [r3, #0]
   10050:	3301      	adds	r3, #1
   10052:	b2da      	uxtb	r2, r3
   10054:	f24c 5349 	movw	r3, #50505	; 0xc549
   10058:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1005c:	701a      	strb	r2, [r3, #0]
   1005e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10062:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10066:	781b      	ldrb	r3, [r3, #0]
   10068:	2bff      	cmp	r3, #255	; 0xff
   1006a:	d105      	bne.n	10078 <send_radIR+0x114>
   1006c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10070:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10074:	2200      	movs	r2, #0
   10076:	701a      	strb	r2, [r3, #0]
   10078:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1007c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10080:	2205      	movs	r2, #5
   10082:	701a      	strb	r2, [r3, #0]
   10084:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10088:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1008c:	2205      	movs	r2, #5
   1008e:	701a      	strb	r2, [r3, #0]
   10090:	f24c 5349 	movw	r3, #50505	; 0xc549
   10094:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10098:	781b      	ldrb	r3, [r3, #0]
   1009a:	461a      	mov	r2, r3
   1009c:	f64c 3340 	movw	r3, #52032	; 0xcb40
   100a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100a4:	7819      	ldrb	r1, [r3, #0]
   100a6:	f24c 534c 	movw	r3, #50508	; 0xc54c
   100aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100ae:	5499      	strb	r1, [r3, r2]
   100b0:	f64c 3340 	movw	r3, #52032	; 0xcb40
   100b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100b8:	781a      	ldrb	r2, [r3, #0]
   100ba:	f24c 634d 	movw	r3, #50765	; 0xc64d
   100be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100c2:	781b      	ldrb	r3, [r3, #0]
   100c4:	4413      	add	r3, r2
   100c6:	b2da      	uxtb	r2, r3
   100c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   100cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100d0:	701a      	strb	r2, [r3, #0]
   100d2:	f24c 634e 	movw	r3, #50766	; 0xc64e
   100d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100da:	781a      	ldrb	r2, [r3, #0]
   100dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
   100e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100e4:	781b      	ldrb	r3, [r3, #0]
   100e6:	4413      	add	r3, r2
   100e8:	b2da      	uxtb	r2, r3
   100ea:	f24c 634e 	movw	r3, #50766	; 0xc64e
   100ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100f2:	701a      	strb	r2, [r3, #0]
   100f4:	f24c 5349 	movw	r3, #50505	; 0xc549
   100f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100fc:	781b      	ldrb	r3, [r3, #0]
   100fe:	3301      	adds	r3, #1
   10100:	b2da      	uxtb	r2, r3
   10102:	f24c 5349 	movw	r3, #50505	; 0xc549
   10106:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1010a:	701a      	strb	r2, [r3, #0]
   1010c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10110:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10114:	781b      	ldrb	r3, [r3, #0]
   10116:	2bff      	cmp	r3, #255	; 0xff
   10118:	d105      	bne.n	10126 <send_radIR+0x1c2>
   1011a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1011e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10122:	2200      	movs	r2, #0
   10124:	701a      	strb	r2, [r3, #0]
   10126:	f24c 5349 	movw	r3, #50505	; 0xc549
   1012a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1012e:	781b      	ldrb	r3, [r3, #0]
   10130:	461a      	mov	r2, r3
   10132:	f64c 3340 	movw	r3, #52032	; 0xcb40
   10136:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1013a:	7859      	ldrb	r1, [r3, #1]
   1013c:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10140:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10144:	5499      	strb	r1, [r3, r2]
   10146:	4bd2      	ldr	r3, [pc, #840]	; (10490 <send_radIR+0x52c>)
   10148:	781a      	ldrb	r2, [r3, #0]
   1014a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1014e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10152:	781b      	ldrb	r3, [r3, #0]
   10154:	4413      	add	r3, r2
   10156:	b2da      	uxtb	r2, r3
   10158:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1015c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10160:	701a      	strb	r2, [r3, #0]
   10162:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10166:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1016a:	781a      	ldrb	r2, [r3, #0]
   1016c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10170:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10174:	781b      	ldrb	r3, [r3, #0]
   10176:	4413      	add	r3, r2
   10178:	b2da      	uxtb	r2, r3
   1017a:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1017e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10182:	701a      	strb	r2, [r3, #0]
   10184:	f24c 5349 	movw	r3, #50505	; 0xc549
   10188:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1018c:	781b      	ldrb	r3, [r3, #0]
   1018e:	3301      	adds	r3, #1
   10190:	b2da      	uxtb	r2, r3
   10192:	f24c 5349 	movw	r3, #50505	; 0xc549
   10196:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1019a:	701a      	strb	r2, [r3, #0]
   1019c:	f24c 5349 	movw	r3, #50505	; 0xc549
   101a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101a4:	781b      	ldrb	r3, [r3, #0]
   101a6:	2bff      	cmp	r3, #255	; 0xff
   101a8:	d105      	bne.n	101b6 <send_radIR+0x252>
   101aa:	f24c 5349 	movw	r3, #50505	; 0xc549
   101ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101b2:	2200      	movs	r2, #0
   101b4:	701a      	strb	r2, [r3, #0]
   101b6:	f24c 5349 	movw	r3, #50505	; 0xc549
   101ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101be:	781b      	ldrb	r3, [r3, #0]
   101c0:	461a      	mov	r2, r3
   101c2:	f64c 3340 	movw	r3, #52032	; 0xcb40
   101c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ca:	7899      	ldrb	r1, [r3, #2]
   101cc:	f24c 534c 	movw	r3, #50508	; 0xc54c
   101d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101d4:	5499      	strb	r1, [r3, r2]
   101d6:	4baf      	ldr	r3, [pc, #700]	; (10494 <send_radIR+0x530>)
   101d8:	781a      	ldrb	r2, [r3, #0]
   101da:	f24c 634d 	movw	r3, #50765	; 0xc64d
   101de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101e2:	781b      	ldrb	r3, [r3, #0]
   101e4:	4413      	add	r3, r2
   101e6:	b2da      	uxtb	r2, r3
   101e8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   101ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101f0:	701a      	strb	r2, [r3, #0]
   101f2:	f24c 634e 	movw	r3, #50766	; 0xc64e
   101f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101fa:	781a      	ldrb	r2, [r3, #0]
   101fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10200:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10204:	781b      	ldrb	r3, [r3, #0]
   10206:	4413      	add	r3, r2
   10208:	b2da      	uxtb	r2, r3
   1020a:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1020e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10212:	701a      	strb	r2, [r3, #0]
   10214:	f24c 5349 	movw	r3, #50505	; 0xc549
   10218:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1021c:	781b      	ldrb	r3, [r3, #0]
   1021e:	3301      	adds	r3, #1
   10220:	b2da      	uxtb	r2, r3
   10222:	f24c 5349 	movw	r3, #50505	; 0xc549
   10226:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1022a:	701a      	strb	r2, [r3, #0]
   1022c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10230:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10234:	781b      	ldrb	r3, [r3, #0]
   10236:	2bff      	cmp	r3, #255	; 0xff
   10238:	d105      	bne.n	10246 <send_radIR+0x2e2>
   1023a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1023e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10242:	2200      	movs	r2, #0
   10244:	701a      	strb	r2, [r3, #0]
   10246:	f24c 5349 	movw	r3, #50505	; 0xc549
   1024a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1024e:	781b      	ldrb	r3, [r3, #0]
   10250:	461a      	mov	r2, r3
   10252:	f64c 3340 	movw	r3, #52032	; 0xcb40
   10256:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1025a:	78d9      	ldrb	r1, [r3, #3]
   1025c:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10260:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10264:	5499      	strb	r1, [r3, r2]
   10266:	4b8c      	ldr	r3, [pc, #560]	; (10498 <send_radIR+0x534>)
   10268:	781a      	ldrb	r2, [r3, #0]
   1026a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1026e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10272:	781b      	ldrb	r3, [r3, #0]
   10274:	4413      	add	r3, r2
   10276:	b2da      	uxtb	r2, r3
   10278:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1027c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10280:	701a      	strb	r2, [r3, #0]
   10282:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10286:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1028a:	781a      	ldrb	r2, [r3, #0]
   1028c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10290:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10294:	781b      	ldrb	r3, [r3, #0]
   10296:	4413      	add	r3, r2
   10298:	b2da      	uxtb	r2, r3
   1029a:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1029e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102a2:	701a      	strb	r2, [r3, #0]
   102a4:	f24c 5349 	movw	r3, #50505	; 0xc549
   102a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ac:	781b      	ldrb	r3, [r3, #0]
   102ae:	3301      	adds	r3, #1
   102b0:	b2da      	uxtb	r2, r3
   102b2:	f24c 5349 	movw	r3, #50505	; 0xc549
   102b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ba:	701a      	strb	r2, [r3, #0]
   102bc:	f24c 5349 	movw	r3, #50505	; 0xc549
   102c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102c4:	781b      	ldrb	r3, [r3, #0]
   102c6:	2bff      	cmp	r3, #255	; 0xff
   102c8:	d105      	bne.n	102d6 <send_radIR+0x372>
   102ca:	f24c 5349 	movw	r3, #50505	; 0xc549
   102ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102d2:	2200      	movs	r2, #0
   102d4:	701a      	strb	r2, [r3, #0]
   102d6:	f24c 5349 	movw	r3, #50505	; 0xc549
   102da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102de:	781b      	ldrb	r3, [r3, #0]
   102e0:	461a      	mov	r2, r3
   102e2:	f64c 3344 	movw	r3, #52036	; 0xcb44
   102e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ea:	7819      	ldrb	r1, [r3, #0]
   102ec:	f24c 534c 	movw	r3, #50508	; 0xc54c
   102f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102f4:	5499      	strb	r1, [r3, r2]
   102f6:	f64c 3344 	movw	r3, #52036	; 0xcb44
   102fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102fe:	781a      	ldrb	r2, [r3, #0]
   10300:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10304:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10308:	781b      	ldrb	r3, [r3, #0]
   1030a:	4413      	add	r3, r2
   1030c:	b2da      	uxtb	r2, r3
   1030e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10312:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10316:	701a      	strb	r2, [r3, #0]
   10318:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1031c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10320:	781a      	ldrb	r2, [r3, #0]
   10322:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10326:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1032a:	781b      	ldrb	r3, [r3, #0]
   1032c:	4413      	add	r3, r2
   1032e:	b2da      	uxtb	r2, r3
   10330:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10334:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10338:	701a      	strb	r2, [r3, #0]
   1033a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1033e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10342:	781b      	ldrb	r3, [r3, #0]
   10344:	3301      	adds	r3, #1
   10346:	b2da      	uxtb	r2, r3
   10348:	f24c 5349 	movw	r3, #50505	; 0xc549
   1034c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10350:	701a      	strb	r2, [r3, #0]
   10352:	f24c 5349 	movw	r3, #50505	; 0xc549
   10356:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1035a:	781b      	ldrb	r3, [r3, #0]
   1035c:	2bff      	cmp	r3, #255	; 0xff
   1035e:	d105      	bne.n	1036c <send_radIR+0x408>
   10360:	f24c 5349 	movw	r3, #50505	; 0xc549
   10364:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10368:	2200      	movs	r2, #0
   1036a:	701a      	strb	r2, [r3, #0]
   1036c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10370:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10374:	781b      	ldrb	r3, [r3, #0]
   10376:	461a      	mov	r2, r3
   10378:	f64c 3344 	movw	r3, #52036	; 0xcb44
   1037c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10380:	7859      	ldrb	r1, [r3, #1]
   10382:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10386:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1038a:	5499      	strb	r1, [r3, r2]
   1038c:	4b43      	ldr	r3, [pc, #268]	; (1049c <send_radIR+0x538>)
   1038e:	781a      	ldrb	r2, [r3, #0]
   10390:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10394:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10398:	781b      	ldrb	r3, [r3, #0]
   1039a:	4413      	add	r3, r2
   1039c:	b2da      	uxtb	r2, r3
   1039e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   103a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103a6:	701a      	strb	r2, [r3, #0]
   103a8:	f24c 634e 	movw	r3, #50766	; 0xc64e
   103ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103b0:	781a      	ldrb	r2, [r3, #0]
   103b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
   103b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103ba:	781b      	ldrb	r3, [r3, #0]
   103bc:	4413      	add	r3, r2
   103be:	b2da      	uxtb	r2, r3
   103c0:	f24c 634e 	movw	r3, #50766	; 0xc64e
   103c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103c8:	701a      	strb	r2, [r3, #0]
   103ca:	f24c 5349 	movw	r3, #50505	; 0xc549
   103ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103d2:	781b      	ldrb	r3, [r3, #0]
   103d4:	3301      	adds	r3, #1
   103d6:	b2da      	uxtb	r2, r3
   103d8:	f24c 5349 	movw	r3, #50505	; 0xc549
   103dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103e0:	701a      	strb	r2, [r3, #0]
   103e2:	f24c 5349 	movw	r3, #50505	; 0xc549
   103e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103ea:	781b      	ldrb	r3, [r3, #0]
   103ec:	2bff      	cmp	r3, #255	; 0xff
   103ee:	d105      	bne.n	103fc <send_radIR+0x498>
   103f0:	f24c 5349 	movw	r3, #50505	; 0xc549
   103f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103f8:	2200      	movs	r2, #0
   103fa:	701a      	strb	r2, [r3, #0]
   103fc:	f24c 5349 	movw	r3, #50505	; 0xc549
   10400:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10404:	781b      	ldrb	r3, [r3, #0]
   10406:	461a      	mov	r2, r3
   10408:	f64c 3344 	movw	r3, #52036	; 0xcb44
   1040c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10410:	7899      	ldrb	r1, [r3, #2]
   10412:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10416:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1041a:	5499      	strb	r1, [r3, r2]
   1041c:	4b20      	ldr	r3, [pc, #128]	; (104a0 <send_radIR+0x53c>)
   1041e:	781a      	ldrb	r2, [r3, #0]
   10420:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10424:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10428:	781b      	ldrb	r3, [r3, #0]
   1042a:	4413      	add	r3, r2
   1042c:	b2da      	uxtb	r2, r3
   1042e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10432:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10436:	701a      	strb	r2, [r3, #0]
   10438:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1043c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10440:	781a      	ldrb	r2, [r3, #0]
   10442:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10446:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1044a:	781b      	ldrb	r3, [r3, #0]
   1044c:	4413      	add	r3, r2
   1044e:	b2da      	uxtb	r2, r3
   10450:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10454:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10458:	701a      	strb	r2, [r3, #0]
   1045a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1045e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10462:	781b      	ldrb	r3, [r3, #0]
   10464:	3301      	adds	r3, #1
   10466:	b2da      	uxtb	r2, r3
   10468:	f24c 5349 	movw	r3, #50505	; 0xc549
   1046c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10470:	701a      	strb	r2, [r3, #0]
   10472:	f24c 5349 	movw	r3, #50505	; 0xc549
   10476:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1047a:	781b      	ldrb	r3, [r3, #0]
   1047c:	2bff      	cmp	r3, #255	; 0xff
   1047e:	d111      	bne.n	104a4 <send_radIR+0x540>
   10480:	f24c 5349 	movw	r3, #50505	; 0xc549
   10484:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10488:	2200      	movs	r2, #0
   1048a:	701a      	strb	r2, [r3, #0]
   1048c:	e00a      	b.n	104a4 <send_radIR+0x540>
   1048e:	bf00      	nop
   10490:	2004cb41 	.word	0x2004cb41
   10494:	2004cb42 	.word	0x2004cb42
   10498:	2004cb43 	.word	0x2004cb43
   1049c:	2004cb45 	.word	0x2004cb45
   104a0:	2004cb46 	.word	0x2004cb46
   104a4:	f24c 5349 	movw	r3, #50505	; 0xc549
   104a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104ac:	781b      	ldrb	r3, [r3, #0]
   104ae:	461a      	mov	r2, r3
   104b0:	f64c 3344 	movw	r3, #52036	; 0xcb44
   104b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104b8:	78d9      	ldrb	r1, [r3, #3]
   104ba:	f24c 534c 	movw	r3, #50508	; 0xc54c
   104be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104c2:	5499      	strb	r1, [r3, r2]
   104c4:	4bd3      	ldr	r3, [pc, #844]	; (10814 <send_radIR+0x8b0>)
   104c6:	781a      	ldrb	r2, [r3, #0]
   104c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   104cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104d0:	781b      	ldrb	r3, [r3, #0]
   104d2:	4413      	add	r3, r2
   104d4:	b2da      	uxtb	r2, r3
   104d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   104da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104de:	701a      	strb	r2, [r3, #0]
   104e0:	f24c 634e 	movw	r3, #50766	; 0xc64e
   104e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104e8:	781a      	ldrb	r2, [r3, #0]
   104ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
   104ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104f2:	781b      	ldrb	r3, [r3, #0]
   104f4:	4413      	add	r3, r2
   104f6:	b2da      	uxtb	r2, r3
   104f8:	f24c 634e 	movw	r3, #50766	; 0xc64e
   104fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10500:	701a      	strb	r2, [r3, #0]
   10502:	f24c 5349 	movw	r3, #50505	; 0xc549
   10506:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1050a:	781b      	ldrb	r3, [r3, #0]
   1050c:	3301      	adds	r3, #1
   1050e:	b2da      	uxtb	r2, r3
   10510:	f24c 5349 	movw	r3, #50505	; 0xc549
   10514:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10518:	701a      	strb	r2, [r3, #0]
   1051a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1051e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10522:	781b      	ldrb	r3, [r3, #0]
   10524:	2bff      	cmp	r3, #255	; 0xff
   10526:	d105      	bne.n	10534 <send_radIR+0x5d0>
   10528:	f24c 5349 	movw	r3, #50505	; 0xc549
   1052c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10530:	2200      	movs	r2, #0
   10532:	701a      	strb	r2, [r3, #0]
   10534:	f24c 5349 	movw	r3, #50505	; 0xc549
   10538:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1053c:	781b      	ldrb	r3, [r3, #0]
   1053e:	461a      	mov	r2, r3
   10540:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   10544:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10548:	7819      	ldrb	r1, [r3, #0]
   1054a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1054e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10552:	5499      	strb	r1, [r3, r2]
   10554:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   10558:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1055c:	781a      	ldrb	r2, [r3, #0]
   1055e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10562:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10566:	781b      	ldrb	r3, [r3, #0]
   10568:	4413      	add	r3, r2
   1056a:	b2da      	uxtb	r2, r3
   1056c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10570:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10574:	701a      	strb	r2, [r3, #0]
   10576:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1057a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1057e:	781a      	ldrb	r2, [r3, #0]
   10580:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10584:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10588:	781b      	ldrb	r3, [r3, #0]
   1058a:	4413      	add	r3, r2
   1058c:	b2da      	uxtb	r2, r3
   1058e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10592:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10596:	701a      	strb	r2, [r3, #0]
   10598:	f24c 5349 	movw	r3, #50505	; 0xc549
   1059c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105a0:	781b      	ldrb	r3, [r3, #0]
   105a2:	3301      	adds	r3, #1
   105a4:	b2da      	uxtb	r2, r3
   105a6:	f24c 5349 	movw	r3, #50505	; 0xc549
   105aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ae:	701a      	strb	r2, [r3, #0]
   105b0:	f24c 5349 	movw	r3, #50505	; 0xc549
   105b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105b8:	781b      	ldrb	r3, [r3, #0]
   105ba:	2bff      	cmp	r3, #255	; 0xff
   105bc:	d105      	bne.n	105ca <send_radIR+0x666>
   105be:	f24c 5349 	movw	r3, #50505	; 0xc549
   105c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105c6:	2200      	movs	r2, #0
   105c8:	701a      	strb	r2, [r3, #0]
   105ca:	f24c 5349 	movw	r3, #50505	; 0xc549
   105ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105d2:	781b      	ldrb	r3, [r3, #0]
   105d4:	461a      	mov	r2, r3
   105d6:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   105da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105de:	7859      	ldrb	r1, [r3, #1]
   105e0:	f24c 534c 	movw	r3, #50508	; 0xc54c
   105e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105e8:	5499      	strb	r1, [r3, r2]
   105ea:	4b8b      	ldr	r3, [pc, #556]	; (10818 <send_radIR+0x8b4>)
   105ec:	781a      	ldrb	r2, [r3, #0]
   105ee:	f24c 634d 	movw	r3, #50765	; 0xc64d
   105f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105f6:	781b      	ldrb	r3, [r3, #0]
   105f8:	4413      	add	r3, r2
   105fa:	b2da      	uxtb	r2, r3
   105fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10600:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10604:	701a      	strb	r2, [r3, #0]
   10606:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1060a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1060e:	781a      	ldrb	r2, [r3, #0]
   10610:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10614:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10618:	781b      	ldrb	r3, [r3, #0]
   1061a:	4413      	add	r3, r2
   1061c:	b2da      	uxtb	r2, r3
   1061e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10622:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10626:	701a      	strb	r2, [r3, #0]
   10628:	f24c 5349 	movw	r3, #50505	; 0xc549
   1062c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10630:	781b      	ldrb	r3, [r3, #0]
   10632:	3301      	adds	r3, #1
   10634:	b2da      	uxtb	r2, r3
   10636:	f24c 5349 	movw	r3, #50505	; 0xc549
   1063a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1063e:	701a      	strb	r2, [r3, #0]
   10640:	f24c 5349 	movw	r3, #50505	; 0xc549
   10644:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10648:	781b      	ldrb	r3, [r3, #0]
   1064a:	2bff      	cmp	r3, #255	; 0xff
   1064c:	d105      	bne.n	1065a <send_radIR+0x6f6>
   1064e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10652:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10656:	2200      	movs	r2, #0
   10658:	701a      	strb	r2, [r3, #0]
   1065a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1065e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10662:	781b      	ldrb	r3, [r3, #0]
   10664:	461a      	mov	r2, r3
   10666:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   1066a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1066e:	7899      	ldrb	r1, [r3, #2]
   10670:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10674:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10678:	5499      	strb	r1, [r3, r2]
   1067a:	4b68      	ldr	r3, [pc, #416]	; (1081c <send_radIR+0x8b8>)
   1067c:	781a      	ldrb	r2, [r3, #0]
   1067e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10682:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10686:	781b      	ldrb	r3, [r3, #0]
   10688:	4413      	add	r3, r2
   1068a:	b2da      	uxtb	r2, r3
   1068c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10690:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10694:	701a      	strb	r2, [r3, #0]
   10696:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1069a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1069e:	781a      	ldrb	r2, [r3, #0]
   106a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
   106a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106a8:	781b      	ldrb	r3, [r3, #0]
   106aa:	4413      	add	r3, r2
   106ac:	b2da      	uxtb	r2, r3
   106ae:	f24c 634e 	movw	r3, #50766	; 0xc64e
   106b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106b6:	701a      	strb	r2, [r3, #0]
   106b8:	f24c 5349 	movw	r3, #50505	; 0xc549
   106bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106c0:	781b      	ldrb	r3, [r3, #0]
   106c2:	3301      	adds	r3, #1
   106c4:	b2da      	uxtb	r2, r3
   106c6:	f24c 5349 	movw	r3, #50505	; 0xc549
   106ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ce:	701a      	strb	r2, [r3, #0]
   106d0:	f24c 5349 	movw	r3, #50505	; 0xc549
   106d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106d8:	781b      	ldrb	r3, [r3, #0]
   106da:	2bff      	cmp	r3, #255	; 0xff
   106dc:	d105      	bne.n	106ea <send_radIR+0x786>
   106de:	f24c 5349 	movw	r3, #50505	; 0xc549
   106e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106e6:	2200      	movs	r2, #0
   106e8:	701a      	strb	r2, [r3, #0]
   106ea:	f24c 5349 	movw	r3, #50505	; 0xc549
   106ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106f2:	781b      	ldrb	r3, [r3, #0]
   106f4:	461a      	mov	r2, r3
   106f6:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   106fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106fe:	78d9      	ldrb	r1, [r3, #3]
   10700:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10704:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10708:	5499      	strb	r1, [r3, r2]
   1070a:	4b45      	ldr	r3, [pc, #276]	; (10820 <send_radIR+0x8bc>)
   1070c:	781a      	ldrb	r2, [r3, #0]
   1070e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10712:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10716:	781b      	ldrb	r3, [r3, #0]
   10718:	4413      	add	r3, r2
   1071a:	b2da      	uxtb	r2, r3
   1071c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10720:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10724:	701a      	strb	r2, [r3, #0]
   10726:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1072a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1072e:	781a      	ldrb	r2, [r3, #0]
   10730:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10734:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10738:	781b      	ldrb	r3, [r3, #0]
   1073a:	4413      	add	r3, r2
   1073c:	b2da      	uxtb	r2, r3
   1073e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10742:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10746:	701a      	strb	r2, [r3, #0]
   10748:	f24c 5349 	movw	r3, #50505	; 0xc549
   1074c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10750:	781b      	ldrb	r3, [r3, #0]
   10752:	3301      	adds	r3, #1
   10754:	b2da      	uxtb	r2, r3
   10756:	f24c 5349 	movw	r3, #50505	; 0xc549
   1075a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1075e:	701a      	strb	r2, [r3, #0]
   10760:	f24c 5349 	movw	r3, #50505	; 0xc549
   10764:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10768:	781b      	ldrb	r3, [r3, #0]
   1076a:	2bff      	cmp	r3, #255	; 0xff
   1076c:	d105      	bne.n	1077a <send_radIR+0x816>
   1076e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10772:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10776:	2200      	movs	r2, #0
   10778:	701a      	strb	r2, [r3, #0]
   1077a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1077e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10782:	781b      	ldrb	r3, [r3, #0]
   10784:	461a      	mov	r2, r3
   10786:	f240 5342 	movw	r3, #1346	; 0x542
   1078a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1078e:	7819      	ldrb	r1, [r3, #0]
   10790:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10794:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10798:	5499      	strb	r1, [r3, r2]
   1079a:	f240 5342 	movw	r3, #1346	; 0x542
   1079e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107a2:	781a      	ldrb	r2, [r3, #0]
   107a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
   107a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107ac:	781b      	ldrb	r3, [r3, #0]
   107ae:	4413      	add	r3, r2
   107b0:	b2da      	uxtb	r2, r3
   107b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
   107b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107ba:	701a      	strb	r2, [r3, #0]
   107bc:	f24c 634e 	movw	r3, #50766	; 0xc64e
   107c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107c4:	781a      	ldrb	r2, [r3, #0]
   107c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   107ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107ce:	781b      	ldrb	r3, [r3, #0]
   107d0:	4413      	add	r3, r2
   107d2:	b2da      	uxtb	r2, r3
   107d4:	f24c 634e 	movw	r3, #50766	; 0xc64e
   107d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107dc:	701a      	strb	r2, [r3, #0]
   107de:	f24c 5349 	movw	r3, #50505	; 0xc549
   107e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107e6:	781b      	ldrb	r3, [r3, #0]
   107e8:	3301      	adds	r3, #1
   107ea:	b2da      	uxtb	r2, r3
   107ec:	f24c 5349 	movw	r3, #50505	; 0xc549
   107f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107f4:	701a      	strb	r2, [r3, #0]
   107f6:	f24c 5349 	movw	r3, #50505	; 0xc549
   107fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107fe:	781b      	ldrb	r3, [r3, #0]
   10800:	2bff      	cmp	r3, #255	; 0xff
   10802:	d10f      	bne.n	10824 <send_radIR+0x8c0>
   10804:	f24c 5349 	movw	r3, #50505	; 0xc549
   10808:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1080c:	2200      	movs	r2, #0
   1080e:	701a      	strb	r2, [r3, #0]
   10810:	e008      	b.n	10824 <send_radIR+0x8c0>
   10812:	bf00      	nop
   10814:	2004cb47 	.word	0x2004cb47
   10818:	2004cb3d 	.word	0x2004cb3d
   1081c:	2004cb3e 	.word	0x2004cb3e
   10820:	2004cb3f 	.word	0x2004cb3f
   10824:	f24c 5349 	movw	r3, #50505	; 0xc549
   10828:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1082c:	781b      	ldrb	r3, [r3, #0]
   1082e:	461a      	mov	r2, r3
   10830:	f240 5342 	movw	r3, #1346	; 0x542
   10834:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10838:	7859      	ldrb	r1, [r3, #1]
   1083a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1083e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10842:	5499      	strb	r1, [r3, r2]
   10844:	4bc2      	ldr	r3, [pc, #776]	; (10b50 <send_radIR+0xbec>)
   10846:	781a      	ldrb	r2, [r3, #0]
   10848:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1084c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10850:	781b      	ldrb	r3, [r3, #0]
   10852:	4413      	add	r3, r2
   10854:	b2da      	uxtb	r2, r3
   10856:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1085a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1085e:	701a      	strb	r2, [r3, #0]
   10860:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10864:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10868:	781a      	ldrb	r2, [r3, #0]
   1086a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1086e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10872:	781b      	ldrb	r3, [r3, #0]
   10874:	4413      	add	r3, r2
   10876:	b2da      	uxtb	r2, r3
   10878:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1087c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10880:	701a      	strb	r2, [r3, #0]
   10882:	f24c 5349 	movw	r3, #50505	; 0xc549
   10886:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1088a:	781b      	ldrb	r3, [r3, #0]
   1088c:	3301      	adds	r3, #1
   1088e:	b2da      	uxtb	r2, r3
   10890:	f24c 5349 	movw	r3, #50505	; 0xc549
   10894:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10898:	701a      	strb	r2, [r3, #0]
   1089a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1089e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108a2:	781b      	ldrb	r3, [r3, #0]
   108a4:	2bff      	cmp	r3, #255	; 0xff
   108a6:	d105      	bne.n	108b4 <send_radIR+0x950>
   108a8:	f24c 5349 	movw	r3, #50505	; 0xc549
   108ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108b0:	2200      	movs	r2, #0
   108b2:	701a      	strb	r2, [r3, #0]
   108b4:	f24c 5349 	movw	r3, #50505	; 0xc549
   108b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108bc:	781b      	ldrb	r3, [r3, #0]
   108be:	461a      	mov	r2, r3
   108c0:	f240 5344 	movw	r3, #1348	; 0x544
   108c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108c8:	7819      	ldrb	r1, [r3, #0]
   108ca:	f24c 534c 	movw	r3, #50508	; 0xc54c
   108ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108d2:	5499      	strb	r1, [r3, r2]
   108d4:	f240 5344 	movw	r3, #1348	; 0x544
   108d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108dc:	781a      	ldrb	r2, [r3, #0]
   108de:	f24c 634d 	movw	r3, #50765	; 0xc64d
   108e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108e6:	781b      	ldrb	r3, [r3, #0]
   108e8:	4413      	add	r3, r2
   108ea:	b2da      	uxtb	r2, r3
   108ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
   108f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108f4:	701a      	strb	r2, [r3, #0]
   108f6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   108fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108fe:	781a      	ldrb	r2, [r3, #0]
   10900:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10904:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10908:	781b      	ldrb	r3, [r3, #0]
   1090a:	4413      	add	r3, r2
   1090c:	b2da      	uxtb	r2, r3
   1090e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10912:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10916:	701a      	strb	r2, [r3, #0]
   10918:	f24c 5349 	movw	r3, #50505	; 0xc549
   1091c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10920:	781b      	ldrb	r3, [r3, #0]
   10922:	3301      	adds	r3, #1
   10924:	b2da      	uxtb	r2, r3
   10926:	f24c 5349 	movw	r3, #50505	; 0xc549
   1092a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1092e:	701a      	strb	r2, [r3, #0]
   10930:	f24c 5349 	movw	r3, #50505	; 0xc549
   10934:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10938:	781b      	ldrb	r3, [r3, #0]
   1093a:	2bff      	cmp	r3, #255	; 0xff
   1093c:	d105      	bne.n	1094a <send_radIR+0x9e6>
   1093e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10942:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10946:	2200      	movs	r2, #0
   10948:	701a      	strb	r2, [r3, #0]
   1094a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1094e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10952:	781b      	ldrb	r3, [r3, #0]
   10954:	461a      	mov	r2, r3
   10956:	f240 5344 	movw	r3, #1348	; 0x544
   1095a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1095e:	7859      	ldrb	r1, [r3, #1]
   10960:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10964:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10968:	5499      	strb	r1, [r3, r2]
   1096a:	4b7a      	ldr	r3, [pc, #488]	; (10b54 <send_radIR+0xbf0>)
   1096c:	781a      	ldrb	r2, [r3, #0]
   1096e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10972:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10976:	781b      	ldrb	r3, [r3, #0]
   10978:	4413      	add	r3, r2
   1097a:	b2da      	uxtb	r2, r3
   1097c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10980:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10984:	701a      	strb	r2, [r3, #0]
   10986:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1098a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1098e:	781a      	ldrb	r2, [r3, #0]
   10990:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10994:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10998:	781b      	ldrb	r3, [r3, #0]
   1099a:	4413      	add	r3, r2
   1099c:	b2da      	uxtb	r2, r3
   1099e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   109a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109a6:	701a      	strb	r2, [r3, #0]
   109a8:	f24c 5349 	movw	r3, #50505	; 0xc549
   109ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109b0:	781b      	ldrb	r3, [r3, #0]
   109b2:	3301      	adds	r3, #1
   109b4:	b2da      	uxtb	r2, r3
   109b6:	f24c 5349 	movw	r3, #50505	; 0xc549
   109ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109be:	701a      	strb	r2, [r3, #0]
   109c0:	f24c 5349 	movw	r3, #50505	; 0xc549
   109c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109c8:	781b      	ldrb	r3, [r3, #0]
   109ca:	2bff      	cmp	r3, #255	; 0xff
   109cc:	d105      	bne.n	109da <send_radIR+0xa76>
   109ce:	f24c 5349 	movw	r3, #50505	; 0xc549
   109d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109d6:	2200      	movs	r2, #0
   109d8:	701a      	strb	r2, [r3, #0]
   109da:	f24c 5349 	movw	r3, #50505	; 0xc549
   109de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109e2:	781b      	ldrb	r3, [r3, #0]
   109e4:	461a      	mov	r2, r3
   109e6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   109ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109ee:	7819      	ldrb	r1, [r3, #0]
   109f0:	f24c 534c 	movw	r3, #50508	; 0xc54c
   109f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109f8:	5499      	strb	r1, [r3, r2]
   109fa:	f24c 5349 	movw	r3, #50505	; 0xc549
   109fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a02:	781b      	ldrb	r3, [r3, #0]
   10a04:	3301      	adds	r3, #1
   10a06:	b2da      	uxtb	r2, r3
   10a08:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a10:	701a      	strb	r2, [r3, #0]
   10a12:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a1a:	781b      	ldrb	r3, [r3, #0]
   10a1c:	2bff      	cmp	r3, #255	; 0xff
   10a1e:	d105      	bne.n	10a2c <send_radIR+0xac8>
   10a20:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a28:	2200      	movs	r2, #0
   10a2a:	701a      	strb	r2, [r3, #0]
   10a2c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a34:	781b      	ldrb	r3, [r3, #0]
   10a36:	461a      	mov	r2, r3
   10a38:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10a3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a40:	7819      	ldrb	r1, [r3, #0]
   10a42:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10a46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a4a:	5499      	strb	r1, [r3, r2]
   10a4c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a54:	781b      	ldrb	r3, [r3, #0]
   10a56:	3301      	adds	r3, #1
   10a58:	b2da      	uxtb	r2, r3
   10a5a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a62:	701a      	strb	r2, [r3, #0]
   10a64:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a6c:	781b      	ldrb	r3, [r3, #0]
   10a6e:	2bff      	cmp	r3, #255	; 0xff
   10a70:	d105      	bne.n	10a7e <send_radIR+0xb1a>
   10a72:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a7a:	2200      	movs	r2, #0
   10a7c:	701a      	strb	r2, [r3, #0]
   10a7e:	f242 0339 	movw	r3, #8249	; 0x2039
   10a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a86:	781b      	ldrb	r3, [r3, #0]
   10a88:	b2db      	uxtb	r3, r3
   10a8a:	f003 0310 	and.w	r3, r3, #16
   10a8e:	2b00      	cmp	r3, #0
   10a90:	d15a      	bne.n	10b48 <send_radIR+0xbe4>
   10a92:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a9a:	781b      	ldrb	r3, [r3, #0]
   10a9c:	b2db      	uxtb	r3, r3
   10a9e:	461a      	mov	r2, r3
   10aa0:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aa8:	5c9a      	ldrb	r2, [r3, r2]
   10aaa:	f24c 634b 	movw	r3, #50763	; 0xc64b
   10aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ab2:	701a      	strb	r2, [r3, #0]
   10ab4:	f24c 634c 	movw	r3, #50764	; 0xc64c
   10ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10abc:	2200      	movs	r2, #0
   10abe:	701a      	strb	r2, [r3, #0]
   10ac0:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ac8:	781b      	ldrb	r3, [r3, #0]
   10aca:	b2db      	uxtb	r3, r3
   10acc:	3301      	adds	r3, #1
   10ace:	b2da      	uxtb	r2, r3
   10ad0:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ad8:	701a      	strb	r2, [r3, #0]
   10ada:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ae2:	781b      	ldrb	r3, [r3, #0]
   10ae4:	b2db      	uxtb	r3, r3
   10ae6:	2bff      	cmp	r3, #255	; 0xff
   10ae8:	d105      	bne.n	10af6 <send_radIR+0xb92>
   10aea:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10af2:	2200      	movs	r2, #0
   10af4:	701a      	strb	r2, [r3, #0]
   10af6:	f242 0338 	movw	r3, #8248	; 0x2038
   10afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10afe:	f242 0238 	movw	r2, #8248	; 0x2038
   10b02:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b06:	7812      	ldrb	r2, [r2, #0]
   10b08:	b2d2      	uxtb	r2, r2
   10b0a:	f042 0201 	orr.w	r2, r2, #1
   10b0e:	b2d2      	uxtb	r2, r2
   10b10:	701a      	strb	r2, [r3, #0]
   10b12:	f242 0339 	movw	r3, #8249	; 0x2039
   10b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b1a:	f242 0239 	movw	r2, #8249	; 0x2039
   10b1e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b22:	7812      	ldrb	r2, [r2, #0]
   10b24:	b2d2      	uxtb	r2, r2
   10b26:	f042 0210 	orr.w	r2, r2, #16
   10b2a:	b2d2      	uxtb	r2, r2
   10b2c:	701a      	strb	r2, [r3, #0]
   10b2e:	e00b      	b.n	10b48 <send_radIR+0xbe4>
   10b30:	f24c 5348 	movw	r3, #50504	; 0xc548
   10b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b38:	781b      	ldrb	r3, [r3, #0]
   10b3a:	3301      	adds	r3, #1
   10b3c:	b2da      	uxtb	r2, r3
   10b3e:	f24c 5348 	movw	r3, #50504	; 0xc548
   10b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b46:	701a      	strb	r2, [r3, #0]
}
   10b48:	46bd      	mov	sp, r7
   10b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
   10b4e:	4770      	bx	lr
   10b50:	20000543 	.word	0x20000543
   10b54:	20000545 	.word	0x20000545

00010b58 <send_takeOff>:

void send_takeOff(void){
   10b58:	b580      	push	{r7, lr}
   10b5a:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   10b5c:	f24c 63de 	movw	r3, #50910	; 0xc6de
   10b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b64:	781b      	ldrb	r3, [r3, #0]
   10b66:	2b00      	cmp	r3, #0
   10b68:	f000 8200 	beq.w	10f6c <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   10b6c:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   10b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b74:	881b      	ldrh	r3, [r3, #0]
   10b76:	2b00      	cmp	r3, #0
   10b78:	f040 81f2 	bne.w	10f60 <send_takeOff+0x408>
   10b7c:	f64c 3334 	movw	r3, #52020	; 0xcb34
   10b80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b84:	681b      	ldr	r3, [r3, #0]
   10b86:	4618      	mov	r0, r3
   10b88:	f04f 0100 	mov.w	r1, #0
   10b8c:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   10b90:	f007 fe44 	bl	1881c <__aeabi_fcmpgt>
   10b94:	4603      	mov	r3, r0
   10b96:	2b00      	cmp	r3, #0
   10b98:	f000 81e2 	beq.w	10f60 <send_takeOff+0x408>
        estimator_flight_time = 1;
   10b9c:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   10ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ba4:	2201      	movs	r2, #1
   10ba6:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   10ba8:	f24c 5340 	movw	r3, #50496	; 0xc540
   10bac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bb0:	2201      	movs	r2, #1
   10bb2:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   10bb4:	f24c 5349 	movw	r3, #50505	; 0xc549
   10bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bbc:	781a      	ldrb	r2, [r3, #0]
   10bbe:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10bc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bc6:	781b      	ldrb	r3, [r3, #0]
   10bc8:	b2db      	uxtb	r3, r3
   10bca:	429a      	cmp	r2, r3
   10bcc:	d313      	bcc.n	10bf6 <send_takeOff+0x9e>
   10bce:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bd6:	781b      	ldrb	r3, [r3, #0]
   10bd8:	b2db      	uxtb	r3, r3
   10bda:	461a      	mov	r2, r3
   10bdc:	f24c 5349 	movw	r3, #50505	; 0xc549
   10be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10be4:	781b      	ldrb	r3, [r3, #0]
   10be6:	1ad3      	subs	r3, r2, r3
   10be8:	33ff      	adds	r3, #255	; 0xff
   10bea:	2b06      	cmp	r3, #6
   10bec:	bfd4      	ite	le
   10bee:	2300      	movle	r3, #0
   10bf0:	2301      	movgt	r3, #1
   10bf2:	b2db      	uxtb	r3, r3
   10bf4:	e011      	b.n	10c1a <send_takeOff+0xc2>
   10bf6:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10bfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bfe:	781b      	ldrb	r3, [r3, #0]
   10c00:	b2db      	uxtb	r3, r3
   10c02:	461a      	mov	r2, r3
   10c04:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c0c:	781b      	ldrb	r3, [r3, #0]
   10c0e:	1ad3      	subs	r3, r2, r3
   10c10:	2b06      	cmp	r3, #6
   10c12:	bfd4      	ite	le
   10c14:	2300      	movle	r3, #0
   10c16:	2301      	movgt	r3, #1
   10c18:	b2db      	uxtb	r3, r3
   10c1a:	2b00      	cmp	r3, #0
   10c1c:	f000 8194 	beq.w	10f48 <send_takeOff+0x3f0>
   10c20:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c28:	781b      	ldrb	r3, [r3, #0]
   10c2a:	461a      	mov	r2, r3
   10c2c:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10c30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c34:	2105      	movs	r1, #5
   10c36:	5499      	strb	r1, [r3, r2]
   10c38:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c40:	781b      	ldrb	r3, [r3, #0]
   10c42:	3301      	adds	r3, #1
   10c44:	b2da      	uxtb	r2, r3
   10c46:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c4e:	701a      	strb	r2, [r3, #0]
   10c50:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c58:	781b      	ldrb	r3, [r3, #0]
   10c5a:	2bff      	cmp	r3, #255	; 0xff
   10c5c:	d105      	bne.n	10c6a <send_takeOff+0x112>
   10c5e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c66:	2200      	movs	r2, #0
   10c68:	701a      	strb	r2, [r3, #0]
   10c6a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c72:	781b      	ldrb	r3, [r3, #0]
   10c74:	461a      	mov	r2, r3
   10c76:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c7e:	2104      	movs	r1, #4
   10c80:	5499      	strb	r1, [r3, r2]
   10c82:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c8a:	781b      	ldrb	r3, [r3, #0]
   10c8c:	3301      	adds	r3, #1
   10c8e:	b2da      	uxtb	r2, r3
   10c90:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c98:	701a      	strb	r2, [r3, #0]
   10c9a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ca2:	781b      	ldrb	r3, [r3, #0]
   10ca4:	2bff      	cmp	r3, #255	; 0xff
   10ca6:	d105      	bne.n	10cb4 <send_takeOff+0x15c>
   10ca8:	f24c 5349 	movw	r3, #50505	; 0xc549
   10cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cb0:	2200      	movs	r2, #0
   10cb2:	701a      	strb	r2, [r3, #0]
   10cb4:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cbc:	2204      	movs	r2, #4
   10cbe:	701a      	strb	r2, [r3, #0]
   10cc0:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cc8:	2204      	movs	r2, #4
   10cca:	701a      	strb	r2, [r3, #0]
   10ccc:	f24c 5349 	movw	r3, #50505	; 0xc549
   10cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cd4:	781b      	ldrb	r3, [r3, #0]
   10cd6:	461a      	mov	r2, r3
   10cd8:	f24c 532a 	movw	r3, #50474	; 0xc52a
   10cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ce0:	7819      	ldrb	r1, [r3, #0]
   10ce2:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10ce6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cea:	5499      	strb	r1, [r3, r2]
   10cec:	f24c 532a 	movw	r3, #50474	; 0xc52a
   10cf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cf4:	781a      	ldrb	r2, [r3, #0]
   10cf6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10cfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cfe:	781b      	ldrb	r3, [r3, #0]
   10d00:	4413      	add	r3, r2
   10d02:	b2da      	uxtb	r2, r3
   10d04:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10d08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d0c:	701a      	strb	r2, [r3, #0]
   10d0e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10d12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d16:	781a      	ldrb	r2, [r3, #0]
   10d18:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10d1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d20:	781b      	ldrb	r3, [r3, #0]
   10d22:	4413      	add	r3, r2
   10d24:	b2da      	uxtb	r2, r3
   10d26:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10d2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d2e:	701a      	strb	r2, [r3, #0]
   10d30:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d38:	781b      	ldrb	r3, [r3, #0]
   10d3a:	3301      	adds	r3, #1
   10d3c:	b2da      	uxtb	r2, r3
   10d3e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d46:	701a      	strb	r2, [r3, #0]
   10d48:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d50:	781b      	ldrb	r3, [r3, #0]
   10d52:	2bff      	cmp	r3, #255	; 0xff
   10d54:	d105      	bne.n	10d62 <send_takeOff+0x20a>
   10d56:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d5e:	2200      	movs	r2, #0
   10d60:	701a      	strb	r2, [r3, #0]
   10d62:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d6a:	781b      	ldrb	r3, [r3, #0]
   10d6c:	461a      	mov	r2, r3
   10d6e:	f24c 532a 	movw	r3, #50474	; 0xc52a
   10d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d76:	7859      	ldrb	r1, [r3, #1]
   10d78:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10d7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d80:	5499      	strb	r1, [r3, r2]
   10d82:	4b7b      	ldr	r3, [pc, #492]	; (10f70 <send_takeOff+0x418>)
   10d84:	781a      	ldrb	r2, [r3, #0]
   10d86:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d8e:	781b      	ldrb	r3, [r3, #0]
   10d90:	4413      	add	r3, r2
   10d92:	b2da      	uxtb	r2, r3
   10d94:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10d98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d9c:	701a      	strb	r2, [r3, #0]
   10d9e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10da2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10da6:	781a      	ldrb	r2, [r3, #0]
   10da8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10dac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10db0:	781b      	ldrb	r3, [r3, #0]
   10db2:	4413      	add	r3, r2
   10db4:	b2da      	uxtb	r2, r3
   10db6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dbe:	701a      	strb	r2, [r3, #0]
   10dc0:	f24c 5349 	movw	r3, #50505	; 0xc549
   10dc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dc8:	781b      	ldrb	r3, [r3, #0]
   10dca:	3301      	adds	r3, #1
   10dcc:	b2da      	uxtb	r2, r3
   10dce:	f24c 5349 	movw	r3, #50505	; 0xc549
   10dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dd6:	701a      	strb	r2, [r3, #0]
   10dd8:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10de0:	781b      	ldrb	r3, [r3, #0]
   10de2:	2bff      	cmp	r3, #255	; 0xff
   10de4:	d105      	bne.n	10df2 <send_takeOff+0x29a>
   10de6:	f24c 5349 	movw	r3, #50505	; 0xc549
   10dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dee:	2200      	movs	r2, #0
   10df0:	701a      	strb	r2, [r3, #0]
   10df2:	f24c 5349 	movw	r3, #50505	; 0xc549
   10df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dfa:	781b      	ldrb	r3, [r3, #0]
   10dfc:	461a      	mov	r2, r3
   10dfe:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e06:	7819      	ldrb	r1, [r3, #0]
   10e08:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e10:	5499      	strb	r1, [r3, r2]
   10e12:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e1a:	781b      	ldrb	r3, [r3, #0]
   10e1c:	3301      	adds	r3, #1
   10e1e:	b2da      	uxtb	r2, r3
   10e20:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e28:	701a      	strb	r2, [r3, #0]
   10e2a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e32:	781b      	ldrb	r3, [r3, #0]
   10e34:	2bff      	cmp	r3, #255	; 0xff
   10e36:	d105      	bne.n	10e44 <send_takeOff+0x2ec>
   10e38:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e40:	2200      	movs	r2, #0
   10e42:	701a      	strb	r2, [r3, #0]
   10e44:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e4c:	781b      	ldrb	r3, [r3, #0]
   10e4e:	461a      	mov	r2, r3
   10e50:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e58:	7819      	ldrb	r1, [r3, #0]
   10e5a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e62:	5499      	strb	r1, [r3, r2]
   10e64:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e6c:	781b      	ldrb	r3, [r3, #0]
   10e6e:	3301      	adds	r3, #1
   10e70:	b2da      	uxtb	r2, r3
   10e72:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e7a:	701a      	strb	r2, [r3, #0]
   10e7c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e84:	781b      	ldrb	r3, [r3, #0]
   10e86:	2bff      	cmp	r3, #255	; 0xff
   10e88:	d105      	bne.n	10e96 <send_takeOff+0x33e>
   10e8a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e92:	2200      	movs	r2, #0
   10e94:	701a      	strb	r2, [r3, #0]
   10e96:	f242 0339 	movw	r3, #8249	; 0x2039
   10e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e9e:	781b      	ldrb	r3, [r3, #0]
   10ea0:	b2db      	uxtb	r3, r3
   10ea2:	f003 0310 	and.w	r3, r3, #16
   10ea6:	2b00      	cmp	r3, #0
   10ea8:	d15a      	bne.n	10f60 <send_takeOff+0x408>
   10eaa:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10eae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eb2:	781b      	ldrb	r3, [r3, #0]
   10eb4:	b2db      	uxtb	r3, r3
   10eb6:	461a      	mov	r2, r3
   10eb8:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10ebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ec0:	5c9a      	ldrb	r2, [r3, r2]
   10ec2:	f24c 634b 	movw	r3, #50763	; 0xc64b
   10ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eca:	701a      	strb	r2, [r3, #0]
   10ecc:	f24c 634c 	movw	r3, #50764	; 0xc64c
   10ed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ed4:	2200      	movs	r2, #0
   10ed6:	701a      	strb	r2, [r3, #0]
   10ed8:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ee0:	781b      	ldrb	r3, [r3, #0]
   10ee2:	b2db      	uxtb	r3, r3
   10ee4:	3301      	adds	r3, #1
   10ee6:	b2da      	uxtb	r2, r3
   10ee8:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10eec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ef0:	701a      	strb	r2, [r3, #0]
   10ef2:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10ef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10efa:	781b      	ldrb	r3, [r3, #0]
   10efc:	b2db      	uxtb	r3, r3
   10efe:	2bff      	cmp	r3, #255	; 0xff
   10f00:	d105      	bne.n	10f0e <send_takeOff+0x3b6>
   10f02:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10f06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f0a:	2200      	movs	r2, #0
   10f0c:	701a      	strb	r2, [r3, #0]
   10f0e:	f242 0338 	movw	r3, #8248	; 0x2038
   10f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f16:	f242 0238 	movw	r2, #8248	; 0x2038
   10f1a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f1e:	7812      	ldrb	r2, [r2, #0]
   10f20:	b2d2      	uxtb	r2, r2
   10f22:	f042 0201 	orr.w	r2, r2, #1
   10f26:	b2d2      	uxtb	r2, r2
   10f28:	701a      	strb	r2, [r3, #0]
   10f2a:	f242 0339 	movw	r3, #8249	; 0x2039
   10f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f32:	f242 0239 	movw	r2, #8249	; 0x2039
   10f36:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f3a:	7812      	ldrb	r2, [r2, #0]
   10f3c:	b2d2      	uxtb	r2, r2
   10f3e:	f042 0210 	orr.w	r2, r2, #16
   10f42:	b2d2      	uxtb	r2, r2
   10f44:	701a      	strb	r2, [r3, #0]
   10f46:	e00b      	b.n	10f60 <send_takeOff+0x408>
   10f48:	f24c 5348 	movw	r3, #50504	; 0xc548
   10f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f50:	781b      	ldrb	r3, [r3, #0]
   10f52:	3301      	adds	r3, #1
   10f54:	b2da      	uxtb	r2, r3
   10f56:	f24c 5348 	movw	r3, #50504	; 0xc548
   10f5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f5e:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   10f60:	f24c 63de 	movw	r3, #50910	; 0xc6de
   10f64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f68:	2200      	movs	r2, #0
   10f6a:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   10f6c:	bd80      	pop	{r7, pc}
   10f6e:	bf00      	nop
   10f70:	2004c52b 	.word	0x2004c52b
   10f74:	f3af 8000 	nop.w

00010f78 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   10f78:	b480      	push	{r7}
   10f7a:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   10f7c:	f242 0317 	movw	r3, #8215	; 0x2017
   10f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f84:	f242 0217 	movw	r2, #8215	; 0x2017
   10f88:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f8c:	7812      	ldrb	r2, [r2, #0]
   10f8e:	b2d2      	uxtb	r2, r2
   10f90:	f042 0210 	orr.w	r2, r2, #16
   10f94:	b2d2      	uxtb	r2, r2
   10f96:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   10f98:	f242 0331 	movw	r3, #8241	; 0x2031
   10f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fa0:	2201      	movs	r2, #1
   10fa2:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   10fa4:	f242 0333 	movw	r3, #8243	; 0x2033
   10fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fac:	2219      	movs	r2, #25
   10fae:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   10fb0:	f242 0311 	movw	r3, #8209	; 0x2011
   10fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fb8:	f242 0211 	movw	r2, #8209	; 0x2011
   10fbc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fc0:	7812      	ldrb	r2, [r2, #0]
   10fc2:	b2d2      	uxtb	r2, r2
   10fc4:	f062 023f 	orn	r2, r2, #63	; 0x3f
   10fc8:	b2d2      	uxtb	r2, r2
   10fca:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10fcc:	f242 0312 	movw	r3, #8210	; 0x2012
   10fd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fd4:	f242 0212 	movw	r2, #8210	; 0x2012
   10fd8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fdc:	7812      	ldrb	r2, [r2, #0]
   10fde:	b2d2      	uxtb	r2, r2
   10fe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10fe4:	b2d2      	uxtb	r2, r2
   10fe6:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   10fe8:	f242 0312 	movw	r3, #8210	; 0x2012
   10fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ff0:	f242 0212 	movw	r2, #8210	; 0x2012
   10ff4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ff8:	7812      	ldrb	r2, [r2, #0]
   10ffa:	b2d2      	uxtb	r2, r2
   10ffc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11000:	b2d2      	uxtb	r2, r2
   11002:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   11004:	f242 033a 	movw	r3, #8250	; 0x203a
   11008:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1100c:	f242 023a 	movw	r2, #8250	; 0x203a
   11010:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11014:	7812      	ldrb	r2, [r2, #0]
   11016:	b2d2      	uxtb	r2, r2
   11018:	f042 0202 	orr.w	r2, r2, #2
   1101c:	b2d2      	uxtb	r2, r2
   1101e:	701a      	strb	r2, [r3, #0]
}
   11020:	46bd      	mov	sp, r7
   11022:	f85d 7b04 	ldr.w	r7, [sp], #4
   11026:	4770      	bx	lr

00011028 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   11028:	b480      	push	{r7}
   1102a:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   1102c:	f24c 634c 	movw	r3, #50764	; 0xc64c
   11030:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11034:	781b      	ldrb	r3, [r3, #0]
   11036:	2b00      	cmp	r3, #0
   11038:	d10e      	bne.n	11058 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   1103a:	f242 0312 	movw	r3, #8210	; 0x2012
   1103e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11042:	f242 0212 	movw	r2, #8210	; 0x2012
   11046:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1104a:	7812      	ldrb	r2, [r2, #0]
   1104c:	b2d2      	uxtb	r2, r2
   1104e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11052:	b2d2      	uxtb	r2, r2
   11054:	701a      	strb	r2, [r3, #0]
   11056:	e047      	b.n	110e8 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   11058:	f24c 634c 	movw	r3, #50764	; 0xc64c
   1105c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11060:	781b      	ldrb	r3, [r3, #0]
   11062:	2b08      	cmp	r3, #8
   11064:	d832      	bhi.n	110cc <__vector_5+0xa4>
    if (tx_byte & 0x01)
   11066:	f24c 634b 	movw	r3, #50763	; 0xc64b
   1106a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1106e:	781b      	ldrb	r3, [r3, #0]
   11070:	f003 0301 	and.w	r3, r3, #1
   11074:	2b00      	cmp	r3, #0
   11076:	d00e      	beq.n	11096 <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   11078:	f242 0312 	movw	r3, #8210	; 0x2012
   1107c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11080:	f242 0212 	movw	r2, #8210	; 0x2012
   11084:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11088:	7812      	ldrb	r2, [r2, #0]
   1108a:	b2d2      	uxtb	r2, r2
   1108c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11090:	b2d2      	uxtb	r2, r2
   11092:	701a      	strb	r2, [r3, #0]
   11094:	e00d      	b.n	110b2 <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   11096:	f242 0312 	movw	r3, #8210	; 0x2012
   1109a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1109e:	f242 0212 	movw	r2, #8210	; 0x2012
   110a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110a6:	7812      	ldrb	r2, [r2, #0]
   110a8:	b2d2      	uxtb	r2, r2
   110aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   110ae:	b2d2      	uxtb	r2, r2
   110b0:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   110b2:	f24c 634b 	movw	r3, #50763	; 0xc64b
   110b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110ba:	781b      	ldrb	r3, [r3, #0]
   110bc:	085b      	lsrs	r3, r3, #1
   110be:	b2da      	uxtb	r2, r3
   110c0:	f24c 634b 	movw	r3, #50763	; 0xc64b
   110c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110c8:	701a      	strb	r2, [r3, #0]
   110ca:	e00d      	b.n	110e8 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   110cc:	f242 0312 	movw	r3, #8210	; 0x2012
   110d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110d4:	f242 0212 	movw	r2, #8210	; 0x2012
   110d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110dc:	7812      	ldrb	r2, [r2, #0]
   110de:	b2d2      	uxtb	r2, r2
   110e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   110e4:	b2d2      	uxtb	r2, r2
   110e6:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   110e8:	f24c 634c 	movw	r3, #50764	; 0xc64c
   110ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110f0:	781b      	ldrb	r3, [r3, #0]
   110f2:	3301      	adds	r3, #1
   110f4:	b2da      	uxtb	r2, r3
   110f6:	f24c 634c 	movw	r3, #50764	; 0xc64c
   110fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110fe:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   11100:	f24c 634c 	movw	r3, #50764	; 0xc64c
   11104:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11108:	781b      	ldrb	r3, [r3, #0]
   1110a:	2b09      	cmp	r3, #9
   1110c:	d94d      	bls.n	111aa <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   1110e:	f24c 5349 	movw	r3, #50505	; 0xc549
   11112:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11116:	781a      	ldrb	r2, [r3, #0]
   11118:	f24c 534a 	movw	r3, #50506	; 0xc54a
   1111c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11120:	781b      	ldrb	r3, [r3, #0]
   11122:	b2db      	uxtb	r3, r3
   11124:	429a      	cmp	r2, r3
   11126:	d10e      	bne.n	11146 <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   11128:	f242 0339 	movw	r3, #8249	; 0x2039
   1112c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11130:	f242 0239 	movw	r2, #8249	; 0x2039
   11134:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11138:	7812      	ldrb	r2, [r2, #0]
   1113a:	b2d2      	uxtb	r2, r2
   1113c:	f022 0210 	bic.w	r2, r2, #16
   11140:	b2d2      	uxtb	r2, r2
   11142:	701a      	strb	r2, [r3, #0]
   11144:	e031      	b.n	111aa <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   11146:	f24c 534a 	movw	r3, #50506	; 0xc54a
   1114a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1114e:	781b      	ldrb	r3, [r3, #0]
   11150:	b2db      	uxtb	r3, r3
   11152:	461a      	mov	r2, r3
   11154:	f24c 534c 	movw	r3, #50508	; 0xc54c
   11158:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1115c:	5c9a      	ldrb	r2, [r3, r2]
   1115e:	f24c 634b 	movw	r3, #50763	; 0xc64b
   11162:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11166:	701a      	strb	r2, [r3, #0]
   11168:	f24c 634c 	movw	r3, #50764	; 0xc64c
   1116c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11170:	2200      	movs	r2, #0
   11172:	701a      	strb	r2, [r3, #0]
   11174:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11178:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1117c:	781b      	ldrb	r3, [r3, #0]
   1117e:	b2db      	uxtb	r3, r3
   11180:	3301      	adds	r3, #1
   11182:	b2da      	uxtb	r2, r3
   11184:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11188:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1118c:	701a      	strb	r2, [r3, #0]
   1118e:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11192:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11196:	781b      	ldrb	r3, [r3, #0]
   11198:	b2db      	uxtb	r3, r3
   1119a:	2bff      	cmp	r3, #255	; 0xff
   1119c:	d105      	bne.n	111aa <__vector_5+0x182>
   1119e:	f24c 534a 	movw	r3, #50506	; 0xc54a
   111a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111a6:	2200      	movs	r2, #0
   111a8:	701a      	strb	r2, [r3, #0]
    }
  }
}
   111aa:	46bd      	mov	sp, r7
   111ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   111b0:	4770      	bx	lr
   111b2:	bf00      	nop

000111b4 <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   111b4:	b480      	push	{r7}
   111b6:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   111b8:	f24c 637f 	movw	r3, #50815	; 0xc67f
   111bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111c0:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   111c2:	f240 533e 	movw	r3, #1342	; 0x53e
   111c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111ca:	2200      	movs	r2, #0
   111cc:	701a      	strb	r2, [r3, #0]
}
   111ce:	46bd      	mov	sp, r7
   111d0:	f85d 7b04 	ldr.w	r7, [sp], #4
   111d4:	4770      	bx	lr
   111d6:	bf00      	nop

000111d8 <link_fbw_send>:

void link_fbw_send(void) {
   111d8:	b480      	push	{r7}
   111da:	b083      	sub	sp, #12
   111dc:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   111de:	f24c 6384 	movw	r3, #50820	; 0xc684
   111e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111e6:	781b      	ldrb	r3, [r3, #0]
   111e8:	b2db      	uxtb	r3, r3
   111ea:	2b00      	cmp	r3, #0
   111ec:	d00c      	beq.n	11208 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   111ee:	f24c 6385 	movw	r3, #50821	; 0xc685
   111f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111f6:	781b      	ldrb	r3, [r3, #0]
   111f8:	3301      	adds	r3, #1
   111fa:	b2da      	uxtb	r2, r3
   111fc:	f24c 6385 	movw	r3, #50821	; 0xc685
   11200:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11204:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   11206:	e064      	b.n	112d2 <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   11208:	f242 030d 	movw	r3, #8205	; 0x200d
   1120c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11210:	2251      	movs	r2, #81	; 0x51
   11212:	701a      	strb	r2, [r3, #0]
   11214:	f242 030e 	movw	r3, #8206	; 0x200e
   11218:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1121c:	781b      	ldrb	r3, [r3, #0]
   1121e:	b2db      	uxtb	r3, r3
   11220:	b2db      	uxtb	r3, r3
   11222:	b25b      	sxtb	r3, r3
   11224:	2b00      	cmp	r3, #0
   11226:	da05      	bge.n	11234 <link_fbw_send+0x5c>
   11228:	f242 030f 	movw	r3, #8207	; 0x200f
   1122c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11230:	781b      	ldrb	r3, [r3, #0]
   11232:	71fb      	strb	r3, [r7, #7]
   11234:	f242 030d 	movw	r3, #8205	; 0x200d
   11238:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1123c:	f242 020d 	movw	r2, #8205	; 0x200d
   11240:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11244:	7812      	ldrb	r2, [r2, #0]
   11246:	b2d2      	uxtb	r2, r2
   11248:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1124c:	b2d2      	uxtb	r2, r2
   1124e:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   11250:	f24c 6384 	movw	r3, #50820	; 0xc684
   11254:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11258:	2201      	movs	r2, #1
   1125a:	701a      	strb	r2, [r3, #0]
   1125c:	f242 0318 	movw	r3, #8216	; 0x2018
   11260:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11264:	f242 0218 	movw	r2, #8216	; 0x2018
   11268:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1126c:	7812      	ldrb	r2, [r2, #0]
   1126e:	b2d2      	uxtb	r2, r2
   11270:	f022 0201 	bic.w	r2, r2, #1
   11274:	b2d2      	uxtb	r2, r2
   11276:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   11278:	f24c 6381 	movw	r3, #50817	; 0xc681
   1127c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11280:	2200      	movs	r2, #0
   11282:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   11284:	f24c 6382 	movw	r3, #50818	; 0xc682
   11288:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1128c:	2200      	movs	r2, #0
   1128e:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   11290:	f24c 6381 	movw	r3, #50817	; 0xc681
   11294:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11298:	781b      	ldrb	r3, [r3, #0]
   1129a:	461a      	mov	r2, r3
   1129c:	f24c 6368 	movw	r3, #50792	; 0xc668
   112a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112a4:	4413      	add	r3, r2
   112a6:	781a      	ldrb	r2, [r3, #0]
   112a8:	f24c 6383 	movw	r3, #50819	; 0xc683
   112ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112b0:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   112b2:	f242 030f 	movw	r3, #8207	; 0x200f
   112b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112ba:	f24c 6283 	movw	r2, #50819	; 0xc683
   112be:	f2c2 0204 	movt	r2, #8196	; 0x2004
   112c2:	7812      	ldrb	r2, [r2, #0]
   112c4:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   112c6:	f24c 637e 	movw	r3, #50814	; 0xc67e
   112ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112ce:	2200      	movs	r2, #0
   112d0:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   112d2:	370c      	adds	r7, #12
   112d4:	46bd      	mov	sp, r7
   112d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   112da:	4770      	bx	lr

000112dc <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   112dc:	b480      	push	{r7}
   112de:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   112e0:	f242 032a 	movw	r3, #8234	; 0x202a
   112e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112e8:	f242 022c 	movw	r2, #8236	; 0x202c
   112ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
   112f0:	8812      	ldrh	r2, [r2, #0]
   112f2:	b292      	uxth	r2, r2
   112f4:	32c8      	adds	r2, #200	; 0xc8
   112f6:	b292      	uxth	r2, r2
   112f8:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   112fa:	f242 0336 	movw	r3, #8246	; 0x2036
   112fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11302:	f242 0236 	movw	r2, #8246	; 0x2036
   11306:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1130a:	7812      	ldrb	r2, [r2, #0]
   1130c:	b2d2      	uxtb	r2, r2
   1130e:	f042 0210 	orr.w	r2, r2, #16
   11312:	b2d2      	uxtb	r2, r2
   11314:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   11316:	f242 0337 	movw	r3, #8247	; 0x2037
   1131a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1131e:	f242 0237 	movw	r2, #8247	; 0x2037
   11322:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11326:	7812      	ldrb	r2, [r2, #0]
   11328:	b2d2      	uxtb	r2, r2
   1132a:	f042 0210 	orr.w	r2, r2, #16
   1132e:	b2d2      	uxtb	r2, r2
   11330:	701a      	strb	r2, [r3, #0]
}
   11332:	46bd      	mov	sp, r7
   11334:	f85d 7b04 	ldr.w	r7, [sp], #4
   11338:	4770      	bx	lr
   1133a:	bf00      	nop

0001133c <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   1133c:	b480      	push	{r7}
   1133e:	b083      	sub	sp, #12
   11340:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   11342:	f242 0337 	movw	r3, #8247	; 0x2037
   11346:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1134a:	f242 0237 	movw	r2, #8247	; 0x2037
   1134e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11352:	7812      	ldrb	r2, [r2, #0]
   11354:	b2d2      	uxtb	r2, r2
   11356:	f022 0210 	bic.w	r2, r2, #16
   1135a:	b2d2      	uxtb	r2, r2
   1135c:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   1135e:	f24c 6381 	movw	r3, #50817	; 0xc681
   11362:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11366:	781b      	ldrb	r3, [r3, #0]
   11368:	3301      	adds	r3, #1
   1136a:	b2da      	uxtb	r2, r3
   1136c:	f24c 6381 	movw	r3, #50817	; 0xc681
   11370:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11374:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   11376:	f24c 6381 	movw	r3, #50817	; 0xc681
   1137a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1137e:	781b      	ldrb	r3, [r3, #0]
   11380:	2b17      	cmp	r3, #23
   11382:	d162      	bne.n	1144a <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   11384:	f242 030f 	movw	r3, #8207	; 0x200f
   11388:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1138c:	781b      	ldrb	r3, [r3, #0]
   1138e:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   11390:	f24c 6382 	movw	r3, #50818	; 0xc682
   11394:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11398:	781b      	ldrb	r3, [r3, #0]
   1139a:	79fa      	ldrb	r2, [r7, #7]
   1139c:	429a      	cmp	r2, r3
   1139e:	d110      	bne.n	113c2 <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   113a0:	f24c 637e 	movw	r3, #50814	; 0xc67e
   113a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113a8:	2201      	movs	r2, #1
   113aa:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   113ac:	f24c 6350 	movw	r3, #50768	; 0xc650
   113b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113b4:	7d1a      	ldrb	r2, [r3, #20]
   113b6:	f24c 6380 	movw	r3, #50816	; 0xc680
   113ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113be:	701a      	strb	r2, [r3, #0]
   113c0:	e00c      	b.n	113dc <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   113c2:	f24c 637f 	movw	r3, #50815	; 0xc67f
   113c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113ca:	781b      	ldrb	r3, [r3, #0]
   113cc:	b2db      	uxtb	r3, r3
   113ce:	3301      	adds	r3, #1
   113d0:	b2da      	uxtb	r2, r3
   113d2:	f24c 637f 	movw	r3, #50815	; 0xc67f
   113d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113da:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   113dc:	f240 533e 	movw	r3, #1342	; 0x53e
   113e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113e4:	2201      	movs	r2, #1
   113e6:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   113e8:	f24c 6384 	movw	r3, #50820	; 0xc684
   113ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113f0:	2200      	movs	r2, #0
   113f2:	701a      	strb	r2, [r3, #0]
   113f4:	f242 0318 	movw	r3, #8216	; 0x2018
   113f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113fc:	f242 0218 	movw	r2, #8216	; 0x2018
   11400:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11404:	7812      	ldrb	r2, [r2, #0]
   11406:	b2d2      	uxtb	r2, r2
   11408:	f042 0201 	orr.w	r2, r2, #1
   1140c:	b2d2      	uxtb	r2, r2
   1140e:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   11410:	f242 030d 	movw	r3, #8205	; 0x200d
   11414:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11418:	f242 020d 	movw	r2, #8205	; 0x200d
   1141c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11420:	7812      	ldrb	r2, [r2, #0]
   11422:	b2d2      	uxtb	r2, r2
   11424:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11428:	b2d2      	uxtb	r2, r2
   1142a:	701a      	strb	r2, [r3, #0]
   1142c:	f242 030d 	movw	r3, #8205	; 0x200d
   11430:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11434:	f242 020d 	movw	r2, #8205	; 0x200d
   11438:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1143c:	7812      	ldrb	r2, [r2, #0]
   1143e:	b2d2      	uxtb	r2, r2
   11440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11444:	b2d2      	uxtb	r2, r2
   11446:	701a      	strb	r2, [r3, #0]
    return;
   11448:	e051      	b.n	114ee <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   1144a:	f24c 6381 	movw	r3, #50817	; 0xc681
   1144e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11452:	781b      	ldrb	r3, [r3, #0]
   11454:	2b15      	cmp	r3, #21
   11456:	d820      	bhi.n	1149a <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   11458:	f24c 6381 	movw	r3, #50817	; 0xc681
   1145c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11460:	781b      	ldrb	r3, [r3, #0]
   11462:	461a      	mov	r2, r3
   11464:	f24c 6368 	movw	r3, #50792	; 0xc668
   11468:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1146c:	4413      	add	r3, r2
   1146e:	781b      	ldrb	r3, [r3, #0]
   11470:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   11472:	f242 030f 	movw	r3, #8207	; 0x200f
   11476:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1147a:	79fa      	ldrb	r2, [r7, #7]
   1147c:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   1147e:	f24c 6383 	movw	r3, #50819	; 0xc683
   11482:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11486:	781a      	ldrb	r2, [r3, #0]
   11488:	79fb      	ldrb	r3, [r7, #7]
   1148a:	4053      	eors	r3, r2
   1148c:	b2da      	uxtb	r2, r3
   1148e:	f24c 6383 	movw	r3, #50819	; 0xc683
   11492:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11496:	701a      	strb	r2, [r3, #0]
   11498:	e009      	b.n	114ae <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   1149a:	f242 030f 	movw	r3, #8207	; 0x200f
   1149e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114a2:	f24c 6283 	movw	r2, #50819	; 0xc683
   114a6:	f2c2 0204 	movt	r2, #8196	; 0x2004
   114aa:	7812      	ldrb	r2, [r2, #0]
   114ac:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   114ae:	f242 030f 	movw	r3, #8207	; 0x200f
   114b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114b6:	781b      	ldrb	r3, [r3, #0]
   114b8:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   114ba:	f24c 6381 	movw	r3, #50817	; 0xc681
   114be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114c2:	781b      	ldrb	r3, [r3, #0]
   114c4:	1e5a      	subs	r2, r3, #1
   114c6:	f24c 6350 	movw	r3, #50768	; 0xc650
   114ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114ce:	4413      	add	r3, r2
   114d0:	79fa      	ldrb	r2, [r7, #7]
   114d2:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   114d4:	f24c 6382 	movw	r3, #50818	; 0xc682
   114d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114dc:	781a      	ldrb	r2, [r3, #0]
   114de:	79fb      	ldrb	r3, [r7, #7]
   114e0:	4053      	eors	r3, r2
   114e2:	b2da      	uxtb	r2, r3
   114e4:	f24c 6382 	movw	r3, #50818	; 0xc682
   114e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114ec:	701a      	strb	r2, [r3, #0]
}
   114ee:	370c      	adds	r7, #12
   114f0:	46bd      	mov	sp, r7
   114f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   114f6:	4770      	bx	lr

000114f8 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   114f8:	b480      	push	{r7}
   114fa:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   114fc:	f242 0317 	movw	r3, #8215	; 0x2017
   11500:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11504:	f242 0217 	movw	r2, #8215	; 0x2017
   11508:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1150c:	7812      	ldrb	r2, [r2, #0]
   1150e:	b2d2      	uxtb	r2, r2
   11510:	f042 0206 	orr.w	r2, r2, #6
   11514:	b2d2      	uxtb	r2, r2
   11516:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   11518:	f242 0317 	movw	r3, #8215	; 0x2017
   1151c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11520:	f242 0217 	movw	r2, #8215	; 0x2017
   11524:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11528:	7812      	ldrb	r2, [r2, #0]
   1152a:	b2d2      	uxtb	r2, r2
   1152c:	f042 0201 	orr.w	r2, r2, #1
   11530:	b2d2      	uxtb	r2, r2
   11532:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   11534:	f24c 6384 	movw	r3, #50820	; 0xc684
   11538:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1153c:	2200      	movs	r2, #0
   1153e:	701a      	strb	r2, [r3, #0]
   11540:	f242 0318 	movw	r3, #8216	; 0x2018
   11544:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11548:	f242 0218 	movw	r2, #8216	; 0x2018
   1154c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11550:	7812      	ldrb	r2, [r2, #0]
   11552:	b2d2      	uxtb	r2, r2
   11554:	f042 0201 	orr.w	r2, r2, #1
   11558:	b2d2      	uxtb	r2, r2
   1155a:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   1155c:	f242 0302 	movw	r3, #8194	; 0x2002
   11560:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11564:	f242 0202 	movw	r2, #8194	; 0x2002
   11568:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1156c:	7812      	ldrb	r2, [r2, #0]
   1156e:	b2d2      	uxtb	r2, r2
   11570:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11574:	b2d2      	uxtb	r2, r2
   11576:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   11578:	f24c 6384 	movw	r3, #50820	; 0xc684
   1157c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11580:	2200      	movs	r2, #0
   11582:	701a      	strb	r2, [r3, #0]
   11584:	f242 0303 	movw	r3, #8195	; 0x2003
   11588:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1158c:	f242 0203 	movw	r2, #8195	; 0x2003
   11590:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11594:	7812      	ldrb	r2, [r2, #0]
   11596:	b2d2      	uxtb	r2, r2
   11598:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1159c:	b2d2      	uxtb	r2, r2
   1159e:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   115a0:	f24c 6384 	movw	r3, #50820	; 0xc684
   115a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115a8:	2200      	movs	r2, #0
   115aa:	701a      	strb	r2, [r3, #0]
}
   115ac:	46bd      	mov	sp, r7
   115ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   115b2:	4770      	bx	lr

000115b4 <__vector_17>:


SIGNAL(SIG_SPI) {
   115b4:	b580      	push	{r7, lr}
   115b6:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   115b8:	f24c 6384 	movw	r3, #50820	; 0xc684
   115bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115c0:	781b      	ldrb	r3, [r3, #0]
   115c2:	b2db      	uxtb	r3, r3
   115c4:	2b01      	cmp	r3, #1
   115c6:	d102      	bne.n	115ce <__vector_17+0x1a>
    link_fbw_on_spi_it();
   115c8:	f7ff fe88 	bl	112dc <link_fbw_on_spi_it>
   115cc:	e00b      	b.n	115e6 <__vector_17+0x32>
  else
    fatal_error_nb++;
   115ce:	f24c 5328 	movw	r3, #50472	; 0xc528
   115d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115d6:	781b      	ldrb	r3, [r3, #0]
   115d8:	3301      	adds	r3, #1
   115da:	b2da      	uxtb	r2, r3
   115dc:	f24c 5328 	movw	r3, #50472	; 0xc528
   115e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115e4:	701a      	strb	r2, [r3, #0]
}
   115e6:	bd80      	pop	{r7, pc}

000115e8 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   115e8:	b480      	push	{r7}
   115ea:	b083      	sub	sp, #12
   115ec:	af00      	add	r7, sp, #0
   115ee:	4603      	mov	r3, r0
   115f0:	6039      	str	r1, [r7, #0]
   115f2:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   115f4:	79fa      	ldrb	r2, [r7, #7]
   115f6:	f24c 6398 	movw	r3, #50840	; 0xc698
   115fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115fe:	6839      	ldr	r1, [r7, #0]
   11600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   11604:	370c      	adds	r7, #12
   11606:	46bd      	mov	sp, r7
   11608:	f85d 7b04 	ldr.w	r7, [sp], #4
   1160c:	4770      	bx	lr
   1160e:	bf00      	nop

00011610 <adc_init>:

void 
adc_init( void )
{
   11610:	b480      	push	{r7}
   11612:	b083      	sub	sp, #12
   11614:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   11616:	f242 0362 	movw	r3, #8290	; 0x2062
   1161a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1161e:	2200      	movs	r2, #0
   11620:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   11622:	f242 0361 	movw	r3, #8289	; 0x2061
   11626:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1162a:	2200      	movs	r2, #0
   1162c:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   1162e:	f242 0307 	movw	r3, #8199	; 0x2007
   11632:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11636:	2240      	movs	r2, #64	; 0x40
   11638:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   1163a:	f242 0308 	movw	r3, #8200	; 0x2008
   1163e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11642:	f242 0208 	movw	r2, #8200	; 0x2008
   11646:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1164a:	7812      	ldrb	r2, [r2, #0]
   1164c:	b2d2      	uxtb	r2, r2
   1164e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11652:	b2d2      	uxtb	r2, r2
   11654:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   11656:	f242 0306 	movw	r3, #8198	; 0x2006
   1165a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1165e:	22cf      	movs	r2, #207	; 0xcf
   11660:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11662:	2300      	movs	r3, #0
   11664:	71fb      	strb	r3, [r7, #7]
   11666:	e00a      	b.n	1167e <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   11668:	79fa      	ldrb	r2, [r7, #7]
   1166a:	f24c 6398 	movw	r3, #50840	; 0xc698
   1166e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11672:	2100      	movs	r1, #0
   11674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11678:	79fb      	ldrb	r3, [r7, #7]
   1167a:	3301      	adds	r3, #1
   1167c:	71fb      	strb	r3, [r7, #7]
   1167e:	79fb      	ldrb	r3, [r7, #7]
   11680:	2b07      	cmp	r3, #7
   11682:	d9f1      	bls.n	11668 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   11684:	370c      	adds	r7, #12
   11686:	46bd      	mov	sp, r7
   11688:	f85d 7b04 	ldr.w	r7, [sp], #4
   1168c:	4770      	bx	lr
   1168e:	bf00      	nop

00011690 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   11690:	b480      	push	{r7}
   11692:	b085      	sub	sp, #20
   11694:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   11696:	f242 0307 	movw	r3, #8199	; 0x2007
   1169a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1169e:	781b      	ldrb	r3, [r3, #0]
   116a0:	b2db      	uxtb	r3, r3
   116a2:	f003 0307 	and.w	r3, r3, #7
   116a6:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   116a8:	7bfa      	ldrb	r2, [r7, #15]
   116aa:	f24c 6398 	movw	r3, #50840	; 0xc698
   116ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   116b6:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   116b8:	f242 0304 	movw	r3, #8196	; 0x2004
   116bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116c0:	881b      	ldrh	r3, [r3, #0]
   116c2:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   116c4:	7bfa      	ldrb	r2, [r7, #15]
   116c6:	f24c 6388 	movw	r3, #50824	; 0xc688
   116ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116ce:	88f9      	ldrh	r1, [r7, #6]
   116d0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   116d4:	68bb      	ldr	r3, [r7, #8]
   116d6:	2b00      	cmp	r3, #0
   116d8:	d025      	beq.n	11726 <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   116da:	68bb      	ldr	r3, [r7, #8]
   116dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   116e0:	3301      	adds	r3, #1
   116e2:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   116e4:	7bbb      	ldrb	r3, [r7, #14]
   116e6:	2b1f      	cmp	r3, #31
   116e8:	d901      	bls.n	116ee <__vector_21+0x5e>
   116ea:	2300      	movs	r3, #0
   116ec:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   116ee:	68bb      	ldr	r3, [r7, #8]
   116f0:	881a      	ldrh	r2, [r3, #0]
   116f2:	7bbb      	ldrb	r3, [r7, #14]
   116f4:	68b9      	ldr	r1, [r7, #8]
   116f6:	005b      	lsls	r3, r3, #1
   116f8:	440b      	add	r3, r1
   116fa:	885b      	ldrh	r3, [r3, #2]
   116fc:	1ad3      	subs	r3, r2, r3
   116fe:	b29a      	uxth	r2, r3
   11700:	68bb      	ldr	r3, [r7, #8]
   11702:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   11704:	7bbb      	ldrb	r3, [r7, #14]
   11706:	68ba      	ldr	r2, [r7, #8]
   11708:	005b      	lsls	r3, r3, #1
   1170a:	4413      	add	r3, r2
   1170c:	88fa      	ldrh	r2, [r7, #6]
   1170e:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   11710:	68bb      	ldr	r3, [r7, #8]
   11712:	881a      	ldrh	r2, [r3, #0]
   11714:	88fb      	ldrh	r3, [r7, #6]
   11716:	4413      	add	r3, r2
   11718:	b29a      	uxth	r2, r3
   1171a:	68bb      	ldr	r3, [r7, #8]
   1171c:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   1171e:	68bb      	ldr	r3, [r7, #8]
   11720:	7bba      	ldrb	r2, [r7, #14]
   11722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   11726:	7bfb      	ldrb	r3, [r7, #15]
   11728:	3301      	adds	r3, #1
   1172a:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   1172c:	7bfb      	ldrb	r3, [r7, #15]
   1172e:	2b07      	cmp	r3, #7
   11730:	d901      	bls.n	11736 <__vector_21+0xa6>
    adc_input = 0;
   11732:	2300      	movs	r3, #0
   11734:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   11736:	f242 0307 	movw	r3, #8199	; 0x2007
   1173a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1173e:	7bfa      	ldrb	r2, [r7, #15]
   11740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11744:	b2d2      	uxtb	r2, r2
   11746:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   11748:	f242 0306 	movw	r3, #8198	; 0x2006
   1174c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11750:	f242 0206 	movw	r2, #8198	; 0x2006
   11754:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11758:	7812      	ldrb	r2, [r2, #0]
   1175a:	b2d2      	uxtb	r2, r2
   1175c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11760:	b2d2      	uxtb	r2, r2
   11762:	701a      	strb	r2, [r3, #0]
  
}
   11764:	3714      	adds	r7, #20
   11766:	46bd      	mov	sp, r7
   11768:	f85d 7b04 	ldr.w	r7, [sp], #4
   1176c:	4770      	bx	lr
   1176e:	bf00      	nop

00011770 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   11770:	b580      	push	{r7, lr}
   11772:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   11774:	f003 fca8 	bl	150c8 <uart1_init>
#endif
  ubx_status = UNINIT;
   11778:	f24c 73df 	movw	r3, #51167	; 0xc7df
   1177c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11780:	2200      	movs	r2, #0
   11782:	701a      	strb	r2, [r3, #0]
}
   11784:	bd80      	pop	{r7, pc}
   11786:	bf00      	nop

00011788 <parse_gps_msg>:

void parse_gps_msg( void ) {
   11788:	b580      	push	{r7, lr}
   1178a:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   1178c:	f24c 73e6 	movw	r3, #51174	; 0xc7e6
   11790:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11794:	781b      	ldrb	r3, [r3, #0]
   11796:	2b01      	cmp	r3, #1
   11798:	f040 80f9 	bne.w	1198e <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   1179c:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   117a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117a4:	781b      	ldrb	r3, [r3, #0]
   117a6:	2b08      	cmp	r3, #8
   117a8:	d128      	bne.n	117fc <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   117aa:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   117ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117b2:	685a      	ldr	r2, [r3, #4]
   117b4:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
   117b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117bc:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   117be:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   117c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117c6:	689a      	ldr	r2, [r3, #8]
   117c8:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
   117cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117d0:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   117d2:	4b73      	ldr	r3, [pc, #460]	; (119a0 <parse_gps_msg+0x218>)
   117d4:	681b      	ldr	r3, [r3, #0]
   117d6:	4618      	mov	r0, r3
   117d8:	f006 fe10 	bl	183fc <__aeabi_i2f>
   117dc:	4603      	mov	r3, r0
   117de:	4618      	mov	r0, r3
   117e0:	f04f 0100 	mov.w	r1, #0
   117e4:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   117e8:	f006 ff10 	bl	1860c <__aeabi_fdiv>
   117ec:	4603      	mov	r3, r0
   117ee:	461a      	mov	r2, r3
   117f0:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   117f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117f8:	601a      	str	r2, [r3, #0]
   117fa:	e0c8      	b.n	1198e <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   117fc:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   11800:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11804:	781b      	ldrb	r3, [r3, #0]
   11806:	2b03      	cmp	r3, #3
   11808:	d10a      	bne.n	11820 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   1180a:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   1180e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11812:	791a      	ldrb	r2, [r3, #4]
   11814:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
   11818:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1181c:	701a      	strb	r2, [r3, #0]
   1181e:	e0b6      	b.n	1198e <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   11820:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   11824:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11828:	781b      	ldrb	r3, [r3, #0]
   1182a:	2b12      	cmp	r3, #18
   1182c:	f040 80af 	bne.w	1198e <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   11830:	4b5c      	ldr	r3, [pc, #368]	; (119a4 <parse_gps_msg+0x21c>)
   11832:	681b      	ldr	r3, [r3, #0]
   11834:	4618      	mov	r0, r3
   11836:	f006 fddd 	bl	183f4 <__aeabi_ui2f>
   1183a:	4603      	mov	r3, r0
   1183c:	4618      	mov	r0, r3
   1183e:	f04f 0100 	mov.w	r1, #0
   11842:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11846:	f006 fee1 	bl	1860c <__aeabi_fdiv>
   1184a:	4603      	mov	r3, r0
   1184c:	461a      	mov	r2, r3
   1184e:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   11852:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11856:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   11858:	4b51      	ldr	r3, [pc, #324]	; (119a0 <parse_gps_msg+0x218>)
   1185a:	681b      	ldr	r3, [r3, #0]
   1185c:	4618      	mov	r0, r3
   1185e:	f006 fdcd 	bl	183fc <__aeabi_i2f>
   11862:	4603      	mov	r3, r0
   11864:	4618      	mov	r0, r3
   11866:	f04f 0100 	mov.w	r1, #0
   1186a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1186e:	f006 fecd 	bl	1860c <__aeabi_fdiv>
   11872:	4603      	mov	r3, r0
   11874:	461a      	mov	r2, r3
   11876:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   1187a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1187e:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   11880:	4b49      	ldr	r3, [pc, #292]	; (119a8 <parse_gps_msg+0x220>)
   11882:	681b      	ldr	r3, [r3, #0]
   11884:	4618      	mov	r0, r3
   11886:	f006 fdb9 	bl	183fc <__aeabi_i2f>
   1188a:	4603      	mov	r3, r0
   1188c:	4618      	mov	r0, r3
   1188e:	f006 f975 	bl	17b7c <__aeabi_f2d>
   11892:	4602      	mov	r2, r0
   11894:	460b      	mov	r3, r1
   11896:	4610      	mov	r0, r2
   11898:	4619      	mov	r1, r3
   1189a:	a33d      	add	r3, pc, #244	; (adr r3, 11990 <parse_gps_msg+0x208>)
   1189c:	e9d3 2300 	ldrd	r2, r3, [r3]
   118a0:	f006 faea 	bl	17e78 <__aeabi_ddiv>
   118a4:	4602      	mov	r2, r0
   118a6:	460b      	mov	r3, r1
   118a8:	4610      	mov	r0, r2
   118aa:	4619      	mov	r1, r3
   118ac:	f04f 0200 	mov.w	r2, #0
   118b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   118b4:	f2c4 0366 	movt	r3, #16486	; 0x4066
   118b8:	f006 fade 	bl	17e78 <__aeabi_ddiv>
   118bc:	4602      	mov	r2, r0
   118be:	460b      	mov	r3, r1
   118c0:	4610      	mov	r0, r2
   118c2:	4619      	mov	r1, r3
   118c4:	a334      	add	r3, pc, #208	; (adr r3, 11998 <parse_gps_msg+0x210>)
   118c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   118ca:	f006 f9ab 	bl	17c24 <__aeabi_dmul>
   118ce:	4602      	mov	r2, r0
   118d0:	460b      	mov	r3, r1
   118d2:	4610      	mov	r0, r2
   118d4:	4619      	mov	r1, r3
   118d6:	f006 fc87 	bl	181e8 <__aeabi_d2f>
   118da:	4602      	mov	r2, r0
   118dc:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
   118e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118e4:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   118e6:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   118ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118ee:	681b      	ldr	r3, [r3, #0]
   118f0:	4618      	mov	r0, r3
   118f2:	f006 fd7f 	bl	183f4 <__aeabi_ui2f>
   118f6:	4603      	mov	r3, r0
   118f8:	4618      	mov	r0, r3
   118fa:	f04f 0100 	mov.w	r1, #0
   118fe:	f2c4 417a 	movt	r1, #17530	; 0x447a
   11902:	f006 fe83 	bl	1860c <__aeabi_fdiv>
   11906:	4603      	mov	r3, r0
   11908:	461a      	mov	r2, r3
   1190a:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   1190e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11912:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   11914:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
   11918:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1191c:	681a      	ldr	r2, [r3, #0]
   1191e:	f248 531f 	movw	r3, #34079	; 0x851f
   11922:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11926:	fb83 1302 	smull	r1, r3, r3, r2
   1192a:	1159      	asrs	r1, r3, #5
   1192c:	17d3      	asrs	r3, r2, #31
   1192e:	1acb      	subs	r3, r1, r3
   11930:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   11934:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   11938:	4618      	mov	r0, r3
   1193a:	f006 fd5f 	bl	183fc <__aeabi_i2f>
   1193e:	4602      	mov	r2, r0
   11940:	f24c 63d4 	movw	r3, #50900	; 0xc6d4
   11944:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11948:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   1194a:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
   1194e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11952:	681a      	ldr	r2, [r3, #0]
   11954:	f248 531f 	movw	r3, #34079	; 0x851f
   11958:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   1195c:	fb83 1302 	smull	r1, r3, r3, r2
   11960:	1159      	asrs	r1, r3, #5
   11962:	17d3      	asrs	r3, r2, #31
   11964:	1aca      	subs	r2, r1, r3
   11966:	f648 231a 	movw	r3, #35354	; 0x8a1a
   1196a:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   1196e:	4413      	add	r3, r2
   11970:	4618      	mov	r0, r3
   11972:	f006 fd43 	bl	183fc <__aeabi_i2f>
   11976:	4602      	mov	r2, r0
   11978:	f24c 63d8 	movw	r3, #50904	; 0xc6d8
   1197c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11980:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   11982:	f24c 63de 	movw	r3, #50910	; 0xc6de
   11986:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1198a:	2201      	movs	r2, #1
   1198c:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   1198e:	bd80      	pop	{r7, pc}
   11990:	00000000 	.word	0x00000000
   11994:	40f86a00 	.word	0x40f86a00
   11998:	5a7ed197 	.word	0x5a7ed197
   1199c:	400921fb 	.word	0x400921fb
   119a0:	2004c6ec 	.word	0x2004c6ec
   119a4:	2004c6f4 	.word	0x2004c6f4
   119a8:	2004c6f8 	.word	0x2004c6f8

000119ac <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   119ac:	b480      	push	{r7}
   119ae:	b083      	sub	sp, #12
   119b0:	af00      	add	r7, sp, #0
   119b2:	4603      	mov	r3, r0
   119b4:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   119b6:	f24c 73df 	movw	r3, #51167	; 0xc7df
   119ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119be:	781b      	ldrb	r3, [r3, #0]
   119c0:	2b06      	cmp	r3, #6
   119c2:	d81d      	bhi.n	11a00 <parse_ubx+0x54>
    ck_a += c;
   119c4:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   119c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119cc:	781a      	ldrb	r2, [r3, #0]
   119ce:	79fb      	ldrb	r3, [r7, #7]
   119d0:	4413      	add	r3, r2
   119d2:	b2da      	uxtb	r2, r3
   119d4:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   119d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119dc:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   119de:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   119e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119e6:	781a      	ldrb	r2, [r3, #0]
   119e8:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   119ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119f0:	781b      	ldrb	r3, [r3, #0]
   119f2:	4413      	add	r3, r2
   119f4:	b2da      	uxtb	r2, r3
   119f6:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   119fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119fe:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   11a00:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a08:	781b      	ldrb	r3, [r3, #0]
   11a0a:	2b00      	cmp	r3, #0
   11a0c:	d110      	bne.n	11a30 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   11a0e:	79fb      	ldrb	r3, [r7, #7]
   11a10:	2bb5      	cmp	r3, #181	; 0xb5
   11a12:	f040 8135 	bne.w	11c80 <parse_ubx+0x2d4>
      ubx_status++;
   11a16:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a1e:	781b      	ldrb	r3, [r3, #0]
   11a20:	3301      	adds	r3, #1
   11a22:	b2da      	uxtb	r2, r3
   11a24:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a2c:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11a2e:	e12f      	b.n	11c90 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   11a30:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a38:	781b      	ldrb	r3, [r3, #0]
   11a3a:	2b01      	cmp	r3, #1
   11a3c:	d11c      	bne.n	11a78 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   11a3e:	79fb      	ldrb	r3, [r7, #7]
   11a40:	2b62      	cmp	r3, #98	; 0x62
   11a42:	d000      	beq.n	11a46 <parse_ubx+0x9a>
      goto error;
   11a44:	e11d      	b.n	11c82 <parse_ubx+0x2d6>
    ck_a = 0;
   11a46:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a4e:	2200      	movs	r2, #0
   11a50:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   11a52:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11a56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a5a:	2200      	movs	r2, #0
   11a5c:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11a5e:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a66:	781b      	ldrb	r3, [r3, #0]
   11a68:	3301      	adds	r3, #1
   11a6a:	b2da      	uxtb	r2, r3
   11a6c:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a74:	701a      	strb	r2, [r3, #0]
   11a76:	e103      	b.n	11c80 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11a78:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a80:	781b      	ldrb	r3, [r3, #0]
   11a82:	2b02      	cmp	r3, #2
   11a84:	d127      	bne.n	11ad6 <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   11a86:	f24c 63dd 	movw	r3, #50909	; 0xc6dd
   11a8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a8e:	781b      	ldrb	r3, [r3, #0]
   11a90:	b2db      	uxtb	r3, r3
   11a92:	2b00      	cmp	r3, #0
   11a94:	d00c      	beq.n	11ab0 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   11a96:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
   11a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a9e:	781b      	ldrb	r3, [r3, #0]
   11aa0:	3301      	adds	r3, #1
   11aa2:	b2da      	uxtb	r2, r3
   11aa4:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
   11aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aac:	701a      	strb	r2, [r3, #0]
      goto error;
   11aae:	e0e8      	b.n	11c82 <parse_ubx+0x2d6>
    }
    ubx_class = c;
   11ab0:	f24c 73e6 	movw	r3, #51174	; 0xc7e6
   11ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ab8:	79fa      	ldrb	r2, [r7, #7]
   11aba:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11abc:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ac4:	781b      	ldrb	r3, [r3, #0]
   11ac6:	3301      	adds	r3, #1
   11ac8:	b2da      	uxtb	r2, r3
   11aca:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11ace:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ad2:	701a      	strb	r2, [r3, #0]
   11ad4:	e0d4      	b.n	11c80 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   11ad6:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11ada:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ade:	781b      	ldrb	r3, [r3, #0]
   11ae0:	2b03      	cmp	r3, #3
   11ae2:	d112      	bne.n	11b0a <parse_ubx+0x15e>
  {
    ubx_id = c;
   11ae4:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   11ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aec:	79fa      	ldrb	r2, [r7, #7]
   11aee:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11af0:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11af8:	781b      	ldrb	r3, [r3, #0]
   11afa:	3301      	adds	r3, #1
   11afc:	b2da      	uxtb	r2, r3
   11afe:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b06:	701a      	strb	r2, [r3, #0]
   11b08:	e0ba      	b.n	11c80 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   11b0a:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b12:	781b      	ldrb	r3, [r3, #0]
   11b14:	2b04      	cmp	r3, #4
   11b16:	d113      	bne.n	11b40 <parse_ubx+0x194>
  {
    ubx_len = c;
   11b18:	79fb      	ldrb	r3, [r7, #7]
   11b1a:	b29a      	uxth	r2, r3
   11b1c:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b24:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   11b26:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b2e:	781b      	ldrb	r3, [r3, #0]
   11b30:	3301      	adds	r3, #1
   11b32:	b2da      	uxtb	r2, r3
   11b34:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b3c:	701a      	strb	r2, [r3, #0]
   11b3e:	e09f      	b.n	11c80 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11b40:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b48:	781b      	ldrb	r3, [r3, #0]
   11b4a:	2b05      	cmp	r3, #5
   11b4c:	d12b      	bne.n	11ba6 <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   11b4e:	79fb      	ldrb	r3, [r7, #7]
   11b50:	021b      	lsls	r3, r3, #8
   11b52:	b29a      	uxth	r2, r3
   11b54:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b5c:	881b      	ldrh	r3, [r3, #0]
   11b5e:	b29b      	uxth	r3, r3
   11b60:	4313      	orrs	r3, r2
   11b62:	b29b      	uxth	r3, r3
   11b64:	b29a      	uxth	r2, r3
   11b66:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b6e:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11b70:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b78:	881b      	ldrh	r3, [r3, #0]
   11b7a:	2bff      	cmp	r3, #255	; 0xff
   11b7c:	d900      	bls.n	11b80 <parse_ubx+0x1d4>
      goto error;
   11b7e:	e080      	b.n	11c82 <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11b80:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b88:	2200      	movs	r2, #0
   11b8a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11b8c:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b94:	781b      	ldrb	r3, [r3, #0]
   11b96:	3301      	adds	r3, #1
   11b98:	b2da      	uxtb	r2, r3
   11b9a:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ba2:	701a      	strb	r2, [r3, #0]
   11ba4:	e06c      	b.n	11c80 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   11ba6:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11baa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bae:	781b      	ldrb	r3, [r3, #0]
   11bb0:	2b06      	cmp	r3, #6
   11bb2:	d131      	bne.n	11c18 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   11bb4:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bbc:	781b      	ldrb	r3, [r3, #0]
   11bbe:	461a      	mov	r2, r3
   11bc0:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   11bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bc8:	79f9      	ldrb	r1, [r7, #7]
   11bca:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   11bcc:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bd4:	781b      	ldrb	r3, [r3, #0]
   11bd6:	3301      	adds	r3, #1
   11bd8:	b2da      	uxtb	r2, r3
   11bda:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11bde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11be2:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   11be4:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11be8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bec:	781b      	ldrb	r3, [r3, #0]
   11bee:	461a      	mov	r2, r3
   11bf0:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11bf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bf8:	881b      	ldrh	r3, [r3, #0]
   11bfa:	429a      	cmp	r2, r3
   11bfc:	d340      	bcc.n	11c80 <parse_ubx+0x2d4>
      ubx_status++;
   11bfe:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c06:	781b      	ldrb	r3, [r3, #0]
   11c08:	3301      	adds	r3, #1
   11c0a:	b2da      	uxtb	r2, r3
   11c0c:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c14:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11c16:	e03b      	b.n	11c90 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   11c18:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c20:	781b      	ldrb	r3, [r3, #0]
   11c22:	2b07      	cmp	r3, #7
   11c24:	d115      	bne.n	11c52 <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   11c26:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c2e:	781b      	ldrb	r3, [r3, #0]
   11c30:	79fa      	ldrb	r2, [r7, #7]
   11c32:	429a      	cmp	r2, r3
   11c34:	d000      	beq.n	11c38 <parse_ubx+0x28c>
      goto error;
   11c36:	e024      	b.n	11c82 <parse_ubx+0x2d6>
    ubx_status++;
   11c38:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c40:	781b      	ldrb	r3, [r3, #0]
   11c42:	3301      	adds	r3, #1
   11c44:	b2da      	uxtb	r2, r3
   11c46:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c4e:	701a      	strb	r2, [r3, #0]
   11c50:	e016      	b.n	11c80 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   11c52:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c5a:	781b      	ldrb	r3, [r3, #0]
   11c5c:	2b08      	cmp	r3, #8
   11c5e:	d10f      	bne.n	11c80 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11c60:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11c64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c68:	781b      	ldrb	r3, [r3, #0]
   11c6a:	79fa      	ldrb	r2, [r7, #7]
   11c6c:	429a      	cmp	r2, r3
   11c6e:	d000      	beq.n	11c72 <parse_ubx+0x2c6>
      goto error;
   11c70:	e007      	b.n	11c82 <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   11c72:	f24c 63dd 	movw	r3, #50909	; 0xc6dd
   11c76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c7a:	2201      	movs	r2, #1
   11c7c:	701a      	strb	r2, [r3, #0]
    goto restart;
   11c7e:	e000      	b.n	11c82 <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11c80:	e006      	b.n	11c90 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   11c82:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c8a:	2200      	movs	r2, #0
   11c8c:	701a      	strb	r2, [r3, #0]
  return;
   11c8e:	bf00      	nop
}
   11c90:	370c      	adds	r7, #12
   11c92:	46bd      	mov	sp, r7
   11c94:	f85d 7b04 	ldr.w	r7, [sp], #4
   11c98:	4770      	bx	lr
   11c9a:	bf00      	nop

00011c9c <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   11c9c:	b580      	push	{r7, lr}
   11c9e:	b082      	sub	sp, #8
   11ca0:	af00      	add	r7, sp, #0
   11ca2:	f242 039c 	movw	r3, #8348	; 0x209c
   11ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11caa:	781b      	ldrb	r3, [r3, #0]
   11cac:	71fb      	strb	r3, [r7, #7]
   11cae:	79fb      	ldrb	r3, [r7, #7]
   11cb0:	4618      	mov	r0, r3
   11cb2:	f7ff fe7b 	bl	119ac <parse_ubx>
   11cb6:	3708      	adds	r7, #8
   11cb8:	46bd      	mov	sp, r7
   11cba:	bd80      	pop	{r7, pc}
   11cbc:	f3af 8000 	nop.w

00011cc0 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   11cc0:	b580      	push	{r7, lr}
   11cc2:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   11cc4:	f240 5348 	movw	r3, #1352	; 0x548
   11cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ccc:	f24c 228f 	movw	r2, #49807	; 0xc28f
   11cd0:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   11cd4:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   11cd6:	2001      	movs	r0, #1
   11cd8:	f24c 71ec 	movw	r1, #51180	; 0xc7ec
   11cdc:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11ce0:	f7ff fc82 	bl	115e8 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   11ce4:	2002      	movs	r0, #2
   11ce6:	f64c 0130 	movw	r1, #51248	; 0xc830
   11cea:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11cee:	f7ff fc7b 	bl	115e8 <adc_buf_channel>
}
   11cf2:	bd80      	pop	{r7, pc}

00011cf4 <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   11cf4:	b480      	push	{r7}
   11cf6:	b083      	sub	sp, #12
   11cf8:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   11cfa:	f24c 73ec 	movw	r3, #51180	; 0xc7ec
   11cfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d02:	881b      	ldrh	r3, [r3, #0]
   11d04:	095b      	lsrs	r3, r3, #5
   11d06:	b29b      	uxth	r3, r3
   11d08:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   11d0a:	f64c 0330 	movw	r3, #51248	; 0xc830
   11d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d12:	881b      	ldrh	r3, [r3, #0]
   11d14:	095b      	lsrs	r3, r3, #5
   11d16:	b29b      	uxth	r3, r3
   11d18:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   11d1a:	88fb      	ldrh	r3, [r7, #6]
   11d1c:	425b      	negs	r3, r3
   11d1e:	b29a      	uxth	r2, r3
   11d20:	88bb      	ldrh	r3, [r7, #4]
   11d22:	1ad3      	subs	r3, r2, r3
   11d24:	b29a      	uxth	r2, r3
   11d26:	f240 5342 	movw	r3, #1346	; 0x542
   11d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d2e:	881b      	ldrh	r3, [r3, #0]
   11d30:	b29b      	uxth	r3, r3
   11d32:	1ad3      	subs	r3, r2, r3
   11d34:	b29b      	uxth	r3, r3
   11d36:	b29a      	uxth	r2, r3
   11d38:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   11d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d40:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   11d42:	88ba      	ldrh	r2, [r7, #4]
   11d44:	88fb      	ldrh	r3, [r7, #6]
   11d46:	1ad3      	subs	r3, r2, r3
   11d48:	b29a      	uxth	r2, r3
   11d4a:	f240 5344 	movw	r3, #1348	; 0x544
   11d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d52:	881b      	ldrh	r3, [r3, #0]
   11d54:	b29b      	uxth	r3, r3
   11d56:	1ad3      	subs	r3, r2, r3
   11d58:	b29b      	uxth	r3, r3
   11d5a:	b29a      	uxth	r2, r3
   11d5c:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
   11d60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d64:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   11d66:	370c      	adds	r7, #12
   11d68:	46bd      	mov	sp, r7
   11d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
   11d6e:	4770      	bx	lr

00011d70 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11d70:	b580      	push	{r7, lr}
   11d72:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   11d74:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
   11d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d7c:	881b      	ldrh	r3, [r3, #0]
   11d7e:	b29b      	uxth	r3, r3
   11d80:	425b      	negs	r3, r3
   11d82:	b29b      	uxth	r3, r3
   11d84:	b29a      	uxth	r2, r3
   11d86:	f240 5340 	movw	r3, #1344	; 0x540
   11d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d8e:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   11d90:	f240 5340 	movw	r3, #1344	; 0x540
   11d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d98:	881b      	ldrh	r3, [r3, #0]
   11d9a:	b21b      	sxth	r3, r3
   11d9c:	4618      	mov	r0, r3
   11d9e:	f005 fedb 	bl	17b58 <__aeabi_i2d>
   11da2:	4602      	mov	r2, r0
   11da4:	460b      	mov	r3, r1
   11da6:	f04f 0000 	mov.w	r0, #0
   11daa:	f04f 0100 	mov.w	r1, #0
   11dae:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   11db2:	f006 f861 	bl	17e78 <__aeabi_ddiv>
   11db6:	4602      	mov	r2, r0
   11db8:	460b      	mov	r3, r1
   11dba:	4610      	mov	r0, r2
   11dbc:	4619      	mov	r1, r3
   11dbe:	f006 fa13 	bl	181e8 <__aeabi_d2f>
   11dc2:	4602      	mov	r2, r0
   11dc4:	f240 5348 	movw	r3, #1352	; 0x548
   11dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dcc:	601a      	str	r2, [r3, #0]
}
   11dce:	bd80      	pop	{r7, pc}

00011dd0 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   11dd0:	b590      	push	{r4, r7, lr}
   11dd2:	b083      	sub	sp, #12
   11dd4:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   11dd6:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dde:	681a      	ldr	r2, [r3, #0]
   11de0:	f64c 0374 	movw	r3, #51316	; 0xc874
   11de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11de8:	681b      	ldr	r3, [r3, #0]
   11dea:	4610      	mov	r0, r2
   11dec:	4619      	mov	r1, r3
   11dee:	f006 fa4f 	bl	18290 <__aeabi_fsub>
   11df2:	4603      	mov	r3, r0
   11df4:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   11df6:	f240 534c 	movw	r3, #1356	; 0x54c
   11dfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dfe:	681b      	ldr	r3, [r3, #0]
   11e00:	4618      	mov	r0, r3
   11e02:	6879      	ldr	r1, [r7, #4]
   11e04:	f006 fb4e 	bl	184a4 <__aeabi_fmul>
   11e08:	4603      	mov	r3, r0
   11e0a:	4618      	mov	r0, r3
   11e0c:	f04f 0100 	mov.w	r1, #0
   11e10:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11e14:	f006 fce4 	bl	187e0 <__aeabi_fcmplt>
   11e18:	4603      	mov	r3, r0
   11e1a:	2b00      	cmp	r3, #0
   11e1c:	d002      	beq.n	11e24 <roll_pitch_pid_run+0x54>
   11e1e:	f64d 2280 	movw	r2, #55936	; 0xda80
   11e22:	e026      	b.n	11e72 <roll_pitch_pid_run+0xa2>
   11e24:	f240 534c 	movw	r3, #1356	; 0x54c
   11e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e2c:	681b      	ldr	r3, [r3, #0]
   11e2e:	4618      	mov	r0, r3
   11e30:	6879      	ldr	r1, [r7, #4]
   11e32:	f006 fb37 	bl	184a4 <__aeabi_fmul>
   11e36:	4603      	mov	r3, r0
   11e38:	4618      	mov	r0, r3
   11e3a:	f04f 0100 	mov.w	r1, #0
   11e3e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11e42:	f006 fceb 	bl	1881c <__aeabi_fcmpgt>
   11e46:	4603      	mov	r3, r0
   11e48:	2b00      	cmp	r3, #0
   11e4a:	d002      	beq.n	11e52 <roll_pitch_pid_run+0x82>
   11e4c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11e50:	e00e      	b.n	11e70 <roll_pitch_pid_run+0xa0>
   11e52:	f240 534c 	movw	r3, #1356	; 0x54c
   11e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e5a:	681b      	ldr	r3, [r3, #0]
   11e5c:	4618      	mov	r0, r3
   11e5e:	6879      	ldr	r1, [r7, #4]
   11e60:	f006 fb20 	bl	184a4 <__aeabi_fmul>
   11e64:	4603      	mov	r3, r0
   11e66:	4618      	mov	r0, r3
   11e68:	f006 fce2 	bl	18830 <__aeabi_f2iz>
   11e6c:	4603      	mov	r3, r0
   11e6e:	b29b      	uxth	r3, r3
   11e70:	b29a      	uxth	r2, r3
   11e72:	f64c 037e 	movw	r3, #51326	; 0xc87e
   11e76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e7a:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   11e7c:	f64c 0384 	movw	r3, #51332	; 0xc884
   11e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e84:	681b      	ldr	r3, [r3, #0]
   11e86:	4618      	mov	r0, r3
   11e88:	f04f 0100 	mov.w	r1, #0
   11e8c:	f006 fca8 	bl	187e0 <__aeabi_fcmplt>
   11e90:	4603      	mov	r3, r0
   11e92:	2b00      	cmp	r3, #0
   11e94:	d006      	beq.n	11ea4 <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   11e96:	f64c 0384 	movw	r3, #51332	; 0xc884
   11e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e9e:	f04f 0200 	mov.w	r2, #0
   11ea2:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   11ea4:	f64c 3310 	movw	r3, #51984	; 0xcb10
   11ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11eac:	681a      	ldr	r2, [r3, #0]
   11eae:	f64c 0378 	movw	r3, #51320	; 0xc878
   11eb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11eb6:	681b      	ldr	r3, [r3, #0]
   11eb8:	4610      	mov	r0, r2
   11eba:	4619      	mov	r1, r3
   11ebc:	f006 f9e8 	bl	18290 <__aeabi_fsub>
   11ec0:	4603      	mov	r3, r0
   11ec2:	461c      	mov	r4, r3
   11ec4:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ecc:	681b      	ldr	r3, [r3, #0]
   11ece:	4618      	mov	r0, r3
   11ed0:	f04f 0100 	mov.w	r1, #0
   11ed4:	f006 fc84 	bl	187e0 <__aeabi_fcmplt>
   11ed8:	4603      	mov	r3, r0
   11eda:	2b00      	cmp	r3, #0
   11edc:	d007      	beq.n	11eee <roll_pitch_pid_run+0x11e>
   11ede:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ee6:	681b      	ldr	r3, [r3, #0]
   11ee8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11eec:	e004      	b.n	11ef8 <roll_pitch_pid_run+0x128>
   11eee:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11ef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ef6:	681a      	ldr	r2, [r3, #0]
   11ef8:	f64c 0384 	movw	r3, #51332	; 0xc884
   11efc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f00:	681b      	ldr	r3, [r3, #0]
   11f02:	4610      	mov	r0, r2
   11f04:	4619      	mov	r1, r3
   11f06:	f006 facd 	bl	184a4 <__aeabi_fmul>
   11f0a:	4603      	mov	r3, r0
   11f0c:	4620      	mov	r0, r4
   11f0e:	4619      	mov	r1, r3
   11f10:	f006 f9be 	bl	18290 <__aeabi_fsub>
   11f14:	4603      	mov	r3, r0
   11f16:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   11f1a:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   11f1c:	f240 5350 	movw	r3, #1360	; 0x550
   11f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f24:	681b      	ldr	r3, [r3, #0]
   11f26:	4618      	mov	r0, r3
   11f28:	6879      	ldr	r1, [r7, #4]
   11f2a:	f006 fabb 	bl	184a4 <__aeabi_fmul>
   11f2e:	4603      	mov	r3, r0
   11f30:	4618      	mov	r0, r3
   11f32:	f04f 0100 	mov.w	r1, #0
   11f36:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11f3a:	f006 fc51 	bl	187e0 <__aeabi_fcmplt>
   11f3e:	4603      	mov	r3, r0
   11f40:	2b00      	cmp	r3, #0
   11f42:	d002      	beq.n	11f4a <roll_pitch_pid_run+0x17a>
   11f44:	f64d 2280 	movw	r2, #55936	; 0xda80
   11f48:	e026      	b.n	11f98 <roll_pitch_pid_run+0x1c8>
   11f4a:	f240 5350 	movw	r3, #1360	; 0x550
   11f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f52:	681b      	ldr	r3, [r3, #0]
   11f54:	4618      	mov	r0, r3
   11f56:	6879      	ldr	r1, [r7, #4]
   11f58:	f006 faa4 	bl	184a4 <__aeabi_fmul>
   11f5c:	4603      	mov	r3, r0
   11f5e:	4618      	mov	r0, r3
   11f60:	f04f 0100 	mov.w	r1, #0
   11f64:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11f68:	f006 fc58 	bl	1881c <__aeabi_fcmpgt>
   11f6c:	4603      	mov	r3, r0
   11f6e:	2b00      	cmp	r3, #0
   11f70:	d002      	beq.n	11f78 <roll_pitch_pid_run+0x1a8>
   11f72:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11f76:	e00e      	b.n	11f96 <roll_pitch_pid_run+0x1c6>
   11f78:	f240 5350 	movw	r3, #1360	; 0x550
   11f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f80:	681b      	ldr	r3, [r3, #0]
   11f82:	4618      	mov	r0, r3
   11f84:	6879      	ldr	r1, [r7, #4]
   11f86:	f006 fa8d 	bl	184a4 <__aeabi_fmul>
   11f8a:	4603      	mov	r3, r0
   11f8c:	4618      	mov	r0, r3
   11f8e:	f006 fc4f 	bl	18830 <__aeabi_f2iz>
   11f92:	4603      	mov	r3, r0
   11f94:	b29b      	uxth	r3, r3
   11f96:	b29a      	uxth	r2, r3
   11f98:	f64c 0380 	movw	r3, #51328	; 0xc880
   11f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fa0:	801a      	strh	r2, [r3, #0]
}
   11fa2:	370c      	adds	r7, #12
   11fa4:	46bd      	mov	sp, r7
   11fa6:	bd90      	pop	{r4, r7, pc}

00011fa8 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   11fa8:	b580      	push	{r7, lr}
   11faa:	b082      	sub	sp, #8
   11fac:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   11fae:	f64c 3338 	movw	r3, #52024	; 0xcb38
   11fb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fb6:	681a      	ldr	r2, [r3, #0]
   11fb8:	f64c 038c 	movw	r3, #51340	; 0xc88c
   11fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fc0:	681b      	ldr	r3, [r3, #0]
   11fc2:	4610      	mov	r0, r2
   11fc4:	4619      	mov	r1, r3
   11fc6:	f006 f963 	bl	18290 <__aeabi_fsub>
   11fca:	4603      	mov	r3, r0
   11fcc:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   11fce:	e013      	b.n	11ff8 <course_pid_run+0x50>
   11fd0:	6878      	ldr	r0, [r7, #4]
   11fd2:	f005 fdd3 	bl	17b7c <__aeabi_f2d>
   11fd6:	4602      	mov	r2, r0
   11fd8:	460b      	mov	r3, r1
   11fda:	4610      	mov	r0, r2
   11fdc:	4619      	mov	r1, r3
   11fde:	a348      	add	r3, pc, #288	; (adr r3, 12100 <course_pid_run+0x158>)
   11fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
   11fe4:	f005 fc6a 	bl	178bc <__aeabi_dsub>
   11fe8:	4602      	mov	r2, r0
   11fea:	460b      	mov	r3, r1
   11fec:	4610      	mov	r0, r2
   11fee:	4619      	mov	r1, r3
   11ff0:	f006 f8fa 	bl	181e8 <__aeabi_d2f>
   11ff4:	4603      	mov	r3, r0
   11ff6:	607b      	str	r3, [r7, #4]
   11ff8:	6878      	ldr	r0, [r7, #4]
   11ffa:	f005 fdbf 	bl	17b7c <__aeabi_f2d>
   11ffe:	4602      	mov	r2, r0
   12000:	460b      	mov	r3, r1
   12002:	4610      	mov	r0, r2
   12004:	4619      	mov	r1, r3
   12006:	a340      	add	r3, pc, #256	; (adr r3, 12108 <course_pid_run+0x160>)
   12008:	e9d3 2300 	ldrd	r2, r3, [r3]
   1200c:	f006 f89a 	bl	18144 <__aeabi_dcmpgt>
   12010:	4603      	mov	r3, r0
   12012:	2b00      	cmp	r3, #0
   12014:	d1dc      	bne.n	11fd0 <course_pid_run+0x28>
   12016:	e013      	b.n	12040 <course_pid_run+0x98>
   12018:	6878      	ldr	r0, [r7, #4]
   1201a:	f005 fdaf 	bl	17b7c <__aeabi_f2d>
   1201e:	4602      	mov	r2, r0
   12020:	460b      	mov	r3, r1
   12022:	4610      	mov	r0, r2
   12024:	4619      	mov	r1, r3
   12026:	a336      	add	r3, pc, #216	; (adr r3, 12100 <course_pid_run+0x158>)
   12028:	e9d3 2300 	ldrd	r2, r3, [r3]
   1202c:	f005 fc48 	bl	178c0 <__adddf3>
   12030:	4602      	mov	r2, r0
   12032:	460b      	mov	r3, r1
   12034:	4610      	mov	r0, r2
   12036:	4619      	mov	r1, r3
   12038:	f006 f8d6 	bl	181e8 <__aeabi_d2f>
   1203c:	4603      	mov	r3, r0
   1203e:	607b      	str	r3, [r7, #4]
   12040:	6878      	ldr	r0, [r7, #4]
   12042:	f005 fd9b 	bl	17b7c <__aeabi_f2d>
   12046:	4602      	mov	r2, r0
   12048:	460b      	mov	r3, r1
   1204a:	4610      	mov	r0, r2
   1204c:	4619      	mov	r1, r3
   1204e:	a330      	add	r3, pc, #192	; (adr r3, 12110 <course_pid_run+0x168>)
   12050:	e9d3 2300 	ldrd	r2, r3, [r3]
   12054:	f006 f858 	bl	18108 <__aeabi_dcmplt>
   12058:	4603      	mov	r3, r0
   1205a:	2b00      	cmp	r3, #0
   1205c:	d1dc      	bne.n	12018 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   1205e:	f240 5358 	movw	r3, #1368	; 0x558
   12062:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12066:	681b      	ldr	r3, [r3, #0]
   12068:	4618      	mov	r0, r3
   1206a:	6879      	ldr	r1, [r7, #4]
   1206c:	f006 fa1a 	bl	184a4 <__aeabi_fmul>
   12070:	4603      	mov	r3, r0
   12072:	461a      	mov	r2, r3
   12074:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12078:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1207c:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   1207e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12082:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12086:	681a      	ldr	r2, [r3, #0]
   12088:	f240 535c 	movw	r3, #1372	; 0x55c
   1208c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12090:	681b      	ldr	r3, [r3, #0]
   12092:	4610      	mov	r0, r2
   12094:	4619      	mov	r1, r3
   12096:	f006 fbc1 	bl	1881c <__aeabi_fcmpgt>
   1209a:	4603      	mov	r3, r0
   1209c:	2b00      	cmp	r3, #0
   1209e:	d00a      	beq.n	120b6 <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   120a0:	f240 535c 	movw	r3, #1372	; 0x55c
   120a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120a8:	681a      	ldr	r2, [r3, #0]
   120aa:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   120ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120b2:	601a      	str	r2, [r3, #0]
   120b4:	e01e      	b.n	120f4 <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   120b6:	f240 535c 	movw	r3, #1372	; 0x55c
   120ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120be:	681b      	ldr	r3, [r3, #0]
   120c0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   120c4:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   120c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120cc:	681b      	ldr	r3, [r3, #0]
   120ce:	4610      	mov	r0, r2
   120d0:	4619      	mov	r1, r3
   120d2:	f006 fba3 	bl	1881c <__aeabi_fcmpgt>
   120d6:	4603      	mov	r3, r0
   120d8:	2b00      	cmp	r3, #0
   120da:	d00b      	beq.n	120f4 <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   120dc:	f240 535c 	movw	r3, #1372	; 0x55c
   120e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120e4:	681b      	ldr	r3, [r3, #0]
   120e6:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   120ea:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   120ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120f2:	601a      	str	r2, [r3, #0]
}
   120f4:	3708      	adds	r7, #8
   120f6:	46bd      	mov	sp, r7
   120f8:	bd80      	pop	{r7, pc}
   120fa:	bf00      	nop
   120fc:	f3af 8000 	nop.w
   12100:	54442d18 	.word	0x54442d18
   12104:	401921fb 	.word	0x401921fb
   12108:	54442d18 	.word	0x54442d18
   1210c:	400921fb 	.word	0x400921fb
   12110:	54442d18 	.word	0x54442d18
   12114:	c00921fb 	.word	0xc00921fb

00012118 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   12118:	b5b0      	push	{r4, r5, r7, lr}
   1211a:	b082      	sub	sp, #8
   1211c:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   1211e:	f64c 331c 	movw	r3, #51996	; 0xcb1c
   12122:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12126:	681a      	ldr	r2, [r3, #0]
   12128:	f64c 0390 	movw	r3, #51344	; 0xc890
   1212c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12130:	681b      	ldr	r3, [r3, #0]
   12132:	4610      	mov	r0, r2
   12134:	4619      	mov	r1, r3
   12136:	f006 f8ab 	bl	18290 <__aeabi_fsub>
   1213a:	4603      	mov	r3, r0
   1213c:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   1213e:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12142:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12146:	781b      	ldrb	r3, [r3, #0]
   12148:	2b00      	cmp	r3, #0
   1214a:	f000 80a8 	beq.w	1229e <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   1214e:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
   12152:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12156:	881b      	ldrh	r3, [r3, #0]
   12158:	b29a      	uxth	r2, r3
   1215a:	f64c 037c 	movw	r3, #51324	; 0xc87c
   1215e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12162:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   12164:	f240 5364 	movw	r3, #1380	; 0x564
   12168:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1216c:	681a      	ldr	r2, [r3, #0]
   1216e:	f64c 039c 	movw	r3, #51356	; 0xc89c
   12172:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12176:	681b      	ldr	r3, [r3, #0]
   12178:	4610      	mov	r0, r2
   1217a:	4619      	mov	r1, r3
   1217c:	f006 f992 	bl	184a4 <__aeabi_fmul>
   12180:	4603      	mov	r3, r0
   12182:	4618      	mov	r0, r3
   12184:	6879      	ldr	r1, [r7, #4]
   12186:	f006 f885 	bl	18294 <__addsf3>
   1218a:	4603      	mov	r3, r0
   1218c:	461a      	mov	r2, r3
   1218e:	f240 5360 	movw	r3, #1376	; 0x560
   12192:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12196:	681b      	ldr	r3, [r3, #0]
   12198:	4610      	mov	r0, r2
   1219a:	4619      	mov	r1, r3
   1219c:	f006 f982 	bl	184a4 <__aeabi_fmul>
   121a0:	4603      	mov	r3, r0
   121a2:	461a      	mov	r2, r3
   121a4:	f64c 0378 	movw	r3, #51320	; 0xc878
   121a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121ac:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   121ae:	f64c 0378 	movw	r3, #51320	; 0xc878
   121b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121b6:	681a      	ldr	r2, [r3, #0]
   121b8:	f240 5368 	movw	r3, #1384	; 0x568
   121bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121c0:	681b      	ldr	r3, [r3, #0]
   121c2:	4610      	mov	r0, r2
   121c4:	4619      	mov	r1, r3
   121c6:	f006 fb29 	bl	1881c <__aeabi_fcmpgt>
   121ca:	4603      	mov	r3, r0
   121cc:	2b00      	cmp	r3, #0
   121ce:	d009      	beq.n	121e4 <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   121d0:	f240 5368 	movw	r3, #1384	; 0x568
   121d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121d8:	681a      	ldr	r2, [r3, #0]
   121da:	f64c 0378 	movw	r3, #51320	; 0xc878
   121de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121e2:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   121e4:	f64c 0378 	movw	r3, #51320	; 0xc878
   121e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121ec:	681a      	ldr	r2, [r3, #0]
   121ee:	f240 536c 	movw	r3, #1388	; 0x56c
   121f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121f6:	681b      	ldr	r3, [r3, #0]
   121f8:	4610      	mov	r0, r2
   121fa:	4619      	mov	r1, r3
   121fc:	f006 faf0 	bl	187e0 <__aeabi_fcmplt>
   12200:	4603      	mov	r3, r0
   12202:	2b00      	cmp	r3, #0
   12204:	d009      	beq.n	1221a <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   12206:	f240 536c 	movw	r3, #1388	; 0x56c
   1220a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1220e:	681a      	ldr	r2, [r3, #0]
   12210:	f64c 0378 	movw	r3, #51320	; 0xc878
   12214:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12218:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   1221a:	f64c 039c 	movw	r3, #51356	; 0xc89c
   1221e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12222:	681b      	ldr	r3, [r3, #0]
   12224:	4618      	mov	r0, r3
   12226:	6879      	ldr	r1, [r7, #4]
   12228:	f006 f834 	bl	18294 <__addsf3>
   1222c:	4603      	mov	r3, r0
   1222e:	461a      	mov	r2, r3
   12230:	f64c 039c 	movw	r3, #51356	; 0xc89c
   12234:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12238:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   1223a:	f64c 039c 	movw	r3, #51356	; 0xc89c
   1223e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12242:	681b      	ldr	r3, [r3, #0]
   12244:	4618      	mov	r0, r3
   12246:	f04f 0100 	mov.w	r1, #0
   1224a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1224e:	f006 fae5 	bl	1881c <__aeabi_fcmpgt>
   12252:	4603      	mov	r3, r0
   12254:	2b00      	cmp	r3, #0
   12256:	d008      	beq.n	1226a <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   12258:	f64c 039c 	movw	r3, #51356	; 0xc89c
   1225c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12260:	f04f 0200 	mov.w	r2, #0
   12264:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   12268:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   1226a:	f64c 039c 	movw	r3, #51356	; 0xc89c
   1226e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12272:	681b      	ldr	r3, [r3, #0]
   12274:	4618      	mov	r0, r3
   12276:	f04f 0100 	mov.w	r1, #0
   1227a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1227e:	f006 faaf 	bl	187e0 <__aeabi_fcmplt>
   12282:	4603      	mov	r3, r0
   12284:	2b00      	cmp	r3, #0
   12286:	d100      	bne.n	1228a <climb_pid_run+0x172>
   12288:	e109      	b.n	1249e <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   1228a:	f64c 039c 	movw	r3, #51356	; 0xc89c
   1228e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12292:	f04f 0200 	mov.w	r2, #0
   12296:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   1229a:	601a      	str	r2, [r3, #0]
   1229c:	e0ff      	b.n	1249e <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   1229e:	f64c 0390 	movw	r3, #51344	; 0xc890
   122a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122a6:	681b      	ldr	r3, [r3, #0]
   122a8:	4618      	mov	r0, r3
   122aa:	f04f 0100 	mov.w	r1, #0
   122ae:	f006 fab5 	bl	1881c <__aeabi_fcmpgt>
   122b2:	4603      	mov	r3, r0
   122b4:	2b00      	cmp	r3, #0
   122b6:	d010      	beq.n	122da <climb_pid_run+0x1c2>
   122b8:	f64c 0390 	movw	r3, #51344	; 0xc890
   122bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122c0:	681a      	ldr	r2, [r3, #0]
   122c2:	f240 5354 	movw	r3, #1364	; 0x554
   122c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122ca:	681b      	ldr	r3, [r3, #0]
   122cc:	4610      	mov	r0, r2
   122ce:	4619      	mov	r1, r3
   122d0:	f006 f8e8 	bl	184a4 <__aeabi_fmul>
   122d4:	4603      	mov	r3, r0
   122d6:	461a      	mov	r2, r3
   122d8:	e001      	b.n	122de <climb_pid_run+0x1c6>
   122da:	f04f 0200 	mov.w	r2, #0
   122de:	f64c 0388 	movw	r3, #51336	; 0xc888
   122e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122e6:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   122e8:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   122ec:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   122f0:	f64c 0398 	movw	r3, #51352	; 0xc898
   122f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122f8:	681b      	ldr	r3, [r3, #0]
   122fa:	4610      	mov	r0, r2
   122fc:	4619      	mov	r1, r3
   122fe:	f006 f8d1 	bl	184a4 <__aeabi_fmul>
   12302:	4603      	mov	r3, r0
   12304:	4618      	mov	r0, r3
   12306:	6879      	ldr	r1, [r7, #4]
   12308:	f005 ffc4 	bl	18294 <__addsf3>
   1230c:	4603      	mov	r3, r0
   1230e:	461a      	mov	r2, r3
   12310:	f24c 238f 	movw	r3, #49807	; 0xc28f
   12314:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   12318:	4610      	mov	r0, r2
   1231a:	4619      	mov	r1, r3
   1231c:	f006 f8c2 	bl	184a4 <__aeabi_fmul>
   12320:	4603      	mov	r3, r0
   12322:	4618      	mov	r0, r3
   12324:	f005 fc2a 	bl	17b7c <__aeabi_f2d>
   12328:	4602      	mov	r2, r0
   1232a:	460b      	mov	r3, r1
   1232c:	4610      	mov	r0, r2
   1232e:	4619      	mov	r1, r3
   12330:	a35d      	add	r3, pc, #372	; (adr r3, 124a8 <climb_pid_run+0x390>)
   12332:	e9d3 2300 	ldrd	r2, r3, [r3]
   12336:	f005 fac3 	bl	178c0 <__adddf3>
   1233a:	4602      	mov	r2, r0
   1233c:	460b      	mov	r3, r1
   1233e:	4614      	mov	r4, r2
   12340:	461d      	mov	r5, r3
   12342:	f64c 0390 	movw	r3, #51344	; 0xc890
   12346:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1234a:	681b      	ldr	r3, [r3, #0]
   1234c:	4618      	mov	r0, r3
   1234e:	f005 fc15 	bl	17b7c <__aeabi_f2d>
   12352:	4602      	mov	r2, r0
   12354:	460b      	mov	r3, r1
   12356:	4610      	mov	r0, r2
   12358:	4619      	mov	r1, r3
   1235a:	a355      	add	r3, pc, #340	; (adr r3, 124b0 <climb_pid_run+0x398>)
   1235c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12360:	f005 fc60 	bl	17c24 <__aeabi_dmul>
   12364:	4602      	mov	r2, r0
   12366:	460b      	mov	r3, r1
   12368:	4620      	mov	r0, r4
   1236a:	4629      	mov	r1, r5
   1236c:	f005 faa8 	bl	178c0 <__adddf3>
   12370:	4602      	mov	r2, r0
   12372:	460b      	mov	r3, r1
   12374:	4610      	mov	r0, r2
   12376:	4619      	mov	r1, r3
   12378:	f005 ff36 	bl	181e8 <__aeabi_d2f>
   1237c:	4603      	mov	r3, r0
   1237e:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   12380:	f64c 0398 	movw	r3, #51352	; 0xc898
   12384:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12388:	681b      	ldr	r3, [r3, #0]
   1238a:	4618      	mov	r0, r3
   1238c:	6879      	ldr	r1, [r7, #4]
   1238e:	f005 ff81 	bl	18294 <__addsf3>
   12392:	4603      	mov	r3, r0
   12394:	461a      	mov	r2, r3
   12396:	f64c 0398 	movw	r3, #51352	; 0xc898
   1239a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1239e:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   123a0:	f64c 0398 	movw	r3, #51352	; 0xc898
   123a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123a8:	681b      	ldr	r3, [r3, #0]
   123aa:	4618      	mov	r0, r3
   123ac:	f04f 0100 	mov.w	r1, #0
   123b0:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   123b4:	f006 fa32 	bl	1881c <__aeabi_fcmpgt>
   123b8:	4603      	mov	r3, r0
   123ba:	2b00      	cmp	r3, #0
   123bc:	d008      	beq.n	123d0 <climb_pid_run+0x2b8>
   123be:	f64c 0398 	movw	r3, #51352	; 0xc898
   123c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123c6:	f04f 0200 	mov.w	r2, #0
   123ca:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   123ce:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   123d0:	f64c 0398 	movw	r3, #51352	; 0xc898
   123d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123d8:	681b      	ldr	r3, [r3, #0]
   123da:	4618      	mov	r0, r3
   123dc:	f04f 0100 	mov.w	r1, #0
   123e0:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   123e4:	f006 f9fc 	bl	187e0 <__aeabi_fcmplt>
   123e8:	4603      	mov	r3, r0
   123ea:	2b00      	cmp	r3, #0
   123ec:	d008      	beq.n	12400 <climb_pid_run+0x2e8>
   123ee:	f64c 0398 	movw	r3, #51352	; 0xc898
   123f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123f6:	f04f 0200 	mov.w	r2, #0
   123fa:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   123fe:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   12400:	6838      	ldr	r0, [r7, #0]
   12402:	f04f 0100 	mov.w	r1, #0
   12406:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1240a:	f006 f84b 	bl	184a4 <__aeabi_fmul>
   1240e:	4603      	mov	r3, r0
   12410:	4618      	mov	r0, r3
   12412:	f04f 0100 	mov.w	r1, #0
   12416:	f006 f9e3 	bl	187e0 <__aeabi_fcmplt>
   1241a:	4603      	mov	r3, r0
   1241c:	2b00      	cmp	r3, #0
   1241e:	d001      	beq.n	12424 <climb_pid_run+0x30c>
   12420:	2200      	movs	r2, #0
   12422:	e022      	b.n	1246a <climb_pid_run+0x352>
   12424:	6838      	ldr	r0, [r7, #0]
   12426:	f04f 0100 	mov.w	r1, #0
   1242a:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1242e:	f006 f839 	bl	184a4 <__aeabi_fmul>
   12432:	4603      	mov	r3, r0
   12434:	4618      	mov	r0, r3
   12436:	f04f 0100 	mov.w	r1, #0
   1243a:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1243e:	f006 f9ed 	bl	1881c <__aeabi_fcmpgt>
   12442:	4603      	mov	r3, r0
   12444:	2b00      	cmp	r3, #0
   12446:	d002      	beq.n	1244e <climb_pid_run+0x336>
   12448:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1244c:	e00c      	b.n	12468 <climb_pid_run+0x350>
   1244e:	6838      	ldr	r0, [r7, #0]
   12450:	f04f 0100 	mov.w	r1, #0
   12454:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12458:	f006 f824 	bl	184a4 <__aeabi_fmul>
   1245c:	4603      	mov	r3, r0
   1245e:	4618      	mov	r0, r3
   12460:	f006 f9e6 	bl	18830 <__aeabi_f2iz>
   12464:	4603      	mov	r3, r0
   12466:	b29b      	uxth	r3, r3
   12468:	b29a      	uxth	r2, r3
   1246a:	f64c 037c 	movw	r3, #51324	; 0xc87c
   1246e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12472:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   12474:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12478:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1247c:	681a      	ldr	r2, [r3, #0]
   1247e:	f64c 0388 	movw	r3, #51336	; 0xc888
   12482:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12486:	681b      	ldr	r3, [r3, #0]
   12488:	4610      	mov	r0, r2
   1248a:	4619      	mov	r1, r3
   1248c:	f005 ff02 	bl	18294 <__addsf3>
   12490:	4603      	mov	r3, r0
   12492:	461a      	mov	r2, r3
   12494:	f64c 0378 	movw	r3, #51320	; 0xc878
   12498:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1249c:	601a      	str	r2, [r3, #0]
  }
}
   1249e:	3708      	adds	r7, #8
   124a0:	46bd      	mov	sp, r7
   124a2:	bdb0      	pop	{r4, r5, r7, pc}
   124a4:	f3af 8000 	nop.w
   124a8:	3d70a3d7 	.word	0x3d70a3d7
   124ac:	3fd3d70a 	.word	0x3fd3d70a
   124b0:	9999999a 	.word	0x9999999a
   124b4:	3fc99999 	.word	0x3fc99999

000124b8 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   124b8:	b580      	push	{r7, lr}
   124ba:	b082      	sub	sp, #8
   124bc:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   124be:	f64c 3304 	movw	r3, #51972	; 0xcb04
   124c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124c6:	681a      	ldr	r2, [r3, #0]
   124c8:	f240 5374 	movw	r3, #1396	; 0x574
   124cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124d0:	681b      	ldr	r3, [r3, #0]
   124d2:	4610      	mov	r0, r2
   124d4:	4619      	mov	r1, r3
   124d6:	f005 fedb 	bl	18290 <__aeabi_fsub>
   124da:	4603      	mov	r3, r0
   124dc:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   124de:	f240 5370 	movw	r3, #1392	; 0x570
   124e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124e6:	681b      	ldr	r3, [r3, #0]
   124e8:	4618      	mov	r0, r3
   124ea:	6879      	ldr	r1, [r7, #4]
   124ec:	f005 ffda 	bl	184a4 <__aeabi_fmul>
   124f0:	4603      	mov	r3, r0
   124f2:	461a      	mov	r2, r3
   124f4:	f64c 0394 	movw	r3, #51348	; 0xc894
   124f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124fc:	681b      	ldr	r3, [r3, #0]
   124fe:	4610      	mov	r0, r2
   12500:	4619      	mov	r1, r3
   12502:	f005 fec7 	bl	18294 <__addsf3>
   12506:	4603      	mov	r3, r0
   12508:	461a      	mov	r2, r3
   1250a:	f64c 0390 	movw	r3, #51344	; 0xc890
   1250e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12512:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   12514:	f64c 0390 	movw	r3, #51344	; 0xc890
   12518:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1251c:	681b      	ldr	r3, [r3, #0]
   1251e:	4618      	mov	r0, r3
   12520:	f04f 0100 	mov.w	r1, #0
   12524:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   12528:	f006 f95a 	bl	187e0 <__aeabi_fcmplt>
   1252c:	4603      	mov	r3, r0
   1252e:	2b00      	cmp	r3, #0
   12530:	d008      	beq.n	12544 <altitude_pid_run+0x8c>
   12532:	f64c 0390 	movw	r3, #51344	; 0xc890
   12536:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1253a:	f04f 0200 	mov.w	r2, #0
   1253e:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   12542:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   12544:	f64c 0390 	movw	r3, #51344	; 0xc890
   12548:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1254c:	681b      	ldr	r3, [r3, #0]
   1254e:	4618      	mov	r0, r3
   12550:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   12554:	f006 f962 	bl	1881c <__aeabi_fcmpgt>
   12558:	4603      	mov	r3, r0
   1255a:	2b00      	cmp	r3, #0
   1255c:	d006      	beq.n	1256c <altitude_pid_run+0xb4>
   1255e:	f64c 0390 	movw	r3, #51344	; 0xc890
   12562:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12566:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   1256a:	601a      	str	r2, [r3, #0]
}
   1256c:	3708      	adds	r7, #8
   1256e:	46bd      	mov	sp, r7
   12570:	bd80      	pop	{r7, pc}
   12572:	bf00      	nop
   12574:	f3af 8000 	nop.w

00012578 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   12578:	b5f0      	push	{r4, r5, r6, r7, lr}
   1257a:	b08b      	sub	sp, #44	; 0x2c
   1257c:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   1257e:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12582:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12586:	781b      	ldrb	r3, [r3, #0]
   12588:	2b00      	cmp	r3, #0
   1258a:	f040 8169 	bne.w	12860 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   1258e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12592:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12596:	781b      	ldrb	r3, [r3, #0]
   12598:	2b00      	cmp	r3, #0
   1259a:	d13c      	bne.n	12616 <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   1259c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   125a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125a4:	2200      	movs	r2, #0
   125a6:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   125a8:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   125ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125b0:	881b      	ldrh	r3, [r3, #0]
   125b2:	2b00      	cmp	r3, #0
   125b4:	d000      	beq.n	125b8 <auto_nav+0x40>
   125b6:	e03d      	b.n	12634 <auto_nav+0xbc>
	else NextStage(); 
   125b8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   125bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125c0:	781b      	ldrb	r3, [r3, #0]
   125c2:	3301      	adds	r3, #1
   125c4:	b2da      	uxtb	r2, r3
   125c6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   125ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125ce:	701a      	strb	r2, [r3, #0]
   125d0:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   125d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125d8:	681a      	ldr	r2, [r3, #0]
   125da:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   125de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125e2:	601a      	str	r2, [r3, #0]
   125e4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   125e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125ec:	681a      	ldr	r2, [r3, #0]
   125ee:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   125f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125f6:	601a      	str	r2, [r3, #0]
   125f8:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   125fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12600:	2200      	movs	r2, #0
   12602:	801a      	strh	r2, [r3, #0]
   12604:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12608:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1260c:	f04f 0200 	mov.w	r2, #0
   12610:	601a      	str	r2, [r3, #0]
   12612:	f002 b883 	b.w	1471c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   12616:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1261a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1261e:	781b      	ldrb	r3, [r3, #0]
   12620:	2b01      	cmp	r3, #1
   12622:	d100      	bne.n	12626 <auto_nav+0xae>
    {   Goto(while_1)}
   12624:	e7ba      	b.n	1259c <auto_nav+0x24>
    else if (nav_stage == 2)
   12626:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1262a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1262e:	781b      	ldrb	r3, [r3, #0]
   12630:	2b02      	cmp	r3, #2
   12632:	d162      	bne.n	126fa <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   12634:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12638:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1263c:	2202      	movs	r2, #2
   1263e:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   12640:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   12644:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12648:	881b      	ldrh	r3, [r3, #0]
   1264a:	2b08      	cmp	r3, #8
   1264c:	d92e      	bls.n	126ac <auto_nav+0x134>
   1264e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12652:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12656:	781b      	ldrb	r3, [r3, #0]
   12658:	3301      	adds	r3, #1
   1265a:	b2da      	uxtb	r2, r3
   1265c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12660:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12664:	701a      	strb	r2, [r3, #0]
   12666:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1266a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1266e:	681a      	ldr	r2, [r3, #0]
   12670:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12674:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12678:	601a      	str	r2, [r3, #0]
   1267a:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1267e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12682:	681a      	ldr	r2, [r3, #0]
   12684:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12688:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1268c:	601a      	str	r2, [r3, #0]
   1268e:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12692:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12696:	2200      	movs	r2, #0
   12698:	801a      	strh	r2, [r3, #0]
   1269a:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   1269e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126a2:	f04f 0200 	mov.w	r2, #0
   126a6:	601a      	str	r2, [r3, #0]
   126a8:	f002 b838 	b.w	1471c <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   126ac:	f64c 038c 	movw	r3, #51340	; 0xc88c
   126b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126b4:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   126b8:	f2c4 0296 	movt	r2, #16534	; 0x4096
   126bc:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   126be:	f24c 532f 	movw	r3, #50479	; 0xc52f
   126c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126c6:	2200      	movs	r2, #0
   126c8:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   126ca:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   126ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126d2:	f649 129a 	movw	r2, #39322	; 0x999a
   126d6:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   126da:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   126dc:	f24c 532d 	movw	r3, #50477	; 0xc52d
   126e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126e4:	2201      	movs	r2, #1
   126e6:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   126e8:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
   126ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126f0:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   126f4:	801a      	strh	r2, [r3, #0]
        }
        return;
   126f6:	f002 b811 	b.w	1471c <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   126fa:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   126fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12702:	781b      	ldrb	r3, [r3, #0]
   12704:	2b03      	cmp	r3, #3
   12706:	d168      	bne.n	127da <auto_nav+0x262>
     {
	nav_stage = 3;	
   12708:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1270c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12710:	2203      	movs	r2, #3
   12712:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   12714:	f64c 3304 	movw	r3, #51972	; 0xcb04
   12718:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1271c:	681b      	ldr	r3, [r3, #0]
   1271e:	4618      	mov	r0, r3
   12720:	f04f 0100 	mov.w	r1, #0
   12724:	f2c4 3116 	movt	r1, #17174	; 0x4316
   12728:	f006 f878 	bl	1881c <__aeabi_fcmpgt>
   1272c:	4603      	mov	r3, r0
   1272e:	2b00      	cmp	r3, #0
   12730:	d02e      	beq.n	12790 <auto_nav+0x218>
   12732:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12736:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1273a:	781b      	ldrb	r3, [r3, #0]
   1273c:	3301      	adds	r3, #1
   1273e:	b2da      	uxtb	r2, r3
   12740:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12744:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12748:	701a      	strb	r2, [r3, #0]
   1274a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1274e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12752:	681a      	ldr	r2, [r3, #0]
   12754:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12758:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1275c:	601a      	str	r2, [r3, #0]
   1275e:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12762:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12766:	681a      	ldr	r2, [r3, #0]
   12768:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1276c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12770:	601a      	str	r2, [r3, #0]
   12772:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12776:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1277a:	2200      	movs	r2, #0
   1277c:	801a      	strh	r2, [r3, #0]
   1277e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12782:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12786:	f04f 0200 	mov.w	r2, #0
   1278a:	601a      	str	r2, [r3, #0]
   1278c:	f001 bfc6 	b.w	1471c <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12790:	f64c 038c 	movw	r3, #51340	; 0xc88c
   12794:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12798:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   1279c:	f2c4 0296 	movt	r2, #16534	; 0x4096
   127a0:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   127a2:	f24c 532f 	movw	r3, #50479	; 0xc52f
   127a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127aa:	2200      	movs	r2, #0
   127ac:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   127ae:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   127b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127b6:	f04f 0200 	mov.w	r2, #0
   127ba:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   127bc:	f24c 532d 	movw	r3, #50477	; 0xc52d
   127c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127c4:	2202      	movs	r2, #2
   127c6:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   127c8:	f64c 0390 	movw	r3, #51344	; 0xc890
   127cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127d0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   127d4:	601a      	str	r2, [r3, #0]
        }
        return;
   127d6:	f001 bfa1 	b.w	1471c <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   127da:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   127de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127e2:	781b      	ldrb	r3, [r3, #0]
   127e4:	2b04      	cmp	r3, #4
   127e6:	f041 8799 	bne.w	1471c <auto_nav+0x21a4>
        NextBlock()
   127ea:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   127ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127f2:	781b      	ldrb	r3, [r3, #0]
   127f4:	3301      	adds	r3, #1
   127f6:	b2da      	uxtb	r2, r3
   127f8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   127fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12800:	701a      	strb	r2, [r3, #0]
   12802:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12806:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1280a:	2200      	movs	r2, #0
   1280c:	701a      	strb	r2, [r3, #0]
   1280e:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   12812:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12816:	2200      	movs	r2, #0
   12818:	801a      	strh	r2, [r3, #0]
   1281a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1281e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12822:	681a      	ldr	r2, [r3, #0]
   12824:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12828:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1282c:	601a      	str	r2, [r3, #0]
   1282e:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12832:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12836:	681a      	ldr	r2, [r3, #0]
   12838:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1283c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12840:	601a      	str	r2, [r3, #0]
   12842:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12846:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1284a:	2200      	movs	r2, #0
   1284c:	801a      	strh	r2, [r3, #0]
   1284e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12852:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12856:	f04f 0200 	mov.w	r2, #0
   1285a:	601a      	str	r2, [r3, #0]
   1285c:	f001 bf5e 	b.w	1471c <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   12860:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12864:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12868:	781b      	ldrb	r3, [r3, #0]
   1286a:	2b01      	cmp	r3, #1
   1286c:	f040 81bc 	bne.w	12be8 <auto_nav+0x670>
{
    nav_block = 1;
   12870:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12874:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12878:	2201      	movs	r2, #1
   1287a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   1287c:	f24c 5330 	movw	r3, #50480	; 0xc530
   12880:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12884:	781b      	ldrb	r3, [r3, #0]
   12886:	2b00      	cmp	r3, #0
   12888:	d007      	beq.n	1289a <auto_nav+0x322>
   1288a:	f24c 5330 	movw	r3, #50480	; 0xc530
   1288e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12892:	2200      	movs	r2, #0
   12894:	701a      	strb	r2, [r3, #0]
   12896:	2301      	movs	r3, #1
   12898:	e000      	b.n	1289c <auto_nav+0x324>
   1289a:	2300      	movs	r3, #0
   1289c:	2b00      	cmp	r3, #0
   1289e:	d034      	beq.n	1290a <auto_nav+0x392>
	{ GotoBlock(2) }
   128a0:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   128a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128a8:	2202      	movs	r2, #2
   128aa:	701a      	strb	r2, [r3, #0]
   128ac:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   128b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128b4:	2200      	movs	r2, #0
   128b6:	701a      	strb	r2, [r3, #0]
   128b8:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   128bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128c0:	2200      	movs	r2, #0
   128c2:	801a      	strh	r2, [r3, #0]
   128c4:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   128c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128cc:	681a      	ldr	r2, [r3, #0]
   128ce:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   128d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128d6:	601a      	str	r2, [r3, #0]
   128d8:	f64c 3300 	movw	r3, #51968	; 0xcb00
   128dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128e0:	681a      	ldr	r2, [r3, #0]
   128e2:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   128e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128ea:	601a      	str	r2, [r3, #0]
   128ec:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   128f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128f4:	2200      	movs	r2, #0
   128f6:	801a      	strh	r2, [r3, #0]
   128f8:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   128fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12900:	f04f 0200 	mov.w	r2, #0
   12904:	601a      	str	r2, [r3, #0]
   12906:	f001 bf09 	b.w	1471c <auto_nav+0x21a4>
    if(nav_stage == 0)
   1290a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1290e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12912:	781b      	ldrb	r3, [r3, #0]
   12914:	2b00      	cmp	r3, #0
   12916:	d12e      	bne.n	12976 <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   12918:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1291c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12920:	781b      	ldrb	r3, [r3, #0]
   12922:	3301      	adds	r3, #1
   12924:	b2da      	uxtb	r2, r3
   12926:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1292a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1292e:	701a      	strb	r2, [r3, #0]
   12930:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12934:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12938:	681a      	ldr	r2, [r3, #0]
   1293a:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1293e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12942:	601a      	str	r2, [r3, #0]
   12944:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12948:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1294c:	681a      	ldr	r2, [r3, #0]
   1294e:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12952:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12956:	601a      	str	r2, [r3, #0]
   12958:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1295c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12960:	2200      	movs	r2, #0
   12962:	801a      	strh	r2, [r3, #0]
   12964:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12968:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1296c:	f04f 0200 	mov.w	r2, #0
   12970:	601a      	str	r2, [r3, #0]
   12972:	f001 bed3 	b.w	1471c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   12976:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1297a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1297e:	781b      	ldrb	r3, [r3, #0]
   12980:	2b01      	cmp	r3, #1
   12982:	d169      	bne.n	12a58 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   12984:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12988:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1298c:	2201      	movs	r2, #1
   1298e:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   12990:	2001      	movs	r0, #1
   12992:	f001 fed1 	bl	14738 <approaching>
   12996:	4603      	mov	r3, r0
   12998:	2b00      	cmp	r3, #0
   1299a:	d034      	beq.n	12a06 <auto_nav+0x48e>
   1299c:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   129a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129a4:	2201      	movs	r2, #1
   129a6:	701a      	strb	r2, [r3, #0]
   129a8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   129ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129b0:	781b      	ldrb	r3, [r3, #0]
   129b2:	3301      	adds	r3, #1
   129b4:	b2da      	uxtb	r2, r3
   129b6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   129ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129be:	701a      	strb	r2, [r3, #0]
   129c0:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   129c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129c8:	681a      	ldr	r2, [r3, #0]
   129ca:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   129ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129d2:	601a      	str	r2, [r3, #0]
   129d4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   129d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129dc:	681a      	ldr	r2, [r3, #0]
   129de:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   129e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129e6:	601a      	str	r2, [r3, #0]
   129e8:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   129ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129f0:	2200      	movs	r2, #0
   129f2:	801a      	strh	r2, [r3, #0]
   129f4:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   129f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129fc:	f04f 0200 	mov.w	r2, #0
   12a00:	601a      	str	r2, [r3, #0]
   12a02:	f001 be8b 	b.w	1471c <auto_nav+0x21a4>
            fly_to(1);
   12a06:	2001      	movs	r0, #1
   12a08:	f001 ffca 	bl	149a0 <fly_to>
            auto_pitch = FALSE;
   12a0c:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a14:	2200      	movs	r2, #0
   12a16:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12a18:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a20:	f04f 0200 	mov.w	r2, #0
   12a24:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12a26:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a2e:	2203      	movs	r2, #3
   12a30:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12a32:	f240 5378 	movw	r3, #1400	; 0x578
   12a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a3a:	695a      	ldr	r2, [r3, #20]
   12a3c:	f240 5374 	movw	r3, #1396	; 0x574
   12a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a44:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12a46:	f64c 0394 	movw	r3, #51348	; 0xc894
   12a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a4e:	f04f 0200 	mov.w	r2, #0
   12a52:	601a      	str	r2, [r3, #0]
          }
          return;
   12a54:	f001 be62 	b.w	1471c <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12a58:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a60:	781b      	ldrb	r3, [r3, #0]
   12a62:	2b02      	cmp	r3, #2
   12a64:	d169      	bne.n	12b3a <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   12a66:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a6e:	2202      	movs	r2, #2
   12a70:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12a72:	2004      	movs	r0, #4
   12a74:	f001 fe60 	bl	14738 <approaching>
   12a78:	4603      	mov	r3, r0
   12a7a:	2b00      	cmp	r3, #0
   12a7c:	d034      	beq.n	12ae8 <auto_nav+0x570>
   12a7e:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a86:	2204      	movs	r2, #4
   12a88:	701a      	strb	r2, [r3, #0]
   12a8a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a92:	781b      	ldrb	r3, [r3, #0]
   12a94:	3301      	adds	r3, #1
   12a96:	b2da      	uxtb	r2, r3
   12a98:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aa0:	701a      	strb	r2, [r3, #0]
   12aa2:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aaa:	681a      	ldr	r2, [r3, #0]
   12aac:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ab4:	601a      	str	r2, [r3, #0]
   12ab6:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12abe:	681a      	ldr	r2, [r3, #0]
   12ac0:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ac8:	601a      	str	r2, [r3, #0]
   12aca:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12ace:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ad2:	2200      	movs	r2, #0
   12ad4:	801a      	strh	r2, [r3, #0]
   12ad6:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12ada:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ade:	f04f 0200 	mov.w	r2, #0
   12ae2:	601a      	str	r2, [r3, #0]
   12ae4:	f001 be1a 	b.w	1471c <auto_nav+0x21a4>
            fly_to(4);
   12ae8:	2004      	movs	r0, #4
   12aea:	f001 ff59 	bl	149a0 <fly_to>
            auto_pitch = FALSE;
   12aee:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12af6:	2200      	movs	r2, #0
   12af8:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12afa:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12afe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b02:	f04f 0200 	mov.w	r2, #0
   12b06:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12b08:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b10:	2203      	movs	r2, #3
   12b12:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12b14:	f240 5378 	movw	r3, #1400	; 0x578
   12b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12b1e:	f240 5374 	movw	r3, #1396	; 0x574
   12b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b26:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12b28:	f64c 0394 	movw	r3, #51348	; 0xc894
   12b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b30:	f04f 0200 	mov.w	r2, #0
   12b34:	601a      	str	r2, [r3, #0]
          }
          return;
   12b36:	f001 bdf1 	b.w	1471c <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12b3a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b42:	781b      	ldrb	r3, [r3, #0]
   12b44:	2b03      	cmp	r3, #3
   12b46:	d106      	bne.n	12b56 <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12b48:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b50:	2203      	movs	r2, #3
   12b52:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   12b54:	e6e0      	b.n	12918 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   12b56:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b5e:	781b      	ldrb	r3, [r3, #0]
   12b60:	2b04      	cmp	r3, #4
   12b62:	f041 85db 	bne.w	1471c <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   12b66:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b6e:	2204      	movs	r2, #4
   12b70:	701a      	strb	r2, [r3, #0]
        NextBlock()
   12b72:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12b76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b7a:	781b      	ldrb	r3, [r3, #0]
   12b7c:	3301      	adds	r3, #1
   12b7e:	b2da      	uxtb	r2, r3
   12b80:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b88:	701a      	strb	r2, [r3, #0]
   12b8a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b92:	2200      	movs	r2, #0
   12b94:	701a      	strb	r2, [r3, #0]
   12b96:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   12b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b9e:	2200      	movs	r2, #0
   12ba0:	801a      	strh	r2, [r3, #0]
   12ba2:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12ba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12baa:	681a      	ldr	r2, [r3, #0]
   12bac:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bb4:	601a      	str	r2, [r3, #0]
   12bb6:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bbe:	681a      	ldr	r2, [r3, #0]
   12bc0:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bc8:	601a      	str	r2, [r3, #0]
   12bca:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12bce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bd2:	2200      	movs	r2, #0
   12bd4:	801a      	strh	r2, [r3, #0]
   12bd6:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12bda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bde:	f04f 0200 	mov.w	r2, #0
   12be2:	601a      	str	r2, [r3, #0]
   12be4:	f001 bd9a 	b.w	1471c <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   12be8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12bec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bf0:	781b      	ldrb	r3, [r3, #0]
   12bf2:	2b02      	cmp	r3, #2
   12bf4:	f040 8392 	bne.w	1331c <auto_nav+0xda4>
{
	nav_block = 2;
   12bf8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c00:	2202      	movs	r2, #2
   12c02:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   12c04:	f24c 5330 	movw	r3, #50480	; 0xc530
   12c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c0c:	781b      	ldrb	r3, [r3, #0]
   12c0e:	2b00      	cmp	r3, #0
   12c10:	d007      	beq.n	12c22 <auto_nav+0x6aa>
   12c12:	f24c 5330 	movw	r3, #50480	; 0xc530
   12c16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c1a:	2200      	movs	r2, #0
   12c1c:	701a      	strb	r2, [r3, #0]
   12c1e:	2301      	movs	r3, #1
   12c20:	e000      	b.n	12c24 <auto_nav+0x6ac>
   12c22:	2300      	movs	r3, #0
   12c24:	2b00      	cmp	r3, #0
   12c26:	d034      	beq.n	12c92 <auto_nav+0x71a>
   12c28:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12c2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c30:	2203      	movs	r2, #3
   12c32:	701a      	strb	r2, [r3, #0]
   12c34:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c3c:	2200      	movs	r2, #0
   12c3e:	701a      	strb	r2, [r3, #0]
   12c40:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   12c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c48:	2200      	movs	r2, #0
   12c4a:	801a      	strh	r2, [r3, #0]
   12c4c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12c50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c54:	681a      	ldr	r2, [r3, #0]
   12c56:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c5e:	601a      	str	r2, [r3, #0]
   12c60:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12c64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c68:	681a      	ldr	r2, [r3, #0]
   12c6a:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12c6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c72:	601a      	str	r2, [r3, #0]
   12c74:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c7c:	2200      	movs	r2, #0
   12c7e:	801a      	strh	r2, [r3, #0]
   12c80:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c88:	f04f 0200 	mov.w	r2, #0
   12c8c:	601a      	str	r2, [r3, #0]
   12c8e:	f001 bd45 	b.w	1471c <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   12c92:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c9a:	781b      	ldrb	r3, [r3, #0]
   12c9c:	2b00      	cmp	r3, #0
   12c9e:	d134      	bne.n	12d0a <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   12ca0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12ca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ca8:	2200      	movs	r2, #0
   12caa:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   12cac:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cb4:	781b      	ldrb	r3, [r3, #0]
   12cb6:	3301      	adds	r3, #1
   12cb8:	b2da      	uxtb	r2, r3
   12cba:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12cbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cc2:	701a      	strb	r2, [r3, #0]
   12cc4:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ccc:	681a      	ldr	r2, [r3, #0]
   12cce:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12cd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cd6:	601a      	str	r2, [r3, #0]
   12cd8:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ce0:	681a      	ldr	r2, [r3, #0]
   12ce2:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12ce6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cea:	601a      	str	r2, [r3, #0]
   12cec:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12cf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cf4:	2200      	movs	r2, #0
   12cf6:	801a      	strh	r2, [r3, #0]
   12cf8:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d00:	f04f 0200 	mov.w	r2, #0
   12d04:	601a      	str	r2, [r3, #0]
   12d06:	f001 bd09 	b.w	1471c <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   12d0a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d12:	781b      	ldrb	r3, [r3, #0]
   12d14:	2b01      	cmp	r3, #1
   12d16:	d169      	bne.n	12dec <auto_nav+0x874>
    {
         nav_stage =1;
   12d18:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12d1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d20:	2201      	movs	r2, #1
   12d22:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   12d24:	2006      	movs	r0, #6
   12d26:	f001 fd07 	bl	14738 <approaching>
   12d2a:	4603      	mov	r3, r0
   12d2c:	2b00      	cmp	r3, #0
   12d2e:	d034      	beq.n	12d9a <auto_nav+0x822>
   12d30:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d38:	2206      	movs	r2, #6
   12d3a:	701a      	strb	r2, [r3, #0]
   12d3c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d44:	781b      	ldrb	r3, [r3, #0]
   12d46:	3301      	adds	r3, #1
   12d48:	b2da      	uxtb	r2, r3
   12d4a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d52:	701a      	strb	r2, [r3, #0]
   12d54:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d5c:	681a      	ldr	r2, [r3, #0]
   12d5e:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d66:	601a      	str	r2, [r3, #0]
   12d68:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d70:	681a      	ldr	r2, [r3, #0]
   12d72:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12d76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d7a:	601a      	str	r2, [r3, #0]
   12d7c:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12d80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d84:	2200      	movs	r2, #0
   12d86:	801a      	strh	r2, [r3, #0]
   12d88:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12d8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d90:	f04f 0200 	mov.w	r2, #0
   12d94:	601a      	str	r2, [r3, #0]
   12d96:	f001 bcc1 	b.w	1471c <auto_nav+0x21a4>
            fly_to(6);
   12d9a:	2006      	movs	r0, #6
   12d9c:	f001 fe00 	bl	149a0 <fly_to>
            auto_pitch = FALSE;
   12da0:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12da4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12da8:	2200      	movs	r2, #0
   12daa:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12dac:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12db4:	f04f 0200 	mov.w	r2, #0
   12db8:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12dba:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dc2:	2203      	movs	r2, #3
   12dc4:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   12dc6:	f240 5378 	movw	r3, #1400	; 0x578
   12dca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   12dd0:	f240 5374 	movw	r3, #1396	; 0x574
   12dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dd8:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12dda:	f64c 0394 	movw	r3, #51348	; 0xc894
   12dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12de2:	f04f 0200 	mov.w	r2, #0
   12de6:	601a      	str	r2, [r3, #0]
          }
          return;
   12de8:	f001 bc98 	b.w	1471c <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12dec:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12df0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12df4:	781b      	ldrb	r3, [r3, #0]
   12df6:	2b02      	cmp	r3, #2
   12df8:	d169      	bne.n	12ece <auto_nav+0x956>
     {
         nav_stage =2; 
   12dfa:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12dfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e02:	2202      	movs	r2, #2
   12e04:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   12e06:	2001      	movs	r0, #1
   12e08:	f001 fc96 	bl	14738 <approaching>
   12e0c:	4603      	mov	r3, r0
   12e0e:	2b00      	cmp	r3, #0
   12e10:	d034      	beq.n	12e7c <auto_nav+0x904>
   12e12:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e1a:	2201      	movs	r2, #1
   12e1c:	701a      	strb	r2, [r3, #0]
   12e1e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e26:	781b      	ldrb	r3, [r3, #0]
   12e28:	3301      	adds	r3, #1
   12e2a:	b2da      	uxtb	r2, r3
   12e2c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12e30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e34:	701a      	strb	r2, [r3, #0]
   12e36:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e3e:	681a      	ldr	r2, [r3, #0]
   12e40:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12e44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e48:	601a      	str	r2, [r3, #0]
   12e4a:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12e4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e52:	681a      	ldr	r2, [r3, #0]
   12e54:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12e58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e5c:	601a      	str	r2, [r3, #0]
   12e5e:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e66:	2200      	movs	r2, #0
   12e68:	801a      	strh	r2, [r3, #0]
   12e6a:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e72:	f04f 0200 	mov.w	r2, #0
   12e76:	601a      	str	r2, [r3, #0]
   12e78:	f001 bc50 	b.w	1471c <auto_nav+0x21a4>
            fly_to(1);
   12e7c:	2001      	movs	r0, #1
   12e7e:	f001 fd8f 	bl	149a0 <fly_to>
            auto_pitch = FALSE;
   12e82:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e8a:	2200      	movs	r2, #0
   12e8c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12e8e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12e92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e96:	f04f 0200 	mov.w	r2, #0
   12e9a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12e9c:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ea4:	2203      	movs	r2, #3
   12ea6:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12ea8:	f240 5378 	movw	r3, #1400	; 0x578
   12eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12eb0:	695a      	ldr	r2, [r3, #20]
   12eb2:	f240 5374 	movw	r3, #1396	; 0x574
   12eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12eba:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12ebc:	f64c 0394 	movw	r3, #51348	; 0xc894
   12ec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ec4:	f04f 0200 	mov.w	r2, #0
   12ec8:	601a      	str	r2, [r3, #0]
          }
          return;
   12eca:	f001 bc27 	b.w	1471c <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12ece:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ed6:	781b      	ldrb	r3, [r3, #0]
   12ed8:	2b03      	cmp	r3, #3
   12eda:	d16f      	bne.n	12fbc <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   12edc:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12ee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ee4:	2203      	movs	r2, #3
   12ee6:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   12ee8:	2002      	movs	r0, #2
   12eea:	f001 fc25 	bl	14738 <approaching>
   12eee:	4603      	mov	r3, r0
   12ef0:	2b00      	cmp	r3, #0
   12ef2:	d034      	beq.n	12f5e <auto_nav+0x9e6>
   12ef4:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12efc:	2202      	movs	r2, #2
   12efe:	701a      	strb	r2, [r3, #0]
   12f00:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f08:	781b      	ldrb	r3, [r3, #0]
   12f0a:	3301      	adds	r3, #1
   12f0c:	b2da      	uxtb	r2, r3
   12f0e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12f12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f16:	701a      	strb	r2, [r3, #0]
   12f18:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12f1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f20:	681a      	ldr	r2, [r3, #0]
   12f22:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12f26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f2a:	601a      	str	r2, [r3, #0]
   12f2c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f34:	681a      	ldr	r2, [r3, #0]
   12f36:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12f3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f3e:	601a      	str	r2, [r3, #0]
   12f40:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f48:	2200      	movs	r2, #0
   12f4a:	801a      	strh	r2, [r3, #0]
   12f4c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12f50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f54:	f04f 0200 	mov.w	r2, #0
   12f58:	601a      	str	r2, [r3, #0]
   12f5a:	f001 bbdf 	b.w	1471c <auto_nav+0x21a4>
            route_to(last_wp, 2);
   12f5e:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f66:	781b      	ldrb	r3, [r3, #0]
   12f68:	4618      	mov	r0, r3
   12f6a:	2102      	movs	r1, #2
   12f6c:	f001 fd3a 	bl	149e4 <route_to>
            auto_pitch = FALSE;
   12f70:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12f74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f78:	2200      	movs	r2, #0
   12f7a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12f7c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12f80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f84:	f04f 0200 	mov.w	r2, #0
   12f88:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12f8a:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12f8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f92:	2203      	movs	r2, #3
   12f94:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   12f96:	f240 5378 	movw	r3, #1400	; 0x578
   12f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f9e:	6a1a      	ldr	r2, [r3, #32]
   12fa0:	f240 5374 	movw	r3, #1396	; 0x574
   12fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fa8:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12faa:	f64c 0394 	movw	r3, #51348	; 0xc894
   12fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fb2:	f04f 0200 	mov.w	r2, #0
   12fb6:	601a      	str	r2, [r3, #0]
          }
          return;
   12fb8:	f001 bbb0 	b.w	1471c <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   12fbc:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12fc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fc4:	781b      	ldrb	r3, [r3, #0]
   12fc6:	2b04      	cmp	r3, #4
   12fc8:	d169      	bne.n	1309e <auto_nav+0xb26>
       {
          nav_stage = 4;
   12fca:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12fce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fd2:	2204      	movs	r2, #4
   12fd4:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   12fd6:	2003      	movs	r0, #3
   12fd8:	f001 fbae 	bl	14738 <approaching>
   12fdc:	4603      	mov	r3, r0
   12fde:	2b00      	cmp	r3, #0
   12fe0:	d034      	beq.n	1304c <auto_nav+0xad4>
   12fe2:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12fe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fea:	2203      	movs	r2, #3
   12fec:	701a      	strb	r2, [r3, #0]
   12fee:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ff6:	781b      	ldrb	r3, [r3, #0]
   12ff8:	3301      	adds	r3, #1
   12ffa:	b2da      	uxtb	r2, r3
   12ffc:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13000:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13004:	701a      	strb	r2, [r3, #0]
   13006:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1300a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1300e:	681a      	ldr	r2, [r3, #0]
   13010:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13014:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13018:	601a      	str	r2, [r3, #0]
   1301a:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1301e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13022:	681a      	ldr	r2, [r3, #0]
   13024:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13028:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1302c:	601a      	str	r2, [r3, #0]
   1302e:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13032:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13036:	2200      	movs	r2, #0
   13038:	801a      	strh	r2, [r3, #0]
   1303a:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   1303e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13042:	f04f 0200 	mov.w	r2, #0
   13046:	601a      	str	r2, [r3, #0]
   13048:	f001 bb68 	b.w	1471c <auto_nav+0x21a4>
            fly_to(3);
   1304c:	2003      	movs	r0, #3
   1304e:	f001 fca7 	bl	149a0 <fly_to>
            auto_pitch = FALSE;
   13052:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13056:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1305a:	2200      	movs	r2, #0
   1305c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1305e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13062:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13066:	f04f 0200 	mov.w	r2, #0
   1306a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1306c:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13070:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13074:	2203      	movs	r2, #3
   13076:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   13078:	f240 5378 	movw	r3, #1400	; 0x578
   1307c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   13082:	f240 5374 	movw	r3, #1396	; 0x574
   13086:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1308a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1308c:	f64c 0394 	movw	r3, #51348	; 0xc894
   13090:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13094:	f04f 0200 	mov.w	r2, #0
   13098:	601a      	str	r2, [r3, #0]
          }
          return;
   1309a:	f001 bb3f 	b.w	1471c <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   1309e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   130a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130a6:	781b      	ldrb	r3, [r3, #0]
   130a8:	2b05      	cmp	r3, #5
   130aa:	d169      	bne.n	13180 <auto_nav+0xc08>
       {
          nav_stage =5;
   130ac:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   130b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130b4:	2205      	movs	r2, #5
   130b6:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   130b8:	2004      	movs	r0, #4
   130ba:	f001 fb3d 	bl	14738 <approaching>
   130be:	4603      	mov	r3, r0
   130c0:	2b00      	cmp	r3, #0
   130c2:	d034      	beq.n	1312e <auto_nav+0xbb6>
   130c4:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   130c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130cc:	2204      	movs	r2, #4
   130ce:	701a      	strb	r2, [r3, #0]
   130d0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   130d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130d8:	781b      	ldrb	r3, [r3, #0]
   130da:	3301      	adds	r3, #1
   130dc:	b2da      	uxtb	r2, r3
   130de:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   130e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130e6:	701a      	strb	r2, [r3, #0]
   130e8:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   130ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130f0:	681a      	ldr	r2, [r3, #0]
   130f2:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   130f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130fa:	601a      	str	r2, [r3, #0]
   130fc:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13100:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13104:	681a      	ldr	r2, [r3, #0]
   13106:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1310a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1310e:	601a      	str	r2, [r3, #0]
   13110:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13114:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13118:	2200      	movs	r2, #0
   1311a:	801a      	strh	r2, [r3, #0]
   1311c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13120:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13124:	f04f 0200 	mov.w	r2, #0
   13128:	601a      	str	r2, [r3, #0]
   1312a:	f001 baf7 	b.w	1471c <auto_nav+0x21a4>
            fly_to(4);
   1312e:	2004      	movs	r0, #4
   13130:	f001 fc36 	bl	149a0 <fly_to>
            auto_pitch = FALSE;
   13134:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13138:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1313c:	2200      	movs	r2, #0
   1313e:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   13140:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13144:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13148:	f04f 0200 	mov.w	r2, #0
   1314c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1314e:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13152:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13156:	2203      	movs	r2, #3
   13158:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   1315a:	f240 5378 	movw	r3, #1400	; 0x578
   1315e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   13164:	f240 5374 	movw	r3, #1396	; 0x574
   13168:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1316c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1316e:	f64c 0394 	movw	r3, #51348	; 0xc894
   13172:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13176:	f04f 0200 	mov.w	r2, #0
   1317a:	601a      	str	r2, [r3, #0]
          }
          return;
   1317c:	f001 bace 	b.w	1471c <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   13180:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13184:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13188:	781b      	ldrb	r3, [r3, #0]
   1318a:	2b06      	cmp	r3, #6
   1318c:	d16f      	bne.n	1326e <auto_nav+0xcf6>
       {
          nav_stage =6;
   1318e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13192:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13196:	2206      	movs	r2, #6
   13198:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   1319a:	2005      	movs	r0, #5
   1319c:	f001 facc 	bl	14738 <approaching>
   131a0:	4603      	mov	r3, r0
   131a2:	2b00      	cmp	r3, #0
   131a4:	d034      	beq.n	13210 <auto_nav+0xc98>
   131a6:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   131aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131ae:	2205      	movs	r2, #5
   131b0:	701a      	strb	r2, [r3, #0]
   131b2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   131b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131ba:	781b      	ldrb	r3, [r3, #0]
   131bc:	3301      	adds	r3, #1
   131be:	b2da      	uxtb	r2, r3
   131c0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   131c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131c8:	701a      	strb	r2, [r3, #0]
   131ca:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   131ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131d2:	681a      	ldr	r2, [r3, #0]
   131d4:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   131d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131dc:	601a      	str	r2, [r3, #0]
   131de:	f64c 3300 	movw	r3, #51968	; 0xcb00
   131e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131e6:	681a      	ldr	r2, [r3, #0]
   131e8:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   131ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131f0:	601a      	str	r2, [r3, #0]
   131f2:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   131f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131fa:	2200      	movs	r2, #0
   131fc:	801a      	strh	r2, [r3, #0]
   131fe:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13202:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13206:	f04f 0200 	mov.w	r2, #0
   1320a:	601a      	str	r2, [r3, #0]
   1320c:	f001 ba86 	b.w	1471c <auto_nav+0x21a4>
            route_to(last_wp, 5);
   13210:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   13214:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13218:	781b      	ldrb	r3, [r3, #0]
   1321a:	4618      	mov	r0, r3
   1321c:	2105      	movs	r1, #5
   1321e:	f001 fbe1 	bl	149e4 <route_to>
            auto_pitch = FALSE;
   13222:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13226:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1322a:	2200      	movs	r2, #0
   1322c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1322e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13232:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13236:	f04f 0200 	mov.w	r2, #0
   1323a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1323c:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13240:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13244:	2203      	movs	r2, #3
   13246:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   13248:	f240 5378 	movw	r3, #1400	; 0x578
   1324c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   13252:	f240 5374 	movw	r3, #1396	; 0x574
   13256:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1325a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1325c:	f64c 0394 	movw	r3, #51348	; 0xc894
   13260:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13264:	f04f 0200 	mov.w	r2, #0
   13268:	601a      	str	r2, [r3, #0]
          }
          return;
   1326a:	f001 ba57 	b.w	1471c <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   1326e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13272:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13276:	781b      	ldrb	r3, [r3, #0]
   13278:	2b07      	cmp	r3, #7
   1327a:	d106      	bne.n	1328a <auto_nav+0xd12>
       {
	   nav_stage =7;
   1327c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13280:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13284:	2207      	movs	r2, #7
   13286:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   13288:	e50a      	b.n	12ca0 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   1328a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1328e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13292:	781b      	ldrb	r3, [r3, #0]
   13294:	2b08      	cmp	r3, #8
   13296:	f041 8241 	bne.w	1471c <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   1329a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1329e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132a2:	2208      	movs	r2, #8
   132a4:	701a      	strb	r2, [r3, #0]
          NextBlock();
   132a6:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   132aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ae:	781b      	ldrb	r3, [r3, #0]
   132b0:	3301      	adds	r3, #1
   132b2:	b2da      	uxtb	r2, r3
   132b4:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   132b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132bc:	701a      	strb	r2, [r3, #0]
   132be:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   132c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132c6:	2200      	movs	r2, #0
   132c8:	701a      	strb	r2, [r3, #0]
   132ca:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   132ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132d2:	2200      	movs	r2, #0
   132d4:	801a      	strh	r2, [r3, #0]
   132d6:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   132da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132de:	681a      	ldr	r2, [r3, #0]
   132e0:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   132e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132e8:	601a      	str	r2, [r3, #0]
   132ea:	f64c 3300 	movw	r3, #51968	; 0xcb00
   132ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132f2:	681a      	ldr	r2, [r3, #0]
   132f4:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   132f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132fc:	601a      	str	r2, [r3, #0]
   132fe:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13302:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13306:	2200      	movs	r2, #0
   13308:	801a      	strh	r2, [r3, #0]
   1330a:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   1330e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13312:	f04f 0200 	mov.w	r2, #0
   13316:	601a      	str	r2, [r3, #0]
   13318:	f001 ba00 	b.w	1471c <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   1331c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13320:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13324:	781b      	ldrb	r3, [r3, #0]
   13326:	2b03      	cmp	r3, #3
   13328:	f040 8388 	bne.w	13a3c <auto_nav+0x14c4>
{
    nav_block = 3;
   1332c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13330:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13334:	2203      	movs	r2, #3
   13336:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   13338:	f24c 5330 	movw	r3, #50480	; 0xc530
   1333c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13340:	781b      	ldrb	r3, [r3, #0]
   13342:	2b00      	cmp	r3, #0
   13344:	d007      	beq.n	13356 <auto_nav+0xdde>
   13346:	f24c 5330 	movw	r3, #50480	; 0xc530
   1334a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1334e:	2200      	movs	r2, #0
   13350:	701a      	strb	r2, [r3, #0]
   13352:	2301      	movs	r3, #1
   13354:	e000      	b.n	13358 <auto_nav+0xde0>
   13356:	2300      	movs	r3, #0
   13358:	2b00      	cmp	r3, #0
   1335a:	d034      	beq.n	133c6 <auto_nav+0xe4e>
   1335c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13360:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13364:	2204      	movs	r2, #4
   13366:	701a      	strb	r2, [r3, #0]
   13368:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1336c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13370:	2200      	movs	r2, #0
   13372:	701a      	strb	r2, [r3, #0]
   13374:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13378:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1337c:	2200      	movs	r2, #0
   1337e:	801a      	strh	r2, [r3, #0]
   13380:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13384:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13388:	681a      	ldr	r2, [r3, #0]
   1338a:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1338e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13392:	601a      	str	r2, [r3, #0]
   13394:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13398:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1339c:	681a      	ldr	r2, [r3, #0]
   1339e:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   133a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133a6:	601a      	str	r2, [r3, #0]
   133a8:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   133ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133b0:	2200      	movs	r2, #0
   133b2:	801a      	strh	r2, [r3, #0]
   133b4:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   133b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133bc:	f04f 0200 	mov.w	r2, #0
   133c0:	601a      	str	r2, [r3, #0]
   133c2:	f001 b9ab 	b.w	1471c <auto_nav+0x21a4>
    if(nav_stage == 0)
   133c6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   133ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133ce:	781b      	ldrb	r3, [r3, #0]
   133d0:	2b00      	cmp	r3, #0
   133d2:	f040 82ea 	bne.w	139aa <auto_nav+0x1432>
    {
        nav_stage = 0;
   133d6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   133da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133de:	2200      	movs	r2, #0
   133e0:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   133e2:	f24c 532c 	movw	r3, #50476	; 0xc52c
   133e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133ea:	781b      	ldrb	r3, [r3, #0]
   133ec:	2b02      	cmp	r3, #2
   133ee:	f040 81a5 	bne.w	1373c <auto_nav+0x11c4>
   133f2:	f24c 6350 	movw	r3, #50768	; 0xc650
   133f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133fa:	88db      	ldrh	r3, [r3, #6]
   133fc:	84fb      	strh	r3, [r7, #38]	; 0x26
   133fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   13402:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   13406:	dc04      	bgt.n	13412 <auto_nav+0xe9a>
   13408:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   1340c:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13410:	da7e      	bge.n	13510 <auto_nav+0xf98>
   13412:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13416:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1341a:	681b      	ldr	r3, [r3, #0]
   1341c:	4618      	mov	r0, r3
   1341e:	f004 fbad 	bl	17b7c <__aeabi_f2d>
   13422:	4604      	mov	r4, r0
   13424:	460d      	mov	r5, r1
   13426:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   1342a:	4618      	mov	r0, r3
   1342c:	f004 ffe6 	bl	183fc <__aeabi_i2f>
   13430:	4603      	mov	r3, r0
   13432:	4618      	mov	r0, r3
   13434:	f04f 0100 	mov.w	r1, #0
   13438:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1343c:	f005 f8e6 	bl	1860c <__aeabi_fdiv>
   13440:	4603      	mov	r3, r0
   13442:	4618      	mov	r0, r3
   13444:	f004 fb9a 	bl	17b7c <__aeabi_f2d>
   13448:	4602      	mov	r2, r0
   1344a:	460b      	mov	r3, r1
   1344c:	4610      	mov	r0, r2
   1344e:	4619      	mov	r1, r3
   13450:	f04f 0200 	mov.w	r2, #0
   13454:	f04f 0300 	mov.w	r3, #0
   13458:	f2cc 0334 	movt	r3, #49204	; 0xc034
   1345c:	f004 fbe2 	bl	17c24 <__aeabi_dmul>
   13460:	4602      	mov	r2, r0
   13462:	460b      	mov	r3, r1
   13464:	4610      	mov	r0, r2
   13466:	4619      	mov	r1, r3
   13468:	f04f 0200 	mov.w	r2, #0
   1346c:	f04f 0300 	mov.w	r3, #0
   13470:	f004 fa26 	bl	178c0 <__adddf3>
   13474:	4602      	mov	r2, r0
   13476:	460b      	mov	r3, r1
   13478:	4620      	mov	r0, r4
   1347a:	4629      	mov	r1, r5
   1347c:	f004 fa20 	bl	178c0 <__adddf3>
   13480:	4602      	mov	r2, r0
   13482:	460b      	mov	r3, r1
   13484:	4610      	mov	r0, r2
   13486:	4619      	mov	r1, r3
   13488:	f004 feae 	bl	181e8 <__aeabi_d2f>
   1348c:	4602      	mov	r2, r0
   1348e:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13492:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13496:	601a      	str	r2, [r3, #0]
   13498:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   1349c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134a0:	681b      	ldr	r3, [r3, #0]
   134a2:	4618      	mov	r0, r3
   134a4:	f04f 0100 	mov.w	r1, #0
   134a8:	f2c4 317a 	movt	r1, #17274	; 0x437a
   134ac:	f005 f9a2 	bl	187f4 <__aeabi_fcmple>
   134b0:	4603      	mov	r3, r0
   134b2:	2b00      	cmp	r3, #0
   134b4:	d005      	beq.n	134c2 <auto_nav+0xf4a>
   134b6:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   134ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134be:	681a      	ldr	r2, [r3, #0]
   134c0:	e003      	b.n	134ca <auto_nav+0xf52>
   134c2:	f04f 0200 	mov.w	r2, #0
   134c6:	f2c4 327a 	movt	r2, #17274	; 0x437a
   134ca:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   134ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134d2:	601a      	str	r2, [r3, #0]
   134d4:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   134d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134dc:	681b      	ldr	r3, [r3, #0]
   134de:	4618      	mov	r0, r3
   134e0:	f04f 0100 	mov.w	r1, #0
   134e4:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   134e8:	f005 f98e 	bl	18808 <__aeabi_fcmpge>
   134ec:	4603      	mov	r3, r0
   134ee:	2b00      	cmp	r3, #0
   134f0:	d005      	beq.n	134fe <auto_nav+0xf86>
   134f2:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   134f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134fa:	681a      	ldr	r2, [r3, #0]
   134fc:	e003      	b.n	13506 <auto_nav+0xf8e>
   134fe:	f04f 0200 	mov.w	r2, #0
   13502:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   13506:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   1350a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1350e:	601a      	str	r2, [r3, #0]
   13510:	f24c 6350 	movw	r3, #50768	; 0xc650
   13514:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13518:	889b      	ldrh	r3, [r3, #4]
   1351a:	84bb      	strh	r3, [r7, #36]	; 0x24
   1351c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13520:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   13524:	dc04      	bgt.n	13530 <auto_nav+0xfb8>
   13526:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   1352a:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   1352e:	da7e      	bge.n	1362e <auto_nav+0x10b6>
   13530:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13534:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13538:	681b      	ldr	r3, [r3, #0]
   1353a:	4618      	mov	r0, r3
   1353c:	f004 fb1e 	bl	17b7c <__aeabi_f2d>
   13540:	4604      	mov	r4, r0
   13542:	460d      	mov	r5, r1
   13544:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13548:	4618      	mov	r0, r3
   1354a:	f004 ff57 	bl	183fc <__aeabi_i2f>
   1354e:	4603      	mov	r3, r0
   13550:	4618      	mov	r0, r3
   13552:	f04f 0100 	mov.w	r1, #0
   13556:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1355a:	f005 f857 	bl	1860c <__aeabi_fdiv>
   1355e:	4603      	mov	r3, r0
   13560:	4618      	mov	r0, r3
   13562:	f004 fb0b 	bl	17b7c <__aeabi_f2d>
   13566:	4602      	mov	r2, r0
   13568:	460b      	mov	r3, r1
   1356a:	4610      	mov	r0, r2
   1356c:	4619      	mov	r1, r3
   1356e:	f04f 0200 	mov.w	r2, #0
   13572:	f04f 0300 	mov.w	r3, #0
   13576:	f2cc 0334 	movt	r3, #49204	; 0xc034
   1357a:	f004 fb53 	bl	17c24 <__aeabi_dmul>
   1357e:	4602      	mov	r2, r0
   13580:	460b      	mov	r3, r1
   13582:	4610      	mov	r0, r2
   13584:	4619      	mov	r1, r3
   13586:	f04f 0200 	mov.w	r2, #0
   1358a:	f04f 0300 	mov.w	r3, #0
   1358e:	f004 f997 	bl	178c0 <__adddf3>
   13592:	4602      	mov	r2, r0
   13594:	460b      	mov	r3, r1
   13596:	4620      	mov	r0, r4
   13598:	4629      	mov	r1, r5
   1359a:	f004 f991 	bl	178c0 <__adddf3>
   1359e:	4602      	mov	r2, r0
   135a0:	460b      	mov	r3, r1
   135a2:	4610      	mov	r0, r2
   135a4:	4619      	mov	r1, r3
   135a6:	f004 fe1f 	bl	181e8 <__aeabi_d2f>
   135aa:	4602      	mov	r2, r0
   135ac:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   135b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135b4:	601a      	str	r2, [r3, #0]
   135b6:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   135ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135be:	681b      	ldr	r3, [r3, #0]
   135c0:	4618      	mov	r0, r3
   135c2:	f04f 0100 	mov.w	r1, #0
   135c6:	f2c4 317a 	movt	r1, #17274	; 0x437a
   135ca:	f005 f913 	bl	187f4 <__aeabi_fcmple>
   135ce:	4603      	mov	r3, r0
   135d0:	2b00      	cmp	r3, #0
   135d2:	d005      	beq.n	135e0 <auto_nav+0x1068>
   135d4:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   135d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135dc:	681a      	ldr	r2, [r3, #0]
   135de:	e003      	b.n	135e8 <auto_nav+0x1070>
   135e0:	f04f 0200 	mov.w	r2, #0
   135e4:	f2c4 327a 	movt	r2, #17274	; 0x437a
   135e8:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   135ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135f0:	601a      	str	r2, [r3, #0]
   135f2:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   135f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135fa:	681b      	ldr	r3, [r3, #0]
   135fc:	4618      	mov	r0, r3
   135fe:	f04f 0100 	mov.w	r1, #0
   13602:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   13606:	f005 f8ff 	bl	18808 <__aeabi_fcmpge>
   1360a:	4603      	mov	r3, r0
   1360c:	2b00      	cmp	r3, #0
   1360e:	d005      	beq.n	1361c <auto_nav+0x10a4>
   13610:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13614:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13618:	681a      	ldr	r2, [r3, #0]
   1361a:	e003      	b.n	13624 <auto_nav+0x10ac>
   1361c:	f04f 0200 	mov.w	r2, #0
   13620:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   13624:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13628:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1362c:	601a      	str	r2, [r3, #0]
   1362e:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13632:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13636:	2203      	movs	r2, #3
   13638:	701a      	strb	r2, [r3, #0]
   1363a:	f24c 6350 	movw	r3, #50768	; 0xc650
   1363e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13642:	885b      	ldrh	r3, [r3, #2]
   13644:	847b      	strh	r3, [r7, #34]	; 0x22
   13646:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1364a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   1364e:	dc04      	bgt.n	1365a <auto_nav+0x10e2>
   13650:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13654:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13658:	da70      	bge.n	1373c <auto_nav+0x11c4>
   1365a:	f240 5374 	movw	r3, #1396	; 0x574
   1365e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13662:	681b      	ldr	r3, [r3, #0]
   13664:	4618      	mov	r0, r3
   13666:	f004 fa89 	bl	17b7c <__aeabi_f2d>
   1366a:	4604      	mov	r4, r0
   1366c:	460d      	mov	r5, r1
   1366e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13672:	4618      	mov	r0, r3
   13674:	f004 fec2 	bl	183fc <__aeabi_i2f>
   13678:	4603      	mov	r3, r0
   1367a:	4618      	mov	r0, r3
   1367c:	f04f 0100 	mov.w	r1, #0
   13680:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13684:	f004 ffc2 	bl	1860c <__aeabi_fdiv>
   13688:	4603      	mov	r3, r0
   1368a:	4618      	mov	r0, r3
   1368c:	f004 fa76 	bl	17b7c <__aeabi_f2d>
   13690:	4602      	mov	r2, r0
   13692:	460b      	mov	r3, r1
   13694:	f04f 0000 	mov.w	r0, #0
   13698:	f04f 0100 	mov.w	r1, #0
   1369c:	f004 f90e 	bl	178bc <__aeabi_dsub>
   136a0:	4602      	mov	r2, r0
   136a2:	460b      	mov	r3, r1
   136a4:	4620      	mov	r0, r4
   136a6:	4629      	mov	r1, r5
   136a8:	f004 f90a 	bl	178c0 <__adddf3>
   136ac:	4602      	mov	r2, r0
   136ae:	460b      	mov	r3, r1
   136b0:	4610      	mov	r0, r2
   136b2:	4619      	mov	r1, r3
   136b4:	f004 fd98 	bl	181e8 <__aeabi_d2f>
   136b8:	4602      	mov	r2, r0
   136ba:	f240 5374 	movw	r3, #1396	; 0x574
   136be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136c2:	601a      	str	r2, [r3, #0]
   136c4:	f240 5374 	movw	r3, #1396	; 0x574
   136c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136cc:	681b      	ldr	r3, [r3, #0]
   136ce:	4618      	mov	r0, r3
   136d0:	f04f 0100 	mov.w	r1, #0
   136d4:	f2c4 312f 	movt	r1, #17199	; 0x432f
   136d8:	f005 f896 	bl	18808 <__aeabi_fcmpge>
   136dc:	4603      	mov	r3, r0
   136de:	2b00      	cmp	r3, #0
   136e0:	d005      	beq.n	136ee <auto_nav+0x1176>
   136e2:	f240 5374 	movw	r3, #1396	; 0x574
   136e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136ea:	681a      	ldr	r2, [r3, #0]
   136ec:	e003      	b.n	136f6 <auto_nav+0x117e>
   136ee:	f04f 0200 	mov.w	r2, #0
   136f2:	f2c4 322f 	movt	r2, #17199	; 0x432f
   136f6:	f240 5374 	movw	r3, #1396	; 0x574
   136fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136fe:	601a      	str	r2, [r3, #0]
   13700:	f240 5374 	movw	r3, #1396	; 0x574
   13704:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13708:	681b      	ldr	r3, [r3, #0]
   1370a:	4618      	mov	r0, r3
   1370c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13710:	f2c4 3189 	movt	r1, #17289	; 0x4389
   13714:	f005 f86e 	bl	187f4 <__aeabi_fcmple>
   13718:	4603      	mov	r3, r0
   1371a:	2b00      	cmp	r3, #0
   1371c:	d005      	beq.n	1372a <auto_nav+0x11b2>
   1371e:	f240 5374 	movw	r3, #1396	; 0x574
   13722:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13726:	681a      	ldr	r2, [r3, #0]
   13728:	e003      	b.n	13732 <auto_nav+0x11ba>
   1372a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1372e:	f2c4 3289 	movt	r2, #17289	; 0x4389
   13732:	f240 5374 	movw	r3, #1396	; 0x574
   13736:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1373a:	601a      	str	r2, [r3, #0]
   1373c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13740:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13744:	681a      	ldr	r2, [r3, #0]
   13746:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   1374a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1374e:	681b      	ldr	r3, [r3, #0]
   13750:	4610      	mov	r0, r2
   13752:	4619      	mov	r1, r3
   13754:	f004 fd9c 	bl	18290 <__aeabi_fsub>
   13758:	4603      	mov	r3, r0
   1375a:	4618      	mov	r0, r3
   1375c:	f004 fa0e 	bl	17b7c <__aeabi_f2d>
   13760:	4604      	mov	r4, r0
   13762:	460d      	mov	r5, r1
   13764:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13768:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1376c:	681a      	ldr	r2, [r3, #0]
   1376e:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13772:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13776:	681b      	ldr	r3, [r3, #0]
   13778:	4610      	mov	r0, r2
   1377a:	4619      	mov	r1, r3
   1377c:	f004 fd88 	bl	18290 <__aeabi_fsub>
   13780:	4603      	mov	r3, r0
   13782:	4618      	mov	r0, r3
   13784:	f004 f9fa 	bl	17b7c <__aeabi_f2d>
   13788:	4602      	mov	r2, r0
   1378a:	460b      	mov	r3, r1
   1378c:	4620      	mov	r0, r4
   1378e:	4629      	mov	r1, r5
   13790:	f002 fa12 	bl	15bb8 <pp_atan2>
   13794:	4602      	mov	r2, r0
   13796:	460b      	mov	r3, r1
   13798:	4610      	mov	r0, r2
   1379a:	4619      	mov	r1, r3
   1379c:	f004 fd24 	bl	181e8 <__aeabi_d2f>
   137a0:	4603      	mov	r3, r0
   137a2:	61fb      	str	r3, [r7, #28]
   137a4:	69f8      	ldr	r0, [r7, #28]
   137a6:	f004 f9e9 	bl	17b7c <__aeabi_f2d>
   137aa:	4604      	mov	r4, r0
   137ac:	460d      	mov	r5, r1
   137ae:	f64c 3334 	movw	r3, #52020	; 0xcb34
   137b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137b6:	681b      	ldr	r3, [r3, #0]
   137b8:	4618      	mov	r0, r3
   137ba:	f04f 0100 	mov.w	r1, #0
   137be:	f2cc 2148 	movt	r1, #49736	; 0xc248
   137c2:	f004 fe6f 	bl	184a4 <__aeabi_fmul>
   137c6:	4603      	mov	r3, r0
   137c8:	4618      	mov	r0, r3
   137ca:	f004 f9d7 	bl	17b7c <__aeabi_f2d>
   137ce:	4602      	mov	r2, r0
   137d0:	460b      	mov	r3, r1
   137d2:	f04f 0000 	mov.w	r0, #0
   137d6:	f04f 0100 	mov.w	r1, #0
   137da:	f2c4 0114 	movt	r1, #16404	; 0x4014
   137de:	f004 fb4b 	bl	17e78 <__aeabi_ddiv>
   137e2:	4602      	mov	r2, r0
   137e4:	460b      	mov	r3, r1
   137e6:	4620      	mov	r0, r4
   137e8:	4629      	mov	r1, r5
   137ea:	f004 f869 	bl	178c0 <__adddf3>
   137ee:	4602      	mov	r2, r0
   137f0:	460b      	mov	r3, r1
   137f2:	4610      	mov	r0, r2
   137f4:	4619      	mov	r1, r3
   137f6:	f004 fcf7 	bl	181e8 <__aeabi_d2f>
   137fa:	4603      	mov	r3, r0
   137fc:	61bb      	str	r3, [r7, #24]
   137fe:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13802:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13806:	681b      	ldr	r3, [r3, #0]
   13808:	4618      	mov	r0, r3
   1380a:	f004 f9b7 	bl	17b7c <__aeabi_f2d>
   1380e:	4604      	mov	r4, r0
   13810:	460d      	mov	r5, r1
   13812:	69b8      	ldr	r0, [r7, #24]
   13814:	f004 f9b2 	bl	17b7c <__aeabi_f2d>
   13818:	4602      	mov	r2, r0
   1381a:	460b      	mov	r3, r1
   1381c:	4610      	mov	r0, r2
   1381e:	4619      	mov	r1, r3
   13820:	a3b1      	add	r3, pc, #708	; (adr r3, 13ae8 <auto_nav+0x1570>)
   13822:	e9d3 2300 	ldrd	r2, r3, [r3]
   13826:	f004 f84b 	bl	178c0 <__adddf3>
   1382a:	4602      	mov	r2, r0
   1382c:	460b      	mov	r3, r1
   1382e:	4610      	mov	r0, r2
   13830:	4619      	mov	r1, r3
   13832:	f002 fa81 	bl	15d38 <pp_sin>
   13836:	4602      	mov	r2, r0
   13838:	460b      	mov	r3, r1
   1383a:	4610      	mov	r0, r2
   1383c:	4619      	mov	r1, r3
   1383e:	f04f 0200 	mov.w	r2, #0
   13842:	f04f 0300 	mov.w	r3, #0
   13846:	f2c4 0349 	movt	r3, #16457	; 0x4049
   1384a:	f004 f9eb 	bl	17c24 <__aeabi_dmul>
   1384e:	4602      	mov	r2, r0
   13850:	460b      	mov	r3, r1
   13852:	4620      	mov	r0, r4
   13854:	4629      	mov	r1, r5
   13856:	f004 f833 	bl	178c0 <__adddf3>
   1385a:	4602      	mov	r2, r0
   1385c:	460b      	mov	r3, r1
   1385e:	4610      	mov	r0, r2
   13860:	4619      	mov	r1, r3
   13862:	f004 fcc1 	bl	181e8 <__aeabi_d2f>
   13866:	4606      	mov	r6, r0
   13868:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   1386c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13870:	681b      	ldr	r3, [r3, #0]
   13872:	4618      	mov	r0, r3
   13874:	f004 f982 	bl	17b7c <__aeabi_f2d>
   13878:	4604      	mov	r4, r0
   1387a:	460d      	mov	r5, r1
   1387c:	69b8      	ldr	r0, [r7, #24]
   1387e:	f004 f97d 	bl	17b7c <__aeabi_f2d>
   13882:	4602      	mov	r2, r0
   13884:	460b      	mov	r3, r1
   13886:	4610      	mov	r0, r2
   13888:	4619      	mov	r1, r3
   1388a:	f002 fa55 	bl	15d38 <pp_sin>
   1388e:	4602      	mov	r2, r0
   13890:	460b      	mov	r3, r1
   13892:	4610      	mov	r0, r2
   13894:	4619      	mov	r1, r3
   13896:	f04f 0200 	mov.w	r2, #0
   1389a:	f04f 0300 	mov.w	r3, #0
   1389e:	f2c4 0349 	movt	r3, #16457	; 0x4049
   138a2:	f004 f9bf 	bl	17c24 <__aeabi_dmul>
   138a6:	4602      	mov	r2, r0
   138a8:	460b      	mov	r3, r1
   138aa:	4620      	mov	r0, r4
   138ac:	4629      	mov	r1, r5
   138ae:	f004 f807 	bl	178c0 <__adddf3>
   138b2:	4602      	mov	r2, r0
   138b4:	460b      	mov	r3, r1
   138b6:	4610      	mov	r0, r2
   138b8:	4619      	mov	r1, r3
   138ba:	f004 fc95 	bl	181e8 <__aeabi_d2f>
   138be:	4603      	mov	r3, r0
   138c0:	4630      	mov	r0, r6
   138c2:	4619      	mov	r1, r3
   138c4:	f001 f81c 	bl	14900 <fly_to_xy>
   138c8:	69b8      	ldr	r0, [r7, #24]
   138ca:	f004 f957 	bl	17b7c <__aeabi_f2d>
   138ce:	4602      	mov	r2, r0
   138d0:	460b      	mov	r3, r1
   138d2:	a185      	add	r1, pc, #532	; (adr r1, 13ae8 <auto_nav+0x1570>)
   138d4:	e9d1 0100 	ldrd	r0, r1, [r1]
   138d8:	f003 fff0 	bl	178bc <__aeabi_dsub>
   138dc:	4602      	mov	r2, r0
   138de:	460b      	mov	r3, r1
   138e0:	4610      	mov	r0, r2
   138e2:	4619      	mov	r1, r3
   138e4:	a382      	add	r3, pc, #520	; (adr r3, 13af0 <auto_nav+0x1578>)
   138e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   138ea:	f004 fac5 	bl	17e78 <__aeabi_ddiv>
   138ee:	4602      	mov	r2, r0
   138f0:	460b      	mov	r3, r1
   138f2:	4610      	mov	r0, r2
   138f4:	4619      	mov	r1, r3
   138f6:	f04f 0200 	mov.w	r2, #0
   138fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   138fe:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13902:	f004 f98f 	bl	17c24 <__aeabi_dmul>
   13906:	4602      	mov	r2, r0
   13908:	460b      	mov	r3, r1
   1390a:	4610      	mov	r0, r2
   1390c:	4619      	mov	r1, r3
   1390e:	f004 fc6b 	bl	181e8 <__aeabi_d2f>
   13912:	4602      	mov	r2, r0
   13914:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13918:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1391c:	601a      	str	r2, [r3, #0]
   1391e:	e012      	b.n	13946 <auto_nav+0x13ce>
   13920:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13924:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13928:	681b      	ldr	r3, [r3, #0]
   1392a:	4618      	mov	r0, r3
   1392c:	f04f 0100 	mov.w	r1, #0
   13930:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13934:	f004 fcae 	bl	18294 <__addsf3>
   13938:	4603      	mov	r3, r0
   1393a:	461a      	mov	r2, r3
   1393c:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13940:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13944:	601a      	str	r2, [r3, #0]
   13946:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1394a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1394e:	681b      	ldr	r3, [r3, #0]
   13950:	4618      	mov	r0, r3
   13952:	f04f 0100 	mov.w	r1, #0
   13956:	f004 ff43 	bl	187e0 <__aeabi_fcmplt>
   1395a:	4603      	mov	r3, r0
   1395c:	2b00      	cmp	r3, #0
   1395e:	d1df      	bne.n	13920 <auto_nav+0x13a8>
   13960:	e012      	b.n	13988 <auto_nav+0x1410>
   13962:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13966:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1396a:	681b      	ldr	r3, [r3, #0]
   1396c:	4618      	mov	r0, r3
   1396e:	f04f 0100 	mov.w	r1, #0
   13972:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13976:	f004 fc8b 	bl	18290 <__aeabi_fsub>
   1397a:	4603      	mov	r3, r0
   1397c:	461a      	mov	r2, r3
   1397e:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13982:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13986:	601a      	str	r2, [r3, #0]
   13988:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1398c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13990:	681b      	ldr	r3, [r3, #0]
   13992:	4618      	mov	r0, r3
   13994:	f04f 0100 	mov.w	r1, #0
   13998:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1399c:	f004 ff34 	bl	18808 <__aeabi_fcmpge>
   139a0:	4603      	mov	r3, r0
   139a2:	2b00      	cmp	r3, #0
   139a4:	d1dd      	bne.n	13962 <auto_nav+0x13ea>
        return;
   139a6:	f000 beb9 	b.w	1471c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   139aa:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   139ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139b2:	781b      	ldrb	r3, [r3, #0]
   139b4:	2b01      	cmp	r3, #1
   139b6:	f040 86b1 	bne.w	1471c <auto_nav+0x21a4>
    {
        nav_stage = 1;
   139ba:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   139be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139c2:	2201      	movs	r2, #1
   139c4:	701a      	strb	r2, [r3, #0]
        NextBlock()
   139c6:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   139ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139ce:	781b      	ldrb	r3, [r3, #0]
   139d0:	3301      	adds	r3, #1
   139d2:	b2da      	uxtb	r2, r3
   139d4:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   139d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139dc:	701a      	strb	r2, [r3, #0]
   139de:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   139e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139e6:	2200      	movs	r2, #0
   139e8:	701a      	strb	r2, [r3, #0]
   139ea:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   139ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139f2:	2200      	movs	r2, #0
   139f4:	801a      	strh	r2, [r3, #0]
   139f6:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   139fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139fe:	681a      	ldr	r2, [r3, #0]
   13a00:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a08:	601a      	str	r2, [r3, #0]
   13a0a:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13a0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a12:	681a      	ldr	r2, [r3, #0]
   13a14:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a1c:	601a      	str	r2, [r3, #0]
   13a1e:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a26:	2200      	movs	r2, #0
   13a28:	801a      	strh	r2, [r3, #0]
   13a2a:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13a2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a32:	f04f 0200 	mov.w	r2, #0
   13a36:	601a      	str	r2, [r3, #0]
   13a38:	f000 be70 	b.w	1471c <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   13a3c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a44:	781b      	ldrb	r3, [r3, #0]
   13a46:	2b04      	cmp	r3, #4
   13a48:	f040 8202 	bne.w	13e50 <auto_nav+0x18d8>
{
    nav_block = 4;
   13a4c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a54:	2204      	movs	r2, #4
   13a56:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13a58:	f24c 5330 	movw	r3, #50480	; 0xc530
   13a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a60:	781b      	ldrb	r3, [r3, #0]
   13a62:	2b00      	cmp	r3, #0
   13a64:	d007      	beq.n	13a76 <auto_nav+0x14fe>
   13a66:	f24c 5330 	movw	r3, #50480	; 0xc530
   13a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a6e:	2200      	movs	r2, #0
   13a70:	701a      	strb	r2, [r3, #0]
   13a72:	2301      	movs	r3, #1
   13a74:	e000      	b.n	13a78 <auto_nav+0x1500>
   13a76:	2300      	movs	r3, #0
   13a78:	2b00      	cmp	r3, #0
   13a7a:	d03d      	beq.n	13af8 <auto_nav+0x1580>
   13a7c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a84:	2205      	movs	r2, #5
   13a86:	701a      	strb	r2, [r3, #0]
   13a88:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a90:	2200      	movs	r2, #0
   13a92:	701a      	strb	r2, [r3, #0]
   13a94:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a9c:	2200      	movs	r2, #0
   13a9e:	801a      	strh	r2, [r3, #0]
   13aa0:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13aa8:	681a      	ldr	r2, [r3, #0]
   13aaa:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ab2:	601a      	str	r2, [r3, #0]
   13ab4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13abc:	681a      	ldr	r2, [r3, #0]
   13abe:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ac6:	601a      	str	r2, [r3, #0]
   13ac8:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ad0:	2200      	movs	r2, #0
   13ad2:	801a      	strh	r2, [r3, #0]
   13ad4:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13adc:	f04f 0200 	mov.w	r2, #0
   13ae0:	601a      	str	r2, [r3, #0]
   13ae2:	f000 be1b 	b.w	1471c <auto_nav+0x21a4>
   13ae6:	bf00      	nop
   13ae8:	54442d18 	.word	0x54442d18
   13aec:	3ff921fb 	.word	0x3ff921fb
   13af0:	54442d18 	.word	0x54442d18
   13af4:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   13af8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b00:	781b      	ldrb	r3, [r3, #0]
   13b02:	2b00      	cmp	r3, #0
   13b04:	f040 815b 	bne.w	13dbe <auto_nav+0x1846>
    {
        nav_stage = 0;
   13b08:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b10:	2200      	movs	r2, #0
   13b12:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13b14:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13b18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b1c:	2200      	movs	r2, #0
   13b1e:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13b20:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13b24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b28:	f04f 0200 	mov.w	r2, #0
   13b2c:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13b2e:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13b32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b36:	2203      	movs	r2, #3
   13b38:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   13b3a:	f240 5378 	movw	r3, #1400	; 0x578
   13b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b42:	689a      	ldr	r2, [r3, #8]
   13b44:	f240 5374 	movw	r3, #1396	; 0x574
   13b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b4c:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13b4e:	f64c 0394 	movw	r3, #51348	; 0xc894
   13b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b56:	f04f 0200 	mov.w	r2, #0
   13b5a:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   13b5c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b64:	681a      	ldr	r2, [r3, #0]
   13b66:	f240 5378 	movw	r3, #1400	; 0x578
   13b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b6e:	685b      	ldr	r3, [r3, #4]
   13b70:	4610      	mov	r0, r2
   13b72:	4619      	mov	r1, r3
   13b74:	f004 fb8c 	bl	18290 <__aeabi_fsub>
   13b78:	4603      	mov	r3, r0
   13b7a:	4618      	mov	r0, r3
   13b7c:	f003 fffe 	bl	17b7c <__aeabi_f2d>
   13b80:	4604      	mov	r4, r0
   13b82:	460d      	mov	r5, r1
   13b84:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b8c:	681a      	ldr	r2, [r3, #0]
   13b8e:	f240 5378 	movw	r3, #1400	; 0x578
   13b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b96:	681b      	ldr	r3, [r3, #0]
   13b98:	4610      	mov	r0, r2
   13b9a:	4619      	mov	r1, r3
   13b9c:	f004 fb78 	bl	18290 <__aeabi_fsub>
   13ba0:	4603      	mov	r3, r0
   13ba2:	4618      	mov	r0, r3
   13ba4:	f003 ffea 	bl	17b7c <__aeabi_f2d>
   13ba8:	4602      	mov	r2, r0
   13baa:	460b      	mov	r3, r1
   13bac:	4620      	mov	r0, r4
   13bae:	4629      	mov	r1, r5
   13bb0:	f002 f802 	bl	15bb8 <pp_atan2>
   13bb4:	4602      	mov	r2, r0
   13bb6:	460b      	mov	r3, r1
   13bb8:	4610      	mov	r0, r2
   13bba:	4619      	mov	r1, r3
   13bbc:	f004 fb14 	bl	181e8 <__aeabi_d2f>
   13bc0:	4603      	mov	r3, r0
   13bc2:	617b      	str	r3, [r7, #20]
   13bc4:	6978      	ldr	r0, [r7, #20]
   13bc6:	f003 ffd9 	bl	17b7c <__aeabi_f2d>
   13bca:	4604      	mov	r4, r0
   13bcc:	460d      	mov	r5, r1
   13bce:	f64c 3334 	movw	r3, #52020	; 0xcb34
   13bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bd6:	681b      	ldr	r3, [r3, #0]
   13bd8:	4618      	mov	r0, r3
   13bda:	f04f 0100 	mov.w	r1, #0
   13bde:	f2cc 3116 	movt	r1, #49942	; 0xc316
   13be2:	f004 fc5f 	bl	184a4 <__aeabi_fmul>
   13be6:	4603      	mov	r3, r0
   13be8:	4618      	mov	r0, r3
   13bea:	f003 ffc7 	bl	17b7c <__aeabi_f2d>
   13bee:	4602      	mov	r2, r0
   13bf0:	460b      	mov	r3, r1
   13bf2:	f04f 0000 	mov.w	r0, #0
   13bf6:	f04f 0100 	mov.w	r1, #0
   13bfa:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13bfe:	f004 f93b 	bl	17e78 <__aeabi_ddiv>
   13c02:	4602      	mov	r2, r0
   13c04:	460b      	mov	r3, r1
   13c06:	4620      	mov	r0, r4
   13c08:	4629      	mov	r1, r5
   13c0a:	f003 fe59 	bl	178c0 <__adddf3>
   13c0e:	4602      	mov	r2, r0
   13c10:	460b      	mov	r3, r1
   13c12:	4610      	mov	r0, r2
   13c14:	4619      	mov	r1, r3
   13c16:	f004 fae7 	bl	181e8 <__aeabi_d2f>
   13c1a:	4603      	mov	r3, r0
   13c1c:	613b      	str	r3, [r7, #16]
   13c1e:	f240 5378 	movw	r3, #1400	; 0x578
   13c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c26:	681b      	ldr	r3, [r3, #0]
   13c28:	4618      	mov	r0, r3
   13c2a:	f003 ffa7 	bl	17b7c <__aeabi_f2d>
   13c2e:	4604      	mov	r4, r0
   13c30:	460d      	mov	r5, r1
   13c32:	6938      	ldr	r0, [r7, #16]
   13c34:	f003 ffa2 	bl	17b7c <__aeabi_f2d>
   13c38:	4602      	mov	r2, r0
   13c3a:	460b      	mov	r3, r1
   13c3c:	4610      	mov	r0, r2
   13c3e:	4619      	mov	r1, r3
   13c40:	a3af      	add	r3, pc, #700	; (adr r3, 13f00 <auto_nav+0x1988>)
   13c42:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c46:	f003 fe3b 	bl	178c0 <__adddf3>
   13c4a:	4602      	mov	r2, r0
   13c4c:	460b      	mov	r3, r1
   13c4e:	4610      	mov	r0, r2
   13c50:	4619      	mov	r1, r3
   13c52:	f002 f871 	bl	15d38 <pp_sin>
   13c56:	4602      	mov	r2, r0
   13c58:	460b      	mov	r3, r1
   13c5a:	4610      	mov	r0, r2
   13c5c:	4619      	mov	r1, r3
   13c5e:	a3aa      	add	r3, pc, #680	; (adr r3, 13f08 <auto_nav+0x1990>)
   13c60:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c64:	f003 ffde 	bl	17c24 <__aeabi_dmul>
   13c68:	4602      	mov	r2, r0
   13c6a:	460b      	mov	r3, r1
   13c6c:	4620      	mov	r0, r4
   13c6e:	4629      	mov	r1, r5
   13c70:	f003 fe26 	bl	178c0 <__adddf3>
   13c74:	4602      	mov	r2, r0
   13c76:	460b      	mov	r3, r1
   13c78:	4610      	mov	r0, r2
   13c7a:	4619      	mov	r1, r3
   13c7c:	f004 fab4 	bl	181e8 <__aeabi_d2f>
   13c80:	4606      	mov	r6, r0
   13c82:	f240 5378 	movw	r3, #1400	; 0x578
   13c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c8a:	685b      	ldr	r3, [r3, #4]
   13c8c:	4618      	mov	r0, r3
   13c8e:	f003 ff75 	bl	17b7c <__aeabi_f2d>
   13c92:	4604      	mov	r4, r0
   13c94:	460d      	mov	r5, r1
   13c96:	6938      	ldr	r0, [r7, #16]
   13c98:	f003 ff70 	bl	17b7c <__aeabi_f2d>
   13c9c:	4602      	mov	r2, r0
   13c9e:	460b      	mov	r3, r1
   13ca0:	4610      	mov	r0, r2
   13ca2:	4619      	mov	r1, r3
   13ca4:	f002 f848 	bl	15d38 <pp_sin>
   13ca8:	4602      	mov	r2, r0
   13caa:	460b      	mov	r3, r1
   13cac:	4610      	mov	r0, r2
   13cae:	4619      	mov	r1, r3
   13cb0:	a395      	add	r3, pc, #596	; (adr r3, 13f08 <auto_nav+0x1990>)
   13cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   13cb6:	f003 ffb5 	bl	17c24 <__aeabi_dmul>
   13cba:	4602      	mov	r2, r0
   13cbc:	460b      	mov	r3, r1
   13cbe:	4620      	mov	r0, r4
   13cc0:	4629      	mov	r1, r5
   13cc2:	f003 fdfd 	bl	178c0 <__adddf3>
   13cc6:	4602      	mov	r2, r0
   13cc8:	460b      	mov	r3, r1
   13cca:	4610      	mov	r0, r2
   13ccc:	4619      	mov	r1, r3
   13cce:	f004 fa8b 	bl	181e8 <__aeabi_d2f>
   13cd2:	4603      	mov	r3, r0
   13cd4:	4630      	mov	r0, r6
   13cd6:	4619      	mov	r1, r3
   13cd8:	f000 fe12 	bl	14900 <fly_to_xy>
   13cdc:	6938      	ldr	r0, [r7, #16]
   13cde:	f003 ff4d 	bl	17b7c <__aeabi_f2d>
   13ce2:	4602      	mov	r2, r0
   13ce4:	460b      	mov	r3, r1
   13ce6:	a186      	add	r1, pc, #536	; (adr r1, 13f00 <auto_nav+0x1988>)
   13ce8:	e9d1 0100 	ldrd	r0, r1, [r1]
   13cec:	f003 fde6 	bl	178bc <__aeabi_dsub>
   13cf0:	4602      	mov	r2, r0
   13cf2:	460b      	mov	r3, r1
   13cf4:	4610      	mov	r0, r2
   13cf6:	4619      	mov	r1, r3
   13cf8:	a385      	add	r3, pc, #532	; (adr r3, 13f10 <auto_nav+0x1998>)
   13cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
   13cfe:	f004 f8bb 	bl	17e78 <__aeabi_ddiv>
   13d02:	4602      	mov	r2, r0
   13d04:	460b      	mov	r3, r1
   13d06:	4610      	mov	r0, r2
   13d08:	4619      	mov	r1, r3
   13d0a:	f04f 0200 	mov.w	r2, #0
   13d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13d12:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13d16:	f003 ff85 	bl	17c24 <__aeabi_dmul>
   13d1a:	4602      	mov	r2, r0
   13d1c:	460b      	mov	r3, r1
   13d1e:	4610      	mov	r0, r2
   13d20:	4619      	mov	r1, r3
   13d22:	f004 fa61 	bl	181e8 <__aeabi_d2f>
   13d26:	4602      	mov	r2, r0
   13d28:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13d2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d30:	601a      	str	r2, [r3, #0]
   13d32:	e012      	b.n	13d5a <auto_nav+0x17e2>
   13d34:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d3c:	681b      	ldr	r3, [r3, #0]
   13d3e:	4618      	mov	r0, r3
   13d40:	f04f 0100 	mov.w	r1, #0
   13d44:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13d48:	f004 faa4 	bl	18294 <__addsf3>
   13d4c:	4603      	mov	r3, r0
   13d4e:	461a      	mov	r2, r3
   13d50:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d58:	601a      	str	r2, [r3, #0]
   13d5a:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13d5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d62:	681b      	ldr	r3, [r3, #0]
   13d64:	4618      	mov	r0, r3
   13d66:	f04f 0100 	mov.w	r1, #0
   13d6a:	f004 fd39 	bl	187e0 <__aeabi_fcmplt>
   13d6e:	4603      	mov	r3, r0
   13d70:	2b00      	cmp	r3, #0
   13d72:	d1df      	bne.n	13d34 <auto_nav+0x17bc>
   13d74:	e012      	b.n	13d9c <auto_nav+0x1824>
   13d76:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d7e:	681b      	ldr	r3, [r3, #0]
   13d80:	4618      	mov	r0, r3
   13d82:	f04f 0100 	mov.w	r1, #0
   13d86:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13d8a:	f004 fa81 	bl	18290 <__aeabi_fsub>
   13d8e:	4603      	mov	r3, r0
   13d90:	461a      	mov	r2, r3
   13d92:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d9a:	601a      	str	r2, [r3, #0]
   13d9c:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13da4:	681b      	ldr	r3, [r3, #0]
   13da6:	4618      	mov	r0, r3
   13da8:	f04f 0100 	mov.w	r1, #0
   13dac:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13db0:	f004 fd2a 	bl	18808 <__aeabi_fcmpge>
   13db4:	4603      	mov	r3, r0
   13db6:	2b00      	cmp	r3, #0
   13db8:	d1dd      	bne.n	13d76 <auto_nav+0x17fe>
        return;
   13dba:	f000 bcaf 	b.w	1471c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13dbe:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dc6:	781b      	ldrb	r3, [r3, #0]
   13dc8:	2b01      	cmp	r3, #1
   13dca:	f040 84a7 	bne.w	1471c <auto_nav+0x21a4>
    {
        nav_stage =1;
   13dce:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dd6:	2201      	movs	r2, #1
   13dd8:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13dda:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13de2:	781b      	ldrb	r3, [r3, #0]
   13de4:	3301      	adds	r3, #1
   13de6:	b2da      	uxtb	r2, r3
   13de8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13df0:	701a      	strb	r2, [r3, #0]
   13df2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dfa:	2200      	movs	r2, #0
   13dfc:	701a      	strb	r2, [r3, #0]
   13dfe:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e06:	2200      	movs	r2, #0
   13e08:	801a      	strh	r2, [r3, #0]
   13e0a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e12:	681a      	ldr	r2, [r3, #0]
   13e14:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e1c:	601a      	str	r2, [r3, #0]
   13e1e:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e26:	681a      	ldr	r2, [r3, #0]
   13e28:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e30:	601a      	str	r2, [r3, #0]
   13e32:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e3a:	2200      	movs	r2, #0
   13e3c:	801a      	strh	r2, [r3, #0]
   13e3e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e46:	f04f 0200 	mov.w	r2, #0
   13e4a:	601a      	str	r2, [r3, #0]
   13e4c:	f000 bc66 	b.w	1471c <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13e50:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e58:	781b      	ldrb	r3, [r3, #0]
   13e5a:	2b05      	cmp	r3, #5
   13e5c:	f040 845e 	bne.w	1471c <auto_nav+0x21a4>
{
    nav_block = 5;
   13e60:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e68:	2205      	movs	r2, #5
   13e6a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   13e6c:	f24c 5330 	movw	r3, #50480	; 0xc530
   13e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e74:	781b      	ldrb	r3, [r3, #0]
   13e76:	2b00      	cmp	r3, #0
   13e78:	d007      	beq.n	13e8a <auto_nav+0x1912>
   13e7a:	f24c 5330 	movw	r3, #50480	; 0xc530
   13e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e82:	2200      	movs	r2, #0
   13e84:	701a      	strb	r2, [r3, #0]
   13e86:	2301      	movs	r3, #1
   13e88:	e000      	b.n	13e8c <auto_nav+0x1914>
   13e8a:	2300      	movs	r3, #0
   13e8c:	2b00      	cmp	r3, #0
   13e8e:	d043      	beq.n	13f18 <auto_nav+0x19a0>
   13e90:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e98:	2201      	movs	r2, #1
   13e9a:	701a      	strb	r2, [r3, #0]
   13e9c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ea4:	2200      	movs	r2, #0
   13ea6:	701a      	strb	r2, [r3, #0]
   13ea8:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eb0:	2200      	movs	r2, #0
   13eb2:	801a      	strh	r2, [r3, #0]
   13eb4:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13eb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ebc:	681a      	ldr	r2, [r3, #0]
   13ebe:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ec6:	601a      	str	r2, [r3, #0]
   13ec8:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ed0:	681a      	ldr	r2, [r3, #0]
   13ed2:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13ed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eda:	601a      	str	r2, [r3, #0]
   13edc:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13ee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ee4:	2200      	movs	r2, #0
   13ee6:	801a      	strh	r2, [r3, #0]
   13ee8:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13eec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ef0:	f04f 0200 	mov.w	r2, #0
   13ef4:	601a      	str	r2, [r3, #0]
   13ef6:	f000 bc11 	b.w	1471c <auto_nav+0x21a4>
   13efa:	bf00      	nop
   13efc:	f3af 8000 	nop.w
   13f00:	54442d18 	.word	0x54442d18
   13f04:	3ff921fb 	.word	0x3ff921fb
   13f08:	00000000 	.word	0x00000000
   13f0c:	4062c000 	.word	0x4062c000
   13f10:	54442d18 	.word	0x54442d18
   13f14:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   13f18:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13f1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f20:	781b      	ldrb	r3, [r3, #0]
   13f22:	2b00      	cmp	r3, #0
   13f24:	d133      	bne.n	13f8e <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   13f26:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f2e:	2200      	movs	r2, #0
   13f30:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   13f32:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13f36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f3a:	781b      	ldrb	r3, [r3, #0]
   13f3c:	3301      	adds	r3, #1
   13f3e:	b2da      	uxtb	r2, r3
   13f40:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f48:	701a      	strb	r2, [r3, #0]
   13f4a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13f4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f52:	681a      	ldr	r2, [r3, #0]
   13f54:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f5c:	601a      	str	r2, [r3, #0]
   13f5e:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f66:	681a      	ldr	r2, [r3, #0]
   13f68:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f70:	601a      	str	r2, [r3, #0]
   13f72:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13f76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f7a:	2200      	movs	r2, #0
   13f7c:	801a      	strh	r2, [r3, #0]
   13f7e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f86:	f04f 0200 	mov.w	r2, #0
   13f8a:	601a      	str	r2, [r3, #0]
   13f8c:	e3c6      	b.n	1471c <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   13f8e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f96:	781b      	ldrb	r3, [r3, #0]
   13f98:	2b01      	cmp	r3, #1
   13f9a:	f040 81b5 	bne.w	14308 <auto_nav+0x1d90>
    {
        nav_stage =1;
   13f9e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fa6:	2201      	movs	r2, #1
   13fa8:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13faa:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fb2:	2200      	movs	r2, #0
   13fb4:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13fb6:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fbe:	f04f 0200 	mov.w	r2, #0
   13fc2:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13fc4:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fcc:	2203      	movs	r2, #3
   13fce:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   13fd0:	f240 5378 	movw	r3, #1400	; 0x578
   13fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fd8:	695a      	ldr	r2, [r3, #20]
   13fda:	f240 5374 	movw	r3, #1396	; 0x574
   13fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fe2:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13fe4:	f64c 0394 	movw	r3, #51348	; 0xc894
   13fe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fec:	f04f 0200 	mov.w	r2, #0
   13ff0:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   13ff2:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13ff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ffa:	681a      	ldr	r2, [r3, #0]
   13ffc:	f240 5378 	movw	r3, #1400	; 0x578
   14000:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14004:	691b      	ldr	r3, [r3, #16]
   14006:	4610      	mov	r0, r2
   14008:	4619      	mov	r1, r3
   1400a:	f004 f941 	bl	18290 <__aeabi_fsub>
   1400e:	4603      	mov	r3, r0
   14010:	4618      	mov	r0, r3
   14012:	f003 fdb3 	bl	17b7c <__aeabi_f2d>
   14016:	4604      	mov	r4, r0
   14018:	460d      	mov	r5, r1
   1401a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1401e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14022:	681a      	ldr	r2, [r3, #0]
   14024:	f240 5378 	movw	r3, #1400	; 0x578
   14028:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1402c:	68db      	ldr	r3, [r3, #12]
   1402e:	4610      	mov	r0, r2
   14030:	4619      	mov	r1, r3
   14032:	f004 f92d 	bl	18290 <__aeabi_fsub>
   14036:	4603      	mov	r3, r0
   14038:	4618      	mov	r0, r3
   1403a:	f003 fd9f 	bl	17b7c <__aeabi_f2d>
   1403e:	4602      	mov	r2, r0
   14040:	460b      	mov	r3, r1
   14042:	4620      	mov	r0, r4
   14044:	4629      	mov	r1, r5
   14046:	f001 fdb7 	bl	15bb8 <pp_atan2>
   1404a:	4602      	mov	r2, r0
   1404c:	460b      	mov	r3, r1
   1404e:	4610      	mov	r0, r2
   14050:	4619      	mov	r1, r3
   14052:	f004 f8c9 	bl	181e8 <__aeabi_d2f>
   14056:	4603      	mov	r3, r0
   14058:	60fb      	str	r3, [r7, #12]
   1405a:	68f8      	ldr	r0, [r7, #12]
   1405c:	f003 fd8e 	bl	17b7c <__aeabi_f2d>
   14060:	4604      	mov	r4, r0
   14062:	460d      	mov	r5, r1
   14064:	f64c 3334 	movw	r3, #52020	; 0xcb34
   14068:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1406c:	681b      	ldr	r3, [r3, #0]
   1406e:	4618      	mov	r0, r3
   14070:	f04f 0100 	mov.w	r1, #0
   14074:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   14078:	f004 fa14 	bl	184a4 <__aeabi_fmul>
   1407c:	4603      	mov	r3, r0
   1407e:	4618      	mov	r0, r3
   14080:	f003 fd7c 	bl	17b7c <__aeabi_f2d>
   14084:	4602      	mov	r2, r0
   14086:	460b      	mov	r3, r1
   14088:	f04f 0000 	mov.w	r0, #0
   1408c:	f04f 0100 	mov.w	r1, #0
   14090:	f2c4 0114 	movt	r1, #16404	; 0x4014
   14094:	f003 fef0 	bl	17e78 <__aeabi_ddiv>
   14098:	4602      	mov	r2, r0
   1409a:	460b      	mov	r3, r1
   1409c:	4620      	mov	r0, r4
   1409e:	4629      	mov	r1, r5
   140a0:	f003 fc0e 	bl	178c0 <__adddf3>
   140a4:	4602      	mov	r2, r0
   140a6:	460b      	mov	r3, r1
   140a8:	4610      	mov	r0, r2
   140aa:	4619      	mov	r1, r3
   140ac:	f004 f89c 	bl	181e8 <__aeabi_d2f>
   140b0:	4603      	mov	r3, r0
   140b2:	60bb      	str	r3, [r7, #8]
   140b4:	f240 5378 	movw	r3, #1400	; 0x578
   140b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140bc:	68db      	ldr	r3, [r3, #12]
   140be:	4618      	mov	r0, r3
   140c0:	f003 fd5c 	bl	17b7c <__aeabi_f2d>
   140c4:	4604      	mov	r4, r0
   140c6:	460d      	mov	r5, r1
   140c8:	68b8      	ldr	r0, [r7, #8]
   140ca:	f003 fd57 	bl	17b7c <__aeabi_f2d>
   140ce:	4602      	mov	r2, r0
   140d0:	460b      	mov	r3, r1
   140d2:	4610      	mov	r0, r2
   140d4:	4619      	mov	r1, r3
   140d6:	a388      	add	r3, pc, #544	; (adr r3, 142f8 <auto_nav+0x1d80>)
   140d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   140dc:	f003 fbf0 	bl	178c0 <__adddf3>
   140e0:	4602      	mov	r2, r0
   140e2:	460b      	mov	r3, r1
   140e4:	4610      	mov	r0, r2
   140e6:	4619      	mov	r1, r3
   140e8:	f001 fe26 	bl	15d38 <pp_sin>
   140ec:	4602      	mov	r2, r0
   140ee:	460b      	mov	r3, r1
   140f0:	4610      	mov	r0, r2
   140f2:	4619      	mov	r1, r3
   140f4:	f04f 0200 	mov.w	r2, #0
   140f8:	f04f 0300 	mov.w	r3, #0
   140fc:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14100:	f003 fd90 	bl	17c24 <__aeabi_dmul>
   14104:	4602      	mov	r2, r0
   14106:	460b      	mov	r3, r1
   14108:	4620      	mov	r0, r4
   1410a:	4629      	mov	r1, r5
   1410c:	f003 fbd8 	bl	178c0 <__adddf3>
   14110:	4602      	mov	r2, r0
   14112:	460b      	mov	r3, r1
   14114:	4610      	mov	r0, r2
   14116:	4619      	mov	r1, r3
   14118:	f004 f866 	bl	181e8 <__aeabi_d2f>
   1411c:	4606      	mov	r6, r0
   1411e:	f240 5378 	movw	r3, #1400	; 0x578
   14122:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14126:	691b      	ldr	r3, [r3, #16]
   14128:	4618      	mov	r0, r3
   1412a:	f003 fd27 	bl	17b7c <__aeabi_f2d>
   1412e:	4604      	mov	r4, r0
   14130:	460d      	mov	r5, r1
   14132:	68b8      	ldr	r0, [r7, #8]
   14134:	f003 fd22 	bl	17b7c <__aeabi_f2d>
   14138:	4602      	mov	r2, r0
   1413a:	460b      	mov	r3, r1
   1413c:	4610      	mov	r0, r2
   1413e:	4619      	mov	r1, r3
   14140:	f001 fdfa 	bl	15d38 <pp_sin>
   14144:	4602      	mov	r2, r0
   14146:	460b      	mov	r3, r1
   14148:	4610      	mov	r0, r2
   1414a:	4619      	mov	r1, r3
   1414c:	f04f 0200 	mov.w	r2, #0
   14150:	f04f 0300 	mov.w	r3, #0
   14154:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14158:	f003 fd64 	bl	17c24 <__aeabi_dmul>
   1415c:	4602      	mov	r2, r0
   1415e:	460b      	mov	r3, r1
   14160:	4620      	mov	r0, r4
   14162:	4629      	mov	r1, r5
   14164:	f003 fbac 	bl	178c0 <__adddf3>
   14168:	4602      	mov	r2, r0
   1416a:	460b      	mov	r3, r1
   1416c:	4610      	mov	r0, r2
   1416e:	4619      	mov	r1, r3
   14170:	f004 f83a 	bl	181e8 <__aeabi_d2f>
   14174:	4603      	mov	r3, r0
   14176:	4630      	mov	r0, r6
   14178:	4619      	mov	r1, r3
   1417a:	f000 fbc1 	bl	14900 <fly_to_xy>
   1417e:	68b8      	ldr	r0, [r7, #8]
   14180:	f003 fcfc 	bl	17b7c <__aeabi_f2d>
   14184:	4602      	mov	r2, r0
   14186:	460b      	mov	r3, r1
   14188:	a15b      	add	r1, pc, #364	; (adr r1, 142f8 <auto_nav+0x1d80>)
   1418a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1418e:	f003 fb95 	bl	178bc <__aeabi_dsub>
   14192:	4602      	mov	r2, r0
   14194:	460b      	mov	r3, r1
   14196:	4610      	mov	r0, r2
   14198:	4619      	mov	r1, r3
   1419a:	a359      	add	r3, pc, #356	; (adr r3, 14300 <auto_nav+0x1d88>)
   1419c:	e9d3 2300 	ldrd	r2, r3, [r3]
   141a0:	f003 fe6a 	bl	17e78 <__aeabi_ddiv>
   141a4:	4602      	mov	r2, r0
   141a6:	460b      	mov	r3, r1
   141a8:	4610      	mov	r0, r2
   141aa:	4619      	mov	r1, r3
   141ac:	f04f 0200 	mov.w	r2, #0
   141b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   141b4:	f2c4 0366 	movt	r3, #16486	; 0x4066
   141b8:	f003 fd34 	bl	17c24 <__aeabi_dmul>
   141bc:	4602      	mov	r2, r0
   141be:	460b      	mov	r3, r1
   141c0:	4610      	mov	r0, r2
   141c2:	4619      	mov	r1, r3
   141c4:	f004 f810 	bl	181e8 <__aeabi_d2f>
   141c8:	4602      	mov	r2, r0
   141ca:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   141ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141d2:	601a      	str	r2, [r3, #0]
   141d4:	e012      	b.n	141fc <auto_nav+0x1c84>
   141d6:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   141da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141de:	681b      	ldr	r3, [r3, #0]
   141e0:	4618      	mov	r0, r3
   141e2:	f04f 0100 	mov.w	r1, #0
   141e6:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   141ea:	f004 f853 	bl	18294 <__addsf3>
   141ee:	4603      	mov	r3, r0
   141f0:	461a      	mov	r2, r3
   141f2:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   141f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141fa:	601a      	str	r2, [r3, #0]
   141fc:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14200:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14204:	681b      	ldr	r3, [r3, #0]
   14206:	4618      	mov	r0, r3
   14208:	f04f 0100 	mov.w	r1, #0
   1420c:	f004 fae8 	bl	187e0 <__aeabi_fcmplt>
   14210:	4603      	mov	r3, r0
   14212:	2b00      	cmp	r3, #0
   14214:	d1df      	bne.n	141d6 <auto_nav+0x1c5e>
   14216:	e012      	b.n	1423e <auto_nav+0x1cc6>
   14218:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1421c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14220:	681b      	ldr	r3, [r3, #0]
   14222:	4618      	mov	r0, r3
   14224:	f04f 0100 	mov.w	r1, #0
   14228:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1422c:	f004 f830 	bl	18290 <__aeabi_fsub>
   14230:	4603      	mov	r3, r0
   14232:	461a      	mov	r2, r3
   14234:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14238:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1423c:	601a      	str	r2, [r3, #0]
   1423e:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14242:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14246:	681b      	ldr	r3, [r3, #0]
   14248:	4618      	mov	r0, r3
   1424a:	f04f 0100 	mov.w	r1, #0
   1424e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14252:	f004 fad9 	bl	18808 <__aeabi_fcmpge>
   14256:	4603      	mov	r3, r0
   14258:	2b00      	cmp	r3, #0
   1425a:	d1dd      	bne.n	14218 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   1425c:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14260:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14264:	681b      	ldr	r3, [r3, #0]
   14266:	4618      	mov	r0, r3
   14268:	f04f 0100 	mov.w	r1, #0
   1426c:	f004 fad6 	bl	1881c <__aeabi_fcmpgt>
   14270:	4603      	mov	r3, r0
   14272:	2b00      	cmp	r3, #0
   14274:	d100      	bne.n	14278 <auto_nav+0x1d00>
        return;
   14276:	e251      	b.n	1471c <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14278:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1427c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14280:	681b      	ldr	r3, [r3, #0]
   14282:	4618      	mov	r0, r3
   14284:	f04f 0100 	mov.w	r1, #0
   14288:	f2c4 1120 	movt	r1, #16672	; 0x4120
   1428c:	f004 faa8 	bl	187e0 <__aeabi_fcmplt>
   14290:	4603      	mov	r3, r0
   14292:	2b00      	cmp	r3, #0
   14294:	d100      	bne.n	14298 <auto_nav+0x1d20>
        return;
   14296:	e241      	b.n	1471c <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14298:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1429c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142a0:	781b      	ldrb	r3, [r3, #0]
   142a2:	3301      	adds	r3, #1
   142a4:	b2da      	uxtb	r2, r3
   142a6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   142aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142ae:	701a      	strb	r2, [r3, #0]
   142b0:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   142b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142b8:	681a      	ldr	r2, [r3, #0]
   142ba:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   142be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142c2:	601a      	str	r2, [r3, #0]
   142c4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   142c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142cc:	681a      	ldr	r2, [r3, #0]
   142ce:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   142d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142d6:	601a      	str	r2, [r3, #0]
   142d8:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   142dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142e0:	2200      	movs	r2, #0
   142e2:	801a      	strh	r2, [r3, #0]
   142e4:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   142e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142ec:	f04f 0200 	mov.w	r2, #0
   142f0:	601a      	str	r2, [r3, #0]
   142f2:	e213      	b.n	1471c <auto_nav+0x21a4>
   142f4:	f3af 8000 	nop.w
   142f8:	54442d18 	.word	0x54442d18
   142fc:	3ff921fb 	.word	0x3ff921fb
   14300:	54442d18 	.word	0x54442d18
   14304:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   14308:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1430c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14310:	781b      	ldrb	r3, [r3, #0]
   14312:	2b02      	cmp	r3, #2
   14314:	f040 81ad 	bne.w	14672 <auto_nav+0x20fa>
    {
         nav_stage = 2;
   14318:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1431c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14320:	2202      	movs	r2, #2
   14322:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   14324:	f24c 532f 	movw	r3, #50479	; 0xc52f
   14328:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1432c:	2200      	movs	r2, #0
   1432e:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   14330:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14334:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14338:	f04f 0200 	mov.w	r2, #0
   1433c:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1433e:	f24c 532d 	movw	r3, #50477	; 0xc52d
   14342:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14346:	2203      	movs	r2, #3
   14348:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   1434a:	f240 5378 	movw	r3, #1400	; 0x578
   1434e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   14354:	f240 5374 	movw	r3, #1396	; 0x574
   14358:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1435c:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   1435e:	f64c 0394 	movw	r3, #51348	; 0xc894
   14362:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14366:	f04f 0200 	mov.w	r2, #0
   1436a:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   1436c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14370:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14374:	681a      	ldr	r2, [r3, #0]
   14376:	f240 5378 	movw	r3, #1400	; 0x578
   1437a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1437e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14380:	4610      	mov	r0, r2
   14382:	4619      	mov	r1, r3
   14384:	f003 ff84 	bl	18290 <__aeabi_fsub>
   14388:	4603      	mov	r3, r0
   1438a:	4618      	mov	r0, r3
   1438c:	f003 fbf6 	bl	17b7c <__aeabi_f2d>
   14390:	4604      	mov	r4, r0
   14392:	460d      	mov	r5, r1
   14394:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14398:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1439c:	681a      	ldr	r2, [r3, #0]
   1439e:	f240 5378 	movw	r3, #1400	; 0x578
   143a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   143a8:	4610      	mov	r0, r2
   143aa:	4619      	mov	r1, r3
   143ac:	f003 ff70 	bl	18290 <__aeabi_fsub>
   143b0:	4603      	mov	r3, r0
   143b2:	4618      	mov	r0, r3
   143b4:	f003 fbe2 	bl	17b7c <__aeabi_f2d>
   143b8:	4602      	mov	r2, r0
   143ba:	460b      	mov	r3, r1
   143bc:	4620      	mov	r0, r4
   143be:	4629      	mov	r1, r5
   143c0:	f001 fbfa 	bl	15bb8 <pp_atan2>
   143c4:	4602      	mov	r2, r0
   143c6:	460b      	mov	r3, r1
   143c8:	4610      	mov	r0, r2
   143ca:	4619      	mov	r1, r3
   143cc:	f003 ff0c 	bl	181e8 <__aeabi_d2f>
   143d0:	4603      	mov	r3, r0
   143d2:	607b      	str	r3, [r7, #4]
   143d4:	6878      	ldr	r0, [r7, #4]
   143d6:	f003 fbd1 	bl	17b7c <__aeabi_f2d>
   143da:	4604      	mov	r4, r0
   143dc:	460d      	mov	r5, r1
   143de:	f64c 3334 	movw	r3, #52020	; 0xcb34
   143e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143e6:	681b      	ldr	r3, [r3, #0]
   143e8:	4618      	mov	r0, r3
   143ea:	f04f 0100 	mov.w	r1, #0
   143ee:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   143f2:	f004 f857 	bl	184a4 <__aeabi_fmul>
   143f6:	4603      	mov	r3, r0
   143f8:	4618      	mov	r0, r3
   143fa:	f003 fbbf 	bl	17b7c <__aeabi_f2d>
   143fe:	4602      	mov	r2, r0
   14400:	460b      	mov	r3, r1
   14402:	f04f 0000 	mov.w	r0, #0
   14406:	f04f 0100 	mov.w	r1, #0
   1440a:	f2c4 0114 	movt	r1, #16404	; 0x4014
   1440e:	f003 fd33 	bl	17e78 <__aeabi_ddiv>
   14412:	4602      	mov	r2, r0
   14414:	460b      	mov	r3, r1
   14416:	4620      	mov	r0, r4
   14418:	4629      	mov	r1, r5
   1441a:	f003 fa51 	bl	178c0 <__adddf3>
   1441e:	4602      	mov	r2, r0
   14420:	460b      	mov	r3, r1
   14422:	4610      	mov	r0, r2
   14424:	4619      	mov	r1, r3
   14426:	f003 fedf 	bl	181e8 <__aeabi_d2f>
   1442a:	4603      	mov	r3, r0
   1442c:	603b      	str	r3, [r7, #0]
   1442e:	f240 5378 	movw	r3, #1400	; 0x578
   14432:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14438:	4618      	mov	r0, r3
   1443a:	f003 fb9f 	bl	17b7c <__aeabi_f2d>
   1443e:	4604      	mov	r4, r0
   14440:	460d      	mov	r5, r1
   14442:	6838      	ldr	r0, [r7, #0]
   14444:	f003 fb9a 	bl	17b7c <__aeabi_f2d>
   14448:	4602      	mov	r2, r0
   1444a:	460b      	mov	r3, r1
   1444c:	4610      	mov	r0, r2
   1444e:	4619      	mov	r1, r3
   14450:	a3b5      	add	r3, pc, #724	; (adr r3, 14728 <auto_nav+0x21b0>)
   14452:	e9d3 2300 	ldrd	r2, r3, [r3]
   14456:	f003 fa33 	bl	178c0 <__adddf3>
   1445a:	4602      	mov	r2, r0
   1445c:	460b      	mov	r3, r1
   1445e:	4610      	mov	r0, r2
   14460:	4619      	mov	r1, r3
   14462:	f001 fc69 	bl	15d38 <pp_sin>
   14466:	4602      	mov	r2, r0
   14468:	460b      	mov	r3, r1
   1446a:	4610      	mov	r0, r2
   1446c:	4619      	mov	r1, r3
   1446e:	f04f 0200 	mov.w	r2, #0
   14472:	f04f 0300 	mov.w	r3, #0
   14476:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1447a:	f003 fbd3 	bl	17c24 <__aeabi_dmul>
   1447e:	4602      	mov	r2, r0
   14480:	460b      	mov	r3, r1
   14482:	4620      	mov	r0, r4
   14484:	4629      	mov	r1, r5
   14486:	f003 fa1b 	bl	178c0 <__adddf3>
   1448a:	4602      	mov	r2, r0
   1448c:	460b      	mov	r3, r1
   1448e:	4610      	mov	r0, r2
   14490:	4619      	mov	r1, r3
   14492:	f003 fea9 	bl	181e8 <__aeabi_d2f>
   14496:	4606      	mov	r6, r0
   14498:	f240 5378 	movw	r3, #1400	; 0x578
   1449c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   144a2:	4618      	mov	r0, r3
   144a4:	f003 fb6a 	bl	17b7c <__aeabi_f2d>
   144a8:	4604      	mov	r4, r0
   144aa:	460d      	mov	r5, r1
   144ac:	6838      	ldr	r0, [r7, #0]
   144ae:	f003 fb65 	bl	17b7c <__aeabi_f2d>
   144b2:	4602      	mov	r2, r0
   144b4:	460b      	mov	r3, r1
   144b6:	4610      	mov	r0, r2
   144b8:	4619      	mov	r1, r3
   144ba:	f001 fc3d 	bl	15d38 <pp_sin>
   144be:	4602      	mov	r2, r0
   144c0:	460b      	mov	r3, r1
   144c2:	4610      	mov	r0, r2
   144c4:	4619      	mov	r1, r3
   144c6:	f04f 0200 	mov.w	r2, #0
   144ca:	f04f 0300 	mov.w	r3, #0
   144ce:	f2c4 0359 	movt	r3, #16473	; 0x4059
   144d2:	f003 fba7 	bl	17c24 <__aeabi_dmul>
   144d6:	4602      	mov	r2, r0
   144d8:	460b      	mov	r3, r1
   144da:	4620      	mov	r0, r4
   144dc:	4629      	mov	r1, r5
   144de:	f003 f9ef 	bl	178c0 <__adddf3>
   144e2:	4602      	mov	r2, r0
   144e4:	460b      	mov	r3, r1
   144e6:	4610      	mov	r0, r2
   144e8:	4619      	mov	r1, r3
   144ea:	f003 fe7d 	bl	181e8 <__aeabi_d2f>
   144ee:	4603      	mov	r3, r0
   144f0:	4630      	mov	r0, r6
   144f2:	4619      	mov	r1, r3
   144f4:	f000 fa04 	bl	14900 <fly_to_xy>
   144f8:	6838      	ldr	r0, [r7, #0]
   144fa:	f003 fb3f 	bl	17b7c <__aeabi_f2d>
   144fe:	4602      	mov	r2, r0
   14500:	460b      	mov	r3, r1
   14502:	a189      	add	r1, pc, #548	; (adr r1, 14728 <auto_nav+0x21b0>)
   14504:	e9d1 0100 	ldrd	r0, r1, [r1]
   14508:	f003 f9d8 	bl	178bc <__aeabi_dsub>
   1450c:	4602      	mov	r2, r0
   1450e:	460b      	mov	r3, r1
   14510:	4610      	mov	r0, r2
   14512:	4619      	mov	r1, r3
   14514:	a386      	add	r3, pc, #536	; (adr r3, 14730 <auto_nav+0x21b8>)
   14516:	e9d3 2300 	ldrd	r2, r3, [r3]
   1451a:	f003 fcad 	bl	17e78 <__aeabi_ddiv>
   1451e:	4602      	mov	r2, r0
   14520:	460b      	mov	r3, r1
   14522:	4610      	mov	r0, r2
   14524:	4619      	mov	r1, r3
   14526:	f04f 0200 	mov.w	r2, #0
   1452a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1452e:	f2c4 0366 	movt	r3, #16486	; 0x4066
   14532:	f003 fb77 	bl	17c24 <__aeabi_dmul>
   14536:	4602      	mov	r2, r0
   14538:	460b      	mov	r3, r1
   1453a:	4610      	mov	r0, r2
   1453c:	4619      	mov	r1, r3
   1453e:	f003 fe53 	bl	181e8 <__aeabi_d2f>
   14542:	4602      	mov	r2, r0
   14544:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14548:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1454c:	601a      	str	r2, [r3, #0]
   1454e:	e012      	b.n	14576 <auto_nav+0x1ffe>
   14550:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14554:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14558:	681b      	ldr	r3, [r3, #0]
   1455a:	4618      	mov	r0, r3
   1455c:	f04f 0100 	mov.w	r1, #0
   14560:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14564:	f003 fe96 	bl	18294 <__addsf3>
   14568:	4603      	mov	r3, r0
   1456a:	461a      	mov	r2, r3
   1456c:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14570:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14574:	601a      	str	r2, [r3, #0]
   14576:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1457a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1457e:	681b      	ldr	r3, [r3, #0]
   14580:	4618      	mov	r0, r3
   14582:	f04f 0100 	mov.w	r1, #0
   14586:	f004 f92b 	bl	187e0 <__aeabi_fcmplt>
   1458a:	4603      	mov	r3, r0
   1458c:	2b00      	cmp	r3, #0
   1458e:	d1df      	bne.n	14550 <auto_nav+0x1fd8>
   14590:	e012      	b.n	145b8 <auto_nav+0x2040>
   14592:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14596:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1459a:	681b      	ldr	r3, [r3, #0]
   1459c:	4618      	mov	r0, r3
   1459e:	f04f 0100 	mov.w	r1, #0
   145a2:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   145a6:	f003 fe73 	bl	18290 <__aeabi_fsub>
   145aa:	4603      	mov	r3, r0
   145ac:	461a      	mov	r2, r3
   145ae:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   145b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145b6:	601a      	str	r2, [r3, #0]
   145b8:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   145bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145c0:	681b      	ldr	r3, [r3, #0]
   145c2:	4618      	mov	r0, r3
   145c4:	f04f 0100 	mov.w	r1, #0
   145c8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   145cc:	f004 f91c 	bl	18808 <__aeabi_fcmpge>
   145d0:	4603      	mov	r3, r0
   145d2:	2b00      	cmp	r3, #0
   145d4:	d1dd      	bne.n	14592 <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   145d6:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   145da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145de:	681b      	ldr	r3, [r3, #0]
   145e0:	4618      	mov	r0, r3
   145e2:	f04f 0100 	mov.w	r1, #0
   145e6:	f2c4 3134 	movt	r1, #17204	; 0x4334
   145ea:	f004 f917 	bl	1881c <__aeabi_fcmpgt>
   145ee:	4603      	mov	r3, r0
   145f0:	2b00      	cmp	r3, #0
   145f2:	d100      	bne.n	145f6 <auto_nav+0x207e>
          return;
   145f4:	e092      	b.n	1471c <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   145f6:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   145fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145fe:	681b      	ldr	r3, [r3, #0]
   14600:	4618      	mov	r0, r3
   14602:	f04f 0100 	mov.w	r1, #0
   14606:	f2c4 313e 	movt	r1, #17214	; 0x433e
   1460a:	f004 f8e9 	bl	187e0 <__aeabi_fcmplt>
   1460e:	4603      	mov	r3, r0
   14610:	2b00      	cmp	r3, #0
   14612:	d100      	bne.n	14616 <auto_nav+0x209e>
          return;
   14614:	e082      	b.n	1471c <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   14616:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1461a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1461e:	781b      	ldrb	r3, [r3, #0]
   14620:	3301      	adds	r3, #1
   14622:	b2da      	uxtb	r2, r3
   14624:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14628:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1462c:	701a      	strb	r2, [r3, #0]
   1462e:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14632:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14636:	681a      	ldr	r2, [r3, #0]
   14638:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1463c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14640:	601a      	str	r2, [r3, #0]
   14642:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14646:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1464a:	681a      	ldr	r2, [r3, #0]
   1464c:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   14650:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14654:	601a      	str	r2, [r3, #0]
   14656:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1465a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1465e:	2200      	movs	r2, #0
   14660:	801a      	strh	r2, [r3, #0]
   14662:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   14666:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1466a:	f04f 0200 	mov.w	r2, #0
   1466e:	601a      	str	r2, [r3, #0]
   14670:	e054      	b.n	1471c <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   14672:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14676:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1467a:	781b      	ldrb	r3, [r3, #0]
   1467c:	2b03      	cmp	r3, #3
   1467e:	d106      	bne.n	1468e <auto_nav+0x2116>
    {
	  nav_stage = 3;
   14680:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14684:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14688:	2203      	movs	r2, #3
   1468a:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   1468c:	e44b      	b.n	13f26 <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   1468e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14692:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14696:	781b      	ldrb	r3, [r3, #0]
   14698:	2b04      	cmp	r3, #4
   1469a:	d13f      	bne.n	1471c <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   1469c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   146a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146a4:	2204      	movs	r2, #4
   146a6:	701a      	strb	r2, [r3, #0]
        NextBlock()
   146a8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   146ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146b0:	781b      	ldrb	r3, [r3, #0]
   146b2:	3301      	adds	r3, #1
   146b4:	b2da      	uxtb	r2, r3
   146b6:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   146ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146be:	701a      	strb	r2, [r3, #0]
   146c0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   146c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146c8:	2200      	movs	r2, #0
   146ca:	701a      	strb	r2, [r3, #0]
   146cc:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   146d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146d4:	2200      	movs	r2, #0
   146d6:	801a      	strh	r2, [r3, #0]
   146d8:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   146dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146e0:	681a      	ldr	r2, [r3, #0]
   146e2:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   146e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146ea:	601a      	str	r2, [r3, #0]
   146ec:	f64c 3300 	movw	r3, #51968	; 0xcb00
   146f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146f4:	681a      	ldr	r2, [r3, #0]
   146f6:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   146fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146fe:	601a      	str	r2, [r3, #0]
   14700:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   14704:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14708:	2200      	movs	r2, #0
   1470a:	801a      	strh	r2, [r3, #0]
   1470c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   14710:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14714:	f04f 0200 	mov.w	r2, #0
   14718:	601a      	str	r2, [r3, #0]
   1471a:	bf00      	nop
    else { }
}
else { }

//#endif
}
   1471c:	372c      	adds	r7, #44	; 0x2c
   1471e:	46bd      	mov	sp, r7
   14720:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14722:	bf00      	nop
   14724:	f3af 8000 	nop.w
   14728:	54442d18 	.word	0x54442d18
   1472c:	3ff921fb 	.word	0x3ff921fb
   14730:	54442d18 	.word	0x54442d18
   14734:	400921fb 	.word	0x400921fb

00014738 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   14738:	b590      	push	{r4, r7, lr}
   1473a:	b087      	sub	sp, #28
   1473c:	af00      	add	r7, sp, #0
   1473e:	4603      	mov	r3, r0
   14740:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   14742:	79f9      	ldrb	r1, [r7, #7]
   14744:	f240 5278 	movw	r2, #1400	; 0x578
   14748:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1474c:	460b      	mov	r3, r1
   1474e:	005b      	lsls	r3, r3, #1
   14750:	440b      	add	r3, r1
   14752:	009b      	lsls	r3, r3, #2
   14754:	4413      	add	r3, r2
   14756:	681a      	ldr	r2, [r3, #0]
   14758:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1475c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14760:	681b      	ldr	r3, [r3, #0]
   14762:	4610      	mov	r0, r2
   14764:	4619      	mov	r1, r3
   14766:	f003 fd93 	bl	18290 <__aeabi_fsub>
   1476a:	4603      	mov	r3, r0
   1476c:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   1476e:	79f9      	ldrb	r1, [r7, #7]
   14770:	f240 5278 	movw	r2, #1400	; 0x578
   14774:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14778:	460b      	mov	r3, r1
   1477a:	005b      	lsls	r3, r3, #1
   1477c:	440b      	add	r3, r1
   1477e:	009b      	lsls	r3, r3, #2
   14780:	4413      	add	r3, r2
   14782:	3304      	adds	r3, #4
   14784:	681a      	ldr	r2, [r3, #0]
   14786:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1478a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1478e:	681b      	ldr	r3, [r3, #0]
   14790:	4610      	mov	r0, r2
   14792:	4619      	mov	r1, r3
   14794:	f003 fd7c 	bl	18290 <__aeabi_fsub>
   14798:	4603      	mov	r3, r0
   1479a:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   1479c:	6978      	ldr	r0, [r7, #20]
   1479e:	6979      	ldr	r1, [r7, #20]
   147a0:	f003 fe80 	bl	184a4 <__aeabi_fmul>
   147a4:	4603      	mov	r3, r0
   147a6:	461c      	mov	r4, r3
   147a8:	6938      	ldr	r0, [r7, #16]
   147aa:	6939      	ldr	r1, [r7, #16]
   147ac:	f003 fe7a 	bl	184a4 <__aeabi_fmul>
   147b0:	4603      	mov	r3, r0
   147b2:	4620      	mov	r0, r4
   147b4:	4619      	mov	r1, r3
   147b6:	f003 fd6d 	bl	18294 <__addsf3>
   147ba:	4603      	mov	r3, r0
   147bc:	461a      	mov	r2, r3
   147be:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   147c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147c6:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   147c8:	f64c 3334 	movw	r3, #52020	; 0xcb34
   147cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147d0:	681b      	ldr	r3, [r3, #0]
   147d2:	4618      	mov	r0, r3
   147d4:	f04f 0100 	mov.w	r1, #0
   147d8:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   147dc:	f003 fe62 	bl	184a4 <__aeabi_fmul>
   147e0:	4603      	mov	r3, r0
   147e2:	461a      	mov	r2, r3
   147e4:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   147e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147ec:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   147ee:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   147f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147f6:	681b      	ldr	r3, [r3, #0]
   147f8:	4618      	mov	r0, r3
   147fa:	f04f 0100 	mov.w	r1, #0
   147fe:	f2c4 2120 	movt	r1, #16928	; 0x4220
   14802:	f003 ffed 	bl	187e0 <__aeabi_fcmplt>
   14806:	4603      	mov	r3, r0
   14808:	2b00      	cmp	r3, #0
   1480a:	d004      	beq.n	14816 <approaching+0xde>
   1480c:	f04f 0200 	mov.w	r2, #0
   14810:	f2c4 2220 	movt	r2, #16928	; 0x4220
   14814:	e004      	b.n	14820 <approaching+0xe8>
   14816:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   1481a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1481e:	681a      	ldr	r2, [r3, #0]
   14820:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14824:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14828:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   1482a:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   1482e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14832:	681a      	ldr	r2, [r3, #0]
   14834:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14838:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1483c:	681b      	ldr	r3, [r3, #0]
   1483e:	4610      	mov	r0, r2
   14840:	4619      	mov	r1, r3
   14842:	f003 fe2f 	bl	184a4 <__aeabi_fmul>
   14846:	4603      	mov	r3, r0
   14848:	461a      	mov	r2, r3
   1484a:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   1484e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14852:	681b      	ldr	r3, [r3, #0]
   14854:	4610      	mov	r0, r2
   14856:	4619      	mov	r1, r3
   14858:	f003 ffe0 	bl	1881c <__aeabi_fcmpgt>
   1485c:	4603      	mov	r3, r0
   1485e:	2b00      	cmp	r3, #0
   14860:	d001      	beq.n	14866 <approaching+0x12e>
    return TRUE;
   14862:	2301      	movs	r3, #1
   14864:	e048      	b.n	148f8 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   14866:	79f9      	ldrb	r1, [r7, #7]
   14868:	f240 5278 	movw	r2, #1400	; 0x578
   1486c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14870:	460b      	mov	r3, r1
   14872:	005b      	lsls	r3, r3, #1
   14874:	440b      	add	r3, r1
   14876:	009b      	lsls	r3, r3, #2
   14878:	4413      	add	r3, r2
   1487a:	681a      	ldr	r2, [r3, #0]
   1487c:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   14880:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14884:	681b      	ldr	r3, [r3, #0]
   14886:	4610      	mov	r0, r2
   14888:	4619      	mov	r1, r3
   1488a:	f003 fd01 	bl	18290 <__aeabi_fsub>
   1488e:	4603      	mov	r3, r0
   14890:	4618      	mov	r0, r3
   14892:	6979      	ldr	r1, [r7, #20]
   14894:	f003 fe06 	bl	184a4 <__aeabi_fmul>
   14898:	4603      	mov	r3, r0
   1489a:	461c      	mov	r4, r3
   1489c:	79f9      	ldrb	r1, [r7, #7]
   1489e:	f240 5278 	movw	r2, #1400	; 0x578
   148a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   148a6:	460b      	mov	r3, r1
   148a8:	005b      	lsls	r3, r3, #1
   148aa:	440b      	add	r3, r1
   148ac:	009b      	lsls	r3, r3, #2
   148ae:	4413      	add	r3, r2
   148b0:	3304      	adds	r3, #4
   148b2:	681a      	ldr	r2, [r3, #0]
   148b4:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   148b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148bc:	681b      	ldr	r3, [r3, #0]
   148be:	4610      	mov	r0, r2
   148c0:	4619      	mov	r1, r3
   148c2:	f003 fce5 	bl	18290 <__aeabi_fsub>
   148c6:	4603      	mov	r3, r0
   148c8:	4618      	mov	r0, r3
   148ca:	6939      	ldr	r1, [r7, #16]
   148cc:	f003 fdea 	bl	184a4 <__aeabi_fmul>
   148d0:	4603      	mov	r3, r0
   148d2:	4620      	mov	r0, r4
   148d4:	4619      	mov	r1, r3
   148d6:	f003 fcdd 	bl	18294 <__addsf3>
   148da:	4603      	mov	r3, r0
   148dc:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   148de:	2301      	movs	r3, #1
   148e0:	461c      	mov	r4, r3
   148e2:	68f8      	ldr	r0, [r7, #12]
   148e4:	f04f 0100 	mov.w	r1, #0
   148e8:	f003 ff7a 	bl	187e0 <__aeabi_fcmplt>
   148ec:	4603      	mov	r3, r0
   148ee:	2b00      	cmp	r3, #0
   148f0:	d101      	bne.n	148f6 <approaching+0x1be>
   148f2:	2300      	movs	r3, #0
   148f4:	461c      	mov	r4, r3
   148f6:	b2e3      	uxtb	r3, r4
}
   148f8:	4618      	mov	r0, r3
   148fa:	371c      	adds	r7, #28
   148fc:	46bd      	mov	sp, r7
   148fe:	bd90      	pop	{r4, r7, pc}

00014900 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   14900:	b5b0      	push	{r4, r5, r7, lr}
   14902:	b082      	sub	sp, #8
   14904:	af00      	add	r7, sp, #0
   14906:	6078      	str	r0, [r7, #4]
   14908:	6039      	str	r1, [r7, #0]
  desired_x = x;
   1490a:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
   1490e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14912:	687a      	ldr	r2, [r7, #4]
   14914:	601a      	str	r2, [r3, #0]
  desired_y = y;
   14916:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
   1491a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1491e:	683a      	ldr	r2, [r7, #0]
   14920:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   14922:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14926:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1492a:	681b      	ldr	r3, [r3, #0]
   1492c:	6838      	ldr	r0, [r7, #0]
   1492e:	4619      	mov	r1, r3
   14930:	f003 fcae 	bl	18290 <__aeabi_fsub>
   14934:	4603      	mov	r3, r0
   14936:	4618      	mov	r0, r3
   14938:	f003 f920 	bl	17b7c <__aeabi_f2d>
   1493c:	4604      	mov	r4, r0
   1493e:	460d      	mov	r5, r1
   14940:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14944:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14948:	681b      	ldr	r3, [r3, #0]
   1494a:	6878      	ldr	r0, [r7, #4]
   1494c:	4619      	mov	r1, r3
   1494e:	f003 fc9f 	bl	18290 <__aeabi_fsub>
   14952:	4603      	mov	r3, r0
   14954:	4618      	mov	r0, r3
   14956:	f003 f911 	bl	17b7c <__aeabi_f2d>
   1495a:	4602      	mov	r2, r0
   1495c:	460b      	mov	r3, r1
   1495e:	4620      	mov	r0, r4
   14960:	4629      	mov	r1, r5
   14962:	f001 f929 	bl	15bb8 <pp_atan2>
   14966:	4602      	mov	r2, r0
   14968:	460b      	mov	r3, r1
   1496a:	a10b      	add	r1, pc, #44	; (adr r1, 14998 <fly_to_xy+0x98>)
   1496c:	e9d1 0100 	ldrd	r0, r1, [r1]
   14970:	f002 ffa4 	bl	178bc <__aeabi_dsub>
   14974:	4602      	mov	r2, r0
   14976:	460b      	mov	r3, r1
   14978:	4610      	mov	r0, r2
   1497a:	4619      	mov	r1, r3
   1497c:	f003 fc34 	bl	181e8 <__aeabi_d2f>
   14980:	4602      	mov	r2, r0
   14982:	f64c 038c 	movw	r3, #51340	; 0xc88c
   14986:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1498a:	601a      	str	r2, [r3, #0]
}
   1498c:	3708      	adds	r7, #8
   1498e:	46bd      	mov	sp, r7
   14990:	bdb0      	pop	{r4, r5, r7, pc}
   14992:	bf00      	nop
   14994:	f3af 8000 	nop.w
   14998:	54442d18 	.word	0x54442d18
   1499c:	3ff921fb 	.word	0x3ff921fb

000149a0 <fly_to>:

static void fly_to(uint8_t wp) { 
   149a0:	b580      	push	{r7, lr}
   149a2:	b082      	sub	sp, #8
   149a4:	af00      	add	r7, sp, #0
   149a6:	4603      	mov	r3, r0
   149a8:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   149aa:	79f9      	ldrb	r1, [r7, #7]
   149ac:	f240 5278 	movw	r2, #1400	; 0x578
   149b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   149b4:	460b      	mov	r3, r1
   149b6:	005b      	lsls	r3, r3, #1
   149b8:	440b      	add	r3, r1
   149ba:	009b      	lsls	r3, r3, #2
   149bc:	4413      	add	r3, r2
   149be:	6818      	ldr	r0, [r3, #0]
   149c0:	79f9      	ldrb	r1, [r7, #7]
   149c2:	f240 5278 	movw	r2, #1400	; 0x578
   149c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   149ca:	460b      	mov	r3, r1
   149cc:	005b      	lsls	r3, r3, #1
   149ce:	440b      	add	r3, r1
   149d0:	009b      	lsls	r3, r3, #2
   149d2:	4413      	add	r3, r2
   149d4:	3304      	adds	r3, #4
   149d6:	681b      	ldr	r3, [r3, #0]
   149d8:	4619      	mov	r1, r3
   149da:	f7ff ff91 	bl	14900 <fly_to_xy>
}
   149de:	3708      	adds	r7, #8
   149e0:	46bd      	mov	sp, r7
   149e2:	bd80      	pop	{r7, pc}

000149e4 <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   149e4:	b5b0      	push	{r4, r5, r7, lr}
   149e6:	b088      	sub	sp, #32
   149e8:	af00      	add	r7, sp, #0
   149ea:	4602      	mov	r2, r0
   149ec:	460b      	mov	r3, r1
   149ee:	71fa      	strb	r2, [r7, #7]
   149f0:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   149f2:	79f9      	ldrb	r1, [r7, #7]
   149f4:	f240 5278 	movw	r2, #1400	; 0x578
   149f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   149fc:	460b      	mov	r3, r1
   149fe:	005b      	lsls	r3, r3, #1
   14a00:	440b      	add	r3, r1
   14a02:	009b      	lsls	r3, r3, #2
   14a04:	4413      	add	r3, r2
   14a06:	681b      	ldr	r3, [r3, #0]
   14a08:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   14a0a:	79f9      	ldrb	r1, [r7, #7]
   14a0c:	f240 5278 	movw	r2, #1400	; 0x578
   14a10:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a14:	460b      	mov	r3, r1
   14a16:	005b      	lsls	r3, r3, #1
   14a18:	440b      	add	r3, r1
   14a1a:	009b      	lsls	r3, r3, #2
   14a1c:	4413      	add	r3, r2
   14a1e:	3304      	adds	r3, #4
   14a20:	681b      	ldr	r3, [r3, #0]
   14a22:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   14a24:	79b9      	ldrb	r1, [r7, #6]
   14a26:	f240 5278 	movw	r2, #1400	; 0x578
   14a2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a2e:	460b      	mov	r3, r1
   14a30:	005b      	lsls	r3, r3, #1
   14a32:	440b      	add	r3, r1
   14a34:	009b      	lsls	r3, r3, #2
   14a36:	4413      	add	r3, r2
   14a38:	681b      	ldr	r3, [r3, #0]
   14a3a:	4618      	mov	r0, r3
   14a3c:	69f9      	ldr	r1, [r7, #28]
   14a3e:	f003 fc27 	bl	18290 <__aeabi_fsub>
   14a42:	4603      	mov	r3, r0
   14a44:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   14a46:	79b9      	ldrb	r1, [r7, #6]
   14a48:	f240 5278 	movw	r2, #1400	; 0x578
   14a4c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a50:	460b      	mov	r3, r1
   14a52:	005b      	lsls	r3, r3, #1
   14a54:	440b      	add	r3, r1
   14a56:	009b      	lsls	r3, r3, #2
   14a58:	4413      	add	r3, r2
   14a5a:	3304      	adds	r3, #4
   14a5c:	681b      	ldr	r3, [r3, #0]
   14a5e:	4618      	mov	r0, r3
   14a60:	69b9      	ldr	r1, [r7, #24]
   14a62:	f003 fc15 	bl	18290 <__aeabi_fsub>
   14a66:	4603      	mov	r3, r0
   14a68:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   14a6a:	6978      	ldr	r0, [r7, #20]
   14a6c:	6979      	ldr	r1, [r7, #20]
   14a6e:	f003 fd19 	bl	184a4 <__aeabi_fmul>
   14a72:	4603      	mov	r3, r0
   14a74:	461c      	mov	r4, r3
   14a76:	6938      	ldr	r0, [r7, #16]
   14a78:	6939      	ldr	r1, [r7, #16]
   14a7a:	f003 fd13 	bl	184a4 <__aeabi_fmul>
   14a7e:	4603      	mov	r3, r0
   14a80:	4620      	mov	r0, r4
   14a82:	4619      	mov	r1, r3
   14a84:	f003 fc06 	bl	18294 <__addsf3>
   14a88:	4603      	mov	r3, r0
   14a8a:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   14a8c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14a90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a94:	681b      	ldr	r3, [r3, #0]
   14a96:	4618      	mov	r0, r3
   14a98:	69f9      	ldr	r1, [r7, #28]
   14a9a:	f003 fbf9 	bl	18290 <__aeabi_fsub>
   14a9e:	4603      	mov	r3, r0
   14aa0:	4618      	mov	r0, r3
   14aa2:	6979      	ldr	r1, [r7, #20]
   14aa4:	f003 fcfe 	bl	184a4 <__aeabi_fmul>
   14aa8:	4603      	mov	r3, r0
   14aaa:	461c      	mov	r4, r3
   14aac:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ab4:	681b      	ldr	r3, [r3, #0]
   14ab6:	4618      	mov	r0, r3
   14ab8:	69b9      	ldr	r1, [r7, #24]
   14aba:	f003 fbe9 	bl	18290 <__aeabi_fsub>
   14abe:	4603      	mov	r3, r0
   14ac0:	4618      	mov	r0, r3
   14ac2:	6939      	ldr	r1, [r7, #16]
   14ac4:	f003 fcee 	bl	184a4 <__aeabi_fmul>
   14ac8:	4603      	mov	r3, r0
   14aca:	4620      	mov	r0, r4
   14acc:	4619      	mov	r1, r3
   14ace:	f003 fbe1 	bl	18294 <__addsf3>
   14ad2:	4603      	mov	r3, r0
   14ad4:	4618      	mov	r0, r3
   14ad6:	68f9      	ldr	r1, [r7, #12]
   14ad8:	f003 fd98 	bl	1860c <__aeabi_fdiv>
   14adc:	4603      	mov	r3, r0
   14ade:	461a      	mov	r2, r3
   14ae0:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ae8:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   14aea:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14af2:	681b      	ldr	r3, [r3, #0]
   14af4:	4618      	mov	r0, r3
   14af6:	f04f 0100 	mov.w	r1, #0
   14afa:	f003 fe85 	bl	18808 <__aeabi_fcmpge>
   14afe:	4603      	mov	r3, r0
   14b00:	2b00      	cmp	r3, #0
   14b02:	d005      	beq.n	14b10 <route_to+0x12c>
   14b04:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14b08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b0c:	681a      	ldr	r2, [r3, #0]
   14b0e:	e001      	b.n	14b14 <route_to+0x130>
   14b10:	f04f 0200 	mov.w	r2, #0
   14b14:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14b18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b1c:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   14b1e:	68f8      	ldr	r0, [r7, #12]
   14b20:	f003 f82c 	bl	17b7c <__aeabi_f2d>
   14b24:	4602      	mov	r2, r0
   14b26:	460b      	mov	r3, r1
   14b28:	4610      	mov	r0, r2
   14b2a:	4619      	mov	r1, r3
   14b2c:	f001 f9f4 	bl	15f18 <pp_sqrt>
   14b30:	4602      	mov	r2, r0
   14b32:	460b      	mov	r3, r1
   14b34:	4610      	mov	r0, r2
   14b36:	4619      	mov	r1, r3
   14b38:	f003 fb56 	bl	181e8 <__aeabi_d2f>
   14b3c:	4602      	mov	r2, r0
   14b3e:	f64c 03e8 	movw	r3, #51432	; 0xc8e8
   14b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b46:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14b48:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b50:	681b      	ldr	r3, [r3, #0]
   14b52:	4618      	mov	r0, r3
   14b54:	f003 f812 	bl	17b7c <__aeabi_f2d>
   14b58:	4604      	mov	r4, r0
   14b5a:	460d      	mov	r5, r1
   14b5c:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b64:	681a      	ldr	r2, [r3, #0]
   14b66:	f64c 03e8 	movw	r3, #51432	; 0xc8e8
   14b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b6e:	681b      	ldr	r3, [r3, #0]
   14b70:	4610      	mov	r0, r2
   14b72:	4619      	mov	r1, r3
   14b74:	f003 fd4a 	bl	1860c <__aeabi_fdiv>
   14b78:	4603      	mov	r3, r0
   14b7a:	4618      	mov	r0, r3
   14b7c:	f04f 0100 	mov.w	r1, #0
   14b80:	f003 fe42 	bl	18808 <__aeabi_fcmpge>
   14b84:	4603      	mov	r3, r0
   14b86:	2b00      	cmp	r3, #0
   14b88:	d014      	beq.n	14bb4 <route_to+0x1d0>
   14b8a:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14b8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b92:	681a      	ldr	r2, [r3, #0]
   14b94:	f64c 03e8 	movw	r3, #51432	; 0xc8e8
   14b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b9c:	681b      	ldr	r3, [r3, #0]
   14b9e:	4610      	mov	r0, r2
   14ba0:	4619      	mov	r1, r3
   14ba2:	f003 fd33 	bl	1860c <__aeabi_fdiv>
   14ba6:	4603      	mov	r3, r0
   14ba8:	4618      	mov	r0, r3
   14baa:	f002 ffe7 	bl	17b7c <__aeabi_f2d>
   14bae:	4602      	mov	r2, r0
   14bb0:	460b      	mov	r3, r1
   14bb2:	e003      	b.n	14bbc <route_to+0x1d8>
   14bb4:	f04f 0200 	mov.w	r2, #0
   14bb8:	f04f 0300 	mov.w	r3, #0
   14bbc:	4620      	mov	r0, r4
   14bbe:	4629      	mov	r1, r5
   14bc0:	f002 fe7e 	bl	178c0 <__adddf3>
   14bc4:	4602      	mov	r2, r0
   14bc6:	460b      	mov	r3, r1
   14bc8:	4610      	mov	r0, r2
   14bca:	4619      	mov	r1, r3
   14bcc:	f003 fb0c 	bl	181e8 <__aeabi_d2f>
   14bd0:	4602      	mov	r2, r0
   14bd2:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bda:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   14bdc:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14be4:	681b      	ldr	r3, [r3, #0]
   14be6:	4618      	mov	r0, r3
   14be8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14bec:	f003 fe0c 	bl	18808 <__aeabi_fcmpge>
   14bf0:	4603      	mov	r3, r0
   14bf2:	2b00      	cmp	r3, #0
   14bf4:	d002      	beq.n	14bfc <route_to+0x218>
   14bf6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   14bfa:	e004      	b.n	14c06 <route_to+0x222>
   14bfc:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14c00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c04:	681a      	ldr	r2, [r3, #0]
   14c06:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c0e:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   14c10:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c18:	681b      	ldr	r3, [r3, #0]
   14c1a:	4618      	mov	r0, r3
   14c1c:	6979      	ldr	r1, [r7, #20]
   14c1e:	f003 fc41 	bl	184a4 <__aeabi_fmul>
   14c22:	4603      	mov	r3, r0
   14c24:	4618      	mov	r0, r3
   14c26:	69f9      	ldr	r1, [r7, #28]
   14c28:	f003 fb34 	bl	18294 <__addsf3>
   14c2c:	4603      	mov	r3, r0
   14c2e:	461c      	mov	r4, r3
   14c30:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c38:	681b      	ldr	r3, [r3, #0]
   14c3a:	4618      	mov	r0, r3
   14c3c:	6939      	ldr	r1, [r7, #16]
   14c3e:	f003 fc31 	bl	184a4 <__aeabi_fmul>
   14c42:	4603      	mov	r3, r0
   14c44:	4618      	mov	r0, r3
   14c46:	69b9      	ldr	r1, [r7, #24]
   14c48:	f003 fb24 	bl	18294 <__addsf3>
   14c4c:	4603      	mov	r3, r0
   14c4e:	4620      	mov	r0, r4
   14c50:	4619      	mov	r1, r3
   14c52:	f7ff fe55 	bl	14900 <fly_to_xy>
}
   14c56:	3720      	adds	r7, #32
   14c58:	46bd      	mov	sp, r7
   14c5a:	bdb0      	pop	{r4, r5, r7, pc}

00014c5c <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   14c5c:	b590      	push	{r4, r7, lr}
   14c5e:	b083      	sub	sp, #12
   14c60:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   14c62:	f240 5378 	movw	r3, #1400	; 0x578
   14c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c6a:	681a      	ldr	r2, [r3, #0]
   14c6c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c74:	681b      	ldr	r3, [r3, #0]
   14c76:	4610      	mov	r0, r2
   14c78:	4619      	mov	r1, r3
   14c7a:	f003 fb09 	bl	18290 <__aeabi_fsub>
   14c7e:	4603      	mov	r3, r0
   14c80:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   14c82:	f240 5378 	movw	r3, #1400	; 0x578
   14c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c8a:	685a      	ldr	r2, [r3, #4]
   14c8c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c94:	681b      	ldr	r3, [r3, #0]
   14c96:	4610      	mov	r0, r2
   14c98:	4619      	mov	r1, r3
   14c9a:	f003 faf9 	bl	18290 <__aeabi_fsub>
   14c9e:	4603      	mov	r3, r0
   14ca0:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   14ca2:	6878      	ldr	r0, [r7, #4]
   14ca4:	6879      	ldr	r1, [r7, #4]
   14ca6:	f003 fbfd 	bl	184a4 <__aeabi_fmul>
   14caa:	4603      	mov	r3, r0
   14cac:	461c      	mov	r4, r3
   14cae:	6838      	ldr	r0, [r7, #0]
   14cb0:	6839      	ldr	r1, [r7, #0]
   14cb2:	f003 fbf7 	bl	184a4 <__aeabi_fmul>
   14cb6:	4603      	mov	r3, r0
   14cb8:	4620      	mov	r0, r4
   14cba:	4619      	mov	r1, r3
   14cbc:	f003 faea 	bl	18294 <__addsf3>
   14cc0:	4603      	mov	r3, r0
   14cc2:	461a      	mov	r2, r3
   14cc4:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   14cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ccc:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   14cce:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   14cd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cd6:	681b      	ldr	r3, [r3, #0]
   14cd8:	2201      	movs	r2, #1
   14cda:	4614      	mov	r4, r2
   14cdc:	4618      	mov	r0, r3
   14cde:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   14ce2:	f6c4 0174 	movt	r1, #18548	; 0x4874
   14ce6:	f003 fd99 	bl	1881c <__aeabi_fcmpgt>
   14cea:	4603      	mov	r3, r0
   14cec:	2b00      	cmp	r3, #0
   14cee:	d101      	bne.n	14cf4 <compute_dist2_to_home+0x98>
   14cf0:	2300      	movs	r3, #0
   14cf2:	461c      	mov	r4, r3
   14cf4:	b2e3      	uxtb	r3, r4
   14cf6:	461a      	mov	r2, r3
   14cf8:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
   14cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d00:	701a      	strb	r2, [r3, #0]
}
   14d02:	370c      	adds	r7, #12
   14d04:	46bd      	mov	sp, r7
   14d06:	bd90      	pop	{r4, r7, pc}

00014d08 <nav_home>:

void nav_home(void) {
   14d08:	b580      	push	{r7, lr}
   14d0a:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   14d0c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d14:	f04f 0200 	mov.w	r2, #0
   14d18:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14d1a:	f24c 532d 	movw	r3, #50477	; 0xc52d
   14d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d22:	2203      	movs	r2, #3
   14d24:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   14d26:	f240 5374 	movw	r3, #1396	; 0x574
   14d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d2e:	f04f 0200 	mov.w	r2, #0
   14d32:	f2c4 322f 	movt	r2, #17199	; 0x432f
   14d36:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14d38:	f7ff ff90 	bl	14c5c <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   14d3c:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   14d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d44:	681a      	ldr	r2, [r3, #0]
   14d46:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   14d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d4e:	601a      	str	r2, [r3, #0]
}
   14d50:	bd80      	pop	{r7, pc}
   14d52:	bf00      	nop

00014d54 <nav_update>:

void nav_update(void) {
   14d54:	b580      	push	{r7, lr}
   14d56:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14d58:	f7ff ff80 	bl	14c5c <compute_dist2_to_home>

  auto_nav();
   14d5c:	f7fd fc0c 	bl	12578 <auto_nav>
}
   14d60:	bd80      	pop	{r7, pc}
   14d62:	bf00      	nop

00014d64 <nav_init>:


void nav_init(void) {
   14d64:	b480      	push	{r7}
   14d66:	af00      	add	r7, sp, #0
  nav_block = 0;
   14d68:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   14d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d70:	2200      	movs	r2, #0
   14d72:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   14d74:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d7c:	2200      	movs	r2, #0
   14d7e:	701a      	strb	r2, [r3, #0]
}
   14d80:	46bd      	mov	sp, r7
   14d82:	f85d 7b04 	ldr.w	r7, [sp], #4
   14d86:	4770      	bx	lr

00014d88 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14d88:	b480      	push	{r7}
   14d8a:	b083      	sub	sp, #12
   14d8c:	af00      	add	r7, sp, #0
   14d8e:	4603      	mov	r3, r0
   14d90:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   14d92:	f242 030a 	movw	r3, #8202	; 0x200a
   14d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d9a:	781b      	ldrb	r3, [r3, #0]
   14d9c:	b2db      	uxtb	r3, r3
   14d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14da2:	2b00      	cmp	r3, #0
   14da4:	d028      	beq.n	14df8 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   14da6:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   14daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14dae:	781b      	ldrb	r3, [r3, #0]
   14db0:	b2db      	uxtb	r3, r3
   14db2:	461a      	mov	r2, r3
   14db4:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14dbc:	781b      	ldrb	r3, [r3, #0]
   14dbe:	3301      	adds	r3, #1
   14dc0:	429a      	cmp	r2, r3
   14dc2:	d100      	bne.n	14dc6 <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14dc4:	e02c      	b.n	14e20 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   14dc6:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14dca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14dce:	781b      	ldrb	r3, [r3, #0]
   14dd0:	461a      	mov	r2, r3
   14dd2:	f64c 03f8 	movw	r3, #51448	; 0xc8f8
   14dd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14dda:	79f9      	ldrb	r1, [r7, #7]
   14ddc:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   14dde:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14de6:	781b      	ldrb	r3, [r3, #0]
   14de8:	3301      	adds	r3, #1
   14dea:	b2da      	uxtb	r2, r3
   14dec:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14df0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14df4:	701a      	strb	r2, [r3, #0]
   14df6:	e013      	b.n	14e20 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   14df8:	f242 030c 	movw	r3, #8204	; 0x200c
   14dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e00:	79fa      	ldrb	r2, [r7, #7]
   14e02:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   14e04:	f242 030a 	movw	r3, #8202	; 0x200a
   14e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e0c:	f242 020a 	movw	r2, #8202	; 0x200a
   14e10:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14e14:	7812      	ldrb	r2, [r2, #0]
   14e16:	b2d2      	uxtb	r2, r2
   14e18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14e1c:	b2d2      	uxtb	r2, r2
   14e1e:	701a      	strb	r2, [r3, #0]
  }
}
   14e20:	370c      	adds	r7, #12
   14e22:	46bd      	mov	sp, r7
   14e24:	f85d 7b04 	ldr.w	r7, [sp], #4
   14e28:	4770      	bx	lr
   14e2a:	bf00      	nop

00014e2c <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   14e2c:	b480      	push	{r7}
   14e2e:	b083      	sub	sp, #12
   14e30:	af00      	add	r7, sp, #0
   14e32:	4603      	mov	r3, r0
   14e34:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   14e36:	f242 039a 	movw	r3, #8346	; 0x209a
   14e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e3e:	781b      	ldrb	r3, [r3, #0]
   14e40:	b2db      	uxtb	r3, r3
   14e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14e46:	2b00      	cmp	r3, #0
   14e48:	d028      	beq.n	14e9c <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   14e4a:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   14e4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e52:	781b      	ldrb	r3, [r3, #0]
   14e54:	b2db      	uxtb	r3, r3
   14e56:	461a      	mov	r2, r3
   14e58:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14e5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e60:	781b      	ldrb	r3, [r3, #0]
   14e62:	3301      	adds	r3, #1
   14e64:	429a      	cmp	r2, r3
   14e66:	d100      	bne.n	14e6a <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14e68:	e02c      	b.n	14ec4 <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   14e6a:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e72:	781b      	ldrb	r3, [r3, #0]
   14e74:	461a      	mov	r2, r3
   14e76:	f64c 13fc 	movw	r3, #51708	; 0xc9fc
   14e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e7e:	79f9      	ldrb	r1, [r7, #7]
   14e80:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   14e82:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e8a:	781b      	ldrb	r3, [r3, #0]
   14e8c:	3301      	adds	r3, #1
   14e8e:	b2da      	uxtb	r2, r3
   14e90:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e98:	701a      	strb	r2, [r3, #0]
   14e9a:	e013      	b.n	14ec4 <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   14e9c:	f242 039c 	movw	r3, #8348	; 0x209c
   14ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ea4:	79fa      	ldrb	r2, [r7, #7]
   14ea6:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   14ea8:	f242 039a 	movw	r3, #8346	; 0x209a
   14eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14eb0:	f242 029a 	movw	r2, #8346	; 0x209a
   14eb4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14eb8:	7812      	ldrb	r2, [r2, #0]
   14eba:	b2d2      	uxtb	r2, r2
   14ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14ec0:	b2d2      	uxtb	r2, r2
   14ec2:	701a      	strb	r2, [r3, #0]
  }
}
   14ec4:	370c      	adds	r7, #12
   14ec6:	46bd      	mov	sp, r7
   14ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
   14ecc:	4770      	bx	lr
   14ece:	bf00      	nop

00014ed0 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   14ed0:	b580      	push	{r7, lr}
   14ed2:	b084      	sub	sp, #16
   14ed4:	af00      	add	r7, sp, #0
   14ed6:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   14ed8:	2300      	movs	r3, #0
   14eda:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   14edc:	e009      	b.n	14ef2 <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   14ede:	7bfb      	ldrb	r3, [r7, #15]
   14ee0:	687a      	ldr	r2, [r7, #4]
   14ee2:	4413      	add	r3, r2
   14ee4:	781b      	ldrb	r3, [r3, #0]
   14ee6:	4618      	mov	r0, r3
   14ee8:	f7ff ff4e 	bl	14d88 <uart0_transmit>
    i++;
   14eec:	7bfb      	ldrb	r3, [r7, #15]
   14eee:	3301      	adds	r3, #1
   14ef0:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   14ef2:	7bfb      	ldrb	r3, [r7, #15]
   14ef4:	687a      	ldr	r2, [r7, #4]
   14ef6:	4413      	add	r3, r2
   14ef8:	781b      	ldrb	r3, [r3, #0]
   14efa:	2b00      	cmp	r3, #0
   14efc:	d1ef      	bne.n	14ede <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   14efe:	3710      	adds	r7, #16
   14f00:	46bd      	mov	sp, r7
   14f02:	bd80      	pop	{r7, pc}

00014f04 <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   14f04:	b590      	push	{r4, r7, lr}
   14f06:	b089      	sub	sp, #36	; 0x24
   14f08:	af00      	add	r7, sp, #0
   14f0a:	4603      	mov	r3, r0
   14f0c:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   14f0e:	f648 23b0 	movw	r3, #35504	; 0x8ab0
   14f12:	f2c0 0301 	movt	r3, #1
   14f16:	f107 040c 	add.w	r4, r7, #12
   14f1a:	6818      	ldr	r0, [r3, #0]
   14f1c:	6859      	ldr	r1, [r3, #4]
   14f1e:	689a      	ldr	r2, [r3, #8]
   14f20:	68db      	ldr	r3, [r3, #12]
   14f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   14f24:	79fb      	ldrb	r3, [r7, #7]
   14f26:	091b      	lsrs	r3, r3, #4
   14f28:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   14f2a:	79fb      	ldrb	r3, [r7, #7]
   14f2c:	f003 030f 	and.w	r3, r3, #15
   14f30:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   14f32:	230f      	movs	r3, #15
   14f34:	77fb      	strb	r3, [r7, #31]
    low = 15;
   14f36:	230f      	movs	r3, #15
   14f38:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   14f3a:	7ffb      	ldrb	r3, [r7, #31]
   14f3c:	f107 0220 	add.w	r2, r7, #32
   14f40:	4413      	add	r3, r2
   14f42:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14f46:	4618      	mov	r0, r3
   14f48:	f7ff ff1e 	bl	14d88 <uart0_transmit>
  uart0_transmit(hex[low]);
   14f4c:	7fbb      	ldrb	r3, [r7, #30]
   14f4e:	f107 0220 	add.w	r2, r7, #32
   14f52:	4413      	add	r3, r2
   14f54:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14f58:	4618      	mov	r0, r3
   14f5a:	f7ff ff15 	bl	14d88 <uart0_transmit>
}
   14f5e:	3724      	adds	r7, #36	; 0x24
   14f60:	46bd      	mov	sp, r7
   14f62:	bd90      	pop	{r4, r7, pc}

00014f64 <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   14f64:	b480      	push	{r7}
   14f66:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   14f68:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f70:	781a      	ldrb	r2, [r3, #0]
   14f72:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   14f76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f7a:	781b      	ldrb	r3, [r3, #0]
   14f7c:	b2db      	uxtb	r3, r3
   14f7e:	429a      	cmp	r2, r3
   14f80:	d10e      	bne.n	14fa0 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   14f82:	f242 030a 	movw	r3, #8202	; 0x200a
   14f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f8a:	f242 020a 	movw	r2, #8202	; 0x200a
   14f8e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14f92:	7812      	ldrb	r2, [r2, #0]
   14f94:	b2d2      	uxtb	r2, r2
   14f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14f9a:	b2d2      	uxtb	r2, r2
   14f9c:	701a      	strb	r2, [r3, #0]
   14f9e:	e01d      	b.n	14fdc <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   14fa0:	f242 030c 	movw	r3, #8204	; 0x200c
   14fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fa8:	f64c 02f5 	movw	r2, #51445	; 0xc8f5
   14fac:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14fb0:	7812      	ldrb	r2, [r2, #0]
   14fb2:	b2d2      	uxtb	r2, r2
   14fb4:	4611      	mov	r1, r2
   14fb6:	f64c 02f8 	movw	r2, #51448	; 0xc8f8
   14fba:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14fbe:	5c52      	ldrb	r2, [r2, r1]
   14fc0:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   14fc2:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   14fc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fca:	781b      	ldrb	r3, [r3, #0]
   14fcc:	b2db      	uxtb	r3, r3
   14fce:	3301      	adds	r3, #1
   14fd0:	b2da      	uxtb	r2, r3
   14fd2:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   14fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fda:	701a      	strb	r2, [r3, #0]
  }
}
   14fdc:	46bd      	mov	sp, r7
   14fde:	f85d 7b04 	ldr.w	r7, [sp], #4
   14fe2:	4770      	bx	lr

00014fe4 <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   14fe4:	b480      	push	{r7}
   14fe6:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   14fe8:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ff0:	781a      	ldrb	r2, [r3, #0]
   14ff2:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   14ff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ffa:	781b      	ldrb	r3, [r3, #0]
   14ffc:	b2db      	uxtb	r3, r3
   14ffe:	429a      	cmp	r2, r3
   15000:	d10e      	bne.n	15020 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   15002:	f242 039a 	movw	r3, #8346	; 0x209a
   15006:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1500a:	f242 029a 	movw	r2, #8346	; 0x209a
   1500e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15012:	7812      	ldrb	r2, [r2, #0]
   15014:	b2d2      	uxtb	r2, r2
   15016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1501a:	b2d2      	uxtb	r2, r2
   1501c:	701a      	strb	r2, [r3, #0]
   1501e:	e01d      	b.n	1505c <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   15020:	f242 039c 	movw	r3, #8348	; 0x209c
   15024:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15028:	f64c 12f9 	movw	r2, #51705	; 0xc9f9
   1502c:	f2c2 0204 	movt	r2, #8196	; 0x2004
   15030:	7812      	ldrb	r2, [r2, #0]
   15032:	b2d2      	uxtb	r2, r2
   15034:	4611      	mov	r1, r2
   15036:	f64c 12fc 	movw	r2, #51708	; 0xc9fc
   1503a:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1503e:	5c52      	ldrb	r2, [r2, r1]
   15040:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   15042:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   15046:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1504a:	781b      	ldrb	r3, [r3, #0]
   1504c:	b2db      	uxtb	r3, r3
   1504e:	3301      	adds	r3, #1
   15050:	b2da      	uxtb	r2, r3
   15052:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   15056:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1505a:	701a      	strb	r2, [r3, #0]
  }
}
   1505c:	46bd      	mov	sp, r7
   1505e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15062:	4770      	bx	lr

00015064 <uart0_init>:

void uart0_init( void ) {
   15064:	b480      	push	{r7}
   15066:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   15068:	f242 0390 	movw	r3, #8336	; 0x2090
   1506c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15070:	2200      	movs	r2, #0
   15072:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   15074:	f242 0309 	movw	r3, #8201	; 0x2009
   15078:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1507c:	2219      	movs	r2, #25
   1507e:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   15080:	f242 030b 	movw	r3, #8203	; 0x200b
   15084:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15088:	2200      	movs	r2, #0
   1508a:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   1508c:	f242 030a 	movw	r3, #8202	; 0x200a
   15090:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15094:	2218      	movs	r2, #24
   15096:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   15098:	f242 0395 	movw	r3, #8341	; 0x2095
   1509c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150a0:	2206      	movs	r2, #6
   150a2:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   150a4:	f242 030a 	movw	r3, #8202	; 0x200a
   150a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150ac:	f242 020a 	movw	r2, #8202	; 0x200a
   150b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   150b4:	7812      	ldrb	r2, [r2, #0]
   150b6:	b2d2      	uxtb	r2, r2
   150b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   150bc:	b2d2      	uxtb	r2, r2
   150be:	701a      	strb	r2, [r3, #0]
}
   150c0:	46bd      	mov	sp, r7
   150c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   150c6:	4770      	bx	lr

000150c8 <uart1_init>:

void uart1_init( void ) {
   150c8:	b480      	push	{r7}
   150ca:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   150cc:	f242 0398 	movw	r3, #8344	; 0x2098
   150d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150d4:	2200      	movs	r2, #0
   150d6:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   150d8:	f242 0399 	movw	r3, #8345	; 0x2099
   150dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150e0:	2219      	movs	r2, #25
   150e2:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   150e4:	f242 039b 	movw	r3, #8347	; 0x209b
   150e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150ec:	2200      	movs	r2, #0
   150ee:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   150f0:	f242 039a 	movw	r3, #8346	; 0x209a
   150f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150f8:	2218      	movs	r2, #24
   150fa:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   150fc:	f242 039d 	movw	r3, #8349	; 0x209d
   15100:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15104:	2206      	movs	r2, #6
   15106:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   15108:	f242 039a 	movw	r3, #8346	; 0x209a
   1510c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15110:	f242 029a 	movw	r2, #8346	; 0x209a
   15114:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15118:	7812      	ldrb	r2, [r2, #0]
   1511a:	b2d2      	uxtb	r2, r2
   1511c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15120:	b2d2      	uxtb	r2, r2
   15122:	701a      	strb	r2, [r3, #0]
}
   15124:	46bd      	mov	sp, r7
   15126:	f85d 7b04 	ldr.w	r7, [sp], #4
   1512a:	4770      	bx	lr
   1512c:	0000      	movs	r0, r0
	...

00015130 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   15130:	b480      	push	{r7}
   15132:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   15134:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   15138:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1513c:	f04f 0200 	mov.w	r2, #0
   15140:	601a      	str	r2, [r3, #0]
   15142:	f64c 3300 	movw	r3, #51968	; 0xcb00
   15146:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1514a:	f04f 0200 	mov.w	r2, #0
   1514e:	601a      	str	r2, [r3, #0]
   15150:	f64c 3304 	movw	r3, #51972	; 0xcb04
   15154:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15158:	f04f 0200 	mov.w	r2, #0
   1515c:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   1515e:	f64c 3308 	movw	r3, #51976	; 0xcb08
   15162:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15166:	f04f 0200 	mov.w	r2, #0
   1516a:	601a      	str	r2, [r3, #0]
   1516c:	f64c 330c 	movw	r3, #51980	; 0xcb0c
   15170:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15174:	f04f 0200 	mov.w	r2, #0
   15178:	601a      	str	r2, [r3, #0]
   1517a:	f64c 3310 	movw	r3, #51984	; 0xcb10
   1517e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15182:	f04f 0200 	mov.w	r2, #0
   15186:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   15188:	f64c 3334 	movw	r3, #52020	; 0xcb34
   1518c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15190:	f04f 0200 	mov.w	r2, #0
   15194:	601a      	str	r2, [r3, #0]
   15196:	f64c 3338 	movw	r3, #52024	; 0xcb38
   1519a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1519e:	f04f 0200 	mov.w	r2, #0
   151a2:	601a      	str	r2, [r3, #0]
   151a4:	f64c 331c 	movw	r3, #51996	; 0xcb1c
   151a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151ac:	f04f 0200 	mov.w	r2, #0
   151b0:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   151b2:	f64c 3320 	movw	r3, #52000	; 0xcb20
   151b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151ba:	f04f 0200 	mov.w	r2, #0
   151be:	601a      	str	r2, [r3, #0]
   151c0:	f64c 3324 	movw	r3, #52004	; 0xcb24
   151c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151c8:	f04f 0200 	mov.w	r2, #0
   151cc:	601a      	str	r2, [r3, #0]
   151ce:	f64c 3328 	movw	r3, #52008	; 0xcb28
   151d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151d6:	f04f 0200 	mov.w	r2, #0
   151da:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   151dc:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   151e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151e4:	2200      	movs	r2, #0
   151e6:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   151e8:	f240 5348 	movw	r3, #1352	; 0x548
   151ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151f0:	681a      	ldr	r2, [r3, #0]
   151f2:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   151f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151fa:	601a      	str	r2, [r3, #0]
}
   151fc:	46bd      	mov	sp, r7
   151fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   15202:	4770      	bx	lr

00015204 <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   15204:	b580      	push	{r7, lr}
   15206:	b082      	sub	sp, #8
   15208:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   1520a:	f240 533c 	movw	r3, #1340	; 0x53c
   1520e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15212:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   15214:	2b01      	cmp	r3, #1
   15216:	d105      	bne.n	15224 <estimator_update_state_infrared+0x20>
   15218:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   1521c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15220:	681b      	ldr	r3, [r3, #0]
   15222:	e004      	b.n	1522e <estimator_update_state_infrared+0x2a>
   15224:	f240 5348 	movw	r3, #1352	; 0x548
   15228:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1522c:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   1522e:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   15230:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   15234:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15238:	881b      	ldrh	r3, [r3, #0]
   1523a:	b21b      	sxth	r3, r3
   1523c:	4618      	mov	r0, r3
   1523e:	f003 f8dd 	bl	183fc <__aeabi_i2f>
   15242:	4603      	mov	r3, r0
   15244:	4618      	mov	r0, r3
   15246:	6879      	ldr	r1, [r7, #4]
   15248:	f003 f92c 	bl	184a4 <__aeabi_fmul>
   1524c:	4603      	mov	r3, r0
   1524e:	461a      	mov	r2, r3
   15250:	f64c 3308 	movw	r3, #51976	; 0xcb08
   15254:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15258:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   1525a:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
   1525e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15262:	881b      	ldrh	r3, [r3, #0]
   15264:	b21b      	sxth	r3, r3
   15266:	4618      	mov	r0, r3
   15268:	f003 f8c8 	bl	183fc <__aeabi_i2f>
   1526c:	4603      	mov	r3, r0
   1526e:	4618      	mov	r0, r3
   15270:	6879      	ldr	r1, [r7, #4]
   15272:	f003 f917 	bl	184a4 <__aeabi_fmul>
   15276:	4603      	mov	r3, r0
   15278:	461a      	mov	r2, r3
   1527a:	f64c 3310 	movw	r3, #51984	; 0xcb10
   1527e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15282:	601a      	str	r2, [r3, #0]
}
   15284:	3708      	adds	r7, #8
   15286:	46bd      	mov	sp, r7
   15288:	bd80      	pop	{r7, pc}
   1528a:	bf00      	nop

0001528c <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   1528c:	b5b0      	push	{r4, r5, r7, lr}
   1528e:	b084      	sub	sp, #16
   15290:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   15292:	f64c 3348 	movw	r3, #52040	; 0xcb48
   15296:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1529a:	781b      	ldrb	r3, [r3, #0]
   1529c:	2b00      	cmp	r3, #0
   1529e:	f000 81e8 	beq.w	15672 <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   152a2:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   152a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152aa:	681a      	ldr	r2, [r3, #0]
   152ac:	f64c 334c 	movw	r3, #52044	; 0xcb4c
   152b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152b4:	681b      	ldr	r3, [r3, #0]
   152b6:	4610      	mov	r0, r2
   152b8:	4619      	mov	r1, r3
   152ba:	f002 ffe9 	bl	18290 <__aeabi_fsub>
   152be:	4603      	mov	r3, r0
   152c0:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   152c2:	68b8      	ldr	r0, [r7, #8]
   152c4:	f002 fc5a 	bl	17b7c <__aeabi_f2d>
   152c8:	4602      	mov	r2, r0
   152ca:	460b      	mov	r3, r1
   152cc:	4610      	mov	r0, r2
   152ce:	4619      	mov	r1, r3
   152d0:	a385      	add	r3, pc, #532	; (adr r3, 154e8 <estimator_update_ir_estim+0x25c>)
   152d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   152d6:	f002 ff35 	bl	18144 <__aeabi_dcmpgt>
   152da:	4603      	mov	r3, r0
   152dc:	2b00      	cmp	r3, #0
   152de:	d100      	bne.n	152e2 <estimator_update_ir_estim+0x56>
   152e0:	e219      	b.n	15716 <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   152e2:	f64c 3338 	movw	r3, #52024	; 0xcb38
   152e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152ea:	681a      	ldr	r2, [r3, #0]
   152ec:	f64c 3350 	movw	r3, #52048	; 0xcb50
   152f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152f4:	681b      	ldr	r3, [r3, #0]
   152f6:	4610      	mov	r0, r2
   152f8:	4619      	mov	r1, r3
   152fa:	f002 ffc9 	bl	18290 <__aeabi_fsub>
   152fe:	4603      	mov	r3, r0
   15300:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   15302:	e013      	b.n	1532c <estimator_update_ir_estim+0xa0>
   15304:	68f8      	ldr	r0, [r7, #12]
   15306:	f002 fc39 	bl	17b7c <__aeabi_f2d>
   1530a:	4602      	mov	r2, r0
   1530c:	460b      	mov	r3, r1
   1530e:	4610      	mov	r0, r2
   15310:	4619      	mov	r1, r3
   15312:	a377      	add	r3, pc, #476	; (adr r3, 154f0 <estimator_update_ir_estim+0x264>)
   15314:	e9d3 2300 	ldrd	r2, r3, [r3]
   15318:	f002 fad0 	bl	178bc <__aeabi_dsub>
   1531c:	4602      	mov	r2, r0
   1531e:	460b      	mov	r3, r1
   15320:	4610      	mov	r0, r2
   15322:	4619      	mov	r1, r3
   15324:	f002 ff60 	bl	181e8 <__aeabi_d2f>
   15328:	4603      	mov	r3, r0
   1532a:	60fb      	str	r3, [r7, #12]
   1532c:	68f8      	ldr	r0, [r7, #12]
   1532e:	f002 fc25 	bl	17b7c <__aeabi_f2d>
   15332:	4602      	mov	r2, r0
   15334:	460b      	mov	r3, r1
   15336:	4610      	mov	r0, r2
   15338:	4619      	mov	r1, r3
   1533a:	a36f      	add	r3, pc, #444	; (adr r3, 154f8 <estimator_update_ir_estim+0x26c>)
   1533c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15340:	f002 ff00 	bl	18144 <__aeabi_dcmpgt>
   15344:	4603      	mov	r3, r0
   15346:	2b00      	cmp	r3, #0
   15348:	d1dc      	bne.n	15304 <estimator_update_ir_estim+0x78>
   1534a:	e013      	b.n	15374 <estimator_update_ir_estim+0xe8>
   1534c:	68f8      	ldr	r0, [r7, #12]
   1534e:	f002 fc15 	bl	17b7c <__aeabi_f2d>
   15352:	4602      	mov	r2, r0
   15354:	460b      	mov	r3, r1
   15356:	4610      	mov	r0, r2
   15358:	4619      	mov	r1, r3
   1535a:	a365      	add	r3, pc, #404	; (adr r3, 154f0 <estimator_update_ir_estim+0x264>)
   1535c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15360:	f002 faae 	bl	178c0 <__adddf3>
   15364:	4602      	mov	r2, r0
   15366:	460b      	mov	r3, r1
   15368:	4610      	mov	r0, r2
   1536a:	4619      	mov	r1, r3
   1536c:	f002 ff3c 	bl	181e8 <__aeabi_d2f>
   15370:	4603      	mov	r3, r0
   15372:	60fb      	str	r3, [r7, #12]
   15374:	68f8      	ldr	r0, [r7, #12]
   15376:	f002 fc01 	bl	17b7c <__aeabi_f2d>
   1537a:	4602      	mov	r2, r0
   1537c:	460b      	mov	r3, r1
   1537e:	4610      	mov	r0, r2
   15380:	4619      	mov	r1, r3
   15382:	a35f      	add	r3, pc, #380	; (adr r3, 15500 <estimator_update_ir_estim+0x274>)
   15384:	e9d3 2300 	ldrd	r2, r3, [r3]
   15388:	f002 febe 	bl	18108 <__aeabi_dcmplt>
   1538c:	4603      	mov	r3, r0
   1538e:	2b00      	cmp	r3, #0
   15390:	d1dc      	bne.n	1534c <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   15392:	68f8      	ldr	r0, [r7, #12]
   15394:	68b9      	ldr	r1, [r7, #8]
   15396:	f003 f939 	bl	1860c <__aeabi_fdiv>
   1539a:	4603      	mov	r3, r0
   1539c:	4618      	mov	r0, r3
   1539e:	f002 fbed 	bl	17b7c <__aeabi_f2d>
   153a2:	4602      	mov	r2, r0
   153a4:	460b      	mov	r3, r1
   153a6:	4610      	mov	r0, r2
   153a8:	4619      	mov	r1, r3
   153aa:	f04f 0200 	mov.w	r2, #0
   153ae:	f04f 0300 	mov.w	r3, #0
   153b2:	f2c4 0324 	movt	r3, #16420	; 0x4024
   153b6:	f002 fc35 	bl	17c24 <__aeabi_dmul>
   153ba:	4602      	mov	r2, r0
   153bc:	460b      	mov	r3, r1
   153be:	4610      	mov	r0, r2
   153c0:	4619      	mov	r1, r3
   153c2:	a351      	add	r3, pc, #324	; (adr r3, 15508 <estimator_update_ir_estim+0x27c>)
   153c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   153c8:	f002 fd56 	bl	17e78 <__aeabi_ddiv>
   153cc:	4602      	mov	r2, r0
   153ce:	460b      	mov	r3, r1
   153d0:	4610      	mov	r0, r2
   153d2:	4619      	mov	r1, r3
   153d4:	f002 ff08 	bl	181e8 <__aeabi_d2f>
   153d8:	4603      	mov	r3, r0
   153da:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   153dc:	e013      	b.n	15406 <estimator_update_ir_estim+0x17a>
   153de:	68f8      	ldr	r0, [r7, #12]
   153e0:	f002 fbcc 	bl	17b7c <__aeabi_f2d>
   153e4:	4602      	mov	r2, r0
   153e6:	460b      	mov	r3, r1
   153e8:	4610      	mov	r0, r2
   153ea:	4619      	mov	r1, r3
   153ec:	a340      	add	r3, pc, #256	; (adr r3, 154f0 <estimator_update_ir_estim+0x264>)
   153ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   153f2:	f002 fa63 	bl	178bc <__aeabi_dsub>
   153f6:	4602      	mov	r2, r0
   153f8:	460b      	mov	r3, r1
   153fa:	4610      	mov	r0, r2
   153fc:	4619      	mov	r1, r3
   153fe:	f002 fef3 	bl	181e8 <__aeabi_d2f>
   15402:	4603      	mov	r3, r0
   15404:	60fb      	str	r3, [r7, #12]
   15406:	68f8      	ldr	r0, [r7, #12]
   15408:	f002 fbb8 	bl	17b7c <__aeabi_f2d>
   1540c:	4602      	mov	r2, r0
   1540e:	460b      	mov	r3, r1
   15410:	4610      	mov	r0, r2
   15412:	4619      	mov	r1, r3
   15414:	a338      	add	r3, pc, #224	; (adr r3, 154f8 <estimator_update_ir_estim+0x26c>)
   15416:	e9d3 2300 	ldrd	r2, r3, [r3]
   1541a:	f002 fe93 	bl	18144 <__aeabi_dcmpgt>
   1541e:	4603      	mov	r3, r0
   15420:	2b00      	cmp	r3, #0
   15422:	d1dc      	bne.n	153de <estimator_update_ir_estim+0x152>
   15424:	e013      	b.n	1544e <estimator_update_ir_estim+0x1c2>
   15426:	68f8      	ldr	r0, [r7, #12]
   15428:	f002 fba8 	bl	17b7c <__aeabi_f2d>
   1542c:	4602      	mov	r2, r0
   1542e:	460b      	mov	r3, r1
   15430:	4610      	mov	r0, r2
   15432:	4619      	mov	r1, r3
   15434:	a32e      	add	r3, pc, #184	; (adr r3, 154f0 <estimator_update_ir_estim+0x264>)
   15436:	e9d3 2300 	ldrd	r2, r3, [r3]
   1543a:	f002 fa41 	bl	178c0 <__adddf3>
   1543e:	4602      	mov	r2, r0
   15440:	460b      	mov	r3, r1
   15442:	4610      	mov	r0, r2
   15444:	4619      	mov	r1, r3
   15446:	f002 fecf 	bl	181e8 <__aeabi_d2f>
   1544a:	4603      	mov	r3, r0
   1544c:	60fb      	str	r3, [r7, #12]
   1544e:	68f8      	ldr	r0, [r7, #12]
   15450:	f002 fb94 	bl	17b7c <__aeabi_f2d>
   15454:	4602      	mov	r2, r0
   15456:	460b      	mov	r3, r1
   15458:	4610      	mov	r0, r2
   1545a:	4619      	mov	r1, r3
   1545c:	a328      	add	r3, pc, #160	; (adr r3, 15500 <estimator_update_ir_estim+0x274>)
   1545e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15462:	f002 fe51 	bl	18108 <__aeabi_dcmplt>
   15466:	4603      	mov	r3, r0
   15468:	2b00      	cmp	r3, #0
   1546a:	d1dc      	bne.n	15426 <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   1546c:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   15470:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15474:	881b      	ldrh	r3, [r3, #0]
   15476:	b21b      	sxth	r3, r3
   15478:	4618      	mov	r0, r3
   1547a:	f002 ffbf 	bl	183fc <__aeabi_i2f>
   1547e:	4602      	mov	r2, r0
   15480:	f64c 3340 	movw	r3, #52032	; 0xcb40
   15484:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15488:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   1548a:	f64c 3344 	movw	r3, #52036	; 0xcb44
   1548e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15492:	68fa      	ldr	r2, [r7, #12]
   15494:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   15496:	68f8      	ldr	r0, [r7, #12]
   15498:	f04f 0100 	mov.w	r1, #0
   1549c:	f003 f9a0 	bl	187e0 <__aeabi_fcmplt>
   154a0:	4603      	mov	r3, r0
   154a2:	2b00      	cmp	r3, #0
   154a4:	d003      	beq.n	154ae <estimator_update_ir_estim+0x222>
   154a6:	68fb      	ldr	r3, [r7, #12]
   154a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   154ac:	e000      	b.n	154b0 <estimator_update_ir_estim+0x224>
   154ae:	68fb      	ldr	r3, [r7, #12]
   154b0:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   154b2:	6878      	ldr	r0, [r7, #4]
   154b4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   154b8:	f003 f992 	bl	187e0 <__aeabi_fcmplt>
   154bc:	4603      	mov	r3, r0
   154be:	2b00      	cmp	r3, #0
   154c0:	d100      	bne.n	154c4 <estimator_update_ir_estim+0x238>
   154c2:	e128      	b.n	15716 <estimator_update_ir_estim+0x48a>
   154c4:	6878      	ldr	r0, [r7, #4]
   154c6:	f002 fb59 	bl	17b7c <__aeabi_f2d>
   154ca:	4602      	mov	r2, r0
   154cc:	460b      	mov	r3, r1
   154ce:	4610      	mov	r0, r2
   154d0:	4619      	mov	r1, r3
   154d2:	a30f      	add	r3, pc, #60	; (adr r3, 15510 <estimator_update_ir_estim+0x284>)
   154d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   154d8:	f002 fe34 	bl	18144 <__aeabi_dcmpgt>
   154dc:	4603      	mov	r3, r0
   154de:	2b00      	cmp	r3, #0
   154e0:	d11a      	bne.n	15518 <estimator_update_ir_estim+0x28c>
   154e2:	e118      	b.n	15716 <estimator_update_ir_estim+0x48a>
   154e4:	f3af 8000 	nop.w
   154e8:	9999999a 	.word	0x9999999a
   154ec:	3fb99999 	.word	0x3fb99999
   154f0:	54442d18 	.word	0x54442d18
   154f4:	401921fb 	.word	0x401921fb
   154f8:	54442d18 	.word	0x54442d18
   154fc:	400921fb 	.word	0x400921fb
   15500:	54442d18 	.word	0x54442d18
   15504:	c00921fb 	.word	0xc00921fb
   15508:	51eb851f 	.word	0x51eb851f
   1550c:	40239eb8 	.word	0x40239eb8
   15510:	9999999a 	.word	0x9999999a
   15514:	3fa99999 	.word	0x3fa99999
   15518:	f240 5340 	movw	r3, #1344	; 0x540
   1551c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15520:	881b      	ldrh	r3, [r3, #0]
   15522:	b21b      	sxth	r3, r3
   15524:	425b      	negs	r3, r3
   15526:	0fda      	lsrs	r2, r3, #31
   15528:	4413      	add	r3, r2
   1552a:	105b      	asrs	r3, r3, #1
   1552c:	461a      	mov	r2, r3
   1552e:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   15532:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15536:	881b      	ldrh	r3, [r3, #0]
   15538:	b21b      	sxth	r3, r3
   1553a:	429a      	cmp	r2, r3
   1553c:	f280 8098 	bge.w	15670 <estimator_update_ir_estim+0x3e4>
   15540:	f240 5340 	movw	r3, #1344	; 0x540
   15544:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15548:	881b      	ldrh	r3, [r3, #0]
   1554a:	b21b      	sxth	r3, r3
   1554c:	0fda      	lsrs	r2, r3, #31
   1554e:	4413      	add	r3, r2
   15550:	105b      	asrs	r3, r3, #1
   15552:	b29a      	uxth	r2, r3
   15554:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   15558:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1555c:	881b      	ldrh	r3, [r3, #0]
   1555e:	b212      	sxth	r2, r2
   15560:	b21b      	sxth	r3, r3
   15562:	429a      	cmp	r2, r3
   15564:	f340 8084 	ble.w	15670 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   15568:	f64c 3344 	movw	r3, #52036	; 0xcb44
   1556c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15570:	681a      	ldr	r2, [r3, #0]
   15572:	f64c 3340 	movw	r3, #52032	; 0xcb40
   15576:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1557a:	681b      	ldr	r3, [r3, #0]
   1557c:	4610      	mov	r0, r2
   1557e:	4619      	mov	r1, r3
   15580:	f002 ff90 	bl	184a4 <__aeabi_fmul>
   15584:	4603      	mov	r3, r0
   15586:	4618      	mov	r0, r3
   15588:	f002 faf8 	bl	17b7c <__aeabi_f2d>
   1558c:	4604      	mov	r4, r0
   1558e:	460d      	mov	r5, r1
   15590:	f64c 3354 	movw	r3, #52052	; 0xcb54
   15594:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15598:	681b      	ldr	r3, [r3, #0]
   1559a:	4618      	mov	r0, r3
   1559c:	f002 faee 	bl	17b7c <__aeabi_f2d>
   155a0:	4602      	mov	r2, r0
   155a2:	460b      	mov	r3, r1
   155a4:	4610      	mov	r0, r2
   155a6:	4619      	mov	r1, r3
   155a8:	a367      	add	r3, pc, #412	; (adr r3, 15748 <estimator_update_ir_estim+0x4bc>)
   155aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   155ae:	f002 fb39 	bl	17c24 <__aeabi_dmul>
   155b2:	4602      	mov	r2, r0
   155b4:	460b      	mov	r3, r1
   155b6:	4620      	mov	r0, r4
   155b8:	4629      	mov	r1, r5
   155ba:	f002 f981 	bl	178c0 <__adddf3>
   155be:	4602      	mov	r2, r0
   155c0:	460b      	mov	r3, r1
   155c2:	4610      	mov	r0, r2
   155c4:	4619      	mov	r1, r3
   155c6:	f002 fe0f 	bl	181e8 <__aeabi_d2f>
   155ca:	4602      	mov	r2, r0
   155cc:	f64c 3354 	movw	r3, #52052	; 0xcb54
   155d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155d4:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   155d6:	f64c 3340 	movw	r3, #52032	; 0xcb40
   155da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155de:	681a      	ldr	r2, [r3, #0]
   155e0:	f64c 3340 	movw	r3, #52032	; 0xcb40
   155e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155e8:	681b      	ldr	r3, [r3, #0]
   155ea:	4610      	mov	r0, r2
   155ec:	4619      	mov	r1, r3
   155ee:	f002 ff59 	bl	184a4 <__aeabi_fmul>
   155f2:	4603      	mov	r3, r0
   155f4:	4618      	mov	r0, r3
   155f6:	f002 fac1 	bl	17b7c <__aeabi_f2d>
   155fa:	4604      	mov	r4, r0
   155fc:	460d      	mov	r5, r1
   155fe:	f64c 3358 	movw	r3, #52056	; 0xcb58
   15602:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15606:	681b      	ldr	r3, [r3, #0]
   15608:	4618      	mov	r0, r3
   1560a:	f002 fab7 	bl	17b7c <__aeabi_f2d>
   1560e:	4602      	mov	r2, r0
   15610:	460b      	mov	r3, r1
   15612:	4610      	mov	r0, r2
   15614:	4619      	mov	r1, r3
   15616:	a34c      	add	r3, pc, #304	; (adr r3, 15748 <estimator_update_ir_estim+0x4bc>)
   15618:	e9d3 2300 	ldrd	r2, r3, [r3]
   1561c:	f002 fb02 	bl	17c24 <__aeabi_dmul>
   15620:	4602      	mov	r2, r0
   15622:	460b      	mov	r3, r1
   15624:	4620      	mov	r0, r4
   15626:	4629      	mov	r1, r5
   15628:	f002 f94a 	bl	178c0 <__adddf3>
   1562c:	4602      	mov	r2, r0
   1562e:	460b      	mov	r3, r1
   15630:	4610      	mov	r0, r2
   15632:	4619      	mov	r1, r3
   15634:	f002 fdd8 	bl	181e8 <__aeabi_d2f>
   15638:	4602      	mov	r2, r0
   1563a:	f64c 3358 	movw	r3, #52056	; 0xcb58
   1563e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15642:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   15644:	f64c 3354 	movw	r3, #52052	; 0xcb54
   15648:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1564c:	681a      	ldr	r2, [r3, #0]
   1564e:	f64c 3358 	movw	r3, #52056	; 0xcb58
   15652:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15656:	681b      	ldr	r3, [r3, #0]
   15658:	4610      	mov	r0, r2
   1565a:	4619      	mov	r1, r3
   1565c:	f002 ffd6 	bl	1860c <__aeabi_fdiv>
   15660:	4603      	mov	r3, r0
   15662:	461a      	mov	r2, r3
   15664:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   15668:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1566c:	601a      	str	r2, [r3, #0]
   1566e:	e052      	b.n	15716 <estimator_update_ir_estim+0x48a>
   15670:	e051      	b.n	15716 <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   15672:	f64c 3348 	movw	r3, #52040	; 0xcb48
   15676:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1567a:	2201      	movs	r2, #1
   1567c:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   1567e:	f240 5340 	movw	r3, #1344	; 0x540
   15682:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15686:	881b      	ldrh	r3, [r3, #0]
   15688:	b21b      	sxth	r3, r3
   1568a:	4618      	mov	r0, r3
   1568c:	f002 feb6 	bl	183fc <__aeabi_i2f>
   15690:	4603      	mov	r3, r0
   15692:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   15694:	6838      	ldr	r0, [r7, #0]
   15696:	6839      	ldr	r1, [r7, #0]
   15698:	f002 ff04 	bl	184a4 <__aeabi_fmul>
   1569c:	4603      	mov	r3, r0
   1569e:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   156a0:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   156a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156a8:	681b      	ldr	r3, [r3, #0]
   156aa:	4618      	mov	r0, r3
   156ac:	f002 fa66 	bl	17b7c <__aeabi_f2d>
   156b0:	4602      	mov	r2, r0
   156b2:	460b      	mov	r3, r1
   156b4:	4610      	mov	r0, r2
   156b6:	4619      	mov	r1, r3
   156b8:	f04f 0200 	mov.w	r2, #0
   156bc:	f04f 0300 	mov.w	r3, #0
   156c0:	f2c4 0359 	movt	r3, #16473	; 0x4059
   156c4:	f002 faae 	bl	17c24 <__aeabi_dmul>
   156c8:	4602      	mov	r2, r0
   156ca:	460b      	mov	r3, r1
   156cc:	4614      	mov	r4, r2
   156ce:	461d      	mov	r5, r3
   156d0:	6838      	ldr	r0, [r7, #0]
   156d2:	f002 fa53 	bl	17b7c <__aeabi_f2d>
   156d6:	4602      	mov	r2, r0
   156d8:	460b      	mov	r3, r1
   156da:	4620      	mov	r0, r4
   156dc:	4629      	mov	r1, r5
   156de:	f002 faa1 	bl	17c24 <__aeabi_dmul>
   156e2:	4602      	mov	r2, r0
   156e4:	460b      	mov	r3, r1
   156e6:	4610      	mov	r0, r2
   156e8:	4619      	mov	r1, r3
   156ea:	f002 fd7d 	bl	181e8 <__aeabi_d2f>
   156ee:	4602      	mov	r2, r0
   156f0:	f64c 3354 	movw	r3, #52052	; 0xcb54
   156f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156f8:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   156fa:	6838      	ldr	r0, [r7, #0]
   156fc:	f04f 0100 	mov.w	r1, #0
   15700:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   15704:	f002 fece 	bl	184a4 <__aeabi_fmul>
   15708:	4603      	mov	r3, r0
   1570a:	461a      	mov	r2, r3
   1570c:	f64c 3358 	movw	r3, #52056	; 0xcb58
   15710:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15714:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   15716:	f64c 3338 	movw	r3, #52024	; 0xcb38
   1571a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1571e:	681a      	ldr	r2, [r3, #0]
   15720:	f64c 3350 	movw	r3, #52048	; 0xcb50
   15724:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15728:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   1572a:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   1572e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15732:	681a      	ldr	r2, [r3, #0]
   15734:	f64c 334c 	movw	r3, #52044	; 0xcb4c
   15738:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1573c:	601a      	str	r2, [r3, #0]
}
   1573e:	3710      	adds	r7, #16
   15740:	46bd      	mov	sp, r7
   15742:	bdb0      	pop	{r4, r5, r7, pc}
   15744:	f3af 8000 	nop.w
   15748:	d916872b 	.word	0xd916872b
   1574c:	3feff7ce 	.word	0x3feff7ce

00015750 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   15750:	b580      	push	{r7, lr}
   15752:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   15754:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
   15758:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1575c:	781b      	ldrb	r3, [r3, #0]
   1575e:	f003 0320 	and.w	r3, r3, #32
   15762:	2b00      	cmp	r3, #0
   15764:	d044      	beq.n	157f0 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   15766:	f24c 63d4 	movw	r3, #50900	; 0xc6d4
   1576a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1576e:	681a      	ldr	r2, [r3, #0]
   15770:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   15774:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15778:	601a      	str	r2, [r3, #0]
   1577a:	f24c 63d8 	movw	r3, #50904	; 0xc6d8
   1577e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15782:	681a      	ldr	r2, [r3, #0]
   15784:	f64c 3300 	movw	r3, #51968	; 0xcb00
   15788:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1578c:	601a      	str	r2, [r3, #0]
   1578e:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   15792:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15796:	681a      	ldr	r2, [r3, #0]
   15798:	f64c 3304 	movw	r3, #51972	; 0xcb04
   1579c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157a0:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   157a2:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   157a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157aa:	681a      	ldr	r2, [r3, #0]
   157ac:	f64c 3334 	movw	r3, #52020	; 0xcb34
   157b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157b4:	601a      	str	r2, [r3, #0]
   157b6:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
   157ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157be:	681a      	ldr	r2, [r3, #0]
   157c0:	f64c 3338 	movw	r3, #52024	; 0xcb38
   157c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157c8:	601a      	str	r2, [r3, #0]
   157ca:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   157ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157d2:	681a      	ldr	r2, [r3, #0]
   157d4:	f64c 331c 	movw	r3, #51996	; 0xcb1c
   157d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157dc:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   157de:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   157e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157e6:	881b      	ldrh	r3, [r3, #0]
   157e8:	2b00      	cmp	r3, #0
   157ea:	d001      	beq.n	157f0 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   157ec:	f7ff fd4e 	bl	1528c <estimator_update_ir_estim>
  }
}
   157f0:	bd80      	pop	{r7, pc}
   157f2:	bf00      	nop

000157f4 <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   157f4:	b480      	push	{r7}
   157f6:	af00      	add	r7, sp, #0
  
}
   157f8:	46bd      	mov	sp, r7
   157fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   157fe:	4770      	bx	lr

00015800 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   15800:	b5b0      	push	{r4, r5, r7, lr}
   15802:	b082      	sub	sp, #8
   15804:	af00      	add	r7, sp, #0
   15806:	4603      	mov	r3, r0
   15808:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   1580a:	f24c 532c 	movw	r3, #50476	; 0xc52c
   1580e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15812:	781b      	ldrb	r3, [r3, #0]
   15814:	2b01      	cmp	r3, #1
   15816:	f040 80e0 	bne.w	159da <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1581a:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   1581e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15822:	781b      	ldrb	r3, [r3, #0]
   15824:	2b02      	cmp	r3, #2
   15826:	d168      	bne.n	158fa <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   15828:	79fb      	ldrb	r3, [r7, #7]
   1582a:	2b00      	cmp	r3, #0
   1582c:	d013      	beq.n	15856 <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   1582e:	f240 5344 	movw	r3, #1348	; 0x544
   15832:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15836:	881a      	ldrh	r2, [r3, #0]
   15838:	f64c 3362 	movw	r3, #52066	; 0xcb62
   1583c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15840:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15842:	f24c 6350 	movw	r3, #50768	; 0xc650
   15846:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1584a:	895a      	ldrh	r2, [r3, #10]
   1584c:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   15850:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15854:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15856:	f24c 6350 	movw	r3, #50768	; 0xc650
   1585a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1585e:	895b      	ldrh	r3, [r3, #10]
   15860:	b21a      	sxth	r2, r3
   15862:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   15866:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1586a:	881b      	ldrh	r3, [r3, #0]
   1586c:	b21b      	sxth	r3, r3
   1586e:	1ad3      	subs	r3, r2, r3
   15870:	4618      	mov	r0, r3
   15872:	f002 fdc3 	bl	183fc <__aeabi_i2f>
   15876:	4603      	mov	r3, r0
   15878:	4618      	mov	r0, r3
   1587a:	f002 f97f 	bl	17b7c <__aeabi_f2d>
   1587e:	4602      	mov	r2, r0
   15880:	460b      	mov	r3, r1
   15882:	4610      	mov	r0, r2
   15884:	4619      	mov	r1, r3
   15886:	f04f 0200 	mov.w	r2, #0
   1588a:	f04f 0300 	mov.w	r3, #0
   1588e:	f2c4 034e 	movt	r3, #16462	; 0x404e
   15892:	f002 f9c7 	bl	17c24 <__aeabi_dmul>
   15896:	4602      	mov	r2, r0
   15898:	460b      	mov	r3, r1
   1589a:	4610      	mov	r0, r2
   1589c:	4619      	mov	r1, r3
   1589e:	f04f 0200 	mov.w	r2, #0
   158a2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   158a6:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   158aa:	f002 fae5 	bl	17e78 <__aeabi_ddiv>
   158ae:	4602      	mov	r2, r0
   158b0:	460b      	mov	r3, r1
   158b2:	4610      	mov	r0, r2
   158b4:	4619      	mov	r1, r3
   158b6:	f002 fc4f 	bl	18158 <__aeabi_d2iz>
   158ba:	4603      	mov	r3, r0
   158bc:	b29b      	uxth	r3, r3
   158be:	b29a      	uxth	r2, r3
   158c0:	f64c 3362 	movw	r3, #52066	; 0xcb62
   158c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158c8:	881b      	ldrh	r3, [r3, #0]
   158ca:	b29b      	uxth	r3, r3
   158cc:	4413      	add	r3, r2
   158ce:	b29b      	uxth	r3, r3
   158d0:	b29a      	uxth	r2, r3
   158d2:	f240 5344 	movw	r3, #1348	; 0x544
   158d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158da:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   158dc:	f240 5344 	movw	r3, #1348	; 0x544
   158e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158e4:	881b      	ldrh	r3, [r3, #0]
   158e6:	b21b      	sxth	r3, r3
   158e8:	4618      	mov	r0, r3
   158ea:	f002 fd87 	bl	183fc <__aeabi_i2f>
   158ee:	4602      	mov	r2, r0
   158f0:	f24c 5338 	movw	r3, #50488	; 0xc538
   158f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158f8:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   158fa:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   158fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15902:	781b      	ldrb	r3, [r3, #0]
   15904:	2b02      	cmp	r3, #2
   15906:	d168      	bne.n	159da <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   15908:	79fb      	ldrb	r3, [r7, #7]
   1590a:	2b00      	cmp	r3, #0
   1590c:	d013      	beq.n	15936 <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   1590e:	f240 5342 	movw	r3, #1346	; 0x542
   15912:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15916:	881a      	ldrh	r2, [r3, #0]
   15918:	f64c 3364 	movw	r3, #52068	; 0xcb64
   1591c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15920:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15922:	f24c 6350 	movw	r3, #50768	; 0xc650
   15926:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1592a:	899a      	ldrh	r2, [r3, #12]
   1592c:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15930:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15934:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15936:	f24c 6350 	movw	r3, #50768	; 0xc650
   1593a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1593e:	899b      	ldrh	r3, [r3, #12]
   15940:	b21a      	sxth	r2, r3
   15942:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15946:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1594a:	881b      	ldrh	r3, [r3, #0]
   1594c:	b21b      	sxth	r3, r3
   1594e:	1ad3      	subs	r3, r2, r3
   15950:	4618      	mov	r0, r3
   15952:	f002 fd53 	bl	183fc <__aeabi_i2f>
   15956:	4603      	mov	r3, r0
   15958:	4618      	mov	r0, r3
   1595a:	f002 f90f 	bl	17b7c <__aeabi_f2d>
   1595e:	4602      	mov	r2, r0
   15960:	460b      	mov	r3, r1
   15962:	4610      	mov	r0, r2
   15964:	4619      	mov	r1, r3
   15966:	f04f 0200 	mov.w	r2, #0
   1596a:	f04f 0300 	mov.w	r3, #0
   1596e:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   15972:	f002 f957 	bl	17c24 <__aeabi_dmul>
   15976:	4602      	mov	r2, r0
   15978:	460b      	mov	r3, r1
   1597a:	4610      	mov	r0, r2
   1597c:	4619      	mov	r1, r3
   1597e:	f04f 0200 	mov.w	r2, #0
   15982:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15986:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1598a:	f002 fa75 	bl	17e78 <__aeabi_ddiv>
   1598e:	4602      	mov	r2, r0
   15990:	460b      	mov	r3, r1
   15992:	4610      	mov	r0, r2
   15994:	4619      	mov	r1, r3
   15996:	f002 fbdf 	bl	18158 <__aeabi_d2iz>
   1599a:	4603      	mov	r3, r0
   1599c:	b29b      	uxth	r3, r3
   1599e:	b29a      	uxth	r2, r3
   159a0:	f64c 3364 	movw	r3, #52068	; 0xcb64
   159a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159a8:	881b      	ldrh	r3, [r3, #0]
   159aa:	b29b      	uxth	r3, r3
   159ac:	4413      	add	r3, r2
   159ae:	b29b      	uxth	r3, r3
   159b0:	b29a      	uxth	r2, r3
   159b2:	f240 5342 	movw	r3, #1346	; 0x542
   159b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159ba:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   159bc:	f240 5342 	movw	r3, #1346	; 0x542
   159c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159c4:	881b      	ldrh	r3, [r3, #0]
   159c6:	b21b      	sxth	r3, r3
   159c8:	4618      	mov	r0, r3
   159ca:	f002 fd17 	bl	183fc <__aeabi_i2f>
   159ce:	4602      	mov	r2, r0
   159d0:	f24c 533c 	movw	r3, #50492	; 0xc53c
   159d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159d8:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   159da:	f24c 532c 	movw	r3, #50476	; 0xc52c
   159de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159e2:	781b      	ldrb	r3, [r3, #0]
   159e4:	2b02      	cmp	r3, #2
   159e6:	f040 80da 	bne.w	15b9e <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   159ea:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   159ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159f2:	781b      	ldrb	r3, [r3, #0]
   159f4:	2b02      	cmp	r3, #2
   159f6:	d165      	bne.n	15ac4 <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   159f8:	79fb      	ldrb	r3, [r7, #7]
   159fa:	2b00      	cmp	r3, #0
   159fc:	d013      	beq.n	15a26 <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   159fe:	f240 5358 	movw	r3, #1368	; 0x558
   15a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a06:	681a      	ldr	r2, [r3, #0]
   15a08:	f64c 3368 	movw	r3, #52072	; 0xcb68
   15a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a10:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15a12:	f24c 6350 	movw	r3, #50768	; 0xc650
   15a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a1a:	895a      	ldrh	r2, [r3, #10]
   15a1c:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   15a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a24:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15a26:	f64c 3368 	movw	r3, #52072	; 0xcb68
   15a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a2e:	681b      	ldr	r3, [r3, #0]
   15a30:	4618      	mov	r0, r3
   15a32:	f002 f8a3 	bl	17b7c <__aeabi_f2d>
   15a36:	4604      	mov	r4, r0
   15a38:	460d      	mov	r5, r1
   15a3a:	f24c 6350 	movw	r3, #50768	; 0xc650
   15a3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a42:	895b      	ldrh	r3, [r3, #10]
   15a44:	b21a      	sxth	r2, r3
   15a46:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   15a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a4e:	881b      	ldrh	r3, [r3, #0]
   15a50:	b21b      	sxth	r3, r3
   15a52:	1ad3      	subs	r3, r2, r3
   15a54:	4618      	mov	r0, r3
   15a56:	f002 fcd1 	bl	183fc <__aeabi_i2f>
   15a5a:	4603      	mov	r3, r0
   15a5c:	4618      	mov	r0, r3
   15a5e:	f002 f88d 	bl	17b7c <__aeabi_f2d>
   15a62:	4602      	mov	r2, r0
   15a64:	460b      	mov	r3, r1
   15a66:	4610      	mov	r0, r2
   15a68:	4619      	mov	r1, r3
   15a6a:	a34f      	add	r3, pc, #316	; (adr r3, 15ba8 <inflight_calib+0x3a8>)
   15a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15a70:	f002 f8d8 	bl	17c24 <__aeabi_dmul>
   15a74:	4602      	mov	r2, r0
   15a76:	460b      	mov	r3, r1
   15a78:	4610      	mov	r0, r2
   15a7a:	4619      	mov	r1, r3
   15a7c:	f04f 0200 	mov.w	r2, #0
   15a80:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15a84:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15a88:	f002 f9f6 	bl	17e78 <__aeabi_ddiv>
   15a8c:	4602      	mov	r2, r0
   15a8e:	460b      	mov	r3, r1
   15a90:	4620      	mov	r0, r4
   15a92:	4629      	mov	r1, r5
   15a94:	f001 ff14 	bl	178c0 <__adddf3>
   15a98:	4602      	mov	r2, r0
   15a9a:	460b      	mov	r3, r1
   15a9c:	4610      	mov	r0, r2
   15a9e:	4619      	mov	r1, r3
   15aa0:	f002 fba2 	bl	181e8 <__aeabi_d2f>
   15aa4:	4602      	mov	r2, r0
   15aa6:	f240 5358 	movw	r3, #1368	; 0x558
   15aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15aae:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   15ab0:	f240 5358 	movw	r3, #1368	; 0x558
   15ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ab8:	681a      	ldr	r2, [r3, #0]
   15aba:	f24c 5338 	movw	r3, #50488	; 0xc538
   15abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ac2:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15ac4:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   15ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15acc:	781b      	ldrb	r3, [r3, #0]
   15ace:	2b02      	cmp	r3, #2
   15ad0:	d165      	bne.n	15b9e <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   15ad2:	79fb      	ldrb	r3, [r7, #7]
   15ad4:	2b00      	cmp	r3, #0
   15ad6:	d013      	beq.n	15b00 <inflight_calib+0x300>
        max_roll_init = max_roll;
   15ad8:	f240 535c 	movw	r3, #1372	; 0x55c
   15adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ae0:	681a      	ldr	r2, [r3, #0]
   15ae2:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   15ae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15aea:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15aec:	f24c 6350 	movw	r3, #50768	; 0xc650
   15af0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15af4:	899a      	ldrh	r2, [r3, #12]
   15af6:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15afe:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15b00:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   15b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b08:	681b      	ldr	r3, [r3, #0]
   15b0a:	4618      	mov	r0, r3
   15b0c:	f002 f836 	bl	17b7c <__aeabi_f2d>
   15b10:	4604      	mov	r4, r0
   15b12:	460d      	mov	r5, r1
   15b14:	f24c 6350 	movw	r3, #50768	; 0xc650
   15b18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b1c:	899b      	ldrh	r3, [r3, #12]
   15b1e:	b21a      	sxth	r2, r3
   15b20:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15b24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b28:	881b      	ldrh	r3, [r3, #0]
   15b2a:	b21b      	sxth	r3, r3
   15b2c:	1ad3      	subs	r3, r2, r3
   15b2e:	4618      	mov	r0, r3
   15b30:	f002 fc64 	bl	183fc <__aeabi_i2f>
   15b34:	4603      	mov	r3, r0
   15b36:	4618      	mov	r0, r3
   15b38:	f002 f820 	bl	17b7c <__aeabi_f2d>
   15b3c:	4602      	mov	r2, r0
   15b3e:	460b      	mov	r3, r1
   15b40:	4610      	mov	r0, r2
   15b42:	4619      	mov	r1, r3
   15b44:	a31a      	add	r3, pc, #104	; (adr r3, 15bb0 <inflight_calib+0x3b0>)
   15b46:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b4a:	f002 f86b 	bl	17c24 <__aeabi_dmul>
   15b4e:	4602      	mov	r2, r0
   15b50:	460b      	mov	r3, r1
   15b52:	4610      	mov	r0, r2
   15b54:	4619      	mov	r1, r3
   15b56:	f04f 0200 	mov.w	r2, #0
   15b5a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15b5e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15b62:	f002 f989 	bl	17e78 <__aeabi_ddiv>
   15b66:	4602      	mov	r2, r0
   15b68:	460b      	mov	r3, r1
   15b6a:	4620      	mov	r0, r4
   15b6c:	4629      	mov	r1, r5
   15b6e:	f001 fea7 	bl	178c0 <__adddf3>
   15b72:	4602      	mov	r2, r0
   15b74:	460b      	mov	r3, r1
   15b76:	4610      	mov	r0, r2
   15b78:	4619      	mov	r1, r3
   15b7a:	f002 fb35 	bl	181e8 <__aeabi_d2f>
   15b7e:	4602      	mov	r2, r0
   15b80:	f240 535c 	movw	r3, #1372	; 0x55c
   15b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b88:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   15b8a:	f240 535c 	movw	r3, #1372	; 0x55c
   15b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b92:	681a      	ldr	r2, [r3, #0]
   15b94:	f24c 533c 	movw	r3, #50492	; 0xc53c
   15b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b9c:	601a      	str	r2, [r3, #0]
    }
  }
}
   15b9e:	3708      	adds	r7, #8
   15ba0:	46bd      	mov	sp, r7
   15ba2:	bdb0      	pop	{r4, r5, r7, pc}
   15ba4:	f3af 8000 	nop.w
   15ba8:	9999999a 	.word	0x9999999a
   15bac:	3fb99999 	.word	0x3fb99999
   15bb0:	9999999a 	.word	0x9999999a
   15bb4:	bfc99999 	.word	0xbfc99999

00015bb8 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   15bb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   15bbc:	b08e      	sub	sp, #56	; 0x38
   15bbe:	af00      	add	r7, sp, #0
   15bc0:	e9c7 0102 	strd	r0, r1, [r7, #8]
   15bc4:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   15bc8:	a357      	add	r3, pc, #348	; (adr r3, 15d28 <pp_atan2+0x170>)
   15bca:	e9d3 2300 	ldrd	r2, r3, [r3]
   15bce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   15bd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15bd6:	f04f 0200 	mov.w	r2, #0
   15bda:	f04f 0300 	mov.w	r3, #0
   15bde:	f2c4 0308 	movt	r3, #16392	; 0x4008
   15be2:	f002 f81f 	bl	17c24 <__aeabi_dmul>
   15be6:	4602      	mov	r2, r0
   15be8:	460b      	mov	r3, r1
   15bea:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   15bee:	e9d7 0100 	ldrd	r0, r1, [r7]
   15bf2:	f04f 0200 	mov.w	r2, #0
   15bf6:	f04f 0300 	mov.w	r3, #0
   15bfa:	f002 fa85 	bl	18108 <__aeabi_dcmplt>
   15bfe:	4603      	mov	r3, r0
   15c00:	2b00      	cmp	r3, #0
   15c02:	d009      	beq.n	15c18 <pp_atan2+0x60>
   15c04:	a14a      	add	r1, pc, #296	; (adr r1, 15d30 <pp_atan2+0x178>)
   15c06:	e9d1 0100 	ldrd	r0, r1, [r1]
   15c0a:	e9d7 2300 	ldrd	r2, r3, [r7]
   15c0e:	f001 fe55 	bl	178bc <__aeabi_dsub>
   15c12:	4602      	mov	r2, r0
   15c14:	460b      	mov	r3, r1
   15c16:	e008      	b.n	15c2a <pp_atan2+0x72>
   15c18:	e9d7 0100 	ldrd	r0, r1, [r7]
   15c1c:	a344      	add	r3, pc, #272	; (adr r3, 15d30 <pp_atan2+0x178>)
   15c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c22:	f001 fe4d 	bl	178c0 <__adddf3>
   15c26:	4602      	mov	r2, r0
   15c28:	460b      	mov	r3, r1
   15c2a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   15c2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15c32:	f04f 0200 	mov.w	r2, #0
   15c36:	f04f 0300 	mov.w	r3, #0
   15c3a:	f002 fa83 	bl	18144 <__aeabi_dcmpgt>
   15c3e:	4603      	mov	r3, r0
   15c40:	2b00      	cmp	r3, #0
   15c42:	d02a      	beq.n	15c9a <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   15c44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15c4c:	f001 fe36 	bl	178bc <__aeabi_dsub>
   15c50:	4602      	mov	r2, r0
   15c52:	460b      	mov	r3, r1
   15c54:	4690      	mov	r8, r2
   15c56:	4699      	mov	r9, r3
   15c58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15c60:	f001 fe2e 	bl	178c0 <__adddf3>
   15c64:	4602      	mov	r2, r0
   15c66:	460b      	mov	r3, r1
   15c68:	4640      	mov	r0, r8
   15c6a:	4649      	mov	r1, r9
   15c6c:	f002 f904 	bl	17e78 <__aeabi_ddiv>
   15c70:	4602      	mov	r2, r0
   15c72:	460b      	mov	r3, r1
   15c74:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15c78:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15c80:	f001 ffd0 	bl	17c24 <__aeabi_dmul>
   15c84:	4602      	mov	r2, r0
   15c86:	460b      	mov	r3, r1
   15c88:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c8c:	f001 fe16 	bl	178bc <__aeabi_dsub>
   15c90:	4602      	mov	r2, r0
   15c92:	460b      	mov	r3, r1
   15c94:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15c98:	e029      	b.n	15cee <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   15c9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15c9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15ca2:	f001 fe0d 	bl	178c0 <__adddf3>
   15ca6:	4602      	mov	r2, r0
   15ca8:	460b      	mov	r3, r1
   15caa:	4690      	mov	r8, r2
   15cac:	4699      	mov	r9, r3
   15cae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15cb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   15cb6:	f001 fe01 	bl	178bc <__aeabi_dsub>
   15cba:	4602      	mov	r2, r0
   15cbc:	460b      	mov	r3, r1
   15cbe:	4640      	mov	r0, r8
   15cc0:	4649      	mov	r1, r9
   15cc2:	f002 f8d9 	bl	17e78 <__aeabi_ddiv>
   15cc6:	4602      	mov	r2, r0
   15cc8:	460b      	mov	r3, r1
   15cca:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   15cce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15cd2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15cd6:	f001 ffa5 	bl	17c24 <__aeabi_dmul>
   15cda:	4602      	mov	r2, r0
   15cdc:	460b      	mov	r3, r1
   15cde:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   15ce2:	f001 fdeb 	bl	178bc <__aeabi_dsub>
   15ce6:	4602      	mov	r2, r0
   15ce8:	460b      	mov	r3, r1
   15cea:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   15cee:	e9d7 0100 	ldrd	r0, r1, [r7]
   15cf2:	f04f 0200 	mov.w	r2, #0
   15cf6:	f04f 0300 	mov.w	r3, #0
   15cfa:	f002 fa05 	bl	18108 <__aeabi_dcmplt>
   15cfe:	4603      	mov	r3, r0
   15d00:	2b00      	cmp	r3, #0
   15d02:	d004      	beq.n	15d0e <pp_atan2+0x156>
		return (-angle);
   15d04:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15d08:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15d0c:	e001      	b.n	15d12 <pp_atan2+0x15a>
	else
		return angle;
   15d0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   15d12:	4622      	mov	r2, r4
   15d14:	462b      	mov	r3, r5
}
   15d16:	4610      	mov	r0, r2
   15d18:	4619      	mov	r1, r3
   15d1a:	3738      	adds	r7, #56	; 0x38
   15d1c:	46bd      	mov	sp, r7
   15d1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   15d22:	bf00      	nop
   15d24:	f3af 8000 	nop.w
   15d28:	54442d18 	.word	0x54442d18
   15d2c:	3fe921fb 	.word	0x3fe921fb
   15d30:	d9d7bdbb 	.word	0xd9d7bdbb
   15d34:	3ddb7cdf 	.word	0x3ddb7cdf

00015d38 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15d38:	b5b0      	push	{r4, r5, r7, lr}
   15d3a:	b08c      	sub	sp, #48	; 0x30
   15d3c:	af00      	add	r7, sp, #0
   15d3e:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   15d42:	e9d7 2300 	ldrd	r2, r3, [r7]
   15d46:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15d4a:	2301      	movs	r3, #1
   15d4c:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   15d4e:	e00a      	b.n	15d66 <pp_sin+0x2e>
   15d50:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d54:	a35a      	add	r3, pc, #360	; (adr r3, 15ec0 <pp_sin+0x188>)
   15d56:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d5a:	f001 fdb1 	bl	178c0 <__adddf3>
   15d5e:	4602      	mov	r2, r0
   15d60:	460b      	mov	r3, r1
   15d62:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15d66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d6a:	a357      	add	r3, pc, #348	; (adr r3, 15ec8 <pp_sin+0x190>)
   15d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d70:	f002 f9ca 	bl	18108 <__aeabi_dcmplt>
   15d74:	4603      	mov	r3, r0
   15d76:	2b00      	cmp	r3, #0
   15d78:	d1ea      	bne.n	15d50 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   15d7a:	e00a      	b.n	15d92 <pp_sin+0x5a>
   15d7c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d80:	a34f      	add	r3, pc, #316	; (adr r3, 15ec0 <pp_sin+0x188>)
   15d82:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d86:	f001 fd99 	bl	178bc <__aeabi_dsub>
   15d8a:	4602      	mov	r2, r0
   15d8c:	460b      	mov	r3, r1
   15d8e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15d92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d96:	a34e      	add	r3, pc, #312	; (adr r3, 15ed0 <pp_sin+0x198>)
   15d98:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d9c:	f002 f9d2 	bl	18144 <__aeabi_dcmpgt>
   15da0:	4603      	mov	r3, r0
   15da2:	2b00      	cmp	r3, #0
   15da4:	d1ea      	bne.n	15d7c <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   15da6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15daa:	a34b      	add	r3, pc, #300	; (adr r3, 15ed8 <pp_sin+0x1a0>)
   15dac:	e9d3 2300 	ldrd	r2, r3, [r3]
   15db0:	f002 f9c8 	bl	18144 <__aeabi_dcmpgt>
   15db4:	4603      	mov	r3, r0
   15db6:	2b00      	cmp	r3, #0
   15db8:	d00d      	beq.n	15dd6 <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   15dba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15dbe:	a348      	add	r3, pc, #288	; (adr r3, 15ee0 <pp_sin+0x1a8>)
   15dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   15dc4:	f001 fd7a 	bl	178bc <__aeabi_dsub>
   15dc8:	4602      	mov	r2, r0
   15dca:	460b      	mov	r3, r1
   15dcc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   15dd0:	f04f 33ff 	mov.w	r3, #4294967295
   15dd4:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   15dd6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15dda:	a343      	add	r3, pc, #268	; (adr r3, 15ee8 <pp_sin+0x1b0>)
   15ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
   15de0:	f002 f84a 	bl	17e78 <__aeabi_ddiv>
   15de4:	4602      	mov	r2, r0
   15de6:	460b      	mov	r3, r1
   15de8:	e9c7 2306 	strd	r2, r3, [r7, #24]
   15dec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15df0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15df4:	f001 ff16 	bl	17c24 <__aeabi_dmul>
   15df8:	4602      	mov	r2, r0
   15dfa:	460b      	mov	r3, r1
   15dfc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15e00:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15e04:	a33a      	add	r3, pc, #232	; (adr r3, 15ef0 <pp_sin+0x1b8>)
   15e06:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e0a:	f001 ff0b 	bl	17c24 <__aeabi_dmul>
   15e0e:	4602      	mov	r2, r0
   15e10:	460b      	mov	r3, r1
	      - .00467376557) * q2
   15e12:	4610      	mov	r0, r2
   15e14:	4619      	mov	r1, r3
   15e16:	a338      	add	r3, pc, #224	; (adr r3, 15ef8 <pp_sin+0x1c0>)
   15e18:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e1c:	f001 fd4e 	bl	178bc <__aeabi_dsub>
   15e20:	4602      	mov	r2, r0
   15e22:	460b      	mov	r3, r1
   15e24:	4610      	mov	r0, r2
   15e26:	4619      	mov	r1, r3
   15e28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15e2c:	f001 fefa 	bl	17c24 <__aeabi_dmul>
   15e30:	4602      	mov	r2, r0
   15e32:	460b      	mov	r3, r1
	      + .07968967928) * q2
   15e34:	4610      	mov	r0, r2
   15e36:	4619      	mov	r1, r3
   15e38:	a331      	add	r3, pc, #196	; (adr r3, 15f00 <pp_sin+0x1c8>)
   15e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e3e:	f001 fd3f 	bl	178c0 <__adddf3>
   15e42:	4602      	mov	r2, r0
   15e44:	460b      	mov	r3, r1
   15e46:	4610      	mov	r0, r2
   15e48:	4619      	mov	r1, r3
   15e4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15e4e:	f001 fee9 	bl	17c24 <__aeabi_dmul>
   15e52:	4602      	mov	r2, r0
   15e54:	460b      	mov	r3, r1
	      - .64596371106) * q2
   15e56:	4610      	mov	r0, r2
   15e58:	4619      	mov	r1, r3
   15e5a:	a32b      	add	r3, pc, #172	; (adr r3, 15f08 <pp_sin+0x1d0>)
   15e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e60:	f001 fd2c 	bl	178bc <__aeabi_dsub>
   15e64:	4602      	mov	r2, r0
   15e66:	460b      	mov	r3, r1
   15e68:	4610      	mov	r0, r2
   15e6a:	4619      	mov	r1, r3
   15e6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15e70:	f001 fed8 	bl	17c24 <__aeabi_dmul>
   15e74:	4602      	mov	r2, r0
   15e76:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15e78:	4610      	mov	r0, r2
   15e7a:	4619      	mov	r1, r3
   15e7c:	a324      	add	r3, pc, #144	; (adr r3, 15f10 <pp_sin+0x1d8>)
   15e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e82:	f001 fd1d 	bl	178c0 <__adddf3>
   15e86:	4602      	mov	r2, r0
   15e88:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   15e8a:	4610      	mov	r0, r2
   15e8c:	4619      	mov	r1, r3
   15e8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15e92:	f001 fec7 	bl	17c24 <__aeabi_dmul>
   15e96:	4602      	mov	r2, r0
   15e98:	460b      	mov	r3, r1
   15e9a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   15e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15ea0:	2b00      	cmp	r3, #0
   15ea2:	da04      	bge.n	15eae <pp_sin+0x176>
   15ea4:	68bc      	ldr	r4, [r7, #8]
   15ea6:	68fb      	ldr	r3, [r7, #12]
   15ea8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15eac:	e001      	b.n	15eb2 <pp_sin+0x17a>
   15eae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   15eb2:	4622      	mov	r2, r4
   15eb4:	462b      	mov	r3, r5
}
   15eb6:	4610      	mov	r0, r2
   15eb8:	4619      	mov	r1, r3
   15eba:	3730      	adds	r7, #48	; 0x30
   15ebc:	46bd      	mov	sp, r7
   15ebe:	bdb0      	pop	{r4, r5, r7, pc}
   15ec0:	54442d18 	.word	0x54442d18
   15ec4:	401921fb 	.word	0x401921fb
   15ec8:	54442d18 	.word	0x54442d18
   15ecc:	bff921fb 	.word	0xbff921fb
   15ed0:	7f3321d2 	.word	0x7f3321d2
   15ed4:	4012d97c 	.word	0x4012d97c
   15ed8:	54442d18 	.word	0x54442d18
   15edc:	3ff921fb 	.word	0x3ff921fb
   15ee0:	54442d18 	.word	0x54442d18
   15ee4:	400921fb 	.word	0x400921fb
   15ee8:	5443d6f4 	.word	0x5443d6f4
   15eec:	3ff921fb 	.word	0x3ff921fb
   15ef0:	48a890af 	.word	0x48a890af
   15ef4:	3f23daf7 	.word	0x3f23daf7
   15ef8:	645b6d0e 	.word	0x645b6d0e
   15efc:	3f7324cc 	.word	0x3f7324cc
   15f00:	f65619a5 	.word	0xf65619a5
   15f04:	3fb4668a 	.word	0x3fb4668a
   15f08:	16acf9cd 	.word	0x16acf9cd
   15f0c:	3fe4abbc 	.word	0x3fe4abbc
   15f10:	520817f7 	.word	0x520817f7
   15f14:	3ff921fb 	.word	0x3ff921fb

00015f18 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   15f18:	b480      	push	{r7}
   15f1a:	b083      	sub	sp, #12
   15f1c:	af00      	add	r7, sp, #0
   15f1e:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   15f22:	4610      	mov	r0, r2
   15f24:	4619      	mov	r1, r3
   15f26:	370c      	adds	r7, #12
   15f28:	46bd      	mov	sp, r7
   15f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f2e:	4770      	bx	lr

00015f30 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   15f30:	b480      	push	{r7}
   15f32:	b083      	sub	sp, #12
   15f34:	af00      	add	r7, sp, #0
   15f36:	4603      	mov	r3, r0
   15f38:	6039      	str	r1, [r7, #0]
   15f3a:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   15f3c:	79fa      	ldrb	r2, [r7, #7]
   15f3e:	f64c 3380 	movw	r3, #52096	; 0xcb80
   15f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f46:	6839      	ldr	r1, [r7, #0]
   15f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   15f4c:	370c      	adds	r7, #12
   15f4e:	46bd      	mov	sp, r7
   15f50:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f54:	4770      	bx	lr
   15f56:	bf00      	nop

00015f58 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   15f58:	b480      	push	{r7}
   15f5a:	b083      	sub	sp, #12
   15f5c:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   15f5e:	f242 0315 	movw	r3, #8213	; 0x2015
   15f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f66:	2200      	movs	r2, #0
   15f68:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   15f6a:	f242 0314 	movw	r3, #8212	; 0x2014
   15f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f72:	2200      	movs	r2, #0
   15f74:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   15f76:	f242 0307 	movw	r3, #8199	; 0x2007
   15f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f7e:	22c0      	movs	r2, #192	; 0xc0
   15f80:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   15f82:	f242 0306 	movw	r3, #8198	; 0x2006
   15f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f8a:	22cf      	movs	r2, #207	; 0xcf
   15f8c:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15f8e:	2300      	movs	r3, #0
   15f90:	71fb      	strb	r3, [r7, #7]
   15f92:	e00a      	b.n	15faa <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   15f94:	79fa      	ldrb	r2, [r7, #7]
   15f96:	f64c 3380 	movw	r3, #52096	; 0xcb80
   15f9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f9e:	2100      	movs	r1, #0
   15fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15fa4:	79fb      	ldrb	r3, [r7, #7]
   15fa6:	3301      	adds	r3, #1
   15fa8:	71fb      	strb	r3, [r7, #7]
   15faa:	79fb      	ldrb	r3, [r7, #7]
   15fac:	2b07      	cmp	r3, #7
   15fae:	d9f1      	bls.n	15f94 <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   15fb0:	370c      	adds	r7, #12
   15fb2:	46bd      	mov	sp, r7
   15fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
   15fb8:	4770      	bx	lr
   15fba:	bf00      	nop

00015fbc <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   15fbc:	b480      	push	{r7}
   15fbe:	b083      	sub	sp, #12
   15fc0:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   15fc2:	f242 0326 	movw	r3, #8230	; 0x2026
   15fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fca:	881b      	ldrh	r3, [r3, #0]
   15fcc:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   15fce:	f64c 33dc 	movw	r3, #52188	; 0xcbdc
   15fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fd6:	881b      	ldrh	r3, [r3, #0]
   15fd8:	88fa      	ldrh	r2, [r7, #6]
   15fda:	1ad3      	subs	r3, r2, r3
   15fdc:	80bb      	strh	r3, [r7, #4]
  last		= this;
   15fde:	f64c 33dc 	movw	r3, #52188	; 0xcbdc
   15fe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fe6:	88fa      	ldrh	r2, [r7, #6]
   15fe8:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   15fea:	f64c 33de 	movw	r3, #52190	; 0xcbde
   15fee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ff2:	781b      	ldrb	r3, [r3, #0]
   15ff4:	2b00      	cmp	r3, #0
   15ff6:	d11e      	bne.n	16036 <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   15ff8:	f242 0324 	movw	r3, #8228	; 0x2024
   15ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16000:	781b      	ldrb	r3, [r3, #0]
   16002:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   16004:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   16008:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1600c:	781b      	ldrb	r3, [r3, #0]
   1600e:	78fa      	ldrb	r2, [r7, #3]
   16010:	1ad3      	subs	r3, r2, r3
   16012:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   16014:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   16018:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1601c:	78fa      	ldrb	r2, [r7, #3]
   1601e:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   16020:	78bb      	ldrb	r3, [r7, #2]
   16022:	2b6d      	cmp	r3, #109	; 0x6d
   16024:	d906      	bls.n	16034 <__vector_34+0x78>
      state = 1;
   16026:	f64c 33de 	movw	r3, #52190	; 0xcbde
   1602a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1602e:	2201      	movs	r2, #1
   16030:	701a      	strb	r2, [r3, #0]
   16032:	e053      	b.n	160dc <__vector_34+0x120>
   16034:	e052      	b.n	160dc <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   16036:	88bb      	ldrh	r3, [r7, #4]
   16038:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   1603c:	d304      	bcc.n	16048 <__vector_34+0x8c>
   1603e:	88ba      	ldrh	r2, [r7, #4]
   16040:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   16044:	429a      	cmp	r2, r3
   16046:	d911      	bls.n	1606c <__vector_34+0xb0>
      RestartPpmCycle();
   16048:	f64c 33de 	movw	r3, #52190	; 0xcbde
   1604c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16050:	2200      	movs	r2, #0
   16052:	701a      	strb	r2, [r3, #0]
   16054:	f242 0324 	movw	r3, #8228	; 0x2024
   16058:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1605c:	781b      	ldrb	r3, [r3, #0]
   1605e:	b2da      	uxtb	r2, r3
   16060:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   16064:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16068:	701a      	strb	r2, [r3, #0]
   1606a:	e038      	b.n	160de <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   1606c:	f64c 33de 	movw	r3, #52190	; 0xcbde
   16070:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16074:	781b      	ldrb	r3, [r3, #0]
   16076:	1e5a      	subs	r2, r3, #1
   16078:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1607c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16080:	88b9      	ldrh	r1, [r7, #4]
   16082:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   16086:	f64c 33de 	movw	r3, #52190	; 0xcbde
   1608a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1608e:	781b      	ldrb	r3, [r3, #0]
   16090:	2b08      	cmp	r3, #8
   16092:	d917      	bls.n	160c4 <__vector_34+0x108>
      ppm_valid	= 1;
   16094:	f64c 33db 	movw	r3, #52187	; 0xcbdb
   16098:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1609c:	2201      	movs	r2, #1
   1609e:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   160a0:	f64c 33de 	movw	r3, #52190	; 0xcbde
   160a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160a8:	2200      	movs	r2, #0
   160aa:	701a      	strb	r2, [r3, #0]
   160ac:	f242 0324 	movw	r3, #8228	; 0x2024
   160b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160b4:	781b      	ldrb	r3, [r3, #0]
   160b6:	b2da      	uxtb	r2, r3
   160b8:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   160bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160c0:	701a      	strb	r2, [r3, #0]
   160c2:	e00c      	b.n	160de <__vector_34+0x122>
    } else 
      state++;
   160c4:	f64c 33de 	movw	r3, #52190	; 0xcbde
   160c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160cc:	781b      	ldrb	r3, [r3, #0]
   160ce:	3301      	adds	r3, #1
   160d0:	b2da      	uxtb	r2, r3
   160d2:	f64c 33de 	movw	r3, #52190	; 0xcbde
   160d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160da:	701a      	strb	r2, [r3, #0]
  }
  return;
   160dc:	bf00      	nop
}
   160de:	370c      	adds	r7, #12
   160e0:	46bd      	mov	sp, r7
   160e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   160e6:	4770      	bx	lr

000160e8 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   160e8:	b590      	push	{r4, r7, lr}
   160ea:	b083      	sub	sp, #12
   160ec:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   160ee:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   160f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160f6:	881b      	ldrh	r3, [r3, #0]
   160f8:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   160fc:	b29b      	uxth	r3, r3
   160fe:	80fb      	strh	r3, [r7, #6]
   16100:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16104:	4618      	mov	r0, r3
   16106:	f002 f979 	bl	183fc <__aeabi_i2f>
   1610a:	4603      	mov	r3, r0
   1610c:	4618      	mov	r0, r3
   1610e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   16112:	f002 f9c7 	bl	184a4 <__aeabi_fmul>
   16116:	4603      	mov	r3, r0
   16118:	4618      	mov	r0, r3
   1611a:	f002 fb89 	bl	18830 <__aeabi_f2iz>
   1611e:	4603      	mov	r3, r0
   16120:	b29a      	uxth	r2, r3
   16122:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16126:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1612a:	801a      	strh	r2, [r3, #0]
   1612c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16130:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16134:	881b      	ldrh	r3, [r3, #0]
   16136:	b21b      	sxth	r3, r3
   16138:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1613c:	dd07      	ble.n	1614e <last_radio_from_ppm+0x66>
   1613e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16142:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16146:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1614a:	801a      	strh	r2, [r3, #0]
   1614c:	e00d      	b.n	1616a <last_radio_from_ppm+0x82>
   1614e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16152:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16156:	881b      	ldrh	r3, [r3, #0]
   16158:	b21b      	sxth	r3, r3
   1615a:	2b00      	cmp	r3, #0
   1615c:	da05      	bge.n	1616a <last_radio_from_ppm+0x82>
   1615e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16162:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16166:	2200      	movs	r2, #0
   16168:	801a      	strh	r2, [r3, #0]
   1616a:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1616e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16172:	885b      	ldrh	r3, [r3, #2]
   16174:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16178:	b29b      	uxth	r3, r3
   1617a:	80fb      	strh	r3, [r7, #6]
   1617c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16180:	4618      	mov	r0, r3
   16182:	f002 f93b 	bl	183fc <__aeabi_i2f>
   16186:	4603      	mov	r3, r0
   16188:	4618      	mov	r0, r3
   1618a:	f002 fb51 	bl	18830 <__aeabi_f2iz>
   1618e:	4603      	mov	r3, r0
   16190:	b29a      	uxth	r2, r3
   16192:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16196:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1619a:	805a      	strh	r2, [r3, #2]
   1619c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   161a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161a4:	885b      	ldrh	r3, [r3, #2]
   161a6:	b21b      	sxth	r3, r3
   161a8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   161ac:	dd07      	ble.n	161be <last_radio_from_ppm+0xd6>
   161ae:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   161b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161b6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   161ba:	805a      	strh	r2, [r3, #2]
   161bc:	e00f      	b.n	161de <last_radio_from_ppm+0xf6>
   161be:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   161c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161c6:	885b      	ldrh	r3, [r3, #2]
   161c8:	b21b      	sxth	r3, r3
   161ca:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   161ce:	da06      	bge.n	161de <last_radio_from_ppm+0xf6>
   161d0:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   161d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161d8:	f64d 2280 	movw	r2, #55936	; 0xda80
   161dc:	805a      	strh	r2, [r3, #2]
   161de:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   161e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161e6:	889b      	ldrh	r3, [r3, #4]
   161e8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   161ec:	b29b      	uxth	r3, r3
   161ee:	80fb      	strh	r3, [r7, #6]
   161f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   161f4:	4618      	mov	r0, r3
   161f6:	f002 f901 	bl	183fc <__aeabi_i2f>
   161fa:	4603      	mov	r3, r0
   161fc:	4618      	mov	r0, r3
   161fe:	f002 fb17 	bl	18830 <__aeabi_f2iz>
   16202:	4603      	mov	r3, r0
   16204:	b29a      	uxth	r2, r3
   16206:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1620a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1620e:	809a      	strh	r2, [r3, #4]
   16210:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16214:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16218:	889b      	ldrh	r3, [r3, #4]
   1621a:	b21b      	sxth	r3, r3
   1621c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16220:	dd07      	ble.n	16232 <last_radio_from_ppm+0x14a>
   16222:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16226:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1622a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1622e:	809a      	strh	r2, [r3, #4]
   16230:	e00f      	b.n	16252 <last_radio_from_ppm+0x16a>
   16232:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16236:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1623a:	889b      	ldrh	r3, [r3, #4]
   1623c:	b21b      	sxth	r3, r3
   1623e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16242:	da06      	bge.n	16252 <last_radio_from_ppm+0x16a>
   16244:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16248:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1624c:	f64d 2280 	movw	r2, #55936	; 0xda80
   16250:	809a      	strh	r2, [r3, #4]
   16252:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   16256:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1625a:	88db      	ldrh	r3, [r3, #6]
   1625c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16260:	b29b      	uxth	r3, r3
   16262:	80fb      	strh	r3, [r7, #6]
   16264:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16268:	4618      	mov	r0, r3
   1626a:	f002 f8c7 	bl	183fc <__aeabi_i2f>
   1626e:	4603      	mov	r3, r0
   16270:	4618      	mov	r0, r3
   16272:	f002 fadd 	bl	18830 <__aeabi_f2iz>
   16276:	4603      	mov	r3, r0
   16278:	b29a      	uxth	r2, r3
   1627a:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1627e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16282:	80da      	strh	r2, [r3, #6]
   16284:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16288:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1628c:	88db      	ldrh	r3, [r3, #6]
   1628e:	b21b      	sxth	r3, r3
   16290:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16294:	dd07      	ble.n	162a6 <last_radio_from_ppm+0x1be>
   16296:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1629a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1629e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   162a2:	80da      	strh	r2, [r3, #6]
   162a4:	e00f      	b.n	162c6 <last_radio_from_ppm+0x1de>
   162a6:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   162aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162ae:	88db      	ldrh	r3, [r3, #6]
   162b0:	b21b      	sxth	r3, r3
   162b2:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   162b6:	da06      	bge.n	162c6 <last_radio_from_ppm+0x1de>
   162b8:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   162bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162c0:	f64d 2280 	movw	r2, #55936	; 0xda80
   162c4:	80da      	strh	r2, [r3, #6]
   162c6:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   162ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162ce:	891b      	ldrh	r3, [r3, #8]
   162d0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   162d4:	b29b      	uxth	r3, r3
   162d6:	80fb      	strh	r3, [r7, #6]
   162d8:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   162dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162e0:	891b      	ldrh	r3, [r3, #8]
   162e2:	b21b      	sxth	r3, r3
   162e4:	4618      	mov	r0, r3
   162e6:	f002 f889 	bl	183fc <__aeabi_i2f>
   162ea:	4604      	mov	r4, r0
   162ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   162f0:	4618      	mov	r0, r3
   162f2:	f002 f883 	bl	183fc <__aeabi_i2f>
   162f6:	4603      	mov	r3, r0
   162f8:	4618      	mov	r0, r3
   162fa:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   162fe:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16302:	f002 f8cf 	bl	184a4 <__aeabi_fmul>
   16306:	4603      	mov	r3, r0
   16308:	4620      	mov	r0, r4
   1630a:	4619      	mov	r1, r3
   1630c:	f001 ffc2 	bl	18294 <__addsf3>
   16310:	4603      	mov	r3, r0
   16312:	4618      	mov	r0, r3
   16314:	f002 fa8c 	bl	18830 <__aeabi_f2iz>
   16318:	4603      	mov	r3, r0
   1631a:	b29a      	uxth	r2, r3
   1631c:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16320:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16324:	811a      	strh	r2, [r3, #8]
   16326:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1632a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1632e:	895b      	ldrh	r3, [r3, #10]
   16330:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16334:	b29b      	uxth	r3, r3
   16336:	80fb      	strh	r3, [r7, #6]
   16338:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1633c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16340:	895b      	ldrh	r3, [r3, #10]
   16342:	b21b      	sxth	r3, r3
   16344:	4618      	mov	r0, r3
   16346:	f002 f859 	bl	183fc <__aeabi_i2f>
   1634a:	4604      	mov	r4, r0
   1634c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16350:	4618      	mov	r0, r3
   16352:	f002 f853 	bl	183fc <__aeabi_i2f>
   16356:	4603      	mov	r3, r0
   16358:	4618      	mov	r0, r3
   1635a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1635e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16362:	f002 f89f 	bl	184a4 <__aeabi_fmul>
   16366:	4603      	mov	r3, r0
   16368:	4620      	mov	r0, r4
   1636a:	4619      	mov	r1, r3
   1636c:	f001 ff92 	bl	18294 <__addsf3>
   16370:	4603      	mov	r3, r0
   16372:	4618      	mov	r0, r3
   16374:	f002 fa5c 	bl	18830 <__aeabi_f2iz>
   16378:	4603      	mov	r3, r0
   1637a:	b29a      	uxth	r2, r3
   1637c:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16380:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16384:	815a      	strh	r2, [r3, #10]
   16386:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1638a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1638e:	899b      	ldrh	r3, [r3, #12]
   16390:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16394:	b29b      	uxth	r3, r3
   16396:	80fb      	strh	r3, [r7, #6]
   16398:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1639c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163a0:	899b      	ldrh	r3, [r3, #12]
   163a2:	b21b      	sxth	r3, r3
   163a4:	4618      	mov	r0, r3
   163a6:	f002 f829 	bl	183fc <__aeabi_i2f>
   163aa:	4604      	mov	r4, r0
   163ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   163b0:	4618      	mov	r0, r3
   163b2:	f002 f823 	bl	183fc <__aeabi_i2f>
   163b6:	4603      	mov	r3, r0
   163b8:	4618      	mov	r0, r3
   163ba:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   163be:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   163c2:	f002 f86f 	bl	184a4 <__aeabi_fmul>
   163c6:	4603      	mov	r3, r0
   163c8:	4620      	mov	r0, r4
   163ca:	4619      	mov	r1, r3
   163cc:	f001 ff62 	bl	18294 <__addsf3>
   163d0:	4603      	mov	r3, r0
   163d2:	4618      	mov	r0, r3
   163d4:	f002 fa2c 	bl	18830 <__aeabi_f2iz>
   163d8:	4603      	mov	r3, r0
   163da:	b29a      	uxth	r2, r3
   163dc:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   163e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163e4:	819a      	strh	r2, [r3, #12]
   163e6:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   163ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163ee:	89db      	ldrh	r3, [r3, #14]
   163f0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   163f4:	b29b      	uxth	r3, r3
   163f6:	80fb      	strh	r3, [r7, #6]
   163f8:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   163fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16400:	89db      	ldrh	r3, [r3, #14]
   16402:	b21b      	sxth	r3, r3
   16404:	4618      	mov	r0, r3
   16406:	f001 fff9 	bl	183fc <__aeabi_i2f>
   1640a:	4604      	mov	r4, r0
   1640c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16410:	4618      	mov	r0, r3
   16412:	f001 fff3 	bl	183fc <__aeabi_i2f>
   16416:	4603      	mov	r3, r0
   16418:	4618      	mov	r0, r3
   1641a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1641e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16422:	f002 f83f 	bl	184a4 <__aeabi_fmul>
   16426:	4603      	mov	r3, r0
   16428:	4620      	mov	r0, r4
   1642a:	4619      	mov	r1, r3
   1642c:	f001 ff32 	bl	18294 <__addsf3>
   16430:	4603      	mov	r3, r0
   16432:	4618      	mov	r0, r3
   16434:	f002 f9fc 	bl	18830 <__aeabi_f2iz>
   16438:	4603      	mov	r3, r0
   1643a:	b29a      	uxth	r2, r3
   1643c:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16440:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16444:	81da      	strh	r2, [r3, #14]
   16446:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1644a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1644e:	8a1b      	ldrh	r3, [r3, #16]
   16450:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16454:	b29b      	uxth	r3, r3
   16456:	80fb      	strh	r3, [r7, #6]
   16458:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1645c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16460:	8a1b      	ldrh	r3, [r3, #16]
   16462:	b21b      	sxth	r3, r3
   16464:	4618      	mov	r0, r3
   16466:	f001 ffc9 	bl	183fc <__aeabi_i2f>
   1646a:	4604      	mov	r4, r0
   1646c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16470:	4618      	mov	r0, r3
   16472:	f001 ffc3 	bl	183fc <__aeabi_i2f>
   16476:	4603      	mov	r3, r0
   16478:	4618      	mov	r0, r3
   1647a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1647e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16482:	f002 f80f 	bl	184a4 <__aeabi_fmul>
   16486:	4603      	mov	r3, r0
   16488:	4620      	mov	r0, r4
   1648a:	4619      	mov	r1, r3
   1648c:	f001 ff02 	bl	18294 <__addsf3>
   16490:	4603      	mov	r3, r0
   16492:	4618      	mov	r0, r3
   16494:	f002 f9cc 	bl	18830 <__aeabi_f2iz>
   16498:	4603      	mov	r3, r0
   1649a:	b29a      	uxth	r2, r3
   1649c:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   164a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164a4:	821a      	strh	r2, [r3, #16]
   164a6:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   164aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164ae:	781b      	ldrb	r3, [r3, #0]
   164b0:	3301      	adds	r3, #1
   164b2:	b2da      	uxtb	r2, r3
   164b4:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   164b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164bc:	701a      	strb	r2, [r3, #0]
   164be:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   164c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164c6:	781b      	ldrb	r3, [r3, #0]
   164c8:	2b0a      	cmp	r3, #10
   164ca:	f040 8101 	bne.w	166d0 <last_radio_from_ppm+0x5e8>
   164ce:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   164d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164d6:	2200      	movs	r2, #0
   164d8:	701a      	strb	r2, [r3, #0]
   164da:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   164de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164e2:	891a      	ldrh	r2, [r3, #8]
   164e4:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   164e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164ec:	811a      	strh	r2, [r3, #8]
   164ee:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   164f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164f6:	2200      	movs	r2, #0
   164f8:	811a      	strh	r2, [r3, #8]
   164fa:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   164fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16502:	891b      	ldrh	r3, [r3, #8]
   16504:	b21b      	sxth	r3, r3
   16506:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1650a:	dd07      	ble.n	1651c <last_radio_from_ppm+0x434>
   1650c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16510:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16514:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16518:	811a      	strh	r2, [r3, #8]
   1651a:	e00f      	b.n	1653c <last_radio_from_ppm+0x454>
   1651c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16520:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16524:	891b      	ldrh	r3, [r3, #8]
   16526:	b21b      	sxth	r3, r3
   16528:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1652c:	da06      	bge.n	1653c <last_radio_from_ppm+0x454>
   1652e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16532:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16536:	f64d 2280 	movw	r2, #55936	; 0xda80
   1653a:	811a      	strh	r2, [r3, #8]
   1653c:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16540:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16544:	895a      	ldrh	r2, [r3, #10]
   16546:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1654a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1654e:	815a      	strh	r2, [r3, #10]
   16550:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16554:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16558:	2200      	movs	r2, #0
   1655a:	815a      	strh	r2, [r3, #10]
   1655c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16560:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16564:	895b      	ldrh	r3, [r3, #10]
   16566:	b21b      	sxth	r3, r3
   16568:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1656c:	dd07      	ble.n	1657e <last_radio_from_ppm+0x496>
   1656e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16572:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16576:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1657a:	815a      	strh	r2, [r3, #10]
   1657c:	e00f      	b.n	1659e <last_radio_from_ppm+0x4b6>
   1657e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16582:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16586:	895b      	ldrh	r3, [r3, #10]
   16588:	b21b      	sxth	r3, r3
   1658a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1658e:	da06      	bge.n	1659e <last_radio_from_ppm+0x4b6>
   16590:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16594:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16598:	f64d 2280 	movw	r2, #55936	; 0xda80
   1659c:	815a      	strh	r2, [r3, #10]
   1659e:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   165a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165a6:	899a      	ldrh	r2, [r3, #12]
   165a8:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165b0:	819a      	strh	r2, [r3, #12]
   165b2:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   165b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165ba:	2200      	movs	r2, #0
   165bc:	819a      	strh	r2, [r3, #12]
   165be:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165c6:	899b      	ldrh	r3, [r3, #12]
   165c8:	b21b      	sxth	r3, r3
   165ca:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   165ce:	dd07      	ble.n	165e0 <last_radio_from_ppm+0x4f8>
   165d0:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   165dc:	819a      	strh	r2, [r3, #12]
   165de:	e00f      	b.n	16600 <last_radio_from_ppm+0x518>
   165e0:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165e8:	899b      	ldrh	r3, [r3, #12]
   165ea:	b21b      	sxth	r3, r3
   165ec:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   165f0:	da06      	bge.n	16600 <last_radio_from_ppm+0x518>
   165f2:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165fa:	f64d 2280 	movw	r2, #55936	; 0xda80
   165fe:	819a      	strh	r2, [r3, #12]
   16600:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16604:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16608:	89da      	ldrh	r2, [r3, #14]
   1660a:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1660e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16612:	81da      	strh	r2, [r3, #14]
   16614:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16618:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1661c:	2200      	movs	r2, #0
   1661e:	81da      	strh	r2, [r3, #14]
   16620:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16624:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16628:	89db      	ldrh	r3, [r3, #14]
   1662a:	b21b      	sxth	r3, r3
   1662c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16630:	dd07      	ble.n	16642 <last_radio_from_ppm+0x55a>
   16632:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16636:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1663a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1663e:	81da      	strh	r2, [r3, #14]
   16640:	e00f      	b.n	16662 <last_radio_from_ppm+0x57a>
   16642:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16646:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1664a:	89db      	ldrh	r3, [r3, #14]
   1664c:	b21b      	sxth	r3, r3
   1664e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16652:	da06      	bge.n	16662 <last_radio_from_ppm+0x57a>
   16654:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16658:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1665c:	f64d 2280 	movw	r2, #55936	; 0xda80
   16660:	81da      	strh	r2, [r3, #14]
   16662:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16666:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1666a:	8a1a      	ldrh	r2, [r3, #16]
   1666c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16670:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16674:	821a      	strh	r2, [r3, #16]
   16676:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1667a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1667e:	2200      	movs	r2, #0
   16680:	821a      	strh	r2, [r3, #16]
   16682:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16686:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1668a:	8a1b      	ldrh	r3, [r3, #16]
   1668c:	b21b      	sxth	r3, r3
   1668e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16692:	dd07      	ble.n	166a4 <last_radio_from_ppm+0x5bc>
   16694:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16698:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1669c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   166a0:	821a      	strh	r2, [r3, #16]
   166a2:	e00f      	b.n	166c4 <last_radio_from_ppm+0x5dc>
   166a4:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166ac:	8a1b      	ldrh	r3, [r3, #16]
   166ae:	b21b      	sxth	r3, r3
   166b0:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   166b4:	da06      	bge.n	166c4 <last_radio_from_ppm+0x5dc>
   166b6:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166be:	f64d 2280 	movw	r2, #55936	; 0xda80
   166c2:	821a      	strh	r2, [r3, #16]
   166c4:	f64c 33da 	movw	r3, #52186	; 0xcbda
   166c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166cc:	2201      	movs	r2, #1
   166ce:	701a      	strb	r2, [r3, #0]
}
   166d0:	370c      	adds	r7, #12
   166d2:	46bd      	mov	sp, r7
   166d4:	bd90      	pop	{r4, r7, pc}
   166d6:	bf00      	nop

000166d8 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   166d8:	b480      	push	{r7}
   166da:	af00      	add	r7, sp, #0
  idx_buf = 0;
   166dc:	f64c 4314 	movw	r3, #52244	; 0xcc14
   166e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166e4:	2200      	movs	r2, #0
   166e6:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   166e8:	f64c 4315 	movw	r3, #52245	; 0xcc15
   166ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166f0:	2200      	movs	r2, #0
   166f2:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   166f4:	f64c 4314 	movw	r3, #52244	; 0xcc14
   166f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166fc:	781b      	ldrb	r3, [r3, #0]
   166fe:	b2db      	uxtb	r3, r3
   16700:	461a      	mov	r2, r3
   16702:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16706:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1670a:	4413      	add	r3, r2
   1670c:	781a      	ldrb	r2, [r3, #0]
   1670e:	f64c 4316 	movw	r3, #52246	; 0xcc16
   16712:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16716:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   16718:	f242 030f 	movw	r3, #8207	; 0x200f
   1671c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16720:	f64c 4216 	movw	r2, #52246	; 0xcc16
   16724:	f2c2 0204 	movt	r2, #8196	; 0x2004
   16728:	7812      	ldrb	r2, [r2, #0]
   1672a:	b2d2      	uxtb	r2, r2
   1672c:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   1672e:	f64c 4312 	movw	r3, #52242	; 0xcc12
   16732:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16736:	2200      	movs	r2, #0
   16738:	701a      	strb	r2, [r3, #0]
}
   1673a:	46bd      	mov	sp, r7
   1673c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16740:	4770      	bx	lr
   16742:	bf00      	nop

00016744 <fbw_spi_init>:

void fbw_spi_init(void) {
   16744:	b480      	push	{r7}
   16746:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   16748:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   1674c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16750:	2200      	movs	r2, #0
   16752:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   16754:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16758:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1675c:	2200      	movs	r2, #0
   1675e:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   16760:	f242 0317 	movw	r3, #8215	; 0x2017
   16764:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16768:	f242 0217 	movw	r2, #8215	; 0x2017
   1676c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16770:	7812      	ldrb	r2, [r2, #0]
   16772:	b2d2      	uxtb	r2, r2
   16774:	f042 0210 	orr.w	r2, r2, #16
   16778:	b2d2      	uxtb	r2, r2
   1677a:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   1677c:	f242 030d 	movw	r3, #8205	; 0x200d
   16780:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16784:	2240      	movs	r2, #64	; 0x40
   16786:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   16788:	f242 030d 	movw	r3, #8205	; 0x200d
   1678c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16790:	f242 020d 	movw	r2, #8205	; 0x200d
   16794:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16798:	7812      	ldrb	r2, [r2, #0]
   1679a:	b2d2      	uxtb	r2, r2
   1679c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   167a0:	b2d2      	uxtb	r2, r2
   167a2:	701a      	strb	r2, [r3, #0]
}
   167a4:	46bd      	mov	sp, r7
   167a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   167aa:	4770      	bx	lr
   167ac:	0000      	movs	r0, r0
	...

000167b0 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   167b0:	b480      	push	{r7}
   167b2:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   167b4:	f242 032f 	movw	r3, #8239	; 0x202f
   167b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167bc:	2200      	movs	r2, #0
   167be:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   167c0:	f242 032e 	movw	r3, #8238	; 0x202e
   167c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167c8:	2201      	movs	r2, #1
   167ca:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   167cc:	f242 0325 	movw	r3, #8229	; 0x2025
   167d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167d4:	2207      	movs	r2, #7
   167d6:	701a      	strb	r2, [r3, #0]
}
   167d8:	46bd      	mov	sp, r7
   167da:	f85d 7b04 	ldr.w	r7, [sp], #4
   167de:	4770      	bx	lr

000167e0 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   167e0:	b480      	push	{r7}
   167e2:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   167e4:	f242 032e 	movw	r3, #8238	; 0x202e
   167e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167ec:	f242 022e 	movw	r2, #8238	; 0x202e
   167f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   167f4:	7812      	ldrb	r2, [r2, #0]
   167f6:	b2d2      	uxtb	r2, r2
   167f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   167fc:	b2d2      	uxtb	r2, r2
   167fe:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   16800:	f242 032e 	movw	r3, #8238	; 0x202e
   16804:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16808:	f242 022e 	movw	r2, #8238	; 0x202e
   1680c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16810:	7812      	ldrb	r2, [r2, #0]
   16812:	b2d2      	uxtb	r2, r2
   16814:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16818:	b2d2      	uxtb	r2, r2
   1681a:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   1681c:	f242 0317 	movw	r3, #8215	; 0x2017
   16820:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16824:	f242 0217 	movw	r2, #8215	; 0x2017
   16828:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1682c:	7812      	ldrb	r2, [r2, #0]
   1682e:	b2d2      	uxtb	r2, r2
   16830:	f022 0201 	bic.w	r2, r2, #1
   16834:	b2d2      	uxtb	r2, r2
   16836:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   16838:	f242 0337 	movw	r3, #8247	; 0x2037
   1683c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16840:	f242 0237 	movw	r2, #8247	; 0x2037
   16844:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16848:	7812      	ldrb	r2, [r2, #0]
   1684a:	b2d2      	uxtb	r2, r2
   1684c:	f042 0220 	orr.w	r2, r2, #32
   16850:	b2d2      	uxtb	r2, r2
   16852:	701a      	strb	r2, [r3, #0]
}
   16854:	46bd      	mov	sp, r7
   16856:	f85d 7b04 	ldr.w	r7, [sp], #4
   1685a:	4770      	bx	lr

0001685c <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   1685c:	b580      	push	{r7, lr}
   1685e:	b082      	sub	sp, #8
   16860:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16862:	2300      	movs	r3, #0
   16864:	71fb      	strb	r3, [r7, #7]
   16866:	e010      	b.n	1688a <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   16868:	79fa      	ldrb	r2, [r7, #7]
   1686a:	79f9      	ldrb	r1, [r7, #7]
   1686c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16870:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16874:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   16878:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   1687c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16880:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16884:	79fb      	ldrb	r3, [r7, #7]
   16886:	3301      	adds	r3, #1
   16888:	71fb      	strb	r3, [r7, #7]
   1688a:	79fb      	ldrb	r3, [r7, #7]
   1688c:	2b08      	cmp	r3, #8
   1688e:	d9eb      	bls.n	16868 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   16890:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16894:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16898:	781b      	ldrb	r3, [r3, #0]
   1689a:	2b00      	cmp	r3, #0
   1689c:	bf0c      	ite	eq
   1689e:	2300      	moveq	r3, #0
   168a0:	2301      	movne	r3, #1
   168a2:	b2db      	uxtb	r3, r3
   168a4:	461a      	mov	r2, r3
   168a6:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   168aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168ae:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   168b0:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   168b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168b8:	7cdb      	ldrb	r3, [r3, #19]
   168ba:	b2da      	uxtb	r2, r3
   168bc:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   168c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168c4:	781b      	ldrb	r3, [r3, #0]
   168c6:	2b00      	cmp	r3, #0
   168c8:	d001      	beq.n	168ce <to_autopilot_from_last_radio+0x72>
   168ca:	2302      	movs	r3, #2
   168cc:	e000      	b.n	168d0 <to_autopilot_from_last_radio+0x74>
   168ce:	2300      	movs	r3, #0
   168d0:	4313      	orrs	r3, r2
   168d2:	b2db      	uxtb	r3, r3
   168d4:	b2da      	uxtb	r2, r3
   168d6:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   168da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168de:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   168e0:	f64c 33da 	movw	r3, #52186	; 0xcbda
   168e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168e8:	781b      	ldrb	r3, [r3, #0]
   168ea:	2b00      	cmp	r3, #0
   168ec:	d012      	beq.n	16914 <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   168ee:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   168f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168f6:	7cdb      	ldrb	r3, [r3, #19]
   168f8:	f043 0304 	orr.w	r3, r3, #4
   168fc:	b2da      	uxtb	r2, r3
   168fe:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16902:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16906:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   16908:	f64c 33da 	movw	r3, #52186	; 0xcbda
   1690c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16910:	2200      	movs	r2, #0
   16912:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   16914:	f64c 43a8 	movw	r3, #52392	; 0xcca8
   16918:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1691c:	781a      	ldrb	r2, [r3, #0]
   1691e:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16922:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16926:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   16928:	f64c 4318 	movw	r3, #52248	; 0xcc18
   1692c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16930:	881b      	ldrh	r3, [r3, #0]
   16932:	4618      	mov	r0, r3
   16934:	f001 f910 	bl	17b58 <__aeabi_i2d>
   16938:	4602      	mov	r2, r0
   1693a:	460b      	mov	r3, r1
   1693c:	4610      	mov	r0, r2
   1693e:	4619      	mov	r1, r3
   16940:	a31b      	add	r3, pc, #108	; (adr r3, 169b0 <to_autopilot_from_last_radio+0x154>)
   16942:	e9d3 2300 	ldrd	r2, r3, [r3]
   16946:	f001 f96d 	bl	17c24 <__aeabi_dmul>
   1694a:	4602      	mov	r2, r0
   1694c:	460b      	mov	r3, r1
   1694e:	4610      	mov	r0, r2
   16950:	4619      	mov	r1, r3
   16952:	f04f 0200 	mov.w	r2, #0
   16956:	f04f 0300 	mov.w	r3, #0
   1695a:	f2c4 0340 	movt	r3, #16448	; 0x4040
   1695e:	f001 fa8b 	bl	17e78 <__aeabi_ddiv>
   16962:	4602      	mov	r2, r0
   16964:	460b      	mov	r3, r1
   16966:	4610      	mov	r0, r2
   16968:	4619      	mov	r1, r3
   1696a:	a313      	add	r3, pc, #76	; (adr r3, 169b8 <to_autopilot_from_last_radio+0x15c>)
   1696c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16970:	f000 ffa6 	bl	178c0 <__adddf3>
   16974:	4602      	mov	r2, r0
   16976:	460b      	mov	r3, r1
   16978:	4610      	mov	r0, r2
   1697a:	4619      	mov	r1, r3
   1697c:	f04f 0200 	mov.w	r2, #0
   16980:	f04f 0300 	mov.w	r3, #0
   16984:	f2c4 0324 	movt	r3, #16420	; 0x4024
   16988:	f001 f94c 	bl	17c24 <__aeabi_dmul>
   1698c:	4602      	mov	r2, r0
   1698e:	460b      	mov	r3, r1
   16990:	4610      	mov	r0, r2
   16992:	4619      	mov	r1, r3
   16994:	f001 fc08 	bl	181a8 <__aeabi_d2uiz>
   16998:	4603      	mov	r3, r0
   1699a:	b2da      	uxtb	r2, r3
   1699c:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   169a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169a4:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   169a6:	3708      	adds	r7, #8
   169a8:	46bd      	mov	sp, r7
   169aa:	bd80      	pop	{r7, pc}
   169ac:	f3af 8000 	nop.w
   169b0:	1eb851ec 	.word	0x1eb851ec
   169b4:	3f91eb85 	.word	0x3f91eb85
   169b8:	020c49ba 	.word	0x020c49ba
   169bc:	3fb6872b 	.word	0x3fb6872b

000169c0 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   169c0:	b580      	push	{r7, lr}
   169c2:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
   if ( !SpiIsSelected() && spi_was_interrupted ) 
   169c4:	f242 0316 	movw	r3, #8214	; 0x2016
   169c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   169cc:	781b      	ldrb	r3, [r3, #0]
   169ce:	b2db      	uxtb	r3, r3
   169d0:	f003 0304 	and.w	r3, r3, #4
   169d4:	2b00      	cmp	r3, #0
   169d6:	d011      	beq.n	169fc <send_data_to_autopilot_task+0x3c>
   169d8:	f64c 4313 	movw	r3, #52243	; 0xcc13
   169dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169e0:	781b      	ldrb	r3, [r3, #0]
   169e2:	b2db      	uxtb	r3, r3
   169e4:	2b00      	cmp	r3, #0
   169e6:	d009      	beq.n	169fc <send_data_to_autopilot_task+0x3c>
   {
      spi_was_interrupted = FALSE;
   169e8:	f64c 4313 	movw	r3, #52243	; 0xcc13
   169ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169f0:	2200      	movs	r2, #0
   169f2:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   169f4:	f7ff ff32 	bl	1685c <to_autopilot_from_last_radio>
      spi_reset();
   169f8:	f7ff fe6e 	bl	166d8 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   169fc:	bd80      	pop	{r7, pc}
   169fe:	bf00      	nop

00016a00 <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   16a00:	b580      	push	{r7, lr}
   16a02:	af00      	add	r7, sp, #0
  uart_init_tx();
   16a04:	f000 fb68 	bl	170d8 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   16a08:	f648 20d4 	movw	r0, #35540	; 0x8ad4
   16a0c:	f2c0 0001 	movt	r0, #1
   16a10:	f000 fc40 	bl	17294 <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   16a14:	f7ff faa0 	bl	15f58 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   16a18:	2003      	movs	r0, #3
   16a1a:	f64c 4118 	movw	r1, #52248	; 0xcc18
   16a1e:	f2c2 0104 	movt	r1, #8196	; 0x2004
   16a22:	f7ff fa85 	bl	15f30 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   16a26:	2006      	movs	r0, #6
   16a28:	f64c 415c 	movw	r1, #52316	; 0xcc5c
   16a2c:	f2c2 0104 	movt	r1, #8196	; 0x2004
   16a30:	f7ff fa7e 	bl	15f30 <fbw_adc_buf_channel>
#endif
  timer_init();
   16a34:	f7ff febc 	bl	167b0 <timer_init>
  servo_init();
   16a38:	f000 f8fa 	bl	16c30 <servo_init>
  ppm_init();
   16a3c:	f7ff fed0 	bl	167e0 <ppm_init>
  fbw_spi_init();
   16a40:	f7ff fe80 	bl	16744 <fbw_spi_init>
  //sei(); //FN
}
   16a44:	bd80      	pop	{r7, pc}
   16a46:	bf00      	nop

00016a48 <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   16a48:	b580      	push	{r7, lr}
   16a4a:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    if( ppm_valid ) 
   16a4c:	f64c 33db 	movw	r3, #52187	; 0xcbdb
   16a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a54:	781b      	ldrb	r3, [r3, #0]
   16a56:	b2db      	uxtb	r3, r3
   16a58:	2b00      	cmp	r3, #0
   16a5a:	d04c      	beq.n	16af6 <test_ppm_task+0xae>
    {
      ppm_valid = FALSE;
   16a5c:	f64c 33db 	movw	r3, #52187	; 0xcbdb
   16a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a64:	2200      	movs	r2, #0
   16a66:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   16a68:	f64c 43a7 	movw	r3, #52391	; 0xcca7
   16a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a70:	781b      	ldrb	r3, [r3, #0]
   16a72:	3301      	adds	r3, #1
   16a74:	b2da      	uxtb	r2, r3
   16a76:	f64c 43a7 	movw	r3, #52391	; 0xcca7
   16a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a7e:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   16a80:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a88:	2201      	movs	r2, #1
   16a8a:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16a8c:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16a90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a94:	2200      	movs	r2, #0
   16a96:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   16a98:	f64c 43a2 	movw	r3, #52386	; 0xcca2
   16a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16aa0:	2200      	movs	r2, #0
   16aa2:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16aa4:	f7ff fb20 	bl	160e8 <last_radio_from_ppm>
      if (last_radio_contains_avg_channels) 
   16aa8:	f64c 33da 	movw	r3, #52186	; 0xcbda
   16aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ab0:	781b      	ldrb	r3, [r3, #0]
   16ab2:	2b00      	cmp	r3, #0
   16ab4:	d011      	beq.n	16ada <test_ppm_task+0x92>
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   16ab6:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16abe:	891b      	ldrh	r3, [r3, #8]
   16ac0:	b21b      	sxth	r3, r3
   16ac2:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   16ac6:	bfb4      	ite	lt
   16ac8:	2300      	movlt	r3, #0
   16aca:	2301      	movge	r3, #1
   16acc:	b2db      	uxtb	r3, r3
   16ace:	461a      	mov	r2, r3
   16ad0:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ad8:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   16ada:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ae2:	781b      	ldrb	r3, [r3, #0]
   16ae4:	2b00      	cmp	r3, #0
   16ae6:	d11a      	bne.n	16b1e <test_ppm_task+0xd6>
      {
	servo_set(last_radio);
   16ae8:	f64c 30b4 	movw	r0, #52148	; 0xcbb4
   16aec:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16af0:	f000 f97c 	bl	16dec <servo_set>
   16af4:	e013      	b.n	16b1e <test_ppm_task+0xd6>
      }
    } 
    else if (mode == MODE_MANUAL && radio_really_lost) 
   16af6:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16afe:	781b      	ldrb	r3, [r3, #0]
   16b00:	2b00      	cmp	r3, #0
   16b02:	d10c      	bne.n	16b1e <test_ppm_task+0xd6>
   16b04:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16b08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b0c:	781b      	ldrb	r3, [r3, #0]
   16b0e:	2b00      	cmp	r3, #0
   16b10:	d005      	beq.n	16b1e <test_ppm_task+0xd6>
    {
      mode = MODE_AUTO;
   16b12:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16b16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b1a:	2201      	movs	r2, #1
   16b1c:	701a      	strb	r2, [r3, #0]
    }
    if (time_since_last_ppm >= STALLED_TIME) 
   16b1e:	f64c 43a2 	movw	r3, #52386	; 0xcca2
   16b22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b26:	881b      	ldrh	r3, [r3, #0]
   16b28:	2b1d      	cmp	r3, #29
   16b2a:	d905      	bls.n	16b38 <test_ppm_task+0xf0>
    {
      radio_ok = FALSE;
   16b2c:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b34:	2200      	movs	r2, #0
   16b36:	701a      	strb	r2, [r3, #0]
    }
    if (time_since_last_ppm >= REALLY_STALLED_TIME) 
   16b38:	f64c 43a2 	movw	r3, #52386	; 0xcca2
   16b3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b40:	881b      	ldrh	r3, [r3, #0]
   16b42:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   16b46:	d305      	bcc.n	16b54 <test_ppm_task+0x10c>
    {
      radio_really_lost = TRUE;
   16b48:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b50:	2201      	movs	r2, #1
   16b52:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   16b54:	bd80      	pop	{r7, pc}
   16b56:	bf00      	nop

00016b58 <check_failsafe_task>:
void check_failsafe_task(void)
{
   16b58:	b580      	push	{r7, lr}
   16b5a:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
   16b5c:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b64:	781b      	ldrb	r3, [r3, #0]
   16b66:	2b00      	cmp	r3, #0
   16b68:	d106      	bne.n	16b78 <check_failsafe_task+0x20>
   16b6a:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16b6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b72:	781b      	ldrb	r3, [r3, #0]
   16b74:	2b00      	cmp	r3, #0
   16b76:	d00d      	beq.n	16b94 <check_failsafe_task+0x3c>
   16b78:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16b7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b80:	781b      	ldrb	r3, [r3, #0]
   16b82:	2b01      	cmp	r3, #1
   16b84:	d10c      	bne.n	16ba0 <check_failsafe_task+0x48>
   16b86:	f64c 43a5 	movw	r3, #52389	; 0xcca5
   16b8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b8e:	781b      	ldrb	r3, [r3, #0]
   16b90:	2b00      	cmp	r3, #0
   16b92:	d105      	bne.n	16ba0 <check_failsafe_task+0x48>
    {
      servo_set(failsafe);
   16b94:	f648 20c0 	movw	r0, #35520	; 0x8ac0
   16b98:	f2c0 0001 	movt	r0, #1
   16b9c:	f000 f926 	bl	16dec <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   16ba0:	bd80      	pop	{r7, pc}
   16ba2:	bf00      	nop

00016ba4 <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   16ba4:	b580      	push	{r7, lr}
   16ba6:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     if ( !SpiIsSelected() && spi_was_interrupted ) 
   16ba8:	f242 0316 	movw	r3, #8214	; 0x2016
   16bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16bb0:	781b      	ldrb	r3, [r3, #0]
   16bb2:	b2db      	uxtb	r3, r3
   16bb4:	f003 0304 	and.w	r3, r3, #4
   16bb8:	2b00      	cmp	r3, #0
   16bba:	d028      	beq.n	16c0e <check_mega128_values_task+0x6a>
   16bbc:	f64c 4313 	movw	r3, #52243	; 0xcc13
   16bc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bc4:	781b      	ldrb	r3, [r3, #0]
   16bc6:	b2db      	uxtb	r3, r3
   16bc8:	2b00      	cmp	r3, #0
   16bca:	d020      	beq.n	16c0e <check_mega128_values_task+0x6a>
     {
         if (mega128_receive_valid)
   16bcc:	f64c 4312 	movw	r3, #52242	; 0xcc12
   16bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bd4:	781b      	ldrb	r3, [r3, #0]
   16bd6:	b2db      	uxtb	r3, r3
   16bd8:	2b00      	cmp	r3, #0
   16bda:	d018      	beq.n	16c0e <check_mega128_values_task+0x6a>
         { 
             time_since_last_mega128 = 0;
   16bdc:	f64c 43a1 	movw	r3, #52385	; 0xcca1
   16be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16be4:	2200      	movs	r2, #0
   16be6:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   16be8:	f64c 43a5 	movw	r3, #52389	; 0xcca5
   16bec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bf0:	2201      	movs	r2, #1
   16bf2:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   16bf4:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bfc:	781b      	ldrb	r3, [r3, #0]
   16bfe:	2b01      	cmp	r3, #1
   16c00:	d105      	bne.n	16c0e <check_mega128_values_task+0x6a>
                 servo_set(from_mega128.channels);
   16c02:	f64c 30e4 	movw	r0, #52196	; 0xcbe4
   16c06:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16c0a:	f000 f8ef 	bl	16dec <servo_set>
         }
     }
     if (time_since_last_mega128 == STALLED_TIME) 
   16c0e:	f64c 43a1 	movw	r3, #52385	; 0xcca1
   16c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c16:	781b      	ldrb	r3, [r3, #0]
   16c18:	2b1e      	cmp	r3, #30
   16c1a:	d105      	bne.n	16c28 <check_mega128_values_task+0x84>
     {
         mega128_ok = FALSE;
   16c1c:	f64c 43a5 	movw	r3, #52389	; 0xcca5
   16c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c24:	2200      	movs	r2, #0
   16c26:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   16c28:	bd80      	pop	{r7, pc}
   16c2a:	bf00      	nop
   16c2c:	f3af 8000 	nop.w

00016c30 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16c30:	b480      	push	{r7}
   16c32:	b083      	sub	sp, #12
   16c34:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   16c36:	f242 0311 	movw	r3, #8209	; 0x2011
   16c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c3e:	f242 0211 	movw	r2, #8209	; 0x2011
   16c42:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c46:	7812      	ldrb	r2, [r2, #0]
   16c48:	b2d2      	uxtb	r2, r2
   16c4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16c4e:	b2d2      	uxtb	r2, r2
   16c50:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   16c52:	f242 0317 	movw	r3, #8215	; 0x2017
   16c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c5a:	f242 0217 	movw	r2, #8215	; 0x2017
   16c5e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c62:	7812      	ldrb	r2, [r2, #0]
   16c64:	b2d2      	uxtb	r2, r2
   16c66:	f042 0202 	orr.w	r2, r2, #2
   16c6a:	b2d2      	uxtb	r2, r2
   16c6c:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16c6e:	f242 0312 	movw	r3, #8210	; 0x2012
   16c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c76:	f242 0212 	movw	r2, #8210	; 0x2012
   16c7a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c7e:	7812      	ldrb	r2, [r2, #0]
   16c80:	b2d2      	uxtb	r2, r2
   16c82:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16c86:	b2d2      	uxtb	r2, r2
   16c88:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   16c8a:	f242 0318 	movw	r3, #8216	; 0x2018
   16c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c92:	f242 0218 	movw	r2, #8216	; 0x2018
   16c96:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c9a:	7812      	ldrb	r2, [r2, #0]
   16c9c:	b2d2      	uxtb	r2, r2
   16c9e:	f022 0202 	bic.w	r2, r2, #2
   16ca2:	b2d2      	uxtb	r2, r2
   16ca4:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16ca6:	2300      	movs	r3, #0
   16ca8:	71fb      	strb	r3, [r7, #7]
   16caa:	e00b      	b.n	16cc4 <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   16cac:	79fa      	ldrb	r2, [r7, #7]
   16cae:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16cb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cb6:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   16cba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16cbe:	79fb      	ldrb	r3, [r7, #7]
   16cc0:	3301      	adds	r3, #1
   16cc2:	71fb      	strb	r3, [r7, #7]
   16cc4:	79fb      	ldrb	r3, [r7, #7]
   16cc6:	2b09      	cmp	r3, #9
   16cc8:	d9f0      	bls.n	16cac <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   16cca:	f242 032a 	movw	r3, #8234	; 0x202a
   16cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cd2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   16cd6:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   16cd8:	f242 032f 	movw	r3, #8239	; 0x202f
   16cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ce0:	f242 022f 	movw	r2, #8239	; 0x202f
   16ce4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16ce8:	7812      	ldrb	r2, [r2, #0]
   16cea:	b2d2      	uxtb	r2, r2
   16cec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16cf0:	b2d2      	uxtb	r2, r2
   16cf2:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   16cf4:	f242 0336 	movw	r3, #8246	; 0x2036
   16cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cfc:	2210      	movs	r2, #16
   16cfe:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16d00:	f242 0312 	movw	r3, #8210	; 0x2012
   16d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d08:	f242 0212 	movw	r2, #8210	; 0x2012
   16d0c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d10:	7812      	ldrb	r2, [r2, #0]
   16d12:	b2d2      	uxtb	r2, r2
   16d14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16d18:	b2d2      	uxtb	r2, r2
   16d1a:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   16d1c:	f242 0337 	movw	r3, #8247	; 0x2037
   16d20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d24:	f242 0237 	movw	r2, #8247	; 0x2037
   16d28:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d2c:	7812      	ldrb	r2, [r2, #0]
   16d2e:	b2d2      	uxtb	r2, r2
   16d30:	f042 0210 	orr.w	r2, r2, #16
   16d34:	b2d2      	uxtb	r2, r2
   16d36:	701a      	strb	r2, [r3, #0]
}
   16d38:	370c      	adds	r7, #12
   16d3a:	46bd      	mov	sp, r7
   16d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16d40:	4770      	bx	lr
   16d42:	bf00      	nop

00016d44 <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   16d44:	b480      	push	{r7}
   16d46:	b083      	sub	sp, #12
   16d48:	af00      	add	r7, sp, #0
   16d4a:	4602      	mov	r2, r0
   16d4c:	460b      	mov	r3, r1
   16d4e:	71fa      	strb	r2, [r7, #7]
   16d50:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   16d52:	79f9      	ldrb	r1, [r7, #7]
   16d54:	88bb      	ldrh	r3, [r7, #4]
   16d56:	011b      	lsls	r3, r3, #4
   16d58:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16d5c:	d308      	bcc.n	16d70 <servo_set_one+0x2c>
   16d5e:	88bb      	ldrh	r3, [r7, #4]
   16d60:	011b      	lsls	r3, r3, #4
   16d62:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16d66:	bf28      	it	cs
   16d68:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16d6c:	b29a      	uxth	r2, r3
   16d6e:	e001      	b.n	16d74 <servo_set_one+0x30>
   16d70:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16d74:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d7c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   16d80:	370c      	adds	r7, #12
   16d82:	46bd      	mov	sp, r7
   16d84:	f85d 7b04 	ldr.w	r7, [sp], #4
   16d88:	4770      	bx	lr
   16d8a:	bf00      	nop

00016d8c <servo_transmit>:

void 
servo_transmit(void) {
   16d8c:	b580      	push	{r7, lr}
   16d8e:	b082      	sub	sp, #8
   16d90:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   16d92:	2000      	movs	r0, #0
   16d94:	f000 f9e6 	bl	17164 <uart_transmit>
   16d98:	2000      	movs	r0, #0
   16d9a:	f000 f9e3 	bl	17164 <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16d9e:	2300      	movs	r3, #0
   16da0:	71fb      	strb	r3, [r7, #7]
   16da2:	e01a      	b.n	16dda <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   16da4:	79fa      	ldrb	r2, [r7, #7]
   16da6:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16dae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16db2:	0a1b      	lsrs	r3, r3, #8
   16db4:	b29b      	uxth	r3, r3
   16db6:	b2db      	uxtb	r3, r3
   16db8:	4618      	mov	r0, r3
   16dba:	f000 f9d3 	bl	17164 <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   16dbe:	79fa      	ldrb	r2, [r7, #7]
   16dc0:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16dc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16dc8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16dcc:	b2db      	uxtb	r3, r3
   16dce:	4618      	mov	r0, r3
   16dd0:	f000 f9c8 	bl	17164 <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16dd4:	79fb      	ldrb	r3, [r7, #7]
   16dd6:	3301      	adds	r3, #1
   16dd8:	71fb      	strb	r3, [r7, #7]
   16dda:	79fb      	ldrb	r3, [r7, #7]
   16ddc:	2b09      	cmp	r3, #9
   16dde:	d9e1      	bls.n	16da4 <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   16de0:	200a      	movs	r0, #10
   16de2:	f000 f9bf 	bl	17164 <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   16de6:	3708      	adds	r7, #8
   16de8:	46bd      	mov	sp, r7
   16dea:	bd80      	pop	{r7, pc}

00016dec <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   16dec:	b5b0      	push	{r4, r5, r7, lr}
   16dee:	b084      	sub	sp, #16
   16df0:	af00      	add	r7, sp, #0
   16df2:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   16df4:	687b      	ldr	r3, [r7, #4]
   16df6:	330a      	adds	r3, #10
   16df8:	881b      	ldrh	r3, [r3, #0]
   16dfa:	b21b      	sxth	r3, r3
   16dfc:	005b      	lsls	r3, r3, #1
   16dfe:	4618      	mov	r0, r3
   16e00:	f000 feaa 	bl	17b58 <__aeabi_i2d>
   16e04:	4602      	mov	r2, r0
   16e06:	460b      	mov	r3, r1
   16e08:	4610      	mov	r0, r2
   16e0a:	4619      	mov	r1, r3
   16e0c:	a3a6      	add	r3, pc, #664	; (adr r3, 170a8 <servo_set+0x2bc>)
   16e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   16e12:	f000 ff07 	bl	17c24 <__aeabi_dmul>
   16e16:	4602      	mov	r2, r0
   16e18:	460b      	mov	r3, r1
   16e1a:	4610      	mov	r0, r2
   16e1c:	4619      	mov	r1, r3
   16e1e:	f001 f99b 	bl	18158 <__aeabi_d2iz>
   16e22:	4603      	mov	r3, r0
   16e24:	b29b      	uxth	r3, r3
   16e26:	b29b      	uxth	r3, r3
   16e28:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16e2c:	81fb      	strh	r3, [r7, #14]
   16e2e:	89fb      	ldrh	r3, [r7, #14]
   16e30:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16e34:	d307      	bcc.n	16e46 <servo_set+0x5a>
   16e36:	89fb      	ldrh	r3, [r7, #14]
   16e38:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16e3c:	bf28      	it	cs
   16e3e:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16e42:	b29a      	uxth	r2, r3
   16e44:	e001      	b.n	16e4a <servo_set+0x5e>
   16e46:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16e4a:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16e4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e52:	80da      	strh	r2, [r3, #6]
   16e54:	687b      	ldr	r3, [r7, #4]
   16e56:	881b      	ldrh	r3, [r3, #0]
   16e58:	b21b      	sxth	r3, r3
   16e5a:	005b      	lsls	r3, r3, #1
   16e5c:	4618      	mov	r0, r3
   16e5e:	f000 fe7b 	bl	17b58 <__aeabi_i2d>
   16e62:	4602      	mov	r2, r0
   16e64:	460b      	mov	r3, r1
   16e66:	4610      	mov	r0, r2
   16e68:	4619      	mov	r1, r3
   16e6a:	a38f      	add	r3, pc, #572	; (adr r3, 170a8 <servo_set+0x2bc>)
   16e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16e70:	f000 fed8 	bl	17c24 <__aeabi_dmul>
   16e74:	4602      	mov	r2, r0
   16e76:	460b      	mov	r3, r1
   16e78:	4610      	mov	r0, r2
   16e7a:	4619      	mov	r1, r3
   16e7c:	f001 f96c 	bl	18158 <__aeabi_d2iz>
   16e80:	4603      	mov	r3, r0
   16e82:	b29b      	uxth	r3, r3
   16e84:	b29b      	uxth	r3, r3
   16e86:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16e8a:	81fb      	strh	r3, [r7, #14]
   16e8c:	89fb      	ldrh	r3, [r7, #14]
   16e8e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16e92:	d307      	bcc.n	16ea4 <servo_set+0xb8>
   16e94:	89fb      	ldrh	r3, [r7, #14]
   16e96:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16e9a:	bf28      	it	cs
   16e9c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16ea0:	b29a      	uxth	r2, r3
   16ea2:	e001      	b.n	16ea8 <servo_set+0xbc>
   16ea4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16ea8:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16eb0:	825a      	strh	r2, [r3, #18]
   16eb2:	687b      	ldr	r3, [r7, #4]
   16eb4:	3304      	adds	r3, #4
   16eb6:	881b      	ldrh	r3, [r3, #0]
   16eb8:	b21b      	sxth	r3, r3
   16eba:	4618      	mov	r0, r3
   16ebc:	f000 fe4c 	bl	17b58 <__aeabi_i2d>
   16ec0:	4602      	mov	r2, r0
   16ec2:	460b      	mov	r3, r1
   16ec4:	4610      	mov	r0, r2
   16ec6:	4619      	mov	r1, r3
   16ec8:	a379      	add	r3, pc, #484	; (adr r3, 170b0 <servo_set+0x2c4>)
   16eca:	e9d3 2300 	ldrd	r2, r3, [r3]
   16ece:	f000 fea9 	bl	17c24 <__aeabi_dmul>
   16ed2:	4602      	mov	r2, r0
   16ed4:	460b      	mov	r3, r1
   16ed6:	4610      	mov	r0, r2
   16ed8:	4619      	mov	r1, r3
   16eda:	f001 f93d 	bl	18158 <__aeabi_d2iz>
   16ede:	4603      	mov	r3, r0
   16ee0:	b29b      	uxth	r3, r3
   16ee2:	b29b      	uxth	r3, r3
   16ee4:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   16ee8:	3320      	adds	r3, #32
   16eea:	81fb      	strh	r3, [r7, #14]
   16eec:	89fb      	ldrh	r3, [r7, #14]
   16eee:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16ef2:	d307      	bcc.n	16f04 <servo_set+0x118>
   16ef4:	89fb      	ldrh	r3, [r7, #14]
   16ef6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16efa:	bf28      	it	cs
   16efc:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16f00:	b29a      	uxth	r2, r3
   16f02:	e001      	b.n	16f08 <servo_set+0x11c>
   16f04:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16f08:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f10:	819a      	strh	r2, [r3, #12]
   16f12:	687b      	ldr	r3, [r7, #4]
   16f14:	885b      	ldrh	r3, [r3, #2]
   16f16:	81bb      	strh	r3, [r7, #12]
   16f18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16f1c:	2b00      	cmp	r3, #0
   16f1e:	dd06      	ble.n	16f2e <servo_set+0x142>
   16f20:	f04f 0400 	mov.w	r4, #0
   16f24:	f04f 0500 	mov.w	r5, #0
   16f28:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16f2c:	e002      	b.n	16f34 <servo_set+0x148>
   16f2e:	a562      	add	r5, pc, #392	; (adr r5, 170b8 <servo_set+0x2cc>)
   16f30:	e9d5 4500 	ldrd	r4, r5, [r5]
   16f34:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16f38:	4618      	mov	r0, r3
   16f3a:	f000 fe0d 	bl	17b58 <__aeabi_i2d>
   16f3e:	4602      	mov	r2, r0
   16f40:	460b      	mov	r3, r1
   16f42:	4620      	mov	r0, r4
   16f44:	4629      	mov	r1, r5
   16f46:	f000 fe6d 	bl	17c24 <__aeabi_dmul>
   16f4a:	4602      	mov	r2, r0
   16f4c:	460b      	mov	r3, r1
   16f4e:	4610      	mov	r0, r2
   16f50:	4619      	mov	r1, r3
   16f52:	a35b      	add	r3, pc, #364	; (adr r3, 170c0 <servo_set+0x2d4>)
   16f54:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f58:	f000 fe64 	bl	17c24 <__aeabi_dmul>
   16f5c:	4602      	mov	r2, r0
   16f5e:	460b      	mov	r3, r1
   16f60:	4610      	mov	r0, r2
   16f62:	4619      	mov	r1, r3
   16f64:	f001 f8f8 	bl	18158 <__aeabi_d2iz>
   16f68:	4603      	mov	r3, r0
   16f6a:	b29b      	uxth	r3, r3
   16f6c:	b29b      	uxth	r3, r3
   16f6e:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   16f72:	81fb      	strh	r3, [r7, #14]
   16f74:	89fb      	ldrh	r3, [r7, #14]
   16f76:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16f7a:	d307      	bcc.n	16f8c <servo_set+0x1a0>
   16f7c:	89fb      	ldrh	r3, [r7, #14]
   16f7e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16f82:	bf28      	it	cs
   16f84:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16f88:	b29a      	uxth	r2, r3
   16f8a:	e001      	b.n	16f90 <servo_set+0x1a4>
   16f8c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16f90:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f98:	801a      	strh	r2, [r3, #0]
   16f9a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16f9e:	2b00      	cmp	r3, #0
   16fa0:	dd03      	ble.n	16faa <servo_set+0x1be>
   16fa2:	a545      	add	r5, pc, #276	; (adr r5, 170b8 <servo_set+0x2cc>)
   16fa4:	e9d5 4500 	ldrd	r4, r5, [r5]
   16fa8:	e005      	b.n	16fb6 <servo_set+0x1ca>
   16faa:	f04f 0400 	mov.w	r4, #0
   16fae:	f04f 0500 	mov.w	r5, #0
   16fb2:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16fb6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16fba:	4618      	mov	r0, r3
   16fbc:	f000 fdcc 	bl	17b58 <__aeabi_i2d>
   16fc0:	4602      	mov	r2, r0
   16fc2:	460b      	mov	r3, r1
   16fc4:	4620      	mov	r0, r4
   16fc6:	4629      	mov	r1, r5
   16fc8:	f000 fe2c 	bl	17c24 <__aeabi_dmul>
   16fcc:	4602      	mov	r2, r0
   16fce:	460b      	mov	r3, r1
   16fd0:	4610      	mov	r0, r2
   16fd2:	4619      	mov	r1, r3
   16fd4:	a33c      	add	r3, pc, #240	; (adr r3, 170c8 <servo_set+0x2dc>)
   16fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   16fda:	f000 fe23 	bl	17c24 <__aeabi_dmul>
   16fde:	4602      	mov	r2, r0
   16fe0:	460b      	mov	r3, r1
   16fe2:	4610      	mov	r0, r2
   16fe4:	4619      	mov	r1, r3
   16fe6:	f001 f8b7 	bl	18158 <__aeabi_d2iz>
   16fea:	4603      	mov	r3, r0
   16fec:	b29b      	uxth	r3, r3
   16fee:	b29b      	uxth	r3, r3
   16ff0:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   16ff4:	3320      	adds	r3, #32
   16ff6:	81fb      	strh	r3, [r7, #14]
   16ff8:	89fb      	ldrh	r3, [r7, #14]
   16ffa:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16ffe:	d307      	bcc.n	17010 <servo_set+0x224>
   17000:	89fb      	ldrh	r3, [r7, #14]
   17002:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   17006:	bf28      	it	cs
   17008:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   1700c:	b29a      	uxth	r2, r3
   1700e:	e001      	b.n	17014 <servo_set+0x228>
   17010:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   17014:	f64c 43ac 	movw	r3, #52396	; 0xccac
   17018:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1701c:	809a      	strh	r2, [r3, #4]
   1701e:	687b      	ldr	r3, [r7, #4]
   17020:	3306      	adds	r3, #6
   17022:	881b      	ldrh	r3, [r3, #0]
   17024:	b21b      	sxth	r3, r3
   17026:	4618      	mov	r0, r3
   17028:	f000 fd96 	bl	17b58 <__aeabi_i2d>
   1702c:	4604      	mov	r4, r0
   1702e:	460d      	mov	r5, r1
   17030:	687b      	ldr	r3, [r7, #4]
   17032:	3302      	adds	r3, #2
   17034:	881b      	ldrh	r3, [r3, #0]
   17036:	b21b      	sxth	r3, r3
   17038:	4618      	mov	r0, r3
   1703a:	f000 fd8d 	bl	17b58 <__aeabi_i2d>
   1703e:	4602      	mov	r2, r0
   17040:	460b      	mov	r3, r1
   17042:	4620      	mov	r0, r4
   17044:	4629      	mov	r1, r5
   17046:	f000 fc3b 	bl	178c0 <__adddf3>
   1704a:	4602      	mov	r2, r0
   1704c:	460b      	mov	r3, r1
   1704e:	4610      	mov	r0, r2
   17050:	4619      	mov	r1, r3
   17052:	a31f      	add	r3, pc, #124	; (adr r3, 170d0 <servo_set+0x2e4>)
   17054:	e9d3 2300 	ldrd	r2, r3, [r3]
   17058:	f000 fde4 	bl	17c24 <__aeabi_dmul>
   1705c:	4602      	mov	r2, r0
   1705e:	460b      	mov	r3, r1
   17060:	4610      	mov	r0, r2
   17062:	4619      	mov	r1, r3
   17064:	f001 f878 	bl	18158 <__aeabi_d2iz>
   17068:	4603      	mov	r3, r0
   1706a:	b29b      	uxth	r3, r3
   1706c:	b29b      	uxth	r3, r3
   1706e:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   17072:	3320      	adds	r3, #32
   17074:	81fb      	strh	r3, [r7, #14]
   17076:	89fb      	ldrh	r3, [r7, #14]
   17078:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1707c:	d307      	bcc.n	1708e <servo_set+0x2a2>
   1707e:	89fb      	ldrh	r3, [r7, #14]
   17080:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   17084:	bf28      	it	cs
   17086:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   1708a:	b29a      	uxth	r2, r3
   1708c:	e001      	b.n	17092 <servo_set+0x2a6>
   1708e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   17092:	f64c 43ac 	movw	r3, #52396	; 0xccac
   17096:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1709a:	81da      	strh	r2, [r3, #14]
}
   1709c:	3710      	adds	r7, #16
   1709e:	46bd      	mov	sp, r7
   170a0:	bdb0      	pop	{r4, r5, r7, pc}
   170a2:	bf00      	nop
   170a4:	f3af 8000 	nop.w
   170a8:	aaaa9ef0 	.word	0xaaaa9ef0
   170ac:	3feaaaaa 	.word	0x3feaaaaa
   170b0:	fc96473e 	.word	0xfc96473e
   170b4:	3fdfc962 	.word	0x3fdfc962
   170b8:	51eb851f 	.word	0x51eb851f
   170bc:	3fe51eb8 	.word	0x3fe51eb8
   170c0:	9999999a 	.word	0x9999999a
   170c4:	bfe19999 	.word	0xbfe19999
   170c8:	aaaa9ef0 	.word	0xaaaa9ef0
   170cc:	bfe0aaaa 	.word	0xbfe0aaaa
   170d0:	eeeed77a 	.word	0xeeeed77a
   170d4:	bfdeeeee 	.word	0xbfdeeeee

000170d8 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   170d8:	b480      	push	{r7}
   170da:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   170dc:	f242 0320 	movw	r3, #8224	; 0x2020
   170e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170e4:	2200      	movs	r2, #0
   170e6:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   170e8:	f242 0309 	movw	r3, #8201	; 0x2009
   170ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170f0:	2219      	movs	r2, #25
   170f2:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   170f4:	f242 030b 	movw	r3, #8203	; 0x200b
   170f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170fc:	2200      	movs	r2, #0
   170fe:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   17100:	f242 030a 	movw	r3, #8202	; 0x200a
   17104:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17108:	2208      	movs	r2, #8
   1710a:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   1710c:	f242 0320 	movw	r3, #8224	; 0x2020
   17110:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17114:	2286      	movs	r2, #134	; 0x86
   17116:	701a      	strb	r2, [r3, #0]
}
   17118:	46bd      	mov	sp, r7
   1711a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1711e:	4770      	bx	lr

00017120 <uart_init_rx>:

void uart_init_rx() {
   17120:	b480      	push	{r7}
   17122:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   17124:	f242 030a 	movw	r3, #8202	; 0x200a
   17128:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1712c:	f242 020a 	movw	r2, #8202	; 0x200a
   17130:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17134:	7812      	ldrb	r2, [r2, #0]
   17136:	b2d2      	uxtb	r2, r2
   17138:	f042 0210 	orr.w	r2, r2, #16
   1713c:	b2d2      	uxtb	r2, r2
   1713e:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   17140:	f242 030a 	movw	r3, #8202	; 0x200a
   17144:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17148:	f242 020a 	movw	r2, #8202	; 0x200a
   1714c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17150:	7812      	ldrb	r2, [r2, #0]
   17152:	b2d2      	uxtb	r2, r2
   17154:	f062 027f 	orn	r2, r2, #127	; 0x7f
   17158:	b2d2      	uxtb	r2, r2
   1715a:	701a      	strb	r2, [r3, #0]
}
   1715c:	46bd      	mov	sp, r7
   1715e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17162:	4770      	bx	lr

00017164 <uart_transmit>:

void uart_transmit( unsigned char data ) {
   17164:	b480      	push	{r7}
   17166:	b083      	sub	sp, #12
   17168:	af00      	add	r7, sp, #0
   1716a:	4603      	mov	r3, r0
   1716c:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   1716e:	f242 030a 	movw	r3, #8202	; 0x200a
   17172:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17176:	781b      	ldrb	r3, [r3, #0]
   17178:	b2db      	uxtb	r3, r3
   1717a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1717e:	2b00      	cmp	r3, #0
   17180:	d028      	beq.n	171d4 <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   17182:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   17186:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1718a:	781b      	ldrb	r3, [r3, #0]
   1718c:	b2db      	uxtb	r3, r3
   1718e:	461a      	mov	r2, r3
   17190:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   17194:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17198:	781b      	ldrb	r3, [r3, #0]
   1719a:	3301      	adds	r3, #1
   1719c:	429a      	cmp	r2, r3
   1719e:	d100      	bne.n	171a2 <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   171a0:	e02c      	b.n	171fc <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   171a2:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   171a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   171aa:	781b      	ldrb	r3, [r3, #0]
   171ac:	461a      	mov	r2, r3
   171ae:	f64c 43c4 	movw	r3, #52420	; 0xccc4
   171b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   171b6:	79f9      	ldrb	r1, [r7, #7]
   171b8:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   171ba:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   171be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   171c2:	781b      	ldrb	r3, [r3, #0]
   171c4:	3301      	adds	r3, #1
   171c6:	b2da      	uxtb	r2, r3
   171c8:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   171cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   171d0:	701a      	strb	r2, [r3, #0]
   171d2:	e013      	b.n	171fc <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   171d4:	f242 030c 	movw	r3, #8204	; 0x200c
   171d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   171dc:	79fa      	ldrb	r2, [r7, #7]
   171de:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   171e0:	f242 030a 	movw	r3, #8202	; 0x200a
   171e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   171e8:	f242 020a 	movw	r2, #8202	; 0x200a
   171ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
   171f0:	7812      	ldrb	r2, [r2, #0]
   171f2:	b2d2      	uxtb	r2, r2
   171f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   171f8:	b2d2      	uxtb	r2, r2
   171fa:	701a      	strb	r2, [r3, #0]
  }
}
   171fc:	370c      	adds	r7, #12
   171fe:	46bd      	mov	sp, r7
   17200:	f85d 7b04 	ldr.w	r7, [sp], #4
   17204:	4770      	bx	lr
   17206:	bf00      	nop

00017208 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   17208:	b590      	push	{r4, r7, lr}
   1720a:	b089      	sub	sp, #36	; 0x24
   1720c:	af00      	add	r7, sp, #0
   1720e:	4603      	mov	r3, r0
   17210:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   17212:	f648 3314 	movw	r3, #35604	; 0x8b14
   17216:	f2c0 0301 	movt	r3, #1
   1721a:	f107 040c 	add.w	r4, r7, #12
   1721e:	6818      	ldr	r0, [r3, #0]
   17220:	6859      	ldr	r1, [r3, #4]
   17222:	689a      	ldr	r2, [r3, #8]
   17224:	68db      	ldr	r3, [r3, #12]
   17226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   17228:	79fb      	ldrb	r3, [r7, #7]
   1722a:	091b      	lsrs	r3, r3, #4
   1722c:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   1722e:	79fb      	ldrb	r3, [r7, #7]
   17230:	f003 030f 	and.w	r3, r3, #15
   17234:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   17236:	230f      	movs	r3, #15
   17238:	77fb      	strb	r3, [r7, #31]
        low = 15;
   1723a:	230f      	movs	r3, #15
   1723c:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   1723e:	7ffb      	ldrb	r3, [r7, #31]
   17240:	f107 0220 	add.w	r2, r7, #32
   17244:	4413      	add	r3, r2
   17246:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1724a:	4618      	mov	r0, r3
   1724c:	f7ff ff8a 	bl	17164 <uart_transmit>
  uart_transmit(hex[low]);
   17250:	7fbb      	ldrb	r3, [r7, #30]
   17252:	f107 0220 	add.w	r2, r7, #32
   17256:	4413      	add	r3, r2
   17258:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1725c:	4618      	mov	r0, r3
   1725e:	f7ff ff81 	bl	17164 <uart_transmit>
} 
   17262:	3724      	adds	r7, #36	; 0x24
   17264:	46bd      	mov	sp, r7
   17266:	bd90      	pop	{r4, r7, pc}

00017268 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   17268:	b580      	push	{r7, lr}
   1726a:	b084      	sub	sp, #16
   1726c:	af00      	add	r7, sp, #0
   1726e:	4603      	mov	r3, r0
   17270:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   17272:	88fb      	ldrh	r3, [r7, #6]
   17274:	0a1b      	lsrs	r3, r3, #8
   17276:	b29b      	uxth	r3, r3
   17278:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   1727a:	88fb      	ldrh	r3, [r7, #6]
   1727c:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   1727e:	7bfb      	ldrb	r3, [r7, #15]
   17280:	4618      	mov	r0, r3
   17282:	f7ff ffc1 	bl	17208 <uart_print_hex>
  uart_print_hex(low);
   17286:	7bbb      	ldrb	r3, [r7, #14]
   17288:	4618      	mov	r0, r3
   1728a:	f7ff ffbd 	bl	17208 <uart_print_hex>
}
   1728e:	3710      	adds	r7, #16
   17290:	46bd      	mov	sp, r7
   17292:	bd80      	pop	{r7, pc}

00017294 <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   17294:	b580      	push	{r7, lr}
   17296:	b084      	sub	sp, #16
   17298:	af00      	add	r7, sp, #0
   1729a:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   1729c:	2300      	movs	r3, #0
   1729e:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   172a0:	e009      	b.n	172b6 <uart_print_string+0x22>
    uart_transmit(s[i]);
   172a2:	7bfb      	ldrb	r3, [r7, #15]
   172a4:	687a      	ldr	r2, [r7, #4]
   172a6:	4413      	add	r3, r2
   172a8:	781b      	ldrb	r3, [r3, #0]
   172aa:	4618      	mov	r0, r3
   172ac:	f7ff ff5a 	bl	17164 <uart_transmit>
    i++;
   172b0:	7bfb      	ldrb	r3, [r7, #15]
   172b2:	3301      	adds	r3, #1
   172b4:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   172b6:	7bfb      	ldrb	r3, [r7, #15]
   172b8:	687a      	ldr	r2, [r7, #4]
   172ba:	4413      	add	r3, r2
   172bc:	781b      	ldrb	r3, [r3, #0]
   172be:	2b00      	cmp	r3, #0
   172c0:	d1ef      	bne.n	172a2 <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   172c2:	3710      	adds	r7, #16
   172c4:	46bd      	mov	sp, r7
   172c6:	bd80      	pop	{r7, pc}

000172c8 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   172c8:	b480      	push	{r7}
   172ca:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   172cc:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   172d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   172d4:	781a      	ldrb	r2, [r3, #0]
   172d6:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   172da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   172de:	781b      	ldrb	r3, [r3, #0]
   172e0:	b2db      	uxtb	r3, r3
   172e2:	429a      	cmp	r2, r3
   172e4:	d10e      	bne.n	17304 <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   172e6:	f242 030a 	movw	r3, #8202	; 0x200a
   172ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   172ee:	f242 020a 	movw	r2, #8202	; 0x200a
   172f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   172f6:	7812      	ldrb	r2, [r2, #0]
   172f8:	b2d2      	uxtb	r2, r2
   172fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   172fe:	b2d2      	uxtb	r2, r2
   17300:	701a      	strb	r2, [r3, #0]
   17302:	e01d      	b.n	17340 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   17304:	f242 030c 	movw	r3, #8204	; 0x200c
   17308:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1730c:	f64c 42c1 	movw	r2, #52417	; 0xccc1
   17310:	f2c2 0204 	movt	r2, #8196	; 0x2004
   17314:	7812      	ldrb	r2, [r2, #0]
   17316:	b2d2      	uxtb	r2, r2
   17318:	4611      	mov	r1, r2
   1731a:	f64c 42c4 	movw	r2, #52420	; 0xccc4
   1731e:	f2c2 0204 	movt	r2, #8196	; 0x2004
   17322:	5c52      	ldrb	r2, [r2, r1]
   17324:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   17326:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   1732a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1732e:	781b      	ldrb	r3, [r3, #0]
   17330:	b2db      	uxtb	r3, r3
   17332:	3301      	adds	r3, #1
   17334:	b2da      	uxtb	r2, r3
   17336:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   1733a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1733e:	701a      	strb	r2, [r3, #0]
  }
}
   17340:	46bd      	mov	sp, r7
   17342:	f85d 7b04 	ldr.w	r7, [sp], #4
   17346:	4770      	bx	lr

00017348 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   17348:	b580      	push	{r7, lr}
   1734a:	b082      	sub	sp, #8
   1734c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   1734e:	2010      	movs	r0, #16
   17350:	2101      	movs	r1, #1
   17352:	f7e9 fd35 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   17356:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1735a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1735e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   17362:	2201      	movs	r2, #1
   17364:	f7ea f83c 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   17368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1736c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   1736e:	2310      	movs	r3, #16
   17370:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17372:	2303      	movs	r3, #3
   17374:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   17376:	1d3b      	adds	r3, r7, #4
   17378:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1737c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17380:	4619      	mov	r1, r3
   17382:	f7e9 fef1 	bl	1168 <GPIO_Init>
}
   17386:	3708      	adds	r7, #8
   17388:	46bd      	mov	sp, r7
   1738a:	bd80      	pop	{r7, pc}

0001738c <init_button>:

void init_button(void)
{
   1738c:	b580      	push	{r7, lr}
   1738e:	b082      	sub	sp, #8
   17390:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   17392:	2004      	movs	r0, #4
   17394:	2101      	movs	r1, #1
   17396:	f7e9 fd13 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   1739a:	2301      	movs	r3, #1
   1739c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   1739e:	2304      	movs	r3, #4
   173a0:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   173a2:	2303      	movs	r3, #3
   173a4:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   173a6:	1d3b      	adds	r3, r7, #4
   173a8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   173ac:	f2c4 0001 	movt	r0, #16385	; 0x4001
   173b0:	4619      	mov	r1, r3
   173b2:	f7e9 fed9 	bl	1168 <GPIO_Init>
}
   173b6:	3708      	adds	r7, #8
   173b8:	46bd      	mov	sp, r7
   173ba:	bd80      	pop	{r7, pc}

000173bc <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   173bc:	b580      	push	{r7, lr}
   173be:	b084      	sub	sp, #16
   173c0:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   173c2:	2001      	movs	r0, #1
   173c4:	2101      	movs	r1, #1
   173c6:	f7e9 fcfb 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   173ca:	2000      	movs	r0, #0
   173cc:	2100      	movs	r1, #0
   173ce:	f7ea f8ff 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   173d2:	2301      	movs	r3, #1
   173d4:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   173d6:	2300      	movs	r3, #0
   173d8:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   173da:	2308      	movs	r3, #8
   173dc:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   173de:	2301      	movs	r3, #1
   173e0:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   173e2:	f107 0308 	add.w	r3, r7, #8
   173e6:	4618      	mov	r0, r3
   173e8:	f7ea fdf8 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   173ec:	2306      	movs	r3, #6
   173ee:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   173f0:	230f      	movs	r3, #15
   173f2:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   173f4:	230f      	movs	r3, #15
   173f6:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   173f8:	2301      	movs	r3, #1
   173fa:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   173fc:	1d3b      	adds	r3, r7, #4
   173fe:	4618      	mov	r0, r3
   17400:	f7ea ff26 	bl	2250 <NVIC_Init>
}
   17404:	3710      	adds	r7, #16
   17406:	46bd      	mov	sp, r7
   17408:	bd80      	pop	{r7, pc}
   1740a:	bf00      	nop

0001740c <init_rs232>:

void init_rs232(void)
{
   1740c:	b580      	push	{r7, lr}
   1740e:	b086      	sub	sp, #24
   17410:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   17412:	2005      	movs	r0, #5
   17414:	2101      	movs	r1, #1
   17416:	f7e9 fcd3 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   1741a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   1741e:	2101      	movs	r1, #1
   17420:	f7e9 fcf6 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   17424:	2308      	movs	r3, #8
   17426:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   17428:	2304      	movs	r3, #4
   1742a:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   1742c:	1d3b      	adds	r3, r7, #4
   1742e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   17432:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17436:	4619      	mov	r1, r3
   17438:	f7e9 fe96 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   1743c:	2304      	movs	r3, #4
   1743e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17440:	2303      	movs	r3, #3
   17442:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   17444:	2318      	movs	r3, #24
   17446:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   17448:	1d3b      	adds	r3, r7, #4
   1744a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1744e:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17452:	4619      	mov	r1, r3
   17454:	f7e9 fe88 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   17458:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1745c:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   1745e:	2300      	movs	r3, #0
   17460:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   17462:	2300      	movs	r3, #0
   17464:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   17466:	2300      	movs	r3, #0
   17468:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   1746a:	2300      	movs	r3, #0
   1746c:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   1746e:	230c      	movs	r3, #12
   17470:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   17472:	f107 0308 	add.w	r3, r7, #8
   17476:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1747a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1747e:	4619      	mov	r1, r3
   17480:	f7ea f95a 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   17484:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17488:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1748c:	2101      	movs	r1, #1
   1748e:	f7ea fa71 	bl	1974 <USART_Cmd>
}
   17492:	3718      	adds	r7, #24
   17494:	46bd      	mov	sp, r7
   17496:	bd80      	pop	{r7, pc}

00017498 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   17498:	b580      	push	{r7, lr}
   1749a:	b082      	sub	sp, #8
   1749c:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   1749e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   174a2:	f2c4 0000 	movt	r0, #16384	; 0x4000
   174a6:	f240 7127 	movw	r1, #1831	; 0x727
   174aa:	2200      	movs	r2, #0
   174ac:	f7ea fa82 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   174b0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   174b4:	f2c4 0000 	movt	r0, #16384	; 0x4000
   174b8:	f240 5125 	movw	r1, #1317	; 0x525
   174bc:	2201      	movs	r2, #1
   174be:	f7ea fa79 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   174c2:	2326      	movs	r3, #38	; 0x26
   174c4:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   174c6:	2300      	movs	r3, #0
   174c8:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   174ca:	2301      	movs	r3, #1
   174cc:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   174ce:	1d3b      	adds	r3, r7, #4
   174d0:	4618      	mov	r0, r3
   174d2:	f7ea febd 	bl	2250 <NVIC_Init>
}
   174d6:	3708      	adds	r7, #8
   174d8:	46bd      	mov	sp, r7
   174da:	bd80      	pop	{r7, pc}

000174dc <enable_rs232>:

void enable_rs232(void)
{
   174dc:	b580      	push	{r7, lr}
   174de:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   174e0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   174e4:	f2c4 0000 	movt	r0, #16384	; 0x4000
   174e8:	2101      	movs	r1, #1
   174ea:	f7ea fa43 	bl	1974 <USART_Cmd>
}
   174ee:	bd80      	pop	{r7, pc}

000174f0 <send_byte>:

void send_byte(uint8_t b)
{
   174f0:	b580      	push	{r7, lr}
   174f2:	b082      	sub	sp, #8
   174f4:	af00      	add	r7, sp, #0
   174f6:	4603      	mov	r3, r0
   174f8:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   174fa:	bf00      	nop
   174fc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17500:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17504:	2180      	movs	r1, #128	; 0x80
   17506:	f7ea fca1 	bl	1e4c <USART_GetFlagStatus>
   1750a:	4603      	mov	r3, r0
   1750c:	2b00      	cmp	r3, #0
   1750e:	d0f5      	beq.n	174fc <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   17510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   17514:	f2c4 0301 	movt	r3, #16385	; 0x4001
   17518:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1751c:	f2c4 0201 	movt	r2, #16385	; 0x4001
   17520:	68d2      	ldr	r2, [r2, #12]
   17522:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   17526:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   17528:	79fb      	ldrb	r3, [r7, #7]
   1752a:	b29b      	uxth	r3, r3
   1752c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17530:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17534:	4619      	mov	r1, r3
   17536:	f7ea fb3d 	bl	1bb4 <USART_SendData>
}
   1753a:	3708      	adds	r7, #8
   1753c:	46bd      	mov	sp, r7
   1753e:	bd80      	pop	{r7, pc}

00017540 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   17540:	b580      	push	{r7, lr}
   17542:	b082      	sub	sp, #8
   17544:	af00      	add	r7, sp, #0
   17546:	4603      	mov	r3, r0
   17548:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   1754a:	79fb      	ldrb	r3, [r7, #7]
   1754c:	3330      	adds	r3, #48	; 0x30
   1754e:	b2db      	uxtb	r3, r3
   17550:	4618      	mov	r0, r3
   17552:	f7ff ffcd 	bl	174f0 <send_byte>
}
   17556:	3708      	adds	r7, #8
   17558:	46bd      	mov	sp, r7
   1755a:	bd80      	pop	{r7, pc}

0001755c <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   1755c:	b580      	push	{r7, lr}
   1755e:	b084      	sub	sp, #16
   17560:	af00      	add	r7, sp, #0
   17562:	6078      	str	r0, [r7, #4]
    int i = 0;
   17564:	2300      	movs	r3, #0
   17566:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   17568:	e009      	b.n	1757e <vPrintString+0x22>
    {
        send_byte(string[i]);
   1756a:	68fb      	ldr	r3, [r7, #12]
   1756c:	687a      	ldr	r2, [r7, #4]
   1756e:	4413      	add	r3, r2
   17570:	781b      	ldrb	r3, [r3, #0]
   17572:	4618      	mov	r0, r3
   17574:	f7ff ffbc 	bl	174f0 <send_byte>
        i++;
   17578:	68fb      	ldr	r3, [r7, #12]
   1757a:	3301      	adds	r3, #1
   1757c:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   1757e:	68fb      	ldr	r3, [r7, #12]
   17580:	687a      	ldr	r2, [r7, #4]
   17582:	4413      	add	r3, r2
   17584:	781b      	ldrb	r3, [r3, #0]
   17586:	2b00      	cmp	r3, #0
   17588:	d1ef      	bne.n	1756a <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   1758a:	3710      	adds	r7, #16
   1758c:	46bd      	mov	sp, r7
   1758e:	bd80      	pop	{r7, pc}

00017590 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   17590:	b580      	push	{r7, lr}
   17592:	b08a      	sub	sp, #40	; 0x28
   17594:	af00      	add	r7, sp, #0
   17596:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   17598:	2300      	movs	r3, #0
   1759a:	623b      	str	r3, [r7, #32]
    long num = c_num;
   1759c:	687b      	ldr	r3, [r7, #4]
   1759e:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   175a0:	69fb      	ldr	r3, [r7, #28]
   175a2:	2b00      	cmp	r3, #0
   175a4:	d106      	bne.n	175b4 <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   175a6:	f648 3024 	movw	r0, #35620	; 0x8b24
   175aa:	f2c0 0001 	movt	r0, #1
   175ae:	f7ff ffd5 	bl	1755c <vPrintString>
   175b2:	e062      	b.n	1767a <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   175b4:	e024      	b.n	17600 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   175b6:	69f9      	ldr	r1, [r7, #28]
   175b8:	f246 6367 	movw	r3, #26215	; 0x6667
   175bc:	f2c6 6366 	movt	r3, #26214	; 0x6666
   175c0:	fb83 2301 	smull	r2, r3, r3, r1
   175c4:	109a      	asrs	r2, r3, #2
   175c6:	17cb      	asrs	r3, r1, #31
   175c8:	1ad2      	subs	r2, r2, r3
   175ca:	4613      	mov	r3, r2
   175cc:	009b      	lsls	r3, r3, #2
   175ce:	4413      	add	r3, r2
   175d0:	005b      	lsls	r3, r3, #1
   175d2:	1aca      	subs	r2, r1, r3
   175d4:	b2d3      	uxtb	r3, r2
   175d6:	3330      	adds	r3, #48	; 0x30
   175d8:	b2da      	uxtb	r2, r3
   175da:	f107 010c 	add.w	r1, r7, #12
   175de:	6a3b      	ldr	r3, [r7, #32]
   175e0:	440b      	add	r3, r1
   175e2:	701a      	strb	r2, [r3, #0]
            count ++;
   175e4:	6a3b      	ldr	r3, [r7, #32]
   175e6:	3301      	adds	r3, #1
   175e8:	623b      	str	r3, [r7, #32]
            num /= 10;
   175ea:	69fa      	ldr	r2, [r7, #28]
   175ec:	f246 6367 	movw	r3, #26215	; 0x6667
   175f0:	f2c6 6366 	movt	r3, #26214	; 0x6666
   175f4:	fb83 1302 	smull	r1, r3, r3, r2
   175f8:	1099      	asrs	r1, r3, #2
   175fa:	17d3      	asrs	r3, r2, #31
   175fc:	1acb      	subs	r3, r1, r3
   175fe:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   17600:	69fb      	ldr	r3, [r7, #28]
   17602:	2b00      	cmp	r3, #0
   17604:	d1d7      	bne.n	175b6 <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   17606:	f107 020c 	add.w	r2, r7, #12
   1760a:	6a3b      	ldr	r3, [r7, #32]
   1760c:	4413      	add	r3, r2
   1760e:	2200      	movs	r2, #0
   17610:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   17612:	2300      	movs	r3, #0
   17614:	627b      	str	r3, [r7, #36]	; 0x24
   17616:	e020      	b.n	1765a <vPrintNumber+0xca>
        {
            tmp = time[i];
   17618:	f107 020c 	add.w	r2, r7, #12
   1761c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1761e:	4413      	add	r3, r2
   17620:	781b      	ldrb	r3, [r3, #0]
   17622:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   17624:	6a3a      	ldr	r2, [r7, #32]
   17626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17628:	1ad3      	subs	r3, r2, r3
   1762a:	3b01      	subs	r3, #1
   1762c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   17630:	4413      	add	r3, r2
   17632:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   17636:	f107 010c 	add.w	r1, r7, #12
   1763a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1763c:	440b      	add	r3, r1
   1763e:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   17640:	6a3a      	ldr	r2, [r7, #32]
   17642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17644:	1ad3      	subs	r3, r2, r3
   17646:	3b01      	subs	r3, #1
   17648:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1764c:	440b      	add	r3, r1
   1764e:	7efa      	ldrb	r2, [r7, #27]
   17650:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   17654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17656:	3301      	adds	r3, #1
   17658:	627b      	str	r3, [r7, #36]	; 0x24
   1765a:	6a3b      	ldr	r3, [r7, #32]
   1765c:	085a      	lsrs	r2, r3, #1
   1765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17660:	429a      	cmp	r2, r3
   17662:	d8d9      	bhi.n	17618 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   17664:	f107 030c 	add.w	r3, r7, #12
   17668:	4618      	mov	r0, r3
   1766a:	f7ff ff77 	bl	1755c <vPrintString>
        vPrintString("\n\r");
   1766e:	f648 3028 	movw	r0, #35624	; 0x8b28
   17672:	f2c0 0001 	movt	r0, #1
   17676:	f7ff ff71 	bl	1755c <vPrintString>
    }
}
   1767a:	3728      	adds	r7, #40	; 0x28
   1767c:	46bd      	mov	sp, r7
   1767e:	bd80      	pop	{r7, pc}

00017680 <vStartTask>:
extern portBASE_TYPE xSensorOfTask[NUMBEROFTASK];
extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

// init program to start all task when system init
void vStartTask()
{
   17680:	b580      	push	{r7, lr}
   17682:	b084      	sub	sp, #16
   17684:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;

    for( i = 0; i < NUMBEROFTASK; ++i )
   17686:	2300      	movs	r3, #0
   17688:	60fb      	str	r3, [r7, #12]
   1768a:	e01f      	b.n	176cc <vStartTask+0x4c>
    {
        // set the deadline of task as the second deadline of task period
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i]*2, xPeriodOfTask[i], &null_data);
   1768c:	f240 0390 	movw	r3, #144	; 0x90
   17690:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17694:	68fa      	ldr	r2, [r7, #12]
   17696:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1769a:	f240 0328 	movw	r3, #40	; 0x28
   1769e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   176a2:	68fa      	ldr	r2, [r7, #12]
   176a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   176a8:	0059      	lsls	r1, r3, #1
   176aa:	f240 0328 	movw	r3, #40	; 0x28
   176ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   176b2:	68fa      	ldr	r2, [r7, #12]
   176b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   176b8:	463b      	mov	r3, r7
   176ba:	f7eb fb21 	bl	2d00 <pxEventGenericCreate>
   176be:	60b8      	str	r0, [r7, #8]
        vEventSend( pxEvent );   
   176c0:	68b8      	ldr	r0, [r7, #8]
   176c2:	f7eb fedd 	bl	3480 <vEventGenericSend>
{
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;

    for( i = 0; i < NUMBEROFTASK; ++i )
   176c6:	68fb      	ldr	r3, [r7, #12]
   176c8:	3301      	adds	r3, #1
   176ca:	60fb      	str	r3, [r7, #12]
   176cc:	68fb      	ldr	r3, [r7, #12]
   176ce:	2b0c      	cmp	r3, #12
   176d0:	dddc      	ble.n	1768c <vStartTask+0xc>
    {
        // set the deadline of task as the second deadline of task period
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i]*2, xPeriodOfTask[i], &null_data);
        vEventSend( pxEvent );   
    }
}
   176d2:	3710      	adds	r7, #16
   176d4:	46bd      	mov	sp, r7
   176d6:	bd80      	pop	{r7, pc}

000176d8 <vEventInterrupt>:

void vEventInterrupt(void * pvParameters)
{
   176d8:	b580      	push	{r7, lr}
   176da:	b082      	sub	sp, #8
   176dc:	af00      	add	r7, sp, #0
   176de:	6078      	str	r0, [r7, #4]
    vSemaphoreCreateBinary( xInterruptSemaphore );
   176e0:	2001      	movs	r0, #1
   176e2:	2100      	movs	r1, #0
   176e4:	2203      	movs	r2, #3
   176e6:	f7ec fe05 	bl	42f4 <xQueueGenericCreate>
   176ea:	4602      	mov	r2, r0
   176ec:	f64c 53d4 	movw	r3, #52692	; 0xcdd4
   176f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   176f4:	601a      	str	r2, [r3, #0]
   176f6:	f64c 53d4 	movw	r3, #52692	; 0xcdd4
   176fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   176fe:	681b      	ldr	r3, [r3, #0]
   17700:	2b00      	cmp	r3, #0
   17702:	d00a      	beq.n	1771a <vEventInterrupt+0x42>
   17704:	f64c 53d4 	movw	r3, #52692	; 0xcdd4
   17708:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1770c:	681b      	ldr	r3, [r3, #0]
   1770e:	4618      	mov	r0, r3
   17710:	2100      	movs	r1, #0
   17712:	2200      	movs	r2, #0
   17714:	2300      	movs	r3, #0
   17716:	f7ec fe7b 	bl	4410 <xQueueGenericSend>
    xSemaphoreTake(xInterruptSemaphore, portMAX_DELAY);
   1771a:	f64c 53d4 	movw	r3, #52692	; 0xcdd4
   1771e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17722:	681b      	ldr	r3, [r3, #0]
   17724:	4618      	mov	r0, r3
   17726:	2100      	movs	r1, #0
   17728:	f04f 32ff 	mov.w	r2, #4294967295
   1772c:	2300      	movs	r3, #0
   1772e:	f7ec ff35 	bl	459c <xQueueGenericReceive>
    while(1)
    {
        //xSemaphoreTake(xInterruptSemaphore, portMAX_DELAY);
        if(xIsExecutableEventArrive())
   17732:	f7eb fa09 	bl	2b48 <xIsExecutableEventArrive>
   17736:	4603      	mov	r3, r0
   17738:	2b00      	cmp	r3, #0
   1773a:	d00a      	beq.n	17752 <vEventInterrupt+0x7a>
        {
            xSemaphoreGive( xBinarySemaphore[0] );
   1773c:	f241 3354 	movw	r3, #4948	; 0x1354
   17740:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17744:	681b      	ldr	r3, [r3, #0]
   17746:	4618      	mov	r0, r3
   17748:	2100      	movs	r1, #0
   1774a:	2200      	movs	r2, #0
   1774c:	2300      	movs	r3, #0
   1774e:	f7ec fe5f 	bl	4410 <xQueueGenericSend>
        }
        taskYIELD();
   17752:	f7ee fa97 	bl	5c84 <vPortYieldFromISR>
    }
   17756:	e7ec      	b.n	17732 <vEventInterrupt+0x5a>

00017758 <main>:
}

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   17758:	b580      	push	{r7, lr}
   1775a:	b086      	sub	sp, #24
   1775c:	af04      	add	r7, sp, #16
    init_led();
   1775e:	f7ff fdf3 	bl	17348 <init_led>
    init_rs232();
   17762:	f7ff fe53 	bl	1740c <init_rs232>
    enable_rs232_interrupts();
   17766:	f7ff fe97 	bl	17498 <enable_rs232_interrupts>
    enable_rs232();
   1776a:	f7ff feb7 	bl	174dc <enable_rs232>
    vSemaphoreInitialise();
   1776e:	f7eb feef 	bl	3550 <vSemaphoreInitialise>
    vContextInit();
   17772:	f7eb ff2d 	bl	35d0 <vContextInit>
    vInitialiseEventLists();  
   17776:	f7eb f983 	bl	2a80 <vInitialiseEventLists>
    vStartTask();
   1777a:	f7ff ff81 	bl	17680 <vStartTask>
    PapabenchInit();
   1777e:	f7ec fab5 	bl	3cec <PapabenchInit>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;
   17782:	2300      	movs	r3, #0
   17784:	607b      	str	r3, [r7, #4]

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[0]);
   17786:	2302      	movs	r3, #2
   17788:	9300      	str	r3, [sp, #0]
   1778a:	f64c 53c4 	movw	r3, #52676	; 0xcdc4
   1778e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17792:	9301      	str	r3, [sp, #4]
   17794:	2300      	movs	r3, #0
   17796:	9302      	str	r3, [sp, #8]
   17798:	2300      	movs	r3, #0
   1779a:	9303      	str	r3, [sp, #12]
   1779c:	f643 4009 	movw	r0, #15369	; 0x3c09
   177a0:	f2c0 0000 	movt	r0, #0
   177a4:	f648 312c 	movw	r1, #35628	; 0x8b2c
   177a8:	f2c0 0101 	movt	r1, #1
   177ac:	2280      	movs	r2, #128	; 0x80
   177ae:	2300      	movs	r3, #0
   177b0:	f7ed f940 	bl	4a34 <xTaskGenericCreate>
    xTaskCreate( vSensor, "I-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[1]);
   177b4:	2302      	movs	r3, #2
   177b6:	9300      	str	r3, [sp, #0]
   177b8:	4b2f      	ldr	r3, [pc, #188]	; (17878 <main+0x120>)
   177ba:	9301      	str	r3, [sp, #4]
   177bc:	2300      	movs	r3, #0
   177be:	9302      	str	r3, [sp, #8]
   177c0:	2300      	movs	r3, #0
   177c2:	9303      	str	r3, [sp, #12]
   177c4:	f643 00b5 	movw	r0, #14517	; 0x38b5
   177c8:	f2c0 0000 	movt	r0, #0
   177cc:	f648 3138 	movw	r1, #35640	; 0x8b38
   177d0:	f2c0 0101 	movt	r1, #1
   177d4:	2280      	movs	r2, #128	; 0x80
   177d6:	2300      	movs	r3, #0
   177d8:	f7ed f92c 	bl	4a34 <xTaskGenericCreate>
    xTaskCreate( vServant, "C-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[2]);
   177dc:	2302      	movs	r3, #2
   177de:	9300      	str	r3, [sp, #0]
   177e0:	4b26      	ldr	r3, [pc, #152]	; (1787c <main+0x124>)
   177e2:	9301      	str	r3, [sp, #4]
   177e4:	2300      	movs	r3, #0
   177e6:	9302      	str	r3, [sp, #8]
   177e8:	2300      	movs	r3, #0
   177ea:	9303      	str	r3, [sp, #12]
   177ec:	f643 10b1 	movw	r0, #14769	; 0x39b1
   177f0:	f2c0 0000 	movt	r0, #0
   177f4:	f648 3144 	movw	r1, #35652	; 0x8b44
   177f8:	f2c0 0101 	movt	r1, #1
   177fc:	2280      	movs	r2, #128	; 0x80
   177fe:	2300      	movs	r3, #0
   17800:	f7ed f918 	bl	4a34 <xTaskGenericCreate>
    xTaskCreate( vActuator, "O-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[3]);
   17804:	2302      	movs	r3, #2
   17806:	9300      	str	r3, [sp, #0]
   17808:	4b1d      	ldr	r3, [pc, #116]	; (17880 <main+0x128>)
   1780a:	9301      	str	r3, [sp, #4]
   1780c:	2300      	movs	r3, #0
   1780e:	9302      	str	r3, [sp, #8]
   17810:	2300      	movs	r3, #0
   17812:	9303      	str	r3, [sp, #12]
   17814:	f643 3001 	movw	r0, #15105	; 0x3b01
   17818:	f2c0 0000 	movt	r0, #0
   1781c:	f648 3150 	movw	r1, #35664	; 0x8b50
   17820:	f2c0 0101 	movt	r1, #1
   17824:	2280      	movs	r2, #128	; 0x80
   17826:	2300      	movs	r3, #0
   17828:	f7ed f904 	bl	4a34 <xTaskGenericCreate>
    xTaskCreate( vEventInterrupt, "event", SERVANT_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL );
   1782c:	2301      	movs	r3, #1
   1782e:	9300      	str	r3, [sp, #0]
   17830:	2300      	movs	r3, #0
   17832:	9301      	str	r3, [sp, #4]
   17834:	2300      	movs	r3, #0
   17836:	9302      	str	r3, [sp, #8]
   17838:	2300      	movs	r3, #0
   1783a:	9303      	str	r3, [sp, #12]
   1783c:	f247 60d9 	movw	r0, #30425	; 0x76d9
   17840:	f2c0 0001 	movt	r0, #1
   17844:	f648 315c 	movw	r1, #35676	; 0x8b5c
   17848:	f2c0 0101 	movt	r1, #1
   1784c:	2280      	movs	r2, #128	; 0x80
   1784e:	2300      	movs	r3, #0
   17850:	f7ed f8f0 	bl	4a34 <xTaskGenericCreate>

    xSemaphoreGive(xBinarySemaphore[0]);
   17854:	f241 3354 	movw	r3, #4948	; 0x1354
   17858:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1785c:	681b      	ldr	r3, [r3, #0]
   1785e:	4618      	mov	r0, r3
   17860:	2100      	movs	r1, #0
   17862:	2200      	movs	r2, #0
   17864:	2300      	movs	r3, #0
   17866:	f7ec fdd3 	bl	4410 <xQueueGenericSend>
    vTaskStartScheduler();
   1786a:	f7ed fc61 	bl	5130 <vTaskStartScheduler>

    return 0;
   1786e:	2300      	movs	r3, #0
}
   17870:	4618      	mov	r0, r3
   17872:	3708      	adds	r7, #8
   17874:	46bd      	mov	sp, r7
   17876:	bd80      	pop	{r7, pc}
   17878:	2004cdc8 	.word	0x2004cdc8
   1787c:	2004cdcc 	.word	0x2004cdcc
   17880:	2004cdd0 	.word	0x2004cdd0

00017884 <myTraceCreate>:

void myTraceCreate      (){
   17884:	b480      	push	{r7}
   17886:	af00      	add	r7, sp, #0
}
   17888:	46bd      	mov	sp, r7
   1788a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1788e:	4770      	bx	lr

00017890 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   17890:	b480      	push	{r7}
   17892:	af00      	add	r7, sp, #0
}
   17894:	46bd      	mov	sp, r7
   17896:	f85d 7b04 	ldr.w	r7, [sp], #4
   1789a:	4770      	bx	lr

0001789c <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   1789c:	b480      	push	{r7}
   1789e:	af00      	add	r7, sp, #0
}
   178a0:	46bd      	mov	sp, r7
   178a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   178a6:	4770      	bx	lr

000178a8 <vApplicationTickHook>:
 /*
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   178a8:	b480      	push	{r7}
   178aa:	af00      	add	r7, sp, #0
    //xSemaphoreGive( xInterruptSemaphore );
}
   178ac:	46bd      	mov	sp, r7
   178ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   178b2:	4770      	bx	lr

000178b4 <__aeabi_drsub>:
   178b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   178b8:	e002      	b.n	178c0 <__adddf3>
   178ba:	bf00      	nop

000178bc <__aeabi_dsub>:
   178bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000178c0 <__adddf3>:
   178c0:	b530      	push	{r4, r5, lr}
   178c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   178c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   178ca:	ea94 0f05 	teq	r4, r5
   178ce:	bf08      	it	eq
   178d0:	ea90 0f02 	teqeq	r0, r2
   178d4:	bf1f      	itttt	ne
   178d6:	ea54 0c00 	orrsne.w	ip, r4, r0
   178da:	ea55 0c02 	orrsne.w	ip, r5, r2
   178de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   178e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   178e6:	f000 80e2 	beq.w	17aae <__adddf3+0x1ee>
   178ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
   178ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   178f2:	bfb8      	it	lt
   178f4:	426d      	neglt	r5, r5
   178f6:	dd0c      	ble.n	17912 <__adddf3+0x52>
   178f8:	442c      	add	r4, r5
   178fa:	ea80 0202 	eor.w	r2, r0, r2
   178fe:	ea81 0303 	eor.w	r3, r1, r3
   17902:	ea82 0000 	eor.w	r0, r2, r0
   17906:	ea83 0101 	eor.w	r1, r3, r1
   1790a:	ea80 0202 	eor.w	r2, r0, r2
   1790e:	ea81 0303 	eor.w	r3, r1, r3
   17912:	2d36      	cmp	r5, #54	; 0x36
   17914:	bf88      	it	hi
   17916:	bd30      	pophi	{r4, r5, pc}
   17918:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1791c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17920:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   17924:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   17928:	d002      	beq.n	17930 <__adddf3+0x70>
   1792a:	4240      	negs	r0, r0
   1792c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17930:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   17934:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17938:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1793c:	d002      	beq.n	17944 <__adddf3+0x84>
   1793e:	4252      	negs	r2, r2
   17940:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   17944:	ea94 0f05 	teq	r4, r5
   17948:	f000 80a7 	beq.w	17a9a <__adddf3+0x1da>
   1794c:	f1a4 0401 	sub.w	r4, r4, #1
   17950:	f1d5 0e20 	rsbs	lr, r5, #32
   17954:	db0d      	blt.n	17972 <__adddf3+0xb2>
   17956:	fa02 fc0e 	lsl.w	ip, r2, lr
   1795a:	fa22 f205 	lsr.w	r2, r2, r5
   1795e:	1880      	adds	r0, r0, r2
   17960:	f141 0100 	adc.w	r1, r1, #0
   17964:	fa03 f20e 	lsl.w	r2, r3, lr
   17968:	1880      	adds	r0, r0, r2
   1796a:	fa43 f305 	asr.w	r3, r3, r5
   1796e:	4159      	adcs	r1, r3
   17970:	e00e      	b.n	17990 <__adddf3+0xd0>
   17972:	f1a5 0520 	sub.w	r5, r5, #32
   17976:	f10e 0e20 	add.w	lr, lr, #32
   1797a:	2a01      	cmp	r2, #1
   1797c:	fa03 fc0e 	lsl.w	ip, r3, lr
   17980:	bf28      	it	cs
   17982:	f04c 0c02 	orrcs.w	ip, ip, #2
   17986:	fa43 f305 	asr.w	r3, r3, r5
   1798a:	18c0      	adds	r0, r0, r3
   1798c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   17990:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17994:	d507      	bpl.n	179a6 <__adddf3+0xe6>
   17996:	f04f 0e00 	mov.w	lr, #0
   1799a:	f1dc 0c00 	rsbs	ip, ip, #0
   1799e:	eb7e 0000 	sbcs.w	r0, lr, r0
   179a2:	eb6e 0101 	sbc.w	r1, lr, r1
   179a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   179aa:	d31b      	bcc.n	179e4 <__adddf3+0x124>
   179ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   179b0:	d30c      	bcc.n	179cc <__adddf3+0x10c>
   179b2:	0849      	lsrs	r1, r1, #1
   179b4:	ea5f 0030 	movs.w	r0, r0, rrx
   179b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   179bc:	f104 0401 	add.w	r4, r4, #1
   179c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   179c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   179c8:	f080 809a 	bcs.w	17b00 <__adddf3+0x240>
   179cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   179d0:	bf08      	it	eq
   179d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   179d6:	f150 0000 	adcs.w	r0, r0, #0
   179da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   179de:	ea41 0105 	orr.w	r1, r1, r5
   179e2:	bd30      	pop	{r4, r5, pc}
   179e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   179e8:	4140      	adcs	r0, r0
   179ea:	eb41 0101 	adc.w	r1, r1, r1
   179ee:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   179f2:	f1a4 0401 	sub.w	r4, r4, #1
   179f6:	d1e9      	bne.n	179cc <__adddf3+0x10c>
   179f8:	f091 0f00 	teq	r1, #0
   179fc:	bf04      	itt	eq
   179fe:	4601      	moveq	r1, r0
   17a00:	2000      	moveq	r0, #0
   17a02:	fab1 f381 	clz	r3, r1
   17a06:	bf08      	it	eq
   17a08:	3320      	addeq	r3, #32
   17a0a:	f1a3 030b 	sub.w	r3, r3, #11
   17a0e:	f1b3 0220 	subs.w	r2, r3, #32
   17a12:	da0c      	bge.n	17a2e <__adddf3+0x16e>
   17a14:	320c      	adds	r2, #12
   17a16:	dd08      	ble.n	17a2a <__adddf3+0x16a>
   17a18:	f102 0c14 	add.w	ip, r2, #20
   17a1c:	f1c2 020c 	rsb	r2, r2, #12
   17a20:	fa01 f00c 	lsl.w	r0, r1, ip
   17a24:	fa21 f102 	lsr.w	r1, r1, r2
   17a28:	e00c      	b.n	17a44 <__adddf3+0x184>
   17a2a:	f102 0214 	add.w	r2, r2, #20
   17a2e:	bfd8      	it	le
   17a30:	f1c2 0c20 	rsble	ip, r2, #32
   17a34:	fa01 f102 	lsl.w	r1, r1, r2
   17a38:	fa20 fc0c 	lsr.w	ip, r0, ip
   17a3c:	bfdc      	itt	le
   17a3e:	ea41 010c 	orrle.w	r1, r1, ip
   17a42:	4090      	lslle	r0, r2
   17a44:	1ae4      	subs	r4, r4, r3
   17a46:	bfa2      	ittt	ge
   17a48:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   17a4c:	4329      	orrge	r1, r5
   17a4e:	bd30      	popge	{r4, r5, pc}
   17a50:	ea6f 0404 	mvn.w	r4, r4
   17a54:	3c1f      	subs	r4, #31
   17a56:	da1c      	bge.n	17a92 <__adddf3+0x1d2>
   17a58:	340c      	adds	r4, #12
   17a5a:	dc0e      	bgt.n	17a7a <__adddf3+0x1ba>
   17a5c:	f104 0414 	add.w	r4, r4, #20
   17a60:	f1c4 0220 	rsb	r2, r4, #32
   17a64:	fa20 f004 	lsr.w	r0, r0, r4
   17a68:	fa01 f302 	lsl.w	r3, r1, r2
   17a6c:	ea40 0003 	orr.w	r0, r0, r3
   17a70:	fa21 f304 	lsr.w	r3, r1, r4
   17a74:	ea45 0103 	orr.w	r1, r5, r3
   17a78:	bd30      	pop	{r4, r5, pc}
   17a7a:	f1c4 040c 	rsb	r4, r4, #12
   17a7e:	f1c4 0220 	rsb	r2, r4, #32
   17a82:	fa20 f002 	lsr.w	r0, r0, r2
   17a86:	fa01 f304 	lsl.w	r3, r1, r4
   17a8a:	ea40 0003 	orr.w	r0, r0, r3
   17a8e:	4629      	mov	r1, r5
   17a90:	bd30      	pop	{r4, r5, pc}
   17a92:	fa21 f004 	lsr.w	r0, r1, r4
   17a96:	4629      	mov	r1, r5
   17a98:	bd30      	pop	{r4, r5, pc}
   17a9a:	f094 0f00 	teq	r4, #0
   17a9e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   17aa2:	bf06      	itte	eq
   17aa4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   17aa8:	3401      	addeq	r4, #1
   17aaa:	3d01      	subne	r5, #1
   17aac:	e74e      	b.n	1794c <__adddf3+0x8c>
   17aae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17ab2:	bf18      	it	ne
   17ab4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17ab8:	d029      	beq.n	17b0e <__adddf3+0x24e>
   17aba:	ea94 0f05 	teq	r4, r5
   17abe:	bf08      	it	eq
   17ac0:	ea90 0f02 	teqeq	r0, r2
   17ac4:	d005      	beq.n	17ad2 <__adddf3+0x212>
   17ac6:	ea54 0c00 	orrs.w	ip, r4, r0
   17aca:	bf04      	itt	eq
   17acc:	4619      	moveq	r1, r3
   17ace:	4610      	moveq	r0, r2
   17ad0:	bd30      	pop	{r4, r5, pc}
   17ad2:	ea91 0f03 	teq	r1, r3
   17ad6:	bf1e      	ittt	ne
   17ad8:	2100      	movne	r1, #0
   17ada:	2000      	movne	r0, #0
   17adc:	bd30      	popne	{r4, r5, pc}
   17ade:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   17ae2:	d105      	bne.n	17af0 <__adddf3+0x230>
   17ae4:	0040      	lsls	r0, r0, #1
   17ae6:	4149      	adcs	r1, r1
   17ae8:	bf28      	it	cs
   17aea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   17aee:	bd30      	pop	{r4, r5, pc}
   17af0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17af4:	bf3c      	itt	cc
   17af6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   17afa:	bd30      	popcc	{r4, r5, pc}
   17afc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17b00:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   17b04:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17b08:	f04f 0000 	mov.w	r0, #0
   17b0c:	bd30      	pop	{r4, r5, pc}
   17b0e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17b12:	bf1a      	itte	ne
   17b14:	4619      	movne	r1, r3
   17b16:	4610      	movne	r0, r2
   17b18:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   17b1c:	bf1c      	itt	ne
   17b1e:	460b      	movne	r3, r1
   17b20:	4602      	movne	r2, r0
   17b22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17b26:	bf06      	itte	eq
   17b28:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   17b2c:	ea91 0f03 	teqeq	r1, r3
   17b30:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   17b34:	bd30      	pop	{r4, r5, pc}
   17b36:	bf00      	nop

00017b38 <__aeabi_ui2d>:
   17b38:	f090 0f00 	teq	r0, #0
   17b3c:	bf04      	itt	eq
   17b3e:	2100      	moveq	r1, #0
   17b40:	4770      	bxeq	lr
   17b42:	b530      	push	{r4, r5, lr}
   17b44:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17b48:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17b4c:	f04f 0500 	mov.w	r5, #0
   17b50:	f04f 0100 	mov.w	r1, #0
   17b54:	e750      	b.n	179f8 <__adddf3+0x138>
   17b56:	bf00      	nop

00017b58 <__aeabi_i2d>:
   17b58:	f090 0f00 	teq	r0, #0
   17b5c:	bf04      	itt	eq
   17b5e:	2100      	moveq	r1, #0
   17b60:	4770      	bxeq	lr
   17b62:	b530      	push	{r4, r5, lr}
   17b64:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17b68:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17b6c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   17b70:	bf48      	it	mi
   17b72:	4240      	negmi	r0, r0
   17b74:	f04f 0100 	mov.w	r1, #0
   17b78:	e73e      	b.n	179f8 <__adddf3+0x138>
   17b7a:	bf00      	nop

00017b7c <__aeabi_f2d>:
   17b7c:	0042      	lsls	r2, r0, #1
   17b7e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   17b82:	ea4f 0131 	mov.w	r1, r1, rrx
   17b86:	ea4f 7002 	mov.w	r0, r2, lsl #28
   17b8a:	bf1f      	itttt	ne
   17b8c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   17b90:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17b94:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   17b98:	4770      	bxne	lr
   17b9a:	f092 0f00 	teq	r2, #0
   17b9e:	bf14      	ite	ne
   17ba0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17ba4:	4770      	bxeq	lr
   17ba6:	b530      	push	{r4, r5, lr}
   17ba8:	f44f 7460 	mov.w	r4, #896	; 0x380
   17bac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17bb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17bb4:	e720      	b.n	179f8 <__adddf3+0x138>
   17bb6:	bf00      	nop

00017bb8 <__aeabi_ul2d>:
   17bb8:	ea50 0201 	orrs.w	r2, r0, r1
   17bbc:	bf08      	it	eq
   17bbe:	4770      	bxeq	lr
   17bc0:	b530      	push	{r4, r5, lr}
   17bc2:	f04f 0500 	mov.w	r5, #0
   17bc6:	e00a      	b.n	17bde <__aeabi_l2d+0x16>

00017bc8 <__aeabi_l2d>:
   17bc8:	ea50 0201 	orrs.w	r2, r0, r1
   17bcc:	bf08      	it	eq
   17bce:	4770      	bxeq	lr
   17bd0:	b530      	push	{r4, r5, lr}
   17bd2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   17bd6:	d502      	bpl.n	17bde <__aeabi_l2d+0x16>
   17bd8:	4240      	negs	r0, r0
   17bda:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17bde:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17be2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17be6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   17bea:	f43f aedc 	beq.w	179a6 <__adddf3+0xe6>
   17bee:	f04f 0203 	mov.w	r2, #3
   17bf2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17bf6:	bf18      	it	ne
   17bf8:	3203      	addne	r2, #3
   17bfa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17bfe:	bf18      	it	ne
   17c00:	3203      	addne	r2, #3
   17c02:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   17c06:	f1c2 0320 	rsb	r3, r2, #32
   17c0a:	fa00 fc03 	lsl.w	ip, r0, r3
   17c0e:	fa20 f002 	lsr.w	r0, r0, r2
   17c12:	fa01 fe03 	lsl.w	lr, r1, r3
   17c16:	ea40 000e 	orr.w	r0, r0, lr
   17c1a:	fa21 f102 	lsr.w	r1, r1, r2
   17c1e:	4414      	add	r4, r2
   17c20:	e6c1      	b.n	179a6 <__adddf3+0xe6>
   17c22:	bf00      	nop

00017c24 <__aeabi_dmul>:
   17c24:	b570      	push	{r4, r5, r6, lr}
   17c26:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17c2a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17c2e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17c32:	bf1d      	ittte	ne
   17c34:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17c38:	ea94 0f0c 	teqne	r4, ip
   17c3c:	ea95 0f0c 	teqne	r5, ip
   17c40:	f000 f8de 	bleq	17e00 <__aeabi_dmul+0x1dc>
   17c44:	442c      	add	r4, r5
   17c46:	ea81 0603 	eor.w	r6, r1, r3
   17c4a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   17c4e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   17c52:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   17c56:	bf18      	it	ne
   17c58:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   17c5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17c60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17c64:	d038      	beq.n	17cd8 <__aeabi_dmul+0xb4>
   17c66:	fba0 ce02 	umull	ip, lr, r0, r2
   17c6a:	f04f 0500 	mov.w	r5, #0
   17c6e:	fbe1 e502 	umlal	lr, r5, r1, r2
   17c72:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   17c76:	fbe0 e503 	umlal	lr, r5, r0, r3
   17c7a:	f04f 0600 	mov.w	r6, #0
   17c7e:	fbe1 5603 	umlal	r5, r6, r1, r3
   17c82:	f09c 0f00 	teq	ip, #0
   17c86:	bf18      	it	ne
   17c88:	f04e 0e01 	orrne.w	lr, lr, #1
   17c8c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   17c90:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17c94:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17c98:	d204      	bcs.n	17ca4 <__aeabi_dmul+0x80>
   17c9a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17c9e:	416d      	adcs	r5, r5
   17ca0:	eb46 0606 	adc.w	r6, r6, r6
   17ca4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17ca8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17cac:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17cb0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17cb4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17cb8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17cbc:	bf88      	it	hi
   17cbe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17cc2:	d81e      	bhi.n	17d02 <__aeabi_dmul+0xde>
   17cc4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17cc8:	bf08      	it	eq
   17cca:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17cce:	f150 0000 	adcs.w	r0, r0, #0
   17cd2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17cd6:	bd70      	pop	{r4, r5, r6, pc}
   17cd8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17cdc:	ea46 0101 	orr.w	r1, r6, r1
   17ce0:	ea40 0002 	orr.w	r0, r0, r2
   17ce4:	ea81 0103 	eor.w	r1, r1, r3
   17ce8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17cec:	bfc2      	ittt	gt
   17cee:	ebd4 050c 	rsbsgt	r5, r4, ip
   17cf2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17cf6:	bd70      	popgt	{r4, r5, r6, pc}
   17cf8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17cfc:	f04f 0e00 	mov.w	lr, #0
   17d00:	3c01      	subs	r4, #1
   17d02:	f300 80ab 	bgt.w	17e5c <__aeabi_dmul+0x238>
   17d06:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17d0a:	bfde      	ittt	le
   17d0c:	2000      	movle	r0, #0
   17d0e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17d12:	bd70      	pople	{r4, r5, r6, pc}
   17d14:	f1c4 0400 	rsb	r4, r4, #0
   17d18:	3c20      	subs	r4, #32
   17d1a:	da35      	bge.n	17d88 <__aeabi_dmul+0x164>
   17d1c:	340c      	adds	r4, #12
   17d1e:	dc1b      	bgt.n	17d58 <__aeabi_dmul+0x134>
   17d20:	f104 0414 	add.w	r4, r4, #20
   17d24:	f1c4 0520 	rsb	r5, r4, #32
   17d28:	fa00 f305 	lsl.w	r3, r0, r5
   17d2c:	fa20 f004 	lsr.w	r0, r0, r4
   17d30:	fa01 f205 	lsl.w	r2, r1, r5
   17d34:	ea40 0002 	orr.w	r0, r0, r2
   17d38:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   17d3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17d40:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17d44:	fa21 f604 	lsr.w	r6, r1, r4
   17d48:	eb42 0106 	adc.w	r1, r2, r6
   17d4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17d50:	bf08      	it	eq
   17d52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17d56:	bd70      	pop	{r4, r5, r6, pc}
   17d58:	f1c4 040c 	rsb	r4, r4, #12
   17d5c:	f1c4 0520 	rsb	r5, r4, #32
   17d60:	fa00 f304 	lsl.w	r3, r0, r4
   17d64:	fa20 f005 	lsr.w	r0, r0, r5
   17d68:	fa01 f204 	lsl.w	r2, r1, r4
   17d6c:	ea40 0002 	orr.w	r0, r0, r2
   17d70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17d74:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17d78:	f141 0100 	adc.w	r1, r1, #0
   17d7c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17d80:	bf08      	it	eq
   17d82:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17d86:	bd70      	pop	{r4, r5, r6, pc}
   17d88:	f1c4 0520 	rsb	r5, r4, #32
   17d8c:	fa00 f205 	lsl.w	r2, r0, r5
   17d90:	ea4e 0e02 	orr.w	lr, lr, r2
   17d94:	fa20 f304 	lsr.w	r3, r0, r4
   17d98:	fa01 f205 	lsl.w	r2, r1, r5
   17d9c:	ea43 0302 	orr.w	r3, r3, r2
   17da0:	fa21 f004 	lsr.w	r0, r1, r4
   17da4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17da8:	fa21 f204 	lsr.w	r2, r1, r4
   17dac:	ea20 0002 	bic.w	r0, r0, r2
   17db0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17db4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17db8:	bf08      	it	eq
   17dba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17dbe:	bd70      	pop	{r4, r5, r6, pc}
   17dc0:	f094 0f00 	teq	r4, #0
   17dc4:	d10f      	bne.n	17de6 <__aeabi_dmul+0x1c2>
   17dc6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17dca:	0040      	lsls	r0, r0, #1
   17dcc:	eb41 0101 	adc.w	r1, r1, r1
   17dd0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17dd4:	bf08      	it	eq
   17dd6:	3c01      	subeq	r4, #1
   17dd8:	d0f7      	beq.n	17dca <__aeabi_dmul+0x1a6>
   17dda:	ea41 0106 	orr.w	r1, r1, r6
   17dde:	f095 0f00 	teq	r5, #0
   17de2:	bf18      	it	ne
   17de4:	4770      	bxne	lr
   17de6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17dea:	0052      	lsls	r2, r2, #1
   17dec:	eb43 0303 	adc.w	r3, r3, r3
   17df0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17df4:	bf08      	it	eq
   17df6:	3d01      	subeq	r5, #1
   17df8:	d0f7      	beq.n	17dea <__aeabi_dmul+0x1c6>
   17dfa:	ea43 0306 	orr.w	r3, r3, r6
   17dfe:	4770      	bx	lr
   17e00:	ea94 0f0c 	teq	r4, ip
   17e04:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17e08:	bf18      	it	ne
   17e0a:	ea95 0f0c 	teqne	r5, ip
   17e0e:	d00c      	beq.n	17e2a <__aeabi_dmul+0x206>
   17e10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17e14:	bf18      	it	ne
   17e16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17e1a:	d1d1      	bne.n	17dc0 <__aeabi_dmul+0x19c>
   17e1c:	ea81 0103 	eor.w	r1, r1, r3
   17e20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17e24:	f04f 0000 	mov.w	r0, #0
   17e28:	bd70      	pop	{r4, r5, r6, pc}
   17e2a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17e2e:	bf06      	itte	eq
   17e30:	4610      	moveq	r0, r2
   17e32:	4619      	moveq	r1, r3
   17e34:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17e38:	d019      	beq.n	17e6e <__aeabi_dmul+0x24a>
   17e3a:	ea94 0f0c 	teq	r4, ip
   17e3e:	d102      	bne.n	17e46 <__aeabi_dmul+0x222>
   17e40:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17e44:	d113      	bne.n	17e6e <__aeabi_dmul+0x24a>
   17e46:	ea95 0f0c 	teq	r5, ip
   17e4a:	d105      	bne.n	17e58 <__aeabi_dmul+0x234>
   17e4c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17e50:	bf1c      	itt	ne
   17e52:	4610      	movne	r0, r2
   17e54:	4619      	movne	r1, r3
   17e56:	d10a      	bne.n	17e6e <__aeabi_dmul+0x24a>
   17e58:	ea81 0103 	eor.w	r1, r1, r3
   17e5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17e60:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17e64:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17e68:	f04f 0000 	mov.w	r0, #0
   17e6c:	bd70      	pop	{r4, r5, r6, pc}
   17e6e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17e72:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17e76:	bd70      	pop	{r4, r5, r6, pc}

00017e78 <__aeabi_ddiv>:
   17e78:	b570      	push	{r4, r5, r6, lr}
   17e7a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17e7e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17e82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17e86:	bf1d      	ittte	ne
   17e88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17e8c:	ea94 0f0c 	teqne	r4, ip
   17e90:	ea95 0f0c 	teqne	r5, ip
   17e94:	f000 f8a7 	bleq	17fe6 <__aeabi_ddiv+0x16e>
   17e98:	eba4 0405 	sub.w	r4, r4, r5
   17e9c:	ea81 0e03 	eor.w	lr, r1, r3
   17ea0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17ea4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17ea8:	f000 8088 	beq.w	17fbc <__aeabi_ddiv+0x144>
   17eac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17eb0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17eb4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17eb8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17ebc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17ec0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17ec4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17ec8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17ecc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17ed0:	429d      	cmp	r5, r3
   17ed2:	bf08      	it	eq
   17ed4:	4296      	cmpeq	r6, r2
   17ed6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17eda:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17ede:	d202      	bcs.n	17ee6 <__aeabi_ddiv+0x6e>
   17ee0:	085b      	lsrs	r3, r3, #1
   17ee2:	ea4f 0232 	mov.w	r2, r2, rrx
   17ee6:	1ab6      	subs	r6, r6, r2
   17ee8:	eb65 0503 	sbc.w	r5, r5, r3
   17eec:	085b      	lsrs	r3, r3, #1
   17eee:	ea4f 0232 	mov.w	r2, r2, rrx
   17ef2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   17ef6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17efa:	ebb6 0e02 	subs.w	lr, r6, r2
   17efe:	eb75 0e03 	sbcs.w	lr, r5, r3
   17f02:	bf22      	ittt	cs
   17f04:	1ab6      	subcs	r6, r6, r2
   17f06:	4675      	movcs	r5, lr
   17f08:	ea40 000c 	orrcs.w	r0, r0, ip
   17f0c:	085b      	lsrs	r3, r3, #1
   17f0e:	ea4f 0232 	mov.w	r2, r2, rrx
   17f12:	ebb6 0e02 	subs.w	lr, r6, r2
   17f16:	eb75 0e03 	sbcs.w	lr, r5, r3
   17f1a:	bf22      	ittt	cs
   17f1c:	1ab6      	subcs	r6, r6, r2
   17f1e:	4675      	movcs	r5, lr
   17f20:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   17f24:	085b      	lsrs	r3, r3, #1
   17f26:	ea4f 0232 	mov.w	r2, r2, rrx
   17f2a:	ebb6 0e02 	subs.w	lr, r6, r2
   17f2e:	eb75 0e03 	sbcs.w	lr, r5, r3
   17f32:	bf22      	ittt	cs
   17f34:	1ab6      	subcs	r6, r6, r2
   17f36:	4675      	movcs	r5, lr
   17f38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   17f3c:	085b      	lsrs	r3, r3, #1
   17f3e:	ea4f 0232 	mov.w	r2, r2, rrx
   17f42:	ebb6 0e02 	subs.w	lr, r6, r2
   17f46:	eb75 0e03 	sbcs.w	lr, r5, r3
   17f4a:	bf22      	ittt	cs
   17f4c:	1ab6      	subcs	r6, r6, r2
   17f4e:	4675      	movcs	r5, lr
   17f50:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   17f54:	ea55 0e06 	orrs.w	lr, r5, r6
   17f58:	d018      	beq.n	17f8c <__aeabi_ddiv+0x114>
   17f5a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   17f5e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   17f62:	ea4f 1606 	mov.w	r6, r6, lsl #4
   17f66:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   17f6a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   17f6e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   17f72:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   17f76:	d1c0      	bne.n	17efa <__aeabi_ddiv+0x82>
   17f78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17f7c:	d10b      	bne.n	17f96 <__aeabi_ddiv+0x11e>
   17f7e:	ea41 0100 	orr.w	r1, r1, r0
   17f82:	f04f 0000 	mov.w	r0, #0
   17f86:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   17f8a:	e7b6      	b.n	17efa <__aeabi_ddiv+0x82>
   17f8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17f90:	bf04      	itt	eq
   17f92:	4301      	orreq	r1, r0
   17f94:	2000      	moveq	r0, #0
   17f96:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17f9a:	bf88      	it	hi
   17f9c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17fa0:	f63f aeaf 	bhi.w	17d02 <__aeabi_dmul+0xde>
   17fa4:	ebb5 0c03 	subs.w	ip, r5, r3
   17fa8:	bf04      	itt	eq
   17faa:	ebb6 0c02 	subseq.w	ip, r6, r2
   17fae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17fb2:	f150 0000 	adcs.w	r0, r0, #0
   17fb6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17fba:	bd70      	pop	{r4, r5, r6, pc}
   17fbc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   17fc0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   17fc4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   17fc8:	bfc2      	ittt	gt
   17fca:	ebd4 050c 	rsbsgt	r5, r4, ip
   17fce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17fd2:	bd70      	popgt	{r4, r5, r6, pc}
   17fd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17fd8:	f04f 0e00 	mov.w	lr, #0
   17fdc:	3c01      	subs	r4, #1
   17fde:	e690      	b.n	17d02 <__aeabi_dmul+0xde>
   17fe0:	ea45 0e06 	orr.w	lr, r5, r6
   17fe4:	e68d      	b.n	17d02 <__aeabi_dmul+0xde>
   17fe6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17fea:	ea94 0f0c 	teq	r4, ip
   17fee:	bf08      	it	eq
   17ff0:	ea95 0f0c 	teqeq	r5, ip
   17ff4:	f43f af3b 	beq.w	17e6e <__aeabi_dmul+0x24a>
   17ff8:	ea94 0f0c 	teq	r4, ip
   17ffc:	d10a      	bne.n	18014 <__aeabi_ddiv+0x19c>
   17ffe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18002:	f47f af34 	bne.w	17e6e <__aeabi_dmul+0x24a>
   18006:	ea95 0f0c 	teq	r5, ip
   1800a:	f47f af25 	bne.w	17e58 <__aeabi_dmul+0x234>
   1800e:	4610      	mov	r0, r2
   18010:	4619      	mov	r1, r3
   18012:	e72c      	b.n	17e6e <__aeabi_dmul+0x24a>
   18014:	ea95 0f0c 	teq	r5, ip
   18018:	d106      	bne.n	18028 <__aeabi_ddiv+0x1b0>
   1801a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1801e:	f43f aefd 	beq.w	17e1c <__aeabi_dmul+0x1f8>
   18022:	4610      	mov	r0, r2
   18024:	4619      	mov	r1, r3
   18026:	e722      	b.n	17e6e <__aeabi_dmul+0x24a>
   18028:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1802c:	bf18      	it	ne
   1802e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18032:	f47f aec5 	bne.w	17dc0 <__aeabi_dmul+0x19c>
   18036:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1803a:	f47f af0d 	bne.w	17e58 <__aeabi_dmul+0x234>
   1803e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   18042:	f47f aeeb 	bne.w	17e1c <__aeabi_dmul+0x1f8>
   18046:	e712      	b.n	17e6e <__aeabi_dmul+0x24a>

00018048 <__gedf2>:
   18048:	f04f 3cff 	mov.w	ip, #4294967295
   1804c:	e006      	b.n	1805c <__cmpdf2+0x4>
   1804e:	bf00      	nop

00018050 <__ledf2>:
   18050:	f04f 0c01 	mov.w	ip, #1
   18054:	e002      	b.n	1805c <__cmpdf2+0x4>
   18056:	bf00      	nop

00018058 <__cmpdf2>:
   18058:	f04f 0c01 	mov.w	ip, #1
   1805c:	f84d cd04 	str.w	ip, [sp, #-4]!
   18060:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18064:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18068:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1806c:	bf18      	it	ne
   1806e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   18072:	d01b      	beq.n	180ac <__cmpdf2+0x54>
   18074:	b001      	add	sp, #4
   18076:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1807a:	bf0c      	ite	eq
   1807c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   18080:	ea91 0f03 	teqne	r1, r3
   18084:	bf02      	ittt	eq
   18086:	ea90 0f02 	teqeq	r0, r2
   1808a:	2000      	moveq	r0, #0
   1808c:	4770      	bxeq	lr
   1808e:	f110 0f00 	cmn.w	r0, #0
   18092:	ea91 0f03 	teq	r1, r3
   18096:	bf58      	it	pl
   18098:	4299      	cmppl	r1, r3
   1809a:	bf08      	it	eq
   1809c:	4290      	cmpeq	r0, r2
   1809e:	bf2c      	ite	cs
   180a0:	17d8      	asrcs	r0, r3, #31
   180a2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   180a6:	f040 0001 	orr.w	r0, r0, #1
   180aa:	4770      	bx	lr
   180ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   180b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   180b4:	d102      	bne.n	180bc <__cmpdf2+0x64>
   180b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   180ba:	d107      	bne.n	180cc <__cmpdf2+0x74>
   180bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   180c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   180c4:	d1d6      	bne.n	18074 <__cmpdf2+0x1c>
   180c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   180ca:	d0d3      	beq.n	18074 <__cmpdf2+0x1c>
   180cc:	f85d 0b04 	ldr.w	r0, [sp], #4
   180d0:	4770      	bx	lr
   180d2:	bf00      	nop

000180d4 <__aeabi_cdrcmple>:
   180d4:	4684      	mov	ip, r0
   180d6:	4610      	mov	r0, r2
   180d8:	4662      	mov	r2, ip
   180da:	468c      	mov	ip, r1
   180dc:	4619      	mov	r1, r3
   180de:	4663      	mov	r3, ip
   180e0:	e000      	b.n	180e4 <__aeabi_cdcmpeq>
   180e2:	bf00      	nop

000180e4 <__aeabi_cdcmpeq>:
   180e4:	b501      	push	{r0, lr}
   180e6:	f7ff ffb7 	bl	18058 <__cmpdf2>
   180ea:	2800      	cmp	r0, #0
   180ec:	bf48      	it	mi
   180ee:	f110 0f00 	cmnmi.w	r0, #0
   180f2:	bd01      	pop	{r0, pc}

000180f4 <__aeabi_dcmpeq>:
   180f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   180f8:	f7ff fff4 	bl	180e4 <__aeabi_cdcmpeq>
   180fc:	bf0c      	ite	eq
   180fe:	2001      	moveq	r0, #1
   18100:	2000      	movne	r0, #0
   18102:	f85d fb08 	ldr.w	pc, [sp], #8
   18106:	bf00      	nop

00018108 <__aeabi_dcmplt>:
   18108:	f84d ed08 	str.w	lr, [sp, #-8]!
   1810c:	f7ff ffea 	bl	180e4 <__aeabi_cdcmpeq>
   18110:	bf34      	ite	cc
   18112:	2001      	movcc	r0, #1
   18114:	2000      	movcs	r0, #0
   18116:	f85d fb08 	ldr.w	pc, [sp], #8
   1811a:	bf00      	nop

0001811c <__aeabi_dcmple>:
   1811c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18120:	f7ff ffe0 	bl	180e4 <__aeabi_cdcmpeq>
   18124:	bf94      	ite	ls
   18126:	2001      	movls	r0, #1
   18128:	2000      	movhi	r0, #0
   1812a:	f85d fb08 	ldr.w	pc, [sp], #8
   1812e:	bf00      	nop

00018130 <__aeabi_dcmpge>:
   18130:	f84d ed08 	str.w	lr, [sp, #-8]!
   18134:	f7ff ffce 	bl	180d4 <__aeabi_cdrcmple>
   18138:	bf94      	ite	ls
   1813a:	2001      	movls	r0, #1
   1813c:	2000      	movhi	r0, #0
   1813e:	f85d fb08 	ldr.w	pc, [sp], #8
   18142:	bf00      	nop

00018144 <__aeabi_dcmpgt>:
   18144:	f84d ed08 	str.w	lr, [sp, #-8]!
   18148:	f7ff ffc4 	bl	180d4 <__aeabi_cdrcmple>
   1814c:	bf34      	ite	cc
   1814e:	2001      	movcc	r0, #1
   18150:	2000      	movcs	r0, #0
   18152:	f85d fb08 	ldr.w	pc, [sp], #8
   18156:	bf00      	nop

00018158 <__aeabi_d2iz>:
   18158:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1815c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   18160:	d215      	bcs.n	1818e <__aeabi_d2iz+0x36>
   18162:	d511      	bpl.n	18188 <__aeabi_d2iz+0x30>
   18164:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   18168:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1816c:	d912      	bls.n	18194 <__aeabi_d2iz+0x3c>
   1816e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18172:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18176:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1817a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1817e:	fa23 f002 	lsr.w	r0, r3, r2
   18182:	bf18      	it	ne
   18184:	4240      	negne	r0, r0
   18186:	4770      	bx	lr
   18188:	f04f 0000 	mov.w	r0, #0
   1818c:	4770      	bx	lr
   1818e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   18192:	d105      	bne.n	181a0 <__aeabi_d2iz+0x48>
   18194:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   18198:	bf08      	it	eq
   1819a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1819e:	4770      	bx	lr
   181a0:	f04f 0000 	mov.w	r0, #0
   181a4:	4770      	bx	lr
   181a6:	bf00      	nop

000181a8 <__aeabi_d2uiz>:
   181a8:	004a      	lsls	r2, r1, #1
   181aa:	d211      	bcs.n	181d0 <__aeabi_d2uiz+0x28>
   181ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   181b0:	d211      	bcs.n	181d6 <__aeabi_d2uiz+0x2e>
   181b2:	d50d      	bpl.n	181d0 <__aeabi_d2uiz+0x28>
   181b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   181b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   181bc:	d40e      	bmi.n	181dc <__aeabi_d2uiz+0x34>
   181be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   181c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   181c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   181ca:	fa23 f002 	lsr.w	r0, r3, r2
   181ce:	4770      	bx	lr
   181d0:	f04f 0000 	mov.w	r0, #0
   181d4:	4770      	bx	lr
   181d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   181da:	d102      	bne.n	181e2 <__aeabi_d2uiz+0x3a>
   181dc:	f04f 30ff 	mov.w	r0, #4294967295
   181e0:	4770      	bx	lr
   181e2:	f04f 0000 	mov.w	r0, #0
   181e6:	4770      	bx	lr

000181e8 <__aeabi_d2f>:
   181e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   181ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   181f0:	bf24      	itt	cs
   181f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   181f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   181fa:	d90d      	bls.n	18218 <__aeabi_d2f+0x30>
   181fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18200:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   18204:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   18208:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1820c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   18210:	bf08      	it	eq
   18212:	f020 0001 	biceq.w	r0, r0, #1
   18216:	4770      	bx	lr
   18218:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1821c:	d121      	bne.n	18262 <__aeabi_d2f+0x7a>
   1821e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   18222:	bfbc      	itt	lt
   18224:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   18228:	4770      	bxlt	lr
   1822a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1822e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   18232:	f1c2 0218 	rsb	r2, r2, #24
   18236:	f1c2 0c20 	rsb	ip, r2, #32
   1823a:	fa10 f30c 	lsls.w	r3, r0, ip
   1823e:	fa20 f002 	lsr.w	r0, r0, r2
   18242:	bf18      	it	ne
   18244:	f040 0001 	orrne.w	r0, r0, #1
   18248:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1824c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   18250:	fa03 fc0c 	lsl.w	ip, r3, ip
   18254:	ea40 000c 	orr.w	r0, r0, ip
   18258:	fa23 f302 	lsr.w	r3, r3, r2
   1825c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   18260:	e7cc      	b.n	181fc <__aeabi_d2f+0x14>
   18262:	ea7f 5362 	mvns.w	r3, r2, asr #21
   18266:	d107      	bne.n	18278 <__aeabi_d2f+0x90>
   18268:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1826c:	bf1e      	ittt	ne
   1826e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   18272:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   18276:	4770      	bxne	lr
   18278:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1827c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18280:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18284:	4770      	bx	lr
   18286:	bf00      	nop

00018288 <__aeabi_frsub>:
   18288:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1828c:	e002      	b.n	18294 <__addsf3>
   1828e:	bf00      	nop

00018290 <__aeabi_fsub>:
   18290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00018294 <__addsf3>:
   18294:	0042      	lsls	r2, r0, #1
   18296:	bf1f      	itttt	ne
   18298:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1829c:	ea92 0f03 	teqne	r2, r3
   182a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   182a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   182a8:	d06a      	beq.n	18380 <__addsf3+0xec>
   182aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
   182ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   182b2:	bfc1      	itttt	gt
   182b4:	18d2      	addgt	r2, r2, r3
   182b6:	4041      	eorgt	r1, r0
   182b8:	4048      	eorgt	r0, r1
   182ba:	4041      	eorgt	r1, r0
   182bc:	bfb8      	it	lt
   182be:	425b      	neglt	r3, r3
   182c0:	2b19      	cmp	r3, #25
   182c2:	bf88      	it	hi
   182c4:	4770      	bxhi	lr
   182c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   182ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   182ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   182d2:	bf18      	it	ne
   182d4:	4240      	negne	r0, r0
   182d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   182da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   182de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   182e2:	bf18      	it	ne
   182e4:	4249      	negne	r1, r1
   182e6:	ea92 0f03 	teq	r2, r3
   182ea:	d03f      	beq.n	1836c <__addsf3+0xd8>
   182ec:	f1a2 0201 	sub.w	r2, r2, #1
   182f0:	fa41 fc03 	asr.w	ip, r1, r3
   182f4:	eb10 000c 	adds.w	r0, r0, ip
   182f8:	f1c3 0320 	rsb	r3, r3, #32
   182fc:	fa01 f103 	lsl.w	r1, r1, r3
   18300:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18304:	d502      	bpl.n	1830c <__addsf3+0x78>
   18306:	4249      	negs	r1, r1
   18308:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1830c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18310:	d313      	bcc.n	1833a <__addsf3+0xa6>
   18312:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   18316:	d306      	bcc.n	18326 <__addsf3+0x92>
   18318:	0840      	lsrs	r0, r0, #1
   1831a:	ea4f 0131 	mov.w	r1, r1, rrx
   1831e:	f102 0201 	add.w	r2, r2, #1
   18322:	2afe      	cmp	r2, #254	; 0xfe
   18324:	d251      	bcs.n	183ca <__addsf3+0x136>
   18326:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1832a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1832e:	bf08      	it	eq
   18330:	f020 0001 	biceq.w	r0, r0, #1
   18334:	ea40 0003 	orr.w	r0, r0, r3
   18338:	4770      	bx	lr
   1833a:	0049      	lsls	r1, r1, #1
   1833c:	eb40 0000 	adc.w	r0, r0, r0
   18340:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   18344:	f1a2 0201 	sub.w	r2, r2, #1
   18348:	d1ed      	bne.n	18326 <__addsf3+0x92>
   1834a:	fab0 fc80 	clz	ip, r0
   1834e:	f1ac 0c08 	sub.w	ip, ip, #8
   18352:	ebb2 020c 	subs.w	r2, r2, ip
   18356:	fa00 f00c 	lsl.w	r0, r0, ip
   1835a:	bfaa      	itet	ge
   1835c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   18360:	4252      	neglt	r2, r2
   18362:	4318      	orrge	r0, r3
   18364:	bfbc      	itt	lt
   18366:	40d0      	lsrlt	r0, r2
   18368:	4318      	orrlt	r0, r3
   1836a:	4770      	bx	lr
   1836c:	f092 0f00 	teq	r2, #0
   18370:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   18374:	bf06      	itte	eq
   18376:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1837a:	3201      	addeq	r2, #1
   1837c:	3b01      	subne	r3, #1
   1837e:	e7b5      	b.n	182ec <__addsf3+0x58>
   18380:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18384:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18388:	bf18      	it	ne
   1838a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1838e:	d021      	beq.n	183d4 <__addsf3+0x140>
   18390:	ea92 0f03 	teq	r2, r3
   18394:	d004      	beq.n	183a0 <__addsf3+0x10c>
   18396:	f092 0f00 	teq	r2, #0
   1839a:	bf08      	it	eq
   1839c:	4608      	moveq	r0, r1
   1839e:	4770      	bx	lr
   183a0:	ea90 0f01 	teq	r0, r1
   183a4:	bf1c      	itt	ne
   183a6:	2000      	movne	r0, #0
   183a8:	4770      	bxne	lr
   183aa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   183ae:	d104      	bne.n	183ba <__addsf3+0x126>
   183b0:	0040      	lsls	r0, r0, #1
   183b2:	bf28      	it	cs
   183b4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   183b8:	4770      	bx	lr
   183ba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   183be:	bf3c      	itt	cc
   183c0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   183c4:	4770      	bxcc	lr
   183c6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   183ca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   183ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   183d2:	4770      	bx	lr
   183d4:	ea7f 6222 	mvns.w	r2, r2, asr #24
   183d8:	bf16      	itet	ne
   183da:	4608      	movne	r0, r1
   183dc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   183e0:	4601      	movne	r1, r0
   183e2:	0242      	lsls	r2, r0, #9
   183e4:	bf06      	itte	eq
   183e6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   183ea:	ea90 0f01 	teqeq	r0, r1
   183ee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   183f2:	4770      	bx	lr

000183f4 <__aeabi_ui2f>:
   183f4:	f04f 0300 	mov.w	r3, #0
   183f8:	e004      	b.n	18404 <__aeabi_i2f+0x8>
   183fa:	bf00      	nop

000183fc <__aeabi_i2f>:
   183fc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   18400:	bf48      	it	mi
   18402:	4240      	negmi	r0, r0
   18404:	ea5f 0c00 	movs.w	ip, r0
   18408:	bf08      	it	eq
   1840a:	4770      	bxeq	lr
   1840c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   18410:	4601      	mov	r1, r0
   18412:	f04f 0000 	mov.w	r0, #0
   18416:	e01c      	b.n	18452 <__aeabi_l2f+0x2a>

00018418 <__aeabi_ul2f>:
   18418:	ea50 0201 	orrs.w	r2, r0, r1
   1841c:	bf08      	it	eq
   1841e:	4770      	bxeq	lr
   18420:	f04f 0300 	mov.w	r3, #0
   18424:	e00a      	b.n	1843c <__aeabi_l2f+0x14>
   18426:	bf00      	nop

00018428 <__aeabi_l2f>:
   18428:	ea50 0201 	orrs.w	r2, r0, r1
   1842c:	bf08      	it	eq
   1842e:	4770      	bxeq	lr
   18430:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   18434:	d502      	bpl.n	1843c <__aeabi_l2f+0x14>
   18436:	4240      	negs	r0, r0
   18438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1843c:	ea5f 0c01 	movs.w	ip, r1
   18440:	bf02      	ittt	eq
   18442:	4684      	moveq	ip, r0
   18444:	4601      	moveq	r1, r0
   18446:	2000      	moveq	r0, #0
   18448:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1844c:	bf08      	it	eq
   1844e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   18452:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   18456:	fabc f28c 	clz	r2, ip
   1845a:	3a08      	subs	r2, #8
   1845c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   18460:	db10      	blt.n	18484 <__aeabi_l2f+0x5c>
   18462:	fa01 fc02 	lsl.w	ip, r1, r2
   18466:	4463      	add	r3, ip
   18468:	fa00 fc02 	lsl.w	ip, r0, r2
   1846c:	f1c2 0220 	rsb	r2, r2, #32
   18470:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   18474:	fa20 f202 	lsr.w	r2, r0, r2
   18478:	eb43 0002 	adc.w	r0, r3, r2
   1847c:	bf08      	it	eq
   1847e:	f020 0001 	biceq.w	r0, r0, #1
   18482:	4770      	bx	lr
   18484:	f102 0220 	add.w	r2, r2, #32
   18488:	fa01 fc02 	lsl.w	ip, r1, r2
   1848c:	f1c2 0220 	rsb	r2, r2, #32
   18490:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   18494:	fa21 f202 	lsr.w	r2, r1, r2
   18498:	eb43 0002 	adc.w	r0, r3, r2
   1849c:	bf08      	it	eq
   1849e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   184a2:	4770      	bx	lr

000184a4 <__aeabi_fmul>:
   184a4:	f04f 0cff 	mov.w	ip, #255	; 0xff
   184a8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   184ac:	bf1e      	ittt	ne
   184ae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   184b2:	ea92 0f0c 	teqne	r2, ip
   184b6:	ea93 0f0c 	teqne	r3, ip
   184ba:	d06f      	beq.n	1859c <__aeabi_fmul+0xf8>
   184bc:	441a      	add	r2, r3
   184be:	ea80 0c01 	eor.w	ip, r0, r1
   184c2:	0240      	lsls	r0, r0, #9
   184c4:	bf18      	it	ne
   184c6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   184ca:	d01e      	beq.n	1850a <__aeabi_fmul+0x66>
   184cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   184d0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   184d4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   184d8:	fba0 3101 	umull	r3, r1, r0, r1
   184dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   184e0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   184e4:	bf3e      	ittt	cc
   184e6:	0049      	lslcc	r1, r1, #1
   184e8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   184ec:	005b      	lslcc	r3, r3, #1
   184ee:	ea40 0001 	orr.w	r0, r0, r1
   184f2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   184f6:	2afd      	cmp	r2, #253	; 0xfd
   184f8:	d81d      	bhi.n	18536 <__aeabi_fmul+0x92>
   184fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   184fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18502:	bf08      	it	eq
   18504:	f020 0001 	biceq.w	r0, r0, #1
   18508:	4770      	bx	lr
   1850a:	f090 0f00 	teq	r0, #0
   1850e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   18512:	bf08      	it	eq
   18514:	0249      	lsleq	r1, r1, #9
   18516:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1851a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1851e:	3a7f      	subs	r2, #127	; 0x7f
   18520:	bfc2      	ittt	gt
   18522:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   18526:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1852a:	4770      	bxgt	lr
   1852c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18530:	f04f 0300 	mov.w	r3, #0
   18534:	3a01      	subs	r2, #1
   18536:	dc5d      	bgt.n	185f4 <__aeabi_fmul+0x150>
   18538:	f112 0f19 	cmn.w	r2, #25
   1853c:	bfdc      	itt	le
   1853e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   18542:	4770      	bxle	lr
   18544:	f1c2 0200 	rsb	r2, r2, #0
   18548:	0041      	lsls	r1, r0, #1
   1854a:	fa21 f102 	lsr.w	r1, r1, r2
   1854e:	f1c2 0220 	rsb	r2, r2, #32
   18552:	fa00 fc02 	lsl.w	ip, r0, r2
   18556:	ea5f 0031 	movs.w	r0, r1, rrx
   1855a:	f140 0000 	adc.w	r0, r0, #0
   1855e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   18562:	bf08      	it	eq
   18564:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18568:	4770      	bx	lr
   1856a:	f092 0f00 	teq	r2, #0
   1856e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18572:	bf02      	ittt	eq
   18574:	0040      	lsleq	r0, r0, #1
   18576:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1857a:	3a01      	subeq	r2, #1
   1857c:	d0f9      	beq.n	18572 <__aeabi_fmul+0xce>
   1857e:	ea40 000c 	orr.w	r0, r0, ip
   18582:	f093 0f00 	teq	r3, #0
   18586:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1858a:	bf02      	ittt	eq
   1858c:	0049      	lsleq	r1, r1, #1
   1858e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18592:	3b01      	subeq	r3, #1
   18594:	d0f9      	beq.n	1858a <__aeabi_fmul+0xe6>
   18596:	ea41 010c 	orr.w	r1, r1, ip
   1859a:	e78f      	b.n	184bc <__aeabi_fmul+0x18>
   1859c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   185a0:	ea92 0f0c 	teq	r2, ip
   185a4:	bf18      	it	ne
   185a6:	ea93 0f0c 	teqne	r3, ip
   185aa:	d00a      	beq.n	185c2 <__aeabi_fmul+0x11e>
   185ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   185b0:	bf18      	it	ne
   185b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   185b6:	d1d8      	bne.n	1856a <__aeabi_fmul+0xc6>
   185b8:	ea80 0001 	eor.w	r0, r0, r1
   185bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   185c0:	4770      	bx	lr
   185c2:	f090 0f00 	teq	r0, #0
   185c6:	bf17      	itett	ne
   185c8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   185cc:	4608      	moveq	r0, r1
   185ce:	f091 0f00 	teqne	r1, #0
   185d2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   185d6:	d014      	beq.n	18602 <__aeabi_fmul+0x15e>
   185d8:	ea92 0f0c 	teq	r2, ip
   185dc:	d101      	bne.n	185e2 <__aeabi_fmul+0x13e>
   185de:	0242      	lsls	r2, r0, #9
   185e0:	d10f      	bne.n	18602 <__aeabi_fmul+0x15e>
   185e2:	ea93 0f0c 	teq	r3, ip
   185e6:	d103      	bne.n	185f0 <__aeabi_fmul+0x14c>
   185e8:	024b      	lsls	r3, r1, #9
   185ea:	bf18      	it	ne
   185ec:	4608      	movne	r0, r1
   185ee:	d108      	bne.n	18602 <__aeabi_fmul+0x15e>
   185f0:	ea80 0001 	eor.w	r0, r0, r1
   185f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   185f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   185fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18600:	4770      	bx	lr
   18602:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18606:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1860a:	4770      	bx	lr

0001860c <__aeabi_fdiv>:
   1860c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18610:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18614:	bf1e      	ittt	ne
   18616:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1861a:	ea92 0f0c 	teqne	r2, ip
   1861e:	ea93 0f0c 	teqne	r3, ip
   18622:	d069      	beq.n	186f8 <__aeabi_fdiv+0xec>
   18624:	eba2 0203 	sub.w	r2, r2, r3
   18628:	ea80 0c01 	eor.w	ip, r0, r1
   1862c:	0249      	lsls	r1, r1, #9
   1862e:	ea4f 2040 	mov.w	r0, r0, lsl #9
   18632:	d037      	beq.n	186a4 <__aeabi_fdiv+0x98>
   18634:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18638:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   1863c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   18640:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18644:	428b      	cmp	r3, r1
   18646:	bf38      	it	cc
   18648:	005b      	lslcc	r3, r3, #1
   1864a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1864e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   18652:	428b      	cmp	r3, r1
   18654:	bf24      	itt	cs
   18656:	1a5b      	subcs	r3, r3, r1
   18658:	ea40 000c 	orrcs.w	r0, r0, ip
   1865c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   18660:	bf24      	itt	cs
   18662:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   18666:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1866a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1866e:	bf24      	itt	cs
   18670:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   18674:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18678:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1867c:	bf24      	itt	cs
   1867e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   18682:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18686:	011b      	lsls	r3, r3, #4
   18688:	bf18      	it	ne
   1868a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1868e:	d1e0      	bne.n	18652 <__aeabi_fdiv+0x46>
   18690:	2afd      	cmp	r2, #253	; 0xfd
   18692:	f63f af50 	bhi.w	18536 <__aeabi_fmul+0x92>
   18696:	428b      	cmp	r3, r1
   18698:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1869c:	bf08      	it	eq
   1869e:	f020 0001 	biceq.w	r0, r0, #1
   186a2:	4770      	bx	lr
   186a4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   186a8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   186ac:	327f      	adds	r2, #127	; 0x7f
   186ae:	bfc2      	ittt	gt
   186b0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   186b4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   186b8:	4770      	bxgt	lr
   186ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   186be:	f04f 0300 	mov.w	r3, #0
   186c2:	3a01      	subs	r2, #1
   186c4:	e737      	b.n	18536 <__aeabi_fmul+0x92>
   186c6:	f092 0f00 	teq	r2, #0
   186ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   186ce:	bf02      	ittt	eq
   186d0:	0040      	lsleq	r0, r0, #1
   186d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   186d6:	3a01      	subeq	r2, #1
   186d8:	d0f9      	beq.n	186ce <__aeabi_fdiv+0xc2>
   186da:	ea40 000c 	orr.w	r0, r0, ip
   186de:	f093 0f00 	teq	r3, #0
   186e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   186e6:	bf02      	ittt	eq
   186e8:	0049      	lsleq	r1, r1, #1
   186ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   186ee:	3b01      	subeq	r3, #1
   186f0:	d0f9      	beq.n	186e6 <__aeabi_fdiv+0xda>
   186f2:	ea41 010c 	orr.w	r1, r1, ip
   186f6:	e795      	b.n	18624 <__aeabi_fdiv+0x18>
   186f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   186fc:	ea92 0f0c 	teq	r2, ip
   18700:	d108      	bne.n	18714 <__aeabi_fdiv+0x108>
   18702:	0242      	lsls	r2, r0, #9
   18704:	f47f af7d 	bne.w	18602 <__aeabi_fmul+0x15e>
   18708:	ea93 0f0c 	teq	r3, ip
   1870c:	f47f af70 	bne.w	185f0 <__aeabi_fmul+0x14c>
   18710:	4608      	mov	r0, r1
   18712:	e776      	b.n	18602 <__aeabi_fmul+0x15e>
   18714:	ea93 0f0c 	teq	r3, ip
   18718:	d104      	bne.n	18724 <__aeabi_fdiv+0x118>
   1871a:	024b      	lsls	r3, r1, #9
   1871c:	f43f af4c 	beq.w	185b8 <__aeabi_fmul+0x114>
   18720:	4608      	mov	r0, r1
   18722:	e76e      	b.n	18602 <__aeabi_fmul+0x15e>
   18724:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18728:	bf18      	it	ne
   1872a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1872e:	d1ca      	bne.n	186c6 <__aeabi_fdiv+0xba>
   18730:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   18734:	f47f af5c 	bne.w	185f0 <__aeabi_fmul+0x14c>
   18738:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   1873c:	f47f af3c 	bne.w	185b8 <__aeabi_fmul+0x114>
   18740:	e75f      	b.n	18602 <__aeabi_fmul+0x15e>
   18742:	bf00      	nop

00018744 <__gesf2>:
   18744:	f04f 3cff 	mov.w	ip, #4294967295
   18748:	e006      	b.n	18758 <__cmpsf2+0x4>
   1874a:	bf00      	nop

0001874c <__lesf2>:
   1874c:	f04f 0c01 	mov.w	ip, #1
   18750:	e002      	b.n	18758 <__cmpsf2+0x4>
   18752:	bf00      	nop

00018754 <__cmpsf2>:
   18754:	f04f 0c01 	mov.w	ip, #1
   18758:	f84d cd04 	str.w	ip, [sp, #-4]!
   1875c:	ea4f 0240 	mov.w	r2, r0, lsl #1
   18760:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18764:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18768:	bf18      	it	ne
   1876a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1876e:	d011      	beq.n	18794 <__cmpsf2+0x40>
   18770:	b001      	add	sp, #4
   18772:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   18776:	bf18      	it	ne
   18778:	ea90 0f01 	teqne	r0, r1
   1877c:	bf58      	it	pl
   1877e:	ebb2 0003 	subspl.w	r0, r2, r3
   18782:	bf88      	it	hi
   18784:	17c8      	asrhi	r0, r1, #31
   18786:	bf38      	it	cc
   18788:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   1878c:	bf18      	it	ne
   1878e:	f040 0001 	orrne.w	r0, r0, #1
   18792:	4770      	bx	lr
   18794:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18798:	d102      	bne.n	187a0 <__cmpsf2+0x4c>
   1879a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   1879e:	d105      	bne.n	187ac <__cmpsf2+0x58>
   187a0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   187a4:	d1e4      	bne.n	18770 <__cmpsf2+0x1c>
   187a6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   187aa:	d0e1      	beq.n	18770 <__cmpsf2+0x1c>
   187ac:	f85d 0b04 	ldr.w	r0, [sp], #4
   187b0:	4770      	bx	lr
   187b2:	bf00      	nop

000187b4 <__aeabi_cfrcmple>:
   187b4:	4684      	mov	ip, r0
   187b6:	4608      	mov	r0, r1
   187b8:	4661      	mov	r1, ip
   187ba:	e7ff      	b.n	187bc <__aeabi_cfcmpeq>

000187bc <__aeabi_cfcmpeq>:
   187bc:	b50f      	push	{r0, r1, r2, r3, lr}
   187be:	f7ff ffc9 	bl	18754 <__cmpsf2>
   187c2:	2800      	cmp	r0, #0
   187c4:	bf48      	it	mi
   187c6:	f110 0f00 	cmnmi.w	r0, #0
   187ca:	bd0f      	pop	{r0, r1, r2, r3, pc}

000187cc <__aeabi_fcmpeq>:
   187cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   187d0:	f7ff fff4 	bl	187bc <__aeabi_cfcmpeq>
   187d4:	bf0c      	ite	eq
   187d6:	2001      	moveq	r0, #1
   187d8:	2000      	movne	r0, #0
   187da:	f85d fb08 	ldr.w	pc, [sp], #8
   187de:	bf00      	nop

000187e0 <__aeabi_fcmplt>:
   187e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   187e4:	f7ff ffea 	bl	187bc <__aeabi_cfcmpeq>
   187e8:	bf34      	ite	cc
   187ea:	2001      	movcc	r0, #1
   187ec:	2000      	movcs	r0, #0
   187ee:	f85d fb08 	ldr.w	pc, [sp], #8
   187f2:	bf00      	nop

000187f4 <__aeabi_fcmple>:
   187f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   187f8:	f7ff ffe0 	bl	187bc <__aeabi_cfcmpeq>
   187fc:	bf94      	ite	ls
   187fe:	2001      	movls	r0, #1
   18800:	2000      	movhi	r0, #0
   18802:	f85d fb08 	ldr.w	pc, [sp], #8
   18806:	bf00      	nop

00018808 <__aeabi_fcmpge>:
   18808:	f84d ed08 	str.w	lr, [sp, #-8]!
   1880c:	f7ff ffd2 	bl	187b4 <__aeabi_cfrcmple>
   18810:	bf94      	ite	ls
   18812:	2001      	movls	r0, #1
   18814:	2000      	movhi	r0, #0
   18816:	f85d fb08 	ldr.w	pc, [sp], #8
   1881a:	bf00      	nop

0001881c <__aeabi_fcmpgt>:
   1881c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18820:	f7ff ffc8 	bl	187b4 <__aeabi_cfrcmple>
   18824:	bf34      	ite	cc
   18826:	2001      	movcc	r0, #1
   18828:	2000      	movcs	r0, #0
   1882a:	f85d fb08 	ldr.w	pc, [sp], #8
   1882e:	bf00      	nop

00018830 <__aeabi_f2iz>:
   18830:	ea4f 0240 	mov.w	r2, r0, lsl #1
   18834:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   18838:	d30f      	bcc.n	1885a <__aeabi_f2iz+0x2a>
   1883a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1883e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   18842:	d90d      	bls.n	18860 <__aeabi_f2iz+0x30>
   18844:	ea4f 2300 	mov.w	r3, r0, lsl #8
   18848:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1884c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18850:	fa23 f002 	lsr.w	r0, r3, r2
   18854:	bf18      	it	ne
   18856:	4240      	negne	r0, r0
   18858:	4770      	bx	lr
   1885a:	f04f 0000 	mov.w	r0, #0
   1885e:	4770      	bx	lr
   18860:	f112 0f61 	cmn.w	r2, #97	; 0x61
   18864:	d101      	bne.n	1886a <__aeabi_f2iz+0x3a>
   18866:	0242      	lsls	r2, r0, #9
   18868:	d105      	bne.n	18876 <__aeabi_f2iz+0x46>
   1886a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   1886e:	bf08      	it	eq
   18870:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   18874:	4770      	bx	lr
   18876:	f04f 0000 	mov.w	r0, #0
   1887a:	4770      	bx	lr

0001887c <memcpy>:
   1887c:	2a0f      	cmp	r2, #15
   1887e:	b4f0      	push	{r4, r5, r6, r7}
   18880:	d945      	bls.n	1890e <memcpy+0x92>
   18882:	ea40 0301 	orr.w	r3, r0, r1
   18886:	079b      	lsls	r3, r3, #30
   18888:	d145      	bne.n	18916 <memcpy+0x9a>
   1888a:	f1a2 0710 	sub.w	r7, r2, #16
   1888e:	460c      	mov	r4, r1
   18890:	4603      	mov	r3, r0
   18892:	093f      	lsrs	r7, r7, #4
   18894:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   18898:	3610      	adds	r6, #16
   1889a:	6825      	ldr	r5, [r4, #0]
   1889c:	3310      	adds	r3, #16
   1889e:	3410      	adds	r4, #16
   188a0:	f843 5c10 	str.w	r5, [r3, #-16]
   188a4:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   188a8:	f843 5c0c 	str.w	r5, [r3, #-12]
   188ac:	f854 5c08 	ldr.w	r5, [r4, #-8]
   188b0:	f843 5c08 	str.w	r5, [r3, #-8]
   188b4:	f854 5c04 	ldr.w	r5, [r4, #-4]
   188b8:	f843 5c04 	str.w	r5, [r3, #-4]
   188bc:	42b3      	cmp	r3, r6
   188be:	d1ec      	bne.n	1889a <memcpy+0x1e>
   188c0:	1c7b      	adds	r3, r7, #1
   188c2:	f002 0c0f 	and.w	ip, r2, #15
   188c6:	f1bc 0f03 	cmp.w	ip, #3
   188ca:	ea4f 1303 	mov.w	r3, r3, lsl #4
   188ce:	4419      	add	r1, r3
   188d0:	4403      	add	r3, r0
   188d2:	d922      	bls.n	1891a <memcpy+0x9e>
   188d4:	460e      	mov	r6, r1
   188d6:	461d      	mov	r5, r3
   188d8:	4664      	mov	r4, ip
   188da:	f856 7b04 	ldr.w	r7, [r6], #4
   188de:	3c04      	subs	r4, #4
   188e0:	2c03      	cmp	r4, #3
   188e2:	f845 7b04 	str.w	r7, [r5], #4
   188e6:	d8f8      	bhi.n	188da <memcpy+0x5e>
   188e8:	f1ac 0404 	sub.w	r4, ip, #4
   188ec:	f002 0203 	and.w	r2, r2, #3
   188f0:	f024 0403 	bic.w	r4, r4, #3
   188f4:	3404      	adds	r4, #4
   188f6:	4423      	add	r3, r4
   188f8:	4421      	add	r1, r4
   188fa:	b132      	cbz	r2, 1890a <memcpy+0x8e>
   188fc:	440a      	add	r2, r1
   188fe:	f811 4b01 	ldrb.w	r4, [r1], #1
   18902:	4291      	cmp	r1, r2
   18904:	f803 4b01 	strb.w	r4, [r3], #1
   18908:	d1f9      	bne.n	188fe <memcpy+0x82>
   1890a:	bcf0      	pop	{r4, r5, r6, r7}
   1890c:	4770      	bx	lr
   1890e:	4603      	mov	r3, r0
   18910:	2a00      	cmp	r2, #0
   18912:	d1f3      	bne.n	188fc <memcpy+0x80>
   18914:	e7f9      	b.n	1890a <memcpy+0x8e>
   18916:	4603      	mov	r3, r0
   18918:	e7f0      	b.n	188fc <memcpy+0x80>
   1891a:	4662      	mov	r2, ip
   1891c:	2a00      	cmp	r2, #0
   1891e:	d1ed      	bne.n	188fc <memcpy+0x80>
   18920:	e7f3      	b.n	1890a <memcpy+0x8e>
   18922:	bf00      	nop

00018924 <memset>:
   18924:	0783      	lsls	r3, r0, #30
   18926:	b4f0      	push	{r4, r5, r6, r7}
   18928:	d048      	beq.n	189bc <memset+0x98>
   1892a:	1e54      	subs	r4, r2, #1
   1892c:	2a00      	cmp	r2, #0
   1892e:	d043      	beq.n	189b8 <memset+0x94>
   18930:	b2cd      	uxtb	r5, r1
   18932:	4603      	mov	r3, r0
   18934:	e002      	b.n	1893c <memset+0x18>
   18936:	2c00      	cmp	r4, #0
   18938:	d03e      	beq.n	189b8 <memset+0x94>
   1893a:	4614      	mov	r4, r2
   1893c:	f803 5b01 	strb.w	r5, [r3], #1
   18940:	f013 0f03 	tst.w	r3, #3
   18944:	f104 32ff 	add.w	r2, r4, #4294967295
   18948:	d1f5      	bne.n	18936 <memset+0x12>
   1894a:	2c03      	cmp	r4, #3
   1894c:	d92d      	bls.n	189aa <memset+0x86>
   1894e:	b2cd      	uxtb	r5, r1
   18950:	2c0f      	cmp	r4, #15
   18952:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   18956:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1895a:	d918      	bls.n	1898e <memset+0x6a>
   1895c:	f1a4 0710 	sub.w	r7, r4, #16
   18960:	f103 0610 	add.w	r6, r3, #16
   18964:	461a      	mov	r2, r3
   18966:	093f      	lsrs	r7, r7, #4
   18968:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   1896c:	6015      	str	r5, [r2, #0]
   1896e:	3210      	adds	r2, #16
   18970:	f842 5c0c 	str.w	r5, [r2, #-12]
   18974:	f842 5c08 	str.w	r5, [r2, #-8]
   18978:	f842 5c04 	str.w	r5, [r2, #-4]
   1897c:	42b2      	cmp	r2, r6
   1897e:	d1f5      	bne.n	1896c <memset+0x48>
   18980:	f004 040f 	and.w	r4, r4, #15
   18984:	3701      	adds	r7, #1
   18986:	2c03      	cmp	r4, #3
   18988:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   1898c:	d90d      	bls.n	189aa <memset+0x86>
   1898e:	461e      	mov	r6, r3
   18990:	4622      	mov	r2, r4
   18992:	3a04      	subs	r2, #4
   18994:	f846 5b04 	str.w	r5, [r6], #4
   18998:	2a03      	cmp	r2, #3
   1899a:	d8fa      	bhi.n	18992 <memset+0x6e>
   1899c:	1f22      	subs	r2, r4, #4
   1899e:	f004 0403 	and.w	r4, r4, #3
   189a2:	f022 0203 	bic.w	r2, r2, #3
   189a6:	3204      	adds	r2, #4
   189a8:	4413      	add	r3, r2
   189aa:	b12c      	cbz	r4, 189b8 <memset+0x94>
   189ac:	b2c9      	uxtb	r1, r1
   189ae:	441c      	add	r4, r3
   189b0:	f803 1b01 	strb.w	r1, [r3], #1
   189b4:	42a3      	cmp	r3, r4
   189b6:	d1fb      	bne.n	189b0 <memset+0x8c>
   189b8:	bcf0      	pop	{r4, r5, r6, r7}
   189ba:	4770      	bx	lr
   189bc:	4614      	mov	r4, r2
   189be:	4603      	mov	r3, r0
   189c0:	e7c3      	b.n	1894a <memset+0x26>
   189c2:	bf00      	nop

000189c4 <strncpy>:
   189c4:	ea40 0301 	orr.w	r3, r0, r1
   189c8:	079b      	lsls	r3, r3, #30
   189ca:	b470      	push	{r4, r5, r6}
   189cc:	d12b      	bne.n	18a26 <strncpy+0x62>
   189ce:	2a03      	cmp	r2, #3
   189d0:	bf84      	itt	hi
   189d2:	460b      	movhi	r3, r1
   189d4:	4605      	movhi	r5, r0
   189d6:	d926      	bls.n	18a26 <strncpy+0x62>
   189d8:	4619      	mov	r1, r3
   189da:	f853 4b04 	ldr.w	r4, [r3], #4
   189de:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   189e2:	ea26 0604 	bic.w	r6, r6, r4
   189e6:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   189ea:	d105      	bne.n	189f8 <strncpy+0x34>
   189ec:	3a04      	subs	r2, #4
   189ee:	f845 4b04 	str.w	r4, [r5], #4
   189f2:	2a03      	cmp	r2, #3
   189f4:	4619      	mov	r1, r3
   189f6:	d8ef      	bhi.n	189d8 <strncpy+0x14>
   189f8:	b19a      	cbz	r2, 18a22 <strncpy+0x5e>
   189fa:	780c      	ldrb	r4, [r1, #0]
   189fc:	3a01      	subs	r2, #1
   189fe:	1c6b      	adds	r3, r5, #1
   18a00:	702c      	strb	r4, [r5, #0]
   18a02:	b13c      	cbz	r4, 18a14 <strncpy+0x50>
   18a04:	b16a      	cbz	r2, 18a22 <strncpy+0x5e>
   18a06:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   18a0a:	3a01      	subs	r2, #1
   18a0c:	f803 4b01 	strb.w	r4, [r3], #1
   18a10:	2c00      	cmp	r4, #0
   18a12:	d1f7      	bne.n	18a04 <strncpy+0x40>
   18a14:	b12a      	cbz	r2, 18a22 <strncpy+0x5e>
   18a16:	441a      	add	r2, r3
   18a18:	2100      	movs	r1, #0
   18a1a:	f803 1b01 	strb.w	r1, [r3], #1
   18a1e:	4293      	cmp	r3, r2
   18a20:	d1fb      	bne.n	18a1a <strncpy+0x56>
   18a22:	bc70      	pop	{r4, r5, r6}
   18a24:	4770      	bx	lr
   18a26:	4605      	mov	r5, r0
   18a28:	e7e6      	b.n	189f8 <strncpy+0x34>
   18a2a:	bf00      	nop

00018a2c <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   18a2c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   18a2e:	e003      	b.n	18a38 <LoopCopyDataInit>

00018a30 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   18a30:	4b0a      	ldr	r3, [pc, #40]	; (18a5c <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   18a32:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   18a34:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   18a36:	3104      	adds	r1, #4

00018a38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18a38:	4809      	ldr	r0, [pc, #36]	; (18a60 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   18a3a:	4b0a      	ldr	r3, [pc, #40]	; (18a64 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   18a3c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   18a3e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   18a40:	d3f6      	bcc.n	18a30 <CopyDataInit>
	ldr	r2, =_sbss
   18a42:	4a09      	ldr	r2, [pc, #36]	; (18a68 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   18a44:	e002      	b.n	18a4c <LoopFillZerobss>

00018a46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   18a46:	2300      	movs	r3, #0
	str	r3, [r2], #4
   18a48:	f842 3b04 	str.w	r3, [r2], #4

00018a4c <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18a4c:	4b07      	ldr	r3, [pc, #28]	; (18a6c <LoopFillZerobss+0x20>)
	cmp	r2, r3
   18a4e:	429a      	cmp	r2, r3
	bcc	FillZerobss
   18a50:	d3f9      	bcc.n	18a46 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   18a52:	f7e7 fc73 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   18a56:	f7fe fe7f 	bl	17758 <main>
	bx	lr    
   18a5a:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   18a5c:	00018b64 	.word	0x00018b64
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18a60:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   18a64:	200005d8 	.word	0x200005d8
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   18a68:	200005d8 	.word	0x200005d8
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18a6c:	2004cdd8 	.word	0x2004cdd8

00018a70 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   18a70:	e7fe      	b.n	18a70 <ADC1_2_IRQHandler>
   18a72:	0000      	movs	r0, r0
   18a74:	65532d52 	.word	0x65532d52
   18a78:	6e617672 	.word	0x6e617672
   18a7c:	000d0a74 	.word	0x000d0a74
   18a80:	454c4449 	.word	0x454c4449
   18a84:	00000000 	.word	0x00000000

00018a88 <ulKernelPriority>:
   18a88:	0000007f                                ....

00018a8c <heapSTRUCT_SIZE>:
   18a8c:	00010010                                         ..

00018a8e <version>:
   18a8e:	3d5a0001                                         ..

00018a90 <utm_east0>:
   18a90:	00093d5a                                Z=..

00018a94 <utm_north0>:
   18a94:	005875e6                                .uX.

00018a98 <climb_pgain>:
   18a98:	bcf5c28f                                ....

00018a9c <climb_igain>:
   18a9c:	3dcccccd                                ...=

00018aa0 <level_gaz>:
   18aa0:	3e9eb852                                R..>

00018aa4 <nav_east0>:
   18aa4:	00093d5a                                Z=..

00018aa8 <nav_north0>:
   18aa8:	005875e6                                .uX.

00018aac <nb_waypoint>:
   18aac:	00000007 33323130 37363534 42413938     ....0123456789AB
   18abc:	46454443                                CDEF

00018ac0 <failsafe>:
	...
   18ad4:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   18ae4:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   18af4:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   18b04:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   18b14:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   18b24:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   18b34:	00000074 65532d49 6e617672 00000074     t...I-Servant...
   18b44:	65532d43 6e617672 00000074 65532d4f     C-Servant...O-Se
   18b54:	6e617672 00000074 6e657665 00000074     rvant...event...
